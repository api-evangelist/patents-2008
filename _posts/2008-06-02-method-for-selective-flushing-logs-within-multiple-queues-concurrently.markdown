---

title: Method for selective flushing logs within multiple queues concurrently
abstract: A logger in a process of a computer system creates a log queue for each execution context and/or processing resource in the process. A log is created in the log queue for each log request and log information associated with the log request is stored into the log. All logs in each log queue except for the most recently added log in each log queue are flushed prior to the process completing.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08468528&OS=08468528&RS=08468528
owner: Microsoft Corporation
number: 08468528
owner_city: Redmond
owner_country: US
publication_date: 20080602
---
In testing and performing diagnostics in a computer system processes executing on the computer system may be logged to allow for debugging. A process is typically logged by providing information generated by the process to a location where it can be examined. The information provided at selected points in the execution of the process may be compared to expected information to detect discrepancies between the expected information and the logged information.

Computer systems may allow multiple execution contexts e.g. threads fibers or child processes of a process to be executed concurrently. With concurrent execution various techniques may be used to make the logging concurrency safe to ensure that the desired information is produced when the process is logged. These techniques however may affect the throughput of the process in the computer system and may significantly alter the execution paths of the process in the computer system when the process is executed. The techniques may also hide races between different execution contexts of the process due to memory reordering.

This summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This summary is not intended to identify key features or essential features of the claimed subject matter nor is it intended to be used to limit the scope of the claimed subject matter.

A logger in a process of a computer system creates a log queue for each execution context and or processing resource in the process. A log is created in the log queue for each log request and log information associated with the log request is stored into the log. All logs in each log queue except for the most recently added log in each log queue are flushed prior to the process completing.

In the following Detailed Description reference is made to the accompanying drawings which form a part hereof and in which is shown by way of illustration specific embodiments in which the invention may be practiced. In this regard directional terminology such as top bottom front back leading trailing etc. is used with reference to the orientation of the Figure s being described. Because components of embodiments can be positioned in a number of different orientations the directional terminology is used for purposes of illustration and is in no way limiting. It is to be understood that other embodiments may be utilized and structural or logical changes may be made without departing from the scope of the present invention. The following detailed description therefore is not to be taken in a limiting sense and the scope of the present invention is defined by the appended claims.

It is to be understood that the features of the various exemplary embodiments described herein may be combined with each other unless specifically noted otherwise.

Runtime environment represents a runtime mode of operation in a computer system such as a computer system shown in and described in additional detail below where the computer system is executing instructions. The computer system generates runtime environment from a runtime platform such as a runtime platform shown in and described in additional detail below.

Runtime environment includes an least one invoked process a resource management layer and a set of hardware threads M where M is an integer that is greater than or equal to one and denotes the Mth hardware thread M . Runtime environment allows tasks from process to be executed along with tasks from any other processes that co exist with process not shown using resource management layer and hardware threads M . Runtime environment operates in conjunction resource management layer to allow process to obtain processor and other resources of the computer system e.g. hardware threads M .

Runtime environment includes a scheduler function that generates scheduler . In one embodiment the scheduler function is implemented as a scheduler application programming interface API . In other embodiments the scheduler function may be implemented using other suitable programming constructs. When invoked the scheduler function creates scheduler in process where scheduler operates to schedule tasks of process for execution by one or more hardware threads M . Runtime environment may exploit fine grained concurrency that application or library developers express in their programs e.g. process using accompanying tools that are aware of the facilities that the scheduler function provides.

Process includes an allocation of processing and other resources that host one or more execution contexts viz. threads fibers or child processes . Process obtains access to the processing and other resources in the computer system e.g. hardware threads M from resource management layer . Process causes tasks to be executed using the processing and other resources.

Process generates work in tasks of variable length where each task is associated with an execution context in scheduler . Each task includes a sequence of instructions that perform a unit of work when executed by the computer system. Each execution context forms a thread or analogous OS concept such as child process that executes associated tasks on allocated processing resources. Each execution context includes program state and machine state information. Execution contexts may terminate when there are no more tasks left to execute. For each task runtime environment and or process either assign the task to scheduler to be scheduled for execution or otherwise cause the task to be executed without using scheduler .

Process may be configured to operate in a computer system based on any suitable execution model such as a stack model or an interpreter model and may represent any suitable type of code such as an application a library function or an operating system service. Process has a program state and machine state associated with a set of allocated resources that include a defined memory address space. Process executes autonomously or substantially autonomously from any co existing processes in runtime environment . Accordingly process does not adversely alter the program state of co existing processes or the machine state of any resources allocated to co existing processes. Similarly co existing processes do not adversely alter the program state of process or the machine state of any resources allocated to process .

Resource management layer allocates processing resources to process by assigning one or more hardware threads to process . Resource management layer exists separately from an operating system of the computer system not shown in in the embodiment of . In other embodiments resource management layer or some or all of the functions thereof may be included in the operating system.

Hardware threads reside in execution cores of a set or one or more processor packages e.g. processor packages shown in and described in additional detail below of the computer system. Each hardware thread is configured to execute instructions independently or substantially independently from the other execution cores and includes a machine state. Hardware threads may be included in a single processor package or may be distributed across multiple processor packages. Each execution core in a processor package may include one or more hardware threads .

Process implicitly or explicitly causes scheduler to be created via the scheduler function provided by runtime environment . Scheduler instance may be implicitly created when process uses APIs available in the computer system or programming language features. In response to the API or programming language features runtime environment creates scheduler with a default policy. To explicitly create a scheduler process may invoke the scheduler function provided by runtime environment and specify one or more policies for scheduler .

Scheduler interacts with resource management layer to negotiate processing and other resources of the computer system in a manner that is transparent to process . Resource management layer allocates hardware threads to scheduler based on supply and demand and any policies of scheduler .

In the embodiment shown in scheduler manages the processing resources by creating virtual processors that form an abstraction of underlying hardware threads . Scheduler includes a set of virtual processors N where N is an integer greater than or equal to one and denotes the Nth virtual processor N . Scheduler multiplexes virtual processors onto hardware threads by mapping each virtual processor to a hardware thread . Scheduler may map more than one virtual processor onto a particular hardware thread but maps only one hardware thread to each virtual processor . In other embodiments scheduler manages processing resources in other suitable ways to cause instructions of process to be executed by hardware threads .

The set of execution contexts in scheduler includes a set of execution contexts N with respective associated tasks N that are being executed by respective virtual processors N and at any point during the execution of process a set of zero or more execution contexts . Each execution context and includes state information that indicates whether an execution context or is executing runnable e.g. in response to becoming unblocked or added to scheduler or blocked. Execution contexts that are executing have been attached to a virtual processor and are currently executing. Execution contexts that are runnable include an associated task and are ready to be executed by an available virtual processor . Execution contexts that are blocked also include an associated task and are waiting for data a message or an event that is being generated by another execution context or will be generated by another execution context .

Each execution context executing on a virtual processor may generate in the course of its execution additional tasks which are organized in any suitable way e.g. added to work queues not shown in . Work may be created by using either application programming interfaces APIs provided by runtime environment or programming language features and corresponding tools in one embodiment. When processing resources are available to scheduler tasks are assigned to execution contexts or that execute them to completion or a blocking point e.g. waiting for a message or a stolen child task to complete on virtual processors before picking up new tasks. When a task unblocks the task is re scheduled to execute on an available virtual processor possibly with priority given to choosing a virtual processor on the hardware thread where it executed before blocking in the hope that the memory hierarchy viz. cache hierarchy already contains data that can be optimally reused. An execution context executing on a virtual processor may also unblock other execution contexts by generating data a message or an event that will be used by other execution contexts .

Each task in scheduler may be realized e.g. realized tasks and which indicates that an execution context or has been or will be attached to the task and the task is ready to execute. Realized tasks typically include unblocked execution contexts and scheduled agents. A task that is not realized is termed unrealized. Unrealized tasks e.g. tasks may be created as child tasks generated by the execution of parent tasks and may be generated by parallel constructs e.g. parallel parallel for begin and finish . Scheduler may be organized into a synchronized collection e.g. a stack and or a queue for logically independent tasks with execution contexts i.e. realized tasks along with a list of workstealing queues for dependent tasks i.e. unrealized tasks as illustrated in the embodiment of described below.

Upon completion blocking or other interruption e.g. explicit yielding or forced preemption of a task associated with an execution context running on a virtual processor the virtual processor becomes available to execute another realized task or unrealized task . Scheduler searches for a runnable execution context or an unrealized task to attach to the available virtual processor for execution in any suitable way. For example scheduler may first search for a runnable execution context to execute before searching for an unrealized task to execute. Scheduler continues attaching execution contexts to available virtual processors for execution until all execution contexts of scheduler have been executed.

In one embodiment process organizes tasks into one or more schedule groups and presents schedule groups to scheduler . is a block diagram illustrating an embodiment of a schedule group for use in scheduler .

Schedule group includes a runnables collection a realized task collection a work collection and a set of zero or more workstealing queues . Runnables collection contains a list of unblocked execution contexts . Scheduler adds an execution context to runnables collections when an execution context becomes unblocked. Realized task collection contains a list of realized tasks e.g. unstarted agents that may or may not have associated execution contexts . Scheduler adds a realized task to realized task collection when a new runnable task is presented to scheduler by process . Work queue contains a list of workstealing queues as indicated by an arrow and tracks the execution contexts that are executing tasks from the workstealing queues . Each workstealing queue includes one or more unrealized tasks .

Using the embodiment of scheduler may first search for unblocked execution contexts in the runnables collection of all schedule groups in scheduler . Scheduler may then search for realized tasks in the realized task collection of all schedule groups in scheduler before searching for unrealized tasks in the workstealing queues of the schedule groups .

In one embodiment a virtual processor that becomes available may attempt to locate a runnable execution context in the runnables collection or a realized task in the realized task collection in the schedule group from which the available virtual processor most recently obtained a runnable execution context i.e. the current schedule group . The available virtual processor may then attempt to locate a runnable execution context in the runnables collections or a realized task in the realized task collection in the remaining schedule groups of scheduler in a round robin or other suitable order. If no runnable execution context is found then the available virtual processor may then attempt to locate an unrealized task in the workstealing queues of the current schedule group before searching the workstealing queues in the remaining schedule groups of scheduler in a round robin or other suitable order.

Prior to executing tasks scheduler obtains execution contexts and from runtime environment or an operating system e.g. OS of . Available virtual processors locate and execute execution contexts to begin executing tasks. Virtual processors become available again in response to an execution context completing blocking or otherwise being interrupted. When virtual processors become available virtual processors switch to a runnable execution context or execute a next task or as a continuation on a current execution context if the previous task executed by the current execution context completed.

Referring back to in one embodiment scheduler is configured to operate in conjunction with logger . Logger includes a set of instructions executable by the computer system to cause log information to be provided to a stream as indicated by an arrow for testing diagnostic and or other suitable purposes. Stream may represent any suitable output destination for storing or displaying log information such as a console a file or a network. In one embodiment logger is implemented as a daemon that operates to detect log requests from tasks executing on processing resources of scheduler and cause the log information to be provided to stream . In other embodiments logger may be implemented using other suitable programming constructs to accomplish the functionality described herein.

Logger creates data structures that are safe to operate with concurrent scheduling of execution contexts by scheduler as shown in the embodiment of . is a block diagram illustrating an embodiment of log queues N in process where N is an integer that specifies the number of concurrent writers to log queues N and denotes the Nth log queue N . In one embodiment N is equal to the number of virtual processors . In another embodiment N is equal to the maximum number of concurrently executing execution contexts and .

Log queues N includes respective sets of zero or more logs N where each set N is configured as a linked list of logs by logger . Each log forms a node that stores logging information generated by a task executing on an execution context on a virtual processor . Logger initializes each log queue N to include a null log as the initial head log of the linked list.

Log queues N correspond to either respective virtual processors N or respective execution contexts N as indicated by respective arrows N .

In one embodiment logger creates a log queue for each virtual processor and causes all log information generated by tasks executing on a virtual processor to be stored in logs corresponding to the log queue for the virtual processor . Logger may selectively create log queues for virtual processors that execute log requests in tasks or may create log queues for all virtual processors . Where logger creates log queues for all virtual processors logger may create a log queue each time a corresponding virtual processor is added to scheduler and may delete a log queue each time a corresponding virtual processor is removed from scheduler . Log queues N for respective virtual processors N may remain throughout the execution of process or may be deleted subsequent to completing log requests.

In another embodiment logger creates a log queue for each execution context and causes all log information generated by a task executing on an execution context to be stored in logs corresponding to the log queue for the execution context . Logger may selectively create log queues for execution contexts that execute log requests in tasks or may create log queues for all execution contexts . Where logger creates log queues for all execution contexts logger may create a log queue each time a corresponding execution context is attached to a virtual processor and may delete a log queue each time a corresponding execution context completes blocks or is interrupted on a virtual processor . Each log queues may be stored as part of an execution context switch when a corresponding execution context blocks or is interrupted and may be restored when the corresponding execution context resumes. Each log queue may be flushed and deleted in response to a corresponding execution context completing or otherwise being retired.

In a determination is made by logger as to whether a log request has been detected as indicated in a block . Each time that logger detects a log request logger creates a log at a head of a log queue corresponding to the execution context and or the virtual processor that executed the log request as indicated in a block . For example logger adds a new head log in the set of logs in log queue for each a log request executed by task on execution context on virtual processor . Similarly logger adds a new head log in the set of logs in log queue for each a log request executed by task on execution context on virtual processor and so on. Each time logger adds a new head log into a set of logs logger converts the previous head log into a head next log .

Subsequent to a new head log being created an execution context executing on a virtual processor causes log information to be stored into the new head log in the log queue corresponding to the execution context and or virtual processor as indicated in a block . Logger causes a logging function associated with a logging request to be executed on execution context that executed the task that included the logging request. In response to executing the logging function the execution context causes log information generated by one or more tasks executing on the execution context to be stored in the most recently added log in the corresponding log queue . The logging function may include any suitable synchronization information e.g. time information to be included in the log information stored into the new head log . By causing log information to be stored to only the current head log in each log queue logger ensures that execution contexts of process do not access logs other than the head log in each log queue .

Referring to the example of a log queue at a time t includes log to log P where P is an integer greater than or equal to two and denotes the Pth log P . At time t log P represents the head log of log queue as indicated by a head pointer and log represents the tail log of log queue as indicated by a null pointer . At time t which is subsequent to time t logger creates a new head log P 1 in response to a log request and enques the new head log P 1 to log queue by causing new head log P 1 to point to the previous head log P and head pointer to point to new head log P 1 . Log information associated with the log request is stored in new head log P 1 .

Periodically a determination is made by logger as to whether to flush one or more log queues as indicated in a block . As used herein the term flush refers to safely removing one or more logs from one or more log queues and outputting the log or logs into stream . The determination may be triggered by a timer e.g. every few seconds an amount of data collected in a logs queue since it was last flushed a total amount of data logged since the last flush or in response to an external event such as a pending power down. When logger decides to flush one or more log queues logger also determines whether scheduler is being finalized as indicated in a block . If scheduler is not being finalized then logger flushes all logs except the head log i.e. the most recently added log of one or more log queues into stream as indicated in a block . Logger performs the flush prior to process completing. If scheduler is being finalized then logger flushes all logs including the head log of each log queue into stream as indicated in a block .

Logger does not flush the head log of log queues until scheduler is being finalized. By doing so logger inherently avoids a race between a logging function and a flushing function. As a result logging information may be safely stored into the head log at any time and all but head logs may be safely flushed at any time. At finalization of scheduler logger may ensure that all logging functions have been completed before performing the final flush of all logs into stream .

Referring to the example of logger flushes log queue at a time t which is subsequent to time t of . To do so logger dequeues logs through P i.e. log to log P by causing a flush pointer to point to log P and providing logs through P to stream as indicated by arrow . Contemporaneous with flushing logs through P logger causes head log P 1 to also become the tail log by pointing to null log . Any log information associated with the log request that created head log P 1 continues to be stored in head log P 1 . If scheduler is being finalized logger dequeues log P 1 and any logs added subsequent to log P 1 by flushing log P 1 and any subsequent logs into stream .

Subsequent to flushing logs into stream logger may order logs from all log queues in stream chronologically using the synchronization information stored with each log .

Computer system includes one or more processor packages a memory system zero or more input output devices zero or more display devices zero or more peripheral devices and zero or more network devices . Processor packages memory system input output devices display devices peripheral devices and network devices communicate using a set of interconnections that includes any suitable type number and configuration of controllers buses interfaces and or other wired or wireless connections.

Computer system represents any suitable processing device configured for a general purpose or a specific purpose. Examples of computer system include a server a personal computer a laptop computer a tablet computer a personal digital assistant PDA a mobile telephone and an audio video device. The components of computer system i.e. processor packages memory system input output devices display devices peripheral devices network devices and interconnections may be contained in a common housing not shown or in any suitable number of separate housings not shown .

Processor packages include hardware threads M . Each hardware thread in processor packages is configured to access and execute instructions stored in memory system . The instructions may include a basic input output system BIOS or firmware not shown an operating system OS a runtime platform applications and resource management layer also shown in . Each hardware thread may execute the instructions in conjunction with or in response to information received from input output devices display devices peripheral devices and or network devices .

Computer system boots and executes OS . OS includes instructions executable by hardware threads to manage the components of computer system and provide a set of functions that allow applications to access and use the components. In one embodiment OS is the Windows operating system. In other embodiments OS is another operating system suitable for use with computer system .

Resource management layer includes instructions that are executable in conjunction with OS to allocate resources of computer system including hardware threads as described above with reference to . Resource management layer may be included in computer system as a library of functions available to one or more applications or as an integrated part of OS .

Runtime platform includes instructions that are executable in conjunction with OS and resource management layer to generate runtime environment and provide runtime functions to applications . These runtime functions include a scheduler function as described in additional detail above with reference to . The runtime functions may be included in computer system as part of an application as a library of functions available to one or more applications or as an integrated part of OS and or resource management layer .

Each application includes instructions that are executable in conjunction with OS resource management layer and or runtime platform to cause desired operations to be performed by computer system . Each application represents one or more processes such as process as described above that may execute with scheduler as provided by runtime platform .

Memory system includes any suitable type number and configuration of volatile or non volatile storage devices configured to store instructions and data. The storage devices of memory system represent computer readable storage media that store computer executable instructions including OS resource management layer runtime platform and applications . The instructions are executable by computer system to perform the functions and methods of OS resource management layer runtime platform and applications described herein. Examples of storage devices in memory system include hard disk drives random access memory RAM read only memory ROM flash memory drives and cards and magnetic and optical disks.

Memory system stores instructions and data received from processor packages input output devices display devices peripheral devices and network devices . Memory system provides stored instructions and data to processor packages input output devices display devices peripheral devices and network devices .

Input output devices include any suitable type number and configuration of input output devices configured to input instructions or data from a user to computer system and output instructions or data from computer system to the user. Examples of input output devices include a keyboard a mouse a touchpad a touchscreen buttons dials knobs and switches.

Display devices include any suitable type number and configuration of display devices configured to output textual and or graphical information to a user of computer system . Examples of display devices include a monitor a display screen and a projector.

Peripheral devices include any suitable type number and configuration of peripheral devices configured to operate with one or more other components in computer system to perform general or specific processing functions.

Network devices include any suitable type number and configuration of network devices configured to allow computer system to communicate across one or more networks not shown . Network devices may operate according to any suitable networking protocol and or configuration to allow information to be transmitted by computer system to a network or received by computer system from a network.

The above embodiments may advantageously allow for concurrency safe logging and flushing with minimal or no synchronization primitives to result in a high throughput non intrusive logger. Accordingly the above embodiments may allow logging to be performed in a concurrent execution environment without locks and without using of interlocked exchanges i.e. without explicit synchronization through locks fences or barriers. In addition the above embodiments may avoid contentions and races in a multi threaded environment. The above embodiments may also allow for high throughput suitable for testing diagnostic and other suitable purposes in a concurrent execution environment. The above embodiments may further provide a general technique for instrumentation of concurrent code for profiling and debugging.

Although specific embodiments have been illustrated and described herein it will be appreciated by those of ordinary skill in the art that a variety of alternate and or equivalent implementations may be substituted for the specific embodiments shown and described without departing from the scope of the present invention. This application is intended to cover any adaptations or variations of the specific embodiments discussed herein. Therefore it is intended that this invention be limited only by the claims and the equivalents thereof.

