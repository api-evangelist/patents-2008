---

title: Method and system for socket API call emulation
abstract: A method and system for socket API call emulation facilitates communication between an application and non-networked I/O devices. The present invention intercepts and modifies IP-aware socket API calls en route from the application to non-networked I/O devices so that such calls are received by non-networked I/O devices as IP-unaware I/O access calls. The invention allows the application to use socket API calls to communicate with all entity types and thereby relieves an application developer of the burden to write and debug/edit separate code and documentation for non-networked I/O device types with which an application is expected to communicate. Socket API call emulation is in some embodiments performed by an emulation module within a socket API operatively coupled between an application and a device driver associated with a non-networked I/O device.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08413172&OS=08413172&RS=08413172
owner: Sharp Laboratories of America, Inc.
number: 08413172
owner_city: Camas
owner_country: US
publication_date: 20080820
---
The present invention relates to communication between an application and non networked input output I O devices and more particularly to a method and system for emulating socket application programming interface API calls to facilitate communication between an application executing on a computing device and non networked I O devices that are connected directly to the computing device.

Applications executing on computing devices use application programming interface API calls to communicate with other entities. API calls are handled using a variety of transport mechanisms depending on the destination entity. An API call destined to an application on a networked I O device reachable by the computing device hosting the source application may be a socket API call handled using an IP aware transport mechanism e.g. TCP IP packet whereas an API call destined to a non networked I O device connected directly to the computing device hosting the source application such as a RS 232 COM Universal Serial Bus USB Institute of Electrical and Electronics Engineers IEEE Std. 1284 Parallel Port and or IEEE Std. 1394 FireWire I O device may be handled using an IP unaware transport mechanism supported by the non networked I O device.

Because of differences among transport mechanisms application developers have conventionally had to develop and maintain separate code and documentation for each type of entity with which an application is expected to communicate. This requirement of separate coding and documentation has increased the amount of time and money spent on software development and increased code complexity.

In a basic feature the present invention provides a method and system for socket API call emulation that facilitates communication between an application and non networked I O devices. The present invention intercepts and modifies IP aware socket API calls en route from the application to non networked I O devices so that such calls are received by non networked I O devices as IP unaware I O access calls. The invention allows the application to use socket API calls to communicate with all entity types and thereby relieves an application developer of the burden to write and debug edit separate code and documentation for non networked I O device types with which an application is expected to communicate. Socket API call emulation is in some embodiments performed by an emulation module within a socket API operatively coupled between an application and a device driver associated with a non networked I O device.

In one aspect of the invention a computing device comprises an application a socket API operatively coupled with the application and a non networked I O device driver operatively coupled with the socket API wherein the socket API receives from the application a socket API call and in response selectively delivers to the non networked I O device driver based on an IP address included in the socket API call an IP unaware I O access call corresponding to the socket API call.

In some embodiments the socket API delivers the IP unaware call to the non networked I O device driver in response to determining that the IP address is assigned to a non networked I O device port associated with the non networked I O device driver.

In some embodiments the socket API delivers the socket API call to a TCP IP protocol stack in response to determining that the IP address is not assigned to a non networked I O device port associated with the non networked I O device driver.

In some embodiments the non networked I O device driver is selected from the group consisting of a COM USB Parallel Port and FireWire device driver.

In some embodiments the socket API selectively delivers to the non networked I O device driver based further on a TCP port number included in the socket API call an IP unaware I O access call corresponding to the socket API call.

In another aspect of the invention a method for socket API call emulation comprises the steps of receiving from an application a socket API call inspecting an IP address included in the socket API call and selectively delivering to a non networked I O device driver based on the IP address an IP unaware I O access call corresponding to the socket API call.

In some embodiments the IP unaware I O access call is delivered to the non networked I O device driver in response to determining that the IP address is assigned to a non networked I O device port associated with the non networked I O device driver.

In some embodiments the socket API call is delivered to a TCP IP protocol stack in response to determining that the IP address is not assigned to a non networked I O device port associated with the non networked I O device driver.

In some embodiments the non networked I O device driver is selected from the group consisting of a COM USB Parallel Port and FireWire device driver.

In yet another aspect of the invention a computing device comprises an application and a socket API operatively coupled with the application wherein the socket API receives from the application a socket API call and in response identifies a non networked I O device port as a destination for the call based on an IP address included in the call.

These and other aspects of the invention will be better understood by reference to the following detailed description taken in conjunction with the drawings that are briefly described below. Of course the invention is defined by the appended claims.

User interface receives inputs from a user of computing device via one or more input devices and displays outputs to the user via one or more output devices. Output devices include a display such as a liquid crystal display LCD organic light emitting diode OLED display. Input devices include for example a finger or stylus operated touch screen a scroll wheel or ball a keypad and or voice command module.

Non networked I O device port is a wired communication interface for transmitting and receiving information to from a non networked I O device over a wired connection. Non networked I O device may be for example a personal computer PDA cellular phone MFP device server device or data storage element. Non networked I O device port may be a serial or parallel interface such as a COM USB Parallel Port or FireWire interface for example. In some embodiments computing device has multiple non networked I O device ports of various types for transmitting and receiving information to from a respective multiple of non networked I O devices.

Networked I O device port is a wired or wireless communication interface for transmitting and receiving information to from a networked I O device e.g. over a network having wired and or wireless links and connective devices such as routers switches and or bridges. Networked I O device may be for example a personal computer PDA cellular phone MFP device server device or storage element. Networked I O device port may be for example a wired Ethernet interface wireless Ethernet WiFi interface or Worldwide Interoperability for Microwave Access WiMAX interface.

Processor executes in software operations supported by computing device . Turning to software elements of computing device executable by processor include an application a socket API a TCP IP protocol stack a non networked I O device driver and a networked I O device driver . Socket API includes an emulation module and a data store that stores an IP address assigned to non networked I O device port . Software elements executable by processor are stored in memory which includes one or more random access memories RAM and one or more read only memories ROM . In some embodiments socket API TCP IP stack non networked I O device driver and networked I O device driver are part of an embedded operating system.

Application communicates with non networked I O device via non networked I O device driver and non networked I O device port and communicates with networked I O device via TCP IP protocol stack networked I O device driver and networked I O device port by generating and delivering to socket API socket API calls. Socket API calls are IP aware that is use IP addressing to identify call destinations.

Socket API interfaces with application and via emulation module with non networked I O device driver to enable communication between application and non networked I O device . Socket API also interfaces with TCP IP stock to enable communication between application and an application on networked I O device . Socket API processes socket API calls received from application to create sockets that provide endpoints for data sessions bind sockets to destination IP addresses assigned to I O entities and remove bindings and close sockets when they are no longer needed. Such sockets include a socket bound to an IP address assigned to non networked I O device port and a socket bound to an IP address assigned to networked I O port .

Emulation module is a software subsystem of socket API that performs socket API call emulation to enable application and non networked I O device to seamlessly communicate. When socket API receives a socket API call from application module inspects the socket API call and determines whether a destination IP address included in the IP aware socket API call is stored in data store . If so the socket API call is intended for non networked I O device and socket API delivers to non networked I O device driver an IP unaware I O access call corresponding to the socket API call for further processing. If a destination IP address included in the socket API call is not stored in data store socket API delivers to TCP IP protocol stack the socket API call for further processing.

In some embodiments the IP addresses assigned to non networked I O device port are loopback addresses. IP version 4 IPv4 addresses in the range of 127.0.0.0 to 127.255.255.255 are reserved for an internal loopback function and are not transmitted by any networked I O device. By assigning a loopback address to non networked I O device port there is no risk that the IP address assigned to non networked I O device port will conflict with an address assigned to a networked I O device and additionally IP addresses that are assignable to networked I O devices are conserved. In the case where a computing device has multiple non networked I O device ports each of the non networked I O device ports is assigned a distinct loopback address e.g. COM port 127.0.1.1 Parallel Port 127.0.2.1 etc. all of which are stored in data store so that emulation module and application can differentiate and separately address the multiple non networked I O device ports and communicate with their respective non networked I O devices. In some embodiments loopback address ranges are assigned to non networked I O device port types for example COM ports may be mapped to loopback addresses in the range of 127.0.1.1 to 127.0.1.255 Parallel Ports may be mapped to loopback addresses in the range of 127.0.2.1 to 127.0.2.255 and USB ports may be mapped to loopback addresses in the range of 127.0.3.1 to 127.0.3.255.

TCP IP stack is a protocol stack that interfaces with socket API and networked I O device driver and enables application to communicate with an application on networked I O device via a conventional TCP connection. TCP IP stack processes socket API calls between socket API and networked I O device driver and provides TCP session and IP datagram services error handling and data buffering.

Non networked I O device driver is software that interfaces with emulation module and non networked I O device port and enables application to communicate with non networked I O device . Non networked I O device driver receives and processes IP unaware I O access calls from emulation module . Non networked I O device driver may be a COM USB Parallel Port or FireWire device driver for example.

Networked I O device driver is software that interfaces with TCP IP stack and networked I O device port and enables application to communicate with an application on networked I O device via a conventional TCP connection. Networked I O device driver in some embodiments provides Media Access Control MAC and Logical Link Control LLC services.

In some embodiments non networked I O device port IP address store includes both an IP address and a TCP port number for non networked I O device port . In these embodiments when socket API receives a socket API call from application emulation module inspects a destination IP address and TCP port number included in the socket API call and determines by consulting data store whether the socket API call is destined to non networked I O device port as indicated by a matching address and port number in store . If the socket API call is destined to non networked I O device port emulation module makes an IP unaware I O access call corresponding to the socket API call to non networked I O device driver associated with non networked I O device port for further processing and eventual delivery to non networked I O device .

Referring first to TCP IP based sockets are created for the multiple I O device ports using socket calls and bound to their respective destinations using bind calls. The COM port is assigned the loopback IP address 127.0.1.1 and TCP port number and the LPT port is assigned the loopback IP address 127.0.2.1 and TCP port number . Turning next to the TCP IP based sockets are made listening ports using listen calls and the sockets wait for incoming connection requests e.g. a socket API connect call on the multiple I O device ports. When an incoming connection request is received on one of the multiple I O device ports the connection is accepted using an accept call. Referring finally to incoming print data is read on the accepted connection using a recv call and processed after which the connection is closed using a close call.

It will be appreciated by those of ordinary skill in the art that the invention can be embodied in other specific forms without departing from the spirit or essential character hereof. The present description is therefore considered in all respects to be illustrative and not restrictive. The scope of the invention is indicated by the appended claims and all changes that come with in the meaning and range of equivalents thereof are intended to be embraced therein.

