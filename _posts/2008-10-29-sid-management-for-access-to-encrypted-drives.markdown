---

title: SID management for access to encrypted drives
abstract: A method and a system for unlocking a storage device that has become locked or cannot be unlocked are disclosed. A hint is generated from a key by removing bits and adding bits. A position of removed bits, a position of added bits, the number of removed bits and the number of added bits are stored and known securely. When the key cannot unlock a storage device corresponding to the key, the position of removed bits, the position of added bits, the number of removed bits (N) and the number of added bits are retrieved. Then, the added bits are removed in the hint. Each possible N bits are placed in the hint at the position of removed bits to generate 2possible keys. Then, each of 2possible key are tried to unlock the storage device.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08199917&OS=08199917&RS=08199917
owner: International Business Machines Corporation
number: 08199917
owner_city: Armonk
owner_country: US
publication_date: 20081029
---
The present invention generally relates to Security Identifier SID management of encrypted storage devices. More particularly the present invention relates to recovering a SID when the SID was lost or was corrupted.

A storage device e.g. a magnetic disk an optical disk a solid state drive a hard disk a compact disc a digital versatile disc a flash memory card a direct access storage device DASD can encrypt all data that is stored in it. When data is written to the storage device the storage device encrypts the data by using an encryption decryption algorithm. When data is read from the storage device the storage device decrypts the data by using the encryption decryption algorithm. The encryption decryption algorithm is made to be nearly impossible to decode encrypted data unless an encrypting key is known resulting in a high level of data security. The encryption decryption takes place on the storage device itself and is managed by a firmware i.e. a computer program that is embedded in a hardware device on the storage device.

The firmware enables access to encrypted data by means of a SID which is set prior to using the storage device to a private value understood only by an owner of the data. The SID refers to an alphanumeric character string used for uniquely identifying a user or a group. Alternatively the SID refers to a piece of information a parameter used to encrypt and or decrypt data. The SID is used to lock and unlock access to a storage device and therefore data in the storage device. The data on the storage device is inaccessible while the storage device is in a locked state i.e. a state which only allows a user who has a valid SID to access data in the storage device .

SIDs are stored in a separate machine which manages and issues the SIDs. In order to unlock a storage device and to gain access to data in the storage device a user or a computing device obtains a SU from the machine and applies the SID to the storage device to access the data in the storage device. However the machine may become corrupted. So the SID that the machine provided may be an invalid SID. Alternatively a SID can be corrupted between a point that the SI is retrieved from the machine and a point that the SID is applied on a storage device.

A result of losing a validity of a SID is that a complete set of data can become permanently locked and inaccessible. If the SID is corrupted all users who store data in storage device s associated with the SID can be affected. If a shared SID used for an entire storage devices becomes corrupted or lost all the data in the storage devices cannot be recovered because the data cannot be decrypted.

Thus it would be desirable to provide a method and system for unlocking a storage device that has become locked or cannot be unlocked in a case of that a key or SID of the storage device becomes lost or corrupted.

The present invention is a method and system for unlocking a storage device or data in the storage device that has become locked or cannot be unlocked in a case of that a key or SID of the storage device becomes lost or corrupted.

In one embodiment there is provided a system for unlocking a storage device that has become locked or cannot be unlocked comprising 

a removed bit manager for securely storing a position of the removed bits and the number of bits of the removed bits N 

an added bit manager for securely storing a position of the added bits and the number of bits of the added bits 

means for removing the added bits from the hint at the position of the added bits if the key in the key manager is lost or cannot unlock the storage device 

means for placing each possible N bits in the hint at the position of the removed bits to generate 2possible keys and

means for applying each of the 2possible keys to the storage device until the storage device is unlocked.

In one embodiment there is provided a method for unlocking a storage device that has become locked or cannot be unlocked comprising 

removing the added bits from the hint at the position of the added bits if the key in the key manager is lost or cannot unlock the storage device 

placing each possible N bits in the hint at the position of the removed bits to generate 2possible keys and

In a further embodiment the key is used to encrypt or decrypt data in a storage device by utilizing an encryption decryption algorithm.

In a further embodiment the position of the removed bits and the position of added bits are not known to a same organization or a same person.

At step a user stores an M bit key in a storage device. In one embodiment the M bit key is securely stored in a storage device or a database by implementing a password protection in the storage device or database. At step the user removes N bits from the M bit key and discards the removed N bits. However the user stores the number of the removed bits N and a position of the removed bits. In one embodiment the number of removed bits N and the position of the removed bits securely stored in a storage device or database e.g. by implementing a password protection on the storage device or the database. In a further embodiment the number of removed bits N and the position of removed bits are separately stored in different storage devices or different databases. In a further embodiment the user removes bits at a plurality of positions. Then the user stores the number of removed bits of each position.

After removing the N bits at step the key consists of M N bits. At step the user adds random bits to the key. The random bits can be added anywhere in the key. In one embodiment the number of random bits K is equal to the N. In another embodiment the number of random bits is different than the N. After adding the random bits the user stores a position of the added bits and the number of added bits in a storage device or a database. The user may securely store the position and the number in the storage device or the database by implementing a password protection on the storage device or the database. In a further embodiment the user can add random bits at a plurality of places in the key. Then the user stores the number of added bits and each added bit position.

After the addition of the random bits at step the key consists of M N K. If the number of the random bits K is same with the N then the key consists of M bits at step . At step the user stores the M N K bit key which is constructed through steps as a hint. The hint may be used when the key at step becomes lost invalid unavailable or unusable due to a defect on a storage device that stores the key i.e. key at step . The hint may be stored in a storage device or a database. The hint may be securely stored in a storage device or a database e.g. by implementing a password protection on the storage device or the database. In one embodiment the hint is a binary number being constructed through steps . In another embodiment the hint a number character or symbol represented by an ASCII code.

In one embodiment the position s of the removed bits the number of removed bits at each removed position the position s of the added bits and the number of added bits at each added position are managed by or known to each different organization and or each different person. Therefore the key cannot be reconstructed from the hint by a single organization or a single person. How to reconstruct a key from the hint is described in detail later.

When a key e.g. a SID is created by a user or an operating system e.g. Microsoft Windows the adapter receives the key e.g. the SID from the user or operating system of the interfacing computing device not shown . Then the user or the operating system may provide the information of the removed bits . The information of the removed bits includes but is not limited to position s of removed bits and the number of removed bits at each position. In other words the information specifies positions where bits are removed and the number of bits to be removed at each position. Then the adapter removes the specified number of bits at the specified position s .

After removing the specified number of bits in the key the adapter receives the information of added bits from a user or an operating system. The user or the operating system that provides the information may be different than the user or the operating system that provided the information . In another embodiment the user or the operating system that provides the information is the same as the user or the operating system that provided the information . The information of added bits includes but is not limited to position s of added bits and the number of added bits at each position. In other words the information specifies positions where bits are added and the number of bits to be added at each position. Then the adapter adds the specified number of bits at the specified position s .

After the specified number of bits is added in the key the key becomes a hint . The hint may be stored in a storage device e.g. a disk .

In one embodiment the adapter is implemented as firmware associated with a storage device e.g. a disk using a programming language e.g. Assembly language Binary Code C C Java NET etc. . In one embodiment the adapter is recorded in a computer readable medium e.g. CD Compact Disc DVD Digital Versatile Disc HDD Hard Disk Drive a memory as an instruction e.g. a machine language or assembly language that is executed by a processor e.g. Intel Pentium IBM Power PC AMD Opteron .

In another embodiment the adapter is implemented as hardware on a reconfigurable hardware e.g. FPGA Field Programmable Gate Array or CPLD Complex Programmable Logic Device using a hardware description language Verilog VHDL Handel C or System C . In a further embodiment the adapter is implemented on a semiconductor chip e.g. ASIC Application Specific Integrated Circuit using a semi custom design methodology i.e. designing a chip using standard cells and a hardware description language .

In a further embodiment the adapter is implemented as hardware through a computing device e.g. a server mainframe desktop laptop etc. by being executed in the computing device. The computing device comprises but not limited to include processor s memory s display device s input output device s and network interface s .

After successfully associating the storage device s with the hint at step the adapter or the firmware stores the hint in a storage device or a database. At step the process of enrolling the hint is completed.

When an adapter fails to unlock a storage device with a provided key at step the adapter may access a storage device or a database storing a hint associated with the provided key. At step the adapter retrieves the hint e.g. a binary number an ASCII code for characters an ASCII code for numbers or an ASCII code for symbols from the storage device or the database. At step the adapter calculates possible keys by performing following steps 

 1 After retrieving the hint from the storage device or the database the adapter retrieves the information of added bits from a storage device or database associated with the hint. The information of added bits may specify where bits were added and how many bits were added at each position. Then the adapter removes the added bits at the each position where bits were added. After removing the added bits the number of bits in the hint is reduced by the number of added bits. 2 The adapter retrieves the information of removed bits from a storage device or database associated with the hint. The information of removed bits may specify where bits were removed and how many bits were removed at each position. The total number of removed bits in the information of removed bits is called N. 3 The adapter place possible bits at each position where the bits were removed. The possible bits may have equal number of removed bits at that position. For example a hint is 01011100011000001111. If lowest 4 bits were added bits the adapter removes the last 4 bits from the hint. Now the hint becomes 010111000000. If highest four bits were removed bits the adapter places each possible 4 bits at the position of highest four bits. In other words the hint becomes now XXXX010111000000. The XXXX represents each possible bits such as 0000 0001 . . . 1110 1111. In this example there are total 16 possible bits. Generally speaking the adapter places each possible bits at each position where the bits were removed. The possible bits at each position have equal number of removed bits at that position. Thus if the number of total removed bits is N the adapter creates 2possible keys by placing the possible bits at each position.

Returning to as stated above at step the adapter creates 2possible keys. The adapter may select a possible key among the 2possible keys to first attempt to unlock the storage device that was failed to unlock. When selecting a possible key among the 2possible keys the adapter may arbitrarily select a possible key. Alternatively the adapter selects a possible key with a lowest value or highest value among the 2possible keys.

At step the adapter applies the selected possible key to unlock the storage device that was failed to unlock. If the adapter can unlock the storage device with the selected possible key at step the adapter stores the selected possible key as a valid key for the storage device. The valid key may be securely stored in a storage device or a database.

If at step the adapter cannot unlock the storage device with the selected possible key the adapter may delete the selected possible key or may mark the selected possible key with a keyword attempted . Then the adapter selects a next possible key among unselected possible keys. The adapter may select the next possible key randomly among the unselected possible keys. Alternatively the adapter may select a lowest or highest possible key as the next possible key. If there the adapter fails to select the next possible key at step the adapter checks whether all the possible keys are evaluated or whether there is an unselected possible key. If all the possible keys are evaluated or if there is no unselected possible key at step the adapter notifies or provides an indication that the process of unlocking the storage device has failed. Otherwise the adapter applies the next possible key to unlock the storage device that was failed to unlock. Steps are repeated until the adapter successfully unlock the storage device or all the possible keys are evaluated.

Then the module removes bits from the key at one or more positions. The module stores the position s of the removed bits and the number of removed bits at each position. In one embodiment the position s of the removed bits and the number of removed bits at each position are stored in a repository storage device or database associated with a removed bit manger . In one embodiment the removed bit manager includes a repository storage device or database that securely stores the position s of the removed bits and the number of removed bits at each position. The removed bit manager operates in association with the repository storage device or database . The removed bit manager provides the position s of the removed bits and the number of removed bits at each position to the module e.g. system software authorized users or computing devices.

Then the module adds bits to the key to generate the hint . In one embodiment the module adds bits to the key at one or more positions. The module stores the position s of the added bits and the number of added bits of each position. In one embodiment the position s of the added bits and the number of added bits are stored in a repository storage device or database associated with an added bit manager . In one embodiment the added bit manager includes a repository storage device or database that securely stores the position s of the added bits and the number of added bits at each position. The added bit manager operates in association with the repository storage device or database . The added bit manager provides the position s of the added bits and the number of added bits at each position to the module e.g. system software authorized users or computing devices. The module also stores the hint at a storage device repository or database.

When a user or an application e.g. a database management system DBMS wants to access data in a storage device a disk a disk a disk array a RAID etc. which is encrypted by a key the module accesses key manger to retrieve a corresponding key. Then the module sends the retrieved key to a storage adapter . The storage adapter manages a protocol to authenticate the retrieved key with the storage device and unlock the storage device so that data can be written to the storage device via an encryption algorithm and data can be read from the storage device via a decryption algorithm.

However the storage adapter may not be able to unlock the storage device or decrypt the data if the key retrieved from the key manger was corrupted or defected so that the key is different with an original key which was able to unlock the storage device or to decrypt the data. Then the storage adapter contacts the module to reconstruct possible keys to unlock the storage device or to decrypt the data.

To reconstruct the possible keys the module first retrieves the hint associated with the storage device which cannot be unlocked. In one embodiment the storage adapter provides the hint to the module when requesting to reconstruct possible keys. After obtaining the hint from a storage device database or the storage adapter the module obtains the position s of added bits and the number of added bits at each position from the added bit manager . Then the module removes the added bits from the hint at the each position where the bits were added.

Then the module obtains the position s of removed bits and the number of removed bits at each position from the removed bit manager . If the total number of removed bits is N the module places each possible N bits in the hint at position s of the removed bits. For example assume that there are a first position of removed bits and a second position of removed bits. At the first position m bits were removed. At the second position k bits were removed. Then the module places each possible m bits at the first position of the hint and places each possible k bits at the second position of the hint. By placing each possible m bits at the first position and each possible k bits at the second position the module creates 2possible keys. Thus if the total number of removed bits is N i.e. m k N the module creates 2possible keys.

Then the module applies each of the 2possible keys to unlock the storage device that could not be unlocked.

In one embodiment the module the key manager the removed bit manager and the added bit manager are implemented as firmware using a programming language e.g. Assembly language Binary Code C C Java NET etc. . In one embodiment the module the key manager the removed bit manager and the added bit manager are recorded in a computer readable medium e.g. CD Compact Disc DVD Digital Versatile Disc HDD Hard Disk Drive a memory as an instruction e.g. a machine language or assembly language that is executed by a processor e.g. Intel Pentium IBM Power PC AMD Opteron .

In another embodiment the module the key manager the removed bit manager and the added bit manager are implemented as hardware on a reconfigurable hardware e.g. FPGA Field Programmable Gate Array or CPLD Complex Programmable Logic Device using a hardware description language Verilog VHDL Handel C or System C . In a further embodiment the module the key manager the removed bit manager and the added bit manager are implemented on a semiconductor chip e.g. ASIC Application Specific Integrated Circuit using a semi custom design methodology i.e. designing a chip using standard cells and a hardware description language .

In a further embodiment the module the key manager the removed bit manager and the added bit manager are implemented as hardware through a computing device e.g. a server mainframe desktop laptop etc. by being executed in the computing device. The computing device comprises but not limited to include processor s memory s display device s input output device s and network interface s .

In one embodiment the number of allowed tries to unlock a storage device is set to a fixed number e.g. 1024. If the total number of removed bits is set to satisfy 2 the fixed number the present invention can unlock the storage device which cannot be unlocked with a key retrieved from a key manager before all the allowed tries are exhausted so that data in the storage device becomes permanently locked and effectively lost forever. Thus one embodiment of the present invention removes N bits from an original key when creating a hint. The N bits is set to satisfy that 2is less than or equal to a maximum number of allowed tries e.g. 1024.

When a SID is updated from its default manufacturing value a hint is generated that can be stored and used in a future to attempt to unlock a storage device should the SID becomes unavailable or unusable. Assume that the SID is 256 bits in length.

1. Initially the hint is set to have a same value with the SID. Then a number of bits are removed in the hint. For example assume that 9 bits have been removed from the 256 bits reducing the length of the hint to 247 bits. However the present invention can remove any number of bits. 2. To prevent determining the number of removed bits a same number of random bits are added to the 247 bits hint to make it back to 256 bits. However the present invention can add any number of bits. A position that these bits are added does not have to match a position where the bits were removed. 3. The position of the removed bits is known securely e.g. by informing a limited authorized people and is stored securely e.g. by storing the position of removed bits in a document with a password protection. The value of the removed bits is never revealed and is discarded. The number of the removed bits is also known securely and stored securely. 4. The position of the added bits is known securely e.g. by informing a limited authorized people and is stored securely e.g. by storing the position of added bits in a document with a password protection. The number of the added bits is also known securely and stored securely. 5. It is important that the position of the removed bits and the position of the added bits are not known to a same organization or a same person. The number of the remove bits and the number of added bits are not known to a same organization or a same person. For example the position of removed bits and the number of removed bits may be known to an equipment supplier. The position of added bits and the number of added bits may be known to a customer. Thus the SID cannot be reconstructed by a single organization or a single person. 6. The hint is known securely and stored securely. 7. If the SID becomes lost or unusable the hint is used to attempt to unlock the storage device. Reconstructing the SID is based on the position of removed bits the position of added bits the number of removed bits and the number of added bits. An example of reconstructing the SID is described in following steps 8. The hint is obtained via a GUI Graphical User Interface or API Application Programming Interface from a person or an organization who is securely storing it. The position of added bits and the number of added bits are obtained from a person or an organization who is securely storing them. Then the added bits are removed from the hint reducing the 256 bits hint to 247 bits hint. 9. The position of removed bits and the number of removed bits are obtained from a person or an organization who is securely storing them. 10. Based on the position of removed bits and the number of removed bits 512 000000000 to 111111111 possible 256 bits SIDs are generated by placing each possible 9 bits to the position of the removed bits. 11. Each of the possible 256 bits SIDs is then used to attempt to unlock the storage device. This may take up to 512 attempts which is less than a maximum number of allowed tries e.g. 1024.

Although the preferred embodiments of the present invention have been described in detail it should be understood that various changes and substitutions can be made therein without departing from spirit and scope of the inventions as defined by the appended claims. Variations described for the present invention can be realized in any combination desirable for each particular application. Thus particular limitations and or embodiment enhancements described herein which may have particular advantages to a particular application need not be used for all applications. Also not all limitations need be implemented in methods systems and or apparatus including one or more concepts of the present invention.

The present invention can be realized in hardware software or a combination of hardware and software. A typical combination of hardware and software could be a general purpose computer system with a computer program that when being loaded and executed controls the computer system such that it carries out the methods described herein. The present invention can also be embedded in a computer program product which comprises all the features enabling the implementation of the methods described herein and which when loaded in a computer system is able to carry out these methods.

Computer program means or computer program in the present context include any expression in any language code or notation of a set of instructions intended to cause a system having an information processing capability to perform a particular function either directly or after conversion to another language code or notation and or reproduction in a different material form.

Thus the invention includes an article of manufacture which comprises a computer usable medium having computer readable program code means embodied therein for causing a function described above. The computer readable program code means in the article of manufacture comprises computer readable program code means for causing a computer to effect the steps of a method of this invention. Similarly the present invention may be implemented as a computer program product comprising a computer usable medium having computer readable program code means embodied therein for causing a function described above. The computer readable program code means in the computer program product comprising computer readable program code means for causing a computer to effect one or more functions of this invention. Furthermore the present invention may be implemented as a program storage device readable by machine tangibly embodying a program of instructions executable by the machine to perform method steps for causing one or more functions of this invention.

The present invention may be implemented on a computer readable medium e.g. a compact disc a digital versatile disc a hard disk an optical disk a solid state drive etc. embodying computer program instructions e.g. C C Java Net Assembly languages binary code etc. being executed by a processor e.g. IBM PowerPC SUN Sparc etc. for causing a computer e.g. a desktop a laptop a server etc. to perform one or more functions of this invention. The present invention further includes a method of deploying a computer program product including a program of instructions in a computer readable medium for one or more function of this invention wherein when the program of instructions is executed by a processor the computer program product performs the one or more functions of this invention.

It is noted that the foregoing has outlined some of the more pertinent objects and embodiments of the present invention. This invention may be used for many applications. Thus although the description is made for particular arrangements and methods the intent and concept of the invention is suitable and applicable to other arrangements and applications. It will be clear to those skilled in the art that modifications to the disclosed embodiments can be effected without departing from the spirit and scope of the invention. The described embodiments ought to be construed to be merely illustrative of some of the more prominent features and applications of the invention. Other beneficial results can be realized by applying the disclosed invention in a different manner or modifying the invention in ways known to those familiar with the art

