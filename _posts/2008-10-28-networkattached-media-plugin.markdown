---

title: Network-attached media plug-in
abstract: An embodiment is a method and apparatus to provide a network-attached media plug-in. A network interface interfaces with a client and a server. The network interface receives an input from the client requesting content from the server. The client has a network plug-in interface. A network processor extracts a media stream from the requested content. A multimedia processor dynamically modifies the media stream according to the input from the client.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08301792&OS=08301792&RS=08301792
owner: Panzura, Inc
number: 08301792
owner_city: San Jose
owner_country: US
publication_date: 20081028
---
The presently disclosed embodiments are directed to the field of computer networks and more specifically to network attached devices.

Plug ins are program modules that are installed as an extension of a host application to extend the functionalities of the host application. Examples of plug ins include file format support for graphic software and media players video players for Web browser etc. The host application typically provides an open application programming interface API so that third party vendors may provide plug ins to interact with the host application.

Although plug ins provide extension to the host program in a modular manner their use has a number of disadvantages. First the end user may not be sufficiently sophisticated to be able to select the appropriate plug in to be used for a particular host application. Second the plug in has to be installed on the end user s computer occupying storage space. Third the end user has to get accustomed to the new features of the plug in often going through a long learning curve.

One disclosed feature of the embodiments is a technique to provide a network attached media plug in. A network interface interfaces with a client and a server. The network interface receives an input from the client requesting content from the server. The client has a network plug in interface. A network processor extracts a media stream from the requested content. A multimedia processor dynamically modifies the media stream according to the input from the client.

One disclosed feature of the embodiments is a technique to provide a network attached media plug in. A network interface interfaces with a client and a server. The network interface receives an input from the client requesting content from the server. The client has a network plug in interface. A network processor extracts a media stream from the requested content. A multimedia processor dynamically modifies the media stream according to the input from the client.

The network attached media plug in is part of a dynamic data processing system that acts as an interface between the client and the server. Since most of the media processing occurs in the network attached media plug in the client does not need to install the applications or the application plug ins. The client only needs a network plug in interface to allow the client to interact with the network attached media plug in. This network plug in interface supports low level basic actions that do not need to change. The network attached media plug in is also transparent to the server. Any upgrade or add on may be made at the network attached media plug in therefore relieving the client the burden of installing or populating upgrade software or application plug ins.

In the following description numerous specific details are set forth. However it is understood that embodiments of the invention may be practiced without these specific details. In other instances well known circuits structures and techniques have not been shown to avoid obscuring the understanding of this description.

One disclosed feature of the embodiments may be described as a process which is usually depicted as a flowchart a flow diagram a structure diagram or a block diagram. Although a flowchart may describe the operations as a sequential process many of the operations can be performed in parallel or concurrently. In addition the order of the operations may be re arranged. A process is terminated when its operations are completed. A process may correspond to a method a program a procedure a method of manufacturing or fabrication etc. One embodiment may be described by a schematic drawing depicting a physical structure. It is understood that the schematic drawing illustrates the basic concept and may not be scaled or depict the structure in exact proportions.

The client may be any client participating in the system . It may represent a device a terminal a computer a hand held device a software architecture a hardware component or any combination thereof. The client may use a Web browser to connect to the dynamic data processing system or the data server via the network . The client may upload or download files e.g. multimedia video audio to or from the dynamic data processing system . The multimedia files may be any media files including media contents video audio graphics movies documentary materials business presentations training materials personal video clips etc. In one embodiment the client requests a content from the server and downloads multimedia files or streams from the system .

The dynamic data processing system performs data processing on the streams transmitted on the networks and or . It includes an application and a network attached media plug in . The application is the application that operates on the media streams according to the input from the client . It may be a graphics application a media player a content management system etc. Typically the application has an open application programming interface API that provides a standard interface.

The network attached media plug in may receive and or transmit data frames such as media e.g. video audio frames or bitstreams representing the network frames such as the Internet Protocol IP frames. It may un packetize extract or parse the bitstreams from the data server to obtain relevant information such as media frames. It may encapsulate or re packetize the processed media frames and transmit to the client . It may perform functions that are particular to the applications before transmit to the client . For example it may re compose the video content insert additional information apply overlays etc. It may interact with the application to obtain the functionalities of the application to operate on the media streams. In addition it may interact with the client in real time to modify the media streams based upon the user input at the client . It may detect an event such as a mouse click a key press and a cursor adjustment and responds accordingly. For example it may move a portion of the content e.g. overlaid advertisement over a background video or highlight a portion of the content based upon the location of the mouse within the browser window.

The data server may be any server that has sufficient storage and or communication bandwidth to transmit or receive data over the networks or . It may be a video server to deliver video on line. It may store archive process and transmit video streams with broadcast quality over the network to the system .

The network interface unit provides interface to the client and the data server . It includes a client interface and a server interface . The client interface interfaces with the network plug in interface in the client via the network . The client interface may transfer the recompressed and modified media streams to the client .

The server interface interacts with the server via the network . It may receive a receive network frame containing the requested content from the server. It may send the receive network frame to the network processor .

The network processor performs network related functions. It may detect and extract media streams from the requested content in the network frames. It may re packetize or encapsulate the media streams into network frames for transmission to the client . It may interact with the client via the client interface in the network interface .

The multimedia processor dynamically modifies the media stream according to the input from the client. It may interact with the application to obtain the functionalities of the application . It may provide a graphical user interface GUI that accommodates the modified media stream according to the platform configuration of the client . The multimedia processor is typically a high performance processor such as a graphic processing unit GPU that is optimized for graphics image or video operations. It may also be optimized for parallel operations. Parallel operations are operations that may be performed in parallel. It may have a Single Instruction Multiple Data SIMD architecture where multiple processing elements may perform identical operations.

Any of the network interface the network processor and the multimedia processor or a portion of them may be a programmable processor that executes a program or a routine from an article of manufacture. The article of manufacture may include a machine storage medium that contains instructions that cause the respective processor to perform operations as described in the following.

The media detector detects the media stream in the requested content in the receive network frame. This may be performed by examining the header in the receive network frame. When the media stream is detected to be present in the receive network frame the media detector instructs the media parser to extract the media stream.

The media parser parses the requested content into the media stream. This may be performed by examining the frame format information or the header information that may contain information on how the bitstreams or the frames are organized. The parsed media stream is then sent to the multimedia processor .

The encapsulator encapsulates the modified media stream as received from the multimedia processor into the transmit network frame. This may be performed by re packetizing the modified media stream into packets with appropriate header and packet information or any other necessary operations for the transmission of the video frames over the networks or .

The client interaction module interacts with the client via the client interface in the network interface . For example it may receive an input from the client or the bitstreams representing network frames from the data server . The input from the client may be any input or command sent by the client . It may be a selection of a menu item a click on a toolbar a parameter or a set of parameters or a command or a cursor adjustment. The command may be any video on demand VOD related commands such as pause stop play fast forward rewind etc.

The media detector the media parser the encapsulator and the client interaction module may operate in parallel. For example the media detector and the media parser may operate on the network frame k while the encapsulator may operate on the network frame k 1.

The event handler handles an event caused by the input from the client . The event may be any event triggered by the client input. For example it may include at least one of a mouse click a key press a cursor adjustment. These events may be transmitted from the client to the client interaction module via the network plug in interface .

The buffer buffers the events as provided by the event handler and sends the events to the multimedia processor . Since there may be latency in responding to the client inputs the buffer provides a mechanism to queue the client inputs. The buffer may not be needed if the response is fast enough.

The platform configuration processor configures the platform of the client according to the input from the client . The platform may be a Windows a Mac Operating System OS or a UNIX platform. Since an application may operate differently on different platforms the platform configuration processor provides a way for the network attached media plug in to customize or tailor the application accordingly.

The web page interface receives the encapsulated packets from the encapsulator and transmits a transmit network frame containing the modified media stream to the client according to the event and the configured platform.

It is noted that any of the above functions may also be implemented at the network interface or the multimedia processor .

The de compressing processor de compress the media stream into a media object according to the decompression format or standard. It may include an entropy decoder e.g. a run length decoder a Huffman decoder an inverse quantizer an inverse Discrete Cosine Transform DCT processor and a motion compensator. It may also include an arithmetic coding AC decoder such as a context based adaptive binary arithmetic coding CABAC decoder. The media object therefore represents a decoded or de compressed media stream.

The application logic module may interact with the application to dynamically modify the media object. It may add additional information or delete information on the media object. Additional information may include targeted advertisements moving advertisements changing characteristics of advertisements or any other necessary information as provided by the input of the client . The application logic module may also include a graphical user interface GUI processor to provide GUI operations to accommodate the modified object. The GUI may include at least one of a menu a set of menu commands a set of toolbars a set of buttons and a set of annotations. The modified object is then sent to the compressing processor .

The compressing processor compresses the modified media object into the modified media stream according to the compression format or standard. It may include an intra frame and inter frame residual calculator a motion estimator a DCT processor a quantizer a decoder and an entropy encoder e.g. a run length encoder a Huffman encoder . It may also include an AC encoder such as a CABAC encoder.

In general the de compressing processor and the compressing processor are compatible with at least one of an MPEG 2 standard and an H.264 standard.

Upon START the process interfaces with a client and a server Block . This may includes receiving an input from a client requesting content from the server. The input from the client may be any input or command sent by the client such as a selection of a menu item a click on a toolbar a parameter or a set of parameters or a command or a cursor adjustment. The command may be any video on demand VOD related commands such as pause stop play fast forward rewind etc. The client has a network plug in interface. Next the process interacts with the client Block . Then the process extracts a media stream from the requested content Block . Then the process dynamically modifies the media stream according to the input from the client Block . The process is then terminated.

Upon START the process interfaces with the client via the network plug in interface to receive the input from the client and transmit the modified media stream to the client Block . Next the process transmits the request from the client that requests the content to the server Block . Then the process receives a receive network frame containing the requested content from the server via a network Block . The process is then terminated.

Upon START the process handles an event caused by the input from the client Block . The event includes at least one of a mouse click a key press a cursor adjustment. Then the process buffers the event in a buffer Block . Next the process configures the platform of the client according to the input from the client Block . Then the process determines if a transmit network frame is ready for transmission Block . If not the process is terminated. Otherwise the process transmits the transmit network frame containing the modified media stream to the client according to the event and the configured platform Block . This may be performed by encapsulating the modified media stream into the transmit network frame. The process is then terminated.

Upon START the process detects the media stream in the requested content in the receive network frame Block . This may be performed by examining the header information in the receive network frame. Next the process determines if the media stream is present in the receive network frame Block . If not the process is terminated. Otherwise the process parses the requested content into the media stream Block . This may be performed by examining the data format or organization in the header information. Next the process sends the media stream to the multimedia processor for processing Block . The process is then terminated.

Upon START the process de compresses the media stream into a media object according to the de compression format or standard Block . This may be performed by an entropy decoding e.g. a run length decoding Huffman decoding an inverse quantization an inverse Discrete Cosine Transform DCT and a motion compensation. It may also include an AC decoding such as the CABAC decoding. Next the process interacts with an application to dynamically modify the media object Block . This may include any additional processing on the media object such as overlaying advertisements highlighting a region on the video etc. Then the process accommodates the modified object by a GUI including at least one of a menu a set of menu commands a set of toolbars a set of buttons and a set of annotations Block . This may be performed by overlaying the graphics of the GUI on the media if necessary.

Next the process compresses the modified media object into the modified media stream Block . This may include calculating intra frame and inter frame residues a motion estimation calculating the DCT quantization of the DCT coefficients and an entropy encoding e.g. run length encoding Huffman encoding . It may also include an AC encoding such as the CABAC encoding. The process is then terminated.

Elements of one embodiment may be implemented by hardware firmware program instructions stored in a non transitory computer readable storage medium or any combination thereof. The term hardware generally refers to an element having a physical structure such as electronic electromagnetic optical electro optical mechanical electro mechanical parts etc. A hardware implementation may include analog or digital circuits devices processors applications specific integrated circuits ASICs programmable logic devices PLDs field programmable gate arrays FPGAs or any electronic devices. The term software generally refers to a logical structure a method a procedure a program a routine a process an algorithm a formula a function an expression etc. The term firmware generally refers to a logical structure a method a procedure a program a routine a process an algorithm a formula a function an expression etc. that is implemented or embodied in a hardware structure e.g. flash memory ROM EPROM . Examples of firmware may include microcode writable control store micro programmed structure. When implemented in program instructions or firmware the elements of an embodiment are essentially program instructions that perform the necessary tasks. The program instructions and firmware may include the actual code to carry out the operations described in one embodiment or code that emulates or simulates the operations.

The program or code segments can be stored in a processor or machine accessible medium. The processor readable or accessible medium or machine readable or accessible medium may include any medium that may store transmit receive or transfer information. Examples of the processor readable or machine accessible medium that may store include a storage medium an electronic circuit a semiconductor memory device a read only memory ROM a flash memory an erasable programmable ROM EPROM a floppy diskette a compact disk CD ROM an optical disk a hard disk etc. The machine accessible medium may be embodied in an article of manufacture. The machine accessible medium may include information or data that when accessed by a machine cause the machine to perform the operations or actions described above. The machine accessible medium may also include program code instruction or instructions embedded therein. The program code may include machine readable code instruction or instructions to perform the operations or actions described above. The term information or data here refers to any type of information that is encoded for machine readable purposes. Therefore it may include program code data file etc.

All or part of an embodiment may be implemented by various means depending on applications according to particular features functions. These means may include hardware program instructions stored in a non transitory computer readable storage medium or firmware or any combination thereof. A hardware or firmware element may have several modules coupled to one another. A hardware module is coupled to another module by mechanical electrical optical electromagnetic or any physical connections. A software module is coupled to another module by a function procedure method subprogram or subroutine call a jump a link a parameter variable and argument passing a function return etc. A software module is coupled to another module to receive variables parameters arguments pointers etc. and or to generate or pass results updated variables pointers etc. A firmware module is coupled to another module by any combination of hardware and software coupling methods above. A hardware software or firmware module may be coupled to any one of another hardware software or firmware module. A module may also involve program instructions that implement a software driver or interface that interacts with the operating system running on the platform. A module may also be a hardware driver to configure set up initialize send and receive data to and from a hardware device. An apparatus may include combinations of hardware software and firmware modules.

It will be appreciated that various of the above disclosed and other features and functions or alternatives thereof may be desirably combined into many other different systems or applications. Various presently unforeseen or unanticipated alternatives modifications variations or improvements therein may be subsequently made by those skilled in the art which are also intended to be encompassed by the following claims.

