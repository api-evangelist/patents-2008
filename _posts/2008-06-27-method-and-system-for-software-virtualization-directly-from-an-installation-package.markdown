---

title: Method and system for software virtualization directly from an installation package
abstract: A method and system for providing a virtual system environment directly from an installation package is disclosed. An installation package containing one or more installer applications is received and an installer application providing an instance of an operating system is copied from the installation package to a virtual container created in a test machine. A virtualization package is created for the selected installed application, and the virtual system environment is provided in the test machine.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08464245&OS=08464245&RS=08464245
owner: Flexera Software LLC
number: 08464245
owner_city: Schaumburg
owner_country: US
publication_date: 20080627
---
The field of the invention relates generally to software virtualization. In particular the present method and system is directed to virtualization of an application directly from an installation package.

Software virtualization allows for testing and installing software applications operating system OS updates or the like that require overwriting system registries and system specific common files during installation without changing the configuration of the test machine. Software virtualization mucks up the registry dynamic linking libraries DLLs and other system files required for an installation or an update of software by creating them in a virtual cache without disturbing the test machine s current configuration. This feature of virtual installation is very useful during software development testing and quality assurance where the deployment of new software requires testing on multiple platforms and configurations. Usually every possible combination of platforms and configurations for testing is impossible to perform.

After various versions of software applications and operating systems are virtually installed system files are stored or readily available from a virtual cache the operator can easily turn on and off or changes versions from one to another without rebooting the test machine.

VMWARE virtualization software of VMWARE Inc. Palo Alto Calif. offers virtualization of various operating systems configurations or versions of one or more operating systems on a single personal computer. However virtualization by VMWARE virtualization software are is distinguishable from software virtualization because it is in essence a hardware virtualization VMWARE virtualization software transforms the hardware resources such as CPU memory hard disk network controller peripheral devices etc. to create a fully functional virtual machine that can run its own operating system and applications as if it operates on another PC. Presently VMWARE virtualization software virtualizes x86 processors only.

Prior software virtualizations require that virtualized machine images be maintained in the limited read only memory ROM of the test machine to retain them after the machine is turned off. Furthermore in order to test a software application on multiple machines each machine needs to be tested separately in a serial fashion which requires interruption and time of the operator who carries out the testing. Moreover current techniques for software virtualization have risks for corruption of files resident on the machine on which the software virtualization takes place.

A method and system for providing a virtual system environment directly from an installation package is disclosed. An installation package containing one or more installer applications is received and an installer application providing an instance of an operating system is copied from the installation package to a virtual container created in a test machine. A virtualization package is created for the selected installed application and the virtual system environment is provided in the test machine.

The above and other preferred features including various novel details of implementation and combination of elements will now be more particularly described with reference to the accompanying drawings and pointed out in the claims. It will be understood that the particular methods and circuits described herein are shown by way of illustration only and not as limitations. As will be understood by those skilled in the art the principles and features described herein may be employed in various and numerous embodiments without departing from the scope of the invention.

It should be noted that the figures are not necessarily drawn to scale and that elements of similar structures or functions are generally represented by like reference numerals for illustrative purposes throughout the figures. It also should be noted that the figures are only intended to facilitate the description of the various embodiments described herein. The figures do not describe every aspect of the teachings disclosed herein and do not limit the scope of the claims.

A method and system for providing a virtual system environment directly from an installation package is disclosed. In one embodiment the method comprises receiving an installation package that contains one or more installer applications. An installer application providing an instance of an operating system is copied from the installation package to a virtual container created in a test machine. A virtualization package is created for the selected installed application and the virtual system environment is provided in the test machine.

In the following description for purposes of explanation specific nomenclature is set forth to provide a thorough understanding of the various inventive concepts disclosed herein. However it will be apparent to one skilled in the art that these specific details are not required in order to practice the various inventive concepts disclosed herein.

Some portions of the detailed descriptions that follow are presented in terms of algorithms and symbolic representations of operations on data bits within a computer memory. These algorithmic descriptions and representations are the means used by those skilled in the data processing arts to most effectively convey the substance of their work to others skilled in the art. An algorithm is here and generally conceived to be a self consistent sequence of steps leading to a desired result. The steps are those requiring physical manipulations of physical quantities. Usually though not necessarily these quantities take the form of electrical or magnetic signals capable of being stored transferred combined compared and otherwise manipulated. It has proven convenient at times principally for reasons of common usage to refer to these signals as bits values elements symbols characters terms numbers or the like.

It should be borne in mind however that all of these and similar terms are to be associated with the appropriate physical quantities and are merely convenient labels applied to these quantities. Unless specifically stated otherwise as apparent from the following discussion it is appreciated that throughout the description discussions utilizing terms such as processing or computing or calculating or determining or displaying or the like refer to the action and processes of a computer system or similar electronic computing device that manipulates and transforms data represented as physical electronic quantities within the computer system s registers and memories into other data similarly represented as physical quantities within the computer system memories or registers or other such information storage transmission or display devices.

The present invention also relates to apparatus for performing the operations herein. This apparatus may be specially constructed for the required purposes or it may comprise a general purpose computer selectively activated or reconfigured by a computer program stored in the computer. Such a computer program may be stored in a computer readable storage medium such as but is not limited to any type of disk including floppy disks optical disks CD ROMs and magnetic optical disks read only memories ROMs random access memories RAMs EPROMs EEPROMs magnetic or optical cards or any type of media suitable for storing electronic instructions and each coupled to a computer system bus.

The algorithms and displays presented herein are not inherently related to any particular computer or other apparatus. Various general purpose systems may be used with programs in accordance with the teachings herein or it may prove convenient to construct more specialized apparatus to perform the required method steps. The required structure for a variety of these systems will appear from the description below. In addition the present invention is not described with reference to any particular programming language. It will be appreciated that a variety of programming languages may be used to implement the teachings of the invention as described herein.

As used herein the following terms shall have the following meanings without regard to its upper or lower case usage.

 Back end refers to a server computer or system under the control or otherwise authorized by a software vendor to receive and process information received from a customer of its usage of software licensed to the customer by the vendor.

 File refers to what is generally understood as a computer file but as used here also includes any system for storing and retrieving digital data inclusive of database managers registries directories and data objects.

 Front end refers to a server computer or system under the control or otherwise authorized by a customer to execute manage and or report usage of software licensed to the customer.

 Server means a computer process that other computer applications operating systems system software or compute services interact with. Within this definition server as used in the terms client server multi tier computing 3 tier computing network services or Web services are included.

 Vendor means a licensor of licensed software including its copyright owner and other parties granted a right by the copyright owner to sell or otherwise distribute licenses to customers to use the licensed software.

Software virtualization may not be applied to an existing application that has previously been installed thus already changed and updated system files. In this case the application is uninstalled and reinstalled virtually.

Virtual operating system VOS refers to an operating system that runs in a virtual system environment. VOS allows running an application without installing a specific operating system on which the application is running or without modifying the resident operating system i.e. running a software application and operating system update on a machine without impacting the underlying machine . Running an application on a VOS may involve the following process. An execution EXE file of the VOS is loaded from the virtual file system that stores a virtual system environment. In the process of loading the EXE file the VOS loads system dependent files such as COM DLL and EXE files located on the resident operating system as well as the virtual system environment. The VOS is responsible for providing full control over the system file and registry keys to avoid system crashes and access denials that may occur during the execution of the application. Thereafter the application specific to the VOS is loaded and executed in the virtual system environment. The processes of the application are managed and monitored by the VOS. This allows the application to run without installing an operating system and or physical drivers or rebooting the test machine.

Virtual file system VFS is a compressed file system that stores VOS virtual system files virtual registry keys and or other files that are required to prepare a virtual system environment. VFS is typically embedded in an archive as distributed and gets extracted into the system memory in small blocks when required by a virtual application. At runtime the virtual application accesses the resident system files as well as the virtual files that are available from the system memory. From the operator s perspective virtual files are not distinguishable from resident system files as the virtual operating system seamlessly isolates and encapsulates the access to the virtual files as if they were resident system files. VOS also manages the version of virtual system files when the virtual system files in the VFS are overwritten. VFS works with any underlying file system including FAT16 FAT32 NTFS or any future file system.

Virtual registry VREG transparently merges virtual registry keys with the resident registry keys. For example when a virtual application is being launched the VOS automatically gathers all the registry keys needed by COM components before deploying it. Virtual registry keys are overlaid on the resident registry so that the virtual application utilizes entries from both the virtual and resident system. When a new key is required the virtual registry is checked for a match. If no match is found the resident system registry is used. Since virtual registry keys are provided to all applications and libraries loaded through the VOS several advantages are achieved. According to one embodiment virtual registry allows COM or ActiveX based applications to run on systems where registry access is restricted. Since the COM or ActiveX components are directly loaded from the VFS potential issues regarding unintentional removal of those components during another application s uninstall are completely removed. Furthermore virtual registry resides inside the application s EXE it cannot be misconfigured by another program s installer or uninstaller. In addition virtual registry also tracks COM objects for their lifetime so that it can free DLL and EXE servers appropriately when the COM objects are deleted.

According to one embodiment a virtual container emulates one or more versions of installer applications. An installation package includes one or more installer applications to provide various instances and versions of operating systems such as MICROSOFT WINDOWS 98 MICROSOFT WINDOWS 2000 MICROSOFT WINDOWS XP and MICROSOFT WINDOWS VISTA or more than one versions of service packages for a specific operating system. Installation packages may be distributed on a CD ROM or by an image file over a network. An installer application may be a Microsoft installer MSI an update or a service package of an operating system but is not limited thereto. In case of software testing the installer package includes several versions of installer applications to perform quality assurance QA or compatibility testing for an application software. After the operator selects a version from the set of versions available for an application software a series of processes launches the application and prepares a virtual system environment. A VOS is copied from the installation package to the virtual container. System files necessary to run the application are also copied to a virtual instance of the application created by the VOS and finally the application is launched on the virtual instance.

According to one embodiment an installation package contains various instances or versions of operating systems exchangeably referred to as target operating systems or target systems hereinafter. The operator selects all or part of the various instances or versions of operating systems contained in the installation package and copies them onto a virtual cache for each instance or version of an operating system. The virtual caches are collectively stored in a virtual container . In order to test the application software a template virtualization package is created for each virtual cache . Each virtualization package created in virtual cache contains a virtual operating system a virtual file system virtual registries and any other information specific to a target operating system. The application software is run inside a target virtualization package without affecting the resident operating system and or other software applications installed on the test machine .

According to one embodiment the operator of the test machine selects a virtualization package for testing inside the virtual container . According to another embodiment a batch program automatically select a list of virtualization packages for testing and the application software is run for each virtualization package. When being run inside a virtual package the application software is isolated from the test machine s operating system and other applications installed on the test machine. The virtual cache may be application specific. In this case modifications from the virtualization package do not change the underlying system setup but persist in the application specific virtual cache .

According to one embodiment the operator of test machine configures the location of a virtual cache . For example for a CITRIX product offered by CITRIX SYSTEMS Inc. the virtualization cache is located at a cache presentation server not shown in . For THINSTALL offered by VMWARE Inc. the virtualization cache is located where the user s application data folder resides. THINSTALL I provides for a globally unique identifier GUID for each application that runs in a virtual container on test machine .

According to one embodiment a user of test machine is able to view the virtual file system of virtual caches and evaluate what effect the installation package would have had on the resident file system of the test machine had it been run outside of the virtual container . The user also views what entries were made in the virtualized registry and can determine what effect the selected installation package would have had on the resident registry of the test machine had it been run outside of the virtualization container . For example if the user experiences problems with a shared dynamic link library DLL the user views what the installation package would have done to the DLLs of the test machine . Software applications installed by virtual installation may be run in the virtual container to verify whether or not they function properly without impacting the performance of the test machine .

According to one embodiment the user deletes the virtualization package when the test run is completed leaving the machine in the state it was in before the test began. The user may save the virtualization package in a local storage of test machine and the saved virtualization package may be referenced or reused later for other purposes.

Embodiments of the software virtualization scheme disclosed herein may be applied to an existing software product. For example ADMINSTUDIO a software product supplied by ACRESSO SOFTWARE has an existing feature called INSTALLMONITOR which allows ADMINSTUDIO to monitor the WINDOWS application programming interfaces APIs that are related to a software installation. When used in conjunction with software virtualization INSTALLMONITOR allows a user to run an installation package e.g. MSI package as a virtualized application without having to reverse engineer the installation package s content.

There are several ways in which a user can trigger a virtualized application instance from the installation package . For example an installation service installs a shortcut for a virtualization package directly from an installation package on the test machine . When clicked by the user the shortcut refers back to the installation service and starts the application in a virtualized mode. For streamlining evaluation for application software a software tool may be run to allow the user to browse the installation package and select a shortcut for a virtual package created from the installation package .

According to one embodiment the application software or system updates are run and monitored to trap the API calls that try to modify the underlying operating system. For instance INSTALLMONITOR has such a monitoring feature. Those trapped API calls are redirected to the virtualization package and corresponding API calls created in the virtualization package or are called instead.

According to one embodiment package code product code Message Digest 5 MD5 hash of an installation package and other installation specific information are saved so that the installation service can verify that the underlying installation package has not changed. It allows users to verify that it is a proper virtual container and that the virtual container is in proper working order.

According to one embodiment virtualization package is saved to a user specific or application specific data folder. Application software is then run within the virtual container . Therefore application software runs without affecting the test machine s resident operating system or on other applications previously installed on the test machine. The saved user specific or application specific data folders may be referenced later without creating a new virtualization package for a specific target system to be tested.

A data storage device such as a magnetic disk or optical disc and its corresponding drive may also be coupled to computer system for storing information and instructions. Architecture can also be coupled to a second I O bus via an I O interface . A plurality of I O devices may be coupled to I O bus including a display device an input device e.g. an alphanumeric input device and or a cursor control device .

The communication device allows for access to other computers servers or clients via a network. The communication device may comprise a modem a network interface card a wireless network interface or other well known interface device such as those used for coupling to Ethernet token ring or other types of networks.

A method and system for providing a virtual system environment has been described with respect to specific examples and subsystems. It will be apparent to those of ordinary skill in the art that it is not limited to these specific examples or subsystems but extends to other embodiments as well.

