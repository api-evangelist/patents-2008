---

title: System and method for partial parsing of XML documents and modification thereof
abstract: Modifying a partially parsed Extensible Markup Language (XML) document. A stop node in an XML document is marked using at least one stop XPath expression. The XML document is then parsed till the stop node identified by the at least one stop XPath expression. Modifications to the XML document are specified in a modification script, including at least one modification instruction. A modification instruction includes a context node XPath expression which identifies a context nodeset requiring modifications, and the actual modification content. Sequence of event tokens corresponding to the parsed XML document are then stored. Further, the XML document is modified according to the modification script.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08397158&OS=08397158&RS=08397158
owner: Sonoa Networks India (PVT) Ltd
number: 08397158
owner_city: Bangalore
owner_country: IN
publication_date: 20080331
---
Embodiments of the invention relate generally to information processing and more particularly to partial parsing and modification of Extensible Markup Language XML documents.

XML refers to World Wide Web Consortium W3C standard for creating markup languages that describe the structure and interrelationships of data. XML is not a single predefined markup language rather a metalanguage a language for describing other languages . Last few years XML has become lingua franca of the internet and World Wide Web WWW . It has become the most common mechanism for structured data representation exchange and storage.

In the aforementioned XML applications it is critical that the data contained in XML documents be processed. There are several ways in which XML documents can be processed modified and data retrieved therefrom. Several languages such as XPath XSLT and XQuery allow performing queries on XML documents to locate information items process and modify XML documents. XPath refers to a language standardized by W3C for querying XML documents. It treats an XML document as a logically ordered tree of nodes and provides a means to locate and identify XML elements and attributes.

In traditional approaches to XML modification a Document Object Model DOM is followed. In following the DOM approach the XML document is converted to a tree format with the help of a DOM parser and this DOM tree is stored in memory. While this approach works in case of smaller documents it has severe limitations when it comes to processing of larger XML documents especially because the size of the document to be stored is usually 7 10 times the size of the original XML document. Thus in case of large documents following the DOM approach is a constraint in terms of memory time cost and application performance. Further DOM allows modification of XML documents only if a complete in memory data structure is formed. Thus a DOM approach to modify an XML document has its limitations in instances where owing to memory limitations a complete DOM tree cannot be stored in memory.

In order to address the challenges posed by DOM approach alternative approaches such as Simple API for XML SAX were developed. In contrast to DOM approach SAX approach does not require loading of the complete XML document into memory. Rather SAX refers to presenting the document as a serialized stream of events. In other words SAX is event driven and relies on a programmer to specify a particular event upon the happening of which event XML processing happens. However SAX approach has its own limitations as well. In following a SAX approach the ability to navigate back and forth within in the XML document in order to make modification is restricted. This is a severe limitation of a SAX approach.

In the aforementioned approaches the entire XML document needs to be parsed in its entirety for a modification of a portion of the XML document regardless of how minor the modification is. This parsing of the entire document including paring of portions of an XML document that do not require modification leads to unnecessary usage of the Central Processing Unit CPU .

Further parsing and in memory representation of an XML document requires significant amount of memory usage. Especially in DOM approach if the XML document which needs to be modified is larger than say 100 KB memory requirements can be significantly large for a minor modification. Further modifying an XML document using DOM API is highly programmatic and requires code changes for every new type of modification. Another problem arises in these approaches when the XML document has to be de serialized and serialized. Serialization is involved while creating the in memory data structure from the XML document and de serialization is involved in converting the in memory data structure back to the XML document. Both serialization and de serialization are costly as well as time consuming.

Hence there is a need to provide a method and system for parsing and modifying XML documents efficiently.

Embodiments of the invention described herein provide a computer implemented method system and a machine readable medium product for modifying partially parsed Extensible Markup Language XML documents.

An exemplary embodiment of the invention provides a method for partially parsing and modifying an XML document. A stop node in an XML document is marked using at least one stop XPath expression. The XML document is then parsed till the stop node identified by the at least one stop XPath expression. A context nodeset in an XML document is also identified using a context node XPath expression which needs modification. A modification script as an input includes the context node XPath expression which identifies the context nodeset requiring modifications and the modification instruction. Further the XML document is modified according to the modification instructions in the modification script.

An exemplary embodiment of the invention provides a system for partially parsing and modifying an XML document. The system includes an XPath parser for parsing at least one stop XPath expression. The at least one stop XPath expression identifies a stop node in the XML document and the stop node is further marked. Further the system includes an XML parser for parsing the XML document. An XPath handler monitors XPath results generated by an XPath processor and stops the XML parser if the XPath result is the stop XPath expression. The system also includes a modification script compiler for compiling a modification script including modification instructions which includes at least one context node XPath expression. The context node XPath expression identifies a context nodeset in an XML document for modification. Further a modification engine in the system modifies the XML document according to the modification script.

An exemplary embodiment of the invention provides a machine readable medium product for partially parsing and modifying an XML document. The machine readable medium product includes instructions operable to cause a programmable processor to perform marking a stop node in an XML document using at least one stop XPath expression and parsing the XML document till the stop node identified by the at least one stop XPath expression.

Other aspects and example embodiments are provided in the Figures and the Detailed Description that follows.

Embodiments of the invention described herein provide a computer implemented method system and a machine readable medium product for partially parsing Extensible Markup Language XML documents and modifying them. One embodiment of the invention provides a method for parsing only part of an XML document. Using various embodiments of the invention the XML document can be parsed till a selected XML node stop node and thereby the entire XML document need not be parsed. XML parsing can be stopped after the stop node.

Embodiments of the invention have been explained using XML document as an example. However it will be appreciated that embodiments of the invention can be used to partially parse and modify any structured document which includes information represented in a logical order. Examples of structured documents include but not limited to Standard Generalized Markup Language SGML documents XML documents and Extensible HyperText Markup Language XHTML documents.

In various embodiments of the invention a modification script may include at least one modification instruction which includes a context node XPath expression which specifies where to make modifications along with modification instruction on how to modify i.e. whether a particular node has to be deleted added appended and so on.

XPath processor is configured with XPath expressions. XPath processor registers with XML parser for receiving sequence of event tokens. XPath processor evaluates XPath expressions on the sequence of event tokens. XPath processor matches the sequence of event tokens to XPath expressions and returns matched XPath results. In an embodiment of the invention XPath processor may process one event token at a time and may evaluate several XPath expressions on the event token simultaneously.

In an embodiment of the invention context node XPath expression is used for identifying a context nodeset in the XML document which needs modification. A context nodeset includes one or more nodes identified by the context node XPath expression. A context node XPath expression will be specified for each modification instruction in the modification script. The modification script may include one or more modification instructions including but not limited to append move modify add delete replace and wrap the XML nodes. Further various embodiments of the invention have been explained using one modification instruction comprising a context node XPath expression as an example. The stop XPath expression is used for identifying and marking a stop node of the XML document which needs modification. For example if a new node named needs to be added between the nodes and the context node XPath expression identifies the node and the stop XPath expression identifies the stop node in the XML document. An XML document may include several such nodes. At step an XML document is received as a linked list of buffers. At step a context nodeset in the XML document is identified using the context node XPath expression for modification. Similarly at step a stop node in the XML document is marked using the stop XPath expression. Further the XML document is parsed at step . Parsing an XML document generates sequence of event tokens corresponding to the nodes in the XML document at step . The context node and stop XPath expressions are evaluated against this sequence of event tokens and XPath results are generated at step .

At step the XPath results are monitored. Further a check is performed at step to find if any of the XPath results is matching with the stop XPath expression. Parsing the XML document is stopped if any of the XPath result is the stop XPath expression. In other words XML processing will be stopped if the stop node marked in the XML document stop node identified by stop XPath expression is parsed. On the other hand if any of the XPath results is not matching with the stop XPath expression step to step are repeated. In an embodiment of the invention the buffers are parsed and the sequence of event tokens is generated as and when they are available. XPath results are generated for each event token serially. Hence parsing can be stopped as soon as the XML document is parsed till the stop node.

At step the XML document is modified according to the modification script. The modification script may include modification instructions to append move modify add delete replace and wrap the XML nodes. These modification instructions are captured using references to XPath expressions. At step the XML document is modified according to the modification script. During the evaluation each instruction in the modification script readjusts the linked list of buffers to reflect the desired output using information from XPath results and parsed sequence of event tokens. Further at step the modified XML document is made available as the output.

XML modifying system further includes XML documents as input to the XML parser . The input XML document is received as a linked list of buffers. XML parser parses the input XML document to create sequence of event tokens corresponding to the nodes in the XML document as explained earlier. Sequence of event tokens are encoded in a compact manner and include sufficient information to manipulate the XML nodes. In an embodiment of the invention memory operations such as bulk allocation and bulk move can be optimized since sequence of event tokens are of fixed length in size. XPath processor receives the sequence of event tokens from the XML parser . XPath processor also receives parsed XPath expressions context node XPath expression and stop XPath expression from the XPath parser . XPath processor evaluates the XPath expressions on the sequence of event tokens and generates XPath results. Each XPath result indicates the type of node whether the node is an element an attribute or a text and also includes pointers to relevant event tokens. XPath results are fed into the XPath handler . XPath handler monitors the XPath results and checks if any of the XPath result is the stop XPath expression. If the XPath result is the stop XPath expression stop node marked in the XML document the XPath handler sends a stop parsing signal the XML parser to stop parsing. In this manner the linked list of buffers is not completely parsed and event tokens are stored only for those portions of the buffers which are parsed. However XPath results combined with event tokens enable navigation of the partially parsed XML document.

In an embodiment of the invention the modification engine receives the XPath results generated from the XPath processor . Modification engine evaluates the modification script received as the input and performs the instructions in the modification script by capturing the modification instructions using references to XPath expressions. Further modification engine readjusts the linked list of buffers according to the modification instructions in the modification script to reflect the desired output. Modified XML document is the output from the XML modifying system .

In an embodiment of the invention various modules of may include one or more algorithms to perform respective functions.

One or more steps of the method illustrated in and may be implemented using a computer system. An exemplary computer system is explained in details in conjunction with .

Embodiments of the invention are related to the use of computer system for implementing the techniques described herein. According to one embodiment of the invention those techniques are performed by computer system in response to processor executing one or more sequences of one or more instructions included in main memory . Such instructions may be read into main memory from another machine readable medium product such as storage device . Execution of the sequences of instructions included in main memory causes processor to perform the method embodiment of the invention described herein. In alternative embodiments hard wired circuitry may be used in place of or in combination with software instructions to implement the invention. Thus embodiments of the invention are not limited to any specific combination of hardware circuitry and software.

The term machine readable medium product as used herein refers to any medium that participates in providing data that causes a machine to operation in a specific fashion. Examples of the machine readable medium product include but are not limited to memory devices tapes disks cassettes integrated circuits servers online software download links installation links and online links.

In an embodiment implemented using computer system various machine readable medium products are involved for example in providing instructions to processor for execution. Computer system also includes a communication interface coupled to bus interface . Communication interface provides a two way data communication coupling to internet that is coupled a server . Server might transmit a requested code for an application program through internet and communication interface .

Embodiments of the invention can be used in web services intermediary for performing light weight transformations in streaming mode. Examples of light weight transformations include service versioning use cases wire format translations for converting between Simple Object Access Protocol SOAP and Representational State Transfer REST . Further embodiments of the invention can be used as an addition to Extensible Style sheet Language Transformations XSLT and XUpdate approaches for making modifications in XML documents. XSLT is an XML based language used for the transformation of XML documents and XUpdate is a lightweight XML query language for modifying XML documents.

The forgoing description sets forth numerous specific details to convey a thorough understanding of the invention. However it will be apparent to one skilled in the art that the invention may be practiced without these specific details. Well known features are sometimes not described in detail in order to avoid obscuring the invention. Other variations and embodiments are possible in light of above teachings and it is thus intended that the scope of invention not be limited by this Detailed Description but only by the following Claims.

