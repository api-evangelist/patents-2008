---

title: Multi-application tabbing system
abstract: A method for displaying a plurality of windows on a display screen is described. The method includes steps of associating a first window with at least one second window, the at least one second window being independent of and external to the first window, and combining the first window and the at least one second window into a common window on a display screen, the first window and the at least one second window being configured to share a common window frame. An indicator may appear on the display as a target region when a user desires to associate the first and second windows. Subsequent operations performed on the common window are performed automatically on any underlying window. For example, when a user chooses to save the contents of the common window, the contents of all of the windows of the common window may be saved.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08136047&OS=08136047&RS=08136047
owner: Microsoft Corporation
number: 08136047
owner_city: Redmond
owner_country: US
publication_date: 20080915
---
This application is a continuation of and claims benefit of priority to U.S. patent application Ser. No. 11 036 614 filed on Jan. 18 2005.

Aspects of the present invention are directed generally to window arrangements in an operating system. More particularly aspects of the present invention are directed to a method and system for tabbing multiple windows in an operating system and allowing some intelligent behavior to exist between the windows.

As the use of computers in both the workforce and personal life has increased so has the desire to allow for easier use of them. Many operating systems today utilize a windows based configuration of application programs. Information is displayed on a display screen in what appears to be several sheets of paper. By interfacing with the windows a user can access any window as if grabbing a single sheet of paper. A windows based configuration allows a user to have two or more windows open on a screen simultaneously.

One common configuration is to show multiple parts of a single document like sheets in Microsoft Excel by Microsoft Corporation of Redmond Wash. or multiple documents in a single window like source code and reference material in Microsoft Visual Studio by Microsoft Corporation of Redmond Wash. Most recently it has appeared in web browsers including Opera software by Opera Software ASA of Oslo Norway Mozilla Firefox software by the Mozilla Organization of Mountain View Calif. and Apple Safari by Apple Computer Inc. of Cupertino Calif. as a feature called tabbed browsing. All of these implementations introduce the ability for the user to access the set of tabs and quickly reopen a set of tabs at the same time. In these systems the tabs are inside the top level window frame and the contents of each tab are similar dialog box controls or web pages for example.

Presently independent and external windows cannot be grouped together so heterogeneous windows cannot be managed together. A similar invention has been used before as in tabbed dialog box windows or tabbed web browser pages. Operating systems do not currently allow for multiple windows to be associated with each other so that an operation performed on one window cannot be performed automatically on a second independent and external window

There exists a need for the ability to group any two or more top level windows together so heterogeneous windows can be managed together. There is a need for a method for combining a plurality of windows on a display screen where a user can tab between the different windows associated in the combined window. The method may includes steps of associating a first window with at least one second window the at least one second window being independent of and external to the first window and combining the first window and the at least one second window into a common window on a display screen the first window and the at least one second window being configured to share a common window frame.

Another aspect of the invention provides an indicator that may appear on the display as a target region when a user desires to combine the first and the second windows into a common window. Subsequent operations performed on the common window are performed automatically on the content of the first and second windows.

In the following description of various illustrative embodiments reference is made to the accompanying drawings which form a part hereof and in which is shown by way of illustration various embodiments in which the invention may be practiced. It is to be understood that other embodiments may be utilized and structural and functional modifications may be made without departing from the scope of the present invention.

The invention is operational with numerous other general purpose or special purpose computing system environments or configurations. Examples of well known computing systems environments and or configurations that may be suitable for use with the invention include but are not limited to personal computers server computers hand held or laptop devices multiprocessor systems microprocessor based systems set top boxes programmable consumer electronics network PCs minicomputers mainframe computers distributed computing environments that include any of the above systems or devices and the like.

The invention may be described in the general context of computer executable instructions such as program modules being executed by a computer. Generally program modules include routines programs objects components data structures etc. that perform particular tasks or implement particular abstract data types. The invention may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment program modules may be located in both local and remote computer storage media including memory storage devices.

With reference to an exemplary system for implementing the invention includes a general purpose computing device in the form of a computer . Components of computer may include but are not limited to a processing unit a system memory and a system bus that couples various system components including the system memory to the processing unit . The system bus may be any of several types of bus structures including a memory bus or memory controller a peripheral bus and a local bus using any of a variety of bus architectures. By way of example and not limitation such architectures include Industry Standard Architecture ISA bus Micro Channel Architecture MCA bus Enhanced ISA EISA bus Video Electronics Standards Association VESA local bus and Peripheral Component Interconnect PCI bus also known as Mezzanine bus.

Computer typically includes a variety of computer readable media. Computer readable media can be any available media that can be accessed by computer and includes both volatile and nonvolatile media removable and non removable media. By way of example and not limitation computer readable media may comprise computer storage media and communication media. Computer storage media includes volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. Computer storage media includes but is not limited to random access memory RAM read only memory ROM electronically erasable programmable read only memory EEPROM flash memory or other memory technology CD ROM digital versatile disks DVD or other optical disk storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can accessed by computer . Communication media typically embodies computer readable instructions data structures program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term modulated data signal means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example and not limitation communication media includes wired media such as a wired network or direct wired connection and wireless media such as acoustic RF infrared and other wireless media. Combinations of the any of the above should also be included within the scope of computer readable media.

The system memory includes computer storage media in the form of volatile and or nonvolatile memory such as ROM and RAM . A basic input output system BIOS containing the basic routines that help to transfer information between elements within computer such as during start up is typically stored in ROM . RAM typically contains data and or program modules that are immediately accessible to and or presently being operated on by processing unit . By way of example and not limitation illustrates operating system application programs other program modules and program data .

The computer may also include other removable non removable volatile nonvolatile computer storage media. By way of example only illustrates a hard disk drive that reads from or writes to non removable nonvolatile magnetic media a magnetic disk drive that reads from or writes to a removable nonvolatile magnetic disk and an optical disc drive that reads from or writes to a removable nonvolatile optical disc such as a CD ROM or other optical media. Other removable non removable volatile nonvolatile computer storage media that can be used in the exemplary operating environment include but are not limited to magnetic tape cassettes flash memory cards digital versatile disks digital video tape solid state RAM solid state ROM and the like. The hard disk drive is typically connected to the system bus through a non removable memory interface such as interface and magnetic disk drive and optical disc drive are typically connected to the system bus by a removable memory interface such as interface .

The drives and their associated computer storage media discussed above and illustrated in provide storage of computer readable instructions data structures program modules and other data for the computer . In for example hard disk drive is illustrated as storing operating system application programs other program modules and program data . Note that these components can either be the same as or different from operating system application programs other program modules and program data . Operating system application programs other program modules and program data are given different numbers here to illustrate that at a minimum they are different copies. A user may enter commands and information into the computer through input devices such as a digital camera a keyboard and pointing device commonly referred to as a mouse trackball or touch pad. Other input devices not shown may include a pen stylus and tablet microphone joystick game pad satellite dish scanner or the like. These and other input devices are often connected to the processing unit through a user input interface that is coupled to the system bus but may be connected by other interface and bus structures such as a parallel port game port or a universal serial bus USB . A monitor or other type of display device is also connected to the system bus via an interface such as a video interface . In addition to the monitor computers may also include other peripheral output devices such as speakers and printer which may be connected through an output peripheral interface .

The computer may operate in a networked environment using logical connections to one or more remote computers such as a remote computer . The remote computer may be a personal computer a server a router a network PC a peer device or other common network node and typically includes many or all of the elements described above relative to the computer although only a memory storage device has been illustrated in . The logical connections depicted in include a local area network LAN and a wide area network WAN but may also include other networks. Such networking environments are commonplace in offices enterprise wide computer networks intranets and the Internet.

When used in a LAN networking environment the computer is connected to the LAN through a network interface or adapter . When used in a WAN networking environment the computer typically includes a modem or other means for establishing communications over the WAN such as the Internet. The modem which may be internal or external may be connected to the system bus via the user input interface or other appropriate mechanism. In a networked environment program modules depicted relative to the computer or portions thereof may be stored in the remote memory storage device. By way of example and not limitation illustrates remote application programs as residing on memory device . It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.

It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers can be used. The existence of any of various well known protocols such as TCP IP Ethernet FTP HTTP and the like is presumed and the system can be operated in a client server configuration to permit a user to retrieve web pages from a web based server. Any of various conventional web browsers can be used to display and manipulate data on web pages.

A programming interface or more simply interface may be viewed as any mechanism process protocol for enabling one or more segment s of code to communicate with or access the functionality provided by one or more other segment s of code. Alternatively a programming interface may be viewed as one or more mechanism s method s function call s module s object s etc. of a component of a system capable of communicative coupling to one or more mechanism s method s function call s module s etc. of other component s . The term segment of code in the preceding sentence is intended to include one or more instructions or lines of code and includes e.g. code modules objects subroutines functions and so on regardless of the terminology applied or whether the code segments are separately compiled or whether the code segments are provided as source intermediate or object code whether the code segments are utilized in a runtime system or process or whether they are located on the same or different machines or distributed across multiple machines or whether the functionality represented by the segments of code are implemented wholly in software wholly in hardware or a combination of hardware and software.

Notionally a programming interface may be viewed generically as shown in or . illustrates an interface Interface as a conduit through which first and second code segments communicate. illustrates an interface as comprising interface objects I and I which mayor may not be part of the first and second code segments which enable first and second code segments of a system to communicate via medium M. In the view of one may consider interface objects I and I as separate interfaces of the same system and one may also consider that objects I and I plus medium M comprise the interface. Although show bi directional flow and interfaces on each side of the flow certain implementations may only have information flow in one direction or no information flow as described below or may only have an interface object on one side. By way of example and not limitation terms such as application programming interface API entry point method function subroutine remote procedure call and component object model COM interface are encompassed within the definition of programming interface.

Aspects of such a programming interface may include the method whereby the first code segment transmits information where information is used in its broadest sense and includes data commands requests etc. to the second code segment the method whereby the second code segment receives the information and the structure sequence syntax organization schema timing and content of the information. In this regard the underlying transport medium itself may be unimportant to the operation of the interface whether the medium be wired or wireless or a combination of both as long as the information is transported in the manner defined by the interface. In certain situations information may not be passed in one or both directions in the conventional sense as the information transfer may be either via another mechanism e.g. information placed in a buffer file etc. separate from information flow between the code segments or non existent as when one code segment simply accesses functionality performed by a second code segment. Any or all of these aspects may be important in a given situation e.g. depending on whether the code segments are part of a system in a loosely coupled or tightly coupled configuration and so this list should be considered illustrative and non limiting.

This notion of a programming interface is known to those skilled in the art and is clear from the foregoing detailed description of the invention. There are however other ways to implement a programming interface and unless expressly excluded these too are intended to be encompassed by the claims set forth at the end of this specification. Such other ways may appear to be more sophisticated or complex than the simplistic view of but they nonetheless perform a similar function to accomplish the same overall result. We will now briefly describe some illustrative alternative implementations of a programming interface.

A communication from one code segment to another may be accomplished indirectly by breaking the communication into multiple discrete communications. This is depicted schematically in . As shown some interfaces can be described in terms of divisible sets of functionality. Thus the interface functionality of may be factored to achieve the same result just as one may mathematically provide 24 or 2 times 2 times 3 times 2. Accordingly as illustrated in the function provided by interface Interface may be subdivided to convert the communications of the interface into multiple interfaces InterfaceA InterfaceB InterfaceC etc. while achieving the same result. As illustrated in the function provided by interface I may be subdivided into multiple interfaces I I I etc. while achieving the same result. Similarly interface of the second code segment which receives information from the first code segment may be factored into multiple interfaces etc. When factoring the number of interfaces included with the 1st code segment need not match the number of interfaces included with the 2nd code segment. In either of the cases of the functional spirit of interfaces Interface and I remain the same as with respectively. The factoring of interfaces may also follow associative commutative and other mathematical properties such that the factoring may be difficult to recognize. For instance ordering of operations may be unimportant and consequently a function carried out by an interface may be carried out well in advance of reaching the interface by another piece of code or interface or performed by a separate component of the system. Moreover one of ordinary skill in the programming arts can appreciate that there are a variety of ways of making different function calls that achieve the same result.

In some cases it may be possible to ignore add or redefine certain aspects e.g. parameters of a programming interface while still accomplishing the intended result. This is illustrated in . For example assume interface Interface of includes a function call Square input precision output a call that includes three parameters input precision and output and which is issued from the 1st Code Segment to the 2nd Code Segment. If the middle parameter precision is of no concern in a given scenario as shown in it could just as well be ignored or even replaced with a meaningless in this situation parameter. One may also add an additional parameter of no concern. In either event the functionality of square can be achieved so long as output is returned after input is squared by the second code segment. Precision may very well be a meaningful parameter to some downstream or other portion of the computing system however once it is recognized that precision is not necessary for the narrow purpose of calculating the square it may be replaced or ignored. For example instead of passing a valid precision value a meaningless value such as a birth date could be passed without adversely affecting the result. Similarly as shown in interface I is replaced by interface I redefined to ignore or add parameters to the interface. Interface I may similarly be redefined as interface I redefined to ignore unnecessary parameters or parameters that may be processed elsewhere. The point here is that in some cases a programming interface may include aspects such as parameters which are not needed for some purpose and so they may be ignored or redefined or processed elsewhere for other purposes.

It may also be feasible to merge some or all of the functionality of two separate code modules such that the interface between them changes form. For example the functionality of may be converted to the functionality of respectively. In the previous 1st and 2nd Code Segments of are merged into a module containing both of them. In this case the code segments may still be communicating with each other but the interface may be adapted to a form which is more suitable to the single module. Thus for example formal Call and Return statements may no longer be necessary but similar processing or response s pursuant to interface Interface may still be in effect. Similarly shown in part or all of interface I from may be written inline into interface I to form interface I . As illustrated interface I is divided into Iand I and interface portion Ihas been coded in line with interface I to form interface II . For a concrete example consider that the interface I from performs a function call square input output which is received by interface I which after processing the value passed with input to square it by the second code segment passes back the squared result with output. In such a case the processing performed by the second code segment squaring input can be performed by the first code segment without a call to the interface.

A communication from one code segment to another may be accomplished indirectly by breaking the communication into multiple discrete communications. This is depicted schematically in . As shown in one or more piece s of middleware Divorce Interface s since they divorce functionality and or interface functions from the original interface are provided to convert the communications on the first interface Interface to conform them to a different interface in this case interfaces InterfaceA InterfaceB and InterfaceC. This might be done e.g. where there is an installed base of applications designed to communicate with say an operating system in accordance with an Interface I protocol but then the operating system is changed to use a different interface in this case interfaces InterfaceA InterfaceB and InterfaceC. The point is that the original interface used by the 2nd Code Segment is changed such that it is no longer compatible with the interface used by the 1st Code Segment and so an intermediary is used to make the old and new interfaces compatible. Similarly as shown in a third code segment can be introduced with divorce interface DII to receive the communications from interface I and with divorce interface DI to transmit the interface functionality to for example interfaces Iand I redesigned to work with 012 but to provide the same functional result. Similarly DII and DI may work together to translate the functionality of interfaces I and I of to a new operating system while providing the same or similar functional result.

Yet another possible variant is to dynamically rewrite the code to replace the interface functionality with something else but which achieves the same overall result. For example there may be a system in which a code segment presented in an intermediate language e.g. Microsoft IL Java ByteCode etc. is provided to a Just in Time JIT compiler or interpreter in an execution environment such as that provided by the .Net framework the Java runtime environment or other similar runtime type environments . The JIT compiler may be written so as to dynamically convert the communications from the 1st Code Segment to the 2nd Code Segment i.e. to conform them to a different interface as may be required by the 2nd Code Segment either the original or a different 2nd Code Segment . This is depicted in . As can be seen in this approach is similar to the Divorce scenario described above. It might be done e.g. where an installed base of applications are designed to communicate with an operating system in accordance with an Interface protocol but then the operating system is changed to use a different interface. The JIT Compiler could be used to conform the communications on the fly from the installed base applications to the new interface of the operating system. As depicted in this approach of dynamically rewriting the interface s may be applied to dynamically factor or otherwise alter the interface s as well.

It is also noted that the above described scenarios for achieving the same or similar result as an interface via alternative embodiments may also be combined in various ways serially and or in parallel or with other intervening code. Thus the alternative embodiments presented above are not mutually exclusive and may be mixed matched and combined to produce the same or equivalent scenarios to the generic scenarios presented in . It is also noted that as with most programming constructs there are other similar ways of achieving the same or similar functionality of an interface which may not be described herein but nonetheless are represented by the spirit and scope of the invention i.e. it is noted that it is at least partly the functionality represented by and the advantageous results enabled by an interface that underlie the value of an interface.

Windows and are oriented within a desktop space . Desktop space is an area of a display that allows for the display of windows corresponding to application programs. The taskbar at the bottom indicates which windows are currently in use which may be visible or minimized. A taskbar is a specific implementation of an on screen window remote control used to list and enable manipulation of windows such as activating moving hiding and minimizing. Window is represented by taskbar button and window is represented by taskbar button . As shown in this example the two windows and are shown open. Although only two windows are shown it should be understood that more windows may be open. The file name of the content of windows and are shown along the title bar area of the respective window. The title of window is shown as New York Times and the title of window is shown as Wired News . These titles may be generated by the application program operating the window and or may be customizable by a user. The same title for each window and is shown in the corresponding taskbar button and .

Windows and are used by application programs to display content to a user. The application program associated with window may be a different application program or the same application program corresponding to window . Window is independent of and external to window . As used herein a first window is external to a second window when the first window is not contained within the second window and the second window is not contained within the first window. It should be understood that a first window is not contained in a second window if the two windows merely overlap.

As shown in a user has begun to move the topmost window window by dragging its title bar with a mouse pointer . In this example a target region has appeared over a predefined area of a region of the destination window. As shown by the example in the target region appears within the title bar of window . Target region may appear when the mouse pointer and or a portion of another window is are within the predefined area. For example as shown in target region does not exist however when the mouse pointer is within a predefined distance of the target region the target region appears on the display. Alternatively target region may be a predefined location point on the display where two windows can be dragged and dropped to be combined with each other. The target region may always be displayed in a predefined location relative to the destination window or to the display screen or it may appear when a window and or mouse pointer is are close to the target region.

As shown in the example of a user has dragged window over the target region . Upon release drop of window over the target region windows and are combined with each other into a common or tabbed window . Tabbed windows are a set of windows that can be managed e.g. moved resized etc. together. Only one window in the set is visible at a time while the others can be selected by clicking on a tab extending from an edge of a common window frame. Tabbing windows together reduces the amount of window management a user must perform as well as reduces the visual clutter of a work surface consisting of overlapping windows. Additionally a group of tabbed windows can be persisted together so that the group of windows can be closed and re opened at a later time. Top level windows are those which are not contained in any other windows. On Windows XP these are the windows that appear in the Taskbar at the bottom of the screen. Tabbed top level windows are a group of windows that share a common border resize handles system menu and other window management VI elements. Any top level window can be added to or later removed from the group.

It should be understood by those skilled in the art that target region may be a type of visual and or audio indicator that prompts the user as to the location for combining the windows. In accordance with at least one aspect of the present invention with reference to the association and combination of the windows may be performed by dragging and dropping window into a target region and then dragging and dropping window into the target region . In still another embodiment a user can perform a single and or sequence of key button strokes to combine two windows and . For example a user can press a predefined sequence of key strokes on a keyboard to combine windows and . Upon activation of the key strokes window may be combined with window . In another embodiment of the present invention a user can click and drag taskbar button and drag it to taskbar button in order to initiate the process for combining window and window . In still another embodiment a user can click and actuation button on an input device such as an electronic mouse to combine taskbar buttons and . It should be understood that the present invention is not so limited to the examples included herein.

As described illustrates an example of a combined window being displayed in accordance with at least one aspect of the present invention. Windows and have been combined into a common window or tabbed window . The content of window is shown on the top of the combined window . A user may switch to see the content of window by selecting the tab along a top edge of the common window . As shown because the content of window is not active e.g. behind the content of window the tab corresponding to window is shaded. Such a shading scheme may be used to notify a user as to which of the tabbed windows currently is being shown in the common window . The content of window is currently being shown in the combined window and the tab corresponding to window is not shaded. Again such a shading scheme may be used to notify a user as to which of the tabbed windows currently is being shown in the common window . Other schemes besides shading such as size placement of lines font changes and other visual cues may be used also.

Also shown in is an example of how taskbar buttons and in the taskbar area corresponding to windows and may be combined into a common taskbar button . As shown the taskbar at the bottom indicates that the content of window is currently active. Because the content of window is active the file name of the content of window is shown along the title bar area . The title of window is shown in taskbar button as New York Times . If a user selects to activate the content of window in the common window taskbar button would change to have the title read as the title of window Wired News . Next to taskbar button is shown a menu activation switch . Menu activation switch allows a user to see and or switch to any other non active windows that are combined with the active window. Upon activation of menu activation switch a dropdown menu of all other windows combined in the common window may be displayed for a user to switch to i.e. to make active in the common window. As such a user can see and or switch to other windows in the combined window by using the tabs and and or using the menu activation switch . Other implementations may be used also such as keyboard shortcuts or menus accessible from other places in the user interface such as a system menu for common window .

As described below a change to the orientation of the common window may automatically initiate a change to the orientation of the underlying window and . Common window is shown to include three mode selection buttons and . Mode selection button. may be an operation to minimize common window . Mode selection button may be an operation to restore common window . Mode selection button may be an operation to close window .

Upon activation of a mode selection button such as mode selection button common window has an operation performed on it. In this case a user may select to minimize common window upon depression of mode selection button . In response the operating system automatically may perform the same operation on underlying windows and as the two windows and are associated with each other. Although mode selection interfaces buttons and common borders are described in these examples it should be understood by those skilled in the art that other types of operations and or orientation changes may be performed on the windows and that the present invention is not so limited to the examples herein. For example a user may choose to perform an operation from a drop down menu for common window such as to save the content . In such a case the system automatically may save the content corresponding to window as well. In other embodiments the system may be configured to allow for certain operations to be performed automatically such as maximizing and minimizing the common window while not performing other operations automatically. For example saving the content of common window may automatically save the content of both the active window shown and other tabbed windows in the common window while disassociating one window from the common window may not disassociate all other windows.

User interface elements such as the mode selection buttons allow users to create modify save and restore the windows of the tabbed window group together. This includes the ability to drag a window and drop it on a target on the title bar of another window to tab them together as well as a more traditional menu driven approach. Windows in a group no longer have to have their own sizing minimizing maximizing hiding showing docking and other window manipulation action operations. Instead the windows may rely on the common window to provide those user interface elements. Additionally the common group may allow for saving and closing the common window.

As shown in a user has begun to move a newly opened window by dragging its title bar with a mouse pointer such as mouse pointer in . In this example target region may be a predefined location point on the display where two windows can be dragged and dropped to be combined with each other. The predefined location of the target region may appear when a window and or mouse pointer is are close to it or it may always be present in a predefined location. Window is shown with a title in the title bar region of the window. Window also is shown with corresponding mode selection buttons such as button . Once again window is used by an application program to display content to a user. The application program associated with window may be a different application program or the same application program corresponding to either or both of windows and . Window is independent of and external to common window . A taskbar button corresponding to window is shown in the taskbar area .

Also shows an example of how taskbar buttons and in the taskbar area corresponding to common window and window may be combined into a common taskbar button . As shown the taskbar at the bottom indicates that the content of window is currently active. Because the content of window is active the file name of the content of window is shown along the title bar area . The title of window is shown in taskbar button as Untitled notepad . If a user selects to activate the content of window or in the common window taskbar button would change to have the title read as the title of window New York Times or the title of window Wired News . Next to taskbar button is shown a menu activation switch . Menu activation switch allows a user to see and or switch to any other non active windows that are combined with the active window. Upon activation of menu activation switch a dropdown menu of all other windows combined in the common window may be displayed for a user to switch to i.e. to make active in the common window. As such a user can see and or switch to other windows in the combined window by using the tabs and and or using the menu activation switch . Common window is shown to include three mode selection buttons and which may function in a similar manner as mode selection buttons and in .

It should be understood by those skilled in the art that two windows can be tabbed together even if the windows are not inherently resizable when they are independent of each other. For example a window with a fixed size could be tabbed with a window of a variable size. In accordance with at least one embodiment two windows may be tabbed together while still maintaining their independent size although they may maintain a shared position such as in the Z order or a shared visibility. In such an embodiment when a user selects a tab to switch to another window the combined or common window changes size to match the size of the selected window. For example if a window containing a document in landscape view is tabbed with a window containing a document in portrait view the size of the common window may change between portrait and landscape as the corresponding tab is selected for a window. In still another embodiment fixed size window also may be included in a tabbed group by causing the combined or common window to resize when it is selected or shown either clipped scaled or on top of some background surface when the combined or common window s size is not the same.

The process also may continue to step where a determination is made as to whether an input has been received to change the orientation of the common window. For example the input may be a request to adjust the border of the common window. If an input has not been received the process ends. If an input has been received at step the process moves to step where the orientation of the common window is changed in accordance with the request. Alternatively and or concurrently from step the process may proceed to step where a determination is made as to whether an input has been received to perform an operation on the common window. One type of operation may include an operation to save the content displayed within the common window. If an input has not been received the process ends. If an input has been received at step the process moves to step where the operation is performed on the common window. In such a case of saving the content if the operation is to be performed common to both windows the contents of both the first and the second windows are saved. Alternatively if the operation is independent of the other non active window s the operation is only performed on the one window to which the operation was directed.

From either step or the process moves to step where a determination is made as to whether an input has been received to disassociate the first and second windows. For example a user may decide that she no longer desires to have the first and second window tabbed together. If an input has not been received the process ends. If an input has been received at step the process moves to step where the first and second windows are removed from the common window and the process ends.

At step a determination is made as to whether the first open window is within a predefined area of a region of a display screen. For example the predetermined region may be within an inch of the target region and the system may determine that the user has dragged the first open window within an inch of the target region. In another example the predetermined region may be a fixed target location on a display and the system may determine that the user has dragged the first open window over the fixed target location. If the first open window is not within the predefined area the process returns back to step . If the first open window is within the predefined area the process moves to step where a visual indicator is displayed. It should be noted that an audio indicator may also be used or alternatively be used in place of the visual indicator.

At step a request to drop the first window over the visual indicator is received. Such a request may originate in the form of a user releasing a clicked and held electronic input device button from step . From step the process may proceed to step where the first open window and a second open window are associated with each other. Alternatively from step the process may move to step where a request to drag the second open window is received by the system. At step a request to move the second open window is received by the system. Such a request may originate in the form of a movement of an electronic input device such as an electronic mouse. The process then moves to step .

At step a determination is made as to whether the second open window is within a predefined area of a region of a display screen. If not the process returns back to step . If the second open window is within a predefined area the process moves to step where a visual indicator is displayed. At step a request to drop the second window over the visual indicator is received. Such a request may originate in the form of a user releasing a clicked and held electronic input device button from step . From step the process may proceed to step where the first open window and the second open window are associated with each other.

At step the first taskbar button and the second taskbar button corresponding to the first and second windows are combined into a common taskbar button in the taskbar area. Moving to step an input is received to access e.g. display the content of the first window. At step the content of the first window is displayed in the common window. Then at step the content of the first taskbar button is displayed in the common taskbar button. For example when the user selects the tab corresponding to the first window the common taskbar button in the taskbar area may change to reflect the title of the first window.

At step a determination is made as to whether an input has been received to switch to the content of the second window. An input may correspond to a user selecting the tab corresponding to the second window. If no the process ends. If an input is received at step the content of the second window is displayed in the common window. Then at step the content of the second taskbar button is displayed in the common taskbar button and the process ends. For example when the user selects the tab corresponding to the second window the common taskbar button in the taskbar area may change to reflect the title of the second window.

Another embodiment is programmatically controlling the opening of windows directly into a common window. For example one or more applications such as Microsoft Office may share the concept of a project consisting of several documents. These documents may be opened simultaneously into a combined window or automatically added to a combined window as new documents in the project are opened by a user.

With respect to an application programming interface API various aspects of the present invention may be performed by an API. For example public APIs may interface with an operating system to allow an operating system to provide the various features of the present invention. In one embodiment a software architecture for processing data representative of combined windows may include a component configured to combine a first open window and a second open window into a common open window and an application program interface to access the component. An API may receive a request to group two windows into a common window access the necessary function s to perform the operation and then send the results back to an operating system. The operating system may use the data provided from the API to perform the various features of the present invention.

APIs that let application programs take advantage of window groups includes grouping and un grouping windows programmatically as well as letting application programs specify how the states of the windows are handled when a command is implemented on a common window such as save print zoom content compare versions compile source code etc. This state information allows a window of an application program in a common window to restore to an appropriate instead of a default state when a common window is opened. For example instead of just opening a blank document an editing application program may reopen the document that was open when the common window was saved.

While illustrative systems and methods as described herein embodying various aspects of the present invention are shown it will be understood by those skilled in the art that the invention is not limited to these embodiments. Modifications may be made by those skilled in the art particularly in light of the foregoing teachings. For example each of the elements of the aforementioned embodiments may be utilized alone or in combination or subcombination with elements of the other embodiments. It will also be appreciated and understood that modifications may be made without departing from the true spirit and scope of the present invention. The description is thus to be regarded as illustrative instead of restrictive on the present invention.

