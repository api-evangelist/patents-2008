---

title: Kerberos ticket virtualization for network load balancers
abstract: An exemplary group ticket for a Kerberos protocol includes a service ticket encrypted with a dynamic group key and a plurality of enveloped pairs where each pair includes a name associated with a member of a group and an encrypted the dynamic group key for decryption by a key possessed by the member of the group where decryption of an encrypted dynamic group key allows for decryption of the service ticket. Other exemplary methods, systems, etc., are also disclosed.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08132246&OS=08132246&RS=08132246
owner: Microsoft Corporation
number: 08132246
owner_city: Redmond
owner_country: US
publication_date: 20080227
---
To meet client demands computing environments should be scalable available and manageable. Technologies referred to generally as clustering aim to address such concerns. A cluster may be defined as a group of independent computers that work together to run a common set of applications and that provide an image of a single system to a client and application. More generally a cluster may be defined as a set of resources made available to users and presented as a unified entity to the users.

While client users may not be aware that a cluster exists they expect server based resources e.g. applications and data to be readily available. To meet such expectations an administrator should be able to scale and manage cluster resources. Developers can also play a role by developing applications that appear unified to a client yet cluster aware to an administrator.

In a client server cluster architecture when overall load for a cluster aware application exceeds resource capabilities of a cluster e.g. CPU disk space I O capacity bandwidth scalability addresses the ability to add resources to the cluster e.g. scale up and or scale out . For example formerly administrators that desired future system expansion capability needed to make up front commitments to expensive high end servers that provided space for additional CPUs drives and memory. With clustering and cluster aware applications administrators can add resources as needed to meet for example overall processing power requirements.

With respect to high availability when a component or an application in a cluster fails cluster software should respond for example by restarting the failed application or dispersing work from the failed component to another component in the cluster. With respect to manageability clustering technologies often provide a graphical console with tools for example to facilitate moving applications and data within the cluster to different servers. Such a clustering feature can be used for example to manually balance workloads and to unload servers for planned maintenance without downtime.

A clustering technology known as network load balancing NLB includes aspects of scalability availability and manageability. NLB provides for strategic distribution of client requests or TCP IP traffic to appropriate resources in a cluster. Some commercially available clustering technologies provide for NLB in a cluster around 30 hosts e.g. servers . NLB may be achieved via hardware e.g. a NLB device or via software e.g. NLB software running on one or more devices . A NLB scheme often presents a common virtual IP address for an entire cluster and transparently partitions client requests across the multiple servers in the cluster. NLB provides high availability and high scalability to the Internet applications.

Some NLB techniques use a heartbeat to detect machine failures. For example a heartbeat between nodes can contain resource health information to enable the cluster to determine the level of failure and amount of fail over required. If a failure occurs an NLB algorithm can direct workload to healthy machine. NLB may perform automatic load balancing of session based traffic and allow for easy addition of hosts to a cluster.

Where a cluster requires security load balancing can become problematic. For example a Kerberos security protocol can provide server authentication to a given client by the means of a trusted 3rd party Key Distribution Center KDC where the client instead of authenticating to a given server it authenticates to a group of servers. This group of servers shares a group key dynamically. The group key is randomly generated on the fly and then encrypted with the server s long term key. Using this technique there are many copies of the same group key in the encrypted form one copy encrypted by the key of each server in this server group. In a cluster a group of computers may service requests directed to a virtual computer e.g. a virtual server . For example a sever cluster may be accessed through a virtual IP address that fronts real IP addresses. In such an example routing of the requests from a virtual server e.g. a virtual node to a real computer a real node can be achieved by either hardware or software. Combining security and load balancing technologies poses a problem in terms of Kerberos authentication especially where routing is via a hardware device that only provides routing support.

As described herein various technologies address security in a computing environment that relies on load balancing.

An exemplary group ticket for a Kerberos protocol includes a service ticket encrypted with a dynamic group key and a plurality of enveloped pairs where each pair includes a name associated with a member of a group and an encrypted dynamic group key for decryption by a long term key possessed by the member of the group where decryption of an encrypted dynamic group key allows for decryption of the service ticket. Other exemplary methods systems etc. are also disclosed.

Various exemplary techniques described herein pertain to a Kerberos ticket suitable for use in an environment that relies on clustering. For example a particular technique provides for Kerberos ticket virtualization for network load balancers.

As mentioned a client normally sees a cluster as a unified resource such as a single server. In a conventional client server Kerberos security scheme a client is required to identify the server it wants to connect to. However as a Network Load Balancing NLB server or network load balancer is typically visible to clients as a single node or accessed via a single node e.g. a virtual node a client does not typically know anything about servers in the cluster hidden behind the single node. While the client generally knows a name of such a node the classic Kerberos protocol prohibits registration of all of the real nodes under a common Server Principle Name SPN because the SPN is an identifier of a single long term key and each node has its own key and these keys are different. Various exemplary techniques described herein encrypt a ticket in a temporary key which can be accomplished without altering the classic Kerberos abstraction.

An exemplary technique includes configuring a key distributing center KDC in such a way that an issued service ticket can be decrypted by more than one entity for instance using a scheme where the key used is encrypted using keys associated with each cluster node and subsequently added to the ticket . According to this exemplary technique a ticket issued to a client can be used on each cluster node transparently from the point of view of the client. According to an exemplary KDC configuration technique group accounts can be used as a management paradigm. Such an approach allows an application to take advantage of NLB configurations without requiring any changes to the application. In such an approach only changes to a KDC and underlying cluster node OSs would be required and group membership of a virtual server or other node front can be managed centrally on the KDC.

The ticket includes a temporary key e.g. a session key a service ticket and one or more pairs which are at times referred to as enveloped key pairs. In the example of each pair includes a group node and a dynamic group key . More specifically in each pair the dynamic group key is capable of being decrypted by a server node key . Once the dynamic group key is decrypted the decrypted dynamic group key may be used to decrypt the service ticket .

The ticket can be used by a client to securely access resources associated with a specific server that is a member of a cluster or a group. In this manner the cluster or the group may be managed by a virtual server that uses a virtual node to achieve network load balancing. For implementation the ticket does not require any modification to the virtual server. In the example of the ticket introduces only a small size overhead as it now contains more information than a typical single server ticket.

As mentioned commercially available NLB technology may allow for cluster sizes on the order of 30 or so servers. Hence an exemplary ticket for a cluster of 30 servers would be larger by approximately the margin of 30 times the size of an encrypted key plus the size of the server name.

As described herein a group ticket for a Kerberos protocol can include a service ticket encrypted with a dynamic group key and a plurality of enveloped pairs where each pair includes a name associated with a member of a group and an encrypted dynamic group key for decryption by a key possessed by the member of the group where decryption of an encrypted dynamic group key allows for decryption of the service ticket.

A timeline demonstrates use of the ticket . At a time A the client transmits a client key with a ticket granting service request TGS REQ to the KDC where the request specifically provides the name of the group i.e. SPN I . At a time B the KDC issues the group ticket to the client .

In the example of the KDC includes a directory of group names with member names for each group. This directory allows for ticket virtualization by associating an alternate security group and or a list of alternate user computer accounts to a given account for example with an already configured SPN. If the association includes groups the KDC may be configured to be responsible for expanding the groups to a list of individual user computer accounts to be used for creating the list of SPN enveloped key pairs.

The ticket includes enveloped key pairs for the members or group nodes of the group SPN I . In the example of each of the members in the group has a corresponding member node e.g. MN MN . . . MN N . However as mentioned the client does not know or does not need to know anything about the specific members . The client only needs to know that the apparently unified entity exists and can provide resources for meeting some need of the client . Each enveloped pair of the ticket includes a member name and the result of encrypting the service ticket key e.g. the dynamic group key with a corresponding member key e.g. key of a real node .

At a time C the client uses the device to issue an application request AP REQ to the Group which is received by the virtual server which for example may simply provide for basic routing to members of the group. In such an example the virtual server may simply forward the application request and ticket to a member node where the member node performs a check to see if its name appears in the ticket i.e. as being associated with an enveloped pair .

At a time E the server at member node MN uses its key to decrypt the enveloped pair to provide the dynamic group key . In turn the dynamic group key is used to decrypt the service ticket . Once the service ticket has been decrypted for a Kerberos protocol security steps may proceed as in a conventional arrangement.

As described herein an exemplary method includes receiving an application request e.g. item C in the timeline and a group ticket that includes a name for a group a service ticket and enveloped key pairs e.g. the group ticket routing the request and the group ticket to a member of the group where the member of the group includes a member key e.g. item D in the timeline decrypting a dynamic group key in one of the enveloped key pairs using the member key e.g. key and decrypting the service ticket using the dynamic group key e.g. item E in the timeline .

The client side component includes a key management module and a names module . The key management module allows a client to request tickets from a KDC and the names module allows the client to know which entities require security information such as a ticket.

The KDC side component includes a Principle Name PN table a ticket module and a registration module . The PN table maintains a list of names for entities for example on a network. The ticket module allows for ticket generation especially for ticket virtualization where a ticket includes one or more member names associated with a PN. The registration module includes a virtual server feature that allows a virtual server to register nodes for example the virtual server or administrator for the group can use the registration module to register member names for nodes in the group. The registration module includes a generic group feature for registration of groups that may be organized in any of a variety of manners. For example a company may maintain a group of resources that require a ticket for access. In such an example the group may be accessed via a router or some other basis e.g. client selection geographic proximity etc. .

The registration module also includes a load balancing server feature . Such a feature may be used by a server or other device that performs load balancing. For example an administrator of a load balancing server may use the feature to enter nodes delete nodes change node names of nodes under management of the server. The registration module also includes APIs for facilitating or standardizing registration. For example APIs may include a name add delete change API call for use by an administrator.

The group side ticket component includes a group table module a key management module a load management module and a member management module . The group table module may simply keep a table of group names e.g. member names for a group . The key management module may be used to update any changes that occur with respect to one or more keys. The load management module may associate load information with security information. For example for a failed node the load management module may communicate such information to a KDC to ensure that a ticket does not include an envelope pair for the failed node. This can be used as an additional measure to ensure that a client does not attempt to access a failed node. The member management module is explained in more detail with respect to .

A check block and decision block operate to check the server names of the enveloped pairs in the group ticket against one or more known server names and to see if a match occurred. While the check block and the decision block may be optional it can be helpful to have a mechanism to ensure that the group ticket pertains to the group managed by the device that receives the ticket. In the example of the decision block decides if a match occurred per the check block for a server name in the group ticket. If no match is found then security cannot be established and the method issues a failure alert per block which may send an alert to a requesting client and or a KDC. If a match exists which is the expected result then the method continues in a routing block that routes at least the enveloped pair to the named device e.g. a server in a network load balanced cluster fronted by a virtual server etc. which then decrypts the enveloped key using its device key. In turn a decryption block decrypts a service ticket included in the group ticket using the decrypted enveloped key consider e.g. the dynamic group key of .

As mentioned the method can operate without introducing additional software or hardware to a routing device that routes requests to one or more resources in a cluster particularly where the match blocks are not performed or performed by a node. For example where a virtual server routes client requests to servers in a cluster the method can be optionally implemented without any additional virtual server software. In turn the virtual server may be free to perform assigned tasks more effectively e.g. load balancing routing etc. .

In the example of a third transaction occurs between Peer A and Peer C which is also a member of Group I. As the group ticket can include envelope pairs for each member of a group Peer A can conduct multiple transactions with different group members using a single group ticket .

As described herein an exemplary method includes receiving a group name and member names from a group registrant e.g. block storing the member names e.g. block receiving a ticket granting request from a client where the request includes a group name e.g. block and generating a group ticket e.g. block where the group ticket includes an encrypted service ticket and enveloped key pairs for each of the member names where each envelope key pair includes an encrypted dynamic group key where decryption of an encrypted dynamic group key allows for decryption of the encrypted service ticket.

In general the group ticket can provide additional security measures not found in a conventional single entity ticket. Such additional security measures may be related to the fact that a group ticket can be used by multiple members of a group. In a NLB server or network load balancer device while a series of transactions typically occur with a single server in a group situations may arise where a series of transactions occur with multiple servers in the group. Further if a client uses a group server in a manner that crashes a server e.g. causes a server failure then a restriction as to use of multiple envelope pairs for a series of transactions can prevent the client from accessing another server in the group. For example a virtual server or NLB device will typically be aware of failures e.g. via heartbeats and may re route a request to another server if the initial request resulted in a server failure e.g. software and or hardware failure . A group ticket that restricts use to a single node i.e. a single server in a cluster can prevent re routing of such a request. Alternatively or in addition to a mechanism may issue an alert to indicate that a particular client request was associated with a failure. A data store that associates clients with failures can be used to increase security. Such information may be shared with a KDC to prevent future failures and to identify issues that may have led to a failure.

In a very basic configuration computing device typically includes at least one processing unit and system memory . Depending on the exact configuration and type of computing device system memory may be volatile such as RAM non volatile such as ROM flash memory etc. or some combination of the two. System memory typically includes an operating system one or more program modules and may include program data . The operating system include a component based framework that supports components including properties and events objects inheritance polymorphism reflection and provides an object oriented component based application programming interface API such as that of the .NET Framework manufactured by Microsoft Corporation Redmond Wash. The device is of a very basic configuration demarcated by a dashed line . Again a terminal may have fewer components but will interact with a computing device that may have such a basic configuration.

Computing device may have additional features or functionality. For example computing device may also include additional data storage devices removable and or non removable such as for example magnetic disks optical disks or tape. Such additional storage is illustrated in by removable storage and non removable storage . Computer storage media may include volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. System memory removable storage and non removable storage are all examples of computer storage media. Computer storage media includes but is not limited to RAM ROM EEPROM flash memory or other memory technology CD ROM digital versatile disks DVD or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can be accessed by computing device . Any such computer storage media may be part of device . Computing device may also have input device s such as keyboard mouse pen voice input device touch input device etc. Output device s such as a display speakers printer etc. may also be included. These devices are well know in the art and need not be discussed at length here.

Computing device may also contain communication connections that allow the device to communicate with other computing devices such as over a network e.g. consider the aforementioned network of . Communication connections are one example of communication media. Communication media may typically be embodied by computer readable instructions data structures program modules etc.

Although the subject matter has been described in language specific to structural features and or methodological acts it is to be understood that the subject matter defined in the appended claims is not necessarily limited to the specific features or acts described above. Rather the specific features and acts described above are disclosed as example forms of implementing the claims.

