---

title: Methods, systems and computer program products for CPU signaturing to aide in performance analysis
abstract: Methods, systems and computer program products for CPU signaturing to aide in performance analysis. Exemplary embodiments include a performance analysis method including identifying a workload having one or more testcases, assigning a CPU signature to each of the one or more testcases, calling a CPU signature application programming interface that toggles the CPU to generate the CPU signature, passing four parameters to the CPU signature application programming interface, prior to running each of the one or more testcases of the workload, generating the CPU signature, dynamically determining a run order of the one or more testcases at a run time of the workload and reviewing performance data during the running of each of the one or more testcases, each of the one or more testcases being identifiable by its respective CPU signature.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07823018&OS=07823018&RS=07823018
owner: International Business Machines Corporation
number: 07823018
owner_city: Armonk
owner_country: US
publication_date: 20080515
---
IBM is a registered trademark of International Business Machines Corporation Armonk N.Y. U.S.A. Other names used herein may be registered trademarks trademarks or product names of International Business Machines Corporation or other companies.

This invention relates to performance analysis and particularly to methods systems and computer program products for CPU signaturing to aide in performance analysis.

In many cases performance testing involves running a series of tests on a particular system. This series of tests is frequently automated so that many hours of testing can be completed with little or no user intervention. At the conclusion of these tests the performance analyst frequently needs to look at system performance data such as CPU utilization to determine how well the tests ran. Correlating this system performance data with individual tests can be a challenge.

Typical solutions to this problem involve comparing timestamps with a log file showing when each test began and ended. Another approach is to monitor the tests manually as they are running to determine the start and stop time of each test or to run each test manually one at a time. In addition a user can embed an indicator in the same data that the user is collecting. All of these solutions are time consuming manual processes.

While this issue is especially prevalent in performance testing similar issues can occur in functional testing or even while monitoring production environments.

Exemplary embodiments include a performance analysis in a computer system having a CPU the method including identifying a workload having one or more testcases the workload configured to generate a performance run by invoking applications that simulate certain interactions in the performance analysis assigning a CPU signature to each of the one or more testcases calling a CPU signature application programming interface that toggles the CPU to generate the CPU signature passing four parameters to the CPU signature application programming interface the four parameters including a CPU signature value a CPU signature duration a CPU signature number and a CPU signature idle prior to running each of the one or more testcases of the workload generating the CPU signature the CPU signature showing the CPU running at the CPU signature value for the CPU signature duration a total of the CPU signature value with a CPU signature idle time period between each of the one or more testcases dynamically determining a run order of the one or more testcases at a run time of the workload and reviewing performance data during the running of each of the one or more testcases each of the one or more testcases being identifiable by its respective CPU signature wherein the CPU signatures are generated from the group consisting of CPU utilization disk access memory allocation and thread allocation.

System and computer program products corresponding to the above summarized methods are also described and claimed herein.

Additional features and advantages are realized through the techniques of the present invention. Other embodiments and aspects of the invention are described in detail herein and are considered a part of the claimed invention. For a better understanding of the invention with advantages and features refer to the description and to the drawings.

As a result of the summarized invention technically we have achieved a solution which provides the ability to assign CPU signatures to testcases in a workload for performance runs that are done by invoking driver programs scripts or other software applications that simulate certain interactions with software that are exercising for performance analysis. An API allows the programs scripts or software applications to toggle the CPU in such a manner that produces a CPU signature . By assigning each testcase its own signature the system can know exactly which testcase is running while reviewing the performance data.

The detailed description explains the preferred embodiments of the invention together with advantages and features by way of example with reference to the drawings.

Exemplary embodiments include methods and systems that provide performance runs on a computer system that are performed by invoking driver programs scripts or other software applications that simulate certain interactions with target software. In exemplary embodiments the methods and systems described herein provide an application program interface API that allows the driver programs scripts or other software applications to toggle the CPU in such a manner that it would produce a CPU signature. The CPU signature would thus represent a recognizable pattern of CPU activity that is unique for a specific testcase thus marking the beginning and end of each testcase. As such a user correlates specific performance data with individual tests when multiple testcases are run.

In exemplary embodiments the methods and systems described herein incorporate a unique CPU signature that could be used to indicate the beginning and the end of each testcase. As such the user can concentrate on the performance data and no longer needs to combine performance data with log information. In exemplary embodiments the CPU signature is a recognizable pattern of CPU activity that is unique to the particular testcase. As such the CPU is readily recognizable within the performance data marking the beginning end of each testcase.

In exemplary embodiments in terms of hardware architecture as shown in the computer includes a processor memory coupled to a memory controller and one or more input and or output I O devices or peripherals that are communicatively coupled via a local input output controller . The input output controller can be for example but not limited to one or more buses or other wired or wireless connections as is known in the art. The input output controller may have additional elements which are omitted for simplicity such as controllers buffers caches drivers repeaters and receivers to enable communications. Further the local interface may include address control and or data connections to enable appropriate communications among the aforementioned components.

The processor is a hardware device for executing software particularly that stored in memory . The processor can be any custom made or commercially available processor a central processing unit CPU an auxiliary processor among several processors associated with the computer a semiconductor based microprocessor in the form of a microchip or chip set a macroprocessor or generally any device for executing software instructions.

The memory can include any one or combination of volatile memory elements e.g. random access memory RAM such as DRAM SRAM SDRAM etc. and nonvolatile memory elements e.g. ROM erasable programmable read only memory EPROM electronically erasable programmable read only memory EEPROM programmable read only memory PROM tape compact disc read only memory CD ROM disk diskette cartridge cassette or the like etc. . Moreover the memory may incorporate electronic magnetic optical and or other types of storage media. Note that the memory can have a distributed architecture where various components are situated remote from one another but can be accessed by the processor .

The software in memory may include one or more separate programs each of which comprises an ordered listing of executable instructions for implementing logical functions. In the example of the software in the memory includes the CPU signaturing performance analysis methods described herein in accordance with exemplary embodiments and a suitable operating system OS . The operating system essentially controls the execution of other computer programs such the CPU signaturing performance analysis systems and methods described herein and provides scheduling input output control file and data management memory management and communication control and related services.

The CPU signaturing performance analysis methods described herein may be in the form of a source program executable program object code script or any other entity comprising a set of instructions to be performed. When the CPU signaturing analysis methods are in the form of a source program then the program needs to be translated via a compiler assembler interpreter or the like which may or may not be included within the memory so as to operate properly in connection with the OS . Furthermore the CPU signaturing performance analysis methods can be written as an object oriented programming language which has classes of data and methods or a procedure programming language which has routines subroutines and or functions. As discussed above the memory can include some sort of testcase e.g. driver programs scripts or other software applications that simulate certain interactions with target software and an API that allows the driver programs scripts or other software applications to toggle the CPU e.g. the processor in such a manner that it would produce a CPU signature. 

In exemplary embodiments a conventional keyboard and mouse can be coupled to the input output controller . Other output devices such as the I O devices may include input devices for example but not limited to a printer a scanner microphone and the like. Finally the I O devices may further include devices that communicate both inputs and outputs for instance but not limited to a network interface card NIC or modulator demodulator for accessing other files devices systems or a network a radio frequency RF or other transceiver a telephonic interface a bridge a router and the like. The system can further include a display controller coupled to a display . In exemplary embodiments the system can further include a network interface for coupling to a network . The network can be an IP based network for communication between the computer and any external server client and the like via a broadband connection. The network transmits and receives data between the computer and external systems. In exemplary embodiments network can be a managed IP network administered by a service provider. The network may be implemented in a wireless fashion e.g. using wireless protocols and technologies such as WiFi WiMax etc. The network can also be a packet switched network such as a local area network wide area network metropolitan area network Internet network or other similar type of network environment. The network may be a fixed wireless network a wireless local area network LAN a wireless wide area network WAN a personal area network PAN a virtual private network VPN intranet or other suitable network system and includes equipment for receiving and transmitting signals.

If the computer is a PC workstation intelligent device or the like the software in the memory may further include a basic input output system BIOS omitted for simplicity . The BIOS is a set of essential software routines that initialize and test hardware at startup start the OS and support the transfer of data among the hardware devices. The BIOS is stored in ROM so that the BIOS can be executed when the computer is activated.

When the computer is in operation the processor is configured to execute software stored within the memory to communicate data to and from the memory and to generally control operations of the computer pursuant to the software. The CPU signaturing performance analysis methods described herein and the OS in whole or in part but typically the latter are read by the processor perhaps buffered within the processor and then executed.

When the systems and methods described herein are implemented in software as is shown in then the methods can be stored on any computer readable medium such as storage for use by or in connection with any computer related system or method. In the context of this document a computer readable medium is an electronic magnetic optical or other physical device or means that can contain or store a computer program for use by or in connection with a computer related system or method. The CPU signaturing performance analysis methods described herein can be embodied in any computer readable medium for use by or in connection with an instruction execution system apparatus or device such as a computer based system processor containing system or other system that can fetch the instructions from the instruction execution system apparatus or device and execute the instructions. In exemplary embodiments a computer readable medium can be any means that can store communicate propagate or transport the program for use by or in connection with the instruction execution system apparatus or device. The computer readable medium can be for example but not limited to an electronic magnetic optical electromagnetic infrared or semiconductor system apparatus device or propagation medium. More specific examples a non exhaustive list of the computer readable medium would include the following an electrical connection electronic having one or more wires a portable computer diskette magnetic a random access memory RAM electronic a read only memory ROM electronic an erasable programmable read only memory EPROM EEPROM or Flash memory electronic an optical fiber optical and a portable compact disc read only memory CDROM optical . Note that the computer readable medium could even be paper or another suitable medium upon which the program is printed as the program can be electronically captured via for instance optical scanning of the paper or other medium then compiled interpreted or otherwise processed in a suitable manner if necessary and then stored in a computer memory.

In exemplary embodiments where the CPU signaturing performance analysis methods are implemented in hardware the CPU signaturing performance analysis methods described herein can be implemented with any or a combination of the following technologies which are each well known in the art a discrete logic circuit s having logic gates for implementing logic functions upon data signals an application specific integrated circuit ASIC having appropriate combinational logic gates a programmable gate array s PGA a field programmable gate array FPGA etc.

In exemplary embodiments performance runs are done by invoking driver programs scripts or other software applications that simulate certain interactions with software that are executing for performance analysis. As discussed above the API allows the programs scripts or software applications to toggle the CPU in such a manner that produces a CPU signature .

For example the system can be running a workload that contains six different testcases. In exemplary embodiments the order in which the test cases are run is known. As such for this six test case workload run the same CPU signature is implemented between the start of each testcase. In addition prior to each testcase the API is called and is passed four parameters 1 the CPU signature value 2 the CPU signature duration 3 the CPU signature number and 4 the CPU signature idle. In this example the four above described parameters can be 100 5 3 and 2 respectively. Then prior to each testcase starting a CPU signature is generated the CPU signature showing the CPU running at 100 for 5 seconds a total of 3 times with a 2 second idle time between each of testcase. It is appreciated that in other exemplary embodiments the API can include different parameters. The API could have more or fewer parameters. For example an implementation could expose an API which had a single parameter for the number of bursts and essentially assume the defaults for the CPU utilization length of a burst and length of idle time. In further exemplary embodiments the systems and methods can include a complex API which allowed for a more complex signature 3 bursts of 2 seconds followed by 1 burst of 10 seconds followed by 2 bursts of 1 second with 3 seconds between each burst .

It is appreciated that the exact mechanism of generating the signature can vary from one implementation to another. In exemplary embodiments CPU utilization can generate the CPU signature. In another exemplary embodiments other attributes such as disk access can also be implemented. Further examples for generating the signature include memory allocation where a predetermined amount of memory is allocated then freed also disk accesses where a combination of disk reads and writes are performed also thread allocation where a predetermined number of threads are allocated then freed from a process. It is appreciated that regardless of the CPU generation implementation a predictable pattern of utilization is visible in the performance data.

In exemplary embodiments the system can run multiple testcases where the order of their running is determined dynamically at run time. In addition the system assigns each testcase their own CPU signature that allows the system to know exactly which testcase is running while reviewing the performance data.

The capabilities of the present invention can be implemented in software firmware hardware or some combination thereof.

As one example one or more aspects of the present invention can be included in an article of manufacture e.g. one or more computer program products having for instance computer usable media. The media has embodied therein for instance computer readable program code means for providing and facilitating the capabilities of the present invention. The article of manufacture can be included as a part of a computer system or sold separately.

Additionally at least one program storage device readable by a machine tangibly embodying at least one program of instructions executable by the machine to perform the capabilities of the present invention can be provided.

The flow diagrams depicted herein are just examples. There may be many variations to these diagrams or the steps or operations described therein without departing from the spirit of the invention. For instance the steps may be performed in a differing order or steps may be added deleted or modified. All of these variations are considered a part of the claimed invention.

While the preferred embodiment to the invention has been described it will be understood that those skilled in the art both now and in the future may make various improvements and enhancements which fall within the scope of the claims which follow. These claims should be construed to maintain the proper protection for the invention first described.

