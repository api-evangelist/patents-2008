---

title: Graphics remoting architecture
abstract: Systems and methods to implement a graphics remoting architecture for rendering graphics images at remote clients are disclosed. In one implementation, when a D3D application hosted on a remote server is used by a remote client, the graphics associated with the D3D application are created and rendered at the remote client. For this, the D3D commands and D3D objects corresponding to the graphics are abstracted into data streams at the remote server. The data streams are then sent to the remote client. At the remote client, the D3D commands and D3D objects are extracted from the data streams and executed to create the graphics images. The graphics images are then rendered and displayed using output devices at the remote client.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08433747&OS=08433747&RS=08433747
owner: Microsoft Corporation
number: 08433747
owner_city: Redmond
owner_country: US
publication_date: 20080201
---
Graphics software for creating high end graphics applications such as photo editing gaming etc. may include animation and other tools that make use of complex calculations. Typically such high end graphics applications employ various technologies to provide graphics hardware support to manage the complex calculations. For example graphics applications ran on Microsoft Windows operating system may employ Direct3D rendering technologies to provide graphics hardware support. Direct3D is a three dimensional 3D graphics Application Programming Interface API that includes commands for rendering 3D images in graphics applications.

Although most personal computers PCs currently provide such graphics hardware support there has been no efficient way of remoting such technologies. For example in remote sessions the graphics applications may not scale up with the window size or the number of user connections and can also create stability issues. Furthermore graphics acceleration may not be available on server computers running Video Graphics Adapter VGA or on virtual machines. As a result graphics applications running over remote sessions can cause poor end user experiences.

This summary is provided to introduce simplified concepts related to Graphics remoting architecture which are further described below in the Detailed Description. This summary is not intended to identify essential features of the claimed subject matter nor is it intended for use in determining the scope of the claimed subject matter.

In an embodiment a three dimension 3D application hosted on a server computer is used by a remote client computer. The graphics associated with the 3D application are created and rendered at the remote client computer by the use of 3D commands and 3D objects corresponding to graphics abstracted into data streams at the remote server and sent to the client computer. The 3D commands and 3D objects are extracted from the data streams and executed to create the graphics images at the client computer.

This disclosure relates to methods and systems for implementing a remoting architecture to facilitate rendering of three dimensional or 3D images at a remotely located client and achieve an enhanced end user experience in a remote session. Typically in a remote environment such as a Terminal Services environment any graphics intense application commands such as Direct3D or D3D commands are executed at a server. After execution of the commands the output such as graphics images is rendered with the help of the Graphics Processing Unit GPU of the server. The rendered graphics images are then sent to a client device as a bitmap image and are displayed through a display device at the client side. Running Direct3D or three dimension applications in such a manner is limited by architectural factors such as server availability scalability server stability and causes poor end user experience. In particular architectural limitations may include a lack of frame rate control and inadequateness of progressive texture rendering when compression and other specialized methods are employed.

Techniques for implementing Direct3D remoting architecture to enable rendering of 3D graphics images at a remote client are disclosed in the following description. In one implementation instead of rendering graphics images at a server computer and then sending the final bitmap images to a client device. The D3D commands can be sent directly to the client device that may then execute the D3D commands. A GPU at the client device end renders the output such as the graphics images and displays the images at the client end. Thus the graphics images can be rendered at the client device without employing the GPU at the server end. Furthermore techniques for implementing frame rate control and progressive texture rendering methods to overcome the above mentioned architectural limitations are disclosed.

Methods and systems to implement a Direct3D remoting architecture for rendering 3D graphics images at a client device are disclosed in the following description.

The computing environment includes a plurality of client devices . . . N collectively referred to as clients . The clients are communicatively associated through a network with a server computer or server . The clients may be any of a variety of conventional computing devices for example a desktop PC a notebook or a portable computer a Personal Digital Assistant PDA a workstation a mobile computing device or an Internet appliance etc. Each client may include a memory that stores different program modules for rendering. For example the client includes a memory that may store different program modules such as a D3D Plug in and other modules to perform rendering.

The network may be a wireless or a wired network or a combination thereof. The network may also be represented as a collection of individual networks interconnected with each other and functioning as a single large network e.g. the Internet or an intranet . Examples of such individual networks include but are not limited to Local Area Networks LANs Wide Area Networks WANs and Metropolitan Area Networks MANs . Further the individual networks may also be wireless or wired networks or a combination thereof.

The server may be for example a general purpose computing device or a cluster of servers and mainframes. The server includes a memory having a user space that corresponds to a client such as client . The user space further includes a D3D abstraction module and a remote adapter . The remote adapter at the server establishes a connection with the client to send graphics commands abstracted by the D3D abstraction module for rendering.

In one implementation the D3D abstraction module executes on a Terminal Server TS D3D abstraction layer. The D3D abstraction layer is implemented between the physical hardware of the server and the graphics applications such as D3D applications. The abstraction layer hides the implementation details of the hardware from such applications.

The D3D abstraction module receives one or more D3D commands and D3D objects from a D3D application when a client such as the client uses the D3D application at the server over a remote session. The D3D abstraction module further abstracts the communication between the D3D application and graphics hardware that execute the D3D application.

The D3D abstraction module abstracts the D3D commands and D3D objects into data streams that can be sent over the network . The D3D abstraction module thus enables the server to send the abstracted commands and objects as data streams to one or more of the clients . The data streams are sent via the network based on different remoting protocols such as Remote Desktop Protocol RDP D3D Remoting Protocol etc.

To send the data streams from the server to the client the remote adapter establishes a communication channel with the D3D plug in of the client over the network . The remote adapter checks availability and capability of the display adapter at the client from the D3D plug in . On receiving confirmation from the D3D plug in the remote adapter establishes the communication channel between the D3D abstraction module and the D3D plug in .

The D3D abstraction module sends the abstracted D3D commands and D3D objects associated with the D3D application to the D3D plug ins at the client . In one implementation the D3D abstraction module sends the abstracted D3D commands and the D3D objects as hidden data to the D3D plug in .

At the client end i.e. client the data streams are received and processed by one or more D3D plug ins such as the D3D plug in . The D3D plug in receives the data streams and parses the data streams to extract the D3D commands. Furthermore the D3D plug in creates actual D3D objects executes the D3D commands and renders the output such as graphics images using the GPU at the client end.

The input output interface s may include for example a scanner a port a mouse port a keyboard port etc. to receive send data from to the clients . In one implementation the input output interface s of the server send data such as the D3D commands and the D3D objects over the network . The input output interface s of the server receive data from one or more clients such as data or contents that represent the rendered graphics images for synchronization purposes.

The memory can be any computer readable media in the form of both volatile memory such as Random Access Memory RAM and or non volatile memory such as Read Only Memory ROM and a flash RAM. The memory typically includes data and or program modules that are immediately accessible to and or presently operated on by the processor .

In one implementation the memory includes a user space corresponding to each of the clients and program data . Each user space may include a D3D abstraction module and a remote adapter in addition to other modules . The program data may store parameters including D3D commands D3D objects data streams and other program data .

The D3D abstraction module can be configured to monitor data traffic that includes the D3D commands and the D3D objects . As described in further detail below the D3D abstraction module can be configured to receive the D3D commands and the D3D objects from the D3D application through a D3D API. The D3D API includes functions that can be used to render 3D images in the D3D application. In another implementation the D3D abstraction module can be configured to receive the D3D commands and the D3D objects directly from the D3D application.

In one implementation the received D3D commands may be high frequency commands which may require one or more network roundtrips from the clients . Such network roundtrips may cause delay in execution of the high frequency commands. To avoid such network roundtrips the D3D abstraction module can be configured to assign a handle or an identifier to each of the D3D objects in the abstraction layer. The D3D abstraction module then records the handle in the data streams along with other parameters for creating the D3D object on the client end. The handles can be stored in the other program data in the memory of the server .

The D3D abstraction module abstracts the D3D commands and the D3D objects into the data streams and sends them over the network . For this the remote adapter enquires about the availability and capability of the display adapter of the client . Upon receiving confirmation of availability and capability from the D3D plug in at the client the remote adapter establishes a communication channel between the D3D abstraction module and the D3D plug in . The D3D abstraction module sends the abstracted D3D commands and the D3D objects to the D3D plug in of the client via the communication channel.

In addition to abstraction the D3D abstraction module can be configured to perform centralized resource encoding. The centralized resource encoding encompasses compression and decimation methods known in the art for encoding the available D3D resources. This enables efficient use of the bandwidth of the server for multiple applications and reconnections. For example a D3D application may utilize D3D resources such as a texture map mesh data or a normal bitmap image that may be larger in size than the available bandwidth. In such cases the D3D abstraction module employs known compression and or decimation methods to reduce the size of the resources. The resource encoding process can be centralized so that a system wide persistent caching can be performed to use the bandwidth of the server in an efficient manner.

In the exemplary implementation the network interface s may include one or more ports for connecting the client either to the server or to the clients other than the client . The network interface s can facilitate communications with a wide variety of networks and protocol types including wired networks e.g. LAN cable etc. and wireless networks e.g. WLAN cellular satellite etc. .

The input output interface s may include for example a scanner a port a mouse port a keyboard port etc. to receive send data from to the clients . In one implementation the input output interface s of the client receive data such as for example the D3D commands and the D3D objects over the network .

The input output interface s of the client send data to the server such as data or contents that represent the rendered graphics images for synchronization purposes. The input output interface s can display data such as rendered graphics images by the input output devices .

The memory can be any computer readable media in the form of both volatile memory such as Random Access Memory RAM and or non volatile memory such as Read Only Memory ROM and or a flash RAM. The memory includes data and or program modules that may be immediately accessible to and or operated on by the processor . In the exemplary implementation the memory includes the program modules and a program data . The program modules may include the D3D Plug in and other modules . The program data may store parameters including data streams graphics images and other program data .

The D3D Plug in receives the data streams that include D3D commands and D3D objects and extracts the D3D commands . Furthermore the D3D plug in executes the D3D commands and renders output graphics images by using the GPU at the client end. In one implementation the D3D plug in of the client may be configured to receive the data streams from the server over the network . The D3D Plug in can be configured to parse the data streams using any parsing methods known in the art and extract D3D commands from the data streams .

The D3D plug in can be configured to create D3D objects with the use of handles received along with the data streams . As discussed above a handle has an entry that includes the address of a resource associated with a graphics application such as a D3D application so that the objects such as the D3D objects can be identified examined created and or modified. Therefore the D3D objects can be assigned handles to create the actual D3D objects at the client end by the D3D plug in . The D3D plug in can then execute the D3D commands and render the graphics images using the GPU at the client. The rendering of the graphics images can be performed by rendering methods known in the art.

In addition to rendering the D3D Plug in may be configured to track changes in geometry of the window displayed on the desktop of the server to change accordingly the representation of the server desktop at the client . The changes in window geometry can include window resizing window movement or positioning and or visible region changes in the desktop of the server .

To support changes in window geometry a proxy window can be used at the client to reproduce the geometrical changes occurring at the window of the server . The proxy window ensures interoperability with any window activated in the same session such as windows at the server and windows at the clients . The proxy window can be established at the clients for example when the desktop composition feature is disabled. Desktop composition is a feature that changes the way pixels of a graphics image are displayed on the display screen of the client and can be controlled by a Desktop Window Manager of the server .

The D3D Plug in may also be configured to present Direct3D graphics in the full screen exclusive mode on the client side for example at the client . The full screen exclusive mode of display automatically captures sets restores screen resolution and pixel format without intervention from a user. A client window may be a simple window used for displaying images. However a Direct3D application runs under a full screen exclusive mode of display that may not be supported by the simple window format. The D3D Plug in presents the graphics under full screen exclusive mode with full screen representation at the window of the clients and enhancing the user experience.

The D3D Plug in may be configured to send information related to rendered graphics images to the server in case the server requires the information for synchronization. In one implementation the D3D plug in renders the output graphics images at the window of the client based on a client side only rendering protocol. In such a case the content to be rendered is stored at the clients by default which can also be sent to the server in case the server needs the content. Therefore the D3D plug in can be further configured to allow tracking and synchronization between the perceived invisible desktop of the server and the visible client side representation of the server desktop.

Furthermore to achieve synchronization and content coherency the D3D plug in can be configured to track various Direct3D commands issued from the server and read write accesses made to the desktops of the clients . The D3D plug in can further maintain updated information about each pixel sent received by both the server and the clients such as the client . The information about the pixels can be updated for synchronization for example when the desktop composition is disabled.

In one implementation the D3D application at the server side receives one or more D3D commands as input from users. The D3D application can be a high end graphics application such as a gaming application that involves complex calculations. For such applications the D3D commands and D3D objects are abstracted as the data streams at a Terminal Server TS D3D abstraction layer . In one implementation a D3D abstraction module can execute on the Terminal Server TS D3D abstraction layer to abstract the commands and objects. Furthermore the D3D abstraction module assigns handles to one or more of the D3D objects such that the actual D3D objects can be created using the handles at the client end.

For abstracting the D3D commands and the D3D objects the D3D abstraction module communicates with a D3D API however in certain cases applications may implement a service side GPU i.e. local GPU Driver if it s available. If this is the case or by default per OS policy the GPU driver may be present locally in the server and can communicate with a Win32k process . In other words remote adapter representing remote GPU at a client e.g. clients such as the client can be running side by side with local GPU Driver present however local GPU Driver may not be present for this remoting architecture to function. Local GPU Driver illustrates how the remoting architecture could be integrated with existing local graphics architecture.

The Win32k process is a Windows operating system kernel process providing the lowest level abstraction for computing resources such as the memory the processor s and input output devices. The Win32k process communicates with a Graphical Device Interface GDI GDI App that performs the graphics related tasks. The GDI App can be a Microsoft Windows operating system interface used for representing graphical objects and transmitting the graphical objects to output devices such as monitors and printers. The GDI App can perform graphics related tasks such as drawing lines and curves and rendering fonts.

In one implementation for performing such graphics related tasks the GDI App uses a GDI32 process . The GDI32 process includes functions for the Windows operating system GDI of the server to create objects and process information for displaying images on the display window of a client . The GDI32 process performs graphics related functions such as creating D3D objects for the D3D applications .

After creating the D3D objects the D3D commands and the D3D objects are communicated to the D3D application and D3D API . During the communication the D3D abstraction module at the D3D abstraction layer abstracts the D3D commands and the D3D objects into the data streams . The D3D abstraction module also abstracts handles of the D3D objects into the data streams .

The D3D abstraction module sends the data streams to the clients via the network . For this the remote adapter enquires about the availability and the capability of the display adapters of the clients such as the client . On receiving a confirmation from the D3D plug in of the client the remote adapter establishes a communication channel to send the data streams over the network .

At the client side the D3D plug in receives data streams via the communication channel established by the remote adapter . The data streams received by the D3D plug in includes the D3D commands the D3D objects and handles to recreate the actual D3D objects . The D3D plug in parses the received data streams using any parsing methods known in the art and extracts the D3D commands and the D3D objects .

The D3D plug in then executes the D3D commands to display the graphics associated with the D3D application . For this the D3D plug in communicates with a D3D API of the clients such as the client . The D3D API communicates the D3D commands and D3D objects between the D3D plug in and the graphics hardware that executes the graphics applications. The D3D API also includes commands for rendering graphics images that can be used to display the graphics.

The D3D API further interacts with a Win32k process to perform graphics related tasks such as creation of actual D3D objects using the handles. The Win32k process a Windows operating system kernel process may be similar to the Win32k process of the server . For the creation of actual D3D objects the Win32k process interacts with a GDI32 process a Graphical Device Interface process that creates the actual D3D objects .

After creating the actual D3D objects the GDI32 process at the client side communicates the D3D objects to the D3D plug in via the D3D API . Further the D3D plug in executes the D3D commands using the D3D objects and renders the graphics images . The D3D plug in renders the graphics images similar to a GPU driver. The rendered graphics images are then displayed through the input output devices of the client . In an implementation each of the clients can be a remote terminal server client . The D3D plug ins at the clients can keep the D3D objects alive in a session during the rendering process even when the clients get disconnected and try to reconnect later. After successful reconnection the server and the clients will resume the execution of the D3D application .

In an implementation displaying the graphics of the D3D application involves using one or more D3D resources such as texture map normal map etc. that can be shared by one or more of the clients . For the purpose of sharing the resources the D3D plug in can be configured to assign a handle or an identifier to each of the D3D resources however use of handles may require one or more network roundtrips from the clients . To avoid continuous network roundtrips a centralized server component can be used as a proxy for the clients to provide the assigned handles. For example a RDPDD Remote Desktop Protocol Device Driver or a RDPWD Remote Desktop Protocol Win32k Driver can be used in the session space or global space respectively as a proxy for the clients .

Furthermore one or more methods such as progressive texture rendering methods frame rate control methods and auto reconnection methods can be implemented in the D3D remoting architecture. In one implementation the D3D application may also deal with D3D resources such as meshes and textures that consume more network bandwidth in order to achieve better end user experience. In such cases the progressive texture rendering method can be configured to allocate the bandwidth efficiently and achieve better end user experience.

Further the D3D abstraction module can use frame rate control methods that allow the server to regulate the bandwidth consumption by limiting the frame transfer rate based on the type of the D3D application . Such frame rate control methods can improve scalability and consistency among multiple connections and applications.

In addition auto reconnection methods can be implemented to provide seamless remote auto reconnection experience from the D3D application . For example when a client gets disconnected during the execution of the D3D application a new client that is capable of supporting the running D3D application may be connected. In one implementation during the reconnection of a new client the D3D application receives a message such as DEVICE LOST or DEVICE REMOVED. The D3D abstraction module then restores the D3D application to the pre disconnection state and resumes the execution of the D3D application . In another implementation during the reconnection of a new client the D3D abstraction module performs complete abstraction of the D3D commands and the D3D objects that are needed to recreate the object content at the server side .

Additional methods can be employed to ensure that the server does not accumulate unbounded number of D3D commands during a disconnected session. In the present implementation to avoid unbounded number of D3D commands at the server one or more kernel threads that call the D3D application can be blocked.

Exemplary methods of implementing Direct3D remoting architecture are described below. Some or all of these methods may but need not be implemented at least partially in an architecture such as that shown in . Also it should be understood that certain acts in the methods need not be performed in the order described may be modified and or may be omitted entirely depending on the circumstances.

At block one or more graphics application commands can be identified and received from a graphics application. The D3D abstraction module may monitor and receive the graphics application commands from the D3D application at the D3D abstraction layer .

At block the application commands are communicated to the graphics hardware drivers through an API. The D3D abstraction module may communicate the received commands to the graphics hardware driver through the D3D API .

At block the application commands and objects generated by the graphics hardware driver are abstracted in a data stream. The D3D abstraction module may abstract the generated D3D commands and the D3D objects as hidden data in the data streams to be sent over the network . Further the D3D abstraction module assigns a handle or an identifier to one or more D3D objects. The D3D abstraction module records the handle in the data streams along with other parameters that can be used to create the D3D objects at the client .

At block the data streams are sent over the network to the client. The D3D abstraction module may send the data streams to one or more of the clients for example the client . The data streams are then received by the D3D plug in of the client as the data streams .

In one implementation the D3D commands and the D3D objects in the data streams can be compressed using any compression and decimation methods known in the art. Such techniques can be used if for example the D3D resources such as textures mesh data and so on are large in size and are unable to fit in the bandwidth of the network . The compressed D3D resources can be then sent over the network through the remote adapter .

The remote adapter enables the D3D abstraction module to communicate with the D3D plug in of the client . For this the remote adapter checks availability and the capability status of the display adapter of the client . Once the confirmation is received from the D3D plug in the remote adapter establishes a communication channel between the D3D abstraction layer and the D3D plug in . The D3D abstraction module sends the data streams via the established communication channel over the network to the clients .

At block data streams are received from the server. The D3D plug in of the client may receive the data streams from the D3D abstraction module at the server .

At block the D3D commands and the D3D objects are extracted from the data stream. The D3D Plug in may extract the D3D commands and the D3D objects from the data streams . Furthermore the D3D Plug in can execute the D3D commands with the help of the GPU of the client .

At block the output in the form of graphics images is rendered through input output devices at the client. The output of the D3D application such as 3D graphics images can be rendered through the input output devices of the client using any of the rendering algorithms known in the art.

Any of the acts described above with respect to any method may be implemented by a processor or other computing device based on instructions stored on one or more computer readable media. Computer readable media can be any available media that can be accessed locally or remotely by the resource modeling application. By way of example and not limitation computer readable media may comprise computer storage media and communication media. Computer storage media includes volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. Computer storage media includes but is not limited to RAM ROM EEPROM flash memory or other memory technology CD ROM digital versatile disks DVD or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can be accessed by the resource modeling application. Communication media typically embodies computer readable instructions data structures program modules or other data on any information delivery media. Combinations of the any of the above should also be included within the scope of computer readable media.

Although the invention has been described in language specific to structural features and or methodological acts for implementing self described rendering of data it is to be understood that the invention is not necessarily limited to the specific features or acts described. Rather the specific features and acts are disclosed as exemplary forms of implementing the invention.

