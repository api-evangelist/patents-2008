---

title: Reducing power consumption while performing collective operations on a plurality of compute nodes
abstract: Methods, apparatus, and products are disclosed for reducing power consumption while performing collective operations on a plurality of compute nodes that include: receiving, by each compute node, instructions to perform a type of collective operation; selecting, by each compute node from a plurality of collective operations for the collective operation type, a particular collective operation in dependence upon power consumption characteristics for each of the plurality of collective operations; and executing, by each compute node, the selected collective operation.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08041969&OS=08041969&RS=08041969
owner: International Business Machines Corporation
number: 08041969
owner_city: Armonk
owner_country: US
publication_date: 20080527
---
This invention was made with Government support under Contract No. B554331 awarded by the Department of Energy. The Government has certain rights in this invention.

The field of the invention is data processing or more specifically methods apparatus and products for reducing power consumption while performing collective operations on a plurality of compute nodes.

The development of the EDVAC computer system of 1948 is often cited as the beginning of the computer era. Since that time computer systems have evolved into extremely complicated devices. Today s computers are much more sophisticated than early systems such as the EDVAC. Computer systems typically include a combination of hardware and software components application programs operating systems processors buses memory input output I O devices and so on. As advances in semiconductor processing and computer architecture push the performance of the computer higher and higher more sophisticated computer software has evolved to take advantage of the higher performance of the hardware resulting in computer systems today that are much more powerful than just a few years ago.

Parallel computing is an area of computer technology that has experienced advances. Parallel computing is the simultaneous execution of the same task split up and specially adapted on multiple processors in order to obtain results faster. Parallel computing is based on the fact that the process of solving a problem usually can be divided into smaller tasks which may be carried out simultaneously with some coordination.

Parallel computers execute applications that include both parallel algorithms and serial algorithms. A parallel algorithm can be split up to be executed a piece at a time on many different processing devices and then put back together again at the end to get a data processing result. Some algorithms are easy to divide up into pieces. Splitting up the job of checking all of the numbers from one to a hundred thousand to see which are primes could be done for example by assigning a subset of the numbers to each available processor and then putting the list of positive results back together. In this specification the multiple processing devices that execute the algorithms of an application are referred to as compute nodes. A parallel computer is composed of compute nodes and other processing nodes as well including for example input output I O nodes and service nodes.

Parallel algorithms are valuable because it is faster to perform some kinds of large computing tasks via a parallel algorithm than it is via a serial non parallel algorithm because of the way modern processors work. It is far more difficult to construct a computer with a single fast processor than one with many slow processors with the same throughput. There are also certain theoretical limits to the potential speed of serial processors. On the other hand every parallel algorithm has a serial part and so parallel algorithms have a saturation point. After that point adding more processors does not yield any more throughput but only increases the overhead and cost.

Parallel algorithms are designed also to optimize one more resource the data communications requirements among the nodes of a parallel computer. There are two ways parallel processors communicate shared memory or message passing. Shared memory processing needs additional locking for the data and imposes the overhead of additional processor and bus cycles and also serializes some portion of the algorithm.

Message passing processing uses high speed data communications networks and message buffers but this communication adds transfer overhead on the data communications networks as well as additional memory need for message buffers and latency in the data communications among nodes. Designs of parallel computers use specially designed data communications links so that the communication overhead will be small but it is the parallel algorithm that decides the volume of the traffic.

Many data communications network architectures are used for message passing among nodes in parallel computers. Compute nodes may be organized in a network as a torus or mesh for example. Also compute nodes may be organized in a network as a tree. A torus network connects the nodes in a three dimensional mesh with wrap around links. Every node is connected to its six neighbors through this torus network and each node is addressed by its x y z coordinate in the mesh. In such a manner a torus network lends itself to point to point operations. In a tree network the nodes typically are organized in a binary tree arrangement each node has a parent and two children although some nodes may only have zero children or one child depending on the hardware configuration . In computers that use a torus and a tree network the two networks typically are implemented independently of one another with separate routing circuits separate physical links and separate message buffers. A tree network provides high bandwidth and low latency for certain collective operations such as for example an allgather allreduce broadcast scatter and so on.

Although the tree network is generally optimized for certain collective operations to reduce the overall time required to perform those collective operations the tree network may not always be optimal for use in performing the collective operations from the perspective of power consumption. For some collective operations performing a collective operation using the tree network consumes more power than performing the same type of collective operation on the torus network. Similarly performing a collective operation using the torus network may consume more power than performing the same type of collective operation on the tree network. Performing collective operations using the tree network or the torus network exclusively may therefore waste significant amounts of power over periods of time.

Methods apparatus and products are disclosed for reducing power consumption while performing collective operations on a plurality of compute nodes that include receiving by each compute node instructions to perform a type of collective operation selecting by each compute node from a plurality of collective operations for the collective operation type a particular collective operation in dependence upon power consumption characteristics for each of the plurality of collective operations and executing by each compute node the selected collective operation.

The foregoing and other objects features and advantages of the invention will be apparent from the following more particular descriptions of exemplary embodiments of the invention as illustrated in the accompanying drawings wherein like reference numbers generally represent like parts of exemplary embodiments of the invention.

Exemplary methods apparatus and computer program products for reducing power consumption while performing collective operations on a plurality of compute nodes according to embodiments of the present invention are described with reference to the accompanying drawings beginning with . illustrates an exemplary system for reducing power consumption while performing collective operations on a plurality of compute nodes according to embodiments of the present invention. The system of includes a parallel computer non volatile memory for the computer in the form of data storage device an output device for the computer in the form of printer and an input output device for the computer in the form of computer terminal . Parallel computer in the example of includes a plurality of compute nodes .

The compute nodes are coupled for data communications by several independent data communications networks including a Joint Test Action Group JTAG network a global combining network which is optimized for collective operations and a torus network which is optimized point to point operations. The global combining network is a data communications network that includes data communications links connected to the compute nodes so as to organize the compute nodes as a tree. Each data communications network is implemented with data communications links among the compute nodes . The data communications links provide data communications for parallel operations among the compute nodes of the parallel computer. The links between compute nodes are bi directional links that are typically implemented using two separate directional data communications paths.

In addition the compute nodes of parallel computer are organized into at least one operational group of compute nodes for collective parallel operations on parallel computer . An operational group of compute nodes is the set of compute nodes upon which a collective parallel operation executes. Collective operations are implemented with data communications among the compute nodes of an operational group. Collective operations are those functions that involve all the compute nodes of an operational group. A collective operation is an operation a message passing computer program instruction that is executed simultaneously that is at approximately the same time by all the compute nodes in an operational group of compute nodes. Such an operational group may include all the compute nodes in a parallel computer or a subset all the compute nodes. Collective operations are often built around point to point operations. A collective operation requires that all processes on all compute nodes within an operational group call the same collective operation with matching arguments. A broadcast is an example of a collective operation for moving data among compute nodes of an operational group. A reduce operation is an example of a collective operation that executes arithmetic or logical functions on data distributed among the compute nodes of an operational group. An operational group may be implemented as for example an MPI communicator. 

 MPI refers to Message Passing Interface a prior art parallel communications library a module of computer program instructions for data communications on parallel computers. Examples of prior art parallel communications libraries that may be improved for use with systems according to embodiments of the present invention include MPI and the Parallel Virtual Machine PVM library. PVM was developed by the University of Tennessee The Oak Ridge National Laboratory and Emory University. MPI is promulgated by the MPI Forum an open group with representatives from many organizations that define and maintain the MPI standard. MPI at the time of this writing is a de facto standard for communication among compute nodes running a parallel program on a distributed memory parallel computer. This specification sometimes uses MPI terminology for ease of explanation although the use of MPI as such is not a requirement or limitation of the present invention.

Some collective operations have a single originating or receiving process running on a particular compute node in an operational group. For example in a broadcast collective operation the process on the compute node that distributes the data to all the other compute nodes is an originating process. In a gather operation for example the process on the compute node that received all the data from the other compute nodes is a receiving process. The compute node on which such an originating or receiving process runs is referred to as a logical root.

Most collective operations are variations or combinations of four basic operations broadcast gather scatter and reduce. The interfaces for these collective operations are defined in the MPI standards promulgated by the MPI Forum. Algorithms for executing collective operations however are not defined in the MPI standards. In a broadcast operation all processes specify the same root process whose buffer contents will be sent. Processes other than the root specify receive buffers. After the operation all buffers contain the message from the root process.

In a scatter operation the logical root divides data on the root into segments and distributes a different segment to each compute node in the operational group. In scatter operation all processes typically specify the same receive count. The send arguments are only significant to the root process whose buffer actually contains sendcount N elements of a given data type where N is the number of processes in the given group of compute nodes. The send buffer is divided and dispersed to all processes including the process on the logical root . Each compute node is assigned a sequential identifier termed a rank. After the operation the root has sent sendcount data elements to each process in increasing rank order. Rank 0 receives the first sendcount data elements from the send buffer. Rank 1 receives the second sendcount data elements from the send buffer and so on.

A gather operation is a many to one collective operation that is a complete reverse of the description of the scatter operation. That is a gather is a many to one collective operation in which elements of a datatype are gathered from the ranked compute nodes into a receive buffer in a root node.

A reduce operation is also a many to one collective operation that includes an arithmetic or logical function performed on two data elements. All processes specify the same count and the same arithmetic or logical function. After the reduction all processes have sent count data elements from computer node send buffers to the root process. In a reduction operation data elements from corresponding send buffer locations are combined pair wise by arithmetic or logical operations to yield a single corresponding element in the root process s receive buffer. Application specific reduction operations can be defined at runtime. Parallel communications libraries may support predefined operations. MPI for example provides the following pre defined reduction operations 

The parallel computer of also includes a service node coupled to the compute nodes through one of the networks . Service node provides services common to pluralities of compute nodes administering the configuration of compute nodes loading programs into the compute nodes starting program execution on the compute nodes retrieving results of program operations on the computer nodes and so on. Service node runs a service application and communicates with users through a service application interface that runs on computer terminal .

In the exemplary system of each compute node includes a set of computer program instructions capable of reducing power consumption while performing collective operations on the plurality of compute nodes according to embodiments of the present invention. Each compute node operates generally for reducing power consumption while performing collective operations on the plurality of compute nodes according to embodiments of the present invention by receiving instructions to perform a type of collective operation selecting from a plurality of collective operations for the collective operation type a particular collective operation in dependence upon power consumption characteristics for each of the plurality of collective operations and executing the selected collective operation.

In the example of the compute nodes operate to execute a parallel application that specifies a type of collective operation for execution on the compute nodes . A collective operation is a message passing operation effecting communications among a group of compute nodes. Because of the proprietary nature of most parallel computing architectures particular collective operations themselves are generally platform specific. Applications such as the application in therefore typically invoke a generic type of collective operation through an interface provided by a messaging module that effect communications among the node of the parallel computer . The messaging module in turn invokes the platform specific collective operation of the type specified in the application using parameters provided by the application . Examples of types of collective operations that the application may specify may include the following 

Exemplary interfaces for each of the exemplary collective operation types above are described in the MPI specification that is promulgated by the MPI Forum.

In the example of the plurality of compute nodes are implemented in a parallel computer and are connected together using a plurality of data communications networks . The point to point network is optimized for point to point operations. The global combining network is optimized for collective operations. Although reducing power consumption while performing collective operations on a plurality of compute nodes according to embodiments of the present invention is described above in terms of an architecture for a parallel computer readers will note that such an embodiment is for explanation only and not for limitation. In fact reducing power consumption while performing collective operations on a plurality of compute nodes according to embodiments of the present invention may be implemented using a variety of computer system architectures composed of a plurality of nodes network connected together including for example architectures for a cluster of nodes a distributed computing system a grid computing system and so on.

The arrangement of nodes networks and I O devices making up the exemplary system illustrated in are for explanation only not for limitation of the present invention. Data processing systems capable of reducing power consumption while performing collective operations on a plurality of compute nodes according to embodiments of the present invention may include additional nodes networks devices and architectures not shown in as will occur to those of skill in the art. Although the parallel computer in the example of includes sixteen compute nodes readers will note that parallel computers capable of reducing power consumption while performing collective operations on a plurality of compute nodes according to embodiments of the present invention may include any number of compute nodes. In addition to Ethernet and JTAG networks in such data processing systems may support many data communications protocols including for example TCP Transmission Control Protocol IP Internet Protocol and others as will occur to those of skill in the art. Various embodiments of the present invention may be implemented on a variety of hardware platforms in addition to those illustrated in .

Reducing power consumption while performing collective operations on a plurality of compute nodes according to embodiments of the present invention may be generally implemented on a parallel computer among other types of exemplary systems. In fact such computers may include thousands of such compute nodes. Each compute node is in turn itself a kind of computer composed of one or more computer processors its own computer memory and its own input output adapters. For further explanation therefore sets forth a block diagram of an exemplary compute node useful in a parallel computer capable of reducing power consumption while performing collective operations on a plurality of compute nodes according to embodiments of the present invention. The compute node of includes one or more computer processors as well as random access memory RAM . The processors are connected to RAM through a high speed memory bus and through a bus adapter and an extension bus to other components of the compute node .

Stored in RAM of is a parallel application . The parallel application is a set of computer program instructions that provide user level data processing. The parallel application of specifies a type of collective operation for execution on the compute nodes. As mentioned above a collective operation is a message passing operation effecting communications among a group of compute nodes. Because of the proprietary nature of most parallel computing architectures particular collective operations themselves are generally platform specific. Applications such as the application in therefore typically invoke a generic type of collective operation through an interface provided by a messaging module that effect communications among the node of the parallel computer . The messaging module in turn invokes the platform specific collective operation of the type specified in the application using parameters provided by the application . Examples of types of collective operations that the application may specify may include the following 

Exemplary interfaces for each of the exemplary collective operation types above are described in the MPI specification that is promulgated by the MPI Forum.

Also stored RAM is a messaging module a library of computer program instructions that carry out parallel communications among compute nodes including point to point operations as well as collective operations. User level applications such as application effect data communications with other applications running on other compute nodes by calling software routines in the messaging modules . A library of parallel communications routines may be developed from scratch for use in systems according to embodiments of the present invention using a traditional programming language such as the C programming language and using traditional programming methods to write parallel communications routines. Alternatively existing prior art libraries may be used such as for example the Message Passing Interface MPI library the Parallel Virtual Machine PVM library and the Aggregate Remote Memory Copy Interface ARMCI library.

In the example of the messaging module includes a set of computer program instructions for reducing power consumption while performing collective operations on a plurality of compute nodes according to embodiments of the present invention. The messaging module of operates generally for reducing power consumption while performing collective operations on a plurality of compute nodes according to embodiments of the present invention by receiving instructions to perform a type of collective operation selecting from a plurality of collective operations for the collective operation type a particular collective operation in dependence upon power consumption characteristics for each of the plurality of collective operations and executing the selected collective operation.

Also stored in RAM is an operating system a module of computer program instructions and routines for an application program s access to other resources of the compute node. It is typical for an application program and parallel communications library in a compute node of a parallel computer to run a single thread of execution with no user login and no security issues because the thread is entitled to complete access to all resources of the node. The quantity and complexity of tasks to be performed by an operating system on a compute node in a parallel computer therefore are smaller and less complex than those of an operating system on a serial computer with many threads running simultaneously. In addition there is no video I O on the compute node of another factor that decreases the demands on the operating system. The operating system may therefore be quite lightweight by comparison with operating systems of general purpose computers a pared down version as it were or an operating system developed specifically for operations on a particular parallel computer. Operating systems that may usefully be improved simplified for use in a compute node include UNIX Linux Microsoft Vista AIX IBM s i5 OS and others as will occur to those of skill in the art.

The operating system includes a power management module . The power management module is a service of the operating system that manages the power provided and consumed by the hardware components of the compute node . The power management module may manage power for the hardware components by modifying the power consumed by the hardware components through the processor or a service processor not shown that connects to each of the hardware components. Such connections may be implemented using the buses illustrated in or through out of band buses not shown such as for example an Inter Integrated Circuit I2C bus a JTAG network a System Management Bus SMBus and so on. The power management module may modify the power consumed by hardware components by altering the component s operating frequency instructing a power supply or power circuitry to pulse the power to the components power down certain components reduce the voltage or current at supplied to the components and so on. The power management module may provide an application programming interface API through which the messaging module may access the power management services provided by the power management module .

The exemplary compute node of includes several communications adapters for implementing data communications with other nodes of a parallel computer. Such data communications may be carried out serially through RS 232 connections through external buses such as USB through data communications networks such as IP networks and in other ways as will occur to those of skill in the art. Communications adapters implement the hardware level of data communications through which one computer sends data communications to another computer directly or through a network. Examples of communications adapters useful in systems for reducing power consumption while performing collective operations on a plurality of compute nodes according to embodiments of the present invention include modems for wired communications Ethernet IEEE 802.3 adapters for wired network communications and 802.11b adapters for wireless network communications.

The data communications adapters in the example of include a Gigabit Ethernet adapter that couples example compute node for data communications to a Gigabit Ethernet . Gigabit Ethernet is a network transmission standard defined in the IEEE 802.3 standard that provides a data rate of 1 billion bits per second one gigabit . Gigabit Ethernet is a variant of Ethernet that operates over multimode fiber optic cable single mode fiber optic cable or unshielded twisted pair.

The data communications adapters in the example of includes a JTAG Slave circuit that couples example compute node for data communications to a JTAG Master circuit . JTAG is the usual name used for the IEEE 1149.1 standard entitled Standard Test Access Port and Boundary Scan Architecture for test access ports used for testing printed circuit boards using boundary scan. JTAG is so widely adapted that at this time boundary scan is more or less synonymous with JTAG. JTAG is used not only for printed circuit boards but also for conducting boundary scans of integrated circuits and is also useful as a mechanism for debugging embedded systems providing a convenient back door into the system. The example compute node of may be all three of these It typically includes one or more integrated circuits installed on a printed circuit board and may be implemented as an embedded system having its own processor its own memory and its own I O capability. JTAG boundary scans through JTAG Slave may efficiently configure processor registers and memory in compute node for use in reducing power consumption while performing collective operations on a plurality of compute nodes according to embodiments of the present invention.

The data communications adapters in the example of includes a Point To Point Adapter that couples example compute node for data communications to a network that is optimal for point to point message passing operations such as for example a network configured as a three dimensional torus or mesh. Point To Point Adapter provides data communications in six directions on three communications axes x y and z through six bidirectional links x x y y z and z .

The data communications adapters in the example of includes a Global Combining Network Adapter that couples example compute node for data communications to a network that is optimal for collective message passing operations on a global combining network configured for example as a binary tree. The Global Combining Network Adapter provides data communications through three bidirectional links two to children nodes and one to a parent node .

Example compute node includes two arithmetic logic units ALUs . ALU is a component of processor and a separate ALU is dedicated to the exclusive use of Global Combining Network Adapter for use in performing the arithmetic and logical functions of reduction operations. Computer program instructions of a reduction routine in parallel communications library may latch an instruction for an arithmetic or logical function into instruction register . When the arithmetic or logical function of a reduction operation is a sum or a logical or for example Global Combining Network Adapter may execute the arithmetic or logical operation by use of ALU in processor or typically much faster by use dedicated ALU .

The example compute node of includes a direct memory access DMA controller which is computer hardware for direct memory access and a DMA engine which is computer software for direct memory access. Direct memory access includes reading and writing to memory of compute nodes with reduced operational burden on the central processing units . A DMA transfer essentially copies a block of memory from one compute node to another. While the CPU may initiates the DMA transfer the CPU does not execute it. In the example of the DMA engine and the DMA controller support the messaging module .

For further explanation illustrates an exemplary Point To Point Adapter useful in systems capable of reducing power consumption while performing collective operations on a plurality of compute nodes according to embodiments of the present invention. Point To Point Adapter is designed for use in a data communications network optimized for point to point operations a network that organizes compute nodes in a three dimensional torus or mesh. Point To Point Adapter in the example of provides data communication along an x axis through four unidirectional data communications links to and from the next node in the x direction and to and from the next node in the x direction . Point To Point Adapter also provides data communication along a y axis through four unidirectional data communications links to and from the next node in the y direction and to and from the next node in the y direction . Point To Point Adapter in also provides data communication along a z axis through four unidirectional data communications links to and from the next node in the z direction and to and from the next node in the z direction .

For further explanation illustrates an exemplary Global Combining Network Adapter useful in systems capable of reducing power consumption while performing collective operations on a plurality of compute nodes according to embodiments of the present invention. Global Combining Network Adapter is designed for use in a network optimized for collective operations a network that organizes compute nodes of a parallel computer in a binary tree. Global Combining Network Adapter in the example of provides data communication to and from two children nodes through four unidirectional data communications links . Global Combining Network Adapter also provides data communication to and from a parent node through two unidirectional data communications links .

For further explanation sets forth a line drawing illustrating an exemplary data communications network optimized for point to point operations useful in systems capable of reducing power consumption while performing collective operations on a plurality of compute nodes in accordance with embodiments of the present invention. In the example of dots represent compute nodes of a parallel computer and the dotted lines between the dots represent data communications links between compute nodes. The data communications links are implemented with point to point data communications adapters similar to the one illustrated for example in with data communications links on three axes x y and z and to and fro in six directions x x y y z and z . The links and compute nodes are organized by this data communications network optimized for point to point operations into a three dimensional mesh . The mesh has wrap around links on each axis that connect the outermost compute nodes in the mesh on opposite sides of the mesh . These wrap around links form part of a torus . Each compute node in the torus has a location in the torus that is uniquely specified by a set of x y z coordinates. Readers will note that the wrap around links in the y and z directions have been omitted for clarity but are configured in a similar manner to the wrap around link illustrated in the x direction. For clarity of explanation the data communications network of is illustrated with only 27 compute nodes but readers will recognize that a data communications network optimized for point to point operations for use in reducing power consumption while performing collective operations on a plurality of compute nodes in accordance with embodiments of the present invention may contain only a few compute nodes or may contain thousands of compute nodes.

For further explanation sets forth a line drawing illustrating an exemplary data communications network optimized for collective operations useful in systems capable of reducing power consumption while performing collective operations on a plurality of compute nodes in accordance with embodiments of the present invention. The example data communications network of includes data communications links connected to the compute nodes so as to organize the compute nodes as a tree. In the example of dots represent compute nodes of a parallel computer and the dotted lines between the dots represent data communications links between compute nodes. The data communications links are implemented with global combining network adapters similar to the one illustrated for example in with each node typically providing data communications to and from two children nodes and data communications to and from a parent node with some exceptions. Nodes in a binary tree may be characterized as a physical root node branch nodes and leaf nodes . The root node has two children but no parent. The leaf nodes each has a parent but leaf nodes have no children. The branch nodes each has both a parent and two children. The links and compute nodes are thereby organized by this data communications network optimized for collective operations into a binary tree . For clarity of explanation the data communications network of is illustrated with only 31 compute nodes but readers will recognize that a data communications network optimized for collective operations for use in systems for reducing power consumption while performing collective operations on a plurality of compute nodes in accordance with embodiments of the present invention may contain only a few compute nodes or may contain thousands of compute nodes.

In the example of each node in the tree is assigned a unit identifier referred to as a rank . A node s rank uniquely identifies the node s location in the tree network for use in both point to point and collective operations in the tree network. The ranks in this example are assigned as integers beginning with 0 assigned to the root node 1 assigned to the first node in the second layer of the tree 2 assigned to the second node in the second layer of the tree 3 assigned to the first node in the third layer of the tree 4 assigned to the second node in the third layer of the tree and so on. For ease of illustration only the ranks of the first three layers of the tree are shown here but all compute nodes in the tree network are assigned a unique rank.

For further explanation sets forth a flow chart illustrating an exemplary method for reducing power consumption while performing collective operations on a plurality of compute nodes according to embodiments of the present invention. The compute nodes described with reference to are connected together for data communications using a plurality of data communications networks. At least one of the data communications networks is optimized for point to point operations and at least one of the data communications is optimized for collective operations.

The method of includes profiling a plurality of collective operations for power consumption characteristics . The power consumption characteristics of indicate the manner in which the hardware components of a compute node consume power for a particular collective operation. Profiling a plurality of collective operations for power consumption characteristics according to the method of may be carried out by a service node or one of the compute nodes prior to executing an application on the compute nodes. A service node or a compute node may profile a plurality of collective operations for power consumption characteristics according to the method of by executing each of the collective operations and measuring the power consumed by the various hardware components during execution. Power consumption may be measured by voltage and current sensors metering each hardware component. The measurements from these various sensors may be aggregated by a service processor installed on the compute node used to measure the power consumption. A service node may then access the measurements from the compute node s service processor through a JTAG network or some other communications channel as will occur to those of skill in the art.

Rather than measure the actual power consumed by each hardware component during execution to determine the power consumption characteristics of each of the collective operations profiling a plurality of collective operations for power consumption characteristics according to the method of may be carried out by generating power consumption characteristics for each collective operation based on software simulations of the execution of each collective operation . In such manner the software developers designing each collective operation may provide the power consumption characteristics to a service node or compute node when the collective operations are deployed in a parallel computer.

In the example of the power consumption characteristics are stored in a collective operation power profile table . Each record of the collective operation power profile table associates a set of power consumption characteristics with an identifier specifying a collective operation and an identifier specifying the type of the collective operation. For further explanation consider the following exemplary collective operation power profile table 

The exemplary collective operation power profile table above illustrates three types of collective operations a Reduction an AllToAll and a Scatter. Each type is associated with two specific collective operations one collective operation that is implemented using a tree network and a second collective operation that is implemented using a torus network. Each particular collective operation is associated with a power consumption characteristic that indicate the amount of power consumed by the compute node when perform the particular collective operation. The table above specifies that less power is consumed when performing a reduction operation using the tree network than the torus network. Also less power is consumed when performing an alltoall operation using the torus network than the tree network. The table also indicates that less power is consumed when performing a scatter operation using the tree network than the torus network. Readers will note that the exemplary collective operation power profile table above is for explanation only and not for limitation.

The compute nodes described with reference to execute an application that specifies a type of collective operation. In the collective operation type specified by the application is a reduction operation. The reduction operation is specified in the application using the MPI Reduce function an exemplary function described in the MPI specification promulgated by the MPI Forum.

The method of includes receiving by each compute node instructions to perform a type of collective operation. Receiving instructions to perform a type of collective operation according to the method of may be carried out by a messaging module invoked by the application to provide communications among compute nodes. The messaging module may receive instructions to perform a type of collective operation according to the method of as an invocation of a particular function exposed by the messaging module to the application . In for example a messaging module receives instructions to perform a reduction type of collective operation when the compute node invokes the MPI Reduce function.

The method of includes selecting by each compute node from a plurality of collective operations for the collective operation type a particular collective operation in dependence upon power consumption characteristics for each of the plurality of collective operations . In the example of each compute node selects a particular collective operation from a plurality of collective operations for the collective operation type by selecting the particular collective operation in dependence upon the power consumption characteristics for the plurality of collective operations and current collective operation performance requirements . Each compute node may select the particular collective operation according to the method of by comparing the operation performance requirements with the historical performance for all of the collective operations of the type specified by the application and selecting the particular collective operation that both has historical performance satisfying the operation performance requirements and has the lowest power consumption as specified by the power consumption characteristics in the collective operation power profile table .

The method of includes executing by each compute node the selected collective operation . Executing the selected collective operation according to the method of may be carried out by a messaging module installed on the compute node. The messaging module may execute the selected collective operation according to the method of by invoking a set of platform specific primitives that carryout the selected collective operation. Because the application need only specify a particular type of collective operation for the messaging module to invoke the platform specific primitives that carryout out a collective operation of that type the application need not be modified to take advantage of the powers saving provided according to embodiments of the present invention. For example the application need merely to instruct the messaging module to perform a type of reduction operation and the messaging module will perform a particular reduction operation that satisfies minimum performance criteria and provides the most power savings.

To further reduce the power consumption during execution of collective operations power may be reduced to hardware resources that are not utilized during the collective operation. For further explanation sets forth a flow chart illustrating a further exemplary method for reducing power consumption while performing collective operations on a plurality of compute nodes according to embodiments of the present invention. The compute nodes described with reference to are connected together for data communications using a plurality of data communications networks. At least one of the data communications networks is optimized for point to point operations and at least one of the data communications is optimized for collective operations.

The compute nodes described with reference to execute an application that specifies a type of collective operation. In the collective operation type specified by the application is a reduction operation. The reduction operation is specified in the application using the MPI Reduce function an exemplary function described in the MPI specification promulgated by the MPI Forum.

The method of is similar to the method of . That is the method of includes receiving by each compute node instructions to perform a type of collective operation selecting by each compute node from a plurality of collective operations for the collective operation type a particular collective operation in dependence upon power consumption characteristics for each of the plurality of collective operations and executing by each compute node the selected collective operation .

The method of also includes determining by each compute node which hardware resources are not used during execution of the selected collective operation . Each compute node may determine which hardware resources are not used during execution of the selected collective operation according to the method of by identifying the unused hardware resources in a collective operation hardware utilization profile for the particular collective operation . The collective operation hardware utilization profile specifies the compute node hardware that is and is not utilized to perform the plurality of collective operations .

The method of also includes reducing power by each compute node during execution of the selected collective operation to the hardware resources that are not used during execution of the selected collective operation . Each compute node may reduce power during execution of the selected collective operation to the hardware resources that are not used during execution of the selected collective operation according to the method of by powering down the hardware resources or throttling operating speeds for the hardware resources . Each compute node may throttle operating speeds for the hardware resources by changing values in operating frequency registers that control the speed at which hardware resources operates.

For exemplary purposes only illustrates the reduction in power to the various hardware resources as a reduction in the amplitude of a sinusoidal wave from a power supply to the hardware resources . The sinusoidal wave represents the power transferred between the power supply and the hardware resources in an alternating current A C circuit. The dotted line sinusoidal wave represents the amplitude of the power before the power reduction occurs while the solid line sinusoidal wave represents the amplitude of the power after the power reduction occurs. Readers will note that representing the power transferred between the power supply and the hardware resources as a sinusoidal wave of an A C circuit is for example only. The shape of the wave may take many forms such as for example step wave saw tooth wave triangular wave and so on. Because the power supply may provide power in a direct current D C circuit the power may be implemented as a wave of constant amplitude or pulses of constant amplitude.

To further reduce the power consumption during execution of collective operations power may be reduced to hardware resources that are in fact utilized during the collective operation. For further explanation sets forth a flow chart illustrating a further exemplary method for reducing power consumption while performing collective operations on a plurality of compute nodes according to embodiments of the present invention. The compute nodes described with reference to are connected together for data communications using a plurality of data communications networks. At least one of the data communications networks is optimized for point to point operations and at least one of the data communications is optimized for collective operations.

The compute nodes described with reference to execute an application that specifies a type of collective operation. In the collective operation type specified by the application is a reduction operation. The reduction operation is specified in the application using the MPI Reduce function an exemplary function described in the MPI specification promulgated by the MPI Forum.

The method of is similar to the method of . That is the method of includes receiving by each compute node instructions to perform a type of collective operation selecting by each compute node from a plurality of collective operations for the collective operation type a particular collective operation in dependence upon power consumption characteristics for each of the plurality of collective operations and executing by each compute node the selected collective operation .

The method of also includes determining by each compute node which hardware resources are used during execution of the selected collective operation . Each compute node may determine which hardware resources are used during execution of the selected collective operation according to the method of by identifying the utilized hardware resources in a collective operation hardware utilization profile for the particular collective operation . The collective operation hardware utilization profile specifies the compute node hardware that is and is not utilized to perform the plurality of collective operations .

The method of includes throttling by each compute node during execution of the selected collective operation operating speeds for the hardware resources that are in fact used during the selected collective operation . Each compute node may throttle during execution of the selected collective operation operating speeds for the hardware resources according to the method of by modifying values in operating frequency registers that control the speed at which a hardware resources operates.

Exemplary embodiments of the present invention are described largely in the context of a fully functional computer system for reducing power consumption while performing collective operations on a plurality of compute nodes. Readers of skill in the art will recognize however that the present invention also may be embodied in a computer program product disposed on computer readable media for use with any suitable data processing system. Such computer readable media may be transmission media or recordable media for machine readable information including magnetic media optical media or other suitable media. Examples of recordable media include magnetic disks in hard drives or diskettes compact disks for optical drives magnetic tape and others as will occur to those of skill in the art. Examples of transmission media include telephone networks for voice communications and digital data communications networks such as for example Ethernets and networks that communicate with the Internet Protocol and the World Wide Web as well as wireless transmission media such as for example networks implemented according to the IEEE 802.11 family of specifications. Persons skilled in the art will immediately recognize that any computer system having suitable programming means will be capable of executing the steps of the method of the invention as embodied in a program product. Persons skilled in the art will recognize immediately that although some of the exemplary embodiments described in this specification are oriented to software installed and executing on computer hardware nevertheless alternative embodiments implemented as firmware or as hardware are well within the scope of the present invention.

It will be understood from the foregoing description that modifications and changes may be made in various embodiments of the present invention without departing from its true spirit. The descriptions in this specification are for purposes of illustration only and are not to be construed in a limiting sense. The scope of the present invention is limited only by the language of the following claims.

