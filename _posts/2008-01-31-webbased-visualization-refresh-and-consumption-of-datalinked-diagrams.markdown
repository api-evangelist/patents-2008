---

title: Web-based visualization, refresh, and consumption of data-linked diagrams
abstract: Technologies are described herein for refreshing data-linked diagrams on a server computer and viewing and consuming the refreshed diagrams via a Web browser. A drawing program allows equations within a diagram definition to define how external data is utilized to modify the attributes of a diagram element. When the diagram is published to a server computer, the definition is converted to server-legible definition. A published diagram is generated that includes a diagram representation defined by the server-legible definition. Upon a request for the published diagram, the external data is refreshed and the diagram definition is updated. The equations are recalculated to generate new element attributes. The diagram representation is then updated with the new attributes and returned for display by a client Web browser. An interface provides exploration tools and a client API exposes methods for surfacing external data and annotating the diagram.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08230319&OS=08230319&RS=08230319
owner: Microsoft Corporation
number: 08230319
owner_city: Redmond
owner_country: US
publication_date: 20080131
---
Conventional drawing programs generally allow the creation and editing of drawings by providing a variety of shapes that can be selected and placed within the drawings. For instance shapes such as squares rectangles circles triangles and other types of shapes may be placed within a drawing. Tools are also typically provided for orienting and sizing the shapes in the diagram as desired. Other tools may also be provided for drawing other types of shapes and performing other types of drawing functions.

Some conventional drawing programs provide a feature that allows data to be associated with the shapes in a drawing. For example functionality may be provided for associating data stored at an external data source with the various attributes of a shape. In this way the value of the external data may be utilized to specify the color size position text or other attributes of a shape within a drawing. External data may also be displayed in shapes as an additional visual element such as an icon or a progress bar which is displayed on or adjacent to the shape.

An equation may also be specified that defines how the value of the external data should modify the attributes of a shape. For instance an equation may be defined that specifies that the color of the shape should be changed to red if a sales value retrieved from an external database is less than a specified value. Another formula may be defined that specifies that the color of the shape should be green when the sales value retrieved from the external database is greater than the specified value.

In addition to the creation of drawings drawing programs also allow users to view and edit drawings created by other users using the same application or a compatible application. However in order to view and edit a drawing created by another user the appropriate drawing program utilized to create the drawing or a compatible drawing program must typically be installed on the computer on which the drawing is to be viewed.

In many cases a user may simply be unable to view a drawing if they do not have a copy of the application program utilized to create the drawing installed on their computer. In other cases it may be necessary for a user to locate download and install a compatible viewer application program for displaying the drawing on their computer in order to view the drawing. It may however be difficult for a user to locate install and execute such a viewer application. In yet other cases a compatible version of the application program or viewer application may not be available for the type of device on which the user wishes to view the document. For instance a user may wish to view a drawing on a personal digital assistant PDA or a wireless mobile telephone for which a version of the application program utilized to create the drawing or a viewer application does not exist. This can be extremely frustrating for a user that has a need to view a drawing including any shapes connected to external data contained therein but who does not possess the necessary application program utilized to create the drawing or a compatible viewer application.

Some diagramming applications allow the user to export a diagram as a picture or a web page which will allow other users to view the diagram using a world wide web Web browser. However the exported diagram will be viewed as a static picture that does not allow for any change to the shapes as a result of a change to the external data associated with the shapes. All links to external data are severed providing a user viewing the diagram via a Web browser with potentially outdated information.

Technologies are described herein for publishing a data linked diagram to a world wide web Web server and subsequently providing an updated diagram based on current external data to a requesting Web browser for viewing and additional consumption. In particular through the utilization of the technologies and concepts presented herein a drawing containing one or more shapes or other elements bound to external data sources can be rendered on a server computer for display using a standard viewer application program executing on a client computer such as a Web browser application. Because the drawing is refreshed and rendered on the server computer including any data bound shapes contained therein there is no need for the application program utilized to create the drawing or a specific viewer application for the drawing to be installed on the client computer to get an up to date drawing.

According to one aspect presented herein a drawing program executing on a client computer provides functionality for creating a diagram that includes shapes or other diagram elements with attributes bound to external data sources. The drawing program also provides functionality for defining equations that define how the external data should be utilized to modify the attributes of an element. In this regard the equations may reference data provided by external data sources. These equations and other information corresponding to static diagram elements and data bound elements that may be used by a drawing program to render the diagram create a client diagram definition.

The drawing program also provides functionality for publishing a diagram to a server computer. When a request is received to publish a diagram to a server computer the client diagram definition including any equations utilized to modify shape attributes and data identifying bindings between diagram elements and external data is converted to a server diagram definition that is legible by the server computer. A published diagram is generated that includes the server diagram definition and a representation of the diagram in a vector format. The drawing program publishes the published diagram to a server computer.

A request may be received at the server computer to view the published diagram. Such a request may be generated by a standard viewer application such as a Web browser application program executing on a client computer. When such a request is received the server computer refreshes the data bindings for the diagram by obtaining updated values for any external data. The equations are then recalculated using the updated values to generate new results assigned to the shape attributes. The shape attributes within the vector representation of the diagram are then updated according to the new results.

Once the vector representation of the diagram has been updated with the updated results for the shape attributes the vector representation of the diagram may be rasterized to generate a rasterized diagram in a standard image format if requested in a Web raster format. The rendered diagram in either a Web raster format or a Web vector format is then returned to the viewer application for display. According to various embodiments a Web part may provide a user interface through which a user may interact with the rendered diagram to perform navigation and exploration actions such as panning zooming hyperlinking visualizing any linked external data for each diagram element and navigating within the multiple pages of the diagram.

Additionally embodiments provide for exposing a client application programming interface API to provide the end user with the ability among others to retrieve external data underlying the data bound elements and to annotate the diagram as desired. In this manner a diagram containing shapes or other diagram elements bound to an external data source is rendered on the server computer for display by the standard viewer application program executing on the client computer while providing the end user with various navigation and diagram consumption capabilities via a Web browser or other viewer application program.

It should be appreciated that the above described subject matter may also be implemented as a computer controlled apparatus a computer process a computing system or as an article of manufacture such as a computer readable medium. These and various other features will be apparent from a reading of the following Detailed Description and a review of the associated diagrams.

This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter nor is it intended that this Summary be used to limit the scope of the claimed subject matter. Furthermore the claimed subject matter is not limited to implementations that solve any or all disadvantages noted in any part of this disclosure.

The following detailed description is directed to technologies for providing a refreshed data linked diagram which is created on a rich client and published to a Web server to a Web browser for viewing and other consumption actions. Through the use of the technologies and concepts presented herein a diagram can be created on a client computer published to a server computer and rendered on the server computer for display using a standard viewer application program. Because the published diagram is refreshed and rendered on the server computer including any data bound shapes contained therein the application program utilized to create the diagram is not needed in order to view the published diagram. Rather a standard viewer application like a Web browser can be utilized to view the published diagram.

While the subject matter described herein is presented in the general context of program modules that execute in conjunction with the execution of an operating system and application programs on a computer system those skilled in the art will recognize that other implementations may be performed in combination with other types of program modules. Generally program modules include routines programs components data structures and other types of structures that perform particular tasks or implement particular abstract data types. Moreover those skilled in the art will appreciate that the subject matter described herein may be practiced with other computer system configurations including hand held devices multiprocessor systems microprocessor based or programmable consumer electronics minicomputers mainframe computers and the like.

In the following detailed description references are made to the accompanying drawings that form a part hereof and which are shown by way of illustration specific embodiments or examples. Referring now to the drawings in which like numerals represent like elements through the several figures aspects of a computing system and methodology for recalculating vector graphics on a server computer will be described.

Turning now to details will be provided regarding aspects of a three tiered data linked diagram creation update and consumption process according to various embodiments presented herein. In particular for clarity purposes in introducing the various system components and associated processes described in the embodiments below visually depicts the process in three tiers. Tier includes the creation and publication of a diagram using a rich client computer. This client computer as well as a server computer and client computer discussed in Tiers and will be described in detail below with respect to .

In Tier a user creates a diagram or other drawing that may include static elements such as shapes and text whose visual attributes do not depend on external data as well as one or more data bound elements. Data bound elements may include any shapes lines text or any other element of a diagram that has one or more visual attributes that are linked to external data . As will be described further below the visual attributes of the data bound elements may include color size position orientation or textual content based on the external data located at an external data source such as the external structured storage . Throughout the disclosure provided herein the external data source that stores the external data will be referred to as structured storage . However it should be appreciated that any amount and type of storage mediums may be used to store the external data that is bound to the data bound elements of the diagram .

Transformation equations and the results of those equations define the relationship between the external data and the visual attributes of the data bound elements. In this manner the visual appearance of the data bound elements are driven by the external data retrieved from the structured storage . After creating the diagram the user publishes the diagram and the diagram is uploaded to a server computer. As will be described in greater detail below during the publishing process a client legible diagram definition corresponding to the diagram elements and any linked external data is transformed into a server legible diagram definition that may be evaluated and acted upon by the server computer. The diagram definitions include definitions for each element which when analyzed together determine how a diagram should be rendered. For illustration purposes a practical example of the diagram creation and publication process of Tier will now be described according to various embodiments.

According to one illustrative example a network administrator is tasked with creating a data bound diagram of the computer networks in the different buildings of a company s corporate headquarters. In doing so the administrator uses a diagramming application to create network diagrams of each building. The administrator imports network status data from a structured data store such as a structured query language SQL server into the diagram and associates the data to particular diagram shapes and creates rules to surface this data visually so that the network status of each computer network will be visible on the diagram through the use of color coding or other visual attributes.

After completing the diagram the administrator publishes the diagram using a publishing feature of the diagramming application. Selection of the publishing control initiates the upload of the diagram to a shared location that can be accessed by diagram consumers and an update engine. The administrator may then be able to email links to a page to the appropriate personnel. The linked page would have associated logic that would request the diagram from the shared location. Subsequent selection of the link by another person will provide the person with a view of the diagram via a local Web browser with the data bound shapes updated to reflect the color corresponding to the current status of the corresponding computer network.

Referring back to after publishing the data linked diagram the process enters Tier . At Tier an update engine parses the server legible diagram definition of the static and data bound elements of the published diagram and stores the element definitions in memory. Upon receiving a request from a Web browser of a consumption client computer in Tier the update engine will refresh the external data linked to the published diagram . To do so for each of the data bound elements the update engine will connect to the underlying data storage system identified by the server legible diagram definition such as the structured storage shown in and retrieve the associated external data .

The transformation equations associated with the data bound elements are each re evaluated to calculate new results. These results are then utilized to regenerate the attributes associated with the data bound elements. As each element s definition is updated it is stored in memory to replace the older element definition to create an updated diagram definition that will be used to create a rendered diagram for the consumption client computer in Tier . If the consumption client computer in Tier has requested a raster version of the diagram then the update engine will render the updated diagram definition to a Web raster format. If the consumption client computer in Tier has requested a vector version of the diagram then the update engine will assemble an equivalent visualization in a Web vector format.

At Tier the consumption client computer receives the rendered diagram from the server computer and displays the diagram using a standard viewer application like a Web browser. According to various embodiments the server computer at Tier provides a Web page to the consumption client computer that includes any number of on page navigation and exploration tools for viewing and exploring the rendered diagram . As will be discussed in greater detail below a server API exposed by the server computer may provide an end user with the capability of extracting the external data and annotating the rendered diagram .

For illustration purposes a practical example of the diagram consumption process of Tier will now be described according to various embodiments. Continuing the illustrative example described above a user receives an email from the network administrator that includes a link to the data bound diagram of the computer networks in the various buildings of the company s corporate headquarters. The user clicks on the link in the email and his Web browser loads displaying the rendered diagram showing the network status for each computer network. The user notices that the network state has changed slightly since yesterday. Some servers are now red and others have exclamation marks next to them. These colors and exclamation marks are attributes assigned to the server representations in the diagram and linked to the network status data in the SQL server or other structured data source.

The user decides to explore the network using the pan and zoom controls of the Web page created by the administrator. He locates a server with an abnormal load and selects it within the diagram with a pointer tool to follow a hyperlink to an HTML report with additional details about the machine. The user calls a machine administrator who promptly fixes the problems. With the issues resolved the user hits a Refresh button of the Web page s refresh control. After the rendered diagram is refreshed using updated external data the colors and other indicators return to normal and the user closes his browser.

Turning now to details will be provided regarding an illustrative operating environment and several software components provided by the embodiments presented herein. In particular shows aspects of a system for Web based visualization refresh and consumption of a data bound diagram. The system includes a publishing client computer and a server computer . The publishing client computer comprises a standard desktop laptop or handheld computing system capable of executing the drawing program and a Web browser .

As will be described in greater detail herein the drawing program comprises an executable application program capable of creating a diagram . The diagram may include a multitude of visual elements laid out in virtually in any format. In particular the diagram may include any number of static elements and any number of data bound elements . Static elements are those shapes connectors and other diagram elements that are not bound to any external data while data bound elements include shapes connectors and other diagram elements that have visual attributes that are bound to an external data source. For instance various attributes of the data bound elements such as the color size position text or orientation may be linked to an external data source such as the structured storage . In this manner the visual appearance of the data bound elements can be driven by the data retrieved from the structured storage . The drawing program may also provide functionality for binding the attributes of the data bound elements to any other types of data sources external to the drawing program in addition to the structured storage .

According to various embodiments the drawing program provides functionality for creating the client diagram definition which defines the diagram . The client diagram definition includes element definitions corresponding to the static elements the data bound elements and corresponding external data and the transformation equations that determine the visual attributes of the data bound elements . The transformation equations may be mathematical or textual equations that control a visual attribute according to external data data entered directly into the diagram and or diagram parameters from within the diagram definition such as the length of a line the color of a line or any other element parameters.

Equation results are the results of the transformation equations that utilize the external data as parameters. The equation results determine the visual attribute associated with a data bound element . It should be appreciated that the equation results may be equivalent to the external data to which the data bound element is linked. For example a transformation equation may state if external data X then the color of the corresponding shape is red. Assuming the external data X then the equation result is X and the color of the data bound element should be red. As another example the transformation equation may state that some geometry such as a flag should be added to a shape if an average of a list of values from a spreadsheet falls into a particular range. In this instance the equation result would be the average that is compared to the range to determine whether a flag should be added to the shape in the diagram .

In one embodiment presented herein the drawing program also provides functionality for publishing the diagram to a server computer . In particular a diagram having one or more data bound elements with attributes defined by a transformation equation that references external data may be published to the server computer . In order to publish the diagram to the server computer the drawing program utilizes a publishing module . In response to receiving a request to publish the diagram to the server computer such as from a user the publishing module is executed.

As will be described in greater below the publishing module is operative to generate a published diagram that is published to the server computer . In order to generate the published diagram the publishing module transforms client diagram definition into a server diagram definition that is legible to the diagram rendering functionality of the server computer . Similar to the client diagram definition the server diagram definition defines the published diagram in terms of the static elements the data bound elements and corresponding external data and the transformation equations . The published diagram includes a vector representation that is defined by the server diagram definition . The vector representation comprises a representation of the diagram in an intermediate graphics format. In one implementation the vector representation is utilizing the SILVERLIGHT EXTENSIBLE APPLICATION MARKUP LANGUAGE XAML from MICROSOFT CORPORATION of Redmond Wash. It should be appreciated however that other types of languages for describing vector graphics may also be utilized.

Once the publishing module has generated the vector representation of the diagram and the server diagram definition these items are transmitted to the server computer via a communications network such as the network . The server computer stores the published diagram in an appropriate mass storage device. According to other aspects presented herein the server computer may also receive and respond to requests from a consumption client computer to view the published diagram . Such a request may be received by a Web server application from a Web browser executing on the consumption client computer .

In response to receiving a request to view the published diagram the server computer executes an update engine . The update engine may be any application module or combination of any number of applications or modules that is operative to perform the update operations of Tier as described above with respect to . The update engine is operative to utilize the server diagram definition specifically the element definitions corresponding to the data bound elements to obtain updated values for externally referenced data .

For instance in the example shown in the update engine communicates with the structured storage to update the values for attributes in the published diagram that reference the structured storage . Once updated values have been obtained the update engine evaluates the transformation equations with the updated values for the element attributes obtained by the update engine . When the update engine has completed evaluating the transformation equations to obtain the updated values for the external data the update engine updates a portion of the vector representation of the published diagram to reflect the updated values. For instance attributes or other markup language elements contained within the vector representation may be replaced or modified to specify the updated value for the attribute.

Once the update engine has updated the vector representation of the published diagram a rasterizer may be executed to rasterize the vector representation into a rasterized drawing if the request from the consumption client computer requests a Web raster format. In one implementation the rasterized drawing is stored in a standard image format such as the portable network graphics PNG image format that may be displayed without the assistance of a plug in module by a standard viewer application such as the Web browser . Alternatively the consumption client computer may request to view the published diagram in a Web vector format. Depending on the requested format the update engine will interpret the published diagram in the requested format to create a rendered diagram . It should be appreciated that depending on the vector format a plug in could be required.

According to various embodiments the update engine or other application executing on the server computer may be utilized to create a Web page comprising exploration and consumption tools. It should be appreciated that one implementation for creating the Web page includes utilizing one or more Web parts . A Web part includes a set of controls for creating a Web page in which an end user can modify aspects of the displayed Web page from the Web browser. As an example the rendered diagram may be presented in a diagramming application Web part that provides the end user with exploration tools that allow the end user to pan zoom and follow hyperlinks associated with diagram elements. Moreover a Web part may be added to present the end user with a user interface that allows the end user to view the external data bound to a data bound element . A user interface may additionally be provided to allow for page navigation within a multi page diagram. An example of a user interface provided using a Web part will be described in detail below with respect to .

According to various embodiments a client API performs various functions. First it exposes to a developer different elements of the diagram. Examples include but are not limited to the collection of pages of the diagram the collection of shapes of the diagram the associated data within a shape the associated hyperlinks with a shape the dimensions of a bounding box associated with a shape and an identifier of a shape. The client API further provides the developer with the ability to respond to various events such as mouse events a shape selection change a page load complete indication or any other detectable event. In doing so the programmer may provide various consumption features to an end user via the Web browser as a result of an associated event.

Moreover the client API provides the ability to annotate diagram elements. The developer may use data associated with a shape which originated from a structured storage and based on the data annotate the diagram accordingly. For example if all of the shapes on the drawing page have a cost property that comes from an external database then the diagram shapes may have a corresponding value displayed on each shape in the diagram as described in the embodiments above. The developer could use the client API to read the value off of the shape and then annotate the shape over any existing text or attribute with a highlight or any new attribute.

According to one implementation the client API includes Web page scripting language such as JavaScript that is operative to determine when the end user performs an action like selecting a shape among others and to retrieve the corresponding external data and further take action based on the external data . It should be appreciated that the client API is not limited to JavaScript and may be created in any suitable programming language. According to one implementation the client API the code using it and data exposed through the API start on the server computer and are sent to the Web browser . At the Web browser the client API and the code that calls into it are run within the context of the Web browser . In this manner API commands may be client side without needing to call back to the server computer to execute the required operations. However it is within the scope of the embodiments disclosed herein for methods within the client API to issue commands through a network to the server computer . It should be appreciated that virtually any number and type of Web parts and APIs may be utilized to provide for various types of diagram exploration and consumption functionality within the scope of this disclosure.

The rendered diagram is returned to the Web browser on the Web page in response to the original request to view the published diagram received at the server computer . The Web browser associated with the consumption client computer displays the Web page that includes the rendered diagram and a diagram consumption user interface . The diagram consumption interface provides the end user with various navigation tools and will be described in greater detail below with respect to .

Referring now to additional details regarding the functionality provided by the drawing program for creating a diagram and associating data bound element within the diagram to external data will be described. In particular shows the contents of an illustrative diagram . The diagram illustrated in includes the diagram elements A B and . Static elements A and B do not have visual attributes that depend on external data however the data bound element includes a number of attributes that specify the visual appearance for the element. As described briefly above these attributes can be bound to external data such as data stored in a structured storage . For example the data bound element has a color attribute that has been bound to external data .

In the example shown in the data bound element has its color attribute bound to a transformation equation . In this example the equation references external data contained in the structured storage . For instance the transformation equation may specify that the color attribute of the data bound element should be set to red if the external data retrieved from the structured storage is greater than a predefined number. In this example the data bound element also includes text C that is bound to an equation result from the transformation equation using the external data retrieved from the structured storage . In this example the text C corresponds to a numeric equation result using currency rules. For example the transformation equation may include a sum of a quantity of sales values stored as external data in the structured storage . After applying the transformation equation the equation result which is the sum of all of the sales values in this example equals 5 500 000. This equation result is displayed as the text C on the data bound element . It should be appreciated that a text attribute of the data bound element may be bound to an external text value in a similar manner.

According to aspects the data bound element may also include graphical elements that are displayed in accordance with data retrieved from an external data source. These graphical elements are referred to herein as data graphics. For instance the data bound element illustrated in includes a data bar B that varies depending upon the equation result corresponding to the transformation equation and the external data . A flag icon A may also be displayed in conjunction with the data bound element with its attributes varying based upon the equation result . It should be appreciated that the flag icon A may be only one of a set of icons that may be used as a visual attribute and that any combination of icons may be used according to the equation result .

Turning to an illustrative screen diagram of a Web browser of the consumption client computer according to one embodiment will be described. shows a diagram consumption user interface that is provided to the end user for various navigation and consumption operations. As described above the diagram consumption user interface may be created and provided at the server computer using a Web part . The user interface includes a drawing page in which the rendered diagram is displayed. A toolbar provides various controls for consuming the rendered diagram . Examples of controls include a refresh control a page navigation control a zoom control a pan control and a diagram opening control . The refresh control may be selected to initiate the update engine to retrieve the external data and refresh the data bound elements with the updated external data . After selecting the refresh control the attributes of the data bound elements in the rendered diagram will be regenerated to reflect any change in the external data since the server diagram definition was last updated and saved.

According to one implementation the page navigation control provides a drop down menu when selected to allow the end user to select any available page of a multi page diagram. According to an alternative embodiment the end user may select page tabs to navigate between pages. The zoom control and pan control allows the end user to zoom and pan respectively within the drawing page . The diagram opening control allows the user to open the diagram using the drawing program that was used to create the diagram . This control may only be utilized if the underlying drawing program is installed on the consumption client computer .

According to various embodiments the diagram consumption user interface provides an information pane that allows the end user to view the external data underlying one or more of the data bound elements . A status bar provides the end user with any type of information such as information relating to the result of server and client operations. It should be appreciated that the embodiments described herein are not limited to components or configuration of the screen diagram shown in . Rather any layout configuration and number and type of controls may be presented to the end user through the user of applicable Web parts or APIs. Additionally the applicable Web parts or APIs may allow for the end user to initiate any of the navigation and exploration features described above through any type of input including but not limited to the selection of controls mouse clicks on a shape or other diagram element hovering a cursor over a particular portion of the diagram or diagram consumption user interface as well as any keyboard input.

Referring now to additional details will be provided regarding the embodiments presented herein for creating publishing refreshing and consuming a data linked diagram. In particular is a flow diagram showing a routine that illustrates aspects of the operation of the publishing client computer for publishing a drawing to the server computer aspects of the operation of the server computer for refreshing the published diagram and aspects of consuming the rendered diagram according to one embodiment. It should be appreciated that the logical operations described herein are implemented 1 as a sequence of computer implemented acts or program modules running on a computing system and or 2 as interconnected machine logic circuits or circuit modules within the computing system.

The implementation is a matter of choice dependent on the performance and other requirements of the computing system. Accordingly the logical operations described herein are referred to variously as states operations structural devices acts or modules. These operations structural devices acts and modules may be implemented in software in firmware in special purpose digital logic and any combination thereof. It should also be appreciated that more or fewer operations may be performed than shown in the figures and described herein. These operations may also be performed in a different order than those described herein.

The routine begins at operation where the drawing program is utilized to create a diagram that includes data bound elements that have attributes bound to external data or that includes attributes that are defined by a transformation equation that references external data. From operation the routine continues to operation where the drawing program generates the server diagram definition . The drawing program publishes the diagram to the server computer at operation to create the published diagram . As discussed above the published diagram includes the vector representation of the diagram as defined by the server diagram definition . In one implementation the diagram may also be published to the server computer in a native format along with the published diagram .

The routine continues from operation to operation where a determination is made as to whether a request to view the published diagram has been received. As discussed above when the server computer receives the published diagram the published diagram is stored in an appropriate mass storage device. The server computer may then receive and respond to requests to view the published diagram such as from the Web browser . The Web server application receives and responds to such requests by executing the various software components described herein. If a new request is received to view the published diagram the routine continues from operation to operation .

At operation the update engine parses the server diagram definition and stores the element definitions. For each data bound element at operation the update engine queries external data sources for the updated external data values. From operation the routine continues to operation where the update engine recalculates the transformation equations and updates the corresponding attributes of the data bound elements . The routine continues to operation where a determination is made as to the format in which the diagram was requested by the Web browser . If a Web raster format was requested then the routine continues to operations and where the update engine interprets the server diagram definition as a Web raster format and returns a raster image file to the Web browser . From operation the routine continues to operation and continues as described below.

However if at operation it is determined that the diagram was requested in a Web vector format then the routine continues to operations and where the update engine interprets the server diagram definition as a Web vector format and returns a vector image file to the Web browser . From operation the routine continues to operation where the rendered diagram is displayed for the end user by the Web browser . The routine continues from operation to operation where the client API is exposed for extracting external data underlying a data bound element and making any desired annotations to the diagram. It should be appreciated that one or more client APIs may be utilized to expose methods for extracting external data annotating the diagram as well as for performing other operations. It should also be appreciated that the client API may extract data through any suitable means including but not limited to surfacing the data or requesting a refresh of the diagram in order to obtain the data.

From operation the routine continues to operation where a determination is made as to whether an exploratory action has been requested by the user. As discussed above a Web part is one method that may be utilized to provide a diagram consumption user interface . The interface includes a number of controls allowing a user to navigate between diagram pages pan zoom follow hyperlinks and view external data . If an exploratory action request has not been received then the routine proceeds from operation to operation and continues as described below. However if an exploratory action request is received then the routine continues from operation to operation where the requested action is performed.

The routine continues from operation to operation where a determination as to whether a data extraction or annotation call has been received. As previously discussed the client API provides a method for extracting the external data corresponding to the data bound elements and annotating the diagram. If a data extraction or annotation call has not been received then the routine proceeds to operation and continues as described below. However if a data extraction or annotation request has been received then the routine continues to operation where a call is made to the method exposed by the client API for extracting the external data or annotating the diagram and the extracted data or annotation is provided and displayed. From operation the routine continues to operation where a determination is made as to whether the diagram consumption has been completed. The diagram consumption by the end user may be determined to be complete if the Web page is closed or if the Web browser is closed. If diagram consumption is complete then the routine continues to operation and ends. However if no attempt to close the Web browser or the Web page or otherwise cease diagram consumption then the routine returns to operation and continues as described above.

The computer architecture shown in includes a central processing unit CPU a system memory including a random access memory RAM and a read only memory ROM and a system bus that couples the memory to the CPU . A basic input output system containing the basic routines that help to transfer information between elements within the computer such as during startup is stored in the ROM . The computer further includes a mass storage device for storing an operating system application programs and other program modules which are described in greater detail herein.

The mass storage device is connected to the CPU through a mass storage controller not shown connected to the bus . The mass storage device and its associated computer readable media provide non volatile storage for the computer . Although the description of computer readable media contained herein refers to a mass storage device such as a hard disk or CD ROM drive it should be appreciated by those skilled in the art that computer readable media can be any available computer storage media that can be accessed by the computer .

By way of example and not limitation computer readable media may include volatile and non volatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. For example computer readable media includes but is not limited to RAM ROM EPROM EEPROM flash memory or other solid state memory technology CD ROM digital versatile disks DVD HD DVD BLU RAY or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can be accessed by the computer .

According to various embodiments the computer operates in a networked environment using logical connections to remote computers through a network such as the network . The computer may connect to the network through a network interface unit connected to the bus . It should be appreciated that the network interface unit may also be utilized to connect to other types of networks and remote computer systems. The computer may also include an input output controller for receiving and processing input from a number of other devices including a keyboard mouse or electronic stylus not shown in . Similarly an input output controller may provide output to a display screen a printer or other type of output device also not shown in .

As mentioned briefly above a number of program modules and data files may be stored in the mass storage device and RAM of the computer including an operating system suitable for controlling the operation of a networked desktop laptop or server computer. The mass storage device and RAM may also store one or more program modules. In particular the mass storage device and the RAM may store the drawing program the Web browser and the update engine each of which was described in detail above with respect to . The mass storage device and the RAM may also store other types of program modules.

Based on the foregoing it should be appreciated that technologies for Web based visualization refresh and consumption are provided herein. Although the subject matter presented herein has been described in language specific to computer structural features methodological acts and computer readable media it is to be understood that the invention defined in the appended claims is not necessarily limited to the specific features acts or media described herein. Rather the specific features acts and mediums are disclosed as example forms of implementing the claims.

The subject matter described above is provided by way of illustration only and should not be construed as limiting. Various modifications and changes may be made to the subject matter described herein without following the example embodiments and applications illustrated and described and without departing from the true spirit and scope of the present invention which is set forth in the following claims.

