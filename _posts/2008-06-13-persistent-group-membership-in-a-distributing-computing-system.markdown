---

title: Persistent group membership in a distributing computing system
abstract: A distributed system has a multiplicity of nodes. A group of the nodes subscribe to a group services process. The group is subject to dissolving. A list of persistent subscribers to the group is maintained. Subscriptions to members and states of the group that are persistent subscribers do not terminate in response to the group being dissolved. The persistent subscribers automatically receive a notice in response to the group being reestablished and do not need to re-subscribe to the group.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07953837&OS=07953837&RS=07953837
owner: International Business Machines Corporation
number: 07953837
owner_city: Armonk
owner_country: US
publication_date: 20080613
---
This application is based upon and claims priority from prior U.S. patent application Ser. No. 10 741 363 filed on Dec. 19 2003 now U.S. Pat. No. 7 395 327 the entire disclosure of which is herein incorporated by reference in its entirety.

This invention relates in general to the application of distributed computing system environments and in particular to memberships and states of one or more groups in the system.

The present invention is generally directed to the monitoring of memberships and the states of one group or groups in a single system or a cluster system or cluster systems such as in a multi node computer system and its application to a number of such environments including its application to Group Services.

A group is an abstract collection of the specific entities like network adapters cluster nodes or distributed application processes in a clustered system. For example an Ethernet adapter group represents a set of all Ethernet adapters in a cluster and a cluster aware application X may consist of a set of processes of the application X in a cluster.

The membership of the group refers to a set of each element in a group. A membership of an Ethernet adapter group may be a list of IP addresses that are in the cluster. Typically an active or current membership refers to the members that are active in a cluster e.g. UP reachable etc . In other words if a member is in the active membership it is considered as working active reachable or detectable in the cluster. If not the member is considered as down inactive unreachable or undetectable. The state can be anything specified by the applications.

Many cluster aware applications subscribe and monitor the several memberships without joining them and decide the next action based on the membership changes or state changes. For example an application subscribes a network adapter group to monitor the network connectivity. If an adapter is up or down the application reacts to it.

However in some cases if there is no member in the group the application has to keep trying to subscribe the group periodically because subscribing to the empty group would fail with the Group Services system.

This periodical re subscription exposes a serious drawback in performance especially when the system software needs to use the system resource. Furthermore if an existing group is dissolved the application s subscription is also dissolved the application may need to re subscribe to the group. This adds software logic complexity.

Thus what is needed is an improved system and method that eliminates the need to re subscribe to a group after a group member becomes inactive or after the group is dissolved. Furthermore the improved system and method should be compatible with existing group membership systems.

Additional features and advantages are realized through the techniques of the present invention. Other embodiments and aspects of the invention are described in detail herein and are considered a part of the claimed invention.

In accordance with the present invention a system and method for persistent subscription of membership in one or more groups and states for a single system or a cluster system or cluster systems is provided. The method provides a way to subscribe a group membership and states persistently. If a client subscribes to a group which does not exist its subscription will still be valid. The client will be notified that group does not exist. Later when the group is established the system will send a notification to the client to notify the client of the membership and state changes. If a group in which a client subscribed is dissolved the subscriber will be notified that the group is dissolved but the subscription will not be dissolved. The subscription is still valid and later when the group is established again the system will send a notification to the subscriber to notify the subscriber that the group is established the membership state and any other changes.

This invention advantageously prevents the need to check the continuous existence of the group or groups and provides persistent subscribing or monitoring the memberships and states of a group or groups. Dissolution of the monitoring can occur after subscribed group is dissolved. Furthermore it simplifies the writing of application programs.

Group Services is a system wide service that provides a facility for coordinating managing and monitoring changes to a subsystem running on one or more processors of a distributed computing environment. A more detailed description of Group Services may be included in U.S. Pat. No. 6 216 150 to Badovinatz et al. which is hereby incorporated by reference. Group Services provides an integrated framework for designing and implementing fault tolerant subsystems and for providing consistent recovery of multiple subsystems. Group Services offers a simple programming model based on a small number of core concepts. These concepts include in accordance with the principles of the present invention a cluster wide process group membership and synchronization service that maintains application specific information with each process group.

As described above in one example the mechanisms of the present invention are included in a Group Services facility. However the mechanisms of the present invention can be used in or with various other facilities and thus Group Services is only one example. The use of the term Group Services to include the techniques of the present invention is for convenience only.

In one embodiment the mechanisms of the present invention are incorporated and used in a distributed computing environment such as the one depicted in . In one example distributed computing environment includes for instance a plurality of frames coupled to one another via a plurality of LAN gates . Frames and LAN gates are described in detail below.

In one example distributed computing environment includes eight 8 frames each of which includes a plurality of processing nodes . In one instance each frame includes sixteen 16 processing nodes a.k.a processors . Each processing node is for instance a RISC 6000 computer running AIX a UNIX based operating system. Each processing node within a frame is coupled to the other processing nodes of the frame via for example an internal LAN connection. Additionally each frame is coupled to the other frames via LAN gates .

As examples each LAN gate includes either a RISC 6000 computer any computer network connection to the LAN or a network router. However these are only examples. It will be apparent to those skilled in the relevant art that there are other types of LAN gates and that other mechanisms can also be used to couple the frames to one another.

In addition to the above the distributed computing environment of is only one example. It is possible to have more or less than eight frames or more or less than sixteen nodes per frame. Further the processing nodes do not have to be RISC 6000 computers running AIX. Some or all of the processing nodes can include different types of computers and or different operating systems. All of these variations are considered a part of the claimed invention.

In one embodiment a Group Services subsystem incorporating the mechanisms of the present invention is distributed across a plurality of the processing nodes of distributed computing environment . In particular in one example a Group Services daemon is located within one or more of processing nodes . The Group Services daemons are collectively referred to as Group Services.

Group Services facilitates for instance communication and synchronization between multiple processes of a process group and can be used in a variety of situations including for example providing a distributed recovery synchronization mechanism. A process desirous of using the facilities of Group Services is coupled to a Group Services daemon . In particular the process is coupled to Group Services by linking at least a part of the code associated with Group Services e.g. the library code into its own code. In accordance with the principles of the present invention this linkage enables the process to use the mechanisms of the present invention as described in detail below.

In one embodiment a process uses the mechanisms of the present invention via an application programming interface . In particular the application programming interface provides an interface for the process to use the mechanisms of the present invention which are included in Group Services as one example. In one embodiment Group Services includes an internal layer and an external layer each of which is described in detail below.

In accordance with the principles of the present invention internal layer provides a limited set of functions for external layer . The limited set of functions of the internal layer can be used to build a richer and broader set of functions which are implemented by the external layer and exported to the processes via the application programming interface. The internal layer of Group Services also referred to as a metagroup layer is concerned with the Group Services daemons and not the processes i.e. the client processes coupled to the daemons. That is the internal layer focuses its efforts on the processors which include the daemons. In one example there is only one Group Services daemon on a processing node however a subset or all of the processing nodes within the distributed computing environment can include Group Services daemons.

The internal layer of Group Services implements functions on a per processor group basis. There may be a plurality of processor groups in the network. Each processor group also referred to as a metagroup includes one or more processors having a Group Services daemon executing thereon. The processors of a particular group are related in that they are executing related processes. In one example processes that are related provide a common function. For example referring to a Processor Group X includes Processing Node and Processing Node since each of these nodes is executing a process X but it does not include Processing Node . Thus Processing Nodes and are members of Processor Group X. A processing node can be a member of none or any number of processor groups and processor groups can have one or more members in common.

In order to become a member of a processor group a processor needs to request to be a member of that group. In accordance with the principles of the present invention a processor requests to become a member of a particular processor group e.g. Processor Group X when a process related to that group e.g. Process X requests to join a corresponding process group e.g. Process Group X and the processor is not aware of that corresponding process group. Since the Group Services daemon on the processor handling the request to join a particular process group is not aware of the process group it knows that it is not a member of the corresponding processor group. Thus the processor asks to become a member so that the process can become a member of the process group. One technique for becoming a member of a processor group is described in detail further below. Internal layer implements a number of functions on a per processor group basis. These functions include for example maintenance of group leaders insert multicast leave and fail each of which is described in detail below.

In accordance with the principles of the present invention a group leader is selected for each processor group of the network. In one example the group leader is the first processor requesting to join a particular group. As described herein the group leader is responsible for controlling activities associated with its processor group s . For example if a processing node Node is the first node to request to join Processor Group X then Processing Node is the group leader and is responsible for managing the activities of Processor Group X. It is possible for Processing Node to be the group leader of multiple processor groups.

If the group leader is removed from the processor group for any reason including for instance the processor requests to leave the group the processor fails or the Group Services daemon on the processor fails then group leader recovery takes place. In particular a new group leader is selected STEP SELECT NEW GROUP LEADER .

In one example in order to select a new group leader a membership list for the processor group which is ordered in sequence of processors joining the group is scanned by one or more processors of the group for the next processor in the list STEP OBTAIN NEXT MEMBER IN MEMBERSHIP LIST. Thereafter a determination is made as to whether the processor obtained from the list is active INQUIRY IS MEMBER ACTIVE In one embodiment this is determined by another subsystem distributed across the processing nodes of the distributed computing environment. The subsystem sends a signal to at least the nodes in the membership list and if there is no response from a particular node it assumes the node is inactive.

If the selected processor is not active then the membership list is scanned again until an active member is located. When an active processor is obtained from the list then this processor is the new group leader for the processor group STEP SELECTED MEMBER IS NEW GROUP LEADER. 

Thus Processor is the initial group leader see . At some time later Processor leaves Processor Group X and therefore a new group leader is desired. According to the membership list for Processor Group X Processor is the next group leader. However if Processor is inactive then Processor would be chosen to be the new group leader .

In accordance with the principles of the present invention in one example the membership list is stored in memory of each of the processing nodes of the processor group. Thus in the above example Processor Processor and Processor would all contain a copy of the membership list. In particular each processor to join the group receives a copy of the membership list from the current group leader. In another example each processor to join the group receives the membership list from another member of the group other than the current group leader.

Referring back to in one embodiment of the invention once the new group leader is selected the new group leader informs a name server that it is the new group leader STEP INFORM NAME SERVER. As one example a name server is one of the processing nodes within the distributed computing environment designated to be the name server. The name server serves as a central location for storing certain information including for instance a list of all of the processor groups of the network and a list of the current group leaders for all of the processor groups. This information is stored in the memory of the name server processing node. The name server can be a processing node within the processor group or a processing node independent of the processor group.

In one example name server is informed of the group leader change via a message sent from the Group Services daemon of the new group leader to the name server. Thereafter the name server then informs the other processors of the group of the new group leader via for example an atomic multicast STEP INFORM OTHER MEMBERS OF THE GROUP . Multicasting is similar in function to broadcasting however in multicasting the message is directed to a selected group instead of being provided to all processors of a system. In one example multicasting can be performed by providing software that takes the message and the list of intended recipients and performs point to point messaging to each intended recipient using for example a User Datagram Protocol UDP or a Transmission Control Protocol TCP . In another embodiment the message and list of intended recipients are passed to the underlying hardware communications such as Ethernet which will provide the multicasting function. In another embodiment of the invention a member of the group other than the new group leader informs the name server of the identity of the new group leader. As a further example the processors of the group are not explicitly informed of the new group leader since each processor in the processor group has the membership list and has determined for itself the new group leader.

In yet another embodiment of the invention when a new group leader is needed a request is sent to the name server requesting from the name server the identity of the new group leader STEP REQUEST NEW GROUP LEADER FROM NAME SERVER . In this embodiment the membership list is also located at the name server and the name server goes through the same steps described above for determining the new group leader STEPS and . Once it is determined the name server informs the other processors of the processor group of the new group leader STEP INFORM OTHER MEMBERS OF THE GROUP. In addition to the group leader maintenance function implemented by the internal or metagroup layer an insert function is also implemented. The insert function is used when a Group Services daemon i.e. a processor executing the Group Services daemon wishes to join a particular group of processors. As described above a processor requests to be added to a particular processor group when a process executing on the processor wishes to join a process group and the processor is unaware of the process group.

In one example in order to become a member of a processor group the processor wishing to join the group first determines who is the group leader of the processor group STEP DETERMINE GROUP LEADER . In one embodiment the group leader is determined by providing name server with the name of the processor group and requesting from the name server the identity of the group leader for that group.

Should the name server respond that the requesting processor is the group leader since this is the first request for the group INQUIRY the requesting processor forms the processor group STEP FORM GROUP. In particular it creates a membership list for that particular processor group which includes the requesting processor.

If the processor is not the group leader then it sends an insert request via a message to the group leader the identity of which is obtained from the name server STEP SEND INSERT REQUEST TO GROUP LEADER. The group leader then adds the requesting processor to the processor group STEP GROUP LEADER INSERTS PROCESSOR IN PROCESSOR GROUP. In particular in one embodiment the Group Services daemon of the group leader updates its membership list and informs via a multicast each other Group Services daemon of the processor group to add the joining processor to the membership list located at that processor. In particular as one example the group leader informs the other daemons via a multicast of the update the daemons acknowledge the update and then the group leader sends out a commit for the change via another multicast. In another embodiment the informing can be performed via an atomic multicast. In one example the joining processor is added to the end of the membership list since the list is maintained by order of joins to the group.

In accordance with the principles of the present invention a processor that is a member of a processor group may request to leave the group. Similar to the insert request a leave request is forwarded to the group leader via for instance a message STEP SEND LEAVE REQUEST TO GROUP LEADER . Thereafter the group leader removes the processor from the group by for example deleting the processor from its membership list and informing all members of the processor group to also remove the processor from their membership list STEP GROUP LEADER REMOVES PROCESSOR FROM GROUP. Additionally if the leaving processor is the group leader then group leader recovery takes place as described above.

In addition to the above if a processor fails or if the Group Services daemon executing on the processor fails the processor is removed from the processor group. In one embodiment when the Group Services daemon fails it is assumed that the processor fails. In one example a failed processor is detected by a subsystem running within the distributed computing environment that detects processor failure. When there is a failure in one instance the processor is removed by the group leader. In particular the group leader deletes the processor from its membership list and informs the other member processors to do the same as described above.

In accordance with the principles of the present invention the single unified framework is provided to members of process groups as described in detail herein. A process group includes one or more related processes executing on one or more processing nodes of the distributed computing environment. For example referring to a Process Group X includes a Process X executing on Processor and two Process X s executing on Processor . The manner in which a process becomes a member of a particular process group is described in detail further below.

Process groups can have at least two types of members including a provider and a subscriber. A provider is a member process that has certain privileges such as voting rights and a subscriber has no such privileges. A subscriber can merely watch the on goings of a process group but cannot participate in the group. For example a subscriber can monitor the membership of a group as well as the state value of the group but it cannot vote. In other embodiments other types of members with differing rights can be provided.

In accordance with the principles of the present invention the above described protocol is also integrated with process group membership and process group state values. In particular the mechanisms of the present invention are used to manage and monitor membership and states changes to the process groups. Changes to group membership are proposed via the protocol described above. Additionally the mechanisms of the present invention mediate changes to the group state value and guarantee that it remains consistent and reliable as long as at least one process group member remains.

Persistence in the Group Services eliminates re subscriptions to a group after a group member becomes inactive or after the group is dissolved. The present invention distinguishes subscriber type as a non persistent subscriber or a persistent subscriber.

For a non persistent subscriber the subscription will be processed as the aforementioned subscription protocol. If the subscribed group does not exist when the subscription protocol is called the subscriber will receive an error message which indicates the group does not exist and the subscription is failed.

For a persistent subscriber the subscription will be processed as the following. If the subscribed group does not exist the subscriber will receive a notification which indicates that the group does not exist and the number of the members of the group is zero. The subscriber identification and subscription protocol information is saved. A new entry will be created in name server. Later when the group is established by other protocol which makes the numbers of the members of the group is non zero then a notification will be sent to the persistent subscriber to give the information about the membership and state of the group.

When a subscribed group is dissolved or the numbers of the members of the subscribed group is zero a persistent subscriber will receive a notification which indicates that the group is dissolved and the numbers of the members of the group is zero. But the subscription will not be dissolved the subscriber s identification and the subscription information will be kept as before. While for a non persistent subscriber the subscription will be dissolved and the non persistent subscriber will need to re subscribe after the group is reformed.

During Group Services the operation of the system is as previously described. However upon the processing group dissolving the operation is enhanced by the Persistent Subscription operation. shows that upon reestablishing Group Services for Processing Group a Reestablishment Notice is sent to Processors and by the Name Server because those processors are included in the Persistent Subscriber Node List. Thus Processors and need not re subscribe to the Processing Group. However the subscription of any non persistent subscriber Processor does not exist and no notification is sent indicative of the group being reestablished.

Note that Persistent Subscribers Processors and of and have the advantage of not being required to re subscribe to Group Services when the group is reestablished. This reduces software logic complexity. Further the need to periodically re subscribe is eliminated thereby enhancing performance of the system software.

The present invention can be realized in hardware software or a combination of hardware and software in client computers. A system according to a preferred embodiment of the present invention can be realized in a centralized fashion in one computer system or in a distributed fashion where different elements are spread across several interconnected computer systems. Any kind of computer system or other apparatus adapted for carrying out the methods described herein is suited. A typical combination of hardware and software could be a general purpose computer system with a computer program that when being loaded and executed controls the computer system such that it carries out the methods described herein.

An embodiment of the present invention can also be embedded in a computer program product which comprises all the features enabling the implementation of the methods described herein and which when loaded in a computer system is able to carry out these methods. Computer program means or computer program as used in the present invention indicates any expression in any language code or notation of a set of instructions intended to cause a system having an information processing capability to perform a particular function either directly or after either or both of the following a conversion to another language code or notation and b reproduction in a different material form.

A computer system may include inter alia one or more computers and at least a computer readable medium allowing a computer system to read data instructions messages or message packets and other computer readable information from the computer readable medium. The computer readable medium may include non volatile memory such as ROM Flash memory Disk drive memory CD ROM and other permanent storage. Additionally a computer readable medium may include for example volatile storage such as RAM buffers cache memory and network circuits. Furthermore the computer readable medium may comprise computer readable information in a transitory state medium such as a network link and or a network interface including a wired network or a wireless network that allow a computer system to read such computer readable information.

