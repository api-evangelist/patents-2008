---

title: Structure for multi-threaded processing
abstract: A design structure embodied in a machine readable storage medium designing, manufacturing, and/or testing a design that includes a multi-threaded processor that executes an instruction of a process of an executing program is provided. The multi-threaded processor includes at least a first and a second thread. First and second sets of source registers are respectively allocated to the first and second threads, and first and second sets of destination registers are respectively allocated to the first and second threads. A resource prefix configuration register includes mappings between each of the source and destination registers and the threads. The multi-threaded processor, during execution of the instruction by one of the first or the second threads of execution, accesses the source and destination registers based on the mapping, wherein at least one of the accessed registers is allocated to the other of the first or the second thread of execution.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08250345&OS=08250345&RS=08250345
owner: International Business Machines Corporation
number: 08250345
owner_city: Armonk
owner_country: US
publication_date: 20080428
---
This application is a continuation in part of co pending U.S. patent application Ser. No. 11 863 452 filed Sep. 28 2007 which is herein incorporated by reference.

The following generally relates to design structures and more specifically design structures for multithreaded processing and more particularly for using thread resources of an inactive thread in addition to the thread resources of an active thread when executing an instruction with the active thread of the multithreaded processor.

With a multi threaded processor multiple threads of execution exist within the context of each process. The threads of a particular process are executed in a manner in which the processor quickly switches between different threads such that it appears that threads are being simultaneously executed. A simple type of multi threading is where one thread runs until an event such as a cache miss that has to access off chip memory which might create a long latency. Rather than waiting the processor switches to another thread that is ready to run. When the data for the previous thread arrives the previous thread is placed back on the list of ready to run threads. In another type of multi threading the processor switches threads every CPU cycle.

Each process is allocated resources such as registers by the operating system and such resources are allocated to the process threads such that each thread owns its own resources which are used when a thread is employed to execute an instruction. When a process is created it is stored in main memory. Once the kernel assigns the process to a processor the process is loaded into the processor and the processor executes the process s instructions using its resources.

A thread arbiter and or thread priority determines which thread of execution to use to execute an instruction and a thread identifier ID is associated with and follows the instruction through its various states of execution. The instruction is executed using the resources such as the registers of the thread that corresponds to the thread ID. When switching threads the thread arbiter or thread priority determines the next thread to employ and a thread ID of the next thread is associated with and follows the next instruction through its various states of execution. Likewise the instruction is executed using the resources of the thread that corresponds to the thread ID of the next thread.

In one aspect a system includes a multi threaded processor that executes an instruction of a process of an executing program. The multi threaded processor includes at least a first thread of execution and a second thread of execution. The system further includes a plurality of source and destination registers wherein a first set of the source registers is allocated to the first thread of execution a second set of the source registers is allocated to the second thread of execution a first set of the destination registers is allocated to the first thread of execution and a second set of the destination registers is allocated to the second thread of execution. The system further includes a resource prefix configuration register that includes mapping between each of the source and destination registers and the threads of execution. The multi threaded processor during execution of the instruction by one of the first or the second threads of execution accesses the source and destination registers based on the mapping wherein at least one of the accessed registers is allocated to the other of the first or the second thread of execution.

In another aspect a multi threading method includes using a first of a plurality of threads of a processor to execute an instruction of a process providing a first mapping between a source register identified in the instruction and a second of the plurality of threads reading an operand from the register identified in the instruction in the second of the plurality of threads and performing an operation identified in the instruction on the operand.

In another aspect a multi threaded processor includes at least two threads of execution wherein the multi threaded processor uses one of the at least two threads of execution to execute an instruction of a process and the one of the at least two threads of execution utilizes resources allocated to the one of the at least two threads of execution and utilizes resources allocated to the other of the at least two threads of execution to execute the instruction.

In yet another aspect a design structure embodied in a machine readable storage medium for at least one of designing manufacturing and testing a design is provided. The design structure generally includes a system that includes a multi threaded processor that executes an instruction of a process of an executing program wherein the multi threaded processor includes at least a first thread of execution and a second thread of execution a plurality of source registers wherein a first set of the source registers are allocated to the first thread of execution and a second set of the source registers are allocated to the second thread of execution a plurality of destination registers wherein a first set of the destination registers are allocated to the first thread of execution and a second set of the destination registers are allocated to the second thread of execution and a resource prefix configuration register that includes a first mapping between each of the source registers in the first and second sets of the source registers and one of the at least two threads of execution and a second mapping between each of the destination registers in the first and second sets of destination registers and one of the at least two threads of execution wherein the multi threaded processor during execution of the instruction by one of the first or the second threads of execution accesses source and destination registers respectively based on the first and second mappings and wherein at least one of the accessed registers is allocated to the other of the first or the second thread of execution.

In yet another aspect a design structure embodied in a machine readable storage medium for at least one of designing manufacturing and testing a design is provided. The design structure generally includes a multi threaded processor that includes at least two threads of execution wherein the multi threaded processor uses one of the at least two threads of execution to execute an instruction of a process and the one of the at least two threads of execution utilizes resources allocated to the one of the at least two threads of execution and utilizes resources allocated to the other of the at least two threads of execution to execute the instruction.

The drawings are merely representations and are not intended to portray specific elements. The drawings are intended for explanatory purposes and should not be considered as limiting scope.

The illustrated processor includes N threads of execution thread  thread  thread N. The processor may use one or more of the threads of execution when executing an instruction. For instance the processor may be run in single thread mode in which only one of the N threads is active. In another instance the processor may be run in multi thread mode in which two to N threads are active. As discussed in greater detail below active threads can use their respective resources as well as the resources of inactive threads when executing an instruction. In one instance this allows access to the resources of the threads in a non orthogonal fashion and may increase the number of registers available to an active thread.

For each process the operating system allocates resources which include but are not limited to various registers file handles security attributes processor state etc. Such resources are shared across the threads of a process. As shown the resources include multiple registers wherein a first set of registers has been allocated to the thread  a second set of registers has been allocated to the thread  and an Mth set of registers has been allocated to the thread N.

As will be appreciated the registers may include one or more of general purpose registers GPR s floating point registers FPR s special purpose registers SPR etc. In addition the number of the registers and the number of bytes in each of the registers may vary. For example in one instance at least one of the sets of registers . . . includes thirty two 64 bit registers. Moreover the registers may be physical registers or copies of registers.

A storage component which may include or be part of main memory stores information such as one or more created processes for an executing program program code data as well as other computer readable information.

A process scheduler schedules the one or more processes for execution by the processor . As shown in this example the process scheduler has scheduled a process for execution and as such the process is loaded into the processor . As noted above when multiple processors are available the kernel first determines which processor will handle the process and then the process is loaded to the respective processor.

A resource prefix configuration register RPCR which may be a single register as shown or a set of registers provides a mapping between the register s in an instruction and one or more of the threads of execution . Such a mapping is used to prepend a thread ID to the resource specified by a given opcode field in an instruction. Using such a mapping a thread can use its resources and or the resources of one or more inactive threads when executing the instruction. As such the total number of registers available to an active thread may be increased.

It is to be appreciated that this mapping may override the single thread ID that is typically generated in a system that does not employ the RPCR . For example a thread arbiter may be used to determine which thread is used by the processor when the processor executes an instruction. As shown the thread arbiter may use a thread priority to facilitate identifying the thread to be employed by the processor for a particular instruction. The system can be configured so that the mapping provided by the RCPR selectively overrides the arbiter .

An application programming interface API provides an interface that allows a user to define the mapping in the RCPR . It is to be appreciated that the complier may alternatively be used to define the mapping.

In operation once the kernel has identified the processor and the process is loaded in the processor the processor executes the process instructions. This includes fetching an instruction of the process and decoding the instruction. Generally such an instruction may include the operation to be performed and if any the source register of the operand s to be operated on and or the destination register for the result. The operation may include for example an arithmetic operation data copying operation a logical operation a program control operation etc. The processor then executes the decoded instruction.

As can be appreciated in some instances executing the instruction may include reading data from one or more registers operating on the data and or writing the results of the operation to one or more registers. In such instances the processor utilizes the mapping from the RCPR to determine which thread and which thread register to read from and or write to.

By way of example the process may include the following instruction XOR RA RS RB wherein XOR represents the exclusive OR logical operation RA represents the destination or result general purpose register and RS and RB represent the source or operand general purpose registers. Execution of this instruction includes retrieving the operands from the RS and RB registers XORing them together and storing the result in the RA register. With reference to the example mapping in and the above example instruction a possible mapping for the instruction is depicted in Table 1 below.

With this mapping the general purpose source registers RS and RB are mapped to thread  Thread ID 00 and the general purpose destination register RA is mapped to thread  Thread ID 01 . As such the instruction will result in reading the operands from the general purpose source registers RS and RB of thread  Thread ID 00 performing the XOR operation with the operands and writing the result of the XOR operation to the general purpose destination register RA of thread  Thread ID 01 . It is to be appreciated that the above is only an example. In another implementation the source registers RS and RB may be from different threads one of the source registers RS or RB may be from the same thread as the destination register RA etc. Of course other instructions are also contemplated herein.

In the above example the general purpose registers RS RA and RB are utilized. With other instructions other general purpose registers such as RT floating point registers such as FRT FRA FRB FRC etc. and or special purpose registers such as SPR may additionally or alternatively be used.

When operating in single thread mode the processor executes the instruction via one thread e.g. thread  which reads and or writes to the registers of one or more of the threads including its registers and or one or more of the registers of one or more of the inactive threads thread  . . . thread N. In this mode the processor is provided with a copy of and or access to the mapping in the RCPR . As noted above in one example each thread has thirty two 32 64 bit registers. By overloading the thread ID using the mapping the active thread of a two threaded processor may use up to sixty four 64 registers the active thread of a four threaded processor may use up to one hundred and twenty eight 128 registers.

In multi thread mode each active thread includes a copy of and or has access to the mapping in the RCPR . For example assume that the processor includes four N 4 threads of operation thread  thread  thread  and thread . Also assume that only two 2 of the threads thread  and thread  are active and that thread  uses the resources of thread  thread  and thread  and that thread  only uses the resources of thread . Both of the active threads thread  and thread  would be provided with a copy of and or access to the mapping in the RCPR . Such information can be used by the software and or hardware to mitigate attempts by thread  to access the resources used by thread  the resources of thread  and attempts by thread  to access the resources used by thread  the resources of thread  thread  and thread  .

In another example active thread  only uses the resources of inactive thread  and active thread  only uses the resources of inactive thread . In this instance both of the active threads thread  and thread  would be provided with a copy of and or access to the mapping in the RCPR . Such mapping may be used when one or more of the resources of thread  and thread  are corrupt. Various other permutations are also contemplated herein.

At reference numeral a process is created for example for an executing program. At the process is loaded in the processor. As noted above with a multiprocessor system the kernel first selects the processor that will execute the process. At the processor fetches an instruction of the process. The schedule processor or other technique may be used to determine process ordering. At the processor decodes the instruction including determining any operations source registers and or destination registers. At the processor utilizes a mapping between the source registers and the threads of execution to identify which of the threads to read from to obtain an operand s .

At the processor reads the operand s from the source register s of the identified thread s . At the processor performs the operation on the operand s . At the processor utilizes a mapping between the destination registers and the threads of execution to identify which thread s register to write the result. At the processor writes the result in the identified register of the identified thread. The processor the fetches the next instruction for example as determined by the process scheduler if any and repeats through . Otherwise a next process if any is loaded in the processor.

Referring now to an exemplary computer system in which the system can be utilized with is illustrated. As shown the computer system includes the multithreaded processor CPU memory a bus and input output I O interfaces . The memory includes the RCPR or a copy of the RCPR the processes the data the program code and the process resources including the registers .

Further the computer system is shown in communication with external devices and an external storage system . The external devices can comprise any devices e.g. keyboard pointing device display etc. that enable a user to interact with computer system and or any devices e.g. network card modem etc. that enable computer system to communicate with one or more other computing devices. The external storage system includes memory such as a hard disk a floppy disk portable memory etc.

In general the CPU executes instructions of processes. While executing such instructions the CPU can read and or write data to from the memory such as to from the registers of the process resources . As discussed above different sets of the registers allocated to a process are allocated to each of the threads of the CPU . The CPU accesses the RCPR or the copy of the RCPR to obtain a mapping between the registers identified in the instruction and the different threads of execution. The mapping provides an override that allows a thread of execution executing an instruction to use the resources including the registers of inactive threads of execution along with its own resources to facilitate execution of the instruction.

Design process may include using a variety of inputs for example inputs from library elements which may house a set of commonly used elements circuits and devices including models layouts and symbolic representations for a given manufacturing technology e.g. different technology nodes 32 nm 45 nm 90 nm etc. design specifications characterization data verification data design rules and test data files which may include test patterns and other testing information . Design process may further include for example standard circuit design processes such as timing analysis verification design rule checking place and route operations etc. One of ordinary skill in the art of integrated circuit design can appreciate the extent of possible electronic design automation tools and applications used in design process without deviating from the scope and spirit of the invention. The design structure of the invention is not limited to any specific design flow.

Design process preferably translates a circuit as described above and shown in along with any additional integrated circuit design or data if applicable into a second design structure . Design structure resides on a storage medium in a data format used for the exchange of layout data of integrated circuits e.g. information stored in a GDSII GDS2 GL1 OASIS or any other suitable format for storing such design structures . Design structure may comprise information such as for example test data files design content files manufacturing data layout parameters wires levels of metal vias shapes data for routing through the manufacturing line and any other data required by a semiconductor manufacturer to produce a circuit as described above and shown in . Design structure may then proceed to a stage where for example design structure proceeds to tape out is released to manufacturing is released to a mask house is sent to another design house is sent back to the customer etc.

The foregoing description of various aspects of the invention has been presented for purposes of illustration and description. It is not intended to be exhaustive or to limit the invention to the precise form disclosed and obviously many modifications and variations are possible. Such modifications and variations that may be apparent to a person skilled in the art are intended to be included within the scope of the invention as defined by the accompanying claims.

