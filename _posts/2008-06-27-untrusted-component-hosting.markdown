---

title: Untrusted component hosting
abstract: In a computing environment, one may wish to have interoperability between trusted and untrusted controls/plug-ins allowing for richer expression of content and control within a platform. This can be accomplished by allowing an untrusted plug-in to communicate with a trusted plug-in, while having the trusted plug-in exercise control over the platform. This allows for the creation of a layered secure approach of communication with a platform, thus allowing for increased application richness in untrusted third party applications.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08510753&OS=08510753&RS=08510753
owner: Microsoft Corporation
number: 08510753
owner_city: Redmond
owner_country: US
publication_date: 20080627
---
Controls and plug ins components may operate in a browser or other various software platforms allowing for the ease of add on functionality without adding additional source code to a secure program. These components are common within a browser environment when accessing the Internet. They provide a level of security but at a cost of limiting functionality and overall user experience.

This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key factors or essential features of the claimed subject matter nor is it intended to be used to limit the scope of the claimed subject matter.

In computing environments controls and plug ins are software applications that interact with a host application platform and user interface UI to provide extended use in the form of a specific function or action on demand. The benefits of this architecture may including allowing third party developers to extend additional functionality supporting future additions and separating source code from applications.

Some models of operation may impose significant limitations on such plug ins in order to promote platform security. For example vendors that wish to provide components that interoperate within a software environment in a secure manner may overlay their respective applications e.g. with no combined functionality between applications. Furthermore the software environment might not provide a communications pipeline between controls plug ins that are directed to the platform on which the software applications are contained without any interoperation therebetween. This architecture may have limitations with respect to the level of interoperability that can be achieved without incurring unwanted security risks to the computing environment or platform.

In one example a platform hosting a component control plug in could be a standard browser for the Internet in which the component could be instantiated through scripting language when providing an enriched user experience within the browser. The browser provides the component limited access to resources memory video rendering space user input and etc. within the confines of the browser application e.g. providing generalized security to the application and platform . The instantiation of more than one component within the browser is possible but the communication between the one or more components is not possible. The limiting nature e.g. sandbox nature of the browser runtime environment makes access to many hardware resources the lower software framework and networking capabilities contained within a computing device are inaccessible. While this restricted nature of the browser provides a level of security it also creates a level of inoperability.

In view of these considerations a security hierarchy may be devised that allows for the interoperability between various untrusted and trusted components with the platform such that extended use of a computing devices resources can be exhibited without submitting the device to undue security risks. A software framework and environment may be devised such that the access to a secure computing device platform for an untrusted device is created through a communication channel with a secure device that brokers a relationship with a secure platform. In essence essentially moving the computing device s resources up one hierarchy level of security and moving the untrusted device one level away and allowing the handshaking to form a secure channel allows for the interoperability sought for in this method and system.

As provided herein one or more methods and systems are disclosed that allow for interoperability of components wherein a platform is defined and or a trusted component e.g. a security layer is utilized. An untrusted component e.g. an unsecure layer creates a bond with the trusted component and the trusted component determines which platform the untrusted component is more suited to operate with e.g. according to prerequisite conditions of the platform . It will be appreciated that where a trusted component determines that no platform is suited for the untrusted component the trusted component may reject the untrusted component. Once the trusted component chooses a platform for the untrusted component the untrusted component utilizes the secure communication channel e.g. already established between the trusted component and the platform. Through this bond the untrusted component may perform an extended set of operations such as manipulation of the computing system s object hierarchy video rendering using hardware acceleration manipulation of the network stack more efficient use of hardware resources and the specificity of the platform with respect to the device its operating on. This promotes an increased user experience across the platform and maintains a higher level of security. In one instance with the instantiation of an untrusted component such as when a user visits a webpage a reference to the trusted component is made and the trusted component instantiates with the reference to the untrusted component and the platform. The first layer of the trusted component is drawn and then the proceeding layers of either the trusted and untrusted components are drawn with the final result allowing for the overlapping and transparency of one layer over the other. The benefits of this include maintain the functionality of user input of either layered item without loosing interactive of one plug in layer over the other and increasing user experience through the use of hardware acceleration not previously possible.

To the accomplishment of the foregoing and related ends the following description and annexed drawings set forth certain illustrative aspects and implementations. These are indicative of but a few of the various ways in which one or more aspects may be employed. Other aspects advantages and novel features of the disclosure will become apparent from the following detailed description when considered in conjunction with the annexed drawings.

The claimed subject matter is now described with reference to the drawings wherein like reference numerals are used to refer to like elements throughout. In the following description for purposes of explanation numerous specific details are set forth in order to provide a thorough understanding of the claimed subject matter. It may be evident however that the claimed subject matter may be practiced without these specific details. In other instances structures and devices are shown in block diagram form in order to facilitate describing the claimed subject matter.

A component control plug in is a computer program that interacts with a platform e.g. a host application to provide added functionality. The platform is a contained environment in which components are restricted to. The platform typically provides a set of resources to a component that are tightly controlled. For example a platform may be a virtual machine or a scripting language interpreter that provides a hosting environment for the component. Applications may support the addition of these components for many reasons. For example many applications have limitations when first developed that can later be extended to increase the functionality of the application. Often times third party developers create these extended functionalities. Sometimes components may be added to the application without undue change to the base application. This practice may for example save time and money when considering the quality analysis aspect of the application and the overall maintenance of an unadulterated source code for the platform. In another instance components may be added on an ad hoc basis such as when browsing the Internet or other related communication networks. This model of operation e.g. the component model allows for a more streamlined footprint of a platform for the majority of end users by creating a dynamic platform capable of being custom fit e.g. through the use of various components that change the operational functionality of the platform to the end user s preferences. Also legal issues could arise as to the boundaries of operation that an application can operate in without unduly treading on the property of another licensed application. It is preferable to have a modular functionality to provide for restrictive intellectual property boundaries to address these legal issues.

The component model provides modular functionality which may include email decoding keys security keys in browsers video encoders and decoders video interactive rendering in the browser browser applications and software upgrades etc. With the addition of these components the user experience UX becomes extended and personalized as a function of the components available and or selected.

An elevated degree of security is employed by defining clear boundaries between components and the platform that hosts the components. This restricts the problems manifested within the components to the platform such that they do not interfere with an operating system environment hosting the platform.

Under the current model of component security a component cannot reach out to access other advanced secured system resources that are used by other components that are running in the operating system environment. This is a major limitation in the ability of a component during utilization. For example video hardware acceleration is unavailable to components that run in many platforms such as GDI Quartz DirectX OpenGL and a web browser. This limits the UX by not allowing advance 3 D video techniques video rendering using graphical processor interfacing components and other hardware software support which is highly desired in the platform. Additionally components operating on the same platform are unable to communicate causing them to operate with complete unawareness of one another. Thus when a pointing device s focus is directed towards the UI of a component the component comes to the focus of the pointing device with complete disregard and unawareness of the other components. The current model takes several approaches to expand a components functionality and strengthen the relationship of the component with the platform. In one approach the component increased access to the resources of the operating system environment through the platform. One drawback of this approach is the increased security risks associated with this access. Another approach is to allow the component to add additional code directly to the base code of the platform and go through a recompilation process. The drawback of this approach is that it causes instability in the operating system environment and the new code may interact poorly with other lines of code or components added later.

In contrast to the aforementioned approaches the technique provided herein involves the abstraction of the security hierarchy of the component model one level. A relationship is brokered between an untrusted component and a trusted component which acts as the intercessor between an untrusted component and the platform hosting the components. The trusted component matches the untrusted component with the platform suitable for the untrusted component as a function of specifications and or limitations of the platform and or untrusted component. Once the untrusted component and the platform have been matched up the trusted component acts as an intermediary providing a secure means for running the untrusted component on the platform. By doing this system resources contained in the operating system environment are further away from the untrusted component that is hosted in the platform. Said another way the trusted component takes on the security role of the platform in the model thus allowing for expanded implementation of the untrusted component.

To grant the component layer access to resources found in platform layer without shielding the platform layer from the component exposes the operating system layer e.g. and the computing device to potential security issues. Stated another way if there was no platform layer there would be no boundaries to limit the component s could operation e.g. it could significantly interfere with the operating system s resources . Hence the structure of the security hierarchy model is maintained at its minimal level of operation to limit the component s operations as illustrated in security hierarchy model .

These limitations of the untrusted component are passed to the trusted component . The trusted component makes decisions as to the platform that a privileged operation is delivered to. Delivering a privileged operation to a platform that is unable to process the privileged operation is unnecessary. Therefore the trusted component delivers the privileged operation to the platform that meets the prerequisites of the untrusted component . For example in the case of software limitations the privileged operation might be delivered from the trusted component to platform A due to the predetermined interoperability between the versions of the untrusted component and platform A but not platform B or platform C . In another instance the hardware limitations of the untrusted component delivered to the trusted component might involve the use of 3D acceleration from a specific type of graphics processing unit supported by platform B . Yet in another consideration the untrusted component might have communication limitations requiring network connection of no less than 1 Mb uplink downlink. This limitation is passed on to trusted component and a privileged operation is delivered to platform B and platform C due to their ability to fulfill the prerequisites of untrusted component .

When limitations of the untrusted component cannot be fulfilled by available platforms an approximation of the appropriate platform might be used to provide limited functionality to the untrusted component . In other instances the limitations of the untrusted component might end at the deliverance of the privileged operation to trusted component because the platforms are unable to meet the prerequisites e.g. the basic level of operation for the untrusted component to function. Nevertheless the trusted component is the intercessor for the privileged operations of the untrusted component .

Embodiments may be described in the general context of computer readable instructions being executed by one or more computing devices. Computer readable instructions may be distributed via computer readable media discussed below . Computer readable instructions may be implemented as program modules such as functions objects Application Programming Interfaces APIs data structures and the like that perform particular tasks or implement particular abstract data types. Typically the functionality of the computer readable instructions may be combined or distributed as desired in various environments.

In other embodiments device may include additional features and or functionality. For example device may also include additional storage e.g. removable and or non removable including but not limited to magnetic storage optical storage and the like. Such additional storage is illustrated in by hardware component . In one embodiment computer readable instructions to implement one or more embodiments provided herein may be in hardware component . Hardware component may also store other computer readable instructions to implement an operating system an application program and the like. Computer readable instructions may be loaded in memory for execution by processing unit for example.

The term computer readable media as used herein includes computer storage media. Computer storage media includes volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions or other data. Memory and storage hardware component are examples of computer storage media. Computer storage media includes but is not limited to RAM ROM EEPROM flash memory or other memory technology CD ROM Digital Versatile Disks DVDs or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can be accessed by device . Any such computer storage media may be part of device .

Device may also include communication connection s that allows device to communicate with other devices. Communication connection s may include but is not limited to a modem a Network Interface Card NIC an integrated network interface a radio frequency transmitter receiver an infrared port a USB connection or other interfaces for connecting computing device to other computing devices. Communication connection s may include a wired connection or a wireless connection. Communication connection s may transmit and or receive communication media.

The term computer readable media may include communication media. Communication media typically embodies computer readable instructions or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term modulated data signal may include a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal.

Device may include input device s such as keyboard mouse pen voice input device touch input device infrared cameras video input devices and or any other input device. Output device s such as one or more displays speakers printers and or any other output device may also be included in device . Input device s and output device s may be connected to device via a wired connection wireless connection or any combination thereof. In one embodiment an input device or an output device from another computing device may be used as input device s or output device s for computing device .

Components of computing device may be connected by various interconnects such as a bus. Such interconnects may include a Peripheral Component Interconnect PCI such as PCI Express a Universal Serial Bus USB firewire IEEE 1394 an optical bus structure and the like. In another embodiment components of computing device may be interconnected by a network. For example memory may be comprised of multiple physical memory units located in different physical locations interconnected by a network.

Those skilled in the art will realize that storage devices utilized to store computer readable instructions may be distributed across a network. For example a computing device accessible via network may store computer readable instructions to implement one or more embodiments provided herein. Computing device may access computing device and download a part or all of the computer readable instructions for execution. Alternatively computing device may download pieces of the computer readable instructions or some instructions may be executed at computing device and some at computing device .

The operating system of computing device can be one of many operating systems that are available for computing devices. Contained within the operating system is the platform . The platform can be many environments for example a brower virtual machine and etc. Contained within the platform lie the untrusted component and trusted component . The secure communication between the untrusted component and the trusted component occur inside the platform .

Still another embodiment involves a computer readable medium comprising processor executable instructions configured to implement one or more of the techniques presented herein. An exemplary computer readable medium that may be devised in these ways is illustrated in wherein the implementation comprises a computer readable medium e.g. a CD R DVD R or a platter of a hard disk drive on which is encoded computer readable data . This computer readable data in turn comprises a set of computer instructions configured to operate according to one or more of the principles set forth herein. In one such embodiment the processor executable instructions may be configured to perform a method such as the exemplary method of for example. In another such embodiment the processor executable instructions may be configured to implement a system such as the exemplary platform environment of for example. Many such computer readable media may be devised by those of ordinary skill in the art that are configured to operate in accordance with the techniques presented herein.

Although the subject matter has been described in language specific to structural features and or methodological acts it is to be understood that the subject matter defined in the appended claims is not necessarily limited to the specific features or acts described above. Rather the specific features and acts described above are disclosed as example forms of implementing the claims.

As used in this application the terms component module system interface and the like are generally intended to refer to a computer related entity either hardware a combination of hardware and software software or software in execution. For example a component may be but is not limited to being a process running on a processor a processor an object an executable a thread of execution a program and or a computer. By way of illustration both an application running on a controller and the controller can be a component. One or more components may reside within a process and or thread of execution and a component may be localized on one computer and or distributed between two or more computers.

Furthermore the claimed subject matter may be implemented as a method apparatus or article of manufacture using standard programming and or engineering techniques to produce software firmware hardware or any combination thereof to control a computer to implement the disclosed subject matter. The term article of manufacture as used herein is intended to encompass a computer program accessible from any computer readable device carrier or media. Of course those skilled in the art will recognize many modifications may be made to this configuration without departing from the scope or spirit of the claimed subject matter.

Various operations of embodiments are provided herein. In one embodiment one or more of the operations described may constitute computer readable instructions stored on one or more computer readable media which if executed by a computing device will cause the computing device to perform the operations described. The order in which some or all of the operations are described should not be construed as to imply that these operations are necessarily order dependent. Alternative ordering will be appreciated by one skilled in the art having the benefit of this description. Further it will be understood that not all operations are necessarily present in each embodiment provided herein.

Moreover the word exemplary is used herein to mean serving as an example instance or illustration. Any aspect or design described herein as exemplary is not necessarily to be construed as advantageous over other aspects or designs. Rather use of the word exemplary is intended to present concepts in a concrete fashion. As used in this application the term or is intended to mean an inclusive or rather than an exclusive or . That is unless specified otherwise or clear from context X employs A or B is intended to mean any of the natural inclusive permutations. That is if X employs A X employs B or X employs both A and B then X employs A or B is satisfied under any of the foregoing instances. In addition the articles a and an as used in this application and the appended claims may generally be construed to mean one or more unless specified otherwise or clear from context to be directed to a singular form.

Also although the disclosure has been shown and described with respect to one or more implementations equivalent alterations and modifications will occur to others skilled in the art based upon a reading and understanding of this specification and the annexed drawings. The disclosure includes all such modifications and alterations and is limited only by the scope of the following claims. In particular regard to the various functions performed by the above described components e.g. elements resources etc. the terms used to describe such components are intended to correspond unless otherwise indicated to any component which performs the specified function of the described component e.g. that is functionally equivalent even though not structurally equivalent to the disclosed structure which performs the function in the herein illustrated exemplary implementations of the disclosure. In addition while a particular feature of the disclosure may have been disclosed with respect to only one of several implementations such feature may be combined with one or more other features of the other implementations as may be desired and advantageous for any given or particular application. Furthermore to the extent that the terms includes having has with or variants thereof are used in either the detailed description or the claims such terms are intended to be inclusive in a manner similar to the term comprising. 

