---

title: Describing formal end-user requirements in information processing systems using a faceted, tag-based model
abstract: A method, including: providing a computer menu from which a processing goal can be created, wherein the menu includes a plurality of facets, and wherein each facet includes at least one tag; receiving a processing goal, wherein the processing goal includes a plurality of tags selected from the menu; executing at least one application that includes a plurality of components arranged in a processing graph to produce information that satisfies the processing goal; and outputting the information.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08555240&OS=08555240&RS=08555240
owner: International Business Machines Corporation
number: 08555240
owner_city: Armonk
owner_country: US
publication_date: 20081015
---
This invention was made with Government support under Contract No. H98230 07 C 0383 awarded by the U.S. Department of Defense. The Government has certain rights in this invention.

This application is related to commonly assigned U.S. patent application entitled FACETED TAG BASED APPROACH FOR THE DESIGN AND COMPOSITION OF COMPONENTS AND APPLICATIONS IN COMPONENT SYSTEMS Ser. No. 12 252 156 filed concurrently herewith the disclosure of which is incorporated by reference herein in its entirety.

In general it is difficult to elicit formal software requirements from end users. For example most software requirements tend to be captured in an informal manner in an unstructured document. This makes it difficult to concisely describe the requirements to communicate the requirements to an IT or development team precisely and then to verify that the requirements have indeed been met by the developed IT artifacts.

Accordingly there is a need for a technique of eliciting formal software requirements from end users.

In an exemplary embodiment of the present invention a method comprises providing a computer menu from which a processing goal can be created wherein the menu includes a plurality of facets and wherein each facet includes at least one tag receiving a processing goal wherein the processing goal includes a plurality of tags selected from the menu executing at least one application that includes a plurality of components arranged in a processing graph to produce information that satisfies the processing goal and outputting the information.

A facet is a category on the computer menu that presents at least one tag associated therewith when the facet is selected.

In an exemplary embodiment of the present invention a method comprises receiving a software requirement and representing the software requirement as a plurality of processing goals described by a goal pattern wherein the goal pattern is described by a set of tags and facets and wherein each facet is associated with a constraint that specifies how many tags in the facet should be part of a particular processing goal.

An application includes a plurality of components capable of satisfying at least one of the plurality of processing goals.

The method further comprises initiating at least one of the applications on a computer accessible to a user receiving a processing goal from the user wherein the processing goal includes at least one tag selected by the user and wherein the tag is included in a facet selected by the user executing the at least one application to produce information that satisfies the processing goal and providing the information to the user.

In an exemplary embodiment of the present invention a computer readable storage medium stores instructions that when executed by a computer cause the computer to perform a method the method comprising providing a computer menu from which a processing goal can be created wherein the menu includes a plurality of facets and wherein each facet includes at least one tag receiving a processing goal wherein the processing goal includes a plurality of tags selected from the menu executing at least one application that includes a plurality of components arranged in a processing graph to produce information that satisfies the processing goal and outputting the information.

A facet is a category on the computer menu that presents at least one tag associated therewith when the facet is selected.

In an exemplary embodiment of the present invention a computer readable storage medium stores instructions that when executed by a computer cause the computer to perform a method the method comprising receiving a software requirement and representing the software requirement as a plurality of processing goals described by a goal pattern wherein the goal pattern is described by a set of tags and facets and wherein each facet is associated with a constraint that specifies how many tags in the facet should be part of a particular processing goal.

An application includes a plurality of components capable of satisfying at least one of the plurality of processing goals.

The method further comprises initiating at least one of the applications on a computer accessible to a user receiving a processing goal from the user wherein the processing goal includes at least one tag selected by the user and wherein the tag is included in a facet selected by the user executing the at least one application to produce information that satisfies the processing goal and providing the information to the user.

The foregoing features are of representative embodiments and are presented to assist in understanding the invention. It should be understood that they are not intended to be considered limitations on the invention as defined by the claims or limitations on equivalents to the claims. Therefore this summary of features should not be considered dispositive in determining equivalents. Additional features of the invention will become apparent in the following description from the drawings and from the claims.

This disclosure incorporates by reference herein in its entirety Bouillet et al. A tag based approach for the design and composition of information processing applications. Object Oriented Programming Systems Languages and Applications OOPSLA 08 to be published Oct. 19 23 2008.

In this disclosure we provide a novel technique for describing end user requirements. In an exemplary embodiment the technique utilizes faceted tag based functional requirements that are elicited from end users. The facets represent different dimensions of both data and processing where each facet is modeled as a finite set of tags that are defined in a controlled folksonomy. The faceted tag based functional requirements are the starting point of a top down lifecycle where workflows and individual services are designed explicitly keeping in mind the needs of the composition. The requirements are taken by enterprise architects who design workflow templates that are also associated with faceted tag based descriptions. These workflow templates can either reuse existing services of workflows or they can be used to generate new service requirements which are also described in terms of facets and tags. These new services are then developed by developers and are tested individually in conjunction with other services as per the workflow templates.

In this disclosure we focus on information processing workflows which are workflows that retrieve and process information as desired by end users. It is to be understood however that the exemplary embodiments of the present invention are not limited thereto. These workflows make available unified information obtained or extracted from multiple data sources in response to end users information inquiries. Examples of such workflows are those that obtain business intelligence for analysts and those that perform information integration and content management. The key drivers for these workflows are to facilitate better decision making by end users and better information sharing between business operations.

In this disclosure we focus on information processing workflows that extract data from one or more sources process them after using one or more services and produce useful information or knowledge. The key end users of information processing workflows are analysts and decision makers in various enterprises. These end users need to quickly obtain and update the business intelligence that guides their decision. For this they need to collect the needed information from a potentially huge number of diverse sources adapt and integrate that data and apply a variety of analytic models updating the results as the data changes. When new sources are discovered and or new analytic models are developed or simply when new ways of applying existing models are desired users of information systems cannot and should not wait the days or months needed for development cycles to complete to get the analysis results they urgently need. These users require the serendipitous assembly of new workflows from the available services to satisfy their dynamic and changing information processing goals.

The word tag comes from various collaborative tagging applications that have arisen in Web 2.0 such as del.icio.us and Flickr where users annotate different kinds of resources like bookmarks and images with tags. These tags aid search and retrieval of resources. A key aspect of the tagging model is that it is relatively simple in comparison to more expressive models such as those based on Semantic Web ontologies and other formal logics. Hence it offers a lower barrier to entry for different kinds of users to describe resources. In our case the resources are different kinds of data artifacts like files input and output messages to services etc.

Let T t t . . . t be the set of tags in our system. In most social tagging applications the set of tags T is completely unstructured i.e. there is no relation between individual tags. Introducing a hierarchy structure in T however enhances the expressivity by allowing additional tags to be inferred for resources. A tag hierarchy H is a directed acyclic graph DAG where the vertices are the tags and the edges represent sub tag relationships. It is defined as H T S where T is the set of tags and ST T is the set of sub tag relationships. If a tag t T is a sub tag of t T denoted tt then all resources annotated by tcan also be annotated by t. For convenience we assume that t T tt.

Facets represent dimensions for characterizing resources data artifacts . Let F f be the set of facets. Each facet is a set of tags i.e. fT. Tags may be shared across facets.

As shown in end user processing goals are specified as a set of tags. For example a commodities broker might want to watch for predicted extremes in relative humidity that might indicate a drought indicating an opportunity to trade corn futures. He would express this as the goal GFS Eta RelativeHumidity IA WeightedAverage ContourMapView which represents a request for a workflow that delivers the weighted average of two relative humidity forecasts produced using the GFS and Eta forecast models obtained from NOAA the National Oceanographic and Atmosphere Association for the state of Iowa presented on a contour map.

Each data artifact in our system a is characterized by a set of tags d a T. The data artifacts include the input and output messages of web services RSS feeds web pages files etc. The tags only describe the semantics of the data artifacts and not the actual syntax.

End user goals describe the semantics of the desired data artifacts that may be produced by an information processing workflow. A goal qT is satisfied by a data artifact a iff t q t d a t t.

When a user selects a goal a workflow is composed in a bottom up manner from the available services. In our system this bottom up composition occurs through an AI planner such as for example the planner described in A. Riabov and Z. Liu. Planning for stream processing systems. In American Association for Artificial Intelligence AAAI 2005 the disclosure of which is incorporated by reference herein in its entirety that uses tag based descriptions of individual services to come up with a workflow satisfying the goal. shows an example of such as workflow. For example is a flow example for the IA RelativeHumidity GFS Eta WeightedAverage ContourMapView goal. The final Contour Map View service in the workflow is a Representational State Transfer REST service that end users can access for real time result information. Some services like NOAA GFS Forecast Data are instantiated with specific configuration parameters like Current Forecast. In other words the boxes in represent components of an application.

We model a workflow as a graph G V E where G is a DAG Directed Acyclic Graph . Each vertex v V is a service instance. Each edge u v represents a logical flow of messages from u to v. If a vertex v has multiple incoming edges of the form u v u v . . . then it means that the output message produced by u u . . . are used together to create an input message to v. The message corresponding to each edge u v can be described by a set of tags d u v . In this disclosure we restrict the workflows to acyclic graphs since capturing the semantics of messages where there are loops is difficult.

For this purpose we provide a service engineering lifecycle see that is driven by high level faceted tag based functional requirements. In information processing systems the functional requirements describe the general kinds of information the end user desires. In our approach these functional requirements are expressed as patterns of goals that the user would like to submit. Note that this disclosure focuses on functional requirements and not non functional requirements like security performance and cost. However the exemplary embodiments of the present invention are applicable to both sets of requirements.

The functional requirements are taken by an enterprise architect who comes up with a high level design of the overall workflow s and of individual services. The architect first constructs one or more workflow templates that satisfy the requirements. A workflow template is a high level description of the flow structure and is modeled as a graph of processing stages where each stage performs a certain segment of the overall required information processing. Each stage in turn consists of a graph of service classes where a service class is an equivalence class of services that share similar properties and are substitutable in certain contexts. The services have a modular and substitutable nature and enable composition. In addition the decomposition of the workflow into processing stages allows reuse of both services and entire sub flows.

The architect can reuse existing services and service classes in designing the workflow. In some cases new services may need to be developed or existing services modified to satisfy new end user requirements. The architect defines the semantic requirements of the new services in terms of tags describing the input and output data. In addition the architect defines the syntactic interfaces e.g. using WSDL to enable its interaction with other services in the processing stage and in the workflow in general. These semantic and syntactic service requirements are passed to a developer who develops the service and tests it both individually and in conjunction with other services. Finally the new services are made available for composition and deployment. This may also result in changes to the end user interface to include the new tags describing the outputs of workflows that contain the new service. Finally as shown in the different stages of the lifecycle are iterative and proceed in a spiral refinement manner to finally converge towards the required system.

1. The common yet extensible facets and tag hierarchies establish a simple shared vocabulary that is used by architects developers and end users.

2. End user requirements are captured in a formal manner. This enables us to verify that the requirements are actually satisfied by a set of composable services.

Workflow composition requires careful design of the services. The first need is to make sure that at least those flows are composed that meet certain business requirements which are explicitly specified by the end users. In addition if they satisfy new requirements through serendipitous composition of services that is a bonus.

Hence in our approach high level end user requirements drive the service engineering process. In any large scale information processing system there may be a large number of different kinds of information and a large number of different ways of processing this information. Hence requirements are not specified in terms of single goals but as whole classes of goals that are described by goal patterns.

A goal pattern is described as a set of tags and facets. Each facet is associated with a cardinality constraint. The cardinality constraint specifies how many tags in the facet should be part of the goal.

We first define the set of cardinality constraints CC as the set of all ranges of positive integers. Then a goal pattern QP x c x F c CC t t T. A goal pattern requirement means that end users are interested in all data artifacts that can be described by a combination of tags that are drawn from the facets in the goal pattern according to the cardinality constraints.

An example of a goal pattern is Source 1 WeatherForecastModel 2 MultipleModelAnalysis 1 BasicWeatherMetric 1 Visualization 1 .

This represents the class of all data artifacts that can be used to describe one or more tags that belong to the Source facet two or more tags in the WeatherForecastModel facet one tag in the MultipleModelAnalysis facet one tag in the BasicWeatherMetric facet and one tag in the Visualization facet.

A point to note is that the goal pattern can refer to a large number of possible goals. For example if there are five tags in the Source facet 50 tags in the Model facet five in the MultipleModelAnalysis facet 10 in the BasicWeatherMetric facet and 10 in the Visualization facet there are up to 2 2 5 2 10 possible kinds of data that may be producible by the information processing system. The goal pattern helps in succinctly expressing the combinatorial number of possible goals that can be submitted to the system.

In this disclosure we described the use of faceted tag based descriptions as a means of specifying high level end user requirements in accordance with an exemplary embodiment of the present invention. The requirements kick off a top down service development lifecycle where enterprise architects and service developers design abstract workflow templates generate requirements for new services develop and test the new services and workflows and finally make available the services for manual or automatic composition in response to dynamic user goals.

A system in which exemplary embodiments of the present invention may be implemented is shown in . As shown in the system includes a computer system which can represent any type of computer system capable of carrying out the teachings of the present invention. For example the computer system can be a laptop computer a desktop computer a workstation a hand held device a server a cluster of computers etc. End user s architect s or developer s can access the computer system directly or can operate a computer system that communicates with computer system over a network e.g. the Internet a wide area network WAN a local area network LAN a virtual private network VPN etc. .

Computer system is shown including a processing unit a memory a bus and input output I O interfaces . Further computer system is shown in communication with external devices resources and one or more storage system . In general processing unit executes computer program code such as AI planner or an application that is stored in memory and or storage system . While executing computer program code processing unit can read and or write data to from memory storage system and or I O interfaces . Bus provides a communications link between each of the components in computer system . External devices resources can comprise any devices e.g. keyboard pointing device display e.g. display printer etc. that enable a user to interact with computer system and or any devices e.g. network card modem etc. that enable computer system to communicate with one or more other computing devices.

Storage system can be any type of system e.g. database that is capable of providing storage information for use with exemplary embodiments of the present invention. Such information can include workflow templates services and service classes semantic and syntactic requirements test results etc. Shown in memory e.g. as a computer program product is the AI planner which is used to develop workflows consisting of components configured to satisfy a user goal and one or more application s which represent the developed workflows that can be executed by the end user s for example. The application s can also be stored in the storage system .

It should be understood that the present invention may be implemented in various forms of hardware software firmware special purpose processors or a combination thereof. In one embodiment the present invention may be implemented in software as an application program tangibly embodied on a program storage device e.g. magnetic floppy disk RAM CD ROM DVD ROM and flash memory . The application program may be uploaded to and executed by a machine comprising any suitable architecture.

It is to be further understood that because some of the constituent system components and method steps depicted in the accompanying figures may be implemented in software the actual connections between the system components or the process steps may differ depending on the manner in which the present invention is programmed. Given the teachings of the present invention provided herein one of ordinary skill in the art will be able to contemplate these and similar implementations or configurations of the present invention.

It should also be understood that the above description is only representative of illustrative embodiments. For the convenience of the reader the above description has focused on a representative sample of possible embodiments a sample that is illustrative of the principles of the invention. The description has not attempted to exhaustively enumerate all possible variations. That alternative embodiments may not have been presented for a specific portion of the invention or that further undescribed alternatives may be available for a portion is not to be considered a disclaimer of those alternate embodiments. Other applications and embodiments can be implemented without departing from the spirit and scope of the present invention.

It is therefore intended that the invention not be limited to the specifically described embodiments because numerous permutations and combinations of the above and implementations involving non inventive substitutions for the above can be created but the invention is to be defined in accordance with the claims that follow. It can be appreciated that many of those undescribed embodiments are within the literal scope of the following claims and that others are equivalent.

