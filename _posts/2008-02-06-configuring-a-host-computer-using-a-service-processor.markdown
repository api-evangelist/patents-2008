---

title: Configuring a host computer using a service processor
abstract: Technologies are provided herein for configuring aspects of the operation of a server computer using a service processor. The service processor includes a processor, a NAND flash memory organized using a file system, and a hardware data communications interface coupled to the host computer. The file system is utilized to store a monolithic image file containing software components for configuring the operation of the host computer and the service processor. A firmware is also provided that executes on the processor to expose the NAND flash memory to the host processor as a storage device on the hardware interface, to receive storage requests from the host computer, and to generate offsets into the monolithic image file for performing the storage requests. The image file may be utilized to store an operating system, hardware drivers, and a host configuration tool executable by the host computer.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07975084&OS=07975084&RS=07975084
owner: American Megatrends, Inc.
number: 07975084
owner_city: Norcross
owner_country: US
publication_date: 20080206
---
Modern server computer installations may include hundreds or even thousands of computer systems. Management of such a large number of computer systems is very difficult. One particularly challenging aspect of the management of a large server computer installation is the process of configuring the operation of a large number of server computers. It is often an extremely tedious and time consuming process to configure aspects of the operation of a large number of server computers especially when the server computers are located in different geographic locations.

One reason it is often difficult to configure the operation of a large number of server computers is that the pre boot environment provided by a typical server computer is often very limited. For instance basic input output system BIOS or Extensible Firmware Interface EFI level configuration utilities are often severely memory limited and as a result are restricted in the functionality they can provide for configuring the operation of a server computer. Moreover it is often impossible in these pre boot environments to configure custom hardware such as a redundant array of inexpensive disks RAID controller card due to the inability to use hardware drivers in the pre boot environment that are specific to the custom hardware. In general current pre boot environments are severely restricted in their ability to provide meaningful tools for configuring a server computer.

It is with respect to these considerations and others that the disclosure presented herein has been made.

Technologies are provided herein for configuring aspects of the operation of a server computer using a service processor. In particular through the use of the technologies provided herein network aware enhanced configuration tools provided by a service processor can be utilized on a host computer for configuring and managing aspects of the operation of the host computer. The enhanced configuration tools can utilize pre existing hardware drivers provide a robust graphical user interface GUI and provide for the configuration of a host computer through the use of scripts.

According to one aspect presented herein a service processor also referred to herein as a baseboard management controller or BMC is provided for use within a host computer system. While service processors have been previously limited to providing functionality for emergency management and remote connectivity the advanced service processor described herein provides network aware configuration tools for configuring and managing a host computer and the service processor itself. These network aware configuration tools provide significant advanced functionality as compared to the configuration tools available in previous pre boot environments.

In one aspect presented herein the service processor includes a processor a NAND flash memory organized using a file system and a hardware data communications interface coupled to the host computer such as a Universal Serial Bus USB interface. The file system is utilized to store a monolithic image file containing software components for configuring the operation of the host computer and the service processor. A firmware is also provided that executes on the processor to expose the NAND flash memory to the host processor as a storage device on the hardware interface to receive storage requests from the host computer and to generate offsets into the monolithic image file for performing the storage requests. For instance appropriate offsets may be generated into the image file to perform read and write requests received from the host computer.

According to other aspects the image file is utilized to store an operating system and hardware drivers executable by the host computer. The operating system is a small footprint operating system suitable for storage in and execution from the NAND flash memory. The service processor can instruct the host computer to restart and to boot from the operating system stored on the service processor. In this regard the image file may further store a host configuration tool executable by the host computer. When the host computer boots from the NAND flash memory on the service processor the host configuration tool is executed to configure aspects of the operation of the host computer. For instance the configuration tool may change firmware settings hardware settings and other configuration parameters utilized by the host computer. A Web browser program may be stored in the image file and utilized by the host configuration tool to provide a robust GUI for configuring the operation of the host computer.

According to additional aspects the image file stores a host firmware runtime application programming interface API that provides software interfaces for configuring the firmware of the host computer. The host configuration tool utilizes the host firmware runtime API to configure the host firmware. For instance in one implementation the service processor obtains an updated firmware for the host computer from a configuration server and stores the updated firmware in the image file. The host configuration tool may then utilize the host firmware runtime API and the updated firmware to update the firmware of the host computer.

According to other aspects the image file may further store a service processor runtime API that provides software interfaces for configuring aspects of the operation of the service processor. The host configuration tool may utilize the service processor runtime API to configure aspects of the operation of the service processor. The image file may also store scripts executable by the host computer for configuring aspects of the operation of the host computer. In this manner configuration activities can be automated through the use of the scripts. The service processor may be configured to periodically obtain updated scripts from a configuration server and store the scripts in the image file for execution by the host computer.

It should be appreciated that the above described subject matter may also be implemented as a computer controlled apparatus a computer process a computing system or as an article of manufacture such as a computer readable medium. These and various other features will be apparent from a reading of the following Detailed Description and a review of the associated drawings.

This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter nor is it intended that this Summary be used to limit the scope of the claimed subject matter. Furthermore the claimed subject matter is not limited to implementations that solve any or all disadvantages noted in any part of this disclosure.

The following detailed description is directed to technologies for configuring a host computer using a service processor. In the following detailed description references are made to the accompanying drawings that form a part hereof and which are shown by way of exemplary embodiments and implementations. Note that although the subject matter presented herein has been described in conjunction with one or more particular embodiments and implementations it is to be understood that the embodiments are not necessarily limited to the specific structure configuration or functionality described herein. Rather the specific structure configuration and functionality described herein are disclosed as examples. Various modifications and changes may be made to the subject matter described herein without following the exemplary embodiments and applications illustrated and described and without departing from the true spirit and scope of the embodiments.

According to aspects the service processor is configured to monitor operating and performance related parameters received from various software and hardware components of the host computer referred to herein as managed entities or targets. For example the service processor may monitor health related aspects associated with the host computer such as temperature cooling fan speeds power mode operating system status and other parameters within the host computer . The service processor monitors sensors to obtain this information and may transmit an alert to a system administrator if any of the parameters exceed preset limits. A system administrator may also communicate with the service processor to take some corrective action such as resetting or power cycling the host computer . Communication with the service processor is possible even if an operating system executing on the host computer has not yet been installed or is corrupted.

According to embodiments the operation of the service processor adheres to the Intelligent Platform Management Interface IPMI industry standard for system monitoring and event recovery. Through the IPMI interface the service processor can instruct the host computer to take certain actions. For instance as described in greater detail below the service processor may instruct the host computer to restart itself and boot from an operating system contained on the service processor . In order to provide this functionality the service processor is communicatively connected to one or more components within the host computer either directly or by way of a system management bus. In addition the service processor may also be configured with its own network interface card NIC for direct communication with computer systems on the network such as the configuration server .

As shown in the host computer includes a number of conventional computing components such as a central processing unit CPU a main memory . The host computer also includes a mass storage device such as a hard disk device that stores a host operating system A. The host operating system A is executed by the host computer to perform its primary processing tasks. For instance according to embodiments presented herein the host operating system A may comprise the LINUX operating system the WINDOWS SERVER operating system from MICROSOFT CORPORATION or another type of operating system suitable for controlling the operation of a server computer. The host computer may also include a firmware for controlling the operation of the host computer and through which aspects of its operation may be configured.

As will be discussed in greater detail below the service processor is equipped with a flash memory device that stores an operating system and a host configuration tool. The service processor may instruct the host computer to restart itself and boot from the operating system contained within the service processor . When the host computer reboots in this manner the host configuration tool is executed on the host computer .

Through facilities provided by the host configuration tool aspects of the operation of the host computer can be configured. Moreover as will also be described in greater detail below the configuration server may be utilized to update the operating system host configuration tool scripts and other software components stored on the service processor . This process may occur in an automated fashion periodically to ensure that the service processor always includes up to date software components for configuring the operation of the host computer . Additional details regarding the architecture and operation of the service processor are provided below with respect to .

As shown in the service processor also includes a hardware interface coupled to the CPU for communicating with the host computer . In particular in one implementation the hardware interface comprises a USB controller configured to communicate with the host computer via a USB bus. It should be appreciated however that other types of hardware interfaces may be utilized for communication with the host computer . In one implementation the service processor also includes a system management bus interface for communicating with various components within the host computer on a system management bus. The system management bus may be utilized by the service processor to communicate with the host computer to communicate with other system management devices such as sensors and to perform other functions.

As also shown in the service processor includes a NOR flash memory . In one implementation the NOR flash memory is operative to store a firmware that controls the operation of the service processor . In particular the NOR flash memory may be utilized to store an operating system for the service processor . In one embodiment the operating system comprises a small footprint LINUX operating system suitable for controlling the operation of an embedded microcontroller. Other types of small footprint operating systems may also be used similarly.

The operating system includes a file system manager capable of implementing a file system within memory devices contained within the service processor . For instance in one implementation a NAND flash memory is also provided within the service processor . The available storage capacity of the NAND flash memory is formatted by the file system manager with a file system . In one embodiment the file system comprises the Journaling Flash File System Version 2 JFFS v2 . It should be appreciated however that other types of file systems may be utilized. The file system manager may also provide functionality for compressing files stored within the file system . According to implementations the file system is utilized to store an image file . The image file is a flat monolithic image file that is utilized to store an operating system and host configuration tools for the host computer . Additional details regarding the contents and use of the data stored within the image file are provided below with respect to .

According to implementations the operating system also includes a USB driver layer . As will be discussed in greater detail below the USB driver layer is utilized to process storage requests from the host computer that are received by the USB controller . In response to receiving a storage request such as a read or write operation the USB driver layer generates an offset for the storage request into the image file . The generated offset is then utilized to locate the appropriate data within the image file and to respond to the storage request. Additional details regarding this process are provided below.

It should be appreciated that although illustrates the use of a NOR flash memory and a NAND flash memory a single NAND flash memory device or other type of memory device may be utilized. Additionally although the NAND flash memory is illustrated in as being integrated with the service processor the NAND flash memory may be external to the service processor in other embodiments. For instance a hardware interface may be provided in embodiments for communicatively coupling an external NAND flash memory such as a USB thumb drive to the service processor .

According to implementations hardware drivers are also stored in the image file for use in conjunction with the host operating system B. The drivers comprise standard hardware drivers configured for use with the host operating system B. In this manner the same drivers utilized with the host operating system A during the normal runtime of the host computer can also be used by the host operating system B in the pre boot configuration environment described herein. By allowing use of the same drivers the embodiments presented herein can save significant development time and also permit the use and configuration of a wide variety of hardware devices in the pre boot configuration environment provided by the service processor .

As also shown in the image file may also include a host configuration tool . The host configuration tool is a software component executable on the host operating system B. The host configuration tool includes functionality for configuring aspects of the operation of the host computer . For instance according to implementations the host configuration tool may include functionality for configuring software and hardware settings of the host computer settings for a firmware utilized by the host computer and functionality for updating the contents of a firmware utilized by the host computer .

The host configuration tool may also be configured to communicate with the configuration server . In particular the host configuration tool communicates with the configuration server to periodically retrieve an updated version of the image file and to store the updated image file in the file system . In this manner any data contained within the image file may be periodically updated at the host computer . In an embodiment the host configuration tool utilizes a Web browser program to provide a graphical user interface for configuring the host computer . The graphical user interface may be utilized by a user local to the host computer or through a remotely located user through redirection facilities also provided by the service processor .

In order to provide the functionality described herein for configuring the various aspects of the host computer the host configuration tool may utilize a host firmware runtime API or a service processor runtime API . The host firmware runtime API is operative to provide one or more software interfaces for customizing aspects of the operating of a firmware utilized by the host computer . By providing an API for interfacing with the settings utilized by the firmware of the host computer programmers are freed from having to program the configuration of the host computer firmware directly. The service processor runtime API provides software interfaces for configuring aspects of the operation of the service processor . The host configuration tool may utilize the API and the API at runtime to configure various aspects of the operation of the host computer and the service processor respectively.

According to implementations the image file also stores one or more scripts . The scripts are executable by the host configuration tool or the host operating system B to maintain or configure aspects of the operation of the host computer . For instance in one embodiment scripts are provided for performing automatic configuration of firmware settings within the host computer . Other types of scripts may also be utilized.

As discussed briefly above the host configuration too may utilize the services of a host firmware runtime API to configure aspects of the operation of the firmware of the host computer . According to other embodiments the host configuration tool is also configured to update a firmware of the host computer with a firmware stored in the image file . In this manner the service processor can periodically retrieve a new firmware from the configuration server . Once the firmware has been retrieved and stored within the image file the host configuration tool may update a firmware in the host computer with the new firmware .

According to embodiments all of the software components illustrated in as being stored within the image file are stored within a single partition. According to other embodiments multiple partitions A C may be utilized to store different software components. For instance as shown in the host firmware runtime API the service processor runtime API the host configuration tool and the Web browser program are stored within the partition A. The host operating system B and the drivers are stored within the partition B. The scripts and the firmware are stored within the partition C. By storing the various software components in different partitions of the image file each of the partitions A C may be updated separately without updating the entire image file . It should be appreciated that other configurations of partitions and software components may be utilized.

The service processor image file SDK may also provide functionality for configuring the operation of the host configuration tool and the graphical user interface that is provided through the Web browser program . Once a user has configured the aspects of the software components stored in the image file the service processor image file SDK is operative to generate the image file in the designated manner. Additional functionality may also be provided for uploading the generated image file to the service processor for storage on the file system of the NAND flash memory .

The routine beings at operation where the available storage capacity of the NAND flash memory is configured by the file system manager . In particular the file system manager formats the available storage capacity of the NAND flash memory with the file system . It should be appreciated that the file system manager provides functionality for identifying and remapping bad sectors within the NAND flash memory . This process is transparent to the operation of the USB driver layer .

From operation the routine continues to operation where the service processor stores the image file on the file system . As discussed above the image file is a monolithic file stored within the file system in the same manner that any other file would be stored within a file system. Once the image file has been stored within the file system the routine continues to operation where the contents of the file system are exposed to the host computer as a mass storage device. As discussed above the file system is exposed to the host computer via the USB controller and appears to the host computer as would any other USB mass storage device.

From operation the routine continues to operation where the service processor determines whether a storage request was received from the host computer via the USB controller . In response to receiving such a request the routine continues to operation where the USB driver layer generates an offset into the image file for the storage request. Once the offset has been generated into the image file the routine continues to operation where the USB driver layer performs the storage request using the generated offset. For instance an offset may be generated to perform a read or write operation within a portion of the image file . Once the request has been performed by the USB driver layer the results of the request are returned to the host computer in response to the original storage request. From operation the routine returns to operation where additional storage requests from the host computer are processed in a similar manner.

From operation the routine continues to operation where the host computer executes the host configuration tool and as necessary the Web browser program . As discussed the Web browser program may be utilized by the host configuration tool to provide a suitable graphical user interface for configuring aspects of the host computer . Additionally scripts or other program code may be executed by host configuration tool to configure aspects of the host computer in an automated manner. For instance the host firmware runtime API may be utilized by the host configuration tool to configure aspects of the operation of a firmware utilized by the host computer . This occurs at operation .

In addition to configuring aspects of the operation of the host computer the host configuration tool may also utilize the service processor runtime API to configure aspects of the operation of the service processor . For instance this functionality may be utilized to identify the configuration server to the service processor to define the frequency with which the service processor should check for updates from the configuration server or to perform other types of configuration of the service processor . This functionality occurs at operation . From operation the routine continues to operation where it ends.

At operation the service processor retrieves the updated image file from the configuration server . Once the updated image file has been obtained from the configuration server the routine continues to operation where the service processor stores the updated image file in the NAND flash memory . Once the updated image file has been stored in the NAND flash memory the service processor may instruct the host computer to reboot itself from the image file in the manner described above. From operation the routine continues to operation where it ends.

Generally program modules include routines programs components data structures and other types of structures that perform particular tasks or implement particular abstract data types. Moreover those skilled in the art will appreciate that the embodiments described herein may be practiced with other computer system configurations including hand held devices multiprocessor systems microprocessor based or programmable consumer electronics minicomputers mainframe computers and the like. The embodiments described herein may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment program modules may be located in both local and remote memory storage devices.

The computer includes a baseboard or motherboard which is a printed circuit board to which a multitude of components or devices may be connected by way of a system bus or other electrical communication path. In one illustrative embodiment a CPU operates in conjunction with a chipset . The CPU is a standard central processor that performs arithmetic and logical operations necessary for the operation of the computer. The computer may include a multitude of CPUs .

The chipset includes a north bridge and a south bridge . The north bridge provides an interface between the CPU and the remainder of the computer . The north bridge also provides an interface to a random access memory RAM used as the main memory in the computer and possibly to an on board graphics adapter . The north bridge may also include functionality for providing networking functionality through a gigabit Ethernet adapter . The gigabit Ethernet adapter is capable of connecting the computer to another computer via a network. Connections that may be made by the network adapter may include LAN or WAN connections. LAN and WAN networking environments are commonplace in offices enterprise wide computer networks intranets and the Internet. The north bridge is connected to the south bridge .

The south bridge is responsible for controlling many of the input output functions of the computer . In particular the south bridge may provide one or more universal serial bus USB ports a sound adapter an Ethernet controller and one or more general purpose input output GPIO pins . The south bridge may also provide a bus for interfacing peripheral card devices such as a graphics adapter . In one embodiment the bus comprises a peripheral component interconnect PCI bus. The south bridge may also provide a system management bus for use in managing the various components of the computer . Additional details regarding the operation of the system management bus and its connected components are provided below.

The south bridge is also operative to provide one or more interfaces for connecting mass storage devices to the computer . For instance according to an embodiment the south bridge includes a serial advanced technology attachment SATA adapter for providing one or more SATA ports and an ATA 100 adapter for providing one or more ATA 100 ports . The SATA ports and the ATA 100 ports may be in turn connected to one or more mass storage devices such as the SATA disk drive storing an operating system A and application programs. As known to those skilled in the art an operating system A comprises a set of programs that control operations of a computer and allocation of resources. An application program is software that runs on top of the operating system software or other runtime environment and uses computer resources to perform application specific tasks desired by the user. According to one embodiment of the invention the operating system A comprises the LINUX operating system. According to another embodiment of the invention the operating system A comprises the WINDOWS SERVER operating system from MICROSOFT CORPORATION. According to another embodiment the operating system A comprises the UNIX or SOLARIS operating system. It should be appreciated that other operating systems may also be utilized.

The mass storage devices connected to the south bridge and their associated computer readable media provide non volatile storage for the computer . Although the description of computer readable media contained herein refers to a mass storage device such as a hard disk or CD ROM drive it should be appreciated by those skilled in the art that computer readable media can be any available media that can be accessed by the computer . By way of example and not limitation computer readable media may comprise computer storage media and communication media. Computer storage media includes volatile and non volatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. Computer storage media includes but is not limited to RAM ROM EPROM EEPROM flash memory or other solid state memory technology CD ROM DVD HD DVD BLU RAY or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information.

A low pin count LPC interface may also be provided by the south bridge for connecting a Super I O device . The Super I O device is responsible for providing a number of input output ports including a keyboard port a mouse port a serial interface a parallel port and other types of input output ports. The LPC interface may also connect a computer storage media such as a ROM or a flash memory such as a NVRAM for storing the firmware that includes program code containing the basic routines that help to start up the computer and to transfer information between elements within the computer .

As described briefly above the south bridge may include a system management bus . The system management bus may be connected to the service processor . As discussed above the service processor includes functionality for monitors the operation of the computer system and for configuring aspects of its operation. In addition to providing the functionality described herein for configuring the computer the service processor may also be configured to monitor health related aspects associated with the computer system such as but not limited to the temperature of one or more components of the computer system speed of rotational components e.g. spindle motor CPU Fan etc. within the system the voltage across or applied to one or more components within the system and the available or used capacity of memory devices within the system . To accomplish these monitoring functions the service processor is communicatively connected to one or more components by way of the management bus . In an embodiment these components include sensor devices for measuring various operating and performance related parameters within the computer system . The sensor devices may be either hardware or software based components configured or programmed to measure or detect one or more of the various operating and performance related parameters. The service processor also includes the additional functionality described above for configuring aspects of the operation of the computer . In this regard the service processor includes an interface to the USB ports provided by the computer .

It should be appreciated that the computer may comprise other types of computing devices including hand held computers embedded computer systems personal digital assistants and other types of computing devices known to those skilled in the art. It is also contemplated that the computer may not include all of the components shown in may include other components that are not explicitly shown in or may utilize an architecture completely different than that shown in .

Based on the foregoing it should be appreciated that technologies for configuring the operation of a host computer using a service processor are presented herein. Although the subject matter presented herein has been described in language specific to computer structural features methodological acts and computer readable media it is to be understood that the invention defined in the appended claims is not necessarily limited to the specific features acts or media described herein. Rather the specific features acts and mediums are disclosed as example forms of implementing the claims.

The subject matter described above is provided by way of illustration only and should not be construed as limiting. Various modifications and changes may be made to the subject matter described herein without following the example embodiments and applications illustrated and described and without departing from the true spirit and scope of the present invention which is set forth in the following claims.

