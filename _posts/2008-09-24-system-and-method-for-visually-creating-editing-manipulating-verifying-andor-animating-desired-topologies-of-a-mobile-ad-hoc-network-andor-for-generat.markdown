---

title: System and method for visually creating, editing, manipulating, verifying, and/or animating desired topologies of a mobile ad hoc network and/or for generating mobility-pattern data
abstract: A method and apparatus for creating virtual topologies for a mobile ad hoc network comprising generating at least two nodes representing transmitters and/or receivers in the network; each of said at least two nodes having parameters (which may be for example, location, direction, velocity, receiving/transmitting capability); generating a bidirectional or unidirectional link between two nodes when appropriate; storing the specifications of the topology of the network in memory; whereby the stored topologies are adapted to be inputted into a test-bed system capable of emulating a mobile ad-hoc network. Optionally, the images of the nodes and links are displayed on a display and/or may be stored on a programmable storage medium.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08027273&OS=08027273&RS=08027273
owner: The United States of America as represented by the Secretary of the Army
number: 08027273
owner_city: Washington
owner_country: US
publication_date: 20080924
---
The embodiments described herein may be manufactured used and or licensed by or for the United States Government without the payment of royalties hereon.

The present invention relates to networked communications such as ad hoc networks and more particularly to mobile ad hoc networks MANET .

There are three different ways to conduct a MANET experiment 1 actual field exercises 2 simulation and 3 emulation. An actual field exercise is the most expensive one in terms of time effort resources and human power. Simulation provides a controllable repeatable virtual environment in which theoretical concepts are implemented and evaluated. Emulation is between the two it also provides a controllable and repeatable environment in which one can conduct and repeat experimentation in a physical test bed not in a virtual environment as simulation does.

The invention is intended mainly to support emulation although its outputs can also be used to feed a simulation tool e.g. the time stamped positions or also known as mobility traces or traces or a mobility scenario or simply just scenario. Both simulation and emulation requires a scenario which is a mobility scenario for the mobile ad hoc network emulator MANE test bed or a set of topology definitions for an emulation test bed that uses a packet filtering tool to create virtual topologies in a physical network such as the TEALab test bed. The invention is intended mainly to support the MANE and the TEALab test beds. The functionality of the two test beds are described in subsequent sections.

The present invention relates to providing high quality information assurance in a networking environment. Military tactical communications require network security precautions that are distinct from the commercial world. However the underlying characteristic is the fluid nature of the environment since network participants are mobile. Group make up varies over time since units join and leave on an ad hoc basis. Thus communication links vary both quality and reach. Unit responsibilities also shift as mission requirements and battlefield circumstances dictate. There may be no fixed infrastructure that can be relied upon. In addition equipment may be captured by adversaries who are highly motivated extremely skilled and well funded. Security in such an environment is vital to the network warfare operation.

The present invention relates to the emulation and simulation of wireless mobile networks. As used herein a network topology is a pattern of links connecting pairs of nodes of a network. A node is a device that is connected as part of a computer network and a data link is the means of connecting. It can be appreciated that in the course of movement of wireless operators the ability of the operators to communicate with one another is of paramount importance. Rather than carry out the network capability measurements during actual real world experimental work to determine the communication links created or destroyed as the operators move in predetermined areas simulation programs and emulation test beds are used to predict the networking capabilities.

A more complete description of the characteristics of Mobile Ad Hoc Networks is found in RFC 2501 http www.ietf.org rfc rfc2501.txt entitled Mobile Ad hoc Networking MANET Routing Protocol Performance Issues and Evaluation Considerations by S. Corson of University of Maryland and J. Macker of Naval Research Laboratory January 1999. As stated therein a MANET consists of mobile platforms e.g. a router with multiple hosts and wireless communications devices herein simply referred to as nodes which are free to move about arbitrarily. The nodes may be located in or on airplanes ships trucks cars perhaps even on people or very small devices and there may be multiple hosts per router. A MANET is an autonomous system of mobile nodes. The system may operate in isolation or may have gateways to and interface with a fixed network. In the latter operational mode it is typically envisioned to operate as a stub network connecting to a fixed internetwork. Stub networks carry traffic originating at and or destined for internal nodes but do not permit exogenous traffic to transit through the stub network. MANET nodes are equipped with wireless transmitters and receivers using antennas which may be omnidirectional broadcast highly directional point to point possibly steerable or some combination thereof. At a given point in time depending on the nodes positions and their transmitter and receiver coverage patterns transmission power levels and co channel interference levels a wireless connectivity in the form of a random multihop graph or ad hoc network exists between the nodes. This ad hoc topology may change with time as the nodes move or adjust their transmission and reception parameters.

The characteristics of MANETs include 1 Dynamic topologies due to arbitrary movement of nodes which arbitrarily changes network topology which may consist of both bidirectional and unidirectional links 2 Bandwidth constrained variable capacity links and the realized throughput of wireless communications when taking into consideration the effects of multiple access fading noise interference conditions etc. is often much less than a radio s maximum transmission rate 3 Energy constrained operation due to reliance at least in part on batteries or the like requiring optimal energy conservation 4 Limited physical security due to the increased possibility of eavesdropping spoofing and denial of service attack such that decentralized nature of network control in MANETs provides additional robustness against the single points of failure of more centralized approaches. In addition MANETS may be tens or hundreds of nodes per routing area.

Simulation is a leading way to research solutions to difficult Mobile Ad Hoc Networks MANETs which are wireless mobile nodes that cooperatively form a network without reliance on an existing infrastructure. There is no coordination or configuration prior to setup of a MANET. Routing packets are used in an environment where the topology is changing frequently creating wireless communications issues and resource issues such as limited power and storage.

There are several factors involved in conducting trustworthy simulation based research. Generally there are four areas of credibility in research. 1. Repeatable A fellow researcher should be able to repeat the results for his her own satisfaction future reviews or further development. 2. Unbiased The results must not be specific to the scenario used in the experiment. 3. Rigorous The scenarios and conditions used to test the experiment must truly exercise the aspect of MANETs being studied. 4. Statistically sound The execution and analysis of the experiment must be based on mathematical principles.

Executing the simulation can require a lot of time and effort. Therefore it is important to conduct the execution portion correctly and expediently. In a publication entitled MANET Simulation Studies The Incredibles several common simulation pitfalls were enumerated. Simulation setup involves determining a type terminating or steady state b model validation verification c PRNG Validation Verification PNRG is a package for maintaining and visualizing network data particularly historical trend analysis of network resources d variable definitions hundreds of configurable variables may be used during an execution in order to meet general wired and wireless network simulator requirements and e scenario development using the correct parameters including the number of nodes the size of the simulation area and the transmission range of nodes used in the simulations . Simulation execution involves a setting the PRNG seed b scenario initialization and c metric collection. Output analysis requires a analysis of proper size of data sets b statistical analysis and c confidence intervals.

The present invention is directed to a methodology of custom designing network topology and creating time stamped position data to drive inter alia the Mobile Ad hoc Network Emulator MANE system consisting of hardware and software. Downloadable examples of the MANE software are presented at http downloads.pf.itd.nrl.navy.mil mane which are hereby incorporated by reference as though fully rewritten herein. The MANE emulator is a mobile ad hoc network emulator that provides the ability to emulate dynamic link connectivity between emulated mobile nodes in a laboratory test bed. MANE runs on a network of servers each of which hosts a number of client test nodes TNs as shown in . The servers LAN approach support emulation scalability. It is based upon motion interface upon global positioning system GPS reference location data so that the same test tools methods and tracing tools can be used in the real world test with actual working GPS components.

MANE runs on a network of servers each of which hosts a number of client test nodes TNs . The servers LAN approach support emulation scalability see . Although MANE runs on a Linux operating system the overall design accommodates heterogeneous operating systems among the TNs. Furthermore MANE is protocol independent and can support multiple protocols e.g. IPv4 IPv6 ARP etc. . The MANE connectivity model provides packet dropping based on the range between individual nodes the transmission power and packet size.

 1 Forwarding Engine This component runs on the MANE servers. It sniffs packets on the servers interfaces and forwards them to the all other servers interfaces. The forwarding engine interconnects all the emulated mobile nodes TNs .

 2 Range Model This component runs on the MANE servers. It generates the connectivity matrix that determines which packets get dropped. The range model works in conjunction with the forwarding engine and creates a dynamic connectivity model on the servers.

 3 GPS Emulator This component reads position information from scripts for each emulated mobile node and multicasts the positions out to the MANE forwarding engine range model and to the individual emulated nodes. There is one GPS emulator in MANE and it resides either on the test bed control node or on one of the MANE servers.

 4 GPS Daemon This component resides on each of the emulated mobile nodes. It listens to the GPS emulator multicasts and keeps track of the node position. It can supply GPS position information to applications that require it.

 5 TN Packet Treatment This component resides on each of the emulated mobile nodes. It emulates the effects of a simple Media Access Control MAC scheme by limiting the total amount of inbound and outbound traffic at a test node. This module creates a virtual interface over which all MANET communications must take place. Each of the components obtains testbed configuration information from a common configuration file which by default is located in etc mane.config.

The present invention is also directed to a methodology of creating an ordered list of textual topology definitions to drive inter alia the TEALab test bed. For a more thorough description of this test bed see TEALab A Testbed for Ad hoc Networking Security Research by Mike Little Telcordia Technologies Inc. Piscataway N.J. 08854 formerly known as Bellcore which had been part of Bell Labs before the breakup of AT T . At Telcordia the Tactical Environment Assurance Laboratory TEALab created an environment for studying network attacks and attack recognition in ad hoc networking environments. The TEALab environment consists of a collection of mobile ad hoc network MANET hosts interconnected via a common networking environment such as an Ethernet wired or wireless . Each MANET host can be viewed as consisting of four distinct layers link layer communications network to link layer filtering network and transport layer communications and applications. The link layer communications provides the physical and link layer protocols required to participate with the common networking environment. In a TEALab environment this is an Ethernet protocol suite. The network to link layer filtering provides the functionality that controls whether one host will receive packets from another host. This is accomplished by the use of the netfilter iptables system software. This software provides a set of hooks inside a Linux operating system that allow execution of software rules whenever network packets traverse the communications interface. The TEALab employs source filtering rules to restrict the in flow of packets from hosts that are not considered to be next hop neighbors. As such the environment can be viewed as one in which each host maintains a programmable switch between itself and the other hosts. The TEALab environment employs a Topology Scenario Management program to manipulate these filtering rules in real time to emulate inter nodal visibility. This program reads scenario scripts that define the network topology changes it may undergo and when those changes occur. Thus both static and dynamic topologies can be defined. These topologies can be fully connected. For further details see TEALab A Testbed for Ad hoc Networking Security Research. 

Studies of MANET have been conducted using mobility pattern data which can be generated by a computer program implementing a mobility model. However frequently the data is purely time stamped positions lacking information about the links among the nodes and thus insufficiently describe a static or dynamic topology.

Having a desirable dynamic topology meeting a specific need is important in the research development test and evaluation of ad hoc networks. During early phases of development having a controllable specific topology is highly desirable because a new technique algorithm or mechanism that is being developed may not be ready to operate in any topology. During the last phases of the development having a different topology is also desirable because it can be used to test and evaluate a newly developed technology in order to corroborate its performance claims. Accordingly there exists a need for visually designing editing manipulating verifying and animating desired network topologies and creating desired mobility pattern data of a mobile ad hoc network MANET . A desired network topology of a MANET system is a time dependent geometrical shape and size of the network that meets at least the following requirements of a research need 

Desired mobility pattern data are time stamped mobility traces that define a specific mobility scenario meeting a specific research need.

The present invention relates to networked communications such as ad hoc networks and more particularly to visually designing editing manipulating verifying and or animating specific virtual network topologies and creating desired mobility pattern data of a mobile ad hoc network MANET . One preferred embodiment of the present invention characterized as the ARL Topodef tool is a graphical system and method for creating inter alia virtual network topologies. The preferred embodiment provides the end user an easy way to create a static or dynamic network topology that fits a specific research need. The preferred embodiment of the present invention utilizes mobility models and propagation models similar to but distinguishable from a modeling tool. The preferred embodiment provides the user a way to experiment with the model parameters similar to but distinguishable from a traditional simulation tool. The preferred embodiment of the present invention uses models to provide the user a convenient way to create a dynamic topology expeditiously and to graphically alter it in order to fit a specific research need. The present invention is direct to a method and system for driving network emulation simulation or modeling software such as for example MANE or TEALab by creating virtual network topologies expeditiously for research purposes. The present invention circumvents the need for extensive and repetitious modeling emulation and or simulation exercises by creating specific precise dynamic topologies or predefined data for modeling emulation and or simulation software such as MANE or TEALab. The dynamic topologies and or predefined data can be inputted into modeling emulation and or simulation software to research and or determine inter alia the operational capabilities of the software while circumventing the need for extensive testing and or operational runs.

The embodiments herein approach the drawbacks of the conventional approaches in two different ways to create a desired scenario. The first approach accomplishes the objective revolutionarily by completing the mobility data generation process in reverse order 1 first graphically designing a desired dynamic topology then 2 generating the mobility pattern data corresponding to the design. The second approach accomplishes the objective evolutionarily by first 1 simultaneously displaying and generating a dynamic scenario second 2 visually editing and manipulating the graphical elements depicting a topology to produce a desired result and then 3 generating the mobility pattern data corresponding to the design.

One preferred embodiment of the present invention stores the specifications of each topology in a mutable composite data structure called a list which is an ordered collection of designed topologies. Within the context of the embodiments herein the list can be embodied as an electronic flipbook in which every page has the required specifications of a topology. Each topology is associated with an ordinal number called an index indicating its ordered position within the list. The index is used to select a topology in the list. Once a topology is saved in the list it can be retrieved modified updated removed from the list or relocated to a different location within the list. An n topology list can be permuted to create n factorial n different scenarios.

In one preferred embodiment an animation of the dynamically changing topologies can be accomplished by successively displaying each topology in the list automatically or manually. The topological specifications in the list are used to generate textual definitions of a dynamic scenario using a scenario definition language SDL that has its origin from the visibility commands embedded in the visibility database of a communications scenario generator. The rules for generating the scenario definitions are described in the Appendix A herein. The embodiments herein can also be used for creating topologies that are suitable for the study of other types of ad hoc networks including sensor networks wireless mesh networks cellular and peer to peer P2P networks.

These and other aspects of the embodiments herein will be better appreciated and understood when considered in conjunction with the following description and the accompanying drawings. It should be understood however that the following descriptions while indicating preferred embodiments and numerous specific details thereof are given by way of illustration and not of limitation. Many changes and modifications may be made within the scope of the embodiments herein without departing from the spirit thereof and the embodiments herein include all such modifications.

The present invention presents a method for graphically animating and editing mobility traces of a mobile ad hoc network MANET and for transforming them into a dynamic topology. The employed mobility traces comprise time stamped positions of each participating node in a MANET and can be structured differently in diverse file formats and from different sources. The files storing data of mobility traces may for example comprise tick files created by Sparta Inc. Qualnet Glomosim files generated from the Generic Mobility Simulation Framework GMSF of the Swiss Federal Institute of Technology Zurich ETH Zurich AHAS files obtained from field exercises and or created files storing specifications for creating an emulated topology.

The presented invention enables the use of externally generated mobility traces to serve three major research purposes 1 providing graphical aid in understanding movement patterns 2 animating a dynamic network topology and 3 creating derivatives of the existing traces to fit a particular need using an internally developed Topodef tool. Detailed data structures of the mobility traces and image snapshots of a mobility scenario are described in the following detailed description of preferred embodiments using the preferred methodology leveraging of existing resources and reusing mobility traces. Thus the present invention reduces internal development efforts and enables the try out of mobility scenario developed by others more conveniently.

The embodiments herein and the various features and advantageous details thereof are explained more fully with reference to the non limiting embodiments that are illustrated in the accompanying drawings and detailed in the following description. Descriptions of well known components and processing techniques are omitted so as to not unnecessarily obscure the embodiments herein. The examples used herein are intended merely to facilitate an understanding of ways in which the embodiments herein may be practiced and to further enable those of skill in the art to practice the embodiments herein. Accordingly the examples should not be construed as limiting the scope of the embodiments herein.

The embodiments herein provide a technique for designing topologies for emulating a MANET. The present invention is intended primarily for use in laboratory environments however its use is not limited to laboratories and may be expanded beyond its primary use as a research tool. The present invention was primarily designed to support two different types of emulation test beds the TEALab and the MANE testbeds. However the principles of the present invention can be practiced in a variety of other types of test beds.

The main function of an emulation test bed is to create virtual dynamic network topology using a stationary network. Both the TEALab and MANE test beds are functionally equivalent but architecturally different and require different inputs. The TEALab employs a packet filtering system tool to control the incoming data packet at a given network interface of a test node to determine network connectivity using a set of textual network topology definitions specifying which node is connected to which node.

On the other hand the MANE test bed uses a range model and depends on the distance between two nodes to determine the interconnection between them. The distance is computed using the geographical locations of the two communicating nodes. The present invention is designed and implemented to create a set of time stamped positions of all the participating nodes. Each time stamp is associated with the creation of a topology at that time. A series of time stamped positions is associated with the creation of a virtual dynamic topology of a mobile ad hoc network MANET .

A preferred embodiment of the present invention utilizes the Python programming language to express logical and mathematical operations and the Tkinter graphical user interface GUI modules libraries that come with the utilized language however other program languages could be utilized to implement the principles of the invention. The invention logic of the preferred embodiment relies heavily on the functional features of the GUI especially the exploitation of the user created events.

In a preferred embodiment an event is generated whenever the user presses one of the mouse buttons the left button or the right button. The left button is used 1 to select a graphical object being displayed on the screen and 2 to drag an object on the screen. Dragging is performed by pressing the left button and moving the mouse to another place on the screen. If there is no event then invention enter a waiting state doing nothing but waiting for an event to occur.

In a preferred embodiment the system reacts to each user generated event by binding a special function that is created to handle a particular event. The name of the special function is registered with the GUI system telling the system to use the registered function to handle a particular event. The special function is often as a callback function. For example if the onLeftClickReleased function is registered with the system to deal with the releasing of the left mouse button event.

The event driven programming technique is widely used to develop GUI equipped computer applications. For a computer application that does not have a GUI it often has a flow of actions from top to bottom ending a session. A GUI application often needs a user generated event to perform a certain action.

Whenever an event occurs the employed GUI system invokes the callback function and pass an event object whose attributes include the location on the canvas where the event occurred i.e. event.x event.y. contains flowcharts of some event handling activities.

The manual creation of a network topology is intended to support emulation test beds that use a packet filtering system tool to control the incoming data packet at a given network interface of a test node e.g. the TEALab test bed. This type of test bed is capable of creating a data link between any pair of two nodes regardless of the distance between them. The mobility traces can be extracted from the defined topology and used for other types of test beds however the interconnection links between any two nodes may be different depending on whether the test bed would consider the distance between them. For example the distance between any two nodes is a dependent variable in the MANE test bed therefore although the mobility traces can be reproduced in the MANE test bed the interconnection links may be different depending how the manual creation of the links was accomplished.

The manual creation of a dynamic topology can be accomplished using the graphical display shown in wherein choosing the option to create arbitrary links is accomplished in a window W by the selection of manually drawn as opposed to range from drop down menu M .

The sequential actions taken in a preferred embodiment of the present invention for the above actions are described briefly below 

 A The function method onSelected is executed when the clicking of the left mouse button event occurs.

 B The function then calls the function get selected icon image to retrieve the information about the selected icon.

 E Then it sets its operational state to be NODE CREATION or ASYM LINK CREATION or SYM LINK CREATION depending whether the selected icon represents a Node or a Symmetric Link or a Bidirectional Link.

In a preferred embodiment of the present invention the creation of a node is accomplished by simply moving the mouse cursor to the screen canvas and clicking the left mouse button at the desired cursor location. When the left mouse button is released the selected node icon is placed on the screen at the current cursor location. The process is repeated until the number of nodes reaches the desired value.

The computer code that handles the creation of a node is part of the code that deals with the user created event releasing the left mouse button. Thus the code is part of the onLeftClickReleased function which calls the node create function to create a node.

The node create function then sets up a set of attributes before calling the node instantiate function to actually create a node. The attributes include the pixel locations of the mouse cursor when the event occurred event.x event.y . The program then later transforms the pixel coordinates into the world coordinates and a textual definition defining the location of a node e.g. on position 44.4744564699 33.3281811324 node is located at longitude 44.4744564699 and latitude 33.3281811324 .

The computer listing for implementing the above node creation functions is set forth in APPENDIX A 2 under NODE CREATION

In a preferred embodiment of the present invention the creation of a link consists of performing two steps 

 A Step 1 Selecting an icon representing a unidirectional asymmetric link or a bidirectional symmetric link.

 B Step 2 dragging the mouse cursor between two nodes. The dragging is performed by pressing and holding the left mouse button moving the cursor from one node to the other node and then releasing the left mouse button to complete the dragging.

An asymmetric link is represented by a single headed arrow . The head of the arrow rests on the outer edge of the icon representing the receiving node and its tail rest on that of the transmitting node as shown in . The invention automatically transforms this graphical representation into the textual topology definitions on 01 accept 02 inbound and on 02 deny 01 inbound connoting that node can receiving data transmitted by node but node cannot receive data transmitted by node . is a graphical depiction of an asymmetric link.

The manual creation of a link is repeated until it meets a specific design. For example the number of links connected to a specific node. Each time a link is created a MouseDragging event is generated and the invention handles that event by drawing a single headed arrow or a double headed arrow between the two communicating nodes depending on whether the selected icon image representing the type of the link asymmetric or symmetric.

The manual creation of a network topology is accomplished by manually creating the number of nodes and the number of links as described in the above sections. The creation of topology is completed by exercising an option to assign a value indicating the lifetime duration of the topology. The default value is one second which is the lowest value. The assignment is done by typing in an integer into the entry box showing the lifetime of a topology in seconds as indicated in the .

The automatic node and link creation topology creation option requires the option Range Dependent be selected as shown in from menu M .

The automatic creation of a dynamic topology of a MANET system relies on mathematical models to generate time related positions of the participating nodes and to determine the existence of a link between any pair of two nodes.

To generate the required time related positions the preferred embodiment 1 uses a widely used model called the Random Walk model and 2 provides the user with a graphical way to specify a path for a node to travel. Additional mobility models can be integrated into the preferred embodiment if desired.

To determine the existence of a link between any pair of two nodes the preferred embodiment uses two different types signal propagation models 1 the free space loss model and 2 the fixed range model. Incorporation of additional propagation models is optional if desired. Random Walk Model

The implementation of the Random Walk model utilizes three main functions data generator node create and create topology. The data generator function is the main driver. It performs the following actions 

When the User Defined Path option is selected by the user the invention performs the following actions 

 A Pop up a dialog window showing the current values of the parameters that option needs to generate a scenario as shown in the .

The user defines a path by first selecting the Path Define menu option. The pop up menu will then disappear immediate after the user selected the option. The user then moves the mouse cursor to a location and pressing the left button to create a set of points along the defined path. The newly created path for node is show in . Each node can have its own path.

To generate a scenario the user then moves the cursor to a node that has a defined path e.g. node as shown in then pressing the right mouse button to pop up a menu options. The user then selects the option Path Follow 

Once the Path Follow option is selected the invention then uses the given speed to travel along the path. Each movement of the node involves the calculation of distances between the moving node and its neighbors. The distances are then used to determine the possible existence of a communication link. The source code is included in APPENDIX A 4.

The existence of a communication link between two nodes is determined by the distance between them and the application of a radio frequency signal propagation model. The distance calculation relies on an existing geodesic distance calculation library called Geodesy Foundation Class which is available on the Web http www.samblackburn.com gfc .

The radio frequency signal propagation model is used in the invention to derive the maximum range that a radio can transmit its signal. Two models are now used in the invention 1 The free space loss FSL model and 2 the fixed range model. The invention is designed to accommodate additional propagation models in the future.

When the FSL model is selected it pops up a dialog window for the user to see the current values of the parameters and to change them if necessary. A screenshot of the dialog window is shown in wherein name value pairs of the free space loss model are generated.

The calculation of the maximum transmission range depends on the selected propagation model. For example the free space loss model uses the following formula max range speed of light pow pow 4.0 frequency 

No calculation of the maximum transmission range is required for the fixed range model it uses the user given value of the maximum range e.g max range 2000 meters as shown in depicting the entry box for entering the maximum range of the fixed range model.

The automatic determination of a communication link between two nodes is determined by the following steps 

The automatic determination of the interconnection links of an N node mobile network is repeatedly calculated N N 1 times e.g. if the network has 100 nodes N 100 then there are 100 99 decisions to make. If a mobility scenario consists of 1000 topologies then there will be 1000 100 99 decisions to make. The complexity of the link calculation is a quadratic function e.g doubling the size of network quadruples the number of times a link calculation and decision has to be made. Without the invention manually defining a topology is practical only for a small network consisting of a few nodes. Doing so for a large network would be impractical and error prone. The invention obviates the manual process.

This mode is a mixed between manual and automatic modes. The automatic generation of nodes uses a mobility model e.g. the random walk or the user defined path model which has been described in the preceding paragraphs.

The automatic creation of interconnection links uses a radio frequency signal propagation model e.g. the FSL model or the fixed range model which has been described in the preceding paragraphs.

The invention provides the user with GUI to select this operational mode. This mode requires that the user to perform the following actions 

Navigating to a topology of interest to create the interconnection links manually by using one of the following features in the tool box which is illustrated in illustrating a navigation tool for traversing a list of topologies.

The invention provides the user a way to create the links automatically by including a propagation model. It also provides a GUI to select the option Range Dependent in the Link pull down menu and a radio signal propagation model as shown in wherein the selection of the option to generate interconnections links is illustrated. shows the selection of a propagation model.

The operation of the propagation models are described in the section entitled Automatic Link Creation and Destruction which was described earlier.

The manual creation of mobile nodes is also described earlier in the section entitled Node Creation subsection of the Manual Mode section.

The duration lifetime of the current topology is set to 1 second by default but it can be changed by the user.

Each completed topology must be added to the list of topologies the scenario. i.e. using the Python programming language the computer code is illustrated below 

The graphical editing is a manual process using GUI and a computer mouse. The process is intended for custom designing a specific topology consisting of exact number of nodes located at exact locations and exact number of links. The design criteria are driven by the research needs. The following editing changes affect the currently displayed topology changes to the size of the network relocation of a node and changes to the number of interconnection links.

The size of the network changes when a new node is created or an existing node is removed from the current network.

If a new node is created it is added to the topology. Internal implementation topology.append new node .

The invention provides a menu of options for the user to perform on a node. Pressing the right mouse button while the computer cursor is resting on the icon representing the target node opens the menu as shown in which depicts the selecting of the Delete Node option to delete an existing node.

Selecting the Delete Node menu item removes the target node from the current topology. The following main actions are performed by the program 

Node relocation affects the network topology because changes to the location of the participating node which affect the distance between the moving node and its neighbors. When the distance changes then the number of links may change also depending on the currently selected operation mode i.e. the automatic or the manual creation of links.

The preferred embodiment of the present invention provides the user a graphical way to relocate a node pointing the cursor at the target node then dragging it to a new location. Pointing refers to the process of moving the computer cursor to the target node. Dragging is the process of pressing the left mouse button and moving the cursor. Doing so creates an event called which occurs when the left button is pressed and the computer mouse is moved by the user. The invention registers this event to the employed GUI system and binds it with an internal function called onLeftMotion to handle the relocation event. When this event occurs the GUI system calls the event handler the onLeftMotion function with an event object which has the location of the cursor event.x event.y when the event occurs. The onLeftMotion function performs the following main actions 

Changes to the number of interconnection links link density can be performed in Manual Mode or Automatic Mode. If the link creation mode is manual then the following two actions affect the number of links.

The manual process for create a new link has been described in previous sections the dragging of an arrow linking between two nodes .

The preferred embodiment provides a pop up menu to delete a link. The menu appears when the mouse cursor is resting on top of the target link and the right button of the mouse is pressed. shows the menu for selecting the delete link menu item to delete an existing link.

When the Delete Link menu item is chosen the preferred embodiment of the invention utilizes the onLinkDelete function to deal with the selected menu item. The function performs the following actions 

Once the Set Attributes menu item is selected a dialog window appears with name value pairs for the user to change set as shown in which illustrates attributes of a mobile node.

If the free space loss propagation model is used then changing the value of one or more of the following parameters will affect the computed range of the transmitting radio 

Immediately after the OK button is pressed the preferred embodiment of the present invention then starts re calculating the maximum range to determine the existence of a link between the selected node and its neighbors. Any changes to the number of links are also visually updated. The automatic link creation update is described in the Automatic Mode Link Creation section.

A mobility scenario is implemented as an ordered list of network topologies. The invention implements the scenario by utilizing the list data structure of the Python computer programming language. The list data structure is a compound data type. It is used to group multiple values. It can be safely called as a resizable array in other computer languages. The invention also utilizes the list data structure to implement a network topology. The implementation of a topology of an N node network at time t and a scenario or a dynamic topology consisting of n topologies is summarized below.

Each node object tracks a list of neighboring nodes from which it can receive their transmitted signal.

Scenario manipulation refers to the process of 1 re arranging the order of the topologies in the scenario or 2 changing the size of the scenario or equivalently changing the number of network topologies in the list .

Re arranging the order of the topologies in the scenario is accomplished by the cut and paste operation consisting of cutting the currently displayed topology and pasting it at a different location in the scenario. This is also called permutation. There n different ways to re arrange the order of the topologies in an n topology scenario.

Changing the size of the scenario is accomplished by deleting the currently displayed topology or designing a new one and inserting it at the end of the scenario.

Manipulation of a scenario often combines both processes re arranging the order and changing the size of the scenario.

The preferred embodiment of the present invention provides graphical user interfaces to display and to manipulate a certain topology. The screenshot shown below includes two different toolsets as shown in which illustrates tools for manipulating a scenario and selecting a topology to display. The one on the left is used for the manipulation of the designed scenario the one on the right is for navigating and displaying a topology being stored in the scenario.

The descriptions of the encircled buttons on the right of have been previously explained section Error Reference source not found. . The paragraphs that follow explain the behavior and the implementation of the encircled buttons on the left of the above figure. All actions performed by the user affect the currently displayed topology and the index is always checked for its validity. The index is valid when its value is greater than or equal to zero and less than the length of the scenario 0

The Cut Button. Pressing this button removes the currently displayed topology and erases its graphical elements being displayed on the screen. The removed topology is then saved internally. For example if the order of the currently displayed topology is the 20topology in the scenario the value of index is 19 then pressing the Cut button removes it from the scenario and displays the succeeding topology the 21topology which now becomes the 20topology. The implementation is described below 

The Update Button. Pressing this button transforms the graphical displays of a topology into the definition of the topology and stores the new definitions in the scenario. The implementation is described below 

The Copy Button. Pressing this button copies the currently displayed topology into an internal storage. The implementation steps are described below 

The Paste Button. Pressing this button inserts the saved topology into the scenario at the location where it is before the current location in the scenario and displays the newly inserted topology on the screen. The implementation steps are described below 

The Append Button. Pressing this button inserts the currently displayed topology into the end of the scenario 

The Delete Button. Pressing this button removes the currently displayed topology from the list and displays the succeeding topology on the screen.

When the preferred embodiment of the present invention is first started by its user it displays a tool box and a canvas. The tool box has rows of icon images representing a node a link and editing functions. The canvas is used to display graphical elements representing a topology and for handling graphical editing events.

Upon displaying the two windows it then waits for an event to occur. If the occurring event is an Exit event then it stops functioning and exits otherwise it executes the function that has been registered with the GUI system to handle other events 1 as shown in .

In where similar reference characters denote corresponding features consistently throughout the figures preferred embodiments are illustrated. For the purposes of description the technique for designing topologies according to the embodiments herein is described as occurring in two existing testbeds the TEALab and the Mobile Ad hoc Network Emulator MANE . The two testbed environments are architecturally different although they both emulate the movement of mobile nodes effectively creating a virtual dynamic topology of a MANET under test.

The TEAlab testbed requires the running of a network packet filtering tool called iptables at each participating node. At run time each node reads and follows a list of textual directives to determine whether it would accept or reject an inbound data packet arriving at its network interface by executing a computer program called topology scenario manager TSM . The TSM tool interprets and translates the directives into iptables packet filtering commands. These topology directives enable the creation of any logical topology regardless of the distance between any two nodes.

The topology directives can be manually created using a text editor or automatically generated using the embodiments herein. The manual process is suitable for emulating a small network comprising of a few nodes however to emulate a large network the manual process becomes impractical because the number of directives grows exponentially with the size of the network.

The complexity of writing the directives in terms of the number of lines is a quadratic function of the size of a network determined by the number of the participating nodes. The complexity increases proportionally to the square of the size of the network because each node in the network must decide whether it would accept an inbound packet from the other nodes. Inspecting editing modifying and verifying the textual directives all are a significant task.

However using the embodiments herein the textual directives are automatically generated and the topology is visually designed inspected and verified. The embodiments herein may be embodied as an auto code generator capable of transforming the graphical representation of a dynamic topology into sequences of textual directives describing a dynamic scenario. In doing so the embodiments herein also automatically manages the complexity associated with the manual writing process effectively enabling the user to focus on the graphical design of a topology rather than on the writing of directives.

The MANE testbed employs a set of servers to control the connectivity. Each server is equipped with multiple network interface cards. The servers listen and capture the periodically broadcasted geographical position location information of each node and use them to compute the distance between each pair of nodes. The servers then compare computed distance with the radio transmission range to determine whether a communication link should exist between the two nodes. If the computed distance is within the radio transmission range then the servers establish a communication link between the two nodes.

Similar to the creation of the topology definition directives for the TEAlab testbed manually creating the time dependent positions of each node is feasible but impractical for a large network or for a lengthy scenario even through the complexity associated with the process increases linearly with the size of the network. Each addition of a new node requires a corresponding file called a log file having a list of time stamped geographical positions e.g. time 18 10 23.493480 position 77.025032 43.289992 0. Visualizing a scenario often requires the use of the real time JMAP visualization tool running concurrently with the emulation of a scenario in the MANE environment.

Using the embodiments herein visualization is automatically and simultaneously performed while designing a scenario. The embodiments herein are also a rehearsal tool providing a method for visually inspecting and evaluating a scenario before actual emulation. Therefore the embodiments herein save resources and enhance productivity. Once a scenario design has been completed and verified it is used to generate the log files readily for emulation purposes. Besides providing a way to visually create a desired stationary or dynamic topology of an emulated ad hoc network the embodiments herein can be used as a convenient and effective tool for demonstration and training purposes.

The embodiments herein enable the rapid design and generation of specific MANET topologies to support emulation. The embodiments herein provide an integrated graphical design and animation tool that provides a user with a method for visually creating editing verifying and animating a dynamic topology of an ad hoc network. Furthermore the embodiments herein offers the user an unmatched method by which a dynamic topology of an ad hoc network can be visually created and automatically transformed into textual descriptions of a desired scenario and mobility patterns.

A set of editing buttons Copy Delete Cut Paste Update and Append is used to edit the internal data structure storing the list of the topologies being designed. The Copy button copies and saves the descriptions of the currently displayed topology. The Delete button removes the currently displayed topology from the list. The Cut button copies the descriptions of the currently displayed topology then remove it from the list. The Paste button displays the saved copy of a topology creates a new topology and inserts it into the list at the current ordinal position. The Update button updates the internal data storage to reflect any changes in the currently displayed topology. The Append button creates a new topology at the end of the list by appending the descriptions of the currently displayed topology.

A set of navigating buttons is used for the visualization of each topology being stored in the internal list. Pressing the button displays the first topology. Pressing the button displays the succeeding topologies or the last one if it has no successor. Pressing the button displays the last topology. Pressing the Play button changes its label to Stop and animates the sequences of dynamic topologies. Pressing the Stop button ends the current animation and changes the label to Play.

The row containing items has three different functions. The name of a scenario file and the directory containing mobility pattern files is given in box . The ordinal number of a topology in the internal list is displayed or entered in box . A numerical value indicating the time duration of the currently displayed topology can be entered into box as the number of seconds. The time duration indicates the time interval between the currently displayed topology and the next one. The time duration is used for animating purposes and for emulating the rate at which a topology of a MANET changes.

A set of buttons Save Open . . . Preview and Save As . . . relates to a scenario file. Pressing the Save button creates a scenario file and mobility pattern files in a predetermined directory called sdf. Pressing the Save As . . . button opens up an ephemeral dialog window in which the file name of a new scenario file is typed. The scenario is then saved to the new scenario file. Each time a scenario is save to a file the time stamped positions of each node are extracted from the scenario and saved to a file whose name is the name of the participating node. Pressing the Open . . . button displays an ephemeral dialog window showing a list of existing scenario files from which one can be selected. The contents of the selected file are then loaded into the internal list of topologies replacing the old data if they exist. Pressing the Preview button sequentially loads every available scenario file being stored in the sdf directory and then animates the loaded scenario as fast as the host computer can perform by ignoring the time duration of each topology.

A row of menus from which a functional feature can be selected is laid out horizontally. A drawing area shown with an optional background image is used to display the topologies . Some of the functional features in menus are shown in and described below. shows the menu items of three pull down menus from which a functional feature is selected. The Data menu shows two different ways to generate a mobility scenario either by automatically applying the random walk model or by manually defining a path for each mobile node to travel. The generated scenario data can be subsequently edited and manipulated to produce a desired result. Additional implementation of mobility models may be implemented and listed in this menu in the future.

The Options menu has two options for establishing a link between any two nodes a automatically creating a link between any two nodes by applying the radio propagation model selected in menus or b manually creating an arbitrary link between any two nodes regardless of their distance by dragging the cursor. The Models menu shows a list of radio propagation models to be used for the automatic establishment of a link between any two nodes. The free space loss FSL radio propagation model is now being used in the example shown in .

Clicking the right button of a pointing device not shown while the screen cursor is positioned at the location of a targeted link right clicking a link displays a menu of actions from which one can be selected and performed on the target link. Changing the color or defining the error rate of a link does not change the shape and size of the current topology deleting a link does. Similarly right clicking a node displays an ephemeral window showing a menu of actions from which one can be selected and performed on the targeted node. Changing the visual information of an existing node such as its iconographic image or the color of its name does not affect the properties of the current topology deleting or relocating the visual information does affect the properties of the current topology.

Manually creating a link between any two nodes is also a two step process 1 selecting an image representing a unidirectional or bidirectional link and 2 dragging the cursor from the sink node to the source node to create an arrow. This feature is applicable to the generation of topology directives for the TEAlab testbed therefore the focus of the performing action is on the sink node because it is the host that will execute the directive on accept during emulation.

In the automatic mode a dynamic scenario can be quickly created and displayed on the screen by applying a mobility model and a range model . The selected mobility model generates the positions of the participating nodes over a user specified time period. The selected range model calculates and determines the interconnections among the nodes. Once the scenario has been generated it can be manually or automatically animated for visual editing inspection and verification.

The general process of designing a dynamic scenario using the embodiments herein comprises creating a series of discrete topologies meeting a specific need for a certain time. Each topology is a spatial temporal snapshot of a dynamic MANET taken at a particular time. According to the concept of a scenario is implemented in the embodiments herein as a mutable ordered list of topologies Scenario topo topo . . . topo topo . A set of m different scenarios can be created by permuting an existing m topology scenario using the cut and paste operation according to the embodiments herein. Thus a new scenario can be formed by simply re arranging the order of the topologies in the list saving the designer time and effort. The concept of a topology is implemented in the embodiments herein according to as a dynamic set of n participating nodes being placed at specific locations on the screen for a specific time Topology node node. . . node node . The number of participating nodes n can fluctuate among the topologies and the order of the nodes in the set is inconsequential. Each node maintains and tracks a dynamic list of neighboring nodes from which it can receive signals.

Textual descriptions of a topology have three categories of directives specifying 1 the positions of each node 2 the links between each pair of nodes and 3 duration. Notation wise the descriptions of a topology comprises of sequences of zero or more position and link directives and a required duration directive 

The duration directive specifies the length of time during which the topology remains stationary it is considered the rate at which a topology changes. The shorter the duration is specified the faster the dynamic topology changes. The shortest duration is one second which is the default.

Two mobility models and two radio signal propagation models are built into the system provided by the embodiments herein. The two existing mobility models include the random walk model and the user defined path model. The random walk model enables each participating node to travel independently at random velocity. The GUI allows a user to enter the parameter values necessary for generating a dynamic scenario. The parameters include the size of the network the maximum and the minimum traveling speed and direction and the duration of the scenario. The user defined path model enables the user to define a particular path for each node. Once a path has been defined it is used to generate the position locations of the traveling node. From each newly created position location the tool computes the distances to other nodes and determines whether data communication links between the traveling node and other nodes can exist. This model provides a semi automatic way for creating a dynamic scenario. The two radio signal propagation models comprise of a fixed range model and a free space loss FSL model. Both range models implement a maximum distance beyond which no links will exist between any pair of nodes. Accordingly the GUI allows a user to enter appropriate parameter values for the chosen model. The fixed range model uses a user specified value indicating the maximum range e.g. 200 meters. The FSL model uses the well known Friss transmission equation and a set of radio parameter values to compute the maximum transmission range. The values include antenna gains transmission power and reception sensitivity.

The design phase of ends when each topology has been satisfactorily verified through visual inspection manually or automatically. The manual inspection of a topology is accomplished by pressing one of the action buttons that enables the display of a topology being stored internally in an ordered list. The automatic inspection is performed through graphical animation dynamically displaying consecutive topologies in forward or reverse order. The overall design process may be incremental and iterative.

The final step is the generation of scenario files targeted for either or both emulation environments. If the target is the TEAlab environment then the embodiments herein automatically transforms all the internal data representing a scenario into topology directives and saves them in a single file. Alternatively if the target is the MANE environment then the embodiments herein extract only the time dependent position data mobility patterns of each node in the scenario and save them in separate files. An n node network requires n files.

The embodiments herein comprise a topology definition tool that provides a user an innovative and useful method for visually creating a desired scenario for emulating a MANET in laboratory environments. The embodiments herein can also be used for creating experimental topologies of other types of ad hoc networks e.g. a stationary sensor network or a mesh network. The mobility scenario files that the embodiments herein generate can also be used to feed other types of simulation and modeling tools for theoretical analysis. Moreover the embodiments herein provide an auto code generator that automatically and bidirectionally transforms the graphical representation of a topology into their corresponding textual topology directives effectively eliminating the manual process of creating topology definition files. The generator is a mobility pattern generator that can automatically create position log files derived from the designed scenario.

The embodiments herein provide an effective tool for designing a specific topology to meet a specific research need. It is not only a visually appealing tool but also a productivity enhancing tool capable of shortening scenario development time and minimizing design effort. Furthermore the embodiments herein provide an automated complexity management tool that enables topology designers to better focus on designing a topology by freeing the designers from being concerned with the overwhelming details of creating and tracking a dynamic set of links among the participating nodes.

The embodiments herein may be implemented in several environments including 1 Improved radio signal propagation models that take environmental conditions into consideration. This improvement provides a way for determining not only the existence of a data link but also its attributes e.g. error rates transmission rates etc. 2 Multiple radio equipped mobile nodes. This feature provides a more realistic scenario for a military network which often has various types of radios. The end results include a topology that has one set of node positions and multiple sets of communication links. 3 Communication scenarios. This addition generates data communication directives for creating actual communication sessions during emulation. 4 Group mobility. This addition provides another option to automatically generate a dynamic scenario of a mobile tactical force. 5 Incorporation of digital terrain elevation data DTED . The addition will provide a more realistic operational map for the area in which a MANET operates. The data can also be used to feed a radio signal propagation model. 6 Vehicle movement. The routes of two or more vehicles can be represented according to the embodiments herein whereby as the vehicles move on the display screen representing travel along the routes the lines representing the radio transmission connectivity between the two vehicles as well as the other nodes dynamically change as the vehicles or nodes travel along the routes. An extension of this capability could be to monitor two vehicles via GPS and display the radio connectivity on the screen .

The techniques provided by the embodiments herein may be implemented on an integrated circuit chip not shown . The chip design is created in a graphical computer programming language and stored in a computer storage medium such as a disk tape physical hard drive or virtual hard drive such as in a storage access network . If the designer does not fabricate chips or the photolithographic masks used to fabricate chips the designer transmits the resulting design by physical means e.g. by providing a copy of the storage medium storing the design or electronically e.g. through the Internet to such entities directly or indirectly. The stored design is then converted into the appropriate format e.g. GDSII for the fabrication of photolithographic masks which typically include multiple copies of the chip design in question that are to be formed on a wafer. The photolithographic masks are utilized to define areas of the wafer and or the layers thereon to be etched or otherwise processed.

The resulting integrated circuit chips can be distributed by the fabricator in raw wafer form that is as a single wafer that has multiple unpackaged chips as a bare die or in a packaged form. In the latter case the chip is mounted in a single chip package such as a plastic carrier with leads that are affixed to a motherboard or other higher level carrier or in a multichip package such as a ceramic carrier that has either or both surface interconnections or buried interconnections . In any case the chip is then integrated with other chips discrete circuit elements and or other signal processing devices as part of either a an intermediate product such as a motherboard or b an end product. The end product can be any product that includes integrated circuit chips ranging from toys and other low end applications to advanced computer products having a display a keyboard or other input device and a central processor.

The embodiments herein can take the form of an entirely hardware embodiment an entirely software embodiment or an embodiment including both hardware and software elements. The embodiments that are implemented in software include but are not limited to firmware resident software microcode etc.

Furthermore the embodiments herein can take the form of a computer program product accessible from a computer usable or computer readable medium providing program code for use by or in connection with a computer or any instruction execution system. For the purposes of this description a computer usable or computer readable medium can be any apparatus that can comprise store communicate propagate or transport the program for use by or in connection with the instruction execution system apparatus or device.

The medium can be an electronic magnetic optical electromagnetic infrared or semiconductor system or apparatus or device or a propagation medium. Examples of a computer readable medium include a semiconductor or solid state memory magnetic tape a removable computer diskette a random access memory RAM a read only memory ROM a rigid magnetic disk and an optical disk. Current examples of optical disks include compact disk read only memory CD ROM compact disk read write CD R W and DVD.

A data processing system suitable for storing and or executing program code will include at least one processor coupled directly or indirectly to memory elements through a system bus. The memory elements can include local memory employed during actual execution of the program code bulk storage and cache memories which provide temporary storage of at least some program code in order to reduce the number of times code must be retrieved from bulk storage during execution.

Input output I O devices including but not limited to keyboards displays pointing devices etc. can be coupled to the system either directly or through intervening I O controllers. Network adapters may also be coupled to the system to enable the data processing system to become coupled to other data processing systems or remote printers or storage devices through intervening private or public networks. Modems cable modem and Ethernet cards are just a few of the currently available types of network adapters.

A representative hardware environment for practicing the embodiments herein is depicted in . This schematic drawing illustrates a hardware configuration of an information handling computer system in accordance with the embodiments herein. The system comprises at least one processor or central processing unit CPU . The CPUs are interconnected via system bus to various devices such as a random access memory RAM read only memory ROM and an input output I O adapter . The I O adapter can connect to peripheral devices such as disk units and tape drives or other program storage devices that are readable by the system. The system can read the inventive instructions on the program storage devices and follow these instructions to execute the methodology of the embodiments herein. The system further includes a user interface adapter that connects a keyboard mouse speaker microphone and or other user interface devices such as a touch screen device not shown to the bus to gather user input. Additionally a communication adapter connects the bus to a data processing network and a display adapter connects the bus to a display device which may be embodied as an output device such as a monitor printer or transmitter for example.

The embodiments herein may be used in several implementations including 1 visually designing a desired topology or a series of desired topologies of a wireless mobile ad hoc network MANET by placing the participating nodes at desired locations and by arbitrarily drawing a link between any two nodes or by applying a radio propagation model to automatically establish a link connecting any pair of two nodes 2 automatically displaying and creating a random topology or a series of random topologies of a wireless network using mathematical models describing a mobility scenario and a radio propagation model 3 automatically displaying and creating positions of communicating nodes and manually creating arbitrary links to form a topology 4 automatically creating a mobility pattern file consisting of sequential textual descriptions of a single static topology or a dynamic mobility scenario 5 automatically creating a position file consisting of time stamped positions mobility pattern of every participating node connected to a MANET 6 automatically creating a connection matrix also known as adjacency matrix file describing the contiguous structure of a graph that represents the dynamic topologies of a MANET. The matrices are the basis for subsequent computational analysis of the complex structure and behavior of a dynamic MANET 7 visually editing and manipulating an existing a dynamic topology being designed or loaded from an existing file using a graphical user interface 8 visually and automatically managing the complexity of designing and maintaining a mobility scenario file 9 visually conducting a dry run of a dynamic MANET before an actual emulation or simulation 10 visually studying the behavior of a dynamic MANET 11 visually demonstrating a dynamic MANET for educational training and marketing purposes 12 designing desired topologies of other types of ad hoc networks whether the communicating nodes can move whether they are connected to a fixed communications network infrastructure e.g. the Internet or whether they use wireless communications technologies. Some of these ad hoc networks include but are not limited to mesh networks sensor networks and other types of multi hop networks such as cellular and peer to peer P2P networks 13 computationally analyzing the complex structure and behavior of a dynamic MANET and visualizing the results 14 monitoring and visualizing dynamic topologies of a physical MANET 15 simulating and modeling a complex and interwoven MANET including routing mechanisms radio communications capability power and energy conservation and usage and other applicable attributes of a mobile wireless communicating entity 16 simulating modeling and displaying cyber attack and defense scenarios in support of the development of robust effective and efficient defensive information assurance technologies potentially capable of securing protecting and defending a MANET and 17 extending the functional capacity and capability of the invention by providing to other MANET developers an application programming interface API to the computer code that implements the embodiments herein.

Generally the embodiments herein provide a method for permuting an existing dynamic topology to create a new scenario an n topology scenario can be permuted to create n factorial n different scenarios . Moreover the embodiments herein provide a method for graphically editing and manipulating an existing dynamic topology to change its characteristics or to create a new scenario deriving from an existing one. In addition the embodiments herein provide a method for automatically managing the complexity of a mobility scenario file consisting of contiguous textual directives unambiguously specifying the geometric positions of all the participating mobile nodes and their internodal communications links. Also the embodiments herein provide a method for automatically generating executable and consistent textual directives specifying contiguous changing topologies of a MANET. Additionally the embodiments herein provide a method for visually creating a desired scenario and automatically creating a desired mobility pattern scenario. Furthermore the embodiments herein provide a method for visually previewing or rehearsing a dynamic topology before emulating or simulating a MANET. Moreover the embodiments herein provide a method for visually inspecting verifying a dynamic topology by graphical animation.

The foregoing description of the specific embodiments will so fully reveal the general nature of the embodiments herein that others can by applying current knowledge readily modify and or adapt for various applications such specific embodiments without departing from the generic concept and therefore such adaptations and modifications should and are intended to be comprehended within the meaning and range of equivalents of the disclosed embodiments. It is to be understood that the phraseology or terminology employed herein is for the purpose of description and not of limitation. Therefore while the embodiments herein have been described in terms of preferred embodiments those skilled in the art will recognize that the embodiments herein can be practiced with modification within the spirit and scope of the appended claims.

