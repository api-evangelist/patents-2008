---

title: Automatic conversion schema for cached web requests
abstract: Various embodiments are directed to a proxy system for implementing an automatic conversion schema which allows data results from a publishing application to be extracted and displayed by a display application other than the publishing application. In one embodiment, a proxy publisher may receive a request from a publishing application to retrieve a data result from a data server. The request may include a path to the data server and appended publishing parameters. In accordance with the automatic conversion schema, the publishing parameters may comprise decode parameters associated with the publishing application for allowing a display application other than the publishing application to decode variables of the data result and to transform the decoded variables for display. The proxy publisher may cache the request including the appended publishing parameters and retrieve the data result from the data server. The proxy publisher may locally store the data result along with the cached publishing parameters and may respond to a query from a display application for data associated with the publishing application by providing the cached data result and the publishing parameters to the display application. Other embodiments are described and claimed.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08060486&OS=08060486&RS=08060486
owner: Hewlett-Packard Development Company, L.P.
number: 08060486
owner_city: Houston
owner_country: US
publication_date: 20080507
---
This application claims priority to U.S. Provisional Patent Application Ser. No. 60 916 307 which was filed on May 7 2007. This application is related and claims priority to U.S. patent application Ser. No. 11 873 305 titled Offline Automated Proxy Cache for Web Applications which was filed on Oct. 16 2007. This application is related and claims priority to and U.S. patent application Ser. No. 11 612 282 titled System for Running Web Applications Offline and Providing Access to Native Services which was filed on Dec. 18 2006. These applications are incorporated by reference.

In recent years many web based applications have been developed that take advantage of asynchronous data loading techniques e.g. AJAX FLEX etc. . These techniques typically implemented using a combination of technologies such as HTML XHTML XML JavaScript ECMAScript CSS Macromedia Flash etc. enable an application to dynamically update portions of a web page without requiring a reload of the entire page. For example a typical sports related web page may include a dynamic score ticker. When the web page is loaded using a client web browser a script or other small program e.g. JavaScript ECMAScript etc. may be run by the browser that retrieves the latest scores on a periodic basis. As the latest scores are retrieved the score ticker is updated in the browser accordingly without refreshing reloading the web page . In this manner data updates are limited to the content that is actually changed e.g. score information rather than encompassing the contents of the entire web page thereby reducing used bandwidth. Additionally the perceived interactivity and responsiveness of the application may be improved.

One limitation with the asynchronous data loading techniques described above is requiring the client application e.g. web browser to be running for data updates to take place. In the case of the sports web page described above the client web browser must be running in order for the embedded script to download additional updated scores. This poses problems where the application browser must be periodically closed or shut down. For instance handheld mobile devices such as cellular phones personal digital assistants PDAs mobile PCs and the like typically have limited memory or battery power making it difficult to have a large application such as a web browser continuously running. In these situations data updates cannot be downloaded when the application browser is closed. Additionally since the updates are not downloaded they cannot be stored for later use. Thus if the application browser is re launched at a time when network connectivity is unavailable e.g. on an airplane it is not possible to display the most recent information or information that was recent as of the last time network connectivity was available.

Another limitation with the techniques described above is that the data results downloaded by web applications scripted runtimes and Java or Virtual Machine VM based software generally are formatted for viewing only by the client web browser or application that requested the data. As such the data results can only be viewed when the calling application browser is running and cannot be published for display by applications other than the calling application browser. Additionally obtaining data results from several different applications requires the concurrent running of entire applications and does not allow published information to be combined in a unified way.

Various embodiments are directed to a proxy system for implementing an automatic conversion schema which allows data results from a publishing application to be extracted and displayed by a display application other than the publishing application. In one embodiment a proxy publisher may receive a request from a publishing application to retrieve a data result from a data server. The request may include a path to the data server and appended publishing parameters. In accordance with the automatic conversion schema the publishing parameters may comprise decode parameters associated with the publishing application for allowing a display application other than the publishing application to decode variables of the data result and to transform the decoded variables for display. The proxy publisher may cache the request including the appended publishing parameters and retrieve the data result from the data server. The proxy publisher may locally store the data result along with the cached publishing parameters and may respond to a query from a display application for data associated with the publishing application by providing the cached data result and the publishing parameters to the display application.

In some cases the proxy publisher may implement a mechanism such that automated proxy requests such as those described in U.S. patent application Ser. No. 11 873 305 titled Offline Automated Proxy Cache for Web Applications can be stored and decoded by separate outside applications without the need for explicitly understanding the schema of the application which initiated the original proxy request. This decoded information can then be formatted and displayed by the outside application providing a live data minimized view of the original application.

The automatic conversion schema also may allow data results from different applications to be optionally published so that other applications can locally publish the data. In some implementations data results of several separately sleeping applications may be displayed as an aggregate dashboard.

As shown the proxy system may comprise a proxy publisher which may be implemented in software hardware or combination thereof. In some embodiments the proxy publisher may be implemented as an insert or plug in for a web browser e.g. Internet Explore Mozilla Firefox Safari Opera Netscape Navigator . In other embodiments the proxy publisher may be implemented as an operating system OS function service such as insert to the network stack of an OS such as a Microsoft OS Unix OS Linux OS Palm OS Symbian OS Embedix OS Binary Run time Environment for Wireless BREW OS JavaOS a Wireless Application Protocol WAP OS or other suitable OS in accordance with the described embodiments. In alternative embodiments the proxy publisher may be implemented as a standalone software application.

The proxy publisher may receive a request from a publishing application to retrieve a data result. In some embodiments the publishing application may be implemented as a web based application or a browser based application. In such embodiments the publishing application may use various web protocols and technologies such as HTML XHTML XML Flash ActionScript JavaScript ECMAScript JScript Basic Visual Basic VBScript Asynchronous JavaScript and XML Ajax Flex Java Python Perl C .net Flash and or other suitable programming scripting or Virtual Machine VM based languages. The publishing application also may be implemented by one or more dedicated informational programs for accessing live data such as RSS readers and AJAX Asynchronous JavaScript and XML based widgets such as those used by the Apple Dashboard Yahoo Widget engine and the like.

In some cases the publishing application may request a data result over the Internet from a remote data server . The publishing application also may request data from an intranet or LAN based local server an RSS feed FTP feed or other information source in accordance with the described embodiments. It can be appreciated that both Internet based servers e.g. remote data server and local services e.g. local data server can be proxied scheduled and published.

In one exemplary embodiment the publishing application may comprise an XHTML widget written in JavaScript and XHTML. The proxy publisher may receive a request e.g. Ajax request from the publishing application to retrieve a data result over the Internet from the remote data server . The request from the publishing application may include a path to the remote data server such a Uniform Resource Locator URL and appended publishing parameters.

The proxy publisher may process the request from the publishing application by caching the request including the appended publishing parameters and passing through the path to the remote data server . The remote data server may respond in normal fashion by returning a data result. The proxy publisher may receive the data result from the remote data server and process the data result by locally storing the data result with the cached publishing parameters for the publishing application .

The publishing parameters may comprise decode parameters associated with the publishing application for allowing a display application other than the publishing application to decode variables of the data result and to transform the decoded variables for display. The decode parameters may name the variables which can be extracted to publish a minimized representation of the publishing application . For example a widget may publish a minimized representation of a weather application by releasing only the day s high temperature or a minimized representation of an e mail application by releasing only the number of unread messages.

The decode parameters also may comprise data extraction rules and data formatting rules for instructing the display application how to extract web request data e.g. weather from data result e.g. response text how to format the data e.g. put this string with the extracted web request data and how to display the data e.g. display supplementary information such as a URL or text along with the response text .

Subsequently the proxy publisher may receive a query from the display application . In some cases the display application may request data from a specific named request. For example the display application may request data associated with the publishing application . In other cases the display application may ask the proxy publisher for a listing of all names for currently stored non private published request data. By default the proxy publisher may return all the named rules if the display application does not ask for a particular name.

Upon receiving an available name selected by the display application the proxy publisher may provide a matching result including the locally stored data results and the publishing parameters to the display application . The display application may process the matching result by using the extraction rules to extract and decode the variables and using the formatting rules to display the extracted values in an appropriate manner. In some embodiments the proxy publisher may reduce the processing required by the display application by extracting the variables from the data result using the data extraction rules and providing the extracted variables to the display application along with the data formatting rules.

In general when the publishing application is a web based application the display application may be implemented as a viewer application or mobile device home screen outside of the web browser which cannot render standard web based content. For example the display application may comprise a C C active home screen news aggregator billboard or mobile device ticker where only a small amount of information is displayed but that requires transformation of the cached data results to be usable. By using the decode parameters provided by the publishing application the display application can transform the cached data into a format that it can use. Once the display application has obtained the variables in a usable format the display application may republish the data in another format.

In accordance with the automatic conversion schema the publishing parameters may comprise decode parameters for allowing the display application to decode variables of the data result and to transform the decoded variables for display. The decode parameters may comprise a name parameter e.g. var name and a variable name for allowing the publishing application to name the variables extracted. The variable name may be used by outside applications to address a parameter left by the web application. The variable name may not be the name encoded in the offline proxy request but it is the name e.g. Temp Hi referred to by an outside application.

The decode parameters may comprise a data extraction rules parameter e.g. extraction rules var extract regex and instructions for extracting information from the response or data result. The publishing application may cause the proxy publisher to store with the information request instructions for extracting information from the response. The extracting instructions may be used by an outside application e.g. display application or the proxy publisher to extract find the information referred to by the name parameter e.g. var name from the stored offline proxy request.

The extracting instructions may be implemented as a regular expression regex e.g. JSON call get bytes 23 28 or a capturing regular expression in a server side scripting languages such as PERL regex. The extracting instructions also may be implemented via XPath or XQuery. The extracting instructions also may comprise an XSLT transformation. The extracting instructions also may comprise a custom program which is in itself the instructions for processing the request. For example the stored instructions for extracting information from the data result may be implemented as an XHTML page containing JavaScript.

The decode parameters may comprise a data formatting rules parameter e.g. formatting rules and instructions for displaying variables from the data result in a format used by an outside application e.g. the display application . The publishing application may cause the proxy publisher to store with the information request a set of optional separate instructions for how to display and format the extracted data. The formatting instructions may comprise a string which is what an extracting application can display in an alert dialog. This parameter can be duplicated with different language parameters. The formatting instructions can be a transforming rule set which takes the extracted value and displays it in a certain format e.g. if 2007.04.11 is the date then it is transformed via a regex to Apr. 11 2007 such via XSLT. The extraction instructions are used to extract the data returned by a server located at the URL formed by the calling application e.g. publishing application and the formatting instructions detail how the extracted data should appear in a certain application e.g. display application outside of the calling application.

The formatting instructions may be implemented by a regular expression regex separate from the regex used to extract the data. The formatting instructions also may comprise an XSLT transformation. The formatting instructions also may be implemented as a stored program in its own right. For example the stored program is itself passed as a parameter which takes the extracted data and displays or formats the extracted data in a way which an outside application other than the calling application can use and process. For example the stored program may comprise a scripted application such as XHTML JavaScript. The display and formatting instructions also may be implemented by a custom language created for the purpose of formatting the extracted data. The display and formatting instructions also may be implemented by A C C sprintf capable string function parameter.

The decode parameters may comprise a private parameter e.g. set request private which may be implemented by a flag set so that the offline proxy request will not be readable by outside applications. The publishing application may deliberately not expose its data by directing the proxy to never honor a request from certain applications to provide security. As such certain application may be prevented from receiving cached data results and publishing parameters for a given publishing application . Accordingly the publishing application may make offline requests that are private not shared with other applications.

The publishing parameters may comprise event parameters or commands for asking the proxy publisher to perform actions on behalf of the application outside of request handling to allow web applications to behave as normal applications but with a background wakeup task. Whether the optional parameters can be executed is security level and operating system dependent.

The event parameters may comprise a wake upon condition parameter or command for requesting the proxy publisher to wake up launch an application when a certain offline proxy condition is met e.g. e mail received . Whether the application will actually be launched is left to security permissions or the operating system.

The proxy publisher may implement an operating system service for sleeping applications to publish services which can be read and passed to other applications. For example a C C application can use the proxy publisher to post a request which self updates and presents a shared publishable result. In general any compiled statically linked application can use the proxy publisher to wake up when a certain wake up condition is met.

The event parameters may comprise an alert upon condition parameter or command for requesting the proxy publisher to post an alert to the operating system when a condition is met e.g. publishing application needs attention . This allows a web application to post information via the proxy publisher . The response may be a posted message in a dialog box or a textual or iconic notification on the home screen idle screen of the device. For example a scripted widget application running on a cell phone device may provide an e mail viewing service and may set an event such that when the proxy publisher discovers a new e mail an event request is posted to the device idle screen so that the user knows to look at their e mail. The alert parameters also may comprise an optional alert msg parameter and an optional alert urgency parameter.

The offline capabilities of a publishing application may be restricted in accordance with operating system security policies. For example the proxy publisher may interact with the operating system security policies and permissions to restrict use of publishing application offline capabilities. In some embodiments the proxy publisher will for security purposes include the application signature ID or referring page for the operating system to determine whether to execute a request in response to a wake up or alter condition.

In various embodiments the proxy publisher may comprise an offline automated proxy cache implemented as described in U.S. patent application Ser. No. 11 873 305 titled Offline Automated Proxy Cache for Web Applications which was filed on Oct. 16 2007 and is entirely incorporated by reference. As such the proxy publisher may support scheduling and automatic repeating of requests for updated data. In various embodiments scheduling parameters may be used to automatically retrieve updated versions of requested content behalf of the publishing application while the publishing application is offline e.g. closed runtime not running VM not running etc. . In such embodiments the proxy publisher may make repeated Ajax requests on behalf of the publishing application which are repeatedly scheduled to run even when the publishing application is not running.

The publishing parameters may comprise scheduling parameters including for example a time interval parameter that defines a time interval for requesting data updates a history parameter defining a maximum number of versions of the data that may be cached simultaneously a data expiry parameter specifying when data in the cache expires a retry parameter defining a number of times to retry a connection and others.

Repeating auto scheduled requests may be terminated by overwrite e.g. if the publishing application sends an identical request with no scheduling parameters then scheduling is removed by explicit request deletion e.g. if the publishing application sends a parameter to delete the published request via serial number then the auto scheduled request is removed by application deletion e.g. if the publishing application is deleted by the user or the operating system then all autopublish and proxy requests associated with the application are removed from the system by programmatic flush e.g. an API exists on the proxy publisher to suspend a given or all proxy publish requests and or by timeout e.g. if a given publishing application does not renew the proxy publish request in a given time such as two weeks then the proxy publisher may allow the repeated proxy request to age out stop repeating and be deleted from the queue along with any stored data and rules.

In various embodiments some or all the above publishing parameters may be wrapped in a namespace determined by the application using the proxy publisher . This namespace wrapping may performed automatically by the proxy publisher . For example if a publishing application such as MySuperWidget.wgt calls the proxy publisher the stored query and request data will be put in a namespace or table which is prefixed by MySuperWidget. In this way different applications can store requests with the proxy publisher and the results will be kept separate to avoid naming conflicts e.g. two different vendors using the same variable name . Reverse URL naming e.g. com.lampdesk.MySuperWidget is explicitly encouraged for some implementations. In addition a public namespace also may be provided for intercommunication messaging.

Exemplary publishing parameters e.g. scheduling and event parameters that may be used by the proxy publisher may include but are not limited to the following 

In some embodiments the publishing parameters may be represented as HTTP header name value pairs. For example the data request received by the proxy publisher may comprise an HTTP request and the publishing parameters may correspond to one or more HTTP headers. In other embodiments the publishing parameters may be represented using other standard web language constructs.

While downstream servers may see the HTTP headers through proper selection of HTTP header name value pairs such downstream servers may simply ignore these headers. This allows interoperability with existing web systems without incurring additional design overhead or compatibility issues with existing web browsers servers or other web infrastructure.

To use the proxy publisher with existing web based applications developers may add appropriate HTTP headers corresponding to publishing parameters to the HTTP requests generated by their applications. For example the following JavaScript code may be used 

To set up the automatic conversion schema for an outside application to access offline proxy information the following JavaScript code may be used 

To set up an alert for allowing a scripted application to wake up when a certain event is received the following JavaScript code may be used 

In some embodiments HTTP headers may comprise individual parameters as shown above. In other embodiments some or all the parameters may be consolidated in a single request such as 

In various implementations the described embodiments may save battery life and memory by not requiring runtime to execute at all times. The described embodiments also may allow a universal way for information to be extracted from scripted applications and displayed parameterized and understood by outside applications. In addition multiple applications may effectively actively sleep by publishing their live information which can be formatted and displayed. Multiple scripted web apps may run offline notifications at the same time. Scripted applications may be provided with a uniform method of waking up and posting alerts notifications. Scripted application security may be preserved. Proxied requests may be scheduled and used across an embedded operating system.

While certain exemplary embodiments may be described for purposes of illustration it can be appreciated that the automatic conversion schema may be implemented for various types of cached protocol systems operating in a client server environment.

As shown the logic flow depicts various operations performed by a proxy publisher a publishing application a data server and a display application with respect to a time line with the top being earlier in time and the bottom being later in time. This embodiment shows the proxy publisher in a passive pass through mode.

In operation the publishing application forms a URL step and sends a request e.g. Ajax request comprising the URL to the data server step . The proxy publisher passes through the URL to the data server without performing any processing step . The data server processes the request step and returns a data result step . The proxy publisher passes through the data result to the publishing application without performing any processing step . The publishing application decodes the returned data step and displays the data step .

As shown the logic flow depicts various operations performed by a proxy publisher a publishing application a data server and a display application with respect to a time line with the top being earlier in time and the bottom being later in time. This embodiment shows the publishing of information and demonstrates that original standards based requests still work but results are also stored for later use.

In operation the publishing application forms a URL step and appends publishing parameters including scheduling and repeat rules name to assign to the request data extraction rules and data formatting rules step . The publishing application then sends the request e.g. Ajax request comprising the URL and the appended publishing parameters step .

The proxy publisher processes the request by passing through the URL to the data server and storing the name scheduling and all rules for later use step . The data server processes the request step and returns a data result step . The proxy publisher stores the data result and passes through the data result to the publishing application step . The publishing application decodes the returned data step and displays the data step .

As shown the logic flow depicts various operations performed by a proxy publisher a publishing application a data server and a display application with respect to a time line with the top being earlier in time and the bottom being later in time. This embodiment shows the proxy publisher in use by another application e.g. display application to extract the stored published information from the publishing application e.g. Widget application and the stored result and rules.

In operation the publishing application forms a URL step and appends publishing parameters including scheduling and repeat rules name to assign to the request data extraction rules and data formatting rules step . The publishing application then sends the request e.g. Ajax request comprising the URL and the appended publishing parameters step .

The proxy publisher processes the request by passing through the URL to the data server and storing the name scheduling and all rules for later use step . The data server processes the request step and returns a data result step . The proxy publisher stores the data result and passes through the data result to the publishing application step .

The display application asks the proxy publisher for published data and stored results step . The proxy publisher checks the request against the stored results step and if there is a match the proxy publisher returns the matching result to the display application step . Upon receiving the matching result the display application can process the matching result by using the extracting rules to decode values and by using the formatting rules to display values in an appropriate manner step .

As shown the logic flow depicts various operations performed by a proxy publisher a publishing application a data server and a display application with respect to a time line with the top being earlier in time and the bottom being later in time. This embodiment shows the proxy publisher in use to perform variable extraction.

In operation the publishing application forms a URL step and appends publishing parameters including scheduling and repeat rules name to assign to the request data extraction rules and data formatting rules step . The publishing application then sends the request e.g. Ajax request comprising the URL and the appended publishing parameters step .

The proxy publisher processes the request by passing through the URL to the data server and storing the name scheduling and all rules for later use step . The data server processes the request step and returns a data result step . The proxy publisher stores the data result and passes through the data result to the publishing application step .

The display application asks the proxy publisher for published data and stored results by name step . The proxy publisher checks the request against the stored results step and if there is a match the proxy publisher returns the matching result to the display application step . The proxy publisher uses the extraction rules to decode the result into a list of variables step . Upon receiving the list of extracted variables the display application can process the matching result by using the formatting rules to display the extracted variables step .

It is noted that in that steps may be repeated as per the scheduling instructions without any extra interaction with the publishing application . It is also noted that the extraction cycle in FIG. and in can also be continually repeated. It is further noted that both the request repeat cycle and the extraction cycles can run asynchronously of each other and may be multithreaded.

In various embodiments the data requests may include a data path and one or more publishing parameters and the request processor is configured to identify the publishing parameters. The request and the identified publishing parameters may be passed to the rules engine which may be configured to store the publishing parameters in the data storage device and to pass the data path to the outgoing network traffic handler for transmission to an information source e.g. remote data server local data server . Once a data result is received from the information source the data results may be cached in the data storage device along with the publishing parameters. In various embodiments the publishing parameters may comprise scheduling parameters decode parameters and or event parameters.

As shown the client computing device may also run a local web server . In various embodiments the local web server may be implemented as Hypertext Transfer Protocol HTTP server running locally on the client computing device . The local web server may comprise and or implement a server side web services stack. The local web server also may serve web based applications to a web browser from a web archive comprising a collection of the necessary application files for a web application. In various embodiments the local web server may be implemented as a Web Virtual Machine VM and the web archive may be generated as described in U.S. patent application Ser. No. 11 612 282 titled System for Running Web Applications Offline and Providing Access to Native Services which was filed on Dec. 18 2006 and is entirely incorporated by reference.

When implemented as a server on the client computing device the local web server may support and provide access to multiple applications and may locally run server side code such as PHP Python PERL or CGI programming environments. The local web server also may implement web methods programming interfaces and web services extensions via SOAP XML RPC REST and the like for enabling access to local resources of the client computing device . Accordingly the client computing device may provide server side interfaces to access local resources such as a file system a phonebook a media store a database a hardware component e.g. camera microphone etc. a software component and or other controlled resource. Such interfaces also may implement server side code for allowing the user to write to a local resource such as a phonebook media store and so forth. The local web server also may implement various web based security models and access restrictions for evaluating function calls from a web browser which request access to local resources.

The client computing devices may be capable of communicating over a network with a remote server . The local proxies may act as intermediaries between the client applications and the remote server . Thus the client applications may make data requests through the local proxies which then forward the requests to the remote server . As described above the local proxies may be configured to provide an offline mechanism for managing content updates and an automatic conversion schema.

As shown in the WebVM proxy may be used by web applications to work in offline mode. In such mode the WebVM proxy may make repeated data requests over a network to remote information sources . It is noted that web browser domain origin security policy is maintained.

As shown in the WebVM proxy can continue to run requests even when the calling web application is not running. As shown in when there is no connectivity the WebVM proxy can serve cached requests to the web application .

As shown in the WebVM proxy can publish cached information. In this embodiment the WebVM proxy provides cached information from a dedicated news application and weather application for publishing by the active homescreen of a mobile phone.

In some embodiments rather than using a WebVM type of proxy the publishing and request headers may be interpreted and proxied directly by the browser using browser based implementations and integration. In such embodiments the proxy may be implemented by extra APIs in the browser DOM or in the JavaScript Engine embedded in the browser. In this case the browser allows extra parameters to be used as part of its DOM APIs such as by invoking extra function call parameters. For example an XMLHttpRequest object can accept extra member functions methods to store the extracting and formatting information instead of using HTTP headers. This accomplishes the identical task in a programmatic way. Exemplary pseudocode is shown below where double slash represents a comment.

3. newReq.SetFormatRule C the result is s set formatting rules in this case a C style sprintf string will print the extracted title shown in step 2.

Such extra APIs also can be used to publish the XMLHttpRequest data and related network calls to an outside application e.g. a C application when the browser is not running so that these outside applications can use the information created by the web applications. In various embodiments the proxy may implement an XML schema for decoding a generic XMLHttpRequest in to a set of name value pairs. Such name value pairs may be stored in a database table and or accessed via a SOAP or WebServices API.

The described API based method also can apply to any language as a library. For example the proxy can be used as an adjunct library of function calls for C or C or Java programs. In other words instead of using HTTP request headers scheduling extraction and formatting rules are passed as function or method call parameters. The functions and parameters to call the proxy can be global functions or object oriented in nature. The proxy can be used via a direct API in Java and JavaME. The proxy can be used via C C runtimes on operating systems such as Symbian Windows Win32 Linux and so forth.

In some embodiments the computing device may be implemented as a mobile device such as a combination handheld computer and mobile telephone or smart phone. In such embodiments the mobile device generally may be configured to support or provide cellular voice communication wireless data communication and computing capabilities in accordance with the described embodiments.

The mobile device may provide voice and wireless data communications functionality by communicating with a mobile network such as a Code Division Multiple Access CDMA network Global System for Mobile Communications GSM network North American Digital Cellular NADC network Time Division Multiple Access TDMA network Extended TDMA E TDMA network Narrowband Advanced Mobile Phone Service NAMPS network third generation 3G network such as a Wide band CDMA WCDMA network CDMA 2000 network Universal Mobile Telephone System UMTS network and others.

The mobile device may support wireless wide area network WWAN data communications services including Internet access. Examples of WWAN data communications services may include Evolution Data Optimized or Evolution Data only EV DO Evolution For Data and Voice EV DV CDMA 1xRTT GSM with General Packet Radio Service systems GSM GPRS Enhanced Data Rates for Global Evolution EDGE High Speed Downlink Packet Access HSDPA High Speed Uplink Packet Access HSUPA and others.

The mobile device may provide wireless local area network WLAN data communications functionality in accordance with the Institute of Electrical and Electronics Engineers IEEE 802.xx series of protocols such as the IEEE 802.11 a b g n series of standard protocols and variants also referred to as WiFi the IEEE 802.16 series of standard protocols and variants also referred to as WiMAX the IEEE 802.20 series of standard protocols and variants and others.

The mobile device also may be arranged to perform data communications functionality in accordance with shorter range wireless networks such as a wireless personal area network PAN offering Bluetooth data communications services in accordance with the Bluetooth Special Interest Group SIG series of protocols specifications profiles and so forth. Other examples of shorter range wireless networks may employ infrared IR techniques or near field communication techniques and protocols such as electro magnetic induction EMI techniques including passive or active radio frequency identification RFID protocols and devices.

The mobile device may comprise various software programs such as system programs and applications to provide computing capabilities in accordance with the described embodiments. Exemplary system programs may include without limitation an operating system OS device drivers programming tools utility programs software libraries application programming interfaces APIs and so forth.

The mobile device may provide a variety of applications for allowing a user to accomplish one or more specific tasks. Exemplary applications may include without limitation a web browser application telephone application e.g. cellular VoIP PTT networking application messaging application e.g. e mail IM SMS MMS contacts application calendar application word processing application spreadsheet application database application media application e.g. video player audio player multimedia player digital camera video camera media management location based services LBS application gaming application and so forth.

As shown the computing device comprises hardware elements that may be electrically coupled via a bus . The hardware elements may include one or more central processing units CPUs one or more input devices e.g. a touch screen a keyboard a mouse etc. and one or more output devices e.g. a display a printer etc. . Computing device may also include one or more storage devices . By way of example the storage device s may include devices such as disk drives optical storage devices solid state storage device such as a random access memory RAM and or a read only memory ROM which can be programmable flash updateable and or the like.

The computing device may additionally include a computer readable storage media reader a communications system e.g. a modem a network card wireless or wired an infra red communication device etc. and working memory which may include RAM and ROM devices as described above. In some embodiments the computing device also may include a processing acceleration unit which can include a digital signal processor DSP a special purpose processor and or the like.

The computer readable storage media reader can further be connected to a computer readable storage medium together and optionally in combination with storage device s comprehensively representing remote local fixed and or removable storage devices plus storage media for temporarily and or more permanently containing computer readable information. The communications system may permit data to be exchanged with a network and or any other computer. For example computer system may be part of a larger system network environment including a plurality of interconnected computing devices.

The computing device also may comprise software elements shown as being currently located within a working memory including an operating system and or other code such as application and proxy of .

It should be appreciated that alternative embodiments of the computing device may have numerous variations from that described above. For example customized hardware might also be used and or particular elements might be implemented in hardware software or both. Further connection to other computing devices such as network input output devices may be employed.

Numerous specific details have been set forth herein to provide a thorough understanding of the embodiments. It will be understood by those skilled in the art however that the embodiments may be practiced without these specific details. In other instances well known operations components and circuits have not been described in detail so as not to obscure the embodiments. It can be appreciated that the specific structural and functional details disclosed herein may be representative and do not necessarily limit the scope of the embodiments.

It is also worthy to note that any reference to various embodiments some embodiments one embodiment or an embodiment means that a particular feature structure or characteristic described in connection with the embodiment is included in at least one embodiment. Thus appearances of the phrases in various embodiments in some embodiments in one embodiment or in an embodiment in places throughout the specification are not necessarily all referring to the same embodiment. Furthermore the particular features structures or characteristics may be combined in any suitable manner in one or more embodiments.

Although some embodiments may be illustrated and described as comprising exemplary functional components or modules performing various operations it can be appreciated that such components or modules may be implemented by one or more hardware components software components and or combination thereof.

Some of the figures may include a flow diagram. Although such figures may include a particular logic flow it can be appreciated that the logic flow merely provides an exemplary implementation of the general functionality. Further the logic flow does not necessarily have to be executed in the order presented unless otherwise indicated. In addition while a particular logic flow may illustrate a certain sequence of steps other sequences of steps may also be performed according to alternative embodiments. Moreover some individual steps may include multiple sub steps that may be performed in various sequences as appropriate to the individual step. Furthermore additional steps may be added or removed depending on the particular implementation.

In various embodiments logic flow may comprise or be implemented as executable computer program instructions. The executable computer program instructions may be implemented by software a software module an application a program a subroutine instructions an instruction set computing code words values symbols or combination thereof. The executable computer program instructions may include any suitable type of code such as source code compiled code interpreted code executable code static code dynamic code and the like. The executable computer program instructions may be implemented according to a predefined computer language manner or syntax for instructing a computer to perform a certain function. The executable computer program instructions may be implemented using any suitable high level low level object oriented visual compiled and or interpreted programming language such as C C Java BASIC Perl Matlab Pascal Visual BASIC assembly language and others.

Some embodiments may be implemented as an article of manufacture comprising a computer readable storage medium to store executable computer program instructions for performing various operations as described herein. In such embodiments a computer may include any suitable computer platform device system or the like implemented using any suitable combination of hardware and or software.

The article and or computer readable storage medium may comprise one or more types of computer readable storage media capable of storing data including volatile memory or non volatile memory removable or non removable memory erasable or non erasable memory writeable or re writeable memory and so forth. Examples of computer readable storage media may include without limitation random access memory RAM dynamic RAM DRAM Double Data Rate DRAM DDRAM synchronous DRAM SDRAM static RAM SRAM read only memory ROM programmable ROM PROM erasable programmable ROM EPROM electrically erasable programmable ROM EEPROM flash memory e.g. NOR or NAND flash memory content addressable memory CAM polymer memory e.g. ferroelectric polymer memory phase change memory ovonic memory ferroelectric memory silicon oxide nitride oxide silicon SONOS memory magnetic or optical cards or any other suitable type of computer readable storage medium in accordance with the described embodiments.

In various embodiments a logic flow may comprise or be implemented as executable computer program instructions stored in an article of manufacture and or computer readable storage medium. The article and or computer readable storage medium may store executable computer program instructions that when executed by a computer cause the computer to perform methods and or operations in accordance with the described embodiments. The article and or computer readable storage medium may be implemented by various systems and or devices in accordance with the described embodiments.

Unless specifically stated otherwise it may be appreciated that terms such as processing computing calculating determining or the like refer to the action and or processes of a computer or computing system or similar electronic computing device that manipulates and or transforms data represented as physical quantities e.g. electronic within registers and or memories into other data similarly represented as physical quantities within the memories registers or other such information storage transmission or display devices.

It is worthy to note that some embodiments may be described using the expression coupled and connected along with their derivatives. These terms are not intended as synonyms for each other. For example some embodiments may be described using the terms connected and or coupled to indicate that two or more elements are in direct physical or electrical contact with each other. The term coupled however also may mean that two or more elements are not in direct contact with each other but yet still co operate or interact with each other. With respect to software elements for example the term coupled may refer to interfaces message interfaces API exchanging messages and so forth.

While certain features of the embodiments have been illustrated as described above many modifications substitutions changes and equivalents will now occur to those skilled in the art. It is therefore to be understood that the appended claims are intended to cover all such modifications and changes as fall within the true spirit of the embodiments.

