---

title: Creation of a test bed for testing failover and failback operations
abstract: Example embodiments provide various techniques for creating a test bed for testing failover and failback operations. In an example, data is stored on a primary storage system, while a backup copy of the data is stored on a secondary storage system. A test bed may be created by replicating the data on the primary storage system and replicating the backup copy on the secondary storage system. The replicated copies of the data and the backup copy, as well as a process used to backup the data, comprise the test bed, which may be used to test the failover and failback operations.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08020037&OS=08020037&RS=08020037
owner: NetApp, Inc.
number: 08020037
owner_city: Sunnyvale
owner_country: US
publication_date: 20080923
---
The present disclosure relates generally to storage systems. In an example embodiment the disclosure relates to the creation of a test bed for testing failover and failback operations.

Data is backed up to guard against unforeseen data loss. Typically data is backed up onto a separate storage system where in the event of a data loss the backup copy of the data can be made available for use. This is accomplished by using a failover mechanism to provide expedient access to the backup copy stored on the secondary storage system in the event of a failure of the primary storage system. Once the primary storage system is operational the data then is returned to use. This is accomplished by using a failback mechanism that moves the latest set of the backup copy of the data back to the primary storage system.

There is no guarantee that the failover and failback mechanisms will work in the event of a data loss unless such mechanisms are tested. Currently dedicated storage systems that are separate from the actual production storage systems may be setup to test the failover and failback mechanisms. However the setup of separate storage systems simply for testing of these mechanisms is expensive. Furthermore the test may not be reliable because the test storage systems may be slightly different than the actual production storage systems. The alternative is to test on live or production storage systems but such tests may render the data in use inaccessible for the duration of the tests and may also corrupt the data in the event that the failover and failback testing fail.

Example embodiments provide various techniques for the creation of a test bed. Generally data that is in actual use is stored on a primary storage system. The data is backed up onto a secondary storage system which is separate from the primary storage system and serves as a backup to the primary storage system in the event that the primary storage system fails. It should be appreciated that in addition to the secondary storage system the data may also be backed onto additional storage systems.

A test bed may be created on the primary storage system and the secondary storage system. To create a test bed data stored on a storage system is copied and stored on the same storage system. For example the data is replicated on the same primary storage system. That is a separate copy of the data is made and this copy is stored on the same primary storage system. Similarly the backup copy of the data stored on the separate storage system is also replicated on the same separate storage system.

The replicated copies of the data and the backup copy as well as a process used to backup the data comprise the test bed. A user may then use the replicated copies of the data and the backup copy for testing the failover operation and the failback operation. That is tests for failover operation and failback operation may be conducted on copies of the data and the backup copy. Since the test bed uses the same storage systems such tests do not require additional hardware. Furthermore tests using the same storage systems are more accurate because the setup is exactly the same as the one used to store the data and backup copy. With the replicated copy of the data stored separately from the actual data but within the same storage system tests for failover and failback will not corrupt the actual data and the actual data is actually still accessible during such tests.

The description that follows includes illustrative systems methods techniques instruction sequences and computing machine program products that embody the present invention. In the following description for purposes of explanation numerous specific details are set forth in order to provide an understanding of various embodiments of the inventive subject matter. It will be evident however to one skilled in the art that embodiments of the inventive subject matter may be practiced without these specific details. In general well known instruction instances protocols structures and techniques have not been shown in detail.

In general a backup is a copy or duplicate version of a particular set of data that is retained for use in the event that this original set of data is rendered unusable. Depending on the type of storage environment such a backup copy may be stored on the same storage system as the original set of data or on a separate storage system. depict block diagrams of an example storage environment in accordance with an example embodiment for use in backing up data . As depicted in the storage environment includes a client processing system a primary storage system and a secondary storage system . Generally the storage systems and are processing systems that provide storage services related to the organization of information or data on writable persistent storage devices and such as non volatile memories tapes hard drives optical media or other storage devices. The storage systems and can be deployed within a Storage Area Network SAN or a Network Attached Storage NAS environment.

A SAN is a high speed network that enables establishment of direct connections between the storage systems and and their storage devices and . The SAN may thus be viewed as an extension to a storage bus and as such operating systems of the storage systems and enable access to stored data using block based access protocols over an extended bus. In this context the extended bus can be embodied as Fibre Channel Computer System Interface SCSI Internet SCSI iSCSI or other network technologies.

When used within a NAS environment for example the storage systems and may be embodied as file servers that are configured to operate according to a client server model of information delivery to thereby allow multiple client processing systems such as client processing system to access shared resources such as data and backup copy of the data stored on the file servers. The storage of information on a NAS environment can be deployed over a computer network that includes a geographically distributed collection on interconnected communication links such as Ethernet that allows the client processing system to remotely access the information or data on the file servers. The client processing system can communicate with one or more file servers by exchanging discrete frames or packets of data according to predefined protocols such as Transmission Control Internet Protocol TCP IP .

As depicted in the client processing system is in communication with the primary storage system . In this example the client processing system can access data stored on the primary storage system . In an example embodiment the data may be live data which is actual real world data in use. As an example the data may include database information that is used by an enterprise business application hosted on the client processing system . Other examples of data include electronic documents images video and audio files. To protect against unforeseen loss of the data the data is backed up onto the secondary storage system . In general a backup copy of the data is a duplicate version of the data retained for use in the event that the original data is rendered unusable. As depicted in the backup copy is stored in a separate storage system e.g. secondary storage system such that failure of the primary storage system does not result in a complete loss of the data . The storage of the backup copy in a redundant secondary storage system thereby increases data reliability.

Still referring to a failure of the primary storage system triggers a failover operation. A failover operation is a recovery action taken in the event that the data is lost. As a result a failover operation provides access to backup copy stored on the secondary storage system in the event of for example a failure of the primary storage system . For example in the event that the primary storage system fails the client processing system can be reconfigured in a failover operation to point instead to the secondary storage system and thereby access the backup copy . Once the primary storage system is operational a failback operation may be triggered. A failback operation is action taken to restore access to the data on the primary storage system . For example in a failback operation the most recent backup copy is copied or moved back to the primary storage system . The client processing system is then reconfigured to point back to the primary storage system and may thereby access the restored data .

The client processing system may host a data protection management module that generally manages the backup of the data . As explained in more detail below the data protection management module includes a feature that creates a test bed. A test bed as used herein is a data set used for testing a failover operation and or a fail back operation. As explained in more detail below this data set included in the test bed is separate from the data and the backup copy . As a result a user may conduct tests on the test bed without affecting the integrity of the data and the backup copy .

The processing system executes an operating system that manages the software processes and or services executing on the processing system . As depicted in these software processes and or services may include a data protection management module . In general the data protection management module is a backup and replication management software application that provides automated setup scheduling and monitoring of backups. In addition to managing backups the data protection management module also provides the capability to test failover and failback operations. As will be explained in more detail below the data protection management module may replicate the data and the backup copy of the data on their respective storage systems. The replicated data and the replicated backup copy of the data may then be used as a test bed for testing failover and failback operations.

The data protection management module also detects a backup relationship between the data and the backup copy of the data at . The backup relationship as used herein refers to or identifies a process used to create the backup copy of the data. That is the backup relationship defines how the data is backed up on a separate storage system. An example of a process used to create a backup copy is mirroring. A mirror is an exact copy of a data set and in the examples discussed herein the backup copy of the data is a mirror of the data. Here the data is mirrored onto the secondary storage system to ensure that the backup copy is always kept up to date with the data. Mirroring can be synchronous where for example a block of the data written to the primary storage system is also immediately transmitted to the secondary storage system. In asynchronous mirroring the block of data written to the primary storage system is transmitted to the secondary storage system at a later time. Another example of a process used to create a backup copy is a scheduled backup of the data where the data is backed up to the secondary storage system according to a timetable.

The backup relationship may for example be detected by querying a storage system such as the primary storage system and or the secondary storage system. For example the data protection manager module transmits a request to for example the primary storage system for the backup relationship. The request may be transmitted by way of for example a protocol used in storage systems e.g. a Network Data Management Protocol NDMP or a Simple Network Management Protocol SNMP or by way of application programming interface API requests e.g. Extensible Markup Language XML API requests over Hypertext Transfer Protocol HTTP or Hypertext Transfer Protocol over Secure Socket Layer HTTPS . In response the primary storage system transmits a response to the data protection management module identifying the backup relationship.

With the backup relationship between the data and the backup copy of the data detected the same backup relationship may be applied to the replicated data and the replicated backup copy at . For example if the detected backup relationship between the data and the backup copy is a scheduled backup that backs up the data once every day then the data protection management module also applies the same scheduled backup to the replicated data and that replicated backup copy. As a result the replicated data is also backed up once every day as part of a scheduled backup. It should be appreciated that the test bed comprises the replicated data the replicated backup copy and the backup relationship between the replicated data and the replicated backup copy. A user may use this test bed for testing a failover operation and or a failback operation. Since the test bed is separate and independent from the data and the backup copy of the data the integrities of the data and backup copy are maintained in the event that the replicated data and replicated backup copy included in the test bed are modified. That is changes made to the replicated data and the replicated backup copy do not affect the data and the backup copy of the data. As a result during testing for failover or failback the data is still accessible by client processing systems and the data may still be backed up on the secondary storage system.

As depicted in a test bed may be created by replicating the data set within the same storage environment . In this example the data set is replicated by replicating the primary volume on the primary storage system to generate a replicated primary volume of the data . The secondary volume is also replicated on the secondary storage system to generate a replicated secondary volume of the backup copy of the data . The backup relationship associated with the data set is also replicated by detecting the backup relationship and then applying this same backup relationship to the replicated primary volume and the replicated secondary volume .

The replicated primary volume the replicated secondary volume and the backup relationship together constitute a second data set . This second data set serves as a test bed that is accessible for testing failover and failback operations. Being able to test for failover and failback on the same storage systems and that store the data and backup copy of the data a user that has successfully ran tests using the data set included in the test bed will have greater confidence that failback and failover operations will work in the event of a loss of the data. During testing the primary volume and the secondary volume are still accessible because the test bed is separate and independent from data set . Furthermore the data integrities of the primary volume and the secondary volume are maintained during testing and as a result the data is not at risk for accidental modification.

In the event of a failure of the primary storage system a failover operation is triggered such that a client processing system not shown accessing the primary volume is reconfigured to point to the secondary storage system to instead access the secondary volume . As a result the secondary volume temporarily serves as data until the primary storage system is operational. The primary volume the secondary volume the tertiary volume the backup relationship and the backup relationship may together constitute a data set .

As depicted in a test bed may be created by replicating data set within the same storage environment . In this example the data set is replicated by replicating the primary volume the secondary volume and the tertiary volume on the primary storage system the secondary storage system and the tertiary storage system respectively. As a result of the replication the replicated primary volume the replicated secondary volume and the replicated tertiary volume are generated on the primary storage system the secondary storage system and the tertiary storage system respectively. Furthermore the backup relationships and associated with the data set are also replicated by detecting the backup relationships and and then applying the same backup relationship between their respective replicated volumes and or . The replicated primary volume the replicated secondary volume the replicated tertiary volume the backup relationship and the backup relationship may together constitute a second data set serves as a test bed that is accessible for testing failback and failover operations.

For example as depicted in a snapshot of a primary volume of the data is taken on the primary storage system at . At the same time a snapshot of the secondary volume of the backup copy is also taken on the secondary storage system at . In general a snapshot is an instant copy within a file system. Such a snapshot can practically copy large amounts of data in a few seconds. More particularly a snapshot is a space conservative point in time and read only image of data accessible by name that provides a consistent image of that data such as a storage system at some previous time. A snapshot is a point in time representation of a storage element such as an active file system file or database stored on a persistent storage device and having a name or other identifier that distinguishes it from other snapshots taken at other points in time. In a write anywhere file system a snapshot is an active file system image that contains complete information about the file system including all metadata.

Thereafter at a modifiable copy of the primary volume may then be created from the snapshot of the primary volume. At the same time a modifiable copy of the secondary volume is also created from the snapshot of the secondary volume at . It should be appreciated that since the modifiable copy is created from a snapshot the modifiable copy is therefore a near instantaneous space efficient and in an example embodiment a writable clone of the snapshot which shares the same physical blocks with the baseline file system. As explained in more detail below when the snapshot and the modifiable copy diverge e.g. due to continuing updates in the production database or development changes to a modifiable copy of the database the divergent blocks are separately stored. Since the creation of a modifiable copy from a snapshot is near instantaneous such replication technique results in minimal downtime of the accessibility of the data included in the primary volume.

Still referring to the backup relationship between the primary volume and the secondary volume is detected at and this detected backup relationship is applied to the modifiable copy of the primary volume and the modifiable copy of the secondary volume at . Here the test bed comprises the modifiable copy of the primary volume the modifiable copy of the secondary volume and the backup relationship between the writable copies.

The modifiable copy technique is employed to create a new volume e.g. file system file along with a new root subdirectory in the aggregate and a new storage label file. The new volume is embodied as a modifiable copy and comprises an appropriately sized modifiable copy container file represented as a modifiable copy buffer tree having a plurality of blocks in the aggregate including inode level 1 indirect blocks which are organized as a modifiable copy container map and level 0 data blocks which comprise all of the blocks used by the modifiable copy. Initially the modifiable copy container file has no zero data and the container map is empty because the only blocks used by the modifiable copy are those inherited from the parent volume. Moreover a volume information block for the modifiable copy is created that is a slightly modified version of the volume information block from the replica . The modified volume information block is written to store at a level 0 data block the container file of the new volume modifiable copy.

It should be noted that the modifiable copy container file only holds all blocks allocated to the modifiable copy . The point of a modifiable copy is that it uses blocks owned by the parent volume. The modifiable copy container file has holes at the locations of any blocks inherited from the parent volume. As an example assume that an indirect block pointer in a file in the parent volume contains a physical volume block number and a virtual volume block number. Thus a block in the parent container file is physical volume block number. In modifiable copy the indirect block pointers are also a physical volume block number and a virtual volume block number but an entry in the modifiable copy container file is zero 0 indicating a hole and that the modifiable copy inherited its virtual volume block number from the parent volume. Since the entry is zero the modifiable copy knows that it could not free the block.

Similarly the new file system file is a large sparse file that contains all blocks owned by a volume modifiable copy and as such is also referred to as the container file for the modifiable copy. The new file system file includes a block pointer that references a file system embodied as modifiable copy . As a volume the modifiable copy has a volume space with special reserved inode numbers that are used for among other things the block allocation bitmap structures. As further described herein the block allocation bitmap structures e.g. active map summary map and space map are inherited from the replica and thus the parent volume .

Specifically the modifiable copy includes a volume information block that points to a file system block that in turn points to an inode of inode file that has the same inode structure content as the aggregate with the exceptions previously noted. The inode for the inode file contains information describing the inode file associated with the file system executing on the modifiable copy . The inode for the inode file may contain a pointer that references points to an inode file indirect block containing a set of pointers that reference inodes within root directory of the modifiable copy . Each inode contains pointers to indirect blocks such as level 1 indirect blocks and each indirect block includes pointers to level 0 data blocks.

Referring also to the replica volume information block from the replica is inserted as a level 0 data block volume information block within the container file on the modifiable copy. The volume information block is a slightly modified version of the replica volume information block . For example the volume information block is modified to delete any snapshots file system information blocks other than file system information block for the replica . The inherited summary map is also modified to reflect that all snapshots without modifiable copies have been removed deleted from the modifiable copy. The modified volume information block is thus substantially similar to replica volume information block and to that end essentially incorporates the replica base snap shot into the modifiable copy. Accordingly the replica and its associated safeguards protects the snapshotted blocks from being overwritten. All new changes are written to block locations in the virtual volume block number and physical volume block number spaces of the replica parent volume that are not used and thus cannot interfere with the modifiable copy.

Since the modified volume information block forms the root of a modified volume information buffer tree that is similar to a replica volume information block buffer tree of the replica all blocks of the replica volume information block buffer tree can be accessed when traversing the modified volume information block buffer tree. In other words the replica volume information block stored in a level 0 block of the replica container file contains pointers that reference other blocks of its buffer tree stored in other level 0 blocks of the container file . The pointers within the volume information block to the other level 0 blocks are physical pointers that reference physical block locations on disk . Those replica volume information buffer tree blocks can be accessed through the modified volume information block of the modifiable copy in the same manner as traversing the replica container file tree because the blocks within the modified volume information block buffer tree are the physical blocks represented by the level 0 data blocks in the replica container file . Ultimately the replica volume information block and the modified volume information block reference the same physical block locations on disk .

The modifiable copy may then be instantiated by e.g. loading a file system associated with the new volume onto the modifiable copy and bringing the modifiable copy online with the only blocks owned by the modifiable copy comprising its modified volume information block. The file system executes on the modifiable copy as it would on a typical volume such as the parent volume. The file system within the modifiable copy actually resembles the file system within the replica base snapshot since they comprise substantially the same blocks on a disk. The resulting modifiable copy is thus a full fledged volume such that it can service storage read and write requests and has its own logical properties such as snapshot operation functionality that enables the modifiable copy to be snapshotted snap restored and otherwise manipulated as any other volume. As a result the modifiable copy technique enables the modifiable copy and parent volume to share on disk blocks of data in a zero copy fashion similar to a snapshot while also allowing for modifications unlike the snapshot .

Example processing system includes processor e.g. a central processing unit CPU a graphics processing unit GPU or both main memory and static memory which communicate with each other via bus . The processing system may further include video display unit e.g. a plasma display a liquid crystal display LCD or a cathode ray tube CRT . The processing system also includes alphanumeric input device e.g. a keyboard user interface UI navigation device e.g. a mouse disk drive unit signal generation device e.g. a speaker and network interface device .

The disk drive unit includes machine readable medium on which is stored one or more sets of instructions and data structures e.g. software embodying or utilized by any one or more of the methodologies or functions described herein. Software may also reside completely or at least partially within main memory and or within processor during execution thereof by computing system with main memory and processor also constituting machine readable tangible media. The software may further be transmitted or received over network via network interface device utilizing any one of a number of well known transfer protocols e.g. Hypertext Transfer Protocol HTTP .

While machine readable medium is shown in an example embodiment to be a single medium the term machine readable medium should be taken to include a single medium or multiple media e.g. a centralized or distributed database and or associated caches that store the one or more sets of instructions. The term machine readable medium shall also be taken to include any medium that is capable of storing encoding or carrying a set of instructions for execution by the machine and that cause the machine to perform any one or more of the methodologies of the present application or that is capable of storing encoding or carrying data structures utilized by or associated with such a set of instructions. The term machine readable medium shall accordingly be taken to include but not be limited to solid state memories optical and magnetic media and carrier wave signals.

While the invention s is are described with reference to various implementations and exploitations it will be understood that these embodiments are illustrative and that the scope of the invention s is not limited to them. In general techniques for creating a test bed may be implemented with facilities consistent with any hardware system or hardware systems defined herein. Many variations modifications additions and improvements are possible.

Plural instances may be provided for components operations or structures described herein as a single instance. Finally boundaries between various components operations and data stores are somewhat arbitrary and particular operations are illustrated in the context of specific illustrative configurations. Other allocations of functionality are envisioned and may fall within the scope of the invention s . In general structures and functionality presented as separate components in the exemplary configurations may be implemented as a combined structure or component. Similarly structures and functionality presented as a single component may be implemented as separate components. These and other variations modifications additions and improvements fall within the scope of the invention s .

