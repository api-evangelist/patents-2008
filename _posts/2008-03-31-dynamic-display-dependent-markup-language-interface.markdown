---

title: Dynamic display dependent markup language interface
abstract: Tools and techniques for creating presentations via dynamic digital content (DDC) tools using a display dependent markup language interface facilitating dynamic content are described. The markup language, “DXyml”, identifies content elements, including dynamic content elements, for display and specifies pixel locations at which to position the content elements on a client device. Pixel locations are selected for particular screen configurations, allowing the presentations to be created in advance of being served to specific types of devices with the particular screen configurations.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08453051&OS=08453051&RS=08453051
owner: Amazon Technologies, Inc.
number: 08453051
owner_city: Reno
owner_country: US
publication_date: 20080331
---
Large coherent units of information made up of digital content representing electronic books electronic images and other presentations are relatively effortless to distribute today using computers networks handheld devices and other electronic technologies. Books distributed using electronic technologies are commonly referred to as electronic books or eBooks. More generally items distributed using electronic technologies are commonly referred to as electronic items.

Typically electronic items are structured as virtual frames presented on a computing device. In the context of the Internet content is arranged and delivered as web pages created using a markup language such as html Hypertext Markup Language that describes the structure of the content on the page and provides instructions to the browser regarding how to render the content. Html provides a means to describe the structure of text based information in a document by denoting certain text as headings paragraphs lists and so on and to supplement that text with interactive forms embedded images and other objects.

One problem today is that digital content may be displayed and read on a variety of different computing devices e.g. computer monitors portable digital assistants PDAs pocket computers specialized eBook reader devices etc. with an assortment of different display conditions e.g. screen size and resolution font type and size margins line spacing etc. . Web pages can be designed with instructions to assist in the rendering of the content on different devices. But since the display conditions vary widely html simply attempts to render the content in the best way it can. In some cases content flows off the bottom of the screen or to the right of the screen. However scrolling to off screen content may take an unacceptable amount of time from a user experience perspective for users of a growing number of devices employing displays atypical of general computing displays such as electronic paper display technology. An electronic paper display is a display that has a high resolution generally 150 dpi or better and is bi stable meaning that it is capable of holding text or other rendered images even when very little or no power is supplied to the display. One shortcoming of such displays is a comparatively slow refresh rate.

Additionally less content is available for these displays and much of the content available is fixed or static. For example no matter how many times one reads a book the content will be the same. Facilitating creating a greater variety of electronic items designed for these displays would be a welcome advancement.

Thus with the growing number of devices employing less typical displays and because conventional digital content for these devices is static third party vendors and consumers desire the ability to publish and or create their own content for various of these devices. Accordingly there remains a need to improve the way dynamic digital content is delivered to and rendered on devices with different display characteristics.

This disclosure made in terms of a specific context e.g. an eBook reader but is applicable to other types of electronic devices e.g. computers PDAs etc . This disclosure is directed to one or more tools that facilitate development of dynamic digital content to be rendered on a client device with a particular screen configuration. The dynamic digital content DDC tools facilitate development of applications for structured presentation via a particular dynamic markup language DXyml . The DDC tools and the DXyml markup language enable dynamic digital content designers to specify precise two dimensional locations at which to position digital content including dynamic elements of the digital content onto a display with a particular screen configuration.

The DDC tools which are described herein may be implemented independently or as a part of a schema via a scripting language thereby allowing developers to create content designed for devices with a particular screen configuration. In an aspect of at least one embodiment such content may include interactive content such as games for example word games like word search crossword puzzles and Scrabble . Additionally the interactive content may include number games such as Sudoku and Kakuro. As another alternative the content may include dynamic content for example stock tickers sports scores time temperature etc.

The DXyml markup language specifies an x coordinate and a y coordinate for at least each dynamic content element so that at least the dynamic content element can be placed on a unique pixel of a particular screen configuration.

Dynamic content elements may be populated from one or more sources including remote sources removable sources and internal sources. Additionally each of the sources of dynamic content elements may include specialized data stores of dynamic content. As such the dynamic markup language is referred to as DXyml as it includes instructions to identify x and y coordinates of a dynamic element and also uses tags delimiters instructions and other features of a markup language. By coding in a scripting language developers can access the DDC tools to write applications that utilize DXyml thereby optimizing the applications for particular platforms having particular screen configurations. As such the dynamic markup language is referred to as DXyml as it includes instructions to identify x and y coordinates of a dynamic element and also uses tags delimiters instructions and or other features of a markup language. By coding in a scripting language developers may access the DDC tools to write applications that utilize DXyml thereby optimizing the applications for particular platforms having particular screen configurations.

In an aspect of at least one embodiment the content may include information about the client device with a particular screen configuration on which the content is running. Such information may include 

In an aspect of at least one embodiment dynamic data may be written to a disk causing it to be stored on board the device. Additionally data may be synchronized to a server although the DDC tools may not be running. Furthermore data may be synchronized to a server although the corresponding dynamic element may not be active. Moreover previously synchronized data may be maintained in a cache which may facilitate presentation on a device in an event that the device is unable to synchronize. In addition the DDC tools facilitate dynamic queries. Furthermore the DDC tools may facilitate creation of content like dynamically populated electronic items. For example DDC tools may be operated on an eBook reader. Additionally the DDC tool may implement application programming interface API hooks into an eBook type reader facilitating delivery of system information e.g. remaining battery life LAN module status services currently available and GPS coordinates of the nearest cellular tower etc. . Moreover a DDC tool may facilitate definition of alternate presentation pages within an application such as alternate sheets of electronic paper where dynamic data is dynamically synchronized to a server on a sheet that is not visible at a particular time although another sheet in the application is visible on the device at the particular time.

Additional details of dynamically populating electronic items can be found in copending U.S. patent application Ser. No. 12 060 114 filed concurrently with the instant application and entitled DYNAMICALLY POPULATING ELECTRONIC ITEMS. 

Among other features content written in the DXyml markup language does not need to be executed in a particular order as a conventional browser might execute html because the layout is defined before the content is served. In certain implementations text elements and other non image elements can be rendered first on the display followed subsequently by rendering image elements. Further more than one screen s worth of content may be provided in batch to the devices to allow a user to navigate through multiple screens before seeking additional content. The next batch of content may be fetched automatically in advance of the user requesting the additional content. In this way any latency of downloading the content to the client device can be masked by the pre fetching of additional content based on what the user is likely to request next.

The techniques described herein may be implemented in a number of ways. Example implementations are provided below with reference to the following figures.

The host is implemented on one or more servers . . . N . Many different server architectures may be used to implement the host including arranging the servers as a server farm. The host is capable of handling requests from many user computing devices and serving in response various information and data to the user computing devices. In certain implementations the host is representative of a website that receives requests from the computing devices and returns pages responsive to the requests.

The client devices or simply clients may be implemented in any number of ways. In the devices are illustrated as a handheld electronic book eBook reader device a personal computer J and a portable digital assistant PDA M . Other example client implementations include portable computing devices e.g. laptop computers tablet computers etc. communication devices e.g. cellular phones smart phones etc. entertainment devices e.g. television set top boxes game consoles portable gaming devices digital video recorders etc. and other electronic devices capable of rendering and depicting content.

Developers employ a client device such as J to develop content to be served on a client device with a particular screen configuration on which the content will run such as client device . DDC tools provide an application program interface API upon which developers can build applications and services for a particular client platform such as a device with a particular screen configuration like an eBook reader device such as eBook reader device . An illustrative API implementation utilizes a particular dynamic markup language DXyml for structuring presentation of content on particular client devices with a particular screen configuration.

Users may employ the client devices to request content from the host . In one scenario a client device sends a request such as a uniform resource identifier URI request to the servers . Upon receiving the request the servers process the request and access a content store to retrieve the content. The servers return the content to the requesting client device which invokes a rendering engine to render the content and allow the user to interact with the content. In one implementation the returned content may include links that enable the client device to request downloadable content stored and offered by the host . Other user interfaces such as dedicated applications implemented using software instructions and stored locally on a device may additionally or alternatively be used to interact with the host .

In one implementation the content store may store the content in collections of pre created presentations . In an aspect of at least one embodiment presentations include interactive content dynamic content client device information pages and sheets created utilizing DDC tools . Each collection of presentations may be associated with a particular screen configuration. The screen configuration includes many characteristics including for example screen size screen type refresh rate device type manufacturer and so forth. The association between presentations and corresponding screen configurations may be implemented through data structures in the content store such as tables that associate listings of presentations pages and sheets with various types of devices and or screen configurations.

In one implementation presentation is created using a creator which is shown implemented as a software module that executes on servers although it may be implemented on other computing devices separate from servers such as personal computer J . The creator includes a DXyml editor that enables designers to craft the presentations using the display dependent markup language. The DXyml editor allows the designers to identify dynamic and static content elements to be included in the presentation and to specify two dimensional coordinates at which to position the content elements for display on a particular screen configuration. A more detailed discussion of the DXyml markup language is provided below with reference to .

In one implementation the presentations may be created in advance and stored in the content store for subsequent service to the client devices M . Such presentations are preconfigured for corresponding screen configurations. Alternatively the presentations illustrated in may represent presentation templates that are used to dynamically create presentations on demand. In that case the presentation templates are configured for various screen configurations. With dynamic presentation creation a suitable presentation template is selected and populated with content to form a presentation including dynamic content elements that may be served in response to a user request or triggering event such as power on WAN activation low battery etc.

The servers also support a selector which is shown as a software module. The selector selects one or more presentations to return to a requesting client . The selector may make the selection based in part on the screen configuration of the requesting device. There are many ways that the selector may use to determine the screen configuration of the requesting device. In one approach the client includes the screen configuration as part of the request. In another approach the servers deduce a probable screen configuration based on the DDC tools being requested. In yet another implementation the servers may be designated to support exclusively a single type of device and hence all displays are the same.

The presentations when served to the clients define how the content is to be arranged on the display. As noted the DXyml markup language allows the designer to specify an x coordinate and a y coordinate that precisely locate the content element on the display. By designing different collections of presentations for different screen configurations the same content may be arranged differently depending on the display. To illustrate this point notice that the three clients J and M are all rendering presentations having content elements represented by an image ABC and a greeting Hello . However each client has a different screen configuration.

The eBook reader device has one display type e.g. electronic paper display technology on which a presentation of content elements is rendered. If the underlying DXyml source for page were revealed as presented by the magnifying glass and a source window the image ABC is positioned at the two dimensional coordinates of x 35 y 11 and the greeting Hello is placed at coordinates of x 45 y 78 . These positions were established by the page designer for this particular screen configuration. More specifically the coordinates 35 11 and 45 78 uniquely specify corresponding pixels in the display of the eBook reader device at which the image and greeting are positioned.

In contrast the PDA M has a different display type e.g. a touch screen display panel on which another page is rendered. The DXyml source code reveals that the image ABC is positioned at the two dimensional coordinates of x 10 y 6 and the greeting Hello is placed at coordinates of x 10 y 29 as exhibited in a source window . Thus due to the different screen configuration the content elements ABC and Hello are located at different places on the eBook reader device and the PDA M .

In this manner through serving different presentations to different devices the servers may essentially dictate how content is depicted on the various devices . In this sense the clients exhibit a thin client model in which the clients need not run sophisticated browsers to render the pages rather the servers tell the clients precisely where to place the content on their screens.

The servers may store and serve presentations including DXyml based content alone or in conjunction with conventional web pages crafted using other markup languages such as html. In the personal computer J represents a device that receives and renders within a browser conventional web pages crafted using traditional html.

Additionally presentation may be created by a developer using a scripting language on a client such as the personal computer J . The developer may access an API store to download API specifications for the DDC tools such as API modules in order to design content for presentations using the display dependent markup language such as DXyml . A DXyml editor may be provided which allows the designer to identify content elements to be included in the presentation and to specify two dimensional coordinates at which to position the content elements for display on a particular screen configuration which will not be stored in the content store . For example the developer may create a presentation in a scripting language and utilizing downloaded API modules from the API store and the DXyml editor . Furthermore the developer may download selector which may facilitate selecting presentations for design based in part on the screen configuration of a target device such as an eBook reader . The developer may create the presentation on personal computer J and then transfer the presentation to an eBook reader . Alternately the developer may create the presentation on others of the client devices such as a laptop a PDA M or an eBook reader device . A more detailed discussion of the DXyml markup language is provided below with reference to . One or more of the API specifications for the DDC tools the DXyml editor and or selector may be downloaded as part of a software development kit SDK not shown.

In one implementation the presentations may be created in advance on one client device and stored statically on another client device until a predetermined triggering event occurs associated with the client device on which the presentations are stored for example on client device . Such presentations are preconfigured for corresponding screen configurations.

The presentations when served to the clients define how the content is to be arranged on the display. As noted the DXyml markup language allows the designer to specify an x coordinate and a y coordinate that precisely locates the content element on the display.

As discussed the DXyml markup language enables page designers to designate precise locations of the content elements for a given display type. In this manner the clients do not need to run browsers or other html layout engines to layout how and where the content elements are positioned on the display. Instead the client devices merely parse the DXyml code and place the elements at the locations prescribed by the DXyml instructions in the pages designed for the client displays. To further illustrate these concepts and show how content elements are positioned on a particular screen configuration according to the underlying DXyml markup language. shows the eBook reader device rendering a page with multiple content elements. The page was created using DXyml markup language and designed specifically for the screen configuration of the eBook reader device . shows the eBook reader device rendering a sheet with multiple content elements. The sheet was created using DXyml markup language and designed specifically for the screen configuration of the eBook reader device . The source of the markup language used to render the content elements of is illustrated in .

DXyml is a dynamic XML based markup language which provides support for a variety of scripting languages such as for client side content development. For example DXyml may provide support for ECMAScript type dialects like JavaScript and JScript. DXyml is a specialized markup language providing all of the necessary features to create dynamic content on a multitude of devices for example on devices such as an eBook reader device and requiring only a lightweight browser on the device. A lightweight browser is one that does not require the processing power of typical browsers such as Internet Explorer and Firefox . DDC tools and DXyml provide lightweight web enabled APIs for use on devices such as eBook reader devices without cascading style sheets. Furthermore additional APIs to be exposed on such devices need not be connected to a network.

DDC tools provide a standard for creating dynamic content rendered using DXyml on an eBook reader device. Furthermore DDC tools allow developers to program function calls triggered by particular device events. Additionally DDC tools allow developers to write applications that interact with particular devices such as the eBook reader device .

DXyml provides support to many applications. For example DXyml may support an online content store RSS Readers including display of textual components and selectable HTML links via a lightweight web browser and Dynamic digital content DDC presentations which are DXyml based applications written for an eBook reader platform. For example such presentations may include stock tickers weather sport scores dynamically updating eBooks etc.

Before describing the Dynamic Display Dependent Markup Language Interface further a brief description of the eBook reader device will prove helpful for subsequent discussions. Referring now to the eBook reader device allows users to consume electronic content e.g. text graphics multimedia interactive dynamic and the like such as that found in electronic books magazines RSS feeds newspapers games and the like. The eBook reader device has a body or housing a keyboard and a dual display system comprised of a first display and a second display .

The device keyboard includes a plurality of keys. In the illustrated implementation the keyboard includes at least 26 alphabet keys arranged in a QWERTY format as well as other function keys such as space bar control keys function keys and so forth . The keyboard may additionally or alternatively include other arrangements of the 26 alphabet keys that do not conform to the QWERY layout.

The first display in the dual display system presents content in a human readable format to the user. The content presented in the first display may take the form of electronic books newspapers or other readable or viewable materials. For example the display provides the text of the electronic books and also depicts any illustrations tables or graphic elements that might be contained in the electronic books. In one implementation the content display employs display technology with a relatively slow refresh rate such as an electronic paper display in exchange for a relatively low rate of power consumption. This tradeoff serves to maximize battery life. In some implementations the display is not responsive to user input.

The second display of the dual display system is a narrow screen located adjacent to the content display illustrated positioned to the right of the content display although it may be located elsewhere in the housing in other implementations. The narrow display screen may be responsive to user input. Additionally the narrow display screen may enable presentation of graphic elements that correspond to content displayed in the content display . For example some displays that may be used with the implementations of the narrow display include organic LEDs TFT and PN LCD.

The narrow display screen provides many diverse functions. For instance it may present a form of user interface that enables the user to command the device to turn pages of text scroll up or down pages of text zoom in or zoom out navigate to other locations or the like. Additionally for example the user might tap one part of the narrow display to scroll in one direction and may tap another part of the narrow display to scroll in another direction. The device may include additional user inputs such as a page turning mechanism a scroll wheel keys in the keyboard or soft keys depicted on one or both of the displays.

As illustrated in a page is rendered on the content display . A page may include dynamic content such as that supported by DDC tools. The term page when applied in the context of the eBook reader device refers to a collection of content that is presented at one time in the first display . Thus a page may be understood as a virtual frame of the content or a visual display window presenting the content to the user. Pages are not fixed permanently in contrast to the pages of published hard books. Instead pages may be redefined or repaginated when for example the user chooses a different font for displaying the content in the first display .

One alternative presentation of content on display enabled by DXyml is sheet presentation. The term sheet when applied to the context of the eBook reader device refers to a collection of content that is presented at one time in the first display which is dynamic in the sense that a sheet may include dynamic content such as that supported by DDC tools but sheets may not be redefined or repaginated in the same way that pages can. Sheets provide permanently fixed presentation space similar to pages of published hard books tailored to a particular device such as the eBook reader device .

The illustrated page in includes eight content elements a text logo ABC Store a text greeting Hello John Smith a text book title The Purpose Driven Life What on Earth Am I Here For a book cover image a text invitation visit us at www.abcstore.com a light gray rectangle a price in U.S. dollars 4.95 and a currency converter 3.21970 . Also shown to aid in understanding are horizontal and vertical dashed lines to represent certain rows and columns of pixels in the eBook display such dashed lines are not a part of the display. In this example the pixel rows are enumerated 0 1 2 . . . to R from left to right and the pixel columns are enumerated 0 1 2 . . . to C from top to bottom thereby placing the location 0 0 at the upper left corner of the display. As one example the content display is 600 800. In other embodiments the origin of the axes may be located elsewhere in the display e.g. top right bottom right bottom left center etc. .

The text logo ABC Store is positioned at the pixel specified by two dimensional coordinates 0 0 having an x coordinate of zero x 0 and a y coordinate of zero y 0 . More specifically the upper left corner of the logo image is placed on the pixel location 0 0 . Similarly the upper left corner of text greeting Hello John Smith is placed precisely at the pixel specified by the coordinates 35 78 . The text book title is positioned at the pixel designated by the coordinates 141 314 and the book cover image is arranged at the coordinates 141 368 . The book price in U.S. Dollars is positioned at the pixel designated by the coordinates 35 542 and the Dynamic Currency Converter providing dynamic conversion to selectable currencies in this example illustrating conversion to Euros is arranged at the coordinates 141 542 . Lastly in this example a text invitation visit us at www.abcstore.com is positioned at the coordinates 35 730 and a light gray rectangle is drawn with the upper left corner placed at the coordinates 0 720 .

As illustrated in a sheet is rendered on the content display . The illustrated sheet in includes a presentation created utilizing DDC tools of a user authored poem containing five content elements a text logo My Poem an author s name a user authored poem The DXyml parser Allows attributes to dis play as children a 3party content image a text invitation visit us at www.abcstore.com and a light gray rectangle . Also shown are horizontal and vertical dashed lines to represent certain rows and columns of pixels in the eBook display. In this example the pixel rows are enumerated 0 1 2 . . . to R from left to right and the pixel columns are enumerated 0 1 2 . . . to C from top to bottom thereby placing the location 0 0 at the upper left corner of the display. As one example the content display is 600 800.

The text logo My Poem is positioned at the pixel specified by two dimensional coordinates 0 0 having an x coordinate of zero x 0 and a y coordinate of zero y 0 . More specifically the upper left corner of the logo image is placed on the pixel location 0 0 . Similarly the upper left corner of the author s name Author Anonymous is placed precisely at the pixel specified by the coordinates 10 100 . Similarly the upper left corner of user authored poem The DXyml parser Allows attributes to dis play as children is placed precisely at the pixel specified by the coordinates 10 40 designating a relative percentage based on screen size. Designating display positions relative to overall screen size has the advantage that developers need not know exactly what size screen will display the content in order to create content which may be accommodated by various screen sizes. The image is positioned at the pixel designated by the coordinates 141 480 . Lastly in this example a text invitation visit us at www.abcstore.com is positioned at the coordinates 10 730 and a light gray rectangle is drawn with the upper left corner placed at the coordinates 0 720 .

Certain instructions specify location information for placement of content elements within a two dimensional space. In one implementation the location information is specified in instructions adhering to a syntax or format as follows 

As an example an instruction specifies that the text Author Anonymous is to be positioned at the coordinates 10 100 as seen by the instruction components x 10 and y 100 . Notice in the Author designation is rendered at the location 10 100 according to this instruction. As another example an instruction specifies that the content element myPoem is to be positioned at the coordinates 10 40 as seen by the instruction components x 10 and y 40 . Again in the poem is rendered with its upper left corner beginning at the pixel location 10 40 . Similarly an instruction specifies that the third party content image is to be positioned at the coordinates 141 480 as seen by the instruction components x 141 and y 480 . As a result the upper left corner of the third party content image in is positioned at pixel location 141 480 .

One notable aspect of the DXyml source code is that unlike html instructions DXyml need not be written in a left to right top down manner in correlation with how the elements will eventually be arranged when rendered on the display. Instead the content elements can be described anywhere in the document. As one example an instruction is provided to write the text string visit us at www.abcstore.com at a pixel location 10 730 . In this text invitation is shown at the lower left portion of the display . Notice in the DXyml code of that the instruction is the opening text instruction followed by the text instruction to write the logo My Poem at the pixel location 0 0 at the top left portion of the screen. Thus the order of the instructions in the DXyml code does not correlate with the arrangement on the display because even though instruction is before instruction the corresponding element visit us at www.abcstore.com is positioned below the text My Poem on the display . This feature of the DXyml code is achieved because the x and y coordinates are stipulated as part of the instruction thereby allowing the full screen to be filled with the most quickly rendered information while additional information is still loading leading to an enhanced user experience.

Moreover as described below in more detail the DXyml engine may parse the instructions and render content elements in separate passes. For example in one implementation the DXyml engine first processes and renders non image elements on the display and then subsequently processes and renders the image elements.

Further the relative depth of content elements on a page known as z order is implied in the instructions of the DXyml code. To illustrate this point an instruction in directs the drawing of a rectangle having its upper left corner positioned at the pixel location 0 720 . According to the attributes in the instruction the rectangle has a light gray fill and dimensions of 80 pixels in height by 600 pixels in width. As shown in the light gray rectangle is drawn at the bottom of the display screen . With reference again to the text instruction positions the text string visit us at www.abcstore.com at a location 10 730 that resides within the rectangle. Since the text instruction follows the rectangle instruction the z order implied in this sequence is that the rectangle is drawn first and the text invitation is written over the rectangle. This is shown in where the rectangle resides behind the text invitation to convey a relative depth of the two content elements.

The DXyml engine may support a variety of scripting languages via an embedded scripting engine. For example the DXyml engine may embed an engine like the Rhino JavaScript Engine. The DXyml engine will also support an extended subset of existing APIs. For example the DXyml engine may support an extended subset of DHTML JavaScript and Asynchronous JavaScript with XML Ajax application programming interfaces APIs . DXyml may use JavaScript in an asynchronous fashion. The DXyml engine may also support a subset of document object models DOMs for example for parsing and creating xml documents. DXyml documents are not parseable via DOM. Instead an element s JavaScript variable name will correspond to its I.D. The DXyml document can be referred to by the global name xyml. The DXyml engine supports a specialized DOM like API which may for example be used to dynamically create new objects and assign the dynamically created new objects to the appropriate parent object. Parent objects may be objects such as xyml documents sheets or overlays. Overlays are a window that may appear at a higher layer than the screen s window and whose dimensions may be less than the screen s. One object can be synchronized at a time and the order or frequency of synchronizing is not guaranteed.

The DXyml markup language has many different instruction types. Some of these instruction types are shown in the source of and will now be described. The first line of source names the top level element xyml which encapsulates the entire document. This element has a corresponding scripting object xyml global singleton named xyml . The xyml node has the following attributes 

A handler instruction as represented by instruction represents the xyml element s handler. The xyml element and sheets may contain handlers. Handlers that are child elements of sheets will only become active when the parent sheet is visible and will override handlers that are child elements of the xyml element. The handler has the following attributes 

A menu instruction not shown in has a corresponding scripting object and allows designers to create arbitrary menus. An AppMenu is created by default. The menu objects have the following attributes 

A menuitem instruction not shown in represents an item that appears in a menu. When a menuitem is contained in a menu object the menuitem will display in that menu object. When a menuitem is not contained in a menu object the menuitem will display in the AppMenu in the lower right hand corner. The menuitems have the following attributes 

A sheet instruction as represented by instruction represents the DXyml sheet element. A sheet instruction as represented by instruction provides for a single screen layout of a set of displayable elements and handlers. Only one sheet may be viewable at a time. A visible sheet is one whose elements can be drawn and whose handlers can be triggered. A DXyml chunk may define any number of screen layouts via sheet instructions. The sheet has the following attributes 

An overlay instruction not shown in represents a window that appears at a higher layer than the screen s window and whose dimensions may be less than the screen s. Overlays may be configured such that at most one overlay can be displayed at a time. Alternately overlays may be configured such that multiple overlays may be displayed concurrently. The overlay has the following attributes 

A text element is a container for text. As represented by instructions and when a text element is first displayed it will display as much of its contained data as it can fit on the display screen. Text instructions nextPage and prevPage will automatically show the next or previous screen s worth of data. In an aspect of one implementation y corresponds to the base of the first line. Alternately y may correspond to the top of the text container. Text has the following attributes 

A span instruction not shown in represents a subset of the data in a text element. The span instruction has the following attributes 

A textbox instruction not shown in represents a textbox which in DXyml will be embedded directly in the parent of the textbox. The textbox instruction has the following attributes 

A line instruction not shown in represents a line graphic. The line instruction has the following attributes 

A rectangle instruction not shown in represents a rectangle graphic. The rectangle instruction has the following attributes 

A hidden instruction not shown in represents a hidden element. The hidden instruction has the following attributes 

A submit instruction not shown in represents submitting an element. The submit instruction has the following attributes 

A checkbox instruction not shown in represents a checkbox element. The checkbox instruction has the following attributes 

A radio instruction not shown in represents a group of radiobuttons. The radio instruction has the following optional attributes 

A radiobutton instruction not shown in represents a radiobutton element. The radiobutton instruction has the following attributes 

An image instruction as represented by instruction displays an image. The image instruction has the following attributes 

A select instruction not shown in represents a list of states. The select instruction has the following attributes 

An option instruction not shown in is a member of the select instruction and facilitates building the list of states. Each state of the select instruction is its own option. The option instruction has the following attributes 

Although not shown in functions and elements are provided for ECMAScript type dialects like JavaScript and Jscript. The following examples are provided for JavaScript.

Several specific API calls are supported. For file system access both a File object and a Path object neither shown in are provided. Functions include 

A Device.getInfo instruction not shown in is provided as a call to get information about the operating device. can be one of a list of strings that are used to determine the return value. Strings may include 

Synchronizing DDC tools and the DXyml markup language allow applications developed for a client device with a particular screen configuration on which the content will run such as client device to have the ability to execute code when the applications are inactive and the network connection such as a WAN is enabled. For example an email client may want to download new emails after the device downloads new newspaper issues. For an application to be synchronizable the application specifies a synchronization file in the application s configuration file such as config.wid. When the configuration file contains a synchronization action property its value is executed as a script.

Regardless of whether the application is running while synchronizing the only DXyml elements the script can access are xyml which is still a global singleton and images which have to be allocated in the script . Scripting objects such as JavaScript objects file path XMLHttpRequest DOM objects etc. are also accessible. Synchronizing applications such as those running in the background cannot access the screen. During synchronization the alert function will behave like the print function for example by causing a message to print to a log file and not display on the screen.

The DXyml parser may allow attributes to be displayed as child elements. For example in handler nextHandler action is a child element but in handler prevHandler action is an attribute.

As introduced above DDC tools facilitate definition of alternate presentation screens also known as sheets. When a DXyml document contains sheets the DXyml parser may allow exactly one sheet to be visible at all times alternately multiple sheets may be visible but in any event the content contained on each sheet remains fully presented on that sheet. Handlers and elements may be defined outside of a particular sheet and associated with the DXyml document. Additionally handlers and elements may be defined within a particular sheet. Handlers that are defined within a particular sheet are only active when the sheet is visible and override the document s handlers. For example if there are multiple on NextPage handlers in a document at most one on NextPage handler may be triggered at any particular time.

At a request for DDC tools is sent from a requesting client device. With reference to the servers receive requests from the various client devices M . At the screen configuration being requested is ascertained. The servers may determine the screen configuration in many different ways. In one approach the screen type may be included in the request for DDC tools. In another approach the server deduces the screen configuration based on the DDC tools being requested. Still another possibility is that one or more of the servers is dedicated to serve DDC tools for only one kind of device and hence the screen configuration is pre known as an operating parameter.

At the appropriate DDC tools are selected based on the screen configuration. This may be accomplished by for example using the screen configuration as an index parameter for retrieving the appropriate DDC tools from the API store .

At the DDC tools are received by the requesting client device such as J . In the architecture of the servers serve the DDC tools over the network to the client devices .

At content for presentation is created using a scripting type language and the DDC tools facilitate the particular display layout via the dynamic display dependent markup language. The presentation contains one or more content elements such as text lines shapes and images. In an aspect of at least one implementation the one or more content elements may be dynamic. The markup language allows the designer to specify locations at which to place the content elements on a display having a particular screen configuration. shows one representation of DXyml source code for a presentation rendered on the eBook reader of . The presentation creation can be understood as a series of sub operations that include at defining delimiters to identify the content elements to be presented on the display. In the example the delimiters are the symbols . At within selected delimiters coordinate information is specified to locate the content elements within two dimensional space of the particular screen configuration. In the source of the coordinate information is specified as x y coordinates where an x coordinate x and a y coordinate y uniquely locate a pixel in the particular screen configuration. At the completed presentation is prepared for consumption. Additionally preparing the presentation may cause the presentation to be saved in system or removable memory on the requesting client device. Alternately preparing the presentation may cause the presentation to be saved in a content store such as content store and or preparing the presentation may cause the presentation to be delivered to another client device.

At one or more presentations containing content items including dynamic content items are received at the client device. The presentation s may be received via installation of a removable memory transferred via a wired or wireless network such as a network from a peer connection such as between client personal computer J and eBook reader device and or downloaded from a server such as server . The presentation s is suitable for rendering on a particular screen configuration such as the display of the eBook reader device . At the presentation s is cached locally at the client device.

At the page s is rendered. With reference to the DXyml engine parses the DXyml source to render the content items on the display. shows the page corresponding to the source rendered on the large display . The rendering process may be viewed as a series of sub operations. At the DXyml engine processes instructions pertaining to static content elements. Static content elements may include text graphics images etc. At the static content elements are printed to the screen. Subsequently at the DXyml engine processes instructions pertaining to dynamic content elements. In one implementation a separate thread is created for each dynamic content element retrieving the dynamic content from an appropriate source. In an aspect of at least one implementation the source is pre identified such as an internal or external source which include particular device components such as illustrated in e.g. control module s a specialized data store such as content store or a particular client device such as a particular personal computer J or PDA M . Alternately the source may be located utilizing a search engine or via a remote search entity. When one or more dynamic content elements are processed at the screen is updated by printing the dynamic content elements along with the static content elements.

At a new request for a next batch of pages or sheet s may be automatically generated and sent by the client device while the user continues to navigate among the multiple pages or sheets in a current batch. For example suppose that pages 1 5 of an electronic book or article containing dynamic content elements or not have been downloaded to the eBook reader device. When the user advances to page 3 or some other page that is less than the last page in the cache the device may automatically initiate a request to fetch the next five pages 6 10 and update any dynamic content elements included in pages 6 10. In this way any latency of downloading the content to the client device can be masked by pre fetching additional content based on what the user is likely to request next.

In another alternative suppose that a sheet presenting the beginning of an interactive game has been presented on the eBook reader device. Upon the beginning sheet s presentation the device may automatically initiate a request to populate the dynamic content elements of the interactive game. In this way latency of populating the dynamic content elements on the client device can be masked by pre loading additional content based on what the user is likely to want next.

In yet another alternative suppose that dynamic content such as a sports score reporter with dynamic field s is presented on the eBook reader device. The dynamic field s may include information indicating when the dynamic field should be populated or updated refreshed e.g. a time interval and or upon the occurrence of a particular event .

Applications developed utilizing DDC tools and the DXyml markup language may facilitate code execution from both an inactive and active state. In an aspect of at least one embodiment when a device is connected to an active network connection e.g. WAN LAN Intranet Internet the device may be synchronized to a server although the application may not be running. Additionally with an active network connection data may be synchronized to a server although the corresponding dynamic element may not be active. For example an email client on a device such as an eBook reader device may want to download new emails after the device downloads new newspaper issues. An application may facilitate such synchronization ability via specifying a synchronization file in the configuration file such as a config.wid file via the DDC tool. Additionally when the config.wid file contains a synchronization action property the value of the config.wid file may be executed as a script.

Regardless of whether the application is running while synchronizing the only DXyml elements the script can access are xyml which is still a global singleton and presentation which have to be allocated in the script . JavaScript objects file path XMLHttpRequest DOM objects etc. can also be accessed.

The DXyml engine parses the DXyml markup language such as the source in to render the content elements on the large display . One notable feature of the rendering process is that due to the nature of the DXyml markup language the DXyml engine may execute the instructions out of order. It does not need to execute the instructions in order in the way a browser conventionally executes html. For instance in one implementation the DXyml engine first renders static elements. Then the DXyml engine renders all dynamic elements. In one approach the DXyml engine utilizes one thread per dynamic content element to request the dynamic content element to be downloaded for the presentation. Once all of the dynamic content elements have been retrieved a presentation update is performed to present all of the dynamic content elements on the display at the same time thereby adding the dynamic content element to the static elements already on the display.

In addition to the system storage the eBook reader device may have access to one or more sources of remote storage over a network or on a peer to peer basis. The sources of remote storage may be accessible using the network connection module for example and may be in communication via a wired or wireless connection. The remote storage may include a personal computer another eBook reader or any other suitable remote storage device. Moreover the eBook reader device may receive content via one or more types of removable storage .

The system storage and remote storage may include volatile memory such as RAM nonvolatile memory removable memory and or non removable memory implemented in any method or technology for storage of information. System storage remote storage and removable storage may be implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. Also the processing unit may include onboard memory in addition to or instead of the system storage . Some examples of storage media which may be included in the system storage remote storage and or removable storage include but are not limited to RAM ROM EEPROM memory cards such as SecureDigital SD cards flash memory or other memory technology CD ROM digital versatile disks DVD or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can be accessed by the eBook reader device . Any such computer storage media may be part of the eBook reader device .

Various instructions methods and techniques described herein may be considered in the general context of computer executable instructions such as program modules executed by one or more computers or other devices. Generally program modules include routines programs objects components data structures etc. for performing particular tasks or implementing particular abstract data types. These program modules and the like may be executed as native code or may be downloaded and executed such as in a virtual machine or other just in time compilation execution environment. Typically the functionality of the program modules may be combined or distributed as desired in various implementations. An implementation of these modules and techniques may be stored on or transmitted across some form of computer readable media.

Although the subject matter has been described in language specific to structural features and or methodological acts it is to be understood that the subject matter defined in the appended claims is not necessarily limited to the specific features or acts described. Rather the specific features and acts are disclosed as illustrative forms of implementing the claims

