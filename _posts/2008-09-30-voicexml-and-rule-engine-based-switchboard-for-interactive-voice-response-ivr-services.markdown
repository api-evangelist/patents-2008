---

title: VoiceXML and rule engine based switchboard for interactive voice response (IVR) services
abstract: Call routing systems and methods are provided. A particular routing method comprises decoding a message based on an incoming call to determine whether a live agent is required. When a live agent is not required, a destination interactive voice response (IVR) application is identified, a determination of whether the destination IVR application is VoiceXML capable is made, and the incoming call is sent to the destination IVR application when the destination IVR application is VoiceXML capable. When the destination IVR application is not VoiceXML capable, a determination of whether the destination IVR application is capable of supporting an external data interface is made, and incoming call session data is routed to the destination IVR application when the destination IVR application is capable of supporting the external data interface. An audio file including one or more dual tone multi-frequency (DTMF) commands based on the incoming call session data is constructed and sent to the destination IVR application when the destination IVR application is not VoiceXML capable and is not capable of supporting an external data interface.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08090086&OS=08090086&RS=08090086
owner: AT&T Intellectual Property I, L.P.
number: 08090086
owner_city: Atlanta
owner_country: US
publication_date: 20080930
---
The present application is a continuation of and claims priority to U.S. patent application Ser. No. 10 672 292 filed Sep. 26 2003 entitled VOICEXML AND RULE ENGINE BASED SWITCHBOARD FOR INTERACTIVE VOICE RESPONSE IVR SERVICES and is hereby incorporated by reference in its entirety.

This disclosure relates generally to telecommunication systems in both public or private circuit switched telephone networks PSTN and Internet based Voice over IP VoIP networks

Certain early work in call routing technologies are based on previous generations of interactive voice response IVR platforms where sharing a centralized business logic and decision source among hundreds of isolated IVR systems within an enterprise is not technically feasible. When calls come to one IVR node the business logic that decides where to route the call to another IVR node or live agent is hardwired into the service logic being executed on that node. It is difficult to maintain the consistency or update such business logic for any enterprise with a large number of IVR platforms installed in multiple locations.

More recent systems use automatic call distribution ACD using a proprietary application programming interface API in conjunction with various computer telephony interface CTI technologies. The routing logic in the ACD is hardcoded in software programs running on the ACD. Similarly when one IVR decides to send the call to another IVR or to a live agent via CTI it cannot access up to the minute business logic in order to determine the best routing strategy. Instead individual IVRs rely on their own routing table which reside on individual servers. When there are multiple ACD nodes and dozens of IVR platforms across an enterprise call center environment it is very difficult to maintain a common image across all of these routing tables to reflect a centralized business logic on a real time basis.

Accordingly there is a need for an improved system and method of handling calls in an enterprise call center environment.

The present application discloses a call routing system and a method of communicating with a call originator. The call routing system includes a voice converted data module having an input to receive an incoming call an interactive voice response dialog module responsive to the voice converted data module and a call routing module responsive to the voice converted data module. The call routing module is to route the incoming call to a destination. The method of communicating with an originator of a call includes receiving a call at an automated call handling system performing an evaluation of the call based on a set of business rules routing the call to an interactive voice response unit based on the evaluation and in response to the call automatically scheduling and sending an email to the originator of the call. The email includes a targeted communication message relating to the subject matter of the call.

The disclosed system provides a VoiceXML based software driven switchboard powered by multiple rule engines that routes calls from one source to another. Referring to a system for handling calls is shown. The system includes a voice converted data module e.g. VoiceXML root engine an IVR dialog engine and a routing engine . The VoiceXML root engine the IVR dialog engine and the routing engine are all coupled to an application server . The application server is coupled to a database to store business rules and logic. The VoiceXML root engine is coupled to a second database which includes DNIS rule tables. The VoiceXML root engine is coupled to the application server via connection and is coupled to the DNIS rule table via a connection . The VoiceXML root engine is coupled to the IVR dialog engine via connection . The VoiceXML root engine has an input responsive to various incoming IVR applications IVR IVR to IVRn internet based telephony systems and time division multiplexing TDM telephony systems such as the session internet protocol SIP TDM phone and wireless telephony systems such as a wireless communication device . The IVR dialog engine is coupled to a computer telephony interface CTI via connection . The computer telephony interface CTI is coupled to a customer relationship management CRM database via connection . Connection may carry a telephone number request and may retrieve customer information related to that telephone number from the CRM .

The CTI is coupled to an agent terminal via connection and is coupled to a personalized call hold queue . The personalized queue is routed to agent queues having access to an audio content library . The agent queue may be routed to particular types of automated call handling systems such as billing system repair system and collection system . These subject matter based call handling systems may route calls to an agent terminal to provide customer assistance. Alternatively the subject matter call handling systems may be connected to interactive voice response units to provide automated and computer generated responses to customer inquiries.

The routing engine is coupled to an internet connection via web agent and connection . The web agent may provide a telephone number to customer relationship management database for the retrieval of additional information associated with the telephone number for a given customer. An example of such information includes a customer history prior transactions address name and call profile preferences. The web agent via the web interface may provide electronic communication such as email notifications . The routing engine module is coupled to a destination IVR rule table via connection . In addition the routing engine is connected to logic at decision step to determine whether a live agent is required at decision step for further processing of calls being handled. Where an agent is required processing continues from decision block to CTI and where an agent is not required processing continues to processing block for an application to application connection to a designated destination IVR application .

Based on a caller profile associated with the telephone number and based on data retrieved from the CRM database CTI may set an optional flag for the call that is provided in the agent queue. If a flag is set and the queue is long the call may be bridged to a selected audio clip stored in the audio content library database . A customer with a particular call profile may then receive product information deemed to be interesting to the caller while the caller is waiting in the queue. When a call proceeds to the queue and is routed to an agent terminal a screen pop may be displayed at the agent terminal which is initiated by CTI . The screen pop may contain specific information associated with the caller s telephone number and may be automatically populated on the agent screen based on customer information retrieved from the CRM database . An example of such information is a customer size category such as small business individual or large business and preferred call treatment.

The disclosed system provides a VoiceXML based software driven switchboard powered by multiple rule engines that routes calls from one source to another. The switchboard offers four basic programmable paths as follows 

Switching logic inside the system is downloadable over the web from a centralized data source containing business logic and or rules using standard HTTP interface. This data source may be managed by a relational database management system or emerging technologies such as XML server or XML database . The business logic database may include rules based on the caller s telephone number time of day type of services interest to them in the past their personal profile and the customer segmentation mid class upper middle class high rollers etc. . The business logic database may also contain a location driven rule subset such that the switchboard can use location information associated with the call to determine whether the caller is physically closer to a particular facility. The location information may be acquired using a WIFI or wireless DSL network. For example if the caller while visiting the new city asks for a top 10 movie the switchboard can pre load a list of the theaters nearby that show that particular movie. the subsequent dialog can provide relevant information to the caller. Because the system may be built as a web server an enterprise can choose to deploy multiple systems that can present the same image to all callers by using the trigger based refreshing mechanism supported by VoiceXML Root Engine . Such a trigger could be a scheduled event such as loading new switching logic every Sunday at 2 AM or pulling a new order from a given URL every 30 minutes.

VoiceXML Root Engine is activated on from its idol position by an incoming call. For any call coming from a traditional time division multiplexing TDM based telephone network the TDM network will deliver a DNIS associated with that call. Once activated the VoiceXML Root Engine first checks if the DNIS is defined in the Valid DNIS Rule Tables for that call period. If not the switchboard can be pre programmed to either 1 not to answer the call or 2 play a pre defined announcement and then terminate the call. If defined the VoiceXML Root Engine may launch a request via Link to be executed on a J2EE Application Server which in turn triggers a set of business rules and logic stored in Database or encoded in a run time rule engine residing on the application server.

Based on the business rules logic matching to the DNIS and telephone number TN of the caller if it is available and confirmed via ANI automated number identification or by the incoming IVR a set of IVR dialogs in the form of VoiceXML pages is sent via Link to IVR Dialog Engine Process . Process will then engage a voice dialog with the caller using a set of pre built statistical language models SLM designed specifically for a given DNIS profile. If the caller s request is fully understood by Process it sends a message Task ID via Link to Routing Engine . Routine Engine decodes the message and determine if the call should be best handled by a live agent. If yes it tells the switchboard to connect the call to CTI .

CTI first checks with Customer Relationship Management CRM system using TN via Link associated with the caller. CRM may decide based on the contact history for this customer that a personalized message for example for consumer customers or special message should be played to the caller if the Agent queue is relatively long for that time of day. For example a large number of calls sitting in the Agent Queue for Billing may just want to find out their monthly account balance around a due date window. In this case CRM can form a text message and put it in a personalized queue process for those selected callers. Process may use advanced text to speech TTS technology to convert the text message into an audio file. When the caller s turn comes Process may play that audio file to the caller and send the call to a group queue process identified by Routing Engine . Process maintains in real time a Task ID to Skill Set mapping table and uses this table to send the call to a specific queue served by a matching skill qualified agent that is available at that time.

Process may make an advanced reservation via process in order to reserve a slot in the agent queue identified by process . For example for an agent queue such as a billing queue with an estimated waiting time of about 5 minutes process can customize the personalized message to be about 4 minutes and 45 seconds. Thus after the caller finishes listening to their personalized message they will be placed in their reserved position in the billing queue for a much short wait time before served by a live agent.

Unlike a personalized queue for a group queue such as a generalized billing queue connected via link each of the callers in that queue will hear the same message music or product announcement while waiting to be connected to an agent. A Task ID obtained by dialog engine module process can be used to dynamically trigger a different group message stored in Audio Content Library . For example if the switchboard suddenly receives a few thousands calls within a very short period of time that are related to broadband Internet connection a special group message may be invoked for all the calls sitting in the repair queue.

When a CTI detects an idle agent the CTI sends the call context data via link to the agent s desktop by populating various screen fields. Then CTI may play a chained message from either the voice recordings of the caller or a number of concatenated TTS generated audio messages associated with the Task ID. This is known as whisper transfer because the caller will not hear these audio messages while the agent is listening to them. Whisper transfer is particular useful when the data link is not initially available for the implementation of the switchboard in an enterprise call center operation.

If Routing Engine finds a destination IVR application e.g. IVRa in the drawing that matches to Task ID it will check via link the destination IVR rule tables stored in database . Based on the structured rules and the interface template found for that destination IVR application the switchboard activates a software connector which composes various text and or audio messages in a format readable by the destination IVR . If the destination IVR e.g. IVRa is another VoiceXML based IVR application connector can use VoiceXML standards based application to application connection methods such as to pass the call and then release the call from the switchboard. If not connector can physically transfer the call to the destination IVR i.e. IVRa and at the same time pass the call history via in band or out band methods.

Referring to further details of a call center system is shown. The system includes IVR applications SIP end point a telephony communication instrument such as phone and various additional IVR applications . The communication inputs are received at module which is a switchboard routing module and processing continues for the call treatment to telephony media processor and SIP listener . The telephony media processor may retrieve DNIS rule tables from database . An output from telephony media processor and SIP listener module is routed to decision logic where it is determined whether the call is defined in the DNIS rule table. When the call is defined in the DNIS table processing continues by accessing business rule logic database . Where the call is not from a defined DNIS then for the unknown DNIS processing is routed to module to construct a starting document for a default page. The default page for module is then forwarded to application server . Where the call is from a defined DNIS and after the business rule logic and rules have been retrieved from database processing continues to module where a starting document is constructed for pre defined CGU types based on the DNIS time of day day of the week holiday and telephone number. The resulting page is then forwarded as message to the application server .

Also shown in is an interconnection between the VoiceXML root engine module and the IVR dialog engine module . The IVR dialog engine module is used to retrieve a document at the system URL as indicated at . In addition an XML version document is constructed and then passed back to the VoiceXML root engine for additional call processing.

If DNIS is not defined in Database decision step will activate process which will construct a VoiceXML document containing the default dialog CGU . This default dialog tries to reach customer goal understanding CGU without knowing where the call came from since an associated DNIS is not defined in database . 

If DNIS is defined link or SIP call link is determined to have originated from an authorized IP host the root engine will immediately fetch a starting document from a known web server or use a cached version. A first actionable tag inside document may trigger the switchboard system to fetch a root document written in VoiceXML and then pass it to a built in VoiceXML run time interpreter which then executes the processing logic specified in this root VoiceXML document.

If the DNIS is not on the excluded list process will search Database to determine if there are any special rules associated with this DNIS. Decision may consult Database to determine which CGU dialog should be loaded based on the DNIS URL and TN. Once a match is found from Database this root document may instruct the switchboard to activate a software constructor . Constructor may run on a standard J2EE Application Server. The input link to constructor contains business rules and processing logic defined for a group of DNIS URL e.g. all the DNIS associated with a single billing number for that enterprise s customers and TN if available from either the caller s ANI or passed from an incoming IVR application e.g. IVR as shown in the drawing . Based on a set of pre defined CGU dialog templates constructor builds in real time a set of dynamic VoiceXML pages and stores the first page at a pre defined location according to document . After that Root Engine returns control to the switchboard. After the return the VoiceXML interpreter continues to process the first VoiceXML form id CGU specified in the starting document. The tag inside the VoiceXML form CGU will cause the switchboard to activate IVR Dialog Engine by fetching the page just generated.

Referring to further details of methods of using an IVR dialog engine module and the call center system are shown. Inputs including the model VoIP telephone number and other data retrieved from VoiceXML routing engine module is received as inputs at the module . At specific CGU dialog modules are loaded and session records are stored at the session record database . A CGU record is processed at and compared to decision threshold logic at . An initial threshold may be a 20 decision threshold and may require retrieval and access to offline tuning data . A CGU confidence determination is made at decision step . If the CGU confidence level is low then error handling module is accessed which may result in a bail out of the process at . If the confidence factor at is a medium level then the CGU is loaded and direct dialog models are handled at and . A DDM confidence factor is then checked at decision step . Where the CGU confidence level is high a confirmation occurs at and the routing engine is instructed with message to handle routing of the call via routing engine . Referring again to decision step if the DDM confidence level is low a bail out occurs at and the call transfer module is accessed to complete the call. If the DDM confidence level is a medium level and a CGU level is loaded at the processing continues at . In addition the call transfer module provides instructions to the CTI as described above.

As shown in process reads a call profile created dynamically by VoiceXML Root Engine for each call. The call profile specifies which CGU dialog modules should be used for this caller if TN is available or for any caller dialing into a group of DNIS numbers associated with a published number representing a business category such as consumer billing or consumer repair. In addition the profile may also contain control codes from an incoming IVR so that the CGU dialog modules can continue a dialog with the caller in an efficient and user friendly manner. For example if prior to being sent to the switchboard the incoming IVR application e.g. IVR already asked the caller to select a language English Spanish or etc. the IVR application will have an option to create a special control code e.g. LANG 1 where 1 indicates English as a preferred language by the caller and then pass the control code with other session variables such as the TN via a shared session records database . Alternatively an incoming IVR application can choose to send the control codes via an in band signaling method such as channel associated signaling CAS to trigger a dual tone multi frequency DTMF reader inside process . The DTMF reader reads the control codes generated from the incoming IVR application and uses these codes to modify the logic of the CGU dialog modules accordingly. For example if the caller already selected the language while being connected to the IVR application the CGU dialog will not ask the same language question again.

Process employs a selected CGU dialog most often a highly focused CGU dialog designed specifically for a certain profile such as consumer billing or business payment etc to gather further information about the caller s goal why they are calling and so on . If the CGU dialog is able to recognize their goal process sends a confidence score of that recognition to process which controls the decision threshold. The decision threshold may be periodically changed based on an offline tuning database . For example when the switchboard is initially installed database may only contain the tuning data collected from a few thousands of calls. At that initial stage process may choose to use a very tight threshold to determine if the confidence score from a CGU dialog is high enough to be acceptable or not. As the size of Database grows over time the decision threshold may be automatically adjusted to achieve the balance desired between misunderstanding a customer s goal and rejecting the assessed CGU .

Based on fuzzy logic inside process decision will make a final determination as to whether the confidence score from the CGU dialog is low medium or high. If the confidence score is high IVR Dialog Engine will invoke confirmation module which will inform the caller 1 the goal recognized in terms of a set of pre defined user tasks and 2 what the caller can expect next to be sent to another IVR application or to an agent queue. Then IVR Dialog Engine will send the task ID along with other session data via link to routing engine .

If the threshold is medium process will load a set of specific direct dialog modules DDM based on the outcome of the CGU Dialog Process . Such an outcome is represented by a group ID so that DDMs loaded have a focused conversation with the caller to further clarify what they really meant from what they said. For example if a CGU is not determinative of whether the caller really wants to a get information about their bill or b give information about their bill block can load the two DDMs and then pass the control to process . If DDM process is able to successfully recognize the customer s goal with a high confidence the caller will be sent to confirmation process . If decision receives a medium confidence score from process it may choose to load a different CGU dialog and start the customer goal determination process again and by pass the control to Process . For example the DDMs used in Process may reach a conclusion that the call is not really about billing. Instead what the caller really wants is to pay their bill. If that is the case a CGU will be loaded.

If decision considers the confidence score from the CGU dialog process to be low or a failed recognition generates no confidence score at all a set of error handling modules EHM will be invoked to recover from such a situation such as giving the caller another chance or simply bailing out to process via the call transfer module CTM .

Depending upon the useful information collected during such a call interactive problem determination session CTM may decide to set various flags for playing a personalized message when the call is sent to a personalized queue. In addition CTM can be configured to set a flag for various agent queues such as billing repair and etc. When such flags are set the caller may hear a customized message common to all the callers in that agent queue instead of meaningless music on hold . If the last recognition event from CGU dialog or DDM dialog produced an audio recording of the caller s utterance CTM may compose an appropriate audio message for the agent to listen to. Such an audio message may start with an introduction tone followed by the caller s utterance s selected and followed by an ending tone. If there is a confirmed recognition result from the session a corresponding text message will be formatted to feed CTI via link for a proper screen pop at the agent s desktop. Finally CTM has an option to prepare a text message related to the session so that the message may be used for an outbound E channel delivery such as an email notification.

Referring to further details of the routing engine module are shown. The routing engine module is coupled to application server . Additional inputs received from the IVR dialog engine are received as a task ID telephone DNIS and session data at the business rule and logic processing module . The task ID telephone DNIS and telephone number are passed to each notification module and may be used to access the business rule logic database . At decision block the task ID is compared to determine whether agent handling is appropriate. When agent handling is not needed a particular IVR application is identified at and destination IVR rule tables are accessed. When IVR identification is retrieved then processing continues to the decision step to determine if the IVR application is VoiceXML compliant. If so processing continues to set up the application to application transferring module . In the case where the task ID is best handled by an agent processing continues at module which accesses a call transfer module. A call transfer module performs steps such as setting a flyer for personalized messages sending a flag for a category queue preparing audio messages for the agent preparing text messages for a screenpop via a CTI and preparing data for outbound e channel delivery. Processing is then followed by instruction being communicated to CTI to further interface with the agent terminal.

In the situation where the IVR application is not VoiceXML compliant at then a determination is made as to whether the IVR application supports an external data interface. If not processing continues at module to search a dial through table for the IVR. Thereafter a three way call transfer may be made at and routing to a final destination IVR is handled. If the IVR application does support an external data interface then delivery of session data to the application occurs at and a two way call transfer is handled at module prior to final routing to the destination IVR .

In the situation where the IVR application is VoiceXML compliant at once a pre defined task is matched during the dialog with the caller and confirmed IVR Dialog Engine sends the applicable session data such as TN and DNIS to process . Process searches Database to determine how the call should be handled given the business logic or processes associated with such a task. The search process link can be executed by a rule engine which typically resides on a J2EE application server. As a part of the execution logic decision will determine whether the task should be handled by a live agent instead of being routed to another IVR application. If Yes the control is passed to process CTM .

If not process is invoked to identify a proper IVR destination IVR ID application to be routed and then uses to search a database containing destination IVR profiles Database via link . Based on the profile pre defined for the destination IVR IVR ID decision determines if the IVR is VoiceXML capable. If yes the caller is essentially sent to another VoiceXML application through process using standards based application to application transfer methods such as which can easily pass all session related data to the VoiceXML based IVR application via Link .

If the destination IVR is not VoiceXML capable decision determines whether the IVR is capable of supporting any external data interface to receive the session data. If yes process is invoked to deliver the session data to the destination IVR via a shared database or using a specific software adapter built specifically for that IVR. After delivering the session data process is invoked to ask the switchboard to make a two way transfer by making an outbound call to the destination IVR first and then bridge the call that has been put on hold after confirmation process finally disconnects itself the switchboard from the call.

If the destination IVR does not support any external data interface Process will search if there is any dial through table defined for the IVR from Database . If found Process constructs a single audio file .wav file to contain a series of DTMF commands based on the session data collected. For example if the destination s main menu asks the caller to enter a telephone number TN after DTMF 1 is received and then a sub menu the audio file generated by process for such a short cut may have a following structure 

After such an audio file is constructed Process is invoked to make a 3 way call transfer. First the switchboard puts the current call on hold and then makes an outbound call to the destination IVR. Upon the connection the switchboard plays the audio message containing the short cut sequence which will guide the destination IVR to a proper menu before connecting the original caller. This method is also known as whisper transfer since the caller will not hear the audio message played. At the end of the playback of the audio message the switchboard bridges the call to the 3 way connection and then disconnects itself immediately.

The disclosed system uses Voice Extensible Markup Language VoiceXML based technology in general and focuses particularly on improving the capability of switching traffic in and out of a centralized call center environment based on changing business needs and dynamics of existing and future IVR applications. The software architecture is particularly applicable to the call center operations of large enterprises where many of their existing IVR applications are written in proprietary programming languages and have to co exist with VoiceXML based IVR applications. Rule engines used to power the system may be assembled from various light weight modules that are specially designed for real time responses when callers are switched in and out of the switchboard from one IVR to another.

The above disclosed subject matter is to be considered illustrative and not restrictive and the appended claims are intended to cover all such modifications enhancements and other embodiments which fall within the true spirit and scope of the present invention. Thus to the maximum extent allowed by law the scope of the present invention is to be determined by the broadest permissible interpretation of the following claims and their equivalents and shall not be restricted or limited by the foregoing detailed description.

