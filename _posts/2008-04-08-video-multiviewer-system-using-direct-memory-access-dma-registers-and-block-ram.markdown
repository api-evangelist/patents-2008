---

title: Video multiviewer system using direct memory access (DMA) registers and block RAM
abstract: A video multiviewer system includes a Graphics Processing Unit (GPU) that includes a GPU memory. A video input module is operative with the GPU for receiving video data and transferring the video data to the GPU memory via a Direct Memory Access (DMA). A programmable circuit such as a Field Programmable Gate Array (FPGA) includes a multi-ported and in one aspect a dual ported block Random Access Memory (RAM) configured for a plurality of DMA channels for receiving video data and allowing uninterrupted operation of consecutive DMA transfers of video data to the GPU memory. A display displays the multiple video windows based upon video data received within the GPU memory.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09438844&OS=09438844&RS=09438844
owner: Imagine Communications Corp.
number: 09438844
owner_city: Frisco
owner_country: US
publication_date: 20080408
---
The present invention relates to the field of video processing systems and more particularly to video multiviewers and related methods.

As broadcasters continue the transition from analog television to digital video television the television production process is increasingly conducted in an all digital domain that is from the initial camera shot to the display in the consumer s living room. This move to digital technology permits broadcasters to simultaneously broadcast multiple video streams using a single connection. Indeed for popular live events broadcasters typically deploy mobile broadcast units to route and manipulate i.e. producing the numerous video streams that come from respective cameras throughout the event before being transmitted.

An approach to manipulating and monitoring the video streams is a multiviewer which typically includes a monitor and associated processor receiving the high resolution digital video streams. The processor scales the video stream to fit all the video streams onto a single display. Some multiviewers use a plurality of monitors thereby permitting the viewing of even more video streams. A potential drawback to the typical multiviewer is the difficulty in rearranging the video streams on the monitor in real time. For example a user viewing the multiviewer monitor displaying four video streams split equally over quarters of the monitor may desire to expand a first video stream and correspondingly reduce the other video streams. This operation may cause the processor to adjust scaling operations in real time based upon requests from the user. More specifically to provide advanced features to the user the typical multiviewer may have to include significant hardware to provide adequate processing power thereby possibly increasing the form factor and housing size to undesirable levels.

Some exemplary multiviewer systems include the DX series from present assignee Harris Corporation. The DX series Multiviewers delivers modular configurations for 4 8 12 or 16 SDI or composite inputs typically using different input modules with auto detect of NTSC PAL or SDI formats. Composite component SDI and line doubled VGA outputs provide customers with a wide range of flexible display options. Front panel controls and remote control via RS 232 422 provide the user with the ability to view real time multiple images in various pre configured displays. Optional software allows the user configuration of displays and multi system control while options also exist for in picture audio monitoring of SDI embedded audio. Standard alarm features include loss of video sync black picture and frozen picture detection.

Another exemplary multiviewer system is the 7767VIP4 signal monitoring module from the Evertz corporation of Burlington Ontario Canada. The module simultaneously accepts auto detects analyzes and displays four synchronous or asynchronous HD SD Analog video signals. An additional fifth computer graphic input may be used for display of a dynamic background image. A similar multiviewer system is disclosed in U.S. Pat. No. 7 023 488 to Szybiak et al.

Despite the advantages of such multiviewer systems further enhancements may be desirable in some applications. For example system memory constraints often impose restrictions on the number of video inputs that may be simultaneously displayed. Additionally the ability of such systems to display added graphic content e.g. backgrounds indicators etc. along with the video inputs on the display may be encumbered by the requirement for separate inputs for such content or for performing offline modifications to video inputs or display templates for example.

A video multiviewer system includes a Graphics Processing Unit GPU that includes a GPU memory. A video input module is operative with the GPU for receiving video data and transferring the video data to the GPU memory via a Direct Memory Access DMA . A programmable circuit such as a Field Programmable Gate Array FPGA includes a multi ported and in one aspect a dual ported block Random Access Memory RAM configured for a plurality of DMA channels for receiving video data and allowing uninterrupted operation of consecutive DMA transfers of video data to the GPU memory. A display displays the multiple video windows based upon video data received within the GPU memory.

The system includes a DMA controller. The dual ported Block RAM includes first and second ports. The first port is operative for accessing video data based on independent read write access and the second port is operative for accessing video data based on simultaneous read write access by the DMA controller. The system also includes a read write controller and plurality of registers. The DMA controller operates on DMA channel n and is operative for pre reading registers for DMA channel n 1. The DMA controller can change state variables in a register set when data is transferred within DMA channel n. The DMA controller is also operative for modifying data within registers and passing the data back to the Read write controller to be stored back within the Block RAM.

This Block RAM is scalable as to the number of DMA channels required for passing data to the GPU memory. A video data controller is operative with the video input module for assigning addresses to be used for video data within the GPU memory.

Different embodiments will now be described more fully hereinafter with reference to the accompanying drawings in which preferred embodiments are shown. Many different forms can be set forth and described embodiments should not be construed as limited to the embodiments set forth herein. Rather these embodiments are provided so that this disclosure will be thorough and complete and will fully convey the scope to those skilled in the art. Like numbers refer to like elements throughout.

In this prototype configuration shown in all configuration and state status registers are stored in the FPGA flip flops which is inefficient for storing large amounts of data. Additionally any Write arbitration and decode logic and Read logic circuit are implemented in FPGA logic blocks. This results in an implementation that requires many flip flops and many resources including FPGA logic resources. In addition this prototype circuit is not adequately scaleable and slows down with increased size. In this prototype configuration attempts to support many DMA channels result in a DMA configuration state maintenance using many FPGA resources which limits the speeds supported by the DMA.

In accordance with a non limiting example of the present invention most of this excess logic using FPGA flip flops is replaced using a multi ported and in one aspect a dual ported Block RAM. As is known RAM implementations typically permit access to a limited number of bits at a time making Block RAM typically not applicable to general register files. In case of an application where only a subset of registers needs to be used at a time such as with multi channel DMA applications it becomes possible to build a highly scalable solution using an FPGA Block RAM. It should be understood that different programmable circuits besides FPGA s can be used including different types of ASIC s and other processors using Block RAM.

A high level diagram of a DMA configured Block RAM system as part of a video input module of a video multiviewer system having DMA registers in Block RAM is shown in . The dual ported nature of FPGA Block RAM allows independent read write access by a Host such as a video controller or read write controller for configuration through one port and simultaneous read write access by the DMA engine controller or processor via a second port. This eliminates a requirement for access arbitration logic. Any read write decode and control logic is also already built into the Block RAM thus eliminating a requirement for implementing it in FPGA logic as in the prototype DMA circuit shown in .

An uninterrupted DMA video or other data for a video multiviewer is achieved through a large number of DMA channels while using Block RAM which effectively has only a single read write port. shows the high level block diagram in which the Host Read and Write circuit is operable with a Read Write Memory Interface and each communicates with the other through appropriate Address ADDR lines Data lines and Write Enable WE lines. The Read Write Memory Interface communicates with the Field Programmable Gate Array FPGA dual ported Block RAM through a first port. The Block RAM has a plurality of different DMA channels as illustrated up to n and n 1 DMA channels which could be configured for as many as several thousand DMA channels. The dual ported Block RAM is operable with another Read Write Memory Interface through the other port and thus to the DMA read write circuit and DMA controller engine or processor which collectively can be referred to as the DMA engine. The DMA Read Write circuit communicates using appropriate Address Data and Write Enable signal lines with the Read Write Memory Interface .

The DMA register access logic is generally shown in this block diagram of . For efficient Read Write Back data access a pipelined approach is utilized such that the Working Register Set required for the next DMA channel n data transfer is Pre Read ahead of time note the Pre Read Registers and passed onto the DMA controller when required. While the DMA controller operates on DMA channel n the read write Controller pre reads registers for DMA channel n 1. The DMA controller changes state variables in the Working Register Set as it performs the data transfer of channel n. The data transfer is accomplished and the DMA controller engine moves onto the next DMA channel i.e. n 1 and the modified data in registers are passed back to the Read Write Controller to be stored back into the Block RAM . At this point the system has its Write Back logic holding registers for DMA channel n the DMA controller operating on DMA channel n 1 registers and the Pre Read logic fetching registers for the next DAM channel n 2. 

This FPGA Block RAM solution as described allows for scalability that is only limited by the size of available Block RAM memory in the FPGA. It can easily be scaled up to thousands of DMA channels without noticeable impact on speed and requires typically only additional storage space in Block RAM. A sample implementation can support 2 000 DMA channels while utilizing a relatively small portion of the FPGA.

The flexible DMA configuration using FPGA Block RAM as described is operable with the Graphic Processing Units GPU used in video multiviewer systems in which DMA signals are sent to texture memory or other Graphics Processing Units. These frames of video data are typically split into many blocks and sent as separate blocks over separate DMA channels into different memory locations for a video multiviewer system that has extensive scaling in one non limiting embodiment. Different Field Programmable Gate Arrays could be used for this system including FPGA s manufactured by Xylinx and Altera that use dual port Block RAMs. Thus the system dual ports a Read Write Memory Interface and interacts with the DMA controller through a Read Write Memory Interface as shown in .

Although a number of DMA channels could be implemented using the prototype configuration registers and flip flops such as described relative to the Block RAM approach as described in the improvement over the prototype in accordance with a non limiting example of the present invention is advantageous. The additional logic that is required to select and control which register the system writes into is now part of the Block RAM as well as the logic for reading thus allowing greater amounts of Block RAM with many DMA channels. The Read Write Decode function is built into the Block RAM. Because a hard DMA circuit is used only a fraction of the registers need be accessed at a time for example in one non limiting example about a fifth of the registers. The system can have access to one of the registers out of an entire set of registers at one time. The system can go through fewer clock cycles to read the registers out for the next DMA transfer and the system can take the registers from the previous DMA transfer and write them back into the memory to store them.

From a design point of view when using a minimum number of DMA channels it is easier to implement a circuit for such minimum number of DMA channels in regular flip flops for speed and efficiency. When greater than 20 and 50 DMA channels are required however and expansion is necessary the use of regular flip flops is not advantageous. When a large amount of video data for a multiviewer must be brought into the system the greater number of DMA channels are required as described in accordance with a non limiting example of the present invention. This system also allows greater ability to scale.

For example a DMA burst could be a block of 512 bytes for one DMA channel. The Read write Controller reads a corresponding configuration in the registers and processes data for the Pre Read Registers and passes data onto the DMA controller which operates on the registers such as on regular flip flops in function. Thus the system increments the last written address and how much data has been sent across. When it returns the system knows it has written the 512 bytes and is done sending those 512 bytes. It passes the resulting and updated information to any registers as status registers and back to the Write Back Registers . For example if there is a list of a number of different DMA data bursts coming through during the first DMA the Read Write Controller can pre fetch the configuration information from the next DMA and the DMA controller does not have to wait for the configuration for the second DMA burst to be read out since it is read out already and now ready to be used. Once the DMA controller has processed the second DMA burst the configuration in the status registers for the first DMA burst is in the Write Back registers and written back into the memory by the Read Write Controller . Thus the system can achieve an uninterrupted DMA data flow through a large number of DMA channels while using effectively only a single read write port as described.

It should be understood that it is possible to use the system as described further with different video multiviewer systems as described below.

As shown in a video multiviewer system overcomes the drawbacks of transferring video streams to the graphics memory of a display that typically requires the use of an intermediate system memory buffer to manage the transfer between a hardware device and the display. It overcomes the disadvantages of consuming host CPU resources memory resources and bus bandwidth thus overcoming a significant limit on the number of video streams than can be simultaneously displayed.

One technology that is currently used for video rendering is Microsoft DirectShow part of the DirectX family of API applications. DirectShow allows the transfer of video streams to video memory but it requires CPU resources to manage the transfers. Typical prior art techniques use an input output I O controller to copy video stream data to system memory from the hardware device. The CPU copies the video stream data to the display device. This requires two separate DMA transfer operations. For relatively high bandwidth video streams this may pose a significant limiting factor in a video system s capabilities since DMA bandwidth has a fixed limit.

As mentioned above the system illustratively includes a video I O controller a system memory and a Graphics Processing Unit GPU including a GPU memory in which video data is input using a video input module that includes the flexible DMA configuration and FPGA Block RAM as described before. By way of example the GPU memory may include one or more texture buffers which may be associated with respective video input streams or feeds as will be appreciated by those skilled in the art. The system also illustratively includes a central processing unit CPU . In the illustrated example access between the video I O controller GPU CPU and system memory is provided via a system bus as will also be appreciated by those skilled in the art. The GPU is operable with a display . The video input module receives data along the bus and can be individual input modules that are used to DMA data into the GPU. PCI Express can be used as one non limiting implementation.

The video I O controller assigns addresses to be used for video data in the GPU memory i.e. texture buffers . By way of comparison using the DirectShow application discussed above in a typical prior art arrangement the texture buffers would temporarily be locked while textures are loaded from the video I O controller to the texture buffers via the system memory . Drawing or rendering operations would not be permitted during such locked periods. Yet the constant locking and unlocking of the texture buffers requires additional overhead and therefore delays memory transfers. Moreover this can also result in a video I O controller changing destination addresses in the GPU memory which may result in a still further overhead penalty if the video I O controller has to be reset or re programmed to desired texture buffer addresses.

The CPU advantageously operates the video I O controller to transfer video data to the GPU memory via direct memory access DMA without using the system memory . Accordingly the system may advantageously increase the amount of video data transferred to the GPU within a given amount of time and thereby allow more video inputs to be displayed on the display than would otherwise be possible if the same video had to be routed through the system memory.

The CPU may cooperate with the I O controller to lock the assigned addresses. By way of example the GPU memory may include at least one texture buffer in which the CPU locks the assigned addresses. Furthermore the video I O controller may receive a plurality of video input streams and the at least one texture buffer may include a respective texture buffer for each video input stream. Moreover the CPU may operate the video I O controller and the GPU to transfer video data in real time. Also the video multiviewer system may further include at least one data communications bus coupled to the video I O controller the system memory the GPU and the CPU .

By way of example the video data may include video frame data. Furthermore the CPU may use at least one Microsoft DirectX application programming interface API for operating the video I O controller and the GPU for example. By locking the texture buffer of the Direct3D texture the physical memory can address to allow the hardware I O controller to DMA transfer video stream data from the hardware device directly to the texture buffer. This technique does not require an intermediate host memory buffer for the video stream data thus saving this memory for other uses.

This technique can rely on the fact that the GPU device driver does not change the physical memory address of the texture buffer and it remains available for the duration of the transfer. The system exploits an undocumented and unsupported behavior of the GPU device driver and the Microsoft DirectX run time. This allows a Centrio multiviewer as described above to make more efficient use of the hardware platform thus providing more functionality with less hardware than competitive products. Since video frames are passed via DMA transfer once instead of twice it effectively doubles the number of video streams the system could transfer otherwise.

Further examples of a video multiviewer system that is adapted for enhanced scaling and can be modified for use with the flexible DMA configuration using the FPGA Block RAM described relative to is set forth below.

Referring initially to a video multiviewer system illustratively includes a plurality of video scalers operating in parallel for generating initially scaled video streams by performing video scaling in at least one dimension on a plurality of video input streams . Each video input stream may comprise a Society of Motion Picture and Television Engineers SMPTE 424M 3G Serial Digital Interface SDI standard for example. Moreover although illustrated as receiving 4 video input streams the video multiviewer system may alternatively receive less or more video input streams.

The multiviewer system illustratively includes a processing unit coupled downstream from the video scalers for generating additionally scaled video streams video output streams by performing additional video scaling on the initially scaled video streams and a display cooperating with the processing unit for displaying multiple video windows based upon the additionally scaled video streams. Although illustrated as a single screen display the display may comprise a plurality of screens for example 94 displays. Advantageously the video multiviewer system may scale the video input streams more efficiently by distributing the computationally intensive process of scaling the video input streams.

More particularly each of the video scalers illustratively performs video scaling in only one dimension for example in a horizontal dimension of video frames. The processing unit illustratively performs video scaling in a vertical dimension of video frames to complete the scaling of the video input streams . Advantageously the computationally intensive vertical scaling which may use large amounts of storage and logic resources may be performed by the processing unit . As will be appreciated by those skilled in the art other distributions of the scaling processes may be implemented. In general less intensive scaling processes should be allocated to the video scalers while the more complex scaling processes should be allocated to the processing unit .

Additionally each of the video scalers may comprise a hardware implemented video scaler. In other words the processing power of the video scalers may be limited and static. Advantageously the video multiviewer system allocates the horizontal scaling processes which use fewer resources than the vertical scaling processes to the video scalers . Moreover each of the video scalers may perform video scaling as a selectable power of 2 for example 1 2 4 8 and so forth further reducing computational intensity demands on the video scalers. Advantageously since the computational demand on the hardware implemented video scalers is limited the size of the packaging and housing used for the video scalers is reduced. For example a single field programmable gate array FPGA may be used to implement the video scalers to prescale 8 3G SDI video input streams.

The video scalers and the processing unit illustratively cooperate to process data other than video stream data using distributed processing for example metadata extraction and audio ballistics metering. More specifically the video scalers may also perform bit data extraction thereby advantageously reducing bandwidth passed on to the processing unit . The processing unit may perform data decoding and interpretation based upon the bit data extraction. Furthermore to reduce the computational payload of a Central Processing Unit CPU for audio processing the video scalers may calculate raw ballistics values while the processing unit cooperates to interpret the data and render appropriate audio amplitudes and phase meters.

The processing unit is preferably formed as a Graphics Processing Unit GPU including a GPU processor and GPU memory coupled thereto as noted relative to . Moreso with the dedicated GPU memory the processing unit may efficiently handle the computationally and memory intensive vertical scaling tasks.

The video multiviewer system illustratively includes a Direct Memory Access DMA engine coupled between the video scalers and the processing unit GPU . Also a second FPGA in addition to the FPGA that may implement the video scalers may be used to implement the DMA engine .

The video multiviewer system illustratively includes a data communications bus coupled between the DMA engine and the processing unit GPU and the CPU coupled to the data communications bus. Advantageously after the video input streams are prescaled the DMA engine DMAs the initially scaled video streams into the processing unit for final scaling.

As will be appreciated by those skilled in the art the data communications bus has an associated bandwidth and corresponding data throughput that may limit processing for scaling in the processing unit . Advantageously in the video multiviewer system since the scaling is distributed between the video scalers and the processing unit the bandwidth bottleneck of the data communication bus is less likely to be exceeded. Indeed the distributed scaling of the video multiviewer system may allow for sufficiently offloading the processing unit so that it handles the remaining scaling work and the distributed scaling sufficiently reduces the DMA engine bandwidth to DMA up to 64 video streams over modern local bus architectures such as PCI Express 1st generation and Hyper Transport.

Advantageously since the video multiviewer system consumes limited physical space the system may be installed into a Platinum multiviewer as available from the Harris Corporation of Melbourne Florida Harris Corp. the assignee of the present application or a router. Additionally the video multiviewer system may control routing of the video input streams . More specifically the video multiviewer system may access any of the router inputs for example that is all 512 inputs in a 28RU Platinum router as available from the Harris Corp.

Although illustrated with a single plurality of video scalers and a corresponding processing unit data communications bus CPU and DMA engine all together hereinafter referenced as a set in other embodiments the video multiviewer system may additionally include multiple sets all of which may be installed in the 28RU Platinum router for example.

The video multiviewer system may selectively choose which set a video input stream routes to. Thereby the video multiviewer system may actively balance internal resource utilization between sets and thus makes it possible to get better performance out of the same hardware.

Moreover if a user of the video multiviewer system chooses to display the same video input streams in two picture in pictures PIPs of different size the video multiviewer system can route it to two of its inputs and apply different pre scaling ratios to yield the best quality picture for both PIPs.

Advantageously the number of video input streams received by the video multiviewer system is scalable. In particular the number of inputs may be scalable based on the scalability of the 28RU Platinum Router. Additionally the number of outputs can be scaled up by inserting additional sets into the Platinum router frame and each set may work independently of each other while having no limiting effect on other sets in the frame.

Since all sets in a frame have access to the same inputs a user may readily build a video multiviewer system that spans a single video frame across two or more displays driven by two or more sets each set routing the same video stream to its input and displaying the corresponding portion of the video frame. This may allow for spanning a single video frame across a wall of displays.

Referring to as will be appreciated by those skilled in the art an exemplary implementation of a video multiviewer system similar to the multiviewer as shown in is now described. The video multiviewer system illustratively includes a plurality of Platinum Input Modules PIMs as will be available from the Harris Corp. Each PIM illustratively receives eight video input streams. The video multiviewer system may include up to 64 PIMs receiving a total of 512 video input streams. The output of the PIMs is fed into a Platinum cross point switcher as will be available from the Harris Corp. The Platinum cross point switcher is fed into a plurality of Centrio modules as will be available from the Harris Corp. Although illustrated with 2 Centrio modules the video multiviewer system may further include a total of 16 Centrio modules.

Each Centrio module illustratively includes a plurality of video input modules feeding into a local data bus cooperating with a CPU and a GPU . The local data bus may comprise for example a PCI Express 1st generation data bus or a Hyper Transport data bus. The GPU illustratively includes a data bus a Random Access Memory module cooperating with the data bus and a scaler rendering engine cooperating with the data bus. The GPU outputs to the input output module including a Digital Visual Interface DVI to SDI converter .

The video multiviewer system shown in illustratively includes a plurality of Platinum Prescaling Input Modules PPIMs as will be available from the Harris Corp. Each PPIM illustratively receives eight video input streams.

Each PPIM illustratively includes respective equalizers for each video input stream and a prescaler module including a deembedder cooperating with a prescaler multiplexer . The deembedder also includes an optional Dolby decoder . The outputs of the PPIMs are illustratively received by the Platinum cross point matrix and a Platinum TDM cross point module both as will be available from the Harris Corp. The outputs of the Platinum cross point matrix and the Platinum TDM cross point module are received by a plurality of multiviewer modules . Each multiviewer module illustratively includes a converter a scaler module receiving the output of the converter and a DVI card GPU receiving the output of the scaler module.

The communication link between the PPIMs and the multiviewer modules may have a payload bandwidth divided into 8 equal parts each allocated to one of the 8 video input streams channels on a given PPIM. After reserving space for a given channel s pre processed ancillary space and audio ballistics information the remaining bandwidth may be allocated for the video stream. The video pre scaling ratio may be hardcoded on a per video standard basis and stored in a table for hardware automatic lookup. The pre scaling ratio may be selected to result in the highest bandwidth that fits in the allocated payload bandwidth.

The pre processing parameters may be hardcoded at design or system integration phase and may not be dynamically changed. The packet size in the communications link may match the packet size used by multiviewer modules local bus and DMA engine thus minimizing logic required to handle the pre processed data.

Advantageously the communications links in the video multiviewer system follow the same profile. Any communication link may be used by the multiviewer modules without these modules interfering with each others operation. A single communication link may carry all 8 channels from a given input module i.e. a multiviewer module may have full simultaneous access to up to 32 PPIMs permitting greater access.

Referring now to as will be appreciated by those skilled in the art another exemplary implementation of the video multiviewer system is now described. This video multiviewer system illustratively includes a plurality of first 28RU Platinum router frames as will be available from the Harris Corp each including a plurality of inputs a cross point switcher coupled thereto and a plurality of outputs upstream of the cross point switcher.

The outputs are received by a plurality of second 28RU Platinum router frames each also including a plurality of inputs a cross point switcher coupled thereto and a plurality of outputs upstream of the cross point switcher. The video multiviewer system illustratively receives 2048 SD GD 3G SDI video input streams and outputs 128 DVI outputs or alternatively 256 HD SDI outputs. As will be appreciated by those skilled in the art the video multiviewer system may be scaled to have more or less inputs and outputs.

Many modifications and other embodiments of the invention will come to the mind of one skilled in the art having the benefit of the teachings presented in the foregoing descriptions and the associated drawings. Therefore it is understood that the invention is not to be limited to the specific embodiments disclosed and that modifications and embodiments are intended to be included within the scope of the appended claims.

