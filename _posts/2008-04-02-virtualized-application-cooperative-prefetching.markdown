---

title: Virtualized application cooperative prefetching
abstract: Embodiments in accordance with the invention permit a virtualization application to interact with a SuperFetch feature of an operating system so that on creation of a virtualization layer the SuperFetch feature is provided the opportunity to act on the newly available file system objects of the virtualization layer. Further, when the virtualization layer is removed, embodiments in accordance with the invention remove the file system objects associated with the virtualization layer from utilization by the SuperFetch feature.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08140782&OS=08140782&RS=08140782
owner: Symantec Corporation
number: 08140782
owner_city: Mountain View
owner_country: US
publication_date: 20080402
---
The present invention relates to computer systems. More particularly the present invention relates to prefetching of files associated with virtualization applications.

Microsoft Windows Vista utilizes memory prioritization when managing allocation of system memory i.e. physical memory. Lower priority system memory is re used before higher priority system memory when system memory resources are under memory pressure. Additionally Vista includes a memory performance enhancement feature termed SuperFetch. SuperFetch tracks a user s interactions to determine which pages the user uses most frequently. As a user interacts with the computer system SuperFetch tracks various information such as foreground applications time of day day of week and if the user is interacting with the computer system e.g. mouse and keyboard or if the computer system is running maintenance tasks.

When the computer system has free system memory SuperFetch predictively preloads e.g. prefetches the more frequently used pages into low priority system memory so these pages can be moved directly to an application s working set instead of being pulled from physical memory storage e.g. from disk. This allows the pages to load much faster than they would if the pages had to be pulled from physical memory storage.

Typically files associated with application virtualization technologies such as device filter drivers which redirect file operations are not utilized in the SuperFetch scheme. These virtualization technologies typically utilize virtualization layers which can be activated or deactivated also termed created and removed respectively. When SuperFetch performs its predictive preloading the virtualization layers utilized in the virtualization may not be activated e.g. turned on. Accordingly SuperFetch cannot find the files associated with the virtualization layer to predictively preload. Consequently the user does not receive the performance improvement provided by SuperFetch s preloading when launching applications from within the virtualization layer.

Embodiments in accordance with the invention provide methods to permit a virtualization application to interact with SuperFetch so that on creation of a virtualization layer SuperFetch is provided the opportunity to act on the newly available file system objects of the virtualization layer. Further when a virtualization layer is removed embodiments in accordance with the invention provide methods for removing file system objects associated with the virtualization layer.

Embodiments in accordance with the invention are best understood by reference to the following detailed description when read in conjunction with the accompanying drawings.

Common reference numerals are used throughout the drawings and detailed description to indicate like elements.

In the Microsoft Windows Vista operating system SuperFetch is implemented in sysmail.dll as a Windows server. SuperFetch relies on support from the memory cache manager so that SuperFetch can retrieve page usage history as well as direct the memory cache manager to preload pages from files on disk or from paging hibernation file into the system memory.

The memory cache manager then applies a proper memory priority to these pages. There is currently no public application program interface API for SuperFetch however SuperFetch stores its configuration data as a file in the file system in the directory systemroot Prefetch herein termed the SuperFetch directory. Herein the particular SuperFetch file in the SuperFetch directory is termed the SuperFetch file. Thus the page usage data collected by SuperFetch is stored in the SuperFetch file. The various embodiments of the invention further described herein provide virtualized application cooperative prefetching which allows the virtualized application to interact with SuperFetch so that pages associated with the virtualized application can receive the performance enhancements provided by SuperFetch.

Referring more particularly now to is a diagram of a computer system including a cooperative prefetching application executing on a host computer system e.g. a first computer system in accordance with one embodiment of the present invention. In the present embodiment host computer system typically includes a central processing unit CPU hereinafter processor an input output I O interface a memory and an operating system . In one embodiment operating system is an operating system which includes a SuperFetch feature not shown such as Microsoft Windows Vista. The SuperFetch feature maintains its usage data used for predictively preloading the system memory in the file system in SuperFetch file .

In one embodiment memory of host computer system further includes cooperative prefetching application and a virtualization application also termed a virtualization engine which utilizes virtualization layers herein also simply termed layers. Virtualization layers typically overlay the file system and include the files and registry settings that make up an application. When created e.g. turned on the virtualization layer redirects logical file locations to locations in physical memory. When removed e.g. turned off the redirection implemented by the virtualization layer is removed e.g. turned off.

In various embodiments further described herein cooperative prefetching application permits virtualization application to interact with SuperFetch so that on layer creation SuperFetch is provided the opportunity to act on the newly available file system objects of virtualization layers created by virtualization application . Further when virtualization layers created by virtualization application are removed in various embodiments further described herein cooperative prefetching application permits the file system objects associated with the virtualization layers to be removed. In one embodiment cooperative prefetching application is stored in memory of host computer system and executed on host computer system .

In one embodiment operating system utilizes a file system not shown for storage and retrieval of data. File systems such as volume based file systems e.g. NTFS are well known to those of skill in the art and are not further described herein to avoid detracting from the description of the invention.

In one embodiment memory includes system memory. In one embodiment the system memory is prioritized by operating system into higher priority memory and lower priority memory. In one embodiment memory includes storage media not shown for permanent storage of files sometimes called physical storage memory non volatile memory non temporary storage memory non temporary storage media or permanent storage memory. For example in one embodiment the storage media is a hard drive e.g. a magnetic hard drive a floppy disk a CD ROM and or a DVD. Generally files stored in permanent storage memory e.g. a magnetic hard disk a floppy disk a CD ROM a DVD are unaffected and maintained i.e. are not lost upon powering down turning off of host computer system .

In various embodiments memory further includes volatile memory for non permanent storage of files sometimes called temporary storage memory non temporary storage media or non permanent storage memory. Generally files stored in non permanent storage memory are lost upon powering down turning off of host computer system . Host computer system may further include standard devices like a keyboard a mouse a printer and a display device as well as one or more standard input output I O devices such as a compact disk CD or DVD drive floppy disk drive or other digital or waveform port for inputting data to and outputting data from host computer system . In one embodiment cooperative prefetching application is loaded onto host computer system via I O device such as from a CD DVD or floppy disk containing cooperative prefetching application .

In one embodiment host computer system is coupled to a server computer system of system by a network . Server computer system typically includes an operating system a processor a memory and a network interface . Server computer system may further include standard devices such as a keyboard a mouse a printer a display device and an I O device s . The various hardware components of server computer system are not illustrated to avoid detracting from the description of the invention.

Host computer system can also be coupled to other computer systems of system such as one or more additional computer system by network . In one embodiment computer system is similar to server computer system and for example includes a central processing unit an operating system an input output I O interface and a memory. Computer system may further include standard devices such as a keyboard a mouse a printer a display device and an I O device s . The various hardware components of computer system are not illustrated to avoid detracting from the description of the invention.

Network can be any network or network system that is of interest to a user. In various embodiments network interface and I O interface include analog modems digital modems or a network interface card. The particular type and configuration of host computer system computer system and server computer system are not essential to the present invention.

The following embodiments of the invention describe methods which permit a virtualization application to interact with SuperFetch. describe various embodiments of methods which permit a virtualization application to interact with SuperFetch so that on creation of a virtualization layer SuperFetch is provided the opportunity to act on the newly available file system objects of the layer. describe various embodiments of methods which permit a virtualization application to interact with SuperFetch so that on removal of the virtualization layer file system objects associated with the layer are removed.

In DETECT LAYER CREATION operation the creation of a virtualization layer such as by virtualization application is detected by cooperative prefetching application . Herein when a virtualization layer herein also simply termed a layer is turned on it is assumed the memory cache manager e.g. the memory cache manager of operating system can see the layer is turned on. From DETECT LAYER CREATION operation processing transitions to a READ SUPERFETCH FILE operation .

In READ SUPERFETCH FILE operation cooperative prefetching application reads the current SuperFetch file from the SuperFetch file. As earlier described the SuperFetch file includes various usage information SuperFetch maintains for use in predictively reading files to the prefetch cache. From READ SUPERFETCH FILE operation processing transitions to a MODIFY SUPERFETCH FILE operation .

In MODIFY SUPERFETCH FILE operation cooperative prefetching application modifies the SuperFetch file to include information associated with the virtualization layer created in operation thereby generating a modified SuperFetch file. In particular in one embodiment cooperative prefetching application modifies the SuperFetch file to include the files in the virtualization layer created in operation . From MODIFY SUPERFETCH FILE operation processing transitions to a WRITE MODIFIED SUPERFETCH FILE operation .

In WRITE MODIFIED SUPERFETCH FILE operation cooperative prefetching application writes the modified SuperFetch file back out to the SuperFetch file. For example in one embodiment cooperative prefetching application overwrites the current version of the SuperFetch file with the modified SuperFetch file created in operation . From WRITE MODIFIED SUPERFETCH FILE operation processing transitions to an optional RESTART SUPERFETCH operation or transitions directly to an EXIT operation with processing exiting method . Optionally processing transitions and returns to operation on detection of a next layer creation.

In optional RESTART SUPERFETCH operation cooperative prefetching application restarts the SuperFetch feature. Restart of the SuperFetch feature is well documented and known those of skill in the art and is not further described herein to avoid detracting from the description of the invention. From optional RESTART SUPERFETCH operation processing transitions to EXIT operation with processing exiting method or optionally returning to operation on detection of a next layer creation.

In an alternate embodiment rather than writing back the modified SuperFetch file to the SuperFetch directory the modified SuperFetch file is written to an alternate location and SuperFetch is redirected to the alternate location.

In DETECT LAYER CREATION operation the creation of a virtualization layer such as by virtualization application is detected by cooperative prefetching application . Herein when a virtualization layer herein also simply termed a layer is turned on it is assumed the memory cache manager e.g. the memory cache manager of operating system can see the layer is turned on. From DETECT LAYER CREATION operation processing transitions to a READ SUPERFETCH FILE operation .

In READ SUPERFETCH FILE operation cooperative prefetching application reads the current SuperFetch file from the SuperFetch directory. As earlier described the SuperFetch file includes various usage information SuperFetch maintains for use in predictively reading files to the prefetch cache. From READ SUPERFETCH FILE operation processing transitions to a CREATE BACKUP COPY operation .

In CREATE BACKUP COPY operation cooperative prefetching application creates a backup copy i.e. a copy of the current SuperFetch file and stores the backup copy to a memory structure such as a temporary memory location on host computer system . From CREATE BACKUP COPY operation processing transitions to MODIFY SUPERFETCH FILE operation .

In MODIFY SUPERFETCH FILE operation cooperative prefetching application modifies the SuperFetch file to include information associated with the virtualization layer created in operation thereby generating a modified SuperFetch file. In particular in one embodiment cooperative prefetching application modifies the SuperFetch file to include the files in the virtualization layer created in operation . From MODIFY SUPERFETCH FILE operation processing transitions to a WRITE MODIFIED SUPERFETCH FILE operation .

In WRITE MODIFIED SUPERFETCH FILE operation cooperative prefetching application writes the modified SuperFetch file back out to the SuperFetch file. For example in one embodiment cooperative prefetching application overwrites the current version of the SuperFetch file with the modified SuperFetch file created in operation . From WRITE MODIFIED SUPERFETCH FILE operation processing transitions to an optional RESTART SUPERFETCH operation or transitions directly to an EXIT operation with processing exiting method . Optionally processing transitions and returns to operation on detection of a next layer creation.

In optional RESTART SUPERFETCH operation cooperative prefetching application restarts the SuperFetch feature. Restart of the SuperFetch feature is well documented and known those of skill in the art and is not further described herein to avoid detracting from the description of the invention. From optional RESTART SUPERFETCH operation processing transitions to EXIT operation with processing exiting method or optionally returning to operation on detection of a next layer creation.

In DETECT LAYER CREATION operation the creation of a virtualization layer such as by virtualization application is detected by cooperative prefetching application . Herein when a virtualization layer herein also simply termed a layer is turned on it is assumed the memory cache manager e.g. the memory cache manager of operating system can see the layer is turned on. From DETECT LAYER CREATION operation processing transitions to a RESTART SUPERFETCH operation .

In RESTART SUPERFETCH operation cooperative prefetching application restarts the SuperFetch feature. Restart of the SuperFetch feature is well documented and known those of skill in the art and is not further described herein to avoid detracting from the description of the invention.

By restarting the SuperFetch system SuperFetch will now begin to record user interactions that include the virtualization layer is in existence when SuperFetch is restarted. This permits SuperFetch to include the files and data associated with use of the virtualization layer to be included in the memory caching operations. From RESTART SUPERFETCH operation transitions to an EXIT operation with processing exiting method or optionally returning to operation on detection of a next layer creation.

In DETECT LAYER CREATION operation the creation of a virtualization layer such as by virtualization application is detected by cooperative prefetching application . Herein when a virtualization layer herein also simply termed a layer is turned on it is assumed the memory cache manager e.g. the memory cache manager of operating system can see the layer is turned on. From DETECT LAYER CREATION operation processing transitions to a TRACK LAYER USAGE operation .

In TRACK LAYER USAGE operation cooperative prefetching application records user interactions with the virtualization layer. In one embodiment cooperative prefetching application records user interactions with the virtualization layer. In one embodiment the user interactions that are recorded are similar to those user interactions that would be recorded by SuperFetch. In one embodiment the user interactions that are recorded are different from those user interactions that would be recorded by SuperFetch. From TRACK LAYER USAGE operation processing transitions to a GENERATE LAYER USAGE INFORMATION operation .

In GENERATE LAYER USAGE INFORMATION operation cooperative prefetching application generates layer usage information associated with the user interactions with the virtualization layer created in operation . In one embodiment the layer usage information is similar to usage information that would be generated by SuperFetch. In one embodiment the layer usage information is different from usage information that would be generated by SuperFetch. In one embodiment the layer usage information includes a prioritization of pages to allow cooperative prefetching application to predictively load pages associated with the layer into low priority system memory based on the prioritization. From GENERATE LAYER USAGE INFORMATION operation processing transitions to a LOAD LAYER PAGES INTO LOW PRIORITY MEMORY operation .

In LOAD LAYER PAGES INTO LOW PRIORITY MEMORY operation cooperative prefetching application loads the pages associated with the virtualization layer into low priority system memory based on the recorded layer usage information. In one embodiment cooperative prefetching application loads the pages associated with the virtualization layer based on the prioritization. In one embodiment the pages are loaded into low priority system memory via a low priority I O procedure. Thus in this embodiment cooperative prefetching application acts as a companion SuperFetch and independently from SuperFetch loads pages associated with the virtualization layer into low priority system memory based on the layer usage information generated in operation .

In one embodiment cooperative prefetching application includes a layer service that walks e.g. iterates the layer and loads pages from the layer to lower priority memory. From LOAD LAYER PAGES INTO LOW PRIORITY MEMORY operation processing transitions to an EXIT operation with processing exiting method or optionally returning to operation on detection of a next layer creation.

In DETECT LAYER CREATION operation the creation of a virtualization layer such as by virtualization application is detected by cooperative prefetching application . In this embodiment the contents of the virtualization layer are placed into a mountable volume. Mountable volumes are well known to those of skill in the art and are not further described herein to avoid detracting from the description of the invention. From DETECT LAYER CREATION operation processing transitions to a SEND DEVICE INSERTION MESSAGE operation .

In SEND DEVICE INSERTION MESSAGE operation cooperative prefetching application generates and sends a device insertion message to operating system . In one embodiment the device insertion message identifies the volume including the files associated with the virtualization layer. When mounted as a volume the file system treats the files of the virtualization layer as a new drive and SuperFetch will transparently begin providing services to that drive and the SuperFetch feature will extend to the virtualization layer files. From SEND DEVICE INSERTION MESSAGE operation processing transitions to a MAP FILE LOCATIONS operation .

In MAP FILE LOCATIONS operation cooperative prefetching application maps the logical file locations of the virtualization layer files to actual physical locations on the mounted volume in the file system. From MAP FILE LOCATIONS operation processing transitions to an EXIT operation with processing exiting method or optionally returning to operation on detection of a next layer creation.

Methods described various embodiments of methods which permit a virtualization application to interact with SuperFetch so that on creation of a virtualization layer SuperFetch is provided the opportunity to act on the newly available file system objects of the layer. Consequently virtualization applications are able to realize at least some of the preloading enhancements of the SuperFetch feature.

Methods now describe various embodiments of methods which permit a virtualization application to interact with SuperFetch so that on removal of the virtualization layer file system objects associated with the layer are removed. Thus broadly viewed methods together with describe various embodiments of methods to undo the modifications implemented by methods .

Referring now to and together in one embodiment execution of cooperative prefetching application by processor results in the operations of method as described below. In one embodiment method is entered at an ENTER operation and processing transitions to a DETECT LAYER REMOVAL operation .

In DETECT LAYER REMOVAL operation the removal of a virtualization layer such as by virtualization application is detected by cooperative prefetching application . In one embodiment the virtualization layer is the layer detected in operation . From DETECT LAYER REMOVAL operation processing transitions to a READ SUPERFETCH FILE operation .

In READ SUPERFETCH FILE operation cooperative prefetching application reads the current SuperFetch file from the SuperFetch directory. In one embodiment it is assumed the SuperFetch file has been modified to include information about the virtualization layer for example as described in operation . From READ SUPERFETCH FILE operation processing transitions to a MODIFY SUPERFETCH FILE operation .

In MODIFY SUPERFETCH FILE operation cooperative prefetching application modifies the SuperFetch file to remove information associated with the virtualization layer that was added such as in operation . From MODIFY SUPERFETCH FILE operation processing transitions to a WRITE MODIFIED SUPERFETCH FILE operation .

In WRITE MODIFIED SUPERFETCH FILE operation operation cooperative prefetching application writes the modified SuperFetch file back out to the SuperFetch directory. For example in one embodiment cooperative prefetching application overwrites the current version of the SuperFetch file with the modified SuperFetch file created in operation . In this way information associated with the virtualization layer is now removed from the SuperFetch file. From WRITE MODIFIED SUPERFETCH FILE operation processing transitions to an optional RESTART SUPERFETCH operation or transitions directly to an EXIT operation with processing exiting method . Optionally processing transitions and returns to operation on detection of a next layer removal.

In optional RESTART SUPERFETCH operation cooperative prefetching application restarts the SuperFetch feature. Restart of the SuperFetch feature is well documented and known those of skill in the art and is not further described herein to avoid detracting from the description of the invention. From optional RESTART SUPERFETCH operation processing transitions to EXIT operation with processing exiting method or optionally returning to operation on detection of a next layer removal.

Referring now to and together in one embodiment execution of cooperative prefetching application by processor results in the operations of method as described below. In one embodiment method is entered at an ENTER operation and processing transitions to a DETECT LAYER REMOVAL operation .

In DETECT LAYER REMOVAL operation the removal of a virtualization layer such as by virtualization application is detected by cooperative prefetching application . In one embodiment the virtualization layer is the layer detected in operation . From DETECT LAYER REMOVAL operation processing transitions to a READ BACKUP COPY OF SUPERFETCH FILE operation .

In READ BACKUP COPY OF SUPERFETCH FILE operation cooperative prefetching application reads the backup copy of the SuperFetch file. For example in one embodiment cooperative prefetching application reads the backup copy of the SuperFetch file earlier stored in operation . From READ BACKUP COPY OF SUPERFETCH FILE operation processing transitions to a WRITE BACKUP COPY OF SUPERFETCH FILE operation .

In WRITE BACKUP COPY OF SUPERFETCH FILE operation cooperative prefetching application writes the backup copy of SuperFetch file back out to the SuperFetch directory. For example in one embodiment cooperative prefetching application overwrites the current version of the SuperFetch file with the backup copy of SuperFetch file read in operation . In this way information associated with the virtualization layer is now removed from the SuperFetch file. From WRITE BACKUP COPY OF SUPERFETCH FILE operation processing transitions to an optional RESTART SUPERFETCH operation or transitions directly to an EXIT operation with processing exiting method . Optionally processing transitions and returns to operation on detection of a next layer removal.

In optional RESTART SUPERFETCH operation cooperative prefetching application restarts the SuperFetch feature. Restart of the SuperFetch feature is well documented and known those of skill in the art and is not further described herein to avoid detracting from the description of the invention. From optional RESTART SUPERFETCH operation processing transitions to EXIT operation with processing exiting method or optionally returning to operation on detection of a next layer removal.

Referring now to and together in one embodiment execution of cooperative prefetching application by processor results in the operations of method as described below. In one embodiment method is entered at an ENTER operation and processing transitions to a DETECT LAYER REMOVAL operation .

In DETECT LAYER REMOVAL operation the removal of a virtualization layer such as by virtualization application is detected by cooperative prefetching application . In one embodiment the virtualization layer is the layer detected in operation . From DETECT LAYER REMOVAL operation processing transitions to an ENUMERATE PAGES operation .

In ENUMERATE PAGES operation cooperative prefetching application enumerates the cached pages in the system memory. In one embodiment of the invention enumeration of the cached pages creates an enumerated page listing. Enumeration of cached pages in system memory is well known to those of skill in the art and not further detailed herein to avoid detracting from the description of the invention. From ENUMERATE CACHED PAGES operation processing transitions to a SELECT PAGE operation .

In SELECT PAGE operation cooperative prefetching application selects an initial page in enumerated page listing to process. From SELECT PAGE operation processing transitions to a LAYER PAGE check operation .

In LAYER PAGE check operation cooperative prefetching application determines whether the page selected in operation is associated with the removed virtualization layer detected in operation . For example cooperative prefetching application compares the file path or portion of the file path of the enumerated page with the file path or a portion of the file path of the removed virtualization layer. If the file path or a portion of the file path matches the selected page is determined to be associated with the removed virtualization layer otherwise it is not determined to be associated with the removed file layer.

In one embodiment if the selected page is not associated with the removed virtualization layer NO from LAYER PAGE check operation processing transitions to a NEXT PAGE check operation further described later herein. Alternatively if the selected page is associated with the removed virtualization layer YES processing transitions from LAYER PAGE check operation to a FREE PAGE operation .

In FREE PAGE operation cooperative prefetching application generates and sends an instruction to the memory cache manager to free the selected page from system memory. Generation of an instruction to a memory cache manager to free a page from system memory is well known to those of skill in the art and not further described herein to avoid detracting from the description of the invention. From FREE PAGE operation processing transitions to NEXT PAGE check operation .

In NEXT PAGE check operation cooperative prefetching application determines whether there is another page in the enumerated page listing to process i.e. a next page. In one embodiment if there is a next page to process YES from NEXT PAGE check operation processing transitions and returns to SELECT PAGE operation with a next page in the enumerated page listing being selected for processing and operation being repeated as appropriate. Alternatively if there is not a next page to process NO from NEXT PAGE check operation processing transitions to an EXIT operation with processing exiting method or optionally returning to operation on detection of a next layer removal.

Referring now to and together in one embodiment execution of cooperative prefetching application by processor results in the operations of method as described below. In one embodiment method is entered at an ENTER operation and processing transitions to a DETECT LAYER REMOVAL operation .

In DETECT LAYER REMOVAL operation the removal of a virtualization layer such as by virtualization application is detected by cooperative prefetching application . From DETECT LAYER REMOVAL operation processing transitions to a SEND DEVICE DELETION MESSAGE operation .

In SEND DEVICE DELETION MESSAGE operation cooperative prefetching application generates and sends a device deletion message to operating system . In one embodiment the device deletion message identifies the volume including the virtualized application files mounted in operation . The SuperFetch feature will now cease to extend to the virtualization layer files of the volume. From SEND DEVICE DELETION MESSAGE operation processing transitions to an EXIT operation with processing exiting method or optionally returning to operation on detection of a next layer removal.

Although methods were described with reference to selected methods it can be understood by those of skill in the art that methods are not limited to those exemplar methods. Thus for example the method can be used to remove virtualization layer file objects arising from use of methods or method or method . Further method can be used to remove virtualization layer file objects arising from use of method method or method .

Additionally a method from methods and a method from methods can be individually combined as a single method to provide cooperative prefetching of virtualization layer file system objects on layer creation and then provide removal of those file system objects on layer removal. Thus for example method and method can be combined into a single method.

In one embodiment of the invention cooperative prefetching application is in memory . As used herein a computer memory refers to a volatile memory a non volatile memory or a combination of the two. Although cooperative prefetching application is referred to as an application this is illustrative only. Cooperative prefetching application should be capable of being called from an application or the operating system. In one embodiment an application is generally defined to be any executable code. Moreover those of skill in the art will understand that when it is said that an application or an operation takes some action the action is the result of executing one or more instructions by a processor.

Embodiments in accordance with the present invention may be carried out using any suitable hardware configuration or means involving a personal computer a workstation a portable device or a network of computer devices. Other network configurations other than client server configurations e.g. peer to peer web based intranet internet network configurations are used in other embodiments.

Herein a computer program product comprises a medium configured to store or transport computer readable code in accordance with an embodiment of the present invention. Some examples of computer program products are CD ROM disks DVDs ROM cards floppy disks magnetic tapes computer hard drives and servers on a network. In another embodiment a computer program product comprises a tangible storage medium configured to store computer readable code including CD ROM disks DVDs ROM cards floppy disks magnetic tapes computer hard drives and servers on a network.

As illustrated in this medium may belong to the computer system itself. However the medium also may be removed from the computer system. For example cooperative prefetching application may be stored in memory not shown that is physically located in a location different from processor . Processor should be coupled to the memory. This could be accomplished in a client server system or alternatively via a connection to another computer via modems and analog lines or digital interfaces and a digital carrier line.

More specifically in one embodiment host computer system and or server computer system is a portable computer a workstation a two way pager a cellular telephone a digital wireless telephone a personal digital assistant a server computer an Internet appliance or any other device that includes components that can execute the functionality of cooperative prefetching application in accordance with at least one of the embodiments as described herein. Similarly in another embodiment host computer system and or server computer system is comprised of multiple different computers wireless devices cellular telephones digital telephones two way pagers or personal digital assistants server computers or any desired combination of these devices that are interconnected to perform the methods as described herein.

In view of this disclosure the functionality of cooperative prefetching application in accordance with one embodiment of present invention can be implemented in a wide variety of computer system configurations. In addition the functionality of cooperative prefetching application could be stored as different modules in memories of different devices.

For example cooperative prefetching application could initially be stored on server computer system and then as necessary a portion of cooperative prefetching application could be transferred to host computer system and executed on host computer system . Consequently part of the functionality of cooperative prefetching application would be executed on processor of server computer system and another part would be executed on processor of host computer system . In view of this disclosure those of skill in the art can implement various embodiments of the present invention in a wide variety of physical hardware configurations using an operating system and computer programming language of interest to the user.

In yet another embodiment cooperative prefetching application is stored in memory of server computer system . Cooperative prefetching application is transferred over network to memory in host computer system . In this embodiment I O interfaces and would include analog modems digital modems or a network interface card. If modems are used network includes a communications network and cooperative prefetching application is downloaded via the communications network.

This disclosure provides exemplary embodiments of the present invention. The scope of the present invention is not limited by these exemplary embodiments. Numerous variations whether explicitly provided for by the specification or implied by the specification or not may be implemented by one of skill in the art in view of this disclosure.

