---

title: Generalized architecture to support representation of multi-transport devices
abstract: A computer system that accesses multi-transport devices and associates device instances of the multi-transport device with each other. Devices provide the same device identifier such as a device unique identifier regardless of the transport over which the device is accessed. A visual representation for the multi-transport device may be provided to a user using the device identifier. Also, a single functional representation for the multi-transport device may be provided based on an identifier provided by each function of the device. The functional representation may be independent of the addition and removal of transports and allows abstracting device access via multiple transports from a user and an application. Transports may be selected at an application and/or a system level. Operating characteristics of available transports may be used to select a desired transport, based on transport requirements specified by the application, the user or the system.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09081902&OS=09081902&RS=09081902
owner: Microsoft Technology Licensing, LLC.
number: 09081902
owner_city: Redmond
owner_country: US
publication_date: 20080620
---
To provide versatility devices may connect to computers over one or more transports. Examples of such multi transport devices include cell phones personal digital assistants PDA s and handheld personal computers. Such devices may be connected to the computers over various wired or wireless transports. A transport may be defined as technology used to transfer data from one device or to another. Examples of transports include a USB an IEEE 1394 and a Bluetooth connection.

When a multi transport device is connected to a computer system the system recognizes individual device instances on different transports. Thus from the perspective of the computer each of the transports over which the computer accesses a multi transport device presents a separate device connected to the computer. The computer may interface to each such device through a driver associated with the device. The capabilities to interact with the device through the device driver may be exposed to a user of the computer or to applications executed by the computer through one or more interfaces.

An experience for a user of a computer system may be improved by enabling the computer to recognize that a multi transport device is communicating with the computer and to identify device instances on different transports. With this capability for example a computer may present to a user information about the multi transport device as a whole rather than information about individual device instances of the multi transport device. Information about the multi transport device may more closely match the perception of the user who may see a single device attached to the computer even though that device may be accessed via multiple transports.

A multi transport device may perform multiple functions each of which may exist over one or more of different transports used to access the device. Therefore a device instance on a transport for such multi transport multi function device may represent a function of the device.

A single functional representation for a multi transport device may be provided that ties together multiple device instances on different transports used to access the device. The device instances may be identified using a common identity such as an identifier. The identifier may comprise for example a device identifier and or a function identifier. The functional representation allows interacting with the multi transport device which includes managing the device instances on different transports by selecting appropriate transports seamlessly switching transports and responding to addition and removal of transports.

The transports may be explicitly selected based on user application or computer system preferences. In addition a user may provide requirements for a transport and the system may select a suitable transport on behalf of the user based on the requirements. Similarly applications may be provided continuous service by being abstracted from the explicit selection of transports. The service may be provided to an application even when one of the underlying transports fails. An application may specify desired transport requirements which are then used by the system to select a suitable transport. The transports may be selected based on their operating characteristics.

The inventors have appreciated that the experience for a user of a computer to which a multi transport device is connected may be improved by representing an actual physical multi transport device as a single entity. Device instances on multiple transports may thus be linked together. The representation may be independent of the available transports and may allow a unified access to functionalities provided by the multiple transports. The representation may also be used to present the multi transport device to the user for example as an icon on a user interface of the computer. Such a representation of the multi transport device may match a user perception of the device.

The inventors have further appreciated that device instances of a multi transport device may be associated with each other using a common identity. The identity may comprise a device identifier. Thus each transport instance of the multi transport device may report the same device identifier. The device identifier may be a globally unique identifier.

The inventors have also appreciated that in order to seamlessly manage the multi transport device and provide the representation for the device an entity may be created that represents the device. The entity may be created for each function of the device if the device performs multiple functions. According to some embodiments a composite device object is created when the device first connects to the computer. A component such as a driver for the composite device object is then used to interact with the device or each function of the device by for example seamlessly utilizing and managing transports used to access the function of the device. Utilizing the composite device object and a driver associated with the object allows identifying properties of the transports detecting changes in a number of transports and their properties selecting the transports based on their properties and managing addition and removal of transports. The composite device object may not be enumerated by any single bus driver.

Some embodiments of the invention provide a method of selecting one or more transports to access the device. The transports may be selected by a user or an application and may be selected either explicitly or implicitly. The explicit selection may be based on an input identifying a specific transport to use. Alternatively the user or the application may specify desired transport requirements and the system may then evaluate properties of the available transports and select a transport whose operating characteristics match the best the specified transport requirements. Further the system e.g. a driver for the composite device object an operating system or other suitable component may make the decisions regarding transport selection. To realize such transport selection a policy may be defined in the system. For example a default policy may be defined to perform transport selection based on whether the device is running low on battery power. This selection may be possible because the composite device object for the multi transport device keeps track of the operating characteristics of the available transports. Further if the operating characteristics change they may be re evaluated and a more suitable transport may be selected for communications with the device.

It should be appreciated that any suitable device that can be accessed via more than one transport can be accessed as a multi transport device. For example device may be a PDA a handheld personal computer a mouse a keyboard a printer or any other multi transport device. Device may be a multi function device such as for example a smart phone that performs functions of a phone a video camera and a digital photo camera. Also the transports shown in are exemplary only.

Transports may be any suitable communications mechanisms and may utilize any transport mechanism whether wired e.g. USB or wireless e.g. Bluetooth Wi Fi and infrared technologies. Each transport may be characterized by distinct characteristics. Further the transports may change dynamically such that one or more transports may disappear and new transports may become available to access the device.

Computer may include a display . The display may comprise for example a graphical user interface through which information on a device may be presented and through which a device may be managed. In this example multi transport device may be presented on the user interface as two icons one for each transport instance of the device. It should be appreciated that the transports of device are shown as the icons resembling the device for representation purposes only and in embodiments of the invention any suitable formats may be used to display information relating to the devices or their instances corresponding to different transports. Further each icon may be manipulated e.g. clicked on moved deleted etc. and information associated with the icon may be presented on display .

Computer may utilize Plug and Play PnP which is a technology that allows linking a device such as device with the computer without having to manually configure settings of the computer. The traditional PnP architecture provides a model for representing devices connected to the computer using a device tree hierarchy. In such a hierarchy a presence of any child device is determined by a parent device. A device that connects to a computer system is discovered by a bus driver that enumerates the device. The bus driver thus becomes a parent of the device. However computer may utilize different bus technologies each of which can provide an independent input output I O path to device . Therefore different transport instances of the multi transport device may be discovered by different buses and may thus have different parents on the device tree. Thus a single multi transport device may be represented on the device tree multiple times with a node in the device tree associated with a device instance on a transport over which the device can be accessed. This imposes limitations on representing multi transport devices to users and applications because each instance of the device associated with a transport is represented as a separate device.

Each instance of the multi transport device may be installed separately and may have a separate representation as shown in . While icons are shown as identical icons they may have different visual representations for the USB and Bluetooth connections. Each transport instance of the device appears to user as a separate physical device that can be managed and or utilized independently of the others. Thus the user may perceive icons as two physical devices connected to computer . This may create difficulties for a user in determining which instance of the device to utilize while interacting with the device. User may not be able to distinguish which icons represent physical devices each accessed via a single transport and which icons represent transport instances of a multi transport device which impairs ability of the user to manage the multi transport device. Also when one of the transports becomes unavailable e.g. a USB cable connecting a cell phone to a computer is unplugged an icon representing this transport to a user disappears from the display which further complicates identification of the device as capable of being accessed via multiple transports.

Similarly applications may discover each transport instance independently of other transport instances and may not be able to efficiently utilize capabilities of a multi transport device. In particular it may be complicated to determine which transport or instance of the device to use. Moreover a transport with certain characteristics may be more desirable for an application to communicate with the device. Thus without a mechanism to link the transport instances together it may not be possible to determine that the instances in fact represent transports of a single multi transport device rather than separate physical devices. Moreover switching to a different transport when this transport provides a more desired functionality or when a previously used transport becomes unavailable may not be possible.

Embodiments of the invention provide a method that helps overcome the limitations associated with inability to identify that a device is a multi transport device that can be accessed by a computer system via a plurality of transports or that separate device instances on a transport belong to the same device or a function of the device when the device has multiple functions. Accordingly in some embodiments a device identifier may be obtained from the device and each device instance of the device may be identified by the same identifier. A representation for the device may be created using the device identifier. Also an entity providing a functional representation of the device may be created that ties together the device instances of each function of the multi transport device accessible over one or more transports. The functional representation which may be referred to as a composite device object allows aggregating functionalities provided by the transports. Thus the device may be accessed using the functional representation of the device.

The icon representing a multi transport device e.g. icon may be selected and information associated with the multi transport device may be presented in any suitable way. For example upon clicking on an icon corresponding to a multi transport device available transports may be shown either as icons corresponding to the transports e.g. as shown in or in other suitable visual and or textual formats. In addition other visual and textual information may be presented for the multi transport device and the associated transports. For example properties of available transports may be presented.

The system shown in differs from that shown in in respect that each device instance of device may provide a device identifier which allows computer to determine that device is a single physical multi transport device interacting with the computer via the plurality of transports such as the Bluetooth link and the USB connection rather than two physical devices one available over the Bluetooth link and another via the USB connection. The device identifier may be a unique device identifier for a multi transport device having a single function e.g. a cell phone or multiple functions e.g. a cell phone having functions of a phone and of a photo camera . The device identifier is globally unique when no other device is assumed to use the same identifier for this purpose. The device identifier may be provided by a manufacturer of the device and stored in a non volatile memory of the device. In some embodiments the device identifier may be a string. Any other suitable format for the device identifier may be substituted.

Further to provide a unified access to device instances of the device an entity may be created for the device that represents device or each function of the device if device is a multi function device. To create the entity an identifier such a function identifier which is different from the device identifier used to create a representation for a user may be provided by device or each of its functions. This is described in more detail below.

Identifying transports of a multi transport device and providing a representation for the multi transport device independent of the plurality of transports may overcome limitations of the system described in connection with . For example the user may be able to manage the multi function device as a whole and select desired transports.

Further a functional representation created to represent each function of the device allows selecting a transport to access the device seamlessly managing removal and addition of transports notifying a user or an application of current characteristics of the available transports may be possible. In some scenarios transports used to interact with the device and its functions may be added and removed dynamically. Embodiments of the invention provide a method in which each device instance of a multi transport device reports e.g. using an identifier to the computer system communicating with the device its identity. Thus the representation for each function of the multi transport device may be provided regardless of a number of transports available to access the function. When a multi transport device connects to a computer via a single transport the representation for the device is created that allows interacting with the device. If the device becomes accessible via additional transports the representation is maintained independently of the number of transports. Similarly the representation is maintained when some transports go away as discussed in more detail below.

Device may comprise transport components and each associated with a respective transport. For example transport component may be associated with the Bluetooth connection while transport components may be associated with the USB connection. The transport components may be implemented using known technology providing communications between devices via various wireless and wired connections. Thus each transport component may include respective drivers. Further interfaces may be provided to enable a connection between the device and the computer. For example a USB interface for the USB connection may be included to communicate over a USB cable with the computer. As another example the transport component associated with the Bluetooth connection may comprise one or more Bluetooth capable wireless transceivers to communicate over a Bluetooth link with the computer. In addition the transport components may include components accommodating functionality provided by some embodiments of the invention. Thus each transport component may provide a device function or any other suitable identifier to report an identity of a device instance on this transport to the computer. It should be appreciated that embodiments of the invention are not limited to a specific number of transports or to any particular type s of transports.

As discussed above device instances for transports used to access a multi transport device may be identified based on a common identity of the transports. For example identifiers may be employed for this purpose. Thus when two device instances each on a different transport provide the same identifier the computer may determine that one physical multi transport device is connected to it via the two transports.

Device instances of a function of a multi transport device over different transports may provide the same identifier that may be referred to as a function identifier. This identifier may be used to create a composite device object for each function of the device as discussed in more detail below. Also all functions of the device may report the same identifier across all of the transports with this identifier being referred to as a device unique identifier DUID . DUID may be used to create a representation of the device such as for example icon shown in . Function identifier which may be different from the device unique identifier.

In the example illustrated in device instances on transports used to access the multi transport device may be identified by the same identifier. As discussed above device is shown by way of example only as a single function device. Thus transport components and may each provide the same identifier shown as ID . The system e.g. a PnP manager or other suitable component may load a transport device driver for each of transport device objects created in the system. Transport components and may each provide ID to the respective transport device drivers. It should also be appreciated that transport instances may be associated together in any other suitable manner as embodiments of the invention are not limited in this respect. The common identity of the transports may be provided for example by a field in an identifier for the multi transport device and or the transports.

Further transport components and of device may provide DUID which is a unique device identifier used to create a representation of device . DUID is shown outside of transport components and to illustrate that this identifier if available is provided by each device instance for each function of the device and across all of the transports used to access the device.

The device identifier such as DUID may be provided by a manufacturer of the device. In some scenarios the identifier may be embedded into a suitable component of device e.g. one or more hardware or firmware components . The device identifier may also be stored in a non volatile memory such as a Flash memory or a microcode memory in device . However the specific mechanism used to store the device identifier for device is not critical to embodiments of the invention and any suitable mechanism may be used. DUID is shown in a dashed line to illustrate that DUID may not be available.

An identifier such as for example ID or DUID for each transport may be provided to computer via any suitable component s . For example each transport component may have at least one interface which provides the identifiers to computer . shows that transport components and may include interfaces and respectively. In some embodiments interfaces and may also provide characteristics of available transports to computer . The interfaces may be any suitable interfaces that provide device with ability to connect to other external devices such as computer via the respective transports.

When device connects to computer via one or more transports e.g. a Bluetooth and or USB connections the transports may be detected by computer using bus drivers . In some embodiments computer may utilize different bus technologies each of which can provide an independent I O path to the device. These embodiments may utilize the PnP architecture to communicate with devices connected to computer e.g. device .

Furthermore some embodiments provide a mechanism that allows multiple transport instances of a multi transport device to commonly own a single entity representing the device. The entity which is a functional representation for device may be referred to as a composite device object that is a programming object maintained in a suitable component such as memory of computer . A composite device object is created when a driver for at least one device instance of a multi transport device is first loaded. A composite device object may then be created and maintained using ID . The composite device object may be created for each function of device . The composite device object is a logical representation of the device and can be implemented in any suitable way. The composite device object may be for example a node in the device tree. However it is not enumerated by any single bus driver and aggregates a plurality of the functionalities provided by the transports thus allowing managing the device and the associated transports as a whole. Thus composite device object permits an I O path to a function of the device and an application or other entity can communicate with the function such that there is no need for the application or the other entity to know a state of different transports.

It should be appreciated that composite device object is shown in by way of example only to illustrate that this component allows interacting with the multi transport device independently of its transport instances. It should also be appreciated that the composite device object described herein as created for a multi transport device is created for each function of the multi transport device based on an identifier such as ID . Therefore a composite device object may be created for each function of the device. Thus more than one composite device objects may be created for the device. A component that enumerates the composite device object e.g. a PnP manager allows interacting with the function supporting connections over multiple transports. One or more composite device drivers are loaded for the composite device object. A driver for the composite device object is loaded with an identifier such as a function identifier ID provided by a device instance of device . When device becomes accessible over another transport a driver for this new transport is loaded with the identifier identical to that provided by the transport over which device was first accessed by computer . The driver for the new transport provides the identifier to composite device object so that a suitable software component such as a composite device driver recognizes that the new transport is another device instance of device or a function of the device. Thus computer may comprise one or more device drivers loaded for device . Device drivers may include drivers for composite device object and transport device objects discussed in more detail below and any other entities. Further any other suitable component may be used to discover that a new transport has arrived or an existing transport has disappeared and notify the composite device driver of the transport arrivals and or departures.

Device controller of computer maintains information on device and controls loading of device drivers . In embodiments of the invention employing the PnP architecture device controller may be for example a PnP manager. Bus drivers may report to the PnP manager addition and removal of devices accessible over different transports. The PnP manager controls creation of objects for transport instances and manages loading drivers supporting the transport instances.

Computer may provide a graphical user interface that enables a user of computer to view and manage multi transport physical device . Device may be presented on user interface using any suitable graphical and or textual representation. For example an icon such as icon shown in for device may be presented to the user. To provide such a representation computer may comprise a device display object created using DUID provided by transport components and of device . Device display object allows presenting device on user interface independently of transports over which device is accessible. The device display object allows managing device and the associated transports. For example the user may be able to view available transports and their characteristics and select a transport to access the device.

As discussed above a device identifier such as a DUID may not be available for a multi transport device. In such scenarios a device display object may be created for each device instance. Thus in the example shown in a single representation of the device may not be available and two device display objects not shown may be created for each of the transport component and . However a function identifier e.g. ID may be used to merge the two device display objects to generate a single representation for the function of device. In these embodiments a representation for the device such as icon represents a function of the device. It should be appreciated however that when the DUID is not provided it may be created using any suitable known method.

Various computer applications may communicate with a multi transport device. Transports used to access a multi transport device may have substantially different characteristics. To ensure efficient execution of applications it is desired that the applications do not explicitly select transports to access the device but rather specify desired transport characteristics. For example some applications may desire to send large amounts of data to a storage using a transport that can provide a faster connection such as a USB connection. As another example a wired transport may be more suitable for synchronization of personal contact information e.g. in an address book stored on a cell phone and a database stored on a personal computer . In some scenarios an application may desire to establish a connection to a multi transport device over more than one transport simultaneously such that data can be sent over any transport s available at the time.

It should be appreciated that computer shows components implementing some embodiments of the invention by way of example only and may comprise any other suitable components.

As discussed above when a multi transport device such as device connects to computer a composite device object may be created for each function of the device and a suitable software component such as a composite device driver loaded for composite device object allows interacting with the multi transport device. For example a transport component e.g. transport component or may report an identity of the associated transport to computer by providing an identifier such as ID .

Each transport component may include any other suitable components. For each transport used to access device a respective driver for a bus used to discover the transport may enumerate the transport by creating a respective transport device object. Device controller such as a PnP manager may control loading respective transport driver for each transport device object. Thus shows transport device objects and and transport drivers and loaded for transport device objects and respectively. The drivers for the transport device objects may each expose a respective application programming interface API as discussed below. The interfaces may be used to provide various identifiers such as for example function identifiers and device identifiers and to interact with a driver for the composite device object associated with the transport device objects. It should be appreciated that the transport device objects and their respective drivers may be associated in any other suitable way.

When transport device objects and are created transport driver s including an identifier shown as ID are loaded for each of the objects and . The device specifies the identity of each transport instance using ID . As discussed above device may represent a function of a multi function device. In such scenario different identifier is provided by each function supporting connections over one or more transports. It should be appreciated that transport drivers and and components that they include are shown by way of example only. Transport drivers and also provide DUID if the device identifier is available. For the sake of simplicity some components conventionally included within a computer or that one of skill in the art would understand are present or that are not involved in providing functionality as described herein may not be shown. The transport device objects for different transports may be different and independent of each other. This illustrates that in conventional systems such as the one shown in each transport instance of a multi transport device appears as a separate device to components of a computer e.g. an operating system and to a user of the computer. As discussed above some embodiments of the invention provide a method of creating an entity such as the composite device object that is shared by otherwise independent transport device objects.

Embodiments of the invention enable creating composite device object for a multi transport device having a single function or for each function of a multi transport multi function device. Composite device object provides an input output I O path to the device. Composite device object links transport instances of the device together using device identifier ID thus providing a single representation of functionalities of transports used to access device . Composite device object may comprise any suitable components. shows a composite device driver supporting functionality of composite device object . It should be appreciated that more than driver may be associated with composite device object . Driver may be provided for example by a manufacturer of device . The driver is loaded with ID and may include transport control module and policy . Drivers and are used to interface transport instances of device with suitable components e.g. the operating system of computer . Composite device driver may receive I O requests from applications and send the requests to appropriate transports.

As discussed above in some embodiments a device identifier uniquely identifying device may not be available. In such scenarios more than one device display object may be created each representing a device instance for a function over a transport. For example if a cell phone can be accessed via both a USB connection and a Bluetooth link two device display objects may be created one representing the cell phone function over the USB connection and another representing the cell phone function over the Bluetooth link. ID which is identical for both of the transports may then be used to link the two device display objects together to provide a single representation for the cell phone function. If the cell phone is a function of a multi function device e.g. a smart phone the above process may be used to provide a representation for each function of the multi function device when the unique device identifier for the device is not available.

In the example illustrated composite device driver may comprise one or more different APIs shown by way of example as APIs . Similarly the transport drivers may comprise various APIs shown as APIs and and may provide functionality using known techniques including receiving information or commands providing information or commands allowing other computers to register for notifications and providing notifications. It should be appreciated that APIs and are shown by way of example only as embodiments of the invention are not limited to any particular type s of interfaces.

APIs such as APIs and may provide an identifier such as ID communicate characteristics of the associated transport report changes in the characteristics and provide other suitable information from the transport device objects to the composite device driver. These APIs may be implemented to extend functionality of known APIs of transport device drivers. Each transport device driver may use one or more APIs for various communications with composite device driver . Each API may provide and or receive particular type of information to from the composite device driver. Alternatively each API may be used for communicating different types of data. For example a notification API may be used to notify the composite device driver of addition or removal of transports. Further another API may be used to provide characteristics of the associated transport and dynamically update the information as the characteristics change.

Each transport device object newly created when a multi transport device becomes available over an additional transport reports its presence and identity to the composite device driver which in turn determines that the transport device object is an instance of the device using an identifier such as ID . One or more APIs may be used to communicate with applications e.g. application and or a user e.g. via user interface . It should be appreciated that any suitable interfaces can be used as embodiments of the invention are not limited to any specific type s of interfaces.

As discussed above composite device interface may be used to obtain from the user and applications operating characteristics desired of transports used to access a multi transport device notify the user and applications of available transports and associated operating characteristics of the transport and changes in the transports. The changes may include addition and removal of transports as well as changes in the operating characteristics of one or more transports currently used to access the device. It should be appreciated that composite device interface may comprise one or more APIs of any suitable type as the present invention is not limited in this respect. For example separate interfaces may be employed to communicate with the user and the applications. Thus an interface such as interface shown in may be used to communicate with applications. Further separate interfaces may be used to receive operating characteristics desired of a transport and to report operating characteristics of a transport currently used to access a multi transport device.

As discussed above creating composite device object and loading driver for the object allows seamlessly interacting with device . A computer system e.g. its operating system a user of the system and or applications executed by the system may thus interact with the device. Computer is shown to comprise user interface and application . It should be appreciated that these components are shown by way of example only and embodiments of the invention are not limited to any particular number or type of applications that can communicate with device . Similarly embodiments of the invention are not limited to any particular number or type of user interfaces that enable a user of computer to manage access to device .

To access multi transport device a transport may be selected either by an operating system of computer in accordance with some internal computer settings e.g. using policy or by a user or an application. The user e.g. via user interface and application may explicitly select a suitable transport. Also the user and application may specify functionality desired of a transport used to access device . The desired functionality may be specified for example via composite device interface . Composite device interface may be defined by the operating system. The operating system of computer provides communications between devices e.g. transport composite and any other suitable device and applications and services executed by computer . The operating system may be the Microsoft Windows operating system though other suitable operating systems may be substituted as the present invention is not limited in this respect. Hence composite device interface can receive transport requirements from a user or an application and provide the requirements to composite device driver . It should be appreciated that the requirements may be provided by a user or an application in any suitable format as embodiments of the invention are not limited in this respect.

In some embodiments a user interface may be provided for the user to specify transport requirements at a high level. For example the user may indicate a desired quality of a connection to the multi transport device. Thus some embodiments of the invention provide presenting current operating characteristics of available transports to a user at an abstract level rather than reporting the actual operating characteristics. Consequently a user who may be unfamiliar with the specifics of transport characteristics may still be able to specify desired transport parameters. Also when a multi transport device becomes available over a new transport the user need not be informed of operating characteristics of this transport. The system may evaluate the operating characteristics of the new transports and make decisions regarding device access.

Any suitable component within the system may evaluate the operating characteristics using the user specified criteria. In the embodiment illustrated composite device driver for composite device object evaluates the specified operating characteristics to identify an appropriate transport for a user or an application. Regardless of which component performs the evaluation if the characteristics render the new transport to be more suitable to access the device than a currently used transport communications e.g. I O communication paths may be switched from the currently used to the new transport. In some scenarios an I O path from an application may be routed to a different transport. Further a specific I O request may be routed to a different transport. Thus different parts of the same I O request may be sent over different transports. Moreover in some embodiments a single I O request may be sent over multiple transports. Furthermore an I O request may be broken down into a number of smaller parts and one or more of the parts may be sent over different transports. If an I O request directed to a transport fails the composite device driver or other suitable component may fail over to another transport for this request.

When operating characteristics of a currently used transport change so that the transport becomes less suitable to send certain data to and or from the device another transport may be selected whose operating characteristics are more suitable to access the multi transport device. In some embodiments transport selection may be made automatically by components within this system without notifying the users. The user may not need to be aware of the transport switching though this information is available to the user.

Similarly in some embodiments an application may not need to explicitly specify desired transport requirements. A system e.g. an operating system may dynamically determine current transport requirements of the application and select the most suitable transport whose characteristics match the transport requirements.

When a user or an application specifies desired transport characteristics composite device driver or other suitable component s of the system may use the specified transport requirements to select an appropriate transport for the user or the application. Also a user or an application may themselves select a transport. Further if neither the user nor the application provides any transport requirements the transport selection may be controlled by a system policy or other system attributes. Configuration settings of the system may also be used in evaluating transport characteristics to select a suitable transport. Thus composite device driver comprises policy that may be used to select a transport. It should be appreciated that the policy may be any suitable component specifying transport preferences of the system. A transport selection process may be controlled by transport control module that may carry out the controlling in any suitable way. For example transport control module may manage policy . Upon selecting the most appropriate transport either in accordance with requirements of a user or an application or based on a policy such as policy or any other suitable system policy composite device driver communicates via a suitable API the result of the selection process to the corresponding transport device driver thus allocating communications with the device to a particular transport. It should be appreciated that in some scenarios composite device driver may not select the appropriate transport. Then other suitable components such as for example device controller which may be a PnP manager may select a transport.

As discussed above each transport instance of the transports used to access a multi transport device may report a common identity of the transports. The common identity may be for example a device identifier. shows a process of obtaining device identifiers from transports of a multi transport device to identify the transport instances of the device and link them together. The process starts when the multi transport device e.g. device connects to a system such as a personal computer via one or more wireless or wired connections. For example a user may plug a cell phone into the computer via a USB port. At block the process identifies that the device is connected to the computer using any known technologies such as for example the PnP architecture. The process may then go to block where a device identifier e.g. DUID or DUID is obtained from a transport over which the device becomes first available. The device identifier reports the identity of a transport instance of the device created when the device is accessed via the transport.

As discussed above the device identifier allows determining that the transport instance is a transport used to access the multi transport device. All transports that can be used to access the particular device report the common identity via the device identifier. Each multi transport physical device can be uniquely identified because the device and its transport instances are presumed to be assigned the same device identifier that is different from the device identifier for any other device. shows that in block it may be identified that the transport in an instance of the multi transport device.

As discussed above user experience may be improved by providing a representation for the multi transport device independent of transports that may be used to access the device. The representation may be provided by creating a display device object for the device that allows managing the device and transports used to access it. The device display object is created when the device first becomes accessible via a transport. shows that the representation for the device is provided in block . The representation allows displaying the device to a user who may manage the device using the representation.

In block of the user may utilize the created representation for the device. The representation allows presenting the multi transport device to the user on a graphical user interface e.g. as icon shown in . Such representation improves the user experience by enabling the user to view the multi transport device in an intuitive manner and manage the device as a whole. The user may view any available information on the device and the associated transports e.g. upon clicking on the corresponding icon select transports explicitly or provide transport requirements for the system to make a decision and perform other operations related to accessing the device. Thus the device display object created for the multi transport device is a logical representation for the device that links together transport instances of the device based on a common identity e.g. the device identifier .

In block additional transports used to access the device may become available. When the device becomes accessible over a new transport a device instance for this transport may provide the device identifier e.g. DUID that is used to link this device instance with other instances of the device via the existing representation of the device created in block . For example a cell phone accessible over a Bluetooth link may be plugged into a USB port.

If is it determined that there is an additional transport the process may return to block where the device identifier may be obtained from the new transport to thus determine that the same multi transport device becomes available over an additional transport. When a transport is removed e.g. a cell phone is unplugged from a USB port the device display object may be maintained regardless the removal. As discussed above the representation of the device created using the device identifier is independent of the available transport. When no transports are available to access the device the device display object may be maintained for a certain time period e.g. a time period determined by a system policy and may then be removed.

Embodiments of the invention also provide a method of creating an entity that provides a functional interface used to access multiple transports used to access the device. Thus illustrates schematically a process of creating and or utilizing such an entity which may be a composite device object. also shows loading drivers for the composite device object.

The process may start at block when a device becomes available over a transport perceived by the operating system as a respective device instance which may occur at any suitable time. For example the process may start when the multi transport device e.g. device connects to a system such as a personal computer via one or more wireless or wired connections. For example a user may plug a cell phone into the computer via a USB port. Also the process may start when a device that is already being accessed via one or more transports become accessible via a new transport. In block the process identifies that the device is connected to the computer using any known technologies such as for example the PnP architecture. The multi transport device may perform a single function. Also the device may be a multi function device in which case process may be performed for each function of the device.

In block a transport device object may be created for the device when the device is enumerated by a suitable component of the system such as a transport stack e.g. a USB stack in the PnP architecture. In embodiments of the invention employing the PnP technology the transport device object is a node on a device tree maintained by the PnP manager to keep track of devices accessed by the system. A suitable bus or other entity on the computer discovers the device instance and a driver for the bus enumerates the device instance by creating the respective transport device object.

The process may then go to block where a suitable component such as a PnP manager may load a driver e.g. transport driver or for the transport device object. The system may determine that the loaded driver supports multiple transport access to the device and therefore is loaded for a device instance. The driver may be loaded with an identifier e.g. ID or ID which may be obtained from a transport over which the device becomes first available. The driver may obtain the identifier using any suitable method. The identifier reports the identity of the device instance on a transport when the device is accessed via the transport. The identifier may be different for each function i.e. each device instance for the same function of the device reports the same identifier across different transports. It should be appreciated that embodiments of the invention are not limited to any specific identifiers and any suitable identifiers may be substituted.

In decision block it may be determined whether a composite device object exists that is associated with this identifier. In other words it may be determined whether the transport is a first transport for the identifier reported for the transport. If it is determined that the composite device object already exists for this identifier a driver e.g. composite device driver for the existing composite device object may be notified of the new transport that is may be used to access the device in block . The composite device driver composite device object may then obtain operating characteristic of the transport and may be used to manage access to the device via the transport. The composite device object may also be a node on the device tree. However the composite device object may not be enumerated by any existing bus driver. The composite device object is a functional representation of the device performing a single function or of a function of a multi function device and is independent of the transports for which it is enumerated.

If it is determined in block that a composite device object for the identifier does not exist i.e. the transport is a first transport reporting the identifier the process may branch to block . A suitable component such as a PnP manger may then create the composite device object may be created for the device i.e. a function of the device using the identifier according to some embodiments of the invention. As discussed above the composite device object may be created for a device even when the device is accessible via a single transport only. The composite device object is a functional representation of a device that is used for interacting with the device which includes for example managing communications with the device by selecting desired transports adapting to changes such as addition and removal of transports and performing any other suitable functions.

In block a driver e.g. composite device driver may be loaded for the composite device object. The composite device driver may then be utilized as a functional representation of the device as shown in block . In some embodiments transport drivers that share the composite device driver may be independent of each other. The composite device driver may be maintained in the system until no transports are available and the device may no longer be accessed. Further in some embodiments the composite device object may exist during a temporary absence of any transports and may be removed only some time interval after the device can no longer be accessed. Duration of the time interval may be predetermined by the system based on some system parameters.

The system e.g. computer recognizes transport instances of the device and interacts with the multi transport device using the available transports. The system may interact with the multi transport device using the composite device driver as a representation for the device. As discussed above the composite device driver manages I O requests to a device across the available transports. The process shown in is dynamic and may be performed for each device instance on a new transport. At any time the multi transport device performing a single function or a function instance of the multi transport multi function device may become accessible over a new transport and the identity of the new transport may be determined for example using the identifier. Thus a dotted line in shows that the process may return to start block from block .

A transport used to access the multi transport device may become unavailable so that a respective instance of a multi function device may be removed from the computer system. For example a cell phone available over a Bluetooth link and a USB connection may be unplugged from the USB port. Hence the USB transport is removed. As discussed above embodiments of the invention provide a method of creating and maintaining an entity such as a composite device object representing the multi transport device such that the removal and addition of transports may be transparent to applications accessing the device.

As discussed above in some scenarios e.g. where one or more of the transports used to access the device is an unreliable or transient connection such as a Bluetooth link the composite device object may not be removed immediately after the last transport used to access the multi transport device is removed. In such examples the composite device object may be removed after a time interval. Duration of the time interval may be predetermined and may depend on types of transports that were used to access the device. For example if a Bluetooth enabled device e.g. a mobile phone comes out of range the composite device object may remain in the system for some time to ensure that the device does not come within the range after a time interval. The composite device object may include a removal policy controlling the duration of existence of the composite device object. To implement the policy the composite device object may obtain such a characteristic of each transport as a quality of service QoS .

The composite device object may be maintained in the system in the absence of transports in some other situations as well. Thus when a communication between the system and the device is switched from one transport to another the composite device object remains in the system but may be temporarily not associated with any transport.

As discussed above a transport to access a multi transport device may be selected from the available transports. The transport may be selected by a composite device driver an application or an operating system based on respective preferences. The composite device driver may include one or more policies e.g. policy component used to perform the selection. The operating system may also utilize one or more policies e.g. policy component . Further the user and the application may explicitly specify a desired transport. Alternatively the user and the application may specify their respective transport preferences that may then be used by the composite device object or by the system to select a suitable transport.

A driver for the composite device object or other suitable component such as a component enumerating the composite device object e.g. a PnP manager may be used to select a transport to access a device based on composite device driver preferences. The selection process may be performed even for a single I O request. A transport may also be selected based on user application or system preferences. Thus the system may prune a list of available transports using the preferences to select the most suitable transport. The system may use operating characteristics of the available transports to perform the selection.

Applications may explicitly select transports based on the operating characteristics of the transports. However as discussed above it may be desirable that the applications are not involved in the selection of a specific transport. To provide continuous service to the application the composite device driver may select an appropriate transport for an application to access the device. Thus an application may specify its transport requirements or preferences. In some embodiments the composite device object may query the application for its transport requirements. It should be appreciated that each application may specify its transport preferences to access a multi transport device. Thus when two applications communicate with the same multi transport device each of the applications can specify its own transport preference for the device access. Also when a single application executed by the computer communicates with the multi transport device for multiple purposes e.g. to send large amounts of data to the device and to synchronize certain information between the computer and the device the application may specify requirements for a transport for be selected for each of the multiple purposes.

In decision block of it may be determined whether the application has provided the transport requirements. As discussed above the composite device driver may query the application for the requirements. The application may provide the transport requirements in any suitable way. For example composite device interface may be used. If the answer is affirmative the process may branch to block where a transport may be selected by the composite device driver using the operating characteristics of the available transports. The composite device driver may evaluate capabilities of the available transports and select a transport whose operating characteristics match the best the requirements provided by the application. The selection process may be performed in any suitable way as embodiments of the invention are not limited in this respect. Abstracting the transport selection from the application advantageously allows dynamically managing addition and removal of transports as well as switching of transports i.e. switching between transport drivers . After a suitable transport is selected the process may go to block where the application may communicate with the device over the selected transport. If more than one transport meets the application requirements further transport selection may be performed based for example on user or composite device driver preferences.

It should be appreciated that it may be possible that no transport is available to match the application preferences which is the reason that block is shown using a dashed line. In this case the composite device driver may select a transport based for example on its policy or on user preferences. Further a system may employ one or more policies to determine further actions. Default settings may be used to select a transport if no transport matches the application requirements. For example a first seen or same as last transports may be selected. It should be appreciated that embodiment of the invention are not limited in this respect and any suitable method may be used to select a transport.

If it is determined in decision block that the application has not provided the transport requirements the process may go to decision block where it may be determined whether a user provided transport requirements. As discussed above the system connected via one or more transports to the multi transport device may comprise a graphical user interface e.g. user interface of computer or user interface shown in . It should be appreciated that any suitable user interface may be substituted as embodiments of the invention are not limited to any specific user interface. The user may be enabled to provide either via the user interface or in any other suitable manner e.g. via a programmatic or a command line desired transport requirements. Embodiments of the invention may enable the user to provide the requirements in any suitable way. For example in some embodiments the user may specify operating characteristics desired of a transport. As another example the user may employ a high level description of a desired transport. The user may also specify that the system favor low power transports when a battery of the device is low. In other words a user may specify that the system save power and the system may then use a transport selection as a mechanism to save the power.

If it is determined in decision block that the user has provided the transport requirements the process may go to block where a transport may be selected by the composite device driver using the operating characteristics of the available transports. The composite device driver evaluates capabilities of the available transports and selects a transport whose operating characteristics match the user preferences. After a suitable transport is selected the process may go to block where one or more applications may communicate with the device over the selected transport. In some embodiments a transport is selected in accordance with the user preferences for all of the applications executed by the computer that send data to and or from the multi transport device. In other embodiments the user may specify desired transport requirements for a specific application.

It should be appreciated that it may be possible that no transport is available to match the user preferences which is the reason that block is shown using a dashed line. If this is the case the composite device driver may select a transport based for example on its policy. Further a system may employ one or more policies to select a transport.

It should be appreciated that a user similarly to an application may explicitly select a transport for device access. However in the example illustrated in the composite device driver makes decisions regarding a transport selection on behalf of the user or the application in accordance with either user or application requirements.

If it is determined in decision block that the user has not provided the transport requirements which indicates that neither the user nor the application has transport preferences the process may go to block where a transport may be selected in accordance with system preferences. The system preferences may be defined in any suitable way. For example a system wide policy may be used which may be implemented in any suitable component specifying transport preferences of the system. The policy may specify preferred and undesirable transport characteristics. Also the composite device driver may comprise a policy e.g. policy that may be used to select a transport when transport preferences are not specified. After a suitable transport is selected the process may go to block where one or more applications may communicate with the device over the selected transport.

The transport selection according to some embodiments of the invention is shown in by way of example only. It should be appreciated that embodiments of the invention are not limited to any particular order in which it is determined whether an application a user a composite device driver or a system e.g. an operating system have specified desired transport requirements for access to the multi transport device. Moreover the processes discussed above in connection with may be performed simultaneously. Thus the user application composite device driver or system preferences may be used to prune the available transports to select a most appropriate transport for device access.

Typically operating characteristics of transports change with time. Also transports used to access a multi transport device may be removed. New transports may be added. A composite device driver created to interact with the multi transport device may thus be notified via transport device driver or in other suitable way of changes in the available transports whether there is an addition or removal of a transport or changes in the characteristics of available transports. shows schematically the process of transport selection based on user application or system specified transport requirements. further illustrates a process of responding to changes in transport conditions according to some embodiments of the invention.

The process may start at any suitable time after a multi transport device is accessed by a system e.g. by any suitable computer . In block transport requirements may be obtained from a user an application or a composite device driver as discussed above in connection with . The process may continue to block where a transport may be selected using the operating characteristics of the available transports. As discussed above a transport may be selected for a single I O request. The transport may be selected by the composite device driver. Further if for some reasons the composite device driver does not perform the selection the system may select a transport based on the system policy which may be specified in any suitable way. For example a user may set the policy. The composite device driver evaluates capabilities of the available transports and selects a transport whose operating characteristics match the best the requirements provided by the application. The selection process may be performed in any suitable way as embodiments of the invention are not limited in this respect. Abstracting the transport selection from the application advantageously allows dynamically managing addition and removal of transports as well as switching of transports. After a suitable transport is selected the process may go to block where the application may communicate with the device over the selected transport.

Transport characteristics may change with time. Some characteristics may change while a transport is in use by a computer system. shows that the process may continue to decision block where it may be determined whether there is any change in operating characteristics of the available transports. It should be appreciated that the change may be attributed to any suitable difference between a currently measured value of a transport parameter and a previously measured value of the parameter. For example a throughput of a transport may change with time. In addition the change in transport characteristics may include addition of a new transport and removal of a transport. More than one transport can be added or removed. In either scenario the operating characteristics of available transports may be evaluated upon the change in block . The operating characteristics of a transport currently used by the application to communicate with the device may no longer be best suited for the communications.

For example a new transport may be more appropriate for the communication. Moreover if a transport is removed characteristics of the remaining transports if any may be evaluated to determine which of the transports is currently most suitable to access the device. demonstrates that some embodiments of the invention implement a transport switching mechanism in response to the changes. However it should be appreciated that in some embodiments a change in one or more of the transport characteristics does not necessarily result in switching to another transport. In some situations a currently used transport may remain to be the most suitable. Furthermore the transport parameters may change such that none of the available transports may meet the transport requirements. In such scenarios the composite device object may make appropriate decisions regarding the device access.

As discussed above the composite device driver may be notified of the changes in the operating characteristics of available transports. The composite device driver is also notified of the transport removal and addition. When the device becomes accessible over a new transport operating characteristics of this may be provided from a transport driver loaded for a device instance on this transport to the composite device driver. Thus embodiments of the invention provide a flexible mechanism adaptable to new transport technologies. Indeed a new transport that may utilize a new technology may only need to provide its operating characteristics.

Optionally in block the application or the user may be notified of the change using any suitable mechanism such as an API e.g. driver interface . As discussed above a composite device driver created to interact with the multi transport device and the associated transports as a single functional entity is notified by transport device drivers for each of the transports of the changes in the characteristics of the corresponding transports. The composite device driver may notify the application or the user of the changes for example via the composite device interface . It should be appreciated that in some embodiments the composite device driver may determine that the operating characteristics of the available transports have not changed significantly enough to warrant informing the application. In other embodiments any changes in the operating characteristics are reported to the application.

Optionally in decision block it may be determined whether the application or the user desires to input different transport requirements. It should be appreciated that changes in the transport requirements may be independent of changes in the current operating characteristics of the available transports. Therefore block is shown in a dashed line to indicate that it is optional. Composite device driver may query the application or the user for their respective transport requirements at any suitable time including when no changed in the operating characteristics of the available transports have been detected. Also the application may provide the requirements at any suitable time. If it is determined in block that the application desires to change its transport requirements the process may return to block where the requirements may be obtained from the application and or the user in any suitable manner. The process then continues as shown in . Alternatively if no new transport requirements are provided the process may follow to block where an appropriate transport may be selected by the composite device driver or system using any suitable method including the methods described above in connection with . The transport may be a previously used transport. Also a suitable policy may be used to select a transport as described above.

In the example illustrated an application and or a user may be notified of the changes in the operating characteristics of transports. However it should be appreciated that embodiments of the invention are not limited with respected to any particular time of notification of the user and the application of the changes. Furthermore the changes in the operating characteristics may be evaluated by the composite device driver or the system without notifying the user or the application of the changes.

Having thus described several aspects of at least one embodiment of this invention it is to be appreciated that various alterations modifications and improvements will readily occur to those skilled in the art.

Such alterations modifications and improvements are intended to be part of this disclosure and are intended to be within the spirit and scope of the invention. Accordingly the foregoing description and drawings are by way of example only.

The above described embodiments of the present invention can be implemented in any of numerous ways. For example the embodiments may be implemented using hardware software or a combination thereof. When implemented in software the software code can be executed on any suitable processor or collection of processors whether provided in a single computer or distributed among multiple computers.

Further it should be appreciated that a computer may be embodied in any of a number of forms such as a rack mounted computer a desktop computer a laptop computer or a tablet computer. Additionally a computer may be embedded in a device not generally regarded as a computer but with suitable processing capabilities including a PDA a smart phone or any other suitable portable or fixed electronic device.

Also a computer may have one or more input and output devices. These devices can be used among other things to present a user interface. Examples of output devices that can be used to provide a user interface include printers or display screens for visual presentation of output and speakers or other sound generating devices for audible presentation of output. Examples of input devices that can be used for a user interface include keyboards and pointing devices such as mice touch pads and digitizing tablets. As another example a computer may receive input information through speech recognition or in other audible format.

Such computers may be interconnected by one or more networks in any suitable form including as a local area network or a wide area network such as an enterprise network or the Internet. Such networks may be based on any suitable technology and may operate according to any suitable protocol and may include wireless networks wired networks or fiber optic networks.

Also the various methods or processes outlined herein may be coded as software that is executable on one or more processors that employ any one of a variety of operating systems or platforms. Additionally such software may be written using any of a number of suitable programming languages and or conventional programming or scripting tools and also may be compiled as executable machine language code or intermediate code that is executed on a framework or virtual machine.

In this respect the invention may be embodied as a computer readable medium or multiple computer readable media e.g. a computer memory one or more floppy discs compact discs optical discs magnetic tapes flash memories circuit configurations in Field Programmable Gate Arrays or other semiconductor devices etc. encoded with one or more programs that when executed on one or more computers or other processors perform methods that implement the various embodiments of the invention discussed above. The computer readable medium or media can be transportable such that the program or programs stored thereon can be loaded onto one or more different computers or other processors to implement various aspects of the present invention as discussed above.

The terms program or software are used herein in a generic sense to refer to any type of computer code or set of computer executable instructions that can be employed to program a computer or other processor to implement various aspects of the present invention as discussed above. Additionally it should be appreciated that according to one aspect of this embodiment one or more computer programs that when executed perform methods of the present invention need not reside on a single computer or processor but may be distributed in a modular fashion amongst a number of different computers or processors to implement various aspects of the present invention.

Computer executable instructions may be in many forms such as program modules executed by one or more computers or other devices. Generally program modules include routines programs objects components data structures etc. that perform particular tasks or implement particular abstract data types. Typically the functionality of the program modules may be combined or distributed as desired in various embodiments.

Also data structures may be stored in computer readable media in any suitable form. For simplicity of illustration data structures may be shown to have fields that are related through location in the data structure. Such relationships may likewise be achieved by assigning storage for the fields with locations in a computer readable medium that conveys relationship between the fields. However any suitable mechanism may be used to establish a relationship between information in fields of a data structure including through the use of pointers tags or other mechanisms that establish relationship between data elements.

Various aspects of the present invention may be used alone in combination or in a variety of arrangements not specifically discussed in the embodiments described in the foregoing and is therefore not limited in its application to the details and arrangement of components set forth in the foregoing description or illustrated in the drawings. For example aspects described in one embodiment may be combined in any manner with aspects described in other embodiments.

Also the invention may be embodied as a method of which an example has been provided. The acts performed as part of the method may be ordered in any suitable way. Accordingly embodiments may be constructed in which acts are performed in an order different than illustrated which may include performing some acts simultaneously even though shown as sequential acts in illustrative embodiments.

Use of ordinal terms such as first second third etc. in the claims to modify a claim element does not by itself connote any priority precedence or order of one claim element over another or the temporal order in which acts of a method are performed but are used merely as labels to distinguish one claim element having a certain name from another element having a same name but for use of the ordinal term to distinguish the claim elements.

Also the phraseology and terminology used herein is for the purpose of description and should not be regarded as limiting. The use of including comprising or having containing involving and variations thereof herein is meant to encompass the items listed thereafter and equivalents thereof as well as additional items.

