---

title: Method and system for assessing deployment and un-deployment of software installations
abstract: A method and system for assessing deployment and un-deployment of a software application installation are disclosed. In one embodiment, the method comprises receiving as an input a software application installation. Native code is extracted from the software application installation and executed. Information regarding the execution of the native code is provided to a user.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08418170&OS=08418170&RS=08418170
owner: Flexera Software LLC
number: 08418170
owner_city: Schaumburg
owner_country: US
publication_date: 20080129
---
The field of the invention relates generally to computer systems and more particularly relates to a method and system for assessing deployment and un deployment of software installations.

Typically software installations encode information about their underlying behaviors and dependencies. But the long period between authoring the installations and eventual retirement of software applications means that information regarding the installations underlying behaviors and dependencies is often lost. Specifically many software installations and installation technologies including but without limitation Microsoft Windows Installer MSI execute some native compiled code to complete certain aspects of the installation process. While such native code may not be part of the installed software applications its existence may explain why certain software application components were installed or how they were installed. Specifically the existence of the native code within the software application installation may imply that the underlying software application being installed has some secondary dependency on some physical aspect of the computer system which the installation author feels compelled to analyze in order to properly complete the software application installation. However users such as IT administrators often cannot discover why the software installation needs to execute such native code for example because the IT administrators usually do not have physical access to the original source code. For example authors of the software installations may not have provided documents explaining why such native code is necessary. Without this information it is difficult for users to decide whether to retire an installed software application or to transition an existing software application into a new enterprise network.

A method and system for assessing deployment and un deployment of a software application installation are disclosed. In one embodiment the method comprises receiving as an input a software application installation. Native code is extracted from the software application installation and executed. Information regarding the execution of the native code is provided to a user.

The above and other preferred features including various novel details of implementation and combination of elements will now be more particularly described with reference to the accompanying drawings and pointed out in the claims. It will be understood that the particular methods and systems described herein are shown by way of illustration only and not as limitations. As will be understood by those skilled in the art the principles and features described herein may be employed in various and numerous embodiments without departing from the scope of the invention.

A method and system for assessing deployment and un deployment of a software application installation are disclosed. In one embodiment the method comprises receiving as an input a software application installation. Native code is extracted from the software application installation and executed. Information regarding the execution of the native code is provided to a user.

In the following description for purposes of explanation specific nomenclature is set forth to provide a thorough understanding of the various inventive concepts disclosed herein. However it will be apparent to one skilled in the art that these specific details are not required in order to practice the various inventive concepts disclosed herein.

Some portions of the detailed descriptions that follow are presented in terms of algorithms and symbolic representations of operations on data bits within a computer memory. These algorithmic descriptions and representations are the means used by those skilled in the data processing arts to most effectively convey the substance of their work to others skilled in the art. An algorithm is here and generally conceived to be a self consistent sequence of steps leading to a desired result. The steps are those requiring physical manipulations of physical quantities. Usually though not necessarily these quantities take the form of electrical or magnetic signals capable of being stored transferred combined compared and otherwise manipulated. It has proven convenient at times principally for reasons of common usage to refer to these signals as bits values elements symbols characters terms numbers or the like.

It should be borne in mind however that all of these and similar terms are to be associated with the appropriate physical quantities and are merely convenient labels applied to these quantities. Unless specifically stated otherwise as apparent from the following discussion it is appreciated that throughout the description discussions utilizing terms such as processing or computing or calculating or determining or displaying or the like refer to the action and processes of a computer system or similar electronic computing device that manipulates and transforms data represented as physical electronic quantities within the computer system s registers and memories into other data similarly represented as physical quantities within the computer system memories or registers or other such information storage transmission or display devices.

The present invention also relates to apparatus for performing the operations herein. This apparatus may be specially constructed for the required purposes or it may comprise a general purpose computer selectively activated or reconfigured by a computer program stored in the computer. Such a computer program may be stored in a computer readable storage medium such as but is not limited to any type of disk including floppy disks optical disks CD ROMs and magnetic optical disks read only memories ROMs random access memories RAMs EPROMs EEPROMs magnetic or optical cards or any type of media suitable for storing electronic instructions and each coupled to a computer system bus.

The algorithms and displays presented herein are not inherently related to any particular computer or other apparatus. Various general purpose systems may be used with programs in accordance with the teachings herein or it may prove convenient to construct more specialized apparatus to perform the required method steps. The required structure for a variety of these systems will appear from the description below. In addition the present invention is not described with reference to any particular programming language. It will be appreciated that a variety of programming languages may be used to implement the teachings of the invention as described herein.

According to one embodiment the following terms may have the following meanings without regard to its upper or lower case usage. However one of ordinary skill would understand that additional embodiments may contemplate additional terms and or variation of these terms.

 Software installation module may mean any combination of software firmware and or hardware that allows a user to analyze software application installations.

 Extraction module may mean any combination of software firmware and or hardware that receives a software application installation and extract native code embedded in the software application installation.

 Execution module may mean any combination of software firmware and or hardware that executes native code embedded in a software application installation.

 User interface module may mean any combination of software firmware and or hardware that provides information regarding a software application installation to a user.

Software installation module is configured to receive software application installation and to assist user to assess software application installation . In one embodiment of the invention software installation module logs a set of application programming interface API calls generated during an installation process with timestamps. These API calls e.g. MsiGetFeatureState or MsiGetComponentState of MSI typically provide insights into software package interdependencies. Other API calls may include functions that determine if a file exists read a registry key co create an object etc. The log file generated by software installation module allows user to assess whether and how to deploy un deploy software installations. In addition under the direction of user e.g. by clicking a button software installation module is able to develop a deterministic process by which it can modify the installation parameters rerun the installation and provide the new results to user . For example if software application installation reads an existing registry key then software installation module can rerun software application installation when the key does not exist or when its value has been modified to observe the installation behavior. Thus via software installation module user is able to determine the complete range of installation behaviors under any particular system configuration upon which software application installation will be installed.

Execution module executes the native code to determine the underlying behaviors of software application installation . Specifically execution module can modify the installation parameters and rerun the installation. For example as discussed if software application installation reads an existing registry key then execution module can rerun software application installation when the key does not exist or when its value has been modified to observe the installation behavior.

Upon execution of the native code user interface module provides information e.g. via a display to user regarding the native code such as a list of registry keys and files read or changed by the native code. In one embodiment of the invention user interface module is configured to timestamp this information for example by providing an ordered list based on the activities executed by the native code. More specifically user interface module provides an ordered list of API calls made by the native code and the resulting changes to the physical configuration e.g. registry keys files etc. . In one embodiment of the invention the native code may be executed by the MsiDoAction API for MSI installations.

A data storage device such as a magnetic disk or optical disc and its corresponding drive may also be coupled to computer system for storing information and instructions. Architecture can also be coupled to a second I O bus via an I O interface . A plurality of I O devices may be coupled to I O bus including a display device an input device e.g. an alphanumeric input device and or a cursor control device . For example web pages and business related information may be presented to the user on the display device .

The communication device is for accessing other computers servers or clients via a network. The communication device may comprise a modem a network interface card a wireless network interface or other well known interface device such as those used for coupling to Ethernet token ring or other types of networks.

Although the present method and system have been described in connection with a software installation system one of ordinary skill would understand that the techniques described may be used in any situation where it is to analyze behaviors of software applications.

A method and system for assessing deployment and un deployment of a software application installation are disclosed. In one embodiment the method comprises receiving as an input a software application installation. Native code is extracted from the software application installation and executed. Information regarding the execution of the native code is provided to a user.

