---

title: Privacy modes in a remote desktop environment
abstract: Techniques described maintain privacy of a remote desktop client when the remote client interacts with and displays the desktop of the host device. The described techniques enable such privacy and control even when the host computing device does not run an operating system with session support. The host includes a virtual display driver, which is not associated with a physical display, and a physical display driver, which is associated with a physical display. The techniques associate the virtual display driver with a mirror driver of the host, while disassociating the physical display driver from the mirror driver. The mirror thus driver provides contents of the virtual display to the remote client. Additionally, because the virtual display driver is not associated with a physical display, the contents of the virtual display (and hence the interactions of the remote client) are not displayed at the host.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08266637&OS=08266637&RS=08266637
owner: Microsoft Corporation
number: 08266637
owner_city: Redmond
owner_country: US
publication_date: 20080303
---
Traditional remote desktop methods leverage operating systems having session support. These operating systems allow a remote client to access a host computing device without displaying the remoted desktop on a physical display of the host computing device. As such these operating systems allow the remote client to access and control the host while maintaining privacy of the remote client. Additionally these operating systems allow the remote client to control the remote desktop session while disallowing users at the host to inject input into the session.

Recent developments in the remote desktop realm however allow a remote client to access a host computing device that does not include an operating system having session support. In these instances the remote client receives a direct representation of the desktop of the host computing device. As such the operations taken by and displayed on the remote client are also displayed on a physical display of the host computing device. Additionally a user at the host computing device may interfere with the remote desktop connection by injecting input such as keystrokes or mouse input into the system.

This document describes techniques for maintaining privacy of a remote client that accesses a host computing device while still allowing the remote client to view and interact with the desktop of the host device. The described techniques enable such privacy and control even when the host computing device does not run an operating system with session support. In some instances the host computing device includes a virtual display driver which is not associated with a physical display of the host and a physical display driver which is associated with a physical display of the host. The techniques may associate the virtual display driver with a mirror driver of the host while disassociating the physical display driver from the mirror driver. As such the mirror driver provides contents of the virtual display to the remote client. Additionally because the virtual display driver is not associated with a physical display of the host the contents of the virtual display and hence the interactions of the remote client are not displayed at the host.

The host computing device may also block input received at a physical console of the host while processing input received from the remote client. In combination the described techniques thus allow a user of the remote client to interact with the host while disallowing users at the host to view or interfere with these interactions.

This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key or essential features of the claimed subject matter nor is it intended to be used as an aid in determining the scope of the claimed subject matter. The term techniques for instance may refer to system s method s and or computer readable instructions as permitted by the context above and throughout the document.

The following discussion targets techniques for maintaining privacy of a remote client that accesses a host computing device while still allowing the remote client to view and interact with the desktop of the host device. The described techniques enable such privacy and control even when the host computing device does not run an operating system with session support. The discussion also targets techniques to process input received from the remote client while blocking input received from the host.

The discussion begins with a section entitled Illustrative Remote Desktop Architecture which describes an illustrative architecture which may employ the claimed techniques. A second section entitled Establishing a Privacy Mode in a Remote Desktop Environment follows. This section describes how the claimed techniques may establish a mode where the remote client views and interacts with a desktop of the host while disallowing the display of such interactions at the host. A third and final section entitled Blocking Input and Restoring Control at the Host follows. This section describes how the claimed techniques may block input received from the host. This section also describes how the techniques take down the privacy mode at the end of a remote desktop session in order to allow users of the host device to control and interact with the host.

This brief introduction including section titles and corresponding summaries is provided for the convenience of the reader and is not intended to limit the scope of the claims nor the proceeding sections.

As illustrated host may include a physical display as well as one or more processors and memory . Display functions to display viewable images generated by processors and or memory . In the illustrated implementation memory includes a remote desktop server . Remote desktop server comprises a piece of software installed on host that enables a client such as remote client to access and remotely control host . In the illustrated implementation host runs an operating system OS that does not include session support. As such remote desktop server functions as an alternative to traditional OS enabled remote desktop. Of course in other implementations the OS may include session support.

As noted above however remote desktop server may function to provide a direct representation of the physical desktop or terminal of host to remote client . As such without the described components of host the contents provided to remote client during a remote desktop session would also be displayed on host display . Additionally input e.g. keystrokes that is injected at host would be processed just as if the input were provided at remote client . The privacy mode described below however functions to eliminate this unsecured remote desktop scenario.

In addition to remote desktop server memory includes one or more applications . Applications may include any traditional applications found on a computing device or otherwise such as a word processing application a drawing application a web browser application and the like. Memory further includes a graphics device interface GDI . GDI is an interface for representing graphical objects and transmitting them to output devices such as computer monitors e.g. display printers and the like.

As illustrates applications provide information to GDI which then transmits this data to output devices. For instance GDI may transmit this information to a physical display driver which is associated with host display . With this information physical display driver and host display would render the information provided by applications . For instance imagine that a user of host were typing a document with use of one of applications . This application would then draw to GDI which would in turn send this information to physical display driver for rendering on host display . While the illustrated implementation is described with reference to GDI other implementations may employ another interface that includes similar functionality.

Memory also includes a mirror driver for providing contents sent from GDI and destined for the physical display driver or whichever driver with which mirror driver is associated with to the remote desktop server . Remote desktop server then provides these contents to remote client for rendering on a display of remote client . In other words mirror driver mirrors the information sent from GDI and to a driver of host such that remote desktop server may provide this mirrored information to a client that remotely controls host .

In addition to physical display driver and mirror driver however host also includes a virtual display driver . Virtual display driver is a driver loaded into memory that is associated with a virtual but non physical display. Because virtual display driver is associated with a virtual rather than a physical display any information sent from GDI to virtual display driver will not be rendered on display of host . Nevertheless any information sent from GDI to virtual display driver may be sent to mirror driver and as such may be sent to remote client for rendering on display .

As described in detail below with reference to virtual display driver may thus in conjunction with mirror driver enable user to interact with host without such interactions being displayed on host display . As such drivers and may allow user to privately operate host computing device .

In addition to providing a private remote desktop environment for user remote desktop server may also include a program to leverage functionality of host to enable user to inject input into host from remote client while blocking input injected at the host itself. As illustrated host may include a blockinput application program interface API as well as a sendinput API e.g. stored on an operating system of host . While the illustrated implementation describes APIs and it is specifically noted that the described functionality may be accomplished with use of similar or different types of applications.

Blockinput API functions to block most or all input received at host computing device after remote client initiates a remote desktop session with the host . In some instances however blockinput API may allow a certain predetermined command sent from host to pass through in order for a user of host to regain control of the host during a remote desktop session. and an accompanying discussion illustrate and describe an illustrative process for blocking host input with use of blockinput API as well as restoring control to host in response to receiving the predetermined command.

Sendinput API meanwhile functions to enable user to inject input into host from remote client . Blockinput API and sendinput API thus allow remote client to exclusively control host until a predetermined command is received from the host computing device . Program may detect the unblocking of the input via the predetermined command and may lock host until a user logs on to the host. Additionally and as described in detail below the combination of virtual display driver and APIs and thus allow for user to conduct a secure and private remote desktop session between remote client and host .

Finally remote desktop server includes a recovery mechanism . Recovery mechanism functions to store one or more configurations of host before remote client initiates a remote desktop session with host . If host crashes during the session then recovery mechanism accesses upon reboot of the host a stored configuration of the host prior to the initiation of the remote desktop session. Recovery mechanism then restores this configuration such that host is configured as it was prior to the remote desktop session.

Process includes operation which represents remote client connecting to host in order to remotely control the host. That is at operation remote client beings remotely controlling host with use of remote desktop server . At operation meanwhile host computing device loads virtual display driver as a primary display of host . Operation then represents that host detaches or unloads physical display driver and associated display . Operation may similarly detach one or more other physical display drivers and associated displays in multi monitor systems. At operation host then loads physical display driver and associated display as a secondary display. Conversely as opposed to detaching physical display driver and thereafter loading the driver other implementations may instead programmatically move all open applications to the virtual display. Physical display driver may then be associated as a secondary display.

By loading the virtual display as the primary display and the physical display of the host as the secondary display applications opened by remote client will spawn on the virtual display rather than the physical display. As such these opened applications will not be displayed at the host computing device.

Process continues on at operation . Operation represents that host associates mirror driver with virtual display driver . By associating mirror driver with virtual display driver mirror driver provides contents of the virtual display to remote client . Again contents of the virtual display including spawned applications and the like are therefore provided to remote client while avoiding the display of these same contents on the physical display of the host.

Operation then represents that host alters a location of the physical display and or a location of the virtual display such that these displays do not overlap. Because host has loaded the virtual display as the primary display host only alters a location of the physical display in some implementations. Additionally in some implementations the physical display is moved such that the physical display is above the virtual display. In still further implementations the physical display may be both above the virtual display and approximately diagonal to the virtual display. This latter configuration which illustrates makes it difficult for user operating remote client to move an application window from the virtual display whose contents are displayed at remote client and not at host to the physical display whose contents are displayed at host and not at remote client .

In more detail many application windows enable users to move the windows by selecting a toolbar that typically appears at the top of the window. Therefore if user were to attempt to drag and drop an application window from the virtual display and onto the physical display when these displays were located in the manner illustrated by only a relatively small portion of the window would appear on the physical display. Additionally host may attempt to obscure even this small portion of the application window within the border of the physical display as discussed in detail below with reference to operation .

Next operation represents that remote client displays the contents of the virtual display which is attached to mirror driver while display of host displays contents of the physical display. Conversely because the physical display is not attached to mirror driver contents of the physical display are not remoted to remote client . Similarly because virtual display driver is not associated with an actual physical display at host contents of the virtual display are not displayed at host .

Continuing to operation represents that host spawns an application on the physical display that indicates that host is being remotely controlled. Here illustrates that the application displays a piece of text on the physical display. Text states This computer is currently being remotely controlled . Of course other implementations may display different text images or the like or may not display anything at all.

In addition to text or images or the like the spawned application may obscure the contents of the display by displaying a black box or the like on host display in the form of the text images or the like . This displayed black box that includes the text images or the like may contain a property that specifies that the black box should always remain on top. Therefore if user were to move a portion of an application window from the virtual display onto the physical display the black box would obscure that portion by moving to the front of the physical display. This always on top black box may therefore help to ensure that the interactions of user on remote client remain private and not displayed at host .

Finally operation represents that host may spawn all or substantially all applications other than the obscuring application from operation on the virtual display. As such these applications appear on display of remote client but are not displayed on display of host . Additionally if an application improperly spawns on the physical display this application may be programmatically moved to the virtual display. Operation also represents that changes made to application windows are sent to remote client for rendering on display . For instance if user types a document while remote controlling host the changes made to the document as well as the document application itself appear on display but not on display .

Having described a process for providing visual privacy for remote client now depicts an illustrative process for blocking input from a physical console of the host . This process also illustrates and describes unblocking the input and taking down the privacy mode in response to receiving a predetermined command at the host.

Process includes operation which represents launching a privacy mode such as the privacy mode described above with reference to . Next operation calls blockinput API to block input received at the host computing device which results in the return of a true parameter indicating that input will be blocked. Once called blockinput API blocks at operation all or substantially all input from users operating a physical console of host .

For instance API would block most or all keystrokes mouse inputs or other interactions by users controlling the physical console. In some instances blockinput API does not block a certain predetermined command that when received unblocks the blocking of the input and takes down the privacy mode. In some instances this command comprises a secure attention sequence SAS received from a keyboard of host . This SAS may comprise a control alt delete key sequence or some other predetermined key sequence.

Returning to operation next calls blockinput API to determine if the predetermined command has been received from host . Decision block then queries whether the predetermined command has been received or stated otherwise whether the returned parameter is true. If not i.e. if the return parameter is false then process loops back to operation . If however the predetermined command has been received i.e. the return parameter is true then process proceeds to operation . Operation then takes down the privacy mode and thereafter may process input received from host . In some instances in response to detecting the predetermined command and before the privacy mode is taken down program locks host and a login screen is displayed. Therefore a user that wishes to operate host may first log in before being allowed to control the host.

Stated otherwise if the return parameter is true at decision block then the calling of API at operation re blocked the input received from host . As such decision block determines that the predetermined command unblocking the blocking of the input was indeed received from host . As such operation proceeds to take down the privacy mode and allow a user of host to regain control of the device as described in detail immediately below. Until the predetermined command is received however process continues to periodically call blockinput API as illustrated by operations and . In response to each call a parameter of false is returned indicating that the predetermined command has not been received from the physical console of host . As such blockinput API continues to block input from host until the predetermined command is received.

Process includes operation at which remote client disconnects from host and hence terminate the remote desktop session. Next at operation host sets the physical display as the primary display of the host. At operation host then unloads virtual display driver and the associated virtual display. Finally host associates mirror driver with physical display driver at operation . At this point host is configured in the same manner as it was prior to the remote client remotely controlling the host. As such a user of host computing device may now interact with the device and view the interactions on display of host .

Although the subject matter has been described in language specific to structural features and or methodological acts it is to be understood that the subject matter defined in the appended claims is not necessarily limited to the specific features or acts described above. Rather the specific features and acts described above are disclosed as example forms of implementing the claims.

