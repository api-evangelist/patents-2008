---

title: Dynamically binding a logic component to a processing point in a software execution flow
abstract: A method for use in a communications node includes exposing at least one processing point in an execution flow of base software executing in the communications node. A logic component can be dynamically bound to the exposed processing point, where the logic component specifies actions to be performed by the communications node.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08813062&OS=08813062&RS=08813062
owner: Genband US LLC
number: 08813062
owner_city: Plano
owner_country: US
publication_date: 20081212
---
This application claims the benefit under 35 U.S.C. 119 e of U.S. Provisional Application Ser. No. 61 013 144 entitled Mechanism to Provide Configurable Message Handling and Routing Behavior in Multi Purpose Network Applications filed Dec. 12 2007 which is hereby incorporated by reference.

The invention relates generally to selecting a logic component to dynamically bind to a processing point in an execution flow of software.

Many types of communications can be performed over data networks wireless and or wireline networks including electronic mail web browsing file downloads electronic commerce transactions voice or other forms of real time interactive communications and others. To enable the establishment of communications sessions in a network various control functions are deployed in the network. Some standards bodies have defined subsystems within communications networks that include such control functions. One such standards body is the Third Generation Partnership Project 3GPP which has defined an Internet Protocol IP multimedia subsystem IMS that includes various control functions for provision of IP packet switched multimedia services including audio video text chat or any combination of the foregoing.

Another standards body is the Third Generation Partnership Project 2 3GPP2 which has defined a multimedia domain MMD network to provide various IP multimedia services. In the wireline context the equivalent of an IP multimedia subsystem is sometimes referred to as a Next Generation Networks NGN .

In a network environment such as in any of the networks noted above there can be various nodes to perform various different tasks. The requirements of the various nodes within such a network environment can be continually changing such as due to revisions to the relevant standards governing the corresponding type of network or due to updates desired by network service operators. Also different service operators can also specify different requirements for the network nodes.

Conventionally network nodes that are provided by an equipment vendor are configured to a specific set of requirements as specified by current standards and or by customers e.g. network service operators . Thus different versions of a particular network node may have to be developed by the equipment vendor for use with different standards versions and or for different customers.

Each different version of a network node is associated with a corresponding different release stream where a release stream can include product development e.g. development of software to be incorporated in the node product testing and release to customers. Having to implement different release streams for different versions of a network node can result in increased development integration verification product management maintenance and support costs.

In general according to an embodiment a technique or mechanism is provided to enable flexible and configurable behavior of software to be used in a communications node. For example a method for use in a communications node includes exposing at least one processing point in an execution flow of software executing in the communications node. The method further includes dynamically binding a logic component to the exposed processing point where the logic component specifies actions to be performed by the communications node.

Other or alternative features will become apparent from the following description from the drawings and from the claims.

In the following description numerous details are set forth to provide an understanding of some embodiments. However it will be understood by those skilled in the art that some embodiments may be practiced without these details and that numerous variations or modifications from the described embodiments may be possible.

In general according to some embodiments an execution flow of base software that executes in a communications node of a communications network has one or more exposed processing points. Each exposed processing point of the execution flow can be bound to a logic component where the logic component that is bound to the processing point can be one of multiple different logic components that perform different respective actions. Exposing a processing point of a software refers to providing an interface or other type of entry to allow an external module external to the software to link to or otherwise interact with the software. The logic component that is dynamically bound to the exposed processing point of the base software execution flow can be based on one or more criteria associated with the communications node. The one or more criteria can include product version e.g. product of customer X product that supports standard version Y etc. . For example a first logic component is bound to the exposed processing point for a first version of the communications node while a second different logic component is bound to the exposed processing point for a second version of the communications node. The different logic components perform different tasks according to different requirements e.g. different requirements associated with different versions of standards different customer specifications different deployments of the same customer different traffic preferences different end to end solution requirements etc. specified for different product versions. Dynamically binding a logic component to the base software refers to the ability to selectively bind one of several possible logic components to the base software based on one or more criteria.

The one or more criteria that specify which logic component is to be bound to an exposed processing point of the base software execution flow can also be run time criteria such as time of day criteria node loading criteria etc. For example during business hours a first logic component can be bound to the exposed processing point while a second different logic component can be bound to the exposed processing point after business hours. As another example a first logic component can be bound to the exposed processing point if the node is experiencing heavy loading while a second logic component can be bound to the exposed processing point if the node has light loading.

The logic component that can be bound to an exposed processing point of an execution flow can be in the form of a handler which is a software routine. The logic component can also be referred to as a strategy which is an object that encapsulates a predefined set of logic that is executed at a specific processing point in the execution flow of the base software. The strategies that can be bound to any specific processing point of the execution flow of the base software can be varied based on different requirements of the corresponding communications nodes in which the strategies are to be implemented.

More generally mutable strategies can be bound to any exposed processing point of a base software execution flow depending upon different requirements defined for communications nodes. In this manner a common base software can be provided in each of different communications nodes associated with different requirements. Different strategies can then be selected for deployment in the different communications nodes based on the corresponding requirements.

Developing different strategies for different communications nodes is more cost efficient than having to redevelop the base software for the different communications nodes to satisfy different requirements. The base software can be developed just once by an equipment vendor where development of the base software includes writing the base software testing the base software and releasing the base software. Then based on different requirements received by the equipment vendor for different versions of the communications node the equipment vendor can develop different strategies accordingly. To deploy a particular version of the communications node in a network the appropriate one or more strategies can be loaded for binding with exposed processing points of the base software in the communications node.

Instead of the equipment vendor developing different strategies to bind to exposed processing points of a base software execution flow the customer such as a service operator can develop a customized strategy to bind to the base software execution flow such that the customer does not have to rely on the equipment vendor for the customized strategy if the vendor has disclosed detailed specifications regarding the base software and binding of strategies to the customer . A service operator can thus extend the life of currently deployed products while providing new services. Also as standards change different strategies can be developed to incrementally evolve a network.

The ability to bind different strategies to a particular processing point of the execution flow of a base software allows the behavior of the base software to be changed without touching the source code of the base software. This enables much greater flexibility in implementing different versions of a particular product that is based on the base software. Note also that processing points can be exposed in other software routines other than base software such as by exposing processing points in logic components corresponding to strategies as discussed further below.

In alternative implementations the communications network A that provides packet switched services can be a multimedia domain MMD network as defined by 3GPP2. As yet another alternative the network A can be a Next Generation Network NGN used in a wireline context.

Alternatively the communications network A can be a wireless access network such as a GSM Global System for Mobile communications or UMTS Universal Mobile Telecommunications System network as defined by 3GPP a CDMA 2000 Code Division Multiple Access 2000 network as defined by 3GPP2 an LTE Long Term Evolution network as defined by 3GPP a WiMax Worldwide Interoperability for Microwave Access network or other types of networks.

In the IMS network example the nodes A can be one of several different types of call session control function CSCF nodes such as a proxy CSCF P CSCF node an interrogating CSCF I CSCF node or a serving CSCF S CSCF node. The P CSCF is a SIP Session Initiation Protocol aware control contact point for a network entity desiring to access an IMS network. The P CSCF in turn communicates SIP signaling with an interrogating CSCF I CSCF or serving CSCF S CSCF in the IMS network. An I CSCF is the contact point within a service operator s network for connections destined to destinations in the service operator s network. Example tasks performed by the I CSCF include handling initial registration by interrogating an home subscriber server HSS routing of a call control message received from another network towards an S CSCF and other tasks. An S CSCF handles session control within the IMS network on behalf of other network entities.

SIP defines control messages that are exchanged to establish multimedia communications sessions in a network. SIP is defined by Request for Comments RFC entitled SIP Session Initiation Protocol dated June 2002.

Another type of node is an Interconnect Border Control Function IBCF node which is a gateway to an external network. In other types of networks nodes for performing other tasks are contemplated.

As further depicted in a communications node A includes base software A where the base software A provides a common set of functions that are common for different versions of a product. The term product refers to an assembly of modules that include the base software A as well as one or more other software modules that work in combination with the base software A to provide a target set of functions. Different versions of the product can correspond to different customers of the equipment vendor that provides the product or to different deployments of the product for the same customer. Also different versions of the product may be provided to support different versions of a standard that governs operation of the product or to different traffic preferences or to different end to end solutions. Note that the term product can refer to just the software modules that are to be executed in the communications node A or alternatively the product can refer to the entire node A. In one example the base software can be a generic message processor and router can be used across multiple versions of a product.

The base software A is executable on one or more central processing units CPUs A in the communications node A. The one or more CPUs A are connected to a storage . When executed the base software A provides an execution flow A that corresponds to the tasks associated with the base software A. The execution flow A of the base software A can be viewed as a flow of different tasks that are performed based on one or more input stimuli e.g. in the form of input parameters received by the base software A.

In accordance with some embodiments the execution flow A of the base software A has exposed processing points A and A which can be bound to respective strategies. In the example of a strategy A is bound to the processing point A and another strategy A is bound to the processing point A.

In the example of the network A can be considered a first network that is managed by a first service operator. also shows the second network B that can be managed by a second service operator where the second service operator may specify requirements for communications nodes B in the second network B that are different from the requirements specified by the first service operator for communications nodes A in the first network A.

Each communications node B contains similar components as communications node A including base software B CPU B and storage B. The base software B when executed provides an execution flow B that has exposed processing points B and B. The base software B is the same as the base software A even though the base software B and A are provided on different communications nodes B and A for different service operators.

Since the base software A and B are the same the respective exposed processing points A B and A B in the execution flows A and B are also the same.

The strategies A A and strategies B B that are bindable to corresponding exposed processing points in the base software execution flow are considered mutable since the strategies can be different for different communications nodes that have different requirements. In other words in the example of the strategy A that is bound to the base software execution flow A at exposed processing point A is different from or alternatively can be the same as the strategy B that is bound to the exposed processing point B of the base software execution flow B. Similarly the strategy A in node A is different from or alternatively can be the same as the strategy B.

In one example the strategy A that is bound to the exposed processing point A in the first network node base software execution flow A can specify that a specific type of identifier in a control message is to be processed in a first way. However the strategy B that is bound to the corresponding exposed processing point B in the second network node base software execution flow B can specify that the specific type of identifier in the control message is to be processed in a second different way.

In a more specific example the strategy A can specify that an E.164 number received in an incoming message is to be resolved by accessing a home subscriber server HSS . The strategy B can specify that telephone number mapping ENUM is to be performed. E.164 refers to a recommendation from ITU T that specifies the format of telephone numbers.

The strategy that is to be bound to an exposed processing point of an execution flow can be configured at run time of the node. When a communications node is initialized configuration information in the communications node can be accessed to identify the strategies that are to be bound to corresponding exposed processing points of the base software execution flow. The identified strategies are then bound to the exposed processing points based on the configuration information. The configuration information can be stored in a storage e.g. storage A or B of the communications node.

In alternative embodiments instead of or in addition to using configuration information pre stored in the communications node to identify strategies to bind to exposed processing points of a base software execution flow other or additional information can be used instead. Examples of such other information include run time information information created during execution of the base software and external event information information provided from an external source to the communications node .

Binding a strategy to an exposed processing point of the execution flow A or B refers to causing a handler that defines the strategy to be loaded such that the handler is able to communicate with the base software A or B through an interface that corresponds to the exposed processing point. The interface corresponding to the exposed processing point is a well defined interface and can include as examples shared storage locations in the storage of the node an application programming interface and so forth.

In addition to being able to bind to the execution flow of the base software through the processing point X the handler is also able to access other portions of the base software through a callback X interface . Execution of the handler produces outputs that can be provided back to the base software through the callback X interface .

The handler itself can be associated with an execution flow which has its own exposed processing points and . A sub handler can be bound to the exposed processing point in the execution flow of the handler . The ability to provide exposed processing points at the handler level allows for greater flexibility since the behavior of the handler at its exposed processing points can be modified based on binding selected different sub handlers that encapsulate different strategies to those exposed processing points. In the embodiment depicted in multiple levels of processing points can be exposed including processing points in the execution flow of base software and processing points in the execution flow of a handler.

The handler that implements a strategy should fully contain and control all rules that are relevant or applicable at the specific exposed processing point of an execution flow. Decision making regarding tasks to be performed by the handler is completely delegated to the strategy object represented by the handler that is bound to a specific processing point.

Various benefits can be provided by some embodiments of the invention. Different strategies applied at specified processing points can yield different behaviors of a product for adaptation to different solutions. Combinations of well tailored strategies can be applied at specific processing points within a particular solution to yield a flexible deployment of the product. A well defined and simple external mechanism is provided to configure behavior of the product. The same base software can support diverse requirements and can enforce different policies.

The table of also shows solutions for the base application E 2. For base application E 2 processing points X and Z are exposed where strategy X1 is selected for each of solutions Sol A Sol B and Sol C at processing point X and strategy Z1 or Z4 is selected for solutions Sol A Sol B and Sol C at processing point Z.

The different solutions for base application E 1 can correspond to different requirements set by different customers and or set by different standards versions. Similarly the different solutions for base application E 2 can also correspond to different requirements set by a customer and or standards version.

In one example the two base applications E 1 and E 2 collaborate to provide one of the three possible solutions Sol A Sol B or Sol C. shows that the same strategy e.g. X1 can be re used by different applications if the applications share the same logical processing point which in this example is processing point X. One specific example can involve two different applications S CSCF and I CSCF that can share the same strategy at some logical processing point.

The following provides some examples of different solutions associated with different requirements. In one example SIP control messages are exchanged to establish multimedia communications sessions in a network. A SIP control message can include a SIP Uniform Resource Indicator URI which identifies a communications resource e.g. a user a telephone number etc. . There can be different URI types. There may be different requirements for handling different URI types. For example a first URI type is an SIP address of record while another URI type is a global or local phone number. Different node deployments may desire to handle the different URI types differently. The following provides some examples of how different URI types can be handled.

A first strategy may specify that invalid URI formats are not to be propagated. Another strategy may specify that local phone numbers are to be routed to a public switched telephone network PSTN . Yet another strategy is that domain ownership is to be disregarded for E.164 numbers represented in SIP notation. Another strategy may specify that handling is to be provided only for domains served or owned by a particular network for E.164 numbers represented in SIP notation.

Another example of different strategies to handle a particular functionality is in the context of ENUM processing. ENUM defines a suite of protocols to unify the telephone numbering system E.164 with the Internet addressing system. Different strategies can specify whether ENUM services are to be supported and if so the specific actions to take for ENUM services. The services can include translation of ENUM numbers routing messages containing ENUM numbers and other tasks. Also strategies can be specified for handling users that belong to a peer IMS network or a user that does not belong to a network managed by a provider that has a peering agreement.

In a more specific example a SIP Invite message which is a setup message used to establish an IP packet switched session can include a Tel URI one type of URI that contains an E.164 number. A first strategy can specify that the E.164 number is to be resolved to a SIP URI by using an ENUM technique such that the call can be routed to a terminating control node within the same network. A second strategy can specify that the E.164 number cannot be resolved using ENUM and that the call has to be routed to a PSTN to complete the call.

Different ENUM processing strategies or different URI type processing strategies can also be implemented in different IMS network nodes such as P CSCF nodes S CSCF nodes and I CSCF nodes.

Processing points of the base software execution flow are exposed at and based on the received information regarding binding of strategies the communications node binds at selected strategies to the exposed processing points. A strategy bound to any particular exposed processing point is one strategy that is selectable from among multiple different strategies that can be bound to the particular exposed processing point. Note that strategies can be bound upfront for all processing points based on deployment configuration only or alternatively one or more specific processing points can be bound to one or more corresponding strategies upon reaching each of the specific processing points based on configuration and or run time data. This latter approach has the benefit of being able to change strategy i.e. behavior on the fly while the system is running.

The bound strategies are then executed at and outputs of the executed strategies are provided to the base software.

Note that as the communications node evolves due to evolving requirements then the strategies that are bound to the exposed processing points of the base software execution flow can be replaced by loading new strategies into the communications nodes and binding such new strategies to the exposed processing points in place of the previous strategies.

Instructions of software described above such as base software A B or handlers can be executed on a processor e.g. CPU A or B . The processor includes microprocessors microcontrollers processor modules or subsystems including one or more microprocessors or microcontrollers or other control or computing devices. A processor can refer to a single component or to plural components.

Data and instructions of the software are stored in respective storage devices which are implemented as one or more computer readable or computer usable storage media. The storage media include different forms of memory including semiconductor memory devices such as dynamic or static random access memories DRAMs or SRAMs erasable and programmable read only memories EPROMs electrically erasable and programmable read only memories EEPROMs and flash memories magnetic disks such as fixed floppy and removable disks other magnetic media including tape and optical media such as compact disks CDs or digital video disks DVDs .

In the foregoing description numerous details are set forth to provide an understanding of the present invention. However it will be understood by those skilled in the art that the present invention may be practiced without these details. While the invention has been disclosed with respect to a limited number of embodiments those skilled in the art will appreciate numerous modifications and variations therefrom. It is intended that the appended claims cover such modifications and variations as fall within the true spirit and scope of the invention.

