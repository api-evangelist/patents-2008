---

title: Multiple java ME MIDlet execution in single-instance CLDC JVM
abstract: Methods and systems are disclosed for Multiple Java ME MIDlet Execution in Single-Instance CLDC JVM. A subMIDlet manager may be an instance of the MIDlet class and may be capable of managing the lifecycles of component subMIDlets. SubMIDlets may contain the functionality of a MIDlet and may be configured to operate within a subMIDlet manager in a JVM and not to operate in a JVM without a subMIDlet manager. An exemplary method includes executing a single JVM that is capable of executing a single MIDlet at a time and using the JVM to execute a subMIDlet manager. Such a JVM may be present on a MIDP device. The subMIDlet manager may coordinate the activities of multiple subMIDlets executing simultaneously while appearing to the JVM as a single MIDlet.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08572561&OS=08572561&RS=08572561
owner: Sprint Spectrum L.P.
number: 08572561
owner_city: Overland Park
owner_country: US
publication_date: 20080806
---
Java Platform Micro Edition J2ME outlines Java functionality for resource constrained devices such as some cellular phones. The Connected Limited Device Configuration CLDC is a subset of J2ME that consists of the minimal libraries and virtual machine functions needed for a Java Virtual Machine JVM to function on such devices. The Mobile Information Device Profile MIDP is an example of a profile that operates on top of CLDC Java applications that execute on MIDP devices are termed MIDlets. Particular MIDlets may be games or may allow a cellular phone user to download or stream multimedia content from a network as two examples. Newer cellular phones with increased memory and processing power may implement a more robust profile that supports a Multi tasking Java Virtual Machine MVM .

Disclosed herein is a mobile station capable of executing multiple subMIDlets on a single JVM. The mobile station may comprise a wireless communication interface a processor data storage and data and programming instructions stored in the data storage. The program instructions may be executable by the processor to carry out functions including i executing exactly one JVM wherein the JVM is capable of executing exactly one instance of a MIDlet class at any one time and ii using the JVM to execute a subMIDlet manager wherein the subMIDlet manager is an instance of the MIDlet class and wherein the subMIDlet manager manages lifecycles of each of a plurality of subMIDlets wherein each subMIDlet is an instance of a subMIDlet class arranged to have its lifecycle managed by the subMIDlet manager.

Also disclosed herein is a method for executing multiple subMIDlets on a single JVM. According to the method a mobile station or other device may execute exactly one JVM wherein the JVM is capable of executing exactly one instance of a MIDlet class at any one time. The mobile station or device may then use the JVM to execute a subMIDlet manager wherein the subMIDlet manager is an instance of the MIDlet class and wherein the subMIDlet manager manages lifecycles of each of a plurality of subMIDlets wherein each subMIDlet is an instance of a subMIDlet class arranged to have its lifecycle managed by the subMIDlet manager.

Further disclosed herein is another method for executing multiple subMIDlets on a single JVM. According to the method a programmer or other entity may convert a plurality of MIDlets into subMIDlets by replacing calls to a JVM with calls to a subMIDlet manager. The programmer may then instantiate a subMIDlet manager wherein the subMIDlet manager is an instance of a subMIDlet manager class that inherits from a MIDlet class. By packaging the subMIDlet manager with the subMIDlets the programmer may create a composite MIDlet. The programmer or another entity such as a user may download the composite MIDlet onto a mobile station capable of executing exactly one JVM wherein the JVM is capable of executing exactly one instance of the MIDlet class at any one time. A user or other entity may then launch the composite MIDlet on the mobile station. The composite MIDlet may in turn enable the user of the mobile station to select multiple subMIDlets to execute simultaneously.

These as well as other aspects advantages and alternatives will become apparent to those of ordinary skill in the art by reading the following detailed description with reference where appropriate to the accompanying drawings.

Many mobile stations such as those that implement MIDP have JVMs that are only capable of running a single MIDlet at any one time. If the user of such a mobile station is running one MIDlet and desires to run another MIDlet the user must exit the first MIDlet before launching the second MIDlet.

Because it is difficult to retrofit a new JVM into a device running an old JVM a device typically runs the same JVM over its entire lifetime. Even were a JVM upgrade available these devices may not possess the memory and processing capabilities to run the upgraded JVM while maintaining basic telecommunications functionality. Scaled down memory and processing power may contribute to MIDP devices having relatively low price points and thus being attractive to consumers. A MIDP device user must now upgrade to a new and most likely more expensive device if that user desires the ability to run multiple MIDlets simultaneously.

MIDlets are developed by a wide range of software developers according to Java specifications using routines from a MIDlet class and interoperability with other MIDlets is often not considered. Additionally many developers maintain secrecy as to MIDlet source code and are reluctant to share it with other developers. For at least these reasons a software solution to the problem of running multiple MIDlets on a single MIDlet JVM has not been forthcoming.

The inventive systems and methods allow for the simultaneous execution of multiple MIDlets on a single MIDlet JVM. This is accomplished at least in part by defining a new class in Java the subMIDlet class that inherits from the MIDlet class packaging MIDlet functionality into instances of the subMIDlet class and instantiating a subMIDlet manager. The subMIDlet manager a member of the MIDlet class may manage the lifecycles of component subMIDlets similarly to how a JVM may manage the lifecycle of a MIDlet.

Communication interface manages communications between mobile station and other elements in a network. For instance messages received from other components in the network may be communicated through communication interface and over system bus to processor . Similarly messages to be transmitted to other components in the network may originate from processor and travel over system bus and through communication interface .

Data storage may contain programming instructions accessible by processor via system bus . Instructions may include operating system logic to execute one instance of a JVM and may further include logic to execute MIDlets. The JVM may be capable of only having a single MIDlet executing at any one time.

The subMIDlet manager may be an instance of the MIDlet class. Alternatively the subMIDlet manager may be an instance of a subMIDlet manager class that inherits from the MIDlet class. In either case the subMIDlet manager may contain a collection of functional sub units called subMIDlets which may be instances of a subMIDlet class. The subMIDlet manager may be responsible for managing the lifecycle of the subMIDlets while the subMIDlets may be arranged to have their lifecycles managed by the subMIDlet manager. The subMIDlet manager may be agnostic to the functionality of any given subMIDlet providing standardized lifecycle management to all subMIDlets in the collection.

This lifecycle management may include the subMIDlet manager having the ability to launch or start subMIDlets to pause subMIDlets and to destroy subMIDlets. To do this the subMIDlet manager may override the MIDlet methods startApp pauseApp and destroyApp . The subMIDlet manager may notify individual subMIDlets that they are to be paused or destroyed perhaps through the methods notifyPaused and notifyDestroyed respectively. In order to pause a subMIDlet may relinquish control of all system resources.

In addition to the ability to manage the lifecycles of single subMIDlets the subMIDlet manager may be further configured to accommodate the simultaneous execution of multiple subMIDlets. Consequently the subMIDlet manager may allow subMIDlets to reserve and release shared system resources such as memory or access to a mobile device speaker. The state of multiple simultaneously executing subMIDlets may be the result of a running subMIDlet requesting that the subMIDlet manager launch another subMIDlet. A transition request may occur when a subMIDlet requests that it be destroyed and that another subMIDlet be launched in its place.

The functionality of the subMIDlet manager may go beyond lifecycle management for instance including the capability of listening for interrupts. The subMIDlet manager may itself be registered as a SystemEventListener or may allow an individual subMIDlet to register as a SystemEventListener. Upon hearing an interrupt the subMIDlet manager may dictate behavior to the collection of subMIDlets in compliance with the interrupt. For example the subMIDlet manager may pause all running subMIDlets in response to an interrupt. The subMIDlet manager may also have the ability to launch non Java applications for example by using the MIDlet.platformRequest method.

A subMIDlet controller class may provide methods for communication among subMIDlets and between subMIDlets and the subMIDlet manager and may inherit from the subMIDlet manager class. For example a subMIDlet may request system resources from either the subMIDlet manager or other subMIDlets using subMIDlet controller methods.

A subMIDlet may be similar to a normal MIDlet. For instance a subMIDlet may encapsulate functionality such as allowing a user of a mobile phone to stream radio to navigate the Internet or to purchase and download music. Additionally a subMIDlet may be responsible for garbage collection for freeing any non essential memory resources and for responding to requests to release system resources. Unlike a MIDlet however a subMIDlet may only execute in cooperation with the subMIDlet manager and may not function outside of that context.

The full functionality of the subMIDlet subMIDlet manager and subMIDlet controller classes may be described in one or more application programming interfaces APIs . This API may be advantageous for the reason of allowing multiple developers to develop subMIDlets according to specification that would work together under a subMIDlet manager without those developers having to share MIDlet source code.

The developer may instantiate a subMIDlet manager in step . In step the developer may create a composite MIDlet by packaging the subMIDlet manager together with the subMIDlets. The resultant composite MIDlet may be from the perspective of a JVM a single application that contains the functionality of all of the original MIDlets though now able to be executed on a JVM that may only run exactly one MIDlet at any one time.

In step the developer may download the composite MIDlet to a mobile station such as exemplary mobile station capable of executing exactly one JVM which is in turn capable of executing exactly one MIDlet at any one time. In step the composite MIDlet may be launched on the mobile station. When running the composite MIDlet may enable a user of the mobile station to select multiple MIDlets to execute simultaneously. For example the composite MIDlet may generate a graphical or textual menu from which the user may select multiple subMIDlets to execute. The selected subMIDlets may then execute simultaneously on the mobile station. Each executing subMIDlet may provide at least one function of a corresponding MIDlet from which it was converted. The execution of multiple subMIDlets may be coordinated by the subMIDlet manager as described above.

Exemplary embodiments of the present invention have been described above. Those skilled in the art will understand however that changes and modifications may be made to the embodiments described without departing from the true scope and spirit of the present invention which is defined by the claims.

