---

title: Security architecture for peer-to-peer storage system
abstract: An exemplary method includes receiving a request to register a peer in a peer-to-peer system; generating or selecting a transaction key for the peer; storing the transaction key in association with registration information for the peer; transmitting the transaction key to the peer and, in response to a request to perform a desired peer-to-peer transaction by another peer, generating a token, based at least in part on the transaction key. Such a token allows for secure transactions in a peer-to-peer system including remote storage of data and retrieval of remotely stored data. Other exemplary techniques are also disclosed including exemplary modules for a peer-to-peer server and peers in a peer-to-peer system.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08196186&OS=08196186&RS=08196186
owner: Microsoft Corporation
number: 08196186
owner_city: Redmond
owner_country: US
publication_date: 20080520
---
A typical centralized peer to peer P2P storage system involves a central server and a large number of user machines peers . Such a system allows users to store retrieve data from the other peers. While the central server stores all location information of user data and is responsible for routing decisions most all of the data operations are handled by corresponding peers in a manner where the server does not store or receive any of the corresponded data. For example a peer may wish to store data remotely. In this example the peer can split a file into smaller data files contact the server for facilitating routing decisions and then route the smaller data files to multiple peers e.g. file to peer file to peer etc. .

While some P2P storage systems do not require any security features some P2P applications may require a security mechanism to ensure that peers follow imposed protocols. For example where an application provides for sharing copyrighted files a server may impose a protocol that restricts distribution remote storage and corruption of the files.

In a P2P system it is normally assumed that a majority of the peers is honest and not adversarial. Further it is unlikely that a large number of peers would mount a coordinated attack against the P2P system. However on the other hand malicious network requests are easy to mount.

In a malicious network attack an adversary normally has access to the communication protocol of the system or at least relevant parts of the protocol. In such a situation an adversary can make illegitimate network requests for example an adversary may send malicious requests on behalf of other peers or on behalf of the server.

In another situation an adversary may launch an attack that aims to change code on one or more peer machines. While a P2P system may obfuscate binaries deployed to peer machines it is feasible for someone not only to reverse engineer such aspects of a P2P system but also to implement his own variant of a peer. For example an adversary can change code on a peer machine by patching an original binary to disable or modify its functionality or by implementing its own peer.

Some examples of attacks are illegitimate use other peer or server machine resources access to other user s data e.g. whether for purposes of gaining information or corruption receiving GADs without providing storage DOS attacks on the server and self distributing worms.

As described herein various exemplary techniques provide for security measures in a P2P system that can confound adversarial attacks and promote confidence in peer to peer transactions.

An exemplary method includes receiving a request to register a peer in a peer to peer system generating or selecting a transaction key for the peer storing the transaction key in association with registration information for the peer transmitting the transaction key to the peer and in response to a request to perform a desired peer to peer transaction by another peer generating a token based at least in part on the transaction key. Such a token allows for secure transactions in a peer to peer system including remote storage of data and retrieval of remotely stored data. Other exemplary techniques are also disclosed including exemplary modules for a peer to peer server and peers in a peer to peer system.

As described herein an exemplary protocol provides for security measures in a P2P system that can confound adversarial attacks. Such a protocol may be implemented in a P2P system that provides for sharing information remote storage of information and remote backup of information. Further an exemplary architecture acts to minimize peer decisions that can affect performance of an entire P2P system e.g. such as content distribution policy . In various examples an adversary is unlikely to gain access to system resources such as credits reputation such as connection speed or availability or storage. An exemplary protocol provides for security mechanisms that raise a strong defense against such attacks.

An exemplary protocol guarantees that a peer can only do data operations which are authorized by a P2P server e.g. a server in a P2P system that handles routing and optionally other operations . Such a protocol supports 

 a storing data where a peer contacts the server to obtain location information for the data and where a peer contacts a peer specified by the server and transmits the data to the peer for storage and

 b retrieving data where a peer contacts the server to obtain location information for the data and where a peer contacts a peer specified by the server and obtains the data as stored by the peer.

 a Data security data can be retrieved only by authorized users i.e. authorized peers no other user can read or modify the data 

 b Storage security a peer can only participate in data exchange transactions which are authorized by the server and

 c Control security an active adversary cannot impersonate a peer or a server and force other peers to participate in unauthorized transactions.

An exemplary protocol can be implemented in a storage exchange P2P system. Such a storage exchange P2P system allows peers to back up their data on other peers machines for example at a cost of providing some disk space for other peers to backup their data. Such a system may implement a policy such as after sharing 1.5 GB of your hard drive space a peer is allowed to backup 1 GB of his personal files on one or more other peer machines. A storage exchange system can implement an exemplary protocol to secure all peer peer and peer server transactions.

In various examples a peer may be referred to as client or a user. In some examples the terms client and server are used to represent a peer and a server associated with a P2P system that acts to manage routing and optionally other operations. Hence some examples refer to client server client client and server client interactions. While various examples are set forth in the context of a P2P system the exemplary techniques may be applied in one or more other contexts that require or desire secure transactions e.g. data access data storage etc. .

The P2P system also includes a central server that acts to implement policies of the P2P system . In particular the server acts to maintain and enforce transaction policies for transactions between the peer devices and for transactions between a peer device and the server . The server has an associated data store for storing data . In the example of the data includes information about each of the peers in the P2P system P1 P2 . . . PN . To implement the policies the server includes one or more P2P service modules . The one or more modules are typically software modules that include instructions executable by a computing device to allow a server to interact with other entities in the P2P system .

With respect to the P2P policies these are described in more detail below with respect to mechanisms for securing peer to peer transactions e.g. client to client mechanisms for securing server to peer transactions e.g. server to client or vice versa an efficient protocol which uses symmetric cryptography security tokens techniques that use cryptographic hash functions to identify data techniques that use symmetric encryption and message authentication codes to protect data and techniques that generate user s keys from a master secret key using a cryptographic hash function.

With respect to server client authentication such an interaction can take place when either a client contacts the server for example to request a list of parties where to store file shares or a server makes a request to a client for example to check the online status of client s machine . All of these sessions must be authenticated to protect against numerous impersonation attacks.

An exemplary method performs server client authentication via joint secret keys. For example upon new user registration the server provides a client with a strong cryptographic secret key. In this example the server can store secret keys for all registered users see e.g. information stored by the server . The secret key of a user is then used to authenticate all further server client and client server communications. Hence in such a system a user must register prior to acquiring a secret key or having a secret key assigned for use in transactions with other peers.

In the example of the peer may login to the server using a protocol such as the Secure Sockets Layer SSL protocol or the Transport Layer Security TLS protocol. SSL uses the public and private key encryption system from RSA which also includes the use of a digital certificate. Again in an exemplary P2P system this is a login policy which is required prior to registration.

For registration in a selection or generation block the server selects or generates a strong cryptographic key for the peer. In general generation of this key does not rely on the peer s password i.e. it does not rely on a peer s login secret . Hence a P2P system policy maintains that the strong cryptographic key is not a function of a peer s password. In such a system keys may be generated in advance and selected randomly when peers register with the service provided by the server. Alternatively keys may be generated at the time of login or initiation of registration. A server may generate secret keys using a cryptographic random number generator or hash function. Alternatively a server may acquire secret keys from another source.

As an additional policy related to login and or registration to confound automated attacks on the server the server may implement a human interaction interface for login and or registration. For example such an interface may use graphics or sounds that are not amenable to automation. For example a user may need to respond to a Completely Automated Public Turing Test to tell Computers and Humans Apart CAPTCHA challenge prior to or during registration. Such challenge response systems can help to differentiate humans from automated programs e.g. bots .

Referring again to the method of after selection and or generation a storage block stores the secret key in association with peer registration information. For example the server of may store the secret key of a peer in a table in association with the peer s ID e.g. user name email etc. . In general such information needs to be accessible by the server to facilitate generation of tokens for peer to peer transactions.

The method includes a transmission block that transmits the secret key to the peer that requested registration see e.g. block . Once the peer has its secret key it can then verify a token generated by the server and received from another peer.

Prior to describing details of token generation and token format use of a token in described with respect to which shows a series of transactions along a timeline in a P2P system such as the system of . In a peer server transaction Peer A formulates a request and sends it to a central server event . In turn the central server receives the request and sends a secret key Secret Key A to Peer A event . This transaction terminates when Peer A receives Secret Key A event . In another peer server transaction Peer B formulates a request and sends it to a central server event . In turn the central server receives the request and sends a secret key Secret Key B to Peer B event . This transaction terminates when Peer B receives Secret Key B event . Accordingly each peer now possesses its own secret key and a central server possesses a copy of each of these secret keys. Further the central server stores each secret key in association with identifying information about its peer see e.g. the information of .

In yet another peer server transaction Peer A transmits a request to the central server event . This request includes information about a desired transaction. For example this request may specify get file name xyz from Peer B or simply get file name xyz . Where a request for a desired transaction identifies a peer then the central server generates a token that includes security information for the identified peer. Where a request for a desired transaction does not identify a peer but identifies for example a file name then the central server may select a peer that has access to a file with that name e.g. the peer has a data store that stores the file and then generate a token that includes security information for the selected peer e.g. a generic fungible music file . Per event the central server receives the request generates a token and sends the token to the peer that sent the request. Once Peer A receives the token event Peer A may initiate the desired peer peer transaction.

In the example of to initiate the desired peer peer transaction Peer A sends the token to Peer B event . Peer B receives the token verifies its authenticity using its secret key Secret Key B performs the desired action such as sending a file having a file name xyz to Peer A event . In turn Peer A receives the file from Peer B to thereby complete the desired peer peer transaction.

While the example of pertains to retrieving a file from a peer shows an exemplary method for storing data e.g. a file on another peer. In a reception block a peer receives a token and data from another peer that desires to have this data stored remotely. In a verification block the peer verifies the token using its secret key as obtained from a server in the P2P system see e.g. transactions of . In a decision block the peer decides whether the token was successfully verified e.g. that the requesting peer can be trusted as having obtained a valid token from the P2P server . If the decision block decides that the token could not be verified then the method continues to a do not store block . This block aborts the transaction and optionally sends a status indicator to the requesting peer and or the P2P server. However if the decision block decides that the token was successfully verified then the peer continues at a storage block that stores the data typically in association with at least some information about the requesting peer.

i Peer contacts a P2P server to authenticate itself and to indicate a desired transaction I am Peer and I want to put my data on Peer 

ii The P2P server issues a security token which is grant of permission to perform the desired transaction 

v After verification Peer accepts the file from Peer and stores it e.g. on an associated hard drive etc .

As described herein an exemplary method can include requesting as a peer a token to perform a desired peer to peer transaction in a peer to peer system receiving a token generated based at least in part on a transaction key for the peer and sending the token to another peer to initiate a peer to peer transaction. Similarly a corresponding peer may perform a method that includes receiving a token from a peer in a peer to peer system the token generated based at least in part on a transaction key for the peer and including transaction information for a type of desired peer to peer transaction verifying the token using a different transaction key and allowing the desired peer to peer transaction to occur.

In the exemplary token the transaction information may include any of a variety of information for example depending on the nature of a desired peer peer transaction. The transaction information may include one or more of the following file size file hash or other concise file identifying information expiration time or other time or event sensitive information regarding use of the token transaction identifier and transaction type s . With respect to transaction type s an exemplary token may be generated for performing a single transaction or multiple transactions. Examples of transaction types include but are not limited to put to store information at a peer get to get information stored at a peer stream to stream information stored at a peer and universal to perform any of a variety of transactions .

With respect to the signature a server generates the signature based at least in part on the one or more corresponding peers . In general a signature is based on a secret key of a single peer . However instances may arise where a group secret key exists for a group of peers . In such instances a single peer may for example use a single token to store a file on each of the computing devices e.g. storage devices of the peers in the group. Regardless of the arrangement importantly a peer involved in the transaction needs to be able to verify the token based its own secret key and the signature .

As described herein an exemplary peer peer authentication mechanism relies on a token for example a server generated token. According to such a mechanism prior to making a request to another peer a peer contacts the server to obtain a token for a desired transaction. For this mechanism to proceed the peer making the request of the server must provide a certain amount of information to allow the server to generate a token. At a minimum the peer must typically identify another peer that belongs to the P2P system as the token obtained from the server depends on the secret key of the other peer and represents server authorization for the desired transaction. Of course in another scenario a peer may simply identify a file e.g. a music file where a P2P system server matches a peer with the identified file and then generates a token with a signature based on a key associated with the matching peer that stores a copy of the identified file. In this latter example the peer that makes the request may not know a priori the corresponding peer for the transaction.

In this example the token carries particular information germane to a transaction. Specifically Peer represents the peer initiating a desired transaction Peer represents a different peer that is involved in the transaction the transaction type represents information about a type of transaction e.g. put get universal etc. the file size represents information about the size of a file involved in the transaction the file hash represents concise information about the identity of the file the expiration time represents a time for which the token may expire e.g. a time in which at least part of the transaction must occur the transaction ID represents information that identifies the particular transaction and the signature represents information that allows the transaction to occur in a secure manner e.g. according to some security mechanism . While a particular order of information is shown information may be in any of a variety of orders in an exemplary token format.

With respect to the signature an exemplary token can require a signature signed under Peer s secret key also referred to herein as a transaction key via a secure MAC scheme. In an exemplary P2P system a P2P server stores the secret keys of the various peers in the system. Hence the server can generate the signature using a secret key associated with a peer e.g. Peer identified in a request by another peer e.g. Peer . In the foregoing example after Peer obtains a token for some transaction Peer can then initiate a connection with Peer and send the token to Peer . In response Peer using its secret key verifies the validity and expiration time of the token and if verification succeeds allows the indicate transaction to occur. Depending on the nature of the transaction Peer may initiate some action. For example where the transaction is to get a file after verification of a token s signature Peer may access the file and transmit it to Peer . As an additional measure Peer may perform a hash operation on the file and check if the hash result matches the file hash of the token. If the hash result does not match then it is likely that the file while having the same name is not accurate. After a transaction has been completed or attempted Peer and or Peer may be required to report completion or other result to the server that issued the token.

As another security measure a P2P system may require every peer to keep a list of tokens for recently completed transactions in an effort to prevent token re use. For example when a new transaction request comes in a client should first check if the incoming token is in the list. If it is a transaction may be aborted. In an exemplary system a policy may require where a token includes an expiration time the a peer can keep the token in the list only until expiration of the token.

As described herein token information should be well formatted to prevent overflow. An exemplary token can have a format that is different from any peer server messages. Further tokens can be encrypted for example with AES encryption and then signed by HMAC message authentication code.

In an effort to optimize both bandwidth and performance of a P2P server batching may occur for tokens. For example when Peer has several files to put on Peer Peer can obtain one token for all files. An exemplary batch token can include concatenated token information strings of multiple tokens to Peer which are signed together under Peer s secret key.

As mentioned with respect to types of transactions a token may specify a universal transaction type that allows more than one type of transaction to occur. This specific type of token may be used during peak loads as it requires less information from a requesting peer and less information to be in a token. While such a mechanism acts to diminish security it offers an opportunity to maintain timely service.

While various aspects of login registration secret keys transactions and tokens have been discussed the exemplary policies of may extend to aspects of communications or messages. Further policies may be implemented at various levels. For example a policy that ensures server protections may also ensure peer protections.

With respect to communications or messages peer server messages can be formatted to confound or prevent message duplication attacks. Such attacks can affect a server and peers. Referring again to the transaction ID of the token of the transaction ID may be a timestamp a request count or other information that can help identify a token or make the token unique. In turn this makes the message request for the token unique and the message carrying the token to the peer unique.

While the foregoing example described the information as part of a token such information may be separate from the token. For example in the timeline of event performed by the central server may cause the server to generate a timestamp or to increment a message counter that is associated with the requested transaction. The server may store such information in association with information about the requesting peer the transaction etc. Further the server may append the information to the token or simply include it in a message to the peer that carries the token. Such identifying information can be used to prevent automated attacks on a server or on a peer.

A policy can require that messages include a timestamp or some type of message counter to prevent a message with some control action from being replayed . For example a peer can send to a P2P server a request to issue a security token to download some specified data e.g. from another peer . A policy may require that this request is encrypted and that this request can be authenticated by the P2P server. With respect to proper formatting of a so called control action message a question arises as to whether the control action message should be valid in the future. An exemplary policy can require that all control action messages include for example a timestamp or a counter. In general such information is generated and noted by a server for peer server all or certain types of peer server communications. A P2P server may count messages to provide a message ID which can be sequential with respect to messages received by the P2P server.

As described herein messages can be encrypted signed or encrypted and signed. For example a P2P system may use an Advanced Encryption Standard AES and a Message Authentication Code MAC or an authenticated encryption mode of AES. Such security measures may be implemented to conform to a policy or policies of a P2P system.

AES is a NIST standard cryptographic cipher that uses a block length of 128 bits and key lengths of 128 192 or 256 bits. In conventional scenarios a MAC is typically a number computed from the content of a text message and used to prove the integrity of that text message. For example the MAC can be a checksum that is computed using an algorithm based on the DES or AES ciphers which use a secret key. In operation a sender sends a MAC with its corresponding message. A recipient recomputes the MAC using the same algorithm and secret key and compares the recomputed MAC to the MAC that it received from the sender sent e.g. as sent with its corresponding message . If the recomputed MAC and received MAC are the same it is assumed that the message has not been tampered with. In such a scenario a MAC operates like a digital signature except that a secret key is used rather than a private key.

An exemplary P2P system may use Cipher Block Chaining MAC which is a message integrity method that uses block ciphers such as DES and AES. In a typically implementation of such a technique each block of plaintext is encrypted with a cipher and then XOR d with a second encrypted block. Then that result is XOR d with a third encrypted block and so on in series. Hence an exemplary system may use CBC mode of AES as a security measure.

With respect to a P2P system that allows peers to store data on one or more other peer machines a policy may be in place that requires peers to encrypt the data prior to remote storage. For example a peer may derive an encryption key from its master secret key. In such a manner a P2P server that maintains a copy of the master secret key of a peer can be configured to derive that peer s encryption key. If a peer crashes and or loses its keys and data the server can assist by allowing the peer to retrieve backup data and by allowing the peer to decrypt any encrypted backup data. Various examples discussed below refer to an encryption key as being a key for use in encryption where such a key may be dependent on or independent of a peer s secret key e.g. the key used for secure peer peer transactions .

As described herein an exemplary server may store a separate secret key or encryption key for each user. This encryption key differs from the secret key associated with registration and used for peer peer transactions. An encryption key may be provided to a server or a server may compute it for a peer for example as a hash of a peer s identity and a master secret. An exemplary system may require or automatically update a peer s encryption key on some periodic or frequency basis e.g. after x transactions . An encryption key may be either stored on a peer s machine or it may be stored on a P2P system server and retrieved by the peer upon secure login to the server. In such a system the key may exist for the lifetime of the login or it may exist for a longer period of time e.g. multiple logins . As described herein with respect to login an exemplary P2P system may implement a secure mechanism to accommodate automatic login for a peer when a peer s machine is restarted. For example a system library may store data inside the OS for use upon restart to automatically login to a P2P server.

With respect to peer peer authentication such authentication can take place using a transaction key when a peer stores retrieves files from another peer. Impersonation of client client authentication is one way to abuse a P2P system. For example a malicious user whether a member of the system or not can attempt to store his data on any peer without getting permission from the server e.g. without paying for such a service . As described herein an exemplary protocol helps to ensure that peers only serve requests which are authorized by a P2P server. Again such assurance relies on a transaction key for each peer that is accessible by the P2P server.

A P2P server includes a server side component that includes various modules that allow the server to maintain and implement policies for a P2P system. In the example of the modules include a peer information module e.g. for keys passwords identification information etc. a token module for generating tokens a registration module for registering peers in a P2P system and a set of application programming interfaces APIs for allowing peers to easily communicate with the server. For example the peer may make an API call to request a transaction and in response the server may issue a token for the requested transaction. APIs may also allow for login registration and other peer management and functionality. A data protection API can implement secure key storage on peer s machine. The registration module includes a module for registration login and another module for key generation and or selection. For example the module may generate or select one or more secret keys for use by peers in a P2P system.

As described herein an exemplary module for a peer in a peer to peer system can include computer executable instructions to call an application programming interface of a server in the peer to peer system where the call specifies a type of peer to peer transaction and returns a token for the transaction computer executable instructions to send a token to another peer to initiate a peer to peer transaction and computer executable instructions to verify a token received by another peer to thereby allow a peer to peer transaction to occur. A peer module may also include computer executable instructions to send information to a server in a peer to peer system in response to failure to verify a token received by another peer.

As described herein an exemplary module for a peer to peer server can include computer executable instructions to generate or select a transaction key for a peer in the peer to peer system computer executable instructions to store a transaction key for each peer in the peer to peer system computer executable instructions to transmit a transaction key for a peer in the peer to peer system to the peer and computer executable instructions to generate tokens for transactions between peers in the peer to peer system based on a receipt of a request by a peer wherein a token comprises a signature based on a transaction key of another peer. Such a module may include computer executable instructions to determine if a peer to peer transaction occurred successfully based at least in part on information received from the other peer.

As described with respect to the APIs a module may include computer executable instructions for an application programming interface to receive information from a peer in the peer to peer system and to return a token in response.

In a very basic configuration computing device typically includes at least one processing unit and system memory . Depending on the exact configuration and type of computing device system memory may be volatile such as RAM non volatile such as ROM flash memory etc. or some combination of the two. System memory typically includes an operating system one or more program modules and may include program data . The operating system include a component based framework that supports components including properties and events objects inheritance polymorphism reflection and provides an object oriented component based application programming interface API such as that of the .NET Framework manufactured by Microsoft Corporation Redmond Wash. The device is of a very basic configuration demarcated by a dashed line . Again a terminal may have fewer components but will interact with a computing device that may have such a basic configuration.

Computing device may have additional features or functionality. For example computing device may also include additional data storage devices removable and or non removable such as for example magnetic disks optical disks or tape. Such additional storage is illustrated in by removable storage and non removable storage . Computer storage media may include volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. System memory removable storage and non removable storage are all examples of computer storage media. Computer storage media includes but is not limited to RAM ROM EEPROM flash memory or other memory technology CD ROM digital versatile disks DVD or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can be accessed by computing device . Any such computer storage media may be part of device . Computing device may also have input device s such as keyboard mouse pen voice input device touch input device etc. Output device s such as a display speakers printer etc. may also be included. These devices are well known in the art and need not be discussed at length here.

Computing device may also contain communication connections that allow the device to communicate with other computing devices such as over a network e.g. consider the aforementioned network of . Communication connections are one example of communication media. Communication media may typically be embodied by computer readable instructions data structures program modules etc.

Although the subject matter has been described in language specific to structural features and or methodological acts it is to be understood that the subject matter defined in the appended claims is not necessarily limited to the specific features or acts described above. Rather the specific features and acts described above are disclosed as example forms of implementing the claims.

