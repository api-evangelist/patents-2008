---

title: Arranging display areas utilizing enhanced window states
abstract: Computer-readable media, computerized methods, and user interfaces (UIs) for manipulating display areas on a GUI workspace by transitioning the display areas from an original state to one of a set of enhanced window states are provided. Initially, an indication to resize a display area is received at an operating system, which consequently invokes an appropriate window state. The indication may include capturing an edge of the display area and vertically dragging the edge to a dock-target region, thereby invoking a vertically-maximized state. Accordingly, configuration settings of the vertically-maximized state are applied such that the display area is stretched to approximately the screen height. In another instance, the indication may include capturing the display area and dragging a display area into a dock-target region, thereby invoking a semi-maximized state. Configuration settings of the semi-maximized state are applied, thus, extending the display area to approximately cover a predefined GUI workspace region.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08356258&OS=08356258&RS=08356258
owner: Microsoft Corporation
number: 08356258
owner_city: Redmond
owner_country: US
publication_date: 20080201
---
Presently operating systems provide a variety of utilities that assist in opening display areas e.g. windows within a GUI workspace being presented at a display device e.g. computer monitor screen on a mobile device and the like . Often the GUI workspace becomes cluttered leaving insufficient space to show each window in its entirety. This clutter may be reduced by arranging the windows utilizing an input device e.g. mouse or keyboard . Typically arranging includes adjusting the attributes of a window with respect to the GUI workspace such as resizing and repositioning a window thereby allowing users to efficiently perceive content or other information within each window while working on a particular task. However multiple clicks and precise movements of the input device are required to achieve rearrangement of the windows. Accordingly arranging windows is not fluid or flexible and the amount of input device actions reduce computing efficiency. Further a typical user will rearrange display areas within the GUI workspace frequently thus exaggerating the encumbrance of arranging display areas according to present techniques.

Occasionally actuation devices are provided to assist in circumventing the present techniques for arranging display areas. The actuation devices are typically visible on the GUI workspace and trigger window states upon activation. Window states are limited to a select group of common display area sizes e.g. minimized maximized and restored . Transitioning a display area to another size requires utilizing the present burdensome techniques for arranging display areas. As such the occasion for accessing the common display area sizes is reserved for only a handful of instances. Also the visible actuation devices add clutter to a GUI display thereby distracting a user from the content within the display areas.

This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter nor is it intended to be used as an aid in determining the scope of the claimed subject matter.

Embodiments of the present invention provide computerized methods user interfaces UIs and computer readable media having computer executable instructions embodied thereon residing in an operating system for managing and manipulating display areas on a GUI workspace presented on one or more display devices. In particular intuitive techniques for arranging display areas by transitioning an original state of the display area to one of a set of enhanced window states are provided.

Initially an indication to resize a display area is received at an operating system. Typically the display area is present at a graphical user interface GUI workspace that is rendered on a display device which is operably coupled to the operating system. The indication to resize may involve various user initiated actions. Each of these actions invokes a triggered state of a set of window states where the triggered state is associated with particular configuration settings. The set of window states are adapted to the resize of the display area with limited user initiated actions and thus the display area is arranged resourcefully within the available space.

In addition the appropriate configuration settings are applied to the display area accordingly the display is transitioned from an original state to the triggered state. In one instance the indication to resize includes capturing an edge of the display area and vertically dragging the edge to a dock target region located at an edge of the GUI workspace. In this instance a vertically maximized state is the triggered state selected from the set of window states. As such configuration settings of the vertically maximized state are applied to the display area thereby stretching the display area to approximately the screen height. In another instance the indication to resize includes capturing the display area and dragging a cursor tool into a dock target region located at a right or left edge of the GUI workspace. In this instance a semi maximized state is the triggered state selected from the set of window states. As such configuration settings of the semi maximized state are applied to the display area thereby rendering the display area on approximately half the GUI workspace. Accordingly the embodiments of the present invention relate to in part an approach for adding behaviors to a GUI workspace such that navigation between window states is fast e.g. less distance for a mouse to move fewer clicks and intuitive. In addition a feature of the present invention is to increase the types of display areas providing increased opportunities to access predefined window states.

The subject matter is described with specificity herein to meet statutory requirements. However the description itself is not intended to limit the scope of this patent. Rather the inventors have contemplated that the claimed subject matter might also be embodied in other ways to include different steps or combinations of steps similar to the ones described in this document in conjunction with other present or future technologies. Moreover although the terms step and or block may be used herein to connote different elements of methods employed the terms should not be interpreted as implying any particular order among or between various steps herein disclosed unless and except when the order of individual steps is explicitly described.

Embodiments of the present invention provide computerized methods UIs and computer readable media having computer executable instructions embodied thereon residing in an operating system for managing and manipulating display areas on a GUI workspace presented on one or more display devices.

Accordingly in one aspect the embodiments of the present invention provide one or more computer readable media having computer executable instructions embodied thereon that when executed perform a method for arranging a display area on a GUI workspace characterized by a screen height and a screen width. Initially the method includes receiving one or more indications to resize the display area being presented on the GUI workspace. In one instance the indications may select a vertically maximized state for resizing the display area. If the indications select a vertically maximized state configuration settings related thereto are applied to the display area. Generally the configuration settings of the vertically maximized state include a vertical dimension and a horizontal dimension. In embodiments the vertical dimension corresponds to approximately the screen height and the horizontal dimension is less than the screen width. Accordingly the display area is automatically transitioned to the vertically maximized state such that a window height of the display area is rendered on the GUI workspace according to the vertical dimension of the vertically maximized state.

In another aspect a computerized method for transitioning a display area between a semi maximized state and a restored state is provided. In embodiments one or more dock target regions on a GUI workspace are utilized. The GUI workspace includes a screen height measured between horizontal edges of the GUI workspace and a screen width measured between vertical edges of the GUI workspace. Initially the method includes tracking movements of a cursor tool within the GUI workspace where the GUI workspace is configured to present a display area in an original state. An indication of capturing the display area with the cursor tool is received. Incident to receiving the indication of capturing dock target regions are constructed adjacent to at least one of the horizontal edges or the vertical edges of the GUI workspace. In an exemplary embodiment a type of input device providing the indication of capturing is identified such that a screen area within each of the dock target regions is established according to the identified type of input device. In addition each of the dock target regions are associated with one of a set of window states. A determination of whether the cursor tool entered within the dock target regions is made utilizing the tracked movements of the cursor tool while the display area is captured. Incident to determining that the cursor tool entered within the dock target regions the display area is automatically transitioned from the original state to a triggered state. Generally the triggered state corresponds to one of the set of window states that is associated with the entered dock target regions.

In yet another aspect embodiments of the present invention relate to computer readable media that has computer executable instructions embodied thereon for presenting on a display device a user interface configured to produce features for arranging a display area on a GUI workspace. Typically these features are actuated by dragging the display area utilizing a cursor tool. Generally the user interface includes the GUI workspace an upper dock target region a lower dock target region a right dock target region and a left dock target region. The GUI workspace includes horizontal edges and vertical edges where screen parameters are derived from the GUI workspace. In one instance screen parameters include a screen height measured between the horizontal edges and a screen width measured between the vertical edges. The vertical edges may include a left edge and a right edge and the horizontal edges may include a top edge and a bottom edge. The upper dock target region is defined by the top edge and a first trigger line in substantial parallel spaced relation to the top edge. The lower dock target region is defined by the bottom edge and a second trigger line in substantial parallel spaced relation to the bottom edge. The right dock target region is defined by the right edge and third trigger line in substantial parallel spaced relation to the right edge. And the left dock target region is defined by the left edge and fourth trigger line in substantial parallel spaced relation to the left edge. In an exemplary embodiment screen areas within the upper dock target region and the lower dock target region are mapped to configuration settings of a maximized state and screen areas within the right dock target region and the left dock target region are mapped to configuration settings of a semi maximized state.

Generally embodiments of the present invention relate to transitioning a display area between an original state and a triggered state. As discussed above the triggered state corresponds to one of the set of window states that is associated with the entered dock target regions. In one embodiment the indication to resize invokes a triggered state that is a vertically maximized state selected from the set of window states. As used herein the phrase vertically maximized state is not meant to be limiting and may encompass any state that stretches the display area to approximately the screen height. In one instance the vertically maximized state is invoked upon detecting a user initiated selection of a top or bottom edge of the display area with a cursor tool e.g. capturing an edge of the display area and a movement of the cursor tool into an upper or lower dock target region while the edge remains captured. Upon recognizing the vertically maximized state is invoked configuration settings defining the vertically maximized state are applied to the display area. In embodiments application of the configuration settings direct an edge opposed to the selected edge to be extended in a snap style adjustment to a dock target region orthogonally opposed to the dock target region that was entered by the cursor tool. Accordingly in the vertically maximized state the display area assumes a window height of substantially a screen height while the window width remains constant.

In another instance the indication to invoke the vertically maximized state is a selection at an actuation device e.g. top and bottom resize bars proximate to the edges of the display area with the cursor tool. In an exemplary embodiment the actuation device is hidden e.g. insignificant on the GUI workspace . Accordingly this approach avoids adding new buttons or icons to the display area that cause clutter and complexity on the GUI workspace. In yet another instance the indication invoking the vertically maximized state is a keystroke sequence or shortcut key s actuated at a key pad. Although three different configurations of an indication to resize the display area to a vertically maximized state have been described it should be understood and appreciated that other indications to resize could be used and that the invention is not limited to those indications shown and described.

In another embodiment the indication to resize invokes a triggered state that is a semi maximized state selected from the set of window states. As used herein the phrase semi maximized state is not meant to be limiting and may encompass any state that resizes and positions the display area to extend across a predetermined portion of the GUI workspace. In an exemplary embodiment configuration settings that define the semi maximized state include a vertical dimension that corresponds to the screen height of the GUI workspace and a horizontal dimension that corresponds to a ratio of the screen width. Typically the ratio is the screen width thereby presenting the display area in the semi maximized state on either the right or left half of the screen. However other ratios may be used which may be dependent on the size of the GUI workspace the number of display devices acting in cooperation to present the GUI interface user preferences and any other criteria that would impact the configuration of the GUI workspace.

In one instance the vertically maximized state is invoked upon detecting a user initiated selecting the display area with a cursor tool e.g. capturing a header bar of the display area and a movement of the cursor tool into a right or left dock target region while the edge remains captured. Upon recognizing the semi maximized state is invoked configuration settings defining the semi maximized state are applied to the display area as discussed above. Accordingly in the semi maximized state the display area fills a predetermined portion of the GUI workspace thereby facilitating rapidly arranging windows to a convenient orientation on the GUI workspace e.g. viewing two documents displayed in individual display areas side by side .

In another instance the indication to invoke the vertically maximized state is a selection at an actuation device e.g. right or left resize bars proximate to the edges of the display area with the cursor tool. As discussed above the actuation device may be displayed such that it is unnoticeable to a user. In yet another instance the indication invoking the semi maximized state is a keystroke sequence. Although three different configurations of an indication to resize the display area to a semi maximized state have been described it should be understood and appreciated that other indications to resize could be used and that the invention is not limited to those indications shown and described.

Although two different optimal window states have been described above it should be understood and appreciated by those of ordinary skill in the art that window states that enhance user efficiency could be invoked upon triggering a dock target region e.g. a maximized state and that embodiments of the present invention are not limited to those window states shown and described.

In exemplary embodiments dock target regions are made available to invoke a triggered state of the display area upon a cursor tool or tip of the cursor tool entering therein. Alternatively upon a cursor tool exiting a dock target region a restored state of the display area may be invoked where the restored state corresponds to the original state of the display area prior to transitioning to the triggered state. As used herein dock target regions are not meant to be limiting and may encompass any area on the GUI workspace established to effect a transition between window states. In an exemplary embodiment as discussed above each dock target region is associated with a particular window state that is triggered upon a cursor entering therein. Structurally dock target regions may enclose any screen area e.g. geometrically shaped section within the GUI workspace. In addition the enclosed screen area may be pinned to an edge of the GUI workspace centrally located or established in any other location.

Generally the enclosed screen area of a dock target region is defined by an edge of the GUI workspace and a trigger line. Typically the trigger line is an invisible user interface feature that functions as a threshold which detects whether a cursor tool has passed thereover. The trigger line may be a straight line e.g. in substantially parallel spaced relation to the edge or follow any other path as configured by the operating system. In an exemplary embodiment the orientation of the trigger line is affected by a type of input device that provides an indication to resize the display area. For instance a depth of the enclosed screen area between an edge and a trigger line e.g. measured in pixels is adjusted according to a type of input device. By way of example only if the input device is a mouse the depth of the enclosed screen area would decrease as the mouse exerts precise location control over the cursor tool. That is the tip of the cursor tool can be positioned within a thin dock target region along an edge of the GUI workspace thus affording the user a larger central work area. However if the input device is a touch screen panel the location of the trigger line is placed outward from the edge e.g. increasing the depth of the enclosed area as the methods for providing an input to a touchscreen are imprecise especially at an edge of the GUI workspace. Accordingly the technique of adjusting of the trigger line promotes a robust window state manipulation tool that can adapt to various identified types of input devices.

Having briefly described an overview of embodiments of the present invention and some of the window states featured therein an exemplary operating environment suitable for implementing the present invention is described below.

Referring to the drawings in general and initially to in particular an exemplary operating environment for implementing embodiments of the present invention is shown and designated generally as computing device . Computing device is but one example of a suitable computing environment and is not intended to suggest any limitation as to the scope of use or functionality of the invention. Neither should the computing device be interpreted as having any dependency or requirement relating to any one or combination of components illustrated.

The invention may be described in the general context of computer code or machine useable instructions including computer executable instructions such as program components being executed by a computer or other machine such as a personal data assistant or other handheld device. Generally program components including routines programs objects components data structures and the like refer to code that performs particular tasks or implement particular abstract data types. Embodiments of the present invention may be practiced in a variety of system configurations including hand held devices consumer electronics general purpose computers specialty computing devices etc. Embodiments of the invention may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network.

With continued reference to computing device includes a bus that directly or indirectly couples the following devices memory one or more processors one or more presentation components input output I O ports I O components and an illustrative power supply . Bus represents what may be one or more busses such as an address bus data bus or combination thereof . Although the various blocks of are shown with lines for the sake of clarity in reality delineating various components is not so clear and metaphorically the lines would more accurately be grey and fuzzy. For example one may consider a presentation component such as a display device to be an I O component. Also processors have memory. The inventors hereof recognize that such is the nature of the art and reiterate that the diagram of is merely illustrative of an exemplary computing device that can be used in connection with one or more embodiments of the present invention. Distinction is not made between such categories as workstation server laptop hand held device etc. as all are contemplated within the scope of and reference to computer or computing device. 

Computing device typically includes a variety of computer readable media. By way of example and not limitation computer readable media may comprise Random Access Memory RAM Read Only Memory ROM Electronically Erasable Programmable Read Only Memory EEPROM flash memory or other memory technologies CDROM digital versatile disks DVD or other optical or holographic media magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices carrier wave or any other medium that can be used to encode desired information and be accessed by computing device .

Memory includes computer storage media in the form of volatile and or nonvolatile memory. The memory may be removable non removable or a combination thereof. Exemplary hardware devices include solid state memory hard drives optical disc drives etc. Computing device includes one or more processors that read data from various entities such as memory or I O components . Presentation component s present data indications to a user or other device. Exemplary presentation components include a display device speaker printing component vibrating component etc. I O ports allow computing device to be logically coupled to other devices including I O components some of which may be built in. Illustrative components include a microphone joystick game pad satellite dish scanner printer wireless device etc.

Turning now to a schematic diagram of an exemplary system architecture suitable for use in implementing embodiments of the present invention is shown in accordance with an embodiment of the present invention It will be understood and appreciated by those of ordinary skill in the art that the exemplary system architecture shown in is merely an example of one suitable computing environment and is not intended to suggest any limitation as to the scope of use or functionality of the present invention. Neither should the exemplary system architecture be interpreted as having any dependency or requirement related to any single component or combination of components illustrated therein. Further logic within the operating system supporting the exemplary system architecture may be provided as a stand alone product as part of a software package or any combination thereof.

Exemplary system architecture includes a computing device for generating a destination list from usage data captured at a registry and for rending destinations within a sub menu area upon detecting a request from a user. The computing device may take the form of various types of computing devices. By way of example only the computing device may be a personal computing device e.g. computing device of handheld device e.g. personal digital assistant consumer electronic device various servers and the like. Additionally the computing device may comprise two or more electronic devices configured to share information therebetween.

In embodiments the computing device includes a display device input devices and and hardware with an operating system installed thereon. The computing device is configured to present a UI display on the display device . The display device which is operably coupled to the computing device may be configured as any presentation component that is be capable of presenting information to a user such as a monitor electronic display panel touch screen and the like. In one exemplary embodiment the UI display is configured to present a display area in various window states not shown and or to produce one or more dock target regions initiated by the operating system where the display area publishes content generated by application . In another exemplary embodiment the UI display is capable of producing a variety of configurations of dock target regions based in part on the type of input device e.g. the input devices and that is communicating with the operating system .

The input devices and are provided to provide input s affecting among other things manipulation of the display area between predefined window states. Illustrative devices include a key pad as indicated by reference numeral a mouse as indicated by reference number a joystick a microphone the I O components of or any other component capable of receiving a user input and communicating an indication of that input to the computing device . By way of example only the input devices and control the location of where a cursor tool is positioned i.e. hovers on the UI display and or the selection of buttons appearing on the UI display .

The operating system OS refers generally to the software that manages the sharing of the resources of the computing device and provides programmers with an interface used to access those resources. In operation the operating system interprets system data and detects user inputs e.g. via the input devices and and responds by executing such processes as the following prioritizing system requests e.g. user initiated request to view the destination list allocating internal system resources facilitating networking between the resources and or devices managing tasks e.g. selecting an appropriate window state associated with a triggered dock target area and file systems controlling output devices e.g. rendering the display area in the appropriate state at the display device and operating as a platform for programs residing thereon such as target application .

In an exemplary embodiment the operating system includes an input receiving component a GUI workspace component a state determining component and a rendering component . In addition the operating system may include a database . In another embodiment the database may reside on a remotely located computing device e.g. on another operating system on a server located via a web address etc. . The database may be configured to store information that stores a set of window states. In various embodiments such information may include without limitation an original state a vertically maximized state a semi maximized state a restored state a maximized state discussed below a minimized state and any other window states that known in the relevant field. Further though illustrated as a single independent component the database may in fact be a plurality of databases for instance a server cluster.

This operating system structure of the operating system component is but one example of a suitable structure that may be run on the computing device and is not intended to suggest any limitation as to the scope of use or functionality of the invention. Neither should the illustrated operating system be interpreted as having any dependency or requirement relating to any one or combination of the components and as illustrated. In some embodiments one or more of the components and may be implemented as stand alone applications. In other embodiments one or more of the components and may be integrated directly into the display device of the computing device the application or a combination thereof. By way of example only the rendering component may be housed in association with the display device . It will be understood by those of ordinary skill in the art that the components and illustrated in are exemplary in nature and in number and should not be construed as limiting.

Any number of components may be employed to achieve the desired functionality within the scope of embodiments of the present invention. Although the various components of are shown with lines for the sake of clarity in reality delineating various components elements is not so clear and metaphorically the lines would more accurately be grey or fuzzy. Further although some components and devices of are depicted as single blocks the depictions are exemplary in nature and in number and are not to be construed as limiting e.g. although only one display device is shown many more may be operably coupled to the computing device thereby functioning in conjunction to present the UI display .

In embodiments the input receiving component is configured to receive and process indications to resize from the input devices and and or tracked movements from the input device . It should be understood and appreciated that other inputs from various other input devices e.g. touch screen panel may be received and interpreted by the input receiving device accordingly the scope of the present invention is limited to the inputs and input devices described herein. The indication to resize includes any outputs within a scope of outputs produced by the input devices and . In one embodiment the outputs include indications of user initiated actuation events associated with manipulating the size and or position of the display area. In one instance as discussed more fully below the indication to resize is a double click selection on a resize bar of the display area. In another instance the indication to resize is a keystroke sequence such as an actuation of a combination of keys in conjunction e.g. hotkeys . In yet another instance the indication to resize is a maintained selection of a toolbar or header of a display area such as a prolonged click and hold command.

In addition the input receiving component may be configured to track movements of a cursor. In embodiments tracked movements may be received from any input device e.g. the input device contact with a touch screen panel of a tablet and the like . The tracked movements may be processed in cooperation thus acting as complimentary commands that invoke a triggered state. By way of example the indication to resize may include capturing the display area while the tracked movements may include a traversal of the cursor into an established dock target region. Accordingly a triggered state associated with the entered dock target region is identified.

In an exemplary embodiment upon receiving the indication to resize the receiving component determines the type of input device that is providing inputs thereto. As discussed above the dock target regions are dynamically constructed based on the determined type of input device. The process of constructing may be executed in series in parallel or asynchronously with receiving the indication to resize . As such it should be understood and appreciated that constructing one or more dock target regions on a GUI workspace is accomplished according to rules within the receiving component that may be influenced by the identity of the input device communicated therewith.

The GUI workspace component is configured to identify the screen height and the screen width of the GUI workspace e.g. the UI display presented at the display device . These screen parameters of the GUI workspace may be communicated to the GUI workspace component from the display device or internally from the operating system that is rendering the UI display . In another embodiment discussed more fully below with reference to the GUI workspace component is configured to determine the number of display devices that are operably coupled to the operating system and the properties thereof. Accordingly the GUI workspace component may establish a navigation ordering scheme that links the display devices together in a logical arrangement such that a display area may be traversed therebetween on a single UI display .

In yet another embodiment the GUI workspace component is configured to interrogate the properties to the display area to determine the window height and width thereof. These parameters along with the screen width the screen height and any other discernable attributes of the display area and or GUI workspace relevant to generating configuration settings may be retrieved by the GUI workspace component processed and handed to the state determining component .

Generally the state determining component facilitates automatically transitioning the display from the original state to a triggered state or from the triggered state to the restored state. In one embodiment the restored state is substantially similar in size to the original state. In operation the state determining component acknowledges that the input receiving component has detected an indication to resize identifying a trigger state from the set of window states e.g. stored at the database in a searchable manner or generated by code embedded within the state determining component . In one instance identifying is carried out by following a map between a triggered dock target area and an associated window state. Upon selecting an appropriate window state or triggered state the state determining component accepts parameters describing the display area and the GUI workspace from the GUI workspace component . These parameters are incorporated with or appended to the identity of the triggered state and provided to the rendering component .

In embodiments the rendering component is configured to provide configuration settings to the display device such that the display area may be manipulated e.g. positioned and sized according to the selected window state. These configuration setting may be derived or extracted from the selected window state by any method known in the relevant art. Further the configuration settings may be stored in a lookup table e.g. utilizing the database that is accessible to the rendering component where the configuration settings are mapped to one or more dock target regions. Accordingly the rendering component may provide for presenting the display area as a particular window state or for transitioning the display area between window states.

In an exemplary embodiment configuration settings are utilized to reformat the display area. Generally the configuration settings comprise rules that guide the GUI workspace to present the display area consistent with the selected window state defined by the configuration settings . The configuration settings may encompass a wide scope of criteria or properties based on any window state. In one instance the configuration settings may be derived from the vertically maximized state and include a vertical and horizontal dimension. By way of example only the vertical dimension corresponds approximately to the screen height as retrieved by the GUI workspace component and the horizontal dimension corresponds to the window width of the display area or an arbitrary width. In another instance the configuration settings are derived from a semi maximized state and include a vertical dimension and a horizontal dimension. By way of example only the vertical dimension corresponds to the screen height and the horizontal dimension corresponds to a ratio of the screen width as more fully discussed above.

Accordingly the configuration settings guide the dynamic transitions of the display area. That is the configuration settings dictate the dimensions of the display area and the coordinates of the location of the display area within the GUI workspace. Although one embodiment is discussed above the configuration settings may include any set of heuristics e.g. rules or logic that affects characteristics and or display attributes of the display area. In addition the configuration settings facilitate managing content published within the display area or indicate to the application the parameters to which content may be presented.

Generally the application is any program that may be launched and manipulated by the operating system . As discussed above the application manages content published within the display area. Thus as the size of the display area is manipulated upon receiving the indication to resize the content may be adjusted to reflect these changes. In one instance the rendering component includes an application programming interface API that exposes the configuration settings to the application . Accordingly the application may be developed to customize software configurations based on the configurations settings . That is the application can react to a transition and adjust the content it submits for presentation at the UI display e.g. GUI workspace based on the size of the display area. In one embodiment this process of adjusting content is executed internal to the application thus transparent to the operating system .

In addition the application may influence the configuration settings generated by the rending component . For instance if the application is designed to expose content on a specific set of display area sizes this set of sizes is transferred to the rendering component for consideration prior to releasing the configuration settings to the GUI display. By way of example only the set of display area sizes may require that the size of the transitioned display area fall within a maximum and a minimum size limit. Accordingly the configuration settings are compared against the maximum size limit if the larger window state is triggered e.g. a vertically maximized state or a semi maximized state while the configuration settings are compared against the minimum size limit if a reduced window state is triggered e.g. a restored state . If the set of display area sizes are comparable to or encompass the window state related to the configuration settings the configuration settings remain unaltered. However if the configuration settings invoke a display area that extends beyond the set of display area sizes the configuration settings are reformed to coincide with the set of display area sizes of the application .

Turning now to a flow diagram is shown that illustrates an overall method for transitioning a display area between a semi maximized state and a restored state utilizing dock target regions in accordance with an embodiment of the present invention. Initially movements of the cursor tool are tracked within a GUI workspace e.g. via the tracked movements provided to the input receiving component of as indicated at block . An indication of capturing a display area with the cursor tool e.g. the indication to resize of is provided from an input device as indicated at block . In embodiments the type of input device is determined. This information along with screen parameters as discussed above may be used to construct dock target regions as indicated at block . Generally constructing the dock target regions includes constructing an upper and a lower dock target region at the top and bottom edges of the GUI workspace respectively as indicated at block . In operation upon determining that a cursor tool has entered either the upper or lower dock target regions a state selection process is executed e.g. by the state determining component of to select a maximized state as the triggered state and apply the configuration settings thereof to the display area. In addition constructing the dock target regions includes constructing a left and a right dock target region at the left and right edges of the GUI workspace respectively as indicated at block . In operation upon determining that a cursor tool has entered either the left or right dock target regions a state selection process is executed to select a semi maximized state as the triggered state and apply the configuration settings thereof to the display area.

The user initiated movement of the cursor tool is tracked and based upon the tracked movement a determination of whether the cursor tool entered one or more of the dock target regions is performed as indicated at block . If the cursor tool did not enter a docket target region the size of the display area is maintained consistent with its original state as indicated at block . If the cursor tool did enter a docket target region the display area is automatically transitioned from an original state to a triggered state as indicated at block . Upon automatically transitioning the display area a determination of whether the cursor tool exited one of the dock target regions while the display area remains captured is performed as indicated at block . If the cursor tool did exit a docket target region the display area is automatically transitioned from the triggered state to a restored state which is typically substantially similar to the size of the original state as indicated at block . If the cursor tool did not exit a docket target region the size of the display area is maintained consistent with its triggered state as indicated at block .

Automatically transitioning the display as indicated at block may include several logical steps. Initially configuration settings mapped to an entered docket target area are determined as indicated at block . These determined configuration settings may be applied to the display area thus transitioning the display area from an original state to a triggered state as defined by the configuration settings as indicated at block . Accordingly the display area may be stored in association with attributes of the triggered state as indicated at block .

With reference to a flow diagram is shown illustrating an overall method for arranging a display area on a graphical user interface GUI workspace in accordance with an embodiment of the present invention. Initially as indicated at block one or more indications to resize a display area are received. In particular receiving an indication to resize may include receiving an indication that a cursor tool captured an edge of the display area such as a click and hold operation see block and detecting a movement of the cursor tool into a dock target region see block . In other embodiments receiving one or more indications to resize includes detecting a selection by a cursor such as a double click at a hidden actuation device proximate to an edge of the display area e.g. a resize bar recognizing a specific keystroke sequence or receiving indications of any other behavior known to invoke a change in a window state.

Incident to receiving one or more indications to resize a determination of which window state within a set of predefined window states to select is made as indicate at block . In particular a query of whether the indications select a vertically maximized state is executed as indicated at block . If the vertically maximized state is not selected configuration settings of the actual selected state are applied to the display area as indicated at block . Alternatively if the vertically maximized state is selected configuration settings of the vertically maximized state are applied to the display area as indicated at block . Generally applying the configuration settings includes at least the following logical steps determining a window width of the display area see block determining a screen height of the GUI workspace see block and conforming a vertical and a horizontal dimension of the configurations settings to the screen height and the window width respectively see block . Accordingly the display area is transitioned to the vertically maximized state from an original state as indicated at block . As indicated at block the display area may be rendered at a GUI workspace on a display device in the vertically maximized state consistent with the configuration settings that define the vertically maximized state.

Referring now to progressive screen displays illustrating stages for transitioning exemplary display areas between an original state a triggered state and a restored state are shown in accordance with embodiments of the present invention. In particular a procedure for transitioning a display area from an original state to a maximized state is depicted at in accordance with embodiments of the present invention. Initially the display area is captured typically by selecting a header with a cursor tool at the capture stage. The display area is then translated across a GUI workspace such that the cursor tool while the display area is captured enters a top or bottom dock target region . This is indicated at the drag stage. In the transition stage the display area is transitioned from the original state to a maximized state. That is the display area is extended to fill substantially the entire area of the GUI workspace . Upon releasing the cursor tool the display area is held in the maximized state as indicated at the release stage.

Turning now to a procedure for transitioning a display area from an original state to a semi maximized state is depicted in accordance with embodiments of the present invention. Initially the display area resides in its original state. A header or any other section on the display area configured for a click and drag operation is selected by a cursor tool . Accordingly the display area is captured at the capture stage. In the drag stage the display area is translated to a left or right side of the GUI workspace . Upon the cursor tool entering a left or right dock target region the display area is transitioned from the original state to a semi maximized state. This is indicated at the transition phase. In the release state the display area is released from capture. Accordingly in the semi maximized stage the display area now covers a right or left side of the GUI workspace.

Turning now to a procedure for transitioning a display area from an original state to a vertically maximized state is depicted in accordance with embodiments of the present invention. Initially the display area resides in its original state. A top edge or bottom edge of the display area is selected by a cursor tool in the capture stage. In one instance an icon indicating the cursor tool is visibly altered to indicate that the top edge is captured. In the drag stage the display area is stretched either upward or downward to a dock target region. In this instance the top edge is vertically traversed to an upper dock target region . Upon the cursor tool entering the upper dock target region the opposed edge to the selected top edge is extended in a snap style adjustment as shown by arrow in the transition phase. Accordingly in the vertically maximized state the display area assumes a window height of substantially a screen height of the GUI workspace while the window width remains constant.

A procedure as shown in is provided for transitioning a display area from the vertically maximized state to a restored state in accordance with embodiments of the present invention. Initially the display area resides in the vertically maximized state in the capture stage. A top edge or bottom edge of the display area may be selected by a cursor tool . In the drag stage the display area is vertically compressed either upward or downward out of a dock target region. In this instance the top edge is vertically traversed out of an upper dock target region . Upon the cursor tool exiting the upper dock target region an opposed edge to the selected top edge is drawn upward in a snap style adjustment as shown by arrow in the transition phase. Accordingly in the restored state the display area assumes a window height of width of display area of in the original state.

In an exemplary embodiment a cancelability feature is incorporated in the window state transitional behavior of the present invention. Generally cancelability refers to the technique of dragging a cursor tool into a dock target region while the display area is captured and without releasing dragging the cursor tool therefrom. Accordingly when the cursor tool enters the dock target region the display window temporarily is presented as the appropriate triggered state e.g. in a phantom window or any other preview model or actual display . If the cursor tool does not release the display area when the cursor tool exits the dock target region the display area reverts back to the restored state. Turning to the transition stage of and the transition stage of one application of the cancelability feature is depicted. In particular the window is transitioned from the original state to a vertically extended state upon the cursor tool entering the upper dock target region . If without releasing the top edge the cursor tool exits the upper dock target region the display area now display area resumes the original window state without addition selections or commands.

A procedure as shown in is provided for transitioning a display area from the vertically maximized state to a restored state in accordance with embodiments of the present invention. Initially the display area resides in the vertically maximized state in the capture stage. A header may be selected by a cursor tool . In the drag stage the display area is traversed either upward or downward such that the cursor tool leaves a dock target region. In this instance the header is vertically traversed downward out of an upper dock target region . Upon the cursor tool exiting the upper dock target region an opposed edge to the selected header is drawn upward in a snap style adjustment as shown by arrow in the transition phase. Accordingly in the restored state the display area assumes a window height of width of display area of in the original state.

Turning now to a procedure for transitioning a display area from maximized state on a display device to a maximized state on a display device is depicted in accordance with embodiments of the present invention. Initially screens of the display devices and act is cooperation to present a GUI workspace . In an exemplary embodiment as more fully discussed above a navigation ordering scheme that links the display devices and together in a logical arrangement such that the display area may be traversed therebetween on the GUI workspace . In addition the navigation ordering scheme indicates common edges and that would divide the GUI workspace . Typically dock target regions are not established on the common edges and such that the display area may traverse between display devices and without unintentional window state changes.

The display area resides in its maximized state in the capture stage. A header may be selected by a cursor tool thereby capturing the display area . In the first drag stage the display area is translated either upward or downward from a dock target region. In this instance the header is vertically traversed from an upper dock target region which extends across the display devices and . Upon the cursor tool exiting the upper dock target region the display area assumes a restored state. Accordingly as indicated in the second drag stage the display area may be traversed across the display devices and yet within the same GUI workspace with the common edges and affecting the window state of the display area . In the transition stage the cursor tool may enter the upper dock target region of the display device while the header remains captured. Consequently the display area is transitioned to a maximized state that substantially fills a screen area of the display device .

Turning now to a diagrammatic view illustrating an exemplary GUI display provided with dock target regions and that facilitate triggering a transition of window states of a display area is shown in accordance with an embodiment of the present invention. Initially an upper dock target region is depicted as being defined by a top edge and a first trigger line in substantial parallel spaced relation to the top edge . A lower dock target region is depicted as being defined by a bottom edge and a second trigger line in substantial parallel spaced relation to the bottom edge . In an exemplary embodiment the screen area within the upper dock target region and the lower dock target region is mapped to configuration settings of a maximized state.

A right dock target region is depicted as being defined by a right edge and third trigger line in substantial parallel spaced relation to the right edge . A left dock target region is depicted as being defined by a left edge and fourth trigger line in substantial parallel spaced relation to the left edge . In an exemplary embodiment the screen area within the right dock target region and the left dock target region is mapped to configuration settings of a semi maximized state

The display area presented on the GUI workspace in an original state. In the original state attributes of the display area include a window width and a window height . In addition the display area includes a header or a toolbar area. The header may include buttons and a hidden actuation device not shown for invoking a transition to a vertically maximized state or a semi maximized state. The hidden actuation device may also be located on other edges of the display area . As such a new visible button in the buttons is not necessary for receiving actuation events from a user.

The GUI workspace includes screen parameters that are typically measured by the GUI workspace component of . In one instance the screen parameters include a screen height which is measured between the horizontal edges and and a screen width which is measured between the vertical edges and .

The present invention has been described in relation to particular embodiments which are intended in all respects to be illustrative rather than restrictive. Alternative embodiments will become apparent to those of ordinary skill in the art to which the present invention pertains without departing from its scope.

From the foregoing it will be seen that this invention is one well adapted to attain all the ends and objects set forth above together with other advantages which are obvious and inherent to the system and method. It will be understood that certain features and sub combinations are of utility and may be employed without reference to other features and sub combinations. This is contemplated by and is within the scope of the claims.

