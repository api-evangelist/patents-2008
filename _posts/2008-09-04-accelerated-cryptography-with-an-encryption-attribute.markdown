---

title: Accelerated cryptography with an encryption attribute
abstract: Methods and systems for encrypting and decrypting are presented. In one embodiment, the method comprises encrypting one or more segments of a data with a key. The data is associated with at least one encryption attribute and having a plurality of segments. The encryption attribute includes information to identify one or more segments of the data to encrypt. The method further comprises encrypting the encryption attribute and storing the data including the partly encrypted data and the encrypted encryption attribute.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08880879&OS=08880879&RS=08880879
owner: Intel Corporation
number: 08880879
owner_city: Santa Clara
owner_country: US
publication_date: 20080904
---
Embodiments of the invention relate to the field of content security in particular for encrypting and decrypting a data.

Symmetric cryptography is a cryptography method in which both the encryption and decryption operations share the same key or less commonly in which their keys are different but related in an easily computable way . Examples of symmetric cryptography algorithms include Data Encryption Standard DES and Advanced Encryption Standard AES .

On the other hand public key encryption algorithms use asymmetric keys for encryption and decryption. The asymmetric keys comprise a private key which is held only by its owner and a public key which is available to other entities . The two keys are separate but complementary in function. Information that is encrypted with the public key can be decrypted only with the corresponding private key. The two keys together are called a key pair or a key set. RSA algorithm is an example of public key encryption algorithms.

Encrypting File System EFS is a file system with encryption services. The technology transparently allows files to be encrypted and decrypted on a file system to protect confidential data from attackers with physical access to the computer. An EFS uses public key cryptography to ensure that decrypting a file without a correct key is in theory impossible or requires an unreasonable length of time to crack.

An EFS works by encrypting a file with a symmetric key also known as File Encryption Key FEK . The FEK is then encrypted with a public key that is usually associated with a user and is available to third parties. To decrypt the encrypted file the EFS uses a private key accessed only by the user to decrypt the encrypted FEK. The EFS then decrypts the file which is encrypted with the FEK. In general these encryption and decryption operations are performed at a layer below an operating system so that it is transparent to users and to applications running thereon.

Embodiments of methods and systems for encrypting and decrypting with encryption attributes are presented. An encryption attribute contains information to identify one or more segments of a file to be encrypted. An encryption process encrypts those one or more segments to generate a partly encrypted file instead of encrypting the entire file. That is the file includes some data that are encrypted and some data that are not. In one embodiment the encryption attribute is encrypted and stored together with the partly encrypted file.

In one embodiment the decryption operation identifies those segments that are encrypted in the partly encrypted file with the information contained in the encryption attribute. In one embodiment an authorized user for example the owner of the file sets the encryption attribute associated with a file to identify segments of the file that should be encrypted during an encryption operation.

In the following description numerous specific details are set forth to provide a more thorough explanation of embodiments of the present invention. However it is understood that embodiments may be practiced without these specific details. In other instances well known elements specifications and protocols have not been discussed in detail in order to avoid obscuring the embodiments of the present invention.

Some portions of the detailed descriptions which follow are presented in terms of algorithms and symbolic representations of operations on data bits within a computer memory. These algorithmic descriptions and representations are the means used by those skilled in the data processing arts to most effectively convey the substance of their work to others skilled in the art. An algorithm is here and generally conceived to be a self consistent sequence of steps leading to a desired result. The steps are those requiring physical manipulations of physical quantities. Usually though not necessarily these quantities take the form of electrical or magnetic signals capable of being stored transferred combined compared and otherwise manipulated. It has proven convenient at times principally for reasons of common usage to refer to these signals as bits values elements symbols characters terms numbers or the like.

It should be borne in mind however that all of these and similar terms are to be associated with the appropriate physical quantities and are merely convenient labels applied to these quantities. Unless specifically stated otherwise as apparent from the following discussion it is appreciated that throughout the description discussions utilizing terms such as processing or computing or calculating or determining or displaying or the like refer to the action and processes of a computer system or similar electronic computing device that manipulates and transforms data represented as physical electronic quantities within the computer system s registers and memories into other data similarly represented as physical quantities within the computer system memories or registers or other such information storage transmission or display devices.

Embodiments of present invention also relate to apparatuses for performing the operations herein. Some apparatuses may be specially constructed for the required purposes or it may comprise a general purpose computer selectively activated or reconfigured by a computer program stored in the computer. Such a computer program may be stored in a computer readable storage medium such as but not limited to any type of disk including floppy disks optical disks CD ROMs DVD ROMs and magnetic optical disks read only memories ROMs random access memories RAMs EPROMs EEPROMs NVRAMs magnetic or optical cards or any type of media suitable for storing electronic instructions and each coupled to a computer system bus.

The algorithms and displays presented herein are not inherently related to any particular computer or other apparatus. Various general purpose systems may be used with programs in accordance with the teachings herein or it may prove convenient to construct more specialized apparatus to perform the required method steps. The required structure for a variety of these systems will appear from the description below. In addition embodiments of the present invention are not described with reference to any particular programming language. It will be appreciated that a variety of programming languages may be used to implement the teachings of the invention as described herein.

A machine readable medium includes any mechanism for storing or transmitting information in a form readable by a machine e.g. a computer . For example a machine readable medium includes read only memory ROM random access memory RAM magnetic disk storage media optical storage media flash memory devices electrical optical acoustical or other form of propagated signals e.g. carrier waves infrared signals digital signals etc. etc.

In one embodiment data is a plaintext such as for example a media file a text file a data record of a database or any form of digital information content. To encrypt data encryption engine receives FEK as an encryption key and encryption attribute . Encryption attribute contains information to identify one or more segments of data to be encrypted. The result of encryption engine is partly encrypted data . In one embodiment FEK and encryption attribute are encrypted using encryption engine with public key which is associated with a user. The outputs from encryption engine are encrypted FEK and encrypted encryption attribute respectively. In one embodiment partly encrypted data encrypted FEK and encrypted encryption attribute are stored together in encrypted data . In one embodiment the overall time for performing the encryption operation is reduced because not all segments of the data are encrypted. The increase of performance depends on how many segments of the data are identified for encryption based on the information in encryption attribute . In one embodiment encrypted data is stored on an EFS or a file system or is transmitted to be stored used in another computer system.

In one embodiment data is divided into segments where each segment is M bit in length such that the length is equal to one of the block sizes of encryption engine . In one embodiment block ciphers in encryption engine process a 128 bit segment in each round of an operation. It will be appreciated by one skilled in the art that any block size suitable for implementing encryption can be used to determine the length of a segment for segmenting data for the encryption purpose.

In one embodiment encryption attribute is set to a default setting based on a category or a file type of data . The default setting can be modified by users administrators or both. In one embodiment encryption attribute contains information such as for example a list of numbers corresponds to the list of segments to encrypt a rule or a set of rules to describe which segment s to encrypt an identifier corresponds to such rule s a pointer to a location storing such rule s or such list of numbers or any combinations thereof. It will be appreciated by one skilled in the art that information can present in encryption attribute in different ways to identify which segments of data are to encrypt. In one embodiment encryption attribute includes additional information such as information about authorized users and designated recovery agents.

In one embodiment data is an instance of certain types of files. Encrypting the header or the first N segments of the file is sufficient to protect the file from unauthorized usages. For example the header includes information crucial to interpret the file format such as for example parameters associated with a video encoding algorithm parameters associated with an image encoding algorithm data fields of a data structure or other security measures in place to protect the file.

In one embodiment encrypting certain segments of data renders the data useless unless the encrypted segments are recovered. For example a patient s medical history record is useless if the patient name and his her identifier number are encrypted and hence protected from unauthorized access. The medical history record is not useful if one can not associate it with a particular patient.

In one embodiment data such as a file is encrypted by encrypting several segments in every N segments of the file. For example a video file encrypted with this pattern has some of the video frames protected from viewing. The viewer of the encrypted file is not able to enjoy the entire length of the video without interruption. The encrypted file is deemed to be not usable because of the discontinuity. In comparison encrypting some segments of the video file saves a lot of computational time than encrypting the entire video file. The performance of the encrypting file system increases as the burden of encrypting and decrypting the entire media files is reduced.

In one embodiment data is a file. Encryption engine encrypts a plurality of segments of the file for example the header of the file segments of important parts of the file alternate N segments of the file or any combinations thereof to protect the file from unauthorized access.

In one embodiment encryption attribute is attached to partly encrypted data without being encrypted. In one embodiment encryption attribute is encrypted with FEK instead of with public key .

In one embodiment encrypted encryption attribute is appended to partly encrypted data . In one embodiment encrypted encryption attribute prepends partly encrypted data . In one embodiment encrypted encryption attribute is stored at a location associated to the partly encrypted data according to the structure of a file system.

In one embodiment encryption engine are able to perform symmetric cryptography operations asymmetric cryptography operations or a combination thereof based on various cryptography algorithms for example AES DES RSA etc. . The cryptography operations are implemented in block ciphers stream ciphers or any other cipher architectures known in the art.

In one embodiment encrypted FEK and encrypted encryption attribute are extracted from encrypted data . Decryption engine decrypts encrypted encryption attribute with private key to retrieve encryption attribute . Decryption engine decrypts encrypted FEK with private key to retrieve FEK .

In one embodiment decryption engine decrypts partly encrypted data with FEK by referring to encryption attribute to identify which segments of partly encrypted data are encrypted. The output of decryption engine is data which may be a text file a media file or a data record of a database or any form of digital information content. In one embodiment encryption attribute is attached to data when stored on computer storages.

In one embodiment the overall time for performing the decryption operation is reduced because decryption engine does not need to decrypt all segments of partly encrypted data . The increase of performance depends on how many segments of partly encrypted data that are identified for decryption based on the information in encryption attribute . In one embodiment encrypted data is stored on an EFS or a file system or is received from another computer system.

In one embodiment partly encrypted data is segmented into segments where each segment is M bit in length such that the length equal to one of the block sizes of decryption engines . In one embodiment block ciphers in decryption engine process a 128 bit segment block in each round of an operation. It will be appreciated by one skilled in the art that any block size suitable for implementing decryption can be used to determine the length of a segment when segmenting partly encrypted data for the encryption decryption purpose.

In one embodiment encryption attribute is the same encryption attribute of . It will be appreciated by one skilled in the art that information in encryption attribute can be represented in different ways to identify which segments of partly encrypted data to decrypt. Different types of data can be protected by encrypting segments of different parts of the data as explained above with reference to . In one embodiment decryption engine decrypts a plurality of segments for example the header of the file segments of important parts of the file alternate N segments of the file or any combinations thereof which are encrypted to protect from unauthorized access.

In one embodiment encryption attribute is attached to partly encrypted data without being encrypted. In one embodiment encryption attribute is decrypted with FEK instead of with private key .

In one embodiment encrypted encryption attribute is appended to partly encrypted data . In one embodiment encrypted encryption attribute prepends partly encrypted data . In one embodiment encrypted encryption attribute is stored at a location associated to partly encrypted data according to the structure of a file system.

In one embodiment decryption engines are able to perform symmetric cryptography operations asymmetric cryptography operations or combinations thereof based on various cryptography algorithms for example AES DES RSA etc. . The cryptography operations are implemented in block ciphers stream ciphers or any other cipher architectures known in the art.

In one embodiment processing logic identifies one or more segments of the file to encrypt based on the information contained in the encryption attribute processing block . Processing logic determines whether a segment of the file is to be encrypted processing block . If a segment is identified for encryption an encryption engine encrypts the segment processing block with a FEK a symmetric key . Otherwise the encryption engine does not encrypt the segment processing block . Processing logic repeats the operation for all the segments of the file processing block .

In one embodiment processing logic encrypts the FEK and the encryption attribute with a public key processing block . In another embodiment processing logic encrypts the encryption attribute with the FEK and encrypts the FEK with a public key. In one embodiment processing logic encrypts only the FEK. In one embodiment processing logic uses the same encryption engine to encrypt the FEK and the encryption attribute. In one embodiment different encryption engines are used to encrypt the FEK and the encryption attribute.

In one embodiment processing logic stores the partly encrypted file the encrypted encryption attribute and the encrypted FEK in a file processing block . In one embodiment processing logic transmits the file for use in another computer system. In one embodiment processing logic stores the partly encrypted file the encrypted encryption attribute and the encrypted FEK according to the structure of a file system.

In one embodiment the encrypted file contains a partly encrypted file an encrypted encryption attribute associated with the partly encrypted file and an encrypted FEK. In one embodiment processing logic decrypts the encrypted encryption attribute to retrieve an encryption attribute and decrypts the encrypted FEK to retrieve a FEK processing block . Processing logic segments the partly encrypted file into a plurality of segments processing block where the length of each segment is suitable for processing by an M bit decryption engine.

In one embodiment processing logic identifies one or more segments of the partly encrypted file to decrypt based on the information contained in the encryption attribute processing block . Processing logic determines whether a segment of the file has to be decrypted processing block . If a segment is identified for decryption a decryption engine decrypts the segment with the FEK processing block . Otherwise the decryption engine does not decrypt the segment processing block . Processing logic repeats the operation for all the segments of the partly encrypted file processing block . Processing logic stores the decrypted file in a file on computer storages processing block .

In one embodiment processing logic decrypts the encrypted FEK and the encrypted encryption attribute with a private key processing block . In one embodiment processing logic decrypts the encrypted FEK with a private key and then decrypts the encrypted encryption attribute with the FEK. In one embodiment processing logic decrypts only the FEK and the encryption attribute is not encrypted. In one embodiment processing logic uses the same decryption engine to decrypt the encrypted FEK and the encrypted encryption attribute. In one embodiment different decryption engines are used to decrypt the encrypted FEK and the encrypted encryption attribute.

In one embodiment processing logic receives the partly encrypted file the encrypted encryption attribute and the encrypted FEK in a file. In one embodiment processing logic receives the encrypted file from another computer system. In one embodiment the partly encrypted file the encrypted encryption attribute and the encrypted FEK are stored associatively according to the structure of a file system.

In one embodiment the file system stores files under root directory or other sub directories e.g. directories . A sub directory can further include other sub directories such as sub directory . In one embodiment files under a same directory e.g. root directory directory can be encrypted in different ways. Different segments of file file and file are encrypted based on the encryption attributes associated with each of the file. For example every alternate segment starting from the second segment of file is encrypted. Two segments of every three segments of file are encrypted. In one embodiment the files files are under different categories of file types and are assigned with different encryption attributes. In one embodiment the files files are under the same category of file types and the encryption attributes are modified by users.

In one embodiment files in a same directory directory are encrypted with the same encryption attributes. In one embodiment files are encrypted with the same encryption attributes because the files are under the same category of file types or belong to the same user. In one embodiment files in directory are encrypted with different encryption attributes set by users based on the desired levels of security.

In one embodiment a file does not have a default encryption attribute. For example each encryption attribute of files is created by users separately. In one embodiment segments of an important part of file such as for example a credit card number a patient s name etc. are encrypted. In one embodiment segments from the header of file are encrypted so that file can not be decoded read properly based on the encoding information in the header.

In one embodiment controller receives a file to encrypt. Encryption attribute logic accesses the encryption attribute of the file. In one embodiment encryption attribute logic assigns an encryption attribute to a file based on the file type. In one embodiment an encryption attribute is stored in association with the file. Encryption attribute logic determines which segments of a file to encrypt based on the information in the encryption attribute.

In one embodiment file segmenting logic segments the file into a plurality of segments. Each segment is M bit in length corresponds to one of the block sizes of encryption engine using FEK . Encryption engine using FEK encrypts the segments identified by encryption attribute logic in conjunction with file segmenting logic . In one embodiment encryption engine using FEK is an M bit encryption engine implementing symmetric cryptography algorithms. In one embodiment encryption engine using public keys encrypts the encryption attribute and the FEK with a public key. In one embodiment encryption engine using public keys performs asymmetric cryptography algorithms.

In one embodiment controller stores the partly encrypted data the encrypted encryption attribute and the encrypted FEK to a file on storage drive . In one embodiment controller stores the partly encrypted data the encrypted encryption attribute the encrypted FEK or the combinations thereof to different locations of a file system that are associated to each others by the file system.

In one embodiment controller receives a file to decrypt. The file includes a partly encrypted file an encrypted encryption attribute associated with the file and an encrypted FEK. In one embodiment decryption engine using private keys decrypts the encrypted encryption attribute and the encrypted FEK with a private key to generate an encryption attribute and an FEK respectively. In one embodiment decryption engine using private keys performs asymmetric cryptography algorithms.

In one embodiment encryption attribute logic determines which segments of the partly encrypted file to decrypt based on the information in encryption attribute. In one embodiment file segmenting logic segments the partly encrypted file into a plurality of segments. Each segment is M bit in length corresponds to one of the block sizes of decryption engine using FEK . Decryption engine using FEK decrypts the segments identified by encryption attribute logic in conjunction with file segmenting logic . In one embodiment decryption engine using FEK is an M bit decryption engine implementing symmetric cryptography algorithms.

In one embodiment controller stores the decrypted file the encryption attribute and the FEK to a file on storage drive . In one embodiment controller stores the decrypted file the encryption attribute the FEK or the combinations thereof to different locations of a file system that are associated to each others by the file system.

In one embodiment FEK key generator generates a series of keys based on the initial FEK for different rounds in encryption engine using FEK and decryption engine using FEK .

Although described herein as processing logic each logic unit each encryption engine and each decryption engine can be implemented independently separately or externally in different combinations. Embodiments of the invention may be implemented in a variety of electronic devices and logic circuits. Furthermore devices or circuits that include embodiments of the invention may be included within a variety of computer systems. Embodiments of the invention may also be included in other computer system topologies and architectures.

The processor may have any number of processing cores. Other embodiments of the invention however may be implemented within other devices within the system or distributed throughout the system in hardware software or some combination thereof.

In one embodiment main memory loads operating system to provide a file system via application programming interfaces APIs . The file system connects through a device driver to communicate with solid state disk HDD or both. In one embodiment main memory loads an application program that interfaces with operating system and the file system through APIs. The file system connects through a device driver to communicate with solid state disk or HDD to manage the files thereon. In one embodiment the file system contains methods for 1 storing referencing sharing and securing files 2 accessing file data and 3 maintaining file integrity. Notwithstanding there is not always a clear distinction between a file system and its associated operating system particularly with those file systems contained within an operating system.

The main memory may be implemented in various memory sources such as dynamic random access memory DRAM a hard disk drive HDD a solid state disk based on NVRAM technology or a memory source located remotely from the computer system via network interface or via wireless interface containing various storage devices and technologies. The cache memory may be located either within the processor or in close proximity to the processor such as on the processor s local bus . Furthermore the cache memory may contain relatively fast memory cells such as a six transistor 6T cell or other memory cell of approximately equal or faster access speed.

Other embodiments of the invention however may exist in other circuits logic units or devices within the system of . Furthermore in other embodiments of the invention may be distributed throughout several circuits logic units or devices illustrated in .

Whereas many alterations and modifications of the present invention will no doubt become apparent to a person of ordinary skill in the art after having read the foregoing description it is to be understood that any particular embodiment shown and described by way of illustration is in no way intended to be considered limiting. Therefore references to details of various embodiments are not intended to limit the scope of the claims which in themselves recite only those features regarded as essential to the invention.

