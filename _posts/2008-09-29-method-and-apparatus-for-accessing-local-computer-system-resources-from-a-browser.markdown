---

title: Method and apparatus for accessing local computer system resources from a browser
abstract: A method and apparatus for accessing local system resources from a browser is described. The method for providing access to local computer system resources through a browser includes processing network traffic associated with a browser to identify at least one command parameters and communicating the at least one command parameter for execution using local computer system resources.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08127033&OS=08127033&RS=08127033
owner: Symantec Corporation
number: 08127033
owner_city: Mountain View
owner_country: US
publication_date: 20080929
---
Embodiments of the present invention generally relate to techniques for accessing local computer system resources. More specifically embodiments of the present invention relate to a method and apparatus to access local computer system resources from an isolated application e.g. a browser which has limited or no access to the local computer system resources under normal circumstances.

Computer systems are often subject to unauthorized access attempts by malicious software and users. Such malicious entities gain access to sensitive system resources and data. These resources may include sensitive system files input output devices system configuration data user information file operations or any other resource to which a malicious entity should not have access. In order to protect these resources it is common practice to prevent certain application types from accessing such protected resources.

One of the most common avenues of attack is through a web browser. By exposing the local computer to the internet a user takes a risk that any web server they communicate with may attempt to gain access to private system resources. Because of the inherent vulnerability of software that interfaces with remote computers it is common practice to screen browser applications from interacting directly with these resources. Various frameworks such as browser add on modules plug in s and application programming interfaces API s are provided in the event the browser needs to access such resources without compromising system security. Generally the application developer must know the specific framework required for each type of browser and resource.

While browser plug ins to support a web based application provide one possible technique for accessing the protected resources they are not an optimal solution because they must be individually tailored to each browser. Operating systems also may provide API frameworks for accessing these resources but as with plug ins the application must be tailored to a specific operating system. Additionally a developer must ensure the plug in and API implementation are updated so that the release of a new version of the browser or operating system does not disrupt access to the web application.

As web applications e.g. designed to be run within a browser become more and more popular the software developer must spend an increasing amount of time ensuring application compatibility. This results in substantial additional development and maintenance time if the developer wishes to reach the largest possible user base.

Therefore there exists a need in the art for a method and apparatus that enables a user to access protected system resources that is not dependent upon a particular browser configuration or API framework installation.

Embodiments of the present invention comprise a method and apparatus for accessing local system resources from a browser. In one embodiment the method for providing access to local computer system resources through a browser includes processing network traffic associated with a browser to identify at least one command parameters and communicating the at least one command parameter for execution using local computer system resources.

In one embodiment computer system resources may be protected and thus subject to access control such as disk access file operations i.e. copying creation modification and deletion of files input output device access application execution system configuration file access and the like. In one embodiment hypertext transfer protocol HTTP traffic includes various commands for accessing the local computer system resources which may be selected via uniform resource locator URL links on a web page presented by a browser. It is appreciated that the present invention is not limited to embodiments that utilize HTTP and URL links. Hence the various commands may be embedded into and sent via any network data as explained further below.

The server is a computing device such as those generally known in the art. The server includes a central processing unit CPU support circuits and memory . The CPU may comprise one or more commercially available microprocessors or microcontrollers that facilitate data processing and storage. The various support circuits are utilized to facilitate the operation of the CPU and include such circuits as clock circuits power supplies cache input output circuits and the like. The memory may comprise random access memory read only memory removable storage optical disk storage disk drive storage and combinations thereof. The memory stores a server operating system an identification generator a web user interface generator and a web server application . In operation the CPU executes the operating system to control the general utilization and functionality of the server .

The CPU also executes the web server application in response to web page requests e.g. HTTP requests received by the server . The web server application may include software code designed to respond to network requests such as APACHE Web Server GOOGLE Web Server and or the like. When a page request is received the web server application executes the web user interface generator . When the web page request corresponds to a page that includes embedded commands for accessing the local computer system resources the web user interface generator creates one or more URL links encoded with the embedded commands. Then the web server application communicates the embedded commands via the one or more URL links. The web user interface generator uses the identification generator to create a unique identifier e.g. Globally Unique Identifier GUID for each command that the client network proxy may use to authenticate the each command before execution by the client application agent . The web server application embeds such an identifier into the one or more URL links along with the each command. The web server application incorporates these links into the created web page and responds to the web page request.

The network comprises a communication system that connects a computer system by wire cable fiber optic and or wireless link facilitated by various types of well known network elements such as hubs switches routers and the like. The network may employ various well known protocols to communicate information amongst the network resources. For example the network may be part of the internet or an intranet and may use various communications infrastructures such as Ethernet WiFi WiMax General Packet Radio Service GPRS and the like.

The client computer is a computing device such as those generally known in the art. As with the web server the client computer comprises a CPU support circuits and memory . The CPU may comprise one or more commercially available microprocessors or microcontrollers that facilitate data processing and storage. The various support circuits facilitate the operation of the CPU and include clock circuits power supplies cache input output circuits and the like. The memory may comprise read only memory random access memory disk drive storage optical storage removable storage and the like. The memory stores software that includes a client operating system a web browser a client network proxy and a client application agent . In operation the CPU executes the operating system to control the general utilization and functionality of the client computer .

In operation the CPU executes the web browser to communicate one or more web page requests to the web server . The web browser is an isolated application that operates within a restricted environment where access to local computer system resources is achieved via commands embedded within one or more URL links on one or more web pages. In operation when a URL link is selected and an embedded command is communicated by the web browser to the web server the client network proxy intercepts and parses the embedded command in order to extract one or more parameters that form the embedded command. The one or more command parameters define one or more operations to be performed using the local computer system resources. For example the one or more command parameters may include a parameter that defines the embedded command e.g. backupnow deleteallfiles and or the like and a parameter that defines target data e.g. music files . While the present embodiment comprises a client network proxy implemented in software it would be obvious to one skilled in the art that the client network proxy may also be implemented via an application specific integrated circuit ASIC or field programmable gate array FPGA .

According to one or more embodiments of the present invention all inbound and or outbound network traffic e.g. HTTP traffic passes through the client network proxy . If the inbound and or the outbound network traffic includes one or more embedded commands then the client network proxy parses the one or more embedded commands. The client network proxy identifies one or more command parameters that define one or more operations to be performed using the local computer system resources. The client network proxy redirects the one or more command parameters associated with the one or more embedded commands to the client application agent .

In one embodiment the client network proxy compares the incoming network traffic to various filtering criteria. For example the filtering criteria may include but is not limited to particular protocols domain names unique identifiers e.g. GUIDs port numbers data patterns and or the like. When the client network proxy determines that there is a match between a portion of the incoming network traffic and the filtering criteria the portion of the incoming network traffic is examined for the one or more embedded commands as well as the one or more command parameters. In one embodiment the one or more command parameters for the one or more embedded commands are stored as character strings in a URL link within a HTML document. In operation the client network proxy intercepts and parses the HTML document to locate the one or more command parameters for the one or more embedded commands. Then the client network proxy stores a unique identifier and a domain name associated with that URL. This client network proxy may use the unique identifier to authenticate an embedded command within the incoming network traffic before execution.

In one embodiment the client network proxy compares the outgoing network traffic to various filtering criteria. If outgoing network traffic meets the filtering criteria then any commands encoded within the transmitted data are parsed and sent to the client application agent to be executed. If a command is sent to the client application agent by the client network proxy it may modify the network traffic communication originally sent. Unlike the web browser the client application agent does not exist in a Sandbox environment and can directly access system resources that the web browser is unable to access. If the original communication is not a valid command or is a valid command that has been modified by the client network proxy the communication is then sent out via the network .

As shown at step if the traffic meets the specified command parameters such as being a HTTP request made on port the client network proxy makes a determination of whether the traffic is incoming from the network or outgoing to the network. At step the traffic is parsed to determine if it contains embedded command parameters. If embedded command parameters are present the traffic is sent to the client application agent . If the traffic does not meet specified command parameters it is forwarded to the network for processing at step .

At step a decision is made to determine if the traffic contains valid command parameters. Valid command parameters are specified by character strings in the URL corresponding to specific actions that the client application agent is capable of performing. Examples of possible actions are backing up files accessing user data deleting files parsing logs and the like. If the URL does not contain a valid command parameter it is forwarded to the network for normal processing at step .

At step the client network proxy determines whether the network traffic is incoming from the network or outgoing to the network . If the traffic is incoming the method proceeds to step to store the command. If the traffic is outgoing the method proceeds to step to execute the command.

If the traffic is outgoing the link is parsed to determine if it contains a valid domain name at step . If the domain name present in the link matches a pre defined list of domains authorized to execute that command then the unique identifier is tested to verify the source of the command. This testing is performed to verify that the URL was received from an authorized site in order to prevent malicious websites from tricking the user into executing unwanted commands. For example if the site www.hacker.com was not authorized to send a delete all files command the command URL http www.hacker.com online backup action command deleteallfiles would fail. If the command URL was determined to be from an invalid URL the request would be terminated at step .

At step if the link was to a valid URL the client network proxy determines whether the page the link is executed from is from the same location that originally sent the link. Every time the web browser retrieves a web page the client network proxy parses it. When the client network proxy filters a command URL embedded in a web page from an authorized domain name the client network proxy tracks the unique identifier associated with that command. When an embedded command parameter containing that command is sent the client network proxy verifies at step that the GUID associated with the command is identical with the GUID originally received with the command. This verification prevents the user from receiving a valid command from an authorized website but then executing a link hosted on a malicious website. The malicious link might point to the correct domain name and the command might be authorized because it was properly loaded from an authorized page but without the authentication GUID the command is not executed.

At step the URL contains a valid GUID then the command encoded in the link is executed. Because the client application agent is authorized to access protected system resources the client application agent can perform operations that are not normally possible to execute from a browser environment. During this step the client network proxy sends the command parameters to the client application agent . After the command is executed the client application agent informs the client network proxy of the result. The client network proxy then modifies the outgoing URL request to point to a web page indicating the outcome of the executed command at step .

Finally at step the URL request is forwarded to the network to process the outgoing web page request. If the traffic is outgoing and contains embedded commands the client network proxy determines whether or not the commands are received from a valid domain at step . If the traffic does not contain embedded commands it is forwarded to its destination at step . If the domain name from which the command was received is a valid domain the command is stored for later execution at step . If the domain name is invalid the command is not stored.

At step the command and unique identifier present in the network traffic are stored in memory so that they can be executed. Only commands stored in this manner are eligible for execution in order to prevent unauthorized web pages from accessing protected system resources. At step the network traffic has been parsed and the client network proxy passes it to the network .

While the foregoing is directed to embodiments of the present invention other and further embodiments of the invention may be devised without departing from the basic scope thereof and the scope thereof is determined by the claims that follow.

