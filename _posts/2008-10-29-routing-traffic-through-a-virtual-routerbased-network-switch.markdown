---

title: Routing traffic through a virtual router-based network switch
abstract: Methods and systems are provided for routing traffic through a virtual router-based network switch. According to one embodiment, a flow data structure is established that identifies current packet flows associated with multiple virtual routers in the virtual router-based network device. When an incoming packet is received by the virtual router-based network device, it is then determined whether the incoming packet is associated with a current packet flow by accessing the flow data structure based on a header associated with the incoming packet. If it is determined that the incoming packet is associated with the current packet flow, then the incoming packet is hardware forwarded via a network interface of the virtual router-based network device without intervention by a processor of the virtual router-based network device, otherwise the incoming packet is forwarded to software on the processor for flow learning.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08111690&OS=08111690&RS=08111690
owner: Google Inc.
number: 08111690
owner_city: Mountain View
owner_country: US
publication_date: 20081029
---
This application is a continuation of U.S. application Ser. No. 11 671 462 filed on Feb. 5 2007 which is a continuation of U.S. application Ser. No. 10 163 079 filed on Jun. 4 2002 both of which are hereby incorporated by reference for all purposes.

This application is also related to the following US patents and US patent applications all of which are incorporated herein by reference in their entireties for all purposes 

U.S. Pat. No. 7 161 904 entitled SYSTEM AND METHOD FOR HIERARCHICAL METERING IN A VIRTUAL ROUTER BASED NETWORK SWITCH 

Application Ser. No. 10 163 071 entitled SYSTEM AND METHOD FOR CONTROLLING ROUTING IN A VIRTUAL ROUTER SYSTEM and

Contained herein is material that is subject to copyright protection. The copyright owner has no objection to the facsimile reproduction of the patent disclosure by any person as it appears in the Patent and Trademark Office patent files or records but otherwise reserves all rights to the copyright whatsoever. Copyright 2002 2008 Fortinet Inc.

Embodiments of the present invention generally relate to high performance network switches and more particularly to routing traffic through a virtual router based network switch.

The use of networks including LANs WANs and the Internet continues to grow at ever increasing rates. Each day more and more systems are becoming interconnected. This has created a need for high performance network switches on the part of network service providers. Many of the switches comprise multiple modules with many data flows between the modules themselves and between the interfaces to external networks. In some cases these modules including the processors residing on the modules can be partitioned into virtual routers such as software running on the processors that emulates the functioning of an individual physical router. As a result of the combination of hundreds of thousands of data flows for the virtual routers in these network switches there is a need for efficiently processing packet flows and for controlling the resources consumed within the network switch.

Methods and systems are described for routing traffic through a virtual router based network switch. According to one embodiment a flow data structure is established that identifies current packet flows associated with multiple virtual routers in a virtual router based network device. An incoming packet is received by the virtual router based network device. It is then determined whether the incoming packet is associated with a current packet flow by accessing the flow data structure based on a header associated with the incoming packet. If it is determined that the incoming packet is associated with the current packet flow then the incoming packet is hardware forwarded via a network interface of the virtual router based network device without intervention by a processor of the virtual router based network device otherwise the incoming packet is forwarded to software on the processor for flow learning.

According to another embodiment a method is provided for validating micro flows. A hardware accelerated micro flow is established by configuring forwarding state information of a flow cache entry associated with the hardware accelerated micro flow. The hardware accelerated micro flow includes an identifier and an invalidation tag. Upon receiving an incoming packet that is part of the hardware accelerated micro flow the invalidation tag is compared to a value in an invalid tag table located by the identifier. The hardware accelerated micro flow is invalidated when the value does not match the invalidation tag.

According to another embodiment a method is provided for capping packet flow. A rate metering structure is associated with each of multiple micro flows of a virtual router based network device. A corresponding rate statistic is maintained for each micro flow in the rate metering structures. Upon detecting that the corresponding rate statistic is exceeded for a micro flow with which an incoming packet is associated dropping the incoming packet.

According to another embodiment a method is provided for limiting resource consumption in a virtual router based network device. A flow metering structure is associated with a virtual router. Upon detecting a packet flow is to be assigned to the virtual router a flow counter in the flow metering structure is incremented. The flow counter is then compared to a predetermined limit value and if the flow counter does not exceed the predetermined limit value then establishing the packet flow otherwise refusing to establish the packet flow.

Other features of embodiments of the present invention will be apparent from the accompanying drawings and from the detailed description that follows.

Methods and systems are described for routing traffic through a virtual router based network switch. In the following detailed description of exemplary embodiments of the invention reference is made to the accompanying drawings which form a part hereof and in which is show by way of illustration specific exemplary embodiments in which the invention may be practices. These embodiments are described in sufficient detail to enable those skilled in the art to practice the invention and it is to be understood that other embodiments may be utilized and that logical mechanical electrical and other changes may be made without departing from the scope of the present invention.

Some portions of the detailed description which follows are presented in terms of algorithms and symbolic representations of operations on data bits within a computer memory. These algorithmic descriptions and representations are the ways used by those skilled in the data processing arts to most effectively convey the substance of their work to others skilled in the art. An algorithm is here and generally conceived to be a self consistent sequence of steps leading to a desired result. The steps are those requiring physical manipulations of physical quantities. Usually though not necessarily these quantities take the form of electrical or magnetic signals capable of being stored transferred combined compared and or otherwise manipulated. It has proven convenient at times principally for reasons of common usage to refer to these signals as bits values elements symbols characters terms numbers or the like. It should be borne in mind however that all of these and similar terms are to be associated with the appropriate physical quantities and are merely convenient labels applied to these quantities. Unless specifically stated otherwise as apparent from the following discussions terms such as processing or computing or calculating or determining or displaying or the like refer to the action and processes of a computer system or similar computing device that manipulates and transforms data represented as physical e.g. electronic quantities within the computer system s registers and memories into other data similarly represented as physical quantities within the computer system memories or registers or other such information storage transmission or display devices.

Embodiments of the present invention may be provided as a computer program product which may include a machine readable medium having stored thereon instructions which may be used to program a computer or other electronic devices to perform a process. The machine readable medium may include but is not limited to floppy diskettes optical disks compact disc read only memories CD ROMs and magneto optical disks ROMs random access memories RAMs erasable programmable read only memories EPROMs electrically erasable programmable read only memories EEPROMs magnetic or optical cards flash memory or other type of media machine readable medium suitable for storing electronic instructions. Moreover embodiments of the present invention may also be downloaded as a computer program product wherein the program may be transferred from a remote computer to a requesting computer by way of data signals embodied in a carrier wave or other propagation medium via a communication link e.g. a modem or network connection .

The following abbreviations may be used in the detailed description that follows. If an abbreviation is used that does not appear in the list the meaning as used by one of skill in the art is intended.

In one embodiment of the present invention external network interface is referred to as a line interface and provides a media access interface to wired or wireless network. Examples of such line interfaces include Gigabit Ethernet OC 12 STM 4 POS OC 3 STM 1 POS and DS3C DS3U E3U interfaces. The invention is not limited to any particular type of line interface or network type.

In some embodiments internal network interface is a switch fabric interface. In one embodiment the switch fabric interface is a 51.2 Gbps 8 port fully meshed non blocking switch fabric with each port supporting a 6.4 Gpbs transfer rate. However the invention is not limited to any particular type of switch interface or internal network interface .

In some embodiments processing engines provide specialized application processing within environment . In some embodiments processing engine can be a Virtual Routing Engine VRE capable of providing virtual router applications . In alternative embodiments processing engine can be a Virtual Service Engine VSE capable of providing services such as firewall services and antivirus services. In further alternative embodiments processing engine can be an Advances Security Engine capable of providing data encryption services.

Processing engine in some embodiments includes a Packet Forwarding Engine PFE processor and memory . Processor executes computerized instructions that form the various types of applications that can be run on a processing engine . In one embodiment of the present invention processor is a PowerPC 750CX from IBM Corp. In an alternative embodiment processor is a Hi fn 7851. In a further alternative embodiment processor is a Hi fn 6500. The invention is not limited to any particular type of processor. Additionally in some embodiments of the present invention processing engine includes more than one processor . The invention is not limited to any particular number of processors .

PFE in some embodiments comprises circuits and logic that perform hardware assisted packet routing for a processing engine . In general PFE analyzes packets that arrive from the internal network interface or from a DMA interface with processor . PFE then determines whether the packet can be hardware forwarded without the intervention of processor or whether such intervention is required. Further details on the structure of PFE and methods implemented within PFE will be provided below.

Memory is a memory capable of storing data and instructions for processor and PFE . In some embodiments processor and PFE share memory . In alternative embodiments each of processor and PFE has dedicated memory.

In some embodiments both the PFE ingress and egress units comprise an array of 32 bit packet processors that share an on chip write back cache . In some embodiments each ingress unit and egress unit include six packet processors . However the invention is not limited to any particular number of packet processors. In one embodiment the packet processor implements a RISC like integer instruction set with special instructions for bit field extraction and merging and for unaligned block data transfers. According to one embodiment each packet processor operates on a different packet and hardware interlocks maintain packet order. In some embodiments the ingress processors share common micro code for ingress processing and the egress processors share common micro code for egress processing. In some embodiments the PFE memory maps the ingress and egress instruction stores and supports micro code updates through Programmed Input Output PIO write transactions.

In operation the PFE ingress unit passes forwarding state to the DMA Engine that incorporates this state into a packet receive descriptor. This forwarding state indicates whether the processor should software forward the packet or the packet may bypass the processor and the PFE can hardware forward the packet. In some embodiments the forwarding state also includes a 20 bit index into a forwarding transform cache that describes PFE processing per packet flow. For software forwarding packets a receive descriptor is pushed onto the DMA ingress descriptor queue. For hardware forwarded packets the descriptor will bypass the DMA ingress queue and be pushed directly onto the DMA egress descriptor queue as a transmit descriptor.

Next in some embodiments of the present invention the packet is classified block . Packet classification involves looking at one or more of the various protocol layer headers. As those skilled in the art will appreciate packets are typically encapsulated with various protocol headers that define sources destinations and applications that are to process the data in the packet. For example layer 2 L2 is typically a data link layer that specifies the organization of data into frames and how to send frames over a network layer 3 L3 is a network layer that specifies addressing assignments and how packets are forwarded and layer 4 L4 is a transport layer that specifies how to reliably handle data transfer. For example TCP IP occupies L3 and L4 in this reference model. In some embodiments layer 1 L1 also referred to as LQ includes a header that specifies an LQ ID and LQ protocol to use to route packets internally within a router. The LQ ID is used to identify a particular VR that is to receive the packet.

In some embodiments the PFE ingress unit supports two basic forms of packet classification. One is flow based using various fields of the LQ header along with fields in the L3 L4 headers to identify a particular VR flow also referred to as a micro flow . The other form uses the upper bits of the IP address or MPLS label to index a table of flow indices. According to one embodiment the host software controls which classification form the PFE uses by programming different micro code into the ingress instruction store. In one embodiment in both forms of packet classification the classification result is a 20 bit forwarding index that the hardware uses to select the correct packet transformation.

Each flow ID cache entry stores the LQ ID LQ protocol L3 and L4 fields that identify a particular VR flow along with state indicating whether to hardware or software forwarding packets belonging to the micro flow. The PFE ingress unit generates an index into the flow ID cache by hashing the incoming packet s LQ ID LQ protocol L3 and L4 header fields. It then looks up the indexed cache entry and compares the packet micro flow ID fields to the cached micro flow ID fields. On a cache hit the FwdAction field of the cache entry indicates whether to software or hardware forward the packet. On a cache miss the ingress controller allocates a cache entry and forwards the packet to software on processor for flow learning.

According to one embodiment when the PFE controller detects a new flow it attempts to allocate one of four FCBs selected using its hashed flow index. If the PFE finds an available FCB it replaces the FCB tag fields sets the FwdAction field to pending and increments the FCB pending tag. The PFE then forwards the packet to software using a descriptor marking of FWD NEW. At some later time the host software sends a control packet containing an FCB UPDATE message for this flow which sets up the FCB.

According to one embodiment if the PFE is unable to allocate an FCB it forwards the packet to software using a descriptor marking of FWD COLLISION. This indicates to software that the packet s flow collided with another currently active flow in the FCB cache.

In one embodiment during the time between the first packet s arrival and the arrival of the FCB UPDATE message for that flow the PFE forwards all packets of that flow to software marked with a FWD NEW descriptor. In the case that another new flow replaces the FCB before an FCB UPDATE message arrives the PFE uses the FCB s Pending Tag field to uniquely identify the flow for the FCB UPDATE messages.

According to one embodiment for each new flow the PFE ingress controller replaces the FCB flow tag fields and increments the pending tag. Upon the arrival of an FCB UPDATE message the PFE compares the pending tag in the FCB and the message and if they are equal accepts the message. If the pending tags differ when the FCB UPDATE message arrives the PFE ignores the update message. In this way the PFE ignores stale FCB update message.

If the packet can be hardware forwarded the packet processor then performs transform block processing block . The PFE maintains a table of Transform Control Blocks TCBs which direct how the egress controller processes outgoing packets. The egress controller uses the 20 bit forwarding index carried by the DMA descriptor to select a transform control block from the table before processing packets. In one embodiment each transform control block entry contains 64 bytes formatted as described in the table below.

According to one embodiment to update a Transform Control Block TCB host software sends a control packet containing a PFE EGRESS WR message with an address parameter that points to the new TCB. Software should issue the TCB update control packet before issuing the packet being forwarded. This ensures that the forwarded packet is processed according to the updated TCB.

In some embodiments several fields may be used to maintain packet order and associate the TCB with a specific flow. In flow mode where several NEW packets for a flow could be sent to the CPU there is a danger that once the CPU updates the TCB and FCB a packet could be hardware forwarded while the CPU still has packets for that flow. In one embodiment packet order is enforced by the TCB. When the TCB is written the DropCpuPkt bit should be zero this will allow the CPU to send the NEW packets it has for that flow. However when the first FWD HW packet is seen with this bit clear the packet forwarding engine e.g. packet forwarding engine will update the TCB and set this bit. Subsequent packets from the CPU recognized because they are marked FWD HW COH will be dropped. In alternative embodiments packet order may be maintained by a conflict cache in the DMA engine.

There is also a consistency check performed between the FCB and the TCB. On ingress the SF header SrcChan is replaced with the PendingTag field of the FCB on egress the SrcChan is compared against the FCBTag field of the TCB. If the tags mismatch the packet is dropped. For prefix mode the SrcChan is replaced with zero and the FCBTag field is initialized to zero.

Next a packet processor executing the method performs header transformation block . In its simplest form the packet header transformation involves the replacement of some number of header bytes of an ingress packet with some number of bytes of replacement header data. Under the control of a TCB the PFE egress unit can selectively replace and recompute specific fields in a small set of protocol headers.

The PFE egress unit begins the header transform by stripping the incoming packet s SF header along with the number of bytes indicated by the SF header offset field. At that point the controller will begin copying bytes from the buffer pointed to by the TCB s HdrPtr field into the egress packet buffer. The PFE will copy the number of new header bytes defined by the TCB s Hdrlen field.

After performing this header replacement the PFE then goes through the TCB enable bits to determine what other header transformations need to be made.

Next egress rate limiting is performed blocks . Further details on rate limiting are presented below.

Finally egress statistics are updated blocks and the method returns to block to await reception of another packet.

Next the method receives a packet associated with the flow block . Upon receiving a packet the method determines if the flow should be invalidated or not block . In some embodiments of the present invention a flow cache block FCB describing the flow maintains a VR Group ID value. This value is compared to a tag entry in a VR group invalidation table. If the values are different the flow is invalid and is marked as such block . The packet may be dropped or it may be forwarded to software running on processor for reestablishment of a flow or other processing. Otherwise the flow is valid and hardware acceleration continues for the packet block .

In some embodiments the VR group invalidation is typically incremented thereby causing the FCB value and the VR group invalidation table value to differ upon the occurrence of one of several events. One event is flow expiration. In some embodiments a PFE ingress controller applies a flow expiration timestamp to each new flow at the time software establishes the flow. Software defines the flow lifetime by setting the FCB FlowAgeTime field with the number of seconds the flow should remain active. The FCB AgeEnable field is also set for flow aging to be applied.

When a packet arrives for a valid flow the PFE ingress controller compares the incoming packet s assigned timestamp with the FCB expiration timestamp. If the packet s timestamp exceeds the flow s expiration timestamp then the PFE will invalidate the flow and send the packet to software with FwdCtl FWD New.

In addition to flow aging the PFE microcode may support a software initiated flow invalidation scheme. According to one embodiment at the time software establishes a new flow with an FCB UPDATE it assigns the flow to one of 1024 VR invalidation groups by setting the FCB VRGroupID field. The PFE maintains an invalidation tag for each of the VR groups in a table during the FCB UPDATE the PFE copies the associated invalidation tag from the table and stores it into the new flow s FCB. Each time a packet arrives for the flow the PFE ingress controller compares the FCB invalidation tag with the tag value in the associated invalidation table entry. If the PFE detects that an invalidation event has occurred for that flow then the flow is re established as a new flow. Software can invalidate all member flows of a VR group by changing the value of the invalidation tag in memory with a MEM WR command to the appropriate address.

In some embodiments VR Group index 0 is reserved for pending flows and the tag value in the invalidation table must be zero.

Additionally in some embodiments when software sets the FCB s FlowAction field to hardware forward SPF the PFE performs special TCP header checks before hardware forwarding packets in this flow. If the PFE detects SYN FIN or RST flags set then it pushes the packet to software for SPF state machine processing. Also a FIN or RST flag will automatically invalidate the FCB for subsequent packets.

Next the packet count is compared to a predetermined maximum value to determine if the flow has exceeded the allowable packet count block . If the maximum count is exceeded the packet can be dropped block . Otherwise the packet can be processed as part of the normal hardware accelerated flow block .

In some embodiments the PFE egress unit independently rate limits ingress and egress packets if enabled. As part of rate limiting the PFE meters marks and drops packets. The PFE performs ingress rate limiting before header transformation and performs egress rate limiting after header transformation. Software controls metering and rate marking using a combination of Metering Control Blocks MCBs and fields in the TCB and ingress statistics blocks.

In some embodiments the PFE implements both ingress and egress rate metering and marking according to the two rate three color marker trTCM definition in RFC 2698. Per this definition in color blind mode the PFE marks the drop precedence color of a packet a Green if it does not exceed the CBS Yellow if it exceeds the CBS but not the PBS and Red if it exceeds both the CBS and PBS. The packet s color is encoded into the rm field of the LQ header. The PFE increments the C and P buckets by the CIR and PIR values respectively in 1 ms intervals.

The PFE egress unit may optionally drop Yellow or Red packets or may color packets for a downstream dropper. The RatelnCtl and RateOutCtl fields of the TCB control whether and how to drop packets on ingress and egress rate limiting.

A set of Metering Control Blocks MCBs maintained in system memory contain per flow VR VI or ACL trTCM parameters. Table 7 defines the MCB data structure according to one embodiment of the present invention. Hardware provides three logical metering units VI based ingress metering flow based ingress metering and flow based egress metering. The TCB contains two MCB pointers for flow based metering. The VI based MCB pointer is contained in the VI based stats block which is discussed in further detail in the attached Appendix.

According to one embodiment software controls where and how the hardware accesses MCBs by setting up arrangements of MCB pointers. The MCB pointer data structure contains a 32 byte aligned memory pointer along with mode control bits as detailed in the table below. In its simplest form the pointer field indicates the memory location of a single MCDB. In its most complex mode the pointer indicates the location of an ordered array of up to 8 MCB pointers. When the hardware loads an MCB pointer array it performs metering and rate marking starting with the first MCB pointer and continuing as directed by the NextPointer field in the MCB pointer. In one embodiment software can disable rate marking completely by setting all 4 bytes of the MCB pointer to 0.

It should be noted that depending upon the particular needs in accordance with various embodiments metering can be applied at a packet and or byte level based on the number of packets or bytes transferred in the flow.

The flow cap feature is intended to allow the system to restrict the number of flows in the flow cache a particular VR can consume. Packets are associated with a flow cap structure based on LQID an index into the flow cap table is located in the ingress statistics block.

The FlowCap field of the flow cap structure is used to set the maximum number of flows allowed and to disable flow cap processing with a value of 0. If flow cap processing is disabled no further processing is performed. Otherwise the flow cap structure is checked to see if the current time interval has expired if the structure needs to be initialized or if there is a mismatch between the FlowCapTags in the structure and the FCB. When software sets up a flow cap structure the ExpTime field is initially set to 0. This indicates to the microcode that the structure needs to be initialized and timer expiration processing will be performed. When the timer has expired the flow cap structure will be updated for the next interval FlowCount will be copied to PrevMax FlowCount will be set to 1 to count the current flow FlowCap Tag will be incremented and ExpTime will be set to current time ExpInterval. When a flow is counted due to expiration or tag mismatch the FCB will be updated to copy the FlowCapTag from the flow cap structure to the FCB. If a flow with a tag mismatch is processed but the flow cap has been reached then the FCB will be invalidated and the packet discarded.

In one embodiment new flows are also counted and if the flow cap is exceeded the flow will not be established.

To insure that timer expiration is correctly identified in one embodiment the ExpInterval is set to less than half the full range 2G . With time units of 1 ms this allows for up to 24 days for the maximum interval far greater than expected for actual use.

In some embodiments of the present invention a multiprocessor system that uses a shared memory a cache lock bit is used to enforce ownership of a shared data structure such as one of the data structures described above or in the attached Appendix. When a first processor such as packet processor loads a data structure the lock bit is set in the cache tag store. A second processor requesting the data structure is denied access until the lock bit is reset. The lock bit is reset when the first processor completes an update of the data structure. When requesting access to the data structure the first processor performs a load memory lock and when complete the first processor performs a store memory unlock. Accordingly only one processor may update a data structure in cache at a time. Data structures include metering control blocks and status blocks. The cache lock bit is included within the cache tag store for each data element in the cache.

Systems and methods for hardware accelerated packet routing are disclosed. Although specific embodiments have been illustrated and described herein the foregoing description of specific embodiments reveals the general nature of the invention sufficiently that others can by applying current knowledge readily modify and or adapt it for various applications without departing from the generic concept. Therefore such adaptations and modifications are within the meaning and range of equivalents of the disclosed embodiments. The phraseology or terminology employed herein is for the purpose of description and not of limitation. Accordingly the invention embraces all such alternatives modifications equivalents and variations as fall within the spirit and scope of the appended claims.

