---

title: Dynamic management of operating system resources
abstract: A method for dynamically managing operating system resources of a computing device. Each of the operating system resources have one or more data elements. The method includes: at an observer module of the operating system, monitoring stability and/or usage of the one or more data elements of each of the operating system resources, selecting an unused and/or unstable operating system resource data element; and removing a selected operating system resource data element.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08578364&OS=08578364&RS=08578364
owner: Microsoft Corporation
number: 08578364
owner_city: Redmond
owner_country: US
publication_date: 20080425
---
Memory and or processing resources of a computer may be used to perform computing operations. An operating system of the computer may consume at least some memory and or processing resources thus limiting the memory and or processing resources available to perform computing operations. One approach to control the amount of memory and processing resources used by the operating system includes during installation of the operating system on the computer not installing operating system resources that are deemed to be unused or unwanted on the computer.

However over time as the computer is used the type and amount of memory and processing resources associated with the operating system and or the memory and processing footprint of the operating system may grow due to updates backups unused resources and other process resources being added to the operating system. This can sometimes result in decreased performance of the computer.

A method for dynamically managing operating system resources of a computing device is provided. Each of the operating system resources includes one or more data elements. The method comprises at an observer module of the operating system monitoring stability and or usage of the one or more data elements of each of the operating system resources selecting an unused and or unstable operating system resource data element and removing a selected operating system resource data element.

This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter nor is it intended to be used to limit the scope of the claimed subject matter. Furthermore the claimed subject matter is not limited to implementations that solve any or all disadvantages noted in any part of this disclosure.

The present disclosure is directed to monitoring of operating system resources and operations of a computing system. More particularly operating system resources may be dynamically monitored by an observer module which may be a component of the operating system a stand alone application etc. The observer module may be configured to selectively remove an operating system resource based on a variety of factors. As a non limiting example an operating system resource may be removed based on a usage factor. By removing an operating system resource based on one or more usage factors unused operating system resources may be dynamically removed throughout operation of the computing system. As another non limiting example an operating system resource may be removed based on one or more stability factors. By removing an operating system resource based on the effect that the operating system resource has on the stability of the computing system removal of operating system resources may be performed in a robust manner so that operation of the computing system may be improved. Accordingly the amount of memory and or processing resources used by the operating system may be reduced thus freeing up memory and or processing resources for allocation to other computing operations.

Computing system may include a processor configured to execute one or more of processes that are organized according to a call stack . Call stack may be organized by operating system . During execution of a process the process may request use of one or more of the plurality of OS resources and the operating system may facilitate access to the OS resource s . More particularly a process may request use of one or more data elements of an OS resource and the operating system may facilitate access to the data element s of the OS resource. Further the operating system may organize allocation of the processor and or OS resources to one or more of the processes in a call stack based on system data and or user input.

An OS resource may be a file of virtually any suitable file type. For example an OS resource may be a binary file. As a particular example the binary file may be a dynamically linked library .DLL file. Each of the plurality of operating system resources may include one or more data elements. A data element may include virtually any suitable type of data. For example a data element may include an application programming interface API by which programs communicate with the OS resource. Further in some cases an OS resource may include a plurality of APIs as well as other data elements.

Operating system may include an operating system observer module for dynamically monitoring OS resources. In particular observer module may monitor each data element of each of the OS resources. Observer module may dynamically monitor and selectively remove a data element of an OS resource based on one or more OS resource monitoring and removal factors stored in observer module configuration data store of memory . While in the depicted embodiment the observer module is illustrated as a component of the operating system it will be appreciated that the observer module may alternatively be implemented via an application program executed on the computing system .

Observer module may be configured to monitor OS resource data elements at various levels and or locations of computing system based on OS resource monitoring and removal factors . For example observer module may monitor OS resource data elements at a memory access level. As another example observer module may monitor OS resource data elements at a processes level. As yet another example observer module may monitor OS resource data elements at a call stack level.

OS resource monitoring and removal factors may be used to determine what OS resource data elements are to be selected for removal from the computing system. In one example OS resource data elements are monitored for selection based on usage including a lack of usage of the OS resource data elements. Further the OS resource monitoring and removal factors may include usage thresholds used to determine selection of an OS resource data element for removal. For example a usage threshold may be set for an elapsed period since last use of the data element a number of times the data element has been used over a predetermined period etc. As another example a usage threshold may be set for a number of events that have occurred since last use of the data element. As a particular example an event may include a threshold number of computing system reboots. This may be used for example to determine whether a computer was rebooted multiple times following use of an OS resource making the OS resource an appropriate target for removal. As yet another example a usage threshold may be set that is based on the number of computing states that have occurred since last use of the data element. The computing states for example may be error states detected by the operating system and may be used to target error prone resources for removal.

Continuing with observer module may be configured to monitor the OS resource data elements based on OS resource monitoring and removal factors that include usage of the OS resources. Computing system includes OS resource having data elements . .N and unused OS resource having data elements . .N saved in memory . Observer module determines that data elements . .N of OS resource have been used recently relative to a predetermined usage threshold so observer module does not select OS resource and data elements . .N for removal. In contrast observer module determines that data elements . .N of unused OS resource have not been used recently relative to a predetermined usage threshold so observer module selects unused OS resource for removal since all data elements of the OS resource do not meet the usage threshold as indicated by the dashed lines. It will be appreciated that the observer module monitors OS resources on a data element level and thus individual data elements of an OS resource may be selected for removal without removing the entire OS resource.

As another example an OS resource may be removed based on the effect that the OS resource has on stability of the computing system. Further the OS resource monitoring and removal factors may include stability thresholds used to determine selection of an OS resource data element for removal. For example a stability threshold may be set for an elapsed run time period after installation of the data element. As another example a stability threshold may be set to a number of operating system reboot cycles after installation of the data element. As yet another example a stability threshold may include a system performance benchmark that may be achieved after installation of the data element. It will be appreciated that other factors may be used to select an OS resource data element for removal without departing from the scope of the present disclosure. In some cases multiple factors may be used to select an OS resource data element for removal such as usage and stability factors for example.

Continuing with observer module is configured to monitor the OS resource data elements based on OS resource monitoring and removal factors that include the effect that the OS resources have on stability of the computing system. Computing system may include an updated version of an OS resource having data elements N. N.N and a backup copy of a previous version of OS resource having data elements . .N. Observer module is configured to determine that computing system is stable for a predetermined stability threshold after installation of data elements N. N.N of updated version of OS resource and as a result observer module is configured to select a backup copy of a previous version of OS resource and data elements . .N for removal as indicated by dashed lines.

In some embodiments a selected data element may be selectively removed based on at least one operating parameter of the data element. For example a data element operating parameter may include a size of a data element. In one example a data element may be removed because the size of the data element is above a predetermined threshold size indicating that the data element uses more resources and is a suitable candidate for removal. As another example a data element operating parameter may include a frequency of past use of the selected data element. In one example a data element may be removed because the data element is not used frequently relative to a predetermined frequency threshold. It will be appreciated that other operating parameters and thresholds may be used to determine selective removal of a selected data element. Further it will be appreciated that the operating parameters and thresholds used to determine selective removal of a data element may be included in the OS resource monitoring and removal factors stored in the observation module configuration data store.

Similarly in some embodiments some OS resource monitoring and removal factors may specify that a data element is precluded from being removed from memory . For example a selected data element may not be removed based on the selected data element being accessed during a predetermined state of operation. In one particular example the state of operation includes a state during which the operating system performs computing system boot up operations. In another example a user or administrator may specify that certain OS resources are precluded from removal and this preference may be saved in the OS resource monitoring and removal factors . It will be appreciated that other operating parameters and thresholds may be used to preclude removal of a selected data element.

It will be appreciated that OS monitoring and removal factors may be provided in virtually any suitable manner. For example the OS monitoring and removal factors may be provided upon initiation of the operating system. As another example the OS monitoring and removal factors may be provided by input . In one particular example the input is user input and thus at least some of the OS monitoring and removal factors may be user generated. In another particular example the input is an updated version of an OS resource and the OS monitoring and removal factors are provided upon installation of the updated version of an OS resource. In some cases the updated version of the OS resource is received from a remote source via the input.

Next at the method may include monitoring usage and or stability of data element s of each OS resource. For example monitoring of a data element may be conducted at the call stack level the running processes level and or the memory access level.

Next at the method may include selecting an unused and or unstable OS resource data element s . A data element may be selected based on one or more removal factors that include predetermined thresholds as discussed above. In some embodiments the method may include selecting an OS resource data element based on a user input defined factor and or threshold as also discussed above.

Next at the method may include removing an OS resource data element s selected as being unused and or unstable. In an example where all data elements of a particular OS resource are selected as being unused and or unstable the method may include selecting and removing the entire OS resource including all data elements of the OS resource.

By dynamically removing unused data elements of OS resources from the computing system the memory and or processing footprint of the operating system may be reduced throughout operation of the computing system. Accordingly the operating performance of the computing system may be improved since the availability of memory and processing resources may be increased.

In some embodiments the method may include at querying a user of the computing device to install the updated version of the operating system resource. The user may respond to the query via user input . If the user provides input affirming the installation of the updated version of the OS resource the method continues to . Otherwise if the user provides input that denies installation of the updated version of the OS resource the method ends or returns. In some embodiments the user may not be queried in response to receiving an updated version of an OS resource and the method may continue directly to .

At the method may include storing a backup copy of the previous version of the OS resource. In some examples the previous version of the OS resource may include the currently installed version of the OS resource that is being updated. In some examples the previous version of the OS resource may include the original version of the OS resource that is being updated.

Next at the method may include installing the updated version of the OS resource in the operating system of the computing system. Installing the updated version of the OS resource may include saving the updated version of the OS resource in memory of the computing device. In some embodiments the updated version of the operating system resource may be installed in the operating system in response to receiving an affirmation to an installation query from the user.

Next at the method may include monitoring the effect that the installed updated OS resource has on the stability of the computing system. Monitoring the OS resource may be based one or more stability factors of the operating system. As one example the stability factor may include a threshold operating system run time period after installation of the updated version of the OS resource. As another example the stability factor may include a threshold number of system reboot cycles. As yet another example a stability factor may include a system performance benchmark.

Next at the method may include determining if the computing system is stable. The determination may be based on meeting the one or more stability factors. If it is determined that the computing system is stable the method proceeds to or . Otherwise it is determined that the computing system is not stable and the method proceeds to .

In some embodiments the method may include at querying a user of the computing device to remove the backup copy of the previous version of the OS resource. The user may respond to the query via user input . If the user provides input affirming the removal of the backup copy of the previous version of the OS resource the method continues to . Otherwise if the user provides input that denies removal of the backup copy of the previous version of the OS resource the backup copy of the previous version of the OS resource is not removed and the method ends. In some embodiments the user may not be queried in response to receiving an updated version of an OS resource and the method may continue directly to .

At the method may include removing the backup copy of the previous version of the OS resource. In some embodiments the backup copy of the previous version of the OS resource may be removed from the operating system in response to receiving an affirmation to the query from the user.

Returning to if it is determined that the computer system is not stable the method proceeds to . At the method may include selecting the updated version of the OS resource for removal.

Next at the method may include removing the selected updated version of the OS resource. At the method may include reinstalling the backup copy of the previous version of the OS resource. In this manner the unstable version of the updated resource may be removed and the previously installed stable version of the resource may be reinstalled for use by the user.

The above described method may be used to reduce the processing memory footprint of the operating system in a robust manner. In particular the method may consider the stability of the computing system before removing any previous versions of OS resources.

It will be appreciated that the above describe method may be expanded to include monitoring selecting and removing different versions of OS resource data elements as opposed to entire OS resources without departing from the scope of the present disclosure.

It will be appreciated that the methods described above may be particularly applicable to embedded computing systems or closed computing systems with memory and or processing constraints because the memory processing footprint of the operating system may be controlled e.g. maintained reduced minimized etc. throughout the lifecycle of the computing system. By reducing the memory processing footprint of the operating system the limited memory processing resources of the embedded computing system may be available to be allocated to other computing operations. In this way the memory processing resources of an embedded computing system may be used efficiently to improve the processing capabilities of the embedded computing system.

It will be appreciated that the configurations and or approaches described herein are exemplary in nature and that these specific embodiments or examples are not to be considered in a limiting sense because numerous variations are possible. Furthermore the specific process flows or methods described herein may represent one or more of any number of processing strategies such as event driven interrupt driven multi tasking multi threading and the like. As such various acts illustrated may be performed in the sequence illustrated in parallel or in some cases omitted. Likewise the order of any of the above described processes is not necessarily required to achieve the features and or results of the exemplary embodiments described herein but are provided for ease of illustration and description.

The subject matter of the present disclosure includes all novel and nonobvious combinations and subcombinations of the various processes systems and configurations and other features functions acts and or properties disclosed herein as well as any and all equivalents thereof.

