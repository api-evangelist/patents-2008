---

title: Computing environment representation
abstract: A computing environment may be represented as a deployable object hierarchy, which may be organized according to an object hierarchy schema that is commonly shared among the computing environment host and the devices that are configured to render the computing environment. A particular object hierarchy schema is presented in detail for representing a computing environment, wherein many objects of the computing environment are modeled as resources that may be distinctly addressable (e.g., in a RESTful object hierarchy.) Many types of objects and properties thereof are presented in order to elucidate an exemplary object hierarchy schema and to illustrate exemplary objects and object hierarchies organized according thereto. Additional properties of various object hierarchy schemas include extensibility, deployability, and object addressing models with various advantages.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08484174&OS=08484174&RS=08484174
owner: Microsoft Corporation
number: 08484174
owner_city: Redmond
owner_country: US
publication_date: 20080320
---
Many computing environments comprise a large and diverse set of objects managed by a set of object systems. For example a computing environment may comprise a set of files managed by a file system one or more databases managed by a database system a set of executable binaries representing applications and managed by a assembly cache a set of user profiles managed by a user profile component of an operating system and various data caches managed by data caching components such as a set of copied items managed by a copy buffer of the operating system a set of undo actions managed by an undo component of the operating system and a set of most recently used items managed by an item usage tracking component of the operating system. Moreover such objects may be exchanged among a plurality of devices operated by one or more users and according to one or more operations e.g. an object synchronization operation that merges two object sets and an object mirroring operation that adjusts a target object set to match a source object set. In this manner the objects are loosely organized through a set of object systems and aggregated to represent the computing environment.

This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key factors or essential features of the claimed subject matter nor is it intended to be used to limit the scope of the claimed subject matter.

The organization of objects within a computing system as a disjointed loosely aggregated set of object systems may create several problems. For example it may be difficult to present a consistent computing environment to the user through various devices especially if the devices vary in capabilities e.g. a high performance personal workstation a browser based public terminal and a low performance cellphone device. As another example applying services to the objects such as synchronization and backup may involve interfacing with each object system to affect the objects managed thereby and such interfacing may vary among object systems. As a third example relating a diverse set of objects such as all of the objects comprising an application may be difficult due to the incomplete cooperation of the managing object systems.

An alternative technique for representing the objects comprising the computing environment involves organizing the objects in an object hierarchy which may be hosted by a computing environment host. If the objects are represented in a uniform manner and managed in a consistent way by an object system a set of services may be devised to apply to all of the objects of the computing environment. Moreover the object hierarchy may be delivered to various devices to represent the same computing environment including the same user profiles applications data files etc. and each device may render the computing environment in a consistent manner but customized based on the capabilities of the device e.g. a hard keyboard interface for receiving data entry from a keyboard device attached to a workstation and a touchscreen software keyboard interface for receiving data entry from a cellphone device. 

Presented herein is one such representation wherein an object hierarchy is structured according to an object hierarchy schema defining a set of various types of resources such as an application an activities collection comprising a set of activities and a user profiles collection comprising a set of user profiles. The organization of the objects according to the object hierarchy schema specified herein may provide some advantages over other representations and organizations of such objects. For instance the representations of the objects presented herein are amenable to tagging with certain kinds of metadata and such metadata may be similarly associated with diverse types of objects such as applications data files and devices to enable domain specific metadata. The objects arranged as described herein may also facilitate the mapping of various sets of objects on various devices which may permit desirable adaptations of the computing environment in relation to different users and devices. These and other benefits may be achieved by an object hierarchy schema specified herein which benefits may be exhibited by the computing environment represented by the object hierarchy and rendered by devices of varying capabilities.

To the accomplishment of the foregoing and related ends the following description and annexed drawings set forth certain illustrative aspects and implementations. These are indicative of but a few of the various ways in which one or more aspects may be employed. Other aspects advantages and novel features of the disclosure will become apparent from the following detailed description when considered in conjunction with the annexed drawings.

The claimed subject matter is now described with reference to the drawings wherein like reference numerals are used to refer to like elements throughout. In the following description for purposes of explanation numerous specific details are set forth in order to provide a thorough understanding of the claimed subject matter. It may be evident however that the claimed subject matter may be practiced without these specific details. In other instances well known structures and devices are shown in block diagram form in order to facilitate describing the claimed subject matter.

Modern computer systems comprise a large number and variety of objects. Many computer systems feature a file store containing both the files for configuring the computer system including executables class libraries configuration information sets and resources and user files generated or received by one or more users. Many computer systems also comprise a wide range of configuration information comprising the computer system hardware and software including the hardware and devices of the computer system the operating system the shell user interface and the configuration of the applications available within the shell user interface. Various user profiles and accounts may also exist the former comprising information describing a particular user or user class name shell user interface preferences home directory etc. and the latter comprising information describing the privileges of the user or class file ownership read write privileges access to various devices etc. Protected security information such as passwords certificates public private key pairs and access control lists may be stored in a security object over which the operating system may exert regulated access. One or more data caches may exist such as browser caches and histories recent entries in application or browser textboxes and recently used file and object lists. Various applications may create application or task specific archives such as an email archive containing various folders and messages and a shared address book containing contact information received from various sources by various system users and organized in user defined groups. Finally the computer system may be configured to exchange particular sets of information with other computers users and devices such as objects to be synchronized and object sets to which access may be granted with various conditions read write privileges ownership quotas etc. Such object types are typically managed by various management systems e.g. a file system a system registry store a user account management system and an email system within the computer system in an ad hoc manner with little consistency or standardization of access methods or object organization.

The organization of objects within a computing system as a disjointed loosely aggregated set of object systems may create several problems. As a first example rendering and maintaining a consistent computing environment comprising a consistent set of objects such as files applications user profiles application configuration data caches etc. may be very difficult especially among devices of varying capabilities such as a personal workstation a public terminal and a cellphone device. As a second example applying services to the objects may be complicated by the storage of diverse objects in multiple object systems. For instance locating objects matching a particular description such as objects last modified within a particular time span may involve querying for matching files through one or more file systems matching database records through a database system matching registry keys through a system registry matching applications through an assembly cache matching data cache items through various data caches etc. Because such object systems often store the associated objects in non standard ways such as with parameters specific to the nature of the objects e.g. examining file records through a file system journal and examining database records through a data specific timestamp applying an operation to each the various object systems may be difficult. As a third example because each object system is configured to manage a particular kind of object relating and mixing the types of objects may be difficult. For instance an application may comprise an executable binary stored in an assembly cache some configuration information stored in a system registry supplemental files such as dictionaries for various languages stored in a file system and events such as recently edited documents stored in data caches. It may be difficult to represent an association of these object types in various systems and to manipulate all such objects together e.g. deleting all such objects in order to uninstall the application. As a fourth example the object set of the computer system may be distributed across several devices and providing consistent access to the object sets may be complicated by the various configurations of the devices the network capabilities of each device and incompatibilities in the wire formats used by each device for exchanging data e.g. a first device may be configured to exchange data according to an XML schema and a second device may be configured to exchange data according to JSON. 

An alternative approach may be devised wherein the computing environment is represented in a manner that may be delivered to devices for rendering according to the capabilities of the device. The representation comprises a set of objects organized according to an object hierarchy and represented according to a common grammar. The objects include the data objects of the computer system such as the user files and data created by the user. The objects also include the executable binaries and class libraries comprising the operating system components such as the shell and the applications offered therein. The object also include the information specifying the user interface of a computing environment including shell preferences e.g. visual themes application launch menu and double click threshold user accounts and privileges security information e.g. passwords security tokens and certificates application binaries and configuration information user data and metadata e.g. file sharing information and data caches e.g. most recently used file lists and browser history. Despite the various nature and uses of these objects the objects are represented in a common manner in the object hierarchy and may be arbitrarily organized in the hierarchy. Thus in contrast with former systems comprising a set of isolated data stores each containing one type of object e.g. a file system containing files a registry containing configuration information and a data cache containing the browser history the object hierarchy in this approach organizes all such objects in a common manner in the object hierarchy.

A computing environment represented in this manner may be delivered to any device and rendered in a manner suitable for the capabilities of the device. For instance a workstation may render the information as a robust and general purpose computing environment while a public workstation may render a different computing environment experience through a web browser e.g. as a virtual machine that may be discarded at the end of the user s session and a cellphone may provide a leaner interface with quicker access to cellphone related information e.g. contacts calendar and navigation data. Moreover updates to the information set e.g. preference changes and updates to data files contained therein may be applied to the canonical source of the information set and thereby propagated to all other devices to which the information set is delivered. Also the devices sharing the computing environment may be integrated through the shared information set such that one device may interact with others that are identified in the information set e.g. data stored on a first device may be accessed by a second device and a first device may be controlled by a second device through a communications conduit. The information set may therefore identify the collection of devices that share the computing environment along with the roles capabilities and resources of each device to provide an integrated computing experience across a potentially large number and variety of devices.

In furtherance of these ends an object hierarchy schema may be devised for organizing the objects of the object hierarchy in a particular manner. For instance objects may be devised and structured to represent data objects such as files users and user accounts devices and events arising with the computing environment as well as derivation ownership and interrelationships therebetween. The manner of organizing the objects may give rise to particular advantages and or reduce disadvantages with respect to other organizations of the objects. Accordingly the object hierarchy schema according to which the objects may be organized is devised in view of the uses of such objects and of the computing environment. For instance security permissions may be modeled by associating respective objects with one or more user accounts having various sets of permissions e.g. a first user account having read write permissions to an object a second user account having read only permissions to the object and a third user account having no permissions to the object. The computing environment may be configured to utilize the objects of an object hierarchy according to the structure and semantics of the object hierarchy schema thereby enabling the presentation of a deployable computing environment across a plurality of devices in a manner that is appropriate for the configuration and capabilities of each device but otherwise consistent among all such devices.

It may be appreciated that the formulation of the object hierarchy schema may significantly impact the configuration of the devices and the server hosting the computing environment. As one example a device may request only a portion of the computing environment e.g. a cellphone device may request the portion of the object hierarchy containing a set of contact information such as telephone numbers and email addresses and the server may provide only that portion however if the device and the server are operating on different object hierarchy schemas the request may fail. For instance the device might request a particular portion of the object hierarchy e.g. Contacts according to a first object hierarchy schema but the server may store such information in a different portion of the object hierarchy e.g. AddressBook Contacts according to a second object hierarchy schema and may therefore be unable to provide the information requested even if contact information exists in the object hierarchy hosted by the server. As a second example the server may be capable of storing object hierarchies according to any object hierarchy schema but may be more advantageously configured to utilize part of the object hierarchy while providing services thereto and may therefore expect to find objects defined and organized in the object hierarchy according to a particular object hierarchy schema. For instance in responding to a request by a device to receive the object hierarchy the server may attempt to authenticate the device using authentication information stored in the object hierarchy. Thus the server may be more easily configured to host object hierarchies according to a particular object hierarchy schema so that it may also access and utilize the information stored within the object hierarchy schema while providing services relating thereto.

In view of the foregoing principles presented herein is one such object hierarchy schema wherein the objects are defined and interrelated in a particular manner that facilitates the application of services to the computing environment by the server and the deployability of the computing environment to devices that may render the computing environment in a consistent but device specific manner. The object hierarchy schema described herein is presented as a defined set of objects each definition representing a particular type of data object in the computing environment e.g. a user profile an application and a device and having certain properties related thereto. Some of the objects are defined as specialized types of other objects e.g. a generic person object type may be extended to represent a user object type which may be a person with additional information representing the privileges of the person in the computing environment. Additionally some objects are defined as containers for one or more other objects such as a people collection object type that contains one or more people object types. Moreover the object hierarchy schema presented herein defines a hierarchical organization of the objects defined herein within the object hierarchy i.e. certain object types are to be stored in certain locations of the object hierarchy so that any device or computer system that searches for such objects within the object hierarchy will find any that exist within the computing environment at a known established location within the object hierarchy.

The object hierarchy schema object set of includes a Resource object type which represents a basic data object stored in the object hierarchy. The Resource object type denotes an addressable object within the object hierarchy schema for providing a distinctly addressable location within an object hierarchy i.e. for a particular address in the object hierarchy only one object in the object hierarchy corresponds to the location. In some embodiments of the object hierarchy schema the resource may be identified only by one address while in other embodiments of the object hierarchy schema the resource may be identified at a plurality of addresses. In any such embodiment however a single address in the object hierarchy may be associated with at most one object.

The Resource object type of the object hierarchy schema object set of serves as a base object type for many other object types. Several of these object types correspond to objects that are sometimes devised as one or more files in conventional computing environment. As a first example the object hierarchy schema object set includes a Core Object object type which is a specialized type of resource that comprises a set of objects located at the root of an object hierarchy. The object hierarchy schema object set also includes an Application object type which is a specialized type of resource that denotes an object representing an application installed in the computing environment. Many other objects may be associated with the Application object type such as a title an application icon and one or more executable binaries. The object hierarchy schema object set also includes a Data Entry object type which is a specialized type of resource that represents a container of an atomic unit of data such as an application binary a document a set of application configuration information an image etc. The object hierarchy schema object set also includes an News Item object type which is a specialized type of data entry object that denotes a noteworthy event in the computing environment.

The Resource object type may also serve as a base object type for other types of objects. As one example the object hierarchy schema object set also includes a Data Feed object type which is a specialized type of resource that denotes a collection of related data entries such as a set of songs e.g. MP3 objects comprising an album or a set of photo images comprising a photo album. The object hierarchy schema object set also includes an Activity object type which is a specialized type of resource that represents a event that has recently occurred in the computing environment such as the creation of an object a user login and the addition of a device within the computing environment. It may be appreciated that Activities represent less significant events arising in the ordinary course of a computing environment that may be of only transient interest to a user such as copying a portion of text while News Items represent more significant events that may be of longer term interest to the user such as the creation of a photo album. The object hierarchy schema object set also includes a Member object type which is a specialized type of resource that denotes a relationship between a core object and a user that is related to the core object e.g. through an ownership or permission set. The object hierarchy schema object set also includes a Device object type which is a specialized type of resource that represents a device to which at least a portion of the object hierarchy is authorized for transmission and on which at least a portion of the represented computing environment is authorized for rendering. The object hierarchy schema object set also includes a Mapping object type which is a specialized type of resource that denotes a relationship between a device i.e. a Device object and a core object that may be delivered to the device. The object hierarchy schema object set also includes a Profile object type which is a specialized type of resource that represents a user profile of an authorized user of at least a portion of the computing environment. These object types are based on the Resource object type and objects of these object types are included in an object hierarchy in an addressable and accessible manner similarly to more conventional object types such as documents and images.

The object hierarchy schema object set also includes object types that are not specialized from the Resource object type . These objects are included in the object hierarchy schema but may not be included as addressable entities according to the addressing model of the object hierarchy schema . Rather these objects may comprise accessible members of other objects or specialized features of the object hierarchy schema that are encapsulated in objects that are outside of the addressing model of the object hierarchy schema . As one example the object hierarchy schema object set includes a Mesh object type which includes information concerning an entire object hierarchy. Typically a single Mesh object may be associated with a particular object hierarchy but variations of this association may be included in other embodiments of the object hierarchy schema. The object hierarchy schema object set also includes a Storage Service object type which represents a storage device on which a portion of the object hierarchy e.g. one or more core objects are located. The object hierarchy schema also includes a Resource Collection object type which represents a collection of resources of a particular object type. For instance a device object may be associated with one or more core object through one or more respective mapping objects which may comprise a resource collection of mapping objects associated with the device. Similarly the user profiles of the computing environment may be represented as a resource collection of profile objects associated with the mesh singleton object of the object hierarchy. The object hierarchy schema also includes an Identity object type which describes a particular user e.g. the permissions accorded to the user in the computing environment. The object hierarchy schema also includes a Role object type which relates a member object with a core object according to a particular type of role e.g. an owner a reader and a contributor. 

Together the object types illustrated in comprise a significant portion of the object hierarchy schema and many objects of the computing environment may be represented according to these types of interrelated objects. In view of these object types and object hierarchies comprising objects of such object types illustrates the structure of the object hierarchy schema wherein a single arrow from a first object to a second object indicates a relationship of the first object to the second object. Also in a double arrow from a first object to a second object indicates that the first object is a collection of one or more objects of the type indicated by the second object. For instance the mesh object is related to a devices collection as indicated by the single arrow which contains a collection of device objects as indicated by the double arrow. It may be appreciated that the object hierarchy schema object set of illustrates the specialization of object types e.g. a first object is a specialized type of second object whereas the object hierarchy schema of illustrates the organization of objects of these object types in an object hierarchy e.g. a first object is related to one or more of the second object. 

As further illustrated in the exemplary object hierarchy schema of a core resource object is related to four collections of objects. First a core resource object is related to a mappings resource collection which contains at least zero mapping resource objects . Mapping resource objects represent a relationship of the core resource object with a device on which the core resource object may be rendered accordingly respective mapping resource objects are related to at least one device resource object . A core resource object is also relate to an activities resource collection which contains zero or more activity resource objects that represent less significant events arising with respect to the core resource object such as various alterations. A core resource object is also related to a members resource collection which contains one or more member resource objects representing users that are afforded various levels of access to the core resource object . Respective member resource objects are related to one or more identity objects which provide additional information about the member represented by the member resource objects . Finally a core resource object is also related to a data feeds resource collection which contains zero or more data feed resource objects representing various collections of related data entries e.g. collections of related user objects such as songs in a music album. A data feed resource object is respectively related to a data entries resource collection of data entry resource objects . A data feed resource object is also related to a roles collection of role objects representing the access privileges extended to various users with respect to the data feed resource object accordingly the role objects are related to one or more member resource objects representing the users occupying such roles.

The exemplary object hierarchy schema of therefore presents an exemplary organization of the object types illustrated in in such a manner as to represent the various and sundry data objects comprising a typical computer system. An object hierarchy such as the exemplary object hierarchy in the scenario of may be modeled after the exemplary object hierarchy schema and may be hosted by a server such as the computing environment host which may apply a set of services to the objects of the object hierarchy in order to alter and maintain the computing environment. The object hierarchy may also be deployed to one or more devices such as a cellphone device a personal notebook computer and a public workstation that are configured to receive object hierarchies modeled after the exemplary object hierarchy schema of and may therefore render the computing environment represented thereby in a consistent manner.

It may be appreciated that the formulation of an object hierarchy schema may be used to create an instance of an object hierarchy that represents a computing environment. Accordingly illustrated an exemplary method of representing a computing environment wherein the exemplary method involves representing the computing environment as an object hierarchy organized according to an object hierarchy schema such as the exemplary object hierarchy schema of . The exemplary method of begins at and involves representing the computing environment as an object hierarchy comprising a mesh object describing the computing environment. The mesh object in turn comprises at least one profile resource object a storage services collection of storage service objects an applications resource collection of application resource objects a device resources collection of device resource objects a news items resource collection of news item resource objects and a core objects resource collection of core resource objects. Respective core resource objects in turn comprise a mappings resource collection of mapping resource objects relating the core object to at least one device object an activities resource collection of activity resource objects a members resource collection of member resource objects relating the core object to at least one identity object and a data feeds resource collection of data feed resource objects. Finally respective data feed resource objects comprise a data entries resource collection of data entry resource objects and a roles resource collection of role resource objects relating the data feed resource objects to a member resource object of the core resource object. By organizing and interrelating the objects of the object hierarchy in this manner the exemplary method achieves the representation of the computing environment in a deployable manner and so ends at .

Object hierarchy schemas devised as discussed herein such as the exemplary object hierarchy schema of may be implemented with variations in many aspects. Some variations may present additional advantages and or reduce disadvantages with respect to other variations of these and other techniques. Such variations may be included alone or in combination with other variations in embodiments of these techniques such as the exemplary method of in furtherance of such additional advantages and or reduced disadvantages.

A second aspect that may vary among implementations of these techniques relates to the manner of storing the objects of an object hierarchy organized according to an object hierarchy schema. The object hierarchy schema described herein may be embodied in many models of object hierarchies. Some exemplary embodiments are illustrated in each illustrating the storage of objects representing a person having properties Fname and Lname a device having property DeviceID and an application having properties Title and Binary the latter comprising the contents of an executable binary. As a first example the object hierarchy schema may be manifested as a set of objects in an object oriented language such as C wherein objects are instantiated from classes which are in turn defined as well typed collections of named properties and methods. In this model a set of classes may be defined and objects may be instantiated from each class to represent an instance of the type of object modeled by the class. For instance a class type may be defined for representing a person and the class may be instantiated as a first class instance Person 1 representing a first person David Smith and a second class instance Person 2 representing a second person John Lee . As a second example the object hierarchy schema may be manifested as a set of objects stored in a data store such as a relational database. Each type of object may be stored in a particular relational table that is structured according to the properties of the object. For instance a table may be structured to store representations of various persons and may contain a first record Person 1 representing a first person David Smith and a second record Person 2 representing a second person John Lee . As a third example the objects of the object hierarchy may be modeled after the objects of the object hierarchy schema but may be stored in a structure agnostic manner that provides a dictionary of property names and values. A tuple system may be utilized wherein an object of any name may be declared as an arbitrary set of key value tuples. For instance representations of people may be stored as a first two tuple Person 1 representing a first person David Smith and a second two tuple Person 2 representing a second person John Lee . These and other embodiments of an object hierarchy schema may be devised by those of ordinary skill in the art while implementing the techniques discussed herein.

A second aspect that may vary among implementations of these techniques relates to the formulation of the object hierarchy schema in a manner that promotes extensibility of these object types and or the addition of new object types. The object types illustrated in may be fully adequate for representing many or all of the objects of a computing environment. However the exemplary object hierarchy schema object set illustrated in is not presented as an exhaustive list of object types that may be defined and incorporated in the object hierarchy schema. Various embodiments of the object hierarchy schema may include and define other object types in addition to specialized from and or as minor alterations of the object types illustrated in . Moreover some embodiments of the object hierarchy schema may permit other types of objects to be stored in object hierarchies organized thereby. The object hierarchy schema may therefore be devised as an extensible object system wherein objects may be created in the object hierarchy according to new object types and object types may be extended with new properties. As a first example completely new types of objects may be devised by various users and inserted into the object hierarchy. As a second example a user may wish to associate metadata with objects in order to indicate objects having a semantic relationship. This metadata may supplement the objects of the object hierarchy with information of value to the user and the object hierarchy schema may be devised in such a manner that the metadata does not interfere with the representation of the objects in an object hierarchy.

In furtherance of the extensibility of the object hierarchy schema respective objects of the object hierarchy may be specified and stored according to a recursable base representation format wherein the components of an object may be represented in a basic manner. For instance it may be recognized that objects typically contain three types of data elements atoms single units of data such as a number or a character records collections of single units of data operating together and sequences aggregations of elements. A record generally denotes a set of elements that function together indivisibly as a representation such as the numbers 7 4 and 1776 together representing the date Jul. 4 1776 whereas a sequence denotes a divisible set of items such as 2 3 5 and 7 comprising a subset of the prime numbers. Moreover the grammar may be devised with recursion which may permit the nesting of certain kinds of elements e.g. sequences of sequences or a record containing a sequence as one element of the record. By organizing objects in this manner the object hierarchy schema may permit the representation of objects of known object types such as those illustrated in as well as the representation of objects of unknown object types as and also the extension of known object types with new information such as user defined metadata. Those of ordinary skill in the art may be able to devise many extensible object hierarchy schemas and formats thereof while implementing the techniques discussed herein.

A third aspect that may vary among implementations of these techniques relates to the addressing model through which the objects of the object hierarchy may be identified. The addressing model may be advantageously selected to reflect the hierarchical arrangements of the objects comprising the object hierarchy i.e. if a first object is hierarchically subordinate to a second object the address for the first object is hierarchically subordinate to the address for the second object. The addressing model may also be advantageously selected to designate at most one object for each address and such that an object remains addressable at a particular address until and unless the object changes locations in the object hierarchy or is removed. In some embodiments of object hierarchy schemas the addressing model may be devised such that respective objects are available at a single address such that a first object available at a first address is de facto a different object as compared with a second object available at a second address. In other embodiments of object hierarchy schemas an object may be accessible at two or more addresses. As one example an object may have both a hierarchical address in an object hierarchy and also a globally distinctive address through which the object may be distinctively identified regardless of its position in the object hierarchy. For instance the objects of the object hierarchy may be assigned globally unique identifiers GUIDs and may be accessed either according to one or more hierarchical addresses in the object hierarchy or non hierarchically according to its GUID. Thus an object representing contact information for John Lee may be designated a GUID of 0xF451D3E0 upon creation and may be accessible either through a hierarchical location and name e.g. Contacts JohnLee or through its GUID e.g. GUIDs F451D3E0 . Those of ordinary skill in the art may devise many addressing models for object hierarchy schemas while implementing the techniques discussed herein.

One such addressing model that may be advantageous involves a hierarchical addressing model that defines at most one object of a resource object type for respective addresses of an object hierarchy. This addressing model may be applied to an object hierarchy schema comprising object types such as illustrated in the exemplary object hierarchy schema object set of wherein many object types derive from a base Resource object type . Any such object derived therefrom may be ascribed a single hierarchically oriented address in the object hierarchy conversely objects that do not derive from the Resource object type may not be available through the addressing model. More particularly the hierarchical addressing model may be defined according to a uniform resource identifier URI hierarchical addressing model. URIs are typically defined according to the following syntax 

This addressing model may be advantageous in several aspects. First an object hierarchy that is addressable in this manner may be hosted by a common webserver even if the webserver is not particularly configured to store objects of an object hierarchy representing a computing environment. Second object accesses specified in this manner may be more easily handled by networking hardware e.g. firewalls and routers that are predominantly configured to handle URI based requests. Third an object hierarchy that is addressable in this manner may be represented according to a representational state transfer RESTful interface wherein the objects of the object hierarchy may be operated upon through a constrained set of well defined operations e.g. the common HTTP methods PUT GET POST and DELETE may be wholly adequate for enabling the common verbs Create Read Update and Delete for accessing the objects of an object hierarchy representing a computing environment. Other advantages may be provided and or other disadvantages reduced as compared with other addressing models for various object hierarchy schemas.

A fourth aspect that may vary among implementations of these techniques relates to the components of the known object types defined in the object hierarchy schema. The exemplary object hierarchy schema object set illustrated in is presented as neither an exhaustive list of object types that may be defined and incorporated in the object hierarchy schema nor as a complete set of properties comprising these object types. illustrates an exemplary additional object properties set comprising additional object properties that may be associated with object types of an object hierarchy schema. These additional object properties may be selected alone or in combination with other additional object properties to define further the objects of object hierarchies organized according to the object hierarchy schema which may present additional advantages and or reduce disadvantages with respect to object hierarchy schemas defining object types with different sets of object properties.

As illustrated in the exemplary additional object properties set a Mesh object type may be associated with additional properties including a self link object that specifies an address of the mesh e.g. a partial URI defining the server or source of the mesh such as http mycomputer.com and or a title object that specifies a name for the object hierarchy and the computing environment represented thereby. Both a Resource object type and a Resource Collection object type may be associated with a large range of properties including an authors collection identifying the authors of the resource or resource collection a base address object that specifies the base address e.g. a base URI for a resource or the items contained in a resource collection a categories collection that specifies some user defined categories that describe the resource or resource collection a contributors collection that specifies contributors to the resource or resource collection a copyright object that identifies a copyright statement with respect to the resource or resource collection an identification object such as a globally unique identifier GUID a links collection identifying links e.g. URLs related to the resource or resource collection a self link object that specifies a distinctive address e.g. a URI of the resource or resource object a summary object that contains a textual summary of the resource or resource collection and or a title object that specifies a name for the resource or resource collection.

As further illustrated in the exemplary additional object properties set a Core Object type may be associated with a user data object that contains an arbitrarily assigned set of user data e.g. domain specific metadata associated with the core object. An Application object type may be associated with an application identification object that distinctively identifies the application e.g. an application name a homepage location object that identifies a homepage e.g. a website URL for the application an installed version location that identifies the current version of the application in the object hierarchy e.g. Calculator version 1.2.1.1600 a manifest location object that identifies the location of the application manifest e.g. a URI identifying a resource object in the object hierarchy or a URL identifying a web accessible application manifest and or a manifest version object that identifies the version of the application manifest available at the manifest location. A Data Entry object type may be associated with a parent identification object that indicates a hierarchical parent of the data entry object a synchronization object that contains object synchronization information e.g. an up to date object synchronization indicator the date and time when this data entry was last synchronized with a computing environment host etc. and or a user data object that contains an arbitrarily assigned set of user data associated with the data entry. A Data Feed object type may be associated with a synchronization entries collection comprising a set of synchronization related activities or news items and or a data feed type object that indicates the type of data feed e.g. a collection of images or sounds the components of a multimedia document etc. 

As further illustrated in the exemplary additional object properties set an Activity object type may be associated with an activity type object that describes the type of activity e.g. data entry creation reading updating or deletion and or a maximum age object that defines the maximum useful lifetime of the activity beyond which the activity may represent an obsolete event that is no longer usefully stored and presented to users. A Member object type may be associated with an invitation acceptance indicator object that indicates whether or not an individual invited to become a member of a resource or resource collection has accepted the invitation an invitation expiration indicator object that indicates whether an invitation to become a member of a resource or resource collection has expired an owner indicator object that indicates whether the member is an owner of the resource or resource collection and or a role type object that indicates the type of role occupied by the member with respect to the resource or resource collection e.g. Author Reader etc. A Device object type may be associated with a device type object that describes the general class of devices to which the represented device belongs and or a device online indicator object that indicates whether or not the device is currently accessible to the device currently representing the computing environment. A Mapping object type may be associated with a data feed mappings collection that identifies particular data feeds in a core resource object that are mapped to a device. For instance a device may be mapped to a subset of a core object through an object of the Mapping object type but the mapping may be limited to certain data feeds identified in the data feed mappings collection of the mapping object. A Profile object type may be associated with a name object that represents the name of the user and or an email address object that represents an email address contact for the user. Finally a Role object type may be associated with a creation permission indicator object a deletion permission indicator object a read permission indicator object and or an update permission indicator object that identify the permissions associated with the role and or a role type object that identifies the role type occupied by the user in this role.

The exemplary additional object properties of therefore illustrates some object properties that may be further associated alone or in combination with various object types of an object hierarchy schema. However it may be appreciated that the additional object properties set is not presented as an exhaustive list of object properties that may be associated with various object types of such object hierarchy schemas and that many other object properties may be alternatively or additionally associated with various object types. Those of ordinary skill in the art may be able to include many additional or alternative object properties in the definition of various known object types of an object hierarchy schema while implementing the techniques discussed herein.

Another embodiment of the techniques discussed herein involves a computer readable medium comprising processor executable instructions configured to perform a method of representing a computing environment according to an object hierarchy. An exemplary computer readable medium that may be devised in these ways is illustrated in wherein the implementation comprises a computer readable medium e.g. a CD R DVD R or a platter of a hard disk drive on which is encoded computer readable data . This computer readable data in turn comprises a set of computer instructions configured to operate according to the principles set forth herein. In one such embodiment the processor executable instructions may be configured to perform a method of representing a computing environment according to an object hierarchy such as the exemplary method of . Many such computer readable media may be devised by those of ordinary skill in the art that are configured to operate in accordance with the techniques presented herein.

Although the subject matter has been described in language specific to structural features and or methodological acts it is to be understood that the subject matter defined in the appended claims is not necessarily limited to the specific features or acts described above. Rather the specific features and acts described above are disclosed as example forms of implementing the claims.

As used in this application the terms component module system interface and the like are generally intended to refer to a computer related entity either hardware a combination of hardware and software software or software in execution. For example a component may be but is not limited to being a process running on a processor a processor an object an executable a thread of execution a program and or a computer. By way of illustration both an application running on a controller and the controller can be a component. One or more components may reside within a process and or thread of execution and a component may be localized on one computer and or distributed between two or more computers.

Furthermore the claimed subject matter may be implemented as a method apparatus or article of manufacture using standard programming and or engineering techniques to produce software firmware hardware or any combination thereof to control a computer to implement the disclosed subject matter. The term article of manufacture as used herein is intended to encompass a computer program accessible from any computer readable device carrier or media. Of course those skilled in the art will recognize many modifications may be made to this configuration without departing from the scope or spirit of the claimed subject matter.

Embodiments may be described in the general context of computer readable instructions being executed by one or more computing devices. Computer readable instructions may be distributed via computer readable media discussed below . Computer readable instructions may be implemented as program modules such as functions objects Application Programming Interfaces APIs data structures and the like that perform particular tasks or implement particular abstract data types. Typically the functionality of the computer readable instructions may be combined or distributed as desired in various environments.

In other embodiments device may include additional features and or functionality. For example device may also include additional storage e.g. removable and or non removable including but not limited to magnetic storage optical storage and the like. Such additional storage is illustrated in by storage . In one embodiment computer readable instructions to implement one or more embodiments provided herein may be in storage . Storage may also store other computer readable instructions to implement an operating system an application program and the like. Computer readable instructions may be loaded in memory for execution by processing unit for example.

The term computer readable media as used herein includes computer storage media. Computer storage media includes volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions or other data. Memory and storage are examples of computer storage media. Computer storage media includes but is not limited to RAM ROM EEPROM flash memory or other memory technology CD ROM Digital Versatile Disks DVDs or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can be accessed by device . Any such computer storage media may be part of device .

Device may also include communication connection s that allows device to communicate with other devices. Communication connection s may include but is not limited to a modem a Network Interface Card NIC an integrated network interface a radio frequency transmitter receiver an infrared port a USB connection or other interfaces for connecting computing device to other computing devices. Communication connection s may include a wired connection or a wireless connection. Communication connection s may transmit and or receive communication media.

Device may include input device s such as keyboard mouse pen voice input device touch input device infrared cameras video input devices and or any other input device. Output device s such as one or more displays speakers printers and or any other output device may also be included in device . Input device s and output device s may be connected to device via a wired connection wireless connection or any combination thereof. In one embodiment an input device or an output device from another computing device may be used as input device s or output device s for computing device .

Components of computing device may be connected by various interconnects such as a bus. Such interconnects may include a Peripheral Component Interconnect PCI such as PCI Express a Universal Serial Bus USB firewire IEEE 1394 an optical bus structure and the like. In another embodiment components of computing device may be interconnected by a network. For example memory may be comprised of multiple physical memory units located in different physical locations interconnected by a network.

Those skilled in the art will realize that storage devices utilized to store computer readable instructions may be distributed across a network. For example a computing device accessible via network may store computer readable instructions to implement one or more embodiments provided herein. Computing device may access computing device and download a part or all of the computer readable instructions for execution. Alternatively computing device may download pieces of the computer readable instructions as needed or some instructions may be executed at computing device and some at computing device .

Various operations of embodiments are provided herein. In one embodiment one or more of the operations described may constitute computer readable instructions stored on one or more computer readable media which if executed by a computing device will cause the computing device to perform the operations described. The order in which some or all of the operations are described are not to be construed as to imply that these operations are necessarily order dependent. Alternative ordering will be appreciated by one skilled in the art having the benefit of this description. Further it will be understood that not all operations are necessarily present in each embodiment provided herein.

Moreover the word exemplary is used herein to mean serving as an example instance or illustration. Any aspect or design described herein as exemplary is not necessarily to be construed as advantageous over other aspects or designs. Rather use of the word exemplary is intended to present concepts in a concrete fashion. As used in this application the term or is intended to mean an inclusive or rather than an exclusive or . That is unless specified otherwise or clear from context X employs A or B is intended to mean any of the natural inclusive permutations. That is if X employs A X employs B or X employs both A and B then X employs A or B is satisfied under any of the foregoing instances. In addition the articles a and an as used in this application and the appended claims may generally be construed to mean one or more unless specified otherwise or clear from context to be directed to a singular form.

Also although the disclosure has been shown and described with respect to one or more implementations equivalent alterations and modifications will occur to others skilled in the art based upon a reading and understanding of this specification and the annexed drawings. The disclosure includes all such modifications and alterations and is limited only by the scope of the following claims. In particular regard to the various functions performed by the above described components e.g. elements resources etc. the terms used to describe such components are intended to correspond unless otherwise indicated to any component which performs the specified function of the described component e.g. that is functionally equivalent even though not structurally equivalent to the disclosed structure which performs the function in the herein illustrated exemplary implementations of the disclosure. In addition while a particular feature of the disclosure may have been disclosed with respect to only one of several implementations such feature may be combined with one or more other features of the other implementations as may be desired and advantageous for any given or particular application. Furthermore to the extent that the terms includes having has with or variants thereof are used in either the detailed description or the claims such terms are intended to be inclusive in a manner similar to the term comprising. 

