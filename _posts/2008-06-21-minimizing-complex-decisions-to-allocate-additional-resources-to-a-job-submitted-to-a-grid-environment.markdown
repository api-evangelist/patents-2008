---

title: Minimizing complex decisions to allocate additional resources to a job submitted to a grid environment
abstract: At least one decision to allocate additional resources to at least one previously submitted job is stored in a decision cache, wherein said the least one decision is stored according to at least one characteristic of the at least one previously submitted job. When another job is submitted to the grid environment needs additional resources, the characteristic of the currently submitted job is compared with the characteristics of previous submitted jobs. If there is a match, then the previously made decision associated with the matching characteristic controls allocation of additional resources for the currently submitted job, such that complex decision making for allocation of additional resources is minimized by reusing previously stored decisions to allocate additional resources.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08387058&OS=08387058&RS=08387058
owner: International Business Machines Corporation
number: 08387058
owner_city: Armonk
owner_country: US
publication_date: 20080621
---
This application is a continuation of commonly assigned U.S. patent application Ser. No. 10 756 134 now U.S. Pat. No. 7 406 691 filed Jan. 13 2004 which is hereby incorporated herein by reference.

The present invention relates in general to improved performance in distributed systems and in particular to a method for minimizing complex decision making when allocating additional resources to a job submitted to a first selection of resources in a grid environment. Still more particularly the present invention relates to storing previous decisions to allocate additional resources in a grid environment according to characteristics of the jobs for which decisions were made such that the stored decisions can be reused for subsequent jobs with similar characteristics to minimize complex decisions when allocating additional resources in a grid environment.

Ever since the first connection was made between two computer systems new ways of transferring data resources and other information between two computer systems via a connection continue to develop. In a typical network architecture when two computer systems are exchanging data via a connection one of the computer systems is considered a client sending requests and the other is considered a server processing the requests and returning results. In an effort to increase the speed at which requests are handled server systems continue to expand in size and speed. Further in an effort to handle peak periods when multiple requests are arriving every second server systems are often joined together as a group and requests are distributed among the grouped servers. Multiple methods of grouping servers have developed such as clustering multi system shared data sysplex environments and enterprise systems. With a cluster of servers one server is typically designated to manage distribution of incoming requests and outgoing responses. The other servers typically operate in parallel to handle the distributed requests from clients. Thus one of multiple servers in a cluster may service a client request without the client detecting that a cluster of servers is processing the request.

Typically servers or groups of servers operate on a particular network platform such as Unix or some variation of Unix and provide a hosting environment for running applications. Each network platform may provide functions ranging from database integration clustering services and security to workload management and problem determination. Each network platform typically offers different implementations semantic behaviors and application programming interfaces APIs .

Merely grouping servers together to expand processing power however is a limited method of improving efficiency of response times in a network. Thus increasingly within a company network rather than just grouping servers servers and groups of server systems are organized as distributed resources. There is an increased effort to collaborate share data share cycles and improve other modes of interaction among servers within a company network and outside the company network. Further there is an increased effort to outsource nonessential elements from one company network to that of a service provider network. Moreover there is a movement to coordinate resource sharing between resources that are not subject to the same management system but still address issues of security policy payment and membership. For example resources on an individual s desktop are not typically subject to the same management system as resources of a company server cluster. Even different administrative groups within a company network may implement distinct management systems.

The problems with decentralizing the resources available from servers and other computing systems operating on different network platforms located in different regions with different security protocols and each controlled by a different management system has led to the development of Grid technologies using open standards for operating a grid environment. Grid environments support the sharing and coordinated use of diverse resources in dynamic distributed virtual organizations. A virtual organization is created within a grid environment when a selection of resources from geographically distributed systems operated by different organizations with differing policies and management systems is organized to handle a job request.

In addition to decentralizing resources available in a grid environment to improve efficiency of network transactions capacity on demand resources are gaining more presence. An on demand resource is one that is accessible to a system but is operational only when a fee is paid or an electronic key to open the resource is provided.

An important attribute of a grid environment that distinguishes a grid environment from merely that of another management system is quality of service maintained across multiple diverse sets of resources. A grid environment does more than just provide resources a grid environment provides resources with a particular level of service including response time throughput availability security and the co allocation of multiple resource types to meet complex user demands. A limitation of current grid technology however is that maintenance of agreed to quality of service from grid resources requires human intervention. For example human intervention is relied on in a grid environment to decide when to allocate and deallocate resources to reach specified performance levels. Further manual intervention is relied on in a grid environment to suspend low priority jobs or move jobs to other selections of resources within the grid environment. Manual intervention is limiting on the efficiency and expansion of grid environments because it is by nature inefficient and prone to error.

As a result of developing grid environments and on demand resources a single system may have access to multiple discrete sets of resources. For example first a system typically accesses those components within the system that provide a primary set of local resources. Next a system may access resources from other systems within a local or enterprise network. Further a system may access and activate capacity on demand resources either from within the system or from a system accessible via a network. Finally a system may access grid resources accessible through participation in a grid environment.

With the availability of multiple sets of discrete resources an additional limitation of current grid technology is that human intervention is required to manage the flow between each of these discrete sets of resources to determine whether use of grid resources is required. Further human intervention is required to determine whether to activate capacity on demand resources first or go directly to grid resources. Thus a disadvantage of current grid technology is that when a job request is executing within a set of resources that become unable to handle performance requirements for the job human intervention is required to decide whether to schedule the job into a grid environment or other set of resources. Given the quality of service requirements within a grid environment it would first be advantageous to make decisions about the flow of a job through discrete sets of resources without requiring human intervention.

A common feature in network computing is that the same type of job may be requested from the same client system or multiple client systems within a short period of time. If the first time the job is received a complex decision has to be made to manage the flow of the job between discrete sets of resources it would be advantageous to reuse that complex decision for other similar jobs. Therefore in view of the foregoing it would be advantageous to provide a method system and program for improving the efficiency of the use of a hierarchy of resources in a grid environment by storing complex decisions about the flow of a job such that the complex decisions may be reused for future jobs of the same type.

In view of the foregoing the invention provides for minimizing complex decision making when allocating additional resources to a job submitted to a first selection of resources in a grid environment and to storing previous decisions to allocate additional resources in a grid environment according to characteristics of the jobs for which decisions were made such that the stored decisions can be reused for subsequent jobs with similar characteristics to minimize complex decisions when allocating additional resources in a grid environment.

In one embodiment a computer system for minimizing complex decision making when allocating additional resources to a job submitted in a grid environment includes one or more processors and one or more computer readable tangible storage devices. The computer system includes program instructions stored on at least one of the one or more storage devices for execution by at least one of said one or more processors for receiving by a grid management system a plurality of separate jobs from a plurality of client systems over a network. The computer system includes program instructions stored on at least one of the one or more storage devices for execution by at least one of said one or more processors for managing by said grid management system distribution of each of said plurality of separate jobs to a separate selection of at least one resource of a grid environment comprising a plurality of computing stems each comprising at least one of said at least resource and communicatively connected over a network through said grid management system to share each said at least one resource through at least one web service layer atop at least one grid service layer implemented within an open grid services architecture. The computer system includes program instructions stored on at least one of the one or more storage devices for execution by at least one of said one or more processors responsive to said grid management system distributing each of said plurality of separate jobs to said separate selection of said at least one resource for triggering by said at least one grid service layer at least one resource monitor to monitor a performance of said separate selection of said at least one resource in handling each of said plurality of separate jobs to meet a separate performance agreement specified for each of said plurality of separate jobs and for triggering by said at least one grid service layer at least one decision controller from said at least one grid service layer to determine whether to allocate additional resources to each of said plurality of separate jobs to meet at least one said separate performance agreement specified for at least one of said plurality of separate jobs. The computer system includes program instructions stored on at least one of the one or more storage devices for execution by at least one of said one or more processors responsive to said at least one decision controller deciding to allocate additional resources to at least one particular job from among said plurality of separate jobs for storing in a memory medium within said grid management system a record of at least one decision to allocate said additional resources from among said at least one resource to said at least one particular job wherein said record of said at least one decision is specified by an amount of said at least one resource available for allocation and at least one characteristic of said at least one particular job wherein said at least one characteristic of said at least one particular job comprises a system state detected by said at least one resource monitor of a particular separate selection of said at least one resource to which said at least one particular job was submitted and a particular priority of said at least one particular job to receive said additional resources from among said at least one resource. The computer system includes program instructions stored on at least one of the one or more storage devices for execution by at least one of said one or more processors responsive to said at least one decision controller determining whether to allocate said additional resources to a currently submitted job from among said plurality of separate jobs for comparing by said grid management system at least one characteristic of said currently submitted job from among said plurality of separate jobs qualifying for said additional resources from said at least one resource of said grid environment with said at least one characteristic of said at least one particular job in said record in said memory medium wherein said at least one characteristic of said currently submitted job comprises a system state of a current separate selection of said at least one resource to which said currently submitted job was submitted and a current priority of said currently submitted job to receive said additional resources from among said at least one resource. The computer system includes program instructions stored on at least one of the one or more storage devices for execution by at least one of said one or more processors responsive to said at least one characteristic of said currently submitted job matching said at least one characteristic of said at least one particular job in said record for applying by said grid management system said record of said at least one decision associated with said matching job characteristics to control allocation of said additional resources for said currently submitted job such that complex decision making for allocation of additional resources is minimized by reusing previously stored decisions to allocate additional resources.

In another embodiment a computer program product for minimizing complex decision making when allocating additional resources to a job submitted in a grid environment comprises one or more computer readable tangible storage devices. The computer program product includes program instructions stored on at least one of the one or more storage devices to receive a plurality of separate jobs from a plurality of client systems over a network at a grid management system. The computer program product includes program instructions stored on at least one of the one or more storage devices to manage distribution from said grid management system of each of said plurality of separate jobs to a separate selection of at least one resource of a grid environment comprising a plurality of computing systems each comprising at least one of said at least resource and communicatively connected over a network through said grid management system to share each said at least one resource through at least one web service layer atop at least one grid service layer implemented within an open grid services architecture. The computer program product includes program instructions stored on at least one of the one or more storage devices responsive to said grid management system distributing each of said plurality of separate jobs to said separate selection of said at least one resource to trigger at least one resource monitor from said at least one grid service layer to monitor a performance of said separate selection of said at least one resource in handling each of said plurality of separate jobs to meet a separate performance agreement specified for each of said plurality of separate jobs and to trigger at least one decision controller from said at least one grid service layer to determine whether to allocate additional resources to each of said plurality of separate jobs to meet at least one said separate performance agreement specified for at least one of said plurality of separate jobs. The computer program product includes program instructions stored on at least one of the one or more storage devices responsive to said at least one decision controller deciding to allocate said additional resources to at least one particular job from among said plurality of separate jobs to store in at least one memory medium of said grid management system a record of at least one decision to allocate said additional resources from among said at least one resource to said at least one particular job wherein said record of said at least one decision is specified by an amount of said at least one resource available for allocation and at least one characteristic of said at least one particular job wherein said at least one characteristic of said at least one particular job comprises a system state detected by said at least one resource monitor of a particular separate selection of said at least one resource to which said at least one particular job was submitted and a particular priority of said at least one particular job to receive said additional resources from among said at least one resource. The computer program product includes program instructions stored on at least one of the one or more storage devices responsive to said at least one decision controller determining whether to allocate said additional resources to a currently submitted job from among said plurality of separate jobs to compare by said grid management system at least one characteristic of said currently submitted job from among said plurality of separate jobs qualifying for said additional resources from said at least one resource of said grid environment with said at least one characteristic of said at least one particular job in said record in said at least one memory medium wherein said at least one characteristic of said currently submitted job comprises a system state of a current separate selection of said at least one resource to which said currently submitted job was submitted and a current priority of said currently submitted job to receive said additional resources from among said at least one resource. The computer program product includes program instructions stored on at least one of the one or more storage devices responsive to said at least one characteristic of said currently submitted job matching said at least one characteristic of said at least one particular job in said record to apply by said grid management system said record of said at least one decision associated with said matching job characteristics to control allocation of additional resources for said currently submitted job such that complex decision making for allocation of said additional resources is minimized by reusing previously stored decisions to allocate additional resources.

Referring now to the drawings and in particular to there is depicted one embodiment of a computer system which may be implemented in a grid environment and in which the present invention may be implemented. As will be further described the grid environment includes multiple computer systems managed to provide resources. Additionally as will be further described the present invention may be executed in a variety of computer systems including a variety of computing systems mobile systems and electronic devices operating under a number of different operating systems managed within a grid environment.

In one embodiment computer system includes a bus or other device for communicating information within computer system and at least one processing device such as processor coupled to bus for processing information. Bus preferably includes low latency and higher latency paths that are connected by bridges and adapters and controlled within computer system by multiple bus controllers. When implemented as a server system computer system typically includes multiple processors designed to improve network servicing power.

Processor may be a general purpose processor such as IBM s PowerPC processor that during normal operation processes data under the control of operating system and application software accessible from a dynamic storage device such as random access memory RAM and a static storage device such as Read Only Memory ROM . The operating system may provide a graphical user interface GUI to the user. In a preferred embodiment application software contains machine executable instructions that when executed on processor carry out the operations depicted in the flowcharts of and others described herein. Alternatively the steps of the present invention might be performed by specific hardware components that contain hardwired logic for performing the steps or by any combination of programmed computer components and custom hardware components.

The present invention may be provided as a computer program product included on a machine readable medium having stored thereon the machine executable instructions used to program computer system to perform a process according to the present invention. The term machine readable medium as used herein refers to any data storage medium that participates in providing instructions to processor or other components of computer system for execution. Such a data storage medium may take many forms including but not limited to non volatile media and volatile media. Common forms of non volatile media include for example a floppy disk a flexible disk a hard disk magnetic tape or any other magnetic medium a compact disc ROM CD ROM or any other optical medium punch cards or any other physical medium with patterns of holes a programmable ROM PROM an erasable PROM EPROM electrically EPROM EEPROM a flash memory any other memory chip or cartridge or any other data storage medium from which computer system can read and which is suitable for storing instructions. In the present embodiment an example of a non volatile medium is mass storage device which as depicted is an internal component of computer system but will be understood to also be provided by an external device. Volatile media include dynamic memory such as RAM .

Moreover the present invention may be downloaded as a computer program product wherein the program instructions may be transferred from a remote virtual resource such as a virtual resource to requesting computer system via a network link e.g. a modem or network connection to a communications interface coupled to bus . Virtual resource may include a virtual representation of the resources accessible from a single system or systems wherein multiple systems may each be considered discrete sets of resources operating on independent platforms but coordinated as a virtual resource by a grid manager. Communications interface provides a two way data communications coupling to network link that may be connected for example to a local area network LAN wide area network WAN or an Internet Service Provider ISP that provide access to network . In particular network link may provide wired and or wireless network communications to one or more networks such as network through which use of virtual resources such as virtual resource is accessible as provided within a grid environment . Grid environment may be part of multiple types of networks including a peer to peer network or may be part of a single computer system such as computer system .

Moreover the present invention may be downloaded as a computer program product wherein the program instructions may be transferred from a remote virtual resource such as a virtual resource to requesting computer system by way of data signals embodied in a carrier wave or other propagation medium via a network link e.g. a modem or network connection to a communications interface coupled to bus . Virtual resource may include a virtual representation of the resources accessible from a single system or systems wherein multiple systems may each be considered discrete sets of resources operating on independent platforms but coordinated as a virtual resource by a grid manager. Communications interface provides a two way data communications coupling to network link that may be connected for example to a local area network LAN wide area network WAN or an Internet Service Provider ISP that provide access to network . In particular network link may provide wired and or wireless network communications to one or more networks such as network through which use of virtual resources such as virtual resource is accessible as provided by a grid management system . Grid management system may be part of multiple types of networks including a peer to peer network or may be part of a single computer system such as computer system .

As one example network may refer to the worldwide collection of networks and gateways that use a particular protocol such as Transmission Control Protocol TCP and Internet Protocol IP to communicate with one another. Network uses electrical electromagnetic or optical signals that carry digital data streams. The signals through the various networks and the signals on network link and through communication interface which carry the digital data to and from computer system are exemplary forms of carrier waves transporting the information. It will be understood that alternate types of networks combinations of networks and infrastructures of networks may be implemented.

When implemented as a server system computer system typically includes multiple communication interfaces accessible via multiple peripheral component interconnect PCI bus bridges connected to an input output controller. In this manner computer system allows connections to multiple network computers.

Additionally although not depicted multiple peripheral components and internal external devices may be added to computer system connected to multiple controllers adapters and expansion slots coupled to one of the multiple levels of bus . For example a display device audio device keyboard or cursor control device may be added as a peripheral component.

Those of ordinary skill in the art will appreciate that the hardware depicted in may vary. Furthermore those of ordinary skill in the art will appreciate that the depicted example is not meant to imply architectural limitations with respect to the present invention.

With reference now to a block diagram illustrates one embodiment of the general types of components within a grid environment. In the present example the components of a grid environment include a client system interfacing with a grid management system which interfaces with server clusters servers workstations and desktops data storage systems and networks . For purposes of illustration the network locations and types of networks connecting the components within grid environment are not depicted. It will be understood however that the components within grid environment may reside atop a network infrastructure architecture that may be implemented with multiple types of networks overlapping one another. Network infrastructure may range from multiple large enterprise systems to a peer to peer system to a single computer system. Further it will be understood that the components within grid environment are merely representations of the types of components within a grid environment. A grid environment may simply be encompassed in a single computer system or may encompass multiple enterprises of systems.

The central goal of a grid environment such as grid environment is organization and delivery of resources from multiple discrete systems viewed as virtual resource . Client system server clusters servers workstations and desktops data storage systems networks and the systems creating grid management system may be heterogeneous and regionally distributed with independent management systems but enabled to exchange information resources and services through a grid infrastructure enabled by grid management system . Further server clusters servers workstations and desktops data storage systems and networks may be geographically distributed across countries and continents or locally accessible to one another.

In the example client system interfaces with grid management system . Client system may represent any computing system sending requests to grid management system . In particular client system may send job requests and jobs to grid management system . Further while in the present embodiment client system is depicted as accessing grid environment with a request in alternate embodiments client system may also operate within grid environment .

While the systems within virtual resource are depicted in parallel in reality the systems may be part of a hierarchy of systems where some systems within virtual resource may be local to client system while other systems require access to external networks. Additionally it is important to note that systems depicted within virtual resources may be physically encompassed within client system .

One function of grid management system is to manage job requests and jobs from client system and control distribution of each job to a selection of computing systems of virtual resource for use of particular resources at the available computing systems within virtual resource . From the perspective of client system however virtual resource handles the request and returns the result without differentiating between which computing system in virtual resource actually performed the request.

To implement grid environment grid management system facilitates grid services. Grid services may be designed according to multiple architectures including but not limited to the Open Grid Services Architecture OGSA . In particular grid management system refers to the management environment which creates a grid by linking computing systems into a heterogeneous network environment characterized by sharing of resources through grid services.

Grid environment as managed by grid management system may provide a single type of service or multiple types of services. For example computational grids scavenging grids and data grids are example categorizations of the types of services provided in a grid environment. Computational grids may manage computing resources of high performance servers. Scavenging grids may scavenge for CPU resources and data storage resources across desktop computer systems. Data grids may manage data storage resources accessible for example to multiple organizations or enterprises. It will be understood that a grid environment is not limited to a single type of grid categorization.

Referring now to a block diagram illustrates one example of an architecture that may be implemented in a grid environment. As depicted an architecture includes multiple layers of functionality. As will be further described the present invention is a process which may be implemented in one or more layers of an architecture such as architecture which is implemented in a grid environment such as the grid environment described in . It is important to note that architecture is just one example of an architecture that may be implemented in a grid environment and in which the present invention may be implemented. Further it is important to note that multiple architectures may be implemented within a grid environment.

Within architecture first a physical and logical resources layer organizes the resources of the systems in the grid. Physical resources include but are not limited to servers storage media and networks. The logical resources virtualize and aggregate the physical layer into usable resources such as operating systems processing power memory I O processing file systems database managers directories memory managers and other resources.

Next a web services layer provides an interface between grid services and physical and logical resources . Web services layer implements service interfaces including but not limited to Web Services Description Language WSDL Simple Object Access Protocol SOAP and extensible mark up language XML executing atop an Internet Protocol IP or other network transport layer. Further the Open Grid Services Infrastructure OSGI standard builds on top of current web services by extending web services to provide capabilities for dynamic and manageable Web services required to model the resources of the grid. In particular by implementing OGSI standard with web services grid services designed using OGSA are interoperable. In alternate embodiments other infrastructures or additional infrastructures may be implemented a top web services layer .

Grid services layer includes multiple services. For example grid services layer may include grid services designed using OGSA such that a uniform standard is implemented in creating grid services. Alternatively grid services may be designed under multiple architectures. Grid services can be grouped into four main functions. It will be understood however that other functions may be performed by grid services.

First a resource management service manages the use of the physical and logical resources. Resources may include but are not limited to processing resources memory resources and storage resources. Management of these resources includes receiving job requests scheduling job requests distributing jobs and managing the retrieval of the results for jobs. Resource management service preferably monitors resource loads and distributes jobs to less busy parts of the grid to balance resource loads and absorb unexpected peaks of activity. In particular a user may specify preferred performance levels so that resource management service distributes jobs to maintain the preferred performance levels within the grid.

Second information services manages the information transfer and communication between computing systems within the grid. Since multiple communication protocols may be implemented information services preferably manages communications across multiple networks utilizing multiple types of communication protocols.

Third a data management service manages data transfer and storage within the grid. In particular data management service may move data to nodes within the grid where a job requiring the data will execute. A particular type of transfer protocol such as Grid File Transfer Protocol GridFTP may be implemented.

Finally a security service applies a security protocol for security at the connection layers of each of the systems operating within the grid. Security service may implement security protocols such as Open Secure Socket Layers SSL to provide secure transmissions. Further security service may provide a single sign on mechanism so that once a user is authenticated a proxy certificate is created and used when performing actions within the grid for the user.

Multiple services may work together to provide several key functions of a grid computing system. In a first example computational tasks are distributed within a grid. Data management service may divide up a computation task into separate grid services requests of packets of data that are then distributed by and managed by resource management service . The results are collected and consolidated by data management system . In a second example the storage resources across multiple computing systems in the grid are viewed as a single virtual data storage system managed by data management service and monitored by resource management service .

An applications layer includes applications that use one or more of the grid services available in grid services layer . Advantageously applications interface with the physical and logical resources via grid services layer and web services such that multiple heterogeneous systems can interact and interoperate.

With reference now to a block diagram of a system operating within the grid environment from the perspective of the grid management system is depicted in accordance with the method system and program of the present invention. As illustrated in a computer system includes many hardware components. As part of a grid environment however these hardware components are viewed as resources. For example a system includes an application resource two CPU resources and a memory resource and a storage resource . The resources in system are typical of the types of resources when viewed within the grid environment however in an alternate embodiment other types of resources may be provided. Further the resources in system may be physically located within a single computer system or distributed across multiple computer systems connected by a network for example

As part of the grid management system described in a grid manager and router GM provides the interface between the resources of system and client systems sending requests.

In particular a resource monitor within GM monitors the working status of each of the resources available in system . GM preferably sends status reports to other grid managers and routers within the grid environment to indicate the availability of the resources in system . Additionally status reports may describe the computer hardware operating system and resources of system . Status reports may be generated for example when system joins or leaves the grid environment when a threshold is detected at predetermined time intervals and on specific predetermined events including but not limited to a hardware fault or a portion of a service failing.

Referring now to an illustrative representation depicts one embodiment of the logical infrastructure of a grid environment in which the present invention may be implemented. While depicts an example of general components of a grid environment in the present figure an example of how the general components are viewed logically within a grid environment is illustrated in a grid environment . In particular the grid management system functions are logically dispersed into multiple GMs such as GM GM and GM . Further the virtual resource is logically dispersed into multiple resources RSs such as RS RS RS RS RS and RS . It is important to note that a resource may not be a direct representation of a physical resource but rather a logical representation of one or more physical resources and or groups of physical resources.

In the example client system sends a job request to GM . GM searches for resources available to handle the job specified in the job request. In particular GM checks whether RS and RS can handle the job specified in the job request and may send queries to other GMs such as GM or GM . GMs and return reports on the availability of resources to handle the job request.

For purposes of illustrations RS and RS are considered local resources or resources within the same discrete set of resources to which jobs from client system are submitted. In the examples following when RS and are not meeting performance requirements for a job from client system then additional resources may be allocated including other resources within the same discrete set of resources capacity on demand resources resources from internal grids and finally resources from external grids.

More specifically in the example GM RS and RS are part of one grid infrastructure grid A operated by a first business that provides a first specified number of grid services for a first specified price. Then GM RS and RS are part of another grid infrastructure grid B operated by a second business that provides a second specified number of grid services for a second specified price. When GM sends the job request to GM and GM the each GM preferably reports whether the job request can be handled and a price for handling the request. In relation to client system grids A and B may be internal grids operating within the same enterprise system as client system or external grids.

After receiving reports on the availability of resources GM collects the options for handling the job and returns the options to client system . Client system may then decide to select a preferred option and send the job to have handled according to the selected option. GM manages the return of the results of the job to client system .

The resources utilized in the option selected by client system form a virtual organization for handling the job. For example if client system selects an option to handle the job based on the option returned from GM then a virtual organization may be formed to process the job which would include GM GM RS and RS . According to an advantage of the present invention any of the GMs may also automatically allocate additional resources to a job submitted to a first selection of resources. In particular if the resources handling a job do not meet performance specifications then additional resources may be allocated to the virtual organization of resources formed to process the job. These performance specifications may include quality of service specifications compiled from service level objects and agreements.

With reference now to there is depicted a block diagram of a grid manager or router GM including a decision cache that may implement the present invention. As depicted a GM includes a client interface for receiving jobs. Client interface assigns a unique identifier to each job and holds jobs for processing by GM . In particular client interface may require authentication of the client sending the job request before the job is assigned a job identifier and transferred to decision controller .

Once a job request is received at GM GM preferably determines which resources are available for the job submits the job to a selection of resources and monitors the resource availability of multiple levels of resources accessible to GM to determine current usage levels. First a resource monitor preferably monitors the resource availability of multiple levels of resources accessible to GM to determine which are able to handle the job request. Then a decision controller preferably determines resource options to meet performance specification designated for the job request or for the requesting client. In particular decision controller may be required to make complex decisions with respect to job resource options for a particular job request to maintain performance service level agreements with the client sending the job request. For example decision controller may decide when to allocate additional resources to maintain performance service level agreements specified in performance specification for the job request. Advantageously decision controller stores these decisions in decision cache according to identifiers such as system state and job priority.

Once a decision is stored in decision cache decision controller may reuse the decision. Decision cache may implement a data storage format such as a table for storage of decisions with characteristics of the job for which the decision was made. Preferably data is stored in decision cache so that decision controller can compare characteristics of new job requests with stored characteristics of previous job requests and reuse decisions made for previous job requests with the same or similar characteristics. For example the system state and job priority are characteristics that may be stored with a decision and subsequently matched with other jobs. The data storage stored in decision cache may advantageously be stored in secondary locations and may be stored in relational or other media based application so that the data is not lost in the event of a power failure.

Referring now to there is illustrated a high level logic flowchart of a process and program for enhancing grid job submission performance via hierarchical decision caching. The following process may be performed through a grid manager and router or other component of the grid management system. In particular in the logic flowchart complex decisions are made multiple times as a job flows through the layers of resources and ultimately to a selection of resources able to execute the job and meet performance specifications. Advantageously the decisions made for a job request are stored as a system state and decision code in a decision cache so that even if a second similar job is executing back to back with the first the second similar job is more efficiently processed using the predetermined decisions in the decision cache.

As depicted the process starts at block and thereafter proceeds to block . Block depicts defining a job. Next block illustrates scheduling the job. In particular a job may be scheduled according to job requirements and job priority. In the example the job is scheduled for use of processing resources and thus the steps of the process reflect those taken for deciding whether additional processing resources are required for the job and if so acquiring the additional processing resources. It will be understood that in alternate embodiments a job may be scheduled for use of other types of resources including but not limited to memory disk space I O subsystems and networks. Thus in alternate embodiments decisions may be made about acquiring other types of resources. Thereafter block depicts submitting the job to a selection of resources and the process passes to block . In particular considerations for job submission may include but are not limited to operating system type kernel width application threading CPU requirements memory requirements and other factors. In one example of submitting the job into the local client environment a determination is made whether the job is single threaded or multi threaded. If the job is single threaded then the job is queued at one processor. If the job is multi threaded then the job is queued at multiple processors.

Block depicts executing a system performance check. The resource monitor for example may execute the system performance check that surveys the performance of available resources. In particular many factors or a combination of factors may be used to determine system performance including but not limited to the depth of the processor s run queue the amount of memory available the amount of disk space free and the network bandwidth available. Multiple types of performance monitoring tools capable of providing performance related information may be implemented by the resource monitor including but not limited to International Business Machine Corporation IBM Performance Toolbox or invoking an operating system command such as the vmstat command in the UNIX operating system.

Next block illustrates a determination whether additional processing power is required to process the current job. Alternatively a determination may be made whether other additional resources are required for the job. As will be further described in this step requires a determination whether the current resource saturation of the resources handling the job as monitored by the system performance check exceeds predefined thresholds for resource saturation for the job or the client system. In the example if system performance is acceptable then no additional processing power is required and the process passes to block . If additional processing power is required then the process passes to block .

First if no additional processing power is required at block then block illustrates assigning a system state and decision code to the job indicating that no additional processing power was added. In particular when a system state and decision code are assigned to a job then the decision the system state the job priority and the assigned decision code are cached in the decision cache. The system state indicates the resource saturation level of the available grid resources when the decision was made. The decision code indicates the decision made for a particular priority of job for a particular system state. Next block depicts executing the job by sending the job to a selection of available resources and the process ends.

Alternatively if additional processing power is required at block then block depicts a determination whether the job is eligible for additional resources based on the priority of the job or other required qualification. In particular the saturation levels of the resources to which the job is submitted may reach levels that indicate additional processing power is required for processing the job. Not every job however will qualify for the addition of processing power. For example jobs which are non interactive and thus do not require specific performance may not be eligible for access to additional system resources. Further if certain jobs begin to affect the performance of higher priority jobs the job priority of a job may be reduced using tools such as a UNIX nice command. In comparison some jobs may be designated as always valuable and granted broad access to additional resources. If the job is not qualified then the process passes to block . Block illustrates assigning a system state and decision code indicating that no additional processing power was added. Next block depicts suspending the job or continuing to execute the job on the original selection of resources and the process returns to block . Alternatively if at block the job is qualified then the process passes to block .

Block depicts a determination whether the current system state matches a system state in the decision cache according to the job priority. In particular this is a determination whether a decision was previously cached for this type of job operating in the same system performance conditions. If the system state matches then the process passes to block . Block depicts processing the job based on the previously cached decision for the system state and job priority and the process ends. In processing the job based on the previously cached decision in the state table decisions to allocate additional resources are made more efficient. Alternatively if at block the system state does not match then the process passes to block of .

Block illustrates a determination whether capacity on demand processing is available. If capacity on demand processing is available then the process passes to block . Block depicts assigning a system state and decision code indicating that a capacity on demand processor was added. Next block depicts adding the on demand processor and the process returns to block of . Alternatively if at block capacity on demand processing is not available then the process passes to block . Block depicts assigning a system state and decision code indicating that a capacity on demand processor was not added and the process passes to block .

Block depicts a determination whether a local processor is available. If a local processor is available then the process passes to block where a system state and decision code are assigned indicating that a local processor was added. If a local processor is not available then the process passes to block . Block illustrates assigning a system state and decision code indicating that a local processor was not added. Next block depicts submitting the job to the grid for processing. In particular the grid may be an internal or external grid of systems that provide a particular resource or service. Then block illustrates assigning a system state and decision code indicating a grid resource was added and the process ends. In particular although not depicted after the job is submitted to the grid for processing the steps of the process may be repeated locally within a grid to determine which resources are necessary within a grid unit. Further a system state and decision code may be assigned and stored locally within a grid unit.

With reference now to there is depicted a block diagram of a threshold specification process in accordance with the method system and program of the present invention. To implement the process of blocks and described in resource saturation levels are defined in the performance specification such that when performance reaches saturation thresholds decision making is triggered.

In a system performance check is executed at block . The performance check may be performed by the resource monitor surveying the current system load on the available resources including a grid. Then at block a determination is made whether additional processing power is required. The decision process may be performed by the decision controller. To determine whether additional processing power is required the process jumps to block . While the present example is described with reference to determining whether additional processing power is required in alternate embodiments the need for other types of additional resources may be determined. For example in an alternate embodiment in addition to determining whether additional processing power is required the resource scheduler may also determine whether additional memory is required additional storage space is needed or a combination of additional resources is required.

To determine whether additional processing power is required block depicts comparing the real time system loading with preset performance thresholds. The performance thresholds define performance specifications for a particular job a particular client or other entity for which performance specifications are designated. The present performance thresholds are performance specifications that may include quality of service specifications based on service level agreements and objections. A decision logic threshold table provides an example of the types of preset thresholds that may be selected for managing the performance of a grid to maintain expected performance specifications. When the real time system loading is compared with the thresholds in decision logic threshold table the decision subsystem of the resource schedule determines whether additional processing power is required.

Real time system loading is preferably compared with the percentage thresholds in decision logic threshold table . If for example the CPU use is 60 then the system state of 000 is returned and no additional action is available. Thus at block a determination would be returned that no additional process power is required. If however for example the CPU use is 95 then the system state of 100 is returned and the job requires additional processing power. As an additional advantage to the present invention once the system state is established it is also cached in the decision cache such that upon submission of the next job or a repeat request for a resource from the same job a system performance check need not be executed. Rather the cached system state can be used for the next request and a system performance check need only be performed upon submission of a job with a set of requirements different from the job previously submitted.

It is important to note that while the example of decision logic threshold table includes several categories for comparison to determine system state the example is merely illustrative of the types of logical elements that may be used to specify the resource saturation levels of the grid and the actions available to be taken upon reaching a resource saturation level. Further in lieu of a table alternate types of data management systems may be used to implement decision logic.

Referring now to there is illustrated an example of a table used to decide use of resources based on job priority. Referring back to conditional block requires a determination whether a job is eligible for additional processing power. This step requires the decision controller to determine whether the job qualifies for additional resources based on the job priority or other qualifications. The decision controller may make this decision based on specifications such as resource eligibility table which specifies eligibility for additional resource based on the job priority. In particular the decision controller may receive the priority of a job based on input from multiple sources including but not limited to a resource scheduler header data in the job submission stream or another agent that determines job priority.

Resource eligibility table illustrates one example of a method for specifying eligibility for resources based on the job priority. In the example each job is rated with a priority number from 1 to 4. For each job priority rating a particular action is allowed. For example for a job rated with a priority of 1 the job is eligible for unlimited resources. In at conditional block responsive to a determination that the job is rated with a priority of 1 the job would be considered an eligible job. However for a job rated with a priority of 4 at conditional block the job is not considered eligible for additional resources. It will be understood that other methods for specifying the eligibility of a job for resources may also be implemented.

With reference now to there is depicted a block diagram of a decision logic cache table in accordance with the method system and program of the present invention. As illustrated a decision logic cache table records the action executed for the decision code assigned to a system state and job priority. Through use of table as additional jobs flow through the decision controller multiple decision steps are reduced as cache hits to system states and job priorities provide a predefined course. In particular table is an example construction of a decision logical cache table which may be used to store reusable previously made decisions. It will be understood that table is representative of one method in which decision logic may be cached.

In the example where the system state is 000 indicates that no action is to be taken. Thus in previous decisions where the system state was 000 no additional action was taken. Referring back to the first four entries in table represent the decisional process of the path from conditional block to action block where no additional processing power is required beyond the resources already allocated for executing the job. When additional job requests are received with the 000 system state and any job priority then table may be quickly accessed such that the decision code and previously decided action can be applied.

In addition in the example where the system state is 100 indicates that an additional CPU is allowed. The job priority as illustrated in further qualifies the resource eligibility for the job. Thus for the next job request received during a system state of 100 where the job has a priority of 2 a decision controller may automatically decide to allow 10 additional CPU s based on the previous decision recorded in table for that system state and job priority. Referring back to the entries for the system state of 100 and job priority of 1 2 and 3 in table represent the decisional process of the path from conditional block to conditional block to conditional block . The entry for the system state of 100 and the job priority of 4 in table represent the decisional process of the path from conditional block to conditional block to action block .

While the invention has been particularly shown and described with reference to a preferred embodiment it will be understood by those skilled in the art that various changes in form and detail may be made therein without departing from the spirit and scope of the invention.

