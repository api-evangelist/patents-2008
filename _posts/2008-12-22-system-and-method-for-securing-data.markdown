---

title: System and method for securing data
abstract: The present invention provides a method for securing data distributed by a first user to at least one recipient user, comprising the steps of; responding to a request from the first user to encrypt the data with a key; and recording the location of the key in a database, wherein on the database receiving a request from the at least one recipient user for authorization, providing the key to the at least one recipient user upon authorization.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08806207&OS=08806207&RS=08806207
owner: Cocoon Data Holdings Limited
number: 08806207
owner_city: Sydney
owner_country: AU
publication_date: 20081222
---
This application is a national phase application of International Application No. PCT AU2008 001898 filed Dec. 22 2008 and published in English Jul. 2 2009 which claims priority to U.S. Provisional Application No. 61 021 271 filed Jan. 15 2008 and Australian Patent Application No. 2007907016 filed Dec. 21 2007. The above referenced applications are hereby incorporated by reference herein in their entirety.

The present invention relates to a system and method for securing data and particularly but not exclusively to a system and method for securing data objects sent in an electronic format.

In online environments electronic data are often distributed from one point to another. Where there is a necessity to secure the data from unauthorized usage or access particularly in situations where the data are confidential or requires protection users can utilize a system to encrypt the data prior to sending the data over an unsecured network.

System and methods for encrypting data are known. Such systems allow a user to select a data object and then by operation of a client encrypt the data object with a password or other type of key such as a PIN personal identification number a biomarker etc. to create an encrypted data file. This data file is then secured against unauthorized users as the contents of the data file cannot be viewed by a user unless the user has the correct information to un encrypt the file. When the data file is required to be decrypted an authorized user with the password can decrypt the data file by using the client.

Such systems are useful where a user has little or no intention of distributing the encrypted data file. In such arrangements once the data object is encrypted it can be distributed via unsecured networks. However the user must also find a method to distribute the password for an authorized person to decrypt the object. Often for the purpose of efficiency the password is distributed over the unsecured network without any encryption itself. This increases the likelihood of the data object becoming unsecured as the password may be intercepted or distributed to unauthorized parties.

A further concern is that the level of protection offered by standard encryption is minimal since the encryption key is stored within the encrypted data file itself. That is once the file is received a hacker has all of the necessary data to decrypt the data file. Moreover where the user is not technically proficient an election of an easy to break password could mean the data object is easily decrypted through the use of brute force methods.

Even where a safer and more secure password is used to encrypt the data object the user is still unable to control the manner in which the data object is utilized as once the password and the data object have been distributed the permission to manipulate the file will be completely transferred to the receiving user. For example where a user encrypts the data object and sends it to another location via the Internet the receiving user can still distribute the data object without any consideration for the security of the object. For example a third party may freely distribute the password with the encrypted data file or remove the encryption altogether and thereby allow a plurality of unknown users to access the data object.

These limitations make it very difficult for a user to securely control the data contained in the electronic file.

In a first aspect of the present invention there is provided a method for securing data distributed by a first user to at least one recipient user comprising the steps of responding to a request from the first user to encrypt the data with a key and recording the location of the key in a database wherein on the database receiving a request from the at least one recipient user for authorization providing the key to the at least one recipient user upon authorization.

In one embodiment there is provided a further step of the database receiving rules arranged to constrain the at least one recipient user s interaction with the data.

In one embodiment the step of authorizing comprises the further steps of comparing an identification profile of the at least one recipient user with a pre determined criteria wherein the at least one recipient user is authorized if the pre determined criteria matches the identification profile.

In one embodiment the identification profile includes at least one criterion characterizing a characteristic of the at least one recipient user.

In one embodiment the first user interacts with a client application the client application requesting the key from a central source.

In one embodiment the at least one user interacts with at least one receiver application the at least one receiver application being arranged to request authorization from the central source to decrypt the data.

In one embodiment the central source comprises a gatekeeper service arranged to protect the server from unauthorized users.

In one embodiment the central source further comprises a logging service arranged to log any activity on the data by the recipient user.

In one embodiment the file wrapper is a secure document arranged to be processed by the receiver application.

In one embodiment the data object is provided with a secure envelope arranged to enclose the data such that when the data are within the envelope the at least one recipient user s interaction with the data is constrained by the rules established by the first user.

In a second aspect of the present invention there is provided a system for securing data distributed by a first user to at least one recipient user comprising a module arranged for responding to a request from the first user to encrypt the data with a key and a routine arranged to recording the location of the key in a database wherein on the database receiving a request from the at least one recipient user for authorization providing the key to the at least one recipient user upon authorization.

In one embodiment of the second aspect the database is arranged to receive rules the rules being arranged to constrain the at least one recipient user s interaction with the data.

In a third aspect of the present invention there is provided a computer program comprising at least one instruction for controlling a computer system to implement a method in accordance with the first aspect of the present invention.

Referring to an embodiment of the present invention is arranged to provide a system for securing data comprising a central source arranged to respond to a request from a first user to encrypt data with a key and an authorizing service arranged to receive a request for authorization and whereupon a receiving user is authorized the receiving user is directed to the key for decrypting the data.

In this embodiment the system and methodology and associated software and or hardware application in accordance with this embodiment of the invention may be executed on a device such as an example device shown in . In there is shown a schematic diagram of a central source which in this embodiment is a server suitable for use with an embodiment of the present invention. The server may be used to execute application and or system services such as a system and method for securing data in accordance with an embodiment of the present invention.

With reference to the server may comprise suitable components necessary to receive store and execute appropriate computer instructions. The components may include a processor read only memory ROM random access memory RAM an input output devices such as disc drives input devices such as an Ethernet port a USB port etc. display such as a liquid crystal display a light emitting display or any other suitable display and communications link . The server includes instructions that may be installed in ROM RAM or disc drives and may be executed by the processor . There may be provided a plurality of communication links which may variously connect to one or more computing devices such as servers personal computers terminals wireless or handheld computing devices. At least one of a plurality of communications link may be connected to an external computing network through a telephone line or other type of communications link.

In one particular embodiment the device may include storage devices such as a disc drive which may encompass solid state drives hard disc drives optical drives or magnetic tape drives. The server may use a single disc drive or multiple disc drives. The server may also use a suitable operating system which resides on the disc drive or in the ROM of the server .

In some embodiments a first user utilizes a computer to execute a client application . The computer in one example can be a personal computer using an Intel AMD chipset having an operating system such as Windows MAC OS or Linux operating systems or as a person skilled in the art would appreciate the computer can be a mobile device such as a PALM or IPAQ device arranged to perform computing functions.

In this embodiment the client application is a software program implemented in any computer language arranged to reside on a storage device of the computer . Other examples of implementation of the client application is possible including but not limited to the computing instructions stored in ROM programmable array optical drives smart cards memory units non volatile memory modules. The client application in one example has an interface arranged for the user to direct any input or output or in other examples the client application is embedded with an existing software or operating system application such as without limitation Open Office or Microsoft Office and thereby adding additional functionalities to these software.

The client application has a communication port arranged to communicate with the server . When a user initializes the application the application contacts the server via a secure connection such as a SSL or SSH connection. In one example the application sends its unique identification code or IP address or other information for the server to identify the user and the computer in which the user is operating from. This allows the server to control the security of the system for securing data by allowing authorization of any communication session between the client application and the server before any such communication sessions can be sustained.

In some embodiments with reference to the first user utilizes the client application to select data requiring encryption . The data can exist in the form of files addresses pointers or objects. By using the interface the first user can drag and drop or otherwise reference and select the data as needed. Once the files are selected the client application can begin the security process required to secure the data.

In the embodiment described herein the security process initiates by sealing the data to create a data object such that all of the data either existing as a file object address pointer or any combination can be integrated and referenced as a single secure data object . Once the secure data object is created the secure data object is then described by the user where the user can assign permissions or rules to describe the object . The permissions or rules are arranged to control the manner in which the data object can be interacted with or manipulated. In one example the permissions may demand that the data files within the secure data object are read only or print only. In another example the permissions or rules may include what level of users within any specific IP address range using a specific type of computer software can access the files.

Whereupon the permissions have been set by the first user the client application provides a functionality for the first user to establish an Access Control List which provides a list of recipient users authorized to receive and interact with the secure data object . The access control list can in one example also define the authentication scheme necessary for the recipient user to be authenticated. For example the scheme could demand that the recipient user be operating from a computer with a certain identification code or the user is operating from a specific local network or has been approved by some form of biometric scan. The person skilled in the art would also appreciate other variations of authenticating a recipient user.

In this embodiment upon the establishment of the access control list the client application begins the encryption process . In one example the encryption process uses AES Advanced Encryption Standard or US Federal Information Processing Standard FIPS see for example http www.nist.gov aes or other encryption methods as appreciated by a person skilled in the art. To initiate the encryption process the client application either self generates a key arranged for encryption or in other examples retrieves a key from the server . During the encryption process the key is not encrypted with the data object and thereby any encrypted secure data object will not contain the key. This provides a strong level of protection as hackers wishing to decrypt the secure data object cannot utilize methods such as brute force methods to decrypt the secure data object as the key is not within the secure data object . The encryption arrangement provides that only users with the key extracted from a separate and independent source from the secure data object can decrypt the secure data object .

Upon the completion of the encryption process the client application will return the secure data object as fully encrypted . In one example the secure data object is created by attaching the encrypted data files to a file wrapper which can be implemented in XML or another suitable computer language. In the example the file wrapper as shown in provides metadata to describe the secure data object such that when the object is opened with either the receiver or client applications by the user the application is informed of the information relating to the secure data object to thereby assist in the securing process as herein described. The secure data object is stored as a file residing in memory or on storage device on the computer . The first user can have the option of distributing the object via a distribution channel in the form of email FTP SSH storage CD USB device non volatile memory or other electronic forms.

In one embodiment the receiver application resides on a recipient user s computer arranged to decrypt a secure data object . Upon the possession of a secure data object the recipient user initiates the receiver application which in one example may be integrated into an email software and thereby automatically initiate when the secure data object is received by email. With reference to the receiver application communicates with the server and establishes a secure connection with the server . The server begins an authorization process whereby in one example the receiver application sends an identification code to the server such that the recipient user is identified.

In other examples the recipient user is required to enter sufficient details to be authenticated. The authenticated method are those already defined by the first user when the secure object was created and as defined above may involve biometric scans passwords questions or other forms of authentication as a person skilled in the art would appreciate.

Upon the successful authentication of the recipient user the receiver application queries the server for permissions relating to the specific rights and access permissions allowed by the first user for the recipient user. Once these rights are received the recipient user is bound to only interact with the permissions and rules as defined by the first user. In some examples where the recipient user is only allowed to view the contents of a data file within the secure data object a browser is initiated by the receiving application . The browser is arranged to display the file only and rejects any attempts by the recipient user to edit the file.

In this embodiment the receiver application begins the decryption process which firstly requests a direction to the decryption key from the server which is the key used to encrypt the secure data object. The server may store the key within the server in which case the key is transmitted to the receiver application . However in some examples the key may be stored in a separate server in a different location and accordingly the server will send only a direction to the receiver application to retrieve the key from the separate server. In yet another example the key may be stored in a separate storage media such as a smart card or USB key or CD ROM in which case the server sends a direction to the receiver application to direct the user to find the relevant storage media housing the key.

Upon the successful possession of the key the receiver application decrypts the secure data object and delivers the data to the recipient user subject to the constraints already established by the permissions and rules as arranged by the first user . Each manipulation or interaction the recipient user makes with the data is recorded and the logs are returned to the server for storage and review .

With reference to in some embodiments the server comprises a number of server components including but not exclusively limited to 

In the embodiment described herein when the client application or receiver application is in communication with the server the gatekeeper service initiates the session between the applications with the server . Once initialized the gatekeeper service directs the application to connect to the authentication service to authenticate the user.

By directing all initial connections through the gatekeeper service security is further enhanced on the server as the gatekeeper service is arranged to filter out malicious and or blacklisted web connections which may compromise the security of the server components . A person skilled in the art would appreciate that there are many variations in which the gatekeeper service can be implemented including but not limited to a hardware and or software firewall service which is capable of analyzing incoming traffic.

Should the connection between the user s computer and the server satisfy the requirements of the gatekeeper service the authentication service will then attempt to check and authorize the user. This firstly involves the service to retrieve records from the identity service which stores a list of identification criteria including but not limited to user profiles user authentication means passwords etc. After these data are retrieved the user whether the user is a first user or a recipient user must be authenticated to continue access to the server . In some examples the authentication service may demand the user to enter a password key profile details or it may detect the client ID IP addresses computer identification code biometric verification or other implements which can be cross referenced with the data within the identity service in order to authenticate and authorize the client session such that the user may continue to access the server components .

Once the authentication process has been successfully completed the server is now able to proceed to process any request for the client or receiver application in order to provide a system and method of securing data as herein described. Where the first user in creating the secure data object has elected to include permissions or rules to restrain the manner in which the recipient user can interact and manipulate the secure data object the administration service provides functionality for these permissions and rules to be entered stored and enforced.

In this embodiment the administration service allows the client application to enter and store at least one permission which would constrain the subsequent usage of the data object by a recipient user. The administration service has an interface broadcast to the client application referencing the secure data object created by the first user. In one example of the interface the first user can select from a list of permissions to describe the secure data object . These rules include but not limited to 

Operation of the system will be described with reference to the process as outlined in . Firstly a first user prepares and selects the data required to be encrypted and distributed. This can be in one example one or more data files including documents spreadsheets emails text graphics multimedia or other forms of computer data. Upon selection of these data the first user opens the client application which in one example exists as a software application running on the first user s computer . Once the application is initialized the client module contacts the server wherein the gatekeeper service executes a series of checks to verify the integrity of the connection . Once the gatekeeper allows the connection the authorization service is executed to authenticate the user such that the user can be identified as an authorized creator of a secure object. Upon the user being authorized through matching of the requirements of the authorization service e.g. the entering of a password key or a biometric scan the client application continues to maintain a connection with the server and allows the user to add the data files requiring encryption to form a secure data object. In some examples the user may drag one or more files into the interface of the client application and select to close the data object such that the files are then combined to form a single data object .

In this embodiment the first user is directed to the server s administration service whereby the first user is given an opportunity to describe the manner in which the data object can be manipulated by a recipient user. In one example the first user accesses the interface and is provided with various rules and permissions to control the manner in which the data object will be manipulated. Some examples of these options have been previously described. The rules and permissions are enforced by the receiver application which is used to access the secure data objects by the recipient user. Once the rules and permissions are entered and selected the user can select a submit switch or button which triggers the rules to be written to the database via the database service of the server . In this example where permissions are written to the database it is written in the form of an Access Control List ACL which is then stored back by the database service of the server .

Upon completing the selection of permission and rules for the data files or objects the user can encrypt the objects . In one example the client application then creates a key to encrypt the data to form a secure data object. The encryption process ensures that the key is not embedded into the secure data object such that the secure object on its own will not in any way reveal the encryption key. In another example the client application requests a key from the server which generates a random key suited for data encryption. An option is given to the user to store the key on the server or to store the key elsewhere but indicate to the server where the key is stored such that an authorized recipient user can be directed to the key. This arrangement reduces the number of keys stored on the server thereby spreading the risk of a security breach to other servers. In this process a hacker would have an additional hurdle to find the relevant key since the location is not immediately known to any unauthorized user.

Once the client application has encrypted the data selected by the first user a secure data object is formed by the client application . Upon the completion of the encryption process the secured data object is ready to be deployed to any number of recipient users through a distribution channel . In some examples the first user can simply email the secure object to a single or multiple recipients or can distribute the object on a Compact Disc Universal Serial Bus USB key or other computer readable medium. An immediate advantage of the current arrangement allows the user to distribute the secure object through any insecure channel as a hacker would find it extremely difficult to break into the secure data object without locating the key to decrypt the data object. As a secure data object has been encrypted in such a manner whereby the encryption key is not within the secure data object it is therefore extremely difficult for the secure data object to be decrypted.

Upon the reception of the secure data object by a recipient user the recipient user can start the receiver application as earlier described and load the secure data object into the receiver application . In some examples this can involve selecting the secure data object and dragging and dropping it into the interface provided by the receiver application . In other examples the receiver application may be integrated into an existing software package such as Microsoft Word Excel PowerPoint Access or Internet Explorer or other similar packages. Upon the successful loading of the secure data object the recipient user is then authenticated by the central server when the receiver application connects to the server . This authentication may be in the form of a provision of a physical smart card a USB key biometric data a password a unique user ID located on the user s computer an IP address or any combination any of the above or by other verification techniques that are available. Upon the successful authorization and authentication of the recipient user the receiver application will communicate with the server and be directed to access a decryption key. The decryption key may be stored on the server . However in some instances the server only stores a pointer to a relevant separate location where the key may be saved. In one example a subsequent smart card distributed separately to the secure data object may store the decryption key. In any event the central server will direct the recipient user to a suitable location for retrieving the decryption key. This may require some additional actions on the part of the recipient user such as accessing a separate server or locating a physical media containing a key e.g. inserting the smart card to the computer . Once there is a successful acquisition of the decryption key the receiver application can then decrypt the secure data object and allow the user to manipulate the secure data object as constrained by any permissions and rules that may have been set by the first user. In one example where the first user has limited the recipient user s ability to edit a document that has been encrypted within the secure data object the recipient user cannot make or save any changes to the document but is limited to only reading accessing and printing the document.

In alternative embodiments the secure data object can exist as a secure envelope as shown in . Where the secure data object is a secure envelope the envelope is stored as a file which encloses individual data files stored within the secure envelope . The envelope is fully protected under the secure data object system as previously described. However once the files within the envelope are dragged and removed from the secure envelope and onto the user s computer interface e.g. the desktop or their own file system the control and protection as exercised by the current system is then withdrawn allowing the recipient user to fully interact and manipulate with the data file as would be allowed if the recipient user owned the file outright . In this example the first user may create permissions to ensure that the recipient user cannot remove any data file from the secure envelope.

In other embodiments where the secure data object exists as a secure document the data file itself is encrypted using the system and method as described with reference to . In this instance the entire file must be accessed through the client application only and unless otherwise permitted cannot be distributed or fully copied by the recipient user.

The embodiments described advantageously do not interact with the data to be encrypted in any manner. In other words the data to be encrypted is never passed through or stored on the central source. This arrangement removes the risk of providing a centralized hub of data which could attract hackers.

In some embodiments the system is offered as a service to users on a web or online interface. In this embodiment a license is provided to a user to download and operate the application to encrypt or decrypt data objections in accordance with the steps already mentioned. The license may limit the functionality of the application . In one example the free license will limit the application to only decrypt a file but on payment the license may be extended to allow the application to encrypt files. In other examples the license may limit the type of files that may be encrypted or decrypted and thereby limiting user access to certain files. This example is particularly useful in corporate or group environments where each user may be granted different licenses to encrypt or decrypt certain data objections.

Although not required the embodiments described with reference to the figures can be implemented via an application programming interface API or as a series of libraries for use by a developer and can be included within another software application such as a terminal or personal computer operating system or a portable computing device operating system. Generally as program modules include routines programs objects components and data files that perform or assist in the performance of particular functions it will be understood that the functionality of the software application may be distributed across a number of routines objects or components to achieve the same functionality as the embodiment and the broader invention claimed herein. Such variations and modifications are within the purview of those skilled in the art.

It will also be appreciated that where methods and systems of the present invention are implemented by computing systems or partly implemented by computing systems then any appropriate computing system architecture may be utilized. This will include stand alone computers network computers and dedicated computing devices. Where the terms computing system and computing device are used then these terms are intended to cover any appropriate arrangement of computer hardware for implementing the function described.

