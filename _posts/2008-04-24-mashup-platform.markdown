---

title: Mashup platform
abstract: Delivering a page that includes a plurality of modules is disclosed. A query is received. Subject type concepts associated with the query are determined. Candidate modules that correspond to the associated concepts are found. A plurality of modules is selected from the candidate modules to be delivered on a page.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08949214&OS=08949214&RS=08949214
owner: Wal-Mart Stores, Inc.
number: 08949214
owner_city: Bentonville
owner_country: US
publication_date: 20080424
---
This application claims priority to U.S. Provisional Patent Application No. 60 926 040 entitled AUTOMATIC PAGE LAYOUT filed Apr. 24 2007 which is incorporated herein by reference for all purposes.

In addition to traditional text based content users are increasingly seeking out other forms of relevant content such as images videos and maps. One way that entities such as search companies determine what types of results to provide is to construct whitelists. If the query provided by the user includes a term appearing on a whitelist then results of the content type for which the whitelist was constructed will be among those returned. For example a search company might manually maintain a list of celebrities famous locations and the names of other things that users might want images of. If a user includes a whitelisted term in a query e.g. Coliseum a mixture of image and text results will be provided. If the query does not include a word on the whitelist only text results will be provided. Unfortunately maintaining a whitelist is typically a cumbersome and error prone process. It is infeasible to list every possible concept in each of the appropriate whitelists. And if no entry is included in the whitelist for a term then no image results will be returned even if though relevant images may exist and be desirable to the user. Another approach is to maintain a list of several different content repositories e.g. a text repository a video repository and a photograph repository and whenever a query is received to perform a search on each of those repositories. One problem with such an approach is that it requires the maintaining of and access to vast repositories of content. It is also potentially very inefficient. An additional problem with both approaches is that it can be difficult to arranges results of different content types.

A system is configured to receive a query. The system determines subject type concepts associated with the query. A subject type concept is a concept included in a concept hierarchy. The system finds candidate modules that correspond to the associated concepts. The system selects a plurality of modules from the candidate modules to be delivered on a page.

The invention can be implemented in numerous ways including as a process an apparatus a system a composition of matter a computer program product embodied on a computer readable storage medium and or a processor such as a processor configured to execute instructions stored on and or provided by a memory coupled to the processor. In this specification these implementations or any other form that the invention may take may be referred to as techniques. In general the order of the steps of disclosed processes may be altered within the scope of the invention. Unless stated otherwise a component such as a processor or a memory described as being configured to perform a task may be implemented as a general component that is temporarily configured to perform the task at a given time or a specific component that is manufactured to perform the task. As used herein the term processor refers to one or more devices circuits and or processing cores configured to process data such as computer program instructions.

A detailed description of one or more embodiments of the invention is provided below along with accompanying figures that illustrate the principles of the invention. The invention is described in connection with such embodiments but the invention is not limited to any embodiment. The scope of the invention is limited only by the claims and the invention encompasses numerous alternatives modifications and equivalents. Numerous specific details are set forth in the following description in order to provide a thorough understanding of the invention. These details are provided for the purpose of example and the invention may be practiced according to the claims without some or all of these specific details. For the purpose of clarity technical material that is known in the technical fields related to the invention has not been described in detail so that the invention is not unnecessarily obscured.

As described in more detail below crawler performs tasks such as tagging the documents stored in index with subject type concepts and with information type concepts also referred to herein as infotypes . Crawler also performs and stores the results of frequency and cooccurrence counts. Crawler may be a single device or its functionality may be provided by multiple devices. For example elements typically used in conjunction with a crawler to create an index such as an indexer are described herein as being provided by crawler but may also be performed by separate devices or components and the techniques described herein adapted accordingly. For example in some embodiments cooccurrence counts are performed by concept lighting engine .

Documents in collection can include but are not limited to text files multimedia files and other content. In some embodiments collection includes documents found on an intranet. Also included in collection are a variety of concept data sources . In the example shown source is the set of web pages known collectively as Wikipedia and available e.g. at http en.wikipedia.org . Source is a directory of automobile makes and models and source is a taxonomy of pharmaceuticals. In some cases such as with Wikipedia the pages are used both as concept data sources and are also included in group and are crawled accordingly. In other cases such as with the directory of automobile makes and models the information may be restricted or otherwise not available to crawler and the concept data source will serve only as a concept data source and not be included in group .

Concept data sources each provide information that conveys some kind of relation between concepts and can be used as a source of concepts and also as a source of hierarchical relations between at least some of those concepts. For example suppose a sample entry in automobile directory is 2008 Honda Civic Sedan XL. Using the techniques described herein it is possible to extract hierarchical information from the entry for example that the 2008 Sedan XL is a type of Honda Civic and that a Honda Civic is manufactured by Honda. Pages within Wikipedia typically refer to their conceptual parents by link. For example the Wikipedia page on the topic of Astronomy has a link to its parent typically by labeling the parent as its category the more general subject of Science. The Wikipedia page on the topic of India includes a link to South Asian Countries which includes a link to Asian Countries which includes a link to Countries by Continent. The entries in the pharmaceutical taxonomy are likewise related to one another in a manner that can be harvested using the techniques described herein.

For each of the concept data sources one or more arc generators are used to parse the respective concept data source extract concepts and relations between concepts and store the information in a common format that can be consumed by aggregator . For example a Wikipedia arc generator is configured to obtain and parse Wikipedia data made available as a single XML file. From the XML file pairs of concepts an article and a category to which it belongs are extracted. Another arc generator is configured to parse the automobile directory e.g. provided as a spreadsheet and generate arcs accordingly such as by knowing that for each line of the spreadsheet the first column year should be combined with the last column to form 2008 Sedan XL which has as its parent the second and third column Honda Civic which has as its parent just the second column Honda . As used herein an arc is a directional edge between two concepts. A concept is a word n gram with meaning. One relation between concepts as used herein is an is a containing relation. For example Physics Science is an arc that means physics is a science science contains physics . As described in more detail below additional relations may also be employed such as by homonym and synonym arcs. Other directed relations between arcs that convey meaning may also be employed and the techniques described herein adapted as applicable. For example case variants and tokenization can be handled through the use of flags.

The respective content of concept data sources may change at various times and arc generators are configured to obtain and process fresh versions of data from their corresponding concept data sources as applicable so that files reflect the most currently known concepts and relations from those sources. For example Wikipedia changes frequently while the content of the pharmaceutical taxonomy may change very infrequently. As such in various embodiments arc generators periodically process their respective sources according to a schedule appropriate to the source e.g. with the Wikipedia arc generator running weekly and the pharmaceutical arc generator running monthly . Editorial list is a manually maintained list of arcs and relations used for example to designate a fixed set of top level concepts also referred to herein as verticals and to ensure that those top level concepts are not moved underneath one another or omitted.

Aggregator aggregates the source specific arc files extracted by their respective arc generators and the editorial list of arcs and creates as output arc list and vertex list . As described in more detail below arc list is a list of edges and properties that will be used to construct a concept hierarchy . Each time aggregator runs the newly constructed arc list replaces any previously constructed arc list. Vertex list is a persistent list of globally unique concepts that monotonically increases maintaining a set of stable concept identifiers over the iterations of aggregator s processing and growing only when a concept not previously seen is encountered by aggregator which is then appended to the list.

As described in more detail below hierarchy builder constructs hierarchy using arc list and additional information such as a list of subtree preferences and information obtained from index . The subtree preferences list includes rules to be considered by hierarchy builder when evaluating arc list . In various embodiments hierarchy is stored as a list of pairs of concepts a weight and optionally other arc attributes such as homonym and synonym indicators. The weight is a rank indicating whether the arc is the primary arc between a concept and a parent 1 or whether the arc is an additional arc e.g. 2 or 3 that was inserted into the hierarchy after the primary arc was selected.

In some embodiments hierarchy builder constructs hierarchy by building a directed graph based on the information it receives and then extracting a directed minimum spanning tree DMST from that graph in which every concept also referred to herein as a node present in the tree except the root has exactly one parent and no cycles or orphans are present . A variety of techniques for finding a minimum spanning tree have been developed. One example is the Chu Liu Edmonds algorithm.

Hierarchy builder optionally employs a DAG builder which inserts additional nodes into the DMST to form a directed acyclic graph DAG of concepts. An optional interface allows an administrator to view why nodes are placed in the hierarchy where they are and to audit the effects of making changes to the rules used in constructing the hierarchy. For example if certain nodes are not consistently being placed under appropriate parents an administrator can make additions to the subtree preferences list or add entries to editorial arc list as applicable. For example an administrator may use the interface to specify that when B has C as a parent and A has a choice of parent B or C A should select B as its parent so that a deeper hierarchy is created. This property of A B and C is sometimes referred to as transitive reduction.

One factor that can be considered in the determination of which candidate parent is the best is what score is assigned e.g. by an administrator to each of the candidate parents concept source referred to herein as an arc rank score . Typically the arcs provided by specialized concept sources such as the automobile directory are preferred over more general concept sources such as Wikipedia . In the example shown in a lower arc rank score indicates a better preferred source. In some embodiments arc rank generators are configured with what arc rank score should be assigned their respective arcs and those scores are included in the source specific arc rank files . In other embodiments aggregator is configured by an administrator with a list of sources and their respective scores.

Wikipedia as a source has a score of 20 as indicated in region . The automobile directory is considered a better source of information than Wikipedia for its specialized information on automobiles and therefore each of the arcs that are contributed to arc list by its arc list receive a score of 10 as indicated in region . The editorial arc list is intended to override entries in arc list provided by source specific arc lists and has an even better lower preference order score as indicated in region . As described in more detail below a graph constructed from the data shown in would include a leaf Honda Civic RX which is a Honda Civic which is made by Honda which is a Car Manufacturer s which is contained by Kosmix Autos. 

In the example shown in FIG. C a portion of aggregated arc list each of the lines was provided by the Wikipedia arc list . The Wikipedia arc generator is configured to recognize disambiguation pages when parsing the Wikipedia source XML file and record as arcs the ambiguous term and each of the disambiguated options in the arc list as a pair along with a hom for homonym flag. Each disambiguated word is given a separate entry in the vertex file such as the Jaguar animal line shown in . The Wikipedia arc generator is also configured to recognize redirection pages when parsing the Wikipedia source XML file and records as arcs each of the synonyms and the main entry cougar in the arc list as a pair along with a syn for synonym flag. In some embodiments different weights are given to homonyms and or synonyms over normal arcs instead of or in addition to the use of flags.

In some embodiments aggregator is configured to remove homonym arcs in which the ambiguous term and the disambiguated term do not begin with the same word so that the over generation of homonym arcs is reduced. For example since Mac OS Jaguar does not begin with Jaguar it is removed or omitted as applicable from arc list . As another example Wikipedia offers Fiona Apple as a disambiguation of Apple. Such an arc would likewise be deleted or omitted from arc list .

In contrast entry states that any chain of arcs with up to 3 levels distance that includes a parent of countries by continent is to be preferred. In some embodiments entries in the subtree preferences list are applicable at all depths and the depth column is omitted. What entries should be included in the subtree preferences list and what scores depths should be assigned is generally subjective can be refined over time such as by evaluating logs. The subtree preferences provide a mechanism for an administrator to remove or favor a potentially large number of arcs without having to manually enter rules for each arc. For example by preferring countries by continent all countries listed in Wikipedia will tend to be grouped under countries by continent possibly at varying depth levels and an administrator need not specify a rule for each country.

The process begins at when a graph of arcs of concepts is received. In some embodiments the graph includes the XML representation of Wikipedia. In some embodiments the graph comprises an arc list such as arc list . Other sources of arcs of concepts at least some of which can be connected to form a graph irrespective of whether that graph contains some orphans or cycles may also be used as applicable. For example in some embodiments a graph or portions thereof is received from a third party at .

At weights associated with the arcs in the graph are generated. As described in more detail below a variety of techniques can be used individually and in combination to generate weights at . For example arc rank scores Boolean values cooccurrence scores mutual information etc. can be used to form a single weight or a vector of weights at .

At a directed minimum spanning tree is extracted from the graph received at . In some embodiments preprocessing is performed such as to remove orphan nodes which cannot be reached from the root and the directed minimum spanning tree is extracted from the preprocessed graph rather than the graph as received at . One way of constructing a DMST is as follows. For each node in the graph a single parent is selected such as by using the vector of weights generated at to evaluate candidate parents. By biasing the selection of parents toward the best parent e.g. the one with the lowest source score an attempt is made to preserve the consistency of the is a containing relationship up the DMST such as that calculus is a form of mathematics. Next any cycles in the graph are detected by hierarchy builder . An example of a cycle is an arc from ships to boats and another from boats to ships both being present in the graph. Sometimes cycles are created in Wikipedia data because two nodes are imputed to have a hierarchical relationship when they are in fact peers. For example a node Bert may have as a parent Ernie and vice versa. Hierarchy builder runs a process to reduce the number of cycles. The selection of a best parent the detection of cycles and the reduction of cycles continues iteratively until an acyclic tree is formed. As described in more detail below optional post processing can be performed on the acyclic tree.

In various embodiments some values included in the vector of weights are read in from files and others are provided by additional processes e.g. plugins which calculate and provide scores. The first portion of the vector of weights to compare between the two candidates is the variance score indicated in column . The variance score indicates the number of internal links which point to the candidate parent. Both candidate parents have a score of three meaning that the vectors are tied so the next portion of the vector is evaluated.

The next portion of the vector of weights to compare between the two candidates is the vertical correction score indicated in column . In some embodiments the construction of a DMST is performed twice. The first time it is run the vertical correction score is zero. The second time it is run a vertical correction score is determined by a process that attempts to keep nodes that are peers grouped together under the same parent. For example suppose that 95 of house plants are placed under botany but 5 select as best parents health on the first run. The vertical correction process is configured to detect the discrepancy and will indicate that a botany parent should be selected by returning a nonzero score in column such as a Boolean value during the second run. In various embodiments normalization and or a threshold is applied so that in cases such as a 60 40 split the vertical correction process does not attempt to group peers under the same parent. In the example shown both candidates have a score of zero. The vectors are tied so the next portion of the vector is evaluated.

The next portion of the vector of weights to compare between the two candidates is the templates score indicated in column . The value for the templates score is provided by a process that evaluates nodes against groups or lists of concepts and attempts to keep those groups together. If concepts are present in multiple groups the process attempts to keep the most number of groups or the most important groups together etc. as applicable. The lists groups may be provided by a third party and or configured by an administrator or otherwise obtained. For example Wikipedia provides set information for certain entries which can be scraped by crawler . Examples of groups include a list of the planets in the solar system a list of human diseases a list of the seven dwarves British Commonwealth countries etc. In the example shown Ronald Reagan appears in a list of United States presidents. As such a score of one is present in column for U.S. President but not for Actor. Since there is no longer a tie between the two vectors U.S. President would be selected as the best parent for the concept Ronald Reagan. If both values in column were equal however the next portion of the vector would be evaluated and so on until the tie was broken. In the example shown the remaining columns are as follows. Column reports whether a process evaluating the loaded subtree preferences list has determined that a positive or negative preference exists for the arc. If no such preference is found column reports a zero. If a preference is found it is indicated in some embodiments as a positive or negative value. Column is the arc rank score described previously.

Columns and report various statistics about the presence of the concept and its candidate parent within the documents stored in index .

The occ column includes a score that represents a frequency count for the concept. A frequency count indicates the frequency of the occurrence of the concept within the pages in index . The frequency count is determined in some embodiments by crawler using vertex list to scan through each of the documents in index and increment the occ for the concept for each page in the index that includes at least one occurrence of the concept. The pocc column similarly represents a frequency count for the candidate parent.

The cooc column includes a score that represents the cooccurrence of the concept and candidate parent in the pages in index . Cooccurrence scores are determined in some embodiments by crawler evaluating the cooccurrence of concepts which are connected by an arc e.g. are present in arc list . Techniques such as using a running window of words can also be employed to avoid quadratic blowup.

The process begins at when vertex list is loaded allowing hierarchy builder to map concept names e.g. human readable concept names to concept IDs. At a graph is built using arc list for example by connecting pairs of concepts together and storing any associated properties. If duplicate arcs are encountered the properties of the duplicate arcs are merged. For example if one line in arc list reads Physics Science 20 and another line in arc list reads Physics Science 10 the arcs are merged with the best weight being preserved e.g. Physics Science 10 . If one source indicates that an arc is a homonym arc and another source indicates that the arc is a synonym arc the arcs are merged and both flags are set for the merged arc. At subtree preferences list is loaded as are any applicable case variance or tokenization variance information.

At a DMST is constructed. First a best parent is selected for each node by performing a local decision comparing vectors of weights. Next cycles are detected. One way of detecting cycles is to traverse the graph marking each node as seen as it is visited. If a node is reached again during the traversal a cycle has been located. For each cycle an evaluation is made between the cost of removing an arc and the cost of adding an incident arc and selecting the appropriate arcs whose addition removal have the lowest associated cost. In some embodiments the comparison is a difference of vectors and is computed by replacing the values in the vectors with minwise elements. As stated previously the selection of a single parent the detection of cycles and the reduction of cycles continues until each node except the root has exactly one parent. In some embodiments post processing is performed such as vertical correction.

At the DMST is extended to a DAG using additional arcs. For example at synonym arcs are inserted into the DMST as are homonym arcs so long as acyclicity is preserved. In some cases additional concept arcs are included in the DAG where doing so would not result in the formation of a cycle. For example including Actor as a second parent of Ronald Reagan will not result in a cycle and will preserve the is a relationship up the hierarchy. However the insertion of other arcs not previously shown such as between Ronald Reagan and Hollywood Walk of Fame might be inappropriate e.g. because the is a containing relation would be skewed away e.g. if the parent of Hollywood Walk of Fame is Landmarks Ronald Reagan is not a Landmark . One way of inserting additional arcs into the DMST is to first globally rank the omitted arcs. Rules can be used such as that additional arcs will be inserted into the DAG in the globally ranked order so long as the arc to be inserted is of a smaller depth than the existing single parent for the node or that arcs can be inserted within the same vertical but only one additional arc may be added into a different vertical from the existing single parent or that additional arcs must have a threshold cooccurrence score before they are placed into the DAG.

In some embodiments at least some orphan nodes are placed back into the DMST at . One way of placing orphans is to perform a search using the orphan as an input to the query categorization techniques described in more detail below. If the results are sufficiently dense the orphan can be placed in the appropriate place in the DAG. Similarly the hierarchy of concepts can be expanded by crawling the documents for word n grams and also attempting to place them into the DAG by using the word n grams as an input to the query categorization techniques described in more detail below.

One way of tagging a document in index with subject type concepts is as follows. For each concept in vertex list use the concept as a search query against the documents in index . Evaluate the results using standard text match and link scoring techniques e.g. by examining the number of occurrences of the query on the page the page title the link text metadata whether the concept appears in bold etc . Such techniques which measure how well the text of a query matches a document are collectively referred to herein as text match scoring techniques producing text match scores although more than just the text of the document may be evaluated by such techniques.

For any particular page the concept query which results in the highest text match score for the page is that page s top concept. The concept which results in the second highest text match score for the page is that page s second concept etc. Any given document may include thousands of concepts from vertex list . Thus in some embodiments a threshold is applied and the document is tagged with its resulting top n concepts such as the top 30 concepts.

Websites typically have common elements across the various pages that are included in that site. For example a news website may include a left or right navigational section that includes the terms Health Finance World News etc. The site may also include a prominent logo on every page. In some embodiments such common elements are identified and ignored or stripped during indexing so that text match scores are not skewed by the prolific presence of those common elements. Identifying and ignoring or stripping common elements allows text match scores and infotype rules to be applied specifically to the distinct content of each document.

One way of tagging a document in index with an infotype is to determine whether any rules associated with those infotypes is satisfied by the document. For example documents hosted by a known image hosting service e.g. stock photo library or having an image with a certain minimum pixel size may be indicative of an image type document e.g. a document having one or more informative images and be tagged as having an infotype images. Conversely documents with discouraging ALT text e.g. advertisement a standard advertisement size or location and generic filenames suggestive of being merely decorative or formatting elements e.g. pixel.gif footer.jpg indicate that while including an image the document is unlikely to be of interest to a user seeking images and are not tagged with the images infotype.

Documents hosted by a known news site e.g. www.wsj.com having a title indicative of a news source e.g. Breaking News or including a copyright notice from a known news agency newswire e.g. Associated Press are tagged as being of infotype news. Documents with a title that includes words such as event calendar upcoming etc. are tagged with the events infotype. Documents that include terms specific to categories of local venues e.g. amusement parks toy stores police stations Thai restaurants dentists or including links to map services are tagged with the local infotype. Documents that include terms e.g. appearing on a wordlist such as add to cart coupon and checkout are tagged with a shopping infotype etc.

If multiple rules for different infotypes are satisfied by a document the document is tagged with multiple infotypes as applicable. For example a photojournalist s blog about current events might be tagged with both the images and the news infotypes.

The top concepts for a document are stored in index and are used in a variety of ways as described in more detail below.

Suppose there are 20 000 documents stored in index and that the query received at is What kind of metal is the Eiffel Tower made out of Of the 20 000 documents suppose results are found. The first result is the best match e.g. one describing the history of the construction of the Eiffel Tower and containing many instances of the query and the 350result is the worst result e.g. containing all of the words of the query but with those words appearing in disjoint areas of the document instead of next to one another . Each of the 350 results corresponds with a document stored in index . If the documents stored in index have been tagged with concepts such as by using the techniques described herein then each of the 350 results also has an associated set of concepts.

At the query results and the concept information stored about the results in index are combined to determine a set of scores for concepts a process referred to herein as voting . One technique for determining voting scores is as follows. First examine each result and obtain a list of all of the top concepts reflected in the results. E.g. take a union of all of the concepts tagged to all of the results. Next for each concept in the union also referred to herein as the candidate concepts list assign that concept a score equal to the sum of the text match scores of each of the documents in the results which includes the concept in its list of top concepts. In some embodiments the text match scores are normalized. Suppose for example that only the top 100 results are used and the remaining 250 results are discarded . The best result is assigned a score of 1. Each of that result s top concepts e.g. topics T1 T5 and T20 receives a score of 1 from the result. Suppose that the next best result is assigned a score of 0.99. Each of that result s top concepts e.g. topics T1 T2 and T3 receives a score of 0.99 from that result and so on. After evaluating the first two results topic T1 has a score of 1.99 topics T2 and T3 have a score of 0.99 and topics T5 and T20 have a score of 1. In some embodiments the voting scores are not weighted but instead each concept receives one count for every result that listed that concept as one of its top concepts. Other voting techniques can also be used as applicable.

At for each concept e.g. the candidate concepts the expected number of documents that the query and the concept would occur in at random is determined. This is referred to as an expected cooccurrence and is computed as follows in some embodiments. The probability of the cooccurrence of the query and the concept is equal to the probability of the query occurring multiplied by the probability of the concept occurring. This can be expressed as 

At the various scores are combined into a combination score. In some embodiments at logistic regression is used to determine how to combine for a given concept the text match scores voting scores expected cooccurrence scores and the actual number of documents that the query was matched with and the concept occurred in the observed cooccurrence . Other techniques may also be used to determine the best coefficients and or to combine the scores. For example coefficients can be added some multiplied and others added and powers can also be used.

At results such as an ordered list of all of the candidate concepts is returned. In some embodiments additional processing is performed. For example a threshold may be applied such that only the most highly scored n concepts are returned or only the highest concept is returned. A confidence score may also be computed. For example of all of the candidate concepts their respective combination scores may be normalized and the concepts may be assigned into buckets such as high confidence medium confidence and low confidence based on their normalized scores.

The process shown in can be adapted to determine a list of infotype concepts in addition to or instead of a list of subject type concepts associated with the query. For example at in addition to voting for the subject type concepts a document can also vote for the infotypes with which it is associated and the highest scoring infotypes can also be returned at as applicable.

Column lists the TextScores of the respective concepts. Column lists the observed cooccurrence of the concept and the query column lists the Concept DF and column lists the expected cooccurrence of the concept and the query. Column is a confidence score computed by using a hard threshold on the final score. In the example shown a final score above 2300 is assigned a confidence of 10 a final score above 2200 is assigned a confidence of 9 a final score above 2100 is assigned a confidence of 8 etc. Concepts with final scores equivalent to a confidence of 0 less than 1500 are automatically removed.

In the example shown the three top concepts for the query jaguar are the automobile the mammal and the sports team . They each have a high confidence score. Other concepts such as a specific model of automobile and a player on the sports team also have high confidence scores. As the confidence scores diminish the corresponding concepts appear to be less directly relevant to a query of jaguar but remain clumped within one of the three main meanings. For example concepts and are each related to the notion of jaguar being the sports team. Concepts and are each related to the notion of jaguar being the automobile. In some embodiments the related concepts are clumped within different meanings as follows. First a list of contexts is obtained such as by using concepts which have high confidence and have homonym parents. Homonym parents are the different meanings of that concept. A list of the homonyms is a list of all possible meanings of the query. Each concept is then said to be in the context of the homonym nearest to it in the DAG.

At any candidate concepts that are not also present in concept hierarchy are removed. This is known as orphan removal. At synonyms are resolved to their canonical concepts. In the hierarchy shown in cougar is the canonical concept for synonyms mountain lion puma and panther. The synonyms are replaced by their canonical concept and the canonical concept receives the highest score of any of its synonyms. For example in liter and liter are synonyms. During synonym resolution these two concepts would be combined taking on the final score of liter which is the highest. At blacklist concepts are removed. Examples of blacklist concepts include spam pornography or other portions of the hierarchy that a person has manually blacklisted. At additional concepts are removed based on their confidence levels and location in hierarchy . Concepts without a sufficient number of supporting concepts in the same area of the graph are removed. One way of removing these outlier concepts is as follows. Concepts with a confidence level of 10 are not removed. For concepts with a confidence level of 9 examine whether the ancestors of that concept up to 9 levels away have any children that are also candidate concepts. If not the concept is removed. For concepts with a confidence level of 8 examine whether the ancestors up to 8 levels away have any children that are also candidate concepts. If not the concept is removed and so on. In some embodiments additional processing is performed such as by automatically resolving certain kinds of ambiguities and identifying ambiguous queries that cannot be automatically resolved and by automatically grouping candidate concepts under their parents.

As described in more detail below scores can be assigned to concepts which did not match the query in a variety of ways. For example a relation can be determined between a summation of the affinity scores of the children under a parent and the number of paths that can be taken from the parent to its children and used as a measure of how well the query matched that parent concept. A score determined in such a manner is referred to herein as a density score. A density function is any function that relates node scores and some kind of volume such as the number of children or leaf level concepts under a parent. Affinity scores need not be combination scores. For example in some embodiments the density function uses as a node score a 1 for any leaf node that was determined to have matched the query and a zero for all other leaf nodes.

In the example shown the density score of node is 3. Node contributes 6 points while node does not contribute any. There are a total of two paths which can be taken from node to the leaf level. The density score of node is 9 like its child node . The density score of node is 5. The density score of node is also 5 because while it is one level higher in the hierarchy it has only one child and thus has the same number of paths available as that child . The scores of nodes and are undefined because the score of node is 0. The score of node is 3.75.

If multiple verticals have similar density scores then the query is likely to be ambiguous at the vertical level and cannot be resolved without further input such as from the user. For example the query jaguar is likely to have comparable density scores under the Sports Nature and Transportation verticals. If the user provides a query such as lease a jaguar the Transportation vertical is most likely the user s intent. In some embodiments the final concepts returned at include an indication of whether an ambiguity was detected and if so what are each of the disambiguated meanings of the query.

Lower ambiguity within a vertical can also be determined. One way of determining lower ambiguity is for any node in the tree to determine the density of its children. For example suppose a node has ten children. The density scores of each of the ten children are compared. If the density scores of some children are considerably different from the density scores of other children then the query can be said to be ambiguous at the level of the node being evaluated. In some embodiments if a threshold number of children e.g. 90 as opposed to 50 have similar scores then the query is not considered to be ambiguous at the level of the node being evaluated.

Another technique for determining ambiguity is as follows. A list of contexts is determined by taking all homonyms of all high confidence concepts. All nodes in the DAG are marked with their nearest context. For each context a parent node is determined. In some embodiments this is done by taking the highest node that has as descendents only nodes from within this context. Only one such node will exist because the homonym which provides the context follows only one path upwards the tree path . The density of these representative parent nodes are compared and if the densities are similar in more than one context the query is ambiguous in those contexts else its non ambiguous and belongs in the context with the highest density.

Typically ambiguity that occurs across verticals or contexts indicates that the query has at least two different fundamental meanings such as jaguar as a mammal and jaguar as an automobile. When ambiguity occurs within a vertical e.g. a parent node has two dense children and several sparse children one possible cause is that the query is not ambiguous but only implicates certain children. For example suppose a query lights India and France under a Countries parent but does not light other countries under the Countries parent. One reason for this is that India and France are both valid answers or matches to the query while the other countries are not.

In some cases a concentration of lights i.e. dense areas of a hierarchy does not imply an ambiguity but instead implies a surprise. Suppose a famous baseball player Johnny Stocks was recently involved in a scandal involving the use of steroids. If a query of Johnny Stocks is performed concepts such as baseball Johnny Stocks and the team to which Johnny Stocks belongs might light each under the Sports vertical. Another concept that might also light is a steroids concept which is located under a parent of Pharmaceuticals which is in turn located under the Health vertical. In this example the lighting of the steroids concept is referred to as a surprise. The steroids concept is consistent with the meaning of the other results e.g. the concept of baseball even though it is in a different vertical. One way of identifying surprises e.g. at is as follows. If a node has a low affinity score it is likely to be a mistake and is removed from the list of candidate concepts. A surprise in contrast has a high affinity score. Any identified surprises are returned in some embodiments at along with any selected final concepts.

At concepts are grouped and named. One way of grouping and naming concepts is to determine how broad a parent node is. If the parent has mostly dense children the parent is used to name a group that includes all of its children. For example if 80 of the children under the node Actors light in some embodiments the Actors node is selected as a concept to be associated with the query e.g. at in the process shown in . If in contrast only a few children light the parent will not be used to group the child nodes and each is associated with the query.

In some embodiments grouping is performed as follows. Starting with the level below root in the subtree that was lit up the average entropy of the level is calculated as

The page template can be configured with query agnostic formatting instructions such as the number of columns to display the relative width of those columns and the percentage of the rendered page that is to be used for advertisements or other monetization related modules. As described in more detail below different templates can also be used based on factors such as the concepts with which the query is associated and whether a sponsor has requested that users be presented with a page that includes some kind of branding information. An administrator can use a template to govern whether any specific modules must be included in the rendered page such as a section dedicated to traditional web results as provided by a particular search company whether modules should be selected automatically from among a specific group of modules e.g. that at least one calculator module be shown but not more than two whether modules should be selected automatically from the entire pool of available modules and any additional constraints such as that a logo must appear in a specific page location. A template can be used as a top down filter that is used to control what is ultimately displayed on the page. Some additional examples of how modules can be selected and displayed include only showing a module if it has a quality greater than a particular threshold showing a module in a specific location etc. The page template can thus control the location rank whether to show or not to show a module and can also customize the look of the module such as its background color or title.

In the example shown in an administrator has created a single template that is to be used for all queries irrespective of the concepts associated with those queries. The template requires that the layout be in three columns and that the title of the page shown in region be taken from the query. Region of the page is a page block that is used to display advertisements. A page block is a portion of a page that includes rules governing the modules that can be placed within that block. A page block on a page can also specify a concept filter. A concept filter for a concept A indicates that only modules which have the concept A in their path to the root should be shown. Similar Boolean expressions can be used such as A and B or C and D where A B C and D are concepts. Another example is the prohibition on more than two calculators could be implemented across the entire page or the prohibition could only apply to a single page block. In the example shown the administrator has specified that up to four advertisements may be displayed simultaneously in page block .

The template specifies that a minimum of six modules and a maximum of ten modules be included in the page but allows all of the modules to be chosen automatically using the techniques described herein and does not supply any additional constraints on the selection of those modules.

Modules were automatically selected based on the buy a jaguar query provided by the user. Module provides a snippet of the main Wikipedia entry for Jaguar Cars and allows a user to access more of the article by selecting expand tab . Module displays a list of local Jaguar dealers. If the user hovers a mouse over module a map is displayed of the location. If the user clicks on the address the user is taken to the dealer s web page. In the example shown Mountain View Calif. was determined to be the location of the user based on the user s IP address. In various embodiments the user supplies demographic information such as by configuring a profile or storing cookies that provide interface with geolocation and other information.

Module reports how many people have as a goal doing a particular task. In the example shown the goal is own a Jaguar something which 49 individuals would like to do. The information shown in module is provided by an external source e.g. a third party website that makes available an API. Module displays photographs and module displays videos. Some modules such as module receive as a parameter the query provided by the user in search box . Other modules such as a calculator widget that allows the user to perform assorted computations related to fuel economy is not passed any information. Static elements may also be included. As described in more detail below some modules such as photo module and video module are passed a modified version of the query e.g. jaguar car instead of buy a jaguar so that the most relevant results can be presented to the user. Wikipedia module is passed a URL and a whole number. The URL specifies the Wikipedia page that the snippet is to be drawn from e.g. en.wikipedia.org wiki Jaguar  car and the whole number specifies how long the snippet should be e.g. 7 lines .

While the user s query buy a jaguar could be considered an ambiguous one the most likely intent of the user is not to purchase a mammal or sports team . In the example shown the user s query has been automatically disambiguated using the techniques described herein e.g. by noting that the inclusion of the word buy in the query makes the query considerably more likely to be associated with the car concept than any other meaning of jaguar . Module provides the user with the ability to explore other concepts which it has determined to be of possible interest to the user. For example by selecting link the user will be taken to an automatically generated page about the Jaguar XF. Thus in addition to being generated in response to explicit user queries a page such as is shown in can be generated as the result of navigating to a particular concept in a concept hierarchy and in such cases the concept can be used as a query for purposes of the processes described herein .

Links to the homonyms of jaguar are also provided by module e.g. in case the automatic disambiguation was incorrect . In some embodiments whenever an ambiguous query is received prior to being presented with any other modules the user is first presented with module and asked to indicate which meaning of the ambiguous term is intended by the user. In other embodiments a special disambiguation template is used in which each potential meaning of the query is dedicated a portion of the real estate on the page and the user may further refine his intent by for example selecting show more results like this or hide this links. In some embodiments the submission of ambiguous queries results in multiple pages with a different page for each homonym opening in the user s browser.

In some embodiments module also provides a way for a user to refine his query by and ing additional concepts shown in box with the original query. For example suppose a user entered a query of insurance in region . One of the concepts shown in module might be travel. B y selecting an and button displayed next to the word travel a new query may be provided to system . Page would be updated so that the new page is configured to display modules relevant to travel insurance. In some embodiments this technique is performed using vertical scoping scoping which limits results to concepts below a certain parent.

Template database stores a variety of page templates. In some embodiments another technique such as the use of a single XML document is used to store page templates. Any node in subject hierarchy can have associated with it one or more page templates. In some embodiments templates are managed by product managers who create templates that are appropriate for the verticals they oversee. For example a template tagged to the health node might favor the inclusion of modules that provide definitions e.g. a Wikipedia module a physicians desk reference module etc. while a template tagged to the travel vertical might favor the inclusion of more map modules. The root node of subject hierarchy has a default template that is used if no other template is selected. In various embodiments page templates are contributed by community members such as users who are interested in a particular topic. Other community editors can edit the page templates or provide their own page templates for concepts.

In addition to the selection and layout of modules page templates allow for the customization of such page features as background color the use of cascading style sheets etc. The templates stored in template database are tagged with one or more categories with which they are intended to be used. Instructions can also be included in a template with respect to the customization of specific modules. For example the Wikipedia snippet module can be used by a variety of different page templates. Suppose the manager of a Health vertical wishes Wikipedia to return 10 lines of text while the manager of a Transportation vertical only wishes Wikipedia to return 5 lines of text. A single implementation of the module can be used in both circumstances by having the respective page templates for those verticals provide different parameters to the Wikipedia snippet module e.g. show 10 lines vs. show 5 lines make the text blue vs. white make the widget 100 pixels wide vs. 200 pixels wide etc. .

At runtime mashup engine creates a reverse index that loads into memory a mapping between the page templates and the concepts to which they are mapped. A similar mapping is made between module specifications stored in module database and the concepts to which the modules they are mapped. Many thousands of modules or more may be described by module specifications stored in module database . The modules are created by third parties and submitted for use with system by their creators or selected for inclusion by a curator of database . Modules can provide virtually any user experience about virtually any concept. RSS feeds calculators images videos sounds interactive maps and games are examples of types of modules.

Each module specification includes a variety of information about the module such as the name of the module a description of the module whether the module can accept any predefined parameters such as query zipcode parsed concept etc. the maximum time that content for the module should be cached a minimum and maximum width for the module if it is to be displayed on a page in overview mode a minimum and maximum width for the module if it is to be displayed on a page in detail mode the concepts to which the module is tagged typically configured by an administrator when the module specification is first created the module s preferred location within a column if selected etc. In various embodiments the concept is tagged with subject type concepts infotypes or both.

The module specification can also include a group of user defined tags that allow the modules to be arbitrarily grouped. For example one administrator might tag certain modules as being yellow horizontal or provided by the Acme Corporation. 

A module specification can also specify a set of conditions that must be present for a module to be selected such as that a location specific module should only be shown if the location of the user is known or that a module only be shown at certain times of the day e.g. during the opening hours of a business who maintains the module or just before certain holidays or events such as annual sporting events. Another example of a condition that a module may require is that the query appear in the name of the module. For example suppose one of the widgets defined in module database provides a list of Irish Setters currently available for adoption from an Irish Setter dog rescue group. The module specification may require that a user s query include the term Irish Setter in order for the module to be shown irrespective of the categories with which the query is associated.

If the module requires information from an external source the module specification also stores a description of how the information is to be fetched such as which protocols are to be used and how any strings are to be formatted. The module specification also stores whether results for the module should be cached and if so for how long or if they should be fetched anew each time the module is considered for inclusion on a page such as page . For example a blog or news widget might have an expiry term of ten minutes. Generally an attempt is made to cache external services to control the amount of traffic that is sent to those services both reducing the impact on the resources of the external source and also to improve efficiency. Additionally if an external site is responding slowly to requests for information or if it becomes unavailable it may nonetheless be possible to present modules that make use of the external site if sufficient information from the external site is available in the cache. Some modules are JavaScript code and are not rendered until runtime on client . In some embodiments the JavaScript code is cached in module cache .

In some embodiments system is configured to communicate with an advertisement server not shown . Page templates may specify page blocks that can include advertising modules that 20 30 of the page s space should be dedicated to monetization the specific advertisements monetization widgets that should be selected by mashup engine etc. Historical information such as the number of advertising clicks received when a particular module was displayed last time can be used to determine which monetization modules if any should be shown on page . In some embodiments if a shopping intent is detected e.g. buy new shoes more space may be allocated to monetization units.

The process begins at when a query is received. For example at What color is an Irish setter is received by application tier from client . At categories associated with the query are determined. For example at mashup engine provides the query to lighting system which determines that the main concept associated with the query is dog. Lighting system provides a portion of hierarchy that includes the node dog to mashup engine along with a set of weights that describe how closely the query matched the portions of the hierarchy provided.

At candidate modules to be provided to the user are located. Suppose only one page template is present in template database and that it specifies for any query that somewhere between 6 and 10 modules be presented on the page and does not specify any additional constraints on the modules. At the concept dog as received from lighting system is used to locate modules in modules database . Suppose twenty modules have dog as a tag and several additional modules have as tags the parent concept pets. At system determines which modules of those identified should be displayed to the user.

The process begins at when a query is received. At the received query is optionally annotated. In some embodiments the query annotation is performed by mashup engine and is performed using word lists. Query annotation is typically used in the identification of a context of a query. For example in the query I want pictures of a black dog the phrase pictures of indicates an intent of the user to find pictures and black dog is the concept for which pictures are sought. Similarly in the query where can I buy a new pair of shoes the user s intent is found in the phrase where can I buy and the object of that intent is shoes. A query of what is a platypus reveals a definition intent what is a with a subject of platypus. Once any intents are identified the annotated query e.g. in which pictures of a spider bite becomes spider bite images is provided to lighting system .

At one or more concepts are received. For example at lighting system provides mashup engine with any concepts and surprises associated with the query as determined using the techniques described herein along with the scores associated with those concepts.

At a page template is selected. One way of selecting a page template is to perform a bottom up search as follows. Locate the first received concept of the query i.e. the main concept in subject hierarchy . If there is a page template tagged to the concept use that template. If not locate the second received concept of the query e.g. the first concept s parent and determine whether that concept has a template. If so the parent template is used. If not the hierarchy is traversed higher and higher until a node with a template tagged to it is reached. Every query will have at least one available template because the root node has a page template whose requirements all relate to layout and do not relate to conditions for being selected. If a node has multiple templates available the first template is evaluated to determine whether any conditions it may have are satisfied. If so the template is selected. If not the next template at that level is evaluated. If none of the templates at a level have their conditions satisfied the templates at the node s parent are evaluated and so on.

One reason that a concept may have multiple templates is that one template is a default and a second template is part of an advertising or other branding campaign. For example suppose a news corporation has a partnership with the operator of system . Visitors who arrive on a landing page provided by system e.g. a page generated for the concept of health by selecting a link from a page on the news corporation s site are to be shown a page such as is shown in but with the logo of the news corporation in one corner along with a link back to the news corporation s website. Such users are identified in some embodiments by a string such as partnerID XYZ being provided by the referring site where XYZ is the identity of the partner.

Users of system who do not arrive from news corporation site will not have a partnerID string equal to XYZ and will be presented with a page constructed from the default health template instead. Other factors which can also be used to determine which template will be used for a user are the user s location such as can be approximated from the user s IP address and a probability such as that 90 of users receive a first template and 10 of users receive a second template during A B testing. In some embodiments a page defined in template database has multiple modes such as an overview version and a detail version. Different templates may also be selected at the same node based on the user s platform. A mobile user who submits a query may receive a page with fewer modules or with mobile phone friendly modules than a PC based user who submits the same query.

Other techniques for selecting a page template can also be used at and can be used in combination with the technique described above. For example a query white list can be constructed so that when a query containing a certain term is received a custom template is used. One example of this is a sponsored product page. Suppose a query of ibuprofen is received. If ibuprofen is present on a whitelist instead of using a Drugs template or a Health template a template that describes a page branded with the logo of a particular manufacturer of ibuprofen may be selected instead.

If both overview and detail versions of a page template exist in some embodiments one of the determinations made at is whether the intent of the query implicates one or the other of the versions. For example a query of spider bite pictures indicates that a user is likely to want to view many pictures and the detailed version of page may be automatically selected over the overview page.

At mashup engine determines an initial list of candidate modules to be considered for inclusion in page . This process is also referred to herein as module lighting. In some embodiments the candidate list of modules is selected by determining a location in subject hierarchy associated with the query and examining whether any modules are tagged at the same level of the hierarchy. If so they are added to the candidate list of modules. Additional modules can be added to the candidate list of modules by traversing up or down levels in the hierarchy. Typically the lower in the tree a module is tagged the more narrow or specific that module will be. For example a dog breed selector widget that shows various images of dogs and provides information about their temperaments and size is an example of a widget that is likely to be tagged to the concept dog. If the query received at relates to a specific kind of dog the dog breed selector widget is likely to be of more relevance to the user than a much more general animal viewer widget that is tagged at the animal level.

Some modules may be generic to the category structure. For example a web results module or news module is a generic module that is applicable to virtually any topic. E.g. health news news about airplanes news about Ronald Reagan etc. Assorted techniques can be used to light such modules such as by performing an offline precomputation of the recall of the module with respect to all concepts and using the results to determine whether to show the generic module or not.

Modules can also be tagged with recall information and that information can be used to determine whether the query received from client should be passed to the module or whether the query should be transformed first. For example an image module is likely to have very poor recall for certain kinds of queries such as tail queries which contain several infrequently used words. Based on the recall information assorted query transformations can be used as explained in more detail below. Other examples of categories of queries for which recall information may be stored by a module include navigational queries e.g. as determined by a white list broad queries and ambiguous queries e.g. as identified by lighting system .

Infotypes can also be used when determining whether to light generic modules. For example if the query is about a celebrity the query may be determined to be image worthy. If a query lights the image infotype then modules tagged with the image infotype may be lit or have their lighting scores increased as a result. The concept honesty however is not an image worthy quote and as such a general image module would not be considered.

As mentioned previously modules may have associated constraints that are taken into consideration at . For example a stock ticker module may require that a user provide a query that includes the word stock for it to be shown. Modules can also have an and requirement that requires two different concepts to both be implicated in the query. For example a travel insurance calculator may require that both travel and insurance be returned at in order for it to be shown. A module may also have as a constraint that it only be selected if another specific module is selected or that if another specific module is selected it not be selected. A module can have multiple sizes associated with it or can take a size in which it must be rendered. Modules can be dropped or moved if they don t fit the layout for the page. Hence an additional constraint is that the module should fit the layout of the page.

In some embodiments a threshold is applied during module lighting to remove modules that light up due to low scoring concepts. For example there may exist concepts that are lit but which have very low affinity with the query. In such cases these modules attached to such low scoring concepts would not be relevant to the query and are dropped from the list of candidate modules. As an example suppose the received query is Seinfeld. Many concepts are lit of which American media is an example of a low scoring concept having a query to text affinity score of 0.4 and density score of 0. In this case the American media concept will get dropped because the threshold is set to 1.

Module to concept affinity is a weight specified when the module is first added to the module database. The weight is used to rank the module against the other modules tagged to the same concept. One example of how the score can be computed is module worthiness score module to concept affinity query to concept affinity density score . Suppose there exist two modules called bmicalc1 and bmicalc2 respectively which are both tagged to the same concept. The module to concept affinity score will help select one over the other. And if the module worthiness score is very low e.g. less than 0.61 the module is removed from the candidate list. A variant to the score function is score module to concept affinity w1 query to concept affinity w2 density score to indicate a weighted average and where w1 and w2 are the weights. Another variant to the score function takes into consideration past information such as module performance turn around time user feedback e.g. click through rate . Score module to concept affinity w1 query to concept affinity w2 density score w3 performance score w4 click through rate .

The above variants are scoring functions that are used for un cached modules and or for modules where data is not yet available and is also referred to as a pre scoring function. For a cached module this scoring function is not run because the score is retrieved from the cache. The pre scoring function assists in selecting modules for which external calls are made to get data. Modules scores are adjusted after data is made available for them. As described in more detail below a post scoring function is used at to combine the quality score if any with the pre score and any other scores. This score is then used to finally rank modules before returning them back for rendering.

At an intersection is determined between the candidate modules selected at and any requirements on modules specified by the page template. Typically if a module requested by a page template is not also selected as a candidate module at that module will not be included in the page. However an administrator may specify e.g. using a force option that a particular module must be included in the page irrespective of any scores it receives during module lighting.

At optional preprocessing is performed as described in more detail below. One example of preprocessing that can be performed at is a determination of the best inputs to send to a candidate module that accepts input. For example instead of sending a query of my twelve year old child has diabetes a query of juvenile diabetes or just diabetes may be sent to some modules. Another example of preprocessing that can be performed at is the offline computation of the recall of the module with respect to all concepts.

At the query is forwarded to each of the candidate modules that is configured to receive as input a query. In some cases module results may be present in a cache. If so the module cache is queried. If results for the module are not present in the cache in some embodiments an external call is made and the results may be cached for later use as applicable.

At postprocessing is performed. Two different types of post processing can be performed at . One form of post processing is an evaluation of the results obtained from modules either via the module cache or via the external query at . This form of post processing is also referred to herein as evaluating the quality of the results provided by the module and is described in more detail below.

The other form of postprocessing that can be performed at is content transformation. Suppose a module chooses to render itself with a white background. At one of the post processing actions that can be taken is to search for the existence of bg white or bg 0xFFF and then replace the detected string with bg red or bg 0xF00 as applicable switching the background of the module from white to red. Caption text can be similarly modified such as by substituting one company name with another by removing captions or by adding captions such as the caption shown at in .

Content reduction can also be performed at . For example a module may provide more information than a product manager chooses to have rendered on a page. At instructions in the page template can be used to remove unwanted portions of the module as applicable.

At the remaining candidate modules are ranked and sorted. A variety of techniques can be used to score rank the modules. In addition to density text affinity module to concept affinity and other pre scores one factor that can be considered is the response time of the module. A module that provides results quickly may be ranked higher than one that provides results slowly even if the slower module is otherwise a better match with the query. In some embodiments each time a module is queried a response time is stored in a log. The log can be evaluated periodically to determine an average response time or a running average response time etc. Another factor that can be considered is feedback. One measure of how useful a module is to a user is whether the user interacts with the module and if so for how long. Such information can be collected and stored in a log for use at . For example implicit feedback e.g. clickthrough rates can be collected. Explicit feedback can be collected by allowing the user to select don t show this again or this is helpful buttons under each module by performing polls AB testing etc. Another factor that can be considered is the timeliness of the module. For example an April 15 countdown timer widget may be of little interest to a user in September even if the query indicates a strong interest in tax information. In March however the widget may receive a considerably higher score. Another factor that can be considered is whether the module is maintained by an individual e.g. a hobbyist or amateur developer or whether the module is supplied by a professional organization.

In some embodiments system maintains information about specific users such as through the use of cookies. In that case one of the factors that can be considered at is whether the user has previously seen a module whether the user previously indicated that the module was useful or not etc. Other usage information can also be considered such as past queries. For example suppose a user consistently queries for natural remedies type health information and then performs a query of headache the results page may be skewed toward natural remedies for a headache while another user or a new user for whom no historical data is known may be shown a page that is more weighted to over the counter remedies for headaches. In some embodiments a plugin is used to capture information about the user and to provide the information to system .

Monetization considerations can also be made at . Some page templates reserve a portion of the page s real estate for things that generate money such as advertisements. Within that space different kinds of monetization modules compete for space. Examples of monetization modules include CPC modules e.g. Google Yahoo ads TPM modules visual ads CPA modules e.g. flight booking widgets where a company performs an action on the backend . Based on the query and what lights up different monetization modules compete for the monetization real estate in the same way that content modules compete for content real estate. In some embodiments monetization modules are confined to a particular region of the page e.g. banner area right side in some embodiments monetization modules may appear anywhere on the page but may not take up more than a fixed number of slots e.g. 3 or total space e.g. 30 etc.

Techniques such as A B testing can be used to keep track of which layout and module selections generate more revenue such as whether a banner region and no skyscraper should be shown or whether both should be shown and whether an advertisement should be shown at the bottom of the screen. Each combination can be tried and compared against other combinations. As another example suppose that lighting system is aware that a query is related to the concept herbs. An advertising analysis engine not shown can be configured to keep track of different concepts and which modules monetize best for those queries. For example it may be the case that for an herbs query advertisements provided by one advertising entity do not monetize as well as advertisements provided by another.

In some embodiments the percentage of the page dedicated to monetization may also change and can be dynamically returned based on the query. If the query has commercial intent buy cheap tickets then there will be more monetization as the user is indicating they are looking for advertisements they want to buy tickets.

At layout optimization is performed so that the page ultimately provided to the user is free of excessive gaps of space. For example suppose a total of ten modules are ultimately selected to be returned to a user on page . At the arrangement of those ten modules is determined.

One technique for improving the layout of the page shown in is to perform the following process. First determine the total number of modules to be presented on the page and divide by the number of columns. This gives an indication of an equal distribution. Next determine how much the proposed layout deviates from the equal distribution. This deviation is referred to herein as a layout quality score. If the layout quality score exceeds a threshold i.e. the layout is not considered optimal a fixing process is performed. One example of a fixing function is to identify the column with the highest number of modules and move the bottom module from that column to the column with the lowest number of modules. The layout quality is reevaluated and if necessary the fixing function is applied again iteratively until any additional movements are not possible either due to page template constraints e.g. against moving certain modules such as advertisements or due to any additional movements having no improvement effect.

The process begins at when a determination is made of what query to send to a module. For many modules such as modules that provide traditional text based web results the originally supplied query e.g. as received from client is provided to the module. As mentioned previously many modules do not accept queries or other input parameters and the processing at is not performed. However some queries when sent to some modules will not result in the best user experience.

One example of a query that can result in poor results from a module is where a tail query e.g. one that is very specific and has many non stop words is sent to a photo or video hosting site through a module that provides a frontend to the site. A query of my son Fred is six and he has diabetes is very unlikely to match any videos hosted by the site. In such circumstances a query transformation can be performed so that more relevant or in some cases any reasonable results are returned.

A query can be transformed in a variety of ways. One way of transforming a query is to send a shorter portion of the query. In the Fred example one example transformation is to send just the word diabetes. The word diabetes is selected by picking the word n gram in the query that contributed the most to the selection of the query s main concept. Another way of transforming a query is to send the top concept associated with the query instead of the query itself. Again using the Fred example a top concept for the query might be juvenile diabetes. Yet another way of transforming a query is to send one or more synonyms for terms in the query. For example if the query received from client is feline in some embodiments a synonym e.g. cat is selected from a list of synonyms and sent as a query instead. As another example suppose a user submits a query of rooster comb injection. Rooster comb given as an injection is a treatment that some individuals use for arthritis. The tissue of a rooster comb includes hyaluronic acid a synonym. Thus in some embodiments a query of buy some rooster comb for an injection might be transformed into buy some hyaluronic acid at .

Another example of a query that can result in poor results from a module is as follows. One meaning of the string JSON is JavaScript Object Notation. JSON is also a frequent misspelling of the name Jason. Suppose a user is interested in finding information having to do with JavaScript and provides as a query JSON. If the query is passed as is to a video module it is likely that many of the videos returned will be about people named Jason and not about JavaScript. One way of addressing this problem is through the use of query augmentation. The video site with which the video module communicates has its own hierarchy into which videos can be classified and accepts as command line hints a category that should be searched. By sending the appropriate category along with the query more appropriate results can be obtained. In some embodiments a mapping is maintained between at least some of the concepts in subject hierarchy and the concepts in the external video site. For example while JSON may have as its main concept JavaScript in hierarchy a hierarchy maintained by a video site is likely to be much smaller. A mapping between JavaScript in hierarchy and Technology in the video taxonomy may be used so that the query provided to the video module is JSON Technology. 

In some embodiments a ConceptDF is precomputed for every concept with respect to a module. The information can be used to determine a query transformation. For example suppose a user is seeking funny quotes by Kosmo Kramer. A module is described in module database that takes as input the name of a television show or movie and provides as output quotes from the show movie. Sending the module the query or even a shortened version of the query i.e. the concept Kosmo Kramer will not provide any results because Kosmo Kramer is not the name of a show movie. By examining the ConceptDF for the concept s parent however it is determined that the concept Seinfeld when passed to the module does provide results. Thus in some embodiments the ConceptDF is considered when transforming a query and or when determining what parameters to send to a module . Similarly suppose another module in module database provides current information on assorted financial indices. Sending the module a query of Johnny Stocks the baseball player is likely to result in a fairly high recall. However since the top concepts for Johnny Stocks are baseball and athlete the query will not be sent because those concepts have no recall or extremely low recall for the module.

At results returned by the module are evaluated for example to determine whether the query provided at yielded better results than the one originally received to determine whether the received results are of sufficiently high quality to merit including the module in page etc. In various embodiments the processing performed at is performed for all queries irrespective of whether the originally received query is transformed or not.

A variety of techniques can be used to evaluate the results at . One example is to use a recall ratio. A recall ratio is a ratio between the number of results for a module for example images and the number of web results in our index. If the recall ratio of a module is small then the module does not likely produce good results. If the recall ratio is high then the module likely produces good results.

Another example is to use text scoring on the results. For any module the number of times the given query has occurred in the results is determined. If that number is small then the module likely does not produce good results. If the number is large then the module likely produces good results.

A combination function can also be employed so that results with extremely high recall ratios are not penalized for having low text scores and vice versa.

Yet another example is to use pattern matching on the results. The occurrence of certain patterns such as 403 error and no result in the results received from a module indicate that the quality of results returned by that module may be low.

Although the foregoing embodiments have been described in some detail for purposes of clarity of understanding the invention is not limited to the details provided. There are many alternative ways of implementing the invention. The disclosed embodiments are illustrative and not restrictive.

