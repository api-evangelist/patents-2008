---

title: Systems and methods for secure watchlisting
abstract: A watchlisting module is configured to securely and efficiently create, modify, manage, and store a watchlist. The watchlisting module is configured to generate a watchlist consisting of watchlist entries. Each watchlist entry encapsulates information about an entity to be associated with the watchlist. The watchlist entry includes information about the entity including a unique identifier for the watchlist, a unique identifier of the watchlist entry, a unique identifier for the entity, and access control information for membership process related to the watchlist. The watchlist entry also includes a State Lock. Watchlisting module is configured to utilize the State Lock to secure and verify a watchlist entry.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08555354&OS=08555354&RS=08555354
owner: 
number: 08555354
owner_city: Haymarkey
owner_country: US
publication_date: 20080221
---
The development of this invention was supported in part by the Department of the Army under contract number Prime Contract DASG60 02 D 0006 Sub contract 4400135566. The United States Government may have certain rights in this invention.

Security systems implement various processes for identifying and verifying the identity of a person. Typically security systems also track entities in order to prevent dangerous or suspected dangerous entities from causing mischief. Watchlisting is a process implemented by security systems in order to identify and track entities.

Watchlisting typically consists of creating and maintaining a watchlist of entities that are suspected of dangerous activities. The watchlist contains information that identifies the entities and the reasons for inclusion in the list. To prevent mischief by the entities the watchlist is passed to different security systems and personal. As such the system and personal can compare entities in contact with the systems and personal to the watchlist.

However in typical watchlisting process the security systems do not provide secure and efficient management of the information in the watchlists. Thus there is a need in the art for a mechanism to provide secure and efficient watchlisting systems and methods.

According to embodiments of the present disclosure a watchlisting module is configured to securely and efficiently create modify manage and store a watchlist. The watchlisting module is configured to generate a watchlist consisting of watchlist entries. Each watchlist entry encapsulates information about an entity to be associated with the watchlist. The watchlist entry includes information about the entity including a unique identifier for the watchlist a unique identifier of the watchlist entry a unique identifier for the entity and access control information for membership process related to the watchlist. The watchlist entry also includes a State Lock. Watchlisting module is configured to utilize the State Lock to secure and verify a watchlist entry.

The watchlisting module is configured to generate user interfaces to allow a user to create a watchlist. The watchlisting module is also configured to generate user interfaces to allow a user to add entities in the watchlist and manage existing watchlists and watchlist entries.

Reference will now be made in detail to the exemplary embodiments of the disclosure an example of which is illustrated in the accompanying drawings. Wherever possible the same reference names and numbers will be used throughout the drawings to refer to the same or like parts.

In the following description reference is made to the accompanying drawings that form a part thereof and in which is shown by way of illustration specific exemplary embodiments. These embodiments are described in sufficient detail to enable those skilled in the art to practice the embodiments and it is to be understood that other embodiments can be used and that changes can be made without departing from the scope of this disclosure. The following description is therefore merely exemplary.

A watchlisting module allows wide scale capture and tracking of information about entities. is a diagram illustrating an entity identification and tracking system capable of implementing a watchlisting module consistent with embodiments of the disclosure. The system includes multiple computing systems located in various geographic regions. Each computing system in system can implement an instance of the watchlisting module. Each of the computing systems capture information about entities and use the watchlisting module to process store manage track and share the information about the entities. For example the information can include identity information about the entities.

As illustrated in the computing systems can be located in seven different geographic regions Region Region Region Region Region Region and Region . The geographic regions can be located at any place in the world. For example the geographic regions can be located in a single city. Furthermore the geographic regions can be spread out over the entire globe with multiple regions located in different countries or on different continents. One skilled in the art will realize that the geographic regions and computing systems illustrated in are exemplary and that system can include any number of computing systems located in any number of geographic regions.

As shown Region can include several laptop computing systems networked to a server computing system . Region can include several handheld computing systems networked to a workstation computing system . Region can include several workstation computing systems networked to a server computing system . Region can include a mainframe computing system networked to the computing systems in Regions and . Region can include a satellite uplink to transmit information to other regions via satellite .

Region can include another mainframe computing system networked to the computer systems in Region and can include a satellite uplink to transmit information to other regions such as Regions and via satellite . Region can include several workstation computing systems networked to a server computing system . Region can include a laptop computing system and a satellite uplink to communicate to other geographic regions via satellite .

The computing systems can communicate with one another via any type of communication channel and protocol. For example the computing systems in a particular geographic region can be networked in a LAN configuration. Further all the computing systems in system can be networked in a WAN configuration. The computing systems can communicate via any type of communication channel such as wired satellite cellular radio frequencies including WiFi 802.11a b g n or any other current or future wired or wireless protocols.

System allows the capture processing storing managing tracking and sharing of information from entities. The information allows system to identify classify and track the entities that come in contact with system . In order to identify classify and track the entities the computing systems of the geographic regions can implement a watchlisting module. For example the computing system can implement an application providing the features and functionality of the watchlisting module. Additionally the watchlisting module can be configured to function with other security applications in order to identify classify and track the entities. For example the watchlisting module can be configured to function as a feature of a Biometrics Automation Toolset BAT as described in U.S. patent application Ser. No. 11 966 333 filed on Dec. 28 2007 the specification of which is incorporated herein in its entirety by reference.

For example system can be used in a conflict setting in which information about entities can be used to distinguish friend from foe. As such geographic Regions and can be located in the theater of conflict. Military personnel can desire to identify and track entities in the theater in order to distinguish friend and foe and to identify and track entities as they travel between geographic regions. Accordingly the personnel in Regions and can use the computing systems with the watchlisting module to capture information such as identification information physical description biometric information entities status reason for interest and the like. The personnel can use the watchlisting module to capture the information organize the information manage the information store the information and share the information with other computing systems in system .

The personnel can also use the watchlisting module to share and retrieve information about entities from other geographic regions. This allows the personnel for example to identify entities in real time at virtually any location and thereby identify and prevent foes from traveling region to region and creating mischief. Further the personnel can use watchlisting module to transmit the information and retrieve information from regions outside the theater of conflict such as Regions and .

System above illustrates computing systems positioned and communicating in several configurations. One skilled in the art will realize that the configuration of the computing systems in system is exemplary and that the computing systems can be arranged in various configurations according to local capability and need in order to communicate by various procedures.

For example a single laptop computing system can be located in another geographic region not shown . As such data can be moved using removable and recordable media such as a USB drive or a CD R instead of by direct network link. Additionally for example several laptops computing systems can be networked together with one designated as the local server. 

As mentioned above the computer systems of system utilize a watchlisting module to capture organize manage store and share information for identifying recording and tracking entities. In system the various computing systems can include a computing platform to function as a platform for the watchlisting module. is a diagram illustrating an exemplary configuration of a computing platform in which the watchlisting module can be implemented. As illustrated computing platform can include a processor communication bus main memory secondary memory and input output . One skilled in the art will realize that the components of computing platform are exemplary and computing platform can include additional hardware.

As shown in computing platform can include one or more processors such as processor that provide an execution platform for embodiments of an application and a watchlisting module . Processor can be for example a central processing unit CPU a micro controller unit MCU digital signal processor DSP or the like. Commands and data from processor are communicated over a communication bus . Computing platform also includes a main memory such as a Random Access Memory RAM where application including watchlisting module can be executed during runtime and a secondary memory . Additionally an operating system OS such as those from MICROSOFT can be executed on main memory during runtime.

Secondary memory can include for example a hard disk drive not shown and or a removable storage drive not shown representing a floppy diskette drive a magnetic tape drive a compact disk drive etc. where a copy whole or in part of a computer program embodiment for application and watchlisting module can be stored. For example application and watchlisting module can be stored in secondary memory and during runtime application and watchlisting module whole or in part can be loaded into main memory .

Input output provides an interface where data can be transferred to and from computing platform . For example input output can include a keyboard a mouse a display a network interface sound device and the like.

Application can be any type of application capable of functioning with watchlisting module to implement the functionality of watchlisting module . For example application can be a standalone application designed to solely perform the functionality of watchlisting module . Additionally application can be a security application such as BAT that provides additional functionality in combination with the functionality of watchlisting module .

Application and watchlisting module can be written in program code and executed by computing platform . Application and watchlisting module can be implemented in computer languages such as PASCAL C C JAVA HTML XML and the like. One skilled in the art will realize that the components functions and methods described above and below can be implemented in any computer language and any application capable of implementing BAT.

Application and watchlisting module can be embodied in secondary memory and or main memory as illustrated as instructions for causing computing platform to perform the instructions. Secondary memory and main memory can include computer readable signals in compressed or uncompressed form. Exemplary computer readable signals whether modulated using a carrier or not are signals that a computing system can be configured to access including signals downloaded through the Internet or other networks. Concrete examples of the foregoing include distribution of executable software programs of the computer program on a CD ROM or via Internet download. In a sense the Internet itself as an abstract entity is a computer readable medium. The same is true of computer networks in general.

As shown in watchlisting module can include a watchlisting engine an application interface a repository interface and a search engine . Modules of watchlisting module can be implemented as software components hardware components or combinations thereof. More particularly modules can be implemented using conventional programming languages e.g. Pascal FORTRAN etc. objected oriented programming languages e.g. C Java PHP Perl XML or other similar languages. Modules can also be implemented as hardware components such as an application specific integrated circuit a programmable read only memory an EEPROM a microcontroller a microprocessor or other similar computing platform.

Watchlisting module can be coupled to a repository . Repository can be implemented in any structure such as a database. For example repository can be implemented utilizing any type of conventional database architecture using open source technologies proprietary technologies or combinations thereof. Repository can be configured to store information captured and managed by watchlisting module .

Watchlisting engine can be configured to manage modules to provide the functionality of watchlisting module as previously described and further described herein below. In particular watchlisting engine is configured to receive information about entities. Watchlisting engine is configured to take the received data and arrange the received data in a secure watchlist. Watchlisting engine is configured to manage the watchlist in order to allow a user to interact with the watchlist. Watchlisting engine is further configured to store the secure watchlist in repository . Additionally watchlisting engine is configured receive requests to retrieve information from the watchlist and in response retrieve the information.

Watchlisting engine classifies information about entities into secure watchlists. A watchlist is a data structure for holding information about entities. The watchlist defines a category in which the entities are to be classified. The watchlist allows users to track entities associated with the category. For example watchlisting engine can be configured to generate a watchlist to enter information about suspected terrorists. As such the watchlist can be populated by users of watchlisting module with entities suspected to be terrorists. Further users can retrieve information from the watchlist to identify and track entities that may be suspected terrorists.

According to embodiments watchlisting engine is configured to generate watchlists that consist of the collection of watchlist entries. Each watchlist entry encapsulates all the information about an entity to be tracked by the watchlist. is a generalized diagram illustrating a watchlist according to embodiments. As illustrated watchlist includes a number of watchlist entries . While illustrates four watchlist entries one skilled in the art will realize that watchlist can include any number of entries .

Watchlist entries can include information fields for recording information about the entities to be included in watchlist . Watchlist entries can include an entry unique identification field UID a entity UID field a watchlist UID field a watchlist metadata field a watchlist entry data field and a record metadata field .

Entry UID field contains a global unique identifier GUID that uniquely associates a particular watchlist entry to watchlist . As such watchlisting engine can identify watchlist entries associated with a particular watchlist .

Entity UID field contains a global unique identifier GUID that uniquely identifies the entity for which information is included in watchlist entry . The entity GUID can be unique across different watchlists . As such watchlisting engine can identify and uniquely track the same entity across different watchlists .

Watchlist UID field contains a global unique identifier GUID that uniquely identifies watchlist . As such watchlisting engine can store track and retrieve multiple watchlists .

Watchlist metadata field contains metadata about watchlist . The metadata can include information about the creator owner of watchlist a title of watchlist a description of watchlist and password information for different membership processes associated with watchlist such as nomination to watchlist denial of membership to watchlist approval of membership to watchlist and removal from watchlist .

Watchlist entry data field contains identifying information about the entity associated with a watchlist entry . The identifying information can include information that identifies and describes the entity information describing the activities of the entity threat level of the entity and status of the entity. For example the identifying information can be watchlist entry nominating activity watchlist entry nominating activity s identity watchlist entry nomination comments watchlist entry nomination date time watchlist entry denying activity watchlist entry denying activity s identity watchlist entry denial comments watchlist entry denial date time watchlist entry approving activity watchlist entry approving activity s identity watchlist entry approval comments watchlist entry approval date time watchlist entry removing activity watchlist entry removing activity s identity watchlist entry removal comments watchlist entry removal date time watchlist entry alert category watchlist entry alert level watchlist entry alert contact watchlist entry alert details watchlist entry alert region watchlist entry state and watchlist entry state lock.

Record metadata field contains metadata required for maintenance of a watchlist entry . The metadata can include information about the computing system creating storing or maintaining the watchlist entry the region in which the watchlist entry was created and date and time the watchlist entry was created. The metadata allows computing systems in the different regions of system to share maintain and consolidate watchlist entries from different computing systems. For example the metadata can include a entry state entry audit information entry zone entry subzone entry classification entry server time stamp entry lastmodified time stamp and record datecreated time stamp.

Returning to watchlist engine can be configured to control the creation of watchlist and entry of information into a watchlist. For example for a watchlist watchlisting engine can be configured to access data in watchlist to export data from watchlist and to perform other managing processes for watchlist . Additionally watchlisting engine can be configured to create manage and control watchlist entries for a watchlist . Watchlisting engine can be configured to perform membership process for an individual watchlist entry such as approving membership to the watchlist removing membership to the watchlist denying membership to the watchlist nominating membership to the watchlist or modifying alert information of an entry.

Each of the membership processes relates to the addition or modification of a watchlist entry . Nominating is a process of placing an entity in a watchlist entry. Approving is a process of confirming an entity is correctly included in a watchlist entry of a watchlist. Removing is a process of removing a watchlist entry from a watchlist. Denying is a process of tagging a watchlist entry as improperly included in a watchlist without removing the watchlist entry. Alert information consists of information defining a level of threat an entity poses and the reasons for the level of threat.

According to embodiments watchlisting engine can be configured to provide levels of access for the different membership processes associated with a watchlist . For example each process such as nominating approving removing denying can be limited to particular users based on a level of access. Watchlisting engine can establish levels of access by allowing a creator owner of a watchlist to associate passwords with each membership process. As such watchlisting engine can allow a user to perform the process based on a correct entry of a password. By establishing levels of access the different membership processes can be limited to certain users to insure the integrity of the information in watchlist .

Watchlisting engine is also configured to secure watchlist from tampering. In order to secure a watchlist watchlisting engine creates a State Lock. The State Lock includes data from the watchlist called the State Key which is encrypted. The State Key can include for example the values of the data fields GUID of the watchlist entry the passwords for the membership process and the like. By encrypting these values the State Lock captures and secures the values of the watchlist entry itself as well as the entity s status on the watchlist and the access controls at a particular time.

Watchlisting engine can be configured to utilize any type of symmetric or asymmetric encryption method to encrypt the State Key. For example watchlisting engine can utilize the Advanced Encryption Standard AES to encrypt the State Key.

Watchlisting engine can be configured to utilize the State Lock and the GUIDs to verify that the State Lock was applied and still is associated with the correct watchlist entry. For example watchlisting engine can decrypt the State Lock for an entry and compare the GUIDs of the State Lock to the GUIDs of the watchlist entry. Watchlisting engine can be configured to utilize the State Lock to verify that the data in the entry have not been tampered with by comparing the encrypted State Lock data with the current State Key. For example watchlisting entry can decrypt the State Lock and compare the decrypted State Lock with the State Key of the entry. Watchlisting engine can be configured to utilize the State Lock to secure the access controls from tampering. For example watchlisting engine can encrypt the passwords in the State Lock. Additionally watchlisting engine can verify the passwords by comparing encrypted passwords with entered or stored passwords.

According to embodiments watchlisting module can be configured to maintain the keys for encryption and decryption of the State Key. Likewise an application such as BAT can maintain the keys for encryption and decryption. As such watchlisting module or application can utilize the encryption key to create the State Lock by encrypting the State Key. Watchlisting module or application can utilize the decryption key to decrypt the State Lock. Once the decrypted watchlisting module or application can use the decrypted State Lock to check the integrity of the data repair the data if it had been directly tampered as long as the State Lock s GUIDs matched the Entry s GUIDs indicating that the lock itself wasn t tampered with or swapped and prompt the user for access information for membership processes.

In order to allow user to interact with watchlisting module watchlisting engine can be coupled to application interface . Application interface can be configured to generate user interfaces for creating managing and modifying watchlists such as watchlist . Application interface can be configured to generate user interfaces including widgets text fields and the like that allow a user to interact with watchlisting engine to perform the processes associated with a watchlist.

If watchlisting module is implemented in a stand alone application application interface can be configured to generate the user interfaces on execution of the stand alone application. If watchlisting module is implemented in another security application such as BAT application interface can be configured to generate the user interfaces on initiation of a request from the security application. The security application can generate the request based on a selection of a widget in the security application.

In order to create a new watchlist add new watchlist entries to watchlist view a watchlist and modify watchlist entries in an existing watchlist application interface can be configured to generate a manager user interface. The manager user interface can include text fields that allow a user to select an existing watchlist. Manager user interface can include widgets that allow a user to initiate a new watchlist creation process or to select an existing watchlist to view and modify. is a generalized diagram illustrating a manager user interface consistent with embodiments of the disclosure. It should be readily apparent to those of ordinary skill in the art that the diagram depicted in represents a generalized schematic illustration and that other components may be added or existing components may be removed or modified.

As illustrated in interface can include a watchlist text field a watchlist details field a nominate button a create button and show button . Interface can also include a close button . A user can utilize close button to close interface . Watchlist text field can be configured to display a list of watchlists maintained by watchlisting module . Watchlist text field can also be configured to include a snapshot of details about the watchlists. For example watchlist text field can include information such as watchlist name watchlist description total number of entities in the watchlist watchlist owner watchlist owner identity and BAT server if watchlisting module is incorporated in a BAT application .

Watchlist text field can also be configured to be interactive. A user can highlight one of the watchlists displayed in watchlist text field . In response watchlisting engine can retrieve details about the highlighted watchlist and display the details in watchlist details field . Watchlist details field can include information such as watchlist GUID watchlist name watchlist description total number of entities in the watchlist watchlist owner watchlist owner identity a number of entities to nominated to the watchlist a number of entities denied membership to the watchlist a number of entities approved on the watchlist and a number of removed from the watchlist.

Additionally once a watchlist is highlighted in watchlist text field a user can utilize nominate button to nominate an entity to the highlighted watchlist. Once selected nominate button has been selected application interface can be configured to generate nominate user interfaces that allow the user to enter information for the watchlist entry. Nominate user interfaces can include text fields that allow a user to enter information to populate a watchlist entry . Nominate user interface can include widgets that allow a user to transmit the information to watchlisting engine in order to organize and store the entered information.

Additionally if the nominate process is access controlled application interface can generate an interface for entering access control information such as a password. Application interface can pass the access control information to watchlisting engine for verification before allowing a user to perform the nomination membership process.

As illustrated in nominate user interface can include an entity name text field entity information text field and confirmation buttons . Entity name text field is configured to allow a user to enter a name of entity to be nominated to a watchlist entry . Entity information text field is configured to allow a user to enter information about the entity to be nominated. For example the information can include residence information citizenship known alias and the like. Confirmation buttons allow the user to transmit the information to watchlisting engine or cancel the nominate process.

As illustrated in after entering information in interface application interface can be configured to generate a nominate user interface to allow a user to enter information about themselves and alert information about the entity in the watchlist entry. For example to enter information about the user interface can be configured to include a user text field user identity string and comments text field . To enter information about the alert status interface can be configured to include an alert category menu alert value widget alert contact text field alert region menu and alert comments text field . Interface can also be configured to include confirmation buttons . Confirmation buttons allow the user to transmit the information to watchlisting engine or cancel the nominate membership process.

In addition to receiving information from an interface about an entity watchlisting module can be configured to receive information about entities directly from application or other applications in communication with watchlisting module . For example watchlisting module can be a component of a BAT application. As such watchlisting module can receive information about an entity directly from the BAT application when nominating an entity to the watchlist.

Returning to once a watchlist is highlighted in watchlist text field a user can utilized show button to view the highlighted watchlist. Once show button has been selected application interface can be configured to generate a show watchlist user interfaces that allows the user to view the watchlist and manage watchlist entries in the highlighted watchlist. Show watchlist interface can include text fields that allow a user view the watchlist entries in the watchlist. Show watchlist user interface can include widgets that allow a user to perform membership process such as deny approve and remove membership of entities in the watch and to change the alert status of entities in the watchlist.

As illustrated in interface can include a entity text field an entry details text field membership text field a deny membership button approve membership button a remove membership button a change alert status button and close button . Close button allows the user to close interface . Entity text field can be configured to display all the entities included in the watchlist. Entity text field can be configured to be interactive to allow a user to select an entity in the watchlist.

Once selected interface can be configured to display details about the entry in entry details text field and membership details text field . Entry details text field can be configured to display information about the entity selected in entity text field . For example entry details text field can be configured to display an entity s name entity s GUID and alert information. Membership details text field can be configured to display information about the membership process performed on a particular entity. For example membership details text field can display information such as a particular membership process such as nominate date performed user performing membership process and comments.

Additionally once an entity has been selected a user can utilize buttons and to perform membership process on the selected entity. Once one of buttons and has been selected application interface can be configured to generate membership user interfaces that allow the user to perform the membership processes. Membership user interfaces can include text fields that allow a user to enter information to define a particular membership process. Membership user interfaces can include widgets that allow a user to transmit the membership information to watchlisting engine to organize and store the entered information.

For example if a user desires to perform an approve membership process the user can select approve membership button . In response application interface can generate approve membership user interfaces. are generalized diagrams illustrating exemplary approve membership user interfaces and consistent with embodiments of the disclosure. It should be readily apparent to those of ordinary skill in the art that the diagrams depicted in represent generalized schematic illustrations and that other components may be added or existing components may be removed or modified.

As illustrated in approve membership user interface includes an authority text field an alert information text field and confirmation text field . Authority text field can be configured to include text field to allow a user to information to identify themselves. For example text field can include text fields for entering information such as name identity string and comments.

Alert information text field can be configured to include text fields and menus to allow the user to modify the alert information of the watchlist entry. For example text field can be configured to include text fields and menus for entering information such as alert category alert value alert contact alert region and alert comments. Once the information has been entered confirmation buttons can be selected to either accept or cancel the approve membership process.

According to embodiments of the present disclosure watchlisting module can be configured to provide access controls on the various membership processes. For example watchlisting module can maintain passwords for the various membership processes. In order to provide access control application interface can generate user interfaces to allow a user to enter access information when a membership process is performed.

As illustrated in if access controls have been established for the approve membership process after selection of confirmation buttons application interface can generate an access user interface . Interface can be configured to include an access control text field and access confirmation buttons . Access control text field can be configured to allow the user to enter a password for the particular membership process in this case approve process. Once the password has been entered confirmation buttons can be selected to either transfer the access information to watchlisting engine or cancel the access control.

When a user enters access control information watchlisting engine can be configured to retrieve stored access information and compare the access information to entered access information.

Returning to manager interface can include a create button . A user can select button in order to initiate a new watchlist creation process. In response to the selection of button application interface can be configured to generate a new watchlist interface to allow the user to enter information about the watchlist. The new watchlist interface can be configured to include text fields to enter descriptive information about the new watchlist. The new watchlist interface can also be configured to include widgets menus and text fields to establish access controls for the membership processes.

As illustrated in interface can include watchlist name text field watchlist description text field watchlist owner text field watchlist owner identity text field membership process section and confirmation buttons . Watchlist name text field can be configured to allow the user to enter a name for the new watchlist. Watchlist description text field can be configured to allow the user to enter a description of the watchlist. Watchlist owner text field and watchlist owner identity text field can be configured to allow the user to enter a name and identification information respectively.

Additionally interface can include membership process sections . Membership process sections can be configured to include text fields menus and widgets to allow the user to specify access control rules for the membership process nominate deny approve and remove.

For example as illustrated interface can include a process section for the nominate membership process. Process section can include a widget to select password protect for the nominate membership process. Widget can be configured to allow the user to enter password information for the nominate membership process when selected. As such interface can include a same as menu password text field and repeat password text field . If the user selects widget the user can specify the password for the nominate membership process to be the same as another membership process by using menu . Alternatively the user can enter a separate password for the nominate membership process in password text field and repeat password text field .

As with the nominate membership process membership process sections can include deny process section for deny membership process approve process section for approve membership process and remove process section for remove membership process to allow the user to specify access control for these membership processes.

The watchlist creation process also includes seeding a first person in the watchlist. As such when a watchlist is created application interface can be configured to generate a nominate user interface such as interfaces and as illustrated in . Additionally when seeding the first person to a new watchlist watchlisting module can be configured to receive information directly from application or other applications in communication with watchlisting module .

Returning to watching module can be configured to transmit the secure watchlists to other application. As such watchling module can be configured to secure the entire watchlists utilizing any type of well known encryption process.

Process begins with watchlisting module maintaining watchlist in a repository in stage . For example watchlisting module can store the watchlists in repository . Watchlisting module can also be configured to manage the flow of information into and out of the watchlist. The watchlists include multiple watchlist entries. Each watchlist entry encapsulates all the information about an entity associated with the watchlist. For example the watchlist entry can include information identifying an entity associated with the watchlist GUID for uniquely identifying the watchlist a GUID for uniquely identifying the watchlist entry a GUID for uniquely identifying the entity and access control information for controlling access to processes associated with the watchlist entries. Watchlisting module can maintain the watchlist in a data structure as illustrated in .

By maintaining the watchlists watchlisting module can allow access to the watchlists. Watchlisting module receives a request from a user to interact with a watchlist in stage . The request can be received from an application such as application .

Watchlisting module provides interfaces for interacting with the watchlist in stage . The interfaces allow a user to interact with the watchlist such as view and modify the watchlist. For example application interface can generate interfaces as illustrated in .

In response to user interaction with the interfaces watchlisting module retrieves information from the watchlist in stage . Then watchlisting module provides the information to the user in stage . For example a user can select a watchlist displayed in watchlist text field and select button of interface . In response watchlisting engine can retrieve information about the selected watchlist from repository and provide the information to application interface . Application interface can generate an interface such as interface to present the information to the user.

By maintaining the watchlist watchlisting module also allows a user to add an entity to an existing watchlist. is a flow diagram illustrating a process of adding an entity consistent with embodiments of the present disclosure. The process can be performed by computing systems in system implementing an application including a watchlisting module as described above in . It should be readily apparent to those of ordinary skill in the art that the diagram depicted in represents a generalized illustration and that other steps may be added or existing steps can be removed or modified.

Process begins with watchlisting module receiving a request to add an entity to an existing watchlist in stage . The request can be received from an application such as application . Additionally the request can be received in response to a widget being selected in an interface generated by watchlisting module .

Next watchlisting module generates interfaces for receiving information about an entity in stage . For example application interface can generate interfaces such as interfaces and illustrated in for receiving information about an entity. Additionally watchlisting module can receive information about an entity from an application such as application .

Then watchlisting module generates a watchlist entry utilizing the received information in stage . For example watchlisting engine can organize the received information into a watchlist entry such as watchlist entry illustrated in .

Next watchlisting module can store the watchlist entry associated with the corresponding watchlist in stage . For example watchlisting engine can store the watchlisting entry in repository .

In addition to maintaining the watchlists watchlisting module can be configured to create watchlists. is a flow diagram illustrating a process of creating a watchlist consistent with embodiments of the present disclosure. The process can be performed by computing systems in system implementing an application including a watchlisting module as described above in . It should be readily apparent to those of ordinary skill in the art that the diagram depicted in represents a generalized illustration and that other steps may be added or existing steps can be removed or modified.

Process begins with watchlisting module receiving a request from to create a watchlist in stage . The request can be received from an application such as application . Additionally the request can be received from a widget in an interface generated by application interface .

Then watchlisting module provides an interface to the user for entering information about the watchlist in stage . The information can include access control information for controlling access to processes associated with the watchlist. For example under the command of watchlisting engine application interface can generate interfaces such as interface as illustrated in .

After receiving information from the interface watchlisting module generates a GUID to uniquely identify the watchlist in stage . Additionally watchlisting module generates a GUID for uniquely identifying the entry for the entity in the watchlist in stage .

After receiving information watchlisting module generates a watchlist including a first watchlist entry in stage . The watchlist entry can include an identity of the first entity the first unique identifier the second unique identifier a third unique identifier for identifying the first entity and the access control information. A user can enter the identity of the first entity. Additionally watchlisting module can receive the identity of the first entity in the request. For example the identity can be transmitted from an application such as a BAT application. Watchlisting module can generate the third unique identifier. Likewise watchlisting module can also receive the third unique identifier from an application such as a BAT application.

After generating the watchlist watchlisting module stores the watchlist in stage . For example watchlisting engine can store the watchlist in repository .

Watchlisting module provides a secure watchlist by including a State Lock with the watchlist entries. are flow diagrams illustrating a process of generating a State Lock and process for utilizing the State Lock consistent with embodiments of the present disclosure. The processes can be performed by computing systems in system implementing an application including a watchlisting module as described above in . It should be readily apparent to those of ordinary skill in the art that the diagrams depicted in represent generalized illustrations and that other steps may be added or existing steps can be removed or modified.

Process begins with watchlisting module generating the State Key in stage . The State Key can include different information from a particular watchlist entry. For example the State Key can include the values of the data fields GUIDs of the watchlist entry the passwords for the membership processes and the like. To generate the State Key watchlisting engine can retrieve the information from repository and combine the information to form the State Key.

Next watchlisting module encrypts the State Key to form the State Lock in stage . For example watchlisting engine can encrypt the State Key utilizing any type of well known encryption process such as symmetric and asymmetric encryption processes.

Then watchlisting module can store the State Lock with the watchlist entry for which it was generated in stage . For example watchlisting engine can store the State Lock in watchlist entry data field as illustrated in .

At any time watchlisting module can utilize the State Lock to verify the watchlist entry repair the watchlist entry or retrieve access control information. shows a process for utilizing the State Lock. Process begins with watchlisting module retrieving the State Lock in stage . For example watchlisting engine can retrieve the State Lock from watchlist entry data field of a particular watchlist entry.

Next watchlisting module decrypts the State Lock to retrieve the State Key in stage . For example watchlisting engine can decrypt the State Lock utilizing any type of well known decryption process such as symmetric and asymmetric decryption process.

Then watchlisting module can utilize the State Lock to verify the watchlist entry repair the watchlist entry and or retrieve access control information. Watchlisting engine can be configured to utilize the State Lock and the GUIDs to verify that the State Lock was applied and still is associated with the correct watchlist entry. For example watchlisting engine can decrypt the State Lock for an entry and compare the GUIDs of the State Lock to the GUIDs of the watchlist entry. Watchlisting engine can be configured to utilize the State Lock to verify that the data in the entry have not been tampered with by comparing the encrypted State Lock data with the current State Key. For example watchlisting entry can decrypt the State Lock and compare the decrypted State Lock with the State Key of the entry. Watchlisting engine can be configured to utilize the State Lock to secure the access controls from tampering. For example watchlisting engine can encrypt the passwords in the State Lock. Additionally watchlisting engine can verify the passwords by comparing encrypted passwords with entered or stored passwords.

Other embodiments of the present teaching will be apparent to those skilled in the art from consideration of the specification and practice of the invention disclosed herein. It is intended that the specification and examples be considered as exemplary only with a true scope and spirit of the invention being indicated by the following claims.

