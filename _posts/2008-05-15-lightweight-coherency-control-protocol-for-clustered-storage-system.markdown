---

title: Lightweight coherency control protocol for clustered storage system
abstract: A lightweight coherency control protocol ensures consistency of data containers, such as a file, and associated data buffers stored on one or more volumes served by a plurality of nodes, e.g., storage systems, connected as a cluster. Each data buffer is associated with a current cache sequence number comprising a load generation value and an update count value. The load generation value is incremented every time an inode of a file is loaded into a memory of the storage system. Once the inode is loaded and its load generation value is set, then the appropriate buffer of a buffer tree for the file is loaded into the memory. The update count value is incremented each time the buffer is updated with a write request/operation. Therefore, each buffer loaded into memory is tagged with the load generation value and an update count from the time that buffer is loaded.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07934060&OS=07934060&RS=07934060
owner: NetApp, Inc.
number: 07934060
owner_city: Sunnyvale
owner_country: US
publication_date: 20080515
---
This application is a continuation of U.S. Ser. No. 11 264 601 issued as U.S. Pat. No. 7 376 796 on May 20 2008 filed by Peter F. Corbett et al. on Nov. 1 2005.

The present invention relates to clustered computer environments and more particularly to ensuring consistency of data containers served by storage systems interconnected as a cluster.

A storage system typically comprises one or more storage devices into which information may be entered and from which information may be obtained as desired. The storage system includes a storage operating system that functionally organizes the system by inter alia invoking storage operations in support of a storage service implemented by the system. The storage system may be implemented in accordance with a variety of storage architectures including but not limited to a network attached storage environment a storage area network and a disk assembly directly attached to a client or host computer. The storage devices are typically disk drives organized as a disk array wherein the term disk commonly describes a self contained rotating magnetic media storage device. The term disk in this context is synonymous with hard disk drive HDD or direct access storage device DASD .

The storage operating system of the storage system may implement a high level module such as a file system to logically organize the information stored on volumes as a hierarchical structure of data containers such as files and logical units. For example each on disk file may be implemented as set of data structures i.e. disk blocks configured to store information such as the actual data for the file. These data blocks are organized within a volume block number vbn space that is maintained by the file system. The file system may also assign each data block in the file a corresponding file offset or file block number fbn . The file system typically assigns sequences of fbns on a per file basis whereas vbns are assigned over a larger volume address space. The file system organizes the data blocks within the vbn space as a logical volume each logical volume may be although is not necessarily associated with its own file system.

A known type of file system is a write anywhere file system that does not overwrite data on disks. If a data block is retrieved read from disk into a memory of the storage system and dirtied i.e. updated or modified with new data the data block is thereafter stored written to a new location on disk to optimize write performance. A write anywhere file system may initially assume an optimal layout such that the data is substantially contiguously arranged on disks. The optimal disk layout results in efficient access operations particularly for sequential read operations directed to the disks. An example of a write anywhere file system that is configured to operate on a storage system is the Write Anywhere File Layout WAFL file system available from Network Appliance Inc. Sunnyvale Calif.

The storage system may be further configured to operate according to a client server model of information delivery to thereby allow many clients to access data containers stored on the system. In this model the client may comprise an application such as a database application executing on a computer that connects to the storage system over a computer network such as a point to point link shared local area network LAN wide area network WAN or virtual private network VPN implemented over a public network such as the Internet. Each client may request the services of the storage system by issuing file based and block based protocol messages in the form of packets to the system over the network.

A plurality of storage systems may be interconnected to provide a storage system environment configured to service many clients. Each storage system may be configured to service one or more volumes wherein each volume stores one or more data containers. Yet often a large number of data access requests issued by the clients may be directed to a small number of data containers serviced by a particular storage system of the environment. A solution to such a problem is to distribute the volumes serviced by the particular storage system among all of the storage systems of the environment. This in turn distributes the data access requests along with the processing resources needed to service such requests among all of the storage systems thereby reducing the individual processing load on each storage system. However a noted disadvantage arises when only a single data container such as a file is heavily accessed by clients of the storage system environment. As a result the storage system attempting to service the requests directed to that file may exceed its processing resources and become overburdened with a concomitant degradation of speed and performance.

One technique for overcoming the disadvantages of having a single file that is heavily utilized is to stripe the file across a plurality of volumes configured as a striped volume set SVS where each volume such as a data volume DV is serviced by a different storage system thereby distributing the load for the single file among a plurality of storage systems. A technique for data container such as a file striping is described in U.S. patent application Ser. No. 11 119 278 entitled STORAGE SYSTEM ARCHITECTURE FOR STRIPING DATA CONTAINER CONTENT ACROSS VOLUMES OF A CLUSTER now issued as U.S. Pat. No. 7 698 289 on Apr. 13 2010 by Kazar et al. which application is hereby incorporated by reference as though fully set forth herein. According to the data container striping arrangement each storage system may service access requests i.e. file operations from clients directed to the same file. File operations such as read and write operations are forwarded directly to the storage systems that are responsible for their portions of the data for that file.

An exemplary distributed multi storage system architecture may comprise a plurality of storage systems organized as a cluster wherein each storage system includes a thin front end element that performs protocol conversion of file access protocols into a common cluster protocol for communicating with a back end element of a storage system. The front end element includes a local cache memory for temporarily storing caching data to serve client requests faster and more efficiently. Each back end element serves one or more particular files or particular regions of files and as such maintains an authoritative version of the files or regions of files.

A front end element of the cluster that receives a client request directed to a file initially attempts to serve that request from its local cache. However the front end element may not know whether its local cache is up to date because there may be another front end element of the cluster that is also writing to that same file. Write requests are pushed through forwarded to the appropriate back end element whereas read requests are attempted to be serviced first from the local cache of the front end element or alternatively at the appropriate back end element. An issue with this clustered storage system architecture involves ensuring that a copy of a region of file data i.e. a data buffer stored in a local cache of a front end element is up to date coherent with respect to the authoritative copy of that data at the back end element.

An approach to ensuring coherency of data in a clustered multi storage system having front end and back end elements involves distributed locking using file locks such as range locks and or opportunistic locks op locks . A range lock is a hard lock that provides exclusive access to a specific byte range within a file. The range lock is established upon request by a caller such as a front end element and is released only at the request of the lock s owner such as a back end element . The front end element can request and be granted a range lock that enables exclusive access to the corresponding range of the file so that it performs write operations on cached data until the back end element instructs it to release the lock.

An op lock is an automatically revocable soft lock that allows the front end element to operate on a file data until such time as a conflicting operation is attempted. The front end element can cache the data and perform read and write operations on the cached data because it knows that no other access is allowed to that data as long as it has an op lock on the file. As soon as a second front end element attempts a conflicting operation on the file the back end element blocks the conflicting operation and revokes the op lock. In particular the back end element instructs the front end element to return flush any write modifications to the back end element and then discard the entire content of its local cache. The back end element then unblocks the second front end element and grants it an op block to the file.

However substantial overhead is required with respect to maintenance and utilization of such a distributed file system cache of file data in the clustered storage system using distributed locks. The present invention is directed to a system and method that reduces the overhead of maintaining data coherency in a clustered storage system.

The invention overcomes the disadvantages of the prior art by providing a light weight coherency control protocol for ensuring consistency of data containers and associated data buffers stored on one or more volumes served by a plurality of nodes e.g. storage systems connected as a cluster. Each storage system of the cluster includes i a disk element D module adapted to service one or more volumes of the cluster and ii a network element N module adapted to redirect a data access request for a data container to any D module of the cluster. The D module maintains an authoritative version of the data container such as a file or region data buffer of the file. Notably a local cache memory is provided on the N module to enable caching of data buffers and serving of data access requests on that module. Each file is illustratively identified by a file identifier file ID and each data buffer is represented by a file block number fbn that identifies the position or offset of the buffer within the file.

According to an aspect of the invention each data buffer is associated with a current cache sequence number comprising a load generation value and an update count value. The load generation value is incremented every time an inode of a file is loaded into a memory of the D module. Once the inode is loaded and its load generation value is set then the appropriate data buffer of a buffer tree for the file is loaded into the memory. The update count value is incremented each time the buffer is updated with a write request operation. Therefore each data buffer loaded into memory is tagged with the load generation value and an update count from the time that buffer is loaded.

Broadly stated in response to receiving the data access read request from a client that is directed to a file an N module forwards a message to the appropriate D module to validate the particular file and data buffer that the N module attempts to serve. The D module retrieves the inode of the requested file and determines whether the data buffer is cached at the N module and if so whether that cached copy is representative of the most recent version of the data buffer as denoted by the current cache sequence number . If the copy of the data buffer cached at the N module represents the most recent version of the buffer the D module returns a response to the N module indicating that the cached buffer can be used to service the read request. Otherwise the D module returns i a copy of the updated data buffer to the N module as part of the response or ii a response indicating that the cached buffer is stale . In the latter case the N module then forwards a message to the D module requesting the updated data buffer.

Advantageously the invention enables distribution of a file system buffer cache across multiple storage systems of the cluster in a coherent manner. In other words the invention ensures data coherency across the nodes because it maintains a single point of control for each file i.e. the D module that owns that file. Furthermore the inventive coherency control protocol does not require the use of distributed locking such as range locks as commonly used with prior distributed multi storage system architectures.

The clients may be general purpose computers configured to interact with the node in accordance with a client server model of information delivery. That is each client may request the services of the node and the node may return the results of the services requested by the client by exchanging packets over the network . The client may issue packets including file based access protocols such as the Common Internet File System CIFS protocol or Network File System NFS protocol over the Transmission Control Protocol Internet Protocol TCP IP when accessing information in the form of files and directories. Alternatively the client may issue packets including block based access protocols such as the Small Computer Systems Interface SCSI protocol encapsulated over TCP iSCSI and SCSI encapsulated over Fibre Channel FCP when accessing information in the form of blocks.

Each node is illustratively embodied as a dual processor storage system executing a storage operating system that preferably implements a high level module such as a file system to logically organize the information as a hierarchical structure of named data containers such as directories files and special types of files called virtual disks hereinafter generally blocks on the disks. However it will be apparent to those of ordinary skill in the art that the node may alternatively comprise a single or more than two processor system. Illustratively one processor executes the functions of the N module on the node while the other processor executes the functions of the D module .

The present invention is illustratively implemented on the cluster by extending the distributed storage system architecture to allow data caching on N modules using a novel lightweight coherency control protocol. As described herein each D module services one or more particular files or particular regions of files and accordingly maintains an authoritative version of the file and or region data buffer of the file. However the use of data caching i.e. caching of data buffers enables the N modules to serve client requests directed to data containers such as files faster and more efficiently than having to always redirect requests to the appropriate D modules. Accordingly a local cache memory local cache illustratively adapted to provided such data caching is associated with the processor executing the functions of the N module. The inventive coherency protocol may be easily implemented on the distributed architecture because the protocol operates at the inode and buffer level. In addition the invention may be employed in clustered storage system architectures where the distance between storage systems is significant thus rendering the front end cache a remote cache.

The memory illustratively comprises storage locations that are addressable by the processors and adapters for storing software program code. A portion of the memory may be further organized as a buffer cache for storing certain data structures associated with the present invention. The processor and adapters may in turn comprise processing elements and or logic circuitry configured to execute the software code and manipulate the data structures. The storage operating system portions of which is typically resident in memory and executed by the processing elements functionally organizes the node by inter alia invoking storage operations in support of the storage service implemented by the node. It will be apparent to those skilled in the art that other processing and memory means including various computer readable media may be used for storing and executing program instructions pertaining to the invention described herein.

The network adapter comprises a plurality of ports adapted to couple the node to one or more clients over point to point links wide area networks virtual private networks implemented over a public network Internet or a shared local area network. The network adapter thus may comprise the mechanical electrical and signaling circuitry needed to connect the node to the network. Illustratively the computer network may be embodied as an Ethernet network or a Fibre Channel FC network. Each client may communicate with the node over network by exchanging discrete frames or packets of data according to pre defined protocols such as TCP IP.

The storage adapter cooperates with the storage operating system executing on the node to access information requested by the clients. The information may be stored on any type of attached array of writable storage device media such as video tape optical DVD magnetic tape bubble memory electronic random access memory micro electro mechanical and any other similar media adapted to store information including data and parity information. However as illustratively described herein the information is preferably stored on the disks of array . The storage adapter comprises a plurality of ports having input output I O interface circuitry that couples to the disks over an I O interconnect arrangement such as a conventional high performance FC link topology.

Storage of information on each array is preferably implemented as one or more storage volumes that comprise a collection of physical storage disks cooperating to define an overall logical arrangement of volume block number vbn space on the volume s . Each logical volume is generally although not necessarily associated with its own file system. The disks within a logical volume file system are typically organized as one or more groups wherein each group may be operated as a Redundant Array of Independent or Inexpensive Disks RAID . Most RAID implementations such as a RAID 4 level implementation enhance the reliability integrity of data storage through the redundant writing of data stripes across a given number of physical disks in the RAID group and the appropriate storing of parity information with respect to the striped data. An illustrative example of a RAID implementation is a RAID 4 level implementation although it should be understood that other types and levels of RAID implementations may be used in accordance with the inventive principles described herein.

To facilitate access to the disks the storage operating system implements a write anywhere file system that cooperates with one or more virtualization modules to virtualize the storage space provided by disks . The file system logically organizes the information as a hierarchical structure of named directories and files on the disks. Each on disk file may be implemented as set of disk blocks configured to store information such as data whereas the directory may be implemented as a specially formatted file in which names and links to other files and directories are stored. The virtualization module s allow the file system to further logically organize information as a hierarchical structure of blocks on the disks that are exported as named logical unit numbers luns .

In the illustrative embodiment the storage operating system is preferably the NetApp Data ONTAP operating system available from Network Appliance Inc. Sunnyvale Calif. that implements a Write Anywhere File Layout WAFL file system. However it is expressly contemplated that any appropriate storage operating system may be enhanced for use in accordance with the inventive principles described herein. As such where the term WAFL is employed it should be taken broadly to refer to any storage operating system that is otherwise adaptable to the teachings of this invention.

In addition the storage operating system includes a series of software layers organized to form a storage server that provides data paths for accessing information stored on the disks of the node . To that end the storage server includes a file system module in cooperating relation with a volume striping module VSM a RAID system module and a disk driver system module . The RAID system manages the storage and retrieval of information to and from the volumes disks in accordance with I O operations while the disk driver system implements a disk access protocol such as e.g. the SCSI protocol. The VSM illustratively implements a striped volume set SVS described herein. As described further herein the VSM co operates with the file system to enable storage server to service a volume of the SVS. In particular the VSM implements a Locate function to compute the location of data container content in the SVS volume to thereby ensure consistency of such content served by the cluster.

The file system implements a virtualization system of the storage operating system through the interaction with one or more virtualization modules illustratively embodied as e.g. a virtual disk vdisk module not shown and a SCSI target module . The vdisk module enables access by administrative interfaces such as a user interface of a management framework see in response to a user system administrator issuing commands to the node . The SCSI target module is generally disposed between the FC and iSCSI drivers and the file system to provide a translation layer of the virtualization system between the block lun space and the file system space where luns are represented as blocks.

The file system is illustratively a message based system that provides logical volume management capabilities for use in access to the information stored on the storage devices such as disks. That is in addition to providing file system semantics the file system provides functions normally associated with a volume manager. These functions include i aggregation of the disks ii aggregation of storage bandwidth of the disks and iii reliability guarantees such as minoring and or parity RAID . The file system illustratively implements the WAFL file system hereinafter generally the write anywhere file system having an on disk format representation that is block based using e.g. 4 kilobyte kB blocks and using index nodes inodes to identify files and file attributes such as timestamps access permissions size and block location . The file system uses files to store meta data describing the layout of its file system these meta data files include among others an inode file. A file handle i.e. an identifier that includes an inode number is used to retrieve an inode from disk.

Broadly stated all inodes of the write anywhere file system are organized into the inode file. A file system fs info block specifies the layout of information in the file system and includes an inode of a file that includes all other inodes of the file system. Each logical volume file system has an fsinfo block that is preferably stored at a fixed location within e.g. a RAID group. The inode of the inode file may directly reference point to data blocks of the inode file or may reference indirect blocks of the inode file that in turn reference data blocks of the inode file. Within each data block of the inode file are embedded inodes each of which may reference indirect blocks that in turn reference data blocks of a file.

Operationally a request from the client is forwarded as a packet over the computer network and onto the node where it is received at the network adapter . A network driver of layer or layer processes the packet and if appropriate passes it onto a network protocol and file access layer for additional processing prior to forwarding to the write anywhere file system . Here the file system generates operations to load retrieve the requested data from disk if it is not resident in core i.e. in memory . If the information is not in memory the file system indexes into the inode file using the inode number to access an appropriate entry and retrieve a logical vbn. The file system then passes a message structure including the logical vbn to the RAID system the logical vbn is mapped to a disk identifier and disk block number disk dbn and sent to an appropriate driver e.g. SCSI of the disk driver system . The disk driver accesses the dbn from the specified disk and loads the requested data block s in memory for processing by the node. Upon completion of the request the node and operating system returns a reply to the client over the network .

It should be noted that the software path through the storage operating system layers described above needed to perform data storage access for the client request received at the node may alternatively be implemented in hardware. That is in an alternate embodiment of the invention a storage access request data path may be implemented as logic circuitry embodied within a field programmable gate array FPGA or an application specific integrated circuit ASIC . This type of hardware implementation increases the performance of the storage service provided by node in response to a request issued by client . Moreover in another alternate embodiment of the invention the processing elements of adapters may be configured to offload some or all of the packet processing and storage access operations respectively from processor to thereby increase the performance of the storage service provided by the node. It is expressly contemplated that the various processes architectures and procedures described herein can be implemented in hardware firmware or software.

As used herein the term storage operating system generally refers to the computer executable code operable on a computer to perform a storage function that manages data access and may in the case of a node implement data access semantics of a general purpose operating system. The storage operating system can also be implemented as a microkernel an application program operating over a general purpose operating system such as UNIX or Windows NT or as a general purpose operating system with configurable functionality which is configured for storage applications as described herein.

In addition it will be understood to those skilled in the art that the invention described herein may apply to any type of special purpose e.g. file server filer or storage serving appliance or general purpose node or computer including a standalone computer or portion thereof embodied as or including a storage system. Moreover the teachings of this invention can be adapted to a variety of storage system architectures including but not limited to a network attached storage environment a storage area network and disk assembly directly attached to a client or host computer. The term storage system should therefore be taken broadly to include such arrangements in addition to any subsystems configured to perform a storage function and associated with other equipment or systems. It should be noted that while this description is written in terms of a write any where file system the teachings of the present invention may be utilized with any suitable file system including a write in place file system.

In the illustrative embodiment the storage server is embodied as D module of the storage operating system to service one or more volumes of array . In addition the multi protocol engine is embodied as N module to i perform protocol termination with respect to a client issuing incoming data access request packets over the network as well as ii redirect those data access requests to any storage server of the cluster . Moreover the N module and D module cooperate to provide a highly scalable distributed storage system architecture of the cluster . To that end each module includes a cluster fabric CF interface module adapted to implement intra cluster communication among the modules including D module to D module communication for data container striping operations described herein.

The protocol layers e.g. the NFS CIFS layers and the iSCSI FC layers of the N module function as protocol servers that translate file based and block based data access requests from clients into CF protocol messages used for communication with the D module . That is the N module servers convert the incoming data access requests into file system primitive operations commands that are embedded within CF messages by the CF interface module for transmission to the D modules of the cluster . Notably the CF interface modules cooperate to provide a single file system image across all D modules in the cluster . Thus any network port of an N module that receives a client request can access any data container within the single file system image located on any D module of the cluster.

Further to the illustrative embodiment the N module and D module are implemented as separately scheduled processes of storage operating system however in an alternate embodiment the modules may be implemented as pieces of code within a single operating system process. Communication between an N module and D module is thus illustratively effected through the use of message passing between the modules although in the case of remote communication between an N module and D module of different nodes such message passing occurs over the cluster switching fabric . A known message passing mechanism provided by the storage operating system to transfer information between modules processes is the Inter Process Communication IPC mechanism. The protocol used with the IPC mechanism is illustratively a generic file and or block based agnostic CF protocol that comprises a collection of methods functions constituting a CF application programming interface API . Examples of such an agnostic protocol are the SpinFS and SpinNP protocols available from Network Appliance Inc. The SpinFS protocol is described in the above referenced U.S. Pat. No. 6 671 773.

The CF interface module implements the CF protocol for communicating file system commands among the modules of cluster . Communication is illustratively effected by the D module exposing the CF API to which an N module or another D module issues calls. To that end the CF interface module is organized as a CF encoder and CF decoder. The CF encoder of e.g. CF interface on N module encapsulates a CF message as i a local procedure call LPC when communicating a file system command to a D module residing on the same node or ii a remote procedure call RPC when communicating the command to a D module residing on a remote node of the cluster . In either case the CF decoder of CF interface on D module de encapsulates the CF message and processes the file system command.

A data container e.g. a file is accessed in the file system using a data container handle. is a schematic block diagram illustrating the format of a data container handle including a SVS ID field an inode number field a unique ifier field a striped flag field and a striping epoch number field . The SVS ID field contains a global identifier within the cluster of the SVS within which the data container resides. The inode number field contains an inode number of an inode within an inode file pertaining to the data container. The unique ifier field contains a monotonically increasing number that uniquely identifies the data container handle . The unique ifier is particularly useful in the case where an inode number has been deleted reused and reassigned to a new data container. The unique ifier distinguishes that reused mode number in a particular data container from a potentially previous use of those fields. The striped flag field is illustratively a Boolean value that identifies whether the data container is striped or not. The striping epoch number field indicates the appropriate striping technique for use with this data container for embodiments where the SVS utilizes differing striping techniques for different data containers.

In the illustrative embodiment a data container is represented in the write anywhere file system as an inode data structure adapted for storage on the disks . is a schematic block diagram of an inode which preferably includes a meta data section and a data section . The information stored in the meta data section of each inode describes the data container e.g. a file and as such includes the type e.g. regular directory vdisk of file its size timestamps e.g. access and or modification time and ownership i.e. user identifier UID and group ID GID of the file. The meta data section also includes a load generation field described further herein. The contents of the data section of each inode may be interpreted differently depending upon the type of file inode defined within the type field . For example the data section of a directory inode contains meta data controlled by the file system whereas the data section of a regular inode contains file system data. In this latter case the data section includes a representation of the data associated with the file.

Specifically the data section of a regular on disk inode may include file system data or pointers the latter referencing 4 kB data blocks on disk used to store the file system data. Each pointer is preferably a logical vbn to facilitate efficiency among the file system and the RAID system when accessing the data on disks. Given the restricted size e.g. 128 bytes of the inode file system data having a size that is less than or equal to 64 bytes is represented in its entirety within the data section of that inode. However if the length of the contents of the data container exceeds 64 bytes but less than or equal to 64 kB then the data section of the inode e.g. a first level inode comprises up to 16 pointers each of which references a 4 kB block of data on the disk.

Moreover if the size of the data is greater than 64 kB but less than or equal to 64 megabytes MB then each pointer in the data section of the inode e.g. a second level inode references an indirect block e.g. a first level L1 block that contains 1024 pointers each of which references a 4 kB data block on disk. For file system data having a size greater than 64 MB each pointer in the data section of the inode e.g. a third level L3 inode references a double indirect block e.g. a second level L2 block that contains 1024 pointers each referencing an indirect e.g. a first level L1 block. The indirect block in turn contains 1024 pointers each of which references a 4 kB data block on disk. When accessing a file each block of the file may be loaded from disk into the memory .

When an on disk inode or block is loaded from disk into memory its corresponding in core structure embeds the on disk structure. For example the dotted line surrounding the inode indicates the in core representation of the on disk inode structure. The in core structure is a block of memory that stores the on disk structure plus additional information needed to manage data in the memory but not on disk . The additional information may include e.g. a dirty bit . After data in the inode or block is updated modified as instructed by e.g. a write operation the modified data is marked dirty using the dirty bit so that the inode block can be subsequently flushed stored to disk. The in core and on disk format structures of the WAFL file system including the inodes and inode file are disclosed and described in the previously incorporated U.S. Pat. No. 5 819 292 titled METHOD FOR MAINTAINING CONSISTENT STATES OF A FILE SYSTEM AND FOR CREATING USER ACCESSIBLE READ ONLY COPIES OF A FILE SYSTEM by David Hitz et al. issued on Oct. 6 1998.

A file system layout is provided that apportions an underlying physical volume into one or more virtual volumes or flexible volumes of a storage system such as node . An example of such a file system layout is described in U.S. patent application Ser. No. 10 836 817 titled EXTENSION OF WRITE ANYWHERE FILE SYSTEM LAYOUT by John K. Edwards et al. and assigned to Network Appliance Inc. now issued as U.S. Pat. No. 7 409 494 on Aug. 5 2008. The underlying physical volume is an aggregate comprising one or more groups of disks such as RAID groups of the node. The aggregate has its own physical volume block number pvbn space and maintains meta data such as block allocation structures within that pvbn space. Each flexible volume has its own virtual volume block number vvbn space and maintains meta data such as block allocation structures within that vvbn space. Each flexible volume is a file system that is associated with a container file the container file is a file in the aggregate that contains all blocks used by the flexible volume. Moreover each flexible volume comprises data blocks and indirect blocks that contain block pointers that point at either other indirect blocks or data blocks.

In one embodiment pvbns are used as block pointers within buffer trees of files such as file stored in a flexible volume. This hybrid flexible volume embodiment involves the insertion of only the pvbn in the parent indirect block e.g. Mode or indirect block . On a read path of a logical volume a logical volume vol info block has one or more pointers that reference one or more fsinfo blocks each of which in turn points to an Mode file and its corresponding Mode buffer tree. The read path on a flexible volume is generally the same following pvbns instead of vvbns to find appropriate locations of blocks in this context the read path and corresponding read performance of a flexible volume is substantially similar to that of a physical volume. Translation from pvbn to disk dbn occurs at the file system RAID system boundary of the storage operating system .

In an illustrative dual vbn hybrid flexible volume embodiment both a pvbn and its corresponding vvbn are inserted in the parent indirect blocks in the buffer tree of a file. That is the pvbn and vvbn are stored as a pair for each block pointer in most buffer tree structures that have pointers to other blocks e.g. level 1 L1 indirect blocks Mode file level 0 L0 blocks. is a schematic block diagram of an illustrative embodiment of a buffer tree of a file that may be advantageously used with the present invention. A root top level inode such as an embedded Mode references indirect e.g. level 1 blocks . Note that there may be additional levels of indirect blocks e.g. level 2 level 3 depending upon the size of the file. The indirect blocks and Mode contain pvbn vvbn pointer pair structures that ultimately reference data buffers data blocks used to store the actual data of the file.

The pvbns reference locations on disks of the aggregate whereas the vvbns reference locations within files of the flexible volume. The use of pvbns as block pointers in the indirect blocks provides efficiencies in the read paths while the use of vvbn block pointers provides efficient access to required meta data. That is when freeing a block of a file the parent indirect block in the file contains readily available vvbn block pointers which avoids the latency associated with accessing an owner map to perform pvbn to vvbn translations yet on the read path the pvbn is available.

Whereas the aggregate is analogous to a physical volume of a conventional storage system a flexible volume is analogous to a file within that physical volume. That is the aggregate may include one or more files wherein each file contains a flexible volume and wherein the sum of the storage space consumed by the flexible volumes is physically smaller than or equal to the size of the overall physical volume. The aggregate utilizes a physical pvbn space that defines a storage space of blocks provided by the disks of the physical volume while each embedded flexible volume within a file utilizes a logical vvbn space to organize those blocks e.g. as files. Each vvbn space is an independent set of numbers that corresponds to locations within the file which locations are then translated to dbns on disks. Since the flexible volume is also a logical volume it has its own block allocation structures e.g. active space and summary maps in its vvbn space.

A container file is a file in the aggregate that contains all blocks used by a flexible volume. The container file is an internal to the aggregate feature that supports a flexible volume illustratively there is one container file per flexible volume. Similar to a pure logical volume in a file approach the container file is a hidden file not accessible to a user in the aggregate that holds every block in use by the flexible volume. The aggregate includes an illustrative hidden meta data root directory that contains subdirectories of flexible volumes 

Specifically a physical file system WAFL directory includes a subdirectory for each flexible volume in the aggregate with the name of subdirectory being a file system identifier fsid of the flexible volume. Each fsid subdirectory flexible volume contains at least two files a filesystem file and a storage label file. The storage label file is illustratively a 4 kB file that contains meta data similar to that stored in a conventional raid label. In other words the storage label file is the analog of a raid label and as such contains information about the state of the flexible volume such as e.g. the name of the flexible volume a universal unique identifier uuid and fsid of the flexible volume whether it is online being created or being destroyed etc.

In addition to being embodied as a container file having level 1 blocks organized as a container map the filesystem file includes block pointers that reference various file systems embodied as flexible volumes . The aggregate maintains these flexible volumes at special reserved inode numbers. Each flexible volume also has special reserved inode numbers within its flexible volume space that are used for among other things the block allocation bitmap structures. As noted the block allocation bitmap structures e.g. active map summary map and space map are located in each flexible volume.

Specifically each flexible volume has the same inode file structure content as the aggregate with the exception that there is no owner map and no WAFL fsid filesystem file storage label file directory structure in a hidden meta data root directory . To that end each flexible volume has a volinfo block that points to one or more fsinfo blocks each of which may represent a snapshot along with the active file system of the flexible volume. Each fsinfo block in turn points to an inode file that as noted has the same inode structure content as the aggregate with the exceptions noted above. Each flexible volume has its own inode file and distinct inode space with corresponding inode numbers as well as its own root fsid directory and subdirectories of files that can be exported separately from other flexible volumes.

The storage label file contained within the hidden meta data root directory of the aggregate is a small file that functions as an analog to a conventional raid label. A raid label includes physical information about the storage system such as the volume name that information is loaded into the storage label file . Illustratively the storage label file includes the name of the associated flexible volume the online offline status of the flexible volume and other identity and state information of the associated flexible volume whether it is in the process of being created or destroyed .

The VLDB is a database process that tracks the locations of various storage components e.g. SVSs flexible volumes aggregates etc. within the cluster to thereby facilitate routing of requests throughout the cluster. In the illustrative embodiment the N module of each node accesses a configuration table that maps the SVS ID of a data container handle to a D module that owns services the data container within the cluster. The VLDB includes a plurality of entries which in turn provide the contents of entries in the configuration table among other things these VLDB entries keep track of the locations of the flexible volumes hereinafter generally volumes and aggregates within the cluster. Examples of such VLDB entries include a VLDB volume entry and a VLDB aggregate entry .

The VLDB illustratively implements a RPC interface e.g. a Sun RPC interface which allows the N module to query the VLDB . When encountering contents of a data container handle that are not stored in its configuration table the N module sends an RPC to the VLDB process. In response the VLDB returns to the N module the appropriate mapping information including an ID of the D module that owns the data container. The N module caches the information in its configuration table and uses the D module ID to forward the incoming request to the appropriate data container. All functions and interactions between the N module and D module are coordinated on a cluster wide basis through the collection of management processes and the RDB library user mode applications .

To that end the management processes have interfaces to are closely coupled to RDB . The RDB comprises a library that provides a persistent object store storing of objects for the management data processed by the management processes. Notably the RDB replicates and synchronizes the management data object store access across all nodes of the cluster to thereby ensure that the RDB database image is identical on all of the nodes . At system startup each node records the status state of its interfaces and IP addresses those IP addresses it owns into the RDB database.

The present invention is illustratively implemented on a storage system architecture comprising two or more volumes distributed across a plurality of nodes of cluster . The volumes are organized as a SVS and configured to store content of data containers such as files and luns served by the cluster in response to multi protocol data access requests issued by clients . Notably the content of each data container is apportioned among the volumes of the SVS to thereby improve the efficiency of storage service provided by the cluster. To facilitate a description and understanding of the present invention data containers are hereinafter referred to generally as files .

The SVS comprises a meta data volume MDV and one or more data volumes DV . The MDV is configured to store a canonical copy of certain meta data including access control lists ACLs and directories associated with all files stored on the SVS whereas each DV is configured to store at least data content of those files. For each file stored on the SVS one volume is designated the container attribute volume CAV and to that end is configured to store cache certain rapidly changing attribute meta data including time stamps and file length associated with that file to thereby offload access requests that would otherwise be directed to the MDV.

In the illustrative embodiment described herein determination of the CAV for a file is based on a simple rule designate the volume holding the first stripe of content data for the file as the CAV for the file. Not only is this simple rule convenient but it also provides an optimization for small files. That is a CAV may be able to perform certain operations without having to communicate with other volumes of the SVS if the file is small enough to fit within the specified stripe width. Ideally the first stripes of data for files are distributed among the DVs of the SVS to thereby facilitate even distribution of CAV designations among the volumes of the SVS. In alternate embodiments data for files is striped across the MDV and the DVs.

In contrast each DV stores only file F inodes and ACL inode . According to the inventive architecture a DV does not store directories or other device inodes constructs such as symbolic links however each DV does store F inodes and may store cached copies of ACL inodes that are arranged in the same locations as their respective inodes in the MDV . A particular DV may not store a copy of an inode until an I O request for the data container associated with the inode is received by the D module serving a particular DV. Moreover the contents of the files denoted by these F inodes are periodically sparse according to SVS striping rules as described further herein. In addition since one volume is designated the CAV for each file stored on the SVS DV is designated the CAV for the file represented by inode and DV is the CAV for the files identified by inodes . Accordingly these CAVs cache certain rapidly changing attribute meta data M associated with those files such as e.g. file size as well as access and or modification time mtime stamps .

The SVS is associated with a set of striping rules that define a stripe algorithm a stripe width and an ordered list of volumes within the SVS. The striping rules for each SVS are illustratively stored as an entry of VLDB and accessed by SVS ID. is a schematic block diagram of an exemplary VLDB SVS entry in accordance with an embodiment of the present invention. The VLDB entry includes a SVS ID field and one or more sets of striping rules . In alternate embodiments additional fields may be included. The SVS ID field contains the ID of a SVS which in operation is specified in data container handle .

Each set of striping rules illustratively includes a stripe width field a stripe algorithm ID field an ordered list of volumes field and in alternate embodiments additional fields . The striping rules contain information for identifying the organization of a SVS. For example the stripe algorithm ID field identifies a striping algorithm used with the SVS. In the illustrative embodiment multiple striping algorithms could be used with a SVS accordingly stripe algorithm ID is needed to identify which particular algorithm is utilized. Each striping algorithm in turn specifies the manner in which file content is apportioned as stripes across the plurality of volumes of the SVS. The stripe width field specifies the size width of each stripe. The ordered list of volumes field contains the IDs of the volumes comprising the SVS. Moreover the ordered list of volumes may specify the function and implementation of the various volumes and striping rules of the SVS. For example the first volume in the ordered list may denote the MDV of the SVS whereas the ordering of volumes in the list may denote the manner of implementing a particular striping algorithm e.g. round robin.

A Locate function is provided that enables the VSM and other modules such as those of N module to locate a D module and its associated volume of a SVS in order to service an access request to a file. The Locate function takes as arguments at least i a SVS ID ii an offset within the file iii the inode number for the file and iv a set of striping rules and returns the volume on which that offset begins within the SVS . For example assume a data access request directed to a file is issued by a client and received at the N module of a node where it is parsed through the multi protocol engine to the appropriate protocol server of N module . To determine the location of a D module to which to transmit a CF message the N module may first retrieve a SVS entry to acquire the striping rules and list of volumes associated with the SVS. The N module then executes the Locate function to identify the appropriate volume to which to direct an operation. Thereafter the N module may retrieve the appropriate VLDB volume entry to identify the aggregate containing the volume and the appropriate VLDB aggregate entry to ultimately identify the appropriate D module . The protocol server of N module then transmits the CF message to the D module .

Broadly stated if a client requires ordering of data access operations issued to the nodes of cluster it is the responsibility of that client to ensure such ordering. For example if the client issues a plurality of operations directed to a region of a file or if two clients simultaneously attempt to modify the same region of the file the ordering of those operations is not guaranteed unless the client waits for a round trip of each operation to complete. In this context a round trip denotes communication e.g. a ping from the N module to the D module indicating the region buffer of the file that the N module would like to service in response to the operation issued by the client. However once ordering is established the file system ensures that each operation in that established order is treated atomically. The round trip ensures that the N module has a valid cache of data by quickly validating the content of that cache while maintaining file system control over the coherency of the data in the file.

Specifically the architecture of the file system illustratively provides coherency control that imposes order on read and write operations for a file with respect to each other. Write operations occur during modified phases of the file system and read operations occur between these phases. Coherency ordering is achieved by serializing the operations such that only one operation is allowed to be in a modify phase at a time. In fact an invariant of the illustrative WAFL file system is that it serializes the effects of all read and write operations to a file. Execution of a write operation is atomic and execution of a read operation reflects either all or none of the results of that write operation. Thus an ordering sequence internal to the node is established at the file system layer of the storage operating system .

The illustrative file system maintains such coherency control through the use of file system images representing the state of a file. is a diagram illustrating data buffers or blocks of a file arrayed in file space over time. At various times some blocks are modified via write operations W and the diagram indicates the point in time at which these blocks are valid. Some modifications are coupled together circled in the same write operation and are treated atomically while other modifications are performed either by different nodes or by the same node at different times. Read operations R may occur anywhere in the file at any time although the file system prevents a read operation from crossing executing during an atomically coupled write operation. Thus from the perspective of an N module the state of the file system at any time appears as an advancing wavefront . The illustrative file system guarantees that when scheduling a message received from an N module to validate its buffer the response to the N module will reflect a valid state of the file. The advancing wavefront represents a simple synchronization mechanism for ensuring a valid file system state.

According to the illustrative distributed storage system architecture an N module that receives a client request directed to a file initially attempts to serve that request from its local cache . However the N module does not necessarily know whether its local cache is up to date because there may be activity at another N module of the cluster that e.g. is also writing to that same file. Write requests are pushed through written to the D module whereas read requests are attempted to be serviced first from the local N module cache or alternatively at the appropriate D module.

The present invention is directed to a system and method for ensuring that a copy of a region of file data i.e. a data buffer stored in a local cache of an N module is up to date with respect to the authoritative copy of that data served by the D module . More specifically the present invention is directed to a lightweight coherency control protocol that ensures consistency of data containers such as files and associated data buffers stored on one or more volumes served by a plurality of nodes e.g. storage systems connected as a cluster. Each file is illustratively identified by a file identifier file ID and each data buffer is represented by a file block number fbn that identifies the position or offset of the buffer within the file.

According to an aspect of the invention each buffer is associated with a current cache sequence number comprising a load generation value and an update count value. The load generation value is incremented every time an inode is loaded from disk into memory i.e. buffer cache of D module . Once the inode for a file such as file is loaded and its load generation value is set then the appropriate buffer e.g. data block of a buffer tree for the file is loaded into the memory. The update count value is incremented each time the buffer is updated with a write request operation. Therefore each buffer loaded into the buffer cache of memory is tagged with the load generation value and an update count from the time that buffer is loaded.

However if only the buffer is flushed to disk and the inode remains resident in the buffer cache then the next time the buffer is reloaded into the buffer cache from disk Step its current cache sequence number is set in Step . In Step a modification is made to the buffer and the update count is incremented e.g. to 2 Step . According to the invention the update count advances for every buffer whenever it is modified even if that buffer is freed up from memory and subsequently loaded from disk as long as its inode remains loaded in memory. Moreover if the inode remains resident loaded in memory the load generation number for that inode does not change even if buffers of its buffer tree are being loaded modified written to disk and unloaded . In that case only the update count for each affected buffer changes. Thus the load generation number only changes when the inode itself is unloaded and then loaded again. The procedure then ends at Step .

In the illustrative embodiment inode described in reference to inode is extended to include a load generation field such as load generation field that contains the load generation value. In addition the file system on D module maintains a data structure illustratively embodied as a cache list or table stored in buffer cache of memory which is configured to hold the current cache sequence number of the present invention. is a schematic block diagram of a cache table that may be advantageously used with the present invention. The cache table has one or more entries each containing a current cache sequence number comprising a load generation value and an update count value for the buffers of its responsible files or file regions. The cache table can be implemented either has a hash table indexed by fbn or a sparse table containing one value per possible buffer that may be loaded in memory.

Illustratively the file system on the D module combines the load generation value and update count value to form the current cache sequence number for the data buffer . That is for the duration of each inode loaded into memory the file system maintains the update count value for each buffer that has also been loaded in memory. Note that the local cache on the N module is valid only as long as the inode is resident in memory. The contents of the data buffers can be deleted flushed from the cache and stored pushed back to disk as long as the file system on the D module keeps track of the update counts in case the buffers are thereafter loaded again.

Broadly stated in response to receiving the data access read request from a client that is directed to a file an N module forwards a message to the appropriate D module to validate the particular file and data buffer that the N module attempts to serve. The D module retrieves the inode of the requested file and determines whether the data buffer is cached at the N module and if so whether that cached copy is representative of the most recent version of the data buffer as denoted by a current cache sequence number . If the copy of the data buffer cached at the N module represents the most recent version of the buffer the D module returns a response to the N module indicating that the cached buffer can be used to service the read request. Otherwise the D module returns i a copy of the updated data buffer to the N module as part of the response or ii a response indicating that the cached buffer is stale . In the latter case the N module then forwards a message to the D module requesting the updated data buffer.

In accordance with another aspect of the invention modified dirty buffers stored in the local cache of the N module do not have to be revoked unlike a typical cluster file system. That is the dirty buffers do not have to be invalidated synchronously because other N modules may not request the buffers and even if one does that N module must validate the request directed to the buffer. Thus the inventive technique enables an N module to provide as needed validation of a requested buffer back to the D module that serves owns that region of the file. Validation is generally fast thereby facilitating servicing of the request from the N module cache.

In response to a message from an N module to validate a cached data buffer for a particular file the D module responds with the proper version s of the data buffer s needed to service the request. The D module effectively schedules the request e.g. a read operation examines the affected buffer and determines the proper version of that buffer. The D module or more specifically the file system then responds to the N module with proper load generation value and update count value for the buffer i.e. the proper update count and load generation value after inode for the file is loaded .

In the illustrative embodiment the invention may be implemented such that the N module provides the D module with an indication of the interested data buffers regions of a file and the D module responds with the proper versions needed. The N module can then determine if it has the proper versions and if not request those buffers that are not updated. Alternatively the N module D module exchange can be reduced to a single round trip wherein the N module provides an indication of the buffers and versions of the buffers in its cache for the file. The D module then determines whether those cached buffers are stale and if so responds with proper version of that data. For those cached buffers that are current the D module merely responds with an acknowledgement that the buffers are up to date.

Refer to . In response to receiving the first read request R the first N module examines its local cache and determines that the requested buffers are not stored therein. The first N module thus sends a CF message to the D module in order to service the request. Illustratively the CF protocol layer of the message includes a file ID along with an fbn and current cache sequence number for each requested buffer e.g. buf buf. It should be noted that the arrangement of file ID with fbn and current cache sequence number is illustrative only and other messaging arrangements containing other information may also be used with the invention.

The D module loads the inode for the file if it is not already loaded into the buffer cache and sets the load generation value e.g. 17 by incrementing a previous value e.g. 16 stored in the load generation field of the inode. The D module then loads the requested buffers if they are not already loaded constructing only that portion of the buffer tree for the file as needed. Illustratively the update count value for each requested buffer e.g. buf buf buf equals zero. The D module then responds to the N module by returning a CF message containing the requested data buf buf along with their current cache sequence numbers e.g. buf data 17 0 buf data 17 0 and buf data 17 0 . The first N module thereafter returns the requested data to the client C.

In response to receiving the write request the second N module forwards the request to the D module which services the write request to buf and buf. To that end the D module modifies the data for buf buf and stores the modified buffers to disk . Notably the D module does not increment the load generation value since the inode is already loaded into memory as a result the load generation value remains the same e.g. 17 . However since buf and buf have been modified with data the D module file system increments the update count values to e.g. one for those buffers. The D module may then return modified buffer sequence numbers to the N module in any event the D module acknowledges completion of the modification to the N module which in turn acknowledges the write request to the client C.

Refer now to . The second read request is then received at the first N module which sends a message to the D module to validate the file and data buffers cached at the N module. Again the CF message includes the file ID as well as the fbn and current cache sequence number for each requested buffer e.g. buf 17 0 buf 17 0 buf 17 0 and buf null . According to the invention if the copy of the buffer cached at the N module represents the most recent version of the data for that buffer the D module returns a response to the N module indicating that the cached buffer can be used to service the read request. Otherwise the D module returns a copy of the updated data buffer to the N module with the current cache sequence number for the buffer . Therefore the response from the D module to the first N module illustratively comprises buf data 17 1 buf data 17 1 buf 17 0 and buf data 17 0 . Note that since the first N module has the most recent version of the data for buf only the fbn and current cache sequence number and no data are returned for that buffer.

Advantageously the inventive coherency control protocol does not require the use of distributed locking such as range locks as commonly used with distributed multi storage system architectures. The illustrative file system inherently serializes operations directed to an inode and the inventive coherency control protocol exploits that inherent function by serializing incoming operation requests in one place i.e. at the D module file system servicing that inode or at least the region of the file represented by that inode .

While there has been shown and described an illustrative embodiment of a novel lightweight coherency control protocol for ensuring the consistency of data containers stored on one or more volumes served by a plurality of storage systems connected as a cluster it is to be understood that various other adaptations and modifications may be made within the spirit and scope of the invention. For example in an alternate embodiment of the invention the contents of the cache table can be stored in the buffer tree of a file since each buffer tree has buffer descriptors not shown that contain information about each of the buffers . Specifically the buffer tree in memory buffer cache comprises buffer descriptors for indirect blocks that eventually point to buffer descriptors for the data buffers data blocks . Each of the latter buffer descriptors for the data blocks points to an appropriate 4 kB page or data buffer containing the actual data.

According to this alternate embodiment of the invention a current cache sequence number field may be added to each buffer descriptor while the load generation value is inherited from the inode of the file . Thus the in memory inode has a field that holds the new load generation value and each in memory buffer descriptor of a data buffer may be extended to include a field that holds the current update count value . Each time a buffer is retrieved the N module combines the load generation value and update count value to form the current cache sequence number for the data buffer . Thus the current cache sequence numbers and in particular the update count values can be stored in either the buffer descriptors or in the separate cache table .

For the embodiment wherein one round trip between the N module and D module indicates the most up to date cache sequence number needed to serve the request and another round trip fetches the required data buffers the separate cache table may be employed because it can be accessed very quickly and contains all the cache sequence numbers for each buffer resident in memory . However for the embodiment that uses only one round trip to validate and if necessary provide the requested data buffer the buffer tree for the file must be accessed to service the request so it is efficient to also access the buffer descriptors to obtain the required values. Therefore the cache table is not required for that embodiment.

Note that when a data buffer is flushed to disk and invalidated from the buffer cache its buffer descriptor which had been used to keep track of the update count on that buffer is also invalidated and thus the tracking information is lost. Accordingly the cache table is illustratively maintained in buffer cache to hold update counts for buffers that have been unloaded from memory. In response to subsequently loading a buffer for a file this table may be accessed to determine whether the buffer was unloaded previously during the time the inode remained loaded stayed in memory.

The foregoing description has been directed to particular embodiments of this invention. It will be apparent however that other variations and modifications may be made to the described embodiments with the attainment of some or all of their advantages. Specifically while this description has been written in terms of N and D modules the teachings of the present invention are equally suitable to systems where the functionality of the N and D modules are implemented in a single system. Alternately the functions of the N and D modules may be distributed among any number of separate systems wherein each system performs one or more of the functions. Additionally the procedures processes and or modules described herein may be implemented in hardware software embodied as a computer readable medium having program instructions firmware or a combination thereof. Accordingly this description is to be taken only by way of example and not to otherwise limit the scope of the invention. Therefore it is the object of the appended claims to cover all such variations and modifications as come within the true spirit and scope of the invention.

