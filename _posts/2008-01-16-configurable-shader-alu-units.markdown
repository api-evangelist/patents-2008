---

title: Configurable shader ALU units
abstract: A shader unit is configured to provide an increased and dynamically changeable amount of ALU processing bandwidth. The shader unit includes a plurality of ALUs for processing pixel data according to a shader program. Each of the ALUs is configurable to be enabled and disabled. When disabled, the ALU is powered off, thereby reducing the power consumption of the shader unit. In one embodiment, the plurality of ALUs are logically configured into groups called ALU-pipes, each of which can be enabled and disabled. When an ALU-pipe is disabled, each ALU associated with the disabled ALU-pipe is disabled. The shader unit includes a sequencer that executes the shader program, determines the number of ALUs to be enabled, receives an input data stream of pixel data, assigns groups of pixel data to each enabled ALU, sends the assigned pixel data to their respective ALUs, and sends ALU instructions to the ALUs to process the received pixel data according to the shader program.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09135017&OS=09135017&RS=09135017
owner: Advanced Micro Devices, Inc.
number: 09135017
owner_city: Sunnyvale
owner_country: US
publication_date: 20080116
---
This application claims benefit of priority under 35 U.S.C. section 119 e of U.S. Provisional Patent Application 60 880 806 filed Jan. 16 2007 and entitled Configurable Shader ALU Units which is incorporated herein by reference.

The present invention relates to a method of and an apparatus for processing graphics data. In particular the present invention relates to a method of and apparatus for processing graphics data using configurable shader arithmetic logic units.

In graphics processing data is grouped as pixels which are processed according to a series of processing instructions referred to as shader instructions. Each shader instruction defines a mathematical operation to be performed on the pixel. By applying a shader instruction to a pixel the pixel value is changed according to the mathematical operation defined by the shader instruction. Application software defines the specific shader instructions that are to be applied to the pixel data.

Shader units are used to apply shader instructions to pixel data. Shader units utilize arithmetic logic units ALUs to carry out the arithmetic and logic operations defined by the shader instructions. Graphics intensive applications such as high end video games require shader units that can execute a large number of shader instructions. However lower end graphics applications such as playing a DVD include fewer shader instructions and therefore do not require a shader unit with as much processing power. Since additional processing power requires additional ALUs which correspondingly increases cost and power consumption there is a design trade off to be made when configuring a shader unit especially when the shader unit is for general use.

A shader unit is configured to provide an increased and dynamically changeable amount of ALU processing bandwidth. The shader unit includes a plurality of ALUs for processing pixel data according to a shader program. Each of the ALUs is preferably configurable to be enabled and disabled. When disabled the ALU is powered off thereby reducing the power consumption of the shader unit. In one embodiment the plurality of ALUs are logically configured into groups called ALU pipes each of which can be enabled and disabled. When an ALU pipe is disabled each ALU associated with the disabled ALU pipe is disabled. The shader unit includes a sequencer that executes the shader program determines the number of ALUs to be enabled receives an input data stream of pixel data assigns groups of pixel data to each enabled ALU sends the assigned pixel data to their respective ALUs and sends ALU instructions to the ALUs to process the received pixel data according to the shader program.

In one aspect of the present invention a shader unit includes a sequencer to provide control instructions and multiple arithmetic logic units coupled to the sequencer wherein each arithmetic logic unit is dynamically configurable to be enabled or disabled according to the control instructions provided by the sequencer such that the sequencer dynamically configures a number of enabled arithmetic logic units. The sequencer includes an input buffer to receive an input stream of pixel data and a scheduler to direct a block of the received pixel data to each of the number of enabled arithmetic logic units. The sequencer also includes an arithmetic logic unit sequencer that generates an arithmetic logic unit instruction wherein the arithmetic logic unit sequencer sends the arithmetic logic unit instruction to the multiple arithmetic logic units in response to a control instruction sent by the scheduler. Each arithmetic logic unit instruction corresponds to a processing instruction within a software program being executed by the shader unit. The arithmetic logic units that are disabled are powered off. The multiple arithmetic logic units can be logically configured into a plurality of groups each group including a clock enable circuit. The arithmetic logic units within a first logical group can be powered off by disabling a corresponding first clock enable circuit.

In another aspect of the present invention a shader unit includes a sequencer to provide control instructions and a plurality of processing integrated circuit chips coupled to the sequencer each integrated circuit chip includes a plurality of arithmetic logic units wherein each processing integrated circuit chip includes at least one defective arithmetic logic unit further wherein each of the plurality of arithmetic logic units is dynamically configurable to be enabled or disabled according to the control instructions provided by the sequencer thereby increasing a yield for processing integrated circuit chips. The sequencer can dynamically configure a number of enabled arithmetic logic units. Each processing integrated circuit chip preferably includes a same number of defective arithmetic logic units and each processing integrated circuit chip includes a same number of arithmetic logic units. The arithmetic logic units within the shader unit can be logically configured into a plurality of groups wherein each group includes one arithmetic logic unit from each processing integrated circuit chip. When a first arithmetic logic unit on a first processing integrated circuit chip is defective then each arithmetic logic unit within the group that includes the first arithmetic logic unit is also defective. The arithmetic logic units included within a group comprising defective arithmetic logic units are disabled and powered off. Each group can be coupled to a clock enable circuit. The arithmetic logic units within a first logical group can be powered off by disabling a corresponding first clock enable circuit. The sequencer includes an input buffer to receive an input stream of pixel data and a scheduler to direct a block of the received pixel data to each enabled arithmetic logic unit. The sequencer also includes an arithmetic logic unit sequencer that generates an arithmetic logic unit instruction wherein the arithmetic logic unit sequencer sends the arithmetic logic unit instruction to each enabled arithmetic logic unit in response to a control instruction sent by the scheduler.

In yet another aspect of the present invention a shader unit processes an input data stream of pixel data. The shader unit includes a sequencer to provide control instructions to execute a graphics shader program including shader instructions and multiple arithmetic logic units coupled to the sequencer wherein each arithmetic logic unit is dynamically configurable to be enabled or disabled according to the control instructions provided by the sequencer such that the sequencer dynamically configures a number of enabled arithmetic logic units. The sequencer includes an input buffer to receive the input data stream of pixel data and a scheduler to direct a block of the received pixel data to each of the number of enabled arithmetic logic units. The sequencer also includes an arithmetic logic unit sequencer that generates an arithmetic logic unit instruction corresponding to each shader instruction wherein the arithmetic logic unit sequencer sends the arithmetic logic unit instruction to the multiple arithmetic logic units in response to a control instruction sent by the scheduler.

Embodiments of a shader unit are directed to a dynamically configurable apparatus that processes a selectable and programmable number of pixels per clock cycle. Using the dynamically configurable shader unit one ALU instruction is executed for a selectable number of pixels per clock cycle.

The sequencer receives the input data stream of pixel data. The sequencer determines what pixel data is to be loaded and when to execute the shader program instructions. The sequencer includes a scheduler to schedule the necessary functions for loading data and executing the shader program instructions within the shader unit .

The quads stored in the ALUs are then processed according to ALU instructions. The ALU instructions correspond to the shader instructions. Processing begins simultaneously on all 12 quads loaded in the ALUs during the 13th clock cycle. In other words a quad is loaded into each ALU and only after each ALU has been loaded with a quad does processing begin. In this manner parallel processing of the 12 quads is achieved.

Also during the 13cycle as processing begins on the 12 quads previously loaded into the 12 ALUs loading begins for the next set of 12 quads. For example referring to the timing diagram of on the 13clock cycle quad in phase a is loaded into the ALU . This process repeats similarly as to the first set of 12 quads assigned and loaded into the 12 ALUs as described above.

Conventional processing units typically include one ALU such that execution of one shader instruction is applied to one quad of pixel data. In contrast the shader unit inlcudes three ALUs per processing unit such that execution of one shader instruction is applied to three quads thereby tripling the ALU processing power of a single ALU processing unit. If an application is shader intensive meaning the application includes a long shader program with many shader instructions to be executed and pixels are to be manipulated based on those shader instructions then the increased ALU processing bandwidth provides faster execution of the shader program. Such a configuration increases the performance aspect of the shader unit .

In addition to increasing performance the shader unit is dynamically re configurable. In one embodiment the ALUs within the shader unit are logically configured into groups called ALU pipes. Each ALU pipe includes one ALU from each processing unit and . For example an ALU pipe a includes ALU ALU ALU and ALU . Similarly an ALU pipe b includes ALU ALU ALU and ALU . An ALU pipe c includes ALU ALU ALU and ALU . Each of the ALU pipes can be enabled or disabled. In the shader unit shown in each processing unit and can be configured such that 1 2 or all 3 of the ALUs within each processing unit are enabled. If ALU pipe a is enabled then the ALU in each processing unit and that corresponds to pipe a is enabled specifically ALU ALU ALU and ALU . Similarly if ALU pipe b is enabled then the ALUs and are enabled and if ALU pipe c is enabled then the ALUs and are enabled. The shader unit is configured such that any combination of ALU pipe a ALU pipe b and ALU pipe c can be enabled. This combination can be dynamically changed at any time such that a new combination of ALUs are enabled. In this manner the shader unit is dynamically configurable to have 4 8 or 12 ALUs enabled at any given time. Alternatively the ALUs can be logically configured into groups other than ALU pipes. Still alternatively the ALUs can be logically configured as individual ALUs and each ALU can be individually enabled or disabled in various combinations.

The shader unit includes individual clock enables for each ALU pipe. If the shader unit is configured such that one or two of the ALU pipes are enabled then the ALUs corresponding to the disabled ALU pipe s can be shut down to save power. To shut down the ALUs the clock enable for the disabled ALU pipe s is disabled. Disabling one or more ALU pipes is useful when running applications that are not shader intensive for example playing DVDs or older generation video games because the additional ALU bandwidth used for executing shader instructions is not needed. ALU bandwidth can be increased by enabling previously disabled ALU pipes.

The shader unit operates according to driver software loaded in the sequencer . The driver software operates in conjunction with the application software and determines the number of ALU pipes to enable based on the requirements of the application software. The sequencer enables or disables the appropriate ALU pipes according to control instructions provided by the driver software. The shader unit hardware including multiple ALU pipes is provided so that the driver software can dynamically enable or disable ALU pipes as necessary.

The scheduler enables the configurable aspect of the shader unit in that the scheduling activities are determined based on the number of ALU pipes currently enabled. If the number of ALU pipes enabled is changed then the scheduler also changes the scheduling activities necessary to accommodate the changed number of enabled ALU pipes. In this manner the logic circuitry within the sequencer is considered dynamically configurable to meet the changing activities associated with a dynamically changing number of enabled ALUs.

Where the application software is a graphics application the application software includes a shader program that is to be executed by the shader unit . Shader programs include multiple shader instructions which are executed as ALU instructions on the pixel data.

Subsequent discussion is based on all three ALU pipes within the shader unit being enabled. In this case 12 quads are assigned and loaded into the 12 enabled ALUs during a 12 cycle period. It should be noted that where reference is made to 12 quads any corresponding functionality can equally be applied to 8 quads or 4 quads depending on the number of ALU pipes enabled. On the 13clock cycle processing begins in each of the ALUs according to a current shader program. The ALU sequencer issues an ALU instruction for each shader instruction. Each ALU instruction is issued to all ALUs every 4 clock cycles. Since there are 12 quads loaded into the 12 ALUs the shader unit executes one ALU instruction on 12 quads every 4 clock cycles. As such 3 ALU instructions can be executed on the same 12 quads during a 12 clock cycle period. Where only one ALU pipe is enabled the shader unit executes one ALU instruction on 4 quads every 4 clock cycles. A shader program with many shader instructions is applied to a set of quads 12 quads in this case faster when 3 ALU pipes are enabled than if only one or two ALU pipes are enabled. As used in this context faster means execution of ALU instructions.

The sequencer outputs data every 12 clock cycles. Since one ALU instruction is executed every 4 clock cycles 3 ALU instructions can be executed by each ALU every 12 clock cycles. In other words 3 ALU instructions can be executed on a given quad of pixel data before the quad is output from the shader unit . The shader unit is still executing 1 ALU instruction per 4 clock cycles however with 3 ALU pipes enabled each ALU instruction is used to process more pixel data in this case 12 quads. In general the shader unit is dynamically configurable to process or quads for every 4 clock cycles depending on the number of ALU pipes enabled.

The context memory is a 3 bit register that defines the current ALU pipe configuration. There are three modes a single ALU mode a double ALU mode and a triple ALU mode. Each mode is specified in the context memory register field. Each bit in the register field represents a physical ALU pipe. For example if all three bits in the context memory are set as in the triple ALU mode then all 3 ALU pipes are enabled. In the case of enabling a single ALU pipe or a double ALU pipe any combination of the ALU pipes can be enabled. The sequencer includes individual clock enables for each ALU pipe. Shutting down an ALU pipe is accomplished by disabling the clock associated with the ALU pipe to be disabled.

Each ALU includes an input buffer to store the loaded quad of pixel data. After the ALU processes the quad according to three ALU instructions within a 12 clock cycle period the processed quads are stored in an output buffer within the sequencer . During a subsequent execution of an output instruction which occurs every 12 clock cycles the processed quad within the output buffer is output from the shader unit .

Execution of certain types of ALU instructions requires the use of texture data which is stored external to the shader unit . To retrieve the texture data the texture sequencer issues a texture instruction to the texture unit . In response to the texture instruction the texture unit fetches the texture data from memory not shown . The retrieved texture data is stored in the texture buffer . The texture sequencer executes one texture instruction for a set of 12 quads every 4 clock cycles. However the texture unit fetches four quads every four clock cycles. Since there are 12 quads being simultaneously processed in the shader unit two re issued texture instructions are needed to accommodate all 12 quads. Therefore when 3 ALU pipes are enabled which results in 12 quads being simultaneously processed in the shader unit a texture instruction is issued three times every 12 clock cycles.

A thread is a unit of measure that refers to the number of quads that are simultaneously processed within the sequencer . For example when three ALU pipes are enabled a thread is 12 quads. Therefore a 12 quad thread indicates that 12 quads are being processed simultaneously. Similarly when two ALU pipes are enabled a thread is eight quads. When a single ALU pipe is enabled a thread is four quads.

The context memory is a 3 bit memory for storing a current state for the thread currently being processed in the shader unit . The current state value is used by the flow control sequencer and by the ALU sequencer to generate their respective instructions. The meaning of the 3 bit value stored in the context storage memory is different for the partial flow control mode than for the full flow control mode.

Inconsistencies in the input data stream may result in occurrences where there are not 12 quads loaded into the 12 ALUs although all 3 ALU pipes are enabled. Such an occurrence often happens at the end of a data stream. This also happens because the architecture upstream from the shader unit is functioning in 4 quad blocks. Therefore there are situations in which only 4 quads or 8 quads are loaded into 12 enabled ALUs. The dynamic configurability of the shader unit enables the thread to be changed from 12 quads to 4 or 8 quads if a full 12 quads are not received within a predetermined time period.

A thread becomes a partial thread when it has less than 12 quads. A partial thread can occur at the end of a data stream or when a state change within the shader unit is received in the middle of a thread being processed. When a partial thread is issued to the shader unit without an accompanying state change a deadlock situation could occur. There are two ways to resolve this deadlock. First a shader unit flush can be done by inserting a shader register. Second a shader unit autoflush can be configured in an autoflush control register not shown . Once enabled the shader unit flushes out partial threads based on a programmable timeout value. The timeout value indicates the number of empty cycles to wait at the input before flushing out the partial thread.

The flow control sequencer operates according to either a partial flow control mode or a full flow control mode. In the partial flow control mode the flow control sequencer executes one flow control instruction for a set of 12 quads every 4 clock cycles. In the full flow control mode the flow control sequencer executes one flow control instruction for a set of 12 quads every 8 clock cycles. The flow control sequencer works in conjunction with the ALU sequencer . The flow control sequencer the texture sequencer and the ALU sequencer issue their corresponding instructions in response to control instructions provided by the scheduler .

Within the shader unit each processing unit and is an integrated circuit manufactured according to conventional methodologies. Yield is a well known concept in the art of manufacturing integrated circuits. The configurable nature of the ALU units provides an increase in yield for the processing units. For example if during manufacturing one of the ALUs on a 3 ALU processing unit is determined to be faulty and unusable then the processing unit can still be used as a 2 ALU processing unit. In this case a shader unit can be configured using processing units that each have one faulty ALU. As part of an assembled shader unit the non operable ALU unit within each processing unit is configured as the same ALU pipe such as ALU ALU. ALU and ALUin and the ALU pipe including the faulty ALUs is disabled by the sequencer so that there are 2 enabled ALU pipes.

The shader unit provides expanded ALU processing bandwidth while maintaining a single input and a single output. This enables all ALU processing to be performed locally as opposed to distributing the ALU processing over multiple shader units which would require the management of input data distribution to the multiple shader units and coordination of the output from each shader unit. The dynamic configurability of the shader unit promotes high end performance for graphics applications including many ALU instructions and power savings capabilities for lower end graphics applications that do not require as much ALU processing bandwidth. The configurable nature enables a determined number of ALUs to be shut down thereby conserving power. Enabling a specific number of ALU pipes can be integrated with an operating mode of the computer. For example if a laptop computer is currently configured in a performance mode then all ALU pipes are enabled to play for example a 3 D intensive video game. If a laptop computer is currently configured in a power saving mode then one or more ALU pipes are disabled to reduce power.

The shader unit has been described above as including four processing units each processing unit including three ALUs. Alternatively the configurable shader unit can be configured to include more or less than four processing units and each processing unit can be configured to include more or less than three ALUs. In general the shader unit of the present invention is scalable to include more or less than the twelve ALUs described in relation to the shader unit . Additionally the ALUs are described as being grouped by processing unit for convention only. It is a design consideration as to how many ALUs are included within each processing unit. Further the ALUs have been organized as logical groups called ALU pipes and in general the shader unit is configurable to include N ALU pipes. However organizing the ALUs into ALU pipes is for convention only and different types of logical groups can be utilized to dynamically configure a number of enabled ALUs.

The present invention has been described in terms of specific embodiments incorporating details to facilitate the understanding of the principles of construction and operation of the invention. As such references herein to specific embodiments and details thereof are not intended to limit the scope of the claims appended hereto. It will be apparent to those skilled in the art that modifications can be made to the embodiments chosen for illustration without departing from the spirit and scope of the invention.

