---

title: Systems and methods for processing page description languages
abstract: Systems and methods consistent with embodiments presented provide methods for processing page description language (PDL) objects embedded in Personalized Print Markup Language (PPML) page descriptions while retaining the ability to process supported native PDL documents. In some embodiments, PPML print data can be parsed to identify a language object written in at least one client PDL. A language processor for the client PDL can then be invoked using a language entry point function. In some embodiments, a language entry table or table of language entry points can be used to map the PDL to the language entry point function. Methods are also presented for processing page layout data in accordance with the PPML layout when processing PDL objects using the client PDL language processor.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08125660&OS=08125660&RS=08125660
owner: Konica Minolta Laboratory U.S.A., Inc.
number: 08125660
owner_city: San Mateo
owner_country: US
publication_date: 20080328
---
The present invention relates to the field of printing and in particular to systems and methods for processing Page Description Languages PDLs in the context of Personalized Print Markup Language PPML .

Document processing software allows users to view edit process and store documents conveniently. Pages in a document may be displayed on screen exactly as they would appear in print. However before the document can be printed the data must be converted into a form that can be recognized and used by a printer. To do this pages in the document are often described in a page description language PDL . A PDL is used to create instructions which can be sent to a printer or a display device in order to produce a desired set of viewable output. These instructions generally include means for describing the layout of the viewable output even when the final output is not to a physical medium. As used in this application PDLs may include PostScript Adobe PDF HP PCL Microsoft XPS and variants thereof as well as any other languages used to describe pages in a document.

A PDL description of a document provides a high level description of each page in a document. This PDL description is often translated to a series of lower level printer specific commands when the document is being printed. The printer or printing device can use the low level printer specific commands to place marks on a print medium. The various flavors of PDLs offer different advantages for different applications. For example some PDLs can provide better or faster printing performance while others can provide higher graphical quality with certain types of viewable data and or graphical applications.

One class of PDL languages include those governed by the Personalized Printer Markup Language PPML specification which permits printer languages to identify store and re use text and graphic elements. PPML can be an XML based language and can speed up the printing of certain print jobs by permitting the storage and re use of text and graphic elements thus reducing rasterization and bandwidth overheads. PPML allows printers to manipulate data components at the object level instead of at the page level. In other words by lowering the granularity of the information stored by a printer to the object level PPML allows code to attach names to objects and re use the objects as needed during the process of printing of variable data print jobs.

Before the introduction of PPML printing architectures were developed using the framework that written instructions would be provided in a single PDL and PDLs would be processed to determine and format the layout of the page being printed. In this sense non PPML PDLs are page based languages in that each PDL has its specific approach to separately describe the layout of a page and its contents. Other features of printing architectures such as language determination selection and initiation were also based upon this framework.

With the introduction of PPMLs one or more PDLs may be called to render portions of a page and standard page based processing methods such as page layout and language identification methods can be adapted for use in a PPML context. Therefore there is a need for flexible and efficient schemes for PDL language processing outside of the context of the traditional single PDL to single page framework while retaining the capability for language processing to occur in a page based context.

In accordance with the present invention systems and methods for print resource management are presented. In some embodiments a method is presented for processing Personalized Print Markup Language PPML print data for at least one document page wherein the PPML print data comprises at least one language object described in at least one client page description language PDL and the method comprises parsing the PPML print data for the at least one document page to identify the at least one language object written in at least one client PDL mapping the at least one language object to a language entry point function for the client PDL calling the language processor for the at least one client PDL using the language entry point function and processing the at least one language object using the language processor for the at least one client PDL.

Embodiments of the present invention also relate to methods for processing page layout instructions using a PDL. These and other embodiments are further explained below with respect to the following figures.

In accordance with embodiments reflecting various features of the present invention systems and methods for PDL language processing outside a page based context are presented. In addition systems and methods are presented for processing PDL instructions outside a page based context while maintaining the ability to process PDL instructions in a page based context.

As shown in exemplary system includes computers including a computing device and a server . Further computing device and server may communicate over a connection which may pass through network which in one case could be the Internet. Computing device may be a computer workstation desktop computer laptop computer or any other computing device capable of being used in a networked environment. Server may be a platform capable of connecting to computing device and other devices not shown . Computing device and server may be capable of executing software not shown that allows the printing of documents using printers .

Exemplary printer includes devices that produce physical documents from electronic data including but not limited to laser printers ink jet printers LED printers plotters facsimile machines and digital copiers. In some embodiments printer may also be capable of directly printing documents received from computing device or server over connection . In some embodiments such an arrangement may allow for the direct printing of documents with or without additional processing by computing device or server . In some embodiments documents may contain one or more of text graphics and images. In some embodiments printer may receive PDL or PPML descriptions of documents for printing. Note too that document print processing can be distributed. Thus computing device server and or printer may perform portions of document print processing such as half toning color matching and or other manipulation processes before a document is physically printed by printer .

Computing device also contains removable media drive . Removable media drive may include for example 3.5 inch floppy drives CD ROM drives DVD ROM drives CD RW or DVD RW drives USB flash drives and or any other removable media drives consistent with embodiments of the present invention.

Connection couples computing device server and printer and may be implemented as a wired or wireless connection using conventional communication protocols and or data port interfaces. In general connection can be any communication channel that allows transmission of data between the devices. In one embodiment for example the devices may be provided with conventional data ports such as parallel ports serial ports Ethernet USB SCSI FIREWIRE and or coaxial cable ports for transmission of data through the appropriate connection. In some embodiments connection may be a Digital Subscriber Line DSL an Asymmetric Digital Subscriber Line ADSL or a cable connection. The communication links could be wireless links or wired links or any combination consistent with embodiments of the present invention that allows communication between the various devices.

Network could include a Local Area Network LAN a Wide Area Network WAN or the Internet. In some embodiments information sent over network may be encrypted to ensure the security of the data being transmitted. Printer may be connected to network through connection . In some embodiments printer may also be connected directly to computing device and or server . System may also include other peripheral devices not shown according to some embodiments of the present invention. A computer software application consistent with the present invention may be deployed on any of the exemplary computers and printers as shown in . For example computing device could execute software that may be downloaded directly from server . In some embodiments portions of a software application may reside on removable media and be read and executed by computing device using removable media drive . Portions of the application may also be executed by printer in accordance with some disclosed embodiments.

In some embodiments CPU may be a general purpose processor a special purpose processor or an embedded processor. CPU can exchange data including control information and instructions with memory and or firmware . Memory may be any type of Dynamic Random Access Memory DRAM such as but not limited to SDRAM or RDRAM. Firmware may hold instructions and data including but not limited to a boot up sequence pre defined routines and other code. In some embodiments code and data for processing PPML may reside in firmware may be copied to memory prior to being acted upon by CPU . Routines in firmware may include code to translate PDL or PPML page descriptions received from computing device . In some embodiments firmware may include routines to process PPMLs including one or more PDLs. Firmware may also include routines to convert display commands in a display list to an appropriate rasterized bit map and store the bit map in memory . Firmware may also include compression routines and memory management routines. In some embodiments data and instructions in firmware may be upgradeable.

In some embodiments CPU may act upon instructions and data and provide control and data to ASICs FPGAs and print engine to generate printed documents. In some embodiments ASICs FPGAs may also provide control and data to print engine . ASICs FPGAs may also implement one or more of translation compression and rasterization algorithms. In some embodiments computing device can transform document data into a first printable data. Then the first printable data can be sent to printer for transformation into intermediate printable data. Printer may transform intermediate printable data into a final form of printable data and print according to this final form. In some embodiments the first printable data may correspond to a PDL or PPML description of a document.

In some embodiments the translation process from a PDL or PPML description of a document to the final printable data comprising of a series of lower level printer specific commands may include the generation of intermediate printable data comprising of display lists of objects. In some embodiments display lists may be stored in memory or secondary storage device . Exemplary secondary storage device may be an internal or external hard disk memory stick or any other memory storage device capable of being used system . In some embodiments the display list may reside in one or more of printer computing device and server .

Page layout data specific to PDL may be determined and set by PDL language processor in step . After PDL language processor has been called display list or any other intermediate form of print data specific to PDL may be created and populated with appropriate objects in step . Next in step display list is rasterized and in step the page may be rendered. For example objects in the display list may be rendered into a frame buffer which may reside in memory . In traditional processing separate and distinct display lists such as exemplary display lists and may be created updated and maintained for individual PDL by PDL language processors and respectively. Accordingly in traditional methods the invocation of a new PDL in a print job may lead to the creation of a new display list to process objects generated by one of PDL language processors for the new PDL.

Next in step a determination can be made as to whether the print job is complete. If the print job has completed then the algorithm may terminate and enter a wait state where it awaits the next job. For example a print job may be marked as complete when all print instructions have been processed and pages rendered the print job is complete and in step the controller may exit PDL language processor . If the print job is not complete the algorithm may return to step and iterate through the subsequent steps until the processing of the print job has been completed. As shown in in traditional processing PDL language processor can process instructions in a print job and create and populate display list . Such page based processing is common in traditional PDLs.

A print job implemented in PPML can include one or more language and or graphical objects described in one or more non PPML PDLs. PPML can be seen as a type of PDLs that permit instructions in various individual PDLs to be used for page description purposes. These non PPML PDLs can be invoked by PPML language processor and are often called client PDLs. In some embodiments client PDLs can include one or more of object formats and image formats such as for example JPEG and TIFF. The set of client PDLs includes the range of PDLs that can be embedded in a PPML description of a print job. For example PPML print data for a page description can include descriptions of graphical content using language objects in various different PDLs. Thus a page description in PDL could include one graphical language object that could be described in Adobe PDF while another graphical language object on the same page could be described in PostScript . PPML offers the capability to describe graphical output in various PDLs so that the advantages afforded by individual PDLs in describing specific objects can be maintained and any attendant increases overall print quality and or speed exploited. In addition PPML can leverage tools and graphical assets previously developed for existing PDLs. In one embodiment the user or program producing a PPML description of a document or the PPML itself can determine the set of client PDLs that can be used for particular graphical language objects. Accordingly tradeoffs between print quality processing speed and other job parameters can be controlled across various applications.

In some embodiments when the PPML language processor encounters a language object in the print job PPML language processor may invoke an appropriate PDL language processor for client PDL at an appropriate entry point. PDL language processor for client PDL processes the print job to populate display list being created and or used by PPML language processor which can be specific to the PPML print data processed by PPML language processor . For example PPML language processor may operate on the print job including PPML print data which further includes one or more language objects in PDL 1 and PDL 2 to determine entry points and invoke the appropriate client PDL language processors and . In some embodiments at the time of invocation of one of client PDL language processors PPML language processor may include information about the location of page layout data and display list to allow appropriate client PDL language processor to process language objects and populate display list . In one embodiment after the client PDL language processor has been invoked display list or any other intermediate form of print data specific to PPML may be populated with appropriate objects by client PDL. In one embodiment page layout data which can include PPML page layout data for a document may be determined and set by PPML language processor when PPML language processor encounters page layout instructions while processing the page data for the print job. PPML page layout data may include page size and or graphical object size data where the language objects themselves may be described in one or more client PDLs.

After the PPML language processor has determined that language objects in the print data have been processed display list can be rendered to place print marks on a print medium using print engine . The processing involved in language selection routine and performed by PPML language processor and one or more of client PDL language processors may be performed using one or more of firmware CPU and or print engine and may further utilize ASICs FPGAs . Display list or another memory location may be stored in memory and or secondary storage device . All or portions of the processing involved in language selection routine and performed by the PPML language processor and or client PDL language processors may also be implemented within a host controller on computing device .

In some embodiments if a job is entirely described in a single non PPML PDL language then language selection routine may directly invoke the appropriate PDL language processor at its normal entry point. Accordingly the job will be processed in accordance with the normal process flow for a PDL document. In some embodiments system architecture may be implemented as a layer over an existing PDL processing architecture to leverage existing functionality with minimal changes to underlying code.

If it is determined that a non PPML PDL was used in the print job an entry point may be determined for invoking PDL language processor . For example this step may be performed by language selection routine . Subsequently processing the print job may proceed in accordance with the methods shown and discussed above in connection with . In some embodiments this processing is performed by PDL language processor .

In step the print job or PPML print data for one or more document pages may be parsed until a language object within the PPML print instructions is encountered. This parsing may be done for example by PPML language processor . Once a language object is found within a PPML print job at step a language entry point for the relevant client PDL for the language object is determined or mapped. This determination or mapping may in one embodiment be performed by PPML language processor . For example to make this determination PPML language processor may be provided with a table of language entry points for one or more client PDLs.

PDL language processor may then be invoked at step . In one embodiment PDL language processor can be invoked by PPML language processor using a language entry point function. In one embodiment PDL language processor for client PDL may be invoked using an Application Programming Interface API . An address to a memory location for display list and or other structures used by the client PDL may be provided to PDL language processor at the time of invocation. In one embodiment PDL language processor for client PDL may locate and store graphical output in display list using the address provided. In one embodiment this starting address may be the address of display list already created by PPML language processor for PPML print data. In one embodiment an API may be used to invoke PDL language processors and parameters provided to the API may describe both the entry points into individual client PDLs and memory locations such as display list that are specific to PPML or PPML print data processed by PPML language processor . For example PPML language processor may provide the API and or starting address to PDL language processor for client PDL.

In one embodiment at step the language object may be parsed further to produce graphical output according to page layout data . In one embodiment PDL language processor performs this function. Page layout data may be used to format or otherwise transform the graphical output. In one embodiment the PDL language processor for client PDL may apply the page layout data previously determined by PPML language processor .

In some embodiments access to PPML page layout data may be provided to the PDL language processor for the client PDL when the PDL language processor for the client PDL is invoked at step . In one embodiment an API may be provided to one or both of PPML language processor and PDL language processor for client PDL and may describe the entry point for page layout data in PPML.

In one embodiment a determination may be made that PDL language processor for client PDL is operating in client mode and PPML page layout data may be retrieved and applied at step . For example client PDL language processor may determine that it is operating in a client mode upon identifying a PDL layout instruction. It can then retrieve and apply PPML page layout data previously determined by PPML language processor to the graphical output.

In one embodiment a determination may be made that a PDL language processor for client PDL is not operating in a client mode and PDL page layout data specific to the PDL may be determined or set. In one embodiment these determinations are made by PDL language processor . For example when a print job is described entirely in a single PDL then as shown in PDL language processor may be directly invoked and may operate in native mode. Accordingly in some embodiments the PDL page layout data can be determined or set using one or more PDL layout instructions similar to the operation of PDL language processor outside of the context of PPML as described above in . For example the one or more PDL layout instructions may include page size instructions and or a graphical object size instructions.

Display list can be populated with appropriate objects at step . For example PDL language processor for client PDL may perform this function. Next a determination may be made as to whether the client PDL print job is complete at step . If the client PDL job is complete the client PDL language processor exits and returns to the PPML language processor at step . If the client print job is not complete the algorithm may return to step and iterate through the subsequent steps until the processing of the PDL print job has been completed.

A determination may be made as to whether the PPML page is complete at step . If the PPML page is complete the display list may be rasterized and the page may be rendered. If the PPML page is not complete the algorithm may return to step and iterate through the subsequent steps until the processing of the PPML page has been completed. Specifically the document page may include additional language objects for processing using one or more client PDL. After the PPML page is complete a determination may be made as to whether the PPML print job is complete at step . If the PPML print job is complete PPML language processor exits at step . If the print job is not complete processing continues at step iterating through the subsequent steps until the processing of the print job has been completed.

In some embodiments a determination as to whether the print job is a PPML print job may be made prior to implementing a PDL layout instruction or applying PPML page layout data. In some embodiments a determination may also be made as to whether the print job is a PPML print job prior to outputting graphical output to display list or display list . For example PDL language processor may perform these functions.

As shown in processing may occur in a page based manner. In one embodiment the PDL language processor for client PDL can operate as if it was executing a page based print job. In this sense printer architectures utilizing page based PDL processing can continue to process PDL print jobs while additionally supporting PPML functionality for print jobs provided in PPML.

In one embodiment PPML language processor receives a portion of print data such as a language definition instruction when it encounters a language object. In one embodiment a language definition instruction in a PPML instruction may be a part of the Format attribute of the SOURCE element for a language object processed by PPML language processor . PPML language processor may internally implement a routine for determining the language used in a language object. In one embodiment PPML language processor may first look at print instructions in the print data such as the language definition instruction to determine which client PDL can be used to render a graphical object. For example PPML language processor may identify language definition instructions and use the language definition instructions to determine language enumerations . In one embodiment PPML language processor can analyze a portion of the language object to determine the language enumeration . Subsequently PPML language processor may then utilize table to map language enumeration to the corresponding language entry point functions .

PPML language processor may identify the string application postscript as a language definition instruction corresponding to language enumeration for PPML POSTSCRIPT. PPML language processor may then utilize table to find language entry point function corresponding to language enumeration . In this manner PPML language processor may find exemplary language entry point function ppml PostscriptEntry which is the function the PPML language processor can use to invoke the PDL language processor for PDL PostScript to process a language object written in exemplary client PDL PostScript .

Page data processing using PDL can be illustrated through the following example. PPML language processor may receive the exemplary instructions 

At this point the PDL language processor for PostScript PDL may be operating and using PDL layout instruction setpagedevice Helvetica findfont 16 scalefont setfont 0 8 moveto PostScript Selects A4 show. Accordingly the PDL language processor for PostScript may attempt to change the paper size to A4. PPML language processor may ignore the PDL layout instruction and may apply the PPML page layout data to maintain the page layout as in letter size.

Other embodiments of the present invention will be apparent to those skilled in the art from consideration of the specification and practice of one or more embodiments of the invention disclosed herein. It is intended that the specification and examples be considered as exemplary only with a true scope and spirit of the invention being indicated by the following claims.

