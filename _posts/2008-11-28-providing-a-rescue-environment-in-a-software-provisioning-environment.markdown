---

title: Providing a rescue Environment in a software provisioning environment
abstract: A provisioning server can remotely deliver a rescue environment to a malfunctioning target machine. The provisioning server can operate in conjunction with a network management server in order to identify malfunctioning target machines, for example, target machines with damaged operating systems. Once a malfunctioning target machine is identified, the provisioning server can be configured to identify a rescue environment to repair the malfunctioning target machine and provide the rescue environment to the malfunctioning target machine.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08832256&OS=08832256&RS=08832256
owner: Red Hat, Inc.
number: 08832256
owner_city: Raleigh
owner_country: US
publication_date: 20081128
---
Software provisioning is the process of selecting a target machine such as a server loading the appropriate software operating system device drivers middleware and applications and customizing and configuring the system and the software to make it ready for operation. Software provisioning can entail a variety of tasks such as creating or changing a boot image specifying parameters e.g. IP address IP gateway to find associated network and storage resources and then starting the machine and its newly loaded software. Typically a system administrator will perform these tasks using various tools because of the complexity of these tasks. Unfortunately there is a lack of provisioning control tools that can adequately integrate and automate these tasks.

Often computer systems will fail due to incompatibility of software and hardware viruses on the computer system and the like. If the failure is critical the computer system may not be able to boot due to a corruption of the operating system. To combat this problem rescue disks such as compact disks CDs and digital versatile disks DVDs are maintained by administrators of the computer systems. The rescue disk enables the damaged system to boot and allows the computer system to be repaired. In a networked computer environment when a computer system fails the network administrator has to physically deliver the rescue disk to the computer system and repair the computer system locally.

For simplicity and illustrative purposes the principles of the present invention are described by referring mainly to exemplary embodiments thereof. However one of ordinary skill in the art would readily recognize that the same principles are equally applicable to and can be implemented in all types of information and systems and that any such variations do not depart from the true spirit and scope of the present invention. Moreover in the following detailed description references are made to the accompanying figures which illustrate specific embodiments. Electrical mechanical logical and structural changes may be made to the embodiments without departing from the spirit and scope of the present invention. The following detailed description is therefore not to be taken in a limiting sense and the scope of the present invention is defined by the appended claims and their equivalents.

Embodiments of the present teachings relate to systems and methods for repairing target machines in a software provisioning environment. More particularly a provisioning server can remotely deliver a rescue environment to a malfunctioning target machine.

According to embodiments a provisioning server can be configured to operate in conjunction with a network management server in order to identify malfunctioning target machines for example target machines with damaged operating systems. The provisioning server can be configured to receive an identification of a target machine that is malfunctioning from the network management server. Likewise the provisioning server can be configured to instruct the network management server to locate and identify any malfunctioning target machines.

According to embodiments once a malfunctioning target machine is identified the provisioning server can be configured to identify a rescue environment to repair the malfunctioning target machine. The rescue environment can be configured to execute on the malfunctioning target machine and allow the provisioning server to diagnose and repair the malfunctioning target machine. The provisioning server can be configured to identify the rescue environment by locating the specifications of the malfunctioning target machine software and or hardware and locating a rescue environment compatible with the specifications of the malfunctioning target machine. The provisioning server can be configured to provide the rescue environment to the malfunctioning target machine via a network connection.

According to embodiments the provisioning server can be configured to communicate with the rescue environment in order to diagnose and repair the malfunctioning target machine. For example the provisioning server can alter settings and parameters of software on the malfunctioning target machine. Additionally the provisioning server can be configured to maintain a record of previous software installed on the malfunctioning target machine. If necessary the provisioning server can be configured to identity the previously installed software on the malfunctioning target machine and provide the previously installed software to the malfunctioning target machine for re installation.

By providing a rescue environment from a provisioning server a damaged or malfunctioning computer system can be repaired remotely at the provisioning server. As such malfunctioning computer systems can be repaired without requiring an administrator to physically visit the malfunctioning computer systems.

In particular the provisioning environment can manage software provisioning using a hierarchy of commands. In exemplary embodiments the hierarchy can include at least four levels of commands. The lowest level in the hierarchy can comprise distribution commands which primarily handle base operating system specific tasks of provisioning. The second level can comprise profile commands which associate a configuration file such as a kickstart file for Linux or other operating system with a distribution and optionally allow for customization. The third level comprises system commands which associate remote systems that are involved with the provisioning of the software. The fourth level comprises repository commands which address configurations and tasks related to updating the software remote installation procedures and optionally customizing the software.

The provisioning environment provides several capabilities and advantages over the known provisioning solutions. For example the present invention is capable of handling a variety of forms of installations such as preboot execution environment PXE virtualization re installations and image installations.

In exemplary aspects the provisioning environment enables integrating virtualization into a PXE provisioning infrastructure and provides several options to reinstall running machines as well. The provisioning environment can integrate mirroring of package repositories with the provisioning process so that a provisioning server may serve as a central mirror point of contact for all of an organizations software needs. In aspects a set of remote mirrored repositories can automatically be used by provisioned systems without additional setup.

Reference will now be made in detail to the exemplary aspects the provisioning environment . The provisioning environment can be applied to provisioning any form of software such as Windows systems UNIX systems and Linux systems. In the exemplary description that follows is presented to explain the provisioning environment for provisioning software such as Linux and Linux based software such as Fedora and Red Hat Enterprise Linux by Red Hat Inc.

In provisioning of software such as Linux many system administrators use what is known as the kickstart installation method. Kickstart files are files that specify the intended configuration of the software being provisioned. Kickstart files can be kept on a server and can be read by individual computers during the installation. This installation method allows the use of a single or relatively few standard kickstart files to install Linux on multiple machines making it ideal for network and system administrators.

The kickstart file can be a simple text file containing a list of items each identified by a keyword. In general a kickstart file can be edited with any text editor or word processor that can save files as ASCII text. One skilled in the art will recognize that the present invention may be applied to non kickstart files in software provisioning. For example configuration files such as AutoYAST Answer files used in Novell SuSe Linux and Sun Solaris Jumpstart files may also be used by the provisioning environment .

Typically a kickstart file can be copied to the boot disk or made available on the network. The network based approach is most commonly used as most kickstart installations for software provisioning such as Linux systems tend to be performed via a network using NFS FTP or HTTP on networked computers. Administrators also find it desirable that kickstart installations can be performed using a local CD ROM or a local hard drive.

Using kickstart files a system administrator can create a single file containing the parameters that are needed to complete a typical software installation. For example kickstart files specify parameters related to language selection mouse configuration keyboard selection boot loader installation disk partitioning network configuration NIS LDAP Kerberos Hesiod and Samba authentication firewall configuration and package selection.

According to exemplary aspects illustrated in the provisioning environment can include a provisioning server a code repository which provides access to distributions and a set of installation templates a set of exception plugins a helper client running on target machines in a network a provisioning database which comprises a distribution tree list and template list . Each of these components will now be further described.

The provisioning server from herein referred to as a cobbler is responsible for serving as an extensible markup language remote procedure call XMLRPC handler linking to or mirroring install distribution trees and a configuration database hosting kickstart templates hosting plugins generating installation images and the like. The cobbler server can be implemented as software such as Python code installed on a boot server machine and provide a command line interface for configuration of the boot server In addition the cobbler server can make itself available as a Python application programming interface API for use by higher level management software not shown . The cobbler server supports provisioning via PXE image ISO installation virtualization re provisioning. As will be described later the last two modes are performed with the assistance of a helper client .

The code repository is responsible for hosting distributions and . The code repository may be implemented using well known components of hardware and software. Additionally the code repository can be include one or more repositories hosting distributions. The distributions and can include bundles of software that are already compiled and configured. The distributions and may be in the form of either rpm deb tgz msi exe formats and the like. For example as Linux distributions the distributions and are bundles of software that comprise the Linux kernel the non kernel parts of the operating system and assorted other software. The distributions and can take a variety of forms from fully featured desktop and server operating systems to minimal environments.

In exemplary aspects the installation templates are any data structure or processing element that can be combined with a set of installation configurations and processed to produce a resulting configuration file such as a kickstart file.

In exemplary aspects exception plugins are software that interact with cobbler server to customize the provisioning of software. In general the exception plugins are intended to address infrequent customization needs.

In exemplary aspects the helper client known as koan which stands for kickstart over a network can assist the cobbler server during the provisioning processes. The koan can allow for both network provisioning of new virtualized guests and destructive provisioning of any existing system. When invoked the koan can request profile information from a remote boot server that has been configured with the cobbler server . In some aspects what the koan does with the profile data depends on whether it was invoked with virt or replace self.

In exemplary aspects the koan can enable replacing running systems as well as installing virtualized profiles. The koan can also be pushed out to systems automatically from the boot server. In some aspects the koan client is also written in Python code to accommodate a variety of operating systems machine architectures etc.

In exemplary aspects the network can include a number of the target machines . The target machines can represent the particular machines to which software provisioning is directed. The target machines can represent a wide variety of computing devices such as personal computers servers laptop computers personal mobile devices and the like. In some aspects the target machines can represent distributed computing environments such as cloud computing environments. Although shows several of the target machines the provisioning environment can be capable of managing a wide range environments such as datacenters with thousands of machines or server pools with just a few machines. Additionally the cobbler server can be connected to multiple networks .

In exemplary aspects the provisioning database can serve as a data storage location for holding data used by the cobbler server . For example as shown the provisioning database can comprise the distribution tree list and the template list . The distribution tree list can provide an inventory of the distributions and that are hosted or mirrored by the cobbler server . The template list can provide an inventory of the templates that are hosted by the cobbler server .

As noted above the cobbler server can manage provisioning using a hierarchical concept of distribution commands profile commands system commands and repository commands. This framework enables the cobbler server to abstract the differences between multiple provisioning types installation reinstallation and virtualization and allows installation of all three from a common platform. This hierarchy of commands also permits the cobbler server to integrate software repositories with the provisioning process thus allowing systems to be configured as a mirror for software updates and third party content as well as distribution content.

Distributions can contain information about base operating system tasks such as what kernel and initial ramdisk initrd are used in the provisioning along with other information such as required kernel parameters. Profiles associate one of the distributions and with a kickstart file and optionally customize it further for example using plugins . System commands associate a hostname IP or machine access control MAC with a distribution and optionally customize the profile further. Repositories contain update information such as yum mirror information that the cobbler server uses to mirror repository . The cobbler server can also manage generate dynamic host configuration protocol DHCP configuration files using the templates .

In exemplary aspects the cobbler server can use a provisioning environment that is fully templated allowing for kickstarts and PXE files to be customized by the user. The cobbler server uses the concept of profiles as an intermediate step between the operating system and the installed system. A profile is a description of what a system does rather than the software to be installed For instance a profile might describe a virtual web server with X amount of RAM Y amounts of disk space running a Linux distribution Z and with an answer file W.

In exemplary aspects the cobbler server can provide a command line interface to configure a boot server in which it is installed. For example the format of the cobbler server commands can be generally in the format of cobbler command subcommand arg1 arg2 . Thus a user can specify various aspects of software provisioning via a single interface such as a command line interface or other known interface. Examples of exemplary cobbler commands can be found in U.S. patent application Ser. No. 11 763 315 U.S. Patent Application Publication No. 2008 0288938 and U.S. patent application Ser. No. 11 763 333 U.S. Patent Publication No. 2008 0288939 the disclosures of which are incorporated herein in their entirety by reference.

According to exemplary aspects a user can use various commands of the provisioning environment to specify distributions and install trees hosted by the code repository such as a distribution from the distributions or . A user can add or import a distribution or import it from installation media or an external network location.

According to exemplary aspects in order to import a distribution the cobbler server can auto add distributions and profiles from remote sources whether this is an installation media such as a DVD an NFS path or an rsync mirror. When importing a rsync mirror the cobbler server can try to detect the distribution type and automatically assign kickstarts. By default in some embodiments the cobbler server can provision by erasing the hard drive setting up eth for DHCP and using a default password. If this is undesirable an administrator may edit the kickstart files in etc cobbler to do something else or change the kickstart setting after the cobbler server creates the profile.

According to exemplary aspects a user may map profiles to the distributions and map systems to the profiles using profile commands and systems commands of the provisioning environment . A profile associates a distribution to additional specialized options such as a kickstart automation file. In the cobbler server profiles are the unit of provisioning and at least one profile exists for every distribution to be provisioned. A profile might represent for instance a web server or desktop configuration.

According to exemplary aspects a user can map systems to profiles using system commands. System commands can assign a piece of hardware with cobbler server to a profile. Systems can be defined by hostname Internet Protocol IP address or machine access control MAC address. When available use of the MAC address to assign systems can be preferred.

According to exemplary aspects the user can map repositories and profiles using repository commands. Repository commands can address configurations and tasks related to updating the software remote installation procedures and optionally customizing the software. These repository commands can also specify mirroring of the provisioned software to remote servers. Repository mirroring can allow the cobbler server to mirror not only install the trees and but also optional packages third party content and updates. Mirroring can be useful for faster more up to date installations and faster updates or providing software on restricted networks. The cobbler server can also include other administrative features such as allowing the user to view their provisioning configuration or information tracking the status of a requested software installation.

According to exemplary aspects a user can utilize commands to create a provisioning infrastructure from a distribution mirror. Then a default PXE configuration is created so that by default systems will PXE boot into a fully automated install process for that distribution. The distribution mirror can be a network rsync mirror or a mounted DVD location.

According to exemplary aspects the administrator uses a local kernel and initrd file already downloaded and shows how profiles would be created using two different kickstarts one for a web server configuration and one for a database server. Then a machine can be assigned to each profile.

According to exemplary aspects a repo mirror can be set up for two repositories and create a profile that will auto install those repository configurations on provisioned systems using that profile.

According to exemplary aspects in addition to normal provisioning the cobbler server can support yet another option called enchant . Enchant takes a configuration that has already been defined and applies it to a remote system that might not have the remote helper program installed. Users can use this command to replace a server that is being repurposed or when no PXE environment can be created. Thus the enchant option allows the remote the koan client to be executed remotely from the cobbler server .

According to aspects if the cobbler server is configured to mirror certain repositories the cobbler server can then be used to associate profiles with those repositories. Systems installed under those profiles can be auto configured to use these repository mirrors in commands and if supported these repositories can be leveraged. This can be useful for a large install base when fast installation and upgrades for systems are desired or software not in a standard repository exists and provisioned systems desire to know about that repository.

According to exemplary aspects the cobbler server can also keep track of the status of kickstarting machines. For example the cobbler status will show when the cobbler server thinks a machine started kickstarting and when it last requested a file. This can be a desirable way to track machines that may have gone inactive during kickstarts. The cobbler server can also make a special request in the post section of the kickstart to signal when a machine is finished kickstarting.

According to exemplary aspects for certain commands the cobbler server will create new virtualized guests on a machine in accordance with the orders from the cobbler server . Once finished an administrator can use additional commands on the guest or other operations. The cobbler server can automatically name domains based on their MAC addresses. For re kickstarting the cobbler server can reprovision the system deleting any current data and replacing it with the results of a network install.

According to exemplary aspects the cobbler server can configure boot methods for the provisioning requested by the user. For example the cobbler server can configure a PXE environment such as a network card BIOS. Alternatively the cobbler server can compile and configure information for koan client . The cobbler server can also optionally configure DHCP and DNS configuration information.

According to exemplary aspects the cobbler server can serve the request of the koan client . The koan client can acknowledge the service of information of the cobbler server and then can initiate installation of the software being provisioned. Additionally the koan client can either install the requested software e.g. replace the existing operating system or install a virtual machine.

As shown in the network can include a number of target systems . For example the target systems can include a group of server computers such as blade servers. The target systems can include computing systems such as servers personal computers laptop computers etc. The target systems can be connected to power management systems to control the power supplied to the target systems and to alter the power state of one or more of the target systems e.g. power cycle . The power management systems can be any type of system to manage the power of the target machines for example Integrated Lights Out ILO by Hewlett Packard Corporation Dell Remote Access Control DRAC by Dell Corporation WTI powerbar by Western Telematics Inc and other power system supporting network communications. Additionally the target systems can be configured to include a koan client .

In embodiments the cobbler server can be configured to identify and repair a malfunctioning target machine from the target machines . The malfunctioning target machine can include a problem with hardware software and combinations thereof that causes the malfunctioning target machine to function improperly. For example a target machine can contain a damaged operating system that is unable to boot the target machine due to various conditions such as viruses incompatible hardware and or software mis configured hardware and or software hardware failure and the like.

The cobbler server can be configured to operate in conjunction with a network management server in order to identify the malfunctioning target machine . The network management server can be any type of network management application or tool to securely communicate with the target machines to monitor the state of the target machines and to manage and direct the target machines . For example the network management server can be a FUNC server as described in U.S. patent application Ser. No. 12 130 424 filed May 30 2008 entitled SYSTEMS AND METHODS FOR REMOTE MANAGEMENT OF NETWORKED SYSTEMS USING SECURE MODULAR PLATFORM U.S. Patent Application Publication No. 2009 0300180 assigned to Red Hat Corporation the disclosure of which is incorporated herein in its entirety by reference.

In embodiments to identify a malfunctioning target machine the cobbler server can be configured to receive an identification of the target machine that is malfunctioning from the network management server . For example the network management server can monitor the target machines and notify the cobbler server of the malfunctioning target machine . Likewise the cobbler server can be configured to instruct the network management server to locate and identify any malfunctioning target machines. Additionally the cobbler server can be configured to independently identify the malfunctioning target machine .

In embodiments once a malfunctioning target machine is identified the cobbler server can be configured to identify a rescue environment from a set of rescue environments to repair the malfunctioning target machine . The rescue environment can be configured to execute on the malfunctioning target machine and allow the cobbler server to diagnose and repair the malfunctioning target machine . For example the rescue environment can be an application an appliance an image file and the like. The rescue environment can be configured to operate in conjunction with the hardware and software of the malfunctioning target machine to provide a stable platform to review the configuration of the hardware and software to identify problems and to repair any problems.

The set of rescue environments can include rescue environments for the different types of the target machines in the network . For example the set of the rescue environments can include rescue environments for the different types of operating systems OS in the network . The cobbler server can be configured to maintain the set of rescue environments in the provisioning database . Likewise the cobbler server can be configured to maintain the set of rescue environments in other types of storage or data systems. Additionally the cobbler server can be configured to locate and retrieve the set of rescue environments from remote storage.

In embodiments the cobbler server can be configured to identify the rescue environment by locating the specifications of the malfunctioning target machine software and or hardware in an inventory and locating the rescue environment from the set of rescue environments compatible with the specifications of the malfunctioning target machine. For example the cobbler server can locate the rescue environment compatible with the operating system of the malfunctioning target machine . Additionally the cobbler server can be configured to maintain a reference to the rescue environment which is compatible with the different target machines in the inventory associated with the appropriate target machine .

In embodiments the inventory can be configured to include information identifying the target machines . The information can include information that uniquely identifies the target machines in the network and the network management server such as Media Access Control MAC address Ethernet Hardware Address EHA and the like. The information can also include other information that identifies the target machines such as specifications of the target machines network information of the target machines IP address host name etc. and software installed on the target machines . The cobbler server can also be configured to include in the inventory information about the power management systems for the target machines . The information can include identification of the power management system type of power management systems communication protocol or tools utilized by the power management systems Intelligent Platform Management Interface IPMI Cluster Manager CMAN and the like access information login and password for the power management system and the like. The inventory can be maintained in the provisioning database or other storage.

Once the rescue environment has be identified the cobbler server can be configured to provide the rescue environment to the malfunctioning target machine via a network connection with the network . Likewise the cobbler server can be configured to utilize the koan client to assist in providing the rescue environment to the malfunctioning target machine .

In embodiments once provided to the malfunctioning target machine the cobbler server can be configured to communicate with rescue environment in order to diagnose and repair the malfunctioning target machine . For example the cobbler server can utilize the rescue environment to examine and alter settings and parameters of software such as the OS and hardware on the malfunctioning target machine . The cobbler server can be configured to utilize the rescue environment directly. Likewise the cobbler server can be configured to utilize the network management server to interact with the rescue environment .

Additionally the cobbler server can be configured to maintain a record of previous software installed on the malfunctioning target machine . For example the cobbler server can maintain previous profiles installed on the malfunctioning target machine . The cobbler server can be configured to maintain the previous installed software in the inventory . If necessary the cobbler server can be configured to identify the previously installed software on the malfunctioning target machine and provide the previously installed software to the malfunctioning target machine for re installation. For example the cobbler server can identify a previously profile and provision software to the malfunctioning target machine based on the previous profile.

In embodiments after providing the rescue environment to the malfunctioning target machine the cobbler server can be configured to alter a power state of the malfunctioning target machine . For example the cobbler server can power cycle power down power up the malfunctioning target machine in order to initiate the rescue environment or restart the system after the repair. The cobbler server can be configured to communicate with the power management systems of the malfunctioning target machine to alter the power state of the malfunctioning target machine . To achieve this the cobbler server can be configured to include a power management module .

In embodiments the power management module can be configured to communicate with the power management systems of the target machines . The power management module can be configured to instruct the power management systems to alter the power state of the target machines . The power management module can be configured to generate a command or instruction. The instruction can include access information for the power management systems and the power state alteration to be performed. The power management module can be configured to form the instruction in a protocol utilized by the particular power management systems . For example the cobbler server can be configured to utilize conventional or proprietary protocols or tools such as IPMI DRAC ILO fence agents and the like. The power management module can be configured to determine the protocol from the inventory . Once generated the cobbler server can be configured to transmit the instruction to the determined power management systems .

In embodiments the power management module can be implemented as a portion of the code for the cobbler server . Likewise the power management module can be implemented as a separate software tool accessible by the cobbler server . The power management module can be written in a variety of programming languages such as JAVA C Python code and the like to accommodate a variety of operating systems machine architectures etc. Additionally the power management module can be configured to include the appropriate application programming interfaces APIs to communicate with and cooperate with other components of the cobbler server .

In embodiments the cobbler server can provide the rescue environment and interact with the rescue environment directly or via the network management server . Likewise the cobbler server can be configured to interact with rescue environments already existing on a target machine to perform the processes described above. For example a user of a target machine can initiate a rescue environment and the cobbler server can be configured to interact with the user initiated rescue environment. Likewise other applications and tools can interact with the rescue environment provided by the cobbler server to repair the target machine .

Processor further communicates with network interface such as an Ethernet or wireless data connection which in turn communicates with one or more networks such as the Internet or other public or private networks. Processor also communicates with the provisioning database the cobbler server and the network management server to execute control logic and perform the rescue processes described above and below.

As illustrated the cobbler server can be implemented as a software application or program capable of being executed by a conventional computer platform and stored in any type of conventional non transitory computer readable medium for example a hard disk drive. Likewise the cobbler server can also be implemented as a software module or program module capable of being incorporated in other software applications and programs. In either case the cobbler server can be implemented in any type of conventional proprietary or open source computer language.

As illustrated the network management server can be executed in the computing system . Likewise the network management server can be executed in a separate computing system including components similar to computing system . Accordingly the computing system can communicate with the network management server via the network interface .

In the cobbler server identifies a rescue environment to diagnose and repair the malfunctioning target machine . The cobbler server can identify the rescue environment by locating the specifications of the malfunctioning target machine software and or hardware in the inventory and locating the rescue environment from the set of rescue environments compatible with the specifications of the malfunctioning target machine. For example the cobbler server can locate the rescue environment compatible with the operating system of the malfunctioning target machine . Additionally the cobbler server can maintain a reference to the rescue environment which is compatible with the different target machines in the inventory associated with the appropriate target machine .

In the cobbler server provides the rescue environment to the malfunctioning target machine . The cobbler server can transmit the rescue environment to the malfunctioning target machine via a network connection with the network . Likewise the cobbler server can be configured to utilize the koan client to assist in providing the rescue environment to the malfunctioning target machine .

In if necessary the cobbler server instructs the power management system to perform the alteration of the power state of the malfunctioning target machine to initiate the execution of the rescue environment . The power management module can be configured to generate a command or instruction. The instruction can include access information for the power management systems and the power state alteration to be performed. The power management module can be configured to form the instruction in a protocol utilized by the particular power management systems . For example the cobbler server can be configured to utilize conventional or proprietary protocols and tools such as IPMI CMAN ILO fence agents and the like. The power management module can be configured to determine the protocol from the inventory . Once generated the cobbler server can be configured to transmit the instruction to the determined power management systems .

In the cobbler server communicates with the rescue environment to repair the malfunctioning target machine . For example the cobbler server can utilize the rescue environment to examine and alter settings and parameters of software such as the OS and hardware on the malfunctioning target machine .

In if necessary the cobbler server provisions software to the malfunctioning target machine . The cobbler server can maintain a record of previous software installed on the malfunctioning target machine . For example the cobbler server can maintain previous profiles installed on the malfunctioning target machine . If necessary the cobbler server can be configured to identify the previously installed software on the malfunctioning target machine and provide the previously installed software to the malfunctioning target machine for re installation. For example the cobbler server can identify a previously profile and provision software to the malfunctioning target machine based on the previous profile.

While the invention has been described with reference to the exemplary embodiments thereof those skilled in the art will be able to make various modifications to the described embodiments without departing from the true spirit and scope. The terms and descriptions used herein are set forth by way of illustration only and are not meant as limitations. In particular although the method has been described by examples the steps of the method may be performed in a different order than illustrated or simultaneously. Those skilled in the art will recognize that these and other variations are possible within the spirit and scope as defined in the following claims and their equivalents.

