---

title: Tracking changes in a database tool
abstract: In one example embodiment, a system and method is illustrated that includes receiving input to execute a function associated with a display element of a Graphical User Interface (GUI), the display element to display edit history data relating to a displayed portion of structured data. The system and method also includes retrieving the edit history data for the displayed portion of the structured data based upon the function, the edit history data reflecting changes made to the displayed portion of the structured data. The system and method also includes displaying the edit history data in the GUI as part of the display element.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08893017&OS=08893017&RS=08893017
owner: Adobe Systems Incorporated
number: 08893017
owner_city: San Jose
owner_country: US
publication_date: 20080529
---
A portion of the disclosure of this document includes material that is subject to copyright protection. The copyright owner has no objection to the facsimile reproduction by anyone of the patent document or the patent disclosure as it appears in the Patent and Trademark Office patent files or records but otherwise reserves all copyright rights whatsoever. The following notice applies to the software data and or screenshots that may be illustrated below and in the drawings that form a part of this document Copyright 2008 Adobe Systems Incorporated. All Rights Reserved.

The present application relates generally to the technical field of algorithms and programming and in one specific example the display of data in a database.

Structured data resources e.g. databases and spreadsheets are widely used to store manage and process data that is susceptible to such structure and organization. A database as an example of structured data may be used by many individuals e.g. knowledge workers who are not database administrators. These knowledge workers may make changes to the database in terms of changing the data in a table of the database or changing the arrangement of a schema associated with various database tables. Over time these changes may be made by a number of individuals. Further many of these changes may be collaborative in nature.

In the following description for purposes of explanation numerous specific details are set forth to provide a thorough understanding of an example embodiment. It may be evident however to one skilled in the art that the present invention will be practiced without these specific details.

In some example embodiments a system and method is illustrated for tracking changes or edits to a structured data resource e.g. a table schema or document . A table may be visually represented as a grid and may be referred to herein as a list. Example changes or edits may include the editing of record data the changing of data e.g. the addition or deletion of a record within a row or column the editing of a data style e.g. the use of bold italics strike though for a row or column the adding or deletion of rows or columns the changing of data types the editing of relationships between tables in a schema the editing of functions e.g. mathematical formula expressions or equations used to process the data included in a table or tables the creation of new tables the editing of privileges associated editing a table or schema or some other suitable change. These edits may be made by one or more users acting collaboratively to edit a table. Edits or changes may be reflected in edit data. Associated with the edit data may be identity information identifying the user making an edit and the time and date of the edit. This edit data may be displayed later as an edit history e.g. edit history data associated with a particular database table or schema. This edit history may reflect edits over time. In some example cases the table may be thought of as a list.

In some example embodiments edit data may be recorded on a session basis and ultimately stored into a log file. This log file may be a text file e.g. .txt formatted file including Unicode or American Standard Code for Information Interchange ASCII based characters. Further this log file may be stored into persistent or non persistent memory. This log file may be retrieved as an edit history. A session may include a Transmission Control Protocol Internet Protocol TCP IP based session a user activity based session a temporal based session or some other suitable basis for a session. User activity may include for example the user using some type of input device e.g. a mouse light pen keyboard or other suitable input device to interact with one or more devices and via a GUI. This input device may act as a selection device. The edit data may be recorded into the log file may record for a particular session. The log file may then be stored into a user edit history database.

In some example embodiments a screen object or widget may be used to display this edit history. A display element e.g. a screen object or widget may be an element of a GUI that displays an information arrangement changeable by the user. A screen object or widget may include a graphical pointer tooltip a drop down menu or other suitable screen object or widget. The screen objects or widget may be implemented via a browser based client engine such as is used with FLASH Asynchronous JavaScript and XML AJAX ACTIVE X or Java. Additionally screen objects or widgets may be components as may appear on a Visual Basic VB form a C form or via a Java or C C implementation. In one example embodiment a graphical pointer e.g. a mouse pointer may be used in combination with another screen object or widget to display the edit history. For example an edit history may be displayed where an input command is provided to execute a function associated with the mouse pointer and or screen object or widget. This function may be a mouse over function a focus function right click function left click function keyboard function or other suitable. A focus function e.g. focus may be a function that facilitates an indication that a GUI screen object or widget is currently selected to receive input. In some example embodiments focus includes a function that may be implemented which utilizes a Focus Follows Mouse e.g. FFM policy where the focus automatically follows the current placement of the mouse pointer.

In some example embodiments the input command may be provided with respect to a portion of a table or schema so as to retrieve and display the edit history with respect to that portion. For example an edit history may be displayed via the screen object or widget with respect to a particular table row column or schema. This edit history may be displayed via the screen object or widget being proximate to the particular table row column function or schema. Proximate may include a measure of pixels between the screen object or widget and the particular table row column or schema as displayed with a GUI. This measure may be within for example 0 100 pixels. Further a screen object or widget may be used to turn off or on the display of the edit history of the tracking of the edit history. Other suitable information in addition to identifying information may be displayed in the edit history.

In some example embodiments the system and method shown herein may be implemented in real time. For example in cases where an edit occurs to a table or schema this change may be reflected in real time and may be visible to a plurality of users. Further through the use of for example Application Programming Interfaces API such as Open Database Connectivity ODBC the system and method illustrated herein may be platform independent such that it may be implemented with a plurality of database products see database products outlined below .

In some example embodiments operatively connected to this database server is a table data database and or a user edit history database . Operatively connected may mean a logical or physical connection between the database server and the table data database and or the user edit history database . These databases e.g. and may reside natively as a part of the database server or be managed by some type of intermediate device residing between the database server and the databases e.g. and . This intermediate device may be a further database server or application server. The database server retrieves table data from the table data database . This table data is transmitted across the network to be received and displayed by the one or more devices . This table data may include the previously illustrated edit data expressed as an edit history. The table data may be transmitted using HTTPS or HTTP.

In some example embodiments where the user makes an edit to the table data this edit may be reflected in real time or near real time in the table data displayed to other users. For the purposes of present application real time refers to the capability to respond to communicate process or display data in response to an event within an extant interaction session. In some example embodiments an edit is transmitted asynchronously across the network and received by the database . This edit may be transmitted using generated using AJAX in combination with HTTP. Once the edit is received it may be stored into the user edit history database . It may then be transmitted to additional users as an edit update. This edit update may be transmitted using HTTP over a Transmission Control Protocol Internet Protocol TCP IP session connection with a device such as the one or more devices . A User Datagram Protocol IP UDP IP may be used in lieu of TCP IP. The edit update may then be displayed in a table display and editing GUI similar to the table display and editing GUI .

In some example embodiments the computer system includes an additional receiver to receive additional input to display the display element the display element to display additional edit history data relating to an additional displayed portion of the structured data. This additional receiver is communicatively coupled to the highlighting engine . Communicatively coupled to the highlighting engine is an additional retriever to retrieve additional edit history data for the additionally displayed portion of the structured data based on the function the additional edit history data including additional changes made to the additionally displayed portion of the structured data. Further communicatively coupled to the highlighting engine is an additional display to display the additional edit history data in real time on the display as part of the display element.

In some example embodiments the computer system includes the generation engine communicatively coupled to a display to display version information to the user identifying the plurality of versions of the structured data and receiving of the identification of the first version based on the display version information. In some example embodiments identification includes user input to select the first version. The version information concurrently presents information identifying the plurality of versions of the structured data to the user see e.g. field and the version history displayed therein . The version information that is displayed to the user may include temporal information associated with at least one of the versions of the plurality of versions of the structured data. The structured data may be a table and the change indicator may be specific with respect to at least one of a cell row or column of the table. Communicatively coupled to the display may be a receiver to receive the selection of the change indicator and responsive to the receiving of the selection of the change indicator displaying change information pertaining to the change between the first version of the current version of structured data. In some example embodiments the receiver includes the selection of the change indicator includes detecting a master of operation with respect to a tooltip function associated with the change indicator. Some example embodiments may include the change information that includes at least one of user time date or type information pertaining to the change between the first version and the current version of structured data. The identification of the change between the first version and the current version of the structured data may be performed dynamically responsive to the receipt of the identification of the first version. The identification of the change between the first version and that the current version of the structured data may be performed using stored changed data reflecting changes between the first version and the current version. Communicatively coupled to the receiver is a highlighting engine that highlights changes made to the structured data subsequent to a previous session. A previous session may be a user session during which edits were made to structured data. Highlighting may take the form of bolding italicizing applying a transparent color to or some other suitable way to shown that a change has been made to the structured data.

In some example embodiments the method includes an operation that is executed to receive selection of the change indicator and responsive to the receiving of the selection of the change indicator displaying change information pertaining to the change between the first version of the current version of structured data. In some example embodiments the receiving of the selection of the change indicator includes detecting a master of operation with respect to a tooltip function associated with the change indicator. Moreover the change information may include at least one of user time date or type information pertaining to the change between the first version and the current version of structured data. Further the identification of the change between the first version and the current version of the structured data may be performed dynamically responsive to the receipt of the identification of the first version. In some example embodiments the identification of the change between the first version and that the current version of the structured data is performed using stored changed data reflecting changes between the first version and the current version. An operation may be executed to highlighting changes made to the structured data subsequent to a previous session. A previous session may be a user session during which changes were made to structured data. These changes may be stored into the log file as referenced herein. Highlighting may take the form of bolding italicizing applying a transparent color to or some other suitable way to shown that a change has been made to the structured data.

In some example embodiments an operation is shown that when executed receives the session initiation signal . An operation may be executed that may parse user ID information from the session initiation signal . A decisional operation is executed that determines whether or not the user is known and the user ID is valid. In cases where decisional operation evaluates to false an operation is executed that prompts the user for example to set up an account. This account set up process may include the user being presented with a web page requesting personal information relating to user the name of the user the e mail address of the user the physical address of the user and other information associated with the user . In cases where decisional operation evaluates to true an operation is executed. An operation may retrieve user information from some type of user information database not shown . This user information may include some type of unique identifier value associated with a user. This unique identifier information may be the user ID or some other similar ID to uniquely identify the user . An operation is executed that may create a log file e.g. a log for a session for the user e.g. a user session . A log file may be a text file that includes edits made by the user during a session. As previously illustrated the session may be for example a TCP IP session a session based on some pre determined time period or a session based upon user activity.

In some example embodiments an operation is executed that transmits a table data request. This table data request may be the table request and may be transmitted using HTTP or HTTPS. Included within this table data request may be a request for a particular table or schema. An operation is executed may receives table data such as table data . An operation is executed that receives and transmits an edit history request wherein the edit history is requested from the database server regarding a particular table schema or data included within a table. An operation is executed that receives an edit history for a table. This edit history may be retrieved through the execution of operation in real time such that when an edit is made by one user this edit is reflected in the edit history as viewed by a second user. These edits may be reflected in a periodic basis e.g. based upon some predetermined passage of time or on the basis of some edit being received by the database server . As outlined above AJAX HTTP and TCP IP may be used to facilitate this real time editing. For example a TCP IP connection may exist between the database server and a plurality of devices e.g. the one or more devices . Using this TCP IP connection real time updating may occur. An operation is executed that displays this edit history for a table. As previously illustrated this edit history may be displayed via a mouse pointer and tooltip a mouse pointer and drop down menu or mouse pointer and tooltip or . An operation is executed that receives edit commands. These edit commands may be in the form of edit commands . These edit commands may include the aforementioned changes and date and time data associated with theses changes see e.g. the previously illustrated identifying data . These edit commands may be generated as part of a collaborative endeavor between the user and another user. An operation is executed that transmits edit data relating to the table. This edit data may be edit data . This edit data may be transmitted using for example HTTP or HTTPS. An operation is executed that receives edit data. Further a decisional operation is executed that determines whether or not a session has ended. In cases where decisional operation evaluates to false an operation is re executed to receive additional edit data. In cases where decisional operation evaluates to true an operation is executed that stores a log file for a user session into the user history edit database . This log file may be later referenced for the purposes of displaying an edit history for a particular table and or schema.

In some example embodiments an operation is executed that transmits an edit history request to the database server . This edit history request may be transmitted using HTTP or HTTPS and may include the particular portion of a table or schema for which an edit history is sought. This edit history may be identified via some type of unique key value or uniquely identifying value. A unique key value may be for example an integer value that is associated with the table displayed within the GUI that may be used to uniquely identify a tuple or row in a table. An operation may be executed and may receive an edit history request. An operation is executed and may retrieve a log file for table data from the user edit history database . An operation is executed that identifies a log history for the table data for which an edit history is sought. This identification may involve for example taking the unique key value associated with a row or tuple of a table displayed within the table display and editing GUI and using that key value to retrieve the log file associated with the table data. An operation is executed that encodes and transmit the edit history. This encoding and transmission may involve the utilization of HTTP HTTPS or some other suitable protocol.

Some embodiments may include the various databases e.g. or being relational databases flat files XML based databases object databases or in some cases Online Analytic Processing OLAP based databases. In the case of relational databases various tables of data are created and data is inserted into and or selected from these tables using SQL or some other database query language known in the art. In the case of OLAP databases one or more multi dimensional cubes or hyper cubes including multidimensional data from which data is selected from or inserted into using a Multidimensional Expression MDX language may be implemented. In the case of a database using tables and SQL a database application e.g. database products such as for example MYSQL MICROSOFT SQL SERVER ORACLE 8I 10G or some other suitable database application may be used to manage the data. In this the case of a database using cubes and MDX a database using Multidimensional Online Analytic Processing MOLAP Relational Online Analytic Processing ROLAP Hybrid Online Analytic Processing HOLAP or some other suitable database application may be used to manage the data. The tables or cubes made up of tables in the case of for example ROLAP are organized into an RDS or Object Relational Data Schema ORDS as is known in the art. These schemas may be normalized using certain normalization algorithms so as to avoid abnormalities such as non additive joins and other problems. Additionally these normalization algorithms may include Boyce Codd Normal Form or some other normalization or optimization algorithm known in the art.

Some example embodiments may include the above illustrated operations being written as one or more software components. These components and the functionality associated with each may be used by client server or peer computer systems. These various components can be implemented into the system on an as needed basis. These components may be written in an object oriented computer language such that a component oriented or object oriented programming technique can be implemented using a Visual Component Library VCL Component Library for Cross Platform CLX Java Beans JB Enterprise Java Beans EJB Component Object Model COM or Distributed Component Object Model DCOM or other suitable technique. These components are linked to other components via various Application Programming Interfaces APIs and then compiled into one complete server and or client application. The method for using components in the building of client and server applications is well known in the art. Further these components may be linked together via various distributed programming protocols as distributed computing components.

Some example embodiments may include remote procedure calls being used to implement one or more of the above illustrated components across a distributed programming environment. For example a logic level may reside on a first computer system that is located remotely from a second computer system including an interface level e.g. a GUI . These first and second computer systems can be configured in a server client peer to peer or some other configuration. The various levels can be written using the above illustrated component design principles and can be written in the same programming language or in different programming languages. Various protocols may be implemented to enable these various levels and the components included therein to communicate regardless of the programming language used to write these components. For example an operation written in C using Common Object Request Broker Architecture CORBA or Simple Object Access Protocol SOAP can communicate with another remote module written in Java . Suitable protocols include SOAP CORBA and other protocols well known in the art.

Some embodiments may use the Open Systems Interconnection OSI model or Transmission Control Protocol Internet Protocol TCP IP protocol stack model for defining the protocols used by a network to transmit data. In applying these models a system of data transmission between a server and client or between peer computer systems is illustrated as a series of roughly five layers comprising an application layer a transport layer a network layer a data link layer and a physical layer. In the case of software having a three tier architecture the various tiers e.g. the interface logic and storage tiers reside on the application layer of the TCP IP protocol stack. In an example implementation using the TCP IP protocol stack model data from an application residing at the application layer is loaded into the data load field of a TCP segment residing at the transport layer. This TCP segment also includes port information for a recipient software application residing remotely. This TCP segment is loaded into the data load field of an IP datagram residing at the network layer. Next this IP datagram is loaded into a frame residing at the data link layer. This frame is then encoded at the physical layer and the data transmitted over a network such as the Internet a LAN a WAN or some other suitable network. In some cases Internet refers to a network of networks. These networks may use a variety of protocols for the exchange of data including the aforementioned TCP IP or some other suitable protocol. These networks may be organized within a variety of topologies e.g. a star topology or structures.

The example computer system includes a processor e.g. a CPU a Graphics Processing Unit GPU or both a main memory and a static memory which communicate with each other via a bus . The computer system may further include a video display unit e.g. a Liquid Crystal Display LCD or a Cathode Ray Tube CRT . The computer system also includes an alphanumeric input device e.g. a keyboard a UI cursor controller e.g. a mouse a drive unit a signal generation device e.g. a speaker and a network interface device e.g. a transmitter .

The disk drive unit includes a machine readable medium on which is stored one or more sets of instructions and data structures e.g. software embodying or used by any one or more of the methodologies or functions illustrated herein. The software instructions may also reside completely or at least partially within the main memory and or within the processor during execution thereof by the computer system the main memory and the processor also constituting machine readable media.

The instructions may further be transmitted or received over a network via the network interface device using any one of a number of well known transfer protocols e.g. HTTP HTTPS .

The term machine readable medium should be taken to include a single medium or multiple media e.g. a centralized or distributed database and or associated caches and servers that store the one or more sets of instructions. The term machine readable medium shall also be taken to include any medium that is capable of storing encoding or carrying a set of instructions for execution by the machine and that cause the machine to perform any one or more of the methodologies illustrated herein. The term machine readable medium shall accordingly be taken to include but not be limited to solid state memories optical and magnetic media and carrier wave signals.

In some example embodiments a system and method is shown that includes the tracking of changes made to a table that is part of a database. These changes may exist in the form of edit data generated by one or more users acting collaboratively. This edit data may be saved during a session that the one or more users may participate within. The save edit data may then be accessible as a log file and provided for display as an edit history. Associated with this edit history may be information identifying the user who made the edits to the table or schema the date of these edits and the sequence of these edits.

The Abstract of the Disclosure is provided to comply with 37 C.F.R. 1.72 b requiring an abstract that allows the reader to quickly ascertain the nature of the technical disclosure. It is submitted with the understanding that it will not be used to interpret or limit the scope or meaning of the claims. In addition in the foregoing Detailed Description it can be seen that various features are grouped together in a single embodiment for the purpose of streamlining the disclosure. This method of disclosure is not to be interpreted as reflecting an intention that the claimed embodiments require more features than are expressly recited in each claim. Rather as the following claims reflect inventive subject matter lies in less than all features of a single disclosed embodiment. Thus the following claims are hereby incorporated into the Detailed Description with each claim standing on its own as a separate embodiment.

