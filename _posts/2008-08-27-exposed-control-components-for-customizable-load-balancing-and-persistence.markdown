---

title: Exposed control components for customizable load balancing and persistence
abstract: Embodiments are directed towards exposing access to network metrics to a late binding user customized set of computer instructions within a traffic manager device (TMD) for use in managing a request for a resource. In one embodiment, the TMD may be interposed between client devices and a plurality of network devices. Request specific data is extracted from a client request received by the user's instructions. Various network metrics about the network devices are provided to the user's instructions to selectively provide the request from the client device to a network device. In one embodiment, an election hash is described as an action performed by the user's instructions.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09130846&OS=09130846&RS=09130846
owner: F5 Networks, Inc.
number: 09130846
owner_city: Seattle
owner_country: US
publication_date: 20080827
---
The present invention relates generally to network communications and more particularly but not exclusively to exposing access to network metrics to a late binding user customized set of computer instructions within a traffic manager device TMD for use in managing a request for a resource.

The Internet s bandwidth continues to double every year. Some of this additional bandwidth is consumed however as new users access the Internet. Still additional bandwidth is consumed as existing users increase their use of the Internet. This increase of Internet use translates into an increase in traffic directed to and from various servers and through various networking components.

While some networking components are less costly they may still generally require a distribution mechanism to spread the workload so that each networking component performs work proportional to its capacity. Without proper placement and or application of a networking component eventually a network infrastructure may not be able to process its traffic in a timely manner.

In high availability networking environments one or more servers caches and or other network components may be backed up via a fail over system such that if the primary component fails a backup component may replace it. Such fail over implementations wherein one component is replaced by another component may however complicate many traditional load balancing mechanisms.

Load balancing of cache servers and or proxy servers may have unique load balancing requirements over other types of services. For example it may not be realistic to attempt to cache an entire network site application or the like on a single cache device. A typical solution therefore is to load balance requests for content and to persist subsequent requests to a specific cache device based on the content being requested. In a forward proxy example all requests for one site might then be configured to be sent to a first cache device while requests for a second site might be configured to be sent to a second cache device. Since each cache device would get all the requests fro their respective sties they will typically have the most up to date version of the content cached. One problem however often arises when a cache device is removed or new cache devices are added such as during fail over situations or the like. In traditional situations the new cache devices may not receive requests. For example if all content is already persisted to an existing cache device the newly added cache device might remain unused until the content changes or a content s persistence timer expires resulting in wasted resources. Moreover when an existing cache device is removed from a pool of cache devices reassigning requests to another cache device may take considerable time to repopulate the other cache device with new content.

The invention now will be described more fully hereinafter with reference to the accompanying drawings which form a part hereof and which show by way of illustration specific embodiments by which the invention may be practiced. This invention may however be embodied in many different forms and should not be construed as limited to the embodiments set forth herein rather these embodiments are provided so that this disclosure will be thorough and complete and will fully convey the scope of the invention to those skilled in the art. Among other things the invention may be embodied as methods or devices. Accordingly the invention may take the form of an entirely hardware embodiment an entirely software embodiment or an embodiment combining software and hardware aspects. The following detailed description is therefore not to be taken in a limiting sense.

Throughout the specification and claims the following terms take the meanings explicitly associated herein unless the context clearly dictates otherwise. The phrase in one embodiment as used herein does not necessarily refer to the same embodiment though it may. As used herein the term or is an inclusive or operator and is equivalent to the term and or unless the context clearly dictates otherwise. The term based on is not exclusive and allows for being based on additional factors not described unless the context clearly dictates otherwise. In addition throughout the specification the meaning of a an and the include plural references. The meaning of in includes in and on. 

In this specification the term client refers to a computer s general role as a requester of data or services and the term server refers to a computer s role as a provider of data or services. In general it is possible that a computer can act as a client requesting data or services in one transaction and act as a server providing data or services in another transaction thus changing its role from client to server or vice versa.

As used herein the term Uniform Resource Identifier or URI refers to any string of characters used to identify a name of a resource on a network. As such a URI may be a Uniform Resource Locators URLs and Uniform Resource Names URN or both. URIs are described in more detail in Request For Comments RFC 2396 updated by RFC 2732 entitled Uniform Resource Identifiers URI Generic Syntax which is available through the Internet Engineering Task Force IETF and is further incorporated herein by reference.

As used herein the term binding refers to assigning a value to a symbolic placeholder in computer programming. Thus for example binding during compilation refers to the act of replacing symbolic addresses for a variable and or instruction with a machine address. Early binding refers to such assignments that occur at any time during compilation linking packaging and or installing of computer readable code onto a target. Late binding refers to such assignments that occur at any time after early binding including when execution of the computer readable code starts after execution of the computer readable code or when such computer readable code executes interpreted instructions.

Today telecommunications networks which include any network of links and nodes arranged to allow messages to be passed from one part of the network to another over multiple links and through various nodes are conceptually described to have a structure consisting of three planes or aspects a control plane a data plane and a management plane. As used herein the term control plane refers to those parts of a telecommunications network that are configured to carry control sometimes called signaling information. As such the control plane may be concerned with drawing of a network map monitoring the network and or other information and activities that defines what to do with incoming messages. For example control plane activities associated with monitoring the network include but are not limited to performing health monitoring such as at layers 4 7 of the Open Systems Interconnection OSI protocol stack providing various routing activities such as Open Shortest Path First OSPF at a layer 3 of the OSI protocol stack and performing Link Aggregation Control Protocol LACP activities such as at layer 2 of the OSI protocol stack.

As used herein the term management plane refers to those parts of a telecommunications network that carries operations and administration maintenance and provisioning traffic. Operations refer to those activities toward keeping the network and services the network provides up and running. Administration refers to actions directed towards keeping track of resources in the network and how they are assigned. Maintenance refers to actions directed towards performing repairs and or upgrades to the network while provisioning refers to actions directed towards configuring resources in the network to support a given service.

As used here the term data plane refers to those parts of a telecommunications network that are directed toward carrying user traffic. The data plane therefore defines actions directed towards deciding what to do with packets arriving on an inbound interface.

Thus for example a router maybe segmented into three planes of operation each with a clearly identified objective. The data plane allows the ability to forward data packets the control plane allows the ability to route data correctly and the management plane allows the ability to manage network elements.

The following briefly describes the embodiments of the invention in order to provide a basic understanding of some aspects of the invention. This brief description is not intended as an extensive overview. It is not intended to identify key or critical elements or to delineate or otherwise narrow the scope. Its purpose is merely to present some concepts in a simplified form as a prelude to the more detailed description that is presented later.

Briefly stated embodiments are directed towards enabling a user to employ a scripting language to generate user customized instructions for use in selecting one or more network devices from a plurality of network devices to perform an action. Such user customized instructions are provided during a late binding with a traffic manager that exposes for access various control plane and or management plane metrics.

By performing such late binding with the traffic manager the user such as a system administrator is provided an ability to perform a variety of actions including but not limited to selecting a network device to which a request is sent selecting a set of network devices from a plurality of network devices for which a request is sent dropping the request for example when the metrics indicate that no network device is currently available to service the request delay the request pending availability of a network device and or modify the request and perform one or more of the actions noted above. Late binding user customized instructions are not limited to these non exhaustive non limiting examples and others may also be performed.

For ease of understanding a non limiting example of a possible late binding user algorithm is described below for managing persistence to a network device for client requests using an election hash mechanism. In one embodiment a traffic manager device TMD is interposed between client devices and a plurality of network devices. The plurality of network devices may be distributed among a plurality of different resource pools. However the plurality of network devices need not be distributed across resource pools and other configurations and arrangements may also be employed.

In one embodiment the network devices may operate as cache servers where content may be obtained from for example backend servers by the cache servers. In another embodiment the plurality of network devices may be configured to operate as intrusion detection devices application servers or even operate as backend servers.

When a request from a client device for a resource is intercepted by the TMD a user s late binding algorithm may be provided with various metrics useable to determine which network device to forward the request so as to manage persistence in resource requests and to further load balance the requests. Such determination may be performed by selecting from the plurality of resource pools where such resource pools are employed which resource pool of network devices to provide the request. In one embodiment the determination is performed by extracting request specific data from the request and using the extracted data to select a resource pool. Metrics about the resource pool may be made accessible to the user s late binding algorithm and include various control plane and or management plane metrics.

In one embodiment the selection may be based on a result of a modulo calculation on a hash of the request specific data. Such request specific data may include but is not limited to a Uniform Resource Identifier URI host name cookie identifier client identifier path name or the like.

A network device in the plurality of network devices associated with the selected resource pool may be elected based on an election hash. In one embodiment the election hash may be determined by generating a plurality of hash values based on combining the request specific data with an identifier for each respective network devices that is indicated as being available. In one embodiment the resulting hashes may be examined and the network device associated with a highest or lowest resulting hash may be elected. It should be noted that other schemes may also be employed for selecting a network device. For example late binding user customized instructions may be employed to select a network device randomly without departing from the scope of the invention. The request may then be sent to the elected network device.

In one embodiment the network devices may operate as an intrusion detection system IDS which may be configured to monitor network traffic to detect actions directed towards compromising a confidentiality integrity and or availability of a network resource. It may be desirable in such applications to mirror traffic from a client device and or responding server to the IDS. Thus in one embodiment the invention may be implemented to load balance and persist similar traffic requests responses and or the like to one of the plurality of network devices in the intrusion detection system. It should be clear however that the invention is not limited to this non exhaustive environment and others are also envisaged without departing from the scope of the invention. Moreover it should be noted that the invention is not limited to the above non limiting late binding actions and others are also possible.

As shown in the figure system includes client devices network traffic manager device TMD cache servers and backend services . Client devices communicate with TMD through network . TMD is in communication with cache servers which in turn are in communication with backend services . Although not illustrated a network substantially similar albeit different may be interposed between TMD and cache servers and or backend services . Although not illustrated TMD may also be in communication with backend services .

Generally client devices may include virtually any computing device capable of connecting to another computing device and receiving information. Such devices may also include portable devices such as cellular telephones smart phones display pagers radio frequency RF devices infrared IR devices Personal Digital Assistants PDAs handheld computers wearable computers tablet computers integrated devices combining one or more of the preceding devices and the like. Client devices may also include other computing devices typically considered to be non portable devices including but not limited to personal computers multiprocessor systems microprocessor based or programmable consumer electronics network devices and the like. As such client devices may range widely in terms of capabilities and features. For example a client device configured as a cell phone may have a numeric keypad and a few lines of monochrome LCD display on which only text may be displayed.

Client devices also may include at least one client application that is configured to send a request for content or other resource and to receive the requested content or other resource from another computing device such as from TMD cache servers and or backend services . The client application may include a capability to provide and receive textual content graphical content audio content alerts messages and the like. Moreover client devices may be further configured to communicate a message such as through a Short Message Service SMS Multimedia Message Service MMS instant messaging IM internet relay chat IRC mIRC Jabber and the like between another computing device and the like.

Moreover in one embodiment the request for content or other resource may include request specific data. Such request specific data may in one embodiment be classified as data from the data plane part of a telecommunications network. In one embodiment the request specific data may include information that uniquely identifies the requesting client device through any of a variety of mechanisms including a phone number Mobile Identification Number MIN an electronic serial number ESN a source network address a port number or other client device identifier. Request specific data may also include but is not limited to application layer data OSI layer 5 and or above including communication protocol information such as whether the request is an HTTP request or the like cookie information and the like. Request specific data might include information such as a URI being requested a path name to the requested resource or any of a variety of other data plane information.

In another example of client devices a web enabled client device may have a touch sensitive screen a stylus and several lines of color LCD display in which both text and graphics may be displayed. Moreover the web enabled client device may include a browser application enabled to receive and to send wireless application protocol messages WAP and or wired application messages and the like. In one embodiment the browser application is enabled to employ HyperText Markup Language HTML Dynamic HTML Handheld Device Markup Language HDML Wireless Markup Language WML WMLScript JavaScript EXtensible HTML xHTML Compact HTML CHTML and the like to display and send a message.

Network is configured to couple one computing device with another computing device. Network may be enabled to employ any form of computer readable media for communicating information from one electronic device to another. Also network can include the Internet in addition to local area networks LANs wide area networks WANs direct connections such as through a universal serial bus USB port other forms of computer readable media or any combination thereof. On an interconnected set of LANs including those based on differing architectures and protocols a router acts as a link between LANs enabling messages to be sent from one to another. Also communication links within LANs typically include twisted wire pair or coaxial cable while communication links between networks may utilize analog telephone lines full or fractional dedicated digital lines including T1 T2 T3 and T4 Integrated Services Digital Networks ISDNs Digital Subscriber Lines DSLs wireless links including satellite links or other communications links known to those skilled in the art. Furthermore remote computers and other related electronic devices could be remotely connected to either LANs or WANs via a modem and temporary telephone link.

Network may further include any of a variety of wireless sub networks that may further overlay stand alone ad hoc networks and the like to provide an infrastructure oriented connection. Such sub networks may include mesh networks Wireless LAN WLAN networks cellular networks and the like. Network may also include an autonomous system of terminals gateways routers and the like connected by wireless radio links and the like. These connectors may be configured to move freely and randomly and organize themselves arbitrarily such that the topology of network may change rapidly.

Network may further employ a plurality of access technologies including 2nd 2G 2.5 3rd 3G 4th 4G generation radio access for cellular systems WLAN Wireless Router WR mesh and the like. Access technologies such as 2G 3G and future access networks may enable wide area coverage for mobile devices with various degrees of mobility. For example network may enable a radio connection through a radio network access such as Global System for Mobile communication GSM General Packet Radio Services GPRS Enhanced Data GSM Environment EDGE Wideband Code Division Multiple Access WCDMA CDMA2000 Universal Mobile Telecommunications System UMTS and the like. In essence network may include virtually any wired and or wireless communication mechanisms by which information may travel between one computing device and another computing device network and the like.

Additionally communication media typically embodies computer readable instructions data structures program modules or other transport mechanism and includes any information delivery media. By way of example communication media includes wired media such as twisted pair coaxial cable fiber optics wave guides and other wired media and wireless media such as acoustic RF infrared and other wireless media.

One embodiment of TMD is described in more detail below in conjunction with . Briefly however TMD may include virtually any device that manages network traffic. Such devices include for example routers proxies firewalls load balancers cache devices devices that perform network address translation any combination of the preceding devices and the like. TMD may for example control the flow of data packets delivered to and forwarded from a plurality of network devices such as cache servers and or backend services . TMD may receive data packets from and transmit data packets to the Internet an intranet or a local area network accessible through another network. TMD may recognize packets that are part of the same communication flow and or stream and may perform special processing on such packets such as directing them to the same network device so that state information is maintained. TMD also may support a wide variety of network applications such as web browsing email telephony streaming multimedia and other traffic that is sent in packets. The BIG IP family of traffic managers by F5 Networks Inc. of Seattle Wash. are one example of TMDs. Moreover TMDs are described in more detail in U.S. Pat. No. 7 102 996 to Amdahl et al. entitled Method and System for Scaling Network Traffic Managers which is incorporated herein by reference.

In one embodiment TMD includes a traffic manager application that is configured to manage network traffic. Such application described in more detail below may enable a recipient end user such as an administrator or the like to install the application onto TMD and or to include a late binding user customized set of computer instructions for. The late binding instructions enable the administrator or the like to implement user customized instructions for managing network traffic using network metrics that the traffic manager may expose.

In one embodiment the late binding set of computer instructions may be implemented using various scripting languages. For example in one embodiment the instructions may be implemented using a rules based scripting mechanism such as provided by F5 Networks Inc. of Seattle Wash. Non exhaustive non limiting examples using such rules operating on network metrics are described in more detail in U.S. patent application Ser. No. 11 258 551 entitled Rule Based Extensible Authentication to Hughes et al. filed Oct. 24 2005 U.S. patent application Ser. No. 10 385 790 entitled Method And System For Managing Network Traffic to Richard Roderick Masters et al. filed Mar. 10 2003 and in U.S. patent application Ser. No. 10 719 375 entitled System And Method For Directing Network Traffic In Tunneling Applications to Bradfield et al. filed Nov. 21 2003 each of which are incorporated herein by reference.

TMD may receive a request from one of client devices that is to be directed to one of backend services . TMD may inspect the request to extract any request specific data. In one embodiment TMD might use an inspection engine component to perform deep packet inspection of data at an Open Systems Interconnection OSI layer 5 and or above to detect the request specific data. In one embodiment the inspection engine component may employ an Application Programming Interface API or the like to enable selection and extraction of various request specific data. However request specific data is not constrained to layers 5 or above and other layers may also be inspected to obtain additional request specific data.

TMD may then enable in one embodiment the traffic manager to manage the traffic. Alternatively TMD may enable the user customized late binding instructions to manipulate traffic flowing through TMD . For example in one embodiment the user customized late binding instructions might be employed to perform an election hash mechanism as described further below to select a cache server to forward the request. By employing the election hash mechanism TMD may manage persistence of communications with a selected cache server while managing load balancing of requests across a plurality of cache servers. In one embodiment the request specific data is related to requested content. By employing content request data to manage load balancing and persistence rather than a connection per se TMD may improve a use of cache servers. This is because cache servers typically are configured to manage temporary storage of content independent of which client device might request the content. Thus by persisting requests based on content the election hash mechanism may improve management of cache servers over for example approaches based on connections or the like. In any event TMD may employ a process such as described below in conjunction with to perform one embodiment of an election hash mechanism.

Devices that may operate as TMD include but are not limited to personal computers desktop computers multiprocessor systems microprocessor based or programmable consumer electronics network PCs servers or the like.

Cache servers include virtually any network device that may be configured to retrieve content from another computing device such as backend services for use in responding to a request from client devices . Cache servers may employ any of a variety of mechanisms to retrieve and temporarily store the content for rapid access. Cache servers might receive a request for content through TMD . The cache server receiving the request may examine its storage to determine if the requested content is locatable within the cache server and or whether the located content is considered to be valid and or fresh. If the cache server is unable to locate valid and or fresh content being requested the cache server may employ any of a variety of mechanisms to request the content from one of backend services . The cache server responding to the request may in one embodiment purge invalid content stale content and or the like and replace such requested content with valid fresh content.

In one embodiment cache servers may be configured to communicate with one or more different backend services . In one embodiment however cache servers might be configured to be dedicated to one or more backend services such that each cache sever does not access each backend service . However due to a variety of reasons one or more of cache servers may be replaced added deleted or the like.

Each cache server may be identified by a network identifier. As shown in a non exhaustive example cache servers may be identified by a network address such as 172.29.4.53 or the like. However the invention is not limited to this type of network identifiers and others may also be employed to identify a cache server including but not limited to an IP address port number combination a URI an alias or the like.

Devices that may operate as cache servers include but are not limited to personal computers desktop computers multiprocessor systems microprocessor based or programmable consumer electronics network PCs servers or the like.

Backend services may include any computing device capable of communicating packets over a network in response to a request. Each packet may convey a piece of information. A packet may be sent for handshaking i.e. to establish a connection or to acknowledge receipt of data. The packet may include information such as a request a response or the like. Generally packets received by backend services will be formatted according to TCP IP but they could also be formatted using another transport protocol such as SCTP X.25 NetBEUI IPX SPX token ring similar IPv4 6 protocols and the like. Moreover the packets may be communicated between backend services and cache servers and or TMD and or client devices employing HTTP HTTPS and the like.

In one embodiment backend services are configured to operate as website servers. However backend services are not limited to web servers and may also operate a messaging server a File Transfer Protocol FTP server a database server content server and the like. Additionally each of backend services may be configured to perform a different operation. Thus for example back end service may be configured as a messaging server while back end service is configured as a database server. Moreover while backend services may operate as other than websites they may still be enabled to receive an HTTP communication.

Devices that may operate as backend services include personal computers desktop computers multiprocessor systems microprocessor based or programmable consumer electronics network PCs servers and the like.

As shown in the figure system includes client devices network traffic manager device TMD and resource pools . Resource pool includes network devices resource pool includes network devices and resource pool includes network devices .

Client devices network and TMD operate substantially the same as client devices network and TMD respectively of . In one embodiment network devices may be configured to operate as cache servers substantially similar to cache servers of . However the invention is not so limited and network devices may also be configured to operate as backend services such as backend services as application servers or any of a variety of other computing devices configured to provide a response to a client request. As such network devices may be implemented using without limit personal computers desktop computers multiprocessor systems microprocessor based or programmable consumer electronics network PCs servers and the like.

As shown resource pools may provide one or a variety of mechanisms for managing a plurality of network devices. Resource pools may include a different number or a same number of network devices as well as a different or a same type of network device. For example in one embodiment network devices may be distributed among the resource pools based on varying disk and or processor capacity. For instance resource pool might include network devices configured with larger disk capacity and or faster processors than network devices in resource pool or the like. Clearly the invention is not limited by this non exhaustive example and other distribution schemes may also be employed. Including but not limited for example to distributing network devices randomly among resource pools . In any event in one embodiment resource pools may be identified over a network using any of a variety of mechanisms including but not limited to a port number a unique pool identifier or the like.

System of may include more or less components that are illustrated. System of illustrates a plurality of network devices and an intrusion detection system that includes a plurality of network devices . System further includes client devices network and TMD which operate substantially the same as client devices network and TMD respectively of .

IDS may be configured with network devices that monitor network traffic through TMD for possible security violations including but not limited to potential and or actual compromises to confidentiality integrity and or availability of a network resource such as network devices TMD or the like. As such there may be a desire to load balance and persist communications among the network devices within intrusion detection system IDS while also load balancing and persisting requests among network devices . In one embodiment it may be desirable to persist communications to a same network device within IDS based on a content requested as well as a client device making the request a traffic type or the like. Such monitoring of network activities by network devices might be performed using a mirroring of network traffic through TMD . However the invention is not so limited. For example in another embodiment TMD might divert each communication from client device and or network devices to IDS before forwarding the communications to a destination. In any event TMD may employ an election hash mechanism as described herein to direct requests and or other communications to IDS based on request specific data. TMD may also route requests to one or network devices using request specific data.

In one embodiment the request specific data used to route requests to IDS versus to network devices may be different. In another embodiment the request specific data may be the same. Request specific data may include but is not limited to content request data that may be obtained by a packet inspection at or above layer 5 of the OSI layered stack. For example the request specific data might include but is not limited to URI data cookie information a path name an application name a request protocol type or the like. In another embodiment the request specific data might also include information about a client device such as a client identifier source address port number or the like. In any event TMD of may employ a process substantially similar to process described below in conjunction with .

In one embodiment network devices may operate as cache servers backend services or the like. In one embodiment although not illustrated network devices may be in communication with one or more other network devices such as the arrangement illustrated in .

Network device includes at least one central processing unit CPU video display adapter and a mass memory all in communication with each other via bus . The mass memory generally includes RAM ROM and one or more permanent mass storage devices such as hard disk drive tape drive optical drive and or floppy disk drive. The mass memory stores operating system for controlling the operation of network device .

As illustrated in network device also can communicate with the Internet or some other communications network via network interface unit which is constructed for use with various communication protocols including the IP protocol. Network interface unit is sometimes known as a transceiver transceiving device or network interface card NIC .

The mass memory and described herein and shown in illustrates another type of computer readable storage media namely computer readable machine readable or processor readable storage media. Computer readable storage media may include volatile nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions or machine readable instructions data structures program modules or other data which may be obtained and or executed by at least one central processing unit to perform one or more portions of the processes described below in more detail in conjunction with . Examples of computer readable storage media include RAM ROM EEPROM flash memory or other memory technology CD ROM digital versatile disks DVD or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information including data and or computer executable instructions and which can be accessed by a computing device.

The mass memory may also store other types of program code and data as applications which may be are loaded into mass memory and run on operating system . Examples of application may include email client server programs routing programs schedulers web servers calendars database programs word processing programs HTTP programs RTSP programs security programs and any other type of application program. Applications may also include traffic manager . In one embodiment traffic manager may include LBUI . However the invention is not so limited. For example in another embodiment LBUI may be configured as a separate component from traffic manager .

In one embodiment ram may include data store however data store may also reside completely or in part in another mass memory storage media including but not limited to a storage device readable by cd rom dvd rom drive on hard disk drive or even on a computer readable storage medium on another network device and possibly accessible by network device through such as network interface unit .

Data store may include virtually any mechanism configured and arranged to store data and or computer readable instructions. As such data store may be configured to store and or otherwise manage data associated with information about configurations of a plurality of network devices a plurality of resource pools intrusion detection systems or the like.

Traffic manager is configured and arranged to include any component configured to manage network traffic between network devices. In one embodiment traffic manager may receive messages in the form of network packets. In one embodiment the message may span multiple packets. In such instance traffic manager is configured to recognize packets that are associated with each other and to manage the packets as a flow of related packets.

In one embodiment traffic manager might employ provide a variety of decisions useable for managing the flow of traffic. For example traffic manager may direct a request for a resource based on network traffic network topology capacity of a server content requested a round robin approach and or a host of other load balancing mechanisms.

However in another embodiment traffic manager might include as part of a late binding mechanism Late Binding User Instructions LBUI that may be configured to receive various network metrics that are exposed for use by traffic manager . Such network metrics may be control plane metrics and or management plane metrics. Control plane metrics that may be exposed for use by LBUI include but are not limited to status of a network device such as whether it is able to service requests or not number of connections currently being serviced by a network device percent of connections closed abnormally or normally in a given time period a round trip time measurement that may be based on previous connections to a network device or the like. Management plane metrics that may be exposed for use by LBUI include but are not limited to an IP address and or service port of a network device or other unique identifier whether sending requests to a network device is enabled or disabled a desired ratio of requests for a network device a maximum number of concurrent connections allowed to be serviced by a network device or the like.

Exposure of the various network metrics may be performed using a variety of mechanisms. For example in one embodiment traffic manager may collect and or calculate the various network metrics and then expose them to LBUI through an Application Programming Interface API . In another embodiment traffic manager may expose the network metrics by providing them in a table a shared memory location or the like. Such network metrics are typically not provided to applications beyond traffic manager . Thus traffic manager is configured to expose such metrics which might not otherwise be made accessible to LBUI .

LBUI may employ such metrics as well as others along with data plane data to perform some action. As a non limiting example LBUI may be configured LBUI to manage load balancing of a plurality of network devices using an election hash. LBUI may examine requests for content from a client device and extract application layer data as well as other data useable as request specific data. In one embodiment LBUI may perform deep packet inspections using an inspection engine component or the like to extract data from a request. LBUI may select the extracted data based on a type of network device the request is to be forwarded. For example where the network device is an intrusion detection network device LBUI might include in the request specific data data about the client address source address or the like. Where the request is to be sent to a cache server device LBUI might select to exclude client specific data such as a client address source address or the like in the request specific data. Thus in one embodiment the request specific data might vary as a function of a network device being load balanced for persistence.

LBUI may combine the request specific data with each of a plurality of network device identifiers to generate a plurality of hash values where such network device identifiers may represent one example of network metrics exposed by traffic manager . LBUI may employ any of a variety of hashing functions to generate the hash values including but not limited to Message Digest MD algorithms including but not limited to MD 2 MD 5 Secure Hash Algorithm SHA hash tables or the like as well as cyclic redundancy check CRC algorithms such as CRC 32 or the like.

LBUI may compare the resulting hash values and elect an associated network device based on the comparison. For example LBUI might elect an associated network device having a highest largest resulting hash value. However in another embodiment LBUI might elect an associated network device having a lowest smallest resulting hash value. LBUI might then direct traffic manager to forward the request to the elected network device.

Where the plurality of network devices may be distributed across a plurality of resource pools LBUI may employ the request specific data to select a resource pool from which to then elect a network device. For example in one embodiment LBUI might perform a hash and modulo calculation on the request specific data. A result of the calculation might then be employed to select the resource pool. However the invention is not so limited and other hashing mechanisms might also be used to select the resource pool. For example a hash of a combination of the request specific data and a resource pool identifier might be performed for each resource pool in the plurality of resource pools. Then the results may be compared and a highest or lowest resulting value might then be used to identify a plurality of associated network devices for which a network device may then be elected from. However LBUI may also be used to select a network device based on a variety of other criteria and therefore is not restricted to those described above. For example in one embodiment LBUI might randomly select a network device for which to service a request from a client device.

Although LBUI is illustrated as a component within traffic manager the invention is not so limited. For example LBUI might be a distinct component from traffic manger that is executed distinct from traffic manager as appropriate to perform user customized actions in response to a request for a resource.

Network device may also include an SMTP handler application for transmitting and receiving e mail an HTTP handler application for receiving and handing HTTP requests a RTP handler application for receiving and handing RTP requests an SIP requests and or responses and an HTTPS handler application for handling secure connections. The HTTPS handler application may initiate communication with an external application in a secure fashion. Moreover network device may further include applications that support virtually any secure connection including TLS TTLS EAP SSL IPSec and the like.

Network device may also include input output interface for communicating with external devices such as a mouse keyboard scanner or other input output devices not shown in . Likewise network device may further include additional mass storage facilities such as cd rom dvd rom drive and hard disk drive . Hard disk drive may be utilized to store among other things application programs databases and the like in the same manner as the other mass memory components described above.

In one embodiment the network device may include at least one Application Specific Integrated Circuit ASIC chip not shown . The ASIC chip can include logic that performs some or all of the actions of network device . For example in one embodiment the ASIC chip can perform a number of packet processing functions for incoming and or outgoing packets. In one embodiment the ASIC chip can perform at least a portion of the logic to enable the operation of traffic manager LBUI or any other components.

In one embodiment network device can further include one or more field programmable gate arrays FPGA not shown instead of or in addition to the ASIC chip. A number of functions of network device can be performed by the ASIC chip the FPGA by CPU with instructions stored in memory or by any combination of the ASIC chip FPGA and a CPU.

The operation of certain aspects of the invention will now be described with respect to and . illustrates a logical flow diagram generally showing one embodiment of a process for selectively providing a request to a network device using a late binding user customized set of instructions and exposed network metrics.

Process of begins after a start block at block where a user s customized set of instructions useable for managing responses to a request for a resource may be implemented using a late binding mechanism. That is at some late stage after implementing a traffic manager application that exposes selective network metrics the user may bind a set of instructions.

Processing flows next to block where a request for a resource is received. For example a client device such as client devices of may send over network a request for a resource. The resource might be for example a web page a document access to an application or the like.

Processing continues next to block where request specific data may be extracted from the request. In one embodiment a deep packet inspection might be performed on the request packet s to obtain various data plane request specific data.

Flowing next to block a list of network devices are provided to the user customized late binding instructions. In one embodiment such list might be included as part of a set of exposed management plane network metrics. Continuing next to block various other network metrics including various control plane and or management plane data are exposed for use by the user s customized late binding set of instructions.

Process continues to block where the user s customized instructions may then selects one or more of the exposed network metrics to perform an analysis for managing the request. Continuing to block the user s instructions then based on the analysis selectively provides the request to zero or more network devices. Processing then returns to a calling process to perform other actins.

As may be seen process provides a general overview process for managing requests for a resource through late binding instructions using exposed network metrics. However more specific although non limiting examples are provided next.

Thus illustrates a logical flow diagram generally showing one embodiment of a process for electing a network device to manage a request based on using an election hash. Process of may be implemented within TMD of . illustrates a non exhaustive example of employing a user s late binding customized set of instructions to perform election hashing. In this instance the management plane data employed includes network addresses of the network devices while the exposed network metrics include a list of available network devices and their unique identifiers.

Process begins after a start block at block where a request for content is received. Processing flows next to block where request specific data is extracted from the request. In one embodiment a deep packet inspection might be performed to extract the request specific data. In one embodiment the request specific data is extracted based on a type network device for which the request is to be forwarded such as described above.

Processing continues to block where a plurality of hash values is determined based on a combination of the request specific data with each of a plurality of network device identifiers e.g. management plane data . In one embodiment the network device identifiers are network device IP addresses. However the invention is not so limited and other identifiers and or other management plane and or control plane data may also be used. In one embodiment the request specific data may be combined with the network device identifiers may concatenating the data and identifiers. However other mechanisms for combining the data and identifiers may also be used including without limit exclusive or ing the data with the identifiers algorithmically summing the data with the identifiers or the like.

Process flows next to block where a target network device may then be elected based on a comparison of the resulting hash values. In one embodiment the network device with a highest or lowest hash value might be elected. However other election mechanisms may also be used without departing from the scope of the invention. Processing then flows to block where the request is forwarded to the elected network device. Process then returns to a calling process to perform other actions.

Then in one embodiment process begins after a start block at block where a request for a resource is received from a client device. Processing continues next to block where request specific data is extracted from the request substantially similar to block of process described above.

Processing continues to block where a pool selector value is generated based on a modulo of a hash of the request specific data. That is in one embodiment the request specific data might be hashed. Then for example where the number of resource pools are ten or less a modulo calculation may be performed on the hash value to generate a value from zero to nine. The resource pool associated with the resulting pool selector value may then be used to provide a plurality of network devices from which election hashing as described above in process may then be applied.

However the invention is not limited to the above approach and other mechanisms may also be applied to select the resource pool of network devices. For example in another embodiment the election hashing approach might be applied to elect the resource pool at block . That is the request specific data might be combined with each of the plurality of resource pool identifiers. A comparison may then be made of resulting hashes for the combinations and based on the comparison one of the resource pools may be elected.

In any event processing flows to block where the plurality of network devices for the selected resource pool are then used to elect the network device for which the request is to be sent. Thus in one embodiment the network device identifiers for each of the network devices in the plurality may be obtained.

Processing continues to block where hash values are obtained from the combination of the request specific data with each of the plurality of network device identifies as described above in process .

Process continues to block where based on the resulting hash values one of the network devices within the selected resource pool is elected and flowing to block the request is sent to the elected network device. Processing then returns to a calling process to perform other actions.

It will be understood that each block of the flowchart illustration and combinations of blocks in the flowchart illustration can be implemented by computer program instructions. These program instructions may be provided to a processor to produce a machine such that the instructions which execute on the processor create means for implementing the actions specified in the flowchart block or blocks. The computer program instructions may be executed by a processor to cause a series of operational steps to be performed by the processor to produce a computer implemented process such that the instructions which execute on the processor to provide steps for implementing the actions specified in the flowchart block or blocks.

Accordingly blocks of the flowchart illustration support combinations of means for performing the specified actions combinations of steps for performing the specified actions and program instruction means for performing the specified actions. It will also be understood that each block of the flowchart illustration and combinations of blocks in the flowchart illustration can be implemented by special purpose hardware based systems which perform the specified actions or steps or combinations of special purpose hardware and computer instructions.

As shown in example A of five network identifiers A are illustrated. Columns A A represent hash value results based on different request specific data. As shown for illustrative purposes the request specific data in A include URL1 URL2 URL3 and URL4. As described above a hash may be performed on the combination of the request specific data with each of the five network identifiers. Illustrative hash value results are shown for URL1 as 8 2 7 and 4 for each of the respective five network identifiers A. Similar illustrative hash value results are shown for URL2 URL3 and URL4.

As may be seen a given network device will always attain a same score for a unique request specific data regardless of its order within the list of network devices. This calculation may be performed for every network device with the plurality of available network devices using the unique network identifier and request specific data with the request from the client device being sent to the elected network device based on a comparison of the hash results. Thus as shown in example A the request for URL1 would go to the first network device identifier 172.29.4.53 while the request for URL2 would go to the second network device identifier 172.29.4.54 the request for URL3 would go to the third network device identifier 172.29.4.55 and the request for URL4 would go to the fourth network device identifier 172.29.4.56 .

As seen in example B the first network device identifier 172.29.4.53 is removed from the plurality of available network devices. However the calculation need not change so that each remaining network device would still obtain the same hash value results. The request for URL1 however can not be won by the now removed first network device identifier 172.29.4.53 so the next highest hash value from the third network device identifier 172.29.4.55 would receive the request. Thus the only traffic shift in requests occurs based on requests that were sent previously to the now removed first network device. Requests for the other request specific data remain unaffected by the change in the available network device. Such actions are directed towards minimizing disruptions in network devices rippling through all of the remaining network devices.

Similarly as shown in example C when a new network device is added to the plurality of network devices it too may then participate in the election system. As seen the new network device might assume request specific requests for which its hash wins. As may be seen such election hashing approach may readily scale almost infinitely to a number of unique requests that can be made by a client device. Further membership to a plurality of network devices may change by adding removing enabling and or disabling a network device with minimum effect on the remaining network devices other than the assumption of relinquishment of its portion of network traffic.

The above specification examples and data provide a complete description of the manufacture and use of the composition of the invention. Since many embodiments of the invention can be made without departing from the spirit and scope of the invention the invention resides in the claims hereinafter appended.

