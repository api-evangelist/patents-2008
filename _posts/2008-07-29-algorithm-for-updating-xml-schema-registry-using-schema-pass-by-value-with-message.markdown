---

title: Algorithm for updating XML schema registry using schema pass by value with message
abstract: Schema information is provided with transmission of a data object. When a data object is converted to a transmission format, schema information for the object type is added to the transmission format element. The unmarshalling code uses the schema information to update a schema registry at the receiving end. The schema registry may then be used as a tool for converting the transmission format element back to the data element. The next time an object of that object type is sent to the recipient, the schema information is not added to the transmission format element.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09448812&OS=09448812&RS=09448812
owner: International Business Machines Corporation
number: 09448812
owner_city: Armonk
owner_country: US
publication_date: 20080729
---
This application is a continuation of application Ser. No. 11 134 494 filed May 20 2005 status allowed.

The present invention relates generally to transmission of data objects and more particularly to marshalling and unmarshalling extensible markup language schemas to a business object model framework.

Developers use frameworks for application development. These frameworks typically include an architecture and an application programming interface API . Java 2 Platform Enterprise Edition J2EE is an example framework from Sun Microsystems for building distributed enterprise applications. J2EE services are performed in a middle tier between a user s machine and the enterprise s databases and legacy information systems.

When a data object in an application framework is transmitted from a sending device to a receiving device the object is typically converted into a transmission format. The transmission format may be in a binary format or a text format. However converting a data object from one format to another and then reconverting the information back to the original format can be a difficult task. The sending code must include instructions for converting the data object to the transmission format and the receiving code must include instructions for rebuilding the object.

Currently when a developer is writing code for sending and or receiving a data object the developer must re invent the code for converting to and from the transmission format based on the specific type and structure of the data object. More specifically the receiving code will expect certain object types and structures. If the receiving code receives a new object type the receiving code will not know how to rebuild the data object.

The present invention recognizes the disadvantages of the prior art and provides schema information with transmission of a data object. When a data object is converted to a transmission format schema information for the object type is added to the transmission format element. The unmarshalling code uses the schema information to update a schema registry at the receiving end. The schema registry may then be used as a tool for converting the transmission format element back to the data element. The next time an object of that object type is sent to the recipient the schema information is not added to the transmission format element.

With reference now to the figures depicts a pictorial representation of a network of data processing systems in which aspects of the present invention may be implemented. Network data processing system is a network of computers in which embodiments of the present invention may be implemented. Network data processing system contains a network which is the medium used to provide communications links between various devices and computers connected together within network data processing system . Network may include connections such as wire wireless communication links or fiber optic cables.

In the depicted example servers connect to network along with storage unit . In addition clients connect to network . These clients may be for example personal computers or network computers. In the depicted example server for instance may provide data such as boot files operating system images and applications to clients . Clients are clients to server in the example. Network data processing system may include additional servers clients and other devices not shown.

In the depicted example network data processing system is the Internet with network representing a worldwide collection of networks and gateways that use the Transmission Control Protocol Internet Protocol TCP IP suite of protocols to communicate with one another. At the heart of the Internet is a backbone of high speed data communication lines between major nodes or host computers consisting of thousands of commercial government educational and other computer systems that route data and messages. Of course network data processing system also may be implemented as a number of different types of networks such as for example an intranet a local area network LAN or a wide area network WAN . is intended as an example and not as an architectural limitation for different embodiments of the present invention.

Referring to a block diagram of a data processing system that may be implemented as a server such as server in is depicted in accordance with an illustrative embodiment of the present invention. Data processing system may be a symmetric multiprocessor SMP system including a plurality of processors and that connect to system bus . Alternatively a single processor system may be employed. Also connected to system bus is memory controller cache which provides an interface to local memory . I O bus bridge connects to system bus and provides an interface to I O bus . Memory controller cache and I O bus bridge may be integrated as depicted.

Peripheral component interconnect PCI bus bridge connects to I O bus provides an interface to PCI local bus . A number of modems may be connected to PCI local bus . Typical PCI bus implementations will support four PCI expansion slots or add in connectors. Communications links to clients in or other servers may be provided through modem and network adapter connected to PCI local bus through add in connectors.

Additional PCI bus bridges and provide interfaces for additional PCI local buses and from which additional modems or network adapters may be supported. In this manner data processing system allows connections to multiple network computers. A memory mapped graphics adapter and hard disk may also be connected to I O bus as depicted either directly or indirectly.

Those of ordinary skill in the art will appreciate that the hardware depicted in may vary. For example other peripheral devices such as optical disk drives and the like also may be used in addition to or in place of the hardware depicted. The depicted example is not meant to imply architectural limitations with respect to the present invention.

The data processing system depicted in may be for example an IBM eServer pSeries computer system running the Advanced Interactive Executive AIX operating system or LINUX operating system eServer pSeries and AIX are trademarks of International Business Machines Corporation in the United States other countries or both while Linux is a trademark of Linus Torvalds in the United States other countries or both .

With reference now to a block diagram of a data processing system is shown in which aspects of the present invention may be implemented. Data processing system is an example of a computer such as client in in which code or instructions implementing the processes for embodiments of the present invention may be located. In the depicted example data processing system employs a hub architecture including a north bridge and memory controller hub MCH and a south bridge and input output I O controller hub ICH . Processor main memory and graphics processor are connected to MCH . Graphics processor may be connected to the MCH through an accelerated graphics port AGP for example.

In the depicted example local area network LAN adapter audio adapter keyboard and mouse adapter modem read only memory ROM hard disk drive HDD CD ROM drive universal serial bus USB ports and other communications ports and PCI PCIe devices connect to ICH . PCI PCIe devices may include for example Ethernet adapters add in cards PC cards for notebook computers etc. PCI uses a card bus controller while PCIe does not. ROM may be for example a flash binary input output system BIOS . Hard disk drive and CD ROM drive may use for example an integrated drive electronics IDE or serial advanced technology attachment SATA interface. A super I O SIO device may be connected to ICH .

An operating system runs on processor and coordinates and provides control of various components within data processing system in . The operating system may be a commercially available operating system such as Microsoft Windows XP Microsoft and Windows are trademarks of Microsoft Corporation in the United States other countries or both . An object oriented programming system such as the Java programming system may run in conjunction with the operating system and provides calls to the operating system from Java programs or applications executing on data processing system Java is a trademark of Sun Microsystems Inc. in the United States other countries or both .

Instructions for the operating system the object oriented programming system and applications or programs are located on storage devices such as hard disk drive and may be loaded into main memory for execution by processor . The processes for embodiments of the present invention are performed by processor using computer implemented instructions which may be located in a memory such as for example main memory memory or in one or more peripheral devices and . These processes may be executed by any processing unit which may contain one or more processors.

Those of ordinary skill in the art will appreciate that the hardware in may vary depending on the implementation. Other internal hardware or peripheral devices such as flash memory equivalent non volatile memory or optical disk drives and the like may be used in addition to or in place of the hardware depicted in . Also the processes of the present invention may be applied to a multiprocessor data processing system.

As some illustrative examples data processing system may be a personal digital assistant PDA which is configured with flash memory to provide non volatile memory for storing operating system files and or user generated data.

A bus system may be comprised of one or more buses such as system bus I O bus and PCI buses and as shown in . Of course the buss system may be implemented using any type of communications fabric or architecture that provides for a transfer of data between different components or devices attached to the fabric or architecture. A communications unit may include one or more devices used to transmit and receive data such as modem or network adapter of or modem or LAN of . A memory may be for example local memory or cache such as found in memory controller cache of or main memory of . A processing unit may include one or more processors or CPUs such as processor or processor of or processor of . The depicted examples in and above described examples are not meant to imply architectural limitations. For example data processing system also may be a tablet computer laptop computer or telephone device in addition to taking the form of a PDA.

Returning to clients and server may implement a Java programming environment such as the J2EE platform. More specifically in an exemplary embodiment clients and server may implement a service data object SDO framework which includes an architecture and an application programming interface API . SDO simplifies the J2EE data programming model and incorporates J2EE patterns and best practices. SDO also abstracts data in a service oriented architecture unifies data application development and supports and integrates extensible markup language XML .

XML is becoming ubiquitous in distributed applications. XML schema may be used to define business rules in an application s data format. XML itself may be used to facilitate interaction. For this reason XML is often used as the transmission format for transmitting data objects from one application to another.

SDO clients use the SDO framework to work with data. Instead of using technology specific APIs and frameworks the SDO clients use the SDO programming model and API. SDO clients work on SDO data graphs and do not need to know how the data they are working with is persisted or serialized.

Data objects are the fundamental component of SDO as represented in the name of the Service Data Objects framework specification itself. Data objects are the representation of structured data. SDO data objects are generic and provide a common view of structured data built by a data management system. While a Java Database Connectivity JDBC data management system for instance needs to know about the persistence technology and how to configure and access it a SDO client need not know anything about the specific technology. SDO data objects hold their data in properties and provide convenient creation and deletion methods and reflective methods to get their types. SDO data objects are linked together and contained in data graphs. Data graphs provide a container for a tree of SDO data objects.

In accordance with exemplary aspects of the present invention the sending code marshals or serializes the data object as XML into XML schema. The sending code adds XML schema information for the data object. The receiving code then extracts the XML schema information in the XML and uses this schema information to build the data object on the receiving end.

With reference to a diagram illustrating marshaling and unmarshalling of a data object is shown in accordance with exemplary aspects of the present invention. Data object is serialized by marshaling code into transmission format . Data object may be for example a SDO data object a J2EE data object or a data object in any other application programming framework. Marshaling code may be for example a SDO API however marshaling code may be any code that transmits data object over a network software or other communication channel. Also transmission format may be XML although other transmission formats may be used depending upon the implementation such as other text formats or binary format.

When marshaling code serializes data object schema registry may be consulted to determine the schema for serializing the data object. Marshaling code also adds the schema information for the object type to transmission format . The next time an object of that type is sent to the recipient the schema information need not be added.

Unmarshaling code at the receiving end receives transmission format with the schema information . Unmarshaling code may then add the schema information to schema repository . In this way unmarshalling code builds the schema repository as data objects are received. Unmarshaling code may then use the schema information or schema information in repository to deserialize transmission format to form data object . Thus unmarshalling code at the receiving end need not know ahead of time the specific schema used to serialize the data object.

When application sends a SDO data object to application SDO API determines whether it is the first time a data object of that object type has been sent to application . If it is the first time SDO API adds the XML schema information to the XML. If it is not the first time the object type has been sent to application then SDO API may not add the type information to XML .

The XML schema for a data object may include schema information for that object type however the schema may also include further schema information. illustrates an example objects graph with corresponding schema in accordance with exemplary aspects of the present invention. In this example EObject2serialize is of the type EClass2. Also EObject2serialize contains EObject21. EObject21 is of the type EClass21. Therefore when adding the schema information the marshaling code will not only serialize EClass2 but will also serialize EClass21.

In addition a schema may extend from super schemas such as Super1 and Super2 and may contain properties whose types are also schema. Therefore when serializing EClass2 the marshaling code may also serialize Super1 and Super2. Furthermore EClass2 has properties of EAttribute1 and EReference1. EAttribute1 is of type EDataType1 and EReference1 is of type EClass1.

Thus the marshaling code may serialize the schema for super schemas and also for object properties. However when a schema has already been sent with a previous data object the marshaling code need not serialize the schema. For example if a first object and a second object belong to the same super schema the super schema may be sent only once with the first object but the schema for the object type of the second object may be sent with the second object without the super schema.

The marshaling code may also serialize the scope of a schema. illustrates an example of scoping for schema of data objects in accordance with exemplary aspects of the present invention. During schema deserialization the unmarshalling code updates the schema registry according to the scopes. If the scoping on the deserialization end is different from the serialization end the unmarshalling code tries to map the scoping from the bottom up.

An overall registry may be composed of several registries each corresponding to a scope. The registries are organized in a hierarchy as defined by the scoping. As shown in the registry is composed of SystemScope UtilityScope Web1scope ApplicationScope and EjbScope.

UtilityScope and ApplicationScope are children of SystemScope. Schemas within SystemScope are visible or available to UtilityScope and ApplicationScope. Similarly Web1scope is a child of UtilityScope. When in Web1scope the schemas in UtilityScope and SystemScope are visible. EjbScope is a child of ApplicationScope and schemas in ApplicationScope and SystemScope are visible to EjbScope. However schemas in Web1scope are not available to EjbScope.

In the depicted example SystemScope UtilityScope and ApplicationScope are mapped to SuperScope on the receiving end. Also as depicted in the example shown in Web1scope and EjbScope are mapped to ExtendingScope. As an example if a schema from UtilityScope is sent from the sending application to the receiving application the schema is placed in SuperScope. As a further example if a schema from EjbScope is sent from the sending application to the receiving application the schema is placed in ExtendingScope.

Next the marshaling code determines whether the object type has been transmitted before block . If the object type has not been transmitted before the marshaling code adds schema information to the transmission format element block . Thereafter the marshaling code transmits the transmission format element to the recipient block and operation ends. If the object type has been transmitted before operation proceeds directly to block to transmit the transmission format element to the recipient.

Next the unmarshalling code stores the schema information in a schema registry block and converts the transmission format element into a data object based on the schema information in the schema registry block . Thereafter operation ends.

If the object type has been received before the unmarshalling code proceeds directly to block to convert the transmission format element into a data object based on the schema information in the schema registry. Thereafter operation ends.

Thus the present invention solves the disadvantages of the prior art by providing schema information with transmission of a data object. When a data object is converted to a transmission format schema information for the data object is added to the transmission format element. The unmarshalling code uses the schema information for converting the transmission format element back to the data element. The unmarshalling code also uses the schema information to update a schema registry. As the unmarshalling code receives new data object types the schema registry is built and the necessity for adding schema information to the transmission format elements decreases.

The invention can take the form of an entirely hardware embodiment an entirely software embodiment or an embodiment containing both hardware and software elements. In a preferred embodiment the invention is implemented in software which includes but is not limited to firmware resident software microcode etc.

Furthermore the invention can take the form of a computer program product accessible from a computer usable or computer readable medium providing program code for use by or in connection with a computer or any instruction execution system. For the purposes of this description a computer usable or computer readable medium can be any apparatus that can contain store communicate propagate or transport the program for use by or in connection with the instruction execution system apparatus or device.

The medium can be an electronic magnetic optical electromagnetic infrared or semiconductor system or apparatus or device or a propagation medium. Examples of a computer readable medium include a semiconductor or solid state memory magnetic tape a removable computer diskette a random access memory RAM a read only memory ROM a rigid magnetic disk and an optical disk. Current examples of optical disks include compact disk read only memory CD ROM compact disk read write CD R W and DVD.

A data processing system suitable for storing and or executing program code will include at least one processor coupled directly or indirectly to memory elements through a system bus. The memory elements can include local memory employed during actual execution of the program code bulk storage and cache memories which provide temporary storage of at least some program code in order to reduce the number of times code must be retrieved from bulk storage during execution.

Input output or I O devices including but not limited to keyboards displays pointing devices etc. can be coupled to the system either directly or through intervening I O controllers.

Network adapters may also be coupled to the system to enable the data processing system to become coupled to other data processing systems or remote printers or storage devices through intervening private or public networks. Modems cable modem and Ethernet cards are just a few of the currently available types of network adapters.

The description of the present invention has been presented for purposes of illustration and description and is not intended to be exhaustive or limited to the invention in the form disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art. The embodiment was chosen and described in order to best explain the principles of the invention the practical application and to enable others of ordinary skill in the art to understand the invention for various embodiments with various modifications as are suited to the particular use contemplated.

