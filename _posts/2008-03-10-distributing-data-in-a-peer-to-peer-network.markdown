---

title: Distributing data in a peer to peer network
abstract: A system and method for data distribution is disclosed. A bulletin board is employed to maintain a list of requests from nodes in the system. The requests indicate data requested and identify the node making the request. Nodes are able to post requests for data as long as they maintain a minimum performance level. Additionally, the nodes periodically check in with the bulletin board and receive the list of requests from the bulletin board. On determining to satisfy a particular request by a node, the node (serving node) contacts a requesting node (identified in the request) and transfers the requested data to the requesting node. After successful completion of the transfer, the requesting node reports to the bulletin board that the node has filled the request and the request is removed from the list of requests.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07734678&OS=07734678&RS=07734678
owner: Microsoft Corporation
number: 07734678
owner_city: Redmond
owner_country: US
publication_date: 20080310
---
This application is a continuation of U.S. patent application Ser. No. 10 161 428 filed Jun. 3 2002 and entitled PEER TO PEER NETWORK the entirety of which is incorporated herein by reference.

The present invention relates generally to distributing data and more particularly to systems and methods for distributing data in a peer to peer network.

A peer to peer network is a network of two or more computers that employ a same program or type of program to communicate and share data. Each computer or peer e.g. node is typically considered equal in terms of responsibilities and acts as a server to others in a network. A peer to peer network is unlike a client server architecture where a dedicated file server is required. Peer to peer networks have become increasingly popular users employ peer to peer networks for sharing of data such as audio files multimedia files video files programs digital images and the like.

One common implementation of a peer to peer network utilizes a central server to maintain a list of nodes and data stored on the nodes which is an implementation utilized by file sharing software such as Napster. is a block diagram illustrating a system of such type of peer to peer network implementation. The system includes a central server and a plurality of nodes . Respective nodes of the plurality of nodes can join and un join the system at will. Upon joining the nodes provide a list of files they are capable of serving to the central server . The central server adds the list of files to a list of the available files of all nodes. Upon un joining by the nodes the list of files are removed from the list of available files for all the nodes. A requesting node e.g. user of the nodes requests a file by sending a request for the file to the central server . The central server maintains the list of available files of all nodes in the system and responds to the request with a list of nodes capable of answering or satisfying the request. The requesting node then obtains the file via a direct connection to one of the nodes able to satisfy the request hereinafter referred to as a transferring node . The central server is not involved in the transfer of the file to the requesting node hence the name peer to peer .

Although the conventional system of performs adequately there are a number of potential problems associated with such system. One problem is that the system has a single point of failure even though the central server is not involved in serving requests e.g. transferring files the central server is involved in matching every request. Thus if the central server goes off line the entire network can cease to function. A second problem is lack of scalability the central server is required to track files available at all nodes and since nodes can appear and disappear the central server must periodically contact each of the respective nodes e.g. by pinging the nodes . Such repeated updating can be a significant burden on the central server and the burden increases coincidentally with an increase in number of nodes in the system .

Another problem is a lack of anonymity. Since nodes serve and receive files from each other sending or transferring nodes are required to identify themselves to each other e.g. by exposing their IP addresses along with data the nodes are willing to serve. Furthermore lack of fairness can be yet another obstacle associated with such conventional system. It is possible for one of the nodes to request and receive many files and refuse to serve any thereby partaking in the benefits of the network without shouldering any of the burden. Additionally since the central server does not track transferring of files nodes can deliberately misrepresent themselves.

The following is a summary of the invention in order to provide a basic understanding of some aspects of the invention. This summary is not intended to identify key critical elements of the invention or to delineate the scope of the invention. Its sole purpose is to present some concepts of the invention in a simplified form as a prelude to the more detailed description that is presented later.

The present invention relates generally to systems and methods for data distribution and more specifically to systems and methods that facilitate data distribution in peer to peer networks. The present invention provides a data distribution system that is highly scalable evenly distributes workload enforces fairness and facilitates preserving anonymity of nodes or peers. A bulletin board is employed to maintain a list of requests from various nodes or peers in the system and unlike conventional peer to peer networks does not require a central server to track available files or data available and which nodes have which data. The requests are in a predefined machine readable format and indicate data requested and identify node s making the request. Nodes are able to post requests for data as long as they maintain a minimum performance level e.g. serve a sufficient number of files and or satisfy a sufficient number of requests . Additionally the nodes periodically register with the bulletin board according to an assigned check in frequency and receive the list of requests from the bulletin board. The nodes are operative to scan the list and determine which if any requests the node is willing to fill. On determining to satisfy a particular request by a node the node contacts a requesting node identified in the request and offers to transfer the requested data. If the requesting node accepts the offer the node transfers the requested data to the requesting node. After successful completion of the transfer the requesting node reports to the bulletin board that the node has filled the request.

The present invention is highly scalable in part because nodes can join or un join the system without the bulletin board or other component being required to track the respective nodes. Additionally relatively large or small numbers of nodes can be present in the system because the bulletin board has limited responsibilities as compared with conventional peer to peer networks. For example the bulletin board can simply reduce check in frequencies for the nodes in order to accommodate more nodes in the system. Anonymity is facilitated by the invention because the bulletin board does not maintain a list of available files but rather maintains a list of requests for data. Additionally the invention can provide for only a node agreeing to satisfy a request being able to view a requesting nodes address or identification e.g. pointer and a serving node a node agreeing to satisfy a request is only viewed by the requesting node. The present invention can enforce fairness by tracking performance statistics for the node e.g. requests made requests filled proper check ins and the like and mitigating requests from nodes that fail to properly contribute to the distribution system.

To the accomplishment of the foregoing and related ends certain illustrative aspects of the invention are described herein in connection with the following description and the annexed drawings. These aspects are indicative of various ways in which the invention may be practiced all of which are intended to be covered by the present invention. Other advantages and novel features of the invention may become apparent from the following detailed description of the invention when considered in conjunction with the drawings.

The present invention is now described with reference to the drawings wherein like reference numerals are used to refer to like elements throughout. In the following description for purposes of explanation numerous specific details are set forth in order to provide a thorough understanding of the present invention. It may be evident however that the present invention may be practiced without these specific details. In other instances well known structures and devices are shown in block diagram form in order to facilitate describing the present invention.

As used in this application the terms component and system are intended to refer to a computer related entity either hardware a combination of hardware and software software or software in execution. For example a component may be but is not limited to being a process running on a processor a processor an object an executable a thread of execution a program and or a computer. By way of illustration both an application running on a server and the server can be a component. One or more components may reside within a process and or thread of execution and a component may be localized on one computer and or distributed between two or more computers.

It is to be appreciated that for purposes of the present invention any or all of the functionality associated with modules systems and or components discussed herein can be achieved in any of a variety of ways e.g. combination or individual implementations of active server pages ASPs common gateway interfaces CGIs application programming interfaces API s structured query language SQL component object model COM distributed COM DCOM system object model SOM distributed SOM DSOM ActiveX common object request broker architecture CORBA database management systems DBMSs relational database management systems RDBMSs object oriented database management system ODBMSs object relational database management systems ORDBMS remote method invocation RMI C C practical extraction and reporting language PERL applets HTML dynamic HTML server side includes SSIs extensible markup language XML portable document format PDF wireless markup language WML standard generalized markup language SGML handheld device markup language HDML graphics interchange format GIF joint photographic experts group JPEG binary large object BLOB other script or executable components .

The plurality of nodes are operative to make requests for data fill or serve requests for data and register periodically at a check in frequency. The plurality of nodes are typically software components operating or executing on a computer system. The nodes are able to communicate and transfer data with each other the bulletin board and the access layer generally via a network connection e.g. Internet wireless network local area network wide area network and the like employing established protocols.

The host computer controls and operates the bulletin board and the access layer . The host computer can be accessed by a user or operator in order to modify control and operation of the bulletin board and the access layer. The user or operator can access the host computer by an input device e.g. keyboard of the host computer or remotely via a network connection.

The bulletin board as stated above maintains a list of requests that are in a predefined machine readable format. The requests in the list respectively include requested data e.g. a file an item or portion of a file and a pointer to a requesting node e.g. the node requesting the data . The pointer can simply be a network address such as an IP address and port number of the requesting node or other indicator such that the requesting node is identifiable and contactable by other nodes of the plurality of nodes . Additionally the requests can include other information such as priority desired time out period download bandwidth and the like. The priority also referred to as weighting can be specified to indicate that some requests are more important than other requests. The download bandwidth refers to the capability of the requesting node to receive the requested data. It is appreciated that the nodes should be prevented from setting a large number or all requests to a highest priority in order to preserve usefulness of having priorities. As an example nodes can be allotted a fixed number of high priority requests for serving or transferring requested data.

It is likely or possible that some requests can remain un fulfilled even after relatively lengthy periods of time. A requesting node can for example have incorrectly identified e.g. misspelled the requested data. System resources can be wasted by the nodes having to be transferred requests even though it is likely that none are able to fill the request. Thus the bulletin board can remove un filled requests after a time out period e.g. after an age of the request exceeds the time out period . The time out period is typically selected so as to remove un filled requests that have a low likelihood of being filled or served.

Additionally the bulletin board can compute statistics or weightings regarding popularity of data or files and can assign such weightings to the requests in the list of requests. For example a particular file from a request can be highly requested indicating that the file has high demand but is of low supply. Thus a node satisfying a request for the particular file can receive a greater amount of serving credits for filling a request for a highly requested file as compared to satisfying a request for a file having low demand. Overall the system can benefit from such weighting because the weightings provide for the system to operate in accordance with market forces and better map to supply demand scenarios with respect to various files. Thus as highly demanded and weighted requests are filled the number of nodes capable of filling these requests also increases.

Periodically the plurality of nodes respectively report in or check in with the bulletin board and obtain a current list of requests employing an established protocol. The frequency with which nodes check in with the bulletin board is referred to as the check in frequency. The check in frequency for respective nodes is generally assigned by the access layer according to a number of factors such as for example the number of nodes in the system types of data requested a ratio of requests filled and made and the like. Thus the greater the number of nodes in the system the lower the check in frequency is for respective nodes of the plurality of nodes. Additionally nodes that satisfy a large number of requests relatively can be rewarded by assignment of a lower check in frequency.

If a node of the plurality of nodes agrees to satisfy a request of the list of requests the node can be referred to as a serving node. Generally the nodes should serve data and fill requests in a first in first out FIFO order. However the nodes can employ other information in the request such as bandwidth or priority in determining which if any requests to fill. For example the serving node can select a request wherein the requesting node has a bandwidth close to or greater than a bandwidth of the serving node. Upon the serving node committing to fulfill the request the request is then flagged or otherwise marked to indicate that the request is in the process of being satisfied thereby mitigating another node from attempting to serve the request. The serving node contacts the requesting node via an established protocol to offer the requested data to the requesting node. If the requesting node accepts the offer the serving node then initiates a transfer of the requested data from the serving node to the requesting node employing an established protocol. The serving node can report errors encountered in transferring the requested data. For example it is possible that the requesting node is no longer present in the system thus the serving node can report to the bulletin board that the requesting node is no longer present in the system e.g. a failed transfer . Additionally the serving node can report a successful transfer of the requested data to the bulletin board . However the bulletin board does not remove the request from the maintained list of requests based solely on the serving node reporting a successful transfer of the requested data. Yet the bulletin board is operative to determine that errors related to a request have exceeded a predetermined threshold and then remove the request from the maintained list of requests. Additionally the bulletin board can attempt to contact nodes suspected of no longer being present e.g. by pinging in order to determine if a particular node is operating. Even if the serving node is unable to fulfill the request e.g. transfer the requested data it is appreciated that the serving node can be rewarded by for example receiving a relatively small number of serving credits for attempting to serve the request.

If the serving node is able to successfully transfer the requested data to the requesting node the requesting node notifies the bulletin board that the request has been filled by the identified serving node via an established protocol. The bulletin board then removes the satisfied request from the list of requests and the identified serving node is rewarded by for example receiving serving credit for filling the request and or reducing its check in frequency.

The access layer is a mechanism for the host computer to regulate access to and or ability of the nodes to make additional requests based on behavior or performance e.g. served data . The access layer tracks performance or behavior of the nodes by tracking requests made requests filled checking in and the like of the nodes . The access layer can prevent nodes from making requests for data if the nodes fail to meet a performance or behavior threshold. One approach for the access layer to track performance is to compute a performance ratio of requests satisfied versus requests made over time. The access layer can then prevent or mitigate nodes from making requests if the performance ratio is below a threshold value e.g. 25 . Another approach is to provide respective nodes with an initial number of serving credits e.g. 100 and then add credits for requests filled e.g. 100 and remove credits for requests made e.g. 10 . Then a node can only make a request if the node has a suitable number of credits available. Additionally another approach is to determine if the nodes are regularly checking in by for example computing a percentage or ratio based on the number of times checked in versus a number of times a node should have checked in. In yet another approach the nodes receive credits for properly checking in and lose credits for failing to check in.

The access layer can also determine whether nodes of the plurality of nodes are alive or in the system by monitoring check in s requests filled and requests made. It is appreciated that inactive nodes are unable to check in make requests and or fill requests. Thus inactive nodes can be detected by failing to check in fill a request and or make a request within a selected time out value. Nodes that are determined to be inactive can be effectively removed from the system by no longer tracking performance of the respective nodes. However the performance information can be retained and reused on the nodes eventually rejoining the system.

Furthermore as indicated above and further elaborated here the nodes are operative to make requests and serve requests for portions of files. For especially large files e.g. a CDROM image it can be time consuming to transfer such large amounts of data to and from a single pair of nodes. Thus by permitting requests for portions of files portions of a large file can be requested and served independently by any suitable number or subset of the nodes e.g. the portions being 10 MB partitions of the CDROM image . Likewise it is further appreciated that interruptions of data transfer can occur between the nodes but that interrupted data transfers can be resumed from about the point of interruption. For example suppose a transfer between a serving node and a requesting node is about halfway complete. Unfortunately an interruption occurs e.g. network congestion causing the data transfer to be interrupted. Fortunately the system permits the serving node and the requesting node to resume the data transfer at a later time.

The access layer is operative to receive requests for data from the nodes . On receiving a request the access layer determines whether the node making the request should be permitted to have the request added to the list of requests by employing performance statistics for the requesting node from the track statistics component . If the requesting node is permitted to make the request the request is posted to the receive requests component . If the requesting node is not permitted to make the request the request is blocked and the requesting node can be notified that its request has been blocked. Additionally the access layer is operative to assign and or modify the check in frequency for the nodes based on their performance statistics. Generally nodes that have favorable performance statistics e.g. fill a relatively large number of requests and check in properly can have their check in frequency reduced so that they are required to check in less often. Additionally nodes that have unfavorable performance statistics e.g. only make requests and fail to check in properly can have their check in frequency increased therein requiring them to check in more often.

The receive requests component is operative to receive requests from the access layer to post or add requests to the list of requests and to report the requests including the requesting node for respective requests to the track statistics component . As stated above the receive requests component only receives requests for data made by the nodes that are not blocked by the access layer . The requests filled component is operative to receive reports from requesting nodes of the nodes that their request s have been filled. The reports additionally include the identification of the node that filled the request. The requests filled component typically verifies reports that requests have been filled to prevent erroneous reports from being accepted thus mitigating nodes from being improperly credited. If a report is valid e.g. verified the information is reported to the track statistics component . If a report can not be verified the information is blocked and is not reported to the track statistics component.

The check in component facilitates operation of the board by requiring the nodes to periodically check in according to a required and or assigned check in frequency. When a node checks in or reports the check in component transfers a copy of the current list of requests to the node checking in. The check in component then reports the check in by the node to the track statistics component . The check in component can also report other information such as but not limited to time of check in assigned time of check in time since last check in and the like.

The track statistics component is operative to receive information and or receives various parameters related to the behavior or performance of the nodes . The information is generally received from the receive requests component the requests filled component and the check in component . Based on that information including requests made requests filled check in frequency and the like the track statistics component dynamically generates performance statistics for respective nodes of the nodes . The performance statistics are typically updated for a particular node when additional information is received for a particular node e.g. a request is made or a request is filled . The track statistics component stores and maintains the performance statistics and can provide them to the access layer on demand. A separate storage component e.g. memory hard drive and the like can be utilized to store the performance statistics.

The track statistics component is able to generate or compute a number of performance statistics for the respective nodes. One performance statistic that the track statistics component can compute is a ratio of requests filled to requests made for respective nodes. The access layer can determine whether a requesting node exceeds a threshold ratio value in order to enforce fairness. Another performance statistic that the track statistics component can compute is an actual check in frequency for respective nodes. The actual check in frequency is the number of times a particular node has checked in over a set period of time. The actual frequency can be employed by the access layer so as to block requests for nodes that fail to meet a threshold value for their actual check in frequency.

The time out component is operative to remove requests having a low likelihood of being filled from the list of requests . Requested data can be so rare or in such low supply that other nodes do not have the requested data and are therefore prevented from transferring the requested data to the requesting node. Instead of maintaining these requests indefinitely a time out period is selected such that requests are removed or retired that have little or no likelihood of being filled. Additionally requesting nodes are not required to log off or un join from the board . Thus a requesting node can un join from the board thus preventing requests by that node to be un fillable. Some typical values for time out periods are 1 day 2 hours 45 minutes and the like.

It is appreciated that variations in the components and numbers of the components comprising the board are possible and are still in accordance with the present invention. For example additional components can be employed to categorize requests into different categories such as media types. Additionally components can be utilized to provide and or display information such as popularity of requested data number or amount of requested data transferred and the like.

The video type board maintains and controls a list of requests for video data. The requests in the list comprise indicia of the video data requested e.g. a video file video item and a pointer to a requesting node e.g. the node of the plurality of nodes making the request . The pointer to the requesting node can comprise a network address or identification e.g. an IP address and port number of the requesting node. Additionally the requests can include other information such as priority desired time out value and the like. The video type board can assign weightings to respective requests of the list based on factors such as popularity e.g. number of requests for a particular file length or size of the requested data scarcity of the data and the like. Thus for example a node filling a request for a highly weighted file receives more credit than a node filling a request for a lowly weighted file. Consequently the plurality of nodes are incentivized to fulfill more heavily weighted requests.

The video type board also receives requests for video data from the plurality of nodes . The requests are checked or verified as to whether or not they are for video data. One approach to verify the requests is to determine a file type of the requested data such as by checking a file extension. For example video files generally have file extensions of .avi .mpg .mpeg .mov and the like. The video type board can then block requests on determining that respective requests are not for video type data. Additionally the video type board tracks performance statistics for the nodes and can determine when to block requests by nodes that are not contributing enough e.g. by filling requests checking in appropriately .

The digital audio board maintains and controls a list of requests for audio data. The requests in the list comprise indicia of the audio data requested e.g. an audio file and a pointer to a requesting node e.g. the node of the plurality of nodes making the request . The pointer to the requesting node can comprise a network address or identification e.g. a IP address and port number of the requesting node. Additionally the requests can include other information such as priority desired time out value and the like. The digital audio board can as described with respect to the video type board assign weightings to respective requests of the list based on factors such as popularity e.g. number of requests for a particular file length or size of the requested data the scarcity of the data and the like. Consequently the plurality of nodes are encouraged to fill the more heavily weighted requests.

The digital audio board also receives requests for audio data from the plurality of nodes . The requests are checked or verified as to whether or not they are for audio data. One approach to verify the requests is to determine a file type of the requested data such as by checking a file extension. For example audio files generally have file extensions of .mp3 .wma .aud and the like. The digital audio board can then block requests on determining that respective requests are not for audio type data. Additionally the digital audio board tracks performance statistics for the nodes and can determine when to block requests by nodes that are not contributing enough e.g. by filling requests checking in appropriately .

The programs board maintains and controls a list of requests for program data. The requests in the list comprise indicia of the program data requested e.g. a program or application file s and a pointer to a requesting node e.g. the node of the plurality of nodes making the request . The pointer to the requesting node can comprise a network address or identification e.g. an IP address and port number of the requesting node. Additionally the requests can include other information such as priority desired time out value and the like. The programs board can as described with respect to the video type board assign weightings to respective requests of the list based on factors such as popularity e.g. number of requests for a particular file length or size of the requested data the scarcity of the data and the like. Consequently the plurality of nodes are encouraged to serve the more heavily weighted requests.

The programs board receives requests for program data from the plurality of nodes . The requests are checked or verified as to whether or not they are for program data. One approach to verify the requests is to determine a file type of the requested data such as by checking a file extension. For example program files generally have file extensions of .exe or are in archives with extensions of .zip .ace .rar .cab tar .gz and the like. The programs board can then block requests on determining that respective requests are not for program type data. Additionally the programs board tracks performance statistics for the nodes and can determine when to block requests by nodes that are not contributing enough e.g. by filling requests checking in appropriately .

The photo board maintains and controls a list of requests for photo data. The requests in the list comprise indicia of the photo data requested e.g. a photo or image file and a pointer to a requesting node e.g. the node of the plurality of nodes making the request . The pointer to the requesting node can comprise a network address or identification e.g. an IP address and port number hostname NetBIOS name of the requesting node. Additionally the requests can include other information such as priority desired time out value and the like. The photo board can as described with respect to the video type board assign weightings to respective requests of the list based on factors such as popularity e.g. number of requests for a particular file length or size of the requested data the scarcity of the data and the like. Consequently the plurality of nodes are encouraged to fill the more heavily weighted requests.

The photo board also receives requests for photo data from the plurality of nodes . The requests are checked or verified as to whether or not they are for photo data. One approach to verify the requests is to determine a file type of the requested data such as by checking a file extension. For example photo files generally have file extensions of .gif .tiff .jpg .png and the like. The photo board can then block requests on determining that respective requests are not for photo type data. Additionally the photo board tracks performance statistics for the nodes and can determine when to block requests by nodes that are not contributing enough e.g. by filling requests checking in appropriately .

It is appreciated that alternate aspects of the invention can include other types of bulletin boards to facilitate transferring other types of data in addition to or instead of the video type board the digital audio board the programs board and the photo board . Additionally boards can be categorized according to other characteristics such as for example music type e.g. rock dance hip hop and the like . By having multiple boards maintaining lists of requests latency of the system can be improved. Generally the less the number of nodes joined to a particular bulletin board the better the latency for the nodes. For example if a particular node has and seeks audio files then latency is improved by the particular node being only a member of the digital audio board as opposed to a more general board facilitating transfer of other types of data.

The plurality of nodes are operative to join un join make requests for data fill or serve requests for data and check in periodically at a check in frequency with the video type board the digital audio board the programs board and the photo board collectively referred to as the boards. The nodes are typically software components or programs operating or executing on a computer system e.g. home computer system . The nodes are generally able to communicate with each other the video type board the digital audio board the programs board and the photo board via a network connection e.g. Internet wireless network local area network wide area network employing established protocols. A node of the plurality of nodes can join one of the boards by sending a request to join to the appropriate board. Then the board responds by either informing the node that it has been added or that the board is unable to accept additional nodes e.g. the board is full . If the node is added the board starts tracking performance statistics for the node and can provide the node with initial credits. If the board is full the board can inform or transfer the node to another board or peer to peer network. A node of the plurality of nodes can un join one of the boards by reporting to the board that the node is retiring from the board. Additionally it is appreciated that the boards can retire nodes that fail to properly check in or otherwise perform poorly.

As stated above the nodes can be required to periodically check in with boards of which they are a member of. On checking in the nodes receive respective lists of requests from the boards. The nodes can agree to satisfy or fill one or more of these requests by a serving node of the nodes by transferring the requested data to the requesting node. On the requested data being transferred to the requesting node the requesting node reports to the board that the request has been filled and that the sending node filled the request. The board then removes the request from its list of requests and credits the sending node.

Additionally the plurality of nodes can be joined to none one or more of the video type board the digital audio board the programs board and the photo board . Thus the respective nodes are not required to join a particular board and the nodes can be members of multiple boards.

The configuration of nodes in the group of nodes is similar to the configuration of an intranet connected to an external network. Thus the group of nodes includes a first node a second node a third node and a fourth node . It is appreciated that other suitable numbers of nodes and other suitable configurations can be utilized for the group of nodes and still be in accordance with the present invention. The first node is operative to communicate with the bulletin board and other nodes of the plurality of nodes. Additionally the first node the second node the third node and the fourth node are able to communicate and transfer data with each other e.g. within the group .

As describe above the group of nodes operates as a single node of the plurality of nodes. When the group of nodes is required to check in the group receives the list of requests maintained by the bulletin board . The group determines which requests the respective nodes of the group are able to fill e.g. have the requested file or data and determines which if any the group will attempt to fill or serve. Then the requested data is transferred from the group via the first node to a requesting node. As an example if the third node has the requested data and determines to transfer the requested data to the requesting node the requested data is transferred to the requesting node via the first node . Similarly a node of the group of nodes can make a request for data e.g. a file and the request can be submitted to the bulletin board on behalf of the group . For example the second node can request some particular data and the first node then forwards the request for the some particular data to the bulletin board . On another node of the plurality of nodes transferring the some particular data to the group wherein in it is received by the first node the first node transfers the some particular data to the second node .

In view of the foregoing structural and functional features described above methodologies in accordance with various aspects of the present invention will be better appreciated with reference to . While for purposes of simplicity of explanation the methodologies of is depicted and described as executing serially it is to be understood and appreciated that the present invention is not limited by the illustrated order as some aspects could in accordance with the present invention occur in different orders and or concurrently with other aspects from that depicted and described herein. Moreover not all illustrated features may be required to implement a methodology in accordance with an aspect the present invention.

A requesting node makes a request for data at . The request is made to the bulletin board which maintains the list of requests. A determination can be made that the requesting node has not met a minimum performance threshold and then blocking the request by the requesting node. If blocked the requesting node can be notified of the blocking and optionally information as to why the request was blocked e.g. failed to check in properly failed to serve properly and the like . The request is added to the list of requests at . Obviously if the request is blocked it is not added to the list of requests. The list of requests can be sorted and or ordered such that older requests are shown first in order to promote a first in first out structure. The request includes identification or indicia of requested data and a pointer or identification to the requesting node. The request can also include other information such as priority bandwidth e.g. 500 k 56 k dial up modem DSL cable modem and the like desired time out value and the like.

A node reports in or checks in with the bulletin board and can determine whether to fulfill the request at . If the node determines not to fulfill the request the method continues with a next reporting node at . If the node is determined to fulfill the request the node is referred to as a serving node and the method continues at . The determination can be made according to a number of factors including age of the request size of the requested data bandwidth of the requesting node if known and the like. The serving node then contacts the requesting node to offer to serve the requested data at . The requesting node accepts the offer and the serving node transfers the requested data to the requesting node at . The requesting node typically accepts the offer to serve the requested data unless the requested data is no longer desired or has been obtained some other way. It is appreciated that the requesting node can also notify the bulletin board to remove the request from the list of requests in order to mitigate receiving offers to provide the requested data. On completion of the transfer of the requested data the requesting node reports that the serving node has successfully filled the request at . The serving node can then be credited with fulfilling the request and the request is then removed from the list of requests.

A requesting node makes a request for data at . The request is made to the bulletin board which maintains the list of requests. Performance statistics are computed for the requesting node at . The performance statistics include data served versus data received and number of proper check in s . A determination is made as to whether the requesting node has met a minimum performance threshold at by employing the performance statistics for the requesting node and then blocking the request at if the performance statistics fail to meet the minimum performance threshold. If blocked e.g. not added the requesting node can be notified of the blocking and optionally information as to why the request was blocked e.g. failed to check in properly failed to serve properly and the like . If the requesting node has met a minimum performance threshold e.g. if not blocked or rejected the request is added to the list of requests at . The list of requests can be sorted and or ordered such that older requests are shown first in order to promote a first in first out structure. The request includes requested data and a pointer or identification to the requesting node. The request can also include other information such as priority bandwidth e.g. 500 k 56 k dial up modem DSL cable modem and the like desired time out value and the like.

A node checks in at an assigned frequency at . Upon checking in the node receives the list of requests and determines whether to agree to fulfill the request from the requesting node at . The node can determine whether or not to fulfill the request according to a number of factors including age of the request size of the requested data bandwidth of the requesting node if known and the like. If the node decides not to fulfill the request the method continues with a next reporting node at . Upon determining to fulfill the request the node now referred to as a serving node then contacts the requesting node to offer to serve the requested data at . The requesting node accepts the offer and the serving node transfers the requested data to the requesting node at . The requesting node typically accepts the offer to serve the requested data unless the requested data is no longer desired or has been obtained some other way. It is appreciated that the requesting node can also notify the bulletin board to remove the request from the list of requests in order to mitigate receiving offers to provide the requested data. On completion of the transfer of the requested data the requesting node reports that the serving node has successfully filled the request at . The serving node can then be credited with filling the request therein improving performance statistics for the serving node. Additionally the assigned frequency can be adjusted for the serving node.

A requesting node sends a first request for a first type of data to a first bulletin board at . The first bulletin board maintains a list or requests for the first type of data e.g. video audio program and the like . A determination can be made that the requesting node has not met a minimum performance threshold and then blocking the request by the requesting node. If blocked the requesting node can be notified by the first bulletin board of the blocking and optionally information as to why the request was blocked e.g. failed to check in properly failed to serve properly and the like . The request is added to the list of requests at maintained by the first bulletin board. The list of requests can be sorted and or ordered such that older requests are shown first in order to promote a first in first out structure. The request includes indicia of requested data and a pointer or identification to the requesting node. The request can also include other information such as priority bandwidth e.g. 500 k 56 k dial up modem DSL cable T1 T3 modem and the like desired time out value and the like.

A node reports in or checks in with the bulletin board receives the list of requests and determines whether to fulfill the request at . If the node decides not to fulfill the request the method continues with a next reporting node at . If the node decides to fulfill the request the node is referred to as a first serving node and the method continues at . The determination can be made according to a number of factors including age of the request size of the requested data bandwidth of the requesting node if known and the like. The first serving node can then contact the requesting node to offer to serve the requested data. The requesting node accepts the offer and the serving node transfers the requested data to the requesting node. On completion of the transfer of the requested data the requesting node reports to the first bulletin board that the first serving node has successfully filled the request at . The first serving node can then be credited for filling the request at the first bulletin board.

The requesting node sends a second request for a second type of data to a second bulletin board at . The second type of data is of a different type than the first type of data. As with the first bulletin board the second bulletin board maintains a list or requests for the second type of data e.g. video audio program and the like . A determination can be made that the requesting node has not met a minimum performance threshold and then blocking the request by the requesting node. If blocked the requesting node can be notified by the second bulletin board of the blocking and optionally information as to why the request was blocked e.g. failed to check in properly failed to serve properly and the like . The request is then added to the list of requests at maintained by the second bulletin board. The request includes indicia of requested data and a pointer or identification to the requesting node. The request can also include other information such as described above.

A second node checks in with the second bulletin board and receives the list of requests and determines whether to fulfill the second request from the requesting node at . The second node can determine which request it agrees to fill according to the number of factors described above. If the second node decides not to fulfill the request the method continues with a next reporting node at . If the node decides to fulfill the request the node is referred to as a second serving node and the method continues at . The determination can be made according to a number of factors including age of the request size of the requested data bandwidth of the requesting node if known and the like. The second serving node can then contact the requesting node to offer to serve the requested data. The requesting node accepts the offer and the serving node transfers the requested data to the requesting node. On completion of the transfer of the requested data the requesting node reports to the second bulletin board that the second serving node has successfully filled the request at . The second serving node can then be credited for filling the request at the second bulletin board.

With reference to an exemplary environment for implementing various aspects of the invention includes a computer including a processing unit a system memory and a system bus that couples various system components including the system memory to the processing unit . The processing unit may be any of various commercially available processors. Dual microprocessors and other multi processor architectures also can be used as the processing unit .

The system bus may be any of several types of bus structure including a memory bus or memory controller a peripheral bus and a local bus using any of a variety of commercially available bus architectures. The computer memory includes read only memory ROM and random access memory RAM . A basic input output system BIOS containing the basic routines that help to transfer information between elements within the computer such as during start up is stored in ROM .

The computer may further include a hard disk drive a magnetic disk drive e.g. to read from or write to a removable disk and an optical disk drive e.g. for reading a CD ROM disk or to read from or write to other optical media. The hard disk drive magnetic disk drive and optical disk drive are connected to the system bus by a hard disk drive interface a magnetic disk drive interface and an optical drive interface respectively. The computer typically includes at least some form of computer readable media. Computer readable media can be any available media that can be accessed by the computer . By way of example and not limitation computer readable media may comprise computer storage media and communication media. Computer storage media includes volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. Computer storage media includes but is not limited to RAM ROM EEPROM flash memory or other memory technology CD ROM digital versatile disks DVD or other magnetic storage devices or any other medium which can be used to store the desired information and which can be accessed by the computer . Communication media typically embodies computer readable instructions data structures program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term modulated data signal means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example and not limitation communication media includes wired media such as a wired network or direct wired connection and wireless media such as acoustic RF infrared and other wireless media. Combinations of any of the above should also be included within the scope of computer readable media.

A number of program modules may be stored in the drives and RAM including an operating system one or more application programs other program modules and program non interrupt data . The operating system in the computer can be any of a number of commercially available operating systems.

A user may enter commands and information into the computer through a keyboard and a pointing device such as a mouse . Other input devices not shown may include a microphone an IR remote control a joystick a game pad a satellite dish a scanner or the like. These and other input devices are often connected to the processing unit through a serial port interface that is coupled to the system bus but may be connected by other interfaces such as a parallel port a game port a universal serial bus USB an IR interface etc. A monitor or other type of display device is also connected to the system bus via an interface such as a video adapter . In addition to the monitor a computer typically includes other peripheral output devices not shown such as speakers printers etc.

The computer may operate in a networked environment using logical and or physical connections to one or more remote computers such as a remote computer s . The remote computer s may be a workstation a server computer a router a personal computer microprocessor based entertainment appliance a peer device or other common network node and typically includes many or all of the elements described relative to the computer although for purposes of brevity only a memory storage device is illustrated. The logical connections depicted include a local area network LAN and a wide area network WAN . Such networking environments are commonplace in offices enterprise wide computer networks intranets and the Internet.

When used in a LAN networking environment the computer is connected to the local network through a network interface or adapter . When used in a WAN networking environment the computer typically includes a modem or is connected to a communications server on the LAN or has other means for establishing communications over the WAN such as the Internet. The modem which may be internal or external is connected to the system bus via the serial port interface . In a networked environment program modules depicted relative to the computer or portions thereof may be stored in the remote memory storage device . It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.

What has been described above includes examples of the present invention. It is of course not possible to describe every conceivable combination of components or methodologies for purposes of describing the present invention but one of ordinary skill in the art may recognize that many further combinations and permutations of the present invention are possible. Accordingly the present invention is intended to embrace all such alterations modifications and variations that fall within the spirit and scope of the appended claims. Furthermore to the extent that the term includes is used in either the detailed description or the claims such term is intended to be inclusive in a manner similar to the term comprising as comprising is interpreted when employed as a transitional word in a claim.

