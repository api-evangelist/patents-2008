---

title: Property overrides on included material
abstract: In one example embodiment, a system and method is shown that includes identifying a host setting related to a property of a document data structure and a property of a fragment data structure, the document data structure reflecting an organization of a document, and the fragment data structure reflecting an organization of a portion of the document. Additionally, the system and method may include overriding the property of the fragment data structure using the property of the document data structure, if the host setting includes a command that the property of the fragment data structure is to be overridden by the property of the document data structure.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09015575&OS=09015575&RS=09015575
owner: Adobe Systems Incorporated
number: 09015575
owner_city: San Jose
owner_country: US
publication_date: 20080211
---
A portion of the disclosure of this document contains material that is subject to copyright protection. The copyright owner has no objection to the facsimile reproduction by anyone of the patent document or the patent disclosure as it appears in the Patent and Trademark Office patent files or records but otherwise reserves all copyright rights whatsoever. The following notice applies to the software data and or screenshots that may be illustrated below and in the drawings that form a part of this document Copyright 2008 Adobe Systems Incorporated. All Rights Reserved.

The present application relates generally to the technical field of algorithms and programming and in one specific example the display of editable text fields in a document.

An eXtensible Markup Language XML is a general purpose markup language. In some cases families of XML based specifications have been developed to perform a number of functions relating to the sharing of structured data. These families include the XML Forms Architecture XFA . XFA may be used to format documents and more specifically to format data fields within documents. These documents may be text document such as online forms containing fields that a user may fill in.

In the following description for purposes of explanation numerous specific details are set forth in order to provide a thorough understanding of an example embodiment of the present invention. It may be evident however to one skilled in the art that the present invention will be practiced without these specific details.

In some example embodiments a system and method is shown that allows for the formatting of a data field contained within a document e.g. a final document or online form to be determined based upon combining fragments e.g. XFA based template fragments . During the course of combining these fragments certain override rules e.g. host settings may be implemented so as to allow for property overrides to occur with regard to the fragments and the XML based properties contained therein. A property override may be a rule established by a host e.g. a computer system for determining whether priority should be given to a fragment or whether priority should be given to a document in determining how to format a final document. In one example embodiment a host specifies a property override by including a reference to the fragment in a reference tag contained within the final document.

In some example embodiments digital content as rendered in a final document may be formatted using XFA. For example using XFA the size of an image appearing in an online form may be determined. Additionally using XFA one type of signature block e.g. the data type for the signature block for an online form may be used in lieu of another type depending on the needs of the host computer system. The size of the image or the type of signature block may be dictated by either a document itself or by a fragment. Through the inclusion of references to fragments a final document may be more scaleable in terms of being able to access a number of different templates that may be used to format the data fields contained within the document. If a user wants the image to only take up a specific portion of a document a fragment can be called to dictate these formatting requirements. If a user wants to use a specific signature block a fragment can be called to achieve this end.

In one example embodiment a reference to a fragment is included within the document. A reference may be an attribute syntactically represented in XML as usehref and may be used to specify a fragment to be used in the formatting of a document. A fragment may have the following form 

In some example embodiments an override may be used by a host in interpreting the properties of a fragment and the properties of a document. In cases where an override is determined by the host to be necessary a property override may have to be implemented. An example property override is shown in the final document having the following structure 

In some example embodiments the fragment and document may be generated using an online form authoring tool. This online form authoring tool may include Adobe Systems Incorporated LIVECYCLE DESIGNER tool. This online form authoring tool may reside as part of a form server application such as Adobe Systems Incorporated LIVECYCLE FORM SERVER application. In one example embodiment the online form authoring tool is used to generate the fragment and the document. This fragment and document may then be stored by the form server for future use. In one example embodiment the fragment is stored by the form server as an XML data packaging file e.g. an .xdp file .

In some example embodiments a host may request the document to be served up by the form server. In response to this request the form server may retrieve the document and based upon certain references contained within the document retrieve one or more fragments. These references may include the aforementioned usehref attribute. In one example embodiment once the fragments and the document are retrieved and assembled by the form server they are provided to the host for viewing using an application capable of interpreting XML XFA or in some cases Hyper Text Markup Language HTML . It may be the form server that resolves the override via a property override. It may be the host that resolves the override via a property override. Hosting settings may be used to resolve overrides in either embodiment. A host setting may be a user or document designer created rules set containing commands defining what properties of the document or the fragment are to be overridden. This host setting may be written in XML and retrieved on an as needed basis. Further a host setting may be generated using a screen object or widget to generate a boolean value corresponding to a selected hosted setting or command. This boolean value may be stored for a document as part of the host settings.

In some example embodiments an override may be resolved by comparing properties in a document data structure and a fragment data structure. The data structure may for example be a hierarchical data structure such as a tree. A tree may be a simple and connected acyclic graph. In one example embodiment an override may be resolved by comparing properties in a document tree and a fragment tree. The document tree and fragment tree may be written in XML. A document tree may be composed of nodes reflecting fields sub forms or forms and the contents thereof in the form of properties relating to a document. A fragment tree may be composed of nodes reflecting fields sub forms or forms and the contents thereof in the form of properties relating to a portion of a document. Both the document tree and the fragment tree have an expected organization. For example each specific property in either the document tree or the fragment tree has an expected location. The system and method shown herein may scan e.g. traverse a document tree on the host and if the system and method finds the property e.g. an XML tag or associated attribute at the expected location the system and method uses that property. If the property has not been specified by the host then the fragment is scanned. The system and method may look into the fragment tree at the expected location and if it finds the property at that location the system and method may use it. If the property hasn t been specified in the fragment tree then a default supplied by fragment tree is used. In some example embodiments if the property has not been specified in the fragment tree a default specified in an additional XML based file may be used. This XML based file may be defined according to an XFA language definition.

Some embodiments may include the various databases e.g. or being relational databases or in some cases OLAP based databases. In the case of relational databases various tables of data are created and data is inserted into and or selected from these tables using a Structured Query Language SQL or some other database query language known in the art. In the case of OLAP databases one or more multi dimensional cubes or hyper cubes containing multidimensional data from which data is selected from or inserted into using a Multidimensional Expression MDX language may be implemented. In the case of a database using tables and SQL a database application such as for example MYSQL MICROSOFT SQL SERVER ORACLE 8I 10G or some other suitable database application may be used to manage the data. In this the case of a database using cubes and MDX a database using Multidimensional On Line Analytic Processing MOLAP Relational On Line Analytic Processing ROLAP Hybrid Online Analytic Processing HOLAP or some other suitable database application may be used to manage the data. The tables or cubes made up of tables in the case of for example ROLAP are organized into an RDS or Object Relational Data Schema ORDS as is known in the art. These schemas may be normalized using certain normalization algorithms so as to avoid abnormalities such as non additive joins and other problems. Additionally these normalization algorithms may include Boyce Codd Normal Form or some other normalization or optimization algorithm known in the art.

Some example embodiments may include the above illustrated operations being written as one or more software components. These components and the functionality associated with each may be used by client server or peer computer systems. These various components can be implemented into the system on an as needed basis. These components may be written in an object oriented computer language such that a component oriented or object oriented programming technique can be implemented using a Visual Component Library VCL Component Library for Cross Platform CLX Java Beans JB Enterprise Java Beans EJB Component Object Model COM or Distributed Component Object Model DCOM or other suitable technique. These components are linked to other components via various Application Programming Interfaces APIs and then compiled into one complete server and or client application. The method for using components in the building of client and server applications is well known in the art. Further these components may be linked together via various distributed programming protocols as distributed computing components.

Some example embodiments may include remote procedure calls being used to implement one or more of the above illustrated components across a distributed programming environment. For example a logic level may reside on a first computer system that is located remotely from a second computer system containing an interface level e.g. a GUI . These first and second computer systems can be configured in a server client peer to peer or some other configuration. The various levels can be written using the above illustrated component design principles and can be written in the same programming language or in different programming languages. Various protocols may be implemented to enable these various levels and the components contained therein to communicate regardless of the programming language used to write these components. For example an operation written in C using Common Object Request Broker Architecture CORBA or Simple Object Access Protocol SOAP can communicate with another remote module written in Java . Suitable protocols include SOAP CORBA and other protocols well known in the art.

Some embodiments may utilize the Open Systems Interconnection OSI model or TCP IP protocol stack model for defining the protocols used by a network to transmit data. In applying these models a system of data transmission between a server and client or between peer computer systems is illustrated as a series of roughly five layers comprising an application layer a transport layer a network layer a data link layer and a physical layer. In the case of software having a three tier architecture the various tiers e.g. the interface logic and storage tiers reside on the application layer of the TCP IP protocol stack. In an example implementation using the TCP IP protocol stack model data from an application residing at the application layer is loaded into the data load field of a TCP segment residing at the transport layer. This TCP segment also contains port information for a recipient software application residing remotely. This TCP segment is loaded into the data load field of an IP datagram residing at the network layer. Next this IP datagram is loaded into a frame residing at the data link layer. This frame is then encoded at the physical layer and the data transmitted over a network such as an internet Local Area Network LAN Wide Area Network WAN or some other suitable network. In some cases internet refers to a network of networks. These networks may use a variety of protocols for the exchange of data including the aforementioned TCP IP and additionally ATM SNA SDI or some other suitable protocol. These networks may be organized within a variety of topologies e.g. a star topology or structures.

The example computer system includes a processor e.g. a CPU a Graphics Processing Unit GPU or both a main memory and a static memory which communicate with each other via a bus . The computer system may further include a video display unit e.g. a Liquid Crystal Display LCD or a Cathode Ray Tube CRT . The computer system also includes an alphanumeric input device e.g. a keyboard a UI cursor controller e.g. a mouse a drive unit a signal generation device e.g. a speaker and a network interface device e.g. a transmitter .

The disk drive unit includes a machine readable medium on which is stored one or more sets of instructions and data structures e.g. software embodying or used by any one or more of the methodologies or functions illustrated herein. The software instructions may also reside completely or at least partially within the main memory and or within the processor during execution thereof by the computer system the main memory and the processor also constituting machine readable media.

The instructions may further be transmitted or received over a network via the network interface device using any one of a number of well known transfer protocols e.g. HTTP Session Initiation Protocol SIP .

The term machine readable medium should be taken to include a single medium or multiple media e.g. a centralized or distributed database and or associated caches and servers that store the one or more sets of instructions. The term machine readable medium shall also be taken to include any medium that is capable of storing encoding or carrying a set of instructions for execution by the machine and that cause the machine to perform any one or more of the methodologies illustrated herein. The term machine readable medium shall accordingly be taken to include but not be limited to solid state memories optical and magnetic media and carrier wave signals.

In some example embodiments a system and method is shown that allows a host to determine whether or not to use a fragment in the generation of a final document. In some cases this final document may be an online document. Further this determination may be based upon a determination as to whether a property of a fragment is to be overridden. These properties may be written as XML based attributes or tags. A host may generate a host setting to facilitate a determination as to whether to use a fragment or host in the generation of a final document.

The Abstract of the Disclosure is provided to comply with 37 C.F.R. 1.72 b requiring an abstract that will allow the reader to quickly ascertain the nature of the technical disclosure. It is submitted with the understanding that it will not be used to interpret or limit the scope or meaning of the claims. In addition in the foregoing Detailed Description it can be seen that various features are grouped together in a single embodiment for the purpose of streamlining the disclosure. This method of disclosure is not to be interpreted as reflecting an intention that the claimed embodiments require more features than are expressly recited in each claim. Rather as the following claims reflect inventive subject matter lies in less than all features of a single disclosed embodiment. Thus the following claims are hereby incorporated into the Detailed Description with each claim standing on its own as a separate embodiment.

