---

title: Module interrogation
abstract: Module interrogation techniques are described in which modules configured to rely upon one or more operating system features are interrogated to determine which features are used and by which modules. A module is loaded that is configured to interact with a plurality of features provided by an operating system. Using one or more redirection techniques, calls made by the module to access features of the operating system are redirected to alternate functionality. Based on the redirection, data is generated to indicate the features of the operating system that are used by the module. The techniques may be performed for each of a plurality of modules to populate a database that relates features of the operating system to the plurality of modules.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08117625&OS=08117625&RS=08117625
owner: Microsoft Corporation
number: 08117625
owner_city: Redmond
owner_country: US
publication_date: 20080319
---
An operating system may provide a variety of features e.g. tools functions interfaces services and so forth which modules e.g. application modules plug ins drivers extensibility modules and so on developed by third party developers may utilize to take advantage of the operating system. Thus when a developer makes changes to a feature of the operating system the changes may affect various third party modules that have been developed to utilize the feature. For example when changes are made to one or more features of a print subsystem the changes may affect a plurality of printer drivers that rely upon the one or more features. However the developer may not know exactly which printer drivers use the one or more features. Due to the number of different third party printer drivers that may be supported by the operating system it may difficult to determine which features are relied upon by each printer driver.

One traditional technique used to determine features of an operating involves individually running and testing each module. In the case of printer drivers a test print job may be sent to each printer driver to capture calls that are made from the drivers to features available from the operating system. However testing a large number of printer drivers with a test print job may take considerable time. Further it may be difficult to arrive at a suitable test print job that causes each printer driver to trigger the set of operating system features with which the developer is concerned. Another traditional technique limits test testing to a sampling of the available printer drivers e.g. top 5 or 10 . However this technique does not provide complete information regarding which printer drivers use which features of the operating system. Accordingly traditional techniques may be complex time consuming and or provide incomplete results.

Module interrogation techniques are described in which modules configured to rely upon one or more operating system features are interrogated to determine which features of the operating system are used and by which modules. A module is loaded that is configured to interact with a plurality of features provided by an operating system. Using one or more redirection techniques calls made by the module to access features of the operating system are redirected to alternate functionality. Based on the redirection data is generated to indicate the features of the operating system that are used by the module. The techniques may be performed for each of a plurality of modules to populate a database that relates features of the operating system to the plurality of modules.

This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter nor is it intended to be used as an aid in determining the scope of the claimed subject matter.

When a developer updates removes or otherwise changes features e.g. tools functions interfaces services and so on provided by an operating system the changes may affect a variety of third party modules e.g. applications plug ins extensions drivers and so on that may rely upon the changed features. Accordingly the developer may be interested in knowing which third party modules rely upon the various features that are being updated. However a wide range of optional features may be provided only some of which may be employed by each particular module. Thus it becomes difficult for the developer to determine the dependencies that exist between for multiple modules and the operating system e.g. which features are being used and by which modules.

Accordingly module interrogation techniques are described in which dependencies of modules to features of an operating system are determined. In an implementation an interrogation tool may statically manipulate one or more modules to determine the dependencies of the modules on operating system features. In an implementation a plurality of printer drivers may be specified by a developer to determine which printing features of an operating system are used by the printer drivers. Printing features may include features provided by a printing subsystem as well as those of a graphics subsystem. A variety of other examples of operating system functionality and features that may be interrogated are also contemplated.

In an implementation various redirection techniques may be employed to redirect calls made by a module to the interrogation tool or other alternative functionality configured to log the calls. One redirection technique involves overwriting an import address table IAT of the module being manipulated to redirect calls that are made to the operating system. Another redirection technique involves overwriting an export address table EAT of an operating system dynamic link library DLL to redirect calls that are made to functions exported by the DLL. A variety of other redirection techniques are also contemplated. Based on the redirection the interrogation tool may generate a log for each module that indicates dependencies of the module upon operating system features. The interrogation tool may output the logs files to populate a database that relates a plurality of module to available features of the operating system.

In the following discussion an exemplary environment is first described that is operable to perform module interrogation techniques. Exemplary procedures are then described that may be employed in the exemplary environment as well as in other environments. Although these techniques are described as employed within an exemplary computing environment in the following discussion it should be readily apparent that these techniques may be incorporated within a variety of environments without departing from the spirit and scope thereof.

In the following description a referenced component such as computing device may refer to one or more entities. Therefore by convention reference may be made to a single entity e.g. the computing device or multiple entities e.g. the computing devices the plurality of computing devices and so on using the same reference number.

Processors are not limited by the materials from which they are formed or the processing mechanisms employed therein. For example processors may be comprised of semiconductor s and or transistors e.g. electronic integrated circuits ICs . In such a context processor executable instructions may be electronically executable instructions. Additionally although a single memory is shown for the computing device a wide variety of types and combinations of memory may be employed such as computer readable storage media examples of which include random access memory RAM hard disk memory video memory removable medium memory and other types of computer readable media.

The one or more processors are illustrated as executing an operating system which is also storable in the memory . Memory also includes a variety of applications and related program data . The one or more processors may retrieve and execute computer program instructions from applications to provide a wide range of functionality to the computing device including but not limited to office productivity email media management printing networking web browsing and so forth. A variety of program data is contemplated examples of which include office documents multimedia files emails data files web pages user profile and or preference data and so forth.

Processor in addition to executing the operating system is further illustrated as executing an interrogation tool which may also be stored in the memory . While depicted as a stand alone module in the interrogation tool may also be implemented as a sub module of another application . Interrogation tool is representative of functionality of the computing device that is operable to perform module interrogation techniques described herein. In particular the interrogation tool may operate to determine dependencies of a variety of modules to various features e.g. tools functions interfaces services and so on that are provided through the operating system .

The interrogation tool may manipulate a plurality of modules to intercept calls made by the modules to the operating system . For instance various redirection techniques may be employed to redirect calls made by a module to the interrogation tool and or an alternative implementation of the functionality being called so that the interrogation tool may log or otherwise track the calls. One redirection technique involves overwriting an import address table IAT of the module being manipulated to redirect calls that are made to the operating system . Another redirection technique involves overwriting an export address table EAT of a dynamic link library DLL of the operating system to redirect calls that are made to functions exported by the DLL. A variety of other redirection techniques are also contemplated. Based on the redirection the interrogation tool may generate a log for each module that describes dependencies of the module upon features of the operating system .

In example environment of the computing device is illustrated as configured to perform module interrogation techniques in relation to various printing functionality which may be provided through the computing device and in particular the operating system . While certain aspects are described herein in relation to printers and print functionality those of skill in the art will appreciate that the described techniques for module interrogation are applicable in a variety of contexts and with a wide range of operating system functionality and corresponding modules. The described printing functionality printers and printer drivers are but one example of the various functionality peripheral devices and corresponding drivers that are contemplated.

By way of example operating system is illustrated as including a print subsystem which may be configured to provide a variety of core tools related to printing functionality of the computing device . Operating system may also include a graphic subsystem which may implement a variety of export functions callable to perform a variety of graphics processing functions. The export functions may be arranged as one or more dynamic link libraries DLLs of the operating system .

The graphics subsystem may be configured to render various graphical objects for printing as well as for other tasks. For instance the graphics subsystem and in particular the export functions may be callable to perform drawing of lines and curves font rendering shading and other graphics operations. Thus graphics subsystem is representative of a variety of functionality to facilitate output of graphic data to output devices such as to a monitor a printer or other peripheral devices. The print subsystem and graphics subsystem may each be configured to provide one or more respective application programming interfaces APIs that are callable by third party modules to provide printing functionality and graphics rendering functionality respectively.

One or more printer drivers may be executed on the processor to facilitate output of print data via corresponding printing devices . The operating system may support a variety of print drivers . Thus a variety of printer drivers may be stored in the memory and executed on the processor to enable computing device to interact with a variety of corresponding printing devices . As noted the printer drivers facilitate output of print data that may be produced by the computing device such as through operation of the applications .

Generally the printer drivers represent third party modules that provide interfaces between the applications and the printing functionality of the operating system as well as interfaces between the operating system and corresponding printing devices . The print subsystem may include various printing application programming interfaces APIs system drivers functions and other core tools . A particular one of the printer drivers may represent a driver developed by a third party e.g. a printer manufacturer for a corresponding one of the printing devices . Further each printer driver may use different operating system features and correspond to a different printer .

In operation an application may generate print data which is illustrated as stored in memory . For instance in a word processing program a user may create a formatted text document and then select a print command to cause output of the document on a printing device . When a print command of an application is selected the application may output print data and interact with the print subsystem to access printing functionality available through the operating system and to create a print job. The operating system and print subsystem may process and format the print job for output to a printing device communicatively connected to a computing device . A printer driver facilitates communication between the computing device and a corresponding printing device and may operate to format print data related to the print job in a language and or format understandable by the printing device .

A printer driver may be configured to use various core tools provided via the print subsystem to output the print data via the printing device . Printer driver may also be configured to use various export functions available from the graphics subsystem . Thus each of the print drivers may have dependencies to a variety of operating system features including both the core tools of the print subsystem and the export functions of the graphics subsystem . In an implementation the interrogation tool may be configured to interrogate the plurality of printer drivers to determine the dependencies between the printer drivers and features of the operating system .

Thus the interrogation tool is representative of functionality to manipulate various modules such as the illustrated printer drivers to determine dependencies generate related data and log the dependencies. The interrogation tool may output the data generated through interrogation of a plurality of modules to populate a database that relates to available features of the operating system .

For instance depicts a dependency database stored in memory that may be generated through operation of the interrogation tool . The dependency database is illustrated as including module data and interrogation data . The module data may describe various modules to be interrogated. For instance module data may designate a set of printer drivers to be interrogated for dependencies on printing features of the operating system . Based on the module data interrogation tool may interrogate the designated printer drivers and or other designated modules. Interrogation data is representative of results of interrogation performed by the interrogation tool . For example interrogation data may be configured as a plurality of logs corresponding to each interrogated module or other data sufficient to indicate the dependencies of modules upon features of the operating system . Further discussion of module interrogation techniques that may be performed by interrogation tool may be found in relation to the following procedures.

Generally the functions described herein can be implemented using software firmware hardware e.g. fixed logic circuitry manual processing or a combination of these implementations. The terms module functionality engine and logic as used herein generally represent software firmware hardware or a combination thereof. In the case of a software implementation for instance the module functionality or logic represents program code that performs specified tasks when executed on a processor e.g. CPU or CPUs . The program code can be stored in one or more computer readable memory devices. The features of the techniques to provide module interrogation are platform independent meaning that the techniques may be implemented on a variety of commercial computing platforms having a variety of processors.

The following discussion describes techniques related to module interrogation that may be implemented utilizing the previously described environment systems and devices. Aspects of each of the procedures may be implemented in hardware firmware or software or a combination thereof. The procedures are shown as a set of blocks that specify operations performed by one or more devices and are not necessarily limited to the orders shown for performing the operations by the respective blocks. In portions of the following discussion reference may be made to the exemplary environment of .

Calls are redirected that are made to the operating system to access the plurality of features by the module block . For instance interrogation tool may redirect calls made by application to the graphics subsystem using a variety of redirection techniques. In general the interrogation tool may operate to redirect calls that are made to operating system functionality to substitute functionality provided via the interrogation tool . Examples of redirection techniques that may be employed include but are not limited to function overwriting address table modification code replacement static redirection and so forth. The substitute functionality that is provided through the redirection permits determining for each module analyzed corresponding features of the operating system that are used by the module. Additional discussion of redirection techniques that may be employed by interrogation tool may be found in relation to the following figures.

Based on the redirection one or more of the operating system features are determined that are used by the module block . Continuing the preceding example the interrogation tool may determine one or more features that are used by the application . For instance assume the application calls a curve render function included with export functions . The call may be redirected via the interrogation tool to an alternate function configured to log or otherwise track the call. In this manner the interrogation tool intercepts the original call made to the operating system . The alternate function to which the call is redirected may then duplicate the functionality provided by curve render function and or callback to the curve render function. The interrogation tool may be configured to perform a variety of such function redirections to track interaction of the application with a suite of features that are provided via the operating system . Typically a module such as the application in this example may use a subset of the available features provided by the operating system . Using the module interrogation techniques described herein a subset of available features used by a particular module may be identified.

Then data is stored that corresponds to the module that indicates the features of the operating system which are used by the module block . For example the interrogation tool may generate a log file for each interrogated module. The log files indicate for a corresponding module the features of the operating system identified as being used by a module. The log files may be used to populate a database that relates modules to available features of the operating system . For instance the dependency database of may store interrogation data corresponding to a variety of modules which are interrogated by the interrogation tool such as applications printer drivers other device drivers and so forth. A developer may reference the dependency database to understand the dependencies of various modules to features of the operating system .

Each of the printer drivers is interrogated to identify printing features of an operating system used by the printer drivers block . For instance a plurality of printer drivers as in may be interrogated by interrogation tool to determine dependencies to printing features provided via the operating system . More particularly printer drivers may be interrogated to determine dependencies to core tools provided by a print subsystem and to export functions provided by the graphics subsystem .

In general interrogation tool behaves as if it were the operating system to interrogate the printer drivers . In an implementation the interrogation tool may initiate communication with a printer driver being interrogated. The interrogation tool may be configured to manipulate entry points to the printer driver such that the printer driver believes it is interacting with the operating system . To establish communication the printer driver may negotiate communication protocols with the interrogation tool . As part of this negotiation a printer driver may provide a list of features of the operating system that the printer driver is configured to use. For instance the printer driver may provide a list of functions to populate an import address table that the printer driver uses to import various functions from one or more DLLs of the operating system . In this example the interrogation tool acting as the operating system intercepts the list that is provided by the printer driver . Thus the interrogation tool may identify directly from a printer driver at least some of the features of the operating system used by the printer driver .

In an implementation the interrogation tool may use a list of functions identified by a printer driver to determine additional interrogations to perform. For instance interrogation tool may use one or more redirection techniques to redirect calls made by the printer driver to the identified functions such that the calls are redirected to the interrogation tool and or an alternate implementation of the function provided by the interrogation tool . The interrogation tool may then manipulate the printer driver to cause one or more calls to the identified functions. Based on the redirection interrogation tool may intercept the one or more calls to identify features of the operating system that are used by the printer driver . Further discussion of interrogation and redirection techniques that may be employed by interrogation tool may be found in relation to the following figure.

A log file corresponding to each printer driver is generated the log file describing the printing features used by the corresponding printer driver block . Based on the interrogation of the plurality of printer drivers a log file may be generated which describes the list of functions identified by the printer driver . In addition the log file may include additional information regarding features of the operating system used by the printer drivers that is determined through manipulation of printer drivers by the interrogation tool .

The log files are output to populate a database that relates the printing features of the operating system to the plurality of printer drivers block . Log files generated through interrogation of the printer drivers may be stored in memory of the computing device . In particular log files and or other types of interrogation data generated via the interrogation tool may be stored in a dependency database as shown in . A dependency database may be maintained to relate modules including the printer drivers to features of the operating system .

When a database such as dependency database has been populated with interrogation data the dependency database may be exposed via the web. This exposure may enable a developer to search the database query the database reference drivers or other modules search for particular features of the operating system and so forth. In particular a web based user interface may be exposed to enable a variety of user interactions with the dependency database . In this manner a developer may determine which modules are likely to be affected by changes made to a particular feature of the operating system . This may permit the developer to quickly identify modules that use a particular feature which the developer intends to alter update remove or otherwise change. Accordingly the developer is able to focus attention and resources on the identified modules.

In an implementation the log files and or other interrogation data may be configured as extensible markup language XML files. Each XML file may include data to identify a corresponding driver indicate features used by the driver the date of interrogation and so forth. While the dependency database is depicted in memory that is local to the computing device it is noted that interrogation data generated via the interrogation tool may also be used to populate a dependency database maintained at a remote storage location. The dependency database may be made accessible to plurality of computing devices and users over a network. For instance XML files representing interrogation data for a plurality of printer drivers may be communicated over a network to a remote storage location. The XML files may be retrieved from local or remote storage to populate a dependency database . In an implementation a parser tool may operate on the XML files to populate the dependency database maintained locally or remotely.

As noted previously interrogation tool may be configured to automatically perform interrogation of a plurality of modules on a periodic basis. For example the interrogation tool may periodically cycle through a designated group of printer drivers to determine corresponding dependencies to features of the operating system . The results of a periodic interrogation may be stored locally or remotely as interrogation data . A parser tool may process these results to populate the dependency database . In this manner the dependency database may be periodically updated through the interrogation tool and or a parser tool automatically and without user intervention.

An import address table of the driver is overwritten to redirect calls made to a print subsystem by the driver block . For example the printer driver may be configured to call an open printer function which is part of the core tools . To use the open printer function the printer driver may include a pointer to the open printer function in an import address table. When the printer driver is loaded the interrogation tool may operate to overwrite the pointer to open printer in the import address table with a pointer to an alternate implementation of the function that is provided by the interrogation tool . Thus calls made to the open printer function are redirected to the interrogation tool which may then log or otherwise track the calls. Of course many redirections may be made to various functions e.g. core tools of the print subsystem that may be called by the printer driver using an import address table.

An export address table of a graphics subsystem dynamic link library DLL is overwritten to redirect calls made to export functions all of the graphics subsystem by the driver block . For example to output a print job the printer driver may be configured to use one or more export functions provided by the graphics subsystem . For the purposes of example assume that the printer driver calls a draw line function provided by the graphics subsystem . The export functions including the draw line function may be provided via one or more dynamic link libraries DLL of the graphics subsystem . The DLLs may include an export address table that provides pointers addresses and or other suitable location data to identify the location of the export functions . Thus a module importing functions from the DLL may reference the export address table to determine a location of the functions.

The interrogation tool may operate to load a DLL that contains the draw line function and overwrite a pointer to the draw line function in the export address table with a pointer to an alternate implementation of draw line function that is provided by the interrogation tool . Thus calls made to the draw line function are redirected to the interrogation tool which may log or otherwise track the calls. Of course many redirections may be made to various functions e.g. export functions of the graphics subsystem that may be imported by the printer driver using the export address table of one or more DLLs.

A print job is simulated to initiate one or more calls by the driver block . Based on the redirections in the preceding examples the interrogation tool may capture calls made by the printer driver to both the print subsystem and the graphics subsystem . The interrogation tool may be configured to manipulate the printer driver to cause various calls to be made to the operating system . For instance the interrogation tool may simulate a print job. The print job is simulated in the sense that content may not actually be printed through the printer driver and the interrogation may not be dependent upon actual print data . Rather the interrogation tool statically manipulates various entry points of the printer driver to cause the printer driver to behave as if it was receiving and processing a print job. The interrogation tool communicates with the printer driver as though it was the operating system and may trigger a defined set of entry points for each printer driver that it interrogates. For example the interrogation tool may initiate communication and intercept a list of functions identified by the printer driver as described in relation to .

In addition the interrogation tool may simulate processing of various types of data to trigger corresponding responses e.g. calls to various features of the operating system from the printer driver . For instance the interrogation tool may statically call the print driver with individual triggers to simulate text processing bit blips graphics primitives and so on. The interrogation tool may be configured to provide the same set of individual triggers to each printer driver interrogated.

The one or more calls are intercepted to identify features of the print subsystem and graphics subsystem used by the driver block . In the preceding example the calls that are made by a printer driver responsive to the simulated print job are intercepted based upon the previously described redirections. The calls are redirected through the interrogation tool which processes the calls and provides responses to the printer driver . Based on the intercepted calls the interrogation tool identifies the features of the print subsystem and graphics subsystem that are used by the printer driver responsive to the simulated print job.

A log file corresponding to the driver is generated to describe the identify features block . Continuing the above example interrogation tool generates interrogation data corresponding to the printer driver that describes the features of the print subsystem and graphics subsystem that the printer driver used responsive to the simulated print job. The interrogation data may be configured as a log file which may be stored in the memory of the computing device .

A determination is made whether another driver is to be interrogated block . When there is another driver to interrogate the procedure returns to repeat blocks for the next driver. In this manner the interrogation tool may be configured to cycle through a plurality of printer drivers and identify features of the operating system used by each of the plurality of printer drivers . Further the interrogation tool may be configured to interrogate a defined set of printer drivers periodically such that interrogation data is frequently updated. The interrogation tool may be configured to perform periodic interrogation automatically and without user intervention.

When there is not another driver to interrogate the log files generated for each driver are output block . For instance log files generated through operation of the interrogation tool that correspond to one or more printer drivers may be used to populate a dependency database as previously described.

Although the module interrogation techniques have been described in language specific to structural features and or methodological acts it is to be understood that the invention defined in the appended claims is not necessarily limited to the specific features or acts described. Rather the specific features and acts are disclosed as exemplary forms of implementing the claimed invention.

