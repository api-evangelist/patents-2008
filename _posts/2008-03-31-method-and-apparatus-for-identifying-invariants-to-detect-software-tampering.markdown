---

title: Method and apparatus for identifying invariants to detect software tampering
abstract: Various embodiments of a method and an apparatus for identifying invariants to detect software tampering is disclosed. In one embodiment, a method of identifying invariants associated with a software package comprises applying a machine learning technique to a plurality of images associated with a software package to identify a memory location within the plurality of images to be a candidate invariant, wherein the plurality of images comprises images of memory used during execution of the software package and determining an invariant based on the candidate invariant.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08108931&OS=08108931&RS=08108931
owner: Symantec Corporation
number: 08108931
owner_city: Mountain View
owner_country: US
publication_date: 20080331
---
This invention was made with Government support under Contract FA8750 08 9 0009 awarded by the Air Force. The Government has certain rights in this invention.

Embodiments of the present invention generally relate to securing computer systems and more particularly to a method and apparatus for identifying invariants to detect software tampering.

A computer is a basic necessity for almost every single person in the world. Generally computers are regularly used for a variety of applications for example communication with other computers and or people entertainment occupational productivity business applications personal or social applications and the like. Various software packages are installed on the computer and designed to utilize one or more computer resources to enable the performance of such applications. As the usage of computers increases threats to operations at the computer also increase. Malware is one of the most predominant threats.

Generally malware i.e. malicious software code is configured to surreptitiously disrupt and degrade the stability and performance of the computer. As a result the computer ceases to operate properly. One of the current techniques used by malware to avoid detection by security software e.g. SYMANTEC NORTON products is to bury itself within a memory space e.g. includes a working set and file system structures of a legitimate operating system and or a software application component. Certain software applications such as security software utilize complex mechanisms for protection from tampering and subversions. Regardless many software applications are unable to detect such tampering perpetrated by malware. Due to improvements in the functionality of malware legitimate operating system and software applications are increasingly vulnerable to malicious attacks tampering . As a result ensuring software integrity has become a growing concern.

One of the methods for verifying software integrity of a particular software application is to specify invariants such as memory invariants and virtual machine invariants and determine whether any of the specified invariants are present in one or more images e.g. virtual machine images memory images and the like associated with the particular software application. Generally memory invariants comprise static invariants in which byte sequences in memory do not change with multiple executions of the particular software application or semantic invariants in which relationships between the byte sequences in the memory do not change. Accordingly virtual machine invariants are byte sequences or relationships between byte sequences in a virtual machine image that do not change. For example if a first field is associated with a first value then a second field is associated with a second value. Furthermore the first value and second value may be semantically consistent even if the first value and second value are not literally consistent. For example the first field may always be associated with an address of a static invariant regardless of where the static invariant is located in the memory or the image e.g. virtual machine image .

The presence of the specified invariants denotes a strong likelihood that the particular software application has not been tampered. On the other hand the absence of one or more of the specified invariants signifies a potential tampering with the particular software application. For example malicious software code may hide in an area of memory associated with a particular invariant. Hence a subsequent image does not include the particular invariant because the malicious software code resides in the area of memory previously occupied by the particular invariant. As such the determination of an absence of the particular invariant from the subsequent image indicates an attack on the particular software application by the malicious software code.

Unfortunately the specification of the invariants used for the prevalent software integrity verification method described above is limited to a static manual analysis of the images. In other words such a method requires a human analyst to produce a set of invariants associated with a software application for monitoring a system. Moreover the set of invariants is produced by manually analyzing the images and the software documentation. Using the human analyst to perform such a manual analysis is time consuming costly and inefficient. Accordingly such a method does not apply machine learning techniques to the images to determine the set of invariants.

Accordingly there is a need in the art for a method and an apparatus for identifying reliable invariants to detect software tampering where the reliable invariants were determined through a dynamic analysis of images using machine learning techniques.

Embodiments of the present invention comprise a method and an apparatus for identifying invariants to detect software tampering. In one embodiment a method for identifying invariants to associated with a software package comprises applying a machine learning technique to a plurality of images associated with a software package to identify a memory location within the plurality of images to be a candidate invariant wherein the plurality of images comprises images of memory used during execution of the software package and determining an invariant based on the candidate invariant.

It is appreciated that various embodiments of the system comprise one or more computers that are not coupled to any communication network. For example the system may comprise the computer and the computer but not the network . One or more reliable invariants may be identified from the computer using one or more machine learning techniques without any network access. The one or more reliable invariants may be stored on a physical storage device e.g. CD or DVD which is transported to the computer where the one or more reliable invariants are used to detect software tampering.

As described above hackers desire to surreptitiously invade and disrupt operations at a computer such as the computer . Occasionally such hackers hide malicious software code and rootkits within a memory space associated with a software package such as an operating system or software application. Using one or more invariants identified through the computer the security system monitors the computer for software tampering.

The computer is a computing device e.g. a laptop a desktop a tablet a Personal Desk Assistant PDA a mobile phone and the like that comprises a central processing unit CPU various support circuits and a memory . The CPU may comprise one or more commercially available microprocessors or microcontrollers that facilitate data processing and storage. The various support circuits facilitate the operation of the CPU and comprise at least one of clock circuits buses power supplies cache input output circuits and the like. The memory comprises at least one of read only memory ROM random access memory RAM disk drive storage optical storage removable storage and the like. The memory comprises various software packages such as a snapshot module a feature module and an invariant module . The memory further comprises various data such as feature information and a plurality of images e.g. disk image files . The plurality of images are illustrated as image . . . image and hereinafter referred to as the images . As explained further below the images further comprise a plurality of invariants hereinafter referred to as the invariants .

The security system comprises a plurality of computing devices that are configured to secure one or more client computers and systems such as the computer and the computer . Generally the security system comprises various methods and data for detecting and removing various threats to stability and or performance of the computer such as viruses Trojans malicious software code rootkits and the like. The security system may form a portion of security subscription service e.g. SYMANTEC NORTON products that monitors the computer for any such threats. As explained further below the security system employs a run time instantiation of software code for monitoring one or more invariants e.g. within the computer and detecting software tampering according to one embodiment.

The computer is a computing device that comprises a plurality of computer resources e.g. computer memory hardware configurations registers and the like which are secured by the security system . Furthermore the computer comprises a malware which is malicious software code configured to disrupt one or more operations at the computer . In one embodiment various software packages are being installed updated and or executed within the computer at any given moment. As such the various software packages are associated with a memory space which includes a portion of computer memory related to the installation and or execution of the various software packages at the computer . The malware hides within the memory space to avoid detection from the security system . For example the malware may reside in a memory location previously occupied by an invariant associated with a particular software application. Hence the security system may use one or more invariants of the invariants from the computer to monitor the memory space of the particular software application and or assess software integrity at the computer . Alternatively the computer includes security software e.g. SYMANTEC Norton products that monitors invariants associated with the computer using the one or more invariants of the invariants to detect the malware hiding within the memory space.

The network comprises a communication system that connects computers by wire cable fiber optic and or wireless links facilitated by various types of well known network elements such as hubs switches routers and the like. The network may employ various well known protocols to communicate information amongst the network resources. For example the network may be part of the Internet or intranet using various communications infrastructure such as Ethernet WiFi WiMax General Packet Radio Service GPRS and the like.

The snapshot module collects the images at various points e.g. freeze points during execution of the software package e.g. an operating system a software application and or any component therein . It is appreciated that the execution of the software package includes installation of the software package on the computer . In another embodiment the snapshot module collects the images before and after execution and or installation of the software package. There are various techniques for selecting freeze points e.g. saving images for analysis at fixed or periodic time intervals during a series of operations or before and after installation of the software package on various configurations trapping on exceptions or other anomalies using input from traditional behavioral security tools and the like .

As explained above the images may be generated by the snapshot module at one or more freeze points during the execution of the software package. In one embodiment the images are generated through a memory dump of the computer e.g. a translation from a physical machine to a virtual machine and vice versa . Each image of the images is a representation of a virtual machine or a physical machine and comprises each and every portion of the memory that is allocated to or currently in use by the virtual machine or the physical machine. As such the images comprise working memory associated with the software package. The working memory e.g. working set of the software package e.g. an operating system or a software application comprises one or more portions of the memory e.g. pages allocated to the execution of the software package. As explained further below the images also comprise the invariants e.g. invariant byte sequences which may be used to hide malicious software code. The security system uses the invariants to detect software tampering within a memory space of an executed software package e.g. at the computer and or assess software integrity.

In one embodiment the images are virtual machine images that represent one or more virtualized computing environments i.e. virtual machines that operate on the computer . Each virtual machine image represents a virtual machine which includes memory used by the virtual machine for one or more software applications an operating system and any related data as well as one or more registers one or more disks e.g. virtual disk and or one or more emulated hardware components. As such the invariants comprise virtual machine invariants in addition to memory invariants e.g. semantic invariants and static invariants . Similarly the virtual machine invariants may be monitored and used to assess software integrity at a system.

In operation the images are collected during the execution of the software package to determine reliable ones of the invariants associated with the software package. The invariants may be static invariants where the memory location and value remain constant throughout execution of the software package e.g. an extent with a particular offset in a Virtual Machine Disk file stores file A . The invariants may also be semantic invariants where memory locations and values may change but the relationship between the memory values do not change e.g. an interrupt handler in the software package will always point to a particular code segment even though the location of the pointer in the images may change . The invariants may also be virtual machine invariants as mentioned above.

In one or more embodiments the invariants may be used to monitor and assess the integrity of the software package in real time e.g. by the security system . For example if one of the invariants is violated during a subsequent execution of the software package then there is a strong likelihood that the malware is hiding in a computer memory e.g. a working memory associated with a software package and or the malware may have performed an operation to disrupt the execution of the software package. For example if one of the invariants comprises a pointer e.g. a reference to an address in a computer memory to a function in an Application Programming Interface API or a MICROSOFT shared library e.g. Dynamic Link Library DLL file but a computer memory within the computer comprises a pointer to another memory location e.g. another function or data instead of the function in the DLL file or the API then there is a strong likelihood that the malware has attacked the computer .

The feature module and the invariant module cooperate to identify the invariants from the images using one or more machine learning techniques or algorithms e.g. decision tree learning genetic algorithms probability distribution modeling dynamic programming algorithms i.e. longest common subsequence LCS algorithms rule learning algorithms i.e. classifiers and clustering algorithms and or the like . In one embodiment the feature module uses such machine learning techniques to identify one or more candidate invariants i.e. features from the images for extraction. It is appreciated here that the machine learning technique employed by the feature module may be an n gram analysis a bloom filter a LCS algorithm and the like including any combination thereof. In a yet another example of identifying the candidate memory candidates the feature module flags a memory location of a byte sequence comprising an opcode e.g. read as an opcode while preserving a relative positional structure between opcodes in the images .

By the way of example and not as a limitation the feature module may apply a bloom filter to the images . Generally bloom filters use hash functions to determine if a particular byte sequence in the images is present amongst the byte sequences in the images identified by the snapshot module . If the particular byte sequence is present then the particular byte sequence is extracted as a candidate invariant. In one embodiment each hash would represent a longer byte sequence where the longer byte sequence is slid like a window through the images during the extraction of the candidate invariants.

Alternatively the feature module employs an n gram analysis to extract one or more candidate invariants features from the images . Generally the n gram analysis includes examining each subsequence of n items from a larger sequence. In this embodiment the feature module examines every n bytes in the images . In one embodiment a value of n is greater than eight bytes but less than 200 bytes. The value of n may increase to be greater than 200 bytes during the analysis in order to make greater values of n computationally feasible.

In one embodiment the feature module filters the images into a smaller collection of computer memory by identifying first portions of the images that may have changed and second portions that may not have changed between the freeze points. For example the first portions may be portions of the images that have changed after the installation of the software package because the changed portions form a portion of a memory space associated with the software package. In one or more embodiments the feature module uses Rabin fingerprints e.g. a delta compression algorithm to apply to two or more images of the images e.g. an image generated before installation or execution and an image generated after installation or execution in order to filter the images . In another embodiment the feature module flags dirty memory pages to identify portions i.e. byte sequences of the images that may have changed between freeze points e.g. byte sequences there were removed from RAM and written to a hard disk least recent used byte sequences and the like .

In one or more embodiments the feature module may generate feature information which includes memory locations for the byte sequences e.g. the candidate invariants identified by one or more machine learning techniques. Accordingly the invariant module applies one or more machine learning techniques e.g. a classifier and or a clustering technique to the identified byte sequences in the feature information to determine the invariants i.e. feature selection and extraction . In one embodiment the invariant module confirms one or more of the candidate invariants as the invariants i.e. reliable invariants that may be used to verify software integrity . For example a particular candidate invariant may be confirmed as an invariant i.e. a reliable invariant if the particular invariant is present throughout most or all of the images . In one embodiment the invariant module classifies and or clusters the images based on the presence of the candidate invariants in the images . Accordingly one or more images comprising the most common candidate invariants are most like clean or free from tampering as explained below.

The invariant module further comprises a classifier and or a clustering technique. The classifier and or the clustering technique are applied to the byte sequences features extracted by the feature module e.g. the candidate invariants indicated in the feature information to identify the invariant byte sequences e.g. the invariants according to the presence of the extracted byte sequences within the images . For example the classifier may be a Bayesian Classifier build upon an application of the Bayesian algorithm . In one or more embodiments the classifier may include a Classification and Regression Trees CART classifier a C4.5 classifier a RIPPER classifier and or the like. As another example the clustering technique may be a K means technique a Fuzzy C means technique a hierarchical clustering technique and or a combination of one or more Gaussian techniques.

According to various embodiments of the present invention the invariant module trains the classifier to classify one or more images based on a presence of the candidate invariants. The one or more images may be associated with various e.g. same or different configurations e.g. hardware or software configurations operating systems and or software applications. In one embodiment the invariant module uses the images to train the classifier. Accordingly such training enables the classifier to differentiate between any two or more images such as a clean image and a compromised image. When the classifier is applied to a particular image and classifies the particular image as a clean image any candidate invariant residing the particular image is most likely a reliable invariant.

Over a period of time the classifier learns one or more rules for differentiating two or more images e.g. the clean image and the compromised image . Such rules comprise one or more invariant byte sequences i.e. the invariants . The identified invariant byte sequences are utilized e.g. by the security system to monitor memory associated with a running operating system and or software application in real time to ensure software integrity. The one or more compromised images may comprise malicious software code such as the malware . Such malicious software code may reside in a memory location associated with e.g. previously occupied by or semantically related to one or more of the invariant byte sequences. As explained herein the security system detects such software tampering perpetrated by the malicious software code on the computer using the invariant byte sequences e.g. the invariants according to one embodiment.

For example in order to classify a MICROSOFT WINDOWS XP image as most likely to be free from software tampering e.g. devoid of malicious software code and or comprises reliable invariants and or differentiate the MICROSOFT WINDOWS XP image from any other image the classifier is trained against one or more clean WINDOWS XP images one or more compromised WINDOWS XP images and or one or more images from another operating system and or software application. Similarly the classifier is trained against one or more images to differentiate an image associated with a legitimate software package i.e. goodware or operating system that has not been tampered from any other image.

In another embodiment the invariant module applies the clustering technique to the images to determine the invariants . In one embodiment the invariant module may apply the clustering technique to the candidate invariants in order to cluster the images based on similarities related to the candidate invariants. The most common ones of the candidate invariants amongst the image clusters are confirmed as the invariants . For example the images are grouped or clustered according to the presence of the candidate invariants i.e. identified and extracted features or byte sequences . Once clusters of the images are formed the candidate invariants present in most or all of the clusters of images are identified as the invariants . The invariants are used to monitor and assess the integrity of the operating system and or software application memory space for a violation of any invariant of the invariants . Furthermore the clustering technique may include a hierarchical agglomerative clustering technique to enable grouping of the images without a priori knowledge of a number of clusters.

In one embodiment the clustering technique comprises a distance function used to group or cluster the images based on the commonality of the candidate invariants in the images . As such the invariant module forms one or more groups of images having the most common candidate invariants in static memory locations. In another embodiment the distance function used by the cluster technique may cluster the images according to commonalities between byte sequences independent of their respective memory locations.

As mentioned above the security system is configured to detect software tampering by monitoring various resources e.g. computer memory hardware devices and the like at the computer and assessing integrity of a software application an operating system or any component thereof using the invariants . For example if the security system determines that a substantial number of invariants are absent from a memory space related to a particular running software application then the software application is most likely a victim of software tampering and the computer probably comprises a rootkit malicious software code e.g. the malware and or corrupted data. Accordingly the security system may alert the user of the tampered computer and or a security subscription service through the network e.g. SYMANTEC NORTON online security service . The security system may also identify and remove the malicious software code from the computer . Furthermore the security system may provide the invariant module with one or more images e.g. memory images or virtual machine images associated with various hardware software configurations to be used to train the classifier.

At step one or more images are collected during the execution of a software package. Alternatively the one or more images may be collected at various points during e.g. before and after installation of the software package. At step one or more machine learning techniques are applied to the collected images. Various embodiments of the step are further discussed below with respect to .

At step a determination as to whether one or more invariants are identified from the collected images. As explained above a classifier and or a clustering technique is applied to the collected images to identify the one or more invariants. For example the rules developed by the classifier to differentiate a clean image from a compromised image comprise the one or more invariants. As another example the one or more invariants are identified as those present in most or all of a number of clusters i.e. groups of the collected images formed by the clustering technique. If it is determined that one or more invariants identified from the collected images option YES then the method proceeds to step . At step the one or more invariants are communicated to a security system e.g. the security system of . As mentioned above the security system uses the one or more invariants to monitor and assess software integrity of the software package in run time. If at step it is determined that no invariant is identified from the collected images option NO then the method proceeds to step . At step the method ends.

At step the plurality of images e.g. the images of are filtered e.g. by the feature module of . As explained above the filtered images comprise memory that has changed between freeze points associated with execution e.g. installation of a software package. At step one or more candidate invariants are identified from the filtered images.

At step the one or more candidate invariants are extracted. At step the plurality of images are classified according to the presence of the candidate invariants. Alternatively the plurality of images may be clustered into groups based on the presence of the candidate invariants. As explained above the candidate invariants that are present in all or most of the plurality of images are confirmed as reliable invariants which may be used to detect software tampering. At step the method ends.

While the foregoing is directed to embodiments of the present invention other and further embodiments of the invention may be devised without departing from the basic scope thereof and the scope thereof is determined by the claims that follow.

