---

title: Method for automating variables in end-user programming system
abstract: A method for automating variables in an end-user programming system is disclosed. The end-user programming system comprises a script, a shared repository, at least one database, a recorder, an interpreter, and an execution engine. The script comprises at least one command describing an event comprising a data value. Each user has a uniquely identified entry set for the entries distributed in at least one database. The interpreter automatically creates a variable for a data value in a command by comparing the data value with each entry value in the entry set for the user recording the command. The interpreter automatically instantiates a variable in a command with an entry value by comparing the variable with each entry name in the entry set for the user executing the command.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08108829&OS=08108829&RS=08108829
owner: International Business Machines Corporation
number: 08108829
owner_city: Armonk
owner_country: US
publication_date: 20080522
---
This application is a continuation application claiming priority from Ser. No. 11 739 338 filed Apr. 24 2007.

Conventional end user programming systems record user activities to create a program. Consequently the program created in a conventional end user programming system contains unique data applicable only for the user who created the program. User specific data within a program prohibits the program from being shared among multiple users. Other types of conventional end user programming systems require users to record all activities performed to find correct information for a user in a database and to fill the found information into an input field within the program. Still other conventional applications and or websites often require users to manually fill in information. In conventional end user programming systems described above recording and or executing a program is laborious and time consuming. To provide a more general application programming interface a programming system typically requires programming language skill and knowledge about the programming interface which makes the system difficult for end users to use.

Thus there is a need for a method that overcomes at least one of the preceding disadvantages of current end user programming methods.

The present invention provides a method for automatically creating variables in an end user programming system wherein the end user programming system comprises a script a shared repository at least one database a recorder and an interpreter wherein a script comprises at least one command wherein a current user has an entry set stored in said at least one database each entry set being uniquely identified for each user each entry set comprising an entry the entry comprising an entry name and an entry value associated with the entry name the method comprising 

receiving a command to generalize wherein the command describes an event comprising a target and an action performed on the target said target representing an object comprising at least one data value said action comprising a user activity associated with the object and zero or more data values 

finding N entries in the entry set for the current user such that each entry value of said N entry is equal to a corresponding data value in the command wherein N is a positive integer representing a number of data values in the command 

wherein said receiving said finding said generalizing and said storing are performed by the interpreter.

The present invention provides a method for automatically instantiating variables in an end user programming system wherein the end user programming system comprises a script a shared repository at least one database an interpreter and an execution engine wherein a script comprises at least one command wherein a current user has an entry set stored in said at least one database each entry set being uniquely identified for each user each entry set comprising an entry the entry comprising an entry name and an entry value associated with the entry name wherein the execution engine performs the event described in said command the method comprising 

retrieving a command to instantiate wherein the command comprises at least one variable and describes an event comprising a target and an action performed on the target 

finding N entries in the entry set for the current user such that each entry name of said N entries is equal to a variable name of a corresponding variable in the command wherein N is a positive integer representing a number of variables in the command 

instantiating each variable in the command with an entry value of corresponding entry after said finding 

wherein said retrieving said finding said instantiating and said sending are performed by the interpreter.

The present invention provides a computer program product comprising a computer usable medium having a computer readable program code embodied therein said computer readable program code containing instructions that when executed by a processor of a computer system implement a method for automatically creating variables in an end user programming system wherein the end user programming system comprises a script a shared repository at least one database a recorder and an interpreter wherein a script comprises at least one command wherein a current user has an entry set stored in said at least one database each entry set being uniquely identified for each user each entry set comprising an entry the entry comprising an entry name and an entry value associated with the entry name the method comprising 

receiving a command to generalize wherein the command describes an event comprising a target and an action performed on the target said target representing an object comprising at least one data value said action comprising a user activity associated with the object and zero or more data values 

finding N entries in the entry set for the current user such that each entry value of said N entry is equal to a corresponding data value in the command wherein N is a positive integer representing a number of data values in the command 

wherein said receiving said finding said generalizing and said storing are performed by the interpreter.

The present invention provides a computer program product comprising a computer usable medium having a computer readable program code embodied therein said computer readable program code containing instructions that when executed by a processor of a computer system implement a method for automatically instantiating variables in an end user programming system wherein the end user programming system comprises a script a shared repository at least one database an interpreter and an execution engine wherein a script comprises at least one command wherein a current user has an entry set stored in said at least one database each entry set being uniquely identified for each user each entry set comprising an entry the entry comprising an entry name and an entry value associated with the entry name wherein the execution engine performs the event described in said command the method comprising 

retrieving a command to instantiate wherein the command comprises at least one variable and describes an event comprising a target and an action performed on the target 

finding N entries in the entry set for the current user such that each entry name of said N entries is equal to a variable name of a corresponding variable in the command wherein N is a positive integer representing a number of variables in the command 

instantiating each variable in the command with an entry value of corresponding entry after said finding 

wherein said retrieving said finding said instantiating and said sending are performed by the interpreter.

The present invention provides a method that overcomes at least one of the current disadvantages of conventional end user programming methods.

The method of the present invention is applied to an end user programming system which permits an end user to generate data contents and to create programs. In an end user programming system an end user who is not a programmer creates a program by recording user activities or by specifying data values for fill in forms. Examples of an end user programming system may be inter alia programming by demonstration visual programming forms based programming natural language programming etc.

While creating a program the user often enters in data specific to the user who is creating the program e.g. a name phone number or job title . Or the data may be appropriate only in the user s context e.g. job function or organization which is a data environment of the end user programming system at the time of creating the program. Contrary to conventional end user programming methods such as macros which record specific data values as provided at the time of creating the program the method of present invention generalizes a data value specific to a user by automatically creating a variable for the data value. A database entry associated with the user recording the program is employed in creating a variable from a data value. The program that is recorded references not the specific data values but the abstracted variables in the database. Therefore the present invention enables users of an end user programming system to easily share a program.

When a user executes a program containing automatically created variables the method of present invention automatically instantiates variables with data specific to the user executing the program. A database entry associated with the user executing the program is employed in providing a user specific data value to a variable. Therefore the user can easily execute a program created by other users without manually changing the program to translate the data values in the program.

The present invention makes creating and executing of a program simple and efficient for users. Moreover users of the present invention do not have to either master programming language skills or have expertise on application programming interfaces APIs and or the environment of the end user programming system. Therefore the method of present invention overcomes disadvantages of conventional end user programming.

The term variable relates to a piece of data stored in a memory device. A variable comprises a name and a value wherein the name represents the portion of the memory device where the data is stored and the value represents actual data stored in the portion of the memory device. Consequently a variable may have different values over time for the same name. In a computer program a variable is often used to represent data values that vary from one execution to another. In the present invention because a program created by one user with user specific data values is stored as a program with variables instead of the provided data values other users can easily execute the program with data values specific to the user who is executing the program. The term automation means automatic creation and or automatic instantiation.

The script comprises at least one command. A command may be generated by recording events performed by a user or by writing down an event in pseudo natural language. See description in infra for the details on a command. Events are performed within an application context which provides a data environment for a script to be recorded or to be performed. Examples of an application context may include inter alia a web context document written in Hypertext Markup Language HTML .

The shared repository stores scripts along with additional information on the script. Examples of additional information on a script may be inter alia author of the script the time record of most recent edition on the script the number of times that the script has been used popularity rate information of the script etc. A user can create and store a script into the shared repository. A user can view edit and or run a script stored in the shared repository. A user may search and or browse the shared repository to find a script of interest.

The database comprises at least one set of entries called an entry set that is organized per user. There is at least one database in the system and a user may have multiple entries distributed in multiple databases. The entry set for each user of the present invention is uniquely identifiable. The entry set comprises at least one entry stored in any one of databases. Each entry in an entry set comprises a name of the entry called entry name and a value of the entry called entry value. An entry is accessible by the entry name and or by the entry value. Examples of a database may be inter alia a personal database built by a user a corporate database and or a community database built by an organization a context dependent database with dynamic contents etc. The term context dependent database means a database linked to various types of data comprising a runtime data environment. Examples of data comprising a runtime data environment may be inter alia a specific context document location information of a user network and or connection information used for a session a type of communicating device employed by a user etc. When a user access a system of the present invention employing a context dependent database an entry set for the user is dynamically established with entries stored in the context dependent database according to a runtime data environment.

A user of the present invention may create a new entry in a personal database by typing an entry name and an entry value into the sidebar. See description in infra for the details on the sidebar. All database entries for current user are made available in utilizing the present invention. Within an entry set for a specific user if more than one database is employed entries of each database may be distinguished by using a database name as a part of an entry name.

The recorder records an event performed by a user into a command. See description in infra for the details of a command. Examples of an event performed by a user may be inter alia typing of a text string clicking of a button etc.

The interpreter automatically creates variables while creating a new script and automatically instantiates variables while executing a script. The interpreter receives a command comprising a data value from the recorder identifies an entry value that is equal to each data value present in the command and rewrites the command to reference the variable name rather than the literal data value. The interpreter may receive a text input written in pseudo natural language by a user who creates a new script parse the text input into a command and then proceed with same steps as the interpreter that has received a command from the recorder. Conversely the interpreter instantiates each variable in a command with an entry value associated with an entry name that is same as the variable. Details of the interpreter operations are described in infra.

The execution engine executes a command. In executing a command the execution engine simulates an event performed by a user using the information described in the command. See description in infra for the details of a command.

Within the script frame a current script comprising at least one command is displayed. A command is a textual description of a web event. The web event may be performed by a user or by the execution engine. The textual description is not presented in a specific programming language but in a pseudo natural language. Consequently the command in the present invention is easy for an end user to understand.

A command comprises a target and an action. A target is an object on which user performs action to interact with the context. Examples of a target may be inter alia hypertext link button checkbox text box dropdown menu etc. The target may have at least one data value within the target as an element. An action is a description of user activity which is performed on a target in a same command. Examples of an action associated with a target may be inter alia go to action for a hyperlink target click action for a button target etc.

In the script frame each step beginning with an asterisk is a command. A command is an example of a command with an automatically created variable. For further details on the command see descriptions in infra.

In step the interpreter receives a command and an entry set for a current user. The command is a description of an event comprising a target and an action performed on the target. The command may be generated by the recorder or by the interpreter. The recorder generates a command by recording an event into a target and an action as a user performs the event. Where an event is described in a pseudo natural language text by a user a parser generates a command for the event by parsing the text into a target and an action. The parser may be implemented as a part of the interpreter.

In step the interpreter compares a data value in the command with all entry values in the entry set for the current user to find a same entry value in the entry set with the data value in the command.

In step the interpreter determines whether there is an entry in the entry set having an entry value that is equal to the data value being compared. If the interpreter determines that there is the entry having an entry value that is equal to the data value being compared then in step the interpreter identifies the entry generalizes the matched data value by creating a variable having a variable name that is equal to an entry name of the identified entry and replaces the data value being compared in the command with a flag string followed by the name of the variable. In one embodiment the flag string is your to indicate a user that the variable demands data specific to the user. If the interpreter determines that there is no entry in the entry set having an entry value that is equal to the data value being compared in the command then the interpreter proceeds to step .

In step the interpreter determines whether all data values in the command have been generalized. If the interpreter determines that there is no more data values to generalize in the command the interpreter in step stores the generalized command in the shared repository and terminates generalizing the command. If the interpreter determines that there is a data value in the command left for generalization the interpreter loops back to step and repeats the method described in with a next data value in the command.

The command in supra is a generalized command with an automatically created variable. While recording a user types 918312062515 into a textbox named this number the interpreter creates a variable by looking up the entry set for the user finding an entry value that is equal to 918312062515 and replacing 918312062515 with a flag string your and a variable named home phone digits which is same as the entry name associated with the entry value 918312062515. 

In step the interpreter receives a command to instantiate. The command may be received from a recorded script in the shared repository or may be generated by a parser. The command is recorded into the shared repository by the method described in supra. A command may be generated from a pseudo natural language description of an event given by a user. The parser parses the pseudo natural language description into a command comprising a target and an action. The parser may be a part of the interpreter.

In step the interpreter scans the command to find the flag string. In step the interpreter determines whether the flag string was found in step . If the interpreter determines that the flag string has been found the interpreter in step compares a variable name following the flag string with all the entry names in the entry set for current user B. If the interpreter determines that the flag string has not been found in step the interpreter terminates instantiating the command.

In step the interpreter determines whether a variable was found in step . If the interpreter determines that the command comprises a variable having a variable name that is equal to an entry name in the entry set for the current user then the interpreter in step instantiates the flag string and the variable with an entry value of the entry associated with the entry name that is equal to the variable.

In step in case when the interpreter in step determines that there is no entry name that is equal to a variable following the flag string the interpreter notifies the user that there is no matching entry in the entry set for the current user by highlighting the command in the script window. The notified user may inter alia manually perform the command or update the entry set by creating a new entry which has an entry name same as the unfound variable name and a corresponding entry value.

In step the interpreter determines whether all flag strings are compared and instantiated. If the interpreter determines that there is no more flag string in the command the interpreter proceeds to step because all variables in the command were instantiated with entry values for the current user. In step the interpreter sends the instantiated command with entry values to the execution engine for performing an event described in the command. If the interpreter determines that there is a flag string left in the command indicating that there is a flag string in the command to instantiate the interpreter loops back to step and repeats the method described in with a next flag string.

For example a user executes the command in supra which is a command with an automatically created variable. The executing user may be different from the user who previously recorded the script and stored the script into the shared repository. The interpreter looks up an entry set for the executing user to find an entry name that is equal to a variable name in the command. If the executing user has an entry comprising an entry name that is equal to home phone digits and the entry value is 918312068979 then the interpreter instantiates the command as enter 918312068979 into the this number textbox and the execution engine would simulate a web event described in the command.

The computer system comprises a processor an input device coupled to the processor an output device coupled to the processor and memory devices and each coupled to the processor . The input device may be inter alia a keyboard a mouse a keypad a touchscreen a voice recognition device a network interface card NIC a Voice video over Internet Protocol VOIP adapter a wireless adapter a telephone adapter a dedicated circuit adapter etc. The output device may be inter alia a printer a plotter a computer screen a magnetic tape a removable hard disk a floppy disk a programmable compact disc CD a digital video disc DVD a NIC a VOIP adapter a wireless adapter a telephone adapter a dedicated circuit adapter etc. The memory devices and may be inter alia a cache a dynamic random access memory DRAM a read only memory ROM a hard disk a floppy disk a magnetic tape an optical storage such as a CD or a DVD etc. The memory device includes a computer code which is a computer program that comprises computer executable instructions. The computer code includes inter alia an algorithm used for automating variables in end user programming environment according to the present invention. The processor executes the computer code . The memory device includes input data . The input data includes input required by the computer code . The output device displays output from the computer code . Either or both memory devices and or one or more additional memory devices not shown in may be used as a computer usable medium or a computer readable medium or a program storage device having a computer readable program embodied therein and or having other data stored therein wherein the computer readable program comprises the computer code . Generally a computer program product or alternatively an article of manufacture of the computer system may comprise said computer usable medium or said program storage device .

Thus the present invention discloses a process for deploying or integrating computing infrastructure comprising integrating computer readable code into the computer system wherein the code in combination with the computer system is capable of performing a method for automating variables in end user programming environment according to the present invention.

While shows the computer system as a particular configuration of hardware and software any configuration of hardware and software as would be known to a person of ordinary skill in the art may be utilized for the purposes stated supra in conjunction with the particular computer system of . For example the memory devices and may be portions of a single memory device rather than separate memory devices.

While particular embodiments of the present invention have been described herein for purposes of illustration many modifications and changes will become apparent to those skilled in the art. Accordingly the appended claims are intended to encompass all such modifications and changes as fall within the true spirit and scope of this invention.

