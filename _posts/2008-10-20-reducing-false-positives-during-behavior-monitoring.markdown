---

title: Reducing false positives during behavior monitoring
abstract: A program installed on a computer system registers and is placed on an installed program list or an uninstall software list. A check of the uninstall software list (USL) is added as a secondary verification mechanism to a behavior monitoring engine. A signature-based malware scan engine may be used. If the scan engine does not flag the file as malware, then the behavior monitoring engine monitors the activities performed by the underlying application. When the behavior monitoring engine flags an activity as potentially suspicious, the USL is checked to determine if the application running the process is on the USL. If so, then the process is treated as legitimate and there is no need to alert the user. Only if both the behavior is flagged as suspicious and the application performing the behavior is not on the USL will the user receive an alert as to the potential malware.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08079085&OS=08079085&RS=08079085
owner: Trend Micro Incorporated
number: 08079085
owner_city: Tokyo
owner_country: JP
publication_date: 20081020
---
The present invention relates generally to the monitoring of behavior of a computer system to detect suspicious behavior. More specifically the present invention relates to reducing false positives during behavior monitoring.

Malware such as viruses spyware adware worms etc. is software designed to infiltrate and or damage computer systems without their owners consent. Malware attacks computer systems both large and small such as workstations desktop computers notebook computers tablet computers personal digital assistants PDAs smart mobile telephones smartphones etc. and often causes great damage. Needless to say it is very important to protect computer systems against various forms of malware.

Many software applications have been developed to protect computer systems against various types of malware. Examples of anti malware software products include Symantec s Norton AntiVirus McAfee s VirusScan Plus BitDefender s Total Security etc. Typically once such a software application has been installed on a computer system it may scan the entire computer system i.e. the files on the computer system or a selected portion of the computer system from time to time to detect and remove known types of malware. This technique uses a virus scan engine and virus patterns or virus signatures to scan the files looking for matches to any of the virus patterns.

Recently it has become more commonplace for anti malware software products to forgo complete directory scanning and use of the virus patterns and instead watch for suspicious behavior on the computer system as a clue as to which files to scan. As hard drives become increasingly large and thus increasingly more time consuming to scan as a whole it is expected that this trend towards monitoring system behavior will continue. Different from the traditional signature based defense behavior monitoring watches all activities of all processes in real time. If any activity is malicious the process is stopped immediately. This technique does not use the pattern or signature of a particular malware in order to protect against that malware.

In such systems it is necessary to monitor system behavior and then apply a set of rules to the monitored behavior in order to determine whether an activity is suspicious or not. If an activity is suspicious it may be blocked and a message is sent to the user asking how to handle the activity. is a prior art diagram illustrating an example of a user received pop up window in response to the detection of suspicious behavior. The offending process is identified and the user is permitted to quarantine the process terminate the process or allow the process to continue execution.

One of the problems encountered with this approach is false positives. Many legitimate applications perform activities and cause computer system events that might be seen by a behavior monitoring engine as suspicious. These false positives unduly interrupt users with pop up windows which can become an annoyance or worse the legitimate application is blocked. Furthermore when users are presented with an annoying number of pop up requests to verify the permissibility of an action there is a tendency for the response by the user to become automatic meaning the user simply allows a process to continue execution without thinking or without reading the alert in detail. This automatic response by the user ends up actually increasing the likelihood of a malicious process being accidentally permitted by the user to continue execution. Altering the rules or thresholds in order to reduce these false positives can have the negative impact of increasing the likelihood that a malicious process would not be flagged at all.

Considering the drawbacks of previous approaches a behavior monitoring technique that reduces false positives without increasing the likelihood of false negatives is desirable.

A program installed on a computer system registers and is placed on an installed program list or an uninstall software list. A check of the uninstall software list USL is added as a secondary verification mechanism to a behavior monitoring engine. A signature based malware scan engine may be used. If the scan engine does not flag the file as malware then the behavior monitoring engine monitors the activities performed by the underlying application. When the behavior monitoring engine flags an activity as potentially suspicious the USL is checked to determine if the application running the process is on the USL. If so then the process is treated as legitimate and there is no need to alert the user. Only if both the behavior is flagged as suspicious and the application performing the behavior is not on the USL will the user receive an alert as to the potential malware. The check of the USL may be used in conjunction with or without use of a scan engine.

Reference will now be made in detail to specific embodiments of the invention including the best modes contemplated by the inventors for carrying out the invention. Examples of these specific embodiments are illustrated in the accompanying drawings. While the invention is described in conjunction with these specific embodiments it will be understood that it is not intended to limit the invention to the described embodiments. On the contrary it is intended to cover alternatives modifications and equivalents as may be included within the spirit and scope of the invention as defined by the appended claims. In the following description specific details are set forth in order to provide a thorough understanding of the present invention. The present invention may be practiced without some or all of these specific details. In addition well known features may not have been described in detail to avoid unnecessarily obscuring the invention.

Legitimate applications being installed on common operating systems such as a Microsoft operating system register themselves with the operating system and add themselves to a list of currently installed programs. Typically a software application adds program files and folders to a hard disk of a computer system and adds related data to the registry so that the application runs properly. The operating system then keeps track of these installed applications using a list of currently installed programs.

As known in the art a Microsoft registry for example is a database repository for information about a computer s configuration. The registry contains information that the operating system continually references during operation such as profiles for each user a list of the programs installed on the computer and the types of documents each can create property settings for folders and program icons what hardware exists on the system and which ports are being used. The registry is organized hierarchically as a tree and is made up of keys and their subkeys hives and value entries.

In this example shown is a portion that includes an uninstall registry key and a list of subkeys that identify the applications that have registered with the operating system. Typically these subkeys identify an application s product code GUID. Values for a particular subkey are illustrated. Thus this list of subkeys under uninstall registry key identifies those legitimate applications that have registered i.e. an Uninstallable Software List USL or the list may also be termed an Installed Software List or a Registered Software List. Once registered a user may remove software through a control panel if there is a subkey that represents the software.

Although unlikely it is possible for malware to register itself but if it did a user could remove the malware through the control panel. Most malware will focus on how to infect a system rather than registering itself. Typically malware will install itself but not register and thus the present invention can use this information i.e. lack of registering to determine if it is legitimate software or not.

In an embodiment of the present invention a check of the USL is added as a verification mechanism to a behavior monitoring engine which is itself a secondary verification mechanism to a signature based malware scan engine. A signature based malware scan engine is commonly accessed via a Virus Scanning Application Programming Interface VSAPI . Virus scan engines operate by scanning files and comparing them to signatures of known malware. If the scan engine does not flag the file as potential malware then the behavior monitoring engine monitors the activities performed by the underlying application. When the behavior monitoring engine flags an activity or process as potentially suspicious the USL is checked to determine if the application running the process is present on the USL. If so then it may be assumed that the process is legitimate and there is no need to alert the user. Only if both the behavior is flagged as suspicious and the application performing the behavior is not on the USL will the user receive an alert as to the potential malware. This technique greatly reduces the number of false positives and improves the user s experience.

If at suspicious behavior is detected then at it is determined if the application causing the behavior is on the USL. It is determined if the application is listed on the USL by using the registry. For example shows an example of a registry editor . Included within this editor is an uninstall folder a highlighted application K Lite and related data install location and uninstall string. This information for example may be used to help identify the application. The two strings install location and uninstall string help to locate the image path and folder of legitimate software. Combined with other information such as a digital signature and a file creation date these strings help make the result more accurate.

If the application is on the USL then at the process and its application is automatically permitted to continue execution without user intervention. If however the behavior is not on the USL then at the user is alerted as to the suspicious behavior and asked how to proceed. The user may be alerted in a variety of manners including a technique as shown in . Alternatively the behavior monitoring engine the scan engine or other application may take steps to quarantine the application remove the application terminate the process perform recovery etc.

It should be noted that the alerting step of the permitting stepped of or the automatic blocking step of may all be modified based on implementation preferences for the scan engine or behavior monitoring engine. In some computer systems for example the administrator may not even wish to allow the user to allow a suspicious activity and thus may simply automatically block any behavior identified as suspicious whose application is not on the USL i.e. blocking without prompting the user first Likewise the administrator may wish to alert the user when malware has been blocked even though no action is required on the part of the user.

There is the possibility that some malware may register itself with the operating system and add itself to the USL. While there is a very low likelihood of this for purely malicious software such as viruses or worms certain malware is on the borderline between malicious and innocent. Such borderline malware may include spyware or adware which can be intentionally installed by the user yet still have negative effects on user experience and has the potential to be used maliciously. While the present invention would permit such registered malware to perform otherwise suspicious activities without user verification the risk of this becoming a serious problem is minimal. If the software no matter how malicious registers itself with the operating system and adds itself to the USL the user can easily uninstall the program should problems arise. Furthermore the signature based malware detection engine can easily identify such registered programs using a virus pattern if these programs have been deemed by an antivirus detection company to be undesirable or risky.

Use the present invention may be detected by installing on a test computer malware that performs known suspicious behavior that is known to be detectable by a behavior monitoring engine and also installing and registering that malware so it appears on the USL. If the malware is allowed to operate without its behavior being flagged then it is likely that the test computer is running software that implements the present invention.

Behavior monitoring engine includes a behavior capturing module that acts to capture system behavior using driver hooks. Behavior monitoring engine also includes rule database used to store the rules and policies to be applied during behavior monitoring. Behavior monitoring engine also includes a state machine that performs a matching algorithm using the rules and policies in the rule database.

It should be noted that each of the components in the behavior monitoring engine may either be stand alone components or may be combined with other components in a computer system. For example rule database need not be a stand alone database. Rather this database may be located in memory that is shared with other computing tasks such as memory operated by computer system . Likewise state machine may be operated by a processor of computer system .

An uninstall software list USL comparison module in communication with the behavior monitoring engine is arranged to examine the USL to determine if the application flagged by the engine is located on an uninstall software list of the computer system. The USL may exist in the registry of the operating system or in another suitable location. A malware rejection module then acts to alert the user to potentially block the application or to take other action if the behavior monitoring engine indicates the behavior is suspicious and the application is not on the USL. A signature based scan engine may optionally be included in order to first scan the computer system for malware before performing behavior monitoring.

CPU is also coupled to a variety of input output devices such as display keyboard mouse and speakers . In general an input output device may be any of video displays track balls mice keyboards microphones touch sensitive displays transducer card readers magnetic or paper tape readers tablets styluses voice or handwriting recognizers biometrics readers or other computers. CPU optionally may be coupled to another computer or telecommunications network using network interface . With such a network interface it is contemplated that the CPU might receive information from the network or might output information to the network in the course of performing the above described method steps. Furthermore method embodiments of the present invention may execute solely upon CPU or may execute over a network such as the Internet in conjunction with a remote CPU that shares a portion of the processing.

In addition embodiments of the present invention further relate to computer storage products with a computer readable medium that have computer code thereon for performing various computer implemented operations. The media and computer code may be those specially designed and constructed for the purposes of the present invention or they may be of the kind well known and available to those having skill in the computer software arts. Examples of computer readable media include but are not limited to magnetic media such as hard disks floppy disks and magnetic tape optical media such as CD ROMs and holographic devices magneto optical media such as optical disks and hardware devices that are specially configured to store and execute program code such as application specific integrated circuits ASICs programmable logic devices PLDs and ROM and RAM devices. Examples of computer code include machine code such as produced by a compiler and files containing higher level code that are executed by a computer using an interpreter.

Although the foregoing invention has been described in some detail for purposes of clarity of understanding it will be apparent that certain changes and modifications may be practiced within the scope of the appended claims. Therefore the described embodiments should be taken as illustrative and not restrictive and the invention should not be limited to the details given herein but should be defined by the following claims and their full scope of equivalents.

