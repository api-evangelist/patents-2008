---

title: Dynamic database access via standard query language and abstraction technology
abstract: Methods, systems, and articles of manufacture that allow saved abstract queries to be referenced from within query statements constructed using standard query languages, such as Structured Query Language (SQL), are provided.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07890524&OS=07890524&RS=07890524
owner: International Business Machines Corporation
number: 07890524
owner_city: Armonk
owner_country: US
publication_date: 20080430
---
This application is a continuation of U.S. patent application Ser. No. 11 847 246 filed Aug. 29 2007 now U.S. Pat. No. 7 475 066 which is a continuation of U.S. patent application Ser. No. 10 839 486 filed May 5 2004 issued as U.S. Pat. No. 7 310 637 on Dec. 18 2007. Each of the aforementioned related patent applications is herein incorporated by reference in its entirety.

The present invention generally relates to data processing and more particularly to providing access to saved abstract queries via standard query language constructs such as Structured Query Language SQL constructs.

Databases are computerized information storage and retrieval systems. A relational database management system is a computer database management system DBMS that uses relational techniques for storing and retrieving data. The most prevalent type of database is the relational database a tabular database in which data is defined so that it can be reorganized and accessed in a number of different ways. A distributed database is one that can be dispersed or replicated among different points in a network. An object oriented programming database is one that is congruent with the data defined in object classes and subclasses.

Regardless of the particular architecture in a DBMS a requesting entity e.g. an application or the operating system demands access to a specified database by issuing a database access request. Such requests may include for instance simple catalog lookup requests or transactions and combinations of transactions that operate to read change and add specified records in the database. These requests are made using high level query languages such as the Structured Query Language SQL and application programming interfaces API s such as Java Database Connectivity JDBC . For example SQL is used to make interactive queries for getting information from and updating a database such as International Business Machines IBM DB2 Microsoft s SQL Server and database products from Oracle Sybase and Computer Associates. The term query denominates a set of commands for retrieving data from a stored database. Queries take the form of a command language such as SQL that lets programmers and programs select insert update find out the location of data and so forth.

Unfortunately generating queries using SQL may require a detailed understanding of the possibly complex physical layout of the underlying database and interpretation of cryptic field names. For some applications to facilitate the query building process an abstraction model may be utilized that in effect hides some of the complexities of the underlying database physical layout from users. The abstraction model may include logical fields with recognizable names that map to corresponding physical fields of the underlying database. Abstract queries may be generated that contain conditions based on the logical fields. Upon issuance the logical fields of an abstract query may be mapped to corresponding physical fields to create a concrete query. For some applications abstract queries may be saved allowing subsequent users to reuse the saved abstract queries without having to generate their own. The concepts of data abstraction and abstract queries are described in detail in the commonly owned co pending application Ser. No. 10 083 075 entitled Improved Application Portability And Extensibility Through Database Schema And Query Abstraction filed Feb. 26 2002 herein incorporated by reference in its entirety.

While abstraction models and saved abstract queries make it easier and more efficient for users to access data use of SQL and API s such as JDBC and ODBC will likely continue to be used for at least two reasons. First SQL is a widely used language for extracting and manipulating data residing in databases especially relational databases. In fact a large number of existing applications rely on SQL JDBC and ODBC to handle database transactions from within the particular applications. Second some users simply prefer to use SQL as a data analysis and reporting tool. SQL while cumbersome to use does offer a tremendous amount of functionality for manipulating and presenting data.

It would be desirable to be able to utilize this functionality in conjunction with saved abstract queries for example allowing those comfortable with standard query languages such as SQL to generate queries based on saved abstract queries. Unfortunately as they are currently configured standard query languages cannot be used to access saved abstract queries. Accordingly there is a need for providing access to saved queries in query statements generated with standard query languages such as SQL.

The present invention is generally directed to a method article of manufacture and system for providing access to saved queries in query statements generated with standard query languages such as SQL.

One embodiment provides a method of gathering data from a database. The method generally includes receiving a query statement including query constructs of a first query language format and a reference to at least one previously defined abstract query containing logical fields corresponding to physical fields of the database obtaining the referenced abstract query and generating a query executable against the database based on the referenced abstract query as modified by the first query language constructs.

Another embodiment provides a computer readable medium containing a program for automatically generating physical query statements. When executed by a processor the program performs operations generally including receiving a query statement the query statement including data manipulation logic in a first query language format and a reference to a previously defined abstract query containing data manipulation logic related to logical fields corresponding to physical fields of the database merging the data manipulation logic contained in the query statement with the data manipulation logic contained in the saved abstract query and generating a query executable against the database based on the combined data manipulation logic.

Another embodiment provides a data processing system generally including a database a query interface and a query execution component. The query interface allows users to construct query statements including query constructs in a first query language format and a reference to at least one previously defined abstract query containing logical fields corresponding to physical fields of the database. The query execution component is configured to generate a query executable against the database based on the previously defined abstract query as modified by the first query language constructs.

Embodiments of the present invention allow saved abstract queries to be referenced from within query statements constructed using standard query languages such as Structured Query Language SQL . As a result users already familiar with standard query languages may be able to easily modify a saved abstract query using standard query constructs e.g. SELECT UNION etc. to achieve a desired result such as returning a desired portion of the results set returned by the saved abstract query or merging results sets returned by multiple saved abstract queries.

As used herein the term database generally refers to a collection of data arranged for ease and speed of search and retrieval. While the following description focuses on generating transaction statements for relational databases those skilled in the art will recognize the methods described herein may be used with any type of database including an object relational database and an XML based database. As used herein the term abstract query generally refers to a query having one or more conditions based on logical fields that are mapped to actual physical fields of an underlying database.

As used herein the term user may generally apply to any entity utilizing the data processing system described herein such as a person e.g. an individual interacting with an application program or an application program itself for example performing automated tasks. While the following description may often refer to a graphical user interface GUI intended to present information to and receive information from a person it should be understood that in many cases the same functionality may be provided through a non graphical user interface such as a command line and further similar information may be exchanged with a non person user via a programming interface.

One embodiment of the invention is implemented as a program product for use with a computer system. The program s of the program product defines functions of the embodiments including the methods described herein and can be contained on a variety of signal bearing media. Illustrative signal bearing media include but are not limited to i information permanently stored on non writable storage media e.g. read only memory devices within a computer such as CD ROM disks readable by a CD ROM drive ii alterable information stored on writable storage media e.g. floppy disks within a diskette drive or hard disk drive and iii information conveyed to a computer by a communications medium such as through a computer or telephone network including wireless communications. The latter embodiment specifically includes information downloaded from the Internet and other networks. Such signal bearing media when carrying computer readable instructions that direct the functions of the present invention represent embodiments of the present invention.

In general the routines executed to implement the embodiments of the invention may be part of an operating system or a specific application component program module object or sequence of instructions. The computer program of the present invention typically is comprised of a multitude of instructions that will be translated by the native computer into a machine readable format and hence executable instructions. Also programs are comprised of variables and data structures that either reside locally to the program or are found in memory or on storage devices. In addition various programs described hereinafter may be identified based upon the application for which they are implemented in a specific embodiment of the invention. However it should be appreciated that any particular program nomenclature that follows is used merely for convenience and thus the invention should not be limited to use solely in any specific application identified and or implied by such nomenclature.

In the following reference is made to embodiments of the invention. However it should be understood that the invention is not limited to specific described embodiments. Instead any combination of the following features and elements whether related to different embodiments or not is contemplated to implement and practice the invention. Furthermore in various embodiments the invention provides numerous advantages over the prior art. However although embodiments of the invention may achieve advantages over other possible solutions and or over the prior art whether or not a particular advantage is achieved by a given embodiment is not limiting of the invention. Thus the following aspects features embodiments and advantages are merely illustrative and unless explicitly present are not considered elements or limitations of the appended claims.

In general embodiments of the invention can be implemented in any of a variety of hardware software configurations. A particular embodiment includes at least one client computer and at least one server computer. The client s and server s may be executing on a common machine or may be deployed in distributed environment in which the client s and server s communicate via a network. However the client server model is merely one model in which the present invention may be implemented and persons skilled in the art will recognize other possibilities. Furthermore embodiments of the present invention can apply to any appropriate hardware configuration regardless of whether the computer systems are complicated multi user computing apparatus single user workstations network appliances that do not have non volatile storage of their own or handheld devices such as personal digital assistants PDAs pocket PCs and mobile telephones. Further it is understood that while reference may be made to particular software products the invention is not limited to a particular software product standard or version nor to any particular programming language. Accordingly persons skilled in the art will recognize that the invention is adaptable to other software products and that the invention is also adaptable to future versions of a particular software product as well as to other suitable software products presently unknown.

With reference now to figures illustrates a relational view of hardware and software components of a data processing system in accordance with one embodiment of the invention. The system illustratively includes a client computer system with a query building interface for accessing data in a database via a database management system DBMS . As illustrated the database may accommodate data in a variety of different physical representations such as extensible markup language XML representation relational representation or some other data representation .

As illustrated however the system may include a data repository abstraction DRA component that in effect shields a user from the details of the particular physical representation of the database . The DRA component may define a set of logical fields that map to underlying physical fields of the underlying database . Users may be able to create abstract queries based on the logical fields via the query building interface . Upon issuance of abstract queries a query execution component may convert an abstract query into a physical or concrete query suitable for issuance against the database by mapping logical fields of the abstract query to physical fields of the particular physical representation based on the field definitions in the DRA component . The mapping of abstract queries to physical queries by the query execution component is described in detail in the previously referenced U.S. patent application Ser. No. 10 083 075.

As illustrated for some embodiments one or more saved abstract queries or any other type of previously defined queries may be available for issuance via the query building interface . As previously described saved abstract queries may facilitate data gathering by allowing users to re use the saved abstract queries without having to create their own queries to gather the same results.

In some cases users familiar with conventional query languages such as SQL may wish to access the saved abstract queries from within statements using query constructs from those conventional query languages e.g. SELECT FROM UNION etc. . For example a user may only be interested in a limited subset of the data returned in the results set of the saved abstract query and may wish to include one or more SQL statements to SELECT the subset of interest or to limit the number of records returned to WHERE certain conditions are met. Accordingly the results set returned by the saved abstract query may be treated as a separate set of data queried by the SQL statement . To facilitate discussion the following examples will illustrate SQL statements that reference saved abstract queries as a particular but not limiting example of the types of statements that may refer to saved abstract queries in accordance with the embodiments of the present invention.

Embodiments of the present invention accommodate the submission of SQL statements which reference saved abstract queries . As will be described in greater detail below references to saved abstract queries may be included in place of relational table identifiers. The SQL statements may be generated via the query building interface which may present the user with a list of available saved abstract queries and allow the user to add SQL constructs.

The process of integrating SQL with abstract queries and more particularly saved abstract queries referenced in the SQL statement will be described in more detail below. In one embodiment the query execution component includes an SQL translator to combine logic in a SQL statement with logic in a saved abstract query referenced thereby to eventually create a physical query that is executable against the database . For some embodiments the query execution component may first convert the saved abstract query into an physical SQL query which the SQL translator may then modify based on the logic in the SQL statement to generate a new physical query. For other embodiments however a new abstract query may be generated by modifying the saved abstract query based on logic in the SQL statement that references it.

Operations begin at step when an SQL statement a database transaction statement referencing a saved abstract query is received. For example the query execution component may receive the SQL statement from a user application from which the SQL statement may have been generated via the query building interface .

At step a new abstract query is generated by modifying the saved abstract query based on logical constructs in the SQL statement . As illustrated in the SQL translator may generate the new abstract query and pass it on to the query execution component for issuance. In generating the new abstract query the SQL translator may perform any suitable processing functions such as parsing the SQL statement accessing the saved abstract query and modifying the saved abstract query accordingly for example based on a set of translation rules.

At step the query execution component converts the new abstract query into a physical query and executes it against the database. As previously described the query execution component may generate the physical query by converting logical fields contained in the new abstract query into corresponding physical fields of the database based on logical field definitions in the data repository abstraction component .

However The SQL statement of can be processed by embodiments of the present invention. Among other functionality embodiments of the present invention provide facilities to allow users to submit SQL queries against results sets returned from issuing saved abstract queries as if they were standard tables comprising one or more columns and rows residing in a relational database.

Those skilled in the art will recognize that the expression between the SELECT and FROM keywords denotes all the columns of the saved abstract query being selected from. The reference to the saved abstract query in effect represents a collection of data that is a results set returned from issuing the referenced save abstract query . In other words references to saved abstract queries may be thought of as references to queryable data sources such as relational tables or other objects.

As shown the SQL statement is querying a saved abstract query My Query owned by a particular account SMITH. It should be noted that If the statement that is illustrated was a standard SQL statement i.e. directed to relational tables the term SMITH would denote the schema owner or account and the term My Query would denote the referenced table that is owned by the schema owner. Conceptually this query represents the following select all the rows from MY Query . The rows returned should include values for all columns that make up MY Query .

It should be noted that while the examples described herein are SQL based other embodiments of the present invention may accommodate other well known programming languages such as Java . It is well known that the JDBC API is used to interface Java program modules to databases. illustrates exemplary code utilizing Java and JDBC according to one embodiment of the present invention.

The top portion of the sample code presented in is used to prepare and enable a program and the session in which it is running for managing database transactions. Preparatory steps may include loading required drivers setting appropriate property values opening and maintaining a connection to the database management system and selecting an appropriate template or class for managing a query and its results set. The portion of code labeled is a segment of code where the SQL statement is being submitted via a component of the JDBC API. The results set returned by the DBMS is handled by the section of code marked .

While the SQL statements discussed up to this point have been relatively simple i.e. involving a simple SELECT . . . FROM statement it should be understood that more complex SQL statements such as any statements that abide by the American National Standards Institute ANSI SQL standards may also be accommodated by embodiments of the present invention. Even though saved abstract queries and data repository abstraction components are generally designed to simplify access to the physical data and spare the user from having to use SQL to extract and present data in a preferred manner embodiments of the present invention allow for the leveraging of the rich functionality offered by SQL to further process data available via saved queries .

For instance SQL may allow users to work with data at the logical level. For example to retrieve a set of rows from a table or saved abstract query according to embodiments of the present invention users may define a condition to filter out certain rows that do not meet specified conditions. All rows satisfying the conditions are retrieved in a single step and can be passed as a unit to the user to another SQL statement or to an application. Users need not deal with the rows one by one nor do they have to worry about how data is physically stored or retrieved as this is handled by the referenced saved abstract query and mappings defined by the DRA component . SQL and API interfacing functionality provided by embodiments of the present invention also allow a large user base that is comfortable using SQL and in some cases prefer using SQL to work with saved abstract queries .

Another reason users may prefer to use SQL is the abundance of tools available in the marketplace that can be used to generate SQL statements. By supporting SQL directly and providing access to the metadata of saved abstract queries via standard SQL ODBC JDBC means these SQL generation tools may be used to build query statements referencing abstract queries that can be handled by embodiments of the current invention.

Various examples of SQL statements that may be handled by embodiments of the present invention are presented in Tables I II and III below. The SQL statement illustrated in Table I below is slightly more complex than the ones discussed thus far. This particular example further demonstrates how an SQL statement can also be used to extract a subset of data from a saved abstract query . For example the SQL statement shown in TABLE 1 below specifies that the results set include only the PATIENT ID and Age columns from the data abstraction component owned by SMITH called Patients with Breast Cancer . In contrast the SQL statement above specifies that only a subset of data available in the saved query called Patients with Breast Cancer be retrieved.

Users that are knowledgeable and experienced with SQL can also develop some complex queries using a wide variety of constructs including OUTER JOINS and UNIONS as long as the SQL translator supports such constructs. For instance the SQL statement illustrated in TABLE II below utilizes a LEFT OUTER JOIN 

Persons skilled in the art will recognize that the exemplary query above logically joins two saved abstract queries in exactly the same manner that such a SQL statement would join two relational tables. The join is based on the Patient ID field that appears in both of the referenced saved abstract queries.

Table III shown above illustrates yet another example of a complex query. This particular SQL statement employs the well known UNION construct. Those skilled in the art will understand that a SQL statement employing one UNION is actually a combination of two SQL statements. Accordingly a SQL statement that includes the UNION construct twice is a combination of three SQL statements. In other words the UNION construct acts as a link between SQL statements. As the term UNION implies the result sets of the separate SQL statements are combined before being presented to users. This particular SQL statement will be described in further detail with reference to .

Just as illustrated the creation of a physical query based on a SQL statement SELECT FROM SMITH. My Query illustrates the creation of a physical query based on the SQL statement of TABLE III. Again illustrates the creation of a physical query based on a simple SELECT statement which simply reads all data contained by the referenced saved abstract query. In contrast the SQL statement of TABLE III is structurally very different from the statement described with reference to . For instance the statement of Table III can be separated into two separate SQL statements 1 SELECT Patient ID Age from SMITH. Patients with Breast Cancer and 2 SELECT Patient ID Age from SMITH. Patients with Bone Cancer .

As illustrated in the SQL translator generates two new abstract queries and corresponding to the two separate SQL statements components of the UNION statement shown above. The SQL translator may also generate a query substitution form which provides simplified representation of the input SQL statement with the queries removed. The query substitution form is used to track what the actual statement will finally look like. In the case of the UNION statement of the current example the query substitution form may look like UNION . The query execution component may then convert the new abstract queries into physical queries e.g. q and q based on mappings in the data repository abstraction component and combine the queries as indicated in the query substitution form to produce a new physical query .

If the user chooses to create a SQL statement that references the selected saved abstract query via the drop down the ADD SQL button can be pushed to launch a CREATE SQL STATEMENT window illustrated in . The selected saved abstract query from may be presented in the window within an editable free form text box that allows users to create SQL statements that reference saved abstract queries . It should be understood that this type of screen is useful for users that have a reasonable understanding of SQL concepts and are able to write functional SQL syntax. Once the user is satisfied with the newly created SQL the statement can be submitted to the query execution component according to operations described above.

Referring back to a query review box is provided to allow users to review syntax of the selected saved abstract query . Users experienced with SQL may be able to determine the data represented by the saved abstract query by reviewing the syntax. In some cases created SQL statements may also be saved for later reuse. Further in some cases the new abstract query generated from the SQL statements may be saved as a new query. Options for saving SQL statements or new abstract queries based on them may be provided via windows or .

Allowing saved abstract queries to be accessed via standard query language statements such as SQL statements may allow users familiar and or comfortable with those languages to take advantage of previously saved abstract queries which may result in increased efficiency. For example rather than create a complicated query from scratch a user may be able to generate a hybrid statement that refers to a saved abstract queries that already returns data of interest. The hybrid statement may however allow the user to drill down to receive particular data of interest however without detailed knowledge of the physical representation of an underlying database holding the data.

While the foregoing is directed to embodiments of the present invention other and further embodiments of the present invention may be devised without departing from the basic scope thereof and the scope thereof is determined by the claims that follow.

