---

title: Annotating system traces with control program information and presenting annotated system traces
abstract: The signal state that a signal of interest within a system under test has during each of a plurality of cycles of operation of the system under test is stored in a trace file. In association with the signal state, information regarding a requested access to the signal state by a control program during a particular cycle among the plurality of cycles is also stored. From the trace files a presentation is generated that presents, for at least a signal of interest within the system under test, a plurality of signal state indications, each indicating a respective state that the signal had during a one of a plurality of cycles of operation of the system under test. The presentation also indicates, in a graphically distinctive manner, at least one cycle of operation during which a control program requested access to a state of the signal, so that the influence of the control program on the state of the system under test is visually apparent.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08296740&OS=08296740&RS=08296740
owner: International Business Machines Corporation
number: 08296740
owner_city: Armonk
owner_country: US
publication_date: 20080328
---
The present application is a continuation of U.S. patent application Ser. No. 10 880 730 filed on Jun. 30 2004 now abandoned entitled Methods Systems and Program Products for Annotating System Traces with Control Program Information and Presenting Annotated System Traces . Applicants claim benefit of priority under 35 U.S.C. 120 to U.S. patent application Ser. No. 10 880 730 which is incorporated by reference herein in its entirety and for all purposes.

The present invention relates in general to recording and visualizing the operation of systems under test and in particular to methods systems and program products for recording and visualizing the operation over time of a simulated system or module in which traces of particular signals are annotated with control program information.

In a typical digital design process verifying the logical correctness of a digital design and debugging the design if necessary are important steps of the design process performed prior to developing a circuit layout. Although it is certainly possible to test a digital design by actually building the digital design digital designs particularly those implemented by integrated circuitry are typically verified and debugged by simulating the digital design on a computer due in part to the time and expense required for integrated circuit fabrication.

In a typical automated design process a circuit designer enters into an electronic computer aided design ECAD system a high level description of the digital design to be simulated utilizing a hardware description language HDL such as VHDL thus producing a digital representation of the various circuit blocks and their interconnections. In the digital representation the overall circuit design is frequently divided into smaller parts hereinafter referred to as design entities which are individually designed often by different designers and then combined in a hierarchical manner to create an overall model. This hierarchical design technique is very useful in managing the enormous complexity of the overall design and facilitates error detection during simulation.

The ECAD system compiles the digital representation of the design into a simulation model having a format best suited for simulation. A simulator then exercises the simulation model to detect logical errors in the digital design.

A simulator is typically a software tool that operates on the simulation model by applying a list of input stimuli representing inputs of the digital system. The simulator generates a numerical representation of the response of the system to the input stimuli which response may then either be viewed on a display screen as a list of values or further interpreted often by a separate software program and presented on the display screen in graphical form. One common tool that is utilized to visualize the operation of a simulated system is a trace viewer sometimes referred to as an All Events Trace AET viewer that presents the states of various signals of interest within the system as they vary over time.

In current simulation environments it is possible for a control program that controls the operation of the simulator to call API functions within the simulator to read and alter values within the simulation model. The present invention appreciates that when values are modified within a model during a simulation run in this manner a designer can become confused regarding the true operation of the system. For example logic within the design under test may have driven a signal to a particular value while the control program has in fact driven the signal of interest to a different value. Because of these differences in values a designer can waste significant time in debugging the trace based upon what are thought to be errors and which are in fact external manipulations of system state.

In view of the foregoing the present invention provides improved methods systems and program products for recording and presenting the state of a system under test.

In accordance with at least one embodiment of the present invention the signal state that a signal of interest within a system under test has during each of a plurality of cycles of operation of the system under test is stored in a trace file. In association with the signal state information regarding a requested access to the signal state by a control program during a particular cycle among the plurality of cycles is also stored.

In at least one embodiment of the invention a presentation of the trace data within the trace file is generated. The presentation presents for at least a signal of interest within the system under test a plurality of signal state indications each indicating a respective state that the signal had during a one of a plurality of cycles of operation of the system under test. The presentation also indicates in a graphically distinctive manner at least one cycle of operation during which a control program requested access to a state of the signal so that the influence of the control program on the state of the system under test is visually apparent.

All objects features and advantages of the present invention will become apparent in the following detailed written description.

With reference now to the figures and in particular with reference to there is depicted an exemplary embodiment of a data processing system in accordance with the present invention. The depicted embodiment can be realized for example as a workstation server or mainframe computer.

As illustrated data processing system includes one or more processing nodes which if more than one processing node is implemented are interconnected by node interconnect . Processing nodes may each include one or more processors a local interconnect and a system memory that is accessed via a memory controller . Processors are preferably but not necessarily identical and may comprise a processor within the PowerPC line of processors available from International Business Machines IBM Corporation of Armonk N.Y. In addition to the registers instruction flow logic and execution units utilized to execute program instructions which are generally designated as processor core each of processors also includes an on chip cache hierarchy that is utilized to stage data to the associated processor core from system memories .

Each of processing nodes further includes a respective node controller coupled between local interconnect and node interconnect . Each node controller serves as a local agent for remote processing nodes by performing at least two functions. First each node controller snoops the associated local interconnect and facilitates the transmission of local communication transactions to remote processing nodes . Second each node controller snoops communication transactions on node interconnect and masters relevant communication transactions on the associated local interconnect . Communication on each local interconnect is controlled by an arbiter . Arbiters regulate access to local interconnects based on bus request signals generated by processors and compile coherency responses for snooped communication transactions on local interconnects .

Local interconnect is coupled via mezzanine bus bridge to a mezzanine bus . Mezzanine bus bridge provides both a low latency path through which processors may directly access devices among I O devices and storage devices that are mapped to bus memory and or I O address spaces and a high bandwidth path through which I O devices and storage devices may access system memory . I O devices may include for example a display device a printer a keyboard a graphical pointer and serial and parallel ports for connection to external networks or attached devices. Storage devices may include for example optical or magnetic disks that provide non volatile storage for operating system middleware and application software. Storage devices may further store data regarding the operation of a simulated or hardware system under test which is depicted as trace files .

Referring now to there is illustrated a block diagram depicting exemplary contents of system memory data processing system of during the simulation of a simulation model. As shown system memory includes a simulation model which is a logical representation of the digital design to be simulated as well as software including a testing tool e.g. simulator a simulation control program or Run Time eXecutive RTX and a viewer tool referred to herein as an All Events Trace AET viewer .

Simulator loads simulation models such as simulation model into system memory and interacts directly with the simulation models through its Application Programming Interfaces APIs . For example during a simulation run simulator resets clocks and evaluates simulation model via various APIs . In addition simulator reads values e.g. signal states or latch values at a particular point in time in simulation model utilizing GETFAC API and writes values typically for a single simulation cycle to simulation model utilizing PUTFAC API . In the illustrated embodiment simulator also provides STICKFAC API which persistently sets a signal or latch in simulation model to a specified state until unset and UNSTICKFAC API which unsets a persistently set signal within simulation model . Simulator further stores the time varying states of simulation model in trace files within storage devices so that the time varying behavior of simulation model can be analyzed and visualized. Although simulator is implemented in entirely in software it will be appreciated by those skilled in the art that the simulator can alternatively be implemented at least partially in hardware.

RTX controls simulation of simulation models such as simulation model . For example RTX loads test cases to apply to simulation model . In addition RTX delivers a set of API calls to the APIs provided by simulator to initialize configure and run simulation model . During and after simulation RTX also calls the APIs provided by simulator to check for the correctness of simulation model by accessing various signals and latches within simulation model .

AET viewer supports cycle based analysis of simulation model by presenting the states of signals or latches of interest within simulation model as a function of simulation clock cycles. In order to present this data AET viewer accesses trace files within storage devices and presents the trace data contained therein in a selected format for example in a tabular format or graphical format on a hardcopy printout or in a graphical user interface GUI presentation. As is appreciated by those skilled in the art the ability to analyze and visualize the states of time varying signals in this manner provides a powerful tool for debugging the system under test represented by simulation model .

As discussed briefly above the present invention recognizes that the utility of AET viewer in presenting and debugging the time varying state of a system under test is enhanced if access to and manipulation of the system under test e.g. simulation model by RTX is made explicit in the presentation of the trace data. In this manner changes in system state forced by RTX can be more readily distinguished from errors within simulation model . In order to permit AET viewer to present accesses to simulation model by RTX simulator preferably annotates trace files with information regarding API calls by RTX as described in detail below.

With reference now to there is illustrated a high level logical flowchart of an exemplary process by which simulator handles an API call by RTX in accordance with a preferred embodiment of the present invention. As shown the process begins at block and thereafter proceeds to block which illustrates simulator receiving an API call from a routine within RTX that requests an access to a signal or latch state within simulation model . For example as shown in the RTX routine Write Signal may issue a call to PUTFAC API the RTX routine Read Signal may issue a call to GETFAC API or the RTX routine Pin Signal may issue a call to STICKFAC API or UNSTICKFAC API . As indicated at block of each of these API calls preferably includes in its parameter list the name of the calling routine e.g. Write Signal a signal or latch name and if a PUT type access the signal or latch state to which the specified signal or latch is to be forced.

Following block the process proceeds to block which depicts simulator performing the indicated access to simulation model . For example an API call to GETFAC API causes GETFAC API to read the state of the selected signal from simulation model and an API call to PUTFAC API causes PUTFAC API to set the specified signal within simulation model to the indicated state for the given simulation cycle. Next as shown at block simulator stores in a trace file information regarding the current simulation cycle. For example as depicted within block simulator stores in association with the current simulation cycle the type of API call e.g. PUT or GET the name of the calling routine within RTX the signal name of the signal accessed in response to the API call and the signal state. As shown at block for PUT type accesses that modify a signal state within simulation model simulator may optionally store the unmodified state of the signal and again optionally a further indication of whether or not the signal state specified in the PUT type API call modified the signal state. If multiple PUT type accesses are made to a particular signal in the same cycle states are applied to the signal in the order the PUT type API calls are made so that the final signal state is that specified by the last PUT type API call prior to cycling simulation model .

Following block the process proceeds to block which depicts simulator providing a response if any to the calling RTX routine. For example if simulator received an API call to GETFAC API from Read Signal routine simulator returns to Read Signal routine the state of the specified signal. Simulator may not provide responses to other RTX calling routines or may simply provide a completion response. Following block the process terminates at block .

Referring now to there is depicted a logical representation of an exemplary trace file created by simulator in accordance with the present invention. Those skilled in the art will appreciate that the depicted data structures are merely exemplary and that a wide variety of other formats for trace files may be employed. For example in other embodiments a more compact trace file may be obtained by recording only changes to signal states or by selectively storing only user specified accesses to the simulation model e.g. only GETs or only PUTs .

As shown exemplary trace file is logically arranged as a series of tables which each stores trace data for a respective signal of interest over a simulation run. Each table logically contains multiple rows each corresponding to a particular simulation cycle and multiple columns for storing trace data associated with the cycles. In the depicted embodiment the columns in each table include a signal state column for storing the signal state during the indicated simulation cycle a calling routine name column for storing the name of an RTX calling routine if any accessing the signal during the indicated simulation cycle a call type column for storing an indication of the type e.g. GET or PUT of the RTX calling routine and an unmodified signal state column for storing the unmodified state of the signal if a PUT type routine requests access to the simulation model .

Utilizing the above information within trace files AET viewer can present a tabular or graphical representation of the trace data that indicates accesses to simulation model in response to API calls by RTX in a graphically distinctive manner. In one preferred embodiment of the present invention AET viewer presents the trace data in graphical form e.g. within a hardcopy printout or on a display device and accesses to simulation model in response to API calls by RTX are depicted in a graphically distinctive manner.

With reference now to there is illustrated a first view of an exemplary embodiment of a graphical user interface GUI generated by AET viewer within the display of a display device among I O devices based upon trace data within a trace file . In accordance with the present invention graphical representations of signal states accessed by a simulation control program such as an RTX are presented within GUI in a graphically distinctive manner.

As shown GUI includes conventional GUI components such as window control buttons pull down menus and a cursor controlled by a user input device such as a mouse. Although not illustrated GUI may of course include other additional conventional or non conventional GUI features such as tool bars scroll bars etc. to facilitate user interaction with and manipulation of GUI .

Window further contains a frame within which graphical representations of time varying signals of interest are presented. For example GUI presents within frame graphical signal representations and of the states of signals X Y and Z respectively of simulation model as a function of simulation cycles. As shown each graphical signal representation comprises a plurality of segments each representing the state of the associated signal during one or more simulation cycles. The presentation of graphical signal representations can readily be generated for example from signal state columns of the tables for the signals of interest.

In order for a user to be able to visually distinguish simulation cycles in which RTX made API calls to access signal states GUI presents signal segments accessed in response to an RTX API call in a graphically distinct manner. The distinctive display may incorporate line style line weight color reverse video underlining text or any other visually discernable parameter. Further the display parameters may be user selected for example by making appropriate selections within the View pull down menu utilizing cursor . In the depicted embodiment GUI presents segments and corresponding to signal states read from simulation model by GETFAC API in response to an RTX API call utilizing underlining. In this manner a user can determine at a glance that RTX called GETFAC API to read the state of signal X during simulation cycle and to read the state of signal Y during simulation cycles and .

GUI of AET viewer similarly presents segments corresponding to signal states forced on simulation model by PUTFAC API or STICKFAC API in a graphical distinctive manner. In the illustrated embodiment such signal states are presented utilizing dashed lines. Thus the user can readily determine that RTX forced a logic high state on signal X during simulation cycle and forced a logic high state on signal X during simulation cycles through .

As will be appreciated AET viewer can determine which segments to present in a graphically distinctive manner and which graphically distinctive characteristic to apply to such segments based upon the trace data contained in columns of tables .

GUI also advantageously provides the user with information regarding which RTX routine issued each API call. In the depicted embodiment this information is presented as flyover text in response to the user positioning cursor within abounding region surrounding a signal segment representing a GET or PUT type access to simulation model . For example GUI presents flyover text in response to cursor being positioned adjacent segment to indicate that a call to PUTFAC API was made by Write Signal routine of RTX . Similarly in the second view of GUI shown in GUI presents flyover text in response to cursor being positioned adjacent segment to indicate that a call to STICKFAC API was made by Pin Signal routine of RTX . Advantageously for PUT type accesses made by PUTFAC API and STICKFAC API the flyover text may further indicate the state of the signal would have had absent the API call e.g. 0 or 1 . The RTX routine names and unmodified signal values may be obtained by AET viewer for example from the trace data within columns and of tables . In the case in which multiple PUTs and or GETs to a signal are performed in a single simulation cycle the signal value and routine name that are presented within GUI are the last to be recorded in the record for a the simulation cycle.

As has been described the present invention supports the annotation of trace data with indications of accesses to the system under test in response to requests by a control program. The present invention further supports the presentation of the annotated trace data so that signal states accessed by the control program are presented in a graphically distinctive manner.

While the invention has been particularly shown as described with reference to a preferred embodiment it will be understood by those skilled in the art that various changes in form and detail may be made therein without departing from the spirit and scope of the invention. For example it will be appreciated that although the present invention has been described with respect to one preferred embodiment in which a software simulator is employed the inventive concepts disclosed herein are equally applicable to the debugging and presentation of system state of systems under test by a hardware simulator. In addition those skilled in the art will appreciate that the present invention is applicable not only to cycle based simulators but also to event driven simulators.

Furthermore although aspects of the present invention have been described with respect to a computer system executing software that directs the functions of the present invention it should be understood that present invention may alternatively be implemented as a program product for use with a data processing system. Programs defining the functions of the present invention can be delivered to a data processing system via a variety of storage media which include non rewritable storage media e.g. CD ROM and rewritable storage media e.g. a floppy diskette or hard disk drive but exclude communication media such as digital and analog networks. It should be understood therefore that such storage media when storing computer readable instructions that direct the functions of the present invention represent alternative embodiments of the present invention.

