---

title: Three-dimensional CAD model creating apparatus and program
abstract: Included are a table creating unit that creates, for a three-dimensional CAD model, tabular data that describes change logic for each changed state, the change logic associating a changed state with a condition to be satisfied to shift to the changed state, the changed state being a form after transformation of the three-dimensional CAD model; a data converting unit that converts each change logic set in the created tabular data into a description in a certain program language, and creates a model built-in program; an model built-in program IO unit that registers the converted model built-in program to the three-dimensional CAD model; and a three-dimensional CAD software-program unit that transforms the three-dimensional CAD model when receiving an operation for transforming the three-dimensional CAD model, based on the operation and a change logic described in a model built-in program registered to the three-dimensional CAD model.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08731874&OS=08731874&RS=08731874
owner: Mitsubishi Electric Coproration
number: 08731874
owner_city: Chiyoda-Ku, Tokyo
owner_country: JP
publication_date: 20080808
---
The present invention relates to a three dimensional CAD model creating apparatus that includes a parametric transformation function and a function of setting change logic and a program.

Generally a recent three dimensional CAD software program that creates a three dimensional CAD model implements a parametric transformation function which can transform a dimension of a shape element included in the three dimensional CAD model as desired by changing the value of a dimensional parameter of the shape element hereinafter simply a parameter . Moreover according to the parametric transformation function a plurality of parameters can be caused to have a dependence on each other by setting the parameters with a same expression or different expressions using a same variable. In addition positional relation between shape elements can be used as a parameter.

Furthermore recent three dimensional CAD software programs have a function of causing a three dimensional CAD model to have a program providing complicated branching conditions by setting the program hereinafter referred to as the model built in program and setting change logic that associates a changed state which is a form after transformation with a condition to be satisfied to shift to the changed state hereinafter the function is referred to as a programmed transformation function . According to the function an expression in which dependence between parameters is set presence or absence of shape element or the like can be changed in accordance with a conditional branch based on a desired parameter for example.

As a technology relevant to a three dimensional CAD having the parametric transformation function there is a technology for improving user operation in visibility by making an input unit for a parameter value into a tabular form for example see Patent Document 1 and Patent Document 2 . Moreover there is a technology of enabling a spreadsheet software program to be used as a unit for inputting a parameter by causing the spreadsheet software program and a three dimensional CAD software program to coordinate for example see Patent Document 3 .

The model built in program described above is created with a text editor using an IF sentence and or other sentences in a program language such as BASIC and is incorporated into a three dimensional CAD model. However not all users in various fields who use a three dimensional CAD software program such as construction designers and machinery designers are expert in programming as described above. For this reason a mistake is often made in description of a model built in program and a debugging environment for the model built in program is insufficient consequently there is a problem in that improper operation of shape transformation can be made on the value of a parameter input into a CAD in an actual use.

Moreover there is a problem in that when performing maintenance or a diversion of a three dimensional CAD model a user other than the user who creates the model built in program needs to read comprehensively descriptions of the model built in program to understand change logic defined in the model thereby resulting in extremely poor efficiency. Furthermore there is a problem in that when preparing specifications to explain details of a model built in program lots of work are required to ensure unique association between a three dimensional CAD model and the specifications because the specifications are manually produced.

The technologies according to Patent Documents 1 to 3 are technologies for assisting input of a parameter and not for assisting setting of change logic.

The present invention has been made in the light of the above and an object of the present invention is to obtain a three dimensional CAD model creating apparatus and a program that can easily set change logic.

An aspect of the present invention includes a table creating unit that creates for a three dimensional CAD model tabular data that describes change logic for each changed state the change logic associating a changed state with a condition to be satisfied to shift to the changed state the changed state being a form after transformation of the three dimensional CAD model a data converting unit that converts each change logic set in the created tabular data into a description in a certain program language and creates a model built in program an model built in program IO unit that registers the converted model built in program to the three dimensional CAD model and a three dimensional CAD software program unit that transforms the three dimensional CAD model when receiving an operation for transforming the three dimensional CAD model based on the operation and a change logic described in a model built in program registered to the three dimensional CAD model.

To help understanding first of all a parametric transformation function and a programmed transformation function are explained below. is a conceptual diagram explaining an example when using a parametric transformation function and a program transformation function included in a conventional three dimensional CAD software program.

According to the example the shape element is a hexahedron and has three parameters namely width depth and height. For example if a parameter indicating the width is given with a parameter name A upon changing the parameter A from 100 to 200 the shape element can be transformed so as to change the width thereof from 100 to 200. Accordingly the width of the shape element can be parametrically transformed. Moreover in addition to the parameter indicating the width for example by giving an expression using A to a parameter indicating the depth both of the width and the depth can be transformed in a linked manner by changing A. In other words the width and the depth can be caused to have a dependence on each other. In addition positional relation between shape elements can be set as a variable and a shape can be transformed in accordance with the variable.

In the model built in program according to the example change logic regarding parametric transformation which is branching conditions of an expression of dependence between parameters is set by descriptions from the first row to the ninth row. More specifically a parameter SIZE storing a character string is used and when large standard or small is stored in SIZE the value of A is to be 300 200 or 100 respectively in accordance with conditional branches. A change logic regarding presence or absence of shape element is set by descriptions from the 11th row to the 17th row. That is it is set that the shape elements to are always present and the shape elements and are present only when the value of A exceeds 150.

According to the conventional three dimensional CAD software program including the parametric transformation function and the programmed transformation function as described above when a user uses those functions a very inconvenient method is needed for example the user directly creates the above model built in program by using a text editor. Embodiments of the present invention mainly features creating a model built in program from conditional branches and branched results input in a tabular form so that even a user who is not familiar with program languages can create a model built in program easily. Embodiments on a three dimensional CAD model creating apparatus according to the present invention are explained below with reference to drawings. The present invention is not limited by the embodiments.

A three dimensional CAD model creating apparatus according to a first embodiment uses a generally available three dimensional CAD software program that includes the parametric transformation function and the programmed transformation function that are already described above.

The control unit further includes a three dimensional CAD software program unit a data converting unit and a table creating unit . The three dimensional CAD software program unit is implemented by executing the commercially available three dimensional CAD software program described above. The data converting unit and the table creating unit can be units implemented by calling a program created by using an API Application Programming Interface of the commercially available three dimensional CAD software program from the three dimensional CAD software program unit or can be units implemented by an originally created program unrelated to the commercially available three dimensional CAD software program.

The three dimensional CAD software program unit creates a three dimensional CAD model based on an input by the user. The three dimensional CAD model created by the three dimensional CAD software program unit is stored in the storage unit as three dimensional CAD model data . The three dimensional CAD model data includes model change logic which is setting of change logic regarding the own model and incorporated in its inside. The model change logic is incorporated in accordance with the registration of the model built in program data which is created by being converted from tabular data as described later to the three dimensional CAD model data .

Furthermore when the user inputs an operation for changing a certain parameter the three dimensional CAD software program unit transforms the three dimensional CAD model based on the input and the model change logic by using the parametric transformation function and the programmed transformation function included in the three dimensional CAD software program.

The three dimensional CAD software program unit further includes a model built in program IO unit that performs an operation of registering the model built in program data in which change logic is described in a program language stored in the storage unit to the three dimensional CAD model data and an operation of extracting the model built in program data from the model change logic which is already incorporated in the three dimensional CAD model data to the storage unit . Usually a commercially available three dimensional CAD software program often includes the function of the model built in program IO unit in this way however if it does not include the model built in program IO unit the model built in program IO unit can be separately created.

The table creating unit causes the display unit to display an input screen in a tabular form for setting change logic that associates a changed state which is a form after transformation with a condition to be satisfied to shift to the changed state for each changed state. Furthermore the table creating unit stores in the storage unit change logic as the tabular data the change logic being input by the user based on the display by using the input unit . Moreover the display unit is caused to display a tabular data that is already created and when the user performs input of editing the tabular data based on the display a change through the edition is reflected in the tabular data .

The data converting unit performs an operation of converting the tabular data to create the model built in program data described in a certain program language and an operation of converting the model built in program data to create the tabular data . The certain program language is not particularly limited and can be a general purpose program language for example BASIC or can be an originally created language. The created tabular data is stored in the storage unit . Similarly the model built in program data created by being converted from the tabular data is also stored in the storage unit .

The storage unit stores the three dimensional CAD model data including the model change logic the model built in program data and the tabular data as described above.

According to the three dimensional CAD model creating apparatus of the first embodiment configured as described above a concrete example of the tabular data and the model built in program data corresponding to the tabular data and operations of converting the tabular data and the model built in program data into each other by the data converting unit are explained below. Assuming here that the model built in program data includes part of setting change logic regarding parametric transformation and part of setting change logic regarding presence or absence of shape element similarly to the example shown in a specific example and operations are explained below. The explanation is separately made for the part of setting change logic regarding parametric transformation and for the part of setting change logic regarding presence or absence of shape element.

At the ends of the columns and the rows of the tabular data ending indexes and are described. According to the example although END is used as the ending indexes and another description can be used as long as it is fixed to a certain description.

In the first row of the tabular data described is a branched result column index that indicates a column of which right hand columns and itself are columns indicating results of conditional branching. In the second row provided is an explanation row in which an explanation of a variable name assigned to each column can be freely described. In this row in a cell in the first column from the left a fixed index name such as explanation is described.

In the third row of the tabular data provided is a variable name row in which the name of a parameter assigned to each column is to be described. In this row in a cell in the first column from the left a fixed index name such as variable name is described. In the fourth row provided is a logic row for describing therein logic for associating the parameter name of each column described in the variable name row with the value of each column of value setting rows which will be described later. In the columns of branching conditions of the logic row various kinds of comparative operators such as and 

At and below the fifth row of the tabular data provided are the value setting rows for setting a value into a logical expression that is composed of a parameter name of each column described in the variable name row and logic of each column described in the logic row . In the row change logic that associates a changed state as a form after transformation with a condition to be satisfied to shift to the changed state is described. According to the example for example change logic described in the value setting row in the fifth row is interpreted such that when conditions of SIZE being large OPTION being N A FORCE 0 and FORCE

In provided are a table starting comment row into which the description of the table name indicating row is converted and described table attribution comment rows in which the size of the tabular data the column position of the branched result column index and the descriptions in the explanation row the variable name row and the logic row are converted and described and logic description rows into which the descriptions in the value setting rows are converted and described.

The logic description rows include the descriptions of respective rows of the value setting rows and a plurality of respectively corresponding pieces of conditional branching logic. A conditional branching logic and a conditional branching logic corresponding to the value setting row of the fifth row in the field and the value setting row of the 12th row respectively are shown here and descriptions of the others of the value setting rows are omitted.

After the logic description rows a table ending comment row indicating the end of the table is described. There is a case where the three dimensional CAD model data includes a plurality of shape elements and a plurality of sets of the tabular data is created by the table creating unit . In this case in the model built in program data rows from the table starting comment row to the table ending comment row correspond to one set of the tabular data and are described so as to correspond to each set of the tabular data by using the name of a table described in each of the table starting comment row as an index. An index other than the table name can be used by giving data by additionally setting such as a table number as an index.

Because the commercially available three dimensional CAD software program is not manufactured on the assumption of the application to the first embodiment of the present invention it does not include a description format dedicated for associating the tabular data with the model built in program data which is extracted by the model built in program IO unit included in the three dimensional CAD software program unit implemented by the present software program. For this reason according to the first embodiment when creating the model built in program data as described in the table starting comment row the data converting unit is configured to cause the model built in program data to have the table starting comment row the table attribution comment rows and the table ending comment row hereinafter these three rows are referred to as table data information in order to associate the model built in program data with the tabular data by using a comment description format according to the program language. Accordingly when creating the tabular data from the model built in program data the data converting unit can determine whether a sentence described in the comment description format is just a comment description or table data information in accordance with HYO that is based on whether it is a comment row starting with the table starting comment row . Furthermore the data converting unit can acquire a format such as the size of the tabular data to be created from the table attribution comment rows including information on the number of columns and the number of rows among the table data information.

Needless to say by describing not only table data information but also various information into the model built in program data in the comment description format as required the three dimensional CAD model data can have the various information.

According to the example in although numerical values and character strings are described in the value setting rows those can be a mathematical expression as shown in . In such case a converted result by the data converting unit is the model built in program data shown in .

An example of the stored tabular data according to in the storage unit is shown in . As shown in it is preferable to store the tabular data into the storage unit in a CSV format in which each cell is separated by a comma. Although it is described in a text file because it is easy for a user to understand it it can be a binary file and moreover a delimiter can be any delimiter as long as it can separates fields.

Subsequently an operation that the data converting unit creates the model built in program data shown in from the tabular data regarding the change logic of parametric transformation shown in is explained below. are flowcharts that explain the operation.

To begin with the data converting unit opens the tabular data shown in Step S and opens the corresponding model built in program data of the three dimensional CAD model data Step S . Subsequently the data converting unit reads a table name described in the table name indicating row from the opened tabular data Step S and writes the table starting comment row into the model built in program data based on the read table name Step S . Furthermore the data converting unit reads descriptions from the first row to the fourth row of the tabular data and positions of the ending indexes and respectively Step S . The data converting unit then obtains the number of columns and the number of rows of the table from the positions of the ending indexes and and obtains which column is the branched result starting column from the branched result column index Step S . The data converting unit then writes the table attribution comment row into the model built in program data based on the obtained content Step S .

Subsequently the data converting unit advances the reading row of the tabular data by one Step S . The data converting unit then determines whether the present reading row is the final row of the tabular data Step S if it is the final row Yes at Step S the data converting unit closes the tabular data Step S closes the model built in program data Step S and terminates the operation.

If the present reading row is not the final row of the tabular data No at Step S the data converting unit reads the values of one row from the present reading row of the tabular data Step S . In the data converting unit then sets the present reading column of the values of the read one row to 2 Step S and sets the IF counter which is for counting the number of IF sentences to zero Step S .

Subsequently the data converting unit determines whether the present reading column is on the left side of the branched result column index Step S . If the present reading column is on the left side of the branched result column index Yes at Step S the data converting unit further determines whether a cell specified by the present reading row and column is blank Step S . If the cell is not blank No at Step S IF the variable name of the present reading column the logic of the present reading column the value of the cell specified by the present reading row and column and THEN are connected into one line and written into the model built in program data Step S . The data converting unit then increments the IF counter Step S advances the present reading column by one Step S and goes to Step S. At Step S if the cell is blank Yes at Step S the data converting unit goes to Step S.

At Step S if the present reading column is not on the left side of the branched result column index No at Step S the data converting unit further determines whether a cell specified by the present reading row and column is blank Step S . If the cell is not blank No at Step S the variable name of the present reading column the logic of the present reading column and the value of the cell specified by the present reading row and column are written into the model built in program data Step S . The data converting unit then determines whether the present reading column is the most right column of the table Step S if it is not the most right column No at Step S the data converting unit moves to Step S if it is the most right column Yes at Step S the data converting unit writes ENDIF as many as the number of the value of the IF counter into the model built in program data and goes to Step S in . At Step S if the cell is blank Yes at Step S the data converting unit goes to Step S.

In this way the data converting unit of the three dimensional CAD model creating apparatus according to the first embodiment creates table data information from the already created tabular data in which change logic regarding parametric transformation is set then writes the created table data information into the model built in program data . Furthermore the data converting unit reads the value setting rows one row by one row then writes logic of a conditional branch which corresponds to each of the value setting rows into the model built in program data in the program language. Similarly the data converting unit sets the size of the table and the table name from the table data information according to the inverse logic to the operation shown in . Furthermore the data converting unit creates the value setting rows by converting the logic of the conditional branches regarding parametric transformation of the model built in program data described in the program language. At that time the data converting unit creates one set of the tabular data from a part between the table starting comment row and the table attribution comment row in the model built in program data .

The tabular data in which change logic regarding presence or absence of shape element is set and a part of the model built in program data corresponding to the tabular data are explained below. When setting change logic regarding presence or absence of shape element by using the tabular data used is the tabular data in a format other than the format of the tabular data described above that sets change logic regarding parametric transformation.

To begin with the user writes into the tabular data a list of IDs of shape elements defined in the three dimensional CAD model data . is a schematic diagram that depicts the tabular data in which a list of IDs of shape elements a shape element list is written. According to the three dimensional CAD model data usually because the order of shape elements in which the shape elements are registered also has meaning the IDs of shape elements in are described in accordance with the order. It is convenient here to configure such that for example the data converting unit extracts shape elements registered to the three dimensional CAD model data from the data via the model built in program IO unit and creates the list of the shape elements shown in . The user adds a column of a desired branching condition to the tabular data in and sets change logic.

In the tabular data shown in in a case where when a plurality of conditions connected by the logic of AND is satisfied a shape element is present the branching conditions of the shape element connected by AND are described by using a plurality of columns of the branching conditions in one row. In a case where when a plurality of conditions connected by the logic of OR is satisfied a shape element is present each of the branching conditions of the shape element is described by using each of a plurality of rows that are different each other. For example an additional row is a row that is added for expressing a branching condition of the shape element . More specifically the change logic of the shape element is set such that when at least one of SIZE being large and OPTION being applied is satisfied the shape element turns to a changed state that the shape element is present in the three dimensional CAD model data .

Subsequently change logic interpretation by the data converting unit when converting the tabular data shown in into the model built in program data is explained below. Similarly to the case of creating the model built in program data from the tabular data regarding change logic of parametric transformation when converting the tabular data that sets change logic regarding presence or absence of shape element the data converting unit creates table data information and reads and converts the shape element list one row by one row.

Although there is no description of condition in the row of the shape element such row is interpreted that the element is present in the three dimensional CAD model data without condition and the interpreted content is written into the model built in program data . Regarding the row of the shape element the data converting unit writes into the model built in program data such that the shape element is present in the three dimensional CAD model data when the OPTION is applied .

When there is an additional row the data converting unit converts a branching condition which is read and converted immediately before the additional row and a branching condition which is read and converted from the additional row so as to be connected by the logic of OR. Because the shape element has two rows they are treated with OR so that when at least one of a case where SIZE is large and a case where OPTION is applied is satisfied the shape element is interpreted as it is present. In the row of a shape element the data converting unit interprets that the shape element is present in a case where FORCE 0 and FORCE

In this way the data converting unit converts the tabular data regarding presence or absence of shape element and writes it into a change logic setting part regarding presence or absence of shape element in the model built in program data . Moreover similarly to the operation of creating the tabular data regarding parametric transformation from the change logic setting part regarding parametric transformation in the model built in program data described above the data converting unit creates the tabular data regarding presence or absence of shape element from the change logic setting part in the model built in program data .

Although a row without description of condition is also considered to indicate presence in the model built in program data without condition in the example it can be configured to express presence without condition by using a specific notation such as .

Alternatively as shown in a format different from the exemplar display of the tabular data shown in can be used. According to an exemplar display of the tabular data shown in variable names and their values are all described in a logic row and branching conditions are expressed in a tabular form by describing O in a value setting row when a condition is applied. It can be configured such that negation of a condition described in a logic row is specified with a description of X . Alternatively by providing a logic row of unconditional it can be configured such that a description of O in the logic row leads to presence of a corresponding shape element in the model built in program data without condition.

According to the display examples in when branching conditions are plural and set with conditions of AND and OR the interpretation of AND is performed in the column direction of the table and the interpretation of OR is performed in the row direction however the interpretation of AND can be performed in the row direction and the interpretation of OR can be performed in the column direction.

Moreover when setting the change logic regarding presence or absence of shape element it can be configured to be capable to set presence or absence of a component including a plurality of shape elements 

Furthermore according to the explanations described above formats of the tabular data of change logic regarding parametric transformation and the tabular data of change logic regarding presence or absence of shape element are separated and the data converting unit is configured to create respective different sets of the tabular data from one piece of the model built in program data however the data converting unit can be configured to create one set of the tabular data into which the tabular data of change logic regarding parametric transformation and the tabular data of change logic regarding presence or absence of shape element are joined from one piece of the model built in program data .

As described above according to the first embodiment because it is configured to convert change logic input in tabular data and to create a model built in program described in a program language a user who is not familiar with the program language can create the model built in program. Moreover because it is configured to convert the model built in program created in this way into tabular data that has good visibility when a third person performs a diversion of a three dimensional CAD model in which change logic is set the change logic can be understood easily. In addition because unique correspondence relation is ensured between the tabular data and the model built in program the tabular data can be used as specifications for explaining the three dimensional CAD model.

According to a second embodiment a commercially available spreadsheet software program is used for the table creating unit and the tabular data is configured to be stored in the storage unit in a data format of a storage format adopted to the spreadsheet software program. The data converting unit converts the tabular data in the storage format and the model built in program data stored in the storage unit into each other.

For example assuming that a plurality of sets of the tabular data are on respective different sheets and a spreadsheet software program that can store those sheets in one file is used as the table creating unit respective sets of the tabular data in and can be stored as one file. Moreover for example as respective sets of the tabular data in and are arranged in one spreadsheet software program file sheets corresponding to respective target functional description sections in the model built in program data can be arranged accordingly the tabular data that is better organized can be configured.

In this way according to the second embodiment because it is configured to use a commercially available spreadsheet software program as the table creating unit the table creating unit does not need to be created the three dimensional CAD model creating apparatus can be produced efficiently and a user can use various functions included in the commercially available spreadsheet software program.

Although the control unit according to the first embodiment is configured to include the three dimensional CAD software program unit implemented by a commercially available three dimensional CAD software program and the data converting unit and the table creating unit implemented by an added program needless to say it can be configured to implement the three dimensional CAD software program unit the data converting unit and the table creating unit by creating a three dimensional CAD software program incorporating a program that implements the data converting unit and the table creating unit and causing a controller that includes such as a CPU to execute the three dimensional software program.

At that time it is configured to allow a user to set format setting of table data information from such as a environment setting file and to provide a function of changing tabular data information in the three dimensional CAD model data based on the format setting when the model built in program IO unit extracts the model built in program data from the three dimensional CAD model data .

By configuring in this way according to a third embodiment the user can get out tabular data in a desired format from the three dimensional CAD model data thereby making the change logic of the three dimensional CAD model data to be easily understandable for the user.

As described above the three dimensional CAD model creating apparatus according to the present invention is suitable for being applied to a three dimensional CAD model creating apparatus that includes a parametric transformation function and a function of setting change logic.

