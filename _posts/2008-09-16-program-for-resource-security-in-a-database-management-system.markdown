---

title: Program for resource security in a database management system
abstract: An inventive method is presented for resource security in a database management system having a plurality of resources, the method comprising creating a macro and a corresponding data section definition (DSECT) defining security for each resource, assembling all of the DSECTs into a load module, processing the load module to obtain source code, and assembling the source code, such that changing the source code of one resource modifies the defined security of the resource and adding new source code to the source code adds a new resource having security to the plurality of resources. The processing step can comprise loading the load module, reading a DSECT having a total number of resources, and, for each resource of the total number of resources, reading a next DSECT, finding the defined security in the next DSECT, and obtaining the source code associated with the defined security.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08886564&OS=08886564&RS=08886564
owner: CA, Inc.
number: 08886564
owner_city: New York
owner_country: US
publication_date: 20080916
---
The present invention relates generally to database security and more specifically to a system and method for resource security in a database management system.

A database management system DBMS is a suite of programs which typically manage large structured sets of data offering ad hoc query facilities to many users. A DBMS is an extremely complex set of software programs that controls the organization storage and retrieval of data fields records and files in a database as well as controlling the security and integrity of the database and its data. The DBMS accepts requests for data from one or more application programs and instructs the operating system to transfer the appropriate data. With a DBMS information systems can be modified much more easily as the organization s information requirements change. For example new categories of data can be added to the database without disrupting the existing system.

A DBMS can employ a variety of data organizational techniques including hierarchical network and relational structures as well as inverted lists and the DBMS s organization is not limited to only one approach. Hence a DBMS can include navigational and or relational SQL databases as well as an Application Development System ADS which interfaces with user programs such as Cobol. Internet access can be provided to a DBMS using for example JDBC and ODBC standards. These systems can be run on a variety of operating systems including z OS VSE and BS2000. Examples of DBMS applications include computerized library systems flight reservation systems computerized parts inventory systems personnel systems etc.

Security is a primary concern in any DBMS. Data security prevents unauthorized users from viewing or updating the database. Users are allowed access to the entire database or subsets of the database called subschemas typically using passwords. The DBMS can further maintain the integrity of the database by not allowing more than one user to update the same record at the same time and or by preventing the entry of duplicate records that is records with identical data or identical key fields.

The various capabilities or resources including a task such as search sort compile an activity a program a system program sign on and sign off etc. contained in the DBMS must also be secured to maintain the integrity of the database. For example in one well known DBMS security of these resources is controlled through a table load module that indicates what resources are secured and if a resource is secured whether the security is provided internally or externally to the DBMS. Access to resources that are externally secured can be controlled by security systems such as ACF2 RACF or Top Secret.

Controlling resources through a single table load module enhances security by placing resource security information in one secure location. However a table load module is difficult to customize update or amend. Source code corresponding to the load module must also be separately maintained so that additions deletions and or changes to resources such as changing sign on security from internal to external can be made and the source can be re assembled into an updated load module. Securely maintaining this source code is problematic even if the code is placed in a secure location it can be overwritten or inadvertently lost. Thus there is a need for a method for determining and amending a resource s security information in a load module when a change or addition to the resources is desired.

The present invention advantageously provides a method for determining the security information of a resource and amending this information if necessary. The method for resource security in a database management system having one or more resources comprises creating a macro and a corresponding data section definition DSECT defining security for each resource assembling all of the DSECTs into a load module processing the load module to obtain source code and assembling the source code such that changing the source code of one resource modifies the defined security of the resource and adding new source code to the source code adds a new resource having security to the plurality of resources. The processing step can include loading the load module reading a DSECT having a total number of resources and for each resource of the total number of resources reading each parameter for each resource from a next DSECT finding the defined security in the next DSECT and obtaining the source code associated with the defined security. The source code assembly can comprise converting the source code to macros and corresponding DSECTs and assembling these DSECTs.

In an exemplary embodiment a table load module called RHDCSRTT comprises security information for resources in a CA IDMS DBMS. The RHDCSRTT module is created by assembling a series of assembler macros called SECRTT macros along with corresponding data section definitions. A SECRTT macro with type INITIAL is the first macro assembled into the RHDCSRTT module and a SECRTT macro with type FINAL is the last macro in the module. The remaining macros have type ENTRY or OCCURRENCE. Each SECRTT macro other than those of type INITIAL and FINAL corresponds to a specific resource and contains parameters to describe or define the specific resource including how it should be secured e.g. not secured internally secured or externally secured. Other parameters can be coded for each macro to provide more detailed information for execution time security checking. These parameters can include resource type resource class name and external name such as Activity Application Name Database Name Data Definition Name Environment Resource External Name Resource External Type Schema SSName System Version etc.

Next SECRTT macros for all resources are created. In step S the macro type is set e.g. TYPE ENTRY or TYPE OCCURRENCE along with the resource name and its parameters. In one embodiment the SECRTT macro is known as a security resource type table entry SECRTTED . In step S a DSECT for the SECRTT macro is created. The program checks for additional resources in step S. If more resources exist S YES processing continues at step S. Otherwise S NO in step S the SECRTT macro with type FINAL is created along with its DSECT. In step S all of the DSECTs created from the SECRTT macros are assembled into the RHDCSRTT module.

The simplest description of the RHDCSRTT module is that the readable source i.e. SECRTT macros is converted into a collection of hexadecimal strings with characters 0 through 9 then A through F in any combination. This basically describes the appearance of a load module such as RHDCSRTT.

After its creation the RHDCSRTT module can be read using its DSECTs. A DSECT can be thought of as a map that can be superimposed over the hexadecimal characters of the RHDCSRTT module to decipher the meaning of the characters. As discussed above the DSECTs are generated into the RHDCSRTT load module from the SECRTT source. Each DSECT is similar to a data record.

When a resource needs to be added or changed the program or routine of the present invention reads the RHDCSRTT module s strings of hexadecimal characters and converts them back to the series of SECRTT macros from which they were generated. The regenerated source code can then be modified and re assembled to recreate a new load module with the required changes.

In step S the resource number is set to one 1 . In step S the next DSECT SECRTTED having TYPE ENTRY or TYPE OCCURRENCE or OCCUR is read. In step S the program checks each entry in the DSECT for the parameters available for the resource type of the DSECT and each parameter that is found is stored in another DSECT created to hold the parameters and flags. The resource number is incremented by one in step S and if the incremented resource number is less than the total number of resources S YES then processing continues at step S. Otherwise S NO all of the DSECTs in the load module have been processed. The process concludes in step S when the SECRTT with TYPE FINAL is read.

The regenerated source code obtained from the process can be modified to add new resources and or to change the security parameter s of one or more existing resources. This modified source code can then be re assembled to recreate a new load module reflecting the desired changes. The re assembly can be performed as described and shown in .

In one embodiment the inventive routine to process the load module is embedded in a CA IDMS module e.g. in the LOOK macro from which IDMSLOOK and RHDCLOOK are assembled. The routine loads the RHDCSRTT module simply by coding the syntax LOOK RHDCSRTT online in IDM S from enter next task code or in batch by specifying in the SYSIPT DD RHDCSRTT.

Read the header SECRTTHD DSECT noting what parameters were coded for the SECRTT TYPE INITIAL statement. This statement corresponds to the SECRTTHD DSECT. This DSECT stores additional information such as the number of occurrences of SECRTTED DSECT for each SECRTT TYPE ENTRY or SECRTT TYPE OCCUR statement. The SECRTTHD DSECT is immediately followed by a series of SECRTTED DSECT s.

Store the parameters coded on SECRTT TYPE INITIAL from SECRTTHD to the SRTDSECT DSECT which is working storage for the routine.

IF ENVNAME was coded write a after SECRTT TYPE INITIAL followed by an X in column 72 and write ENVNAME on the next line of output.

The program then goes through a repeated cycle loop based on the number of SECRTTED entries in SECRTTHD.

Various aspects of the present disclosure may be embodied as a program software or computer instructions embodied in a computer or machine usable or readable medium which causes the computer or machine to perform the steps of the method when executed on the computer processor and or machine.

The terms computer system and computer network as may be used in the present application may include a variety of combinations of fixed and or portable computer hardware software peripherals and storage devices. The computer system may include a plurality of individual components that are networked or otherwise linked to perform collaboratively or may include one or more stand alone components. The hardware and software components of the computer system of the present application may include and may be included within fixed and portable devices such as desktop laptop and or server. A module may be a component of a device software program or system that implements some functionality which can be embodied as software hardware firmware electronic circuitry or etc.

The embodiments described above are illustrative examples and it should not be construed that the present invention is limited to these particular embodiments. Thus various changes and modifications may be effected by one skilled in the art without departing from the spirit or scope of the invention as defined in the appended claims.

