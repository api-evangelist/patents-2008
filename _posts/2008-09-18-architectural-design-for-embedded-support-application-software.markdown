---

title: Architectural design for embedded support application software
abstract: Methods, systems, and apparatus, including computer program products, for implementing a software architecture design for a software application implementing embedded support. The application is structured as multiple process components interacting with each other through service interfaces, and multiple service operations, each being implemented for a respective process component. The process components include, for example, a Support Request Processing process component that handles a request reflecting the initial inquiry to clarify and solve an incident during the operations of an IT system and a Software Problem Reporting process component that handles the collection and reporting of context data in the IT system.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08380549&OS=08380549&RS=08380549
owner: SAP AG
number: 08380549
owner_city: Walldorf
owner_country: DE
publication_date: 20080918
---
The subject matter of this patent application relates to computer software architecture and more particularly to the architecture of application software for embedded support.

Enterprise software systems are generally large and complex. Such systems can require many different components distributed across many different hardware platforms possibly in several different geographical locations. Thus the architecture of a large software application i.e. what its components are and how they fit together is an important aspect of its design for a successful implementation.

This specification presents a software architecture design for a software application implementing embedded support.

In its various aspects the subject matter described in the specification can be implemented as methods systems and apparatus including computer program products for implementing a software architecture design for a software application implementing embedded support. The software application is structured as multiple process components interacting with each other through service interfaces and multiple service operations each being implemented for a respective process component. The process components include a Support Request Processing process component and a Software Problem Reporting process component.

In its various aspects the subject matter can further be implemented as methods systems and apparatus including computer program products implementing a software architecture design for a software application that is adapted to interact with external software systems through the service operations described in reference to external process components or a subcombination of them.

The subject matter described in this specification can be implemented to realize one or more of the following advantages. Effective use is made of process components as units of software reuse to provide a design that can be implemented reliably in a cost effective way. Effective use is made of deployment units each of which is deployable on a separate computer hardware platform independent of every other deployment unit to provide a scalable design. Service interfaces of the process components define a pair wise interaction between pairs of process components that are in different deployment units in a scalable way.

Details of one or more implementations of the subject matter described in this specification are set forth in the accompanying drawings and in the description below. Further features aspects and advantages of the subject matter will become apparent from the description the drawings and the claims.

As shown in the embedded support design includes a Customer Relationship Management deployment unit that can handle the management of customer related activities within marketing presales sales and service including the recording and processing of interactions throughout the customer life cycle.

The Customer Relationship Management deployment unit includes a Support Request Processing process component that handles a request reflecting the initial inquiry to clarify and solve an incident during the operations of an IT system sent by an end user of the system or the system itself to the service processing team. The Support Request can document the incident the solution process and the solutions found. It can contain information on the user the system and on the nature and context of the incident. Additionally the Support Request may contain a description of the symptom and a classification of the incident the underlying problem and or the reason to name a few examples.

The foundation layer described below includes a Software Problem Reporting process component that can be used for collecting context data in an IT solution summarizing the data in a software problem report and sending the report to the appropriate service desk. Software Problem Reporting functionality can be deployed on more than one decentralized system and information can be forwarded to a central service desk.

A number of external process components described below will be used to describe the architectural design. These include a Service Request Processing at Requester process component and a Service Request Processing at Provider process component . The Service Request Processing at Requester process component can handle the logging and resolving of service requests concerning customer issues at an external customer site. The Service Request Processing at Provider process component can handle the logging and resolving of service requests concerning customer issues at an external provider site.

Not explicitly represented in the figures is a foundation layer that contains all fundamental entities that are used in multiple deployment units . These entities can be process components business objects and reuse service components. A reuse service component is a piece of software that is reused in different transactions. A reuse service component is used by its defined interfaces which can be e.g. local APIs Application Programming Interfaces or service interfaces.

A process component of an external system is drawn as a dashed line process component . Such a process component represents the external system in describing interactions with the external system however the process component need not represent more of the external system than is needed to produce and receive messages as required by the process component that interacts with the external system.

The connector icon is used to simplify the drawing of interactions between process components . Interactions between process component pairs involving their respective business objects process agents at and operations interfaces and messages at and are described as process component interactions which determine the interactions of a pair of process components across a deployment unit boundary i.e. from one deployment unit to another deployment unit . Interactions between process components are indicated in by directed lines arrows . Interactions between process components within a deployment unit need not be described except to note that they exist as these interactions are not constrained by the architectural design and can be implemented in any convenient fashion. Interactions between process components that cross a deployment unit boundary will be illustrated by the figures of this patent application these figures will show the relevant elements associated with potential interaction between two process components but interfaces process agents at and and business objects that are not relevant to the potential interaction will not be shown.

The architectural design is a specification of a computer software application and elements of the architectural design can be implemented to realize a software application that implements the end to end process mentioned earlier. The elements of the architecture are at times described in this specification as being contained or included in other elements for example a process component is described as being contained in a deployment unit . It should be understood however that such operational inclusion can be realized in a variety of ways and is not limited to a physical inclusion of the entirety of one element in another.

The architectural elements include the business object . A business object is a representation of a type of a uniquely identifiable business entity an object instance described by a structural model. Processes operate on business objects. This example business object represents a specific view on some well defined business content. A business object represents content which a typical business user would expect and understand with little explanation. Business objects are further categorized as business process objects and master data objects. A master data object is an object that encapsulates master data i.e. data that is valid for a period of time . A business process object which is the kind of business object generally found in a process component is an object that encapsulates transactional data i.e. data that is valid for a point in time . The term business object will be used generically to refer to a business process object and a master data object unless the context requires otherwise. Properly implemented business objects are implemented free of redundancies.

The architectural elements also include the process component . A process component is a software package that realizes a business process and generally exposes its functionality as services. The functionality includes the ability to perform all or parts of particular kinds of business transactions. A process component contains one or more semantically related business objects . Any business object belongs to no more than one process component. Process components can be categorized as a standard process component a process component at a business partner a third party process component or a user centric process component. The standard process component named simply process component is a software package that realizes a business process and exposes its functionality as services. The process component at a business partner is a placeholder for a process component or other technology that performs the essential functions of the process component used at a business partner. The third party process component is a process component or other technology that performs the essential functions of the process component provided by a third party. The user centric process component is a process component containing user interface parts.

Process components are modular and context independent. That they are context independent means that a process component is not specific to any specific application and is reusable. The process component is often the smallest most granular element of reuse in the architecture.

The architectural elements also include the operation . An operation belongs to exactly one process component . A process component generally is able to perform multiple operations . Operations can be synchronous or asynchronous corresponding to synchronous or asynchronous process agents e.g. at and which will be described below. Operation may be the smallest separately callable function described by a set of data types used as input output and fault parameters serving as a signature.

The architectural elements also include the service interface referred to simply as the interface. An interface is a named group of operations . Interface typically specifies inbound service interface functionality or outbound service interface functionality. Each operation belongs to exactly one interface . An interface belongs to exactly one process component . A process component might contain multiple interfaces . In some implementations an interface contains only inbound or outbound operations but not a mixture of both. One interface can contain both synchronous and asynchronous operations. All operations of the same type either inbound or outbound which belong to the same message choreography will belong to the same interface. Thus generally all outbound operations directed to the same other process component are in one interface .

The architectural elements also include the message . Operations transmit and receive messages . Any convenient messaging infrastructure can be used. A message is information conveyed from one process component instance to another with the expectation that activity will ensue. An operation can use multiple message types for inbound outbound or error messages. When two process components are in different deployment units invocation of an operation of one process component by the other process component is accomplished by an operation on the other process component sending a message to the first process component. In some implementations the message is a form based message that can be translated into a recognized format for an external process component . The form message type is a message type used for documents structured in forms. The form message type can be used for printing faxing emailing or other events using documents structured in forms. In some implementations the form message type provides an extended signature relative to the normal message type. For example the form message type can include text information in addition to identification information to improve human reading.

The architectural elements also include the process agent e.g. at and . Process agents do business processing that involves the sending or receiving of messages . Each operation will generally have at least one associated process agent. The process agent can be associated with one or more operations . Process agents at and can be either inbound or outbound and either synchronous or asynchronous.

Asynchronous outbound process agents are called after a business object changes e.g. after a create update or delete of a business object instance. Synchronous outbound process agents are generally triggered directly by a business object .

An outbound process agent and will generally perform some processing of the data of the business object instance whose change triggered the event. An outbound agent triggers subsequent business process steps by sending messages using well defined outbound services to another process component which generally will be in another deployment unit or to an external system. An outbound process agent is linked to the one business object that triggers the agent but it is sent not to another business object but rather to another process component. Thus the outbound process agent can be implemented without knowledge of the exact business object design of the recipient process component.

Inbound process agents and are called after a message has been received. Inbound process agents are used for the inbound part of a message based communication. An inbound process agent starts the execution of the business process step requested in a message by creating or updating one or multiple business object instances. An inbound process agent is not the agent of a business object but of its process component. An inbound process agent can act on multiple business objects in a process component.

Synchronous agents and are used when a process component requires a more or less immediate response from another process component and is waiting for that response to continue its work.

Operations and process components are described in this specification in terms of process agents. However in alternative implementations process components and operations can be implemented without use of agents by using other conventional techniques to perform the functions described in this specification.

The architectural elements also include the communication channel template. The communication channel template is a modeling entity that represents a set of technical settings used for communication. The technical settings can include details for inbound or outbound processing of a message. The details can be defined in the communication channel template. In particular the communication channel template defines an adapter type a transport protocol and a message protocol. In some implementations various other parameters may be defined based on a selected adapter type. For example the communication channel template can define a security level conversion parameters default exchange infrastructure parameters processing parameters download URI parameters and specific message properties.

The communication channel template can interact with internal or external process components at and . To interact with an internal process component the communication channel template is received and uploaded to be used with an operation and interface pair. To interact with an external process component the communication channel template is received and uploaded to be used with an external entity such as an external bank business partner or supplier.

The architectural elements also include the deployment unit . A deployment unit includes one or more process components that are deployed together on a single computer system platform. Conversely separate deployment units can be deployed on separate physical computing systems. For this reason a boundary of a deployment unit defines the limits of an application defined transaction i.e. a set of actions that have the ACID properties of atomicity consistency isolation and durability. To make use of database manager facilities the architecture requires that all operations of such a transaction be performed on one physical database as a consequence the processes of such a transaction must be performed by the process components of one instance of one deployment unit .

The process components of one deployment unit interact with those of another deployment unit using messages passed through one or more data communication networks or other suitable communication channels. Thus a deployment unit deployed on a platform belonging one business can interact with a deployment unit software entity deployed on a separate platform belonging to a different and unrelated business allowing for business to business communication. More than one instance of a given deployment unit can execute at the same time on the same computing system or on separate physical computing systems. This arrangement allows the functionality offered by a deployment unit to be scaled to meet demand by creating as many instances as needed.

Since interaction between deployment units is through service operations a deployment unit can be replaced by other another deployment unit as long as the new deployment unit supports the operations depended upon by other deployment units. Thus while deployment units can depend on the external interfaces of process components in other deployment units deployment units are not dependent on process component interaction within other deployment units. Similarly process components that interact with other process components or external systems only through messages e.g. as sent and received by operations can also be replaced as long as the replacement supports the operations of the original .

In contrast to a deployment unit the foundation layer does not define a limit for application defined transactions. Deployment units communicate directly with entities in the foundation layer which communication is typically not message based. The foundation layer is active in every system instance on which the application is deployed. Business objects in the foundation layer will generally be master data objects. In addition the foundation layer will include some business process objects that are used by multiple deployment units . Master data objects and business process objects that should be specific to a deployment unit are assigned to their respective deployment unit .

Interactions Between Process Components Software Problem Reporting and Service Request Processing at Provider 

As shown in the Software Problem Reporting process component includes a Software Problem Report business object . The Software Problem Report business object represents a report about an incident in an IT solution.

A Request Service from Software Problem Report to Provider outbound process agent can be used to invoke a Request Service operation . The outbound process agent can collect data associated with the Software Problem Report business object and send the data to an external service desk. The Request Service operation can request the creating changing of a service request document in an external service desk. The Request Service operation is included in an External Requesting Out interface . The operation generates a Service Request message .

The Service Request Processing at Provider process component can receive the Service Request message . An operation performed by the Service Request Processing at Provider process component can generate a Service Request Confirmation message .

The message is received in a Change Software Problem Report Based on Provider Confirmation operation . The operation is included in an External Requesting In interface . The Change Software Problem Report Based on Provider Confirmation operation uses a Change Software Problem Report Based on Provider Confirmation inbound process agent to update the Software Problem Report business object .

The Software Problem Reporting process component sends information to the Service Request Processing at Provider business process using a Process at Tenant Out Web Services Reliable Messaging WSRM communication channel template . The External Requesting Out interface sends information to the Software Problem Reporting process component using the Process at Tenant Out WSRM communication channel template . The communication channel template can define protocols and parameters used for communication with an external party. The Software Problem Reporting process component receives information from the Service Request Processing at Provider process component using a Processing at Tenant In WSRM communication channel template .

The Service Request Processing at Provider process component receives information from the Software Problem Reporting process component using a Processing at Business Partner In Exchange Infrastructure XI communication channel template . The communication channel template can define protocols and parameters used for communication with an external party. The Service Request Processing at Provider process component sends information to the Software Problem Reporting process component using a Processing at Business Partner Out XI communication channel template . The communication channel template can define protocols and parameters used for communication with an external party. While XI represents Exchange Infrastructure any similar or suitable third party or proprietary tool may be used to perform the functions provided by or described in relation to XI.

As shown in the Software Problem Reporting process component includes the Software Problem Report business object . The Software Problem Report business object represents a report about an incident in an IT solution.

The Software Problem Report business object uses a Request Support from Software Problem Report to Support Request Processing outbound process agent to invoke a Request Support operation . The Request Support operation requests the creating changing of a support request document in a service desk. The Request Support operation is included in a Software Problem Reporting Out interface . The operation generates a Service Request message .

A Maintain Support Request operation receives the Service Request message . The operation maintains a support request based on information from a software problem report. The Maintain Support Request operation is included in a Software Problem Reporting In interface .

A Maintain Support Request inbound process agent updates a Support Request business object . The Support Request business object handles a request by a user of the system or of the system itself to a service provider IT Service Desk to clarify and correct an error in an IT solution. The business object can document the error the resolution process and the solutions found.

The Support Request business object uses a Confirm Support Request from Support Request to Software Problem Reporting outbound process agent to invoke a Confirm Support Request operation . The Confirm Support Request operation confirms to Software Problem Reporting that a support request document has been processed. The operation is included in a Software Problem Reporting Out interface . The Confirm Support Request operation generates a Service Request Confirmation message .

The message is received in a Change Software Problem Report operation . The Change Software Problem Report operation changes the Software Problem Report based on a confirmation from a service desk. The operation is included in a Software Problem Reporting In interface . The Change Software Problem Report operation uses a Change Software Problem Report Based on Confirmation inbound process agent to update the Software Problem Report business object .

Interactions Between Process Components Service Request Processing at Requester and Support Request Processing 

Operations performed by the Service Request Processing at Requester process component can generate a Service Request message . A Maintain Support Request operation receives the Service Request message . The operation can maintain a support request based on information from a software problem report. The Maintain Support Request operation is included in an External Providing In interface .

A Maintain Support Request Based on External Request inbound process agent updates the Support Request business object . The Support Request business object handles a request by a user of the system to a service provider IT Service Desk to clarify and correct an error in an IT solution.

The Support Request business object uses a Confirm Support Request to External Requester outbound process agent to invoke a Confirm Support Request operation . The Confirm Support Request operation confirms the creation change as well as the processing progress of a Support Request Document to an external service desk. The operation is included in an External Providing Out interface . The Confirm Support Request operation generates a Service Request Confirmation message . The message can be received by an operation performed by the Service Request Processing at Requester process component .

The Support Request Processing process component sends information to the Service Request Processing at Request process component using a Process at Tenant Out Web Services Reliable Messaging WSRM communication channel template . The External Providing Out interface sends information to the Support Request Processing process component using the Process at Tenant Out WSRM communication channel template . The communication channel template can define protocols and parameters used for communication with an external party. The Support Request Processing process component sends information to the Service Request Processing at Requester process component using a Processing at Tenant In WSRM communication channel template .

The Service Request Processing at Requester process component receives information from the Support Request Processing process component using a Processing at Business Partner In XI communication channel template . The communication channel template can define protocols and parameters used for communication with an external party. The Service Request Processing at Requester process component sends information to the Support Request Processing process component using a Processing at Business Partner Out XI communication channel template . The communication channel template can define protocols and parameters used for communication with an external party.

Interactions Between Process Components Support Request Processing and Service Request Processing at Provider 

As shown in the Support Request Processing process component includes the Support Request business object . The Support Request business object handles a request by a user of the system or of the system itself to a service provider IT Service Desk to clarify and correct an error in an IT solution.

The Support Request business object uses a Request Service from Support Request to Provider outbound process agent to invoke a Request Service operation . The Request Service operation requests that a service document be processed in an external system. The Request Service operation is included in an External Requesting Out interface . The operation generates a Service Request message .

The Service Request Processing at Provider process component can receive the Service Request message . An operation performed by the Service Request Processing at Provider process component can generate a Service Request Confirmation message .

The message is received in a Change Support Request Based on Provider Confirmation operation . The Change Support Request Based on Provider Confirmation operation updates a support request based on data from the external provider system. The operation is included in an External Requesting In interface . The Change Support Request Based on Provider Confirmation operation uses a Change Support Request Based on Provider Confirmation inbound process agent to update the Support Request business object .

The Support Request Processing process component sends information to the Service Request Processing at Provider process component using a Process at Tenant Out Web Services Reliable Messaging WSRM communication channel template . The External Providing Out interface sends information to the Support Request Processing process component using the Process at Tenant Out WSRM communication channel template . The communication channel template can define protocols and parameters used for communication with an external party. The Support Request Processing process component receives information from the Service Request Processing at Provider process component using a Processing at Tenant In WSRM communication channel template .

The Service Request Processing at Provider process component receives information from the Support Request Processing process component using a Processing at Business Partner In XI communication channel template . The communication channel template can define protocols and parameters used for communication with an external party. The Service Request Processing at Provider process component sends information to the Support Request Processing process component using a Processing at Business Partner Out XI communication channel template . The communication channel template can define protocols and parameters used for communication with an external party.

The subject matter described in this specification and all of the functional operations described in this specification can be implemented in digital electronic circuitry or in computer software firmware or hardware including the structural means disclosed in this specification and structural equivalents thereof or in combinations of them. The subject matter described in this specification can be implemented as one or more computer program products i.e. one or more computer programs tangibly embodied in an information carrier e.g. in a machine readable storage device or in a propagated signal for execution by or to control the operation of data processing apparatus e.g. a programmable processor a computer or multiple computers. A computer program also known as a program software software application or code can be written in any form of programming language including compiled or interpreted languages and it can be deployed in any form including as a stand alone program or as a module component subroutine or other unit suitable for use in a computing environment. A computer program does not necessarily correspond to a file. A program can be stored in a portion of a file that holds other programs or data in a single file dedicated to the program in question or in multiple coordinated files e.g. files that store one or more modules sub programs or portions of code . A computer program can be deployed to be executed on one computer or on multiple computers at one site or distributed across multiple sites and interconnected by a communication network.

The processes and logic flows described in this specification can be performed by one or more programmable processors executing one or more computer programs to perform functions by operating on input data and generating output. The processes and logic flows can also be performed by and apparatus can also be implemented as special purpose logic circuitry e.g. an FPGA field programmable gate array or an ASIC application specific integrated circuit .

Processors suitable for the execution of a computer program include by way of example both general and special purpose microprocessors and any one or more processors of any kind of digital computer. Generally a processor will receive instructions and data from a read only memory or a random access memory or both. The essential elements of a computer are a processor for executing instructions and one or more memory devices for storing instructions and data. Generally a computer will also include or be operatively coupled to receive data from or transfer data to or both one or more mass storage devices for storing data e.g. magnetic magneto optical disks or optical disks. Information carriers suitable for embodying computer program instructions and data include all forms of non volatile memory including by way of example semiconductor memory devices e.g. EPROM EEPROM and flash memory devices magnetic disks e.g. internal hard disks or removable disks magneto optical disks and CD ROM and DVD ROM disks. The processor and the memory can be supplemented by or incorporated in special purpose logic circuitry.

To provide for interaction with a user the subject matter described in this specification can be implemented on a computer having a display device e.g. a CRT cathode ray tube or LCD liquid crystal display monitor for displaying information to the user and a keyboard and a pointing device e.g. a mouse or a trackball by which the user can provide input to the computer. Other kinds of devices can be used to provide for interaction with a user as well for example feedback provided to the user can be any form of sensory feedback e.g. visual feedback auditory feedback or tactile feedback and input from the user can be received in any form including acoustic speech or tactile input.

The subject matter described in this specification can be implemented in a computing system that includes a back end component e.g. a data server a middleware component e.g. an application server or a front end component e.g. a client computer having a graphical user interface or a Web browser through which a user can interact with an implementation of the subject matter described herein or any combination of such back end middleware and front end components. The components of the system can be interconnected by any form or medium of digital data communication e.g. a communication network. Examples of communication networks include a local area network LAN and a wide area network WAN e.g. the Internet.

The computing system can include clients and servers. A client and server are generally remote from each other and typically interact through a communication network. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client server relationship to each other.

While this specification contains many specifics these should not be construed as limitations on the scope of the invention or of what may be claimed but rather as an exemplification of preferred embodiments of the invention. Certain features that are described in this specification in the context of separate embodiments may also be provided in combination in a single embodiment. Conversely various features that are described in the context of a single embodiment may also be provided in multiple embodiments separately or in any suitable subcombination. Moreover although features may be described above as acting in certain combinations and even initially claimed as such one or more features from a claimed combination can in some cases be excised from the combination and the claimed combination may be directed to a subcombination or variation of a subcombination.

The subject matter has been described in terms of particular variations but other variations can be implemented and are within the scope of the following claims. For example the actions recited in the claims can be performed in a different order and still achieve desirable results. As one example the processes depicted in the accompanying figures do not necessarily require the particular order shown or sequential order to achieve desirable results. In certain implementations multitasking and parallel processing may be advantageous. Other variations are within the scope of the following claims.

