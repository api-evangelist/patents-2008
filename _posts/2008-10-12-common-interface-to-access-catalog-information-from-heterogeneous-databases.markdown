---

title: Common interface to access catalog information from heterogeneous databases
abstract: Various embodiments of a system and computer program product to access metadata from a plurality of data servers from a federated database management system are provided. In one embodiment, a request for metadata, from a client application, is received by the federated database management system. Data servers which are accessible from the federated database management system are identified. For each data server, metadata describing data of a data source of that data server is retrieved in accordance with the application request. The retrieved metadata from each of the data servers is aggregated to produce an aggregated result in a uniform format. The aggregated result is provided. In another embodiment, for each data server, a source metadata request for metadata of that data server is generated in accordance with the application request and a source metadata application programming interface. A view is created based on the source metadata request for metadata for each data server.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08051094&OS=08051094&RS=08051094
owner: International Business Machines Corporation
number: 08051094
owner_city: Armonk
owner_country: US
publication_date: 20081012
---
This application is a continuation of prior application Ser. No. 11 131 792 filed May 17 2005. Application Ser. No. 11 131 792 is hereby incorporated by reference in its entirety.

This invention relates to database management systems and in particular this invention relates to a common interface to access catalog information from heterogeneous databases.

Database management systems allow large volumes of data to be stored and accessed efficiently and conveniently in a computer system. In a database management system data is typically stored in database tables which organize the data into rows and columns. In a relational database management system tables may be associated with each other. For example the data in one column of a table may be used to refer to data in another table.

IBM Registered trademark of International Business Machines Corporation Websphere Registered trademark of International Business Machines Corporation Information Integrator Standard edition integrates diverse and distributed data sources in real time regardless of where the data source resides. IBM Websphere Information Integrator Standard edition is a federated relational database management system that allows data in relational and non relational databases to be accessed using the Structured Query Language SQL and Open Database Connectivity ODBC and Java Registered trademark of Sun Microsystems Inc. Database Connectivity JDBC interfaces.

Database management systems typically store metadata which describes the data contained in the database in system catalog tables. This metadata comprises information such as schema names table names column names column types and index definitions. Client applications in addition to the database management system itself may access this metadata. For example data modeling tools information asset management systems data warehousing tools and reporting tools typically use a programming interface to retrieve a description of the data accessible from the database. One reporting tool programmatically interrogates the database to retrieve a list of tables that are available as well as the column name and type information to assist a user in order to dynamically build a SQL query. Each database vendor provides their own implementation of system catalog tables typically with a proprietary naming scheme format and available information.

Standards introduced by the American National Standards Institute ANSI Database Standards Committee and application programming interfaces APIs such as Open Database Connectivity and Java Database Connectivity provide well defined interfaces to retrieve metadata information from the system catalogs. Application developers benefit from these standards and programming interfaces in order to build vendor independent portable database applications.

Enterprises today typically have multiple relational database products installed and have multiple instances of a particular database product in their production environment. It is not unusual for larger information technology IT shops to have tens of thousands of databases from multiple vendors in use by production applications. For such complex environments it is even more important to provide access to the metadata for each database. As the number and types of databases increases it becomes increasingly difficult for the applications to provide consistent access to the metadata of all the database management systems. Retrieving metadata information across relational database management systems via a JDBC or ODBC interface is often a complex undertaking for an application because the application must manage a connection to each different source of data.

In step the client application connects to source database management system A which contains source database A . In step the client application invokes source metadata API A to find the column names containing the desired pattern. In response source database management system A returns result A which has the format of source database management system A . In step the client application connects to source database management system B which contains source database B . In step the client application invokes source metadata API B to find the column names containing the desired pattern. In response source database management system B returns result B which has the format of source database management system B . In step the client application connects to source database management system C which contains source database C . In step the client application invokes source metadata API C to find the column names containing the desired pattern. In response source database management system C returns result C which has the format of source database management system C . In step the client application unifies the results and .

The source metadata APIs are bound to a single database connection and require the client application to connect to each database management system and to invoke the specific source metadata API call for each database management system that is source metadata API A source metadata API B and source metadata API C.

Some enterprise metadata management tools require access to metadata across the databases of an enterprise. These tools typically rely on custom built adapters to retrieve metadata from different data sources including relational database management systems and use those adapters to populate a separate metadata catalog store on another server. Such solutions have some disadvantages. First developing and maintaining such custom adapters for each source supported by these products is costly. New adapters must be provided for each new data source and adapters must be updated each time the underlying interface or format changes. Second maintaining a separate metadata catalog store introduces significant overhead to store index and synchronize with the original data sources.

Therefore there is a need for an improved technique to access metadata in a heterogeneous database environment. This technique should provide a common interface for the client applications to access metadata from multiple database management systems. This technique should also avoid maintaining a separate metadata catalog store.

To overcome the limitations in the prior art described above and to overcome other limitations that will become apparent upon reading and understanding the present specification various embodiments of a system and computer program product are provided to access metadata from a plurality of data servers from a federated database management system. In one embodiment an application request for metadata from a client application is received by the federated database management system. Data servers which are accessible from the federated database management system are identified. For each data server metadata describing data of a data source of that data server is retrieved in accordance with the application request to produce retrieved metadata. The retrieved metadata from each data server is aggregated to produce an aggregated result in a uniform format. The aggregated result is provided.

In another embodiment an application request for metadata from a client application is received by the federated database management system. Data servers which are accessible from the federated database management system are identified. For each data server a source metadata request for metadata of that data server is generated in accordance with the application request and a source metadata application programming interface. A view is created based on the source metadata request for metadata for each data server.

In this way an improved technique to access metadata in a heterogeneous environment has been provided.

To facilitate understanding identical reference numerals have been used where possible to designate identical elements that are common to some of the figures.

After considering the following description those skilled in the art will clearly realize that the teachings of the various embodiments of the present invention can be utilized to access metadata. Various embodiments of a method system and article of manufacture are provided to access metadata from a plurality of data servers from a federated database management system. In one embodiment an application request for metadata from a client application is received by the federated database management system. Data servers which are accessible from the federated database management system are identified. For each data server metadata describing data of a data source of that data server is retrieved in accordance with the application request to produce retrieved metadata. The retrieved metadata from each data server is aggregated to produce an aggregated result in a uniform format. The aggregated result is provided.

In another embodiment an application request for metadata from a client application is received by the federated database management system. Data servers which are accessible from the federated database management system are identified. For each data server a source metadata request for metadata of that data server is generated in accordance with the application request and a source metadata application programming interface. A view is created based on the source metadata requests for metadata for each data server. In this embodiment the client application accesses the metadata on the data servers using the view.

Various embodiments of providing a common interface to retrieve metadata from a plurality of heterogeneous data servers are described. A data server comprises at least one data source and provides metadata describing the data of that data source and that metadata is accessible to the federated database management system. In various embodiments a data server is a database management system in some embodiments a data server comprises a file system and in yet other embodiments a data server comprises an application. The data servers may be from different vendors. In various embodiments a data source may be a database a spreadsheet or a flat file. A data server is associated with a source metadata API which is invoked to retrieve metadata from the data source. In various embodiments the source metadata API can be at least one and any combination of the following APIs such as JDBC ODBC and a direct SQL query.

In various embodiments the client application invokes the common interface API to retrieve metadata from a plurality of heterogeneous data servers. In these embodiments the common interface API invokes the appropriate source metadata API for the data servers. Therefore a client application establishes only a single connection to a federated database management system and uses the common interface API to retrieve metadata from multiple data servers. Using the common interface API the metadata of the data servers appears to be stored in one consistent place and in one unified form. In various embodiments the common interface API accesses the metadata in real time ensuring that the information in the metadata is up to date and accurate. Alternately if latency can be tolerated the common interface API caches the metadata at the federated database management system for a faster response to requests for the metadata. In various embodiments the metadata comprises system catalog information. In some embodiments the metadata comprises at least one schema name one or more table names associated with each schema the column names associated with the tables and data type of the columns. In other embodiments the metadata is not meant to be limited to schema names table names column names and data type of the columns and the metadata may contain different information. In some embodiments filter criteria is specified and passed to the data servers thereby enabling the client application to control the amount of data returned. Furthermore in various embodiments multiple applications can use the common interface API to access the same metadata without having to reassemble that metadata themselves.

The metadata adapter and is a software module which contains the connection information to a particular data server containing a particular data source as well as the logic to generate a query to that particular data source s metadata using the source metadata API for that data source. In some embodiments the metadata adapter also invokes the generated query to the data source and maps the requested metadata from that data server to a result object. In various embodiments the metadata adapter encapsulates knowledge of how to map the metadata format natively supported by a data server to the view including performing data conversion name conversion joins or other operations which transform the metadata of the heterogeneous data source into the format of the common interface API.

In some embodiments the metadata adapter is implemented as a Java class. However the metadata adapter is not meant to be limited to a Java class and other programming languages and techniques may be used.

In various embodiments the common interface API creates the view of the metadata and and the client application accesses the metadata and by issuing a query which specifies the view . In some embodiments the metadata retrieved using the view is associated with an identifier such as the server name which identifies the data server from which the metadata was retrieved. The view provides the client application with a common consistent format for the metadata that is result A metadata result B metadata and result C metadata retrieved from each of the data servers and respectively.

In some embodiments the common interface API returns an aggregated result for example a result object comprising results A B and C metadata and respectively in a common format. In various embodiments the result object contains metadata from the data servers with an identifier which identifies the data server from which the metadata was retrieved.

In step the client application connects to the federated database management system . In step the client application invokes the common interface API of the federated database management system to access metadata from a plurality of data servers. In step the federated database management system identifies a plurality of data servers as indicated by block which are accessible to the federated database management system based on the federated database management system metadata . As part of step as indicated by block the federated database management system metadata is retrieved through a method or API. In some embodiments this method or API is part of the common interface API in other embodiments the federated database management system provides a method or API to retrieve the federated database management system metadata .

In step for each data server the common interface API invokes a specific metadata adapter which provides a result for each data server as shown by block . Each invoked metadata adapter generates a query to retrieve metadata from its associated data server. In some embodiments the metadata adapter executes the query and returns a result containing metadata from the data server. In various embodiments the metadata is from the system catalog of the data server. In some embodiments if a particular data server is not available or if the client application does not have proper authorization for a data server that data server can either be omitted from the result set or an error can be returned depending on client application preference.

In step the common interface API aggregates the results into a single aggregated result in some embodiments a result object. The aggregated result contains metadata in a uniform format. In one embodiment the aggregated result is provided to the client application .

Alternately in step the result from each metadata adapter comprises the query for example a SQL statement to retrieve the metadata from the data server and in step the common interface API aggregates the results to create the view . Thus the common interface API creates the view based on the SQL statements. The client application issues a query using the view to retrieve the metadata from the data servers.

In some embodiments the common interface API is implemented as one or more methods of a Java class however the common interface API is not meant to be limited to Java and other programming languages can be used.

In various embodiments one or more common interface APIs provide metadata such as the server names schema names the table names and column names with an identifier of the source of the metadata in a result object. In some embodiments the common interface APIs provide a result object of type ResultSet and comprise the following methods 

In some embodiments one or more common interface APIs provide a view comprising metadata such as the schema names table names and column names and an identifier of the data source for that metadata. In some embodiments the common interface APIs which provide a view comprise the following methods 

In other embodiments when the view name is NULL the metadata is provided in a result object rather than a view. In yet other embodiments the common interface API has a view flag which a user can set to create a view for example 

The getServers API returns information describing the data servers such as the server name with the server type which are accessible to the federated relational database management system. The getservers API accesses the metadata of the federated database management system which contains the information describing the data servers. In some embodiments the result object returned by the getServers API has three fields or columns of metadata comprising a server name a server type and a server version. For example if the database management system federates two DB2 database management systems with different names an exemplary result object comprises two rows and each row has the server name the server type and server version as follows 

The getSchema server name server type schema name API accesses the metadata of multiple data servers and returns a result object comprising schema names from the data server and in some embodiments with the server name associated with the schema name. In some embodiments the result object has four fields or columns of metadata comprising a server name a server type a server version and a schema name. The getSchema API has various parameters the server name the server type and schema name. In response to the parameters being NULL the getSchema API returns the schema names of the data servers with in some embodiments the name of the associated data server containing that schema name. The server name source type and schema name parameters can be used to filter which schema names are returned. The parameters may be used alone or in combination. For example to retrieve the names of the schemas which contain the term model the schema name parameter is set to model and the other parameters are NULL. In some embodiments additional filtering parameters may be added to the getSchema API.

The getTables server name server type schema name table name table type API accesses the metadata of multiple data servers and returns a result object comprising table names and in some embodiments the table type from the data servers. In some embodiments the name of the data server associated with the table name is also returned. In various embodiments the result object has six fields or columns of metadata comprising a server name a server type a server version a schema name table name and table type. The getTables API has various parameters the server name server type schema name table name and table type. In response to the parameters being NULL the getTables API returns the table names of the data sources of the data servers. The parameters may be used alone or in combination to filter which table names are returned as described above with respect to the getschema API. In some embodiments additional filtering parameters may be added to the getTables API for example to add a column name column so that the getTables API returns the table names of those tables containing a column with a particular column name.

The getColumns server name server type schema name table name table type column name column type API accesses the metadata associated with the data sources of the data servers and returns a result object comprising column names and in some embodiments their column types. In various embodiments at least one or a combination of the table name and server name associated with the column name is returned. In some embodiments the result object has twelve fields or columns of metadata comprising a server name the server type the server version a schema name a table name a column name the column data type the column length an indicator of whether the column is nullable a default value an indicator of whether the column is a primary key and an indicate or whether the column is a foreign key where the column length has a type of integer and the indicators of whether the column is a primary key or foreign key have a type of boolean. The getColumns API has various parameters the server name server type schema name table name table type column name and column type. In response to the parameters being NULL the getColumns API returns the column names of the data sources. The parameters may be used alone or in combination to filter which table names are returned as described above with respect to the getSchema API. In some embodiments additional parameters may be added to the getColumns API for example a primary key parameter a foreign key parameter a data type parameter a column length parameter and whether a column is nullable.

In some embodiments the getSchemaView server name server type schema name view name getTablesView server name server type schema name table name table type view name and getColumnsView server name server type schema name table name table type column name column type view name APIs create a view on the federated database management system rather than returning a result object. In these embodiments a specified view name is added as a parameter. The parameters of getSchemaView getTablesView and getColumnsView are the same as the parameters of getschema getTables and getColumns except for the view name.

An example of flowchart of will be described with respect to the getTables API. For example suppose that the client application wants to find all tables whose name contains the pattern ID across N heterogeneous data servers. In this example the heterogeneous data servers comprise the three data sources and of .

In step the client application connects to the federated database management system in a conventional manner. In step the client application invokes the common interface API to access the metadata of the data servers of the federated database management system for example getTables NULL NULL NULL ID NULL . The federated database management system receives the common interface API from the client application.

In step the common interface API in this example getTables identifies one or more data servers in federation based on the federated database management system metadata . As indicated by block the common interface API invokes a method or API which in this example is the getServers API to identify the names of the data servers. In this example the names of the data servers are sourceA sourceB and sourceC. Block depicts the names of the data servers.

A metadata adapter is provided for each type of data server as illustrated by block and in some embodiments the metadata adapter is implemented as a Java class. SourceA is a type of server which is associated with the Java class MetadataAdapterA sourceB is a type of server which is associated with the Java class MetadataAdapterB and sourceC is a type of server which is associated with the Java class MetadataAdapterC.

In this example in step the getTables API creates an instance of a metadata adapter for each data server sourceA sourceB and sourceC based on the associated Java class for that data server. For example instances of a metadata adapter for sourceA sourceB and sourceC are created as follows 

Each class of a metadata adapter contains at least one method which implements the source metadata API to retrieve metadata from that data server. For example the class for MetadataAdapterA contains a method which implements the source metadata API to retrieve metadata from sourceA. For example the getTables API of the common interface API invokes a method of the metadata adapter in this case the instance called adapterA which generates a query to retrieve the requested metadata based on the source metadata API. In some embodiments for example using IBM Websphere Information Integrator a nickname is created on each source of metadata which will be accessed. In various embodiments the nickname is created under a standard schema and standard naming scheme. For example if the metadata is stored in a table on a data server and the nickname associated with that table will be used to access the metadata. Therefore using the nickname a separate connection to the database management system containing the metadata is not created. In various embodiments the metadata adapter creates nickname s on the remote table s containing the metadata if the nickname s does not already exist thereby handling the connection to the remote table s and generates a SQL query based on the nickname s .

In this example sourceA is a DB2 data source and the following exemplary SQL statement is generated in accordance with the source metadata API for sourceA as follows 

For sourceB which is a different type of database management system from sourceA an exemplary SQL statement may be generated in accordance with the source metadata API for sourceB as follows 

For sourceC which is yet another different type of database management system from sourceA and sourceB an exemplary SQL statement may be generated in accordance with the source metadata API for sourceC as follows 

In various embodiments the metadata adapters execute the SQL SELECT statements and return metadata in a result called tableName block from the data server to the common interface API. In various embodiments in step the common interface API aggregates the metadata from each metadata adapter into a single aggregated result which is returned to the client application. An example of an aggregated result which has table names and server names is as follows 

In another embodiment in which the client application invokes the getTablesView API and specifies a view name a view having the specified view name is created. In this embodiment in step the database queries that is the SQL statements are not executed by the metadata adapters. The metadata adapters return the generated SQL statements to the common interface API. In step the common interface API creates a view based on the returned SQL statements. For example a SQL statement to create the view is generated as follows 

The memory generally comprises different modalities illustratively semiconductor memory such as random access memory RAM and disk drives. In various embodiments the memory stores an operating system and a federated database management system . In various embodiments the federated database management system comprises the common interface API one or more metadata adapters an aggregated result and a view .

In various embodiments the specific software instructions data structures and data that implement various embodiments of the present invention are typically incorporated in the federated database management system . Generally an embodiment of the present invention is tangibly embodied in a computer readable medium for example the memory and is comprised of instructions which when executed by the processor causes the computer system to utilize the present invention. The memory may store the software instructions data structures and data for any of the operating system and the federated database management system in semiconductor memory in disk memory or a combination thereof. Other computer memory devices presently known or that become known in the future or combination thereof may be used for memory .

The operating system may be implemented by any conventional operating system such as z OS Registered Trademark of International Business Machines Corporation MVS Registered Trademark of International Business Machines Corporation OS 390 Registered Trademark of International Business Machines Corporation AIX Registered Trademark of International Business Machines Corporation UNIX UNIX is a registered trademark of the Open Group in the United States and other countries WINDOWS Registered Trademark of Microsoft Corporation LINUX Registered trademark of Linus Torvalds Solaris Registered trademark of Sun Microsystems Inc. and HP UX Registered trademark of Hewlett Packard Development Company L.P. .

In various embodiments the federated database management system is the IBM Websphere Information Integrator. However the invention is not meant to be limited to the IBM Websphere Information Integrator and other federated database management systems may be used.

In various embodiments the present invention may be implemented as a method system apparatus or article of manufacture using standard programming and or engineering techniques to produce software firmware hardware or any combination thereof. The term article of manufacture or alternatively computer program product as used herein is intended to encompass a computer program accessible from any computer readable device carrier or media. In addition the software in which various embodiments are implemented may be accessible through the transmission medium for example from a server over the network. The article of manufacture in which the code is implemented also encompasses transmission media such as the network transmission line and wireless transmission media. Thus the article of manufacture also comprises the medium in which the code is embedded. Those skilled in the art will recognize that many modifications may be made to this configuration without departing from the scope of the present invention.

The exemplary computer system illustrated in is not intended to limit the present invention. Other alternative hardware environments may be used without departing from the scope of the present invention.

The foregoing detailed description of various embodiments of the invention has been presented for the purposes of illustration and description. It is not intended to be exhaustive or to limit the invention to the precise form disclosed. Many modifications and variations are possible in light of the above teachings. It is intended that the scope of the invention be limited not by this detailed description but rather by the claims appended thereto.

