---

title: Population selection framework, systems and methods
abstract: Tools providing a flexible selection framework for automated processes. The framework can allow end-users to define their own selection criteria to select a data population to be processed (for example, by a business application). Hence, the tools provide enhanced control over what data is provided to which process. Some such tools employ metadata to define what information the client process needs, how the results will be returned to the client process, and/or what selection tools should be available to select data for the client process, as well as the available data selection tools, which can include both tools provided with a business application as well as third-party and/or user supplied selection tools. The framework might also provide an application programming interface that ensures consistent communication between the population selection engine and the selection tools themselves.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09384489&OS=09384489&RS=09384489
owner: Oracle International Corporation
number: 09384489
owner_city: Redwood Shores
owner_country: US
publication_date: 20080815
---
This application is a continuation application of co pending U.S. patent application Ser. No. 12 042 713 filed Mar. 5 2008 and entitled Population Selection Framework Systems and Methods which claims the benefit under 35 U.S.C. 119 e of provisional U.S. Pat. App. No. 60 975 139 filed Sep. 25 2007 by Michael Kennedy et al. and entitled Population Selection Framework Systems and Methods and provisional U.S. Pat. App. No. 61 013 841 filed Dec. 14 2007 by Marina Krasner et al. and entitled Population Selection and Update Framework Systems and Methods. The entire disclosure of each of these provisional applications is hereby incorporated herein by reference for all purposes.

This application is also related to U.S. patent application Ser. No. 12 042 738 filed on Mar. 5 2008 by Michael Kennedy et al. and entitled Population Update Framework Systems and Methods the entire disclosure of which is incorporated herein by reference for all purposes.

A portion of the disclosure of this patent document contains material that is subject to copyright protection. The copyright owner has no objection to the facsimile reproduction by anyone of the patent document or the patent disclosure as it appears in the Patent and Trademark Office patent file or records but otherwise reserves all copyright rights whatsoever.

The present invention relates in general to business applications and more particularly to tools for selecting data to be processed by business applications and or for updating data in business objects.

Many businesses educational institutions and other organizations use software applications and or suites of such applications to organize their business affairs track business performance manage employee data and or student data etc. and or the like. Such applications referred to herein as business applications are often quite complex relying on numerous database tables to store and manage data for virtually every aspect of an organization s business. Merely by way of example business applications can include supply chain management SCM applications that manage raw materials work in process and or finished products coordinate with suppliers and or the like customer relations management CRM applications that are used to track store and or manage customer information financial applications that track and or analyze the financial performance of the organization human resources applications that provide management of the human resources functions of the organization and or the like. In some cases these business applications are standalone applications in other cases a single business application and or suite of applications might provide some or all such functionality. One type of business application is referred to enterprise resource planning ERP software. Examples of business applications include without limitation JD Edwards EnterpriseOne PeopleSoft Enterprise applications including for example PeopleSoft Enterprise Student Administration and the Oracle eBusiness Suite all available from Oracle Corporation.

One task commonly required of a business application is to process data in one or more data objects which can include but is not necessarily limited to data stored in one or more tables of a database managed by a relational database management system RDBMS and maintained by the business application data stored in an object oriented data structure outside of a database data stored in a flat tile spreadsheet etc. and or the like . Processing data can include many tasks including without limitation adding new data to the data object e.g. adding new records to a table adding data to an existing record etc. from a data source outside the data object and or updating existing data in a data object e.g. modifying properties or parameters of an object oriented business object modifying fields in a database record table etc. . Business applications often provide automated or semi automated processes for performing these tasks. Oftentimes not all available data should be processed however instead the business application s process es should be applied selectively so as to only process the appropriate data.

In the past the criteria to select a data population to process were predefined and delivered bundled with business application processes. This solution left end users with little or no flexibility on how to refine the selection criteria. Often consulting services or internal engineering resources were employed to extend or modify the delivered processes to fit the customers ever changing criteria requirements. Modifying the large number of automated processes and maintaining these enhancements proved costly to customers.

Similarly tools for updating data in such business objects have exhibited shortcomings. Merely by way of example in many cases data objects are not directly accessible for modification by end users but instead require access via an application programming interface API . While there may exist tools for modifying a data object via this API such tools are often inflexible providing users with insufficient ability to effect changes in the data objects. Moreover while users may in some instances have the ability to update data in a business object directly in many such instances indiscriminate modification of a data object such as modification of a key field in a database record can produce undesirable and or catastrophic results ranging from reduced performance to loss of data integrity among other problems.

Accordingly there is a need for more flexible tools to select a data population for processing by a business application or any other type of application . There is a further need for tools that can provide a user with flexibility to update data in data objects while still providing sufficient controls to prevent modifications that may adversely impact the updated business objects.

In an aspect some embodiments of the invention provide a flexible selection framework for automated processes. The framework allows end users to define their own selection criteria to select a data population to be processed for example by a business application . In one novel aspect the population selection features of certain embodiments can be integrated with the interface for a business application process providing a one step action to select and provide the appropriate data for processing by the business application.

In another novel aspect of some embodiments the definition of the selection criteria for a process is not hard coded inside the process. This provides enhanced control over what data is provided to which process. In some cases the user even has the option preview the selected data population for the process in order to confirm the accuracy of the selection criteria before processing the selected data.

Tools provided by some embodiments employ metadata to define what information the client process needs how the results will be returned to the client process and or what selection tools should be available to select data for the client process. In another aspect of some embodiments metadata to define the available selection tools which can include both tools provided with a business application as well as third party and or user supplied selection tools. Hence particular embodiments of the invention easily can be configured to support new business application processes and or selection tools without requiring extensive modification of the underlying population selection framework or its implementing software. In an aspect this flexibility may provided inter alia by an application programming interface of which one example is an object oriented interface definition that ensures consistent communication between the population selection engine and the selection tools themselves.

Another set of embodiments provides a flexible update framework and utility for automated processes. In an aspect an update utility can provide an interface to allow a user to employ desired selection tools including without limitation the selection tools of various embodiments to select a data population to be updated. In another aspect the update framework of these embodiments can also provide a flexible interface that can employ any of a variety of update tools to update the desired data population including without limitation database procedures such as SQL functions object oriented access methods specialized applications and or the like .

The update framework in some embodiments employs metadata to define what information a data update tool needs and or the format in which the data should be provided to the tool. Metadata may also be used identity available update tools for the selected data objects such tools can include both tools provided with a business application and or database as well as third party and or user supplied update tools. Hence certain embodiments of the invention easily can be configured to support new update tools without requiring extensive modification of the underlying population update framework or its implementing software. In an aspect this flexibility may provided inter alia by an adapter interface of which one example is an object oriented interface definition that ensures consistent communication between the population update engine and the respective interfaces e.g. APIs of the update tools themselves.

In specific embodiments the update framework may also employ metadata to define for particular types of data objects which data elements e.g. fields properties parameters etc. an update tool is allowed to modify since the framework anticipates the integration of the update utility of certain embodiments with update tools that can be used to modify data objects indiscriminately. Hence in different aspects the update utility of various embodiments can not only provide a consistent interface between desired population selection tools and desired data update tools including tools that are not designed to be interoperable but can also provide controls that such existing tools lack thereby preventing unintentional damage of data objects by prohibiting modification of protected data elements.

The tools provided by various embodiments of the invention include without limitation methods systems and or software products. Mainly by way of example a method might comprise one or more procedures any or all of which are executed by a computer system. Correspondingly an embodiment might comprise a computer system configured with instructions to perform one or more procedures in accordance with methods provided by other embodiments. Similarly a computer program might comprise a set of instructions that are executable by one or more computer systems and or one or more processors therein to perform such operations. In many cases such software programs are encoded on physical and or tangible computer readable media such as merely by way of example optical media magnetic media and or the like .

Merely by way of example one set of embodiments provides a software framework for selecting set of data population to be processed by a business application. The framework may be implemented by computer program i.e. a set of instructions encoded on a computer readable medium. The computer program might be executable by a computer system to implement the framework. In a set of embodiments the framework might comprise a population selection engine configured to provide a set of data selected from a data source to a business application for processing. The framework might also comprise one or more sets of selection tool metadata including a first set of selection tool metadata comprising information about first a selection tool that can be used by the population selection engine for selecting data to provide to the business application and or one or more sets of selection context metadata including a first set of selection context metadata comprising information about first a business application process implemented by the business application to process the set of data. In addition and or alternatively the framework might include an API for providing communication between the population selection engine and the one or more selection tools.

Another set of embodiments provides methods of processing data and or of selecting data to be processed. An exemplary method of selecting data to be processed with a business application comprises providing a population selection framework such as that described above for instance . The exemplary method in an embodiment further comprises providing a user interface from a computer system and or receiving via the user interface a first set of selection tool metadata for a first selection tool that can be used by the population selection engine for selecting data to provide to the business application and or a first set of selection context metadata comprising information about first a business application process implemented by the business application to process the data. In some embodiments the method further comprises configuring the population selection engine based on the first set of selection tool metadata and the first set of selection context metadata and or providing e.g. via the user interface a display to allow the user to select the first selection tool for selecting a set of data from a data source and the first business application process for processing the selected set of data .

Another exemplary method of selecting data for processing with a business application comprises providing at a computer system a population selection engine for selecting data to be processed with a business application and or providing from the computer system a user interface for a user to interact with the population selection engine. In some cases the method further comprises receiving via the user interface identification of a first selection tool to be used to select data to be processed with the business application and or identifying a data source comprising the data to be processed with the business application. The method might also include invoking from the population selection engine a selection tool to select data to be processed with the business application receiving from the selection tool a selection of one or more sets of data to be processed with the business application and or providing the selected one or more sets of data to the business application for processing.

Other embodiments provide a method of processing data with a business application. One such method comprises providing at a computer system a population selection engine for selecting data to be processed with the business application and or maintaining at the computer system a set of metadata for each of one or more selection tools. The set of metadata in an aspect might define a relationship between each of the one or more selection tools and the population selection engine. The method can further include providing from the computer system a user interface for a user to interact with the population selection engine receiving via the user interface identification of a first selection tool to be used to select data to be processed with the business application and or identifying a data source comprising the data to be processed with the business application. In some cases the method also includes invoking based on at least a portion of the set of metadata the first selection tool from the population selection engine to select data to be processed with the business application receiving from the selection tool a selection of one or more sets of data to be processed with the business application. Optionally the method can include processing each of the one or more sets of data with the business application and or displaying an indication of a result of the processing.

Another exemplary embodiment provides methods of updating data in one or more business objects. One such method comprises providing at a computer system a population update engine for updating data in business objects and or maintaining at the computer system a first set of update context metadata for one or more update tools the set of update context metadata defining a relationship between the one or more update tools and the and the population update engine. In some cases the method might also comprise maintaining at the computer system a second set of update context metadata for a one or more data populations each of the data populations comprising a plurality of business objects the second set of update context metadata comprising information about a structure of business objects in each of the data populations.

The method in an aspect may also include providing from the computer system a user interface for a user to interact with the population update engine and or receiving at the population update engine and via the user interface a first user input. Based in some cases on the first user input a data population to be updated can be identified the data population in an aspect comprises one or more business objects. The method then may include identifying an update tool for updating the selected data population and or determining e.g. based on update context metadata for the identified data population one or more data elements that can be modified by the update tool. These data elements may be displayed for the user via the user interface and the method can include receiving via the user interface a second user input comprising a selection of one or more data elements to be updated and an update value for each of the one or more data elements.

In some cases the method further comprises invoking the identified update tool to update the identified data population with the update value for each of the one or more data elements and or providing an update status indicating a result of invoking the identified update tool.

Another embodiment provides a computer readable medium having encoded thereon a set of instructions executable by a computer to implement a framework for updating data in one or more business objects. In an aspect the framework comprises a population update engine configured to receive a data population comprising one or more business objects from one or more data sources and provide the data population to an update tool appropriate for updating one or more data elements. In another aspect the framework comprises an adapter interface configured to interact with one or more of a plurality of update tools including without limitation the update tool appropriate for the selected set of data to update the one or more data elements in each of the business objects. In a third aspect the framework comprises one or more sets of update context metadata including a first set of update context metadata defining a relationship between the population update engine and each of the plurality of update tools. Optionally the framework might comprise a user interface for receiving from a user input pertaining to the set of data to be updated 

Yet another set of embodiments provides computer systems. An exemplary computer system might comprise one or more processors which might be incorporated within one or more computers such as a server computer and or a client computer and a computer readable medium having encoded thereon instructions executable by the one or more processors to implement the software framework provided by various embodiments and or the perform one or more operations in accordance with methods of various embodiments.

While various aspects of certain embodiments of the invention have been summarized above the following detailed description illustrates a few exemplary embodiments in further detail to enable one of skill in the art to practice the invention. In the following description for the purposes of explanation numerous specific details are set forth in order to provide a thorough understanding of various embodiments the present invention. It will be apparent however to one skilled in the art that other embodiments of the present invention may be practiced without some of these specific details. In other instances well known structures and devices are shown in block diagram form. Several embodiments of the invention are described below and while various features are ascribed to different embodiments it should be appreciated that the features described with respect to one embodiment may be incorporated with another embodiments as well. By the same token however no single feature or features of any described embodiment should be considered essential to the invention as other embodiments of the invention may omit such features.

In an aspect some embodiments of the invention facilitate the processing of data with a business application. In particular certain embodiments can be used to select for processing a data population from a larger set of data in a data source and feed the selected data to a process in a business application or any other suitable application . Beneficially the population selection techniques of various embodiments can allow an application developer and or user an enhanced degree of flexibility in determining how to select data for a particular process.

As noted above there are a wide variety of business applications available and particular embodiments of the invention can be used by any such application as well as other types of software that require data processing and or selection. The term business application process sometimes referred to herein as a client process of the population selection engine or merely as a process as used herein means any type of process operation or series of operations performed on a data population by such an application. A business application process might for example be used to import data into a business application and or a database used by the business application to modify or update data already in such a database to provide decision support functions to generate reports and or the like. Virtually any function of a business application can be implemented as a business application process.

Many business applications are designed to process data in a variety of formats including without limitation data from a flat file spreadsheet etc. which might need to be imported into the business application and or a database used by the business application data already in a database which might need to be modified by the process etc. and or a variety of other types of information. Certain embodiments can allow the user to select the appropriate data selection tool for the type of data to be processed and or for the process to be used. In some embodiments one or more pre configured data selection tools may be provided with the business application while in other embodiments the user and or a developer can be given the option to interface with third party selection tools that may be more appropriate for the user s specific requirements.

Consider for example a business application that is configured to manage data about an educational institution such as a university. The business application might be configured to store e.g. in a relational database data about various students employees etc. If an administrator desires to add a new group of students to the database the administrator might have a spreadsheet with biographical information about the new students for instance each row in the spreadsheet might represent a data record for a particular spreadsheet and each column in the spreadsheet might represent a particular data element name address SAT score undergraduate GPA etc. for each student. The administrator then can use a spreadsheet specific selection tool to select the appropriate students from the spreadsheet based perhaps on the value of a particular data field in each student record in the spreadsheet to be processed by the business application and inserted into the database.

In this example the administrator might also want to update several student records already in the database for example to indicate that certain students have qualified for financial aid . In that case the administrator might need to use a selection tool that is configured to select data from a table in the database using for example structured query language SQL statements to select the appropriate population of students. The selected student records can then be processed to update those records to indicate that financial aid has been awarded using a standard process within the business application.

As this example illustrates some embodiments of the invention can be used to provide a user with a variety of data selection tools appropriate to the type s of data being selected while still providing a consistent interface with defined processes of a business application. The user is not necessarily limited to a pre configured data selection tool that is hard coded into the business application. Instead tools in accordance with certain embodiments of the invention provide the user with flexibility to use one of several defined data selection tools and in some cases even to interface with additional selection tools written by the user or a third party to select data to be processed allowing the user to choose the best selection tool for the type of data to be selected.

In an aspect one set of embodiments provides this flexibility through a robust software framework for selecting a data population to be processed. illustrate a population selection framework in accordance with some embodiments of the invention. In the illustrated embodiment the framework comprises a population selection engine and one or more selection tools . As used herein the term population selection engine is used to refer to any software tool application and or component that can be used to select data for processing by a business application and or optionally to format or convert the data for use by the process. In this way the population selection engine can serve as an intermediary between a predefined process in a business application and a set of data that might otherwise be unusable by the process.

In an aspect the population selection engine can use a variety of selection tools to interface with a variety of data sources to select and or obtain the data for processing. As used herein the term selection tool means any type of software tool application and or component that is configured to access a data source select data from the data source and or provide the data to the population selection engine . Examples of selection tools include without limitation a SQL query tool which might be provided by the business application and or the RDBMS for the database that can be used to query a database to select data sets a spreadsheet selection tool that can be used to interface with a spreadsheet and or a spreadsheet application to select data from the spreadsheet a spreadsheet application itself a standalone data selection application such as a flat file selection tool that can be used to parse a text or other type of file to select data an equation engine that can be used to allow a user to develop a formula for selecting data sets from a variety of data sources including database tables etc. and the like.

Hence the population selection engine is configured to interface both with a selection tool and with a client process in a business application which may be used to update a database that is used by the business application . The framework might also comprise a user interface which might be a graphical user interface provided by the business application by the selection tool itself etc. In some cases the user interface is provided as a web interface that is a set of one or more web pages served by a web server and or application server and displayed by a web browser on a client computer as described in more detail below .

The operation of the population selection engine is described in further detail below in general however the population selection engine invokes a selection tool based in some cases on user input received via the user interface . The selection tool is configured to select one or more sets of data referred to herein as a data population from a data source and return that data population to the population selection engine . The population selection engine then provides the selection results which include the selected data sets perhaps after conversion and or formatting as described in further detail below to the client process in the business application which processes the selected data sets optionally updating a database used by the business application.

The data source can be any of a variety of data sources including without limitation a database and or database table which in some cases might be the database used by the business application a spreadsheet a flat file a data store for a separate application such as an email application etc. and or any of a variety of data sources. In fact one benefit of certain embodiments is the wide ranges of different data sources that can be used to obtain data for processing by the business application using an appropriate selection tool virtually any type of data source may be supported.

Although only one selection tool and client process are depicted in a single population selection engine can support any number of either of these components. It is often the case however the selection engine needs to be configured to operate properly with a particular selection tool and or client process . Accordingly in some embodiments the framework includes metadata that defines how the population selection engine interacts with one or more selection tools as well as one or more client processes . Hence in an aspect the framework includes a container for storing one or more sets of selection tool metadata each of which pertains to one of the selection tools defined to the population selection engine and a container for storing one or more sets of selection context metadata each of which pertains to one of the client processes defined to the population selection engine. 

The term container is used herein to mean any sort of storage mechanism that can be used to store metadata and or specify the format of the metadata. In an aspect the container for a type of metadata might provide an abstract template to which the stored metadata should adhere. In other words the containers implemented by the population selection framework might serve as object classes from which actual sets of metadata can inherit properties such as XML tags etc. . In a set of embodiments for example a particular type of selection tool might be required to have a set of selection tool metadata with particular characteristics and the container can be used to ensure that the metadata complies with these requirements. The container can also be used to inform a display of the metadata in a user interface e.g. by providing data labels etc. . Hence in a sense the framework can be considered to include the metadata itself as the container is used to provide structure and or storage for the metadata which is used by the population selection engine to interface with the selection tools and or client processes .

Each set of selection tool metadata defines within the population selection engine a particular selection tool . The metadata can include a variety of information including without limitation information a name for the tool information about an implementation class adapter sometimes referred to herein as an application class adapter and described further below used by the selection tool a maximum number of data sets to return with the selection tool which can be used inter alia to accommodate limitations imposed by the selection tool itself and or the population selection engine whether a preview feature described further below is enabled by the selection tool and if so a maximum number of data sets to display in the preview. In some embodiments the selection tool metadata might also specify labels to be provided by the user interface of the population selection engine when the selection tool is used merely by way of example to allow the user to select data fields in the data source for filter criteria . If the selection tool is accessible via URL the metadata might also include information about how to access the selection tool by URL either to invoke the tool or to edit internal parameters of the selection tool e.g. by storing a URL to the appropriate resource for editing such parameters .

The selection tool metadata might also comprise information that is specific to the type of selection tool being defined by the metadata . For example if the selection tool is a SQL query based tool the selection tool metadata might include information about one or more SQL views to use for the query and or the like. This can force the selection tool to provide all necessary fields in the selection population returned as a result of the SQL query. As another example if the selection tool is a file based tool and or an external application the metadata might include information about the location of the tool how to invoke the tool what file support is provided e.g. either a location of a hard coded data source file a parameter indicating that the user should be provided with a facility to choose the data source file and or the like.

Each set of selection context metadata provides information about a particular client process defined by that set of metadata . For example if the client process is a batch process the selection context metadata might identify the batch process e.g. provide information about how to access and or invoke the batch process . If the client process is an interactive process the business application might a set of display components which could be user interface widgets windows web pages web pages components etc. that can be used to interact with the process and the selection context metadata might specify identify the display components such as for web components by URL . In this way the user interface of the population selection engine can be used to visually integrate for the user the population selection engine specific portions of the user interface with the interface to the client process . The selection context metadata in an aspect might specify which selection tools are allowed to select data for the client process for example if there is a known limitation in the client process that would prevent the use of a particular selection tool . Similarly access control can be implemented on a per tool basis for a particular client process e.g. by reference to an access control scheme of the business application and such access control parameters can be specified by the selection context metadata .

In a set of embodiments the selection context metadata for a particular client process also includes information specifying how the client process needs to receive data. Merely by way of example if the client process requires certain data fields in each data set for processing the selection context metadata might specify these required fields e.g. either by specifying the data fields by name or by referencing a database record that specifies the required data fields . There might also be optional data fields such as a person s name which may not be needed by the client process but could be useful for example in displaying a preview of the selected data and the selection context metadata might specify these optional data fields as well. In addition the selection context metadata often will specify a results record which is a format e.g. a database record having particular database fields for the data sets to be processed by the client process . This results record can be specified inter alia by referencing a target record in a database. In some cases the data fields will need to be mapped to the results record and or otherwise formatted or converted and the selection context metadata might also comprise information about how the data fields should be mapped formatted converted etc. Merely by way of example the selection context metadata might define a data conversion fill to apply when mapping a particular data field in a selected data set to a field in the results record a trivial example is a conversion of a temperature value from degrees Celsius to degrees Fahrenheit although much more complex conversion filters are possible as well.

In some embodiments the framework includes an application programming interface API that provides for consistent communication between the population selection engine and a variety of selection tools . In an aspect the API might comprise an application class adapter that includes a set of exposed methods that the selection tool must implement to interface with the population selection engine. In an exemplary embodiment the following methods among others may be implemented a LaunchTool method which can be used by the population selection engine to launch invoke the selection tool a LaunchToolValid method which returns a value indicating whether the current user or process has sufficient access rights and can be used by the population selection engine to ensure that the user or process has sufficient access rights to use the selection tool and or access the data source an OpenQuery method which can be used by the population selection engine to instruct the selection tool to open and or validate the selection and or selection criteria an ExecuteToRecord method which can be used by the population selection engine to cause the selection tool to select the desired data sets and return them in an appropriate format for processing including for example as a record in a table in the database or another database for example an ExecuteToRowSet method which can be used by the population selection engine to cause the selection tool to select the desired data sets and return them as a set of rows for processing merely by way of example as a temporary set of rows in volatile memory which might be stored later in a database table and an ExecuteToHTML method which can be used by the population selection engine to cause the selection tool to select the desired data sets and return them in an appropriate format for preview by the user for example as an HTML string which can be displayed by the user interface in a web browser . In some cases the filter criteria or search query used to select the data population can be passed from the population selection engine to the selection tool as a parameter for instance in the ExecuteToRecord ExecuteToRowSet and or ExecuteToHTML methods. It should be noted that the described methods are provided for descriptive purposes and should not be considered limiting. Various embodiments might implement other types of exposed methods and in fact might use a different type of API altogether. 

The population selection framework and or a portion thereof may be implemented within the business application and or may be provided by a standalone application configured to interface with the business application . Merely by way of example in the business application includes the population selection engine and metadata while in these components are not included within the business application but instead are configured to interface with the business application . In the embodiments illustrated by the selection tool and data source are depicted as residing outside the business application but in some embodiments one or both of these components may be incorporated within the business application as well. 

Some embodiments of the invention are implemented in a client server model. Merely by way of example the business application might be installed on an application server and the database might be installed on a database server and or on the application server itself . The population selection engine might also be configured to run on the application server. The user interface on the other hand might be configured to be displayed on a client computer operated by a user. The user interface might be provided by a dedicated client application in communication with the business application and or population selection engine and or as described elsewhere herein might be provided as a set of one or more web pages displayed in a web browser on the client computer. The selection tool depending on its nature might be installed on either the client computer and or the server computer. In any event a network might be provided as described in more detail below to provide communications between various computers that implement the framework .

As noted above in many cases a population selection engine needs to be configured to operate with a particular selection tool and or client process. illustrates a method of configuring a population selection engine. The method comprises providing a population selection framework block such as the framework described above with respect to to name one example. In an aspect providing a population selection framework can comprise one or more of a variety of operations including without limitation installing on a computer system a business application or other application that includes a population selection framework providing a user with access to such a framework e.g. through a business application and or other application that implements a population selection framework executing an application that implements such a framework and or the like.

The method further comprises providing a user interface from a computer system block . As noted above the user interface might be provided by the population selection engine itself from a business application associated with the population selection engine etc. Also as noted above some operations might be performed on a server computer while the user interface might be displayed on a client computer e.g. as one or more web pages in a web browser on the client computer . The user interface can allow the user to interact with the population selection engine either to configure the population selection engine or to use the population selection engine to select data for a client process as described in further detail below.

At block a set of selection tool metadata is received from the user e.g. via the user interface . As noted above in an aspect the set of selection tool metadata pertains to a selection tool that can be used by the population selection engine for selecting data to provide to a business application. is an exemplary screen display that illustrates one embodiment of a user interface for receiving a set of selection tool metadata for a SQL query based selection tool. The user interface includes data fields for the name of the selection tool a description of the selection tool a description of the application class adapter used by the selection tool whether the selection tool should be usable active by the population selection engine one or more SQL views to use for the selection tool a label to display in the user interface of the population selection engine a maximum number of data sets to return and a maximum number of data sets to preview . The user interface also includes a number of fields that specify parameters to use when launching the selection tool. Using this interface a user can provide selection tool metadata to the population selection engine which receives it from the user interface.

Returning to at block a set of selection context metadata is received from the user via the user interface. As noted above in an aspect the set of selection context metadata comprises information about a first client process that is implemented by the business application i.e. a business application process to process data selected by the selection tool. is an exemplary screen display that illustrates one embodiments of a user interface for receiving a set of selection context metadata. Using the interface the user can provide metadata about the name of the client process within the business application as well as display information for the population selection engine s user interface such as a context name and description an identification of a process type which might be a batch process interactive process etc. a status of the client process such as available to the population selection engine active or unavailable inactive as well as information about selection tools that can be used to select data for that client process and any access restrictions imposed on the use of those tools .

Returning once again to the method further comprises configuring the population selection engine based on the selection tool metadata and the selection context metadata block . Configuring the population selection engine comprises in an aspect storing the received metadata and or reading the metadata upon execution of the population selection engine so that the population selection engine can properly interact with the defined selection tools and client processes.

Once the population selection engine has been configured to define a particular selection tool and or client process the user can use the population selection engine to interface with the defined tool and or provide data to the defined process. Hence the method comprises in some cases providing e.g. via the user interface a display block . The display can be used to allow the user to select a defined selection tool for selecting a set of data and or a defined client process for processing the selected data . Techniques for selecting and or processing data are described in further detail below.

As noted above certain embodiments of the invention can be used to select data to be processed by a business application and optionally to process the data with a client process in the business application . illustrates a method of selecting and or processing data in accordance with one set of embodiments. The method is described herein generally with respect to the framework of it should be appreciated however that the method is not limited to any particular structural implementation or software architecture similarly the framework of can operate in accordance with the method as well as other modes of operation. 

The method comprises providing at a computer system a population selection engine block . As noted above in an aspect a population selection engine can be used to select data via a selection tool for example and or format convert data to be processed by a business application. Providing a population selection engine can comprise inter alia installing on a computer system a software application that comprises a population selection engine configuring a population selection engine as described above with respect to for example providing a user with access to a population selection engine including for example executing an application that implements a population selection engine and or the like.

The method further comprises maintaining metadata at the computer system block . The metadata includes in an aspect a set of metadata for each of one or more selection tools that are available to the population selection engine and or a set of metadata for each of one or more client processes to which the population engine can provide data. Some examples of such metadata are described above. In a particular aspect as noted above a population selection framework may comprise containers for storing metadata and maintaining metadata can comprise creating the metadata storing the metadata in the container s updating the metadata accessing the metadata and or the like.

The method also comprises providing from the computer system a user interface such as the user interface described above with respect to for the user to interact with the population selection engine block . An example of such a user interface is illustrated with respect to . The user interface can be used to allow a user to operate the population selection engine to select data and provide the data to a client process. The exemplary interface includes a data field for the user to choose a desired selection tool to be used select data sets to be processed a data field for the user to identify a name of a defined query to be performed by the selection tool an option to launch a query manager which can be used to edit the identified query and an option to preview the selected data sets . The exemplary interface also includes a set of display components from the selected client process which are visually integrated as described above on the same web page as the user interface for the population selection engine itself which allow the user to provide process specific parameters to be used when processing the selected data.

Returning to at block the method comprises identifying the client process for which data is to be selected and or specifying process specific parameters for processing of data with the process for example by reference to using the display components for the process as specified by the selection context metadata . In some embodiments this might include receiving a selection of a client process from among several defined client processes which can be displayed by an interface similar to the interface of . In other embodiments the client process might be identified in other ways. Merely by way of example in one implementation the user might invoke the client process from within the business application and the business application then might invoke the population selection engine to select data for the process which already has been selected by default by the business application.

At block the method comprises receiving via the user interface identification of a selection tool to be used to select data to be process with the business application for example by receiving input from the appropriate data field on the interface of .

Optionally the method might comprise receiving a set of filter criteria to be used to select data from the data source block . This filter criteria might be received from the user and or via the user interface. Merely by way of example the user interface might provide an input facility such as the data field on and or a query manager which can be used to assist the user in creating a SQL statement to use as a filter criteria for the user to provide a SQL statement or statements that specify a query to be performed by the selection tool to identify data sets to be selected. As another example the user interface might be configured to allow the user to specify an algorithm formula that should be provided to a search tool to select data from a spreadsheet a search criteria for searching a flat file etc.

At block the method comprises identifying a data source such as a data source described above with respect to which comprises the data to be processed with the business application. In some cases the data source might be identified based on input received from the user e.g. via the user interface . Merely by way of example if the data source is a spreadsheet flat file etc. the user might identify the location of the data source e.g. by typing in a file path by browsing a directory structure etc. . In other cases the data source might be identified with a different technique. Merely by way of example in some cases the selection tool metadata for the chosen selection tool might specify the data source that is to be used with that selection tool.

Optionally the method might include determining whether the user has sufficient access rights to use the chosen selection tool and or to access the chosen data source block . As noted above in some cases a selection tool API will include a method that allows the population selection engine to inquire of the selection tool whether the user has sufficient access rights. Hence determining whether the user has sufficient access rights might comprise relying on an access control scheme of the selection tool. Merely by way of example the population selection engine might be configured to call the appropriate method in the API with the user s ID or other credentials as a parameter and the method might return a Boolean value indicating whether the user is allowed to use the selection tool and or access the data source. In other embodiments the population selection engine might rely on its own access control scheme e.g. the population selection engine might have its own authentication and or authorization modules . In yet other embodiments the population selection engine might rely on the access control scheme of the business application itself for example in embodiments in which the population selection engine is incorporated within the business application and or accessed via the business application. 

At block the selection tool is invoked by the population selection engine. In some embodiments the selection tool is invoked based on some or all of the metadata maintained by the population selection engine. Merely by way of example the metadata as noted above might specify a location of the population selection engine a method of invoking the population selection engine etc. In some cases the selection tool is first launched using an API such as by using a LaunchTool method or a similar method and is then invoked via the API using for example an ExecuteToRecord or ExecuteToHTML method or similar methods . As noted above in some cases the invocation of the selection tool is also based at least in part on user input such as for example the user s choice of which selection tool to use the filter criteria provided by the user etc. In a particular embodiment the filter criteria is passed to the selection tool as a parameter to the invocation method. The technique for invoking the selection tool is discretionary however so long as the selection tool is successfully invoked and any necessary filter criteria are provided to the selection tool.

At block the selection tool selects one or more sets of data in the data source in accordance with the instructions received from the population selection engine which might include for example a filter criteria to apply . The nature of the sets of data generally will depend on the type of selection tool and or data source chosen. For example if the data source is a database table the data sets might comprises records from the table and or particular data fields from those records while if the data source is a flat file the data sets might comprise strings of data which might be delimited in some fashion . Similarly the techniques used by the selection tool to select sets of data from the data source will also generally depend on the nature of the data source and or selection tool. Given the wide variety of data sources and selection tools that can be supported by the population selection engine there is a correspondingly wide variety of data selection and gathering techniques that might be used. In one aspect the population selection engine is agnostic to the techniques used by the selection tool to select and or gather data sets since the population selection framework serves to isolate the population selection engine from these implementation specific details. More precisely in a set of embodiments when the population selection engine invokes the selection tool it can expect to receive the data sets from the selection tool in a specified format irrespective of the techniques used by the selection tool to select and or gather the data sets.

The selection tool then provides the selected data to the population selection engine in the format specified by the invocation of the selection tool and the population selection engine receives the selected data sets block . For example if the ExecuteToRecord method is used to invoke the selection tool the method might return the data sets to the population selection engine as a database record and or set of database records. As another example if the ExecuteToHTML method is used to invoke the selection tool the data sets might be returned as an HTML formatted string suitable for display by the population selection engine in a web browser. In some cases receiving the data sets at the population selection engine might comprise receiving the actual data. In other cases receiving the data sets might comprise receiving references or pointers to the data sets in a database such as for example when the data source is the same database that stores information for the business application .

In some cases the population selection engine may be configured to display e.g. via the user interface a preview of the selected data sets block . This display can provide the user with a preview of the data to be processed before the user has to commit to actually processing the data. In this way the user can ensure that the correct data sets have been selected. If necessary the user can abort the processing at this point revise the filter criteria and re execute the selection process to select more appropriate data for processing.

If necessary the received data sets can be reformatted and or otherwise converted by the population selection engine into a format required by the client process at the business application. As noted above in some embodiments the selection context data for a particular client process might specify that data from a data source needs to be mapped to particular data fields or placed in a particular format for processing by the process. In such cases the population selection engine by reference to the metadata will reformat or convert the selected data sets as necessary before or while providing the data to the client process block .

At block the selected data sets are provided to the client process. Once again the way in which the data sets are provided to the process depends on the nature of the data sets and the nature of the client process. In some cases if the data sets reside in database tables within the business application or that are accessible by the business application providing the data sets might simply comprise providing references or pointers to the data sets. In other cases such as when the data sets are selected from a data source outside the business application the data sets might be stored in a result record in database table accessible by the business process. In yet other cases the data sets might be fed as raw or formatted data directly from the population selection engine to the client process.

The client process at the business application then processes each of the selected data sets block . In some cases the client process is called or invoked by the population selection engine. In other cases the process might already be running. The client process as noted above can be configured to process the selected data sets either interactively and or in a batch mode. The operations performed by the client process in processing the data sets vary widely depending on the nature of the client process. Those skilled in the art will recognize that a typical business application can perform a variety of processes which might be pre defined by the application defined by the user etc. on a data set and any of such processes can be supported by particular embodiments of the invention. In some cases the processing will modify a database used by the business application block such as by creating new records in a table of the database modifying existing records etc. Once again those skilled in the art will appreciate that a business application process can perform a wide variety of operations that will modify a database and or tables rows etc. therein and that any of such operations might be implemented by the client processes for which the population selection engine selects data. Merely by way of example if the data sets are selected from a data source external to the database modifying the database might comprise creating one or more new records in the database corresponding to each of the selected data sets. On the other hand if the database is the data source then the client process might modify the database by updating the records that comprise and or correspond to the selected data sets.

In some embodiments the method is configured to display e.g. via the user interface an indication of a result of the processing. In some cases this indication might simply be a notice that processing has successfully completed a warning about any data sets that were not successfully processed etc. In other cases the indication might provide additional details including for example the number of data sets processed number of database records updated or created etc. . In some cases displaying the indication of a result of the processing might comprise writing the indication to a log file emailing the indication to an email address of the user or another administrator etc.

Another set of embodiments provides flexibility in updating business objects usually although not necessarily in the context of a business application through a robust software framework for updating a data population. In an aspect such embodiments can use the population selection tools described above to select business objects to be updated. In another aspect the update framework of various embodiments may incorporate or be incorporated within a population selection framework as described above and or an integrated software application may perform both data population and update functionality. As used herein the term business object refers to any collection of data that can be processed using the tools described herein. Business objects include but are not limited to database tables database records instances of object oriented classes e.g. Java classes text files spreadsheet files and or the like. 

In some cases update utilities provided by certain embodiments may be implemented in conjunction with a business application and or may be incorporated within a business application. There are a variety of possible configurations. illustrate just a few possibilities although one skilled in the art will recognize that other arrangements are possible within the scope of the invention.

Hence in one aspect embodiments can be used to provide interoperability between selection tools and update tools that previously were inoperable by providing a standardized framework for this operability. Merely by way of example as noted above tools provided by certain embodiments can extend the logic and or functionality of business applications outside the traditional database tables used by the business application while in another aspect these tools can be used to provide more flexible techniques for modifying data within such database tables.

In an aspect the population update engine can communicate with a population selection framework and in particular the population selection engine to interface with a variety of data sources to select and or obtain the data for processing for example in the manner described above . More generally however within the context of the population update tools described in this section the population selection engine can be any type of software tool application and or component that is configured to access a data source select data from the data source and or provide the data to the population update engine . Several embodiments of the population selection engine are described above in Sections I III.

The population update engine is configured to interface both with the population selection engine and with the update tool . In one aspect the population update engine employs a plurality of adapter interfaces each of which is configured to interact with an API or other inter process inter application communication facility provided by the update tool. By using an adapter interface that is customized for a particular update tool the population update engine itself can be generalized to operate with a number of update tools .

One benefit of certain embodiments is that a wide variety of update tools and correspondingly a wide variety of business objects can be supported by the update utility . Such update tools can include without limitation desktop applications such as spreadsheet programs which can treat a spreadsheet file as a business object to be updated standard and or proprietary data access utilities database management systems and or procedures within those systems business applications and or the like. Merely by way of example the business application processes described above in Sections I III can be considered update tools in accordance with some embodiments.

In some embodiments the framework might also comprise a user interface which might be a graphical user interface provided by the business application an interface provided by a standalone software application that implements the framework and or a selection engine and or the like. Similar to the interface for the population selection framework described above the user interface may be provided as a web interface that is a set of one or more web pages served by a web server and or application server and displayed by a web browser on a client computer as described in more detail below .

The framework also provides for update context metadata which an be stored in a container similar to the metadata described above in Sections I III. The update context metadata can serve any of several functions in the operation of the update utility . A first type of update context metadata defines a relationship between the population update engine and each of the available update tools . In particular this type of metadata identifies an appropriate adapter interface for the update tool . This type of metadata might also identify the functionality of the update tool e.g. what types of business objects the update tool can update and the like .

A second type of update context metadata can be used to describe the properties of business objects themselves. Merely by way of example in some cases as noted above certain data elements in a business object may need to be protected as their modification may adversely impact the business object of which they are a part. Hence this second type of update context metadata can be used to define which data elements within a business object are permissible to modify. In addition this second type of update context metadata might describe the structure of the business object including without limitation a description of the different data elements and their types specification of access methods and or the like although in some embodiments the update tool itself is configured to account for this type of information.

In some cases the update context metadata might also comprise information about available population selection engines and or tools including without limitation metadata that describes how the population update engine should interface with such engines tools what data sources are appropriate for such tools and or the like. Merely by way of example in some cases a user might select a data source from which to select the data population and update engine might consult appropriate metadata to determine which vehicle e.g. selection engine selection tool etc. should be used to select the data population based on information in the metadata about that data source and or data population. In other cases however the user might specify which population selection engine and or selection tool to use. In still other cases the update engine might use the population selection framework described above as its default or only vehicle for selecting data and the update engine therefore might rely on the population selection engine to determine appropriate selection tools etc. perhaps in the fashion described above.

The operation of the population update engine is described in further detail below in general however the population update engine interfaces with the population selection engine to select and retrieve data from a data source based in some cases on user input received via user interface . The population update engine is configured to receive a selection one or more business objects i.e. sets of data referred to herein as a data population from a population selection tool based on data from a data source and to provide that data population to the update tool for data updating. It should be noted that the terms receive and provide are used broadly in this context to include receiving and or providing pointers and or other references to the selected business objects rather than passing the business objects themselves although this is possible as well .

The data source can be any of a variety of data sources including without limitation a database and or database table which in some cases might be the database used by the business application a spreadsheet a flat file a data store for a separate application such as an email application etc. and or any of a variety of data sources. In fact one benefit of certain embodiments is the wide ranges of different data sources that can be used select a data population to be updated as noted above by using an appropriate population selection engine virtually any type of data source may be supported.

It should be noted that in some cases the data source may be a data store that holds the business objects to be updated but this need not necessarily be the case. Merely by way of example in some implementations the data source might be a database and the business objects might be records within the database. By contrast in other cases the data source might be the database but the business objects might be a set of instances of a Java class outside the database. As yet another example the data source might be a spreadsheet of comprising multiple entries and the business objects might be records in a database the entries in the spreadsheet might provide selection criteria defining which records in the database should be selected.

Although only one population selection engine and update tool are depicted in a single population update engine can support any number of either of these components for example through the use of appropriate adapter interfaces and or update context metadata specific to each update tool .

As illustrated by the update utility and or a portion thereof may be implemented within a business application and or may be provided by a standalone application configured to interface with the business application . Merely by way of example in the business application includes the population update engine and metadata while in these components are not included within the business application but instead are configured to interface with the business application . As another example illustrates a update utility incorporated within a business application but configured to use an update tool outside the business application to update a business object also outside the business applications. A variety of other configurations can be supported as well. Merely by way of example in the embodiments illustrated by the population selection engine and data source are depicted as residing outside the business application but in some embodiments one or both of these components may be incorporated within the business application as well. 

The tools provided by some embodiments may be implemented in a client server model. Merely by way of example the business application might be installed on an application server and the business objects might be records in a database installed on a database server and or on the application server itself . The population update engine might also be configured to run on the application server. The user interface on the other hand might be configured to be displayed on a client computer operated by a user. The user interface might be provided by a dedicated client application in communication with the business application and or population update engine and or as described elsewhere herein might be provided as a set of one or more web pages displayed in a web browser on the client computer. In any event a network might be provided as described in more detail below to provide communications between various computers that implement the framework .

Somewhat similarly to the population selection engine described above an update utility in many cases may need to be configured to operate with a particular population selection engine and or client process. illustrates a method of configuring a population update engine. The method comprises providing a population update framework block such as one of the frameworks described above with respect to to name one example. In an aspect providing a population update framework can comprise one or more of a variety of operations including without limitation installing on a computer system a business application or other application such as an update utility that includes a population update framework providing a user with access to such a framework e.g. through a business application and or other application that implements a population update framework executing an application that implements such a framework and or the like.

The method further comprises providing a user interface from a computer system block . As noted above the user interface might be provided by the population update engine itself from a business application associated with the population update engine from a population selection engine etc. Also as noted above some operations might be performed on a server computer while the user interface might be displayed on a client computer e.g. as one or more web pages in a web browser on the client computer . The user interface can allow the user to interact with the population update engine either to configure the population update engine or to use the population update engine to update data for a client process as described in further detail below.

At block a set of update context metadata is received from the user via the user interface. As noted above in an aspect the set of update context metadata may comprise one or more different types of information including without limitation information about one or more business objects that are implemented including but not limited to business objects that are by a business application information about available update tools information about selection tools and or the like. Merely by way of example is an exemplary screen display that illustrates one embodiment of a user interface for receiving a set of update context metadata about a type of business object in this case the business object type is a database record although other types of business objects can be supported as well as noted above a business object can be in various embodiments a database record a Java structure a spreadsheet a flat file etc. In an embodiment using the interface the user can provide context metadata about the fields of a record previously selected that should be made available for update e.g. fields that will not adversely affect the operation of the database if they are modified by the update process . While the illustrated example allows selection of fields in the database record other types of data elements may be selected depending on the type of business object about which metadata is being provided. 

Returning once again to the method further comprises configuring the population update engine based on the update context metadata block . Configuring the population update engine comprises in an aspect storing the received metadata e.g. in an appropriate container and or reading the metadata upon execution of the population update engine so that the population update engine can properly interact with the population selection engine and or various update tools and or their APIs .

Once the population update engine has been configured to define a particular business object and or client process the user can use the population update engine to interface with a vehicle for selecting data e.g. a population selection engine and or provide data to defined update tools. Hence the method comprises in some cases providing e.g. via the user interface a display block . The display can be used to allow the user to select a defined a population selection engine for selecting a data population and or an update tool for updating data in the business objects in the selected data population . Techniques for updating and or processing data are described in further detail below.

As noted above some embodiments provide tools that can be used to update a business object to be processed by a business application and optionally to process the data with a client process in the business application and or stored in a database. illustrates a method of updating a business object in accordance with one set of embodiments. The method is described herein generally with respect to the framework of it should be appreciated however that the method is not limited to any particular structural implementation or software architecture similarly the frameworks of can operate in accordance with the method as well as other modes of operation. 

The method comprises providing at a computer system a population update engine block . As noted above in an aspect a population update engine can be used to update data in one or more business objects in a data population. Providing a population update engine can comprise inter alia installing on a computer system a software application that comprises a population update engine configuring a population update engine as described above with respect to for example providing a user with access to a population update engine including for example executing an application that implements a population update engine and or the like.

The method further comprises maintaining metadata at the computer system block . The metadata includes in an aspect a set of context metadata for each type of business object that can be updated metadata for the population selection engine itself metadata for various selection vehicles and or metadata for various update tools to which the population update engine can provide data. Some examples of such metadata are described above. In a particular aspect as noted above a population update framework may comprise containers for storing metadata and maintaining metadata can comprise creating the metadata storing the metadata in the container s updating the metadata accessing the metadata and or the like.

The method also comprises providing from the computer system a user interface such as the user interface described above with respect to for the user to interact with the population update engine block . An example of a screen display of one such user interface is illustrated with respect to . The user interface can be used to allow a user to operate the population update engine to update data and provide the updated data to a client process. The exemplary interface includes an interface element e.g. a text entry field pulldown menu combobox etc. for the user to choose a data source to be subject to the update and one or more interface elements collectively to provide selection criteria to be provided to the selection tool to define a portion of the business object. The interface may also include an interface element such as a pulldown menu for the user to identify a selection tool as to select the data population to be updated and optionally one or more other interface elements for providing additional data specific to the selected selection tool such as in the case of a selection tool that selects from a database a text entry field for the user to identify a name of a query to define a view in the database to be used to perform the selection and or a link to open a query manager. Because the interface illustrates an embodiment that implements a selection engine for selecting the data population many of the interface elements may operate in similar fashion to their counterpart elements in the interface described above with respect to . If other selection vehicles are used these interface elements can vary according to the implementation of those selection vehicles .

The interface may also provide an interface element that allows the user to preview the selected data population prior to execution of the update e.g. in the manner described above. The exemplary interface also includes a field selector interface element to select a data element be updated. In an aspect the field selector interface element will display and therefore allow selection of only data elements that have been defined e.g. by metadata as being available for update as described above. A value selector interface element allows the user to input an update value for the selected field i.e. a value to be inserted into the data element during the update process . This input value can be a constant value and or it can be a formula which may be evaluated at update runtime to determine a constant update value and or which may itself be inserted as the update value. In embodiments the value selector provides a defined set of values from which the user can select allows for entry of one or more values. This behavior may be defined e.g. by the metadata according to the type of data element. Merely by way of example if a data element is of a Boolean type the interface element might allow selection of only Boolean values while if the data element is of integer type the interface element might allow input of any integer value. Data type validation may be performed on the provided on the input if text input is allowed. 

An interface element may be provided to allow the user to select additional data elements for updating. Upon selection of this interface element the interface provides an additional set of interface elements similar to those elements described above.

Returning to at block the method comprises receiving user input e.g. via a user interface such as the user interface described above . Depending on the embodiment this user input can identify the data population from which business objects are to be selected a selection tool for selecting the business objects an update tool to use for the update and or the like. Based on the user input the method identifies a data population to be updated block . In some embodiments identifying the data population comprises invoking a selection tool e.g. using a population selection engine to select the population based on selection criteria provided by the user perhaps in the manner described above in Section III and or via the user interface illustrated by . In some cases identifying the data population comprises identifying a data source from which the data population should be drawn block e.g. based on input from the user based on update context metadata about the business objects in the data population etc.

In other embodiments the data population might be identified in other ways. Merely by way of example in one implementation the user might access a business object from within a business application and the business application then might invoke the population update engine to update data for the business object which already has been selected by default by the business application.

The method also includes identifying an update tool to update the business objects in the selected data population block . In some embodiments the update tool may be identified implicitly for example based on update context metadata for the selected data population which might specify an appropriate update tool . In other cases only one update tool may be configured and or there may be a default update tool. In other embodiments the update tool may be identified explicitly e.g. by the user providing input on which update tool should be used .

Optionally the method might include determining whether the user has sufficient access rights to use the chosen update tool and or to access the chosen data source block . In some cases the API for an update tool API may include a method that allows the update engine to inquire of the update tool whether the user has sufficient access rights. In other cases the population update engine might receive e.g. from the user a set of user credentials and attempt to access the update tool and by the extension the update tool might attempt to access the business objects to be updated using these credentials such that the business objects and or an application that manages the business objects such as a DBMS a business application etc. provides access control for the update process itself. Hence determining whether the user has sufficient access rights might comprise relying on an access control scheme external to the update utility itself. Merely by way of example the population update engine might be configured to call the appropriate method in the API for the update tool with the user s ID or other credentials as a parameter and the method might return a Boolean value indicating whether the user is allowed to use the update tool and or access the data source. In other embodiments the population update engine might rely on its own access control scheme e.g. the population update engine might have its own authentication and or authorization modules . In still other embodiments the population update engine may provide its own access control scheme perhaps controlled by update context metadata and or rely on access controls provided by a population selection engine. There are a wide variety of ways in which access control can be implemented in accordance with various embodiments.

At block the population selection engine determines one or more data elements that can be modified in each of the business objects in the data population. In one aspect each of the business objects in a data population is of a common type i.e. has the same data elements as the other business objects in the data population although of course these data elements may have different values in each respective data object. As noted above update context metadata can specify for a particular type of business object the data elements that are available to be updated e.g. those elements whose modification will not adversely affect the operability of the business object so this determination can be based on such metadata. Essentially the population update engine is configured only to update data elements designated by the metadata as being updatable.

In some embodiments the population update engine displays for the user e.g. via the user interface one or more data elements that can be modified block . One example of such a display is the user interface described above. The user then selects the desired data elements to be updated and or provides input on the update values for each of the data elements as described above with respect to for example. Upon receiving this input at block again e.g. via the user interface the population selection engine evaluates any formulas provided by the user as the basis for the update value to derive respective values for the data element in each of the business objects to be updated block or optionally does not evaluate the formula s but instead passes them to the update tool which might itself evaluate the formula s or might merely insert the formula s themselves as the updated value of the data elements in the business objects depending on configuration options which may be specified by update context metadata.

In some cases the population update engine may be configured to display e.g. via the user interface a preview of the updated business objects block . This display can provide the user with a preview of the updated data before the user has to commit to actually updating and storing the data. In this way the user can ensure that the correct data sets have been updated and the updates have been made correctly to the data sets. If necessary the user can abort the update process at this point revise the update values and or selection of data elements and or the like.

At block the population update engine invokes the update tool identified as the proper update tool to use in this instance block . noted above in some cases invoking an update tool comprises accessing an API of the update tool block using for example an adapter interface as described above. In an embodiment invoking the update tool comprises providing the data population again either by actually passing the data objects in the data population or passing a reference to the business objects to the update tool along with information specifying the data element s to be updated in each business object and the value s with which those element s should be updated.

At block the update tool updates the specified data element s in each business object in the data population with the specified update values. Necessarily the procedures used by the update tool will depend on the nature of the business objects being updated and or the functionality of the update tool itself. As noted above the update utility and specifically the population update engine can be considered in many cases agnostic of the techniques used by the update tool indeed one benefit of many embodiments is the fact that the update utility does not need to be aware of how the update tool itself operates. To list a few examples however the update tool might call one or more SQL procedures to update records in a database might call a business application process to add modify and or delete business transactions in the business application and or the like.

In some embodiments the method is configured to provide an update status that provides an indication of the result of the update process block e.g. by displaying a status indication via the user interface. In some cases this indication might simply be a notice that the update has successfully completed a warning about any business objects that were not successfully updated etc. In other cases the indication might provide additional details including for example the number of business objects updated etc. . In some cases providing the indication of a result of the updating might comprise writing the indication to a log file emailing the indication to an email address of the user or another administrator etc.

The computer system is shown comprising hardware elements that can be electrically coupled via a bus or may otherwise be in communication as appropriate . The hardware elements can include one or more processors including without limitation one or more general purpose processors and or one or more special purpose processors such as digital signal processing chips graphics acceleration chips and or the like one or more input devices which can include without limitation a mouse a keyboard and or the like and one or more output devices which can include without limitation a display device a printer and or the like.

The computer system may further include and or be in communication with one or more storage devices which can comprise without limitation local and or network accessible storage and or can include without limitation a disk drive a drive array an optical storage device solid state storage device such as a random access memory RAM and or a read only memory ROM which can be programmable flash updateable and or the like. The computer system might also include a communications subsystem which can include without limitation a modem a network card wireless or wired an infra red communication device a wireless communication device and or chipset such as a Bluetooth device an 802.11 device a WiFi device a WiMax device cellular communication facilities etc. and or the like. The communications subsystem may permit data to be exchanged with a network such as the network described below to name one example and or any other devices described herein. In many embodiments the computer system will further comprise a working memory which can include a RAM or ROM device as described above.

The computer system also can comprise software elements shown as being currently located within the working memory including an operating system and or other code such as one or more application programs which may comprise computer programs provided by various embodiments and or may be designed to implement methods and or configure systems provided by various embodiments as described herein. Merely by way of example one or more procedures described with respect to the method s discussed above might be implemented as code and or instructions executable by a computer and or a processor within a computer . A set of these instructions and or code might be stored on a computer readable storage medium such as the storage device s described above. In some cases the storage medium might be incorporated within a computer system such as the system . In other embodiments the storage medium might be separate from a computer system i.e. a removable medium such as a compact disc etc. and or provided in an installation package such that the storage medium can be used to program a general purpose computer with the instructions code stored thereon. These instructions might take the form of executable code which is executable by the computer system and or might take the form of source and or installable code which upon compilation and or installation on the computer system e.g. using any of a variety of generally available compilers installation programs compression decompression utilities etc. then takes the form of executable code.

It will be apparent to those skilled in the art that substantial variations may be made in accordance with specific requirements. For example customized hardware might also be used and or particular elements might be implemented in hardware software including portable software such as applets etc. or both. Further connection to other computing devices such as network input output devices may be employed.

In one aspect certain embodiments employ a computer system such as the computer system to perform methods provided by other embodiments. According to a set of embodiments some or all of the procedures of such methods are performed by the computer system in response to processor executing one or more sequences of one or more instructions which might be incorporated into the operating system and or other code such as an application program contained in the working memory . Such instructions may be read into the working memory from another machine readable medium such as one or more of the storage device s . Merely by way of example execution of the sequences of instructions contained in the working memory might cause the processor s to perform one or more procedures of the methods described herein.

The terms machine readable medium and computer readable medium as used herein refer to any medium that participates in providing data that causes a machine to operation in a specific fashion. In an embodiment implemented using the computer system various machine readable media might be involved in providing instructions code to processor s for execution and or might be used to store and or carry such instructions code e.g. as signals . In many implementations a computer readable medium is a physical and or tangible storage medium. Such a medium may take many forms including but not limited to non volatile media volatile media and transmission media. Non volatile media includes for example optical or magnetic disks such as the storage device s . Volatile media includes without limitation dynamic memory such as the working memory . Transmission media includes coaxial cables copper wire and fiber optics including the wires that comprise the bus as well as the various components of the communication subsystem and or the media by which the communications subsystem provides communication with other devices .

Common forms of physical and or tangible computer readable media include for example a floppy disk a flexible disk hard disk magnetic tape or any other magnetic medium a CD ROM any other optical medium punchcards papertape any other physical medium with patterns of holes a RAM a PROM and EPROM a FLASH EPROM any other memory chip or cartridge or any other medium from which a computer can read instructions and or code.

Various forms of machine readable media may be involved in carrying one or more sequences of one or more instructions to the processor s for execution. Merely by way of example the instructions may initially be carried on a magnetic disk and or optical disc of a remote computer. A remote computer might load the instructions into its dynamic memory and send the instructions as signals over a transmission medium to be received and or executed by the computer system .

The communications subsystem and or components thereof generally will receive the signals and the bus then might carry the signals to the working memory from which the processor s retrieves and executes the instructions. The instructions received by the working memory may optionally be stored on a storage device either before or after execution by the processor s .

A set of embodiments comprises systems for processing data with a business application for selecting data to be processed and or for configuring a population selection engine. Merely by way of example illustrates a schematic diagram of a system that can be used in accordance with one set of embodiments. The system can include one or more user computers . The user computers can be general purpose personal computers including merely by way of example personal computers and or laptop computers running any appropriate flavor of Microsoft Corp. s Windows and or Apple Corp. s Macintosh operating systems and or workstation computers running any of a variety of commercially available UNIX or UNIX like operating systems. These user computers can also have any of a variety of applications including one or more applications configured to perform methods of various embodiments as well as one or more office applications database client and or server applications and web browser applications. Alternatively the user computers can be any other electronic device such as a thin client computer Internet enabled mobile telephone and or personal digital assistant capable of communicating via a network e.g. the network described below and or displaying and navigating web pages or other types of electronic documents. Although the exemplary system is shown with three user computers any number of user computers can be supported.

Certain embodiments may operate in a networked environment which can include a network . The network can be any type of network familiar to those skilled in the art that can support data communications using any of a variety of commercially available protocols including without limitation TCP IP SNA IPX AppleTalk and the like. Merely by way of example the network can be a local area network LAN including without limitation an Ethernet network a Token Ring network and or the like a wide area network a virtual network including without limitation a virtual private network VPN the Internet an intranet an extranet a public switched telephone network PSTN an infra red network a wireless network including without limitation a network operating under any of the IEEE 802.11 suite of protocols the Bluetooth protocol known in the art and or any other wireless protocol and or any combination of these and or other networks.

Some embodiments can include one or more server computers . Each of the server computers may be configured with an operating system including without limitation any of those discussed above as well as any commercially or freely available server operating systems. Each of the servers may also be running one or more applications which can be configured to provide services to one or more clients and or other servers .

Merely by way of example one of the servers may be a web server which can be used merely by way of example to process requests for web pages or other electronic documents from user computers . The web server can also run a variety of server applications including HTTP servers FTP servers CGI servers database servers Java servers and the like. In some embodiments the web server may be configured to serve web pages that can be operated within a web browser on one or more of the user computers to perform methods of various embodiments.

The server computers in some embodiments might include one or application servers which can include one or more applications accessible by a client running on one or more of the client computers and or other servers . Merely by way of example the server s can be one or more general purpose computers capable of executing programs or scripts in response to the user computers and or other servers including without limitation web applications which might in some cases be configured to perform methods of certain embodiments . Merely by way of example a web application can be implemented as one or more scripts or programs written in any suitable programming language such as Java C C or C and or any scripting language such as Perl Python or TCL as well as combinations of any programming scripting languages. The application server s can also include database servers including without limitation those commercially available from Oracle Microsoft Sybase IBM and the like which can process requests from clients including depending on the configuration database clients API clients web browsers etc. running on a user computer and or another server . In some embodiments an application server can create web pages dynamically for displaying the information in accordance with various embodiments such as user interfaces for operating and or configuring a population selection engine as described above for example. Data provided by an application server may be formatted as web pages comprising HTML Javascript etc. for example and or may be forwarded to a user computer via a web server as described above for example . Similarly a web server might receive web page requests and or input data from a user computer and or forward the web page requests and or input data to an application server. In some cases a web server may be integrated with an application server.

In accordance with further embodiments one or more servers can function as a file server and or can include one or more of the files e.g. application code data files etc. necessary to implement methods incorporated by an application running on a user computer and or another server . Alternatively as those skilled in the art will appreciate a file server can include all necessary files allowing such an application to be invoked remotely by a user computer and or server . It should be noted that the functions described with respect to various servers herein e.g. application server database server web server file server etc. can be performed by a single server and or a plurality of specialized servers depending on implementation specific needs and parameters.

In certain embodiments the system can include one or more databases . The location of the database s is discretionary merely by way of example a database might reside on a storage medium local to and or resident in a server and or a user computer . Alternatively a database can be remote from any or all of the computers so long as it can be in communication e.g. via the network with one or more of these. In a particular set of embodiments a database can reside in a storage area network SAN familiar to those skilled in the art. Likewise any necessary files for performing the functions attributed to the computers can be stored locally on the respective computer and or remotely as appropriate. In one set of embodiments the database s can be a relational database such as an Oracle database that is adapted to store update and retrieve data in response to SQL formatted commands. The database might be controlled and or maintained by a database server as described above for example.

While certain features have been described with respect to exemplary embodiments one skilled in the art will recognize that numerous modifications are possible. For example the methods and processes described herein may be implemented using hardware components software components and or any combination thereof. Further while various methods and processes described herein may be described with respect to particular structural and or functional components for ease of description methods provided by various embodiments are not limited to any particular structural and or functional architecture but instead can be implemented on any suitable hardware firmware and or software configuration. Similarly while various functionality is ascribed to certain system components unless the context dictates otherwise this functionality can be distributed among various other system components in accordance with different embodiments.

Moreover while the procedures comprised in the methods and processes described herein are described in a particular order for ease of description unless the context dictates otherwise various procedures may be reordered added and or omitted in accordance with various embodiments. Further the procedures described with respect to one method or process may be incorporated within other described methods or processes likewise system components described according to a particular structural architecture and or with respect to one system may be organized in alternative structural architectures and or incorporated within other described systems. Hence while various embodiments are described with or without certain features for ease of description and to illustrate exemplary features the various components and or features described herein with respect to a particular embodiment can be substituted added and or subtracted from among other described embodiments unless the context dictates otherwise. Consequently although certain features have been described with respect to exemplary embodiments it will be appreciated that the invention is intended to cover all modifications and equivalents within the scope of the following claims.

