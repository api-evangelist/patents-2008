---

title: Detecting network interface card level malware
abstract: Computers are monitored for malware communicating directly with the NIC. The infection of computers with NIC level malware is detected. Operating system level network packet transmission statistics are monitored, as are transmission counters maintained by the NIC. The operating system level transmission statistics are compared to the NIC level transmission counters for a given period of time. If the NIC counters indicate the occurrence of a greater number of transmissions than as is indicated by the operating system level statistics, it is concluded that the computer is infected with NIC level malware.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08112806&OS=08112806&RS=08112806
owner: Symantec Corporation
number: 08112806
owner_city: Mountain View
owner_country: US
publication_date: 20081027
---
This invention pertains generally to computer security and more specifically to detecting malware that operates at the Network Interface Card level.

A new class of malware operates by bypassing the Network Driver Interface Specification NDIS . The NDIS is an application programming interface API for network interface cards NICs . It used in Microsoft Windows and to varying extents is also supported in Linux and other operating systems. By writing directly to the NIC the new class of malware can send and receive data on a host computer without detection.

More specifically at Blackhat Defcon 2008 Sherri Sparks and Shawn Embleton made a presentation titled Deeper Door exploiting the NIC chipset. This talk disclosed a type of root kit that bypasses NDIS by interacting directly with the NIC. By going below NDIS to which Windows network interface drivers are written the attack circumvents current software firewalls and intrusion detection systems. This is so because these security applications monitor packets at the NDIS level. The Deeper Door presentation described targeting the Intel 8255x chipset which has open documentation and with which many Intel cards are compatible. The described attack can both send and receive data without the NDIS layer being aware of the exploit. It would be desirable to address this security vulnerability both for the Intel 8255x chipset and for other NIC hardware.

Computers are monitored for malware communicating directly with the NIC. The infection of computers with NIC level malware is detected. Operating system level network packet transmission statistics are monitored as are transmission counters maintained by the NIC. The operating system level transmission statistics are compared to the NIC level transmission counters for a given period of time. If the NIC counters indicate the occurrence of a greater number of transmissions than as is indicated by the operating system level statistics it is concluded that the computer is infected with NIC level malware.

The features and advantages described in this summary and in the following detailed description are not all inclusive and particularly many additional features and advantages will be apparent to one of ordinary skill in the relevant art in view of the drawings specification and claims hereof. Moreover it should be noted that the language used in the specification has been principally selected for readability and instructional purposes and may not have been selected to delineate or circumscribe the inventive subject matter resort to the claims being necessary to determine such inventive subject matter.

The Figures depict embodiments of the present invention for purposes of illustration only. One skilled in the art will readily recognize from the following discussion that alternative embodiments of the structures and methods illustrated herein may be employed without departing from the principles of the invention described herein.

When the operating system OS starts up either when the OS is booted or when the OS wakes from a sleep or hibernation state a malware detection component reads the send and receive counters of the NIC . More specifically the Intel 8255x chipset provides on chip counters that track a variety of events associated with both the transmission and receipt of data. These on chip counters are updated by the NIC when it completes the processing of a frame. For example after the completion of the transmission of a frame the appropriate counter is updated. Likewise the relevant counter is updated when a frame is received. The NIC returns the counters on demand in response to the issuing of a specific command i.e. the Dump Statistical Counters command or the Dump and Reset Statistical Counters command in the SCB CUC field . By issuing an appropriate command the malware detection component reads the NIC s send and receive counters .

Because these counters track send and receive information at a NIC level this information accounts for all packet transmission activity whether it was executed by an NDIS compliant driver or via the NIC directly. It is to be understood that many NIC chipsets other than the Intel 8255x maintain similar counters which can be accessed in similar manners all within the scope of various embodiments of the present invention.

Additionally the malware detection component takes into account the OS level network transmission statistics upon start up of the OS . Many widely used OSs maintain counters of packets received and transmitted at an OS level e.g. by an NDIS compliant driver . In the context of such an OS the malware detection component reads the OS level send and receive counters . All network transmission that occurs via an NDIS compliant driver will be accounted for by these counters . In the case of an OS that does not provide such counters the malware detection component can track packets transmitted and received itself by using standard OS services. In embodiments in which the OS does not maintain counters the malware detection component can utilize 0 or another value as the initial OS level count.

The malware detection component compares the NIC counters and the OS counters or the malware detection component determined initial OS level count and computes an initial delta if there is one. Because the nature of any transmission activity that may have occurred before the malware detection component initially reads the NIC and OS level counters is unknown in some embodiments the malware detection component simply accepts this initial delta if any as a given. In one embodiment the malware detection component interprets the existence of an initial delta as evidence of infection of the computer by NIC level malware . The malware detection component is loaded and makes its initial counter checks as soon as possible in the OS boot or activation process so as to avoid any undetectable pre monitoring transmission activity by malware at a NIC level.

After initially reading the counters and computing the initial delta the malware detection component checks both the NIC counters and the OS counters from time to time while the OS is loaded and active. In embodiments in which the OS does not maintain network transmission counters the malware detection component checks its own tracked OS level network transmission statistics . How often to take these subsequent readings of the counters is a variable design parameter. When these update checks are made the malware detection component determines if there is a difference between the NIC counters and the OS counters taking into account any initial delta. Because all communication should be conducted by an NDIS compliant driver and thus reflected in the OS counters a greater number of detected transmissions at the NIC level indicates infection of the computer with Deeper Door type malware . In other words if the NIC counters indicate the occurrence of a greater number of transmissions than the OS counters then it can be concluded that transmissions occurred that bypassed the NDIS compliant driver and were conducted directly at a NIC level. This is evidence that the computer is infected by malware that operates at a NIC level. Responsive to detecting such a condition the malware detection component can generate an alert e.g. to a user or a central security service or the like activate an anti malware application or take other appropriate action as desired.

Subsequently the malware detection component checks both the NIC counters and the OS counters periodically and determines if there is a difference between the two taking into account the initial delta. If the NIC counters indicate the occurrence of a greater number of transmissions than the number indicated by the OS counters ill the malware detection component concludes that the computer is infected with NIC level malware . On the other hand if there is no such indication the malware detection component concludes that the computer is not infected with NIC level malware in which case the process can continue from step for as long as the OS is active.

It is to be understood that while the above embodiments are discussed in terms of the Intel 8255x chipset similar methodology can be applied to other network card hardware as desired. Additionally although NDIS is discussed above applying similar methodology to other OS level network drivers is also within the scope of the present invention.

As will be understood by those familiar with the art the invention may be embodied in other specific forms without departing from the spirit or essential characteristics thereof. Likewise the particular naming and division of the portions modules agents managers components functions procedures actions layers features attributes methodologies and other aspects are not mandatory or significant and the mechanisms that implement the invention or its features may have different names divisions and or formats. Furthermore the portions modules agents managers components functions procedures actions layers features attributes methodologies and other aspects of the invention can be implemented as software hardware firmware or any combination of the three. Wherever a component of the present invention is implemented as software the component can be implemented as a script as a standalone program as part of a larger program as a plurality of separate scripts and or programs as a statically or dynamically linked library as a kernel loadable module as a device driver and or in every and any other way known now or in the future to those of skill in the art of computer programming. Additionally the present invention is in no way limited to implementation in any specific programming language or for any specific operating system or environment. Furthermore where the present invention is implemented in whole or in part in software the software components thereof can be stored on computer readable media as computer program products. Any form of computer readable medium can be used in this context such as magnetic or optical storage media. Additionally software portions of the present invention can be instantiated for example as object code or executable images within the memory of any computing device. Accordingly the disclosure of the present invention is intended to be illustrative but not limiting of the scope of the invention which is set forth in the following claims.

