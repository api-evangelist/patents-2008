---

title: Abstracting request from a development environment to object model
abstract: Techniques and a graphical user interface for abstracting a request from a development environment to an object model of an object store are disclosed herein. A request for data is made by the development environment, and the request is abstracted to make in compatible with the object model (e.g., by negating properties related to bitness, versioning, etc.). The request is transmitted to a broker process that retrieves a method and/or data commands corresponding to the request. The broker process may also decode one or more method parameters of the request. If one or more method parameters are not compatible with the object model, an adapter may be loaded into the object model to make the object model compatible with the request. The broker process may also transmit the method, data commands, and/or request to the object model wherein the request is fulfilled by the object model.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08984482&OS=08984482&RS=08984482
owner: Microsoft Technology Licensing, LLC
number: 08984482
owner_city: Redmond
owner_country: US
publication_date: 20081209
---
Software developers frequently use development environments to assist them in developing console applications graphical user interface applications websites and or web services for example. Often times portions of the code used to build applications for example may be based upon previously written code for a similar application. Therefore rather than develop the code from scratch developers may call into existing code to reuse existing functionality.

Previously written code may be stored in an object store e.g. a central collaboration server and an object model may provide a structured object oriented representation of the codes. An object model may also provide methods for retrieving objects and or elements of the object from the object store setting properties of the objects and or adding deleting objects for example. When a developer wants to retrieve previously written code the developer runs the object model and initializes an object that retrieves relevant content e.g. codes related to the object.

Unfortunately several problems make it difficult for a development environment and an object model to achieve interoperability. For example the development environment may target a 32 bit processor architecture and an object model may target a 64 bit processor architecture. Therefore code cannot be easily transferred between the development environment and the object model because their respective processor architectures are incompatible e.g. the process may fail because of bitness conflicts . Additionally code that allows communication between the object model and development environment may be version specific. Therefore if either the version of the object model or the version of the development environment changes the code that provides the communication channel between the development environment and the object model may have to be rewritten.

This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key factors or essential features of the claimed subject matter nor is it intended to be used to limit the scope of the claimed subject matter.

According to a first aspect a method for establishing a communication channel between a development environment and an object store is provided. The method comprises generating a request in the development environment the generated request configured to retrieve data from the object store. The method also comprises neutralizing one or more properties of the generated request. For example the development environment may target a 32 bit processor architecture and the request may be neutralized so that it is compatible with an object model associated with the object store that targets a 64 bit processor architecture. The method may further comprise retrieving a method corresponding to the generated request and loading a first adapter into the object model associated with the object store to establish the communication channel between the development environment and the object store. The adapter may correspond to one or more method parameters of the generated request. For example the request may be configured to operate with a specific version of the object model and the adapter may alter the object model if it comprises a version other than the specified version so that the request is compatible with the object model.

According to another aspect a system for abstracting request from a development environment to an object model of an object store is provided. The development environment is configured to retrieve a request the request comprising an identification tag and method parameters for retrieving data from the object store. The system also comprises an abstraction component configured to abstract one or more properties of the request and a broker configured to retrieve a method corresponding to the identification tag and decode the method parameters into corresponding data types. The system further comprises an add in component configured to add an adapter to the object model based upon the decoded method parameters.

According to another aspect a graphical user interface is provided. The graphical user interface comprises a multi facetted window in a development environment targeting a first processor architecture wherein nodes may be selected and deselected selected nodes displaying data stored in an object store targeting a second processor architecture. The first processor architecture different from the second processor architecture.

To the accomplishment of the foregoing and related ends the following description and annexed drawings set forth certain illustrative aspects and implementations. These are indicative of but a few of the various ways in which one or more aspects may be employed. Other aspects advantages and novel features of the disclosure will become apparent from the following detailed description when considered in conjunction with the annexed drawings.

The claimed subject matter is now described with reference to the drawings wherein like reference numerals are used to refer to like elements throughout. In the following description for purposes of explanation numerous specific details are set forth in order to provide a thorough understanding of the claimed subject matter. It may be evident however that the claimed subject matter may be practiced without these specific details. In other instances structures and devices are illustrated in block diagram form in order to facilitate describing the claimed subject matter.

Turning initially to an exemplary methodology is illustrated for establishing a communication channel between a development environment and an object store. The established communication channel may provide a means for sending data retrieval request from the development environment to an object model of the object store. Once the object model has performed the request and determined relevant data comprised within the object store the established communication channel may also provide a means for transporting the relevant data from the object store to the development environment.

The method begins at and a request is generated in the development environment at . In one embodiment the request is generated when user input is received into an explorer window of the development environment. The generated request may be configured to retrieve data from the object store and may comprise method parameters and or an identification tag corresponding to a method for retrieving data from the object store. For example the request may comprise method parameters that limit the scope of a query of the object store by the object model . The request may also comprise method parameters related to the object store e.g. version specifications of the object store that the request is compatible with .

The generated request may have properties similar to the operating environment of the development environment e.g. to make it compatible with the development environment. For example the generated request may be configured to operate on a processor architecture similar to the development environment e.g. a 32 bit process and or versioning properties similar to the development environment e.g. so that the request is compatible with the version of the development environment being used .

In one embodiment one or more pre defined requests e.g. with pre defined parameters and or pre defined identification tags are stored in a database associated with the development environment and a request is retrieved from the database when a node associated with the retrieved request and displayed on a user interface portion of the explorer window is selected. That is the request may be built by a third party developer e.g. a developer other than the user developers that developed the development environment developers that develop programs compatible with the development environment etc. and retrieved when a related node created by the third party developer and connected to the request is selected. It will be understood to those skilled in the art that the method parameters may also be a function of the user input. For example the request may comprise one or more method parameters related to a keyword or type of data the user may desire to be retrieved from the object store. In this way the request may be customized by the user so that the retrieved data is more relevant to the user.

At one or more method parameters of the generated request are neutralized e.g. abstracted made substantially agnostic etc. . That is parameters that may limit the ability of the development environment and the object model to communicate may be discarded altered or otherwise negated to allow the request to be transferred from the development environment to the object model. For example parameters related to versioning and or processor architecture e.g. parameters that are not directly or substantially related to the data retrieval may be neutralized to allow a request that is not compatible with object model e.g. the request was made in 32 bit because the development environment targets e.g. is executed on a 32 bit processor architecture but the object model targets a 64 bit processor architecture to become compatible with it.

At a method corresponding to the generated request is retrieved. In one example the request is transmitted from the development environment to broker process once one or more properties of the generated request have been neutralized. The broker process a 64 bit process may retrieve the method based upon an identification tag corresponding to a particular method comprising data commands related to the request . For example a plurality of methods may be comprised in a database associated with the broker process and the broker process may retrieve a method from the database that corresponds to identification tag. It will be appreciated that where the identification tag does not correspond to a particular method the broker process may retrieve a general method e.g. an execute command method and data commands may be added later by the broker process . It will also be appreciated that the bitness of the retrieved method may be a function of the processor architecture of the object model e.g. 64 bit .

The method may be linked to the parameters of the request. For example if the request comprises version specifications e.g. version specifications relating to the object model and comprised in the request may be decoded and linked to the retrieved method . In one example one or more method parameters of the request are decoded into specific .NET types before the parameters are linked to the retrieved method.

In one embodiment each method corresponds to a node on the user interface of the explorer window. Thus a third party developer can build a request and corresponding node and a method. In one example the request is stored in a database associated with the development environment and is designed to be compatible with the development environment e.g. 32 bit processor architecture and the method is stored in a database associated with the broker process and is designed to be compatible with the object model e.g. 64 bit processor architecture .

At a first adapter is loaded into the object model associated with the object store to establish the communication channel between the development environment and the object store. The loaded adapter may correspond to one or more method parameters of the generated request and may be configured to allow the object model to receive a request that may be otherwise incompatible with the object model. For example the request may be designed to operate with a specified version of the object model and the broker process may load an adapter into the object model e.g. add a plug in to a newer version of the object model corresponding to the specified version. In this way a request designed to operate with a particular version or versions of the object model may continue to operate if the object model is changed e.g. updated . Therefore a third party developer for example may not have to modify the request based upon changes in the object model. Not modifying the request when changes are made to the object model may save the third party developer time and or encourage the builder to build more requests because the request may be useful for a longer period of time for example.

Once the adapter is loaded the method and or linked request parameters may be transferred to the object model and the object model may execute the retrieved method. That is the object model may retrieve data from the object store that is relevant to the request using the method e.g. data commands . For example if the request was for code relating to fields the object model may query the object store based upon parameters of the request and retrieve code related to text fields that users e.g. collaborators that store code in the object store had previously stored in the object store.

It will be appreciated that where the retrieved method is a general method e.g. a method comprising very few data commands another database may comprise additional data commands specific to the request. In one example this technique of using a general method and a database of data commands allows additional features to be later e.g. after the broker process is shipped added to broker process. That is methods that are not available when the broker process is shipped e.g. sold for example may be later added to a data command database. For example developers of the broker process e.g. those owning proprietary rights to the object model may bundle a certain number of methods designed with data commands for specific request to the broker process. One or more of the bundled methods may be general methods that allow future data commands to be added by either the developers of the broker process and or other developers for example.

In one embodiment third party developers e.g. developers of the broker process and or other developers may write data commands after the broker process is shipped and write related request for the development environment . The request may be stored in a database associated with the development environment and the data commands may be stored in a database associated with the broker process. It will be understood to those skilled in the art that while the techniques herein described provided a communication channel between that development environment and the object model that does not have to be updated when the object model and or the development environment changes third party developers may have to update the data command when the object model is updated e.g. a new version is released and or update the request when the development environment is update.

Once the relevant data is retrieved from the object store by the object model the data is transmitted through the communication channel from the object store to the development environment. It will be appreciated that properties of the data may be altered to allow the data to be received by the development environment. For example the data may be serialized into a processor architecture neutral format if the object store or object model and the development environment have different process architectures and or the data may de serialized into a version compatible format corresponding to version characteristics of the development environment. The method ends at .

It will be understood to those skilled in the art that once an adapter is loaded into the object model a second request comprising similar method parameters as the first request may utilize the first adapter. That is the acts of generating neutralizing and retrieving may be repeated but the act of loading may not be repeated since the object model with the previously loaded adapter is compatible with the second request. It will be appreciated that where the second request is not compatible with the object model a second adapter corresponding to one or more method parameters of the second request may be loaded.

The development environment is configured to retrieve a request from a request database . In one embodiment the development environment comprises a user interface and the request is retrieved when a node in the user interface is selected. The request may comprise method parameters and or an identification tag related to a method for retrieving data from the object store . For example the request may comprise method parameters related to a version of the object model the request is compatible with. The request may also comprise properties related to the development environment. For example the request may comprise properties related to a processor architecture of the development environment and or versioning of the development environment.

It will be appreciated that the retrieved request may be altered e.g. data added based upon user input. That is a user of the development environment may create method parameters that limit a query of the object store for example. For example objects and or codes stored within the object store may be tagged with relevant keywords by the people who stored the objects and or codes in the object store and the user may limit the query to objects and or codes comprising a desired keyword by adding one or more method parameters to the request.

The request may be sent to an abstraction component that is in operable communication with the development environment and configured to abstract the request. As used herein the term abstract is used broadly to describe a process configured to reduce and or factor out properties of the request using a suitable analytic iterative or other abstraction technique. In one embodiment the abstraction component encodes the request in a version and processor architecture neutral way e.g. removing discarding or otherwise negating properties of the request related to the development environment . It will be appreciated that the abstraction component may be part of the development environment and or operate independent of the development environment .

It will be understood to those skilled in the art that by negating properties of the request the request may be compatible with components that comprise other properties. In one example the development environment may be a 32 bit process and the object model may be a 64 bit process. The abstraction component may remove properties related to bitness for example so that the request may be transferred from the 32 bit development environment to the 64 bit object model.

The abstracted request may be transmitted to a 64 bit processor broker that is in operable communication with the abstraction component and configured to retrieve a method from a method database based upon the abstracted request. For example the request may comprise an identification tag relating to a specified method and the broker may retrieve a method that corresponds to the identification tag from the method database . It will be appreciated that where the broker is unable to retrieve a method relating to the request the broker may retrieve a generic method e.g. an execute command method from the method database .

Where a generic method is retrieved from the method database the broker may also retrieve data commands related to the request from the data command database . It will be appreciated that the data command database may provide the system with extensibility for example. That is a plurality of request and related methods with data commands may be built by the product developers e.g. the developers that build the development environment and or the object model and additional request and related data commands may be built later e.g. after the plurality of request and related methods are built . Rather than the build a method for an additional request built by a third party developer e.g. product developers and or developers not associated with developing the development environment and or object model may build data commands related to the additional request store the data commands in the data command database and utilize a general method. In one example building data commands rather than the method may require less programming and or save the third party developer time.

It will be appreciated that here as elsewhere in this disclosure database is used to refer to a store of data and not to a particular computer system software architecture schema format etc. for holding such information. The database may also comprise a plurality of replicated databases configured to store the same data for redundancy and improved performance in access a plurality of databases configured to store different sets of data or different portions of a set of data and or any other type of data storage mechanism e.g. not necessarily limited to databases .

If the request is not compatible with the object model e.g. because a method parameter of the request corresponds to a version the object model different that than what is currently used the broker may notify an add in component . The add in component may be configured to add an adapter e.g. plug in corresponding to one or more of the method parameters of the request that are not compatible with the object model to the object model . In this way a request that was not designed for the object model being used may be received and processed for example by the object model . For example if the current object model is version 5.0 and the request was designed for version 4.5 the add in component may add an adapter to the current object model to make the request compatible with the object model .

Once the request is compatible with the object model the request method and or data commands may be transmitted from the broker to the object model . The object model may execute the method and or data commands and retrieve relevant data from the object store based upon the request. For example the request may specify to retrieve data related to building textboxes and the object model may conduct a query based upon the request and retrieve data relevant to building textboxes.

Retrieved data is transmitted from the object model to the development environment . It will be appreciated that the retrieved data may be altered as it is transmitted from the object model to the development environment e.g. to account for differences in the processor architecture the object model targets and the processor architecture the development environment targets . In one embodiment the abstraction component serializes the retrieved data into a processor architecture neutral format and then de serializes the data into a versioning format compatible with the development environment .

It will be understood to those skilled in the art that techniques described herein may provide several advantages over current techniques. For example using current techniques a developer that wants to retrieve data from an object store through a development environment has to build the communication channel between the development environment and an object model related to the object store. When changes are made to either the development environment or the object model the communication channel is broken and the developer has to rebuild the communication channel. However using the techniques herein disclosed the communication channel is not broken by the changes. Therefore instead of rebuilding the communication channel the developer may rebuild the request if the development environment is changed and or rebuild the data commands if the object model is changed.

Additionally the techniques herein disclosed overcome problems caused when an object model and a development environment target different processor architectures. Current techniques do not provide a practical and or effective means of communicating between a development environment that targets a 32 bit processor architecture and an object model that targets a 64 bit processor architecture for example. However by abstracting request from the development environment and storing methods and or data commands in an object model compatible format e.g. 64 bit format the object model and the development environment may communicate despite targeting different processor architectures.

The graphical user interface comprises a multi facetted window configured to display nodes related to data stored in the object store . It will be understood to that the term multi facetted is used herein in a broad sense to describe a window capable of changing e.g. enlarging shrinking stretching being move to another portion of a computer screen etc. . The nodes may represent data comprised in the object store and may be selected and deselected e.g. making the node active and or focused on to allow data to be retrieved from the object store . Further when a node is expanded e.g. by selecting a symbol situated nearby the node additional nodes may be displayed representing additional data in the object store or rather a sub set of data represented by the expanded node for example. When a node is collapsed or unexpanded e.g. by selecting a symbol situated nearby the node a set of nodes may be collapsed e.g. removed from the multi facetted window and the data related to the collapsed nodes may be represented the by deselected node for example. It will be appreciated that other techniques for expanding and or collapsing nodes are also contemplated. For example nodes may be expanded and or unexpanded when input is received from a keyboard e.g. a user selects the left and or right arrow keys and input is received based upon the selection .

In the illustrated example the nodes comprise text and small graphical images e.g. furthering illustrating the type s of data represented by the node . However it will be appreciated that the nodes may comprise different indicators and or symbols. For example different types of data may be represented by different colors shapes or other suitable graphical indicator.

It will be understood to those skilled in the art that nodes other than those illustrated in the example graphical user interface are contemplated. It will also be appreciated that the nodes displayed in the multi facetted window may change as a function of data stored in the object model and or developer input. For example a developer may create additional nodes to be displayed within the multi facetted window and or delete nodes from the multi facetted window .

Still another embodiment involves a computer readable medium comprising processor executable instructions configured to implement one or more of the techniques presented herein. An exemplary computer readable medium that may be devised in these ways is illustrated in wherein the implementation comprises a computer readable medium e.g. a CD R DVD R or a platter of a hard disk drive on which is encoded computer readable data . This computer readable data in turn comprises a set of computer instructions configured to operate according to one or more of the principles set forth herein. In one such embodiment the processor executable instructions may be configured to perform a method such as the exemplary method of for example. In another such embodiment the processor executable instructions may be configured to implement a system such as the exemplary system of for example. Many such computer readable media may be devised by those of ordinary skill in the art that are configured to operate in accordance with the techniques presented herein.

Although the subject matter has been described in language specific to structural features and or methodological acts it is to be understood that the subject matter defined in the appended claims is not necessarily limited to the specific features or acts described above. Rather the specific features and acts described above are disclosed as example forms of implementing the claims.

As used in this application the terms component module system interface and the like are generally intended to refer to a computer related entity either hardware a combination of hardware and software software or software in execution. For example a component may be but is not limited to being a process running on a processor a processor an object an executable a thread of execution a program and or a computer. By way of illustration both an application running on a controller and the controller can be a component. One or more components may reside within a process and or thread of execution and a component may be localized on one computer and or distributed between two or more computers.

Furthermore the claimed subject matter may be implemented as a method apparatus or article of manufacture using standard programming and or engineering techniques to produce software firmware hardware or any combination thereof to control a computer to implement the disclosed subject matter. The term article of manufacture as used herein is intended to encompass a computer program accessible from any computer readable device carrier or media. Of course those skilled in the art will recognize many modifications may be made to this configuration without departing from the scope or spirit of the claimed subject matter.

Although not required embodiments are described in the general context of computer readable instructions being executed by one or more computing devices. Computer readable instructions may be distributed via computer readable media discussed below . Computer readable instructions may be implemented as program modules such as functions objects Application Programming Interfaces APIs data structures and the like that perform particular tasks or implement particular abstract data types. Typically the functionality of the computer readable instructions may be combined or distributed as desired in various environments.

In other embodiments device may include additional features and or functionality. For example device may also include additional storage e.g. removable and or non removable including but not limited to magnetic storage optical storage and the like. Such additional storage is illustrated in by storage . In one embodiment computer readable instructions to implement one or more embodiments provided herein may be in storage . Storage may also store other computer readable instructions to implement an operating system an application program and the like. Computer readable instructions may be loaded in memory for execution by processing unit for example.

The term computer readable media as used herein includes computer storage media. Computer storage media includes volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions or other data. Memory and storage are examples of computer storage media. Computer storage media includes but is not limited to RAM ROM EEPROM flash memory or other memory technology CD ROM Digital Versatile Disks DVDs or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can be accessed by device . Any such computer storage media may be part of device .

Device may also include communication connection s that allows device to communicate with other devices. Communication connection s may include but is not limited to a modem a Network Interface Card NIC an integrated network interface a radio frequency transmitter receiver an infrared port a USB connection or other interfaces for connecting computing device to other computing devices. Communication connection s may include a wired connection or a wireless connection. Communication connection s may transmit and or receive communication media.

The term computer readable media may include communication media. Communication media typically embodies computer readable instructions or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term modulated data signal may include a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal.

Device may include input device s such as keyboard mouse pen voice input device touch input device infrared cameras video input devices and or any other input device. Output device s such as one or more displays speakers printers and or any other output device may also be included in device . Input device s and output device s may be connected to device via a wired connection wireless connection or any combination thereof. In one embodiment an input device or an output device from another computing device may be used as input device s or output device s for computing device .

Components of computing device may be connected by various interconnects such as a bus. Such interconnects may include a Peripheral Component Interconnect PCI such as PCI Express a Universal Serial Bus USB firewire IEEE 1394 an optical bus structure and the like. In another embodiment components of computing device may be interconnected by a network. For example memory may be comprised of multiple physical memory units located in different physical locations interconnected by a network.

Those skilled in the art will realize that storage devices utilized to store computer readable instructions may be distributed across a network. For example a computing device accessible via network may store computer readable instructions to implement one or more embodiments provided herein. Computing device may access computing device and download a part or all of the computer readable instructions for execution. Alternatively computing device may download pieces of the computer readable instructions as needed or some instructions may be executed at computing device and some at computing device .

Various operations of embodiments are provided herein. In one embodiment one or more of the operations described may constitute computer readable instructions stored on one or more computer readable media which if executed by a computing device will cause the computing device to perform the operations described. The order in which some or all of the operations are described should not be construed as to imply that these operations are necessarily order dependent. Alternative ordering will be appreciated by one skilled in the art having the benefit of this description. Further it will be understood that not all operations are necessarily present in each embodiment provided herein.

Moreover the word exemplary is used herein to mean serving as an example instance or illustration. Any aspect or design described herein as exemplary is not necessarily to be construed as advantageous over other aspects or designs. Rather use of the word exemplary is intended to present concepts in a concrete fashion. As used in this application the term or is intended to mean an inclusive or rather than an exclusive or . That is unless specified otherwise or clear from context X employs A or B is intended to mean any of the natural inclusive permutations. That is if X employs A X employs B or X employs both A and B then X employs A or B is satisfied under any of the foregoing instances. In addition the articles a and an as used in this application and the appended claims may generally be construed to mean one or more unless specified otherwise or clear from context to be directed to a singular form.

Also although the disclosure has been shown and described with respect to one or more implementations equivalent alterations and modifications will occur to others skilled in the art based upon a reading and understanding of this specification and the annexed drawings. The disclosure includes all such modifications and alterations and is limited only by the scope of the following claims. In particular regard to the various functions performed by the above described components e.g. elements resources etc. the terms used to describe such components are intended to correspond unless otherwise indicated to any component which performs the specified function of the described component e.g. that is functionally equivalent even though not structurally equivalent to the disclosed structure which performs the function in the herein illustrated exemplary implementations of the disclosure. In addition while a particular feature of the disclosure may have been disclosed with respect to only one of several implementations such feature may be combined with one or more other features of the other implementations as may be desired and advantageous for any given or particular application. Furthermore to the extent that the terms includes having has with or variants thereof are used in either the detailed description or the claims such terms are intended to be inclusive in a manner similar to the term comprising. 

