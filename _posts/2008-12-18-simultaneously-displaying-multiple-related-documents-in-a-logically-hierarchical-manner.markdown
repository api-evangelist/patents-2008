---

title: Simultaneously displaying multiple related documents in a logically hierarchical manner
abstract: In some example embodiments, a computerized method includes receiving multiple documents from at least one machine-readable media. The multiple documents have a hierarchical relationship relative to each other. The multiple documents include a first document, wherein a second document of the multiple documents comprises an enhancement to first document. The enhancement is at least one of a replacement of part of the first document or an addition to the first document. The computerized method includes displaying the multiple documents on a display screen such that the multiple documents are arranged according to the hierarchical relationship.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09286270&OS=09286270&RS=09286270
owner: SAP SE
number: 09286270
owner_city: Walldorf
owner_country: DE
publication_date: 20081218
---
A portion of the disclosure of this document contains material that is subject to copyright protection. The copyright owner has no objection to the facsimile reproduction by anyone of the patent document or the patent disclosure as it appears in the Patent and Trademark Office patent files or records but otherwise reserves all copyright rights whatsoever. The following notice applies to the software data and or screenshots which may be described below and in the drawings that form a part of this document Copyright 2008 SAP AG. All Rights Reserved.

Viewing for reviewing editing etc. of more than one document is some times needed especially when such documents are related. For example software code developers can write software code for different parts of a system. These parts of the software code may be related. For example one part of the software code may be embedded in a different part of the software code.

Example software being developed includes business application programs. Business application programs are generally written and compiled according to a business application programming language such as the Advanced Business Application Programming ABAP developed by SAP AG Walldorf Germany Java C etc. Some programming languages feature mechanisms to support enhancement of a standard business coding to enable the integration of industry specific or customer specific code fragments. This mechanism known as the Enhancement and Switch Framework is used to retrofit industry specific enhancements into the standard coding structure and to activate or deactivate those enhancements dynamically to achieve industry specific behavior of the business applications. Enhancements or extensions of the coding structure can be stored separately from the original code structure document.

Methods apparatus and systems for displaying of multiple documents are described. In the following description numerous specific details are set forth. However it is understood that embodiments of the invention may be practiced without these specific details. In other instances well known circuits structures and techniques have not been shown in detail in order not to obscure the understanding of this description.

Some example embodiments provide for a multi document editor having a number of sub editors. Some example embodiments allow the editing of several documents. Each of the documents can have separate states e.g. active inactive saved not saved etc. and separate actions e.g. save activate return to prior version etc. . Some example embodiments display a logical hierarchy of the document including enhancements and modifications .

Editing of multiple documents can become confusing especially if such documents depend on each other. For example one document can be a replacement of part of another document. In another example one document can be inserted into another document. Each document can be from a different source e.g. file . Some example embodiments allow defining of anchor points within a source. At each anchor point another source can be attached. This source can also have anchor points on which other sources can be attached. The layout of these documents from different sources can be complex and confusing. Therefore some example embodiments include a type of tree control for these different sources that is part of the edit control. The tree control can display the hierarchical relationships of the documents to allow a viewer of the documents to easily understand the relationships among the documents. In some example embodiments a separate editor is associated with each source. Further at each level of the tree a given editor including all editors below can be hidden. Some example embodiments include an editor that can process several sources at approximately a same time. The sources can be at one level or may be nested.

Some example embodiments are operable in the Advanced Business Application Programming ABAP switch framework that is usable by software developers as described above . As a specific example within the ABAP switch framework the ABAP enhancements are in the form of switchable code fragments that can be added to existing ABAP code at certain positions in the coding structure. Additionally these enhancements can be switched on or off by setting separately stored switches. Depending on the switch setting the corresponding enhancements are pre processed by the ABAP compiler at compile time and evaluated at run time to decide whether or not the enhancement is to be executed. Accordingly the switch settings serve to configure an application program dynamically.

The switchable code fragments may be written in a variety of programming languages. For proper integration into the switch framework the code fragments need to be edited together in a standard language environment which means that a code author needs to have knowledge of the standard code language. Otherwise the switch framework integrator needs to have knowledge of the code languages of all of the code fragments. Accordingly some example embodiments may be used to enable software developers to view switchable code segments which may be from multiple document sources.

In some example embodiments the machine readable medium includes tangible volatile and or non volatile media e.g. read only memory ROM random access memory RAM magnetic disk storage media optical storage media flash memory devices etc. . The machine readable medium stores documents . The documents can be any type of document spreadsheet etc. In some example embodiments the documents store fragments of computer code application development metadata etc. For example a business application can include code that is defined relative to a number of classes some of which can be related to each other . A first document can store a first class having code that defines different variables values etc. methods operable on these different variables values etc. A second document can store a second class function etc. that is used within the first class.

In some example embodiments the document module supports multiple documents being displayed in a same user interface. The document module can support one or multiple edit controls across the multiple documents. For example there can be an edit control for each of the different documents being displayed. The document module accesses and stores documents from and to the machine readable medium . The document module generates and provides information for display in a graphical user interface on the display using the display controller . The graphical user interface can include one or more windows of display information. Examples are provided in figures that are described below. The graphical user interface includes an editor window that is generated by the document module . The editor window displays one or more documents in a window of the graphical user interface. The editor window can be a part of the graphical user interface and defined by a graphical frame or other graphically delineating mechanism.

The one or more editor controls can be displayed in separate tab strips at a periphery e.g. top of the editor window displaying the document. are displays of graphical user interfaces according to some example embodiments described below . In these graphical user interfaces the documents are displayed in separate tab strips. However embodiments are not so limited as other types of components of a graphical user interface can be used for altering the changes in content for a section. For example in some example embodiments a drop down box can be used to change the content e.g. different documents for a section. The document module receives and processes user inputs received e.g mouse selection keyboard input etc. . The document module also stores any modifications to a document back to the machine readable medium . The document module provides a multi document editor having a number of sub editors. Each of the documents can have separate states e.g. active inactive saved not saved etc. and separate actions e.g. save activate return to prior version etc. . In some example embodiments the document module displays the multiple documents in a logical hierarchy as further described below .

In some example embodiments the document module and the display controller are applications or parts of an application used to display multiple documents for viewing editing etc. The document module the editor module and the display controller can be software hardware firmware or a combination thereof for executing the various operations described herein according to some example embodiments.

Operations according to some example embodiments are now described. In certain embodiments the operations are performed when instructions residing on machine readable media e.g. software are executed while in other embodiments the methods are performed by hardware or other logic e.g. digital logic . are diagrams of different methods for displaying multiple documents according to some example embodiments. are displays of different graphical user interfaces having multiple documents according to example embodiments. The description of the diagrams of includes references to the displays of . Accordingly the descriptions of are incorporated into the description of the diagrams of .

At block the document module receives multiple documents including a first document and a second document having a hierarchical relationship relative to each other. The first document can be the parent of the second document. For example the second document can be a part of the first document. As an example of code fragments the second document can include a function class etc. that is within a class that is included in the first document. As further described below in some example embodiments the first document includes an enhancement point where the second document is to be inserted. Alternatively in some example embodiments the second document includes an enhancement section which is defined as a data contained in the second document that is intended to replace a section of the first document. In some example embodiments a user defines an anchor point in a first document. In some example embodiments the anchor point defines a location in the document where the alternatives or the additions to the document are included. The anchor point can include the identification of this document and the location therein. Further the anchor point can include identification of the second document that is to be used in the alternative or added to the first document. Accordingly using the anchor point the editor is able to locate the location in the first document and the identification of the second document. The second document can be positioned at the defined anchor point in the first document. In some example embodiments the first document is a sibling of the second document. Accordingly the first document and the second document can be alternatives to what is to be inserted into a different document. The document module includes tree control operations for displaying the hierarchical relationship of the different documents. For example a second document that is a child of a first document is positioned within and indented relative to the first document.

To help illustrate is a display of a graphical user interface having multiple documents showing nested enhancements according to some example embodiments. includes a graphical user interface that includes an enhancement section of a first document . As described above an enhancement section includes a section of a document that is to be replaced with one to a number of different sections. A different section can come from a different document a second document a third document etc. . In this example the different enhancement sections are within tab strips. The current section of the first document the enhancement section is within a first tab strip . A first enhancement implementation is within a second tab strip . A second enhancement implementation is within a third tab strip . In some example embodiments only one of the enhancement sections is displayed on the graphical user interface. The user may select a different tab strip to display a different enhancement section. Accordingly the user can easily view the different enhancement sections. In the graphical user interface the second tab strip is active thereby showing the contents therein . In this example the contents of the second enhancement implementation within the second tab strip include a number of other enhancement sections nested therein. Accordingly the graphical user interface enables the viewing of any number of enhancement sections.

In particular the second tab strip includes another section of enhancement sections within another set of tab strips. As shown this section of enhancement sections is shown as being nested in the second tab strip because this section is below and indented relative to the content of the first document . The current section for the content in the second tab strip includes another document an enhancement section . A first enhancement implementation is within a second tab strip . A second enhancement implementation is within a third tab strip .

In the graphical user interface the second tab strip is active thereby showing the contents therein . In this example the contents of the second enhancement implementation within the second tab strip include an enhancement point . As described above an enhancement point is a point in the document e.g. computer code where an enhancement implementation can be inserted. In this example the enhancement point includes two different sets of enhancements. A first set of enhancements for the enhancement point includes a selection of a first enhancement in a first tab strip or a second enhancement in a second tab strip . In the graphical user interface the first tab strip is active thereby showing the contents therein . The user may view the contents of the two different enhancements by selection of the two different tab strips. The second set of enhancements for the enhancement point includes a selection of a first enhancement in a first tab strip or a second enhancement in a second tab strip . In the graphical user interface the first tab strip is active thereby showing the contents therein . The user may view the contents of the two different enhancements by selection of the two different tab strips. In the graphical user interface the first tab strip is active

Accordingly as shown the graphical user interface is configured such that the hierarchical relationship of these different enhancement sections is shown to the user. In this example an enhancement that is nested in another enhancement is within and indented relative to the enhancement it is embedded within. Thus the user can easily understand the relationship among the different enhancement sections. The enhancements can be in a parent child relationship e.g. the enhancement in the tab strip is a parent to the enhancements in the tab strips and . The enhancements can also be in a sibling relationship e.g. the enhancement in the tab strip is a sibling of the enhancement in the tab strip . Returning to the method of the method continues at block .

At block the document module displays the multiple documents on a display screen e.g. the display such that the multiple documents are arranged according to the hierarchical relationship. With reference to the graphical user interface of the document module displays a first document . Other documents are hierarchically displayed in the different enhancement sections that are within the first document as described above . The method continues at block .

At block the document module performs a first action on the first document that is independent of the second document. Examples of a first action includes a save operation an activate operation return to prior version operation etc. Also each of the documents can have separate states that are independent of each other. Examples of states of a document include active inactive saved not saved etc. In some example embodiments the graphical user interface includes identification of the states of the different documents.

To illustrate is a display of a graphical user interface having multiple documents that includes separate states for the multiple documents according to some example embodiments. includes a graphical user interface that includes a first document . The current section of the first document is within a first tab strip . A first enhancement implementation is within a second tab strip which includes a second document . As shown the second tab strip includes an identification of the state of the second document inactive . This identification of the states can be included in each of the different tab strips. Also these states can be identified in other locations of the graphical user interface. Such identification enables the user to more easily track the different states of the different documents.

The document module can enable a number of sub editors wherein each sub editor is associated with a document being displayed. Returning to the graphical user interface of separate actions can be performed on the first document relative to the other documents in the other tab strips in the graphical user interface. Returning to the method continues at block .

At block the document module performs a second action on the second document that is independent of the first document. Examples of a second action includes a save operation an activate operation return to prior version operation etc. As described above each of the documents can have separate states that are independent of each other. The method is complete. While described with reference to two different documents having independent actions relative to each other example embodiments are applicable to any number of documents. For example with reference to each of the different tab strips can have different documents having independent actions relative to each other.

Operations for creating a display having multiple documents that include or are associated with enhancement sections are now described. In particular is a diagram of a method for processing commands for displaying of multiple documents that include enhancement sections according to some example embodiments. A method is described with reference to . In some example embodiments the method is performed by the document module . The method commences at block .

At block the document module displays a first document on a display screen e.g. the display . For example a user may select the first document to be open for display. This input from the user causes the document module to display the first document on the display using the display controller . With reference to the document is displayed on the graphical user interface . The method continues at block .

At block the document module receives a command to declare a first section of the first document as an enhancement section. A user can input the command to declare the section as an enhancement section at an anchor point in the first document. For example the user can highlight a section of the document to be declared as an enhancement section. With reference to the section starting at line of the first document had been selected. The method continues at block .

At block the document module displays the enhancement section in a first tab strip at the location in the first document. With reference to the document module creates a tab strip that is to display the enhancement section for the first document . The method continues at block .

At block the document module receives a command to create a first enhancement implementation at the enhancement section. In some example embodiments this command also defines a second document to be inserted into the enhancement section. With reference to the second document can include the text within the tab strip . In particular the second document can include the text shown in line numbers 1 34 within the tab strip . Also as shown there are also sections of the second document that are declared enhancement sections as further described below . Accordingly example embodiments display the hierarchical relationship among the different enhancement sections e.g. nesting of enhancement sections within enhancement sections . The method continues at block .

At block the document module displays the first enhancement implementation in a second tab strip at the location in the first document. With reference to the document module creates the tab strip that is to display this first enhancement implementation as described above . The method continues at block .

At block the document module receives a command to create a second enhancement implementation at the enhancement section. In some example embodiments this command also defines a third document to be inserted into the enhancement section. With reference to the third document can include the text within the tab strip . Similar to the first enhancement implementation there can be sections of the third document that can be declared enhancement sections as further described below . The method continues at block .

At block the document module displays the second enhancement implementation in a third tab strip at the location in the first document. With reference to the document module creates the tab strip that is to display this second enhancement implementation as described above . The method continues at block .

At block the document module receives a command to declare a section of the second document as an enhancement section. A user can input the command to declare the section as an enhancement section at an anchor point in the second document. For example the user can highlight a section of the document to be declared as an enhancement section. With reference to the section starting at line of the second document in the tab strip had been selected. The method continues at block .

At block the document module displays the enhancement section in a fourth tab strip at the location in the second document. With reference to the document module creates a tab strip that is to display the enhancement section for the second document. The method continues at block .

At block the document module receives a command to create a first enhancement implementation at the enhancement section. In some example embodiments this command also defines a fourth document to be inserted into the enhancement section. With reference to the fourth document can include the text within the tab strip . The method continues at block .

At block the document module displays the first enhancement implementation in a fifth tab strip at the location in the second document. With reference to the document module creates the tab strip that is to display this first enhancement implementation as described above . The method may continue as additional enhancement implementations for different enhancement sections additional enhancement sections etc. can be created as described above . In some example embodiments the graphical user interface includes sliders vertical and horizontal to enable the viewing of any number of enhancements. In particular is a display of a graphical user interface having multiple documents showing nested enhancements and sliders for viewing according to some example embodiments. includes a graphical user interface that includes a number of enhancement sections and enhancement points that are nested similar to the graphical user interface of . The graphical user interface also includes a vertical slider and a horizontal slider to allow the user to adjust the graphical user interface to view the different enhancements. Such sliders can be particularly useful if there are a number of nested enhancements as shown . Returning to the method is complete.

Operations for creating a display having multiple documents that include or are associated with enhancement points are now described. In particular is a diagram of a method for processing commands for displaying and displaying of multiple documents that include enhancement points according to some example embodiments. A method is described with reference to . In some example embodiments the method is performed by the document module . The method commences at block .

At block the document module displays a first document on a display screen e.g. the display . For example a user may select the first document to be open for display. This input from the user causes the document module to display the first document on the display using the display controller .

To help illustrate is a display of a graphical user interface having multiple documents showing the inclusion of enhancement points according to some example embodiments. includes a graphical user interface that includes a first document . The first document includes an enhancement point . A user editing the first document can insert the enhancement point . A first enhancement implementation is within a first tab strip for the enhancement point . The first enhancement implementation includes a second document . The graphical user interface also includes a second enhancement implementation that is within a second tab strip . The contents of the second enhancement implementation are not viewable on the graphical user interface shown in . However the user can select between the two different enhancement implementations by selection of the tab strips. Returning to the method continues at block .

At block the document module receives a command to insert an enhancement point at a location in the first document. A user can input the command to insert the enhancement point at an anchor point in the first document. With reference to the enhancement point is at line of the first document . The method continues at block .

At block the display module displays the enhancement point in a new subscreen area at the location in the first document. With reference to the new subscreen area is positioned at line of the first document . The method continues at block .

At block the display module receives a command to create a first enhancement implementation at the enhancement point. In some example embodiments this command also defines a second document to be inserted into the enhancement point. For example a user may input a command to create the first enhancement implementation. The command from the user can input the document to be included in the first enhancement implementation. The method continues at block .

At block the display module displays the first enhancement implementation in a first tab strip in the new subscreen area. With reference to the first enhancement implementation is within the first tab strip that includes the second document not shown . The method continues at block .

At block the display module receives a command to create a second enhancement implementation at the enhancement point. In some example embodiments this command also defines a third document to be inserted into the enhancement point. For example a user may input a command to create the second enhancement implementation. The command from the user can input the document to be included in the second enhancement implementation. The method continues at block .

At block the display module displays the second enhancement implementation in a second tab strip in the new subscreen area. With reference to the second enhancement implementation is within the second tab strip . The method continues at block .

At block the document module receives a command to insert a different enhancement point at a location in the second document. A user can input the command to insert the enhancement point at an anchor point in the second document. With reference to the different enhancement point not shown can be inserted at a location in the second document . With reference to the enhancement points can be nested similar to the enhancement sections. Also as shown in enhancement points can be intermixed with the enhancement sections in any combination. The method continues at block .

At block the display module displays the different enhancement point in a new subscreen area at the location in the second document. With reference to the new subscreen area not shown can be inserted at the designated location in the second document similar to the new subscreen area created for the enhancement point in the first document . The method continues at block .

At block the display module receives a command to create a third enhancement implementation at the different enhancement point. In some example embodiments this command also defines a fourth document to be inserted into the different enhancement point. For example a user may input a command to create the third enhancement implementation. The command from the user can input the document to be included in the third enhancement implementation. The method continues at block .

At block the display module displays the third enhancement implementation in a first tab strip in the new subscreen area of the second document. With reference to the third enhancement implementation not shown can be inserted in the subscreen area for the different enhancement point in the second document similar to the first enhancement implementation created for the enhancement point in the first document . The method may continue as additional enhancement implementations for different enhancement points additional enhancement points etc. can be created as described above . In some example embodiments the graphical user interface includes sliders vertical and horizontal to enable the viewing of any number of enhancements for the different enhancement points as described with reference to . Returning to the method is complete.

An embodiment wherein software performs operations related to performing multi document viewing as described herein is now described. In particular is a computer device that executes software for performing operations related to performing multi document viewing according to some example embodiments. illustrates a computer device that may be representative of at least part of the system .

As illustrated in a computer device comprises processor s . The computer device also includes a memory a processor bus and an input output controller hub ICH . The processor s the memory and the ICH are coupled to the processor bus . The processor s may comprise any suitable processor architecture. The computer device may comprise one two three or more processors any of which may execute a set of instructions in accordance with some embodiments of the invention.

The memory stores data and or instructions and may comprise any suitable memory such as a random access memory RAM . For example the memory may be a Static RAM SRAM a Synchronous Dynamic RAM SDRAM DRAM a double data rate DDR Synchronous Dynamic RAM SDRAM etc. A graphics controller controls the display of information on a display device according to an embodiment of the invention.

The ICH provides an interface to Input Output I O devices or peripheral components for the computer device . The ICH may comprise any suitable interface controller to provide for any suitable communication link to the processor s the memory and or to any suitable device or component in communication with the ICH . For an embodiment of the invention the ICH provides suitable arbitration and buffering for each interface.

In an embodiment the ICH provides an interface to one or more suitable Integrated Drive Electronics IDE Advanced Technology Attachment ATA drive s such as a hard disk drive HDD . In an embodiment the ICH also provides an interface to a keyboard a mouse one or more suitable devices through ports such as parallel ports serial ports Universal Serial Bus USB Firewire ports etc. . In some embodiments the ICH also provides a network interface though which the computer device may communicate with other computers and or devices.

With reference to the system the memory and or one of the IDE ATA drives can store the documents . In some example embodiments the document module is a set of instructions executing within the processor s . Therefore the document module can be stored in a machine readable medium that are a set of instructions e.g. software embodying any one or all of the methodologies described herein. For example the document module can reside completely or at least partially within the memory the processor s one of the IDE ATA drive s etc.

In the description numerous specific details such as logic implementations opcodes means to specify operands resource partitioning sharing duplication implementations types and interrelationships of system components and logic partitioning integration choices are set forth in order to provide a more thorough understanding of the present invention. It will be appreciated however by one skilled in the art that embodiments of the invention may be practiced without such specific details. In other instances control structures gate level circuits and full software instruction sequences have not been shown in detail in order not to obscure the embodiments of the invention. Those of ordinary skill in the art with the included descriptions will be able to implement appropriate functionality without undue experimentation.

References in the specification to one embodiment an embodiment an example embodiment etc. indicate that the embodiment described may include a particular feature structure or characteristic but every embodiment may not necessarily include the particular feature structure or characteristic. Moreover such phrases are not necessarily referring to the same embodiment. Further when a particular feature structure or characteristic is described in connection with an embodiment it is submitted that it is within the knowledge of one skilled in the art to affect such feature structure or characteristic in connection with other embodiments whether or not explicitly described.

Embodiments of the invention include features methods or processes that may be embodied within machine executable instructions provided by a machine readable medium. A machine readable medium includes any mechanism which provides i.e. stores and or transmits information in a form accessible by a machine e.g. a computer a network device a personal digital assistant manufacturing tool any device with a set of one or more processors etc. . In an exemplary embodiment a machine readable medium includes volatile and or non volatile media e.g. read only memory ROM random access memory RAM magnetic disk storage media optical storage media flash memory devices etc. as well as electrical optical acoustical or other form of propagated signals e.g. carrier waves infrared signals digital signals etc. .

Such instructions are utilized to cause a general or special purpose processor programmed with the instructions to perform methods or processes of the embodiments of the invention. Alternatively the features or operations of embodiments of the invention are performed by specific hardware components which contain hard wired logic for performing the operations or by any combination of programmed data processing components and specific hardware components. Embodiments of the invention include software data processing hardware data processing system implemented methods and various processing operations further described herein.

A number of figures show block diagrams of systems and apparatus for performing multi document viewing in accordance with some example embodiments. Flow diagrams illustrate the operations for performing multi document viewing in accordance with some example embodiments. The operations of the flow diagrams will be described with references to the systems apparatus shown in the block diagrams. However it should be understood that the operations of the flow diagrams could be performed by embodiments of systems and apparatus other than those discussed with reference to the block diagrams and embodiments discussed with reference to the systems apparatus could perform operations different than those discussed with reference to the flow diagrams.

In view of the wide variety of permutations to the embodiments described herein this detailed description is intended to be illustrative only and should not be taken as limiting the scope of the invention. What is claimed as the invention therefore is all such modifications as may come within the scope and spirit of the following claims and equivalents thereto. Therefore the specification and drawings are to be regarded in an illustrative rather than a restrictive sense.

