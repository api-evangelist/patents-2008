---

title: Technology for generating service program
abstract: A history acquisition unit acquires a history of operations with a web browser by a user and stores the history in a storage device. A search unit accesses the storage device to search a history of a first operation for inputting a parameter and a history of a second operation performed after the first operation. A generation unit generates a service program that provides services that the user has received through the operations with the web browser, and stores it in the storage device. The service program makes a computer function as: an input acceptance unit that accepts input of a new parameter instead of the parameter input through the first operation; and a processing unit that performs, in response to the new parameter, inputting the new parameter in the web page and processing associated with the second operation beforehand in this stated order with respect to the web browser.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08370750&OS=08370750&RS=08370750
owner: International Business Machines Corporation
number: 08370750
owner_city: Armonk
owner_country: US
publication_date: 20080404
---
This application is a National Stage application of International Application No. PCT JP2008 056798 filed Apr. 4 2008 the entire contents of which are hereby incorporated by reference as if fully set forth herein. This application also claims the benefit under 35. U.S.C. 119 of Japan Patent Application No. 2007 100842 filed Apr. 6 2007.

The present invention relates to a technology for generating a program for performing operations on behalf of users. More particularly the present invention relates to a technology for generating a program for performing operations with respect to a web browser on behalf of users.

In recent years the concept of mashup has attracted attention which is for generating a new service by combining services provided by web servers. Mashups may be implemented when an application programming interface API for calling up various programs that run in the web servers have been open to public view. Insofar as an API is open to public view a programmer may create a program for calling up various APIs in free order or under a free condition so as to create a new service by combining services that have been already available.

APIs for implementing mashups however are on public view simply on a trial basis by some web servers and a programmer may not be able to combine services available on the Internet freely. Further even when APIs are on public view it will be difficult to create a new program unless there are some level of skilled programmers and it is impossible for general users to create such a program easily.

Meanwhile a variety of services have been provided on web pages in recent years and users utilize such services in various ways. Therefore there may be a possibility that even general users may improve their convenience by combining a plurality of services to create a new service. For instance if general users may easily create a program enabled to acquire information on stock prices from web pages providing such information automatically determining a limit price for ordering stocks based on the stock prices and automatically ordering stocks for the limit price on a web page of a securities firm the convenience will be improved remarkably for users.

The above mentioned Patent Document 1 is cited as a reference technology. This technology relates to software that sends a hypertext transfer protocol HTTP request to a web server although the HTTP request is originally sent by a web browser of a terminal. However since this software is not a web browser itself various problems occur in sophisticated web pages that are currently on public view.

The first problem concerns appropriate maintenance and control of sessions. In a sophisticated web page a plurality of HTTP requests are handled as a sequence of sessions and therefore a HTTP request has to be sent including a session identifier ID contained in a previously received HTTP response. This document however does not describe or suggest such a function.

The second problem concerns a dynamic change of a web page. Every time an HTTP request is received a sophisticated web page may change the configuration. This document however does not describe or suggest sending an appropriate HTTP request so as to follow a change of a web page.

As another reference technology software is proposed which is for recording operations performed on a browser in a window see Non Patent Document 1 . A test case recorded in the window may be reproduced by clicking Play button. Editing storing and loading of a test case also are possible in the window. This technology is aimed at examining a web application. Therefore this technology is not of a type for allowing users to create a reusable program based on such a history of operations.

Therefore with the foregoing in mind the present invention provides a system a method and a program capable of coping with the above stated problems. This may be achieved by the combination of features recited in independent claims of the present application. Dependent claims further recite favorable specific examples of the present invention.

In order to cope with the above stated problems one aspect of the present invention provides a system for generating a service program. The system includes a storage device a history acquisition unit that acquires a history of operations with a web browser by a user and stores the history in the storage device a search unit that accesses the storage device to search a history of a first operation and a history of a second operation wherein in the first operation a parameter is input in a web page and the second operation is another operation performed after the first operation and a generation unit that generates a service program that provides services that the user has received through the operations with the web browser and stores the service program in the storage device. The service program makes a computer function as an input acceptance unit that accepts input of a new parameter that is to be input to the web page instead of the parameter input through the first operation and a processing unit that performs in response to the input of the new parameter processing of inputting the new parameter in the web page and processing associated with the second operation beforehand in this stated order with respect to the web browser. The present invention further provides a program a program product and a method that make a computer function as such a system. The program product may include for example a storage medium for storing the above mentioned program or a medium for transmitting the program.

Note here that the above summary of the present invention does not include all of the features necessary to the present invention and sub combinations of these feature groups are also contemplated.

The following describes the present invention by way of embodiments. The following embodiments are not intended to limit the scope of the inventions recited in claims and all of the combinations of the features described in the embodiments are not always essential to means for solving the problems.

The client computer is further connected with the server computer via the communication line such as local area network. Then the client computer stores various data generated based on user s instructions in the server computer or reads out various data generated by other users from the server computer . In order to implement the functions of storing and reading out data a web application server runs in the server computer . The web application server cooperates with a hard disk drive as a storage device and a communication interface to provide the client computer with data for example.

The information system according to the present embodiment is aimed to support the easy creation of a program by a general user so as to allow a variety of services provided by the web sites to to be combined for offering a new service.

Next the user operates the web browser to combine a plurality of service programs S . As a result a plurality of service definitions are read out from the server computer s and are read in and combined in the client computer thus forming one application program. The user inputs a parameter in an input field displayed by this application program S . In response to the input the client computer autonomously sends receives a HTTP request and a HTTP response to from the web sites to S and displays the result for the user S .

In the case where the following user s operation is an input operation an event associated with the input operation beforehand is generated. In this case also a parameter input is sent as a HTTP request as needed to a web server providing the web site or the like. In this way every time the user performs an operation an event is generated inside the client computer and a HTTP request is sent as needed. Even in the case where no HTTP request is sent a program read in the web browser and running therein e.g. a program written with a language such as JavaScript supporting a page update function may update automatically a web page displayed by the web browser DOM operation in the drawing .

After the completion of a sequence of operations a user designates a display object arbitrarily from the web page displayed through the operations with the web browser . Then the client computer associates the location of the thus designated display object with the history of the user s operations of the web browser and stores it in the hard disk drive . The acquisition and the storage of the history may be embodied by a plug in program provided in the web browser for example. Then the client computer generates a service program running based on this history and sends a service definition as information indicating a definition of the service program to the server computer s .

After the generation of the events is completed the service program selects from the screen of the web browser after the generation of the events the display object designated by the user during the acquisition of the history and outputs the same for the user S .

In this way the client computer generates a program that runs in response to the input of a new parameter and based on the user s operations history and selects the result from the screen and outputs the same thus performing the operations on behalf of the user and combining a plurality of services. The following describes the details of the function.

The display unit displays a first screen and a second screen where the first screen shows the web browser operated by the user and the second screen shows the list of operations stored in the storage device . For a user s parameter input operation in a web page among the operations acquired as the history the parameter setting unit sets based on a user s instruction whether or not to use the parameter acquired as the history for the processing by the processing unit . This instruction may be a click operation with a pointing device with respect to the history displayed on the second screen. Then the parameter setting unit stores this setting result in the storage device .

The object selection unit selects from the web page displayed on the web browser operated by the user the display object based on the user s instruction and associates the location of the display object in the web page with the operations history and stores it in the storage device . The search unit accesses the storage device to search a history of a first operation through which a parameter is input in a web page and a history of a second operation that is another operation performed after the first operation. The generation unit generates a service program that makes the client computer function as the input acceptance unit and the processing unit described later. The service program itself or information defining the service program may be output to the server computer whereas information defining another service program may be read in the client computer and run. The information defining a service program will be exemplified later as a service definition .

The input acceptance unit starts to operate in accordance with a user s instruction. Then the input acceptance unit accepts the input of a parameter from the user that is to be input in the web page instead of the parameter input through the first operation. Herein the first operation for accepting the input of a new parameter is limited to the first operation in which the parameter acquired as the history is set to be not used for the processing by the processing unit . Note here that the input acceptance unit may accept the input of a new parameter not from the user but from another program. That is for example this service program may start to run in response to the output of a parameter by another program and the input acceptance unit may receive this parameter. Then in response to the input of this new parameter the processing unit performs the processing of inputting this new parameter in a web page and the processing set for the second operation beforehand with respect to the web browser in this stated order. Such processing may be embodied by generating in the web browser events that the web browser will generate when undergoing these operations.

The location of the display object is indicated with XPath extensible markup language XML Path Language for example. In the notation of XPath indicates any tag located in any hierarchical level in a XML document as a whole. The character string following indicates a tag name. The character string following indicates an attribute name. That is input id user indicates among tags of input located in any hierarchical level of a XML document as a whole a tag whose attribute of id is user. The history acquisition unit acquires such notation in XPath as information indicating the location of the display object that is an object of the user s operation and stores the same in the storage device .

The storage device further may store a label to be included in the history of the user s input operations where the label is provided in the web page where the user inputs a parameter so as to allow the user to recognize an input field for inputting the parameter. This label may be a character string that is displayed next to the input field for allowing the user to understand easily as to what should be input in the input field. For instance when the character string of the number of shares is displayed next to an input field and the numerical value 200 is input in the input field the label the number of shares is stored to be further associated with the type of operation the location of a target display object and the parameter 200 .

The storage device further may store for the history of an input operation information as to whether a parameter input through the operation is to be used as it is for the processing by the processing unit . In the drawing this information is indicated with in the field of open. That is for the operations history with the open field with a new parameter is required instead of the parameter input through the operation. On the other hand for the operations history without in the open field the parameter input through the operation is used as it is for the processing by the processing unit where any new parameter is not requested and moreover the parameter itself will not be open to the public view.

The storage device further may store in association with the operations history information indicating the location of a display object to be displayed as a result of the operations performed on behalf of the user. In the drawing the information on such a location is indicated with the entry of reference. That is an entry of reference is associated with the history of operations performed prior to the operation of the entry and indicates to select a desired display object from the web page displayed as a result of these operations performed on behalf of the user and display it for the user.

Referring now to an example of the work by a user of editing the history and functions relating to the work will be described below.

Meanwhile the history display screen displays a history of the operations by the user with the web browser . More specifically in response to the click of a circle button in the history display screen with a pointing device or the like the history acquisition unit starts to acquire the history. The history acquisition unit acquires the history of the operations by the user with the web browser after start and stores them in the storage device one by one. Insofar as it concerns the history of user s operations with the web browser even if the operations are conducted across a plurality of web sites for example such operations will be stored as a set of history in the storage device . The stored history is displayed on the history display screen . In response to the click of a square button in the history display screen the history acquisition unit stops the acquisition of the history and stores the result as a file.

A user may edit a history on the history display screen freely. For instance a user may perform a drag and drop operation of a certain history within the history display screen so as to change the operational order with another history. A user may delete a certain history. In response to these operations the history acquisition unit changes the order of the histories stored in the storage device or deletes the history from the storage device . Furthermore on the history display screen a user may edit a label stored to be included in the history. The parameter setting unit may accept on this history display screen a setting concerning whether a parameter acquired as the history is to be used as it is for the processing by the processing unit . For instance every time a user clicks a certain history indicated as a list on the history display screen the setting of using a parameter acquired as the history as it is for the processing by the processing unit i.e. the above described setting of not open to public view and the setting of accepting the input of a new parameter i.e. the above described setting of open to public view may be switched alternately.

The association operation may be embodied by the selection from the above stated context menu or alternatively may be embodied by a drag and drop operation with a pointing device for example. That is when accepting an operation of dragging a display object such as 95.19 and dropping it in the history on the history display screen the object selection unit may acquire the location of the display object associate it with the history and store it in the storage device . In this way any type of operations may be performed insofar as a user may instruct the association through the operations.

In the case where the display object is a recursive element it may be desired that such display elements may be collectively acquired as an array. Referring now to a function allowing a large number of display objects to be selected with efficiency will be described.

In the case where there are a plurality of ancestor display objects a plurality of candidates will exist as the other display objects selected in addition to the designated display object. For instance in the case where the display object of specified with XPath of body table 1 tdoby 1 tr 1 td 1 is designated there are the display object body table 1 tbody 1 tr 1 as well as body table 1 tbody 1 body table 1 as the ancestors in the tree structure of the document for example. Herein in the notation of XPath the parentheses following an element name indicates the appearance order of the element. For instance even when a plurality of elements tr are arranged the notation of tr 2 may uniquely designate the second element among the elements. Therefore depending on what ancestor is set in common with the display object a plurality of candidates may exist as other display objects.

In this case the object selection unit may display for each of the plurality of candidates the location of the display object in the context menu. For instance the XPath of body table 1 tbody 1 tr 1 td indicates all td tags that share body table 1 tbody 1 tr 1 as their ancestor. Thus the object selection unit may display as one of the candidates for selection the XPath indicating a plurality of tags collectively as a list.

In addition to the above stated example of XPath the object selection unit may further display each display object as a candidate for selection by surrounding it with a box in the web browser which is for allowing the user to understand easily as to which display objects are shown as the candidates for selection. For instance in the exemplary screen of in addition to the display object 95.19 originally designated the display object of Feb. 22 and the display object 10.17 are displayed which are surrounded with a box. At this time when the user releases the button of the pointing device the object selection unit selects these objects collectively.

In this way according to the example of even when there are a plurality of display objects that share their ancestor in the tree structure and the number of their display objects is variable these display objects may be designated collectively beforehand. A set of the display objects designated collectively may be processed not as output data in number of the objects but as array type output data as a group.

Lines to define an event to be generated when the web browser undergoes a parameter input operation in the web page. Line defines a type of the event type and line defines the location of the display object where the parameter is input. Line defines a parameter to be input and line defines a label that is a character string to be displayed in association with the input field. Line defines whether or not to display this input field.

Each event is generated by the generation unit based on the history of user s operations with the web browser . For instance based on the history of user s clicking of the web browser the generation unit defines the generation of an event of a type click and records the same to be included in the service definition . Further based on the history of the user s parameter inputting operation in the web page with the web browser the generation unit defines the generation of an event of a type of type and records the same to be included in the service definition . In addition to this the client computer may control this service definition while editing this with a text editor or the like. Thereby a user of some programming ability is allowed to modify the service created from the history easily to form more desirable different service.

The service definition also defines a display object to be displayed as a result of the operations performed on behalf of a user. For instance in the case where the object selection unit has selected a display object located at a certain location as the display object to be displayed as a result of the operations performed on behalf of a user the generation unit defines the generation of an event indicating that the display object at the location is to be selected among the display objects displayed as a result of the operations performed on behalf of the user and to be output. More specifically lines to define the type of an event ref . This event indicates to select the display object at the location specified with the tag at line from the web page. The display object to be displayed as a result will be displayed in association with the character string of reference1 defined at line .

The service definition exemplified as above is converted by an interpreted or a compiled language processor into a service program that runs directly on the client computer which is executed by the client computer . Then this service program makes the client computer function as the input acceptance unit and the processing unit . Additionally the service definition may be sent to the server computer and be stored therein. Conversely another service definition stored in the server computer may be read in the client computer and executed thereby.

The display unit displays a list of the operations stored in the storage device on the history display screen S . Then the client computer accepts operations concerning various setting changes of the operations indicated by the history S . For instance for a user s parameter input operation in a web page among the operations acquired as the history the parameter setting unit sets based on a user s instruction whether or not to use the parameter acquired as the history as it is for the processing by the processing unit . For an operation of always inputting the same parameter the setting for using the parameter as it is for the operation may omit a step of inputting the same parameter every time when the operation is performed on behalf of the user. The history acquisition unit may accept an operation of adding or deleting the history partially or an operation of changing the operational order. Thereby the history of an error in operation during the acquisition of the history may be deleted and therefore even when an error in operation occurs there is no need to repeat the history acquisition from the beginning which is useful for users. The history acquisition unit further may accept an operation of editing a label that is acquired to be included in the history. Thereby a display that is easy to understand may be provided with consideration given to later utilization.

The object selection unit selects a display object based on a user s instruction from the web page displayed on the web browser that the user operates associates the location of the display object in the web page with the history of operations and stores the same in the storage device S . The search unit accesses the storage device to search a history of a first operation in distinction from a history of a second operation where in the first operation a parameter is input in the web page and the second operation as another operation is performed after the first operation S . The generation unit generates a service program making the client computer function as the input acceptance unit and the processing unit described later S .

In response to the input of this new parameter the processing unit executes the process of inputting this new parameter in the web page and the process predetermined as the second operation that is to be performed after the first operation in this stated order one by one S . Such processing may be embodied by sending an instruction to the web browser so as to make the web browser generate the events that the web browser will generate when undergoing these operations. More specifically an event may be generated by calling up API Application Programming Interface generating the event where the API includes as arguments a type of the event to be generated a parameter to be input the location of a display object as an object causing the event and the like. This API may be offered by a plug in program or may be offered by the web browser or an operating system.

A specific example of an individual operation is as follows. For a first operation with a setting such that the parameter acquired as the history is not used for the processing by the processing unit the processing unit calls up API for generating the event in the web browser where a type of the event to be generated when the parameter is input the location of the display object where the parameter is input and an input new parameter are set as arguments. For a click operation the processing unit calls up the API for generating the event in the web browser where the location of a display object clicked with a pointing device and a type of the event to be generated in response to the click with the pointing device are set as arguments.

For a first operation with a setting such that the parameter acquired as the history is not used for the processing by the processing unit the processing unit calls up the API for generating the event in the web browser where a type of the event to be generated when the parameter is input the location of the display object where the parameter is input and a parameter stored as the history are set as arguments. For a drag and drop operation the processing unit calls up the API for generating the event in the web browser where a type of an operation indicating a drag and drop operation identification information on a display object to be dragged and identification information on a display object as a dropping target are set as arguments. Further for a web browser activation operation the processing unit calls up the API for generating the event in the web browser where an address of a web page is set as an argument.

Then the processing unit selects from the web page displayed on the web browser that the user performs the operations a display object corresponding to the location stored associated with the operations history and displays it as a result of the operations performed on behalf of the user S .

The case of performing operations collectively on behalf of the user is as follows. The input acceptance unit accepts in addition to a new parameter to be input in a web page instead of the parameter input through the first operation the input of a new parameter from a user that is to be input in the web page instead of the parameter input through the third operation . In response to the input of these parameters the processing unit performs with respect to the web browser inputting a new parameter corresponding to the first operation in the web page the processing associated with the second operation beforehand inputting a new parameter corresponding to the third operation in the web page and the processing associated with the fourth operation beforehand in this stated order. In this way in the operation of performing operations collectively on behalf of the user the operation starts after new parameters corresponding to all of the input operations have been input.

The operation of performing the divided operations partially on behalf of the user is as follows. The input acceptance unit firstly accepts the input of a new parameter from a user that is to be input in the web page instead of the parameter input through the first operation . Then in response to the input of this new parameter the processing unit performs with respect to the web browser the process of inputting this new parameter in the web page and the processing associated with the second operation beforehand in this stated order. At this time if the display object to be displayed as a result of the operations has been already set in the operations performed on behalf of the user the processing unit selects the display object from the web browser displayed through the operations performed on behalf of the user and displays it for the user.

Next in response to the processing by the processing unit associated with the second operation beforehand the input acceptance unit further accepts the input of a new parameter from a user that is to be input in the web page instead of the parameter input through the third operation . Then in response to the input of this new parameter the processing unit performs with respect to the web browser inputting this new parameter in the web page and the processing associated with the fourth operation beforehand in this stated order. In this way in the operation of performing the divided operations partially on behalf of the user if a new parameter corresponding to a part of the input operation is input the processing corresponding to a part of the operations enabled by the new parameter starts.

To divide the operations performed on behalf of a user enables the following application for example. A user inputs a stock code in a web page providing information through the first operation in order to obtain information on stock prices. Thereafter the user performs the second operation to display a target stock price. The user sees the stock price and judges how stocks are ordered and at what a stock price stocks are to be ordered. Then the user inputs an order price and an order method in a web page of a securities firm through the third operation . Through the fourth operation a result of the order and a result of agreement are displayed for the user. When the above described operations are performed on behalf of the user the second operation and the fourth operation preferably may be performed automatically because these operations would be independent of user s judgment and stock price information. However it is desirable to let the user input a new parameter for the first operation and the third operation which are based on user s judgment every time these operations are performed on behalf of the user. Further among parameters input through the third operation an order price for example is determined by the user depending on a result of the second operation. By dividing the operations performed on behalf of the user such user s needs are filled and if user s judgment is required the operations performed on behalf of the user may be stopped in order to request the user to input a new parameter.

That is the description of processing and functions that support the creation of a service program for performing operations on behalf of the user with reference to . With these processing and functions it is possible for a general user to create a service program with a simple operation the service program enabling the operations performed on behalf of them. Since this service program enables the operations performed on behalf of the user and not a HTTP request made on behalf of the user the operation of a web page that changes dynamically in configuration which has become widespread in recent years and the operation across a plurality of web pages may be reproduced faithfully. According to such a program enabling the reproduction of operations even when a plurality of existing services are provided by two or more web sites a new service may be offered by combining these services.

When the user inputs a zip code in the input field the history display screen displays the history of the input operation. In order to associate this history with a label the user has only to input a character string indicating the label in an input field for inputting the label immediately after the input operation. In response to this the history acquisition unit associates the label with this history and stores the same. The stored result is displayed on the history display screen as well. Herein the character string Zip input as the label in the input field is displayed on the history display screen .

At this time when the user inputs a character string indicating the label in the input field this label is associated with the location of the display object to be displayed as a result of the operations performed on behalf of the user and is stored in the storage device . This label is displayed in association with the display object to be displayed as a result of the operations performed on behalf of the user. The label input in the input field is stored in the storage device and is displayed on the history display screen also. As a result the location of the city name New York is associated with the label City and is stored. A similar operation is performed with respect to the name of state NY and State is input as a label thereby the label State is associated with the location of the state name NY and is stored.

Referring now to an interface executing the thus created service program and the processing and functions allowing this service program to be combined with another service program and to be executed will be described below.

The developing environment consists of a plurality of regions including a service model display unit an application editing unit a graphical user interface GUI components list display unit a service list display unit a data hub and a property editing unit . In this example the service model display unit and the GUI components list display unit are palette areas from which GUI components may be attached to the application editing unit . Although these areas are sectioned areas like tiles in this example they may be implemented in a multi window display form that permits mutual overlapping of individual areas.

Although not illustrated in details the GUI components list display unit displays GUI components such as a button an edit area a memo a label a combo box and a radio button from which these GUI components may be dragged and dropped to the application editing unit . The service list display unit reads out from the hard disk drive service program definitions managed by a service management unit provided in the web application server and displays the list. These service programs may be created by a system administrator beforehand for the purpose of web service access. Alternatively these service programs may be created by various functions described with reference to .

The service model display unit is an area for displaying input elements indicated as trigger elements and output element indicated as Output concerning the services selected by the service list display unit where these elements are displayed hierarchically or schematically. These indicated input elements and output elements may be dragged and dropped in the application editing unit or in the data hub described later. Alternatively these elements may be dragged and dropped from the application editing unit or from the data hub .

As an output element for a service a list structured with XML may be adopted in addition to a text character string. It should be noted here that in the case where the output element is a text character string when such an element is dragged and dropped from there in the data hub it will occupy a single cell in the data hub . On the other hand in the case where an output element is a list when such an element is dragged and dropped from there in the data hub it will occupy cells corresponding to in number of the character strings or the numerical values included in the list in the data hub and each character string or numeral value corresponding to the list will be stored in the corresponding cell.

GUI components may be dragged and dropped from the GUI component list display unit to the application editing unit whereas Trigger elements input elements or output elements may be dragged and dropped from the service model display unit to the application editing unit . Definitions of the thus created various elements and GUI components are managed by an application management unit provided in the web application server as the definitions of the application program obtained by combining a plurality of service programs and are stored in the hard disk drive or the like.

When a Trigger element in the service model display unit is attached to the application editing unit and is clicked while executing a program access to a URL designated for the service will be started. An input element of the service displayed in the service model display unit means a parameter fed when access is made to the URL. For instance access is made to http www.CitySearch.com Search CGI zipcode 98231 zipcode is a parameter input element hereinafter this may be called a parameter simply and 98231 is its content. As in http www.CitySearch.com Search CGI zipcode 2428502 coutry Japan there may be a plurality of parameters. Herein a web service does not always have an input parameter or an element and it should be noted that there may be a web service without any input element. For instance in the case of a web service simply sending back the current Greenwich mean time no parameter is required.

Meanwhile when access is made to a web site data sent back may be HTML XML or JSON JavaScript Object Notation that is a relatively light data interchange format utilizing the specifications of JavaScript language partially. In this way when access is made to a web page the data sent back may be a structured data and therefore a unit that may be dragged or dropped as an output element of the service model display unit also may be in various formats such as a list as a whole or as a part of the list.

In this example when access is made to a web site or a web service asynchronous communication with a server is preferably used which is called XMLHttpRequest based on the technology called Ajax. With the use of this technology rewriting of a screen may be speeded up and data traffic may be reduced. Incidentally a normal HTTP protocol command may be used also.

The data hub as a data linkage area preferably has an interface appearing as a spreadsheet called a spreadsheet program also and consists of sections divided horizontally and vertically. These sections will be called cells named A A B and the like following the custom of a spreadsheet program. In each cell a user may input a value or a GUI component may be dragged and dropped therein from those attached to the application editing unit . Alternatively a calculation formula such as A B and A B may be input which are well known forms in a spreadsheet. Whether a type formula is allowed depends on codes of the programming using JavaScript or the like. On the other hand each of these cells may be conversely dragged or dropped to the GUI components attached to the application editing unit or the input elements of the service displayed in the service model display unit . That is to say according to this example the data hub is devised using functions of JavaScript so as to provide the above described drag and drop function and various calculation functions across cells.

The data hub may include a list output element written in XML or the like that is attached as an output element of a web service. In such a case when such a list output element is dragged and dropped in the data hub cells corresponding to in number of the elements included in the list will be occupied. In the case where a plurality of cells are dragged and dropped from the list in this way statistical processing may be conducted. Thus in this example various statistical functions are prepared for this purpose such as sum function like SUM A . . . E average function like AVERAGE A . . . E standard deviation function like STDEVA A . . . E maximum function like MAX A . . . E and minimum function like MIN A . . . E . The implementation of such formula manipulation with JavaScript has been established as a programming technique and therefore detailed description thereof will be omitted.

A cell of the data hub in which the user inputs a calculation formula generally is dragged and dropped in an input element a trigger element and the like of a service model displayed by the service model display unit and is associated therewith. However the function of the client developing environment of may be set as follows instead of dragging and dropping the cell to such elements it may be dragged and dropped directly at a blank area of the application editing unit for example where GUI components for a text input area may be attached automatically so as to allow a value of the cell of the data hub from which the drag and drop operation originates to be associated therewith. For instance the drag and drop operation from the GUI component list display unit to the application editing unit causes the arrangement of the selected GUI components over the application editing unit by a common technology. Therefore with the use of technology similar to this a function may be provided to the client developing environment so as to enable the following process to be performed automatically in response to a drag and drop operation from a cell of the data hub to a blank area of the application editing unit a GUI component indicating a text input area is attached at the position subjected to the drag and drop operation followed by an associating operation of the text input region with the cell of the data hub where the drag and drop operation originates.

The property editing unit functions to set or change attributes of GUI components or input output elements of a service attached to the application editing unit and selected by clicking a mouse where the attributes include color font display nondisplay Enable Disable and the like.

The following describes a specific example of operations for developing an application. Herein a user intends to create an application program for 1 acquiring data about a city and a state by inputting a zipcode to a service program named CitySearch 2 combining data of the city and the state to access a service program named MapCode and 3 obtaining the latitude and the longitude of the city. It should be noted that CitySearch sends back data of the city and the state individually whereas MapCode demands the combined data of the city and the state. In order to handle these operations automatically the features of the present embodiment will be favorably utilized.

Referring now to an initial screen for newly developing an application is shown. Incidentally since the GUI components list display unit and the property editing unit have less to do with the following description these units have been omitted in this drawing. On this screen a user drags and drops CitySearch from the service list display unit to the service model display unit as indicated by the arrow .

Then as shown in the service model display unit displays a configuration including input and output of CitySearch. This configuration may be created by a system administrator for example beforehand to be adaptable to CitySearch. In the case where the service program is created by the functions described referring to an input parameter set as open in the service definition is displayed as Input element or Trigger element in the service model display unit . A display object set to be displayed as a result of the execution of the service program is displayed as Output element in the service model display unit .

Then in trigger of CitySearch is dragged and dropped from the service model display unit to the application editing unit as indicated by the arrow and input zip of CitySearch is dragged and dropped to the application editing unit as indicated by the arrow .

Consequently as shown in the position to which trigger is dragged and dropped becomes a button including characters of Go and the position to which input is dragged and dropped becomes a text input field .

Then as shown in when zipcode of 10001 is input in the text input field and the button is clicked access is made to CitySearch via the web application server using the parameter of zipcode 10001. CitySearch returns New York as and NY as respectively. Then the user drags and drops as Output of CitySearch in the service model display unit to the cell A of the data hub as indicated by the arrow and similarly drags and drops as Output to the cell B of the data hub as indicated by the arrow .

Consequently the cell A and the cell B are bound to and respectively and therefore as shown in New York is displayed in the cell A of the data hub and NY is displayed in the cell B.

Then the user inputs in the cell C of the data hub a calculation formula of A B using the character string conjunction operator of and presses an end of line key. Then as shown in calculation is carried out with the calculation formula and New York N.Y. is displayed in the cell C. Note here that although the rule of the operator is coded using JavaScript following a common style in a normal spreadsheet program common notation in other program languages such as A B will be permitted. Further it will be clear for a person skilled in the art that any operation may be conducted such as addition subtraction and other mathematical functions in addition to the character string conjunction operator.

In this example output from the web service is stored in both of the cell A and the cell B. However various application examples may be considered for example the user may input a character string directly in one of the cells or a calculation formula including the reference to another cell may be used.

Next as shown in MapCode is dragged and dropped from the service list display unit to any region of the service model display unit as indicated by the arrow . Then as shown in the service model display unit displays a configuration including input output of MapCode. This configuration may be created by a system administrator beforehand to be adaptable to MapCode.

Then on the screen of the user drags and drops the cell C of the data hub to each of Trigger and Input of MapCode inside the service mode display unit as indicated by the arrows and . The reason for dragging and dropping not only Input but also Trigger is for allowing the access to MapCode to be made automatically in response to a change in the value of cell C of the data hub where Input is set as the parameter.

Incidentally at this time instead of dragging and dropping the cell C directly to Input of MapCode displayed in the service list display unit Input of MapCode may be dragged and dropped once to the application editing unit and the cell C may be dragged and dropped to the position subjected to the drag and drop operation in the application editing unit . Even in this case although the value of the cell C is still provided to Input of MapCode such an operation allows the user to confirm the value provided at Input of MapCode on the screen during the progress of the operation when the application is activated later.

In response to this drag and drop operation Trigger of MapCode is changed from the state of not associated at all to the associated state thus making access to MapCode with the parameter of New York N.Y. Then MapCode returns 40.71 and 75.59 as the latitude and the longitude of New York city respectively. Then and as output of MapCode are dragged and dropped from the service model display unit to the application editing unit as indicated by the arrows and respectively thus actually making these values visible on the application editing unit as text output fields . illustrates this state.

Then the application has been almost complete. As shown in however the user is allowed to add character strings and as appropriate for explanation in an easy to understand manner and then saves the application program. The thus saved application program may be activated based on a user s instruction so as to display an input field and start to provide a service in response to the input of a parameter.

For instance firstly in response to the action from the service program providing CitySearch the input acceptance unit starts the operation to display the text input field and the button for accepting Zipcode as an input parameter. Then if this parameter is input the processing unit causes various events specified by the service definition to be generated in the web browser. If the service program is created based on operations history this process will be operations performed on behalf of the user. Then the processing unit selects a display object set beforehand from the web page displayed on the web browser as a result of the operations performed on behalf of the user and displays it as a result of the operations performed on behalf of the user. For instance in the example of the result is displayed in the text output field and the text output field .

According to the example described above with reference to a user s intuitive GUI operations allow a service program to be combined with various GUI elements or to be combined with other service programs thus creating an application program. In this way although a service program may be operated alone or a plurality of services may be combined highly advanced processing may be realized by making the service program function as one component of an application program.

The host controller connects the RAM the CPU accessing the RAM at a high transmission rate and the graphic controller . The CPU operates based on programs stored in the ROM and the RAM and controls respective units. The graphic controller acquires image data generated by the CPU or the like on a frame buffer provided in the RAM and causes the display device to display the image data. Alternatively the graphic controller may include internally a frame buffer storing image data generated by the CPU or the like.

The input output controller connects the host controller the communication interface that is a relatively high speed input output device the hard disk drive and the CD ROM drive . The communication interface communicates with external devices via network. The hard disk drive stores a program and data used by the client computer . The CD ROM drive reads out a program or data from a CD ROM and provides it to the RAM or the hard disk drive .

The input output controller is further connected with the ROM the flexible disk drive the input output chip and the like which are relatively low speed input output devices. The ROM stores a boot program executed by the CPU when the client computer is activated a program dependent on hardware of the client computer and the like. The flexible disk drive reads out a program or data from a flexible disk and provides it to the RAM or the hard disk drive via the input output chip . The input output chip connects various input output devices via the flexible disk a parallel port a serial port a keyboard port a mouse port or the like.

A program is provided to the client computer by a user where the program is stored in a storage e.g. recording medium such as a flexible disk a CD ROM or an IC card. The program is read out from the recording medium via the input output chip and or the input output controller and is installed in the client computer for execution. The program makes the client computer or the like perform the same operations by the client computer as those described referring to and therefore their description will be omitted.

The above described programs may be stored in an external recording medium. Typical recording media include an optical recording medium such as DVD or PD a magnetooptical recording medium such as MD a tape medium a semiconductor memory such as IC card as well as a flexible disk and a CD ROM . Alternatively a storage device such as a hard disk or a RAM provided in a server system connected with private communication network or the Internet may be used as a recording medium and a program may be provided to the client computer via the network.

As stated above the present invention has been described by way of embodiments. However the technical scope of the present invention is not limited to the above described embodiments. It will be appreciated for a person skilled in the art that the above stated embodiments may be modified and improved in various ways. Embodiments modified or improved in such a way also are intended to be embraced in the technical scope of the present invention which is clear from the appended claims.

