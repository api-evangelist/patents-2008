---

title: Control of design automation process
abstract: A system is implemented for controlling long running electronic design automation tools. A user may modify the running of the tool in real time using an interface at the user computer. The user computer accepts user input and communicates with a computer running the design application. The design application runs normally unless a user enters input requiring modification of the process being run by the design application.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08001496&OS=08001496&RS=08001496
owner: International Business Machines Corporation
number: 08001496
owner_city: Armonk
owner_country: US
publication_date: 20080221
---
The present invention relates generally to control of the design automation process. More particularly a batch run design automation process through Electronic Design Automation tools used in designing electronic circuits is controlled throughout the batch run.

Electronic Design Automation EDA tools are a category of tools used for designing and producing electronic systems ranging from printed circuit boards PCBs to integrated circuits. Before EDA integrated circuits were designed by hand and manually laid out. Current EDA tools are used in designing digital circuitry as well as incorporation of analog designs and mixed systems. Further current digital flows are extremely modular. EDA is divided into many and sometimes overlapping sub areas. They mostly align with the path of manufacturing from design generation to mask generation.

In general most EDA tools are batch run tools and can require significant runtimes from several minutes to several days. While advancements in EDA development include attempts to reduce runtime certain steps perform best when they are run with a large amount of design data. The large volume of design data results in longer than desired runtimes. This may be the case for example in placement driven synthesis. Placement driven synthesis is done by tools such as International Business Machines Corporation IBM s PDSrtl tool. Breaking apart the design or steps is not always the best engineering decision because some jobs have long runtimes and unexpected iterations can result in substantially increased costs.

One attempt at reducing costly iterations includes writing relevant design data at particular checkpoints of a long running job. The job can use the checkpoint design data and save time. However such an approach involves overhead in restarting the job. Further there may be excess data storage requirements and the loaded checkpoint must exactly match the in core data from the initial process. A further problem with such an approach is that a user may wish to control a specific step in the application but may not with the checkpoint method.

Another approach used by IBM s PDSrtl tool allows the reading of a specific file at predefined intervals. The intervals are similar to the checkpoints previously discussed. However such reading of specific files is relatively difficult to use. A user must have detailed development knowledge of the placement driven synthesis application. Further the mechanism is error prone and can significantly harm the design process. For the above reasons what is needed is a way to control a long running EDA application.

Embodiments consistent with the present invention provide an Interactive Client Server to Batch Client Server approach to control a long running EDA application. In accordance with the system method and program product a user may modify a long running EDA application in real time using a simple interface such as a web browser. The terms Interactive Client Server and Batch Client Server refer to machines running different processes as further described herein.

In one embodiment a method is provided for controlling an EDA tool such as an automation design program which generates a model for an electronic circuit design. An interface may be provided for a Batch Client Server connected to an Interactive Client Server. The Batch Client Server runs an automation design program. The running of the automation design program is monitored by the Interactive Client Server. In an exemplary embodiment the Batch Client Server checks for input commands from the Interactive Client Server and modifies the running of the automation design program in response. In another exemplary embodiment checking for input commands is conducted at predetermined intervals optionally by both the Interactive Client Server and at the Batch Client Server. The automation design program runs normally unless the user enters input into the Interactive Client Server. The Interactive Client Server can interface with from one to n Batch Client Servers.

Another embodiment of the invention includes a program product. A first program is configured to run on at least one Batch Client Server and to interface the Batch Client Server computer with a second Interactive Client Server interface program. The second Interactive Client Server interface program is configured to run on an Interactive Client Server for allowing a user at the Interactive Client Server to monitor an automation design program running on the Batch Client Server. In an exemplary aspect the first program is configured for receiving instructions from the second interface program and for controlling the running of the automation design program. The second interface program is configured for issuing such instructions.

Yet another aspect of the invention includes an apparatus for use in interfacing at least one Batch Client Server computer with at least one Interactive Client Server computer. The Batch Client Server computer is programmed for running at least one job with an automation design program for designing a circuit. The computer is further programmed for interfacing with an Interactive Client Server computer. An Interactive Client Server computer is programmed for connecting to the Batch Client Server computer for monitoring an automation design job being run on the Batch Client Server computer.

Other aspects of the invention may include checking for input commands from the server computer and modifying running of automation design jobs in response thereto. Another aspect involves conducting the checking at predetermined intervals. A single Interactive Client Server computer may connect and control from one to n Batch Client Server computers for example connected on a network.

These and other advantages and features that characterize the invention are set forth in the claims annexed hereto and forming a further part hereof. However for a better understanding of the invention and of the advantages and objectives attained through its use reference should be made to the Drawings and to the accompanying descriptive matter in which there are described exemplary embodiments of the invention.

In one respect embodiments consistent with the invention include the ability to use one process for an Interactive Client Server and a separate process for each Batch Client Server. A Batch Client Server may include a computer multiple computers servers or any other kind of system arrangement in which commercially available EDA tools such as IBM s PDSrtl tool are run to conduct automation design of circuits. Further the term Batch Client Server may refer to multiple EDA applications running on a single machine a single application running on a single machine or any combination of applications jobs and numbers of machines. An Interactive Client Server may include a terminal a computer or other type device connected through a network to Batch Client Server s through which a user can initiate design runs and control EDA automation design tools on Batch Client Server s .

In an embodiment of the invention the Interactive Client Server monitors user input through a web browser loaded thereon. Each Batch Client Server continues to run normally typically in a batch process. If the Interactive Client Server identifies user input that information is sent to each Batch Client Server via a network interface. Such an interface is implemented in a conventional manner through the use of an existing application programming interface API for EDA tools. In an exemplary manner at predefined intervals each Batch Client Server checks to see if there is any user input. If there is no user input the Batch Client Server continues normally. If there is user input the Batch Client Server takes appropriate action with the batch process being run in accordance with commands issued by the user through the Interactive Client Server.

As illustrated in the invention may be implemented across the entire continuum of an EDA design including at one end batch processes and at the other end interactive processes that require continual user input. In accordance with an exemplary embodiment of the invention a server interface provides for use across the entire continuum for control of EDA design programs being run on clients.

The side may periodically check for user input by accessing shared data . If there is no user input then the side process continues to the next step and periodically returns to step to check for further user input. If user input is retrieved from shared data the data is checked and appropriate updates and changes to the batch process are made in accordance with the instructions.

On the side the process may also be implemented in a recurring predetermined timing pattern where a check is periodically made for user input . If there is user input a cache is updated and data is passed to shared data . If there is no user input the process recycles back to step to periodically check for user input.

Referring again to the update box reverting to a specific step in the EDA process requires that cached design data or checkpoint data be read from a disk. The execution of the next step will then change. Reverting to a prior step can be implemented using an array of functions. The side could modify which function it plans to execute next. More specifically the process may begin with step 1 as defined by step 1 step 2 step 3 step n etc. Before continuing to step 2 the client may check for user input. If no user input is found the process continues to step 2. However the user at the side may have asked the process to revert to step 1. In this case an array index pointer is updated accordingly.

The web browser interface at the side in one exemplary form is a web page capable of accepting user input. This may be implemented using preexisting form and text field widgets. Existing EDA tools may operate as a web server. Security is handled in the existing EDA web server implementation. The process may accept user input and communication with each process using the existing network API.

In conducting the method a plurality of automation design programs running on corresponding Batch Client Servers may be monitored. Alternatively a plurality of Batch Client Servers may be running on one machine. In still another alternative the Batch Client Servers are running a plurality of design programs on a corresponding plurality of machines.

Embodiments consistent with the invention also include a program product with a first program configured to run on at least one Batch Client Server computer and to interface the Batch Client Server computer with a second Interactive Client Server interface program running on an Interactive Client Server computer. Collectively the program code may operate as previously described. Where so desired the program code may be configured for periodically checking for and issuing instructions.

In an alternative embodiment an apparatus is used for interfacing one or more Batch Client Servers with one or more Interactive Client Servers for example in an exemplary embodiment as illustrated in . The respective machines may be programmed to operate as previously discussed.

In addition to the foregoing description the system may be employed to generate a graphical image for the current state of the design and displayed at a machine. In an embodiment where a tool like IBM s PDSrtl tool is run on a supported platform such as AIX Linux etc. the browser could involve a tool such as Chipbench using the same rules from the ongoing design run. This may allow a user to interactively interrogate an application while it is still running.

In general the routines executed to implement the illustrated embodiments of the invention whether implemented as part of an operating system or a specific application program object module or sequence of instructions may be referred to herein as computer programs algorithms or program code. The computer programs typically comprise instructions that when read and executed by one or more processors in the devices or systems in computer system cause those devices or systems to perform the steps necessary to execute steps or elements embodying the various aspects of the invention.

Moreover while embodiments of the invention have been described in the context of fully functioning computer systems those skilled in the art will appreciate that the various embodiments of the invention are capable of being distributed as a program product in a variety of tangible forms. The invention applies equally regardless of the particular type of computer readable signal bearing media used to actually carry out the distribution. Examples of signal bearing media comprise but are not limited to recordable type media and transmission type media. Examples of recordable type media include volatile and nonvolatile memory devices floppy and other removable disks hard disk drives magnetic tape and optical disks CD ROMs DVDs etc. . Examples of transmission type media include digital and analog communication links.

While the present invention has been illustrated by a description of various embodiments and while these embodiments have been described in considerable detail it is not the intention of the Applicant to restrict or any way limit the scope of the appended claims to such detail. The invention in its broader aspects is therefore not limited to the specific details representative apparatus program products and method and illustrative example shown and described. Accordingly departures may be made from such details without departing from the spirit or scope of Applicant s general inventive concept.

