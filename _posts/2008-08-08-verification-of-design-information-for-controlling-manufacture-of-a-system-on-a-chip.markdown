---

title: Verification of design information for controlling manufacture of a system on a chip
abstract: A system on a chip comprises a plurality of circuit blocks, a programmable processor and a communication circuit. Design information includes connection data including an identification of the direct mutual connection and first and second circuit blocks coupled by the direct mutual connection. An additional register is added to the system on a chip coupled to the direct mutual connection. Verification programs are used includescomprising instructions for the processor to access registers in the second one of the circuit blocks, to use the connection data, or information derived therefrom to select the first one of the circuit blocks, and to issue the standardized call to the interface program of the selected further one of the circuit blocks.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08327309&OS=08327309&RS=08327309
owner: Synopsys, Inc.
number: 08327309
owner_city: Mountain View
owner_country: US
publication_date: 20080808
---
The invention relates to design verification of an integrated circuit that contains a system on a chip and to an integrated circuit obtained in a way that facilitates design verification.

In a typical example a system on a chip is an integrated circuit that comprises a programmable processor and a plurality of circuit blocks with specific functions that will be accessed by the processor. Usually the circuit blocks have each been designed apart from the context of that integrated circuit. During system design they are selected and combined to realize a specified system. The skilled person commonly refers to such circuit blocks as IP blocks Intellectual Property blocks . The skilled person uses this term both to refer to design information that can be used to implement the circuit block as well as to refer to the actual circuit block in the physical circuit.

The designers of the system on a chip make a selection of the IP blocks that will be incorporated and their connections. The designers of the system on a chip also have to provide the program for the programmable processor. Typically the programmable processor is programmed with application software and application interface software for the different IP blocks. The application software is designed by the designers of the system on a chip. The application interface software is designed by the designers of the IP blocks. Usually the application interface software can be called from or makes call to the application software using a standard application programming interface API . To give effect to such calls the application interface software needs to have a software model in terms of addresses at which the programmable processor can address each IP block in the system on a chip and optionally also other system parameters of the implementation of the IP block in the system on a chip.

Typically the design process of the system on a chip starts from a design specification in terms of the functions of the IP blocks used their functional connection and application functions. This specification is translated in successive stages until it results into a definition of basic circuit components in the integrated circuit. In parallel the specification is also translated into software. The system parameters used by the software must correspond to the circuit definition that has resulted from the specification.

The huge complexity of many systems on a chip and the participation of many different designers makes the design of such systems very susceptible to errors. This makes it necessary to perform extensive verification of the design. As used herein verification is a design stage before the physical manufacturing stage of the circuit aimed at the detection of design errors that if not corrected would be present in all manufactured products. In current day design more than two thirds of integrated circuit implementation effort is involved in verification. It is desirable to reduce this effort.

One type of verification involves the question whether the system parameters that result from the definition of the circuit correspond to the parameters used by the software. This verification potentially addresses both discrepancies between the circuit and software design processes as well as errors in these processes. It would be desirable to automate this process.

After manufacture it is known to test manufactured integrated circuits that contain a system on a chip by performing tests of the individual IP blocks and by performing tests of the connections between the IP blocks. The tests of the individual IP blocks are usually defined by the designers of the IP blocks. Such tests may involve structural tests such as scan tests. Such tests may involve functional tests wherein test data is supplied to an IP block via a system bus or a special test bus and the response of the IP block is observed.

The tests of the connections between IP blocks may include use of a boundary scan test. US 20040019840 describes testing of connections between logic blocks wherein a signal generating section supplies test signals to outputs of a logic block. Signals from inputs of another logic block at the other side of the connections are supplied to a verification circuit. The verification circuit compares the test signals with the signals at the input of the other logic block.

It should be noted that this type of circuit is provided for the purpose of testing manufactured integrated circuits and not for the purpose of verifying the design of the integrated circuit before manufacture. The required test circuitry is usually added after completion of the design in a way that makes the test circuitry transparent for the designed circuit. For example boundary scan circuitry typically comprises flipflops at the input and output pins that are made transparent during normal use. As a result known test circuitry cannot be used during design verification simply because it is not present in the design. Even after the test circuitry has been added to the design conventional test circuitry still cannot be used for verification because it is functionally transparent.

Among others it is an object to provide for automated verification of correspondence between the software model of a system on a chip and the circuit that is used to implement the system on a chip.

A system according to claim is provided for manufacturing a system on a chip that contains a processor coupled to a plurality of pre designed circuit blocks. The circuit blocks may have direct mutual connections that do not run via the processor. Verification of the design is performed using verification programs for execution by the processor. Each verification program is provided for a respective individual circuit block without knowledge of the context in which it used in the system on a chip. To verify a direct mutual connection to the individual circuit block the verification program refers to connection data in the design of the system on a chip to identify another circuit block to which the direct mutual connection is coupled and the verification program uses the identification in combination with standardized calls to interface programs of other circuit blocks to access an additional register for capturing or observing signals on the direct mutual connection. In this way the designer of a circuit block may provide for verification of the connections to the circuit block without requiring detailed knowledge of the implementation of the circuit blocks.

In an embodiment a circuit simulator is provided that is configured to simulate operation of the system on a chip according to the design information when operating under control of the verification programs. In this way no physical prototype of the system on a chip is needed to verify the design using the circuit simulator. By using additional registers that are not needed in the original design observable access to the direct mutual connections can be simulated. In a further embodiment the circuit simulator is configured to simulate operation of the system on a chip according to the design information at respective different levels of abstraction of the circuit blocks. Thus for example simulations of a register level model and a transistor level model may be performed to verify design information at different abstraction levels.

In an embodiment integrated circuit manufacturing masks are generated under control of the design information including the direct mutual connection under control of the connection data. These masks may be used to manufacture the actual system on a chip. This makes it possible to perform verification in the actual system on a chip.

In turn the combination of the hardware circuit design hierarchy and the software design hierarchy implements the system design hierarchy. As in the case of the system design hierarchy these hierarchies comprise data structures of successively lower levels that are related by implementation relations. At the lowest level of the hardware circuit design hierarchy a data structure is provided that defines the layout of one or more different layers in an integrated circuit. These data structures are used to manufacture a set of masks which in turn is used to manufacture an integrated circuit . At the lowest level of the software design hierarchy is a data structure defining machine instructions for a programmable processor or processors in the integrated circuit. This information may be downloaded into the manufactured integrated circuit or it may be used in the manufacture of the set of masks to define the content of a read only memory ROM not shown in the integrated circuit . As an alternative a mix of downloaded and mask defined instructions may be used part of the instructions being downloaded and another part being entered in ROM.

The generation of the data structures at successively lower levels of the hierarchies may be performed automatically by design software executed by a computer or by human designers. Thus for example programs in high level computer languages are typically written by programmers whereas conversion of such programs to machine instructions is typically performed by programs such as compilers.

As in the case of the system hierarchy successively lower level data structures of the hardware circuit design hierarchy and the software design hierarchy define the implementation of functions defined by higher level data structures of the hardware and software hierarchy respectively. These implementation relations are indicated by lines between the data structures.

In addition data structures of the hardware circuit design hierarchy and the software design hierarchy cooperate to implement functions defined by data structures in the system design hierarchy. Thus for example specific data and control information produced by the software defined by the software design hierarchy when running on the hardware defined by the hardware design hierarchy may implement information defined in the system design hierarchy.

Furthermore the hardware circuit design hierarchy and the software design hierarchy are interrelated by one or more data structures defining a program model. These data structures may define for example hardware addresses at which specific registers of IP blocks in the hardware may be addressed by the software and connections between IP blocks. These data structures may take the form of a database with a set of records including records for respective ones of the circuit blocks each record defining an identification symbol for the circuit block the records furthermore having fields for one or more addresses used for the circuit block and for respective terminals of the circuit block containing identification symbols of other circuit blocks that are coupled to these terminals via direct connections and optionally identifications of terminals of these other circuit blocks. Also records for direct mutual connections may be provided with fields containing identification symbols of circuit blocks that are attached to the connections and optionally identifications of terminals of these circuit blocks. Any other form of recording equivalent information may be used. The program model data structure and or the part of it that represents the connections will be termed connection data.

These data structures are related to the hardware design hierarchy in the sense that the hardware must implement these addresses and connections. These data structures are related to the software design hierarchy in the sense that the software must use these addresses and operations programmed in the software cause signals to pass along the connections. In part the program model data structures may implement aspects that are defined in the system design hierarchy part of the program model data structures may in fact be data structures of the system design hierarchy but they will be considered to be part of the program model data structures for the sake of illustration.

As a more particular example application interface components require program model information about the implementation of the IP blocks in the integrated circuit . This program model information may include address information that needs to be supplied to communication circuit to access a specific IP block . This address information may take the form of a base address from which addresses of different registers in the IP block can be determined. Furthermore the program model information may include connection information about the direct connections for example in the form of identifications of terminals of different IP blocks that are connected by the direct connections .

Verification of the design process involves a determination that the implementation relations between data structures at the different design levels are met. Known methods are available for doing so within the hardware and software designs hierarchies per se.

However it is desirable to verify as well that software and hardware cooperate to implement the system design. As will be appreciated the system on a chip will not operate properly if the program model information and the actual circuit implementation are inconsistent with each other. However as the program model information and the actual circuit implementation are established via different routes during system design there is no inherent guarantee that they will be consistent. This should be verified at the design stage.

In order to verify the consistency operation of the designed system on a chip is simulated when it executes instructions of a special verification program. This special verification program uses the same program model information that will be used to execute the application software in the eventual integrated circuit.

In operation the verification programs are executed in a prototype and or execution of the verification programs is simulated. In the case of simulation a computer is used to compute the effect that the verification programs would have when they would be executed by hardware and optionally also software as specified by data structures in the design hierarchies. The verification programs are designed to produce pass fail output signals to indicate whether the IP blocks as designed would implement specified functions of the IP block. Typically respective individual verification programs for different IP blocks are provided by the designers of the respective IP blocks. These verification programs comprise access instructions to access registers in the IP blocks. These access instructions use information from the program model data structure .

In addition the verification programs may be configured to verify the design of connection between the IP blocks such as interrupt connections connections for signal streams clock signals etc. In order to do so a verification program of a particular IP block is provided with information from the program model data structure that specifies which registers from which other IP block or blocks are coupled to the connections between the particular IP block and the other IP block or blocks. The verification program of the particular IP block contains instructions to access these registers using calls to the application interface components for the other IP blocks. A standard application programming interface call is used for this which is standard in the sense that it has calls of the same form for accessing all types of IP block. Only the required identifications differ. These may be passed as parameters of the calls. Thus the programmer of the verification program of the particular IP block is not required to know the structure or even the identity of the other IP blocks to be able to write the verification program of the particular IP block.

Multiplexer has an output coupled to a direct connection to another circuit block not shown . Input register is coupled to another direct connection to a further circuit block or the other circuit block . A first and second circuit block will have an input and an output coupled to a direct connection respectively with corresponding input and output registers. A circuit block with both an input and an output coupled to direct connections is shown merely by way of example other circuit blocks may only have an input or only an output coupled to a direct connection.

In embodiment addressable control register also has an output coupled to a control input of addressable input register to switch this register between a transparent mode for use in normal operation and a clocked capture mode for use during verification. In another embodiment addressable input register is coupled to a connection from a direct connection to core without logically affecting signals passed to core .

Communication interface supports reading and writing from and to functional registers not shown separately in core in response to messages received from the programmable processor not shown via the communication circuit not shown . In addition communication interface supports writing to addressable output register and addressable control register in response to messages received from the programmable processor not shown . Communication interface also supports reading from addressable input register and returning a response message to programmable processor in response to a message received from programmable processor .

Thus communication interface makes it possible for software executed by programmable processor not shown to control the output signals of IP block bypassing core by writing the desired output signals to addressable output register and by writing control data into addressable control register to make multiplexer pass data from addressable output register . Similarly communication interface makes it possible for software executed by programmable processor not shown to read the input signals of IP block bypassing core by reading from addressable input register . This is used for verification. For normal operation core is used to control the output signals and process the input signals. Core is coupled to direct connections to other IP blocks not shown via input register and output register . By way of example both direct input and output connections are shown but it should be understood that some or all IP blocks may only have a direct input connection or only a direct output connection. In normal operation the circuit block is switched to a mode wherein signals via direct connections are passed directly without involvement of communication circuit e.g. without need to communicate the signal to communication circuit without requiring allocation of signal lines or other resources in communication circuit etc.

Input register and multiplexer may be coupled to data signal conductors for passing a stream of signal data such as audio or video sample values but also to control signal conductors such as interrupt signal conductors handshake conductors or even clock signal conductors running for example from a clock control IP block to different other IP blocks . Input register output register control register and multiplexer make it possible to access these signals from the software at least for the purpose of verification.

The application interface components support access to addressable input register addressable output register and addressable control register . For verification the verification program of a particular IP block contains instructions to access these registers in other IP blocks using calls to the application interface components for another IP block with data from the program model data structure to select the registers that have to be accessed i.e. the registers that are specified by the program model data structure to be connected to signal conductors from the particular IP block. This is used to observe whether signals generated by the particular IP block arrive at the input register of the other IP block or to generate a signal from the output register of the other IP block via its multiplexer and to observe whether the signal arrives at the particular IP block.

In addition the verification program may be configured to access internal functional registers of the particular IP block in order to test its internal functioning. For this purpose the verification program uses the program model data structure to select the registers within the particular IP block. As the programmer of the verification program is assumed to be intimately aware of the structure of the particular IP block this may be done without limiting access to access through application interface components . Such direct access enables more detailed testing. Verification program may also contain instructions to access internal registers of the particular IP block in order to observe signals passed to the particular IP block from another IP block in response to register write a command to that other IP blocks in the verification program or to generate signals passed in the particular IP block for observation in another IP block in response to a register read command to that other IP blocks in the verification program .

In principle verification may be performed at any level of the design hierarchy provided that simulation software is provided that is capable of performing simulation based on the design data structure at that level. Thus abstract functional level simulations as well as more detailed level simulation may be performed e.g. register level or signal level . Verification may even be performed by actual execution in an integrated circuit manufactured using the design hierarchy. In this case the verification programs are loaded into the integrated circuit and executed by the integrated circuit to verify the design. However more abstract level verification abstracted from lower level design errors can only be performed by means of simulation.

Although input register may be configured to support only read access to read signals from direct connection it should be appreciated that it may also be configured to support write access for example to supply program controlled signals to core during verification. Furthermore although a circuit block with one input and one output coupled to direct connections is shown it should be appreciated that any circuit block may have no such connections or only an input connection only an output connection or pluralities of such connections to different direct connections .

Dummy register is not connected to any other part of IP block . Dummy register serves to enable the programmable processor to read and write to IP block without affecting its operation in order to test whether its address and data lines are properly connected.

Statistics collector circuit is coupled between core and statistics register . Optionally statistics collector circuit is also coupled to communication interface . Statistics collector circuit is arranged to detect events that occur in core and or communication interface and to update statistic data in statistics register . The statistic data may comprise a count of events and or a plurality of counts of different types of events etc. Detected events may include one or more of detection of an incoming or outgoing message at communication interface detection of an interrupt generated by core detection of DMA transfers executed by communication interface detection of an error such as an arithmetic overflow during a computation etc. Statistics collector circuit writes or updates one or more counts of such detected events in statistics register .

During verification the statistics register may be read using the verification program . Similarly dummy register may be used to verify reading and writing using instructions in the verification program.

Although an application of the various registers of to verification has been described it should be noted that separately these register may also be used in an actual integrated circuit to perform testing debugging and or verification of the actual integrated circuit. By providing registers for software access signal lines between IP blocks that are outside the communication circuit normally used by the software problems in the integrated circuit can be isolated.

Storage sub system stores one or more connection data files including an identification of direct mutual connections between circuit blocks in the system on a chip and the circuit blocks involved in such a connection. Furthermore storage sub system stores files with interface programs for the processor of the system on a chip each for accepting access calls according to a same standardized interface to access a respective one of the circuit blocks. Storage sub system also stores verification computer programs each for a respective one of the circuit blocks. A circuit simulator is provided which may be part of computer or a separate device. A mask manufacturing device is coupled to storage sub system for use in IC masks according to the design information for use in equipment for manufacturing an integrated circuit implementing the system on a chip . A software loading device is coupled to storage sub system for loading interface programs into the system on a chip . In an embodiment loading is performed through the manufacture of one or more masks that define the programs in the system on a chip .

In operation computer is used to generate design information data files under direction from a user. Circuit simulator is used to simulate the execution of the verification programs by a system defined by the design information and the connection data files. After the simulation has produced satisfactory results eventually mask manufacture and or software loading is started.

Other variations to the disclosed embodiments can be understood and affected by those skilled in the art in practicing the claimed invention from a study of the drawings the disclosure and the appended claims. In the claims the word comprising does not exclude other elements or steps and the indefinite article a or an does not exclude a plurality. A single processor or other unit may fulfil the functions of several items recited in the claims. The mere fact that certain measures are recited in mutually different dependent claims does not indicate that a combination of these measured cannot be used to advantage. A computer program may be stored distributed on a suitable medium such as an optical storage medium or a solid state medium supplied together with or as part of other hardware but may also be distributed in other forms such as via the Internet or other wired or wireless telecommunication systems. Any reference signs in the claims should not be construed as limiting the scope.

