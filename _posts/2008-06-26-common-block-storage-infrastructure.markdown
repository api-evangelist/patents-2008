---

title: Common block storage infrastructure
abstract: Common block storage infrastructure techniques are described in which files are created through interaction with a file system to reserve extents in a volume on behalf of volume storage drivers, which may form a driver stack that resides logically on top of the volume. The files protect the reserved extents within the volume for use by the volume storage drivers, such as to store metadata related to operations performed by the drivers. When reserved extents are created, a location of the reserved extents is communicated through the driver stack to a corresponding volume storage driver. Volume storage drivers may also be configured to discover their corresponding reserved extents and communicate these to upper-level drivers and components. Accordingly, when a volume storage driver manipulates data in the volume, it may do so with awareness of the reserved extents of the other volume storage drivers.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08560578&OS=08560578&RS=08560578
owner: Microsoft Corporation
number: 08560578
owner_city: Redmond
owner_country: US
publication_date: 20080626
---
A file system may be implemented by an operating system to define and manage a volume such as determining how files are named stored organized allocated or otherwise managed on the volume. Allocation of space on a volume by components down level of the file system may be unsafe. For instance uncoordinated attempts by the file system and down level components to allocate or operate upon the same space in the volume may result in data corruption deadlocks and or loss of the volume.

Common block storage infrastructure techniques are described in which files are created through interaction with a file system to reserve extents in a volume on behalf of volume storage drivers which may form a driver stack that resides logically on top of the volume. The files protect the reserved extents within the volume for use by the volume storage drivers such as to store metadata related to operations performed by the drivers. When reserved extents are created a location of the reserved extents is communicated through the driver stack to a corresponding volume storage driver. Volume storage drivers may also be configured to discover their corresponding reserved extents and communicate these to upper level drivers and components. Accordingly when a volume storage driver manipulates data in the volume it may do so with awareness of the reserved extents of the other volume storage drivers.

This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter nor is it intended to be used as an aid in determining the scope of the claimed subject matter.

Allocation of space on a volume by components down level of the file system may be unsafe. For instance uncoordinated attempts by the file system and down level components to allocate or operate upon the same space in the volume may result in data corruption deadlocks and or loss of the volume.

Common block storage infrastructure CBSI techniques are described herein which may be used to safely allocate coordinate protect and manage reserved extents in a volume. CBSI techniques further provide mechanisms for volume storage drivers to discover their corresponding reserved extents and communicate the reserved extents one to another. CBSI techniques may be employed to avoid situations in which one volume storage driver attempts to reserve or operate upon reserved extents of another volume storage driver.

For example applications may cause a CBSI module to interact with the file system to reserve extents on behalf of corresponding volume storage drivers. CBSI module may then communicate with the volume storage drivers through a driver stack to inform them of the reserved extents. Volume storage drivers may also be configured to discover their own reserved extents and to communicate these upstream to upper level drivers and to the CBSI module. Accordingly when a volume storage driver manipulates data in the volume it may do so with awareness of the reserved extents of the other volume storage drivers. The volume storage drivers may be configured to adhere to a variety CBSI rules to coordinate with other volume storage drivers and to avoid operating on reserved extents corresponding to the other volume storage drivers.

In the following discussion an example environment is first described that is operable to perform common block storage infrastructure techniques. Example procedures are then described that may be employed in the example environment as well as in other environments. Although these techniques are described as employed within an example computing environment in the following discussion it should be readily apparent that these techniques may be incorporated within a variety of environments without departing from the spirit and scope thereof.

Processors are not limited by the materials from which they are formed or the processing mechanisms employed therein. For example processors may be comprised of semiconductor s and or transistors e.g. electronic integrated circuits ICs . In such a context processor executable instructions may be electronically executable instructions. The one or more processors may perform single threaded and multi threaded operations. Additionally although a single memory is shown for the computing device a wide variety of types and combinations of computer readable memories may be employed including volatile and non volatile memory and or storage media. For example computer readable memories media may include but are not limited to random access memory RAM hard disk memory read only memory ROM flash memory video memory removable medium memory and other types of computer readable memories media that are typically associated with a computing device to store data executable instructions and the like.

The computing device is further illustrated as including an operating system and a variety of applications . The one or more processors may retrieve and execute computer program instructions from applications to provide a wide range of functionality to the computing device including but not limited to office productivity email media management printing networking web browsing and so forth. A variety of data and program files related to the applications are contemplated examples of which include office documents multimedia files emails data files web pages user profile and or preference data and so forth.

Computing device may also include various interfaces through which applications may interact with the operating system common resources dynamic link libraries DLLs network resources content and services and so forth. Interfaces may include a network interface through which application may engage in various network interactions over a network not shown accessible to the computing device . Interfaces may also include one or more application programming interfaces APIs providing core tools and functions that may be used to take advantage of the functionality of the operating system . Generally APIs represent interfaces that various applications may call to take advantage of various tools resources features services and so forth provided via the operating system . A variety of other examples are also contemplated.

Computing device is also depicted as including a file system . File system may be implemented by the operating system to organize memory or partitions of the memory such as to store and organize data and program files. File system is representative of functionality that determines how files are named stored and organized in memory . The file system is operable to manage files and folders and the information needed to locate and access these items by local and remote users.

In particular one or more partitions of memory may be organized logically into a volume as depicted in . The volume may be arranged in accordance with the file system . The file system may own the volume and is configured to recognize and mount the volume when the computing device boots e.g. during a boot or start up sequence . The file system may then expose the volume to applications through various components to facilitate storing locating and accessing different data and program files on the volume . The volume represents a logical organization of one or more partitions of memory . Volume may extend across multiple physical devices e.g. multiple hard drives flash drive and the like . File system may use various data storage devices to define the volume such as a hard disk removable optical disks flash memory and or other suitable storage.

The volume may be accessible via a plurality of volume storage drivers . The volume storage drivers represent functionality operable to manipulate transform read write or otherwise operate upon the volume in a variety of ways. Volume storage drivers may be configured to form a driver stack that is logically positioned between applications and volume storage . In the course of the discussion reference may be made to relative positions of volume storage drivers in a driver stack. In this context upper level drivers may be higher in the stack and logically closer to the applications e.g. software relative to lower level drivers that may be lower in the stack and closer to the volume e.g. hardware . Examples of volume storage drivers include but are not limited to a volume snapshot driver a write aggregation driver and an encryption driver. The volume snapshot driver may perform copy on write operations to store differences in the volume e.g. volume snapshots between points in time. Such volume snapshots may enable backup and restore operations for the volume . Encryption driver may be implemented to store encrypted key blobs on the volume and to encrypt decrypt the data on the volume . The write aggregation driver may be configured to maintain a write log and remap writes to various locations in the volume . A variety of other drivers are also contemplated.

The above example drivers as well as other volume storage drivers may form a driver stack logically between the file system and the volume . They may also be configured to operate independently of the file system . For instance volume storage drivers may perform functions before the file system is mounted or online such as reading and writing to the volume . To enable volume storage drivers to operate independently of the file system the volume storage drivers may carve out space in the volume . The volume storage drivers may then store data in this carved out space to enable operations on the volume . Space that is carved out in the volume for use by a volume storage driver may be referred to herein as reserved extents. Reserved extents may be configured as one or more continuous areas or blocks of space in the volume . The following discussion describes a variety of example techniques related to creation and management of reserved extents for volume storage drivers .

In particular common block storage infrastructure techniques are described herein which may be used to safely allocate coordinate protect and manage reserved extents in a volume . Common block storage infrastructure techniques further provide mechanisms for volume storage drivers to discover their corresponding reserved extents and communicate the reserved extents to other components. Common block storage infrastructure techniques may be employed to avoid situations in which one volume storage driver attempts to reserve or operate upon reserved extents of another volume storage driver which may lead to data corruption and or loss of the volume .

For instance computing device is depicted as including a common block storage infrastructure CBSI module . CBSI module is representative of variety of functionality tools and techniques related to interaction with volume and or creation and management of reserved extents for volume storage drivers . Further CBSI module enables applications to reserve extents in a volume that is owned by the file system .

For instance CBSI module may expose a driver interface and an application interface to enable operations by applications on the volume . Driver interface is representative of functionality to enable communication between the CBSI module and the plurality of volume storage drivers in accordance with common block storage infrastructure. Additionally CBSI module may implement an application interface through which applications may invoke each of the plurality of volume storage drivers . Thus CBSI module facilitates communication between applications and the plurality of volume storage drivers and also among the plurality of volume storage drivers .

CBSI module may be implemented as a file system filter that logically resides between the file system and applications . While it is illustrated a stand alone component CBSI module may also be integrated with the file system and or operating system . In an implementation CBSI module may be provided as a dynamic link library DLL of the operating system . In another example CBSI module is representative of an application programming interface API that is exposable by the operating system . A variety of other examples are also contemplated.

Volume storage drivers are depicted as each providing one or more inter driver interfaces through which the plurality of volume storage drivers may communicate one to another. Each of the volume storage drivers also includes associated metadata . Metadata may describe how the associated driver will operate on the data of the volume . Metadata may be stored in reserved extents corresponding to the associated volume storage driver . Further each of the volume storage drivers may be configured to adhere to the plurality of CBSI rules . CBSI rules are representative of a variety of rules protocol and procedures that may be defined by the common block storage infrastructure. CBSI rules may include both rules to coordinate reserving of extents with the file system and rules to coordinate operation of the plurality of volume storage drivers .

In operation applications may communicate with the CBSI module to cause interaction with the file system to reserve extents in volume on behalf of volume storage drivers . CBSI module may then create the requested reserved extents via the file system . For instance CBSI module may create files through interaction with the file system to protect reserved extents within the volume . When CBSI module creates the reserved extents in the volume CBSI module may communicate with the plurality of volume storage drivers on the stack to inform them of the reserved extents. This communication may include communicating a location of the reserved extents to the appropriate volume storage driver that corresponds to e.g. owns the reserved extents as well as informing the other volume storage drivers of the reserved extents to avoid conflicts. Accordingly when a volume storage driver manipulates data in volume storage it may do so with awareness the reserved extents of the other volume storage drivers .

The volume storage drivers adhere to the CBSI rules to coordinate with other volume storage drivers and to avoid operating on reserved extents corresponding to the other volume storage drivers . Volume storage driver are also configured to discover their own extents and to communicate these upstream to other volume storage drivers and to the CBSI module . Further discussion of CBSI rules may be found in relation to the following procedures.

Generally the functions described herein can be implemented using software firmware hardware e.g. fixed logic circuitry manual processing or a combination of these implementations. The terms module functionality engine and logic as used herein generally represent software firmware hardware or a combination thereof. In the case of a software implementation for instance the module functionality or logic represents program code that performs specified tasks when executed on a processor e.g. CPU or CPUs . The program code can be stored in one or more computer readable memory devices. The features of the techniques to provide common block storage infrastructure are platform independent meaning that the techniques may be implemented on a variety of commercial computing platforms having a variety of processors.

The following discussion describes techniques related to common block storage infrastructure that may be implemented utilizing the previously described environment systems and devices. Aspects of each of the procedures may be implemented in hardware firmware or software or a combination thereof. The procedures are shown as a set of blocks that specify operations performed by one or more devices and are not necessarily limited to the orders shown for performing the operations by the respective blocks. In portions of the following discussion reference may be made to the example environment of .

Thus the application interface may enable application to reserve extents and otherwise interact with a volume without awareness of the configuration of each individual volume storage driver and or awareness of the arrangement of the driver stack. This may be contrasted with traditional techniques in which each volume storage driver was configured with its own interfaces procedures code and protocols. To interoperate using traditional techniques applications were configured to be aware of the individual interfaces procedures code and protocols of each volume storage driver which added complexity to the applications and increased development time.

A second interface is exposed to enable communication with a plurality of volume storage drivers that manipulate data on the volume block . For example CBSI module may expose a driver interface to enable communication with the volume storage drivers . In an implementation the driver interface may be configured as an input output control IOTCL interface. The driver interface may operate in conjunction with the inter driver interfaces exposed by each of the plurality of volume storage drivers . The driver interface enables the CBSI module to send IOTCL commands through the driver stack for processing by the plurality of volume storage drivers . For example during a boot sequence CBSI module may communicate a get records command through the driver stack. Each volume storage driver may respond by providing a list of its corresponding reserved extents to CBSI module . CBSI module may then protect the extents by protecting the files that describe the extent via the file system . When CBSI module determines that a reported extent is not protected e.g. there is not a file describing the extent CBSI module may attempt to create a file via the file system to describe it. Additionally or alternatively CBSI module may communicate a failure to protect a reserved extent to the plurality of volume storage drivers so that the volume storage driver that corresponds to e.g. owns that extent may stop operating on the volume . A variety of other examples are also contemplated.

A request is received from an application to allocate reserved extents for one of the volume storage drivers block . For instance an application that is associated with an encryption driver may communicate a request to allocate reserved extents in the volume . The request may be received through the application interface by the CBSI module which processes the request. CBSI module may invoke the file system to fulfill the request to allocate the reserved extents.

Interaction occurs with the file system to allocate space for the reserved extents block . In the preceding example CBSI module interacts with the file system to create files in the volume . The files act to protect areas of the volume on behalf of the encryption driver. In other words the files allocate and protect space for the reserved extents. It is noted that a unique identifier may be associated with the reserved extents. For instance application may provide a unique identifier that enables its companion encryption driver to recognize that it owns the reserved extents allocated on its behalf. CBSI module may associate the unique identifier with data to locate the reserved extents when they are created for the encryption driver.

Allocation of reserved extents is communicated to the plurality of volume drivers block . In the continuing example CBSI module may communicate a location of reserved extents allocated to the encryption driver through the driver stack. In this example assume the driver stack is arranged to include the snapshot driver write aggregation driver and encryption driver in order from the upper level to the lower level of the stack. The reserved extents allocated to the encryption driver in this example may be associated with a unique identifier as noted above. Additionally each driver may maintain data that describes is corresponding reserved extents e.g. a reserved extent list and a list of excluded extents corresponding to the other drivers e.g. an exclusion list . Further discussion of techniques and CBSI rules employed to maintain reserved extent and exclusion lists may be found in relation to the following figures.

Accordingly CBSI module may communicate the location of the reserved extents along with the unique identifier down the driver stack through the driver interface . In an implementation the communication may be configured as an add record command according to IOTCL. A volume storage driver that does not recognize the unique identifier may pass the add record command on to volume storage drivers lower in the driver stack. When a lower level volume storage driver completes the add record command upper level volume storage drivers that passed the add record command along may add the location of the reserved extent to their exclusion lists. A volume storage driver that does recognizes the unique identifier may determine that it owns the record e.g. the reserved extents of the record correspond to driver. Accordingly the volume storage driver may add the location of the corresponding reserved extent to it reserved extents list and complete the add record command.

In the above example the volume snapshot and write aggregation drivers may not recognize the unique identifier. Accordingly both drivers may pass the communication from the CBSI module down level to the encryption driver. Encryption driver may recognize the unique identifier as its own. Thus encryption driver may add the location of the reserved extent to its reserved extent list and send notification back up the driver stack. Based on the notification volume snapshot and write aggregation drivers may understand that the encryption driver has added to its reserved extents. Accordingly these drivers may include the location of the reserved extents in their respective exclusion lists. In this manner volume storage drivers in the driver stack may be made aware of their corresponding reserved extents and may also be made aware of reserved extents corresponding to other volume storage drivers .

Extents are reserved according to CBSI rules to ensure coordination with the file system block . For example CBSI module may be invoked to reserve extents for the volume storage drivers of the driver stack. The reserved extents enable the volume storage drivers to store metadata related to operations that they perform on the volume. Each driver may have corresponding reserved extents in the volume .

Further CBSI compliant components including the volume storage drivers may be configured to adhere to CBSI rules for reserving extents from the file system . The CBSI rules may ensure that allocation of space on the volume is coordinated with the file system CBSI compliant components interoperate volume storage drivers may discover their own reserved extents and volume storage drivers may be made aware of the reserved extents of other volume storage drivers . The CBSI rules provide a common infrastructure for compliant drivers so that CBSI module may act as a central interface for each of the volume storage drivers . At least some of the CBSI rules are implemented through the CBSI module when reserving extents on behalf of the volume storage drivers .

A variety of CBSI rules are contemplated. Examples of CBSI rules to which volume storage drivers adhere include storing location of reserved extents e.g. maintaining a reserved extent list implementing countermeasures to prevent a down level operating system from mounting the volume and virtualization of a boot sector of the volume to upper level drivers. Storing location of reserved extents enables volume storage drivers to discover their reserved extents at start up when the driver stack is formed and or when a driver comes online . In an implementation this involves storing a location of and or pointers to the reserved extent list in sector zero of the volume e.g. the boot sector.

Each volume storage driver may modify the boot sector so that from the driver s standpoint the volume storage driver recognizes the boot sector and may act as if it owns the volume . The volume storage drivers may then use information included in the boot sector e.g. pointers to discover their corresponding reserved extents. It is to be noted that the boot sector is used broadly herein to represent a variety of suitable sectors of the volume that may be used to facilitate volume recognition discovery without limitation. In general the boot sector as used herein may represent a known region on the volume that stores data used to bring the volume online and to mount the file system . In an implementation the boot sector may correspond to sector zero of the volume. However it is contemplated the a variety of different boot regions or volume recognition regions of a volume may be employed with the CBSI techniques described herein without departing from the spirit and scope thereof. For example a volume recognition sequence may be stored in a sector other than sector zero such as using a offset of 32 KB or other known offset. The modification of the boot sector and or other equivalent region of the volume also acts a countermeasure that prevents a down level operating system from recognizing the volume as it own. Further a copy of the unmodified boot sector may be stored and presented to upper level volume storage drivers when a boot sector read is detected. In other words the boot sector and or other equivalent region of the volume may be virtualized to upper level components.

CBSI module may implement additional CBSI rules to pin files that are created to protect reserved extents at locations in the volume to participate in operations of the file system e.g. mount dismount and lock and to disable volume storage drivers in some circumstances. These CBSI rules ensure that the file system may recognize the volume and operate on the volume without interference from operations performed by the volume storage drivers . Additional details regarding these and other CBSI rules to ensure coordination with the file system are discussed in relation to below.

The reserved extents are coordinated with one or more other storage drivers according to the CBSI rules block . As discussed previously each volume storage driver may expose an IOTCL interface or other suitable inter driver interface to enable communication among the drivers. A variety of CBSI rules to coordinate reserved extents between the volume storage drivers may be implemented. In general the CBSI rules to coordinate with other volume storage drivers define techniques to enable a volume storage driver to discover corresponding reserved extents become aware of reserved extents of the other volume storage drivers and to avoid handle conflicts with respect to reserved extents. Further details regarding various CBSI rules to coordinate reserved extents between volume storage drivers are discussed with respect to below.

The storage driver is operated using the corresponding reserved extents block . For example operation of a volume storage driver may begin when the driver stack is formed e.g. at start up or when the volume storage driver is inserted into the driver stack at another time. As noted the volume storage driver is configured to discover its reserved extents when the driver comes online . Accordingly the volume storage driver may retrieve metadata stored in its reserved extents and use the metadata to operate on the volume .

As noted volume storage drivers may be configured to function before the file system is mounted e.g. before the file system comes online . For instance volume storage drivers may operate to transform data e.g. service input and output I O while the driver stack is being formed. The volume storage drivers may use metadata stored in their corresponding reserved extents to perform these operations. Since the file system is offline at this time volume storage drivers may be configured to locate their metadata on their own. In other words volume storage drivers may be configured to discover their corresponding reserved extents. Accordingly a CBSI compliant driver may be configured to store a location of reserved extents e.g. maintain a reserved extent list at a known offset such as in the primary table illustrated in .

As noted a volume storage driver may modify the boot sector so that from its standpoint the volume storage driver recognizes and acts as if it owns the volume storage . The unmodified boot sector may then be stored and virtualized to other components. For instance to virtualize the boot sector a volume storage driver may maintain a copy of the unmodified boot sector and or the backup boot sector in a known location. By way of example a copy of the boot sector may be stored in the primary table . A backup of the boot sector may also be stored in the shadow table . Additionally or alternatively the boot sector may be stored at a suitable known offset location other than the primary table .

When an upper level volume storage driver interacts with a lower level volume storage driver the lower level volume storage driver presents the unmodified boot sector that it has stored to the upper level volume storage driver . Virtualization of the boot sector in this manner may persist at each level in the driver stack of volume storage drivers . Accordingly the unmodified boot sector may be preserved e.g. exposed at each level in the driver stack and presented to the file system while each of the plurality of volume storage drivers may use the boot sector to store information to discover corresponding reserved extents and to retrieve metadata that has been stored in the reserved extents.

As noted above the CBSI Rules may include rules implemented by CBSI module . For instance CBSI module may pin storage locations that are allocated to volume storage drivers through the file system . In particular CBSI module may pin handles to the files that are created to protect reserved extents so that they remain in the same location e.g. physically the same location on the volume . This ensures that the files do not move during operations that may reorganize the volume such as defragmentation. The pinning is performed so that the locations used by volume storage drivers to locate their metadata without the file system being online are accurate and point to the correct data in the volume .

Further CBSI module participates in operations of the file system . Since the file system is used to protect the reserved extents CBSI module opens files and pins handles when the volume is mounted e.g. when the file system comes online . During a start up sequence CBSI module may send a get record command down the driver stack such as through the driver interface and or the inter driver interfaces . The volume storage drivers may respond by reporting their reserved extent lists to the CBSI module . CBSI module may then protect these reserved extents through the file system . When operations such as dismount or lock occur CBSI module may close the files and or release the pins to avoid interference with the file system . During these times the reserved extents may be unprotected. However CBSI module is able to re protect the files when the lock is complete and or during the next mount operation in the manner previously described.

Likewise CBSI module may implement rules to disable volume storage drivers under some circumstances. CBSI module provides a mechanism to cause a volume storage driver to stop operating on the volume on the behalf of a companion application . In an implementation CBSI module may send a delete extents IOCTL command to the plurality of volume storage drivers . The volume storage driver that corresponds to e.g. owns those extents may undo any modifications to the boot sector to restore the original version of the boot sector and stop operating on the volume . CBSI module may then interact with the file system to close the files protecting the corresponding reserved extents. In one example an encryption driver may be disabled when a request is received to cause a volume to be converted from an encrypted drive to an unencrypted drive.

Additionally the CBSI rules may also include rules to coordinate with other volume storage drivers. These rules may define techniques to enable a volume storage driver to discover corresponding reserved extents that it owns become aware of reserved extents of other volume storage driver and avoid handle conflicts with respect to reserved extents.

An example a CBSI rule may be implemented to cause that volume storage drivers to virtualize the boot sector to upper level drivers when the boot sector as read from a lower level on the stack matches a format expected by volume storage driver . In other words when the volume storage driver receives its own modification of the boot sector the volume storage driver may virtualizes the boot sector to upper levels as discussed in relation to . When the volume storage driver does not recognize the boot sector from below the volume storage driver may provide the boot sector to upper level drivers without virtualization.

For example when a volume storage driver is missing from the stack this may lead to a lower level volume storage driver providing an incorrectly virtualized boot sector to the next higher level volume storage driver of the driver stack. In this case the higher level driver does not see the format expected and returns the boot sector without virtualization up the stack. This CBSI rule ensures that the file system does not recognize the volume when the driver stack is incomplete. The file system will see a boot sector it may not understand and the volume will not mount.

According to other CBSI rules volume storage drivers may be configured to notify upper level drivers of reserved extents handle queries to discover reserved extents e.g. from CBSI module and or other volume storage drivers and avoid initiating I O for the reserved extents corresponding to lower level drivers. Notification to upper level drivers may be performed at startup when a driver comes online. To avoid conflicts notification may occur before the driver writes to its extents. The notification permits upper level driver to dynamically build their exclusion lists. Further upper level drivers may make queries to discover the reserved extents of lower level drivers. Volume storage drivers are configured to receive these queries and respond with their list of reserved extents.

Consider a write aggregation driver that may be inserted into the middle of the driver stack. A companion application may request reserved extents through the CBSI module as discussed with respect . When the write aggregation driver completes a get record command sent by CBSI module to communicate allocation of the reserved extents the write aggregation driver may send notification up the driver stack. Upper level volume storage drivers receiving the notification may then add the corresponding reserved extents to their exclusion lists. The write aggregation driver may also query lower level volume storage drivers to discover their corresponding reserved extents. In response to the querying the write aggregation driver may receive lists of reserved extents from the lower level volume storage drivers which the write aggregation driver may use to dynamically build its exclusion list defining excluded extents.

Further CBSI compliant drivers are configured to avoid operations on the reserved extents of lower level drivers e.g. the excluded extents. Thus volume storage drivers may use an exclusion list that is dynamically built through the queries and notifications as previously discussed to avoid operating on reserved extents corresponding to other drivers. The volume storage drivers may be further configured to pass through I O directed to excluded extents without transformation.

Additional CBSI rules relate to handling of requests that may be made for a driver s reserved extents. While compliant drivers may be configured to avoid sending I O to reserved extents I O to reserved extents may occur when volume storage drivers higher in the stack are non compliant with CBSI. Drivers may employ a variety of techniques to handle reads or writes to reserved extents. One technique is to return zeros for reads and allow writes of zero to succeed. Non zero writes may be dealt with separately and the techniques to do so may vary. For example one driver may transition into a disabled state to enable the write another may fail the write and yet another may discard the write. A variety of other techniques to handle non compliant I O to reserved extents are contemplated.

Accordingly CBSI compliant drivers may be configured according to a variety of CBSI rules including rules to coordinate reserving of extents with the file system and rules to coordinate operation of the plurality of volume storage drivers .

An unmodified version of a boot sector is stored in the reserved extents block . For example the reserved extents allocated through the CBSI module may correspond to an encryption driver that operates on volume to encrypt decrypt data. The encryption driver may store the unmodified boot sector for later retrieval. In particular the unmodified boot sector may be stored within the reserved extents corresponding to encryption driver. In an implementation the unmodified boot sector may be stored in the primary table or at another suitable location in the volume . Naturally another copy of the unmodified boot sector may be stored in the shadow table . Thus the original boot sector may be maintained within the reserved extents corresponding to a volume storage driver .

A location of the reserved extents is stored at a known location block . For instance the encryption driver may maintain a reserved extents list describing its corresponding reserved extents at a known location in the volume . As noted in the preceding discussion storing the location of reserved extents may enable volume storage drivers to discover their reserved extents when the file system is offline. For example the boot sector or equivalent volume recognition region of the volume may be used to store data to facilitate discovery of reserved extents by volume storage drivers . In an implementation the boot sector may be configured to include pointers to a primary table that in turn maintains a reserved extent list and pointers to the storage location of metadata may be maintained. A shadow table may also include a copy of the reserved extent list and pointers to the storage location as a backup to the primary table . Thus the location of the reserved extents list e.g. the primary table and accordingly the metadata may be discoverable by the encryption driver through the boot sector when the volume storage driver comes online .

The boot sector is modified to prevent volume mounting by a down level operating system block . For instance encryption driver may overwrite the boot sector illustrated in with its own data. Thus encryption driver may create its own version of the boot sector . As noted previously the boot sector may be sector zero and or another suitable sector of the volume configured to facilitate volume recognition. This modification of the boot sector may include adding pointers to locate the primary table and through the primary table the storage location having the metadata . The boot sector may also point to the shadow table . Further a backup boot sector may also be maintained at a fixed offset from the boot sector in case the boot sector is corrupted. The modified boot sector may be unrecognizable to the file system . Accordingly this may prevent a down level operating system from mistakenly recognizing the volume as it own and attempting to mount the volume . Further the modification may also prevent volume mount when the driver stack is incomplete such as when the volume storage driver that made the modification is corrupted missing or otherwise unavailable.

Metadata is stored in the reserved extents block . For instance the encryption driver in the above example may store metadata that may be employed to encrypt and decrypt data on the volume in its corresponding reserved extents. For instance the encryption driver may store metadata in a storage location as illustrated in . The encryption driver may detect its reserved extents retrieve metadata and operate on the volume at start up or when the encryption driver otherwise comes online .

A boot sector read by an upper level component is detected block . For example a write aggregation driver residing logically above the encryption driver in the driver stack may communicate a boot sector read down to the encryption driver. Responsive to the boot sector read the unmodified boot sector is virtualized to the upper level component block . For instance when the encryption driver receives the boot sector read from the write aggregation driver the encryption driver provides the unmodified boot sector that is located in the primary table to the write aggregation driver. This may include redirection of the read to the primary table based on the pointers included in the modified version of the boot sector .

Each volume storage driver may virtualizes the boot sector and or other equivalent sector to the components above it e.g. higher up the stack. By doing so each component e.g. volume storage driver CBSI module file system recognizes the volume as being its own and may operate on the volume accordingly. A computing device that does not include the driver stack to correctly virtualize the boot sector to the file system may be unable recognize the volume . The virtualization allows each volume storage driver to locate its metadata using its own implementation of the boot sector . Moreover the volume storage drivers may discover manage and coordinate reserved extents according to the variety of CBSI Rules and retrieve their metadata to operate on the volume . Accordingly volume storage drivers may use the common block storage infrastructure techniques described herein to discover manage and coordinate reserved extents before the file system comes online.

Although the common block storage infrastructure techniques have been described in language specific to structural features and or methodological acts it is to be understood that the invention defined in the appended claims is not necessarily limited to the specific features or acts described. Rather the specific features and acts are disclosed as example forms of implementing the claimed invention.

