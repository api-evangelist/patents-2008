---

title: Software upgrade using single source channel
abstract: An automatic data downloader (ADD) causes a source device communicating with the ADD to download available software for destination devices using a single predetermined update channel. The software is received by the ADD from the source device and stored. Upon connecting to destination device that is compatible with downloaded software, the ADD sends the software to the destination device.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08677344&OS=08677344&RS=08677344
owner: Sony Electronics, Inc.
number: 08677344
owner_city: Park Ridge
owner_country: US
publication_date: 20081010
---
Typically obtaining software upgrades or application downloads for a non personal computer device such as an electronic book game console personal communicator such as the Mylo camcorder camera wireless telephone etc. requires accessing web sites using a computer which means surfing through the different web pages and looking for the correct upgrade or application for a device. This is inconvenient and limiting because typically only the personal computer can be used. The present invention recognizes that it would be advantageous to provide simpler more intuitive and more convenient sources for upgrades to such devices.

An automatic data downloader ADD includes a processor and a computer readable medium bearing instructions to cause the processor to cause a source device communicating with the ADD to download available software for at least one destination device using a single predetermined update channel. The processor receives the software from the source device and stores the software in a computer readable medium that is internal to the ADD. Then the processor sends software stored in the computer readable medium to compatible destination devices that communicate with the ADD.

The ADD can be disconnected from the source device prior to sending software to a destination device. In some embodiments the processor checks to determine whether and what downloaded software is compatible with destination devices with which the ADD communicates with the ADD sending compatible software to correct destination devices. If desired the ADD can send to the source device destination device identification information.

The source device may be separate from the ADD. In any case in example embodiments the ADD causes the source device to download software for all of potential destination devices made by a single manufacturer. The channel can be a TV channel in which case the user is not required to input an address to obtain the updates. Or the source device is a game console or a personal communicator. The destination device may not be networked and thus may communicate only with the ADD.

In another aspect a method includes establishing communication between an automatic data downloader ADD and a source device. The source device is a networked device communicating with a download channel. The method includes causing the source device to access software for a predetermined set of destination devices over the download channel and then sending the software to the ADD. The software is stored on the ADD and the ADD used to send at least some of the software to at least one non networked destination device communicating with the ADD.

In another aspect an automatic data downloader ADD includes a processor and a tangible computer readable medium communicating with the processor and storing drivers executable by the processor. The drivers includes control and adaptation information for communicating with destination devices envisioned to be upgraded and for devices envisioned for use as sources of software to be sent to the destination devices.

The details of the present invention both as to its structure and operation can best be understood in reference to the accompanying drawings in which like reference numerals refer to like parts and in which 

Referring initially to an automatic data downloader ADD is shown that communicates with a source device for receiving software updates and or applications from a single source download channel . The ADD also communicates with one or more destination devices for sending relevant downloads from the channel thereto. The ADD may be contained in a standalone housing as shown that is separate from the source device and destination device or it may be included in one of the other devices shown.

In the embodiment shown the TV includes a TV display such as a standard definition or high definition flat panel display or cathode ray tube. The display may be controlled by a TV processor communicating with a TV tuner . The processor may access a tangible computer readable medium that may be implemented by solid state disk storage etc. Present logic and data may be stored on the medium for execution thereof by the TV processor .

In the example non limiting embodiment shown the TV processor may communicate with a set back box SBB that can be e.g. mounted on the rear of the TV. The SBB may include a SBB processor a SBB computer readable medium and an Internet interface such as e.g. a modem for communicating with the Internet . In this way the TV may receive Internet signals for display thereof. The SBB may be incorporated within the TV if desired. As well the ADD may be implemented by the SBB .

In the example embodiment shown however the ADD is a standalone device. The ADD may include an ADD processor accessing a computer readable medium that may store software implemented drivers including control and adaptation for the destination devices envisioned to be upgraded as well as for the devices envisioned for use as sources. Such information essentially is communication compatibility information enabling the ADD to communicate with sources and destination devices and may be any appropriate communication compatibility information known in the art.

Thus a driver may be provided for each source device and each destination device made by e.g. a single manufacturer or by multiple manufacturers but in any case each driver is configured to convey data from a source device to a destination device in accordance with principles below. discussed further below provides additional details on an example software architecture.

One such destination device may be an electronic book with display processor driving the display and computer readable medium for e.g. storing electronic book files logic etc. Like the media described above the E book medium may be implemented by solid state memory or disk based memory or other appropriate tangible computer memory.

Other destination device may be used e.g. networked or non networked devices such as a non networked personal communicator a non networked game console a camera a camcorder etc.

Using the ADD and as more fully described below consumers can easily and more flexibly download software upgrades and applications for their products particularly though not exclusively non networked consumer electronic devices by means of a simpler way other than the traditional way of downloading through a computer via the Internet. With the below described features and using the example architectures described above consumers can upgrade their non networked devices by simply tuning in to any general manufacturer s collection channel which can be on the TV or on a PlayStation or on a central website on the Internet and select the desired software upgrade or application for their Sony devices. In this way consumers are relieved of the chore of accessing different websites for the same purpose for different devices because of the availability of the single source channel and can easily perform the same task via a single hardware interface that is through the ADD . Thus the consumer no longer needs to turn on the computer or remember any web addresses because updates and applications can be easily and graphically accessed from a source such as the TV through the single update channel. Advantageously in the example embodiment the source and destination devices only have to be made compatible to the ADD and as set forth further below they are only responsible for pushing data onto the ADD for the source device or receiving data from the ADD for the destination device . Control mechanisms in the ADD can also be used that ensure that incompatible data will not flow from the source device into the wrong destination device. For example a software upgrade application for a personal communicator is screened from being pushed onto another destination device such as an E Book.

In contrast shows that a GUI can be presented on the display of the source device that can present a list of potential destination devices that are candidates for updates. The list may include various model numbers for a particular destination device as shown. The user can select which destination device s are to receive updates to cause the source device without further user input such as e.g. a website address to access the single channel and obtain updates and applications for the selected destination device s . Or the user may enter using e.g. the keypad of a remote control the names of destinations devices and model numbers for which updates applications are sought.

Moving to block the source device accesses the single predetermined update channel to obtain updates and software for all selected destination devices without requiring the user to input a website address as mentioned previously although in some embodiments the user may be prompted to enter a website address. Thus for instance a source device that is a TV may tune to an update TV channel or in the case of an Internet enabled TV may access a predetermined website that is programmed into the source device as the update channel.

Relevant updates applications are downloaded by the source device at block and stored to the ADD . In one implementation the ADD storage may be a hard disk drive that stores the updates and that is compatible by means of the drivers with both the source device and destination device s .

The ADD may then be disconnected from the source device at block so that normal use of the source device may resume. The ADD is then connected at block to the relevant destination devices for transferring of updates applications to the destination device s at block . The connection to the destination devices may be without limitation a universal serial bus USB connection or a wireless Bluetooth connection or other appropriate connection.

Or the ADD may be connected to destination device s and can check to determine whether and what downloaded updates applications are compatible with the connected destination device s . The ADD sends compatible updates applications to the correct destination device s which receive updates and automatically update their systems accordingly incorporate applications into their systems accordingly. Failure of the ADD to detect compatible devices can result in an error signal being presented on the source and or destination device and or the ADD itself once appropriate communication is established. The updates applications may then be retained on the ADD or removed.

As shown the example ADD can have a common Application Programming Interface API for all devices labeled with example names such as Ebook Camera etc. in that would like to connect to the ADD. In the example API a device states how it would like the files to be transferred what files to be transferred error handling and other control measures. Accordingly instead of having the ADD adapt to all connecting devices which could raise an unduly large number of possibilities the connecting devices adapt to this common API. This increases the flexibility of the ADD as generic devices can also be made compatible to the ADD which includes code for processing transfers and error checking.

At the same time through the API some security verification measures can also be implemented such as a security key unique to a particular manufacturer etc. This is to prevent unauthorized access to a destination device or even the entire network of connected devices which otherwise could be disastrous in the event of a malicious program.

In other words owing to the common API the ADD and the attached devices need not know the proprietary code of any individual device in order to achieve compatibility for data transfer purposes.

While the particular SOFTWARE UPGRADE USING SINGLE SOURCE CHANNEL is herein shown and described in detail it is to be understood that the subject matter which is encompassed by the present invention is limited only by the claims.

