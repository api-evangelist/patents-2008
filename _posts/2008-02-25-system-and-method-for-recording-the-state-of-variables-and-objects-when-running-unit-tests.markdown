---

title: System and method for recording the state of variables and objects when running unit tests
abstract: A system and method for recording a state of an object in a computer program being tested. The system and method include: identifying an object having a plurality of fields, each field having a value; executing the computer program including a unit test; recording the values of each field of the identified object; generating assertions for the unit test from the recorded values of each field of the identified object; and inserting the generated assertions into the unit test. The computer program including the unit test having the generated assertions may be re-executed to verify the assertions. Furthermore, the unit test having the generated assertions may be modified and the computer program including the modified unit test having the generated assertions re-executed to generate new assertions.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08127275&OS=08127275&RS=08127275
owner: Parasoft Corporation
number: 08127275
owner_city: Monrovia
owner_country: US
publication_date: 20080225
---
This Patent Application claims the benefit of the filing date of U.S. Provisional Patent Application Ser. No. 60 912 586 filed on Apr. 18 2007 and entitled System And Method For Recording The State Of Variables And Objects When Running Unit Tests the entire content of which is hereby expressly incorporated by reference.

The present invention relates generally to testing computer software and more particularly to a system and method for recording the state of variables and objects when running unit tests.

One of the important tasks while creating unit tests whether manually or automatically is to write assertions about the important variables and objects that are part of the test. When a user writes the unit tests manually it is very tedious to write assertions for the many fields of complex objects. Further even if the user writes the assertions once if later there is a change in behavior the user has to revisit the assertions and change them which can also be time consuming.

Therefore there is a need for a new system and method to provide flexibility for the users to automatically generate assertions.

In some embodiments the present invention is a system and method for recording a state of an object in a computer program being tested. The system and method include identifying an object having a plurality of fields each field having a value executing the computer program including a unit test recording the values of each field of the identified object generating assertions for the unit test from the recorded values of each field of the identified object and inserting the generated assertions into the unit test. The computer program including the unit test having the generated assertions may be re executed to verify the assertions. Furthermore the unit test having the generated assertions may be modified and the computer program including the modified unit test having the generated assertions re executed to generate new assertions. The generated new assertions are then inserted into the modified unit test and the computer program including the modified unit test having the generated new assertions is re executed to verify the new assertions.

In some embodiments the present invention is a system and method for recording the state of variables and objects when running unit tests automatically generating assertions and inserting the generated assertion back into the unit tests. The present invention provides the user with the ability to specify the objects or variables for which the assertions to be automatically generated instead of manually writing out the assertions. For example the user may introduce a call that states record all the various fields of a given object . The method and system of the present invention then process the given object and generate assertions that capture the current state of the object as evidenced by the values of the various fields of the object. One skilled in the art would readily recognize that the process of the present invention may be executed by any computer system including a stand alone computer a system with a client server architecture an Internet based system or the like. The computer system would include a processor and memory for carrying out instructions to implement the process a display monitor to display information to the user and an input device to take inputs from the user.

In some embodiments when the unit tests are being generated automatically the invention provides the user with some control for example with a graphical user interface GUI in reviewing the generated unit tests and modifying them before generating the assertions. The user is also able to specify what object s he she would like to generate the assertions for. shows an exemplary user interface for selecting the option to generate assertions while running unit tests.

This provides the user with the flexibility to regenerate the assertions at a later time if the code changes. Furthermore under some circumstances it is useful to run the unit tests under different conditions. In such a case the invention provides the user with the ability to generate assertions separately for each of these conditions. For example the user may want to use different set of stubs or may want to run the tests with or without some stubs. In some embodiments the user can do this by running the unit tests under different conditions with the option to generate the assertions turned on. The invention is then used to generate assertions under each of these conditions. Each set of assertions can be enclosed within conditionals macros so that while checking assertions the correct set of assertions gets used.

In some embodiments the above process may be repeated on a frequent basis for example on a nightly batch basis. This way any changes in the code will generate new assertions if applicable and the new assertions would replace the old assertions in the respective unit tests.

In block the record method passes a pointer to the object for which the various fields to be recorded. In block the values of the fields of the object are then obtained and in block the obtained values are recorded.

The same record state API may also be used while automatically generating unit tests. This provides the user with additional control over the types of assertions being generated since now the user can choose to break the unit test generation into two phases where in the first phase only the recording calls are generated. The user can then run the tests with the option to generate the assertions turned on. This second run generates the assertions in the user s code software under test and the test is ready to be used regularly to verify that the behavior of the software remains unchanged.

In some embodiments when the unit tests are generated the method and system of the present invention automatically generate the unit tests with a configuration that generates the unit tests with calls to the record state API. The tests generated may be in Nunit Junit or any other format that the user has chosen to use. The user then runs test case execution with an option that makes execution record the values of object fields based on the record state API that are previously obtained. The user can change the unit tests including the record state API calls if necessary before performing this task. The unit tests including the assertions are then inserted back in the source code. The user may then run test case execution that simply checks the assertions. The user is free to remove assertions from the unit tests if necessary and re run the test either to re generate new assertions or run the test without the removed assertions. In one embodiment a menu option or a GUI is provided to the user to remove the assertions.

In some embodiments when the unit tests are manually written by the user the user uses the record state API in the manually written unit tests to record the object fields and generate the assertions. The assertions then can be inserted into the respective unit tests manually or automatically.

In one embodiment the record state API are C calls or .Net calls. In the example of a test which has record state API calls in it is shown. In one embodiment the calls are implemented as vr.ObjectValue vr.Int32Value etc. In this implementation for fields that represent an complex object the values of the properties e.g. fields of the given object are obtained via reflection. In some embodiment a monitoring program may be used to obtain the values for the various fields of the objects. A monitoring program is described in a co pending and co owned U.S. patent application Ser. No. 11 396 168 entitled System And Method For Test Generation the entire contents of which is herein incorporated fully by reference.

For example in this embodiment the invention monitors the execution of the computer program under test to obtain monitored information it then records the monitored information and analyzes the recorded monitored information to obtain the values for the various fields of the objects. The monitored information includes data uniquely identifying a thread in which a method is invoked instance object on which the method was invoked method arguments place of the method invocation amongst other method invocations and return value of the methods. The information may also include data about the objects and processes the method would interact with and environmental variables information objects calling sequence. The objects calling sequence may be implied from temporal recording of sequence of calls from the execution of computer program. Monitoring the execution of the computer program may comprise profiling interfaces available for a given program type or instrumenting the source code or the binary code of the computer program. Recording the identified objects may comprise utilizing serialization and deserialization methods provided by an API of the computer program or a user defined API.

In some embodiments the values of the various fields of the objects are obtained via a reflection process. The well known reflection process is the process by which a computer program can observe and modify its own structure and behavior. Reflection can be used for self optimization or self modification of a program. A reflective sub component of a program will monitor the execution of a program and will optimize or modify itself according to the function the program is solving.

For primitive types the values of the properties e.g. fields of the given object are obtained directly from the variable in the call as seen for var2 in .

In one embodiment the invention uses a Boolean flag to determine whether to record the values or simply return without doing any work. This allows the invention to use the same record state API for executing the unit test without enabling the assertion generation feature.

When a call to record the state of an object is encountered block in some embodiments the invention uses reflection technology as explained above to iterate through the various fields of the object. The invention then adds stores name value pairs to an XML file that is used for recording the state of the objects as shown in block . In block the invention then processes the XML file for this test by a source generator code to convert the data in the XML file into assertions. In one embodiment this is accomplished by converting the data from XML format to C code. It is noted that the invention is not restricted to write the data into an XML file rather any format can be used. Further it is also be possible to pass the data to a source generator component without writing it to a file that is the data can be passed in memory.

A call may be made to record the state of some primitive type variables block . This call includes the value and the name of the variable. In this case the invention adds stores name value pair for the primitive variable to the XML file that is used for recording the values of the variables for this test in block and proceeds to block to convert the data as explained above.

The Calculated Source Coverage provides information about which lines in the source code were executed while running the tests. The Calculated IL Coverage tab is similar to the above option however it refers to the instructions in the Intermediate Language IL instead of the lines in the source code. The Report Exceptions even when marked as expected option provides the users with the capability of executing tests with an option to causes an exception to be affected by the test. The exception may be the expected behavior of the software or a portion thereof under test. Therefore when the test cases are executed these exceptions are typically not reported to the user. However sometimes the user may like to see these exceptions as well. The user can do so by selecting the Report Exceptions even when marked as expected option.

The other two options Record state for user written tests and Generate custom attribute on exceptions provide the user with more control over the recording process. The first option allows the recording and updating of assertions to work on manually written tests where as the second option provides the user with an option to turn on off generating information on exceptions that are encountered during testing.

In some embodiments the following APIs or a combination thereof are supported for recording the state of the fields variables and or objects 

ValueRecorder is the class that supports the API for recording the states of the objects. It has the following methods that can be used in unit tests in a manner similar to how they are used in the above example. The following list is exemplary and not exhaustive other methods not listed may also be used in the unit tests.

When the same unit test is run many times using different data for example by using data from each row of an excel spreadsheet or a data base table it is not possible to embed the values of the fields of the objects within the assertions in the source code. As a result in this situation the implementation of the API used for recording stores the values in an external file. For each row in the input data source there is a corresponding row of values in the external file. When the test is executed to check the assertions the values from this file are read and the values are verified. Thus for example let us assume that the input data source has 3 rows with the values 

Further let us assume that at the end of running the unit test the value of a variable var1 was 103 for Row 1 208 for Row 2 and 596 for Row 3. Then in one embodiment these values are stored in the external file. When the test is run for checking assertions the invention fetches the values from the external file and verifies that the value of var1 is 103 for Row 1 208 for Row 2 and so on.

It will be recognized by those skilled in the art that various modifications may be made to the illustrated and other embodiments of the invention described above without departing from the broad inventive scope thereof. It will be understood therefore that the invention is not limited to the particular embodiments or arrangements disclosed but is rather intended to cover any changes adaptations or modifications which are within the scope and spirit of the invention as defined by the appended claims.

