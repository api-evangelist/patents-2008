---

title: Apparatus and system for defining a metadata schema to facilitate passing data between an extensible markup language document and a hierarchical database
abstract: The apparatus and system are provided for defining a metadata schema to facilitate passing data between an XML document and a hierarchical database. The invention includes a database accessor, a document accessor, and an association module. The database accessor accesses a database schema indicative of database field names and a hierarchical structure for a hierarchical database. The document accessor accesses a document schema that defines the hierarchical structure, content data syntax, and semantics of valid, well-formed, XML documents that can be passed into and out of the hierarchical database. The document schema also includes at least one XML element name that maps to a corresponding database field name in the database schema. The association module associates the database schema and the document schema to provide a metadata schema that enables data to be passed between an XML document and the hierarchical database.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07912874&OS=07912874&RS=07912874
owner: International Business Machines Corporation
number: 07912874
owner_city: Armonk
owner_country: US
publication_date: 20080506
---
This application is a continuation of and claims priority to U.S. patent application Ser. No. 10 758 890 entitled Apparatus System and Method for Defining a Metadata Schema to Facilitate Passing Data Between an Extensible Markup Language Document and a Hierarchical Database and filed on Jan. 16 2004 for Kyle Jeffrey Charlet et al. which is incorporated herein by reference.

The invention relates to database systems. Specifically the invention relates to apparatus and systems for defining a metadata schema to facilitate passing data between an eXtensible Markup Language XML document and a hierarchical database.

Today business applications increasingly rely on XML documents to exchange data. Generally modern software applications communicate with each other over the Internet using XML documents as a common data interchange language for Business to Business B2B and Business to Consumer B2C communications. Technologies such as webservers servlets web applications web services and the like generally rely on some fashion of data organized according to the eXtensible Markup Language Specification.

Typically these same software applications then communicate the data in the XML document to database servers for storage in a database. Generally before an XML document is stored in a database the XML document is analyzed to ensure that the XML document is a valid XML document. An XML schema is used to validate an XML document. As used herein references to an XML document mean that the XML document is a valid XML document according to a predefined XML schema. Because an XML document provides such flexibility in the organization and types of XML elements XML documents are validated to ensure that they are organized as expected. An invalid XML document may lead to unpredictable or erroneous results in software modules using the invalid XML document.

An XML schema defines the structure organization and data types that are acceptable in all corresponding XML documents. The XML schema defines a set of XML elements XML element attributes and organization among the XML elements that is desired. The XML schema serves as a vocabulary for the XML elements. Consequently the XML schema defines a superset of valid XML documents. The valid XML documents include one or more of the XML elements XML attributes and structure among the XML elements as defined in the XML schema.

Typically prior to storing the XML document the XML document is validated. Generally two types of databases may store the data in the XML document hierarchical or relational. Each type of database has different benefits and limitations which will be discussed in more detail below.

Generally the databases store the data of an XML document in two different formats. In one aspect the raw data contained in the elements of the XML document are removed from the XML document and stored in the database. Data stored in this manner is referred to herein as decomposed data because the formatting of the XML document is removed to store only the raw data. In another aspect the raw data including the formatting that comprises the XML document are stored in the database. When the XML document is stored in the database in this manner this is referred to herein as storing the XML document intact because the formatting of the XML document or an XML sub tree is preserved within the database.

To control costs it is desirable that modern technologies such as XML documents be capable of readily interfacing with existing computer and information technology without significantly modifying the existing computer and information technology. For example large corporations governments and other entities continue to use legacy applications which are software programs designed written and maintained for large mission critical computers such as mainframes. These entities have invested large amounts of work and money into developing and maintaining the legacy applications. In addition these applications have been tested and refined to operate very efficiently and with minimal errors. Legacy applications continue to manage a high percentage of the everyday transactions and data for these businesses.

Similarly many of these legacy applications continue to store and retrieve data using hierarchical databases such as IBM s Information Management System IMS instead of common relational databases such as the Oracle database available from the Oracle corporation. To facilitate storing and retrieving data in XML documents referred to herein as XML data functionality for passing XML data between XML documents and relational databases has been developed. Generally this functionality is integrated into the database servers for relational databases. Consequently users versions of the database servers must be updated to enable support for passing of data between an XML document and a relational database.

Unfortunately no tools exist for passing XML documents and or XML data between an XML document and a hierarchical DB one example of which is IMS. Certain tools exist for passing XML data between an XML document and popular relational databases. These tools rely on schema information that relates the XML document to the relational database.

The schema information is stored in a proprietary format designed specifically to allow for passing of XML data between an XML document and the relational database. Often a proprietary format is used because relational databases can vary considerably in how relationships are represented. Proprietary schema information requires that developers and users passing XML data to and from relational databases learn a new syntax and semantics. This learning curve may be steep. Often the proprietary schema information is stored in binary format requiring special editors to create and modify the proprietary schema information.

In addition the proprietary schema information generally must be revised or constantly modified in order to ensure that the proprietary schema information handles passing all the various kinds of desired valid XML documents. The XML language is a very flexible language which allows definition of unique XML elements to meet a particular need. The proprietary schema information must be specifically updated to handle cases of XML documents that include the unique XML elements. Consequently the proprietary schema information is either constantly updated or once defined severely limits the set of XML documents that may be passed into and out of the relational database.

As mentioned even proprietary schema information is not currently available that will enable passing XML data between XML documents and a hierarchical database. In addition hierarchical databases such as IMS may include user defined database views. These views may control not only what part of the database a user or user application may access but also security and authentication features for protecting the data. Examples of such views and user defined access features include the Program Status Block PSB and Program Control Block PCB provided by IMS. In order to properly store and retrieve XML data for the hierarchical database the user defined database view s needs to be identified. These views may be changed as needed by a database administrator. Proprietary schema information does not currently account for user defined database views for either hierarchical or relational databases.

Accordingly a need exists for an apparatus and system for defining a metadata schema to facilitate passing data between an XML document and a hierarchical database. The apparatus and system should define a metadata schema that complies with an accepted text based industry standard such that the learning curve is minimized. In addition the apparatus and system should define a metadata schema that serves a dual purpose one to define a set of valid well formed XML documents that may be passed into and out of a hierarchical database and two to facilitate mapping data from a source XML document into and out of a particular hierarchical database. Further the apparatus and system should define a metadata schema that accommodates user defined database views of the hierarchical database and is readily modifiable to adjust to changes in the user defined database views.

The present invention has been developed in response to the present state of the art and in particular in response to the problems and needs in the art that have not yet been met for passing data between an XML document and a hierarchical database. Accordingly the present invention has been developed to provide an apparatus and system for passing data between an XML document and a hierarchical database that overcomes many or all of the above discussed shortcomings in the art.

An apparatus according to the present invention includes a database accessor a document accessor and an association module. The database accessor accesses a database schema indicative of database field names and a hierarchical structure for a hierarchical database. The document accessor accesses a document schema that defines the hierarchical structure content data syntax and semantics of valid well formed XML documents that can be passed into and out of the hierarchical database. The document schema also includes an XML element name that maps to a database field name in the database schema. The association module associates the database schema and the document schema to provide a metadata schema that enables data to be passed between an XML document and the hierarchical database.

In certain embodiments the document schema includes at least one directive metadata element. The directive metadata element may cause the default behavior of passing XML data between an XML document and a hierarchical database to be modified as needed.

A method of the present invention is also presented for defining a metadata schema to facilitate passing data between an XML document and a hierarchical database. In one embodiment the method includes accessing a database schema indicative of database field names and a hierarchical structure for a hierarchical database. Next a document schema is accessed that defines the hierarchical structure content data syntax and semantics of valid well formed XML documents that can be passed into and out of the hierarchical database. Finally the database schema and document schema are associated to provide a metadata schema that enables data to be passed between an XML document and the hierarchical database.

The features and advantages of the present invention will become more fully apparent from the following description and appended claims or may be learned by the practice of the invention as set forth hereinafter.

It will be readily understood that the components of the present invention as generally described and illustrated in the figures herein may be arranged and designed in a wide variety of different configurations. Thus the following more detailed description of the embodiments of the apparatus and system of the present invention as presented in is not intended to limit the scope of the invention as claimed but is merely representative of selected embodiments of the invention.

Many of the functional units described in this specification have been labeled as modules in order to more particularly emphasize their implementation independence. For example a module may be implemented as a hardware circuit comprising custom VLSI circuits or gate arrays off the shelf semiconductors such as logic chips transistors or other discrete components. A module may also be implemented in programmable hardware devices such as field programmable gate arrays programmable array logic programmable logic devices or the like.

Modules may also be implemented in software for execution by various types of processors. An identified module of executable code may for instance comprise one or more physical or logical blocks of computer instructions which may for instance be organized as an object procedure function or other construct. Nevertheless the executables of an identified module need not be physically located together but may comprise disparate instructions stored in different locations which when joined logically together comprise the module and achieve the stated purpose for the module.

Indeed a module of executable code could be a single instruction or many instructions and may even be distributed over several different code segments among different programs and across several memory devices. Similarly operational data may be identified and illustrated herein within modules and may be embodied in any suitable form and organized within any suitable type of data structure. The operational data may be collected as a single data set or may be distributed over different locations including over different storage devices.

Reference throughout this specification to a select embodiment one embodiment or an embodiment means that a particular feature structure or characteristic described in connection with the embodiment is included in at least one embodiment of the present invention. Thus appearances of the phrases a select embodiment in one embodiment or in an embodiment in various places throughout this specification are not necessarily all referring to the same embodiment.

Furthermore the described features structures or characteristics may be combined in any suitable manner in one or more embodiments. In the following description numerous specific details are provided such as examples of programming software modules user selections user interfaces network transactions database queries database structures hardware modules hardware circuits hardware chips etc. to provide a thorough understanding of embodiments of the invention. One skilled in the relevant art will recognize however that the invention can be practiced without one or more of the specific details or with other methods components materials etc. In other instances well known structures materials or operations are not shown or described in detail to avoid obscuring aspects of the invention.

The illustrated embodiments of the invention will be best understood by reference to the drawings wherein like parts are designated by like numerals throughout. The following description is intended only by way of example and simply illustrates certain selected embodiments of devices systems and processes that are consistent with the invention as claimed herein.

Each diagram includes database nodes represented by the letters A F. Each database node associates related data. Of course each database may include different terminology for the database node fields within database nodes and relationships between the nodes. For example in a hierarchical database such as IMS a database node is referred to as a segment that includes one or more database fields storing raw data. In a relational database the database node may correspond to a database table that includes one or more database columns. The database fields of a hierarchical database and columns of a relational database correspond to XML sub elements within an XML element of an XML document.

The XML document includes a root XML element that may include one or more XML sub elements which sub elements may each include one or more sub elements. Those of skill in the art will recognize based on the context that references to an XML element herein refers to either an XML root element or XML sub element as appropriate. Typically the structure of XML sub elements nodes B F in relation to the root XML element is represented by nesting XML sub elements within begin and end tags of appropriate parent elements. The XML root element and XML sub elements are organized in a parent child relationship. Each parent node may have many child nodes as children. But a child node may have only one parent node. This relationship constitutes a hierarchical relationship.

Advantageously the hierarchical database is also structured according to the same parent child relationship as required in an XML document. The hierarchical database includes a root node and one or more child nodes related to the root node. Each child node may also have one or more child nodes. Certain hierarchical databases have been managing data according to the parent child relationships for many years. Consequently many complex and expensive software applications have been built around the speed reliability stability and features such as indexing and data preservation provided by these hierarchical databases.

In contrast the relational database diagram illustrates database nodes A F organized according to relationships that are not limited to strictly parent child relationships. One reason relational databases have been widely used is that the relational database can represent many to many relationships between database nodes. By way of example suppose database node D represents parts and database node E represents invoices. Typically an invoice can include many parts and a single part can appear on many invoices.

Many to many relationships allow for the amount of data duplication in the database to be minimized to a higher extent than may be possible in a hierarchical database. However as a consequence queries for the data in many to many relationships may be slower more complicated and involve certain complex join queries.

The structure among database nodes of the hierarchical database diagram allows for faster retrieval and storage of data than in the relational database diagram . In addition the database nodes of the hierarchical database diagram follow the same parent child relationship constraints. Consequently an XML document which is organized in a hierarchical fashion with its XML root element and XML sub elements is readily mapped to corresponding database nodes of the hierarchical database.

Note however that the hierarchical structure between the XML diagram and the hierarchical database diagram does not match. For example XML element B descends from root XML element A in the XML diagram and database node B descends from database node F in the hierarchical database diagram . The present invention allows for data to be mapped between XML element B and the database node B even though the hierarchical structures are not exactly the same.

Referring now to a logical block diagram illustrates major components in one embodiment of an apparatus for passing data between an XML document and a hierarchical database . The apparatus includes a valid XML document a hierarchical database a mapping module and a metadata schema .

The XML document is a valid XML document. As mentioned above this means that there exists an XML schema or Document Type Definitions DTD file that defines all the XML elements that may appear on the XML document how those XML elements may be related in a parent child hierarchy data types for data in the XML elements and an encoding format for the data. Preferably the XML document is validated by another tool prior to being provided for storage within the hierarchical database .

The hierarchical database may be any standard hierarchical database. Preferably the hierarchical database is IMS. The hierarchical database supports basic interface commands such as get insert replace delete and all for manipulating data of a single database node or database field. Preferably the hierarchical database is not modified in any way to accommodate use of the hierarchical database with the present invention. In this manner data from XML documents stored in the hierarchical database in decomposed format may be used by legacy applications and other users of the hierarchical database without concern that the data was provided originally in an XML document .

The mapping module maps data between the XML document and the hierarchical database . In one embodiment the mapping module is external to the hierarchical database and passes the data between the XML document and the hierarchical database using the metadata schema and external database commands. To store or retrieve data in decomposed and mixed decomposed and intact formats the mapping module relies on the metadata schema . If the whole XML document is to be saved in intact format the mapping module may not need the metadata schema .

The mapping module and metadata schema will be described in more detail below. The metadata schema includes the hierarchical structure of the XML document the hierarchical structure of the hierarchical database and one or more database field names that map to corresponding XML element names in the XML document . The mapping module maps between XML elements in the XML document and database nodes in the hierarchical database by matching the XML element name to the database field name. Once the mapping has been made the mapping module performs any necessary type and or encoding format conversions and stores the data in the appropriate target. If an XML document is being stored the target is a database field in the database at the appropriate database node. If an XML document is being retrieved the target is a generated XML element stored in the XML document .

In one embodiment of a metadata schema is illustrated. As mentioned the metadata schema allows data in one hierarchical structure to be mapped to another hierarchical structure. In one embodiment the metadata schema comprises a document schema associated with the XML document and a database schema associated with the hierarchical database . The schemas comprise metadata relating respectively to XML elements database fields data types data encoding as well as the hierarchical structure of the XML document and hierarchical database .

Those of skill in the art will recognize that the metadata in the schemas may be organized and formatted according to any format including proprietary formats. For example the document schema may comprise a listing of XML elements and the data types for the XML elements in a name value pair arrangement. The structure of XML elements may be represented by lists of element names. The lists may include sub lists of XML element names that represent the parent child relationships.

In a certain embodiment the database schema associated with the hierarchical database is a schema that may be used by a variety of software applications accessing the hierarchical database . For example suppose the hierarchical database comprises an IMS database. Typically IMS itself includes no metadata for the database nodes and database fields. Instead in one embodiment metadata for an IMS database may be stored and maintained by other components such as Java classes. The Java classes may define the database nodes database fields and hierarchical structure between database nodes in the IMS database. These Java classes may be defined within a file and or instantiated into Java objects that are referenced to provide the features of the database schema during run time.

In one embodiment the database schema includes database field names and associated database field types for database fields in the database . In addition the document schema associated with the XML document preferably includes XML element names that match the database field names in the database schema associated with the database . Typically the document schema includes data type identifiers associated with each XML element name . Preferably there is a one to one correspondence between database field names and XML element names .

The metadata schema also includes a first representation of the hierarchical structure of the hierarchical database and a second representation of the hierarchical structure of valid XML documents that may be stored and retrieved from the hierarchical database . The first representation and second representation may be any data structure capable of capturing a parent child hierarchical relationship.

In one embodiment the first representation comprises a list sub list structure within a class defined in a set of Java classes that make up the database schema . The second representation may reside in the document schema associated with the XML document . The second representation may comprise a nested structure of markup language tags as used in an XML schema XSD file.

Preferably the document schema associated with the XML document is an XSD file an XML schema generated based on the hierarchical database . Although the XML schema is preferably generated from the hierarchical database the first representation and second representation may not necessarily match. However the hierarchical structure of the hierarchical database matches the hierarchical structure of the first representation and the hierarchical structure of the XML document matches the hierarchical structure of the second representation .

Implementing the document schema as an XML schema provides distinct advantages. First the XML schema definition language is an industry standard. Consequently the format syntax and semantics are well known and understood by potential users and developers. Second an XML schema is human readable as well as machine readable. Consequently an XML schema may be readily revised and edited as necessary. Third using the XML schema allows a single structure to serve both for passing of data between and XML document and a hierarchical database as well as the variety of uses being made of XML schemas . A separate metadata schema related to the XML document need not be defined.

The apparatus may comprise a database accessor a document accessor and an association module . The database accessor may be configured to access a database schema from a repository. Similarly the document accessor may be configured to access a document schema from a repository. The repositories may comprise files a databases software objects web services or the like. Preferably the document schema comprises an XML schema derived from the hierarchical database .

The association module associates the database schema and document schema such that a metadata schema is made available to a mapping module . In one embodiment the association module combines the database schema and document schema to form a single metadata schema file . Alternatively the association module may open a database schema file and a document schema file and maintain access to the files until the mapping module is finished passing data between the XML document and the hierarchical database .

As mentioned above using an XML schema as the document schema provides advantages. For example features of the XML schema definition may be used to modify the passing behavior of data between an XML document and a hierarchical database without affecting how other software applications use the XML schema . In one embodiment directive metadata elements are included in the XML schema to modify how data is passed between an XML document and a hierarchical database .

In a preferred embodiment directive metadata elements are embedded within XML schema elements such that the XML schema may be processed and reviewed normally by third party software applications. The XML schema elements do not affect operation of these third party software applications. But the directive metadata elements within the XML schema elements facilitate passing data between an XML document and a hierarchical database . Directive metadata elements may be added by a user developer or a software module that generates the XML schema .

In one embodiment the XML schema elements comprise a pair of elements. Specifically an appinfo element is nested within an annotation element. The annotation element signals that what follows is documentation i.e. not schema information related to any particular XML element . The appinfo element indicates to a software application reading the XML schema that what is within the appinfo element may comprise a directive or command that may or may not be applicable to that software application.

Because the directive metadata elements may be included without interfering with other users of the XML schema a variety of directive metadata elements may be defined. In one embodiment directive metadata elements comprise a hierarchical database indicator directive storage and retrieval directive and an index directive

Preferably the hierarchical database indicator directive follows a header of the XML schema and applies to the whole XML schema . The hierarchical database indicator directive indicates the interface to be used in communicating with the hierarchical database as well as the names of any views within the hierarchical database to which the XML schema relates. In addition the hierarchical database indicator directive may indicate a mode which identifies whether the XML schema can be used for storage of an XML document in the database retrieval of XML documents from the database or both.

For example in with an IMS database the hierarchical database indicator directive indicates that the DLI interface is to be used. The DLI indicator may cause a mapping module to refer to the namespace information in the header to determine the proper views for storage and retrieval of XML documents . Directive metadata elements may be qualified or unqualified. In the directive metadata elements are qualified. The xmlns http www.ibm.com ims PSBName PCBName indicator identifies the name of the Program Status Block PSB and Program Control Block PCB that are to be used in passing data between XML documents and the IMS database having the named PCB view.

The PSB and PCB information allow the XML schema to be properly associated with a particular view and access permissions for the database . In this manner even though a database administrator may define a customized PSB and one or more PCBs data can still be passed between the XML documents and the appropriate database nodes of the database .

A retrieve mode may indicate that this XML schema may only be used to retrieve XML documents from the identified views. A store mode may indicate that XML documents may be stored and retrieved. Of course the hierarchical database indicator directive may include other indicators and or parameters within the scope of the present invention.

The storage and retrieval directive may cause the XML element corresponding to the XML schema element containing the storage and retrieval directive to be stored or retrieved in a manner other than the default format. For example suppose the default format for storing XML elements is decomposed. If a mapping module finds a storage and retrieval directive with an intact indicator during a storage operation the sub tree of the XML document beginning with the XML element corresponding to the XML schema element containing the storage and retrieval directive will be stored in intact format instead of decomposed format.

An index directive indicates that the next XML element should be processed so as to facilitate indexing of the next XML element. For example as will be discussed in more detail below storage of an XML document in intact format does not typically permit indexing and searching on the XML document . However use of index directives allows elements of the XML document to be indexed and searched using queries.

In one embodiment the index directive includes a sideSegment indicator and a name. The index directive causes certain elements of the XML document to be stored in a sidsegment. A secondary index may then be created to reference the sidesegment and provide indexing and searching of intact stored XML documents . The index directive may include a selector and field sub elements which indicate which XML element is to be stored in the sidesegment. In one embodiment the selector and field values are concatenated to form an XML Path Language Xpath expression. The Xpath expression points to the XML element that is to be stored in the sidesegment. As illustrated in multiple index directives having unique names may be included in the XML schema .

Finally the database schema is associated with the document schema to provide a metadata schema . The association may include combining the database schema and document schema providing joint access to both the database schema and the document schema and the like. The metadata schema facilitates passing of data between an XML document and a hierarchical database . Once a metadata schema is provided the method ends .

In addition the mapping module uses an XML schema and database schema similar to those described in relation to . Specifically a document schema comprises an XML schema that complies with the standard XML schema format version 1.0 as set forth by the World Wide Web consortium. The XML schema includes a representation of the hierarchical structure of valid well formed XML documents . A well formed XML document is one which includes the syntax semantics and data content in accordance with the current XML specification.

In addition the database schema comprises Java classes defined for database nodes and database fields of a hierarchical database . The Java classes may comprise all or part of a predefined database schema embodied as Java classes. For example the Java classes may comprise one or more Java classes in the IMS Java Application Programming Interface API available from IBM.

The database schema includes a representation of the hierarchical structure of the hierarchical database or a sub tree thereof. The database schema and XML schema are configured such that for every database field name in the database schema there exists a corresponding XML element name in the XML schema .

The system includes an interface . The interface receives commands for passing of data between an XML document and a hierarchical database . The interface may interact with other software applications or directly with end users. An XML document may be stored or retrieved in response to a command issued to the interface . In one embodiment the command may also include an indicator as to whether the XML document is to be stored or retrieved in a decomposed format an intact format or a combination of decomposed format and intact format. Preferably indicators for decomposed intact and combined decomposed and intact formats are embedded within a metadata schema See such as within the XML schema .

The interface may include an input module . Alternatively the input module may be located within the mapping module . The input module may comprise a command line or graphical user interface that allows an end user to pass data between the XML document and the hierarchical database . In one embodiment the interface comprises an extension to existing technology. For example the interface may comprise new user defined functions UDFs extensions for a structured query language such as but not limited to Structured Query Language SQL . In this manner interaction with the interface may be consistent and well understood which minimizes a learning curve for using the interface .

The input module may be configured to receive an XML document for storage in the hierarchical database . Preferably the XML document is valid meaning the XML document includes XML elements structurally organized according to the metadata schema See . The XML document may be provided by a file system a web service or another software module.

The input module is also configured to receive a query to retrieve an XML document for the hierarchical database . The query may comprise a key that uniquely identifies a database node in the hierarchical database that is to be the root element in the retrieved XML document . Alternatively the query may comprise a set of commands organized according SQL.

The input module communicates the XML document or the query to the mapping module . The mapping module may include a matching module and a storage module that cooperate to store content data in the XML document within the proper database nodes and database fields of the hierarchical database . In one embodiment the matching module traverses the hierarchical tree structure of the XML document . Preferably the traversal begins at the root XML element and proceeds according to a depth first methodology.

For each XML element the matching module finds a corresponding metadata element within the metadata schema See . Preferably the matching module matches an XML element name with a database field name. The match may be a case sensitive or case insensitive textual match. Of course the matching module may use other criteria in addition to or in place of the database field name and XML element name.

Once a match is identified by the matching module a storage module extracts the content data from the matching XML element. The content data may comprise data between the begin and end tags of the XML element as well as attributes listed in name value pairs within the begin tag of the XML element. The storage module stores the content data in the appropriate database field of the hierarchical database . The appropriate database node is identified by locating the matching database field within the first representation of the hierarchical structure of the hierarchical database . In one embodiment the storage module issues an external database command such as a replace command to store the content data into the database field of the appropriate database node of the hierarchical database . The database field is identified by the matching database field name provided by the matching module .

If an XML element includes attributes the matching module finds the corresponding database fields in the hierarchical database using the matching metadata element and provides the database field name s for the attributes to the storage module . The storage module may then issue insert commands to store the values of the attributes in database fields associated with the attributes of the XML element. Typically because there is a one to one relationship between the XML element and the attributes the values for the attributes are stored in database fields of a particular database node in the hierarchical database .

The matching module and storage module continue to process each XML element in the XML document until all XML elements of the XML document have been processed and stored. In this manner the data of the XML document is stored in a decomposed format in the hierarchical database . Decomposed storage may be particularly useful where the XML document includes significant amounts of content data or the XML document is used primarily to transport data. In decomposed format the content data is treated like any other data in the hierarchical database . Consequently the data may be searched indexed and backed up as needed.

In one embodiment the matching module includes an analysis module that is activated when the XML document is stored in intact format. The analysis module will be discussed in more detail below in relation to .

If the input module receives a query an XML document is to be retrieved from the hierarchical database . Typically the query is in the form of a SQL statement. The where clause and from clause of the SQL statement may include expressions normally accepted by the hierarchical database . The select clause may invoke the input module to retrieve an XML document from data in the hierarchical database stored in decomposed or native format. The XML document may be one stored in decomposed format earlier or a new XML document generated on data stored in the hierarchical database from another source.

The input module provides the query to the matching module which locates a database node identified by the query. The database node may be the root node of the hierarchical database or a sub node of the database . If the database node is a sub node the retrieved XML document will comprise a sub tree of the hierarchical database that includes the identified database nodes and all descendent database nodes.

From the identified database node the matching module traverses the hierarchical database or sub tree of the database using a depth first search. Alternatively the database sub tree may be traversed using a breadth first search. The matching module matches each database field of the sub tree in the hierarchical database with a metadata element in the metadata schema See .

Preferably the matching module traverses the hierarchical database or sub tree by making external calls to the database server engine. In a relational database such traversal would require dynamically adjusting a potentially complex query. Advantageously because the database nodes desired for building the XML document are in a hierarchical arrangement like the database nodes in the hierarchical database database node access functions of the hierarchical database may be used through external calls to readily traverse the sub tree and access each database node. For example in an IMS database the matching module may issue Get Next In Parent GNP calls to traverse the sub tree. The IMS database manages locating the next database node instead of the matching module .

The matching module communicates a matching metadata element to a generator module . The generator module generates an XML element according to the XML element definition included in the metadata element. The XML element comprises the XML formatting characters keywords and tokens for defining a valid XML element.

In addition the XML element includes content data that is retrieved from the matching database field in the hierarchical database . If necessary the generator module may also perform a type conversion on the data from the database field as well as an encoding conversion. In certain embodiments the matching metadata element includes an indicator as to whether the database field data is regular content data or an attribute in a name value pair of the XML element. If the indicator is present the generator module produces the appropriate name value pair for the attributes section of the XML element.

The generated XML element may then be provided to an assembler . The assembler assembles all the generated XML elements into a single XML document once the final XML element is generated. The assembler structures the XML elements according to the second representation of the hierarchical structure of valid XML documents included in the metadata schema .

In one embodiment the XML document is first validated and parsed . The XML document is validated against an XML schema. The XML schema defines the structure content and semantics of all valid XML documents. Validation and parsing of the XML document ensures that all required data is provided and that provided data is in the proper format and structure.

Next an XML element is selected from the parsed XML elements of the XML document according to a depth first traversal of XML elements structured according to the second representation of the hierarchical structure of valid XML documents included in the XML schema. Alternatively an XML element may be selected by a depth first or breadth first search of the validated XML document .

Then the selected XML element is matched with a metadata element defined in the metadata schema See . Preferably the matching metadata element includes an XML element data type identifier that indicates the data type for the content data in the XML element and a database field type identifier that indicates the data type for the data stored in the database field. In one embodiment the database field type identifier is within the database schema . An XML element data type identifier that maps to the database field type identifier may be included within the document schema . Together the database field type identifier and XML element data type identifier facilitate conversion of an XML element content data type to a database field data type and vice versa.

If there is a data type mismatch the content data is converted to the database type for the database field. Similarly if the database field is stored in a different encoding format from that of the XML element content data an encoding conversion may be performed. For example XML data is typically stored in Unicode encoding format and IMS database data is typically stored in Extended Binary Coded Decimal Interchange Code EBCDIC encoding format.

Finally the properly encoded content data of the appropriate data type from the XML element is stored in the database field within the database. The database node for the database field is identified by the matching metadata element. Then a determination is made whether more XML elements have yet to be processed and stored. If so the method selects a next XML element. If not the method ends .

The method begins by receiving a query. Preferably the query is in the form of a standard SQL statement that includes reference to a User Defined Function UDF . The query may be provided by a user or a software module. An example query may be SELECT retrieveXML Model FROM DealerDB.Model WHERE Model.CarYear 1989 . In the example the retrieveXML Model expression initiates the method . The Model argument identifies a database root node in the hierarchical database .

Next the root node in the database is located . In the example above the root node is the database node named Model . Typically the sub tree of the hierarchical database beneath the root node is processed to generate the XML document .

Initially the root node is selected . Subsequent processing of the sub tree selects child nodes of the root node. Next each database field of the database node is matched to a metadata element in the metadata schema . In certain embodiments a matching module may match the database field name to a metadata element name to identify the matching metadata element. As discussed above the matching module may traverse the hierarchical database or sub tree using external commands to the hierarchical database which utilize built in tree traversal functions of the hierarchical database .

Then an XML element is generated as defined in the matching metadata element. The XML element comprises content data from the matching database field. The content data may be converted to a suitable XML data type and or encoding format if necessary. The data type information and encoding format information may be indicated by identifiers in the matching metadata element.

In one embodiment the generated XML element is written out to a file or other persistent storage location. Alternatively the XML element may be written to temporary storage such as memory. Typically the XML element is written out according to a hierarchical structure dictated by the second representation See of the hierarchical structure of valid XML documents . End tags for the generated XML elements may be written out once the whole sub tree has been processed. Alternatively the end tags are written out with the remainder of the XML element and nested XML elements are simply inserted at the appropriate location in the XML document .

Finally a determination is made whether all of the database nodes of the sub tree have been processed. If there are more database nodes the method returns to step . If not the method ends .

The intact storage format may be used in a variety of circumstances. For example when the XML document does not contain data that needs to be loaded in to standard database fields such that standard non XML applications can access the data. Intact storage may be useful when the content data of the XML document is variable unknown or significantly larger than the size of database fields in the database .

For example the content data may comprise pages and pages of content data representative of a human readable document such as a user manual. Such content data may not need to be stored within a standard database field. Instead it may be desirable that the whole XML document be stored in the hierarchical database to utilize the backup and recovery security and other features of the database .

Intact storage may be desired when retrieval speed of the whole XML document is important. Alternatively intact storage may be used where no document schema associated with the XML document exits. For example no XML schema may exist for the XML document .

In one embodiment the method begins once an XML document is received preferably by way of a command identifying the location of the XML document . In addition the command identifying the location of the XML document may provide a database node identifier. The database node identifier uniquely identifies a database node within the hierarchical database to receive the XML document . Preferably the database node identifier identifies either a root node of new database or a new database node that has been added by extending an existing database .

In certain embodiments where database nodes are of set predefined sizes the new database node is of a particular type that restricts the new database node to a single child node. Similarly the child node may be restricted to having only one child node. The new database node may include a flag whether the database node has a child a grandchild a great grandchild etc. Alternatively where database nodes may be of variable size a single database node may be created of a size sufficient to store the entire XML document in intact format.

First a first database node is initialized . The first database node is preferably the newly created database node identified by the database node identifier. Initializing the first database node may comprise determining the total length of the XML document and determining how many generations of child database nodes will be required to store the XML document intact. If the length of the XML document exceeds the size of the first database node a flag in the first database node is set to indicate that one or more generations of child database nodes exist. These child database nodes may be referred to as overflow nodes. In addition to setting the flag indicating additional overflow nodes initialization may include storing version information the length of the portion of the database node that will hold the raw data and the like. In certain embodiments initialization includes creating the appropriate number of child database nodes overflow nodes in the hierarchical database to properly store the XML document in intact format.

Initialization may also include identifying one or more break points within the XML document . The break points represent where the XML document will be physically divided between the first database node and any subsequent child database nodes. Break points are determined based on the size of the raw data in the XML document and the sizes of the first database node and any child database nodes excluding any flag or header information.

Next the method writes a portion of raw data from the XML document into the first database node. Error checking on the written portion may be performed. Raw data means the data has not been parsed validated or converted. The portion may comprise a length packet such as 8 bit 16 bit 32 bit or the like. Alternatively the portion may be the same size as the length of the portion in the database node that will receive the raw data.

Portions of the XML document are written beginning with the beginning of the XML document . Once a portion is written a determination is made whether the first database node is full. If not a next sequential portion of the XML document is written to the first database node.

If the first database node is full a determination is made whether the end of the XML document has been reached. If so the method ends . If not a second database node that is a child of the first database node is initialized . Typically database nodes are filled once a break point is reached. Consequently the method continues by writing a portion of raw data beginning at the break point from the XML document into the second database node. The writing process continues until the whole XML document is stored in one or more database nodes of the hierarchical database .

Referring now to in certain embodiments an XML document may be stored in decomposed format with a sub tree of the XML document stored intact. Preferably the XML document includes an associated document schema such as an XML schema . The document schema may include different types of directive metadata elements. A metadata directive is an indicator that causes the XML element and or a sub tree including the XML element as the root element to be handled differently in being passed between the XML document and the hierarchical database .

In one embodiment a metadata directive element signals that the XML element within which the metadata directive element is encountered is to be stored in intact format. For example when the method selects an XML element a determination may be made whether the XML element includes any metadata directives. If a metadata directive is present for storing the selected XML element and its descendents intact the method may initiate the method . The method may operate as described above except that the root XML element from which intact storage begins is the selected XML element from method rather than the root XML element for the whole XML document .

Similarly when a decomposed XML document is retrieved from the hierarchical database as described in relation to the same metadata directive may be used to determine that a particular database node is to be retrieved according to a method for retrieving intact XML documents or sub trees. Method is discussed in more detail in relation to . In this manner XML documents stored using a mixed format of intact and decomposed may also be retrieved as necessary.

Intact storage of an XML document results in binary data in the database nodes of the hierarchical database . The binary data is not available for use by other applications using the hierarchical database until the XML document is retrieved. However it may be desirable for certain information within the XML document to be made available such that XML enabled applications using the hierarchical database may identify and or locate the XML document as necessary.

Consequently in certain embodiments particular XML elements of an XML document being stored in intact format may be stored in indexable database nodes. In a hierarchical database such as IMS these indexable database nodes may comprise side segments.

Referring now to as each XML element is selected a determination may be made whether the XML element includes any metadata directives See . In one embodiment the analysis module may examine each XML element to search for metadata directives . In addition the analysis module may communicate with other modules of the present invention to carry out the metadata directive depending on the type of metadata directive found.

If a metadata directive is within the selected XML element and the metadata directive comprises an index indicator all or a portion of the XML element may be stored in indexable database nodes such as side segments. The index indicator may include parameters that identify what parts of the XML element are to be stored in the indexable database nodes. The index values from the XML element content data and or attribute values is then stored in an indexable database node.

Then a secondary index may be generated that references the root database node in the hierarchical database and the indexable database nodes. The secondary index allows the indexable database nodes to be located using database queries. In this manner a user or XML enabled application using the hierarchical database may locate an XML document or portions thereof when the XML document is stored in the hierarchical database in intact format.

The method begins by receiving a key. Preferably the key is unique. The key is used to locate a first database node within the hierarchical database where the intact XML document has been stored. Next raw data is sequentially written from the data portion of the first database node to an XML document such as an XML file. Once all the raw data is written from the first database node a determination is made whether the first database node has a descendent database node storing more raw data. As mentioned this may be indicated by a flag in the first database node.

If more raw data exists for the XML document the method locates the child database node and sequentially writes raw data from the descendent database node into the XML document . If the descendent database node includes a descendent database node the process of writing the data is repeated until all the raw data in all the descendent database nodes has been written to the XML document . In certain embodiments if a descendent database node includes one or more database node twins descendent database nodes of the same type as the current descendent database node the process of writing the data is repeated on the database node twins such that all the raw data in the database node twins is written to the XML document before a next descendent database node is selected. If no more raw data exists in descendent database nodes or database node twins for the XML document the method ends .

In summary the present invention provides an apparatus and system for defining a metadata schema to facilitate passing data between an XML document and a hierarchical database. The present invention defines a metadata schema that complies with an accepted text based industry standard an XML schema for valid well formed XML documents. The XML schema defines a set of valid well formed XML documents. This set is automatically the set of valid well formed XML documents that may be passed into and out of a hierarchical database through mapping of the data. The present invention also defines a metadata schema that accommodates user defined database views of the hierarchical database and is readily modifiable to adjust to changes in the user defined database views.

The present invention may be embodied in other specific forms without departing from its spirit or essential characteristics. The described embodiments are to be considered in all respects only as illustrative and not restrictive. The scope of the invention is therefore indicated by the appended claims rather than by the foregoing description. All changes which come within the meaning and range of equivalency of the claims are to be embraced within their scope.

