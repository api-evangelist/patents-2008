---

title: Reducing overhead associated with distributed password policy enforcement operations
abstract: A computer implemented method, data processing system, and computer program product for reducing the overhead associated with distributed password policy enforcement operations using a proxy server. When a proxy server provides a request from a client to a backend directory server, the proxy server determines whether a password policy check is required to be performed at the backend directory server. If a password policy check is not required to be performed at the backend directory server, the proxy server sends the client request together with a skip password policy control to the backend directory server. This skip password policy control informs the backend directory server to skip the password policy check on the client request.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08042153&OS=08042153&RS=08042153
owner: International Business Machines Corporation
number: 08042153
owner_city: Armonk
owner_country: US
publication_date: 20080109
---
The present invention relates generally to an improved data processing system and in particular to reducing the overhead associated with distributed password policy enforcement operations.

A directory is a special type of database for managing information about people organizations data processing systems and other information sources. Information within a directory is organized within a hierarchical namespace. Each entry in the directory is a named object and consists of a set of attributes. Each attribute has a defined attribute type and one or more values. Each entry is identified by an unambiguous distinguished name DN wherein a distinguished name is a concatenation of selected attributes from an entry. A directory service provides a mechanism for searching a directory and for retrieving information from a directory. Various standards have been promulgated for defining directories and directory services. For example the X.500 specifications define a directory standard more information can be found in Weider et al. Technical Overview of Directory Services Using the X.500 Protocol Internet Engineering Task Force IETF RFC 1309 March 1992. As another example the Lightweight Directory Access Protocol LDAP specifications define a protocol for accessing a directory that supports the X.500 directory model more information can be found in Wahl et al. Lightweight Directory Access Protocol v3 IETF RFC 2251 December 1997.

A logical representation of a directory does not necessarily reflect an organization of the physical storage of the directory. In a manner similar to many types of memory systems a directory may be logically supported as a cohesive whole yet physically supported in a distributed manner. For example a single distributed directory may be stored across many servers wherein each server supports a subtree of the directory. In particular a known distributed directory environment includes one or more LDAP backend servers and a proxy server that acts as an intermediate agent between a client and the distributed directory environment. Clients bind to the proxy server instead of directly binding to the backend LDAP servers.

A set of rules that controls how passwords are used and administered in this type of directory environment is known as a password policy. These rules enforce various security requirements e.g. that a user change his or her password periodically that the user s selected password meets certain requirements for construction that re use of an old password is prevented that entities are locked out after a certain number of failed attempts to use a given password and so on. A user refers to any LDAP client application that has an identity in the directory. In an LDAP distributed directory environment a given password policy is defined according to an object oriented schema that defines a password policy object class which includes a set of administrative password policy attributes together with a set of operational attributes that hold general policy state information for each user. The policy also includes one or more controls that are used while enforcing password policy. In particular a request control is defined as a control that is sent by a client with a request operation to elicit a response control. The response control typically contains one or more warnings and errors associated with password policy. Further details of how to implement password policy in this manner is described in Behera et al. Password Policy for LDAP Directories Internet Draft RFC October 2001.

The illustrative embodiments provide a computer implemented method data processing system and computer program product for reducing the overhead associated with distributed password policy enforcement operations using a proxy server. When a proxy server provides a request from a client to a backend directory server the proxy server determines whether a password policy check is required to be performed at the backend directory server. If a password policy check is not required to be performed at the backend directory server the proxy server sends the client request together with a skip password policy control to the backend directory server. This skip password policy control informs the backend directory server to skip the password policy check on the client request.

In general the devices that may comprise or relate to the present invention include a wide variety of data processing technology. Therefore as background a typical organization of hardware and software components within a distributed data processing system is described prior to describing the present invention in more detail.

With reference now to the figures depicts a typical network of data processing systems each of which may implement a portion of the present invention. Distributed data processing system contains network which is a medium that may be used to provide communications links between various devices and computers connected together within distributed data processing system . Network may include permanent connections such as wire or fiber optic cables or temporary connections made through telephone or wireless communications. In the depicted example server and server are connected to network along with storage unit . In addition clients also are connected to network . Clients and servers may be represented by a variety of computing devices such as mainframes personal computers personal digital assistants PDAs and the like. Distributed data processing system may include additional servers clients routers other devices and peer to peer architectures that are not shown.

In the depicted example distributed data processing system may include the Internet with network representing a worldwide collection of networks and gateways that use various protocols to communicate with one another such as Lightweight Directory Access Protocol LDAP Transport Control Protocol Internet Protocol TCP IP File Transfer Protocol FTP Hypertext Transport Protocol HTTP Wireless Application Protocol WAP and so on. Of course distributed data processing system may also include a number of different types of networks such as for example an intranet a local area network LAN or a wide area network WAN . For example server directly supports client and network which incorporates wireless communication links. Network enabled phone connects to network through wireless link and PDA connects to network through wireless link . Phone and PDA can also directly transfer data between themselves across wireless link using an appropriate technology such as Bluetooth wireless technology to create so called personal area networks PAN or personal ad hoc networks. In a similar manner PDA can transfer data to PDA via wireless communication link .

The illustrative embodiments may be implemented on a variety of hardware platforms is intended as an example of a heterogeneous computing environment and not as an architectural limitation for the illustrative embodiments.

With reference now to a diagram depicts a typical computer architecture of a data processing system such as those shown in in which the present invention may be implemented. Data processing system contains one or more central processing units CPUs connected to internal system bus which interconnects random access memory RAM read only memory and input output adapter which supports various I O devices such as printer disk units or other devices not shown such as an audio output system and the like. System bus also connects communication adapter that provides access to communication link . User interface adapter connects various user devices such as keyboard and mouse or other devices not shown such as a touch screen stylus microphone etc. Display adapter connects system bus to display device .

Those of ordinary skill in the art will appreciate that the hardware in may vary depending on the system implementation. For example the system may have one or more processors such as an Intel Pentium based processor and a digital signal processor DSP and one or more types of volatile and non volatile memory. Other peripheral devices may be used in addition to or in place of the hardware depicted in . The depicted examples are not meant to imply architectural limitations with respect to the illustrative embodiments.

In addition to being able to be implemented on a variety of hardware platforms the illustrative embodiments may be implemented in a variety of software environments A typical operating system may be used to control program execution within each data processing system. For example one device may run a UNIX operating system while another device contains a simple Java runtime environment. A representative computer platform may include a browser which is a well known software application for accessing hypertext documents in a variety of formats such as graphic files word processing files Extensible Markup Language XML Hypertext Markup Language HTML Handheld Device Markup Language HDML Wireless Markup Language WML and various other formats and types of files.

The illustrative embodiments may be implemented on a variety of hardware and software platforms as described above with respect to and . More specifically though the illustrative embodiments are directed to an improved distributed data processing environment. Prior to describing the illustrative embodiments in more detail some aspects of typical distributed data processing environments are described.

The descriptions of the figures herein may involve certain actions by either a client device or a user of the client device. One of ordinary skill in the art would understand that responses and or requests to from the client are sometimes initiated by a user and at other times are initiated automatically by a client often on behalf of a user of the client. Thus when a client or a user of a client is mentioned in the description of the figures it should be understood that the terms client and user can be used interchangeably without significantly affecting the meaning of the described processes.

Certain computational tasks may be described below as being performed by functional units. A functional unit may be represented by a routine a subroutine a process a subprocess a procedure a function a method an object oriented object a software module an applet a plug in an Active control a script or some other component of firmware or software for performing a computational task.

The descriptions of the figures herein may involve an exchange of information between various components and the exchange of information may be described as being implemented via an exchange of messages e.g. a request message followed by a response message. It should be noted that an exchange of information between computational components which may include a synchronous or asynchronous request response exchange may be implemented equivalently via a variety of data exchange mechanisms such as messages method calls remote procedure calls event signaling or other mechanism.

The illustrative embodiments are described below with respect to terminology and functionality as associated with X.500 directories and Lightweight Directory Access Protocol LDAP operations but it should be noted that the illustrative embodiments may be implemented using a variety of directory implementation schemes and protocols.

With reference now to a block diagram depicts a typical distributed data processing system for an enterprise domain. As in a typical corporate computing environment or an Internet based computing environment enterprise domain hosts controlled resources that user can access e.g. by using browser application on client device through network .

Enterprise domain supports multiple servers. Application servers support accessible resources through web based applications or other types of applications including legacy applications. Authentication servers support various authentication mechanisms such as username password X.509 certificates secure tokens or an SSL session.

Proxy server performs a wide range of functions for enterprise domain . Proxy server can be administratively configured through configuration files and enterprise policy database to control the functionality of proxy server e.g. caching web pages in order to mirror the content from an application server or filtering the incoming and outgoing datastreams through input datastream filter unit and output datastream filter unit . Input datastream filter unit may perform multiple checks on incoming requests while output datastream filter unit may perform multiple checks on outgoing responses each check may be performed in accordance with goals and conditions that are specified within various enterprise policies.

Enterprise domain comprises entitlements server which accepts information within user registry database access control list ACL database and third party datastreams from other domains. Entitlements server determines whether users are authorized to access certain services that are provided by application servers within domain by checking policies and or access control lists against user requests for those services. A set of user specific entitlements is used by proxy server entitlement server or a combined or coordinated effort between proxy server and entitlement server to determine or control access to application servers and other controlled resources in response to user requests.

The above noted entities within enterprise domain represent typical entities within many computing environments. Web based applications can utilize various means to prompt users to enter authentication information often as a username password combination within an HTML form. In the example that is shown in user may be required to be authenticated before client may have access to resources after which a session is established for client . In after receiving an incoming request from client input datastream filter unit may determine whether client has already established a session if not an authentication service on authentication servers can be invoked in order to authenticate user . If client has already established a session then additional checks may be performed on an incoming request prior to granting access to a controlled resource the additional checks may be specified in an enterprise authentication policy.

With reference now to a block diagram depicts a typical distributed directory environment. User operates client application which may execute on a client device such as client as shown in . Client application interacts with directory servers through a proxied directory server also known as a directory proxy server or a proxy directory server which is shown as proxy server proxy server may execute on the user s client device or elsewhere within a network of connected devices such as those shown in . Proxy server may be associated with configuration files that contain information that is managed via an administrative user application to control the functionality of proxy server .

Proxy server acts as an intermediate agent an intermediary to the distributed directory environment. Although only one proxy server is shown there may be multiple such proxy servers or proxy server instances running on one or more physical machines. Proxy server is able to perform operations in accordance with a variety of directory schemes and protocols including LDAP specifications. Proxy server contains proxy authorization control functional unit which generates proxy authorization controls also called proxied authorization controls that are employed by proxy server to perform an operation with respect to the distributed directory on behalf of client application or equivalently on behalf of user . As described in Wahl et al. Lightweight Directory Access Protocol v3 IETF RFC 2251 December 1997 a control is a way to specify extension information for use with an LDAP operation. Controls can be sent as part of an LDAP request and apply only to the accompanying request. If the server recognizes the control type and it is appropriate for the operation the server will make use of the control when performing the requested operation various optional parameters can be used to inform the server whether or not to ignore the control if it is unrecognized or it is inappropriate. The control also contains an object identifier that has been assigned to the control.

Hence proxy authorization control functional unit can present an application programming interface API that accepts a proxy distinguished name DN as an input parameter this input parameter specifies the distinguished name of the entry of the identity that proxy server is to assume when performing an operation on behalf of client application or user . The provided API can be used by the caller to create an LEAP control containing the proxy authorization identity the created proxy authorization control would then be included in LDAP operations to request an operation from a directory server. Using the proxy authorization control mechanism a client or in this case proxy server can bind to the directory engine using its own identity but is granted proxy authorization rights of another user i.e. user or client application to access the target directory.

When the LDAP server receives an operation with proxy authorization control the bind distinguished name is validated against the administrative group and or the predefined proxy authorization group to determine whether the bind distinguished name should be granted the proxy authorization right. In other words the bound application client which is proxy server in this example must be a member of the administrative group or proxy authorization group to request a proxy authorization operation. More information about using a proxy authorization control can be found in Weltman LDAP Proxied Authorization Control IETF Internet Draft draft weltman 1dapv3 proxy 12.txt April 2003. The LDAP protocol also supports an extension mechanism that allows additional operations to be defined for services that are not defined within the LDAP specification. An extended operation allows clients to make requests and receives responses with predefined syntaxes and semantics that may be specific to particular implementations.

The distributed directory environment includes multiple directory servers that interoperate within the same distributed data processing environment as proxy server and client application e.g. in a manner similar to the distributed data processing environments that are shown in and . Directory servers support functionality for accessing datastores that contain portions of a distributed directory i.e. portions of a directory information tree shown as distributed directory datastores . Directory servers also contain functionality which is not shown in that supports the receipt and processing of proxied authorization controls e.g. as may be sent by proxy server or other directory clients. A typical directory server is a relational database management RDBM server.

In a manner similar to the scenario that was described further above user entries group entries and target object entries that are of interest to a particular directory operation may reside in different portions of a distributed directory that are supported on different systems. In the example that is shown in target object entry resides within distributed directory datastore user entry resides within distributed directory datastore and group entry resides within distributed directory datastore . These locations are merely representative.

Thus a distributed directory is a directory environment in which data is partitioned across multiple directory servers. As illustrated in the distributed directory typically comprises a collection of machines including relational database management RDBM servers holding data and one or more proxy servers managing the topology. A representative proxy server may be an IBM Tivoli Directory Server that provides among other functions request routing load balancing failover distributed authentication and support for distributed membership groups and partitioning of containers. As described above the directory proxy server sits at the front end of a distributed directory and provides efficient routing of user requests thereby improving performance and providing a unified directory view to the client. The proxy server also provides data support for groups and ACLs that are not affected by partitioning and support for partitioning of flat namespaces.

In this illustrative example servers A B and C have their data split within a container under some entry in the directory tree . Because proxy server handles the routing of requests to the appropriate servers no referrals are used. Client applications and need only be aware of proxy server . Client applications and never have to authenticate with servers A B and C .

Data within directory servers A B and C may include user entries user policy entries group policy entries and global policy entries. Since multiple policy definitions may apply to a single user a set of data comprising policy definitions for the user may be partitioned across the directory servers. For instance server A is shown to contain a first partition of the entries server B is shown to contain a second partition of the entries and server C is shown to contain a third partition of the entries.

As previously mentioned a password policy comprises a set of rules that controls how passwords are used and administered in a distributed directory environment. These rules enforce various security requirements e.g. that a user change his or her password periodically that the user s selected password meets certain requirements for construction that re use of an old password is prevented that entities are locked out after a certain number of failed attempts to use a given password and so on. Password policy enforcement for a user is performed in several key situations 1 at bind time such as when the user requests a simple bind to the proxy server 2 when a user is added to the system 3 when a bound user requests to modify the bound user s password 4 when a bound user requests to modify a different user s password and 5 during password policy pre and post hind extended operations. A pre bind extended operation may include checking if an account is locked. A post bind extended operation may include checking for expired passwords grace logins and updating failed successful bind counters. For example two extended operations may be implemented in the RDBM backend server they are a Password Policy Initialize and Verify Bind Extended Operation and a Password Policy Finalize and Verify Bind Extended Operation. Both extended operations may be enabled or disabled via a setting in an LDAP configuration file e.g. in the cn Directory cn RDBM Backends cn Company Directory cn Schemas cn Configuration entry. The Password Policy Initialize and Verify Bind Extended Operation accepts a bind distinguished name and is performed when bound as an administrator. Preferably the extended operation is implemented on an RDBM backend server and simply calls in to the RDBM to the pre bind password policy code. The extended operation checks to see if the target user s account is locked. Possible return codes include codes for internal server error the users account is locked invalid distinguished name or password requester does not have permission to perform the request and the like. The Password Policy Finalize and Verify Bind Extended Operation accepts a bind distinguished name and return code and is performed when bound as an administrator. The extended operation is implemented on an RDBM backend server and calls in to the RDBM to the post bind password policy code. The extended operation checks if a password is expired and if any grace logins are left. The extended operation also updates the success and failure counts times on the entry. More information on pre and post bind extended operations may be found in U.S. patent application Ser. No. 11 776 292 at least in page 20 lines 17 to page 24 line 9 entitled Method and System for Enforcing Password Policy for an External Bind Operation in a Distributed Directory and filed Jul. 11 2007 assigned to the same assignee herein and which is incorporated by reference.

Since data in a distributed directory system is partitioned and stored on different servers in the system password policy definitions for a user or user group may be partitioned and distributed across the different servers. When the policy data is partitioned across directory backend servers in this manner a password policy check on a user request cannot be performed at a single directory backend server level. Instead the proxy server must obtain policy information distributed across the directory backend servers to determine the complete effective password policy for the user and then enforce that policy.

A mechanism for reducing the overhead associated with distributed password policy enforcement operations using a proxy server by providing a mechanism for enforcing password policy when the policy definitions for a user or user group are partitioned and distributed across different directory servers is disclosed in U.S. patent application Ser. No. 11 971 510 at least in paragraphs 0053 0119 entitled Password Policy Enforcement in a Distributed Directory when Policy Information is Distributed and filed Jan. 9 2008 assigned to the same assignee herein and which is incorporated by reference. In particular U.S. patent application Ser. No. 11 971 510 discloses that to enforce password policy on a user request in a distributed directory environment where a set of policy data is partitioned across directory servers a proxy server performs two steps first the proxy server collects policy entries stored across different directory servers for the user and determines the user s effective password policy in response to a request by the user to access data stored in the directory backend servers and second the proxy server communicates the effective password policy to the directory backend servers in the form of an Effective Password Policy Control so the backend servers can use the collected policy information when enforcing the policy on the user request. The effective password policy for a user is the combination of all policy information applicable to the user i.e. policy definitions that apply to the individual user policy definitions that apply to groups of which the user is a member and the global level policy stored on the directory backend servers. In determining the effective password policy of a target user the proxy server collects the policy definitions that apply to the target user. The proxy server also collects all the policy definitions that apply to the groups of which the target user is a member. This process includes collecting all the groups of which the target user is a member and collecting the policy definitions that correspond to those groups. The proxy server also collects the global level policy. These collected policies are then combined to determine the effective password policy for the target user. The Effective Password Policy Control may be provided by the proxy server to the backend directory servers to allow the backend servers to determine based on the user s effective password policy if the user requested operation is allowed.

The illustrative embodiments provide a mechanism for reducing the overhead associated with distributed password policy enforcement operations using a proxy server. This mechanism may be used when the policy definitions for a user or user group are partitioned and distributed across different directory servers or alternatively the mechanism may be used when the password policy definitions for a user are not partitioned and distributed across directory servers but rather stored on each backend directory server. This mechanism allows for minimizing the number of password policy enforcement operations. Currently the backend servers need the policy information sent in the Effective Password Policy Control because the backend servers perform a password policy check every requested operation. For example in a distributed directory environment the proxy server establishes connections to the backend servers using an administrative ID. Operations are performed on behalf of a requesting client by using a Proxy Authorization Control. When the backend servers receive the Proxy Authorization Control the backend servers look up the password policy of the user or use the policy information sent in the Effective Password Policy Control for pre bind checking to determine if the requesting user s account is locked. Thus for each requested operation policy information for a user is required by the backend servers for password policy enforcement which is inefficient and unnecessary.

To reduce the amount of overhead in policy enforcement at the directory backend servers the proxy server in the illustrative embodiments sends a Skip Password Policy Control to the backend servers in certain situations to indicate to the backend servers that no password policy check needs to be performed for the requested operation. The Skip Password Policy Control is a new control which contains the target user distinguished name for which policy enforcement is to be skipped. Password policy checking may be skipped when the proxy server determines from the cached password policy state of the requesting user that the operation requested by the user is an allowed operation. Thus if a subsequent request from the user comprises an operation which does not require the backend servers to perform an additional policy check based on the cached password policy state policy information is not needed at the backend servers and the proxy server uses the new Skip Password Policy Control to inform the backend servers that password policy checking for the operation can be skipped. The proxy server sends this control for a bound user on all requests except those requests requiring additional password policy enforcement by the backend servers e.g. requests for adding a user entry modifying the user s password modifying a different user s password and password policy pre and post bind extended operations . If the requested operation requires additional password policy enforcement the proxy server sends the Effective Password Policy Control to the backend servers. Thus when policy information is contained in a distributed environment every operation sent to a backend server will contain either the Effective Password Policy Control or the Skip Password Policy Control for the bound or binding user.

The process begins when a proxy server receives a subsequent request from a bound user in a distributed directory step . In response to receiving the request the proxy server determines the effective password policy for the bound user step . A method for determining the effective password policy for the bound user is disclosed in U.S. patent application Ser. No. 11 971 510 which is incorporated by reference as stated above.

The proxy server checks the password policy state of the requesting user in its cache to determine whether the password policy state indicates that the requested directory operation is an allowed operation step . An allowed operation is one which has already been policy checked and enforced by the proxy server. If the cached password policy state indicates that the requested operation is not allowed the proxy server sends the request to the backend directory server with the Effective Password Policy Control for the bound user step .

If the cached password policy state indicates that the requested operation is allowed the proxy server sends the request for the backend directory server with the Skip Password Policy Control for the bound user step . The Skip Password Policy Control is a new control which is used by the proxy server to inform the backend servers that password policy checking can be skipped for the bound user. The new control contains the target user distinguished name for which policy enforcement is to be skipped. In the initial request from the user the backend directory server has already performed the policy check on a requested operation. The proxy server caches this policy check information for the connection. If no additional password policy enforcement is required for the requested operation e.g. if the request is not a request for adding a user entry modifying the user s password modifying a different user s password and password policy pre and post bind extended operations there is no need for the backend servers to perform the password policy check for the subsequent operation. Thus the backend servers do not need the policy information. When the backend directory servers receive the subsequent request for a bound user comprising the Skip Password Policy Enforcement Control the backend directory servers do not perform password policy checking on the user request. The Skip Password Policy Control is only honored when sent by administrative users to ensure that normal users cannot circumvent password policy checking when required.

The process begins when a client bound to the proxy server sends a subsequent request to the proxy server for a subsequent directory operation step . When the proxy server receives the request the proxy server checks the password policy state of the requesting user in its cache to determine whether the password policy state indicates that the requested directory operation is an allowed operation step . An allowed operation is one which has already been policy checked and enforced by the proxy server. If the password policy state indicates that the requested operation is not allowed the process continues to step .

If the operation is allowed the proxy server determines whether the request from the bound client targets a second object and requires a password policy for the target step . If the request does not target a second object and does not require a password policy for the target the process continues to step . However if the request targets a second object and requires a password policy for the target the proxy server determines the effective password policy for the target object step .

At step the proxy server determines if the request requires a Password Policy Control for the bound user. A Password Policy Control is required for the hound user if the cached password policy state does not indicate that the request is an allowed operation. If the request requires a Password Policy Control for the bound user the proxy server sends the request to the backend server with the Effective Password Policy Controls for the bound user and the target object step with the process continuing to step . If the request does not require a Password Policy Control for the bound user the proxy server sends the request to the backend server with the Skip Password Policy Control for the bound user and the Effective Password Policy Control for the target object step with the process continuing to step .

At step the backend directory server receives the request and determines if the Effective Password Policy Control has been supplied for the bound user. If the Effective Password Policy Control has been supplied the process continues to step . If the Effective Password Policy Control has not been supplied the backend server determines if the Skip Password Policy Control has been supplied for the bound user step . If the Skip Password Policy Control has been supplied the process continues to step . If the Skip Password Policy Control has not been supplied the backend directory server evaluates the required policy for the bound user step with the process continuing to step . The backend directory server would need to evaluate the required policy for the bound user in situations where the client binds directly to a backend server and bypasses the proxy server when password policy is not distributed or in an environment without a proxy server.

At step the backend directory server determines whether the request from the bound client targets a second object and requires a password policy for the target step . If the request does not target a second object and does not require a password policy for the target the process continues to step . However if the request targets a second object and requires a password policy for the target the backend directory server determines if the Effective Password Policy Control has been supplied for the target object step . If the Effective Password Policy Control has been supplied for the target object the process continues to step . However if the Effective Password Policy Control has not been supplied for the target object the backend directory server evaluates the required policy for the target object step with the process continuing to step .

At step the backend directory server performs the requested operation. The backend directory server then returns the operation result to the proxy server step .

When the proxy server receives the operation result the proxy server returns the operation result to the client step . The client parses the operation result from the proxy server step .

The invention can take the form of an entirely hardware embodiment an entirely software embodiment or an embodiment containing both hardware and software elements. In a preferred embodiment the invention is implemented in software which includes but is not limited to firmware resident software microcode etc.

Furthermore the invention can take the form of a computer program product accessible from a computer usable or computer readable medium providing program code for use by or in connection with a computer or any instruction execution system. For the purposes of this description a computer usable or computer readable medium can be any tangible apparatus that can contain store communicate propagate or transport the program for use by or in connection with the instruction execution system apparatus or device. The program code may be stored in a computer readable storage medium in a client data processing system or a server data processing system.

The invention can also take the form of a computer program product which has been downloaded over a network from one device to another for use in the other device. For instance the program code stored in a computer readable storage medium in a server data processing system may be downloaded over a network from the server to a remote data processing system such as a client or another server. Likewise the program code stored in a computer readable storage medium in a client data processing system may be downloaded over a network from the client to a remote data processing system such as a server or another client.

Furthermore the invention can take the form of a computer program product accessible from a computer usable or computer readable medium providing program code for use by or in connection with a computer or any instruction execution system. For the purposes of this description a computer usable or computer readable medium can be any tangible apparatus that can contain store communicate propagate or transport the program for use by or in connection with the instruction execution system apparatus or device.

The medium can be an electronic magnetic optical electromagnetic infrared or semiconductor system or apparatus or device or a propagation medium. Examples of a computer readable medium include a semiconductor or solid state memory magnetic tape a removable computer diskette a random access memory RAM a read only memory ROM a rigid magnetic disk and an optical disk. Current examples of optical disks include compact disk read only memory CD ROM compact disk read write CD R W and DVD.

A data processing system suitable for storing and or executing program code will include at least one processor coupled directly or indirectly to memory elements through a system bus. The memory elements can include local memory employed during actual execution of the program code bulk storage and cache memories which provide temporary storage of at least some program code in order to reduce the number of times code must be retrieved from bulk storage during execution.

Input output or I O devices including but not limited to keyboards displays pointing devices etc. can be coupled to the system either directly or through intervening I O controllers.

Network adapters may also be coupled to the system to enable the data processing system to become coupled to other data processing systems or remote printers or storage devices through intervening private or public networks. Modems cable modem and Ethernet cards are just a few of the currently available types of network adapters.

The description of the present invention has been presented for purposes of illustration and description and is not intended to be exhaustive or limited to the invention in the form disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art. The embodiment was chosen and described in order to best explain the principles of the invention the practical application and to enable others of ordinary skill in the art to understand the invention for various embodiments with various modifications as are suited to the particular use contemplated.

