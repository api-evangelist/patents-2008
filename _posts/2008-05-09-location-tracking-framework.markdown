---

title: Location tracking framework
abstract: A computer-implemented location tracking system includes an index comprising separate organizations of a) entity information and location based notifications for the entities, and b) independent location based notifications, and the index further comprising a spatial organization of references to the entity information, location based notifications for the entities, and independent location based notifications.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08447320&OS=08447320&RS=08447320
owner: Locomatix
number: 08447320
owner_city: Santa Clara
owner_country: US
publication_date: 20080509
---
Location based services are services that require knowledge of and usually provide features relating to the location of something. The objects of interest may be alive or inanimate. For example location based services may be provided in relation to a vehicle a nonmoving location e.g. when a person moves into that location a person such as a teenager or elder a pet or a valuable farm animal. A fleet of trucks may be tracked and nearby features of interest to their drivers such as the near presence of a refueling station may be presented to a driver. Another example is informing a person entering an airport that a shop within the airport has a sale. This second example not only illustrates a location based service but the information transferred also has a time component as it may only be sent when a sale is occurring and at a time when the store is open. Some location based services might be presented to anyone at the correct location and time others may be tailored. For example a message about a sale at the duty free liquor shop may not be sent to a teetotaler.

Some LBS applications may require frequent or almost continuous tracking of location information about one particular object. Some LBS applications may require processing sometimes frequent processing of location information about a large number of objects. If an application provides information based on the objects which are at a point in time in some sense near a particular location or other objects and everything is potentially on the move while this information is being provided substantial processing power may be needed.

What is needed then is a system and associated procedures to provide LBS applications with efficient and scalable location tracking capabilities that allow processing a large number of objects and or updates for location based services in a cost effective manner. These applications may process large scale location updates and both long standing and one time spatio temporal queries in near real time.

U.S. Pat. No. 6 049 711 Apr. 11 2000 Ben Yehezkel et al. provides a method for location based information services but does not provide any methods for scalable support of such services.

U.S. Pat. No. 6 157 841 Dec. 5 2000 Bolduc et al. is related to storing a plurality of location information in a database and does not consider scalable methods of using this information for Location based services.

Chakka V. Everspaugh A. and Patel J. 2003 Indexing Large Trajectory Data Sets with SETI pages 164 175. The authors propose an index structure SETI for managing historical trajectory information of moving objects. This work is suited for answering queries on historical trajectory.

Gedik B. and Liu L. 2004 Mobieyes Distributed processing of continuously moving queries on moving objects in a mobile system pages 67 87. The article discusses a grid index approach for distributed processing of continuously changing LBS notification queries. However the work relies on the assumption that the end user devices processes the computation and storage resources for local monitoring and evaluation of long standing spatio temporal queries which limits the flexibility of the system.

Saltenis S. Jensen C. Leutenegger S. and Lopez M. 2000 Indexing the Positions of Continuously Moving Objects pages 331 342. The method addresses the issue of indexing continuously moving objects for the purpose of answering one time predictive spatio temporal queries by modeling the movement of objects.

Tao Y. Papadias D. and Sun J. 2003 The TPR Tree An Optimized Spatio Temporal Access Method for Predictive Queries pages 790 801. The method described improves the performance of the method proposed by Saltenis et al. by introducing efficient heuristics for index organizations.

Patel J. M. Chen Y. and Chakka V. P. 2004 Stripes an efficient index for predicted trajectories 2004 pages 635 646. ACM Press. The technique described employs a dual transform technique and a quadtree index structure for modeling and indexing moving objects for handling one time predictive spatio temporal query processing.

Guttman A. 1984 R trees A dynamic index structure for spatial searching 84 Boston Mass. Jun. 18 21 1984 pages 47 57. ACM Press.

Beckmann N. Kiegel H. P. Schneider R. and Seeger B. 1990 The r tree An efficient and robust access method for points and rectangles 1990 Atlantic City N.J. May 23 25 1990 pages 322 331. ACM Press.

Hellerstein J. M. Naughton J. F. and Pfeffer A. 1995 Generalized search trees for database systems 21 Sep. 11 15 1995 Zurich Switzerland pages 562 573. Morgan Kaufmann index.

References to one embodiment or an embodiment do not necessarily refer to the same embodiment although they may.

Unless the context clearly requires otherwise throughout the description and the claims the words comprise comprising and the like are to be construed in an inclusive sense as opposed to an exclusive or exhaustive sense that is to say in the sense of including but not limited to. Words using the singular or plural number also include the plural or singular number respectively. Additionally the words herein above below and words of similar import when used in this application refer to this application as a whole and not to any particular portions of this application. When the claims use the word or in reference to a list of two or more items that word covers all of the following interpretations of the word any of the items in the list all of the items in the list and any combination of the items in the list.

 Logic refers to signals and or information that may be applied to influence the operation of a device. Software hardware and firmware are examples of logic. Hardware logic may be embodied in circuits. In general logic may comprise combinations of software hardware and or firmware.

Those skilled in the art will appreciate that logic may be distributed throughout one or more devices and or may be comprised of combinations of instructions in memory processing capability circuits and so on. Therefore in the interest of clarity and correctness logic may not always be distinctly illustrated in drawings of devices and systems although it is inherently present therein.

Generally the following description is directed to Location based Service LBS application management. A platform is described that enables LBS applications to monitor the movement of constantly moving objects entities and to send and receive notifications triggered by events due to changes in location of those entities. Both large scale location updates and long standing and or one time spatio temporal queries may be processed in near real time. The design is scalable to varying amounts of information that may need to be processed in the system.

A location tracking framework is described that provides indexing and management of location information of individual or groups of moving objects termed entities henceforth . The framework also supports location based notification queries termed LBNs henceforth . The framework 

Processes LBN updates triggered by a changes in entity location information or b which are explicitly issued by entities.

Integrates the indexing and storage of entity locations and LBNs into one index structure called the spatial index henceforth.

Supports queries of up to date entity locations as well as historical records of entity locations e.g. trajectories .

Provides a versatile geographical projection interface to accommodate for location data generated in various Spatial Reference Systems.

The location tracking framework described herein may accommodate a variety of spatial reference systems for which appropriate geographic projection methods may be provided. For applications that target specific geographical regions location information may undergo a projection procedure before being indexed and stored.

Entities and LBNs may be associated with certain forms of location information such as latitude longitude coordinate values reported by a GPS device installed in a cargo truck or the outline of a warehouse storage building or a circular LBN area with a one mile radius around some entity such as a hiker. In some cases where the area or volume of the location information can be ignored a point may be used to represent the location information. In other cases where the area or volume of the location information cannot be ignored a more complex mathematical abstraction of the location information may be employed. Mathematically abstracted location information may be referred to as geometry .

Data structures and procedures to implement a location tracking framework in accordance with the principles and techniques described herein may be implemented via logic of one or more computing devices. These devices may be deployed in a network environment in customer locations and or by one or more service providers to name just a few examples.

An entity refers to an individual or a collective group of objects such as trucks on the road users with cell phones constantly on the move doctors and patients in a hospital or parts of airplanes in a warehouse building. Each entity in the system is uniquely identified by an Entity Identifier EID . An entity may or may not be associated with one or more Location Based Notifications.

Location based Notifications or LBNs refer to long standing queries with spatio temporal predicates. Each LBN is uniquely identified by its LBN Identifier LBNID . The LBNID can be composed in a variety of different ways. One method for constructing an LBNID is as a composite identifier comprising of the EID of the Entity the specific LBN is associated with and an entity specific local identifier.

The spatial predicates of LBNs determine the effective geographical regions of the LBNs in physical space such as a fixed rectangular region or an evolving circular region centered at a constantly moving entity. The temporal predicates of the LBNs dictate the time period s within which the spatial predicates shall stay effective. Examples of a temporal predicate are between 3 00 and 4 00 this afternoon or every day between 3 00 and 4 00 in the afternoon or in the next 10 minutes etc.

Depending on whether they are associated with entities or not LBNs are classified into Entity LBNs and Independent LBNs. An example Entity LBN may look like While I am hiking send me a notification whenever there is a bear within mile radius of my location. And an example Independent LBN can be Notify the manager when contents within a certain area in the warehouse change. Overall Entity LBNs are associated with specific entities and are responsible for monitoring changes dictated by the entities that issued the LBNs. Independent LBNs are not tied to any specific Entity.

The Minimum Bounding Box MBB of a geometry refers to a region e.g. rectangular region for 2 D Cartesian geometry 3 D box for 3 D Cartesian geometry that most tightly bounds the geometry. An MBB is typically represented by a set of coordinate pairs one along each dimension of the space. The low and high coordinate values along a dimension are derived from the minimum and maximum of the coordinate values along this dimension of any point within this geometry respectively.

A trajectory of a moving object refers to a path it follows through space across time. Gathering the exact trajectory of a continuously moving object involves in theory collecting location information of the object for each infinitesimal time instant which is infeasible in reality. It is therefore a common practice to periodically sample location information of the moving object and approximate its trajectory by connecting the series of location information with line segments. Each of these line segments connects two pieces of time consecutive location information and is called a trajectory segment.

Universe refers to an application specific parameter that is the MBB of the projection of the geographical region that the application covers.

Geometry g1 is contained by geometry g2 if and only if all points contained within g1 are also contained within g2.

Geometry g1 is called the sub geometry of geometry g2 if and only if g1 is geometrically contained by g2.

Geometry g1 is maximally contained by geometry g2 if and only if g1 is geometrically contained by g2 and g1 is not geometrically contained by any sub geometry of g2. In the rest of this document we will refer to maximum geometrical containment simply as maximum containment.

The framework may interact with various entities using different geographical models. For example some systems may use floor and room coordinates while others use latitude and longitude coordinates. The framework may employ configurable geographical projection logic to map location coordinates in queries updates and other communications to a single coordinate system employed internally by the framework. A reverse mapping may occur for query results and other information communicated back to entities and others from the framework.

An interface to the system may provide notifications to and from the spatial index . The interface may provide queries and query results to and from the spatial index . The addition and removal of entities and notifications data may be accomplished via the interface via interactions with the frontline index .

The interface may serve as a front end interface to the system. The interface may communicate and interact with client applications parse client requests and communicate requests to the index . Client requests may include among other things 1 data requests such as entity registration and update 2 query requests such as long standing LBN query registration and update requests and 3 spatio temporal query requests. The interface may receive and parse information received from client applications and communicate this information to index in accordance with pre specified data or query processing protocols. For instance the interface may project latitude longitude coordinates gathered from GPS devices to coordinates recognizable by the index to be stored and processed properly.

The interface may receive LBN notifications and query results from the index and may pass these to the client applications. Results generated by the index may be processed and delivered to the client applications by the interface . To accommodate a wide variety of client applications the interface may be designed to comply with various communications protocols. As an example a client application that targets smartphones may have notifications delivered as SMS messages to individual users while a different client application that monitors the movement of fleet vehicles may obtain a handle on a database iterator for retrieval of more detailed information.

The index may comprise an up to date snapshot of existing entities and LBNs in the system and provide methods for managing and querying this information. As previously discussed the index comprises two components the frontline and the spatial index typically comprising a tree .

In a consistent state for certain embodiments the index may maintain a single instance of any entity or LBN information. It is possible however for the system to be temporarily in an inconsistent state which is discussed in more detail further into this descriptions. Resource allocation and management of entity and LBN instances may be achieved by the frontline . The frontline may temporarily keep a current snapshot of entity LBN data in main memory. One choice for the frontline implementation is a single level hash table though in other embodiments choices such as tree based structures may be selected. In the rest of the description a hash function is assumed for ease of understanding. Memory blocks for both entities and LBNs in the system are allocated by the frontline . Previous systems e.g. SETI also employ a frontline structure. However the frontline of the present system differs from prior designs in that there are at least two storage modules in the frontline the entity hash and the LBN hash .

In one embodiment the entity hash is where up to date entity information is maintained together with the LBNs associated with individual entities. An appropriate mapping function such as a hash may be applied to an Entity EID to produce a mapped key used to store entities in the entity hash . The LBN hash on the other hand may be responsible for storing and managing Independent LBNs by applying a different hash function on the LBNID field of the Independent LBNs. The purpose of the entity hash and the LBN hash is to enable fast lookup of entities and LBNs respectively by their identifiers during registration and update processes.

Aside from the capability of managing entities and LBNs by their unique identifies another requirement the system may fulfill is the ability to manage and query the entities and LBNs by their geographical attributes e.g. the location of an Entity or the geographical region an LBN covers for instance. The index may enable this task by organizing entities and LBNs based upon their geographical attributes within the tree of the spatial index . The index may employ a wide range of spatial tree index structures such as a multi dimensional quadtree. A preferred embodiment is the multi dimensional quadtree to handle the highly dynamic nature of updates and accesses to this index the disjoint spatial partitioning and regular decomposition properties of the quadtree offers update efficiency and fast query operations. For the rest of this document the use of an underlying quadtree structure for the tree of the index is assumed.

Thus as described in some implementations the frontline index may comprise a first hash table storing information about entities and entity LBNs entity LBN hash and a second hash table storing information about Independent LBNs LBN hash . Likewise the spatial index may in some embodiments also comprise separate trees for a entities and entity LBNs and b Independent LBNs.

Entity motion may result in reconfiguration of the spatial index as further explained below. For example if an entity moves significantly so that its geometry is no longer contained in the MBB of the present node it occupies in the spatial index the entity may be promoted i.e. removed from the present node and referenced instead from the parent node of the present node which has a more extensive MBB.

LBNs may also change nodes in the spatial index if for example they are updated or changed to reflect different geographical areas. The addition or deletion of entities and LBNs may result in changes to the frontline as well as to the spatial index .

The boxes labeled N in represent geographical partitions that are in turn represented by nodes in the spatial index tree embodiment of . The I symbols identify LBNs contained within the geometry of the various partitions. The E symbols identify entities contained within the geometry of the various partitions. The LBNs and entities are organized into LBN and entity indexes L and E respectively no subscripts e.g. sets of pointers to entity and LBN information in the frontline index .

Entities and LBNs that span multiple partitions are contained by the smallest partition that contains all the partitions that the entity or LBN spans e.g. the partition whose MBB maximally contains the MBB of the LBN entity. Thus for example Eand Iare contained in node N.

The basic storage unit of the index tree is a node. Nodes N have a structure comprising a geographical bounding box a number of pointers that are used to identify any child nodes that may exist an Entity Index E and an LBN Index L . Instances of entities and LBNs are referenced in the tree from nodes for example using pointers to their actual instances in the frontline .

To ensure efficient execution of update and query operations on entities entities within the geometry of a node may be organized by their location information in an index structure local to the node. This index structure is called the node specific entity index or entity index E for short. Likewise LBNs within the geometry of a node may be organized by their location information in an index structure local to the node. This index structure is called the node specific LBN index or L for short.

In five circular LBNs and four point entities are shown each labeled Ito Iand Eto E respectively. Nine nodes are shown labeled Nto N respectively with Nbeing the root node Nthrough Nbeing level one nodes and Nthrough Nbeing level two nodes which are incidentally all child nodes of N. In this example LBN Icrosses the partition boundaries of root node Nand entity Efalls exactly on the partition boundary so they are considered maximum contained by root node Nand are thus distributed into the LBN index and entity index of N respectively. In a similar fashion LBN Iis distributed into node N. LBN Iand entity Eare contained by both root node Nand level one node N. However because Nis the child node of Nand it does not have any child nodes for itself both Iand Eare therefore distributed into node N. Similarly Iand Eare distributed into N Eis distributed into N and Iis distributed into N.

This distribution method results in the tree structure shown in . Because quadtrees are dynamically adjusted to the distribution of the data empty nodes such as N N and Nare not created and are thus not shown in the structure. The entity index and LBN index within a node are also dynamically created as new entries are distributed into the node thus empty entity and LBN indexes do not appear in the structure either.

Both the entity index E and LBN index L within a tree node may use the MBB of their entries as the index key and follow similar distribution methods. It therefore may be possible to combine the two indexes into one simplified structure where entity and LBN entries can be distinguished from each other simply by pre assigned type tags. The advantages of doing so are that the overall storage structure becomes simpler and the probing operations as will be described later incur one tree traversal and are thus made simple. On the other hand the single structure approach also has its disadvantages. By combining both entities and LBNs into one structure the number of index entries increases significantly and the tree structure becomes significantly larger which results in slower tree traversals. Each traversal will also incur significantly more index entries on which additional processing time needs to be spent. Thus in many implementations separate index structures for entities and LBNs within each node are preferred.

The geographical bounding box of the root node Nin the tree normally represents the Minimum Bounding Box MBB of the Universe which is an application specific parameter that specifies the largest possible geographical region that the application covers. For example in the case of a fleet management application that tracks all the transportation trucks within the state of Michigan the Universe is the geographical region of the state of Michigan and the MBB of the root node is then set to the smallest rectangular region that entirely encloses the state of Michigan. Depending on the actual implementation of the tree the spatial partitioning and the decomposition schemes may vary. With a multi dimensional quadtree implementation for instance a disjoint partitioning and regular decomposition scheme is employed in which usually a number of split points are specified along each dimension of the parent MBB using certain heuristics and the same heuristics are applied recursively to later splits and partitioning as the tree grows in depth. On the other hand R tree employs a different set of partitioning and decomposition schemes that may result in very different tree structure. Various partitioning schemes differ only in the effectiveness of the tree structure in effecting searches and updates and do not affect the correctness of the general scheme of the algorithms.

Child pointers of a node are small memory blocks that store the memory addresses of child nodes. Child pointers of a newly created node may be initialized as null pointers and only instantiated when the node splits and child nodes need to be created. The maximum number of child pointers a node can contain is a system parameter and may be determined by the partitioning scheme namely the number of partitions a node can be geographically split into dictates the number of children the node can have.

The entity index E may accommodate entity location information that can be either geometric points or geographical regions. Therefore the entity index E may be built on the MBB information of the entities geometry which is the common practice in spatio temporal database research and development. The advantages of using MBB as the index key are straightforward.

Spatial relations between MBBs usually involve only a few inequality tests and may be much simpler and faster to determine than spatial relations between more complex geometries such as polygons circles or other irregular geometric shapes. Using MBB as the index key enables the quick pruning out of index entries that do not qualify as results. Thus a much smaller set of potential candidates is obtained which are then more thoroughly examined by retrieving the exact location information from the frontline .

When the number of entities contained within a node is relatively small a lightweight flat index structure is more desirable than a complex hierarchical structure such as the R tree or the quadtree. There are a number of choices possible for the implementation of the entity index E in a node among which two methods are preferred embodiments. The first method to organize the entities is to use a flat sorted list in which the entities are sorted by their coordinates along a chosen dimension top so that a plane sweeping technique may be used to speed up the query processing. The other preferred method is to partition the MBB of the node to smaller spatial units called grids and use linear hash functions on the coordinates of the entities to distribute them into the grids bottom .

Similar to the node specific entity index E nodes of the tree may also comprise an LBN index L to organize pointers to LBNs contained by the node for fast update and querying purposes. MBB of LBNs may be used as index keys in the LBN index L and the LBNs within the LBN index L may be organized using similar methods to those in the entity index E.

In the lower illustration shows another embodiment of a notification index organization within a node of the spatial tracking index. This organization takes advantage of situations where all LBNs circles have a geometry that intersects one of the centerlines of the MBB of the node they are in. A band width is chosen implementation specific and a band of that width is defined along each center split line. LBNs that fall within the bands are organized by the coordinate of their center point or other anchor point along the dimension of the band they are contained within. LBNs that don t fit completely into any band may be organized into a separate sorted list arranged according to for example one of the schemes described above e.g. sorted by sparsest coordinate etc. 

Incoming client requests may be classified into various request categories entity updates LBN updates or one time spatio temporal queries by the interface . The classified requests may then passed into a geographical projection module which dynamically adapts to the Spatial Reference System of the incoming data and transforms the incoming requests into formats recognizable by the index . Upon reception of LBN notifications and query results from the index the interface may perform a geographical back projection and respond to the client applications accordingly.

Client requests may include entity updates LBN updates and one time spatio temporal queries. Upon receiving a projected entity update request a lookup may be performed on the frontline to locate the entry of the entity if it exists. If the entity update request is the initial registration of an entity then the entity may be inserted into the frontline with an EID assigned to it after which an entity insertion operation is performed on the tree e.g. a pointer is inserted in the tree in the appropriate entity index . On the other hand if an old entry of the entity is located then an update is performed for the entity on the frontline . During the entity update on the frontline the old information of the entity may be retrieved from the frontline entity hash and temporarily retained and the new entry then inserted into the frontline entity hash . Both old and new entity information may then be used to perform an entity update on the tree . During both entity insertion and update operations LBNs in the tree may be triggered and if so notifications may be fed back to the interface to form responses to the client applications.

Entity insert operations in the tree begin from the root node N. The insert operation may begin with a test for maximum containment of the entity geometry with respect to the MBB of the node under consideration. If the test fails then the child nodes are tested and the insertion is propagated down the tree . Otherwise if the test succeeds the entity simply inserted into the entity index E of the node under consideration. After the insertion of the entity if the entity has LBNs associated with it then the LBN insertion routine is invoked for each of the LBNs that belongs to the entity. Entity deletion from the tree is similar to the insertion operation described above.

Entity updates on the tree e.g. due to entity movement may be processed as deletions of old entity information followed by insertions of new entity information. In one embodiment update operations begin at the root node Nof the tree and make two traversals down the tree one for deletion of the old entry and one for insertion of the new entry. When entity updates are issued frequently the change in location by the entity between updates is usually relatively small and thus it is likely that two consecutive updates of an entity will remain in the same index node most of the time.

The processing of LBNs in the index is similar to that of entities due to the fact that both LBNs and entities are organized by their geographical properties in the tree. However depending on whether the LBN being processed is associated with an entity or not the procedure in the frontline varies slightly. Procedures involving entity LBNs utilize the entity hash as entity LBNs may be stored within entities which are in turn stored in the entity hash . Procedures involving independent LBNs execute on the LBN hash which stores and organizes independent LBNs by their LBNID. During LBN insertion and update procedures the entity index E of the node of the tree comprising the entity is probed for conditions that may trigger the LBN currently being processed.

Similar to the insertion of entities into the tree the insertion of LBNs may also be a recursive procedure that begins from the root node Nand propagates down the tree . The LBN is tested for whether it is maximum contained in the node under consideration. If the LBN is not maximum contained by the node then the appropriate child node is located and the insertion test is repeated. If the LBN is maximum contained by the node it is inserted into the LBN index within the node and a recursive probing procedure is then invoked to scan the entity index E of the node where the LBN was inserted as well as all entity indexes in the sub tree rooted from the node where the LBN was inserted. Probing when an LBN is inserted also may involve filtering and refinement as discussed with respect to entity insertion updates below.

Deletion of an old LBN from the DUET Tree is a relatively simpler process as compared to the insertion of a new LBN with the assumption that usually when an LBN is to be deleted no further notifications will be required by the client. As is shown in the deletion of an LBN from a DUET Tree node simply involves locating the LBN entry and removing it from the LBN index when found.

A one time spatio temporal query may be processed similar to the manner in which LBNs are processed with the exception that since the query is not long standing it may be unnecessary to perform update operations on the LBN indexes L . A one time spatio temporal query mainly involves a time validity check on the temporal predicate of the query followed by a probe on the entity index E.

In certain client applications such as doctor patient movement tracking application within a hospital it is natural to categorize entities and LBNs into classes based on their demographic properties. For example an LBN may be issued to monitor the movements of all patients within a certain ward. To keep track of such an LBN the above described methods are still applicable. However the efficiency of these methods may be compromised by the fact that during an entity index probe entries for both patients and doctors are retrieved for evaluation on spatial predicates which may prove to be unnecessary. To address this particular inefficiency issue multiple entity and LBN indexes with classification tags may be maintained within a node so that irrelevant entities or LBNs can be ignored by checking the classification tag and focusing the processing on the classification specific indexes.

Upon successful insertion of an entity the LBN indexes of the node into which it is inserted together with those of its children are probed . The LBNs whose spatio temporal predicates are triggered by the entity are identified and notifications are generated for each one. Probes may also be initiated due to entity updates e.g. movement of the entity and one time queries from client applications.

Probing of the LBN indexes may be performed in two stages the filtering stage and the refinement stage. During the filtering stage the geometrical relations between the MBB of the inserted or moved entity and the LBN MBBs are examined to test for whether LBN conditions are triggered by the entity s location. If LBN conditions are met during the filtering stage the LBN is identified as a candidate for triggering but may not yet be triggered until after the refinement stage.

Assume that an LBN index within a node is implemented as a sorted list on the lower boundary of the MBB of the LBNs along the designated dimension see top illustration . In the LBNs are circular regions with point entities at the center. The LBN index may be scanned linearly starting from the beginning of the list and concluding when the first LBN entry is encountered with a lower boundary greater than the coordinate of the entity under consideration black circle along the designated dimension. The result in the hatched probe region in top illustration. At the end of the filtering stage a set of candidate LBNs are identified and the refinement stage is performed on the candidate LBN set during which the exact geometries for both the entity and the LBNs in the candidate set are retrieved and the LBN conditions are examined over the exact geometrical relations between the entity and the candidate LBNs. Candidate LBNs which pass the refinement stage are triggered.

Depending on how the entity index E is implemented within the nodes of the tree different filtering techniques may apply during the LBN insertion process. illustrates two approaches. top illustration shows the filtering technique when the entity index E is implemented as a flat sorted list see top illustration . In this case a rectangular sweeping region is formed which is bounded in the designated dimension by the lower and upper bounds of the MBB of the LBN being inserted shown as the hatched region in . Assuming that the LBN triggering condition is that the entity geometry is contained in the LBN geometry four candidate entities dark circles in the hatched region are identified from the entity index E for consideration in the further refinement stage.

In lower illustration a grid partition implementation of the entity index E is assumed see bottom illustration . In this example the MBB of the LBN is used as the probing region and entities dark circles in the hatched region inside the four grids in the shaded rectangular region that overlap with the MBB are retrieved for further refinement stage.

During both entity insertion and deletion operations within a tree node the LBN index probing phase may be the most costly operation in terms of computation resources. Many entity updates may be processed by traversing the index tree with the old entry and the new entry of the entity simultaneously thus reducing the computational resources consumed by probing.

The network provides a communication fabric between various system components. In some implementations the load balance and servers may communicate with one another via the network as well. The mobile device may communicate location information to the location tracking system which may be implemented at least partially as logic of the servers . The mobile device and or the personal computer may comprise logic to host features of one or more location tracking applications and or the location tracking interface as described herein. The load balance serves to distribute among the servers queries and other functions requiring processing by the location tracking system. The servers host logic of the location tracking framework and comprise computational resources such as one or more processors memory technologies dynamic RAM persistent read only etc. . The database may comprise data and data structures to implement one or more of the frontline and the spatial index .

Those having skill in the art will appreciate that there are various vehicles by which processes and or systems described herein can be effected e.g. hardware software and or firmware and that the preferred vehicle will vary with the context in which the processes are deployed. For example if an implementer determines that speed and accuracy are paramount the implementer may opt for a hardware and or firmware vehicle alternatively if flexibility is paramount the implementer may opt for a solely software implementation or yet again alternatively the implementer may opt for some combination of hardware software and or firmware. Hence there are several possible vehicles by which the processes described herein may be effected none of which is inherently superior to the other in that any vehicle to be utilized is a choice dependent upon the context in which the vehicle will be deployed and the specific concerns e.g. speed flexibility or predictability of the implementer any of which may vary. Those skilled in the art will recognize that optical aspects of implementations may involve optically oriented hardware software and or firmware.

The foregoing detailed description has set forth various embodiments of the devices and or processes via the use of block diagrams flowcharts and or examples. Insofar as such block diagrams flowcharts and or examples contain one or more functions and or operations it will be understood as notorious by those within the art that each function and or operation within such block diagrams flowcharts or examples can be implemented individually and or collectively by a wide range of hardware software firmware or virtually any combination thereof. Several portions of the subject matter described herein may be implemented via Application Specific Integrated Circuits ASICs Field Programmable Gate Arrays FPGAs digital signal processors DSPs or other integrated formats. However those skilled in the art will recognize that some aspects of the embodiments disclosed herein in whole or in part can be equivalently implemented in standard integrated circuits as one or more computer programs running on one or more computers e.g. as one or more programs running on one or more computer systems as one or more programs running on one or more processors e.g. as one or more programs running on one or more microprocessors as firmware or as virtually any combination thereof and that designing the circuitry and or writing the code for the software and or firmware would be well within the skill of one of skill in the art in light of this disclosure. In addition those skilled in the art will appreciate that the mechanisms of the subject matter described herein are capable of being distributed as a program product in a variety of forms and that an illustrative embodiment of the subject matter described herein applies equally regardless of the particular type of signal bearing media used to actually carry out the distribution. Examples of a signal bearing media include but are not limited to the following recordable type media such as floppy disks hard disk drives CD ROMs digital tape and computer memory and transmission type media such as digital and analog communication links using TDM or IP based communication links e.g. packet links .

In a general sense those skilled in the art will recognize that the various aspects described herein which can be implemented individually and or collectively by a wide range of hardware software firmware or any combination thereof can be viewed as being composed of various types of electrical circuitry. Consequently as used herein electrical circuitry includes but is not limited to electrical circuitry having at least one discrete electrical circuit electrical circuitry having at least one integrated circuit electrical circuitry having at least one application specific integrated circuit electrical circuitry forming a general purpose computing device configured by a computer program e.g. a general purpose computer configured by a computer program which at least partially carries out processes and or devices described herein or a microprocessor configured by a computer program which at least partially carries out processes and or devices described herein electrical circuitry forming a memory device e.g. forms of random access memory and or electrical circuitry forming a communications device e.g. a modem communications switch or optical electrical equipment .

Those skilled in the art will recognize that it is common within the art to describe devices and or processes in the fashion set forth herein and thereafter use standard engineering practices to integrate such described devices and or processes into larger systems. That is at least a portion of the devices and or processes described herein can be integrated into a network processing system via a reasonable amount of experimentation.

The foregoing described aspects depict different components contained within or connected with different other components. It is to be understood that such depicted architectures are merely exemplary and that in fact many other architectures can be implemented which achieve the same functionality. In a conceptual sense any arrangement of components to achieve the same functionality is effectively associated such that the desired functionality is achieved. Hence any two components herein combined to achieve a particular functionality can be seen as associated with each other such that the desired functionality is achieved irrespective of architectures or intermedial components. Likewise any two components so associated can also be viewed as being operably connected or operably coupled to each other to achieve the desired functionality.

