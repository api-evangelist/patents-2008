---

title: System and method for detecting and storing file identity change information within a file system
abstract: A system and method for detecting and storing file identity change information within a file system. In one embodiment, the system may include a storage device configured to store a plurality of files and a file system configured to manage access to the storage device. The file system may be configured to detect an operation to modify an identity of a first file stored on the storage device and, subsequent to detecting the operation, store a record of the operation associated with the first file, where the record includes a signature corresponding to the first file.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07912866&OS=07912866&RS=07912866
owner: Symantec Operating Corporation
number: 07912866
owner_city: Mountain View
owner_country: US
publication_date: 20080204
---
This application is a continuation of U.S. patent application Ser. no. 10 723 704 entitled System and Method for Detecting and Storing File Identity Change Information Within a File System filed Nov. 26 2003 now U.S. Pat. No. 7 328 217 issued Feb. 5 2008.

Computer systems often process large quantities of information including application data and executable code configured to process such data. In numerous embodiments computer systems provide various types of mass storage devices configured to store data such as magnetic and optical disk drives tape drives etc. To provide a regular and systematic interface through which to access their stored data such storage devices are frequently organized into hierarchies of files by software such as an operating system. Often a file defines a minimum level of data granularity that a user can manipulate within a storage device although various applications and operating system processes may operate on data within a file at a lower level of granularity than the entire file.

In many conventional file based computer systems files may be created destroyed and manipulated with relatively few constraints. Typically files may be arbitrarily named subject to operating system conventions and often unlimited numbers of exact copies of existing files may be made with ease subject only to available storage capacity. While such ease of data proliferation may simplify system operation for the user it may also result in inefficient use of storage devices. For example storage devoted to multiple identical copies of a given file may be redundant and therefore wasted. Further if a user creates multiple copies of a given file gives each a unique identity and then proceeds to work with each file individually the relationships among files such as their common origin type and degree of common content may be obscured over time. Still further not all types of files may be equally well suited to a given type of storage available in a system. For example recently used data files may be more likely to be used again in the future and therefore good candidates to be stored in faster storage such as a disk drive but files unlikely to be used again may be better suited to be stored on a tape drive.

Attempting to track file operations as they occur to thereby gather greater information about such operations is complicated by the problem of how such operations may be detected. In most operating system embodiments application programs may be isolated from one another during execution such that one application may only detect the effects of another such as a write to a given file after the fact. However at the point a file operation e.g. a modification or copy operation is visible to another application the operation may have already occurred and information regarding the source of the operation may no longer be available.

Various embodiments of a system and method for detecting and storing file identity change information within a file system are disclosed. In one embodiment the system may include a storage device configured to store a plurality of files and a file system configured to manage access to the storage device. The file system may be configured to detect an operation to modify an identity of a first file stored on the storage device and subsequent to detecting the operation store a record of the operation associated with the first file where the record includes a signature corresponding to the first file.

In one specific implementation of the system the operation may correspond to a file create operation a file delete operation a file rename operation or a file copy operation. In another specific implementation of the system the record may be stored in a named stream corresponding to the first file the file system may include a history stream and wherein the file system may be further configured to store an indication of the operation in the history stream in response to storing the record in the named stream. In yet another specific implementation of the system the record is stored in a database configured to store a plurality of entries and wherein the database is further configured to respond to a query of the plurality of entries.

A method is also contemplated which in one embodiment may include storing a plurality of files detecting an operation to modify an identity of a first stored file and subsequent to detecting the operation storing a record of the operation associated with the first stored file wherein the record includes a signature corresponding to the first stored file.

According to another aspect of the invention a system is contemplated that may include a storage device configured to store a plurality of files and a file system configured to manage access to the storage device. The file system may be further configured to determine a file lineage relationship between a first file and a second file. In one specific implementation of the system determining the file lineage relationship may include determining whether the first file and the second file are members of the same lineage pool. In another specific implementation of the system determining the file lineage relationship may include determining whether the first file is an ancestor of the second file.

While the invention is susceptible to various modifications and alternative forms specific embodiments thereof are shown by way of example in the drawings and will herein be described in detail. It should be understood however that the drawings and detailed description thereto are not intended to limit the invention to the particular form disclosed but on the contrary the intention is to cover all modifications equivalents and alternatives falling within the spirit and scope of the present invention as defined by the appended claims.

Turning now to a block diagram of one embodiment of a storage system is shown. In the illustrated embodiment storage system includes a plurality of host devices and coupled to a plurality of storage devices and via a system interconnect . Further host device includes a system memory in the illustrated embodiment. For simplicity of reference elements referred to herein by a reference number followed by a letter may be referred to collectively by the reference number alone. For example host devices and and storage devices and may be referred to collectively as host devices and storage devices .

In various embodiments of storage system host devices may be configured to access data stored on one or more of storage devices . In one embodiment storage system may be implemented within a single computer system for example as an integrated storage server. In such an embodiment for example host devices may be individual processors system memory may be a cache memory such as a static RAM SRAM storage devices may be mass storage devices such as hard disk drives or other writable or rewritable media and system interconnect may include a peripheral bus interconnect such as a Peripheral Component Interface PCI bus. In some such embodiments system interconnect may include several types of interconnect between host devices and storage devices . For example system interconnect may include one or more processor buses not shown configured for coupling to host devices one or more bus bridges not shown configured to couple the processor buses to one or more peripheral buses and one or more storage device interfaces not shown configured to couple the peripheral buses to storage devices . Storage device interface types may in various embodiments include the Small Computer System Interface SCSI AT Attachment Packet Interface ATAPI Firewire and or Universal Serial Bus USB for example although numerous alternative embodiments including other interface types are possible and contemplated.

In an embodiment of storage system implemented within a single computer system storage system may be configured to provide most of the data storage requirements for one or more other computer systems not shown and may be configured to communicate with such other computer systems. In an alternative embodiment storage system may be configured as a distributed storage system such as a storage area network SAN for example. In such an embodiment for example host devices may be individual computer systems such as server systems system memory may be comprised of one or more types of dynamic RAM DRAM storage devices may be standalone storage nodes each including one or more hard disk drives or other types of storage and system interconnect may be a communication network such as Ethernet or Fibre Channel. A distributed storage configuration of storage system may facilitate scaling of storage system capacity as well as data bandwidth between host and storage devices.

In still another embodiment storage system may be configured as a hybrid storage system where some storage devices are integrated within the same computer system as some host devices while other storage devices are configured as standalone devices coupled across a network to other host devices . In such a hybrid storage system system interconnect may encompass a variety of interconnect mechanisms such as the peripheral bus and network interconnect described above.

It is noted that although two host devices and two storage devices are illustrated in it is contemplated that storage system may have an arbitrary number of each of these types of devices in alternative embodiments. Also in some embodiments of storage system more than one instance of system memory may be employed for example in other host devices or storage devices . Further in some embodiments a given system memory may reside externally to host devices and storage devices and may be coupled directly to a given host device or storage device or indirectly through system interconnect .

In many embodiments of storage system one or more host devices may be configured to execute program instructions and to reference data thereby performing a computational function. In some embodiments system memory may be one embodiment of a computer accessible medium configured to store such program instructions and data. However in other embodiments program instructions and or data may be received sent or stored upon different types of computer accessible media. Generally speaking a computer accessible medium may include storage media or memory media such as magnetic or optical media e.g. disk or CD ROM included in storage system as storage devices . A computer accessible medium may also include volatile or non volatile media such as RAM e.g. SDRAM DDR SDRAM RDRAM SRAM etc. ROM etc that may be included in some embodiments of storage system as system memory . Further a computer accessible medium may include transmission media or signals such as electrical electromagnetic or digital signals conveyed via a communication medium such as network and or a wireless link which may be included in some embodiments of storage system as system interconnect .

In some embodiments program instructions and data stored within a computer accessible medium as described above may implement an operating system that may in turn provide an environment for execution of various application programs. For example a given host device may be configured to execute a version of the Microsoft Windows operating system the Unix operating system the Apple Macintosh operating system or another suitable operating system. Additionally a given host device may be configured to execute application programs such as word processors web browsers and or servers email clients and or servers and multimedia applications among many other possible applications.

During execution on a given host device either the operating system or a given application may generate requests for data to be loaded from or stored to a given storage device . For example code corresponding to portions of the operating system or an application itself may be stored on a given storage device so in response to invocation of the desired operation system routine or application program the corresponding code may be retrieved for execution. Similarly operating system or application execution may produce data to be stored.

Many operating system embodiments provide data and control structures for organizing the storage space provided by storage devices into files. In various embodiments the data structures may include one or more tables configured to store information such as for example the identity of each file its location within storage devices e.g. a mapping to a particular physical location within a particular storage device as well as other information about each file as described in greater detail below. Also in various embodiments the control structures may include executable routines for manipulating files such as for example function calls for changing file identity and for modifying file content as described in greater detail below. Collectively these data and control structures may be referred to herein as a file system and the particular data formats and protocols implemented by a given file system may be referred to herein as the format of the file system.

In some embodiments a file system may be integrated into the operating system such that any access to data stored on storage devices is governed by the control and data structures of the file system. Different operating systems may implement different native file systems using different formats but in some embodiments a given operating system may include a file system that supports multiple different types of file system formats including file system formats native to other operating systems. In such embodiments the various file system formats supported by the file system may be referred to herein as local file systems. Additionally in some embodiments a file system may be implemented using multiple layers of functionality arranged in a hierarchy as illustrated in .

As described above with respect to storage system of a given host device may reside in a different computer system from a given storage device and may access that storage device via a network. Likewise with respect to operating system in one embodiment a given process such as process A may execute remotely and may access storage devices over a network. In the illustrated embodiment file system includes network protocols to support access to the file system by remote processes. In some embodiments network protocols may include support for the Network File System NFS protocol or the Common Internet File System CIFS protocol for example although it is contemplated that any suitable network protocol may be employed and that multiple such protocols may be supported in some embodiments.

File system may be configured to support a plurality of local file systems. In the illustrated embodiment file system includes a VERITAS VxFS format local file system A a fast file system FFS format local file system B and a proprietary X format local file system X. However it is contemplated that in other embodiments any number or combination of local file system formats may be supported by file system . To provide a common interface to the various local file systems file system includes a virtual file system . In one embodiment virtual file system may be configured to translate file system operations originating from processes to a format applicable to the particular local file system targeted by each operation. Additionally in the illustrated embodiment operating system includes device drivers through which local file systems may access storage devices . Device drivers may implement data transfer protocols specific to the types of interfaces employed by storage devices . For example in one embodiment device drivers may provide support for transferring data across SCSI and ATAPI interfaces though in other embodiments device drivers may support other types and combinations of interfaces.

In the illustrated embodiment file system also includes filter driver . In some embodiments filter driver may be configured to monitor each operation entering file system and subsequent to detecting particular types of operations to cause additional operations to be performed or to alter the behavior of the detected operation. For example in one embodiment filter driver may be configured to combine multiple write operations into a single write operation to improve file system performance. In another embodiment filter driver may be configured to compute a signature of a file subsequent to detecting a write to that file. In still another embodiment filter driver may be configured to store information such as records associated with particular files subsequent to detecting certain kinds of operations on those files as described in greater detail below. It is contemplated that in some embodiments filter driver may be configured to implement one or more combinations of the aforementioned operations including other filter operations not specifically mentioned.

It is noted that filter driver is part of file system and not an application or process within user space . Consequently filter driver may be configured to operate independent of applications and processes within the user space . Alternatively or in addition to the above filter driver may be configured to perform operations in response to requests received from applications or processes within the user space .

It is further noted that in some embodiments kernel space may include processes not shown that generate accesses to storage devices similar to user space processes . In such embodiments processes executing in kernel space may be configured to access file system through a kernel mode API not shown in a manner similar to user space processes . Thus in some embodiments all accesses to storage devices may be processed by file system regardless of the type or space of the process originating the access operation.

Numerous alternative embodiments of operating system and file system are possible and contemplated. For example file system may support different numbers and formats of local file systems or only a single local file system . In some embodiments network protocol may be omitted or integrated into a portion of operating system external to file system . Likewise in some embodiments virtual file system may be omitted or disabled for example if only a single local file system is in use. Additionally in some embodiments filter driver may be implemented within a different layer of file system . For example in one embodiment filter driver may be integrated into virtual file system while in another embodiment an instance of filter driver may be implemented in each of local file systems .

As described above file system may be configured to manage access to a plurality of files stored on storage devices . In many embodiments each stored file may have an associated identity used by the file system to distinguish each file from other files. In one embodiment of file system the identity of a file may be a file name which may for example include a string of characters such as filename.txt . In embodiments of file system that implement a file hierarchy such as a hierarchy of folders or directories all or part of the file hierarchy may be included in the file identity.

In the course of execution operating system and or processes may generate operations configured to modify the identity of one or more files managed by file system . In one embodiment such identity modifying operations may include any of the following a file create operation a file delete operation a file rename operation or a file copy operation. For example a given process such as process A may receive a directive from a user to save work in a file with a corresponding identity that does not currently exist within file system or to delete a specified file. Process A may then respectively generate a file create operation to create a file with the specified file identity or a file delete operation to delete the specified file. Similarly process A may receive a directive from a user to rename or copy a given file to a file with a specified identity. Process A may then respectively generate a file rename operation or a file copy operation. In some embodiments certain identity modifying operations may be implemented using other identity modifying operations. For example a file rename operation may be implemented as a file create operation specifying the identity of the target file of the rename followed by a file delete operation specifying the identity of the source file of the rename .

In one embodiment file system may be configured to detect various kinds of identity modifying operations on files and to store records of such operations. illustrates one such embodiment of a file system. The embodiment of file system shown in may include those elements illustrated in the embodiment of however for sake of clarity some of these elements are not shown. In the illustrated embodiment file system includes filter driver an arbitrary number of files and a respective named stream associated with each of files . File system further includes a history stream a file mutation database and an update daemon . It is noted that a generic instance of one of files or named streams may be referred to respectively as a file or a named stream and that files and named streams may be referred to collectively as files and named streams respectively.

Files may be representative of files managed by file system . Each of files has a corresponding named stream . Each of named streams may be configured to store information about its corresponding file which may be referred to herein as metadata. In various embodiments metadata may include information such as but not limited to the file identity size ownership and file access permissions as well as records corresponding to detected identity modifying operations as described below. It is noted that files and named streams may be physically stored on one or more storage devices such as storage devices of . However for purposes of illustration files and named streams are shown as conceptually residing within file system .

In one particular embodiment file system may be configured to detect an operation to modify the identity of a file such as one of the identity modifying operations described above. In such an embodiment filter driver may be configured to detect the identity modifying operation when it is received by file system or at some later time. Subsequent to detecting the identity modifying operation filter driver may be configured to store a record of the detected operation in a named stream corresponding to the target file of the operation. For example if file is the target of the detected operation filter driver may store a record of the operation in corresponding named stream . It is contemplated that storage of a record may take place at any time subsequent to detection of the relevant operation. For example in one embodiment storage of the record may be delayed until the operation on file is complete while in another embodiment storage of the record may occur prior to completion of the operation. In the latter case if the operation is not guaranteed to complete i.e. is speculative filter driver may provide a mechanism to delete a record stored in advance of its corresponding operation in case the operation does not complete.

The record stored by filter driver subsequent to detecting an identity modifying operation may in various embodiments include various kinds of information about the file and the identity modifying operation detected such as the file identity file type file size file owner and or file permissions for example. In one embodiment the record may include a file signature indicative of the content of file . A file signature may be a hash type function of all or a portion of the file contents and may have the property that minor differences in file content yield quantifiably distinct file signatures. For example the file signature may employ the Message Digest 5 MD5 algorithm which may yield different signatures for files differing in content by as little as a single bit although it is contemplated that any suitable signature generating algorithm may be employed. In some embodiments filter driver may compute the file signature at the time the record of the identity modifying operation is detected or stored while in other embodiments filter driver may use a file signature that was computed prior to detection of the operation.

In one embodiment the record stored by filter driver subsequent to detecting an identity modifying operation may be generated and stored in Extensible Markup Language XML format although it is contemplated that in other embodiments any suitable format may be used. One example of an XML format record is as follows 

Filter driver may be configured to append a record similar to the one illustrated above to the named stream corresponding to a file subsequent to detecting an identity modifying operation of that file such as a create delete rename or copy operation. Additionally filter driver may be configured to append a similar record to a named stream corresponding to a file when a process modifies the contents of file without issuing an identity modifying operation to the file. For example in one embodiment filter driver may be configured to detect a file close operation to a file whose contents have been modified where the file close operation is issued by the last process having the modified file open. In other words multiple processes may have issued file open operations to a file that is subsequently modified and filter driver may be configured to detect the last of such processes to issue a file close operation. Subsequent to detecting such a last close of the modified file filter driver may be configured to update the signature associated with the file and to append a record including the updated signature to the named stream corresponding to file . Filter driver may thereby ensure that signatures reflected in records in named streams of files remain current without tracking each individual write of such files. Referring to the above example record filter driver may write the following example record to the named stream of file test1 foo.pdf upon detecting the last close of the file following modification 

Certain identity modifying file operations may involve more than one of files . For example file rename and file copy operations may involve one or more source files and a destination file where the destination file may or may not exist at the time the operation is performed. Subsequent to detecting identity modifying operations involving more than one file filter driver may be configured to mark the existing records if any in the named stream corresponding to the destination file as old and to append each record in the named streams corresponding to each source file to the named stream corresponding to the destination file. For example subsequent to the modification of file test1 foo.pdf shown above filter driver may detect a file rename operation to rename file test1 foo.pdf to file test1 destination.pdf which latter file may already exist and may have a number of records in its associated named stream . Subsequently filter driver may mark the existing records associated with file test1 destination.pdf as old and associate each of the records associated with file test1 foo.pdf in its named stream to the named stream of file test1 destination.pdf along with a new record indicating the identity change. Following this activity the content of the named stream of file test1 destination.pdf may include the following records 

It is noted that in some embodiments following the aforementioned processing of records filter driver may be configured to delete the records associated with the source file if the identity change operation is a file rename operation and to preserve the records associated with the source file if the identity modifying operation is a file copy operation. It is further noted that in some embodiments file rename or copy operations may result in associated metadata records being duplicated in multiple named streams whereas in other embodiments metadata records may be associated with additional files by linking a pointer to an existing record into a named stream of a destination file rather than copying the record to the named stream of the destination file.

In the illustrated embodiment file system includes history stream . History stream may be a named stream similar to named streams however rather than being associated with a particular file history stream may be associated directly with file system . In some embodiments file system may include only one history stream while in other embodiments more than one history stream may be provided. For example in one embodiment of file system including a plurality of local file systems as illustrated in one history stream per local file system may be provided.

In some embodiments filter driver may be configured to store a record in history stream in response to storing a record corresponding to an identity modifying operation in a given named stream . For example in response to storing a record subsequent to detecting an operation to modify the identity or the content of a file as described above filter driver may store a record indicative of the operation in history stream as well as the identity of the file operated on. History stream may thereby provide a centralized history of the identity modifying operations transpiring within file system .

In one embodiment the record stored by filter driver in history stream may be generated in Extensible Markup Language XML format although it is contemplated that in other embodiments any suitable format may be used. Referring to the example above in which file test1 foo.pdf was created modified and then renamed to file test1 destination.pdf in one embodiment history stream may include the following example records subsequent to the rename operation 

Update daemon may be configured as either a kernel mode or a user mode process operating within file system although it is contemplated that in some embodiments update daemon may be implemented external to file system . In the illustrated embodiment update daemon may scan the records stored in history stream at regular or irregular intervals. If a valid record is found for each destination file recorded in the history stream i.e. the file identified by the path field in the above example update daemon may be configured to access the corresponding named stream and to convey the records stored therein to file mutation database . In case a record stored in history stream indicates that a given file has been deleted update daemon may in one embodiment convey only that indication to file mutation database as the named stream corresponding to the deleted file may have also been deleted. In one embodiment update daemon may convey all records stored in the corresponding named stream while in other embodiments update daemon may convey only those records not previously conveyed to file mutation database . For example in one embodiment each record in each named stream may include a scanned field that may be tested and set by update daemon such that only unscanned records are conveyed to file mutation database . Similarly in various embodiments update daemon may mark records in history stream as they are scanned processing only unmarked records or may delete them from history stream after scanning.

It is noted that in an alternative embodiment history stream may be omitted from file system . In such an embodiment update daemon may be configured to scan all named streams within file system at regular or irregular intervals conveying all or only modified records to file mutation database . Further in another alternative embodiment both history stream and update daemon may be omitted from file system . In such an embodiment filter driver may signal file mutation database directly upon generating a record such as via a software interrupt or function call for example. Filter driver may be configured to directly convey records to file mutation database in which case records may not be stored within named streams . Alternatively file mutation database may be configured to retrieve records directly from named streams in response to receiving notification from filter driver to do so.

In the illustrated embodiment file mutation database FMD is a database integrated with file system although it is contemplated that in other embodiments FMD may be implemented externally to file system . In various embodiments FMD may be configured as a kernel mode or a user mode process. FMD may be configured to store records in the same format as the records stored in named streams and history stream such as XML format records. However it is contemplated that file mutation database may implement any suitable database format or architecture. Further in some embodiments FMD or update daemon may be configured to convert records stored in one format within named streams and history stream to another format for storage within FMD . File system may provide an API through which various processes may submit database queries to FMD which may in turn be configured to respond to such queries.

Numerous types of queries of FMD are possible and contemplated dependent on the type of information included in the records of identity modifying operations generated by filter driver . For example in one embodiment whenever update daemon conveys a record from a named stream to FMD FMD may build a list identifying all files having file signatures identical to the one included in the conveyed record. Subsequently FMD may be queried to identify all files sharing the file signature corresponding to a given file identity.

Other types of queries may include queries to determine file lineage relationships among two or more files. Generally speaking file lineage relationships refer to the relationships created among files as a result of identity modifying operations. Queries to determine file lineage relationships may include lineage pool queries and file ancestor queries although other lineage relationships and associated queries are possible and contemplated. Files may be considered to be members of the same lineage pool if they share a common file signature at some point in time i.e. if each file has a record indicating the same file signature. A given file may be considered to be an ancestor of a given file if the first valid file signature of file i.e. the earliest record of file including a file signature matches some file signature of file . Using such records and queries file system may be configured to detect and track the identities of files as those identities evolve through the execution of identity modifying file operations. Such tracking may be useful for example in tracking the origins of properly or improperly modified files or in implementing effective storage policies such as allowing files with identical content but different identities to share storage.

Other embodiments of file system may be configured to determine file lineage relationships. For example in one embodiment FMD may be omitted and a query process may be configured to operate directly on records stored within named streams to determine file lineage relationships. In another embodiment named streams may be omitted and records may be stored at the time of generation directly within FMD or another type of repository for subsequent determination of file lineage relationships.

Subsequent to detection of the identity modifying operation a record of the operation is generated block . In some embodiments filter driver may be configured to generate this record and as described above in some embodiments the record may be in the XML format and may include information about the operation the file identity a signature corresponding to the file and other information as desired.

After the operation record is generated it is stored in a named stream corresponding to the file block . Additionally a history record of the operation is stored in a history stream block . As noted above filter driver may be configured in some embodiments to store the generated record in a named stream corresponding to the file targeted by the operation and may additionally be configured to store a history record such as described above in history stream .

The method of may in some embodiments operate in parallel to the method illustrated in . For example the method of may be implemented within update daemon . Referring collectively to through and operation begins in block where a history record corresponding to an identity modifying operation is detected within the history stream. As described above in one embodiment update daemon may be configured to scan history stream to detect history records not previously processed.

Once a history record is detected the records stored in the named stream of the file indicated in the history record are accessed and conveyed to the file mutation database block . As described above in one embodiment update daemon may be configured to access the named stream corresponding to a file indicated in the history record and convey the records included therein to file mutation database .

Other embodiments of these methods are possible and contemplated. For example as noted above in some embodiments of file system history stream may be omitted and update daemon may be configured to scan the entire file system to determine the presence of updated records. Also in some embodiments update daemon may be omitted and filter driver may communicate directly with file mutation database .

Upon detecting such a request the records corresponding to each file subject to the request may be examined block . For example in one embodiment FMD may be configured to identify the database records corresponding to each subject file. In another embodiment the records stored in named streams corresponding to the subject files may be scanned.

Subsequent to examination of the appropriate records it may be determined whether the subject files share a common signature in any of their collective records block . For example in one embodiment FMD may be configured to compare each unique signature indicated in the records of each subject file with each signature indicated in the records of every other subject file and to note signature matches. If a common signature exists among all subject files the subject files may be determined to be members of the same lineage pool block . Otherwise the subject files may be determined to be members of different lineage pools block .

Upon detecting such a request the records corresponding to each file subject to the request may be examined block . For example in one embodiment FMD may be configured to identify the database records corresponding to each subject file. In another embodiment the records stored in named streams corresponding to the subject files may be scanned.

Subsequent to examination of the appropriate records it may be determined whether the first valid signature of the second file is included as a signature of the first file block . For example in one embodiment FMD may be configured to compare the first valid signature of the second file with each unique signature indicated in the records of the first file and to note signature matches. If a matching signature exists the first file may be determined to be an ancestor of the second file block . Otherwise it may be determined that the first file is not an ancestor of the second file block . It is contemplated that in an alternative embodiment the method of may also be configured to determine whether the second file is an ancestor of the first file for example by modifying the step at block to include comparing the first valid signature of the first file with each unique signature indicated in the records of the second file and noting signature matches.

Referring once again to as described above file system may be configured to manage access to a plurality of files stored on storage devices . In addition to each file having an associated file identity as described above each file may have corresponding content. In various embodiments such content may include data such as text data image data sound data or application specific data such as Microsoft Word data for example. In other embodiments file content may include executable code. For example the content of a given file may include instructions that when executed perform the various functions of a program or application. File content may be stored via file system on storage devices using any encoding suitable for storage devices . For example file content may be stored on storage devices using a binary encoding.

In the course of execution operating system and or processes may generate input output I O operations configured to access the content of one or more files managed by file system . In some embodiments such I O operations may include a file read operation or a file write operation and in one embodiment a file write operation may be further categorized as either an appending write operation i.e. a write operation that appends content to a file or a random write operation i.e. a write operation that may overwrite the content of a file . For example a given process such as process A may receive a directive from a user to open an existing file to read its content or to save work in an existing file. Process A may then respectively generate a file read operation to read the content of the specified file or a file write operation such as an appending write operation to modify the content of the specified file. In some embodiments certain I O operations may invoke or be invoked by some of the identify modifying operations described above. For example if a given file identity does not exist a file write operation to that file identity may result in a file create operation being performed followed by a file write operation.

In some embodiments file system may be configured to aggregate file I O operations on a per process basis. For example file system may be configured to aggregate I O operations on a given file performed by a particular process from the time the file is opened until the time the file is closed by that particular process. This aggregation of I O operations may be referred to herein as a content access operation. It is contemplated that the degree of aggregation of I O operations into a single content access operation may vary in various embodiments. For example in one embodiment all read and write I O operations to a given file by a process between the opening and closing of the given file may be aggregated into a single content access operation. In another embodiment all such read I O operations may be aggregated into one content access operation and all such write I O operations may be aggregated into a second content access operation. In yet another embodiment each individual file I O operation may correspond to a single content access operation.

In some embodiments file system may be configured to detect various kinds of content access operations on files and to store records of such operations. illustrates one such embodiment of a file system. The embodiment of file system shown in may include those elements illustrated in the embodiment of however for sake of clarity some of these elements are not shown. Like the embodiment of the embodiment of file system illustrated in includes filter driver an arbitrary number of files and a respective named stream associated with each of files . File system further includes a history stream a file mutation database and an update daemon . As above a generic instance of one of files or named streams may be referred to respectively as a file or a named stream and that files and named streams may be referred to collectively as files and named streams respectively.

Files may be representative of files managed by file system . Each of files has a corresponding named stream . Each of named streams may be configured to store metadata about its corresponding file as described above in conjunction with the description of . As described in greater detail below in various embodiments metadata may include records corresponding to detected content access operations as well as the other kinds of information mentioned previously. As with the embodiment of it is noted that files and named streams may be physically stored on one or more storage devices such as storage devices of . However for purposes of illustration files and named streams are shown as conceptually residing within file system .

In one particular embodiment file system may be configured to detect an operation by a particular process of to access content of a file such as one of the content access operations described above. In such an embodiment filter driver may be configured to detect the content access operation when it is received by file system or at some later time. Subsequent to detecting the content access operation filter driver may be configured to store a record of the detected operation in a named stream corresponding to the target file of the operation. For example if file is the target of the detected operation filter driver may store a record of the operation in corresponding named stream . It is contemplated that storage of a record may take place at any time subsequent to detection of the relevant operation. For example in one embodiment storage of the record may be delayed until the operation on file is complete while in another embodiment storage of the record may occur prior to completion of the operation. In the latter case if the operation is not guaranteed to complete i.e. is speculative filter driver may provide a mechanism to delete a record stored in advance of its corresponding operation in case the operation does not complete.

The record stored by filter driver subsequent to detecting a content access operation may in various embodiments include various kinds of information about the file and the content access operation detected such as the file identity file type file size file owner file permissions content access type process identity and or process arguments for example. In one embodiment the record may include a file signature indicative of the content of file as described in detail above such as an MD5 signature for example.

In one embodiment the record stored by filter driver subsequent to detecting a content access operation may be generated and stored in Extensible Markup Language XML format although it is contemplated that in other embodiments any suitable format may be used. One example of an XML format record is as follows 

Additionally the date field records the date and time the record was created. The io field records information about the type of content access operation performed and may include subfields specific to the operation type such as read and or write the write subfield may further delimit information regarding the type of write such as append or random. The process field may include subfields recording information about the process performing the content access operation. The name subfield records the name of the process and the args subfield records the arguments given when the process was invoked. The pid ppid and pgrpid subfields record the process ID the ID of the parent of the process and the group ID of the process respectively. It is contemplated that in alternative embodiments filter driver may store records corresponding to content access operations that include more or fewer fields as well as fields having different definitions and content.

It is noted that in some embodiments file system may be configured to store records subsequent to detecting file content access operations as just described whereas in other embodiments file system may be configured to store records subsequent to detecting file identity modifying operations as described above in conjunction with the description of . It is contemplated that in still other embodiments file system may be configured to store records corresponding to both content access operations and identity modifying operations subsequent to detecting each respective type of operation. In one such embodiment both types of records may be stored within a single named stream corresponding to the file operated on while in another such embodiment each type of record may be stored in a distinct named stream corresponding to the file operated on. Further in some embodiments storing both types of records all stored records may follow the conventions described above for identity modifying operations regardless of record type. For example all stored records associated with a source file may be copied to the named stream of a destination file in the event of a file copy operation and all stored records associated with a given file may be marked as old subsequent to that file changing identity such as due to a file rename operation as described above.

In the illustrated embodiment file system includes history stream which may be exemplary of history stream of and described in detail above. In some embodiments filter driver may be configured to store a record in history stream in response to storing a record corresponding to a content access operation in a given named stream . For example in response to storing a record subsequent to detecting an operation to access the content of a file as described above filter driver may store a record indicative of the operation in history stream as well as the identity of the file operated on. History stream may thereby provide a centralized history of the content access operations transpiring within file system .

As noted above in one embodiment the record stored by filter driver in history stream may be generated in Extensible Markup Language XML format although it is contemplated that in other embodiments any suitable format may be used. Referring to the example above in which file test1 file.xls underwent an appending write operation in one embodiment history stream may include the following example record subsequent to the appending write operation 

In this example as in the previous history record example the op field of each record indicates the operation performed while the path field indicates the file identity of the file operated on. It is contemplated that in alternative embodiments filter driver may store within history stream records including more or fewer fields as well as fields having different definitions and content. For example in one embodiment records corresponding to all types of write content access operations e.g. appending and random may be indicated simply as modify records within history stream such as shown in the previous history record example.

Update daemon may be exemplary of update daemon of described in detail above. As in that embodiment update daemon may be configured as a kernel mode or user mode process operating within file system that may scan the records stored in history stream at regular or irregular intervals. If a valid record is found then for each destination file recorded in the history stream i.e. the file identified by the path field in the above example update daemon may be configured to access the corresponding named stream and to convey the records stored therein to file mutation database . As described in detail above update daemon may be configured to convey all records stored in the corresponding named stream or only records newly created since the named stream was last accessed by update daemon .

As in the embodiment of it is noted that in an alternative embodiment history stream may be omitted from file system . In such an embodiment update daemon may be configured to scan all named streams within file system at regular or irregular intervals conveying all or only modified records to file mutation database . Further in another alternative embodiment both history stream and update daemon may be omitted from file system . In such an embodiment filter driver may signal file mutation database directly upon generating a record such as via a software interrupt or function call for example. Additionally in some embodiments filter driver may be configured to store records subsequent to detected either identity modifying operations or content access operations. As noted above filter driver may store both types of records in a single named stream corresponding to a given file or in separate named streams. Update daemon may be appropriately configured to retrieve records from one or more named streams according to each such embodiment.

In the illustrated embodiment as for the embodiment illustrated in file mutation database FMD is a database integrated with file system although it is contemplated that in other embodiments FMD may be implemented externally to file system . FMD may be configured to store records in the same format as the records stored in named streams and history stream such as XML format records. However it is contemplated that file mutation database may implement any suitable database format or architecture. Further in some embodiments FMD or update daemon may be configured to convert records stored in one format within named streams and history stream to another format for storage within FMD . File system may provide an API through which various processes may submit database queries to FMD which may in turn be configured to respond to such queries.

Numerous types of queries of FMD are possible and contemplated dependent on the type of information included in the records of content access operations generated by filter driver . Such queries may be configured to classify sets of files based on how content access operations indicate that such files are used. For example in one embodiment the class of log files i.e. files used to log information regarding some aspect of a system s continuing operation may exhibit a common set of characteristics such as having appending writes but not random writes having far fewer reads than writes and having writes originating from a single process group rather than multiple process groups. In such an embodiment a query may be designed and issued to FMD to identify the files having records of content access operations satisfying these characteristics. Based on this and similar classifications different storage policies for file classes may be implemented. For example in one embodiment file system may assign files identified as log files through such a query to a lower speed class of storage device based on the heuristic that log files are typically infrequently accessed and therefore relatively performance insensitive. Numerous other queries corresponding to various file classes as well as storage policies for such file classes are possible and contemplated.

Subsequent to detection of the identity modifying operation a record of the operation is generated block . In some embodiments filter driver may be configured to generate this record and as described above in some embodiments the record may be in the XML format and may include information about the operation the file identity a signature corresponding to the file and other information as desired.

After the operation record is generated it is stored in a named stream corresponding to the file block . Additionally a history record of the operation is stored in a history stream block . As noted above filter driver may be configured in some embodiments to store the generated record in a named stream corresponding to the file targeted by the operation and may additionally be configured to store a history record such as described above in history stream .

As in the case of identity modifying operations described above the method of may in some embodiments operate in parallel to the method illustrated in . For example the method of may be implemented within update daemon . Referring collectively to and operation begins in block where a history record corresponding to a content access operation is detected within the history stream. As described above in one embodiment update daemon may be configured to scan history stream to detect history records not previously processed.

Once a history record is detected the records stored in the named stream of the file indicated in the history record are accessed and conveyed to the file mutation database block . As described above in one embodiment update daemon may be configured to access the named stream corresponding to a file indicated in the history record and convey the records included therein to file mutation database .

Other embodiments of these methods are possible and contemplated. For example as noted above in some embodiments of file system history stream may be omitted and update daemon may be configured to scan the entire file system to determine the presence of updated records. Also in some embodiments update daemon may be omitted and filter driver may communicate directly with file mutation database .

Although the embodiments above have been described in considerable detail numerous variations and modifications will become apparent to those skilled in the art once the above disclosure is fully appreciated. It is intended that the following claims be interpreted to embrace all such variations and modifications.

