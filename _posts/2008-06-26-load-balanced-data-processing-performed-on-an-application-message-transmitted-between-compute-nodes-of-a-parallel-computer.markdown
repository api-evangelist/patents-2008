---

title: Load balanced data processing performed on an application message transmitted between compute nodes of a parallel computer
abstract: Methods, apparatus, and products are disclosed for load balanced data processing performed on an application message transmitted between compute nodes of a parallel computer that include: identifying, by an origin compute node, an application message for transmission to a target compute node, the message to be processed by a data processing operation; determining, by the origin compute node, origin sub-operations used to carry out a portion of the data processing operation on the origin compute node; determining, by the origin compute node, target sub-operations used to carry out a remaining portion of the data processing operation on the target compute node; processing, by the origin compute node, the message using the origin sub-operations; and transmitting, by the origin compute node, the processed message to the target compute node for processing using the target sub-operations.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08108467&OS=08108467&RS=08108467
owner: International Business Machines Corporation
number: 08108467
owner_city: Armonk
owner_country: US
publication_date: 20080626
---
The field of the invention is data processing or more specifically methods apparatus and products for load balanced data processing performed on an application message transmitted between compute nodes of a parallel computer.

The development of the EDVAC computer system of 1948 is often cited as the beginning of the computer era. Since that time computer systems have evolved into extremely complicated devices. Today s computers are much more sophisticated than early systems such as the EDVAC. Computer systems typically include a combination of hardware and software components application programs operating systems processors buses memory input output devices and so on. As advances in semiconductor processing and computer architecture push the performance of the computer higher and higher more sophisticated computer software has evolved to take advantage of the higher performance of the hardware resulting in computer systems today that are much more powerful than just a few years ago.

Parallel computing is an area of computer technology that has experienced advances. Parallel computing is the simultaneous execution of the same task split up and specially adapted on multiple processors in order to obtain results faster. Parallel computing is based on the fact that the process of solving a problem usually can be divided into smaller tasks which may be carried out simultaneously with some coordination.

Parallel computers execute parallel algorithms. A parallel algorithm can be split up to be executed a piece at a time on many different processing devices and then put back together again at the end to get a data processing result. Some algorithms are easy to divide up into pieces. Splitting up the job of checking all of the numbers from one to a hundred thousand to see which are primes could be done for example by assigning a subset of the numbers to each available processor and then putting the list of positive results back together. In this specification the multiple processing devices that execute the individual pieces of a parallel program are referred to as compute nodes. A parallel computer is composed of compute nodes and other processing nodes as well including for example input output I O nodes and service nodes.

Parallel algorithms are valuable because it is faster to perform some kinds of large computing tasks via a parallel algorithm than it is via a serial non parallel algorithm because of the way modern processors work. It is far more difficult to construct a computer with a single fast processor than one with many slow processors with the same throughput. There are also certain theoretical limits to the potential speed of serial processors. On the other hand every parallel algorithm has a serial part and so parallel algorithms have a saturation point. After that point adding more processors does not yield any more throughput but only increases the overhead and cost.

Parallel algorithms are designed also to optimize one more resource the data communications requirements among the nodes of a parallel computer. There are two ways parallel processors communicate shared memory or message passing. Shared memory processing needs additional locking for the data and imposes the overhead of additional processor and bus cycles and also serializes some portion of the algorithm.

Message passing processing uses high speed data communications networks and message buffers but this communication adds transfer overhead on the data communications networks as well as additional memory need for message buffers and latency in the data communications among nodes. Designs of parallel computers use specially designed data communications links so that the communication overhead will be small but it is the parallel algorithm that decides the volume of the traffic.

Many data communications network architectures are used for message passing among nodes in parallel computers. Compute nodes may be organized in a network as a torus or mesh for example. Also compute nodes may be organized in a network as a tree. A torus network connects the nodes in a three dimensional mesh with wrap around links. Every node is connected to its six neighbors through this torus network and each node is addressed by its x y z coordinate in the mesh. In such a manner a torus network lends itself to point to point operations. In a tree network the nodes typically are organized in a binary tree arrangement each node has a parent and two children although some nodes may only have zero children or one child depending on the hardware configuration . In computers that use a torus and a tree network the two networks typically are implemented independently of one another with separate routing circuits separate physical links and separate message buffers. A tree network provides high bandwidth and low latency for certain collective operations such as for example an allgather allreduce broadcast scatter and so on.

A common data processing operation in parallel computing is an accumulate operation. In an accumulate operation data on a source compute node is scaled and combined with data on a destination compute node and the results are stored on the destination node. Such an accumulate operations is generally carried out by the destination node after receiving the initial data from the source node. The drawback to the current method of performing an accumulate operation is that after sending the data to the destination node the source node no longer participate in the data processing operations used to carry out the accumulate operation thereby resulting in the destination node having to bear most of the processing load. This unbalanced processing is undesirable because the source node s computing resources are not effectively utilized which wastes these valuable computing resources.

Methods apparatus and products are disclosed for load balanced data processing performed on an application message transmitted between compute nodes of a parallel computer that include identifying by an origin compute node an application message for transmission to a target compute node the message to be processed by a data processing operation determining by the origin compute node origin sub operations used to carry out a portion of the data processing operation on the origin compute node determining by the origin compute node target sub operations used to carry out a remaining portion of the data processing operation on the target compute node processing by the origin compute node the message using the origin sub operations and transmitting by the origin compute node the processed message to the target compute node for processing using the target sub operations.

The foregoing and other objects features and advantages of the invention will be apparent from the following more particular descriptions of exemplary embodiments of the invention as illustrated in the accompanying drawings wherein like reference numbers generally represent like parts of exemplary embodiments of the invention.

Exemplary methods apparatus and computer program products for load balanced data processing performed on an application message transmitted between compute nodes of a parallel computer according to embodiments of the present invention are described with reference to the accompanying drawings beginning with . illustrates an exemplary system for load balanced data processing performed on an application message transmitted between compute nodes of a parallel computer according to embodiments of the present invention. The system of includes a parallel computer non volatile memory for the computer in the form of data storage device an output device for the computer in the form of printer and an input output device for the computer in the form of computer terminal . Parallel computer in the example of includes a plurality of compute nodes that execute an application. The application is a set of computer program instructions that provide user level data processing.

Each compute node of may include a plurality of processors for use in executing an application on the parallel computer according to embodiments of the present invention. The processors of each compute node in are operatively coupled to computer memory such as for example random access memory RAM . Each compute node may operate in several distinct modes that affect the relationship among the processors and the memory on that node such as for example serial processing mode or parallel processing mode. The mode in which the compute nodes operate is generally set during the node s boot processes and does not change until the node reboots.

In serial processing mode often referred to a virtual node mode the processors of a compute node operate independently of one another and each processor has access to a partition of the node s total memory that is exclusively dedicated to that processor. For example if a compute node has four processors and two Gigabytes GB of RAM when operating in serial processing mode each processor may process a thread independently of the other processors on that node and each processor may access a 512 Megabyte MB portion of that node s total 2 GB of RAM.

In parallel processing mode often referred to as symmetric multi processing mode one of the processors acts as a master and the remaining processors serve as slaves to the master processor. Each processor has access to the full range of computer memory on the compute node. Continuing with the exemplary node above having four processors and 2 GB of RAM for example each slave processor may cooperatively process threads spawned from the master processor and all of the processors have access to the node s entire 2 GB of RAM.

The compute nodes are coupled for data communications by several independent data communications networks including a Joint Test Action Group JTAG network a global combining network which is optimized for collective operations and a torus network which is optimized point to point operations. The global combining network is a data communications network that includes data communications links connected to the compute nodes so as to organize the compute nodes as a tree. Each data communications network is implemented with data communications links among the compute nodes . The data communications links provide data communications for parallel operations among the compute nodes of the parallel computer. The links between compute nodes are bi directional links that are typically implemented using two separate directional data communications paths.

In addition the compute nodes of parallel computer are organized into at least one operational group of compute nodes for collective parallel operations on parallel computer . An operational group of compute nodes is the set of compute nodes upon which a collective parallel operation executes. Collective operations are implemented with data communications among the compute nodes of an operational group. Collective operations are those functions that involve all the compute nodes of an operational group. A collective operation is an operation a message passing computer program instruction that is executed simultaneously that is at approximately the same time by all the compute nodes in an operational group of compute nodes. Such an operational group may include all the compute nodes in a parallel computer or a subset all the compute nodes. Collective operations are often built around point to point operations. A collective operation requires that all processes on all compute nodes within an operational group call the same collective operation with matching arguments. A broadcast is an example of a collective operation for moving data among compute nodes of an operational group. A reduce operation is an example of a collective operation that executes arithmetic or logical functions on data distributed among the compute nodes of an operational group. An operational group may be implemented as for example an MPI communicator. 

 MPI refers to Message Passing Interface a prior art parallel communications library a module of computer program instructions for data communications on parallel computers. Examples of prior art parallel communications libraries that may be improved for use with systems according to embodiments of the present invention include MPI and the Parallel Virtual Machine PVM library. PVM was developed by the University of Tennessee The Oak Ridge National Laboratory and Emory University. MPI is promulgated by the MPI Forum an open group with representatives from many organizations that define and maintain the MPI standard. MPI at the time of this writing is a de facto standard for communication among compute nodes running a parallel program on a distributed memory parallel computer. This specification sometimes uses MPI terminology for ease of explanation although the use of MPI as such is not a requirement or limitation of the present invention.

Some collective operations have a single originating or receiving process running on a particular compute node in an operational group. For example in a broadcast collective operation the process on the compute node that distributes the data to all the other compute nodes is an originating process. In a gather operation for example the process on the compute node that received all the data from the other compute nodes is a receiving process. The compute node on which such an originating or receiving process runs is referred to as a logical root.

Most collective operations are variations or combinations of four basic operations broadcast gather scatter and reduce. The interfaces for these collective operations are defined in the MPI standards promulgated by the MPI Forum. Algorithms for executing collective operations however are not defined in the MPI standards. In a broadcast operation all processes specify the same root process whose buffer contents will be sent. Processes other than the root specify receive buffers. After the operation all buffers contain the message from the root process.

In a scatter operation the logical root divides data on the root into segments and distributes a different segment to each compute node in the operational group. In scatter operation all processes typically specify the same receive count. The send arguments are only significant to the root process whose buffer actually contains sendcount N elements of a given data type where N is the number of processes in the given group of compute nodes. The send buffer is divided and dispersed to all processes including the process on the logical root . Each compute node is assigned a sequential identifier termed a rank. After the operation the root has sent sendcount data elements to each process in increasing rank order. Rank receives the first sendcount data elements from the send buffer. Rank receives the second sendcount data elements from the send buffer and so on.

A gather operation is a many to one collective operation that is a complete reverse of the description of the scatter operation. That is a gather is a many to one collective operation in which elements of a datatype are gathered from the ranked compute nodes into a receive buffer in a root node.

A reduce operation is also a many to one collective operation that includes an arithmetic or logical function performed on two data elements. All processes specify the same count and the same arithmetic or logical function. After the reduction all processes have sent count data elements from computer node send buffers to the root process. In a reduction operation data elements from corresponding send buffer locations are combined pair wise by arithmetic or logical operations to yield a single corresponding element in the root process s receive buffer. Application specific reduction operations can be defined at runtime. Parallel communications libraries may support predefined operations. MPI for example provides the following pre defined reduction operations 

In addition to compute nodes the parallel computer includes input output I O nodes coupled to compute nodes through the global combining network . The compute nodes in the parallel computer are partitioned into processing sets such that each compute node in a processing set is connected for data communications to the same I O node. Each processing set therefore is composed of one I O node and a subset of compute nodes . The ratio between the number of compute nodes to the number of I O nodes in the entire system typically depends on the hardware configuration for the parallel computer. For example in some configurations each processing set may be composed of eight compute nodes and one I O node. In some other configurations each processing set may be composed of sixty four compute nodes and one I O node. Such example are for explanation only however and not for limitation. Each I O nodes provide I O services between compute nodes of its processing set and a set of I O devices. In the example of the I O nodes are connected for data communications I O devices through local area network LAN implemented using high speed Ethernet.

The parallel computer of also includes a service node coupled to the compute nodes through one of the networks . Service node provides services common to pluralities of compute nodes administering the configuration of compute nodes loading programs into the compute nodes starting program execution on the compute nodes retrieving results of program operations on the computer nodes and so on. Service node runs a service application and communicates with users through a service application interface that runs on computer terminal .

As described in more detail below in this specification the system of operates generally for load balanced data processing performed on an application message transmitted between compute nodes of a parallel computer according to embodiments of the present invention. The system of operates generally for load balanced data processing performed on an application message transmitted between compute nodes of a parallel computer according to embodiments of the present invention as follows An origin compute node identifies an application message for transmission to a target compute node. The message is to be processed by a data processing operation. The origin compute node determines origin sub operations used to carry out a portion of the data processing operation on the origin compute node. The origin compute node also determines target sub operations used to carry out a remaining portion of the data processing operation on a target compute node. The origin compute node then processes the message using the origin sub operations and transmits the processed message to the target compute node for processing using the target sub operations. Readers will note that the origin compute node is a compute node attempting to transmit a message while the target compute node is a compute node intended as the recipient of the message.

A data processing operation is an operation specified by an application that performs a particular data transformation task. The data processing operation is typically one of many data processing operations specified by a parallel application. An example of a data processing operation may include an accumulate operation. In an accumulate operation message data is scaled and added with other message data to yield an accumulation result. Data processing operations such as for example the accumulate operation may be broken down into sub operations. These sub operations are discrete primitive operations used to carry out the individual processing sub tasks that make up a data processing operation. Consider the accumulate data processing operation for example. The accumulate operation may be broken down in a multiplication sub operation and an addition sub operation. Together the multiplication sub operation and the addition sub operation carry out an accumulate operation but the two sub operations are in fact distinct primitive operations. Throughout this specification readers will note that origin sub operations are performed on the origin compute node while target sub operations are performed on the target compute node.

In the example of the plurality of compute nodes are implemented in a parallel computer and are connected together using a plurality of data communications networks . The point to point network is optimized for point to point operations. The global combining network is optimized for collective operations.

The arrangement of nodes networks and I O devices making up the exemplary system illustrated in are for explanation only not for limitation of the present invention. Data processing systems capable of load balanced data processing performed on an application message transmitted between compute nodes of a parallel computer according to embodiments of the present invention may include additional nodes networks devices and architectures not shown in as will occur to those of skill in the art. Although the parallel computer in the example of includes sixteen compute nodes readers will note that parallel computers capable of load balanced data processing performed on an application message transmitted between compute nodes of a parallel computer according to embodiments of the present invention may include any number of compute nodes. In addition to Ethernet and JTAG networks in such data processing systems may support many data communications protocols including for example TCP Transmission Control Protocol IP Internet Protocol and others as will occur to those of skill in the art. Various embodiments of the present invention may be implemented on a variety of hardware platforms in addition to those illustrated in .

Load balanced data processing performed on an application message transmitted between compute nodes of a parallel computer according to embodiments of the present invention may be generally implemented using a plurality of compute nodes. In fact such parallel computers may include thousands of such compute nodes. Each compute node is in turn itself a kind of computer composed of one or more computer processors its own computer memory and its own input output adapters. For further explanation therefore sets forth a block diagram of an exemplary compute node useful in a parallel computer capable of load balanced data processing performed on an application message transmitted between compute nodes of the parallel computer according to embodiments of the present invention. The compute node of includes one or more computer processors as well as random access memory RAM . The processors are connected to RAM through a high speed memory bus and through a bus adapter and an extension bus to other components of the compute node . Stored in RAM is an application program a module of computer program instructions that carries out parallel user level data processing using parallel algorithms. The application of allocates an application buffer for storing a message for transmission to another compute node that is a target compute node.

Also stored in RAM is a messaging module a library of computer program instructions that carry out parallel communications among compute nodes including point to point operations as well as collective operations. Application program executes collective operations by calling software routines in the messaging module . A library of parallel communications routines may be developed from scratch for use in systems according to embodiments of the present invention using a traditional programming language such as the C programming language and using traditional programming methods to write parallel communications routines that send and receive data among nodes on two independent data communications networks. Alternatively existing prior art libraries may be improved to operate according to embodiments of the present invention. Examples of prior art parallel communications libraries include the Message Passing Interface MPI library and the Parallel Virtual Machine PVM library.

The messaging module of is improved for load balanced data processing performed on an application message transmitted between compute nodes of a parallel computer according to embodiments of the present invention. The messaging module of operates generally for load balanced data processing performed on an application message transmitted between compute nodes of a parallel computer according to embodiments of the present invention by identifying an application message for transmission to a target compute node the message to be processed by a data processing operation determining origin sub operations used to carry out a portion of the data processing operation on the origin compute node determining target sub operations used to carry out a remaining portion of the data processing operation on the target compute node processing the message using the origin sub operations and transmitting the processed message to the target compute node for processing using the target sub operations.

Also stored in RAM is an operating system a module of computer program instructions and routines for an application program s access to other resources of the compute node. It is typical for an application program and parallel communications library in a compute node of a parallel computer to run a single thread of execution with no user login and no security issues because the thread is entitled to complete access to all resources of the node. The quantity and complexity of tasks to be performed by an operating system on a compute node in a parallel computer therefore are smaller and less complex than those of an operating system on a serial computer with many threads running simultaneously. In addition there is no video I O on the compute node of another factor that decreases the demands on the operating system. The operating system may therefore be quite lightweight by comparison with operating systems of general purpose computers a pared down version as it were or an operating system developed specifically for operations on a particular parallel computer. Operating systems that may usefully be improved simplified for use in a compute node include UNIX Linux Microsoft XP AIX IBM s i5 OS and others as will occur to those of skill in the art.

The exemplary compute node of includes several communications adapters for implementing data communications with other nodes of a parallel computer. Such data communications may be carried out serially through RS 232 connections through external buses such as USB through data communications networks such as IP networks and in other ways as will occur to those of skill in the art. Communications adapters implement the hardware level of data communications through which one computer sends data communications to another computer directly or through a network. Examples of communications adapters useful in systems for load balanced data processing performed on an application message transmitted between compute nodes of a parallel computer according to embodiments of the present invention include modems for wired communications Ethernet IEEE 802.3 adapters for wired network communications and 802.11b adapters for wireless network communications.

The data communications adapters in the example of include a Gigabit Ethernet adapter that couples example compute node for data communications to a Gigabit Ethernet . Gigabit Ethernet is a network transmission standard defined in the IEEE 802.3 standard that provides a data rate of 1 billion bits per second one gigabit . Gigabit Ethernet is a variant of Ethernet that operates over multimode fiber optic cable single mode fiber optic cable or unshielded twisted pair.

The data communications adapters in the example of includes a JTAG Slave circuit that couples example compute node for data communications to a JTAG Master circuit . JTAG is the usual name used for the IEEE 1149.1 standard entitled Standard Test Access Port and Boundary Scan Architecture for test access ports used for testing printed circuit boards using boundary scan. JTAG is so widely adapted that at this time boundary scan is more or less synonymous with JTAG. JTAG is used not only for printed circuit boards but also for conducting boundary scans of integrated circuits and is also useful as a mechanism for debugging embedded systems providing a convenient back door into the system. The example compute node of may be all three of these It typically includes one or more integrated circuits installed on a printed circuit board and may be implemented as an embedded system having its own processor its own memory and its own I O capability. JTAG boundary scans through JTAG Slave may efficiently configure processor registers and memory in compute node for use in load balanced data processing performed on an application message transmitted between compute nodes of a parallel computer according to embodiments of the present invention.

The data communications adapters in the example of includes a Point To Point Adapter that couples example compute node for data communications to a network that is optimal for point to point message passing operations such as for example a network configured as a three dimensional torus or mesh. Point To Point Adapter provides data communications in six directions on three communications axes x y and z through six bidirectional links x x y y z and z .

The data communications adapters in the example of includes a Global Combining Network Adapter that couples example compute node for data communications to a network that is optimal for collective message passing operations on a global combining network configured for example as a binary tree. The Global Combining Network Adapter provides data communications through three bidirectional links two to children nodes and one to a parent node .

Example compute node includes two arithmetic logic units ALUs . ALU is a component of processor and a separate ALU is dedicated to the exclusive use of Global Combining Network Adapter for use in performing the arithmetic and logical functions of reduction operations. Computer program instructions of a reduction routine in parallel communications library may latch an instruction for an arithmetic or logical function into instruction register . When the arithmetic or logical function of a reduction operation is a sum or a logical or for example Global Combining Network Adapter may execute the arithmetic or logical operation by use of ALU in processor or typically much faster by use dedicated ALU .

The example compute node of includes a direct memory access DMA controller which is computer hardware for direct memory access and a DMA engine which is computer software for direct memory access. Direct memory access includes reading and writing to memory of compute nodes with reduced operational burden on the central processing units . A DMA transfer essentially copies a block of memory from one location to another typically from one compute node to another. While the CPU may initiate the DMA transfer the CPU does not execute the transfer.

For further explanation illustrates an exemplary Point To Point Adapter useful in systems capable of load balanced data processing performed on an application message transmitted between compute nodes of a parallel computer according to embodiments of the present invention. Point To Point Adapter is designed for use in a data communications network optimized for point to point operations a network that organizes compute nodes in a three dimensional torus or mesh. Point To Point Adapter in the example of provides data communication along an x axis through four unidirectional data communications links to and from the next node in the x direction and to and from the next node in the x direction . Point To Point Adapter also provides data communication along a y axis through four unidirectional data communications links to and from the next node in the y direction and to and from the next node in the y direction . Point To Point Adapter in also provides data communication along a z axis through four unidirectional data communications links to and from the next node in the z direction and to and from the next node in the z direction .

For further explanation illustrates an exemplary Global Combining Network Adapter useful in systems capable of load balanced data processing performed on an application message transmitted between compute nodes of a parallel computer according to embodiments of the present invention. Global Combining Network Adapter is designed for use in a network optimized for collective operations a network that organizes compute nodes of a parallel computer in a binary tree. Global Combining Network Adapter in the example of provides data communication to and from two children nodes through four unidirectional data communications links . Global Combining Network Adapter also provides data communication to and from a parent node through two unidirectional data communications links .

For further explanation sets forth a line drawing illustrating an exemplary data communications network optimized for point to point operations useful in systems capable of load balanced data processing performed on an application message transmitted between compute nodes of a parallel computer in accordance with embodiments of the present invention. In the example of dots represent compute nodes of a parallel computer and the dotted lines between the dots represent data network links between compute nodes. The networks links are implemented with point to point data communications adapters similar to the one illustrated for example in with data communications links on three axes x y and z and to and from in six directions x x y y z and z . The links and compute nodes are organized by this data communications network optimized for point to point operations into a three dimensional mesh . The mesh has wrap around links on each axis that connect the outermost compute nodes in the mesh on opposite sides of the mesh . These wrap around links form part of a torus . Each compute node in the torus has a location in the torus that is uniquely specified by a set of x y z coordinates. Readers will note that the wrap around links in the y and z directions have been omitted for clarity but are configured in a similar manner to the wrap around link illustrated in the x direction. For clarity of explanation the data communications network of is illustrated with only 27 compute nodes but readers will recognize that a data communications network optimized for point to point operations for use in load balanced data processing performed on an application message transmitted between compute nodes of a parallel computer in accordance with embodiments of the present invention may contain only a few compute nodes or may contain thousands of compute nodes.

For further explanation sets forth a line drawing illustrating an exemplary data communications network optimized for collective operations useful in systems capable of load balanced data processing performed on an application message transmitted between compute nodes of a parallel computer in accordance with embodiments of the present invention. The example data communications network of includes data communications links connected to the compute nodes so as to organize the compute nodes as a tree. In the example of dots represent compute nodes of a parallel computer and the dotted lines between the dots represent data communications links between compute nodes. The data communications links are implemented with global combining network adapters similar to the one illustrated for example in with each node typically providing data communications to and from two children nodes and data communications to and from a parent node with some exceptions. Nodes in a binary tree may be characterized as a physical root node branch nodes and leaf nodes . The root node has two children but no parent. The leaf nodes each has a parent but leaf nodes have no children. The branch nodes each has both a parent and two children. The links and compute nodes are thereby organized by this data communications network optimized for collective operations into a binary tree . For clarity of explanation the data communications network of is illustrated with only 31 compute nodes but readers will recognize that a data communications network optimized for collective operations for use in systems for load balanced data processing performed on an application message transmitted between compute nodes of a parallel computer accordance with embodiments of the present invention may contain only a few compute nodes or may contain thousands of compute nodes.

In the example of each node in the tree is assigned a unit identifier referred to as a rank . A node s rank uniquely identifies the node s location in the tree network for use in both point to point and collective operations in the tree network. The ranks in this example are assigned as integers beginning with 0 assigned to the root node 1 assigned to the first node in the second layer of the tree 2 assigned to the second node in the second layer of the tree 3 assigned to the first node in the third layer of the tree 4 assigned to the second node in the third layer of the tree and so on. For ease of illustration only the ranks of the first three layers of the tree are shown here but all compute nodes in the tree network are assigned a unique rank.

For further explanation sets forth a block diagram illustrating an exemplary communications architecture illustrated as a protocol stack useful in load balanced data processing performed on an application message transmitted between compute nodes of a parallel computer according to embodiments of the present invention. The architecture of implements a protocol stack in the sense that a hardware layer of the architecture operates a hardware level communications protocol among compute nodes a messaging layer implements a messaging level communication protocol an application layer operates an application level communications protocol and the layers effect data communications among compute nodes using application programming interfaces API calls among the layers in a stacked fashion.

The exemplary communications architecture of sets forth two compute nodes an origin compute node and a target compute node . Only two compute nodes are illustrated in the example of for ease of explanation and not for limitation. In fact load balanced data processing performed on an application message transmitted between compute nodes of a parallel computer according to embodiments of the present invention may be implemented using many compute nodes in very large scale computer systems such as parallel computers with thousands of nodes.

The exemplary communications architecture of includes an application layer composed of an application installed on the origin compute node and an application installed on the target compute node . In the example of the application on the origin compute node specifies a data processing operation to be performed on an application message across multiple compute nodes to effect load balancing according to embodiments of the present invention. For example the application of the origin node may specify that an accumulate operation is to be performed on the data of the message using the computing resources of both the origin node and the target node .

The applications may effect load balanced data processing across multiple compute nodes and general communications using messaging modules installed on each of the compute nodes . Applications and may communicate or perform such load balanced data processing by invoking function of an application programming interfaces API exposed by the application messaging modules and . To transmit message to the application the application of may invoke a function of an API for messaging module that passes a buffer identifier of an application buffer containing the application message to the messaging module . To perform load balanced data processing the application may pass this buffer identifier along with an identifier of the data processing operation to be performed in a load balanced manner according to embodiments of the present invention.

The exemplary communications architecture of includes a messaging layer that implements data communications protocols for data communications that support messaging in the application layer . Such data communications protocols are typically invoked through a set of APIs that are exposed to the applications and in the application layer . In the example of the messaging layer is composed of messaging module installed on the origin compute node and messaging module installed on the target compute node .

The messaging module of includes a set of computer program instructions for load balanced data processing performed on an application message transmitted between compute nodes of a parallel computer according to embodiments of the present invention. The messaging module of operates generally for load balanced data processing performed on an application message transmitted between compute nodes of a parallel computer according to embodiments of the present invention by identifying the application message for transmission to a target compute node the message to be processed by a data processing operation determining origin sub operations used to carry out a portion of the data processing operation on the origin compute node determining target sub operations used to carry out a remaining portion of the data processing operation on the target compute node processing the message using the origin sub operations and transmitting the processed message to the target compute node for processing using the target sub operations .

The exemplary communications architecture of includes a hardware layer that defines the physical implementation and the electrical implementation of aspects of the hardware on the compute nodes such as the bus network cabling connector types physical data rates data transmission encoding and may other factors for communications between the compute nodes and on the physical network medium. The hardware layer of is composed of communications hardware of the origin compute node communications hardware of the target compute node and the data communications network connecting the origin compute node to the target compute node . Such communications hardware may include for example point to point adapters and DMA controllers as described above with reference to . In the example of the communications hardware includes transmission stacks for storing network packets for transmission to other communications hardware through the data communications network and includes a reception stacks for storing network packets received from other communications hardware through the data communications network .

The exemplary communications architecture of illustrates a DMA engine for the origin compute node . The DMA engine in the example of is illustrated in both the messaging module layer and the hardware layer . The DMA engine is shown in both the messaging layer and the hardware layer because a DMA engine useful in load balanced data processing performed on an application message transmitted between compute nodes of a parallel computer according to embodiments of the present invention may often provide messaging layer interfaces and also implement communications according to some aspects of the communication hardware layer . The exemplary DMA engine of includes injection FIFO buffers for storing data descriptors that specify DMA transfer operations for transferring data. Although not shown the exemplary DMA engine of also includes a number of reception FIFO buffers used to receive messages from other DMA engines on other compute nodes.

For further explanation sets forth a flow chart illustrating an exemplary method for load balanced data processing performed on an application message transmitted between compute nodes of a parallel computer according to the present invention. The compute nodes described with reference to are connected using plurality of data communications networks. At least one of the data communications networks is optimized for collective operations while at least one of the data communications networks is optimized for point to point operations.

In the method of load balanced data processing performed on an application message transmitted between compute nodes of a parallel computer may be carried out in a messaging module. However readers will note that this example is for explanation only and not limitation and that load balanced data processing performed on an application message transmitted between compute nodes of a parallel computer may be carried out by other software or hardware components of the origin compute node as will occur to those of skill in the art.

The method of includes identifying by an origin compute node an application message for transmission to a target compute node . The application message of represents a data structure such as for example an array that stores application data. The messaging module of the origin compute node may identify the application message according to the method of by receiving an identifier for the application buffer in which the application message is stored. The messaging module may receive this buffer identifier as an argument for a function of the messaging module s API invoked by the application.

The message of is to be processed by a data processing operation . The data processing operation of represents an operation specified by an application that performs a particular data transformation task. The data processing operation is typically one of many data processing operations specified by a parallel application. An example of a data processing operation may include an accumulate operation. In an accumulate operation message data is scaled and added with other message data to yield an accumulation result. Because the message of may often be implemented as an array of data elements processing the message with the data processing operation may refer to the process of apply the data processing operation to each element of the message .

The method of includes determining by the origin compute node origin sub operations used to carry out a portion of the data processing operation on the origin compute node . As mentioned above sub operations are discrete primitive operations used to carry out the individual processing sub tasks that make up a data processing operation. Consider the accumulate data processing operation for example. The accumulate operation may be broken down in a multiplication sub operation and an addition sub operation. In the example of the origin sub operations are sub operations performed on the origin compute node .

The origin compute node determines origin sub operations used to carry out a portion of the data processing operation according to the method of by requesting data processing advice from the target compute node and identifying the origin sub operations in dependence upon the data processing advice from the target compute node . The data processing advice of specifies the processing availability capable of being provided by the target compute node . This processing availability may include for example the types of sub operations available on the target compute node an indication of the target node s current workload and so on.

The origin compute node may identify the origin sub operations in dependence upon the data processing advice according to the method of by determining from the data processing advice which sub operations that carry out the data processing operation are available on the target compute node . The origin compute node may the identify the origin sub operations according to the method of by comparing the target node s workload with the workload for the origin compute node and selecting the number of sub operations to be performed on the origin node based on the relative comparison of the target and origin nodes workloads and the available sub operations on the target node . The origin compute node may also take into account the processing intensity of each of the sub operations. For example if a data processing operation is carry out first using five sub operations that require little processing resources and then using one sub operations that requires massive amounts of processing resources the origin node may assign the first five sub operations to be performed on the origin node and the last sub operation to be performed on the target node all other factors being equal to load balance the data processing operation across nodes .

As mentioned above the origin compute node requests data processing advice from the target compute node . Accordingly the method of includes providing by the target compute node the data processing advice to the origin compute node in response to receiving the request. The target compute node may provide the data processing advice to the origin compute node according to the method of by retrieving current workload information for the target node or the types of sub operations available on the target compute node packetizing the information and transmitting the packets through the network to the origin compute node. Readers will note that workload information may be represented in a variety of ways as will occur to those of skill in the art such as for example the percentage of time for a recent time period that the processing cores of the target node are executing an idle system processing thread.

Readers will note that the origin compute node of may determine origin sub operations used to carry out a portion of the data processing operation in other ways besides requesting data processing advice from the target compute node and identifying the origin sub operations in dependence upon the data processing advice from the target compute node . In some other embodiments the origin compute node may determine origin sub operations by identifying the origin sub operations using a predefined data processing ruleset. A predefined data processing ruleset is a data structure defined by a system or application developer that specifies the manner in which the sub operations of a particular data processing operation should be divided between the origin compute node and the target compute node . Using a predefined data processing ruleset may be useful in certain embodiments because using a predefined data processing ruleset typically requires less computing and network resources to implement than using data processing advice from the target node .

The method of also includes determining by the origin compute node target sub operations used to carry out a remaining portion of the data processing operation on the target compute node . The target sub operations of are sub operations performed on the target compute node . The origin compute node determines target sub operations in a manner similar to the way in which the origin compute node determines origin sub operations . That is the origin compute node determines target sub operations in the method of by requesting data processing advice from the target compute node and identifying the target sub operations in dependence upon the data processing advice from the target compute node . In some other embodiments the origin compute node may also determine target sub operations by identifying the target sub operations using a predefined data processing ruleset.

The method of also includes processing by the origin compute node the message using the origin sub operations . The origin compute node may process the message according to the method of by performing the origin sub operations on the data elements of the application message yielding a processed message .

The method of includes transmitting by the origin compute node the processed message to the target compute node for processing using the target sub operations . The origin compute node may transmit the processed message to the target compute node for processing according to the method of by embedding instructions to the target node in the processed message s header to perform the target sub operations on the processed message packetizing the processed message and transmitting the packets across the network to the target compute node .

The method of then includes processing by the target compute node the message processed with the origin sub operations using the target sub operations . The target compute node may process the message using the target sub operations according to the method of by performing the target sub operations on the data elements of the processed message and storing the result in an application message buffer on the target compute node .

The explanation above with respect to describes an exemplary method in which the origin node applies the same sub operations and the target node applies the same sub operations to the data of the entire message. In some other embodiments however the origin node and the target node may each applies different sub operations to different portions of the application message to balance the processing load. For further explanation sets forth a flow chart illustrating an exemplary method for load balanced data processing performed on an application message transmitted between compute nodes of a parallel computer according to the present invention.

The method of is similar to the method of . That is the method of includes identifying by an origin compute node an application message for transmission to a target compute node determining by the origin compute node origin sub operations used to carry out a portion of the data processing operation on the origin compute node determining by the origin compute node target sub operations used to carry out a remaining portion of the data processing operation on the target compute node processing by the origin compute node the message using the origin sub operations and transmitting by the origin compute node the processed message to the target compute node for processing using the target sub operations .

The method of also includes partitioning by the origin compute node the message into a plurality of message chunks . The origin compute node may partition the message into a plurality of message chunks according to the method of by dividing the elements of the message into message chunks no larger than some predetermined chunk size. In some other embodiments readers will note that the origin compute node may also partition the message into a plurality of message chunks according to the method of by dividing the elements of the message into message chunks according to the sub operations to be performed on each element by the origin node and those sub operations to be performed on each element by the target node . Elements on which the origin node performs the same sub operations may be group together in a message chunk.

In the example of the origin compute node determines origin sub operations used to carry out a portion of the data processing operation on the origin compute node by determining for each message chunk the origin sub operations used to carry out a portion of the data processing operation on that message chunk . The origin compute node may determine the origin sub operations for each message chunk according to the method of by selecting the particular origin sub operations to be performed on the origin compute node establishing a limit on the number of message chunks to be processed using the selected origin sub operations based on the workloads of the origin node and the target node and the amount of processing required for each sub operation of the data processing operation determining whether the limit on the number of message chunks to be processed using the selected origin sub operations is reached assigning the selected origin sub operations to the current message chunk if the limit is not reached and if the limit is reached assigning a different set of sub operations to the current message chunk.

For example consider a data processing operation in which the message data on the origin node is combined with some other data on the origin node and the result is converted to an endianess compatible with the target compute node which has a different endianess than the origin compute node . Endianess refers to the byte or bit ordering that a particular hardware platform uses to represent data. Because endianess conversions are typically processor intensive assigning all of the data combinations to the origin node and assigning all of the endianess conversions to the target node may create a processing load imbalance. For some of the message chunks therefore the origin node may perform the data combinations and the target node may perform the endianess conversions. For the remaining message chunks however the origin node may perform the endianess conversions and the target node may perform the data combinations.

In the method of the origin compute node determines target sub operations used to carry out a remaining portion of the data processing operation on the target compute node by determining for each message chunk the target sub operations used to carry out a remaining portion of the data processing operation on that message chunk . The origin compute node may determine the target sub operations for each message chunk in a manner similar to the way in which the origin compute node determines the origin sub operations for each message chunk .

In the method of the origin compute node processes the message using the origin sub operations by processing each message chunk using the origin sub operations for that message chunk . The origin compute node may process each message chunk using the origin sub operations for that message chunk according to the method of by performing the origin sub operations on the data elements of that message chunk yielding a processed message chunk .

In the method of the origin compute node transmits the processed message to the target compute node for processing using the target sub operations by transmitting each processed message chunk to the target compute node for processing using the target sub operations for that message chunk . The origin compute node may transmit each processed message chunk to the target compute node for processing according to the method of by embedding instructions to the target node in the processed message chunk s header to perform the target sub operations on the processed message chunk packetizing the processed message chunk and transmitting the packets across the network to the target compute node . The target compute node in turn processes each received message chunk using the target sub operations specified in the header of each message chunk .

Exemplary embodiments of the present invention are described largely in the context of a fully functional computer system for load balanced data processing performed on an application message transmitted between compute nodes of a parallel computer. Readers of skill in the art will recognize however that the present invention also may be embodied in a computer program product disposed on computer readable media for use with any suitable data processing system. Such computer readable media may be transmission media or recordable media for machine readable information including magnetic media optical media or other suitable media. Examples of recordable media include magnetic disks in hard drives or diskettes compact disks for optical drives magnetic tape and others as will occur to those of skill in the art. Examples of transmission media include telephone networks for voice communications and digital data communications networks such as for example Ethernets and networks that communicate with the Internet Protocol and the World Wide Web as well as wireless transmission media such as for example networks implemented according to the IEEE 802.11 family of specifications. Persons skilled in the art will immediately recognize that any computer system having suitable programming means will be capable of executing the steps of the method of the invention as embodied in a program product. Persons skilled in the art will recognize immediately that although some of the exemplary embodiments described in this specification are oriented to software installed and executing on computer hardware nevertheless alternative embodiments implemented as firmware or as hardware are well within the scope of the present invention.

It will be understood from the foregoing description that modifications and changes may be made in various embodiments of the present invention without departing from its true spirit. The descriptions in this specification are for purposes of illustration only and are not to be construed in a limiting sense. The scope of the present invention is limited only by the language of the following claims.

