---

title: Application programming interface enhancement
abstract: Some embodiments of application programming interface (API) enhancement in a networked system have been presented. In one embodiment, a servlet is initialized on a centralized server in the networked system. The capabilities of an application programming interface (API) accessible by the client are expanded to allow the client to have data converted to a predetermined format when executing an automation script in order to perform an administrative task on multiple computing machines in the networked system without user intervention.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08225337&OS=08225337&RS=08225337
owner: Red Hat, Inc.
number: 08225337
owner_city: Raleigh
owner_country: US
publication_date: 20080829
---
Embodiments of the present invention relate to application programming interface API and more specifically to API enhancement in a networked environment.

Conventionally a software vendor may deploy a server to a customer s internal network to manage and to maintain software licensed to the customer. Typically the server provides a web based graphical user interface GUI to allow an administrator of the internal network to perform administrative tasks such as creating provisioning profiles configuring and initializing computing machines installing software etc. Through the web based GUI the administrator is given indirect access to the data and functions of the software provided by the software vendors.

Although conventional web based GUI is generally easy to use because of the user friendly nature of GUI the conventional web based GUI typically limits the way the administrator may interact with the underlying software. For example the conventional web based GUI limits the type and format of data to be input via the conventional web based GUI in order to allow the API to forward the data input via the GUI to the underlying software. The administrator does not have direct access to the underlying software. As a result the administrator cannot automate the performance of many routine administrative tasks using the conventional web based GUI. For customers having a large number of computing machines in the internal network it takes a long time for the administrator to perform many routine administrative tasks on all of the computing machines.

Described herein are some embodiments of application programming interface API enhancement in a networked system. In one embodiment a servlet is initialized on a centralized server in the networked system. As used herein a servlet broadly refers to a programming language class used to extend the capabilities of servers that host applications accessed via a request response programming model such as a Java servlet. A list of capabilities of an API accessible by the client is expanded to allow for enhanced integration and centralized automation of various system management capabilities in the networked system. The API may be based on extended markup language remote procedure calls XML RPCs which allow distinct pieces of software on disparate systems to make remote procedure calls RPCs using extended markup language XML over hypertext transfer protocol HTTP . In some embodiments the capabilities of the API are extended to convert data into one or more predetermined formats. For example custom data converters e.g. a custom serializer may be made available to the servlet. As such the servlet may readily integrate with or interact with other scripts and or programs.

In some embodiments the API with the extended capabilities allows users to write automation scripts to perform many administrative tasks in bulk which are available only in web based graphical user interface GUI previously. In one embodiment a custom serializer is registered with a library to allow the servlet to call the custom serializer when executing instructions in an automation script. The library may include a third party library. The custom serializer may convert data into a serialized format consumable by the servlet. In response to executing instructions in the automation script the servlet may perform an administrative task on multiple computing machines in the networked system without user intervention.

In the following description numerous details are set forth. It will be apparent however to one skilled in the art that the present invention may be practiced without these specific details. In some instances well known structures and devices are shown in block diagram form rather than in detail in order to avoid obscuring the present invention.

Some portions of the detailed descriptions below are presented in terms of algorithms and symbolic representations of operations on data bits within a computer memory. These algorithmic descriptions and representations are the means used by those skilled in the data processing arts to most effectively convey the substance of their work to others skilled in the art. An algorithm is here and generally conceived to be a self consistent sequence of steps leading to a desired result. The steps are those requiring physical manipulations of physical quantities. Usually though not necessarily these quantities take the form of electrical or magnetic signals capable of being stored transferred combined compared and otherwise manipulated. It has proven convenient at times principally for reasons of common usage to refer to these signals as bits values elements symbols characters terms numbers or the like.

It should be borne in mind however that all of these and similar terms are to be associated with the appropriate physical quantities and are merely convenient labels applied to these quantities. Unless specifically stated otherwise as apparent from the following discussion it is appreciated that throughout the description discussions utilizing terms such as processing or computing or calculating or determining or displaying or the like refer to the action and processes of a computer system or similar electronic computing device that manipulates and transforms data represented as physical electronic quantities within the computer system s registers and memories into other data similarly represented as physical quantities within the computer system memories or registers or other such information storage transmission or display devices.

The present invention also relates to apparatus for performing the operations herein. This apparatus may be specially constructed for the required purposes or it may comprise a general purpose computer selectively activated or reconfigured by a computer program stored in the computer. Such a computer program may be stored in a computer readable storage medium such as but is not limited to any type of disk including floppy disks optical disks CD ROMs and magnetic optical disks read only memories ROMs random access memories RAMs EPROMs EEPROMs flash memory magnetic or optical cards or any type of media suitable for storing electronic instructions and each coupled to a computer system bus.

The algorithms and displays presented herein are not inherently related to any particular computer or other apparatus. Various general purpose systems may be used with programs in accordance with the teachings herein or it may prove convenient to construct more specialized apparatus to perform the required method steps. The required structure for a variety of these systems will appear from the description below. In addition the present invention is not described with reference to any particular programming language. It will be appreciated that a variety of programming languages maybe used to implement the teachings of the invention as described herein.

Initially processing logic starts initialization of a servlet on a centralized server in a networked system processing block . Details of one embodiment of the centralized server and one embodiment of the networked system are discussed below with reference to . During initialization processing logic registers one or more custom serializers with a third party library processing block . In some embodiments processing logic further registers one or more invocation handlers with the third party library processing block . By making the custom serializers available to the servlet the capabilities of an API on the centralized server may be extended. Specifically the servlet may call the custom serializer to convert the data into some predetermined format. As such the servlet may better integrate with other scripts and or program. Furthermore the servlet may execute automation scripts to perform many administrative tasks without user intervention. Details of one embodiment of a process to register a custom serializer are discussed below with reference to .

Initially processing logic retrieves a custom serializer from a serializer registry processing block . In some embodiments a user may have manually added the custom serializer to the registry. Then a servlet such as the servlet initialized according to above initializes a serializer factory processing block . Then the serializer factory instantiates the custom serializer processing block . Finally processing logic adds the custom serializer instantiated to a list accessible by the servlet so that the servlet may add the custom serializer instantiated to the third party library at runtime processing block . In some embodiments the servlet may call the custom serializer at runtime to convert data into a predetermined format consumable by the servlet. As such automation scripts may be executed by the servlet to perform various administrative tasks in bulk because data in formats inconsumable by the servlet may be converted to the predetermined format consumable by the servlet by calling the custom serializer.

Processing logic executes an automation script from a user e.g. an administrator to perform an administrative task on multiple computing machines within a networked system without user intervention processing block . Details of one embodiment of the networked system are discussed below with reference to . In response to instructions in the automation script processing logic calls a custom serializer to serialize a data object such that the serialized data object can be consumed by RPCs of the API processing block . Details of one embodiment of registering the custom serializer and making it available to the servlet are described above. In some embodiments the RPCs include XML RPCs that allow distinct pieces of software in disparate systems to make RPCs using XML over HTTP.

In some embodiments the centralized server is communicably coupled to an internal network of a customer of a software vendor via the internal network interface . The internal network further includes one or more physical computing machines of the customer such as servers workstations desktop personal computers laptops etc. The centralized server is further coupled to an external network such as the Internet via the external network interface . The external network interface may establish a secured connection to access an external server provided by the software vendor such as the external server in to retrieve various contents from the external server such as metadata of an operating system information on provisioning virtual hosts and virtual guests application upgrades etc. These contents retrieved may be stored or cached locally on the centralized server or on a storage device e.g. the database in within the internal network.

Alternatively the centralized server may obtain the contents from the external server via a portable computer readable storage medium removably coupled to the computer readable medium accessing device . Some examples of the computer readable storage medium and computer readable storage medium accessing device include a CD and a CD ROM drive a flash memory card with a Universal Serial Bus USB connector and a USB drive etc. The external server of the software vendor may store the contents onto the computer readable storage medium which is then delivered to the customer for the centralized server s use.

In some embodiments the centralized server maintains and manages software licensed to the customer. As such an administrator of the customer s internal network may use the centralized server to perform various administrative tasks in the internal network. Because many administrative tasks are routine and repetitive the administrator may write automation scripts to automate such administrative tasks in order to save time and effort. To allow the centralized server to work with the automation scripts the administrator may register a custom serializer in a serializer registry. In some embodiments invocation handlers may be registered with the serializer registry as well. Further the servlet may invoke a serializer factory which instantiates the custom serializer. Then the servlet may add the instantiated custom serializer to the library at runtime. When the servlet executes an automation script the servlet may call the custom serializer to serialize data to make the data consumable by the servlet . As such the servlet may perform the administrative tasks on one or more computing machines without user intervention according to instructions in the automation script. In other words the administrative tasks may be automated by the servlet .

In some embodiments the internal network of the customer further includes components shown on the left side of the dotted line . As illustrated in the internal network of the customer includes a centralized server a number of computing machines A C a database and a console . The computing machines A C are physical hardware such as servers workstations desktop personal computers PCs laptops etc. The computing machines A C the console and the database are coupled to the centralized server within the internal network . In some embodiments one or more of the customer s computing machines may be coupled to the centralized server via a proxy such as the proxy between the computing machine B and the centralized server . The proxy may cache software packages to enhance performance speed up downloads and offload some of the operations from the centralized server .

In some embodiments the centralized server provides an API having a set of extended capabilities to allow a servlet running on the centralized server to better integrate with other scripts and or programs. Specifically the API may include a custom data converter to convert data into a predetermined format consumable by the servlet such as a custom serializer. Details of the centralized server and the custom serializer have been described above.

Referring back to the internal network includes a local area network LAN protected from unauthorized access. For instance a firewall may be employed at a gateway or proxy of the LAN to prevent unauthorized access to the LAN. Through the secured connection the centralized server within the internal network may access the external server external to the internal network . For example the external server may host a website of the software vendor and the centralized server may establish the secured connection to the website using one or more Internet security protocol e.g. secure socket layer SSL secure shell SSH transport layer security TLS etc. . Thus the centralized server may securely retrieve or download various contents from the external server such as contents that are available only by purchase and or license e.g. metadata of an operating system such as Red Hat Enterprise Linux provided by Red Hat Inc. of Raleigh N.C. information on provisioning executables of client applications etc. . The contents retrieved are stored locally within the customer s internal network . In one embodiment the contents retrieved are stored in a storage device internal to the centralized server . Alternatively the contents retrieved may be stored in the database coupled to the centralized server within the internal network . Alternatively the contents retrieved may be stored in a Network Attached Storage NAS device. After downloading the contents from the external server the centralized server may terminate the secure connection such that no talk back to the external server is allowed. As such the above approach allows the customer to take the customer s system off the external network e.g. the Internet and hence providing more optimization flexibility and control of the system to the customer.

The centralized server may synchronize with the external server by checking with the external server for updates and or changes to the contents retrieved previously. Such synchronization may be performed periodically and or in response to user requests. Alternatively the external server may notify the centralized server when there are changes and or updates to the contents previously provided to the centralized server . When there is a change to the contents previously retrieved the centralized server may retrieve the change from the external server and then update a copy of the contents on the centralized server accordingly or the centralized server may simply retrieve an updated version of the contents to replace the previously retrieved version. In some embodiments synchronization is performed via one or more channels within the secured connection between the centralized server and the external server . A channel as used herein refers to a collection of software packages organized into a logical grouping. For example the set of packages that make up an operating system is organized into a channel in some embodiments. Different types of contents may be associated with different channels such that the centralized server may choose to synchronize a subset of the channels as needed. For example information related to provisioning virtual hosts and virtual guests may be associated with a Tool channel.

Alternatively the centralized server may synchronize with the external server via portable computer readable storage media such as CDs DVDs flash memory cards with USB connectors etc. When there is a change to content previously provided to the centralized server the change to the content or an updated version of the content may be stored onto the computer readable storage media from the external server . Then the computer readable storage media may be delivered to the customer who would provide the computer readable storage media to the centralized server . By providing the computer readable storage media to the centralized server the centralized server obtains the updated content such as the metadata and information from the computer readable storage media and subsequently and uses the updated content to manage the computing machines A C as well as the virtual hosts and virtual guests provisioned on the computing machines A C.

The exemplary computer system includes a processing device a main memory e.g. read only memory ROM flash memory dynamic random access memory DRAM such as synchronous DRAM SDRAM or Rambus DRAM RDRAM etc. a static memory e.g. flash memory static random access memory SRAM etc. and a data storage device which communicate with each other via a bus .

Processing device represents one or more general purpose processing devices such as a microprocessor a central processing unit or the like. More particularly the processing device may be complex instruction set computing CISC microprocessor reduced instruction set computing RISC microprocessor very long instruction word VLIW microprocessor or processor implementing other instruction sets or processors implementing a combination of instruction sets. Processing device may also be one or more special purpose processing devices such as an application specific integrated circuit ASIC a field programmable gate array FPGA a digital signal processor DSP network processor or the like. The processing device is configured to execute the processing logic for performing the operations and steps discussed herein.

The computer system may further include a network interface device . The computer system also may include a video display unit e.g. a liquid crystal display LCD or a cathode ray tube CRT an alphanumeric input device e.g. a keyboard a cursor control device e.g. a mouse and a signal generation device e.g. a speaker .

The data storage device may include a computer accessible storage medium also known as a machine readable storage medium or a computer readable medium on which is stored one or more sets of instructions e.g. software embodying any one or more of the methodologies or functions described herein. The software may also reside completely or at least partially within the main memory and or within the processing device during execution thereof by the computer system the main memory and the processing device also constituting machine accessible storage media. The software may further be transmitted or received over a network via the network interface device .

While the computer accessible storage medium is shown in an exemplary embodiment to be a single medium the term computer accessible storage medium should be taken to include a single medium or multiple media e.g. a centralized or distributed database and or associated caches and servers that store the one or more sets of instructions. The term computer accessible storage medium shall also be taken to include any medium that is capable of storing encoding or carrying a set of instructions for execution by the computer and that cause the machine to perform any one or more of the methodologies of the present invention. The term computer accessible storage medium shall accordingly be taken to include but not be limited to solid state memories optical and magnetic media etc.

Thus some embodiments of API enhancement in a networked system have been described. It is to be understood that the above description is intended to be illustrative and not restrictive. Many other embodiments will be apparent to those of skill in the art upon reading and understanding the above description. The scope of the invention should therefore be determined with reference to the appended claims along with the full scope of equivalents to which such claims are entitled.

