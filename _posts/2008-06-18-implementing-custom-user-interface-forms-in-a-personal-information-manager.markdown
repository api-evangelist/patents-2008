---

title: Implementing custom user interface forms in a personal information manager
abstract: Technologies are described herein for incorporating custom user interface (UI) forms into a personal information manager (PIM) application using a declarative form markup specification. A native PIM form specification is generated from a file containing the declarative form markup describing the custom UI form. When a request to display the custom UI form is received, a PIM native form renderer invokes a forms runtime engine that loads the original declarative form markup to process data bindings and event subscriptions contained therein. The custom UI form is then rendered to the display by the PIM native form renderer in conjunction with the forms runtime engine.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09298684&OS=09298684&RS=09298684
owner: Microsoft Technology Licensing, LLC
number: 09298684
owner_city: Redmond
owner_country: US
publication_date: 20080618
---
Personal information manager PIM applications generally provide email contacts and calendar management to users of personal computers. However as a part of an enterprise wide office suite installation the PIM may provide a centralized portal to business information and processes including communications people events and business data. The PIM can aggregate and consolidate data across the enterprise from various business applications such as accounting time management sales budgeting and forecasting and executive management systems. In order to perform these functions and provide access to this data the PIM must be customizable allowing modification of the user interface of the PIM to expose the data from the various systems and adapt the PIM functionality to conform to the business processes of the enterprise.

While many PIM applications provide customization features the customizations are often maintained through proprietary tools and user interfaces designed for the end user of the PIM. This makes customizations by software developers difficult to implement and deploy throughout the organization. The proprietary nature of the PIM customizations may also prevent the data from being exposed in a consistent fashion across the applications of the enterprise wide office suite. In addition if a new version of the PIM application is deployed to end users any customizations made may be difficult to incorporate in the new PIM software.

Technologies are described herein for incorporating custom user interface UI forms into a PIM application using a declarative form markup specification. Using the technologies provided a specification for a custom UI form native to the PIM can be generated from a file containing the declarative form markup. The form markup file is stored along with the native form specification and utilized by a runtime engine that provides data binding to PIM based and external data sources as well the incorporation of custom business logic during the rendering of the custom UI form. The use of a declarative form markup file to describe the custom UI form provides flexibility to developers in the design and deployment of customizations to PIM installations throughout the enterprise while promoting consistency of data presentation and reuse of form design across applications. By generating a native form specification from the declarative form markup file the custom UI form retains the performance of native UI forms and may take advantage of the functionality and advanced features of the PIM such as localization.

According to aspects presented herein a form markup file containing markup that describes the layout of controls on a custom UI form is utilized to generate a native UI form specification that may be immediately rendered by the PIM. The native UI form specification is stored in the form storage area of the PIM. In one aspect the controls on the custom UI form consist of those native to the PIM application. When the PIM receives a request to display the custom UI form the native form specification is retrieved from the PIM form storage along with the original form markup file and the form is rendered to the display utilizing the PIM native form renderer.

According to further aspects a forms runtime engine is also loaded during the rendering of the custom UI form to process the additional specifications in the form markup file. According to one aspect the additional specifications may include event subscriptions to custom business logic contained in a custom business logic module. According to another aspect the additional specifications may include data binding information for the controls on the custom UI form to allow the controls to be bound to both internal PIM data and external data sources. The forms runtime engine performs the data binding and event subscriptions specified in the declarative form markup file before the PIM renders the custom UI form.

It should be appreciated that the above described subject matter may be implemented as a computer controlled apparatus a computer process a computing system or as an article of manufacture such as a computer readable medium. These and various other features will be apparent from a reading of the following Detailed Description and a review of the associated drawings.

This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter nor is it intended that this Summary be used to limit the scope of the claimed subject matter. Furthermore the claimed subject matter is not limited to implementations that solve any or all disadvantages noted in any part of this disclosure.

The following detailed description is directed to technologies for incorporating custom UI forms into a PIM application using a declarative form markup specification. While the subject matter described herein is presented in the general context of an application program that operates in conjunction with the execution of an operating system on a computer system those skilled in the art will recognize that other implementations may be performed in combination with other types of program modules. Generally program modules include routines programs components data structures and other types of structures that perform particular tasks or implement particular abstract data types. Moreover those skilled in the art will appreciate that the subject matter described herein may be practiced with other computer system configurations including hand held devices multiprocessor systems microprocessor based or programmable consumer electronics minicomputers mainframe computers and the like.

In the following detailed description references are made to the accompanying drawings that form a part hereof and which show by way of illustration specific embodiments or examples. Referring now to the drawings in which like numerals represent like elements through the several figures aspects of a computing system and methodology for incorporating custom user interface forms in a personal information manager using a declarative form markup specification will be described.

Turning now to details will be provided regarding an illustrative operating environment and several software components provided by the embodiments presented herein. In particular shows an illustrative computer architecture for a computer capable of executing the software components described herein for incorporating custom user interface forms into a personal information manager using a declarative form markup specification. The computer architecture shown in illustrates a conventional desktop laptop or server computer and may be utilized to execute any aspects of the software components presented herein.

The computer architecture shown in includes a central processing unit CPU a system memory including a random access memory RAM and a read only memory ROM and a system bus that couples the memory to the CPU . A basic input output system containing the basic routines that help to transfer information between elements within the computer such as during startup is stored in the ROM . The computer further includes a mass storage device for storing an operating system application programs and other program modules which are described in greater detail herein.

The mass storage device is connected to the CPU through a mass storage controller not shown connected to the bus . The mass storage device and its associated computer readable media provide non volatile storage for the computer . Although the description of computer readable media contained herein refers to a mass storage device such as a hard disk or CD ROM drive it should be appreciated by those skilled in the art that computer readable media can be any available computer storage media that can be accessed by the computer .

By way of example and not limitation computer readable media may include volatile and non volatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. For example computer readable media includes but is not limited to RAM ROM EPROM EEPROM flash memory or other solid state memory technology CD ROM digital versatile disks DVD HD DVD BLU RAY or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can be accessed by the computer .

According to various embodiments the computer may operate in a networked environment using logical connections to remote computers through a network such as the network . The computer may connect to the network through a network interface unit connected to the bus . It should be appreciated that the network interface unit may also be utilized to connect to other types of networks and remote computer systems. The computer may also include an input output controller for receiving and processing input from a number of other devices including user input devices like a keyboard mouse or electronic stylus not shown in . Similarly an input output controller may provide output to a display screen a printer or other type of output device also not shown in .

As mentioned briefly above a number of program modules and data files may be stored in the mass storage device and RAM of the computer including an operating system suitable for controlling the operation of a networked desktop laptop or server computer. The mass storage device and RAM may also store one or more program modules. In particular the mass storage device and the RAM may store a PIM application a forms generator a forms runtime engine and a custom event handler module all of which provide the functionality presented herein for incorporating a custom UI form in the PIM from a declarative form markup specification and are described in detail below in regard to . In addition the mass storage device and the RAM may also store form markup files that contain the declarative form markup specifications. The mass storage device and the RAM may also store other types of program modules or data.

It will be appreciated that while the embodiments illustrated herein are described as executing as traditional client applications on the computer they may also be implemented using a client server model such as Web based applications executing on a server computer and accessible over the public Internet or through a private Intranet by a Web browser application executing on a client computer .

The PIM provides the capability for its user interface to be customized to allow access to data from a variety of external and internal data sources as well as allow the layout and functionality of the interface to be modified to tailor the PIM to custom business processes. According to embodiments described herein customization of the PIM user interface is accomplished by creating custom UI forms. The design of a custom UI form includes the layout of UI controls on the form that are displayed to a user of the PIM along with underlying logic to control the functionality and interaction of the controls with the user.

A custom UI form may be designed to display the entire user interface to the user at a given time or it may be designed to be incorporated in a specific region of a larger native user interface of the PIM as will be described in more detail in regard to . The UI controls may include controls common to most modern user interfaces such as labels text boxes command buttons option buttons check boxes list boxes and combo boxes as well as controls specific to the PIM . For example the MICROSOFT OFFICE OUTLOOK messaging and collaboration client provides native support for a number of common UI controls as well as a date picker control and a time picker control that provide specific functionality associated with the selection of date and time data. It will be appreciated that the UI controls available in the PIM for customization may include any number of common UI controls and PIM specific controls known in the art.

The PIM may allow for the design and creation of custom UI forms utilizing a proprietary set of tools and utilities provided by the PIM . When a custom UI form is created in this manner the design of the custom UI form is saved in a native form specification that is stored in a form storage area of the PIM . If a user accesses the custom UI form the PIM utilizes a native form renderer to read the native form specification from the PIM form storage and render the custom UI form on the display and to handle any programming logic associated with the custom UI form.

The environment also includes a number of form markup files that contain a declarative form markup specifying the design of custom UI forms to be utilized by the PIM . Each form markup file contains markup that specifies the details of the UI controls to be included in the custom UI form as well as the layout of the controls. As will be described in further detail below the form markup file may also contain markup that specifies data bindings and event subscriptions to custom event handlers for the UI controls which are utilized in rendering the custom UI form. According to one embodiment the declarative form markup of the form markup files complies with the FormXML schema implemented by MICROSOFT CORPORATION in its MICROSOFT DYNAMICS business software. It will be appreciated however that any declarative form markup language commonly known in the art could be utilized to describe the layout of UI controls on a custom UI form as described herein.

A standard set of form markup files may be made available as a part of an extension to the PIM user interface for accessing data from an external enterprise application. For example a set of form markup files may exist that extend the PIM to allow it to access data in an enterprise resource planning application such as SAP R 3 software from SAP AG of Walldorf Germany. These form markup files may be further modified for a particular organization to tailor the custom UI forms for the data and business processes of that organization. The custom UI forms may be modified by adding or removing UI controls modifying the layout of controls on the form adding custom business logic to event handlers for the controls or binding the controls to data in external data sources. In addition the organization may add a number of new custom UI forms.

Storing the design of the custom UI forms as declarative markup in the form markup files instead of as native form specifications in the PIM form storage provides several advantages. First it makes it easier for an organization to preserve their modifications to the form markup files if new versions are rolled out as part of an upgrade to the external enterprise application. Second the same set of form markup files may be used to extend the PIM user interface as well as other enterprise applications that support extension of their user interface using the same declarative markup. It will be appreciated by one of skill in the art that many more advantages exist in having the design of custom UI forms stored in files containing a declarative markup language.

A forms generator is utilized to generate native form specifications for the PIM from the form markup files . The forms generator reads the markup from the form markup file and converts the information contained therein to the form required by the PIM to describe the design of the custom UI form as will be described in detail below in regard to . The forms generator stores the native form specifications generated from the form markup files in the PIM form storage .

In one embodiment the forms generator may be utilized at design time to generate native form specifications for a set of custom UI forms. The native form specifications will then be stored in a central PIM form storage or distributed to individual PIM installations in order to make the custom UI forms available to the required users. In another embodiment the form markup files containing the declarative markup may be distributed to the individual PIM installations and the forms generator executed upon first use of a custom UI form to generate the native form specification for the form and store it in the local PIM form storage for subsequent use.

Once the native form specification is generated from the form markup file and stored in the PIM form storage it can be rendered by the PIM native form renderer when requested for display. This allows the custom UI form described by the form markup file to take advantage of advanced features of the PIM user interface such as localization. In one embodiment the declarative markup of the form markup file includes only UI controls that can be natively rendered by the PIM native form renderer . In another embodiment the form markup file may contain both PIM native controls and UI controls not natively supported by the PIM .

According to embodiments the form markup file may contain data bindings that specify internal and external data sources to be bound to UI controls or events subscriptions specifying events generated by the UI controls that should be handled by custom business logic. When rendering a custom UI form generated from a form markup file the PIM native form renderer invokes a forms runtime engine to process the data bindings and event subscriptions . The forms runtime engine executes on the computer along with the PIM and loads the form markup file from which the native form specification was generated in order to process the data bindings and event subscriptions specified in the form markup. In one embodiment the form markup file used to generate the native form specification is distributed to each computer on which the PIM and the forms runtime engine execute. In another embodiment the markup from the form markup file is stored in the PIM form storage along with the native form specification for the custom UI form. In a further embodiment the forms runtime engine also renders any UI controls on the custom UI form that are not native to the PIM .

Data bindings included in the form markup file specify a source of data from which the contents of a UI control will be populated. For example a combo box control includes a dropdown selection box from which a user interacting with the control may select a value. The markup defining the combo box control in the form markup file may specify that the dropdown selection box is to be populated with values from a specific data source when the control is displayed to the user. The forms runtime engine may bind data from both internal PIM data and external data to the UI controls on the form as will be described in greater detail below in regard to .

Event subscriptions included in the form markup file specify custom business logic that is to be executed when a particular event is generated by the custom UI form or a control on the form. For example the markup defining the combo box control described in the example above may further specify that a particular sequence of business logic should be executed when an OnChange event is generated by the combo box control in other words when the value of the combo box is changed by the user. In one embodiment the custom business logic specified by the event subscriptions in the form markup file is contained in a custom event handler module that also executes on the runtime computer with the forms runtime engine and the PIM .

The custom event handler module contains functions or methods that are invoked by the forms runtime engine upon the generation of an event by the UI control specified in an event subscription as will be described in greater detail below in regard to . In a further embodiment the custom event handler module is an object module that is compliant with the component object model COM from MICROSOFT CORP. It will be appreciated however that the custom business logic for an event subscription may be packaged in any method commonly known in the art that would make the business logic available to the forms runtime engine and the PIM during the rendering of the custom UI form.

The FormXML markup also includes an Entity element which specifies a data source to be bound to UI controls later in the code listing. Like the CodeReference element described above the Entity element specifies a namespace of acct and a name AccountClass which is used to reference the data source internally in the form markup file . The Entity element further specifies that the data for the data source is to be accessed through the LOBI FOR MICROSOFT OFFICE SHAREPOINT SERVER software from MICROSOFT CORPORATION specifically from a class named SAPAccountClass using the method FindAll of that class. The forms runtime engine will utilize this information to connect to the data source and retrieve the data for populating any bound controls as will be described in more detail in regard to .

As further illustrated in the FormXML markup includes elements that dictate the layout of the custom UI form such as a Section element which delineates sections of the form with an optional line and a label of My Section and Row and Cell elements which drive a table like structure for the placement of UI controls on the form. The declarative form markup also contains a Control element that specifies a combo box control that is to be placed on the custom UI form. The combo box control is given a caption of Account Class and is tied to a data field of the object or entity being displayed in the custom UI form named AcctClass. The markup for the combo box control also specifies a data binding for the population of the dropdown portion of the combo box. The data binding references the data source acct AccountClass defined by the Entity element described above. Specifically the dropdown portion of the combo box will be filled with values from the ClassName field of the data source.

The markup for the Control element describing the combo box control includes an event subscription that specifies a custom event handler that should be executed when an OnChange event is generated by the combo box control. The event subscription specifies the AcctClassChange method of the custom event handler module described by the CodeReference element OFS Account described above. The forms runtime engine will utilize this information to execute the AcctClassChange method of the referenced OFS.Account COM object when the OnChange event of the combo box control occurs as will be described in more detail below in regard to .

The FormXML markup in this example also contains a Control element that describes a PIM specific date picker control that is to be placed on the custom UI form. The data picker control is displayed with a caption of Date Created and is tied to the data field CreatedDate of the currently displayed object or entity as further specified in the markup for the Control element .

Referring now to additional details will be provided regarding the embodiments presented herein. In particular is a flow diagram showing a method for generating the native form specification from a form markup file according to one embodiment. It should be appreciated that the logical operations described herein are implemented 1 as a sequence of computer implemented acts or program modules running on a computing system and or 2 as interconnected machine logic circuits or circuit modules within the computing system. The implementation is a matter of choice dependent on the performance and other requirements of the computing system. Accordingly the logical operations described herein are referred to variously as states operations structural devices acts or modules. These operations structural devices acts and modules may be implemented in software in firmware in special purpose digital logic and any combination thereof. It should also be appreciated that more or fewer operations may be performed than shown in the figures and described herein. These operations may also be performed in a different order than those described herein.

The routine begins at operation where the forms generator loads the form markup file and parses the elements from the declarative form markup contained therein. As described above the forms generator uses the FormXML schema to parse the markup according to one embodiment. The routine then proceeds to operation where the forms generator validates that the markup of the form markup file complies with the FormXML schema and that the elements contained in the markup can be rendered by the PIM native form renderer . In order to provide flexibility for the customization of the user interfaces across various enterprise office applications the FormXML schema may support a broader range of UI controls and other elements than can be rendered by the PIM native form renderer . In one embodiment the forms generator ignores the control elements that cannot be rendered during the generation of the native form specification and generates a warning. Similarly properties or attributes of UI controls and other elements not supported by the PIM will be ignored during the generation of the native form specification for the PIM .

From operation the routine proceeds to operation where the forms generator converts the elements parsed from the form markup file to the form or structure required by the native form specification to be generated. For example the FormXML schema specifies that UI controls are laid out on the custom UI form in horizontal rows and vertical columns similar to a hypertext markup language HTML table. The native form specification of the PIM however may use absolute positioning for UI controls requiring an X and Y pixel location be specified for each control. The forms generator will convert the row and column location of the UI controls specified in the FormXML markup to the absolute positions required by the PIM before generating the native form specification according to one embodiment. It will be appreciated by one of ordinary skill in the art that many other aspects of the UI controls or other elements defined by the markup in the form markup file may have to be similarly converted by the forms generator depending on the requirements of the PIM for which the native form specification is being generated.

The routine continues from operation to operation where the forms generator generates the native form specification from the converted elements parsed from the form markup file . The output from this step similarly depends on the specific PIM for which the native form specification is being generated. For example the design of custom UI forms in the MICROSOFT OFFICE OUTLOOK messaging and collaboration client is contained in a binary OUTLOOK form storage OFS file and a forms region manifest XML file. In one embodiment the forms generator uses an application programming interface API exposed by the PIM to generate the binary OFS file while the manifest XML file is generated directly by the forms generator . In another embodiment the files of the native form specification may be directly generated by the forms generator depending on the requirements of the target PIM .

In addition the form markup file may contain references to resource files that contain localized strings for control captions and other displayed text items. According to one embodiment the forms generator also converts the referenced resource files to native PIM localization files as part of the native form specification generation to support localization in the PIM. In a further embodiment the forms generator includes in the generated native form specification the information required to ensure the forms runtime engine is invoked when the custom UI form is rendered by the PIM .

From operation the routine proceeds to operation where the forms generator stores the native form specification in the PIM form storage . For example the OFS and manifest XML files described above generated for a custom UI form may be distributed to each computer where the PIM is installed or may be made available through a shared location that is accessible to all PIM clients requiring the custom UI form. In addition the form markup file utilized to generate the native form specification is made available to the PIM clients. The markup from the form markup file is utilized by the forms runtime engine during the rendering of the custom UI form as will be described in more detail below. The routine then proceeds to operation where the routine ends.

From operation the routine proceeds to operation where the forms runtime engine parses the markup of the form markup file to retrieve the data bindings and event subscriptions for further processing before the custom UI form is rendered by the PIM native form renderer . In one embodiment the form markup file may contain UI controls not native to the PIM that the PIM native form renderer cannot render. As described above the forms runtime engine also performs the instantiation and initialization of these non native UI controls.

The routine then proceeds from operation to operation where the forms runtime engine processes the data bindings parsed from the form markup file . Specifically the forms runtime engine binds data to the UI controls in the form markup file based on the data source specified in the markup. Data may be bound from both internal PIM data and external data sources. In addition data may be bound from multiple data sources for a single UI control. According to one embodiment for data bindings specifying a data source referencing internal PIM data the forms runtime engine binds the data to the UI control specified in the markup and the data binding functions are handled by the UI control. For data bindings specifying a data source referencing external data the forms runtime engine manages all of the data binding functions including initial population of data in the control from the external data source. In a further embodiment the forms runtime engine also manages adding or updating external data when the custom UI form is saved.

It will be appreciated by those skilled in the art that because processing of the data bindings by the forms runtime engine may require several seconds some or all of this processing may be deferred until after the custom UI form has been fully rendered. In this way a user may begin to interact with the custom UI form before the data binding process is complete.

From operation the routine proceeds to operation where the forms runtime engine subscribes to the events for the UI controls specified by the event subscriptions parsed from the form markup file . Only the events specified by the events subscriptions are subscribed to in order to maintain performance of the custom UI form when displayed by the PIM according to one embodiment. In a further embodiment the event subscriptions are configured to invoke the forms runtime engine when a corresponding event is generated by the custom UI form or control. The forms runtime engine then dispatches the event to the custom event handler specified in the associated event subscription as will be described in detail below.

Next the routine proceeds from operation to operation where the PIM native form renderer renders the custom UI form to the display according to the native form specification generated from the form markup file and the initializations data bindings and event subscriptions performed by the forms runtime engine . In one embodiment the forms runtime engine also has the capability to render a number of UI controls beyond those natively rendered by the PIM as described above.

From operation the routine proceeds to operation where the forms runtime engine monitors for the subscribed events. If a subscribed event is detected the routine proceeds to operation where the forms runtime engine dispatches the event to the custom event handler specified in the associated event subscription . As described briefly above the custom event handlers may be contained in methods or functions exposed by the custom event handler module according to one embodiment. It will be appreciated however that the forms runtime engine may execute any method or function exposed on the computer upon which the forms runtime engine and the PIM are located including methods exposed by the PIM . In a further embodiment the methods or functions specified in the event subscriptions have a standard calling interface based upon the PIM for which the custom UI form is generated. If no further subscribed events are generated and the custom UI form is closed then the routine proceeds from operation to operation where the routine ends.

Based on the foregoing it should be appreciated that technologies for incorporating custom user interface forms into a personal information manager using a declarative form markup specification are provided herein. Although the subject matter presented herein has been described in language specific to computer structural features methodological acts and computer readable media it is to be understood that the invention defined in the appended claims is not necessarily limited to the specific features acts or media described herein. Rather the specific features acts and mediums are disclosed as example forms of implementing the claims.

The subject matter described above is provided by way of illustration only and should not be construed as limiting. Various modifications and changes may be made to the subject matter described herein without following the example embodiments and applications illustrated and described and without departing from the true spirit and scope of the present invention which is set forth in the following claims.

