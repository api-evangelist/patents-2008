---

title: Protocol exchange and policy enforcement for a terminal server session
abstract: Example embodiments of the present disclosure provide techniques for performing multiple protocol exchanges over a single socket connection, one preceding another, in order to provide a platform for policy exchange between terminal servers and a gateway. The protocol exchanges may occur without using additional ports while ensuring that the terminal server state is restored to the previous state. In an embodiment, such a method may adhere to terminal server security levels and perform an exchange with the terminal servers by replicating remote access security layer exchanges and authenticating the gateway to the terminal server.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07941549&OS=07941549&RS=07941549
owner: Microsoft Corporation
number: 07941549
owner_city: Redmond
owner_country: US
publication_date: 20080916
---
A terminal services gateway TSG is a server that may allow authenticated and authorized remote desktop clients to connect to terminal services resources inside a network such as a corporate network. The clients may use protocols such as the Remote Desktop Protocol RDP to connect to a resource within the corporate network through the gateway. When a remote desktop client connects to a terminal server via a terminal services gateway the gateway typically opens a socket connection with the terminal server and redirects all client traffic to a port normally reserved for such purposes. The terminal services gateway also typically exchanges gateway and remote access policies for the connection.

Once the client and terminal server remote access protocol exchange commences the terminal services gateway normally cannot interfere with the exchange nor can it look into the encrypted exchange to verify if the client is enforcing the agreed upon policies. A rogue client can thus potentially bypass the established policies sent to the client resulting in a potential security breach. Furthermore terminal servers typically have only a single port open on their firewall and thus it is not practical to open another port on the terminal servers for security reasons. Finally the terminal server typically is not be able to differentiate between connections coming via the terminal services gateway from those coming from within the corporate network.

In various embodiments a method and system is disclosed for providing an infrastructure for enabling policy enforcement in a remote access session with a terminal server by performing multiple protocol exchanges with the terminal server over the remote access port. In one embodiment a multi protocol infrastructure is provided so that the gateway may perform an initial secure and authenticated exchange with the terminal server on the remote access port prior to establishing the remote access protocol. Such an initial protocol may replicate the remote access protocol s security layer exchange in order to establish secure and authenticated communication between the terminal services gateway and the terminal server and exchange the gateway s policies with the terminal server securely. Once the exchange is complete the method may tear down the gateway to terminal server high level connection while preserving the socket connection such that the client s remote access traffic can be seamlessly exchanged with the terminal server using the same connection context. Using such a multi protocol infrastructure additional protocol exchanges may be implemented prior to the remote access protocol.

In addition to the foregoing other aspects are described in the claims drawings and text forming a part of the present disclosure. It can be appreciated by one of skill in the art that one or more various aspects of the disclosure may include but are not limited to circuitry and or programming for effecting the herein referenced aspects of the present disclosure the circuitry and or programming can be virtually any combination of hardware software and or firmware configured to effect the herein referenced aspects depending upon the design choices of the system designer.

The foregoing is a summary and thus contains by necessity simplifications generalizations and omissions of detail. Those skilled in the art will appreciate that the summary is illustrative only and is not intended to be in any way limiting.

Certain specific details are set forth in the following description and figures to provide a thorough understanding of various embodiments of the invention. Certain well known details often associated with computing and software technology are not set forth in the following disclosure to avoid unnecessarily obscuring the various embodiments of the invention. Further those of ordinary skill in the relevant art will understand that they can practice other embodiments of the invention without one or more of the details described below. Finally while various methods are described with reference to steps and sequences in the following disclosure the description as such is for providing a clear implementation of embodiments of the invention and the steps and sequences of steps should not be taken as required to practice this invention.

It should be understood that the various techniques described herein may be implemented in connection with hardware or software or where appropriate with a combination of both. Thus the methods and apparatus of the invention or certain aspects or portions thereof may take the form of program code i.e. instructions embodied in tangible media such as floppy diskettes CD ROMs hard drives or any other machine readable storage medium wherein when the program code is loaded into and executed by a machine such as a computer the machine becomes an apparatus for practicing the invention. In the case of program code execution on programmable computers the computing device generally includes a processor a storage medium readable by the processor including volatile and non volatile memory and or storage elements at least one input device and at least one output device. One or more programs that may implement or utilize the processes described in connection with the invention e.g. through the use of an API reusable controls or the like. Such programs are preferably implemented in a high level procedural or object oriented programming language to communicate with a computer system. However the program s can be implemented in assembly or machine language if desired. In any case the language may be a compiled or interpreted language and combined with hardware implementations.

A terminal server is a computer system that maintains applications that can be remotely executed by client computer systems. Input is entered at a client computer system and transferred over a network e.g. using protocols based on the ITU T.120 family of protocols such as for example Remote Desktop Protocol to an application at the terminal server. The application processes the input as if the input was entered at the terminal server. The application generates output in response to the received input and the output is transferred over the network to the client computer system. The client computer system presents the output data. Thus input is received and output presented at the client computer system while processing actually occurs at the terminal server.

In most if not all terminal server environments input data entered at a client computer system typically includes mouse and keyboard data representing commands to an application and output data generated by an application at the terminal server typically includes video data for display on a video output device. Many terminal server environments also include functionality that extended protocols e.g. developed to transfer input and output data to transfer other types of data.

For example virtual channels can be used to extend the RDP protocol by allowing plug ins to transfer data over an RDP connection. Many such extensions exist. For example features such as printer redirection clipboard redirection port redirection etc. use virtual channel technology. Thus in addition to input and output data there may be many virtual channels that need to transfer data. Accordingly at least from time to time there may be requests to transfer output data and one or more channel requests to transfer other data contending for available network bandwidth.

In some cases security measures may prevent remote users from connecting to internal network resources across firewalls and network address translators NATs . This is because in many cases a single port is reserved for remote connections. For example port is typically used for RDP connections and may further be blocked for network security purposes at the firewalls. The gateway may transmit RDP traffic to another port for example port by using an HTTP Secure Sockets Layer Transport Layer Security SSL TLS tunnel. Because many corporations open port to enable Internet connectivity the gateway may take advantage of this network design to provide remote access connectivity across multiple firewalls.

A Gateway Manager may allow the configuration of authorization policies to define desirable conditions for remote users to meet in order to connect to internal corporate network resources. For example an administrator may specify which users may connect to network resources what network resources the users may connect to and whether clients need to use smart card authentication password authentication or other authentication means.

In various embodiments a terminal services remote application may allow users on client computers to connect to a remote computer and run programs that are installed on the remote computer. For example employees may be able to connect to a remote computer at a workplace site and subsequently run a word processing program on that computer. An administrator will typically publish the available programs that remote users may access.

As discussed above clients may use a remote protocol such as Remote Desktop Protocol RDP to connect to a resource using terminal services. When a remote desktop client connects to a terminal server via a terminal server gateway the gateway may open a socket connection with the terminal server and redirect client traffic on the RDP port or a port dedicated to remote access services. The gateway may also perform certain gateway specific exchanges with the client using a terminal server gateway protocol transmitted over HTTPS. Using the terminal server gateway protocol the gateway may exchange gateway and remote access protocol related policies for the connection. An example of a gateway specific policy is a service message capability exchange while an example for a remote access protocol policy is a device redirection policy. Device redirection allows users to redirect certain devices attached to the client session to the terminal server session.

Once the client and terminal server remote access exchange commences the gateway typically has no means to interfere with the exchange or determine the contents of the encrypted exchange to verify whether the client is enforcing the agreed upon policies. Thus a rogue client can potentially bypass gateway policies sent to the client resulting in a potential security breach. For example to bypass a device redirection policy a rogue client can choose to ignore gateway specific policies and request a redirection of devices that are normally prohibited by the gateway. The gateway merely acts as a tunnel that receives client packets on one channel and passes them to the terminal server on another and thus will no longer access the content of messages once the remote session commences.

As discussed above terminal servers typically have only one port available for remote access services. In some embodiments only port is open on the firewall and thus it is not practical to open another port on the terminal servers for security reasons. Nevertheless terminal servers may need to enforce authentication and encryption for exchanges that they perform over the remote access port. Finally it can be seen that a terminal server does not differentiate between connections coming via the gateway and those coming directly within the network. Those skilled in the art will appreciate that clients within the corporate network may typically be treated in a more trusted fashion due to physical controls that may be enforced for resources within for example a corporate campus. Clients accessing a corporate network from a remote location are typically required to adhere to more extensive authentication procedures because of the inability of the authenticating system to physically identify the source. Thus it is advantageous for a terminal server to identify whether a request originates from within the corporate network or using remote access in order to apply the appropriate security and authentication measures.

In some embodiments gateway specific policies for the remote desktop connection may be enforced by sending the gateway policies to the client using the terminal server gateway protocol between the gateway and the remote client. However this method may be vulnerable to attacks from a rogue client who can choose to ignore the terminal server gateway policies.

In one embodiment a secure device redirection SDR feature may provide device redirection policy enforcement of the policies set by the gateway administrator. The device redirection feature may thus allow redirection of devices on the client machine to the terminal server. In an embodiment the gateway may provide administrators the capability to set device redirection specific policies for clients connecting from outside the corporate network. These policies may then be sent to the client during the gateway protocol capability exchange in the remote protocol handshake sequence. The client may then have the correct policies to adhere to during the remote session.

However since device redirection is a feature specific to the remote access protocol which may not be visible to the gateway device redirection may be vulnerable to attack and exploitation by rogue clients. Gateways typically rely on the client s integrity to enforce the agreed upon policies. Furthermore terminal servers may not be aware of the presence of the gateway and furthermore may not know if a client is connecting from inside the corporate network or outside of the network. This weakness can potentially be exploited by a rogue client who can choose not to abide by the gateway s policy. Thus compliance enforcement may be difficult and may further increase the risk for potential data stealth and the risk of an attack surface on the server. For example a rogue client may be able to upload and run malicious programs on the server. Additionally kiosk machines can allow a rogue entity to set up without the knowledge of the end user and can potentially gain access to confidential information from the server.

Thus it would be useful to establish a communication between a gateway and a terminal server once the gateway opens the socket connection with the terminal server but before the remote access protocol handshake between the client and the terminal server is initiated. In an embodiment the gateway may exchange a connection request and negotiate and exchange protocol and authentication information before continuing with the connection. In one embodiment the connection request may be a X.224 Connection Request sent from a client to the gateway server during a Connection Initiation phase. The gateway may respond with an X.224 Connection Confirm message. From this point all subsequent data sent between the client and the gateway may be wrapped in an X.224 Data Protocol Data Unit. The client and gateway may then exchange basic connection settings. If security methods are being employed and encryption is in force then the client may generate session keys which are used to encrypt and validate the integrity of subsequent remote access traffic. For example an encrypted 32 byte random number may be sent to the gateway which is encrypted with the public key of the gateway. The client and gateway may then utilize the random numbers to generate session keys which are used to encrypt and validate the integrity of subsequent remote access traffic. Secure client data such as username password and an auto reconnect cookie may then be sent to the gateway. Finally the gateway may send the set of capabilities it supports to the client and the client may respond with its capabilities.

After both the gateway and terminal server have completed the security filter handshake and the connection is secured the gateway may instantiate a protocol prior to enabling the remote access traffic. The gateway may exchange policies with the terminal server during this initial protocol phase. By instantiating such a protocol prior to establishing the remote access protocol those skilled in the art will appreciate that the gateway may be able to establish and enforce a redirection policy without relying on the client s integrity. The terminal server may also now be able to differentiate between connection requests from internal and external clients which can allow terminal server administrators to establish different policies for clients internal and external to the corporate network. Furthermore the described process may be repeated to instantiate multiple protocols prior to establishing the remote access protocol.

Those skilled in the art will appreciate that by instantiating multiple protocols in such a manner over a single connection a remote access mechanism may be able to provide a multi purpose infrastructure with the capability to exchange various types of information between a gateway and terminal server securely before the remote protocol exchange is initiated. Such protocol exchanges may further take place while ensuring the server side enforcement of policies to counter potential attacks from rogue clients.

The above described infrastructure for exchanging protocols may be provided while providing for backward compatibility to ensure that older clients may be supported and that the design is not client dependent. In some embodiments gateway administrators may be provided the means to allow or deny connections to older terminal servers since secure device redirection may not be supported in corporate networks that include terminal servers that do not support the infrastructure.

Those skilled in the art will further appreciate that the instantiation of two separate protocols on the same remote access port and socket connection one preceding the other may further allow the gateway to preserve the connection context without the need to use identifiers to identify clients. By allowing the direct exchange of policies with the terminal server the gateway does not need to rely on the integrity of the client and may not avoid giving computer systems human attributes need to identify rogue clients.

Those skilled in the art will further appreciate that the above described process may enable terminal servers processes to differentiate between intranet and internet connections or those connections originating from within the corporate network and those originating outside the corporate network. Thus terminal server administrators may set different policies for the two types of clients.

In an embodiment the above described infrastructure may support exchanging up to 256 different types of policies between the gateway server and terminal server. Furthermore if the terminal server protocol handler is specific to the remote access protocol then to differentiate between the two protocols the data packets may be encapsulated in appropriate data units to enable the handler to distinguish the protocols.

Referring now to illustrated is an exemplary multiple protocol sequence that may be used in various embodiments of the present disclosure. Initially a client may request a remote access connection to a network by making a connection request to a gateway server. In response a gateway protocol processor may establish a socket connection with a terminal server. The gateway protocol processor may replicate the remote access exchange by sending a connect request via a pre protocol handler to a terminal server protocol handler to determine the security protocol and authentication mechanism. The gateway protocol processor may activate a gateway security filter and initiate an SSPI handshake and perform mutual authentication using SSL. Security Support Provider Interface SSPI is an application programming interface API used to perform a variety of security related operations such as authentication. CredSSP is one exemplary service available through SSPI that enables an application to delegate the user s credentials from the client by using the client side SSP to the target server through the server side SSP . The CredSSP is also used by Terminal Services to provide single sign on. Other means of performing security operations may be used. The terminal server protocol handler may also activate its terminal security filter for the exchange. The gateway protocol processor may then send an initial protocol capability packet which comprises a capability set to the terminal server protocol handler via the pre protocol handler . The capability set is further described below.

The terminal server protocol handler may send back a protocol vector response in the response packet. Such a capabilities vector may include confirmation of the capabilities received in the protocol packet and is further described below. The terminal server protocol handler may then reset its security filter . The gateway protocol processor may also reset its security filter when it receives the protocol response packet from the terminal server protocol handler . At this point the gateway protocol processor may then begin transmitting remote access packets from the client .

Referring to illustrated are exemplary protocol packets that may be used in various embodiments of the present disclosure. In an embodiment the gateway capability request packet may comprise a X224 Header 7 bytes a Protocol Identifier 1 byte and the Capabilities Array . Each capability described by the Capabilities Array may further comprise a capability ID and a capability size which may be followed by a capability buffer . The gateway capability response packet may comprise a X224 Header 7 bytes a Protocol Identifier 1 byte and a Capabilities ID Array bytes number of capabilities . The gateway capability response packet may contain an array of capability ID s that have been processed at the terminal server. One byte may be allocated for each capability ID.

In one embodiment the various components may be broken down between gateway components and terminal server components. The protocol processor s transport layer in the gateway e.g. the socket connection handler may be responsible for the multiple protocol exchange. Referring back to the transport layer may include a multiple protocol handler and a security filter which may perform the multiple protocol sequence. The multiple protocol handler may exchange a connection request perform front end authorization and may activate the security filter to provide an encrypted connection with the server.

After completion of the initial protocol sequence both the gateway and terminal servers may reset their security filter layer by resetting security filters and thus returning the terminal server to the same state as before the initial protocol exchange. By returning to the same state the client s remote protocol exchange may not be affected by the initial protocol exchange.

In an embodiment exemplifying various aspects of the invention the following call sequence may be used. First the gateway may initiate an SSL connection with the terminal server and perform Kerberos based machine authentication. In this manner SSL servers and default modes may be treated alike. Once the security layer is established the gateway may send a Connect Request to the terminal server. The terminal server may then respond with a Connect Response. Once the handshake is complete the gateway may begin exchanging multiple protocol packets. The gateway may then send a multiple protocol policy exchange packet. The terminal server may then respond with a multiple protocol policies processed response. Once the protocol exchange is complete the gateway may terminate the SSL connection clean up the context parameters and allow the client to communicate with the server. The terminal server may then reset its security filter and reset the current state in the connection handler.

Referring now to illustrated is an exemplary diagram depicting a remote terminal session instance including sending and receiving data streams. In this example the terminal server includes a pre protocol handler . A terminal gateway may be logically situated at the edge of a corporate network . Data stream can be transmitted in one or more packets by a remote client device .

The following are a series of flowcharts depicting implementations of processes. For ease of understanding the flowcharts are organized such that the initial flowcharts presents a high level overview and subsequent flowcharts provide further additions and or details.

Operation illustrates the operation of instantiating a first protocol over the socket connection. For example a gateway server may replicate the remote access exchange by sending a connect request via a pre protocol handler to a terminal server protocol handler. Operation further illustrates an additional and optional operation of transmitting a connect request establishing a security and authentication mechanism. Operation illustrates the operation of transmitting a gateway capability request packet comprising a capability set. The gateway capability request packet may comprise a Header a Multiple Protocol Identifier and a Multiple Capabilities Array. Each capability described by the Multiple Capabilities Array may further comprise a capability ID and a capability size which may be followed by a capability buffer.

Operation illustrates the operation of receiving a gateway capability response packet comprising a capabilities process vector. The gateway capability response packet may comprise a header a multiple Protocol Identifier and a multiple Capabilities ID Array. The gateway capability response packet may contain an array of capability ID s that have been processed at the terminal server. Operation illustrates the operation of resetting the security filter and system state. After completion of the multiple protocol sequence the gateway and terminal servers may reset their security filter layer by resetting their security filters thus returning the terminal server to the state before the multiple protocol exchange was initiated. By returning to the same state the client s remote protocol exchange may not be affected by the multiple protocol exchange. Operation illustrates the operation of instantiating a second protocol over the socket connection. Operation illustrates the operation of transmitting packets according to the second protocol.

Operation illustrates the operation of informing the terminal server that packets over the second connection will originate from clients outside the corporate network. As discussed above once the client and terminal server remote protocol exchange commences the gateway does not typically look into the encrypted exchange to verify if the client is enforcing the agreed upon policies. A rogue client can potentially bypass the established policies resulting in a potential security breach. By informing the terminal server that packets over the second connection will originate from clients outside the corporate network the terminal server may apply the appropriate policies for the particular data exchange.

Operation illustrates the operation of transmitting a connect request and establishing a security and authentication mechanism and activating security filter. Operation illustrates the operation of transmitting a gateway capability request packet comprising a capability set. The gateway capability request packet may comprise a Header a Multiple Protocol Identifier and a Multiple Capabilities Array. Each capability described by the Multiple Capabilities Array may further comprise a capability ID and a capability size which may be followed by a capability buffer.

Operation illustrates the operation of receiving a gateway capability response packet comprising a capabilities process vector. The gateway capability response packet may comprise a header a multiple Protocol Identifier and a multiple Capabilities ID Array. The gateway capability response packet may contain an array of capability IDs that have been processed at the terminal server.

Operation illustrates the operation of resetting the security and authentication mechanism typically by resetting the security filter and system state. After completion of the multiple protocol sequence the gateway and terminal servers may reset their security filter layer by resetting their security filters thus returning the terminal server to the state before the multiple protocol exchange was initiated. By returning to the same state the client s remote protocol exchange may not be affected by the multiple protocol exchange. Operation illustrates the operation of instantiating a second protocol over the socket connection. Operation illustrates the operation of transmitting packets according to the second protocol.

Operation illustrates the operation of exchanging a session connection request with the terminal server. Operation illustrates the operation of negotiating and exchanging protocol and authentication information with the terminal server. Operation illustrates the operation of exchanging remote access policies with the terminal server. Operation illustrates the operation of resetting the security and authentication mechanism typically be resetting the security filter and system state. Operation illustrates the operation of initiating a remote access protocol between the client and the at least one terminal server.

As described above aspects of the invention may execute on a programmed computer. and the following discussion is intended to provide a brief description of a suitable computing environment in which the those aspects may be implemented. One skilled in the art can appreciate that the computer system of can in some embodiments effectuate the server and the client of . In these example embodiments the server and client can include some or all of the components described in and in some embodiments the server and client can each include circuitry configured to instantiate specific aspects of the present disclosure.

The term circuitry used through the disclosure can include specialized hardware components. In the same or other embodiments circuitry can include microprocessors configured to perform function s by firmware or switches. In the same or other example embodiments circuitry can include one or more general purpose processing units and or multi core processing units etc. that can be configured when software instructions that embody logic operable to perform function s are loaded into memory e.g. RAM and or virtual memory. In example embodiments where circuitry includes a combination of hardware and software an implementer may write source code embodying logic and the source code can be compiled into machine readable code that can be processed by the general purpose processing unit s .

A number of program modules may be stored on the hard disk magnetic disk optical disk ROM or RAM including an operating system one or more application programs other program modules and program data . A user may enter commands and information into the computer through input devices such as a keyboard and pointing device . Other input devices not shown may include a microphone joystick game pad satellite disk scanner or the like. These and other input devices are often connected to the processing unit through a serial port interface that is coupled to the system bus but may be connected by other interfaces such as a parallel port game port or universal serial bus USB . A display or other type of display device can also be connected to the system bus via an interface such as a video adapter . In addition to the display computers typically include other peripheral output devices not shown such as speakers and printers. The system of also includes a host adapter Small Computer System Interface SCSI bus and an external storage device connected to the SCSI bus .

The computer may operate in a networked environment using logical connections to one or more remote computers such as a remote computer . The remote computer may be another computer a server a router a network PC a peer device or other common network node and typically can include many or all of the elements described above relative to the computer although only a memory storage device has been illustrated in . The logical connections depicted in can include a local area network LAN and a wide area network WAN . Such networking environments are commonplace in offices enterprise wide computer networks intranets and the Internet.

When used in a LAN networking environment the computer can be connected to the LAN through a network interface or adapter . When used in a WAN networking environment the computer can typically include a modem or other means for establishing communications over the wide area network such as the Internet. The modem which may be internal or external can be connected to the system bus via the serial port interface . In a networked environment program modules depicted relative to the computer or portions thereof may be stored in the remote memory storage device. It will be appreciated that the network connections shown are examples and other means of establishing a communications link between the computers may be used. Moreover while it is envisioned that numerous embodiments of the invention are particularly well suited for computer systems nothing in this document is intended to limit the disclosure to such embodiments.

The foregoing detailed description has set forth various embodiments of the systems and or processes via examples and or operational diagrams. Insofar as such block diagrams and or examples contain one or more functions and or operations it will be understood by those within the art that each function and or operation within such block diagrams or examples can be implemented individually and or collectively by a wide range of hardware software firmware or virtually any combination thereof.

While particular aspects and embodiments of the invention described herein have been shown and described it will be apparent to those skilled in the art that based upon the teachings herein changes and modifications may be made and therefore the appended claims are to encompass within their scope all such changes and modifications as are within the true spirit and scope of the inventions described herein.

