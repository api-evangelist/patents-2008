---

title: Media streaming in a multi-tier client-server architecture
abstract: Systems, methods, and computer program products permit communication between servers in a server system utilizing a proxy stream communicating over a connection between the servers. A first request for content is received, at a server, and a connection is created with at least one upstream server. At the server a name associated with the content at the upstream server is identified. A second request for the content is transmitted to the at least one upstream server, where the second request identifies the name. The content is then received at the downstream server.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08392530&OS=08392530&RS=08392530
owner: Adobe Systems Incorporated
number: 08392530
owner_city: San Jose
owner_country: US
publication_date: 20081218
---
Video on demand VOD and audio on demand technologies allow users to select and view listen to video or audio content at their convenience. On demand systems can be implemented to stream content which allows a user to view listen as the content is being streamed or to download content to a device such as a computer or digital video recorder DVR for viewing listening at any time. A DVR is a device that records video and audio content in a digital format to a disk drive or other memory medium within the device. DVRs include software for personal computers which enables video content capture and playback to and from the memory medium. DVRs can provide the user with functionality including play pause stop fast forward and rewind. Such functionality can enable a user to pause a live video content stream for viewing at a later time. Alternatively a user can record the live video content stream using the DVR and can playback the recorded video content at any time. DVR functionalities also include enabling a user to seek backwards and forwards within the content stream to view previously played and yet unplayed content.

Many internet service providers ISPs offer VOD streaming whereby a user buys or selects video content and it begins to play almost instantaneously and or downloading to a DVR for viewing in the future. VOD streaming is a one way video transmission over a data network including the Internet used to play video clips and video broadcasts. Unlike VOD downloading whereby movie files are played after the entire file has been downloaded and stored VOD streaming enables videos to be played shortly after only a small amount of content has been received. VOD can also be employed through a two tier client server software architecture model. In a client server relationship one computer program the client makes a service request from another computer program the server. The server can provide services to the client computer and its users. Several standard network functions such as email exchange web access and database access are based on the client server model. In addition to the standard network functions the client can request VOD streaming and or downloading from the server.

This specification describes technologies relating to media streaming in a client server architecture. In general content can be distributed over interconnected network nodes that can selectively transmit receive store and display the content. The interconnected network nodes can either be server or client data processing apparatuses e.g. computers. The server computers can be organized in a multi tiered server architecture where ingest servers e.g. origin servers reside at the top level and one or more intermediate and or edge servers reside at one or more lower levels.

According to some implementations a server side stream object residing on an upstream origin server permits the generation of a proxy stream over a two way connection between downstream and upstream servers which is used to transmit content downstream in the multi tier architecture in response to requests downstream e.g. from a client computer or from a downstream server. The proxy stream is used to communicate requests upstream to one or more servers to request content and permit the one or more servers to transmit the content downstream. The proxy stream is also used by upstream servers to notify downstream servers with status information such as if a failover has occurred. Additionally if a failover has occurred with a particular upstream server the proxy stream enables the identification of one or more alternate upstream servers that may be able to provide content downstream.

In one aspect a computer implemented method for communicating between servers in a server system includes receiving at a server a first request for content creating a connection with at least one upstream server and determining whether the content is available locally at the server. When the content is available locally the content is retrieved and transmitted to at least one downstream server. When the content is not available locally a name associated with the content at the upstream server is identified and a second request for the content is transmitted to at least one upstream server where the second request identifies the name.

This and other aspects can be implemented in systems and computer program products encoded on a computer readable medium including application programming interfaces operable to cause data processing apparatus to perform such operations and can include one or more of the following features.

Particular implementations of the subject matter described in this specification can be implemented to realize one or more of the following advantages. The server side stream object can include computer program product code facilitating the generation of and use of proxy streams as described herein including functions such as stream identification content retrieval and failsafe operation. The use of the stream object permits content and data to be cached at the intermediate and or edge servers which reduces the need for upstream devices e.g. intermediate servers to access storage which can result in slowed delivery of large content. Therefore use of the stream object permits conservation of bandwidth and system resources for high volume streaming of both live and recorded content.

Details of one or more implementations are set forth in the accompanying drawings and the description below. Other aspects can be implemented in systems and computer program products encoded on a computer readable medium operable to cause data processing apparatus to perform such operations. Other features aspects and advantages will become apparent from the description the drawings and the claims.

The present disclosure described systems methods and computer program products to permit the retrieval and playback of recorded and live or near live datastreams in a multi tier architecture.

The plurality of segments can be transmitted as a near live feed to servers and the client computers . In addition the multi tier server architecture can be implemented to transmit a recorded datastream to the client computers . The recorded datastream can be formed by storing the plurality of segments. Three types of servers can reside in the multi tier server architecture an origin server one or more intermediate servers and one or more edge servers . According to some implementations the edge servers may also be referred to herein as edge origin servers.

In some implementations the multi tier server architecture can be implemented in a static tree server structure. In a static tree server structure downstream servers can transmit requests for content to directly connected upstream servers downstream servers do not use efficiency algorithms to search for the best upstream server. Servers more proximal to the origin server are upstream servers. Servers that are more distal from the origin server are downstream servers.

The origin server resides at the top level of the multi tier server architecture . The origin server can act as an ingest server and can receive live video audio and video audio combinations for broadcast. The origin server can obtain a live datastream including a plurality of segments. In some implementations the origin server can obtain the datastream by receiving the live data and segmenting the live data into the plurality of segments. In other implementations the live data can already be segmented when the datastream is obtained by the origin server .

The origin server can transmit the segmented live datastream as a near live feed to intermediate server directly. The origin server also can transmit the segmented live datastream as a near live feed to the one or more edge servers and client computers directly and or indirectly through communication network connections in the multi tier server architecture . The live datastream pre and or post segmentation can be recorded by a recording device operatively coupled to the origin server and transferred to the origin server via a communication port i.e. USB Bluetooth Ethernet wireless Ethernet. The live datastream can be stored at the origin server .

The origin server can also or alternatively transmit a recorded datastream to the intermediate server . The recorded datastream can include a plurality of stored segments where each of the plurality of segments can include a plurality of video frames and or audio samples e.g. recorded from a live datastream.

The intermediate server can reside at the second level of the multi tier server architecture . The intermediate server is connected to the origin server through a communication network connection. The intermediate server can obtain content from the origin server . The obtained content can include the live datastream the near live feed and or the recorded datastream.

The intermediate server can store at least a portion of the near live feed and the recorded datastream locally. In some implementations the intermediate server can store the content in a memory cache of the intermediate server . As additional content is added to and stored in the intermediate server memory cache older content segments can be displaced when the capacity of the memory cache reaches a configurable storage limit. Older content segments can in some implementations be stored in a disk cache so they are not discarded. The intermediate server can transmit the obtained content directly to one or more of the edge servers and indirectly to the client computers through the multi tier server architecture . The intermediate server can be implemented to transmit a request for content to the origin server .

The one or more edge servers can reside at the third level of the multi tier server architecture . The edge servers are connected to the intermediate server through a communication network connection. The edge servers can obtain content from the intermediate server . The obtained content can include the live datastream the near live feed and or the recorded datastream. The edge servers can store at least a portion of the near live feed and the recorded datastream locally. In some implementations the edge server can store the content in a memory cache of the edge server . As additional content is added to and stored in the edge server memory cache older content segments will be displaced when the capacity of the memory cache reaches a configurable storage limit.

The edge servers can transmit the obtained content directly to client computers . The edge servers can be implemented to transmit a request for content to the intermediate server . In some implementations the edge servers can have the same functionalities as the intermediate server and thus can be interchangeable with the intermediate server .

The client computers are connected to the edge servers through a communication network connection. The client computers can obtain content from the edge servers . The obtained content can include the live datastream the near live feed and or the recorded datastream. The client computers can store at least a portion of the obtained content locally e.g. in a buffer. The client computers can be operated by users that can request the recorded datastream the live datastream and or the near live feed from the edge servers .

In an alternative implementation the multi tier server architecture can be implemented to include fewer than three levels of servers. For example the multi tier server architecture can be implemented to include an origin server at the top level one or more intermediate servers at a second level and one or more client computers . The servers and and the client computers are connected via communication network connections. Users at the client computers can request content from the intermediate server .

In some implementations content such as video streams are recorded by the origin server in the multi tier server architecture described above where the origin server is controlled by a content publisher. A server can publish a stream for retrieval by clients or to other servers. For instance XML data may be pulled into a server side script to create a playlist and publish it as a stream for retrieval by client computers. A server can publish a stream to another server for instance to scale live broadcasting applications to support a greater number of clients. The edge and intermediate servers in such implementations do not record the stream and thus to not have the recorded stream available for playback. Instead the edge and intermediate servers retrieve or fetch the recorded stream from the origin server.

In some implementations a server API is used to set up a proxy stream that is used to transmit content downstream in the multi tier architecture in response to requests downstream e.g. from a client computer or from a downstream server in the multi tier architecture . As are known in the art APIs are system level routines that can be used by an application program for tasks such as basic input output and file management. In particular the proxy stream is used to communicate requests upstream to one or more servers to request content and permit the one or more servers to transmit the content downstream. The proxy stream is also used by upstream servers to notify downstream servers with status information such as if a failover has occurred. Additionally if a failover has occurred with a particular upstream server the proxy stream enables the identification of one or more alternate upstream servers that may be able to provide content downstream.

It will be appreciated that although the server API in a server side script is described herein with respect to pulling segments of recorded stream from another server the script may also or alternatively be employed to pull other content from another server. Thus the reference to segments of recorded streams is for illustrative purposes only.

According to some implementations a server side stream object residing on an upstream origin server permits the generation of the proxy stream to retrieve content and status information for the proxy stream over a two way connection between downstream and upstream servers and between client computers and servers. The object can include computer program product code facilitating the generation of and use of proxy streams as described herein including functions such as stream identification content retrieval and failsafe operation. For instance the stream object can be executed on the origin server and employed by a script developer on an intermediate or edge server such as intermediate server or edge server which can aggregate requests from a large number of clients for transmission upstream to the origin server . The use of the stream object also permits content and data to be cached at the intermediate and or edge servers which reduces the need for upstream devices e.g. intermediate servers to access storage which can result in slowed delivery of large content. Therefore use of the stream object permits conservation of bandwidth and system resources for high volume streaming of both live and recorded content.

Additionally although described herein with respect to content requests transmitted for instance directly from an edge server upstream to an intermediate or origin server the stream object permits content such as a recorded stream to be transmitted from one origin server to other servers so that a one to one topology is not required between different tiers in the multi tier architecture . As described in greater detail below the stream object facilitates the publishing of new content name in a local server and specifying that the new name links up to another name on a remote server e.g. an origin server .

As shown in the downstream server first creates a proxy stream over a connection e.g. a two way communication connection e.g. over a communications port with the upstream server . The downstream server can receive a message indicating that the server is unavailable if the connection is unavailable. This may permit the server to connect to an alternative server in a similar manner as described below with respect to communications between the server and the alternative upstream server .

After a communication is established the downstream server can transmit a request to an upstream server e.g. server for content that is not available locally i.e. in the downstream server . The server can receive the request for content from the downstream server and can determine if the content is available locally e.g. in a local data storage device or in a memory cache at the server . If the content is available locally at the server the server can transmit the requested content to the downstream server . The downstream server can store the requested content locally and can transmit the requested content downstream through the communication network to one or more requesting client computers. The client computers can selectively receive store display and view the content on a display device operatively coupled to the client computer.

If the content is not available locally at the server the server can transmit a message to the requesting downstream server informing the downstream server that the content is not available locally. The message from the server also can inform the downstream server that the server is transmitting a second request for the content to an upstream server .

To retrieve content from the upstream server the server performs a name lookup of the content requested from the downstream server . The lookup is performed in a mapping database stored at the server which includes one or more tables associating a content name identified by downstream servers with one or more different names associated with the same content by the upstream server . The use of the mapping database permits the server to publish a new name for content and to specify that the new name links up to another name on the upstream server. This name translation permits the server to be in communication with multiple upstream servers possibly associated with different publishers each having their own naming conventions for content including copies of the same content.

Although illustrated in as local to the server the mapping database can also be external to the server and queried for instance by the server and or by the downstream server . For instance the mapping database can be stored in an external database accessed via one or more networks including the Internet WANs LANs and the like.

It will be appreciated that where there is only a one to one topology from a downstream server to the upstream server there is no need to engage in name mapping because the content will be named the same at both servers. For instance if a client computer requests a stream named X then that name is forwarded to the upstream server e.g. the origin server which will respond by transmitting stream X . However the use of name mapping permits multiple upstream servers which may provide content to downstream servers and clients even if one upstream server e.g. origin server fails as is described in greater detail below. By not having a downstream server adopt the naming scheme of a particular upstream server collisions are avoided.

According to some implementations the name provided to a stream by a downstream server is controlled by a server side action script developer. At the upstream server e.g. origin the stream is published with a known name. In some implementations names can be generated by or received from a content management system or a stream provisioning system. The system does not care however what the names are because the translation occurs using the mapping database. Thus content may be pulled from different networks and insert into the computing system with a different naming convention than the network from which the content is pulled. Additionally from an API on the requesting side e.g. at a client computer types of data may be specified along with content name. Additionally in some implementations a downstream server or client computer can specify that recorded or live content having a particular name such that the server will request the appropriate version and not just name from the upstream server .

Referring again to after a connection is established with the upstream server the upstream server can receive the second request for content from the server where the second request identifies the content by the name identified by the mapping database . The upstream server can determine if the content is available locally e.g. in a local data storage device or in a memory cache at the upstream server . If the content is available locally at the upstream server the upstream server can transmit the requested content to the server . However if the content is not available locally at the upstream server the upstream server can transmit a message to the requesting server informing the server that the content is not available locally. The message from the upstream server also can inform the server that the upstream server is transmitting another request for the content to another upstream server. The mechanism by which a downstream server can request content from an upstream server and the upstream server can transmit either the requested content or a message to the downstream server can continue until the requested content is determined to be available locally at an upstream server.

In some implementations the message from the server can be transmitted to the downstream server periodically e.g. every two seconds to prevent the downstream server from experiencing a time out failure while waiting for the requested content. Similarly the server can be prevented from experiencing a time out failure while waiting for the requested content upon receiving a message from the upstream server . The time out failure limit of each of the servers and can be configurable and can be set to any value. For example the time out failure limit of the server can be set at e.g. 0.5 seconds five seconds or ten seconds.

In some implementations the server can transmit a message to the downstream server upon receiving a message from the upstream server . Receiving a message from the upstream server triggers the server to transmit a message downstream to the downstream server . As each message is transmitted downstream each respective server that receives a message can be prevented from experiencing a time out failure. Thus the server can relay requests for content to the upstream server and can relay messages to the downstream server .

The server can continue to relay messages from the upstream server to the downstream server until the upstream server either retrieves or obtains the requested content and transmits the requested content to the server . The server can then transmit the requested content to the downstream server instead of transmitting the continuation message to the downstream server . Each respective upstream server can send its own request upstream until an upstream server is found that has the requested content available. Due to the nature of the multi tier server architecture the origin server is the last upstream server to receive a request for content from a downstream server. The origin server can transmit the requested content to one or more downstream servers upon obtaining the requested content.

Content may be unable to be retrieved from the upstream server by the server on behalf of the downstream server if two events occur if a communication connection with the upstream server is impossible or the upstream server does not have the content requested by the server .

If a connection cannot be made with the upstream server the server can transmit an alternative request for content to the alternative upstream server . In some implementations the alternative upstream server is an alternative server identified by a server side developer as a backup server. Once a communication with the alternative upstream server the server can determine if the requested content is available locally e.g. in a local data storage device or in a memory cache at the alternative upstream server . If the content is available locally the alternative upstream server can transmit the requested content to the server . The server can store the requested content locally and also can transmit the requested content to the requesting downstream server .

In addition to transmitting the alternative request for content to the alternative upstream server the server also can transmit a notification to e.g. a multi tier server architecture overview computer system. The computer system can receive the notification s from the server can monitor the communication network connections of the multi tier server architecture can alert the multi tier server system administrator to server failure problems as necessary and can re route network traffic and or reconfigure the network. Upon receiving the notification the computer system can implement failover to a functional upstream server can replace the non responsive upstream server with a functional upstream server i.e. the alternative upstream server and or can re route the communication network connections within the multi tier server architecture to circumvent the non responsive and or failed upstream server .

Alternatively if a connection is established with the upstream server but the server does not receive the requested content or a continuation message from the upstream server within a prescribed time limit the server can send an alternative request for the content to an alternative upstream server . The prescribed time limit can be the configurable time out failure limit for the server . The configurable time out failure limit can be set to any value. For example if the upstream server does not transmit the requested content or a continuation message to the server within the configurable time out failure limit of e.g. ten seconds the server can transmit an alternative request for content to the alternative upstream server . The alternative upstream server can determine if the requested content is available locally e.g. in a local data storage device or in a memory cache at the alternative upstream server . If the content is available locally the alternative upstream server can transmit the requested content to the server . The server can store the requested content locally and also can transmit the requested content to the requesting downstream server .

As previously described in addition to transmitting the alternative request for content to the alternative upstream server the server also can transmit a notification to e.g. a multi tier server architecture overview computer system. The computer system can receive the notification s from the server can monitor the communication network connections of the multi tier server architecture can alert the multi tier server system administrator to server failure problems as necessary and can re route network traffic and or reconfigure the network.

It will be appreciated that the server receiving the request from a downstream client computer of server can use an alternative upstream server as a fail over alternative. Thus if there is a disruption on the upstream server such as a crash the server can reconnect to the alternative server alleviating the downstream client or server from having to handle errors.

As shown in and messages may be transmitted downstream in addition to requested content. Messages can include status information corresponding to a proxy stream. Status information can include for instance the status of a TCP IP socket error information and the like as well as the above described messages to effect a timeout mechanism. This permits the use of fail over procedures such as attempting to utilize an alternative upstream server from which to retrieve content.

After a request for content is received a downstream server attempts a connection with an upstream server . The request can be transmitted from any of the one or more downstream servers in the multi tier server architecture. For example the request can be transmitted by an edge server and received at an intermediate server. Alternatively the request can be transmitted by an intermediate server and received at an origin server. In some implementations the origination of the request can be from one of the one or more client computers connected through a communication network connection to the multi tier server architecture. The content can include live datastream broadcasts or recorded datastreams.

If a connection is available a proxy stream is created . If a connection is not available the connection attempt is closed or ended and a connection with an alternative upstream server e.g. an alternative origin server can be attempted . Using the stream object to return status information to the server the alternative upstream server can be automatically identified without identifying the failure or redirect to a client computer. As an alternative to attempting a connection to an alternative upstream server the attempt my be aborted . The process repeats itself until a connection is made and a proxy stream is created or the connection attempt is aborted .

The server receiving the request for content determines if the content is available locally . In response to receiving the request the server can determine if the content is available in a local data storage device. Alternatively in response to receiving the request the server can determine if the content is available in a local temporary storage location e.g. a memory cache. The server receiving the request can be any of the one or more upstream servers in the multi tier server architecture. For example an edge server can receive the request from another downstream edge server. Alternatively an intermediate server can receive the request from a downstream edge server.

If the server receiving the request for content determines that the content is available locally the server retrieves the content . The server can retrieve the requested content when the server determines that the content is available in the local data storage device or in the local memory cache. For example if an intermediate server determines that the requested content is available in its local memory cache the intermediate server can retrieve the content. Alternatively an origin server can determine that the requested content is available in its local data storage device and can retrieve the content.

After determining that the content is available locally the server can transmit the requested content to the downstream server . The downstream server can receive the content from the server. In some implementations the server can transmit the requested content to one or more downstream servers. For example after determining that the requested content is available locally an intermediate server can transmit the requested content to a requesting downstream edge server. The edge server can receive the transmitted content from the intermediate server and can store the transmitted content in a local data storage device or in a local memory cache. In response to obtaining the requested content the edge server also can transmit the content to one or more other downstream nodes e.g. edge servers and or client computers in the communication network.

Alternatively if the server receiving the request for content determines that the content is not available locally the server optionally transmits a continuation message to the downstream server . The server can transmit a continuation message to the requesting downstream server when the server determines that the content is not available in the local data storage device or in the local memory cache. The continuation message can serve as an unavailability notification and can inform the downstream server that the requested content is not available at the server receiving the request for the content. For example if an intermediate server determines that the requested content is not available locally the intermediate server can transmit the continuation message to a requesting downstream edge server.

After determining that the content is not available locally the server can identify the upstream name of the content by a lookup process. The lookup process can be performed in a mapping database stored at the server which can include one or more tables associating a content name identified by downstream servers with one or more different names associated with the same content by the upstream server. The use of the mapping database permits the server to publish a new name for content and to specify that the new name links up to another name on the upstream server. The mapping database can be local or external to the server and queried for instance by the server and or by the downstream server . For instance the mapping database can be stored in an external database accessed via one or more networks including the Internet WANs LANs and the like.

The server can then transmit a request for the content using the name identified by the mapping database to an upstream server . The upstream server can receive the transmitted request for the content from the server. For example after determining that the requested content is not available locally an edge server can transmit a request for the content to an upstream intermediate server. The intermediate server can receive the transmitted request for the content from the edge server and can determine if the requested content is available locally e.g. in a local data storage device or in a local memory cache of the intermediate server. If the requested content is available locally the intermediate server can retrieve the requested content and also can transmit the requested content to the requesting downstream edge server. If the requested content is not available locally at the intermediate server the intermediate server can transmit a continuation message to the requesting downstream edge server and also can transmit another request for content to another upstream server e.g. another intermediate server or the origin server.

The memory stores information within the system . In some implementations the memory is a volatile memory unit. In some implementations the memory is a non volatile memory unit. The machine readable storage device is capable of providing mass storage for the system . In various implementations the machine readable storage device can for example include a hard disk device an optical disk device or some other large capacity storage device.

Implementations of the subject matter and the functional operations described in this specification can be implemented in digital electronic circuitry or in computer software firmware or hardware including the structures disclosed in this specification and their structural equivalents or in combinations of one or more of them. Implementations of the subject matter described in this specification can be implemented as one or more computer program products i.e. one or more modules of computer program instructions encoded on a computer readable medium for execution by or to control the operation of data processing apparatus. The computer readable medium can be a machine readable storage device a machine readable storage substrate a memory device or a combination of one or more of them.

The term data processing apparatus encompasses all apparatus devices and machines for processing data including by way of example a programmable processor a computer or multiple processors or computers. The apparatus can include in addition to hardware code that creates an execution environment for the computer program in question e.g. code that constitutes processor firmware a protocol stack a database management system an operating system a cross platform runtime environment or a combination of one or more of them.

A computer program also known as a program software software application script or code can be written in any form of programming language including compiled or interpreted languages declarative or procedural and it can be deployed in any form including as a stand alone program or as a module component subroutine or other unit suitable for use in a computing environment. A computer program does not necessarily correspond to a file in a file system. A program can be stored in a portion of a file that holds other programs or data e.g. one or more scripts stored in a markup language document in a single file dedicated to the program in question or in multiple coordinated files e.g. files that store one or more modules sub programs or portions of code . A computer program can be deployed to be executed on one computer or on multiple computers that are located at one site or distributed across multiple sites and interconnected by a communication network.

The processes and logic flows described in this specification can be performed by one or more programmable processors executing one or more computer programs to perform functions by operating on input data and generating output. The processes and logic flows can also be performed by and apparatus can also be implemented as special purpose logic circuitry e.g. a FPGA field programmable gate array or an ASIC application specific integrated circuit .

Processors suitable for the execution of a computer program include by way of example both general and special purpose microprocessors and any one or more processors of any kind of digital computer. Generally a processor will receive instructions and data from a read only memory or a random access memory or both. The essential elements of a computer are a processor for performing instructions and one or more memory devices for storing instructions and data. Generally a computer will also include or be operatively coupled to receive data from or transfer data to or both one or more mass storage devices for storing data e.g. magnetic magneto optical disks or optical disks. However a computer need not have such devices. Moreover a computer can be embedded in another device e.g. a mobile telephone a personal digital assistant PDA a mobile audio or video player a game console a Global Positioning System GPS receiver to name just a few. Computer readable media suitable for storing computer program instructions and data include all forms of non volatile memory media and memory devices including by way of example semiconductor memory devices e.g. EPROM EEPROM and flash memory devices magnetic disks e.g. internal hard disks or removable disks magneto optical disks and CD ROM and DVD ROM disks. The processor and the memory can be supplemented by or incorporated in special purpose logic circuitry.

To provide for interaction with a user implementations of the subject matter described in this specification can be implemented on a computer having a display device e.g. a CRT cathode ray tube or LCD liquid crystal display monitor for displaying information to the user and a keyboard and a pointing device e.g. a mouse or a trackball by which the user can provide input to the computer. Other kinds of devices can be used to provide for interaction with a user as well for example feedback provided to the user can be any form of sensory feedback e.g. visual feedback auditory feedback or tactile feedback and input from the user can be received in any form including acoustic speech or tactile input.

Implementations of the subject matter described in this specification can be implemented in a computing system that includes a back end component e.g. as a data server or that includes a middleware component e.g. an application server or that includes a front end component e.g. a client computer having a graphical user interface or a Web browser through which a user can interact with an implementation of the subject matter described is this specification or any combination of one or more such back end middleware or front end components. The components of the system can be interconnected by any form or medium of digital data communication e.g. a communication network. Examples of communication networks include a local area network LAN and a wide area network WAN e.g. the Internet.

The computing system can include clients and servers. A client and server are generally remote from each other and typically interact through a communication network. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client server relationship to each other.

While this specification contains many implementation details these should not be construed as limitations on the scope of the invention or of what may be claimed but rather as descriptions of features specific to particular implementations of the disclosure. Certain features that are described in this specification in the context of separate implementations can also be implemented in combination in a single implementation. Conversely various features that are described in the context of a single implementation can also be implemented in multiple implementations separately or in any suitable subcombination. Moreover although features may be described above as acting in certain combinations and even initially claimed as such one or more features from a claimed combination can in some cases be excised from the combination and the claimed combination may be directed to a subcombination or variation of a subcombination.

Similarly while operations are depicted in the drawings in a particular order this should not be understood as requiring that such operations be performed in the particular order shown or in sequential order or that all illustrated operations be performed to achieve desirable results. In certain circumstances multitasking and parallel processing may be advantageous. Moreover the separation of various system components in the implementations described above should not be understood as requiring such separation in all implementations and it should be understood that the described program components and systems can generally be integrated together in a single software product or packaged into multiple software products.

Thus particular implementations of the disclosure have been described. Other implementations are within the scope of the following claims. For example the actions recited in the claims can be performed in a different order and still achieve desirable results.

