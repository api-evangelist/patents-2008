---

title: Text type-ahead
abstract: Methods and arrangements of text entry are discussed. Embodiments include transformations, code, state machines or other logic to index segments of text from multiple sources and receive segments of text being entered into text-entry applications in a floating application. The embodiments may also involve matching the segments of text to indexed segments of text and entering completions of the received segments of text into the text-entry applications. The completions may be based upon the matching, and the completion of a segment may be entered into the text-entry application from which it was received.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08359532&OS=08359532&RS=08359532
owner: International Business Machines Corporation
number: 08359532
owner_city: Armonk
owner_country: US
publication_date: 20080428
---
The present invention is in the field of text entry. More particularly the present invention relates to methods and arrangements to auto complete user entered text.

Users of applications that accept text entry such as Instant Message IM clients and email programs often type keywords or phrases that they have previously typed or previously seen in a text document. For example an IM user may use some words or phrases regularly. Examples include information about the user s availability such as Sorry on a call right now. Will ping you later long keywords or phrases such as polymorphism or IBM Tivoli Composite Application Manager ITCAM or a referral for a certain expertise. For instance an IM user may type a message to another contact saying For the ABC problem in product XYZ you can contact Joe Somebody as he is the developer of that component. His short name is joesomebody us.ibm.com . Similarly a user may email or IM friends about a recently viewed web page.

In current applications that accept text entry entering text that a user has previously typed or viewed may require manually performing a laborious and time consuming series of steps. Below is an example of the manual method in a scenario in which a user repeatedly asks permission to use a resource 

In this scenario Danny continues to ask the same question and provide the same explanation to other IM users. To avoid retyping Danny may perform the typical steps of copying and pasting. These steps include 

The problems identified above are in large part addressed by methods and arrangements of text entry. One embodiment provides a method of text entry. The method may involve indexing segments of text from multiple sources and receiving segments of text being entered into text entry applications in a floating application. The method may also involve matching the segments of text to indexed segments of text and entering completions of the received segments of text into the text entry applications. The completions may be based upon the matching and the completion of a segment may be entered into the text entry application from which it was received.

In several embodiments the method may involve finding several matches to a segment displaying the matches to a user and receiving from a user a selection of a match. The method may also involve entering a completion of the segment based upon the selected match. The method may include ordering the matches by a characteristic such as the author or location.

The following is a detailed description of embodiments of the invention depicted in the accompanying drawings. The embodiments are in such detail as to clearly communicate the invention. However the amount of detail offered is not intended to limit the anticipated variations of embodiments but on the contrary the intention is to cover all modifications equivalents and alternatives falling within the spirit and scope of the present invention as defined by the appended claims. The detailed descriptions below are designed to make such embodiments obvious to a person of ordinary skill in the art.

Generally speaking methods and arrangements of text entry are contemplated. Embodiments include transformations code state machines or other logic to index segments of text from multiple sources and receive segments of text being entered into text entry applications in a floating application. The embodiments may also involve matching the segments of text to indexed segments of text and entering completions of the received segments of text into the text entry applications. The completions may be based upon the matching and the completion of a segment may be entered into the text entry application from which it was received.

In several embodiments the method may involve finding several matches to a segment displaying the matches to a user and receiving from a user a selection of a match. The embodiments may also involve entering a completion of the segment based upon the selected match. The embodiments may include ordering the matches by a characteristic such as the author or location.

While specific embodiments will be described below with reference to particular circuit or logic configurations those of skill in the art will realize that embodiments of the present invention may advantageously be implemented with other substantially equivalent configurations.

The text entry devices and may select segments of text from objects containing text text objects . Text objects may include text files or retrievable text such as through a query to a local or remote database an application programming interface API call to an application or other text accessible through some sort of interface. A segment may consist of a word a phrase a sentence a paragraph or other unit of text. A phrase may consist of a string of words terminated by particular punctuation marks such as . or or by line return. A word may consist of a string of alpha numeric characters terminated by whitespace or by particular punctuation marks. The text objects may include documents authored by a user of the devices such as email messages and IM and may include documents created by others such as web pages blog entries pages of shopping sites and web encyclopedias. In some embodiments the selection may be based upon patterns of the text. The devices may also index the selected text match text currently being entered by the user into an application to a portion of a segment of the indexed text and enter a remaining portion of the segment of text into the application based upon the matching. The entering of a remaining portion of a segment in response to matching the portion is called text completion or text type ahead.

Network which may consist of the Internet or another wide area network a local area network or a combination of networks may provide data communications among web server and communications program server and the devices and . Web server may have installed and operative upon it software to manage a web site or sites. The software may include instructions to generate content and to communicate with visitors to the web site or web sites.

Communications program server may enable users of the devices and to communicate across network . In some embodiments communications program server may provide instant message service. Examples of instant message programs include Microsoft s Windows Messenger IBM s Lotus Sametime Yahoo Messenger and AOL s AIM . Typically a person at one of the devices and may initiate an instant message chat session by invoking an instant message client program and identifying one or more additional people to participate in the chat session. The initiator may identify other desired participants in the chat session by accessing a directory and selecting individuals or groups of people listed in the directory. The client program may send to the communications program server identifications such as e mail addresses of the other desired participants.

In response the communications program server may attempt to connect to the client workstations or other computing devices of the other desired participants to determine if they are currently on line. If communications program server successfully connects with a desired participant it may create a chat session for the desired participant by invoking the participant s chat session client program and identifying the active members of the chat session. In addition the communications program server may notify the initiator of the desired participants who are not currently available for a chat session.

Communications program server may then establish communications between the participants. In some implementations of chat client programs communication between clients is done on a peer to peer level i.e. directly from a user device such as devices and to another user device without mediation by or assistance from communications program server . In other implementations a message from one participant may be relayed through communications program server . In either implementation a message sent by one participant is sent to all of the other participants and may be displayed on their user devices nearly in real time.

In many embodiments communications program server may provide email service for users of the devices and . Communications program server may contain instructions to receive email messages over network to store the messages and to upload the messages to the users when they sign in. Communications program server may also contain instructions to receive email messages from the users and forward them on the way to their designated destinations. Examples of email programs include IBM Lotus Notes Eudora Outlook and Outlook Express .

The arrangement of web server and communications program server and other devices making up the exemplary system illustrated in is for explanation not for limitation. Data processing systems useful according to various embodiments of the present invention may omit a server or may include additional servers routers other devices and peer to peer architectures not shown in as will occur to those of skill in the art. Some embodiments may include additional servers to supply text to the text entry devices for indexing and matching. Examples include file servers and data base servers. Many embodiments may include a text entry server to index and match text. In these embodiments a text entry device may transmit a segment of text to the text entry server. The text entry server may match the segment against a library of indexed segments of text. In some embodiments a device capable of text completion may not be connected to a network at all. In other embodiments a text completion feature may select text only from text stored on the device.

In other embodiments users may participate in an instant message chat session by establishing peer to peer connections or by visiting a web site. Multiple web servers may maintain a single web site or one web server may maintain multiple sites. Multiple servers may provide for email service. For example a system for providing email may include a separate server or servers for receiving email such as POP3 servers and for sending email such as SMTP servers. Networks in such data processing systems may support many data communications protocols including for example TCP Transmission Control Protocol IP Internet Protocol HTTP HyperText Transfer Protocol WAP Wireless Access Protocol HDTP Handheld Device Transport Protocol and others as will occur to those of skill in the art. Various embodiments of the present invention may be implemented on a variety of hardware platforms in addition to those illustrated in .

Turning to depicted is an embodiment of a computer capable of entering text into applications that includes random access memory RAM a processor or CPU non volatile memory a communications adapter and an Input Output I O interface adapter connected by system bus . Stored in RAM is text type ahead module email program word processor web browser and operating system .

Text type ahead module may comprise computer program instructions for auto completing user entered text. Text type ahead module includes selection module indexing module interface matching module and text entry module . Selection module may select segments of text from text objects. The text objects may include objects composed by a user of computer such as email and IM messages and address books and other data files. The text objects may also include objects created by others such as web pages blog entries pages of shopping sites web encyclopedias company organization charts and inventory lists.

In some embodiments the selecting may be based upon patterns of text in the text objects. The patterns may be based upon the number of words in phrases of the text or upon the number of letters in words of the text. Indexing module may index the selected text. Interface may receive user entered text from several applications such as email instant messenger and word processing. Interface may also display to a user possible completions of the user entered text and may receive a selection of the desired completion from the user. Interface may also receive from a user options for the configuration of text type ahead module . Matching module may match text currently being entered by the user into an application to a portion of a segment of the indexed text and text entry module may enter a remaining portion of the segment of indexed text into the application based upon the matching.

In the embodiment of text type ahead module may constitute a separate program that may provide a type ahead feature for multiple applications including email program and word processor . Text type ahead module may select segments of text from multiple sources including text entered into email program and word processor and text viewed through the web browser . Text type ahead module may gather the selected text into a single repository index the segments match the segments against text entered into either of the programs and and enter text into the program. In further embodiments plug ins to the programs and may enable text type ahead module to access text entered into the programs and to auto complete text entered into the programs. A plug in is an auxiliary program that enhances the capability of another program. The other program may provide a standard interface for plug ins.

In a few embodiments text type ahead module may be based upon a service oriented architecture SOA . SOA may be a form of modular programming especially useful in business applications. Using SOA applications that support business processes may be restructured into reusable building blocks or services. These services can be combined configured and reused for rapid modification. Other components of a SOA application more technical in nature provide operational capabilities such as database access queue support authentication and authorization error handling auditing and logging. Still other components called engines help integrate the other components. They may provide such functions as brokering integration business process management mission critical messaging and transformation capability. An SOA architectures for a text type ahead module may divide the module into such components as data access data base keyword extraction and interface with text entry modules. The data access function may access sources of text for selection and indexing. The data base function may store and access indexed text. Keyword extraction may select text based upon patterns of the text.

Email program may comprise computer program instruction for sending receiving and storing emails. Word processor may comprise computer program instructions for creating and editing text. The computer program instructions may provide for generating windows and processing text that a user may enter into the windows. Operating system may comprise UNIX Linux Microsoft Windows AIX of other operating systems useful for auto completion programs as will occur to those of skill in the art.

The modules shown in RAM are for explanation not for limitation. In several embodiments a text type ahead module may auto complete text entered into programs other than word processing programs and email programs such as web browsers instant message programs and translation programs. For example a user may begin to enter text for translation into a program. The text type ahead module may match the text to text previously entered and auto complete the text entry. The completed entry may then be translated by the translation program.

Text type ahead module email program word processor web browser and operating system components of software are shown in RAM in but many components of such software may be stored in non volatile memory also. Further while the components of such are shown simultaneously present in RAM in some other embodiments only some of the components of RAM may be present at any given time.

Non volatile computer memory may be implemented as a hard disk drive optical disk drive electrically erasable programmable read only memory space EEPROM or Flash memory RAM drives not shown or as any other kind of computer memory as will occur to those of skill in the art. Communications adapter may implement the hardware level of data communications through which one computer sends data communications to other computers such as other computers directly or through a network. The data communications may include transmitting and receiving instant messages and email messages. Such data communications may be carried out serially through RS 232 connections through external buses such as USB through data communications networks such as IP networks and in other ways as will occur to those of skill in the art. Examples of communications adapters include modems for wired dial up communications Ethernet IEEE 802.3 adapters for wired network communications 802.11a b g n adapters for wireless network communications and mobile broadband cards.

I O interface adapter implements user oriented I O through for example software drivers and computer hardware for controlling output to display devices such as display device and audio output device as well as user input from user input device and audio input device . User input device may include both a keyboard and a mouse. Some embodiments may include other user input devices such as speech interpreters bar code scanners text scanners tablets touch screens and or other forms of user input devices. Audio output may include speakers or headphones and audio input device may include a microphone or other device to capture sound.

The computer and components illustrated in are for explanation not for limitation. In other embodiments embedded systems PDAs cell phones BlackBerries and other devices which accept text entry may select text index the selected text match text currently being entered by the user into an application to the indexed text and enter a phrase of text into the application based upon the matching. In other embodiments modules to auto complete text may be implemented in hardware firmware or in state machines or may form a component of an operating system. In several embodiments a computing device may contain two or more processors. In various embodiments a computing device may use point to point interconnects to connect processors or to connect a processor and another element of the computing system.

Selection module may select text from text objects. In some embodiments the selection may be based upon patterns of the text. The text objects may include objects authored by a user of text type ahead module . In many embodiments the text objects may include messages such as email messages and IM Word documents and data files such as address books. Many of these objects may be located on the user s local computer. In several embodiments selection module may select text from objects as the user is composing the objects. These objects may include text from chat windows or word processing documents that have not been saved. Selection module may for example leverage memory buffers available in Microsoft Word to process the latest copy of text. In numerous embodiments selection module may select text stored in non volatile memory or other long term memory.

In some embodiments selection module may also select text from text objects created by others. These text objects may include data files such as address books organizational charts inventory lists and files maintained by other programs which track data such as programs providing the time of day. In many embodiments selection module may select text from remote objects objects accessible over a network such as network in . The remote objects may include text objects available from web sites data base files files available through a file server and other objects. Web text objects may include news sites blog entries pages from shopping sites web encyclopedias and other web sites. News sites may include sites affiliated with a television network and sites that collect news articles news aggregators . The news aggregators may provide an index of the collected articles or may provide a feed of the entire articles.

In many embodiments selection module may access remote text objects by sending a request to an application controlling access to the remote text objects. The request may be sent through a variety of methods. In some further embodiments selection module may request text from remote files through an external application programming interface API provided by a server for the files. The API may implement commands for extracting text from the web site. In many embodiments a web service may provide access to text from remote files. Web services present a standardized way of integrating web based applications. Web services typically provide business services upon request through data communications in standardized formats called bindings. A binding is a specification of a data encoding method and a data communications protocol. The most common binding in use for web services is data encoding in XML according to the SOAP protocol and data communications with HTTP. SOAP Simple Object Access Protocol is a request response messaging protocol that supports passing structured and typed data using XML and extensions. In a few embodiments selection module may access text from a web site by visiting the site to obtain the HTML making up web pages and extracting text from the HTML. Selection module may issue HTML requests for text from the web site. In several embodiments selection module may receive text from a web site through a plug in to a web browser. In other embodiments selection module may access remote text files through other methods of communications as may occur to those of skill in the art.

Selection module includes sources and rules . In the embodiment of a user may specify sources of text from which selection module makes selections. Information about these sources may be stored in sources module . In some further embodiments a user of text type ahead module may specify objects authored by the user such as email and IM messages and address books and other data files. The user may also specify objects created by others such as news sites blog entries pages from shopping sites web encyclopedias company organization charts and inventory lists. In many further embodiments a user may specify a cut off date for text selection. For example in response to a user specification selection module may disregard text created in IM chat conferences or on websites more than two months earlier. In several further embodiments the user may specify directories of files from which to select text created in word processing programs.

In the embodiment of rules module may apply the rules or patterns used by selection module to select segments of text. In some embodiments the rules may apply to the content of the text. In many embodiments the rules may apply to other characteristics of the text such as the author or recipient. In several embodiments the rules or patterns may be based upon the number of words in segments of the text or upon the number of letters in words of the text. Example rules or patterns of segments of text include phrases of four or more words phrases containing at least two words of five or more characters or words of ten or more characters. In some embodiments the rules or patterns may be based upon other factors. For example a pattern of text may consist of text that has been entered at least twice into an application whose text is a source for selection module .

In the embodiment of selection module operates as a rule based pattern matcher selecting text based upon the rules of rules module . In some embodiments the rules may be represented declaratively with rules module containing a representation of a set of the rules as data. Selection module may apply the rules to text by processing the data. In other embodiments rules module may consist of a program into which the rules were hard coded. Execution of the program with text as data may apply the rules to the text.

Indexing module may index segments of text selected by selection module . In some embodiments the index of a segment of text may consist of the text to which the segment may be matched in accordance with matching rules which may define a match between current text and indexed text. Typically the current text and indexed text match when the current text is a beginning portion of the indexed text. For example the currently entered text Are you on CC may match the previously entered text Are you on CCT Dev It won t accept my connection because someone else is logged on. In the above example the current text is exactly the same as a beginning portion of the previously entered text. In this case the index of a segment of text may consist of an initial portion of the segment of text.

In other embodiments the beginning portion and the current text need not be identical for the phrases to match. For example whitespace and other non alpha numeric characters may be disregarded. Hi there may match Hi there. In this example the indexing may delete non alpha numeric characters and may standardize whitespace. Similarly the rules of matching rules may disregard case. For example in some embodiments Are you on CC may match are you on cct dev In these embodiments the indexing may use only lower case characters or may group indexed text differing in case.

A few embodiments may allow matching to the middle of a phrase. For these embodiments indexing module may index a segment of text by multiple portions of the segment. Similarly in embodiments which require matched words to contain the same characters with the possible exception of case an index to a segment may contain exact words from the segment. Oh the other hand in embodiments in which a portion of a segment of selected text may match several segments of current text the indexing to the segment may indicate the range of matches. For example if the matching rules permit transmits to match both transmit and transmitted then transmits may be indexed as transmit where represents any alphanumeric characters. As another example if the matching rules disregard pronouns and articles then the index to a segment of text may consist of a beginning segment stripped of pronouns and articles. Under such matching rules away from office may match I m away from the office. The former phrase may then be used to index the latter. With this indexing scheme a matcher may strip pronouns and articles from the current text and check for the transformed text in the index. In several embodiments the rules of matching rules may disregard short words such as words of three characters or fewer. In several embodiments the rules of matching rules may disregard common words such as definite articles prepositions and other common words. In these embodiments the indexing may remove these words. In many embodiments a user may specify the rules contained in matching rules .

Text entry module may enter text into a document being composed in an application. Matching module may match text being entered by a user into the document current text to a position of a segment of indexed text. Text module may then enter the remaining portion of the segment of indexed text into the document. When the portion of the segment of text matched to the current text is the beginning portion of the segment of the text the entry of the remaining portion amounts to completion of the current text.

Text entry module includes display module and priority rules module . Display module may display matching segments of text to a user through a user interface. A text display may include an entire segment of text that matches current text the remaining portion of text or something in between. For example if the user has typed Are you on CC and that current text is matched Are you on CCT Dev the display may consist of the entire matching text Are you on CCT Dev the remaining portion T Dev or CCT Dev Display module may display possible completions in a floating window. In many of these embodiments auto completion module is a stand alone application that provides auto completion for multiple other applications. Display module may display the possible completions in line in the same window or other display mechanism in which the user is entering text into the document. In some embodiments the possible completions may consist of differing lengths of indexed text. For example the user may enter Are you on CC . Display module may then display both Are you on CCT Dev and Are you on CCT Dev It won t accept my connection because someone else is logged on. as possible completions. An in line display may consist of a scrollable window drop down menu bar or other display mechanism known to those of skill in the art.

The user may select a matching segment of text for entry of the remaining portion into the application. Alternatively the user may continue typing to further restrict the list of matching segments. In some embodiments if there is only one possible match text entry module may automatically enter the text into the application without selection by the user.

Priority rules module may contain rules for the order of display of possible matches. Priority rules module together with selection module indexing module and matching module may attempt to display first the remaining portions of segments of text most likely to be selected by a user. In some embodiments priority rules module may determine an attribute of text and may base the order of display of potential matches on values of the attribute. Attributes of text may include frequency of appearance in news indices or other sources location time period or currency subject matter source and target or recipient. For example in some embodiments priority rules module may rate the indexed segments of text by the number of times they appear in news indices. Segments that appear in more indices may be displayed before segments that appear in fewer indices. Priority rules may be used in combination and where conflicting may be determined according to a numeric weighting or relative priority.

In some embodiments priority rules module may determine a location of a segment of indexed text and may give priority to those segments which match a current location of the user s computing device. In some further embodiments priority rules module may assign to segments of text extracted from a regional article the region of origin of the article as their location. For example news from a municipal web paper may be assigned the location of that municipality. The location of a user s computer may be determined from an IP mapping and the location of a user s mobile device may be determined from techniques such as GPS IP and cellular tower triangulation.

In some embodiments priority rules module may base the priority of matching segments of indexed text on a time period. In further embodiments the time period of text may measure how current the text is. For example yesterday s news may be of a different time period than breaking news. In some further embodiments priority rules module may determine the time period of indexed text from its time of origin. Text from a web page may be dated according to its publication date. The time period of text currently being entered by a user into an application may be determined by an examination of the pattern of word usage of the user. The examination may determine whether the user usually selects words from yesterday s news i.e. they are a newspaper reader or the user usually selects words from the latest breaking news. In these further embodiments priority rules module may give priority to matching segments of indexed text of the same time period or currency as the words selected by the user.

In a few embodiments priority rules module may base the priority of matching segments of indexed text on the source of the text. In further embodiments priority rules module may determine a source of the words entered by a user and may give priority to matching segments from the same sources. For example priority rules module may rank terms from a particular website or even a particular section of a website higher than terms from other websites. In some further embodiments priority rules module may study the pattern of words entered by a user to determine the sources. For example priority rules module may determine that the user usually selects words that come from a particular news site or a section of the news site. In other further embodiments a user may specify sources to receive preference. In many further embodiments priority rules module may assign as the source of text the program creating the text. For example when a user enters text into an IM chat window priority rules module may first display selections from other IM chats with the other participant or participants. In some embodiments of type ahead modules used with IM programs searching indexing and display may be executed in the following order 

Priority rules module may include a learning feature. In some embodiments for example priority rules module may monitor a user s selections of matches to an item of current text. Priority rules module may then display potential matches in order of frequency of selection with the most often selected shown at the top of list the next most often selected shown second etc.

Configuration module may configure the other modules of auto completion module . Configuration module includes source module text selection module scheduler matching rules module and display module . Configuration module may receive specifications from a user about parameters for the operation of the other submodules of auto completion module and may set the parameters. Source module may receive specifications and set parameters about the source of text for indexing and matching such as how to retrieve text from websites blogs news indices specific directories of word processing documents expiration dates for selection and indexing data bases and auxiliary programs that provide data that may be used in text entry. In some embodiments text selection module may receive specifications and set rules describing patterns of text to be indexed such as phrases of at least four words or words of at least ten characters. In many embodiments a user may specify other characteristics of text to be used for selection such as content author or recipient. For example a user may specify that selection of text from postings to a network technology blog should be limited to postings about a specific network protocol. Scheduler may receive information about the scheduling of selection module and indexing module and may set their schedules. Typical schedules may be daily every few days or weekly. A schedule selection and indexing may however be postponed if current I O usage is high. Matching rules module may receive specifications of matching rules for matching module . Display module may set parameters regarding the display of display module . The parameters may for example govern the order in which to show possible completions whether to automatically enter the only possible completion and the minimal number of characters to be entered before possible completions are shown.

Selected text storage module may store segments of text selected by selection module and indices created by indexing module . Selected text storage module may be accessed by matching module for segments of text that match current text. Matching module may pass the matches on to text entry module for display through display module and entry in applications. In some embodiments selected text storage module may also store attributes of the segments of text such as their source or their creation date.

The method may include receiving rules for the selection of text element wherein the text is selected based on the rules element . In some embodiments the rules may be based upon the number of words in phrases or upon the number of letters in words. In many embodiments the rules may also be based on other attributes of the text such as subject author recipient or frequency. For example in some embodiments text may be selected for use in auto completion only if the text is found at least twice in the sources of text. A module such as type ahead module of may apply the rules to select text from the specified sources. In some embodiments the content of rules supplied by users may not provide the exclusive criteria for text selection. In some further embodiments a type ahead module may apply default rules in the absence of rules entered by a user. In many further embodiments a type ahead module may select text based upon built in rules.

The method may include indexing the selected text element . The indexing may be based upon the methods of matching used in element . For example current text may match indexed text when the current text forms the beginning of the indexed text. In such cases the indexed text may be indexed by the beginning phrase. In some embodiments a word in current text may match a word in indexed text if the words have the same stem. In such cases the index to the indexed text may contain the stem of the word.

The method may include receiving segments of text entered into multiple applications element . A text type ahead module may operate in connection with several text entry applications such as a word processing program an email program and several instant messenger programs. The text type ahead module may consist of a floating application which generates a persistent independent process. A persistent process may be always running such as a daemon or software agent. Because of its independence the text type ahead module may require configuration only once rather than once for each of the text entry applications it works with.

To receive text from one of the text entry applications the text type ahead module may be invoked and a user may enter text for completion by the module. For example the user may invoke the module from a window of one of the text entry applications. In some embodiments the user may invoke the text type ahead module from the application by typing a keystroke or a combination of keystrokes such as Ctrl Space or Ctrl Tab in the application. The user may then enter text to be completed by the text type ahead module. In some further embodiments the user may enter the text in line in the window of the application from which the module was invoked. In other further embodiments the text type ahead module may generate a separate window for text entry. In contrast in some embodiments the module may automatically attempt to complete text entered into a text entry application without specific invocation by a user.

The method may include attempting to match the segments received from the various applications to segments of indexed text element . In some embodiments the matching may consist of searching for indexed text with the same beginning as the current text. In many embodiments the portion of indexed text may not be identical to the current text. For example words with the same stem may match or articles may be ignored in finding a match. In some embodiments the method may include filtering the sources based upon a specification of sources from a user. The text type ahead module may limit its search to indexed segments from sources specified by the user. For instance the search for a match may be limited to segments from recent instant message conversations or to segments from a particular web site. Filtering may increase efficiency and speed. Without filtering a text type ahead module may search through all indexed text from whatever source to find matches. It may then eliminate the matches not from desired sources.

If the received segment is successfully matched to one or more indexed segments the method may include ordering the matches element . The ordering may attempt to place the most likely matches first. For example a text type ahead module may place first matching segments found in recent documents typed by the user or may place first matching segments most frequently selected by the user for text completion.

The method may include displaying matches to the user through a user interface element . In some embodiments the display may be in line as part of the display of the application into which the user is entering text. In other embodiments the display may be in a separate window.

The user may select one of the indicated matches through the user interface element . The user may for example click on a match and hit ENTER or TAB. A type ahead apparatus may enter a remaining portion of text into the application based upon the matching element . For example if a match is to an initial portion of a segment of text the apparatus may enter the remainder of the segment. The segment may be the segment selected by the user element or a modification of the segment if exact matches are not required. In some embodiments the user may then treat the text as other user entered text. The user may perform direct in line actions such as search edit copy or paste.

If the user enters additional text into an application which provides for auto completion elements through may be repeated element . Otherwise the method of flowchart may end.

The method of flowchart may enable a user to efficiently enter previously typed text into a text entry window without undergoing the laborious copy and paste process described in the Background section. The user may recall the previously typed text by typing a few characters of the text such as the first few words. The method may also enable a user to recall contact information for a person by typing a few characters from the person s name into the current application. In some embodiments the laborious cut and paste process may be reduced to the following 

The elements of flowchart are for illustration and not for limitation. In alternative embodiments additional elements may be included some of the elements of flowchart may be omitted or the elements may be performed in a different order. Some embodiments may omit some or all of elements and instead using fixed procedures that are not configurable by a user.

As will be appreciated by one skilled in the art the present invention may be embodied as a system method or computer program product. Accordingly the present invention may take the form of an entirely hardware embodiment an entirely software embodiment including firmware resident software micro code etc. of an embodiment combining software and hardware aspects that may all generally be referred to herein as a circuit module or system. Furthermore the present invention may take the form of a computer program product embodied in any tangible medium of expression having computer usable program code embodied in the medium.

Any combination of one or more computer usable or computer readable medium s may be utilized. The computer usable or computer readable medium may be for example but not limited to an electronic magnetic optical electromagnetic infrared or semiconductor system apparatus device or propagation medium. More specific examples a non exhaustive list of the computer readable medium would include the following an electrical connection having one or more wires a portable computer diskette a hard disk a random access memory RAM a read only memory ROM an erasable programmable read only memory EPROM or Flash memory an optical fiber a portable compact disc read only memory CDROM an optical storage device a transmission media such as those supporting the Internet or an intranet or a magnetic storage device. Note that the computer usable or computer readable medium could even be paper or another suitable medium upon which the program is printed as the program can be electronically captured via for instance optical scanning of the paper or other medium then compiled interpreted or otherwise processed in a suitable manner if necessary and then stored in a computer memory. In the context of this document a computer usable or computer readable medium may be any medium that can contain store communicate propagate or transport the program for use by or in connection with the instruction execution system apparatus or device. The computer usable medium may include a propagated data signal with the computer usable program code embodied therewith either in baseband or as part of a carrier wave. The computer usable program code may be transmitted using any appropriate medium including but not limited to wireless wireline optical fiber cable RF etc.

Computer program code for carrying out operations of the present invention may be written in any combination of one or more programming languages including an object oriented programming language such as Java Smalltalk C or the like and conventional procedural programming languages such as the C programming language or similar programming languages. The program code may execute entirely on the user s computer partly on the user s computer as a stand alone software package partly on the user s computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario the remote computer may be connected to the user s computer through any type of network including a local area network LAN or a wide area network WAN or the connection may be made to an external computer for example through the Internet using an Internet Service Provider .

The present invention is described above with reference to flowchart illustrations and or block diagrams of methods apparatus systems and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and or block diagrams and combinations of blocks in the flowchart illustrations and or block diagrams can be implemented by computer program instructions. These computer program instructions may be provided to a processor of a general purpose computer special purpose computer or other programmable data processing apparatus to produce a machine such that the instructions which execute via the processor of the computer or other programmable data processing apparatus create means for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

These computer program instructions may also be stored in a computer readable medium that can direct a computer of other programmable data processing apparatus to function in a particular manner such that the instructions stored in the computer readable medium produce an article of manufacture including instruction means which implement the function act specified in the flowchart and or block diagram block or blocks.

The computer program instructions may also be loaded onto a computer or other programmable data processing apparatus to cause a series of operational steps to be performed on the computer or other programmable apparatus to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide processes for implementing the functions acts specified in the flowchart and or block diagram block of blocks.

The flowchart and block diagrams in the Figures illustrate the architecture functionality and operation of possible implementations of systems methods and computer program products according to various embodiments of the present invention. In this regard each block in the flowchart or block diagrams may represent a module segment or portion of code which comprises one or more executable instructions for implementing the specified logical function s . It should also be noted that in some alternative implementations the functions noted in the block may occur out of the order noted in the figures. For example two blocks shown in succession may in fact be executed substantially concurrently or the blocks may sometimes be executed in the reverse order depending upon the functionality involved. It will also be noted that each block of the block diagrams and or flowchart illustration and combinations of blocks in the block diagrams and or flowchart illustration can be implemented by special purpose hardware based systems that perform the specified functions or acts or combinations of special purpose hardware and computer instructions.

A data processing system suitable for storing and or executing program code will include at least one processor coupled directly or indirectly to memory elements through a system bus. The memory elements can include local memory employed during actual execution of the program code bulk storage and cache memories which provide temporary storage of at least some program code in order to reduce the number of times code must be retrieved from bulk storage during execution.

Input output or I O devices including but not limited to keyboards displays pointing devices etc. can be coupled to the system either directly or through intervening I O controllers.

Network adapters may also be coupled to the system to enable the data processing system to become coupled to other data processing systems or remote printers or storage devices through intervening private or public networks. Modems cable modem and Ethernet cards are just a few of the currently available types of network adapters.

It will be apparent to those skilled in the art having the benefit of this disclosure that the present invention contemplates methods and arrangements for text type ahead. It is understood that the form of the invention shown and described in the detailed description and the drawings are to be taken merely as examples. It is intended that the following claims be interpreted broadly to embrace all the variations of the example embodiments disclosed.

Although the present invention and some of its advantages have been described in detail for some embodiments it should be understood that various changes substitutions and alterations can be made herein without departing from the spirit and scope of the invention as defined by the appended claims. Although an embodiment of the invention may achieve multiple objectives not every embodiment falling within the scope of the attached claims will achieve every objective. Moreover the scope of the present application is not intended to be limited to the particular embodiments of the process machine manufacture composition of matter means methods and steps described in the specification. As one of ordinary skill in the art will readily appreciate from the disclosure of the present invention processes machines manufacture compositions of matter means methods or steps presently existing or later to be developed that perform substantially the same function or achieve substantially the same result as the corresponding embodiments described herein may be utilized according to the present invention. Accordingly the appended claims are intended to include within their scope such processes machines manufacture compositions of matter means methods or steps.

