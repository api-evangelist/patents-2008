---

title: Method and system enabling internet protocol multimedia subsystem access for non internet protocol multimedia subsystem applications
abstract: Methods and systems for facilitating communication between IMS and non-IMS applications are introduced. A network agent may serve as a proxy between one or more client devices and an Internet Protocol Multimedia Subsystem (IMS) infrastructure. The network agent may transmit a monitoring program to a client device for execution on the client device. The monitoring program may collect data regarding communication applications executing on the client device, and then transmit this data to the network agent. From the collected data, the network agent preferably selects translation logic with which to translate between messages compatible with the communication applications executing on the client device and standardized communication applications executing in the IMS infrastructure.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08060604&OS=08060604&RS=08060604
owner: Sprint Spectrum L.P.
number: 08060604
owner_city: Overland Park
owner_country: US
publication_date: 20081010
---
The Internet Protocol Multimedia Subsystem IMS is an architecture for enabling Internet Protocol IP multimedia services for both wireline and wireless devices. The IMS is designed to logically separate access layers from services layers so client devices can utilize various IMS services regardless of through what means the client device is attached to an IP network. Thus for example a wireless communication device WCD may be able to access the same voice over IP VoIP services from both a code division multiple access CDMA wireless wide area network as well as an 802.11 wireless local area network WLAN . Similarly the IMS may allow a user of a WCD to be able to make use of the same services from their Digital Subscriber Line DSL or cable modem access network.

IMS signaling and call control are largely standardized around the Session Initiation Protocol SIP while multimedia bearer traffic typically uses the Real Time Protocol RTP . The IMS also leverages other protocols developed by the Internet Engineering Task Force IETF such as the Session Description Protocol SDP and DIAMETER. These common protocols support applications including VoIP push to talk PTT video over IP gaming audio and video streaming and other multimedia services. Additionally an IMS infrastructure may support instant messaging presence email and social networking applications.

Despite the operators of communication networks adopting the IMS architecture in principle actual IMS deployments have been slow to emerge. This slowness is likely due to many factors including the IMS protocols and applications still being under development the overall cost and complexity of IMS deployment and perhaps most importantly the fact that tens of millions of legacy client devices do not support IMS based protocols.

Given the delays in IMS deployment non IMS versions of the services described above have been developed and deployed for various types of client devices. However these non IMS applications may not support the same variation of the protocols that are employed by the IMS. Thus non IMS applications may be non compatible with the IMS and therefore unable to leverage the centralized services or advanced services of the IMS.

It may be a number of years before all client devices are shipped with IMS compatible protocol stacks and IMS compatible applications. However operators may want to begin leveraging IMS soon so that they can offer operator controlled multimedia services to their subscribers. Thus it is desirable for there to be a means to allow non IMS multimedia services executing on client devices to be integrated into an IMS architecture.

The following methods and systems for facilitating access to IMS services for non IMS applications executing on client devices are introduced. In an exemplary embodiment a network agent is communicatively linked to a client device and a communication infrastructure such as an IMS infrastructure . The communication infrastructure executes at least one standardized communication application while the client device is executing a first communication application that is non compatible with the standardized communication application s .

In order to register with the communication infrastructure the client device transmits its credentials to the network agent. Then network agent performs registration of the client device with the communication infrastructure on behalf of the client device. Before during or after this registration process the network agent transmits a monitoring program to the client device.

Upon receiving the monitoring program the client device preferably executes the monitoring program and the monitoring program collects data on applications that are running on the client device such as the first communication application. The monitoring program may collect data related to each application including the application s name the application s version and the transport layer port numbers being used by the application. Depending on the type of the application the monitoring program may also collect additional data.

In a transaction with the network agent the monitoring program still running on the client device preferably transmits the collected data to the network agent. The network agent uses at least some of this collected data to select a first translation logic. In a subsequent communication session between the first communication application and the standardized communication application s the network agent translates messages between these applications using the selected first translation logic. For example the network agent may translate messages compatible with the first communication application to messages compatible with the standardized communication application s . The network agent may also translate messages compatible with the standardized communication application s to messages compatible with the first communication application.

These messages may be arranged according to variations of SIP and the translation performed by the network agent may involve translating a variation of SIP used by the first communication application to a variation of SIP used by the standardized communication application s and vice versa. This translation may also involve translating source or destination transport layer port numbers in these messages. The first translation logic is preferably based on at least a portion of the data collected by the monitoring program and transmitted to the network agent.

Furthermore the client device may be executing a second communication application and the monitoring program may transmit data related to this second communication application to the network agent. Accordingly the network agent may select a second translation logic so that in a subsequent communication session between the second communication application and the standardized communication application s the network agent translates messages between these applications using the selected second translation logic.

In doing so the network agent enables for example a non IMS application on a legacy device to communicate with standardized applications and services in an IMS infrastructure.

These and other aspects and advantages will become apparent to those of ordinary skill in the art by reading the following detailed description with reference where appropriate to the accompanying drawings. Further it should be understood that the foregoing overview is merely exemplary and is not intended to limit the scope of the invention as claimed.

Disclosed herein are methods and systems for enabling access to IMS communication applications from client devices executing communication applications that are non compatible with the IMS communication applications.

The characteristics and functions of each of these elements are described at a high level in the following subsections. However the descriptions in these subsections are merely introductory and should not be interpreted to limit the characteristics and functions of these elements.

Wireless access network may be either a wide area or a local area wireless network and may be based on technologies such as CDMA Global System for Mobile communications GSM Worldwide Interoperability for Microwave Access WIMAX or IEEE 802.11 Wifi . Wireline network may be based on technologies such as DSL broadband cable television Ethernet Synchronous Optical Networking SONET or one or more of the various T carrier systems. In a deployment only one of wireless access network and wireless access network may be present or multiple wireless access networks and or wireline access networks may be present. Regardless of access network technology both wireless access network and wireless access network preferably allow client device to be communicatively linked to IMS infrastructure .

Client device could be a wireless telephone a wireless personal digital assistant a wirelessly equipped laptop computer a wireless router or another type of mobile or fixed wireless device. Alternatively client device could be a personal computer router server mainframe computer computing chassis or cluster based computational system. Preferably a client device is a subscriber device which is manipulated by a human in order to establish multimedia transactions with the IMS infrastructure . However client device could also be an automated device without a human interface.

Client device may execute one or more multimedia applications that are non compatible with IMS infrastructure . These applications may be pre loaded on client device or downloaded subsequent to the deployment of client device . Furthermore these applications may make use of the same communication protocols as IMS infrastructure but in such a way that the applications are non compatible with the same or similar applications supported by IMS infrastructure . For example applications executing on client device may use a variation of SIP for communication that does not interoperate with the variation of SIP used by IMS infrastructure . SIP is defined in Internet Engineering Task Force IETF Request for Comments RFC 3261 and is incorporated by reference in its entirety herein.

Client device may also be capable of downloading applications from network agent and installing and executing these applications. These applications may take the form of compiled object code scripts or byte compiled intermediate code that executes on a virtual machine of client device . Client device may download these applications from a web site via the hypertext transfer protocol HTTP hypertext transfer protocol over secure sockets layer HTTPS or by some other means. HTTP is defined in IETF RFC 2616 and is incorporated by reference in its entirety herein. HTTPS is defined in IETF RFC 2818 and is also incorporated by reference in its entirety herein.

Client device preferably comprises a central processing unit CPU a memory a network interface for communicating and input output functions. The memory preferably contains CPU executable program instructions encoded to perform the various methods described herein.

Network agent is preferably a device or set of devices that facilitates interoperation between IMS applications and applications that are non compatible with IMS applications. Accordingly network agent preferably facilitates the registration of client device with IMS infrastructure and in particular may proxy such a registration of client device . Additionally network agent stores at least one monitoring program for download to client device and preferably during a registration process for client device network agent transmits an appropriate monitoring program to client device .

Network agent also is capable of receiving data regarding applications executing on client device and determine from this data that one or more applications executing on client device are non compatible with IMS infrastructure . Consequently network agent may use this data to select a translation logic in order to translate messages from a format compatible with an application executing on client device to a format compatible with an application executing in IMS infrastructure and vice versa. For example network agent may translate between a variation of SIP used by client device and a different variation of SIP used by IMS infrastructure .

While network agent is depicted in network as a single component network agent may comprise multiple physical or logical components. For example network agent may be deployed on a single device or on multiple devices. Furthermore the logical functions of network agent may be deployed on different devices. For example the registration function of network agent as described above may be deployed on one or more devices while the translation function of network agent also described above may be deployed on one or more separate devices.

IMS infrastructure preferably contains services and applications that are access network independent. These services may facilitate traditional circuit switched voice telephony VoIP PTT multimedia calling and conferencing audio or video streaming gaming or other audio video or multimedia applications.

IMS infrastructure may comprise multiple logical components each with a distinct function. For example the IMS infrastructure may include one or more of the following elements call session control function CSCF signaling gateway SGW media gateway control function MGCF home subscriber server HSS as well as various application servers and or downloadable application logic.

These IMS infrastructure elements as well as any other IMS infrastructure elements not explicitly discussed here may be combined together or separated into fewer or more logically distinct or physically distinct elements. For example a single logical CSCF may include multiple physical devices. Alternatively a CSCF and an SGW may share a common physical device.

Services layer and access layer are preferably communicatively linked. For example in CSCF is communicatively linked to operator IP network preferably using a session management protocol such as SIP. Similarly MGW and MGCF are communicatively linked preferably using a gateway control protocol such as MEGACO or H.248. The division of service layer and access layer shown in facilitates communications between client devices and both IP network and Publically Switched Telephone Network PSTN . Of course the division between these layers may be made in other ways.

Though not shown in network agent may be categorized as part of either service layer or access layer . Thus network agent may be considered to be part of IMS infrastructure or may be considered to be part of an access network. Furthermore service layer or access layer may include more or fewer components than shown in and these components may be arranged differently. Additionally the functions provided by the logical or physical components depicted in are not limited to the description above and may include functions deployed in or supported by present or future communication networks.

This section describes exemplary network agent operation. The descriptions call flows flow charts methods processes and diagrams referenced herein illustrate preferred embodiments of network agent operation. However network agent operation is not limited to the descriptions herein and may include other functions and components.

At step network agent registers client device with IMS infrastructure using the credentials that network agent received at step . This proxy registration is preferably accomplished through the use of SIP and may include several steps including i network agent transmitting a SIP REGISTER message to IMS infrastructure ii network agent receiving an authentication challenge from IMS infrastructure iii network agent transmitting an authentication response to IMS infrastructure and iv network agent receiving an indication of successful registration from IMS infrastructure . However this proxy registration process may comprise more or fewer messages or different messages.

At step network agent transmits an HTTPS response message to client device indicating successful registration and containing a monitoring program. However instead of using HTTPS in steps and client device and network agent may use HTTP or a different protocol.

Network agent may store or otherwise have access to one or more monitoring programs. Each monitoring program is preferably designed for a specific client device operating system client device model or both. For example if client device is a MICROSOFT WINDOWS laptop then network agent may transmit a monitoring program compatible with MICROSOFT WINDOWS to client device . Similarly if client device is a LINUX personal computer then network agent may transmit a monitoring program compatible with the variation of LINUX executing on the personal computer.

Given the wide variety of operating systems and platforms used on wireless client devices such as cell phones network agent may store dozens of different monitoring programs. These monitoring programs may support operating systems and platforms such as but not limited to WINDOWS MOBILE Java 2 Platform Micro Edition J2ME BINARY RUNTIME ENVIRONMENT FOR WIRELESS BREW PALM OS and BLACKBERRY OS. Furthermore different wireless client device manufacturers and families may exhibit different application programming interfaces APIs memory limits and user interface capabilities. Thus different wireless client devices that support the same operating system or platform such as J2ME may require different monitoring programs.

In order to determine the monitoring program to transmit to a particular client device network agent may use information supplied in the credentials transmitted to network agent at step . Alternatively network agent may determine the monitoring program by looking up the client device s operating system and or platform in a database or network agent may acquire this data during step from IMS infrastructure .

Regardless of how the appropriate monitoring program is determined client device receives the monitoring program and at step the client device executes the monitoring program. This execution may be silent and in the background so that a user of client device is not aware that the monitoring program is executing. On the other hand the execution may be visible and apparent to a user of client device . Moreover client device may even prompt the user to authorize the execution of the monitoring program. Furthermore the execution may occur within another program such as a web browser or the execution may be independent from other applications.

Once executing the monitoring program queries client device to determine communication applications that are executing on client device . To do so the monitoring program may perform functions analogous to a netstat command or a ps command as supported by Microsoft Windows or UNIX command shells. In particular these commands preferably retrieve data about each process executing on client device . The netstat command may also provide a list of transport layer ports being used by each process.

With this data the monitoring program may further query client device for more detail on each communication application. For example some communication applications will report their versions by invoking the communication application from a command shell with a particular command line option. For example a communication application named sipphone may report its version when invoked with a sipphone v command line. The monitoring program may also use similar techniques to determine other data about a communication application.

Furthermore the monitoring program may collect data on communication applications that are not executing on client device at the time that the monitoring program is downloaded to client device . For instance the monitoring program may examine a file system of client device for one or more configuration files associated with communication applications. If the monitoring program finds such a configuration file it may be able to determine the application name application version transport layer port numbers that the application will use and or other information from the configuration file.

A monitoring program may utilize some all or none of the techniques described above to collect data about communication applications. Alternatively the monitoring program may utilize other techniques to collect this data. Furthermore once downloaded to client device the monitoring program may remain resident to client device periodically transmitting data collected about communication applications executing on client device to network agent . On the other hand the monitoring program may be transmitted anew to client device each time client device registers with network agent . The monitoring program may also execute and collect data about communication applications executing on client device each time that it is received by client device .

Regardless of how or when the data is collected in step client device transmits the collected data to network agent . At step network agent transmits an indication that one or more of the communication applications on client device for which data was collected are successfully registered.

At step the network agent uses the collected data to select translation logic for at least one communication application executing on client device . The network agent may determine the appropriate translation logic to select from information local to itself or from information stored in other components devices or databases in network or IMS infrastructure . For example if one of the communication applications executing on client device is a VoIP application that uses a variation of SIP that is non compatible with the variation of SIP used by IMS infrastructure network agent preferably determines how to translate SIP messages between the two variations of SIP. This determination may result in rules and or program logic that manipulate the contents of SIP messages transmitted by client device and IMS infrastructure . The rules and program logic may also denote that other parts of messages transmitted between client device and IMS infrastructure should be manipulated such as transport layer port numbers or IP addresses.

Call flow is illustrative in nature and may contain more or fewer steps than are shown in . Furthermore these steps may be performed in a different order than is depicted in and call flow may be combined whole or in part with other call flows.

This SIP INVITE message may have been originated on behalf of another client device or network entity that is attempting to establish a VoIP or PTT call with client device via IMS infrastructure . IMS infrastructure will direct this SIP INVITE message to network agent because network agent registered client device with IMS infrastructure .

For purposes of this discussion a standardized or standard protocol or application operates according to one or more specifications set forth by a standards organization such as the IETF or some other entity. Other entities that may standardize a protocol or application include a corporation such as a telecommunications service provider or a consortium of corporations. Thus while a client device may be operating a protocol or application according to a standard such as an RFC the protocol or application may be non compatible with protocols and applications as standardized in a communication infrastructure.

The SIP INVITE message in step specifies a destination port . Preferably this port is a transport layer port. For example a Transmission Control Protocol TCP or User Datagram Protocol UDP application may listen to a particular transport layer port designated by a number between 0 and 2 1 for incoming messages. In the case of the SIP INVITE message in step the destination port number is the standard port number for SIP as specified by the Internet Assigned Numbers Authority IRNA . However other destination ports could be used.

The SIP INVITE message in step also specifies SIP header A . As is specified in RFC 3261 as well as other SIP related RFCs SIP messages are comprised of multiple headers each header preferably containing information relevant to the SIP message. Examples of SIP headers include but are not limited to Via From To Call ID CSeq Contact and any other of the many SIP headers defined in RFC 3261 and other SIP related RFCs. Some SIP headers are considered to be mandatory and it is recommended that they appear in all SIP messages while other SIP headers are considered to be optional and they may or may not appear in any given SIP message.

Furthermore some applications use variations of SIP that make use of or require SIP headers that are not supported or only considered optional by other applications using different variations of SIP. Additionally some variations of SIP may use SIP headers in a particular way or with a particular set of parameters. Thus two different SIP applications may be incompatible with one another even though both support SIP. For instance a standalone VoIP client may use a different variation of SIP than IMS infrastructure . In order to overcome this deficiency so that the standalone VoIP client can communicate with IMS infrastructure network agent may use the translation logic selected during method to translate between different variations of SIP.

In particular at step network agent translates the SIP INVITE message from a variation of SIP compatible with IMS infrastructure to a variation of SIP compatible with a communication application executing on client device . For example instead of listening for SIP messages on standard SIP transport layer port the communication application may be listening for SIP messages on transport layer port instead. Thus network agent may translate the destination port number in the SIP INVITE from to . Furthermore the variation of SIP used by IMS infrastructure may transmit SIP header A in SIP INVITE messages while the variation of SIP used by the communication application may instead expect to receive SIP header A but not SIP header A in SIP INVITE messages. Thus network agent may also translate SIP header A to SIP header A.

In full generality network agent may translate one or more of any transport layer port numbers IP addresses SIP headers SIP header parameters and so on in any SIP message used in communication between client device and IMS infrastructure . For purposes of this discussion translation may also include adding SIP headers or other parameters to a SIP message and or removing SIP headers or other parameters from a SIP message. Additionally for some or all SIP messages used in communication between client device and IMS infrastructure translation may not be required. Furthermore network agent may translate messages used in protocols other than SIP such as H.323 the Real Time Streaming Protocol RTSP and so on.

Regardless of how translation occurs at step network agent transmits a translated SIP INVITE message to client device . Preferably this translated SIP INVITE message includes a destination transport layer port of and SIP header A. In response to receiving the translated SIP INVITE message at step client device transmits a SIP 200 OK message to network agent . Preferably the SIP 200 OK message contains source transport layer port and SIP header B. It is typical for IP applications to use the transport layer port number upon which they receive messages as a source transport layer port for responses to those messages. Thus for example it is common but not required for an IP application to receive a message with a destination transport layer port of and respond using a message with a source transport layer port of . Also it is preferable that SIP 200 OK message contains SIP header B.

At step network agent translates the SIP 200 OK message transmitted in step . In particular network agent translates the source transport layer port from to . Furthermore it is assumed that the communication application executing on client device uses SIP header B in SIP 200 OK messages while the IMS infrastructure requires or at least prefers SIP header B instead. Accordingly network agent translates SIP header B to SIP header B . Further it is desirable for this translation to occur according to the translation logic selected in method . Finally at step network agent transmits the translated SIP 200 OK message to IMS infrastructure .

Call flow is illustrative in nature and may contain more or fewer steps than are shown in . Furthermore these steps may be performed in a different order than is depicted in and call flow may be combined whole or in part with other call flows such as call flow .

In order to facilitate the translation of messages between communication applications executing on client and standardized communication applications executing in IMS infrastructure network agent may maintain a translation table such as translation table illustrated in .

Translation table preferably includes information about one or more communication applications executing on client and associated standard communication applications executing in IMS infrastructure . This information preferably includes or refers to translation logic or the information otherwise facilitates the translation of messages between two or more non compatible applications. For example the correlations and logic represented in translation table may include references to other data such as pointers to separately or remotely stored logic.

To illustrate this concept with an example in translation table client VoIP application is mapped to IMS VoIP application . In particular the name version transport layer port and codec list are provided for client VoIP application . Similarly the name version transport layer port and codec list are provided for IMS VoIP application . Furthermore translation table preferably includes SIP header translations . For the example illustrated in translation table SIP header A from client VoIP application would be translated to SIP header A for IMS VoIP application and vice versa. Similarly SIP header B from client VoIP application would be translated to SIP header B for IMS VoIP application and vice versa.

Naturally translation table may contain more or fewer pieces of information about these applications and more or fewer translation rules. Translation table may also include program logic executable by network agent to translate messages or headers from one variation of SIP to another. Furthermore translation table may include translation rules and logic for protocols other than SIP.

Translation table is preferably stored within network agent memory. However translation table may be stored externally to network agent for example in a separate database. Preferably translation table is instantiated at network agent upon selection of translation logic in method but it may be instantiated at network agent at a different point in time.

The following methods illustrate operations according to exemplary embodiments. As these methods are merely exemplary embodiments within the scope of this invention may contain more steps or fewer steps and these steps may take place in a different order. Furthermore the following methods may be combined with one another in part or in whole.

At step the collected data is transmitted to the network agent and at step the network agent uses the collected data to select a translation logic to translate between messages compatible with the given communication application and messages compatible with a standard communication application that is executing in the communication infrastructure. Preferably this communication infrastructure is an IMS infrastructure.

At step the network agent applies the selected translation logic to a subsequent communication session between the given communication application and the standard communication application. Applying the selected translation logic may further comprise i translating a first message received from the given communication application to a format compatible with the at least one standardized communication application ii transmitting the first message to the communication infrastructure iii translating a second message received from the at least one standardized communication application to a format compatible with the given communication application and iv transmitting the second message to the client device.

Accordingly at step the network agent receives from the monitoring program an indication of a first communication application executing on the client device. Preferably the first communication application is non compatible with one or more communication applications executing in the communication infrastructure. For example the first communication application may use a variation of SIP while the communication infrastructure uses a non compatible standardized variation of SIP to communicate.

The indication received by the network agent may comprise the first communication application s name version and or transport layer port numbers used by the first communication application. Alternatively the indication may comprise a list of processes executing on the client device.

At step the network agent in response to receiving the indication selects a first translation logic to translate messages compatible with the first communication application to messages compatible with a standardized application executing in the communication infrastructure and vice versa. At step the network agent receives a first message from the first communication application and at step the network agent uses the first translation logic to translate the first message to be compatible with a standardized communication application executing in the communication infrastructure. Then at step the network agent transmits the translated message to the standardized communication application.

Similarly at step the network agent receives a second message from the standardized communication application and at step the network agent uses the first translation logic to translate the second message to be compatible with the first communication application. Then at step the network agent transmits the translated message to the first communication application.

However the client device may be executing more applications than just the first communication application. Thus at step the network agent may receive from the monitoring program executing on the client device an indication of a second communication application executing on the client device. At step the network agent in response to receiving the indication selects a second translation logic to translate messages compatible with the second communication application to messages compatible with a standardized application executing in the communication infrastructure and vice versa.

Similar to the indication of the first communication application that the network agent received at step the indication of the second communication application may comprise the second communication application s name version and or transport layer port numbers used by the second communication application. Alternatively this indication may comprise a list of processes executing on the client device. Additionally steps and like all steps in method may occur at a different point in method . For example steps and may occur at the same time or at about the same time as steps and respectively.

Regardless at step the network agent receives a third message from the second communication application and at step the network agent uses the second translation logic to translate the third message to be compatible with a standardized application executing in the communication infrastructure. Then at step the network agent transmits the translated message to the standardized communication application. Although it is not shown in method may also contain steps wherein the network agent receives messages from the communication infrastructure and translates the messages according to the second translation logic.

Processor preferably includes one or more CPUs such as one or more general purpose processors and or one or more dedicated processors e.g. application specific integrated circuits ASICs or digital signal processors DSPs etc. Memory in turn may comprise volatile and or non volatile memory and can be integrated in whole or in part with processor . Memory preferably holds program instructions executable by processor and data that is manipulated by these instructions to carry out various logic functions described herein. Alternatively the logic functions can be defined by hardware firmware and or any combination of hardware firmware and software. 

Network interface may take the form of a wireline connection such as an Ethernet Token Ring or T carrier connection. Network interface may also take the form of a wireless connection such as IEEE 802.11 Wifi BLUETOOTH or wide are wireless connection. However other forms of physical layer connections and other types of standard or proprietary communication protocols may be used over network interface .

Furthermore network interface may comprise multiple physical interfaces. If so arranged some of these multiple physical interfaces may be used for communication with a client device such as client device while others may be used for communication with a communication infrastructure such as IMS infrastructure . Alternatively all of the physical interfaces may communicate with both a client device and an IMS infrastructure.

Input output function facilitates user interaction with example network agent . Input output function may comprise multiple types of input devices such as a keyboard a mouse a touch screen and so on. Similarly input output function may comprise multiple types of output devices such as a monitor printer or one or more light emitting diodes LEDs . Additionally or alternatively example network agent may support remote access from another device via network interface or via another interface not shown such an RS 232 port.

By way of example the data in memory may comprise one or more monitoring programs for execution on one or more client devices. Furthermore memory may comprise translation logic to translate messages between communication protocols executing on client devices and standardized communication protocols executing in an IMS infrastructure. This translation logic may take a form similar to that of translation table or may take a different form altogether. Memory may further comprise stored program instructions that are executable by processor to perform the methods and processes depicted in B A B and C. Memory may further comprise stored program instructions that are executable by processor to perform other methods and processes as well.

The data and program instructions stored in memory described above are exemplary and not intended to be a complete description of the data and functions stored in memory or of the data and functions supported by network agent . Network agent may support other functions related to performing tasks associated with enabling IMS access for non IMS applications and these additional functions are preferably encoded as data and program instructions and stored in memory .

Exemplary embodiments have been described above. Those skilled in the art will understand however that changes and modifications may be made to these embodiments without departing from the true scope and spirit of the invention which is defined by the claims.

