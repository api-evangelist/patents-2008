---

title: Virtualization platform configured with virtual connect control
abstract: A data processing system enables configuration of a virtual connect functioning in combination with a virtualization platform. The illustrative data processing system is used with a virtualization platform which is configured to run multiple operating systems simultaneously on one or more physical servers and a virtual connect device which is communicatively coupled to the virtualization platform. The virtual connect device virtualizes connections between the physical server or servers and a network infrastructure. The data processing system comprises a configuration manager that integrates migration and failover of virtual machines operating under the virtualization platform with migration and failover of physical servers operative under the virtual connect device for management of virtual and physical migration and failover using common commands.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08201166&OS=08201166&RS=08201166
owner: Hewlett-Packard Development Company, L.P.
number: 08201166
owner_city: Houston
owner_country: US
publication_date: 20080430
---
Virtual machine technology is used to create and concurrently run one or more guest operating systems on a physical device. One or more virtual machines can operate on a single host computing system each including an operating system with concurrent applications.

Traditionally virtual machines are managed from a different management application infrastructure from physical computers operating as remote physical client computers that access the server over a network.

Embodiments of a data processing system enable configuration of a virtual connect operating in combination with a virtualization platform. The illustrative data processing system is used with a virtualization platform which is configured to run multiple operating systems simultaneously on one or more physical servers and a virtual connect device which is communicatively coupled to the virtualization platform. The virtual connect device virtualizes connections between the physical server or servers and a network infrastructure. The data processing system comprises a configuration manager that integrates migration and failover of virtual machines operating under the virtualization platform with migration and failover of physical servers operative under the virtual connect device for management of virtual and physical migration and failover using common commands.

Various embodiments of a data processing system virtualized network system and associated control techniques combine functionality of a virtualization platform such as a hypervisor or Virtual Machine Monitor VMM and a virtual connect device so that virtual and physical resources can be managed using similar or identical control operations.

In a specific embodiment a Hypervisor can be configured for operation in combination with virtual connect technology.

The illustrative data processing system and associated techniques enable management of virtual computers running in a virtualization platform such as hypervisor communicating with a virtual connect enabling a larger portion of a management software stack to apply to virtual computers as well as physical computers. The hypervisor can communicate with virtual connect to preserve network topologies previously defined by the virtual hypervisor environment and virtual connect enclosure manager.

Failover and migration of a computer application can be realized either for physical hardware or for virtual machines running in a hypervisor or VMM.

A virtual connect device can be used to migrate computer system characteristics from one physical computer to another enabling physical migration of applications from one computer to another without licensing or configuration problems.

Virtualization platforms such as hypervisors and VMMs enable migration in a different way by moving virtual machines from one virtualization platform to another using various types of management applications a property that can be called motion. 

Referring to a schematic block diagram depicts an embodiment of a data processing system that enables configuration of a virtual connect functioning in combination with a virtualization platform . The illustrative data processing system is used with a virtualization platform which is configured to run multiple operating systems simultaneously on one or more physical servers and a virtual connect device which is communicatively coupled to the virtualization platform . The virtual connect device virtualizes connections between the physical server or servers and a network infrastructure . The data processing system comprises a configuration manager that integrates migration and failover of virtual machines operating under the virtualization platform with migration and failover of physical servers operative under the virtual connect device for management of virtual and physical migration and failover using common commands.

In the illustrative embodiment the virtual platform and virtual connect system are separate entities that synergistically coexist and improve performance in comparison to either technology operating independently.

The configuration manager integrates the two types of migration failover virtual and physical under virtual connect and enables value added management components to manage both virtual and physical migration failover. The configuration manager further enables users to manage virtual servers also called virtual machines VMs in the same way that physical servers are managed and further enables a larger portion of management software to be applicable to the virtual environment because any dependencies on virtual connect become a path into virtual machine management.

The configuration manager enables the physical hardware capabilities of the virtual connect and higher level applications of the virtual connect to be seamlessly performed with virtual servers as well. Such physical hardware and virtual resource capabilities include migration of identity from one server to another failover and the like.

In some embodiments the data processing system can further comprise the virtualization platform which runs one or more operating systems simultaneously on the physical server or servers .

Similarly in some embodiments the data processing system can comprise the virtual connect device communicatively coupled to the virtualization platform . The virtual connect device virtualizes connections between the physical servers and the network infrastructure .

Some implementations of the data processing system can also include a physical server that is communicatively coupled to the virtualization platform and configured to run the operating systems .

The data processing system can further comprise a baseboard management controller coupled to the virtual connect device that controls virtualization platform configuration in all conditions including powered on powered off and unbooted conditions.

An example of a baseboard management controller is integrated Lights Out iLO which is made available by Hewlett Packard Company of Palo Alto Calif.

The baseboard management controller can be configured to enable an application to control virtualization platform configuration from a remote location.

The illustrative data processing system enables virtual connect VC products to integrate with virtualization platforms such as Hypervisors virtual machine monitors VMMs and the like by use of a non volatile data structure in the form of a non volatile state storage which may be called a Persistent State storage. Persistent state storage enables management applications to control the hypervisor configuration even when the configuration is not booted.

Management of physical and virtual resources through the non volatile state storage improves operation in comparison to a technique in which virtual connect makes calls into a programmatic interface supplied with the virtualization platform since such operation would be functional only when the virtualization platform is booted. Furthermore calls into the programmatic interface would have differing applications program interfaces APIs depending on the particular virtualization platform. In contrast the illustrative data processing system and associated operating technique is scaleable and enables management for an unbooted computer.

For example a non volatile state storage coupled to the server or servers can be used in combination with the baseboard management controller . The non volatile state storage stores a persistent state of server profiles for the servers for integrating the virtual connect device with the virtualization platform .

The virtual connect device manages a pool of server profiles that contain among other things the server Universal Unique Identifier UUID serial number Network Interface Controller NIC Media Access Control MAC addresses storage World Wide Names and other information. The profile contains the essential identifiers that uniquely identify a server unique.

Persistent state can be accessible by a baseboard management controller on auxiliary power aux power only when a physical computer is unbooted or powered off. Accordingly the configuration of the virtualization platform or hypervisor can be performed via a baseboard management controller or iLO remote Application Programming Interface API from a management tool such as virtual connect device .

The non volatile state storage can be configured to enable an application to access the baseboard management controller on auxiliary power only when the one or more servers are unbooted or powered off.

In some embodiments the data processing system can further include logic operable in the virtual connect device that configures the virtualization platform via a remote Application Programming Interface API in the non volatile state storage .

In a particular implementation the virtual connect device can be configured to manage a pool of server profiles stored in the non volatile state storage whereby the server profiles comprise identifiers that uniquely describe a server. The virtual connect device can access the non volatile state storage and management processors to push and pull server profiles to physical or virtual computer systems whereby the non volatile state storage enables the virtual connect device to push a target server profile into a virtualization platform configuration even before a target server bootstrap loads or powers on.

The target server upon bootstrap loading can be configured to consume the target server profile and instantiate identifiers of the target server profile on virtual hardware within a virtual machine .

In a particular implementation virtual connect can access iLO and other management processors to push and pull server profiles to physical or virtual computer systems. Through the ability of iLO to write persistent state data for a hypervisor virtual connect can push a server profile into the hypervisor configuration even before booting or power on. Upon boot up the hypervisor boots consumes the UUID serial number MAC WWNs and other unique identifiers from persistent state and surfaces the information on the virtual hardware within a virtual machine .

Referring to a schematic block diagram depicts another embodiment of a data processing system that enables configuration of a virtual connect functioning in combination with a virtualization platform . The data processing system comprises a network a virtualization platform and multiple physical servers communicatively coupled to the network and the virtualization platform . The virtualization platform runs multiple operating systems simultaneously on one or more physical servers and a virtual connect device which is communicatively coupled to the virtualization platform . The virtual connect device virtualizes connections between the physical servers and the network . The data processing system comprises a configuration manager that integrates migration and failover of virtual machines operating under the virtualization platform with migration and failover of physical servers operative under the virtual connect device for management of virtual and physical migration and failover using common commands.

The data processing system can comprise management software that manages virtual machines and physical servers identically through the virtual connect device and through management applications that operate through the virtual connect device .

Referring to flow charts illustrate one or more embodiments or aspects of a computer executed method for configuring a virtual connect functioning in combination with a virtualization platform. depicts a computer executed method for operating a virtualized computing system comprising running multiple operating systems simultaneously on one or more physical servers and virtualizing connections between the physical servers and a network infrastructure. Migration and failover of virtual machines are integrated with migration and failover of physical servers. Virtual and physical migration and failover are managed using common commands.

Virtualization configuration can be controlled in all conditions including powered on powered off and unbooted conditions.

Referring to a virtualization method can comprise performing operations on the at least one server from a remote location and accessing the server or servers on auxiliary power only when server is unbooted or powered off.

In some embodiments the virtualization configuration can be set via a remote Application Programming Interface API .

As shown in a computer executed method can comprise managing a pool of server profiles including identifiers that uniquely describe a server and pushing and pulling server profiles to physical or virtual servers whereby server profiles can be pushed to a target server even before the target server bootstrap loads or powers on. The target server profile can be consumed at the target server upon bootstrap loading. Identifiers of the target server profile are instantiated on virtual hardware within a virtual machine.

Referring to schematic block diagrams illustrate an embodiment of a virtual connect that can be used in a data processing system or virtualized network system. Virtual connect can implement server edge input output I O virtualization by interposing an abstraction layer between the servers and external networks so that a local area network LAN and storage area network SAN see a pool of servers rather than individual servers. LAN and SAN connections are made to the pool of servers and a server administrator uses a virtual connect manager user interface to create an I O connection profile for each server. Instead of using default media access control MAC addresses for all network interface controllers NICs and default World Wide Names WWNs for all host bus adapters HBAs the virtual connect manager creates bay specific I O profiles assigns unique MAC addresses and WWNs to the profiles and administers the profiles locally. Local administration of network addresses is applied by virtual connect so that network and storage administrators can establish all LAN and SAN connections once during deployment and not subsequently make connection changes if servers are changed. As servers are deployed added or changed virtual connect maintains the I O profile for that LAN and SAN connection constant.

Virtual connect manager facilitates upgrade and or replacement of a server by enabling the server administrator to reassign the I O profile to a new server. Also virtual connect manager enables the administrator to move a virtual connect profile from a failed server to a spare server all functionality that can be embedded in a virtual connect module. depicts migration showing an administrator moving Ethernet MACs Fibre Channel WWNs and Fibre Channel boot parameters of a failed server to a spare server.

The non volatile state storage or persistent state technology can be used to extend functionality of a virtualization platform. A conventional virtualization platform is managed as any typical operating system or software loaded on physical computer system hardware wherein the configuration can only be managed when the virtualization platform is booted and running. Configuration data that backs the virtualization platform configuration in a conventional system is not tied in any way to the hardware upon which the platform resides except perhaps on a hard disk which is replaceable.

The non volatile state storage persistent state technology described herein recognizes that a virtualization platform creates multiple virtual machines to the user of a computer system and can thus be considered by the user to be an extension of the computer hardware itself rather than simply software running on the hardware. Accordingly improved functionality can be attained by managing operations as an extension of computer hardware enabling users to manage the virtualization platform configuration with the same level of capability as for management of physical hardware. The non volatile state storage persistent state technology further includes a capability to configure remotely from a management console even when the computer s main power is disabled. The configuration data is tied to the physical hardware.

The non volatile state storage comprises a data storage repository tied to the physical computer hardware and a data format that govern the virtualization platform configuration.

In an example embodiment the persistent state enables off line edits of the virtualization platform configuration by software and firmware even in powered off states where only aux power is supplied to the system. The configuration items of interest can be virtual machines networks virtual disk images physical resource reservations and the like.

Virtual machine configuration can be controlled using create delete edit add network interface controller NIC delete NIC edit NIC add storage controller delete storage controller and edit storage controller. Virtual machine edits can apply to name description serial number Universally Unique IDentifier UUID default power state memory configuration CPU configuration preboot execution environment PXE configuration and boot order. Network interface controller NIC edits can apply to name network media access control MAC addresses and the like. Storage controller edits can apply to name virtual disk image name bootable writable and selection of CD DVD versus hard disk.

The non volatile state storage can be used in virtualization platform creation and management of networks and virtual disk images. Other components can only reference the networks by name.

The non volatile state storage can be used for physical resource reservations applied to CPUs memory peripheral component interconnect PCI I O ports and the like.

The persistent state can be synchronized with native configuration data by operation of the virtualization platform which honors the persistent state at startup and monitors persistent state periodically for changes during uptime. The virtualization platform can be made responsible for all reconciliation between persistent state and internal native configuration including remote resource pools. For example the virtualization platform can implement periodic 2 way synchronization. Online changes to the virtualization platform configuration are written back to persistent state so that management tools can read an accurate configuration. To ensure efficiency all writers including the virtualization platform can be implemented to avoid unnecessary writes and limit rewrites to changes in configuration.

The non volatile state storage comprises a data repository. For example a persistent system state can be stored in a primary partition on embedded media and can be marked with a non standard partition type. The format of the partition is not a file system. Instead each consecutive linear sector number is mapped into contiguous memory so that the contents become memory mapped. Modifications can occur in memory and the memory is mapped directly back to sector numbers and written to the mass storage device. Some implementations of the partition can be storage on a Universal Serial Bus USB key secure data card or the like located inside the computer chassis. The simple sector to memory mapping enables non file system aware software to read and write the data without having to implement file system support.

Persistent state can be implemented in different storage media and devices including NVRAM ROM Flash sectors USB Flash media and others.

In an example implementation the flash device containing the persistent state bits may be present on any USB storage device. Externally accessible USB ports are given priority over internal ports for both booting the hypervisor and accessing persistent state. Readers and writers of persistent state scan attached USB storage in priority order to find persistent state. Persistent state can be stored in a primary partition on the flash media and marked with a non standard partition type indicating that the media is solely for the purpose of supporting an integrated virtualization platform. The format of the partition is not a file system. Instead each consecutive linear sector number is mapped into contiguous memory so that the contents become memory mapped. Modifications can occur in memory and the memory is mapped directly back to sector numbers and written to the key card.

Once memory mapped the data remains unsuitable for editing. The format of the data and the fact that the virtualization platform does not include the persistent state as a native configuration file means that all software readers and writers are to unpack the data for editing and repack for writing. A characteristic that does not imply compression or encryption but simply means that the data structure does not have fixed sizes for strings for example so as strings increase in length the remainder of the data structure shifts. Thus most writers unpack the structure allowing each string sufficient room during editing. Similarly the number of virtual machines can change causing shifts in the remaining data.

Readers and writers of the persistent state storage can include virtualization platform software and management software such as baseboard management controller firmware BIOS setup and the like which can read and write the persistent state data. In some implementations the data structure can include a semaphore mechanism to prevent write concurrency corruption.

Concurrent access of the non volatile state storage is enabled with some constraints to ensure correct operation. Several software and firmware components can be readers and writers of persistent state including the virtualization platform a software component that runs after boot but executes after the virtualization platform starts as part of the boot chain a ROM based setup utility that runs at user request and exits prior to boot and the baseboard management controller an asynchronous management processor that can alter parameters in power on power off or on auxiliary power. In an illustrative embodiment concurrency difficulties only arise if the baseboard management controller.

Atomic commits are used to safely write persistent state in a multiple writer environment. For example in a configuration for which baseboard management controller does not write to the non volatile state storage atomic commits are not necessary. In configurations that the baseboard management controller does write to non volatile state storage atomic commits can be controlled by a memory mapped semaphore protocol for example as defined by baseboard management controller firmware. A suitable write procedure can include finding the semaphore control structure in memory searching a legacy BIOS range for a marker parsing the data structure at the marker which points to the semaphore structure following the pointer to the semaphore structure in the address space and accessing the semaphore for control.

The data format or layout of the illustrative non volatile state storage takes into consideration that some of the critical readers and editors of the persistent state are primitive in that access to a file system an I O library string libraries or networking is not enabled and are implemented in assembly language. As a consequence eXtensible Markup Language XML is not a viable choice considering the complexity and variable length string operations. A constant sized structure is inappropriate for primitive software since such a structure is non extensible and therefore hard to version control and strings and arrays would have to be of predetermined size resulting in wasted space or future limitations.

In light of the two opposing goals of XML like extensibility and ease of parsing for primitive software the illustrative non volatile state storage implements a format that combines binary data structures with hierarchy and extensibility.

The data format proposed herein is based upon binary data instead of strings and is thus simple for low level software to parse. However because the data format is extensible no version management difficulties are imposed and robust handling of unknown data elements as well as missing data elements is supported. The hierarchical nature of the format enables data to be logically organized in a tree like structure. Signatures that define separate elements of data are strongly typed and divided into namespaces to prevent data definition collisions between hardware and virtualization platform suppliers.

An example data format includes persistent state configuration data that is preceded by a header that contains basic integrity and schema version information. Given the two opposing goals of XML like extensibility and ease of parsing for primitive software the result is a compromise best likened to a binary XML format which from a parsing perspective is similar to SMBIOS except being hierarchical instead of linear. Binary XML format combines the byte packing and type iteration of SMBIOS with the hierarchy of XML and has characteristics of constant sized elements declarations only a single root element in the manner of XML no attributes and elements that can either contain child elements or a pre defined binary data structure in place of XML child text associated with the element signature. For parsers to handle unknown element signatures the element signature has a bit that determines type for example 1 child elements 0 structure.

An element declaration can be defined as multiple bit fields with each element string given an identifier an indication of children or structure. For a name with a child text string a binary structure is created. An in memory binary data structure can include a sequence of for example a virtual machine root element signature a number of children elements and one or more virtual machine element signatures each including a number of child elements a name element signature structure length and binary structure string .

Element namespaces can be assigned in accordance with an intention of the persistent state format is to be extensible like traditional XML. Thus element value assignments can be formed to ensure conflict free usage. A subset of element value bits can thus be reserved for company signature. Since the purpose of persistent state is for proprietary management of the virtualization platform configuration data that is to be managed can be specified to be assigned according to the company signature. Thus the company namespace can be given priority when storage space is limited.

For unknown elements defined as elements that may be written that are not understood by all parsers several rules can be applied. First every writer is to preserve elements that are not understood including order and hierarchy. Second readers can traverse unknown elements according to a bit in the element signature and a count following the element signature to iterate through child elements and skipping over data structures. Persistent state can be presumed to not be the native configuration file for the virtualization platform so if virtualization platform specific elements are missing default values or values from the native configuration file can be assumed as appropriate.

Missing and or optional elements can be handled according to several rules. If an element is missing that contains a data structure child a clear set of default values is specified. If a child element is missing from a set owned by a parent the set is likely changed purposely changed and the virtualization platform acts accordingly.

The illustrative non volatile state storage and implementation of embedded persistent state on a computer system in combination with the proposed data format that enables data to be read and written by low level software and firmware enable the virtualization platform to read and honor changes made by a management processor when a computer is powered off. A user can configure virtual machines much like physical machines from a BIOS setup utility before the virtualization platform boots. The persistent data is embedded in the physical computer hardware reducing dependencies upon removable hard disks and network access.

Terms substantially essentially or approximately that may be used herein relate to an industry accepted tolerance to the corresponding term. Such an industry accepted tolerance ranges from less than one percent to twenty percent and corresponds to but is not limited to functionality values process variations sizes operating speeds and the like. The term coupled as may be used herein includes direct coupling and indirect coupling via another component element circuit or module where for indirect coupling the intervening component element circuit or module does not modify the information of a signal but may adjust its current level voltage level and or power level. Inferred coupling for example where one element is coupled to another element by inference includes direct and indirect coupling between two elements in the same manner as coupled .

The illustrative block diagrams and flow charts depict process steps or blocks that may represent modules segments or portions of code that include one or more executable instructions for implementing specific logical functions or steps in the process. Although the particular examples illustrate specific process steps or acts many alternative implementations are possible and commonly made by simple design choice. Acts and steps may be executed in different order from the specific description herein based on considerations of function purpose conformance to standard legacy structure and the like.

The block diagrams and flow charts further describe an article of manufacture comprising a controller usable medium having a computer readable program code embodied in a controller for managing virtual machines VMs in a distributed network system.

While the present disclosure describes various embodiments these embodiments are to be understood as illustrative and do not limit the claim scope. Many variations modifications additions and improvements of the described embodiments are possible. For example those having ordinary skill in the art will readily implement the steps necessary to provide the structures and methods disclosed herein and will understand that the process parameters materials and dimensions are given by way of example only. The parameters materials and dimensions can be varied to achieve the desired structure as well as modifications which are within the scope of the claims. Variations and modifications of the embodiments disclosed herein may also be made while remaining within the scope of the following claims.

