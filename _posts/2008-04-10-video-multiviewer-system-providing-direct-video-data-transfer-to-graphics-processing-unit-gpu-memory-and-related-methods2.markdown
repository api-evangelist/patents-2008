---

title: Video multiviewer system providing direct video data transfer to graphics processing unit (GPU) memory and related methods
abstract: A video multiviewer system may include a video input/output (I/O) controller, a system memory, and a graphics processing unit (GPU) comprising a GPU memory. The system may further include a central processing unit (CPU) for operating the video I/O controller to transfer video data to the GPU memory via direct memory access (DMA) without being stored in the system memory, and a display for displaying multiple video windows based upon video data in the GPU memory.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09615049&OS=09615049&RS=09615049
owner: Imagine Communications Corp.
number: 09615049
owner_city: Englewood
owner_country: US
publication_date: 20080410
---
The present invention relates to the field of video processing systems and more particularly to video multiviewers and related methods.

Multiviewers are video platforms that can be used for a wide range of video and broadcast applications. With the increasing shift to digital video formats multiviewers are becoming a tool of ever increasing importance for video engineers and technicians. Multiviewers provide users with the ability to view real time multiple images in various pre configured displays.

One exemplary multiviewer system is the DX series Multiviewers from the present assignee Harris Corp. The DX series Multiviewers deliver modular configurations for 4 8 12 or 16 SDI or composite inputs with auto detect of NTSC PAL or SDI formats. Composite component SDI and line doubled VGA outputs provide customers with a wide range of flexible display options. Front panel controls and remote control via RS 232 422 provide the user with the ability to view real time multiple images in various pre configured displays. Optional software allows the user configuration of displays and multi system control while options also exist for in picture audio monitoring of SDI embedded audio. Standard alarm features include loss of video sync black picture frozen picture detection.

Another exemplary multiviewer system is the 7767VIP4 signal monitoring module from the Evertz Corporation of Burlington Ontario Canada. The module simultaneously accepts auto detects analyzes and displays four synchronous or asynchronous HD SD analog video signals. An additional fifth computer graphic input may be used for display of a dynamic background image.

Despite the advantages of such multiviewer systems further enhancements may be desirable in some applications. For example system memory constraints often impose restrictions on the number of video inputs that may be simultaneously displayed. Additionally the ability of such systems to display added graphic content e.g. backgrounds indicators etc. along with the video inputs on the display may be encumbered by the requirement for separate inputs for such content or for performing offline modifications to video inputs or display templates for example.

In view of the foregoing background it is therefore an object of the present invention to provide a system and related methods for providing enhanced multiviewer video input viewing capabilities.

This and other objects features and advantages are provided by a video multiviewer system which may include a video input output I O controller a system memory and a graphics processing unit GPU comprising a GPU memory. The system may further include a central processing unit CPU for operating the video I O controller to transfer video data to the GPU memory via direct memory access DMA without being stored in the system memory and a display for displaying multiple video windows based upon video data in the GPU memory. Accordingly the system may advantageously increase the amount of video data transferred to the GPU within a given amount of time and thereby allow more video inputs to be displayed on the display than would otherwise be possible if the same video had to be routed through the system memory.

More particularly the video I O controller may assign addresses to be used for video data in the GPU memory and the CPU may cooperate with the video I O controller to lock the assigned addresses. By way of example the GPU memory may include at least one texture buffer in which the CPU locks the assigned addresses. Furthermore the video I O controller may receive a plurality of video input streams and the at least one texture buffer may include a respective texture buffer for each video input stream. Moreover the CPU may operate the GPU to transfer video data in real time. Also the video multiviewer system may further include at least one data communications bus coupled to the video I O controller the system memory the GPU and the CPU.

By way of example the video data may include video frame data. Furthermore the CPU may use at least one Microsoft DirectX application programming interface API for operating the GPU for example.

A related method for displaying multiple video windows on a display may include operating a central processing unit CPU to operate a video I O controller to transfer video data to a GPU memory via DMA without being stored in a system memory. The method may further include displaying multiple video windows on the display based upon video data in the GPU memory.

The present invention will now be described more fully hereinafter with reference to the accompanying drawings in which preferred embodiments of the invention are shown. This invention may however be embodied in many different forms and should not be construed as limited to the embodiments set forth herein. Rather these embodiments are provided so that this disclosure will be thorough and complete and will fully convey the scope of the invention to those skilled in the art. Like numbers refer to like elements throughout and prime notation is used to indicate similar elements in alternate embodiments.

Referring initially to a video multiviewer system and associated method steps are first described. By way of background transferring video streams to the graphics memory of a display typically requires the use of an intermediate system memory buffer to manage the transfer between the hardware device and the display. This consumes host CPU resources memory resources and bus bandwidth thus placing a significant limit on the number of video streams than can be simultaneously displayed with such a typical prior art architecture.

One technology that is currently used for video rendering is Microsoft DirectShow part of the DirectX family of API applications. DirectShow allows the transfer of video streams to video memory but it requires CPU memory resources to manage the transfers. Typical prior art techniques use an input output I O controller to copy video stream data to system memory from the hardware device and then the CPU copies the video stream data to the display device. Unfortunately this requires two separate DMA transfer operations. For relatively high bandwidth video streams this may pose a significant limiting factor in a video system s capabilities since DMA bandwidth has a fixed limit.

The system illustratively includes a video I O controller a system memory and a graphics processing unit GPU including a GPU memory . By way of example the GPU memory may include one or more texture buffers which may be associated with respective video input streams or feeds as will be appreciated by those skilled in the art. The system also illustratively includes a central processing unit CPU . In the illustrated example access between the video I O controller GPU CPU and system memory is provided via a system data communications bus as will also be appreciated by those skilled in the art.

Beginning at Block the video I O controller assigns addresses to be used for video data in the GPU memory i.e. texture buffers at Block . By way of comparison using the DirectShow application discussed above in a typical prior art arrangement the texture buffers would temporarily be locked while textures are loaded from the video I O controller to the texture buffers via the system memory. Drawing or rendering operations would not be permitted during such locked periods. Yet the constant locking and unlocking of the texture buffers requires additional overhead and therefore delays memory transfers. Moreover this can also result in a video I O controller changing destination addresses in the GPU memory which may result in a still further overhead penalty particularly if the video I O controller has to be reset or re programmed to desired texture buffer addresses.

In accordance with the present example the CPU advantageously operates the video I O controller to transfer video data to the GPU memory via direct memory access DMA without being stored in the system memory by cooperating with the video I O controller to permanently or semi permanently lock the assigned addresses at Blocks . By locking the texture buffer addresses for a Direct3D texture for example the physical memory address may be used to allow the video I O controller to DMA transfer video stream data from video inputs directly to respective texture buffers as will be appreciated by those skilled in the art.

The above described technique advantageously does not require the intermediate system memory to be used as a host memory buffer for the video stream data thus saving this memory for other uses and expediting the transfer of the video data to the texture buffers. That is a device driver of the GPU may advantageously not change the physical memory address of the texture buffer so that it therefore remains available for drawing rendering etc. for the duration of the transfer. Considered alternatively since frames of video data only need to be passed via DMA transfer once to the GPU memory i.e. texture buffers instead of twice i.e. also to the system memory it effectively doubles the number of video streams that could otherwise be transferred with the same system resources.

As such multiple video windows i.e. more video stream windows than would be otherwise possible on a comparable prior art system using an indirect transfer of video frame data through a system memory may therefore be displayed on a display based upon the video data in the GPU memory see at Block thus concluding the method illustrated in Block . The CPU is therefore advantageously able to operate the video I O controller and the GPU to transfer video data in real time as will be appreciated by those skilled in the art. Again the foregoing technique may be implemented using one or more of the above noted Microsoft DirectX APIs e.g. DirectShow etc. for operating the GPU although other suitable technologies may also be used as will be appreciated by those skilled in the art.

One particular advantage of the above described configuration is that it allows the CPU and or GPU to render added graphic content or extra adornments to graphics displays. By way of background typical prior art multiviewers are generally not considered graphically rich and are usually limited to displaying video picture in picture PIP displays borders simple text with limited fonts VU meters etc. That is typical multiviewers are largely hardware based solutions that restrict the flexibility of the graphics output of the system. GPU based graphics software products may deliver desired flexibility in output i.e. added graphics content but they generally lack the ability to display multiple real time video streams.

Turning now to a video multiviewer system and associated method are now described. The system illustratively includes a plurality of n video inputs receiving respective video feeds or streams Blocks and a multiviewer video processor coupled to the inputs. More particularly the multiviewer video processor illustratively includes a CPU and a GPU cooperating therewith for generating video data based upon the plurality of video inputs and with added graphic content at Block . More particularly the added graphic content may be provided based upon a user input device s cooperating with the multiviewer video processor for permitting user selection of the added graphic content such as a mouse keyboard etc. at Block . As such a display coupled to the multiviewer video processor may advantageously display multiple video windows based upon the video data at Block thus concluding the illustrated method Block .

The added graphic content is advantageously included along with the video windows which are for respective video input feeds streams whereas such added graphic content could not be similarly provided by the above described prior art systems. That is the system advantageously provides the added graphic content in a digital GPU based format in real time without having to perform offline modifications to the video inputs or display templates or the necessity for separate graphics feeds and separate from the plurality of video inputs and signal feeds.

Thus the implementation of such a GPU based system may advantageously allow for more display features and or flexibility. For example the added graphic content may include one or more of the following borders on the PIPs audio meters text labels both static and dynamic video waveform displays clocks and timers background graphics tally indicators onscreen controls e.g. mouse onscreen menus Rich Site Summary RSS feeds weather data alarm information video metadata information Dolby E metadata information etc. Examples of such added content features are shown in the multiviewer display screen prints of .

The introduction of the GPU into the multiviewer video processor architecture also allows for innovative uses of this technology such as video black and freeze detection using shaders color space conversion and or video waveform displays that would otherwise require dedicated and expensive hardware for example. Those of skill in the art will appreciate other added graphic content features that may also be included in different embodiments.

As noted above the CPU GPU based system e.g. a PC based system may therefore advantageously be used to display multiple simultaneous video streams while leveraging the graphics capabilities of API such as those of DirectX for example. This allows enhanced flexibility in the type and visual richness of the system output presented since this architecture may leverage the pixel processing power of the GPU. The system may allocate a GPU texture buffer for each video stream to be displayed and the video I O module may DMA transfer the video stream data after pre scaling directly to the allocated texture buffer for example as described above with respect to . The various components and functions described above with respect to these figures may also be included in the system and method of and vice versa as will be appreciated by those skilled in the art. The GPU then renders the video streams to the graphics display as separate display windows along with the added graphic content as shown in the illustrated examples.

A related video multiviewer system and associated method are now described with reference to . In the present example the multiviewer video processor advantageously permits scrolling of the multiple video windows on the display based upon the user input device s at Block . For example the multiviewer video processor may permit scrolling among the multiple video windows displayed on the display at a given instant and at least one other video window not displayed on the display at the given instant. That is at the given instant there may be more video feeds available than will fit on the display depending upon the window size configuration screen size etc. Thus a user may be able to quickly use a scroll bar etc. to scroll the screen to see other video windows or portions thereof not visible on the screen at the given instant.

In accordance with another related aspect a user may also be able to scroll through or between the various video feeds that are being displayed on the display . For example in certain applications the multiviewer system operates in concert with a router i.e. a video switching device not shown that is either integral with the multiviewer or an external device. The video input module of the multiviewer typically supports a given number of physical inputs on which it can receive a video stream from the router. The router however has conceivably many hundreds of physical inputs more than the number that can be displayed by the multiviewer system .

In order to display more inputs than would otherwise be physically possible i.e. due to the smaller number of available multiviewer inputs vs. router inputs the multiviewer video processor may advantageously scroll its physical inputs on the display device that is introducing new inputs onto the screen while withdrawing previously viewed inputs from the screen. Simultaneously the multiviewer video processor controls the router to re path new inputs to the multiviewer system to match the visual presentation.

For example if a user wanted to scroll through router inputs through only 32 of them at a time can be routed to the video on a multiviewer with 32 inputs. To scroll through all 500 sources the user could create or set up a scroll such that only a few of the sources are on screen at a time e.g. 10 . Then the multiviewer video processor would route the first router inputs through to 10 physical video inputs on the multiviewer e.g. inputs . As input scrolls off the screen input is scrolling on the screen. The physical input on the multiviewer that was ingesting stream from the router is now re defined for router stream . That is the multiviewer video processor cycles through an old i.e. previously displayed input to make way for a new input from the router. While there are still only 10 physical inputs being used now streams through are the displayed streams rather than the initial streams through . Each time a window or PIP goes off the screen a corresponding new window PIP appears on the screen. So in accordance with this embodiment the order of displayed input sets would be . . . then . . . then . . . etc. A graphic representation of the foregoing would be as follows 

In accordance with another advantageous configuration the multiviewer video processor may also permit scrolling among portions of the multiple video windows displayed on the display at a given instant and at least one other portion not displayed on the display at the given instant. More particularly within a given video window there may be a portion of the video feed that is not displayed due to the window size cropping etc. Thus similar scroll bars etc. may also be used to scroll the given video feed up down left right for example to see the portion of the video feed not visible in the window at the given instant as will also be appreciated by those skilled in the art. Here again the direct memory transfer features and added content features discussed above with respect to the systems and may also be incorporated in the present embodiment and vice versa.

The multiviewer embodiments described may advantageously be used in various applications. By way of example such applications may include broadcast security and medical settings although other applications are also possible.

This application is related to co pending patent applications entitled VIDEO MULTIVIEWER SYSTEM FOR GENERATING VIDEO DATA BASED UPON MULTIPLE VIDEO INPUTS WITH ADDED GRAPHIC CONTENT AND RELATED METHODS Ser. No. 12 100 525 and VIDEO MULTIVIEWER SYSTEM PERMITTING SCROLLING OF MULTIPLE VIDEO WINDOWS AND RELATED METHODS Ser. No. 12 100 529 the disclosures of which are hereby incorporated herein in their entireties by reference.

Many modifications and other embodiments of the invention will come to the mind of one skilled in the art having the benefit of the teachings presented in the foregoing descriptions and the associated drawings. Therefore it is understood that the invention is not to be limited to the specific embodiments disclosed and that modifications and embodiments are intended to be included within the scope of the appended claims.

