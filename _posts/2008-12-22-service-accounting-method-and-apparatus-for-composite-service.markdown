---

title: Service accounting method and apparatus for composite service
abstract: A system for an accounting infrastructure, including monitoring and reporting, for individual services within a composite service. An accounting engine integrates with the composite service to monitor components and parameters of at least one service in the composite service, to provide reporting on the measurements and statistics associated therewith over time. The accounting engine aggregates data for components and services. One example provides the accounting infrastructure as an object-oriented program model, instantiating statistics as objects. The reporting distinguishes each statistic allowing analysis and optimization of processes and services.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08019860&OS=08019860&RS=08019860
owner: SAP AG
number: 08019860
owner_city: Walldorf
owner_country: DE
publication_date: 20081222
---
Example embodiments relate to the field of electronic data processing and specifically to accounting and analysis of services within a composite service structure.

Increasingly Information Technology IT needs integration of processes and systems into end to end processes which streamline execution of composite service automate workflows and reduce operational costs. Such integration is essential in providing access to accurate data as well as to improving inter related and composite processes and systems. As the number of processes and systems grows the links between them begin to create complexity in the landscape driving up operational costs and decreasing the stability of the entire IT environment.

As integration of software products and electronic data processing processes increase it becomes desirable to evaluate individual services software modules or functions to determine not only their individual contribution but their impact as part of a composite structure.

An accounting infrastructure implemented in coordination with a composite service tracks operation of individual services and components within the composite service. A composite service is a service that reuses integrates and orchestrates services to support business processes or specific user experiences. A business process is a set of logically related activities performed within or across an organization to fulfill a defined business objective.

Enterprise services or services as used herein enable business processes by encapsulating functionality and expositing it as a reusable service that may be combined with other services. Services may be assembled together to compose new applications or business processes. Services may be implemented as web services meaning that their interfaces are defined using Internet protocols.

Composite services may include software applications used to implement individual services within the composite services. An individual service within a composite service may be a composite service itself having multiple individual services contained within it. Composite services may be implemented in a service oriented architecture. Services used within or by a composite service may be provided by one or more service providers. A composite application may combine services from several service providers

To create a composite service a developer looks at available services and combines them frequently using models more model development techniques to create new composite services. A composite service may also be referred to as a composite application. A composite service allows a developer to further automate multiple services to meet new or modified business requirements. Traditional enterprise services offered user interfaces configuration through templates settings and programming Application Programming Interfaces APIs to implement and extend functionality of a business process. In a Service Oriented Architecture SOA using an object oriented programming technique business objects used by one service provider are exposed through services so they can be recombined in a composite service to meet new requirements. SOA is a style of software architecture that uses services as the fundamental building blocks. As a composite service includes multiple individual services a developer may desire insight into the operation and behavior of individual services.

Each service includes at least one component which is typically made up of software code. In one embodiment a component is a stateful server side object that handles client events and input data and renders itself according to its state and may have a certain lifecycle. A component may be embedded into another component and may contain other components or may be standalone. Each component consumes resource in a system such as processing power processing time memory allocation time delay in processing etc. For example an ecommerce service may be included in a composite service. The ecommerce service includes multiple components including a first component to provide the user interface to a user a second component to enable product search a third component to enable a selection process a fourth component to enable payment and money transfer and other components.

When a component of a service is launched the processing may be tracked A thread refers to the execution tracking of an operation or function and is a single sequential flow of control within a program. A thread is similar to a sequential software program. A single thread has a beginning a sequence and an end. At any given time during the runtime of the thread there is a single point of execution or execution point. While a thread is not a program and cannot run on its own a thread does run within a program. A developer may desire insight into the operation of a component for a single thread of execution to evaluate resource consumption at and between multiple points in the thread. A component may be built according to a programming model such as in a Java programming model by Sun Microsystems Santa Clara Calif. as an application or kernel component. Note a composite service may perform multiple operations concurrently wherein each execution thread typically has a priority and is executed according to that priority. As discussed hereinabove a thread refers to the execution tracking of an operation or function.

An accounting infrastructure provides insight into such component operation by monitoring resource consumption at various points in the execution thread. Accounting infrastructure information or accounting information may be used by design and modeling tools for creating implementing evaluating and modifying a composite service. Further accounting information identifies resource consumption for one or multiple components within a composite service.

In one embodiment an accounting infrastructure includes a monitoring function to measure consumption of at least one resource. Consumption of a resource is measured by evaluation of at least one parameter of operation of a component. For example to measure consumption of a resource of memory allocation a measured parameter would be the amount of memory used. In one example an accounting infrastructure measures consumption of memory allocation by measuring the amount of memory allocated by a component at different point in execution thread for the component. The monitoring function starts measurement of a component parameter resource at a first point of an execution thread for the component. An accounting infrastructure according to one example embodiment uses the multiple measurements to provide a report of statistics for consumption of the resource by the component. The statistics may include performance over time and may consider the impact of the component on other components within a service or on other services such as where the memory consumption of a first component impacts the available memory for another component. In another example for a resource of processing time a first components processing time may impact a next sequential component. An accounting infrastructure of one embodiment monitors components and families of components and is able to isolate performance of individual components. Measurements of a family of components or related components are available individually and also as an aggregation into one statistic.

The following description contains specific details of exemplary embodiments for illustrative purposes. The specific details are not intended to limit the scope of the embodiments and to be exhaustive regarding possible embodiments. To provide insight into operation of a composite service such as in an enterprise system having distributed computing capacity an accounting infrastructure monitors specific components and thereby the various functions these components realize for an individual service within the composite service.

In one embodiment an accounting infrastructure is implemented by an accounting engine which monitors parameters of at least one component. Where the at least one component includes other components the included components are considered children of that component and that component is considered a parent. The parent and children form a family of components.

In an example embodiment the accounting infrastructure employs object oriented programming to build statistics objects for each measured parameter of a component or family of components. During execution of a component statistics objects are instantiated for measured parameters. Accounting infrastructure reporting presents statistics objects in a tree format allowing easy recognition of components and functions for optimization. Poor performing components functions processes and services may be identified in order to initiate trouble shooting and potentially introduce modifications to the associated design. A statistics object has a corresponding class wherein in one embodiment a reporting unit generates a report including an aggregation of statistics objects for a given class.

The examples provided herein are applicable to a system having composite service and are not limited to systems employing a SOA or using object oriented programming. In one example an enterprise system for a business process has distributed network capabilities where information and services are provided to multiple users. A network or enterprise system is accessed by multiple users the data and information used and stored in the network changes dynamically. A developer may build a composite service within an enterprise system wherein the composite service is integrated through a central network.

A service may be provided as a modular unit of a software application that is stored in memory and executed by a computer system for example a server or a Personal Computer PC . A service within a composite service may be easily accessible for example through the Internet or may have controlled access such as for example a corporate internal system which controls access to employees. A service may be a web service accessed through the Internet. In one example data is exchanged between one or more web services using extensible Markup Language XML and other internet based protocols. Composing web services to give a composite web service is a powerful way to create new applications and build a complete process. In one example a web service is an ecommerce service.

A variety of different services may be integrated into a composite service. Each service may include one or more components and different services may share a component. Execution of the composite service integrates the individual services contained therein. For example in an ecommerce service an online purchase of a specific product may be performed by multiple components including maintaining a shopping cart for selected items providing a comparison tool to track searching and compare products offering a payment system for executing the transaction and providing a shipping service to initiate deliver of the purchased product. In this example is it desired to evaluate the individual components and the combinations of components within the ecommerce service of the composite service. Each component implements at least one operation or function and may include multiple other operations or functions. An operation or a function may be implemented as a software program module or routine. Returning to the ecommerce example components implementing an operation to purchase or buy a shirt includes other operations as children components. Children components include searching the catalog receiving selection of an item soliciting a payment method soliciting payment information and transferring funds.

Operations implemented by components have measureable parameters wherein it may be desirable to calculate and maintain statistics for these parameters. Monitoring by an accounting infrastructure measures parameters at multiple points in an execution thread. Continuing with the ecommerce example a parameter may measure the time taken to process payment for a shirt order. By tracking parameter measurements over a variety of operations within a component and collecting data over time operation of a service is analyzed. Interpretation and explanation of the data provides statistical information and understanding of the data. Statistical information allows prediction for future operations and allows optimization and troubleshooting.

Statistics are variables depending on known parameters and therefore a service developer or a service user selects which parameters to measure and monitor based on the desired statistical information. In one example embodiment monitoring in an accounting infrastructure provides statistics as multiple parameter measurements. As an example during execution of a component a start measurement may be made at a first execution point and an end measurement may be made at a second execution point. The statistics include each measurement along with an indication of a corresponding execution point in the component. In some cases tracking of parameter values provides desired information to a user. In other cases statistical analysis identifies an unknown relationship or problem. In still other situations statistical analysis allows optimization of a process. Statistics may also be provided as a calculation based on the measured parameter values.

In one example an accounting infrastructure measures elapsed time for an operation to complete such as time for searching a catalog as in an ecommerce example or searching for a vocabulary word in an online dictionary service or searching for an item associated with a matter in an internal corporate matter management service. In one example embodiment an accounting infrastructure compiles statistics for the component and has reporting function to provide the statistics to a user in a graphical format. Reports may be provided on a per component basis or statistics aggregated for a parameter over execution of multiple components. As a component implements an operation or function each component may have a unique set of parameters to measure wherein an accounting infrastructure maintains appropriate statistics for each component. For example for some components it is desired to measure computing time or memory allocations whereas for others latency and delay are critical parameters and it is desired to measure these. Applications and operations may be services used by different groups wherein each user group implements individual features of a service. Consider a component implementing an operation to search for goods the component may also implement other operations or sub operations including searching selecting requesting information from the user providing comparison information etc. A first user may implement the component using the operations for searching and selecting and not provide comparison information. A second user may implement the component using the operation for providing comparison information and use a different component for searching etc. Each use of the component may incur measurement of a different set of parameters. Compilation of these statistics allows the user to monitor a parameter associated with an individual component of the composite service.

The compilation of the statistics is presented to the user in an easy to read format. In one example an object representation of measurements and statistics is available as a report to a user of the services wherein the representation includes statistics per component and per operation. The representation may be exported in different formats for the user. In one example the accounting infrastructure provides capability to the user for monitoring the various statistics.

Processing unit may for example be an application server or a PC wherein software adapted for control by processing unit may have access to the Internet in order to identify services such as web services. System includes memory storage not shown which may be part of a memory storage system and a controller to identify and access data on the storage system such as on a hard disc drive. System may further include a memory system such as a Random Access Memory RAM that is configured to store data. Processing unit may for example be a Central Processing Unit CPU .

System as illustrated may include multiple devices and other services accessing composite service system . The multiple devices include computers and computing network and wireless network which includes a variety of wireless devices including a cable type television service a Personal Digital Assistant PDA and a cellular phone . Additionally composite service system may be an enterprise system within an organization enabling end to end processing for a variety of services including reporting functionality for these services. In an enterprise system a composite service may integrate multiple complex services into a flexible decentralized composite service. The ability to account for individual services their operation and components by evaluation and analysis of parameters and statistics related thereto provides visibility to the designer of a composite service system. Open integration provides process centric collaboration and better understanding of the impact of individual components on each other as well as on other services.

The computing network may be a Local Area Network LAN or another configuration of computing devices which access system through network . Computing network may be accessible to a variety of computing and communication devices. Computing network may include a router processing communications for multiple computing and communication devices and other enterprise networks.

Computer is illustrated including a processor a memory and a composite service unit including an accounting engine . Additionally computer uses a user interface for interaction with the user. User interface may be included within computer or may be a separate unit in communication with computer . User interface includes a display device and display processor not shown to provide a visual or audio display of accounting information and the corresponding report presented to a user. The user may interface with system through computer to develop services perform maintenance on services obtain reports and accounting information and otherwise interact with composite service system .

The system includes composite service repository which receives design and modeling tools from repository tools . Composite service repository provides a central location in which enterprise services are modeled and metadata is stored. Composite service repository stores definitions of enterprise services and business processes stores the metadata for service objects and provides central design and modeling. Composite service repository receives reference information from service registry which supports publishing classifying and discovery of enterprise services. In one example service registry is compliant with Universal Description Discovery and Integration UDDI specifications and enables management and governance of services.

Composite service system further includes consumer application providing at least one service. Consumer application receives discovery information from service registry and communicates with provider directly and through processing integration which provides integration for services within a composite service. Within processing integration mapping process maps consumer application within an integrated composite service wherein consumer application uses an enterprise service. Provider includes service implementation which is the point of interface with consumer application processing integration unit and mapping process . An example of provider system may be an offering within composite service system such as a particular store within an online retailer service or a geographical mapping service within a search website. In another example provider system includes all products and service offerings for an entity. Consumer application may include a browser or other program or user interface used to access provider system . An enterprise system incorporates a variety of provider systems and links these with consumer applications .

Accounting infrastructure is applicable to any of the multiple services within a composite service and may be used to compare specific services or operations and components within each service. For example it may be desirable to understand which operations functions or components are causing delays in a process or which require the most volatile memory. Specific function s of a service as well as the type and number of services in a composite service structure will determine the parameters and statistics of interest. By providing insight into the behavior of individual components of a service accounting infrastructure allows service design and modeling to accurately account for weaknesses or fault points. Accounting infrastructure includes monitoring functions implemented by monitor unit and reporting functions implemented by reporting unit . Accounting infrastructure further includes an accounting engine such as accounting engine of which provides control and implements rules for operation for monitor unit and reporting unit of accounting infrastructure .

Typically a service is defined by a provider a client an interface an operation inputs and outputs. Internally the service has a variety of parameters and variables which are not typically available to a user through an interface during operation of a service. A user interface may provide detailed information on the service. A business model is a composition or assembly of services made up of operations or functions wherein operations are integrated through integration server of and are controlled to allow sharing of data and business processes among services applications and data sources within a business.

Components may be defined by methods in abstract or technology independent terms and are ideally agnostic to computer specifics operation systems and software application. Web services generally include a particular set of specifications for service oriented integration with documents as the payload such as documents in an XML format. The document provides information used by the service interface for accessing and using the service. A common protocol used for communication of XML documents is the Simple Object Access Protocol SOAP used to encode messages in a web service request and response. A web service may be part of a composite service or may be a composite service providing individual user interfaces to a set of services linked by similar business rules processes information requirements applications quality of service definitions etc.

Often a composite service will have one or more service interfaces that are published or made available to the public such as over the Internet. Publication information provides a description of a service and provides guidance and directions on how to use the service what information is required and what the output will be to the user and or to other services. Typically a composite service does not provide specific information as to the internal parameters and activities which occur in operating the service. For example a web service for a financial institution may provide the user with various options to access accounts perform actions and generate reports. Each available action or activity as well as each report may be defined by a distinct operation and a component may implement one or a variety of operations. In this way the various operations of the web service are implemented in one component but are monitored by an accounting infrastructure such as accounting infrastructure .

Functions are implemented by components which are modeled as one or more objects. Each object has a state and a behavior. The behavior of an object may be directly related to a measured parameter. The reporting function may be provided for an individual operation component or service with several different reports available. When a user requests a summary report the summary report may aggregate the measurements and statistics for several individual components into a summary. Some activities for a component may not be visible by a user even though at least some of this information is available to accounting infrastructure by accessing the individual component. In one example a first operation calculates an investment portfolio and a second operation calculates a banking portfolio. A summary report to a user provides an overview of both portfolios but does not provide the detail or granularity available to accounting infrastructure in monitoring and generating statistics for the operations.

An overview of a service in a composite service is illustrated in . Accounting infrastructures such as accounting infrastructure of provide analysis and detail to a developer of a composite service s . As in operation includes functions . In one embodiment an accounting infrastructure includes parameter measurement units such as units and . In the illustrated example parameter A measure measures at least one parameter which has significance for at least one component executing functions and which provide data to parameter A measure for monitoring tracking and analyzing parameter values. Parameter B measure monitors functions and parameter C measure monitors functions and . Note there may be multiple parameter measurement units for a same measurement to reduce the load on any one unit for those parameters which are more commonly desired to be measured for execution of multiple components.

Parameter measurement units and provide output reports and data as outputs and . This information is then provided to aggregate database which compiles information making it available for reporting to a system developer or user. As used herein the system developer may be a user as well. Aggregate database records a variety of information the specifics and form of which may be modified changed and edited. A goal of a composite service is to provide efficiency and flexibility to a business process or other process. Accounting infrastructure is adaptable and dynamically adjustable to accommodate specific needs requirements and goals of a process. This allows a developer to easily change information to be monitored the data output the form of reports etc. In one example a developer inputs the set of parameters to monitor for one service or for one component. Accounting infrastructure provides a report on those parameters including use statistics which allows a developer to identify a lengthy process or one that is introducing congestion into a service or affecting other services in a composite service.

Parameter measure units and are included in one example in an accounting engine such as accounting engine in and accounting engine in . Accounting engine may also be referred to as an accounting unit. In one embodiment accounting engine includes the modules of accounting infrastructure . In another embodiment accounting engine coordinates operation with accounting infrastructure .

As illustrated in system includes component as part of at least one service having multiple components . Components may be processed sequentially or in an order specified by component or as indicated according to user preferences and selections. Examples of component processing are discussed herein below with respect to . As illustrated in the component communicates with accounting engine wherein communication may be determined during design of accounting engine . Accounting engine includes parameter measurement capability as well as statistical analysis tools. Alternate embodiments may provide these as separate modules or in combinations thereof to allocate processing and analysis according to the design and needs of the network or service. Accounting engine includes measurement unit having start measure engine measure engine and end measure engine . Measurement unit communicates with processor and aggregate data . Accounting engine measures parameters determines statistics and provides information to accounting report data for preparation into reports as required or requested by the user. System may be implemented within a system supporting a composite service or within a distributed enterprise network. Alternatively portions and functionality of accounting engine may be distributed and performed by client machines or software modules resident within system or a network such as network of . Accounting report data includes parameters and statistics but may be implemented as a subset of data. The data in accounting report data is arranged to identify individual components and evaluate parameters and statistics. Additionally the data allows a user to evaluate service performance individually and as part of a composite service.

Accounting engine includes communication bus which allows communications among the various modules units and functions. Measurement unit processor administration unit program management unit and aggregate data communicate through bus . Alternate embodiments may incorporate individual direct connections and communication between specific modules.

In one example embodiment a process monitors a first component by starting or initiating measurement of a parameter. A start tag is created corresponding to a first execution point in an execution thread of the first component the first execution point identifying a start of the measurement. When the process ends the measurement a corresponding end tag is created corresponding to a second execution point of the thread. The second execution point identifies an end of the measurement. Where the first component is one of a family of components such as where the first component has children or a parent the process aggregates consumption of resources for the family of components. In this example the process creates a first statistics object for the parameter and aggregates measurements of the parameter for all members of the family of components. The parameter in one example is a measure of computing time used by the component or family of components from the first execution point to the second execution point. In another example the parameter is a measure of delay or latency in performing an action or delivering information associated with the first component.

As described herein accounting infrastructure implemented for use with a composite service system allows identification and tracking of individual components families of components and functions by monitoring and measuring specific parameters. Accounting infrastructure provides more than a snapshot or current status of system resources by analyzing parameters over a window of operation or following functions within a thread of execution. For example accounting infrastructure according to one example initiates measurement at a first point in the execution thread of a component. Each time the system uses the component a measurement is initiated at the same point. The measurement may continue to be taken during execution. At a second execution point of the execution thread measurement is ended. In this way a report will identify the resource use during specific phases of component operation as well as identifying the interaction during that period of the component with other components. The ability to identify resource use and consumption at the thread and execution level as well as the ability to identify historical statistics related to use is particularly advantageous in design operation and maintenance of a composite service. In one embodiment the accounting techniques are applied to individual threads running in a Java environment. In alternate embodiments the accounting techniques are applied to other execution tracking methods for programs applications and libraries in other ways.

Processing of an operation or function is tracked by following the flow of the operation i.e. thread. The thread follows the actions and activities involved with execution of the operation. For example a thread will identify each software routine used in the process.

In one embodiment parameters identified for measurement are each assigned a unique tag name . It is determined if measurements are to be made for this thread or if the current measurement has meaning or significance in this thread . The tag name in one embodiment is a human readable tag. Accounting infrastructure tags the start and end points in the thread to identify those points in the process where measurements are made. In this way accounting infrastructure is able to identify consumed resources for a given thread. The measurements may be consistently made at a same point in an operation or may be defined by the process wherein measurements points are dynamically determined. The tags identify measurement points in a thread and allow later review by a user to analyze the history and statistics associated with multiple threads. This allows a user to evaluate where consumption of a given resource is incurred in an individual thread.

If the measurement is not to be made in this thread then the measurement is not started for this thread and processing continues waiting to start a next thread. If the measurement is to be made for this thread the process initializes the tag name associated with the parameter . In this example initialization of a parameter sets the tag name variable to null. At this point accounting infrastructure creates a statistics object corresponding to the parameter to measure having the tag name . The creation of a statistics object facilitates management of the parameter as a variable allowing tracking and reporting in a user friendly format. Once an object is created the process determines where the object fits in a tree. A tree is used to describe the relationship among objects. Each node in the tree corresponds to an object wherein a super class object will include nodes to objects in the super class which are also referred to as children of the super class node. The use of tree structures is another advantage in using object oriented programming to implement accounting infrastructure as objects and their relationships are easily viewed in reporting and other graphical presentations. The relationships among objects are readily identified. In one embodiment the statistics objects correspond to components and component families wherein the tree structure for the statistics objects mirrors the tree structure for the component family.

In the present example method continues to determine if a parent exists for a created statistics object . If the current statistics object is a child of a known parent the statistics object i for the present current statistics object is associated with the parent object . The statistics object i is then pushed on stack . A stack is a local stack for a current thread the local thread stack may be part of an aggregated stack including threads for other components within the service. When a parameter is currently identified for measurement process continues to measure the parameter and store the measurements in a local thread stack . The specific parameters selected for monitoring and measurement may be predetermined in advance or may be specified by a user. Accounting infrastructure may be used for performance investigations profiling operation per component and per operation. Additionally accounting infrastructure enables administration of the system by accounting for information on each component to analyze and troubleshoot operation and problems such as a slow system startup operation outside of specifications or poor performance during startup of a component.

Accounting infrastructure will measure various time periods for activities of the service computing time consumed by the service and the various components thereof amount and type of memory storage utilized as well as other parameters of the service. An accounting engine of includes administration module and program management module which are each coupled to bus .

As an example of a measurement event consider a first scenario where the goal is to measure time delay CPU computing time and memory usage involved in operation of a component. In this scenario a service within the composite service is run while accounting infrastructure monitors operation. Accounting infrastructure deploys several modules each performing a unique function.

Deployment to initiate execution of an operation is enabled by administration unit which performs necessary checks and preparation including coordination with other operations and services validates information initializes variables resolves conflicts provides for parallel evaluation delivery of information storage of values and other functions for each execution. Accounting engine controls parameter measurements by running concurrently and independently from the operation under consideration. In an alternate embodiment accounting engine may initiate a test and run interactively with the operation.

After deployment program management controls execution of a component or operation. In one embodiment program management unit implements and controls parallel processing allowing efficiency and overall comprehension in providing composite service. Program management includes policies and rules for implementation control and interoperability of the specific operations and functions which make up the services including programming language macros routines subroutines libraries and other information defining operation and execution. Accounting engine measures parameters and stores information related thereto through completion of component storing the information in aggregate data .

Note while accounting engine is illustrated in the present examples as including units alternate examples may provide each of these functions separately from accounting engine . Additionally the functionality of these units may be combined within a software module or hardware module for implementation within accounting infrastructure . In one embodiment the measurement functions are built in component and information communicated to accounting engine for analysis and reporting. Aggregate data is a memory storage device which may include volatile and non volatile memory and may be implemented within accounting engine or external to accounting engine . Similarly accounting engine may include accounting report data . Report generation may be provided by accounting engine .

In another example of a measurement event administration unit is used to accumulate and list information for each component for investigation of system performance. For example a user may want to understand the limiting component or operation during the initial start up of a service. Identification of the problem may be done by the developer user or by the system according to predetermined rules. Such rules may be based on parameter values falling out of a threshold or range. For example specification for the service may restrain the start up procedure to a specific time allowance wherein the system alerts the user when the specification limits are approached or exceeded. Other problems or areas of consideration may concern memory usage such as on receipt of an Out Of Memory OOM type error. Other considerations involve poor performance during a specific operation based on errors received users input third party complaints or otherwise identified issues. Further resource allocation and conservation may provide goals for evaluation.

Accounting infrastructure provides a powerful framework for analysis of composite service. The examples provided herein may be implemented in a simple streamlined manner such as in a library. In the examples described herein accounting infrastructure may be implemented as a low level library such as in a Java stack so as to be available to other components. Accounting engine as in may be enabled or disabled and is configured to measure any of the parameters of interest including time for operation memory allocation computing resource allocation etc. Alternate embodiments may implement accounting engine according to the goals and requirements of the system and services.

Accounting infrastructure is able to monitor execution of operations within a composite service and additionally is able to identify locations in execution of a component such as in software code where measurements start and end. Where additional measurements are made during execution of a component these may be marked with tags as well. For example accounting engine may provide markers corresponding to a location in the software instructions or code for component of . In this way a user is able to later understand the locations of each measurement and isolate the operation corresponding to each statistic. In one example markers are provided as human readable string tags for each measurement. In another example a separate document or file is created to identify positions within the component and the corresponding measurement activity.

Accounting report data provides information for reporting and may prepare a report for display. The number of entries and the type of measurements in the list of measurement entries depends on the measured component the service and operation as well as the measurement parameter. The statistics information is stored in accounting report data such as in a tree structure consistent with a tree describing components . The statistics information may then be presented to the user in a tree structure facilitating identification of operations under consideration and the role of these operations within the composite service. In one embodiment the use of object type representations is in addition to logged tables in traces wherein the object representations are flexible and may be easily logged parsed and converted to other formats for communication and transmission such as to XML format.

Continuing with one or more parameters are associated with at least one operation within component . Here the component is for an ecommerce transaction to purchase a shirt labeled as BUY SHIRT. The component is identified as a root node. The component includes several operations including a first operation to search product which is a parent branch node. Other components include select pay enter credit info confirm info and transfer money . Other components are included but are not illustrated. As illustrated execution of component is in sequential order.

Various applications may interact with accounting infrastructure . The reporting structures may be predetermined according to the service operation measurement specifics or may be customized by the user. Additionally the reports may be output for use by other programs and services. Example formats for reporting are illustrated in wherein CPU resources memory allocation time for a function procedure component or operation as well as date and time of update are reported.

As described herein a method and apparatus for accounting infrastructure is provided for evaluating performance of at least one operation of a service. Accounting infrastructure allows identification and tracking of specific functions and components within a composite service offering thus enabling optimization troubleshooting planning and design. Accounting infrastructure may be implemented in an object oriented programming model where measurement details and specifics are provided in a tree structure to illustrate relationships among components operations and services. The statistics provide detailed information on consumption of resources and wherein components are measured over time. As described herein according to one example embodiment measurements are taken at a start and an end point. Other embodiments provide for periodic or random measurements. Still other embodiments allow for user defined measurements such as at a given point in an execution thread or when two specific services are running concurrently. Additionally measurement may be dynamically determined based on operation of the services. For example it may be desirable to identify when a system slows down with relation to initiation of a given program or installation of a component.

In one embodiment a composite service system as in and system in is a JavaScript environment by Sun Microsystems Santa Clara Calif. A composite service system is adapted to integrate multiple individual services wherein a main deployment operation performs checks validations resolution parallel evaluation delivery and other functions per thread of a component. For example the parameters specified for measurement may include execution time processing time memory usage etc. The measurement may be made during deployment during execution of individual components during procedure call or during execution of web services. The deployment operation is run at the initial start of each application. Additionally during deployment operations individual components and groups of components are deployed updated started stopped removed and otherwise maintained. The composite service system is configured to process communications in a request response protocol wherein remote methods send requests for objects processes and methods. Measurements may be made during these operations as well. The methods may include de serialization functions lookups method calls deployments etc.

The composite service system is further adapted to integrate web services wherein a web container provides measurement points as well including deployment operations request response protocol procedures and during routing such as according to a routing protocol. An example routing protocol is the Dynamic Source Routing DSR which provides routing protocol procedures for wireless mesh networks. Statistics may be integrated into the routing procedures wherein the individual statistics may be aggregated to measure a parameter with respect to a communication path such as according to a route or routes. Within each of these examples various sub operations may be measured down to the granularity desired by the user or the designer of accounting infrastructure .

To accumulate and list the various information resulting from implementation of accounting infrastructure accounting infrastructure keeps track of each parameter per component. This information may be stored in local memory or distributed per machine requesting or initiating a given service or component. The accumulation of information for each component allows evaluation of slow system startup OOM conditions or other poor performance during startup of a component or during operation.

Ideally accounting infrastructure is simple in design and easy to implement s as to allow easy integration and certainty of results. In one embodiment to provide a fast streamline process accessible to the various operations within the composite service system accounting infrastructure is a library on a low level in a Java stack allowing access to each component. Accounting infrastructure may be enabled or disabled and the specific parameters to measure may be specified by the user or the Java server. Accounting infrastructure of one embodiment marks code in a main module with a start and an end point for each measurement and assigns human readable string tags for each measurement. Measurements may be nested resulting in a tree structure representation of operations components and features. The use of an object representation of statistics provides an easy to read method for reporting however alternate embodiments may provide logged tables in traces for compatibility with other reporting tools. By providing statistics as objects each object may be logged or converted to XML as opposed to attempts to parse logs and try to create objects therefrom. Different methods of accounting and reporting may be desirable in a given application or environment.

In one embodiment each measurement reports a list of measurement entries wherein the number and type of entries depend on the set measurement type. Entries may be for example measured time CPU usage allocated memory among others. When a nested measurement ends each measurement s entry value is available for reporting at a data collection point in accounting infrastructure . By maintaining historical information it is possible to evaluate trends and issues which may not be obvious using snapshot or current value information. This makes it possible to identify how individual components consume resources.

The example computer system includes a processor a main memory and a static memory which communicate with each other via a bus . The computer system may further include a video display unit e.g. a Liquid Crystal Display LCD or a Cathode Ray Tube CRT . The computer system also includes an alphanumeric input device e.g. a keyboard a User Interface UI cursor controller e.g. a mouse a drive unit a signal generation device e.g. a speaker and a network interface device e.g. a transmitter .

The disk drive unit includes a machine readable medium on which is stored one or more sets of instructions and data structures e.g. software embodying or used by any one or more of the methodologies or functions illustrated herein. The software instructions may also reside completely or at least partially within the main memory and or within the processor during execution thereof by the computer system the main memory and the processor also constituting machine readable media.

The instructions may further be transmitted or received over a network via the network interface device using any one of a number of well known transfer protocols e.g. Hyper Text Transfer Protocol HTTP Secure Hyper Text Transfer Protocol HTTPS .

Accounting infrastructure module is communicatively coupled to bus . The filtering module implements the filtering and subset generation discussed in the examples provided herein. Specifically accounting infrastructure module controls function of the accounting modules of including accounting engine monitoring unit reporting unit and accounting data storage and works with the services engine and the composite service repository .

The term machine readable medium should be taken to include a single medium or multiple media e.g. a centralized or distributed database and or associated caches and servers that store the one or more sets of instructions. The term machine readable medium shall also be taken to include any medium that is capable of storing encoding or carrying a set of instructions for execution by the machine and that cause the machine to perform any one or more of the methodologies illustrated herein. The term non transitory machine readable medium shall accordingly be taken to include but not be limited to solid state memories optical and magnetic media. In one embodiment techniques may be implemented by transmissions on carrier wave signals.

The various operations of example methods described herein may be performed at least partially by one or more processors that are temporarily configured e.g. by software or permanently configured to perform the relevant operations. Whether temporarily or permanently configured such processors may constitute processor implemented modules that operate to perform one or more operations or functions. The modules referred to herein may in some example embodiments comprise processor implemented modules.

Similarly the methods described herein may be at least partially processor implemented. For example at least some of the operations of a method may be performed by one or processors or processor implemented modules. The performance of certain of the operations may be distributed among the one or more processors not only residing within a single machine but deployed across a number of machines. In some example embodiments the processor or processors may be located in a single location e.g. within a home environment an office environment or as a server farm while in other embodiments the processors may be distributed across a number of locations.

The one or more processors may also operate to support performance of the relevant operations in a cloud computing environment or as a Software as a Service SaaS . For example at least some of the operations may be performed by a group of computers as examples of machines including processors these operations being accessible via a network e.g. the Internet and via one or more appropriate interfaces e.g. Application Program Interfaces APIs . 

By way of example such computer readable media may include RAM ROM EPROM EEPROM CD ROM or other optical disk storage magnetic disk storage or other magnetic storage devices or any other medium that may be used to carry or store desired program code in the form of computer executable instructions or data structures and which can be accessed by a general purpose or special purpose computer. When information is transferred or provided over a network or another communications connection either hardwired wireless or a combination of hardwired or wireless to a computer the computer properly views the connection as a computer readable medium. Thus any such connection is properly termed a computer readable medium. Combinations of the above are also to be included within the scope of computer readable media. Computer executable instructions include for example instructions and data which cause a general purpose computer a special purpose computer or a special purpose processing device to perform a certain function or group of functions. Furthermore computer executable instructions include for example instructions that have to be processed by a computer to transform the instructions into a format that is executable by a computer. The computer executable instructions may be in a source format that is compiled or interpreted to obtain the instructions in the executable format. In case that the computer executable instructions are transformed a first computer may for example transform the computer executable instructions into the executable format and a second computer may execute the transformed instructions.

One embodiment is described in a general context of method operations which may be implemented by a computer program product. The computer program product may include computer executable instructions such as program code executed by computers in networked environments. Generally program modules include for example routines programs objects components or data structures that perform particular tasks or implement particular abstract data types. Computer executable instructions associated data structures and program modules represent examples of program code for executing operations of the methods disclosed herein. The particular sequence of such executable instructions or associated data structures represents examples of corresponding acts for implementing the functions described in such operations.

Embodiments of the invention may be operated in a networked environment using logical connections to one or more remote computers having processors. Logical connections may include for example a Local Area Network LAN and a Wide Area Network WAN . The examples are presented here by way of example and not limitation. Such networking environments are commonplace in office wide or enterprise wide computer networks intranets and the Internet. Those skilled in the art will appreciate that such network computing environments will typically encompass many types of computer system configurations including personal computers hand held devices multi processor systems microprocessor based or programmable consumer electronics network PCs minicomputers mainframe computers and the like. The invention may also be practiced in distributed computing environments where tasks are performed by local and remote processing devices that are linked either by hardwired links wireless links or by a combination of hardwired or wireless links through a communications network. In a distributed computing environment program modules may be located in both local and remote memory storage devices.

The Abstract of the Disclosure is provided to comply with 37 C.F.R. 1.72 b requiring an abstract that will allow the reader to quickly ascertain the nature of the technical disclosure. It is submitted with the understanding that it will not be used to interpret or limit the scope or meaning of the claims. In addition in the foregoing Detailed Description it can be seen that various features are grouped together in a single embodiment for the purpose of streamlining the disclosure. This method of disclosure is not to be interpreted as reflecting an intention that the claimed embodiments require more features than are expressly recited in each claim. Rather as the following claims reflect inventive subject matter lies in less than all features of a single disclosed embodiment. Thus the following claims are hereby incorporated into the Detailed Description with each claim standing on its own as a separate embodiment.

