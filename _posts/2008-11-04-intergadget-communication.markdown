---

title: Inter-gadget communication
abstract: Disclosed is an inter-gadget communication architecture or framework that allows information from different sources to be independently viewed or correlated from within a browser. The inter-gadget communication architecture or framework comprises gadgets or iFrames, which communicate or interact with other gadgets on the displayed page by accessing other iFrames/gadgets on the same web page. The inter-gadget communication architecture or framework allows gadgets to be vendor application agnostic, providing platform independence.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08156441&OS=08156441&RS=08156441
owner: Lockheed Martin Corporation
number: 08156441
owner_city: Bethesda
owner_country: US
publication_date: 20081104
---
The present invention relates to inter gadget communication that allows electronic information from different sources to be independently viewed or correlated from within a browser.

The Department of Defense DoD and US government intelligence agencies process large amounts of electronic information. Traditionally dissemination handling and correlation of electronic information is done manually. For instance electronic information from a first source may be presented in one format while electronic information from a second source may be presented in a different format. The only way to combine the electronic information from the two sources is to manually correlate the data from the two sources. Also many conventional electronic solutions have vendor constraints which prevent combining source information.

In particular the industry has tried to address part of the information correlation problem using portals. Major vendors such as BEA and IBM for example have developed portlet to portlet communication to permit two different sources to communicate via portlets. However each vendor s portlets only communicate within that vendor s portal. In addition gadgets have been developed by such organizations as Google Microsoft and Apple Computer for example. Gadgets are small objects that allow dynamic content to be placed on a web page.

A mashup is a web application hybrid that combines data from more than one source into a single integrated tool. Thus a mashup combines data from different sources in one place using JavaScript. A mashup does not involve simple embedding of data from another site to form a compound document. An example cartographic data from Google Maps for example may be used to add location information to real estate data thereby creating a new and distinct web service that was not originally provided by either source.

Content used in mashups is typically sourced from a third party via a public interface application programming interface API or web service. The architecture of mashup web applications always has three parts. The first part is the content provider which is the source of the data. Data is made available using an application programming interface API and different Web protocols such as RSS REST and Web Service for example. The second part is the mashup site. The mashup site comprises the web application that provides the new service using different data sources that are not owned by it. The third part is the client web browser. The client web browser is the user interface of the mashup. In a web application the content can be mashed by the client web browser using a client side web language such as JavaScript.

It would be desirable to have an inter gadget communication framework that provides for an improved way to mash up the data derived from multiple sources. It would be desirable to have inter gadget communications that provides an open way to correlate and view information from differing sources independent of vendor deployed solutions.

Referring now to it illustrates an exemplary inter gadget communication IGC architecture or framework . The inter gadget communications architecture or framework permits correlation and viewing of information derived from different sources.

The exemplary inter gadget communications architecture or framework comprises a browser that runs on a computing device having a display . The computing device may be a personal computer a laptop computer a personal digital assistant PDA or a cellular device for example. The computing device is connected to various sources of information or data such as one or more application servers and other external services coupled to the computing device via a network or the internet . The computing device communicates with the application servers or external services using servlets. The computing device communicates with the browser using an http hypertext transfer protocol and over the network using an http SOAP protocol hypertext transfer protocol simple object access protocol .

The exemplary inter gadget communication architecture or framework allows information from different sources to be independently viewed or correlated within the browser . The inter gadget communication architecture or framework comprises a plurality of gadgets that are displayed within the browser and allows data to be communicated between and shared by the gadgets . illustrate details relating to this.

Gadgets and their iFrames have their own object and variable space separate from the main web page. Gadgets can call JavaScript methods in the object space of other gadgets via the frames object array of the web page as long as the contents of the gadgets and the framework reside in the same domain and as long as the gadget is able to point to that specific frame object of the other gadget from the frames array. Methods such as the following can thus be accessed 

The inter gadget communications architecture or framework provides the look feel and experience of a personal computer desktop. The inter gadget communications architecture or framework allows importing of and collaboration between gadgets such as iGoogle gadgets widgets and other third party gadgets. New gadgets may be created using a JavaScript application programming interface API of the architecture or framework .

As mentioned above each gadget that participates in inter gadget communication has an IGC object . Gadgets can either be producers of inter gadget communication consumers of inter gadget communication or both. As a consumer of inter gadget communication when a gadget is developed it must include the provided JavaScript API available from the framework and therefore be able to consume any available predefined IGC objects from other gadgets by using a specific gadgetLibraryId or igcCategoryId of the gadget or gadgets it wishes to connect with. Any gadget written in any form or language including RIA Rich Internet Application must be able to interface with JavaScript for inter gadget communication to work. Therefore developers or authors of pre existing gadgets iGoogle Netvibes etc. can add the necessary code to include the IGC API and use it. If an author or developer wishes to make a pre existing gadget a producer of inter gadget communication where other gadgets can consume its IGC object and pass data along to it they would create a JavaScript IGC object with exposed methods and a set of parameters such as is shown in for example. These exposed JavaScript methods can then internally call the necessary internal or private methods of that gadget . The inter gadget communications architecture or framework provides a repository for discovery and distribution of gadgets .

Gadgets such as mini applications portlets or widgets and the like are browser based interfaces for services and information. Every gadget will be uniquely identified in the repository with a pre generated gadgetLibraryId that gets assigned whenever a new gadget is submitted. Exemplary gadgets may comprise RSS feeds Distributed Common Ground System Integration Backbone DCGS DIB services Extensible Markup Language XML services Keyhole Markup Language KML services Google Earth services Virtual Earth services or access to mission data and the like. The gadgets are developed using standards similar to those used by Google Microsoft and others. The gadgets provide interoperability with services provided by Websphere Weblogic SharePoint and JBoss for example.

Many types of gadgets developed today can operate in different web pages or portals as long as they are developed using web standards. The mini application front end of the gadget can be used in any web form. However in order to use the added capability of inter gadget communication the gadgets need to be placed in a framework that supports and works with the IGC API. Existing portal investment and development is thus preserved using the inter gadget communications architecture or framework .

The inter gadget communications architecture or framework provides for a web page or application that integrates complementary elements from two or more sources . Gadgets can display data or connect with sources or services in any way or form as they wish. Once the data is available on the gadget using inter gadget communication it can pass along that data to other gadgets on the web page that may or may not be connected to other sources or services on their own. Therefore data from multiple sources can thus be put together on the client side using inter gadget communication. The web page or application may be created using Ajax Asynchronous Javascript and XML web development techniques for example. The inter gadget communications architecture or framework allows two or more gadgets to interact with each other by sharing complementary data.

The inter gadget communications architecture or framework is a complement to the currently available Ajax framework. Client side communication is accomplished using inter gadget communication. The gadget framework handles the transaction of IGC objects between gadget iFrames . While each gadget may obtain data from a server or service the IGC data layer occurs all on the client side.

Data communicated between gadgets may include latitude and longitude data ship identification numbers or similar data. For example the inter gadget communications architecture or framework may embody geospatial gadgets . Such geospatial gadgets have map plotting capabilities allowing point plotting line plotting and plot shaping. Thus existing plotting capabilities may be displayed using the application programming interface API .

Other gadgets may include RSS feeds signal data and XML data and the like. Using the inter gadget communications architecture or framework all such gadgets can call exposed plotting methods to any geospatial gadget. Any RSS signal or XML data that has geospatial coordinates can then be passed on to any geospatial gadget and plotted accordingly within the inter gadget communications architecture or framework .

Thus the browser is configured to process and display gadgets . The gadgets employed in the inter gadget communications architecture or framework are different from conventional gadgets. Each gadget is a standalone element that is displayed in the browser . The gadgets are vendor application agnostic in the inter gadget communication architecture or framework thus providing platform independence. Gadgets are comprised of Hypertext Markup Language HTML or JavaScript code employing Asynchronous JavaScript and XML AJAX requests to get data or Java Server Pages JSP content to acquire data from a server which data are presented in the browser .

As long as the gadgets are written using web standards they should be similar to conventional web 2.0 gadgets already in existence. A major difference is that each gadget s contents can be run in a separate web page and thus can be minimized to take form inside an iFrame of smaller size in the framework . Also the included JavaScript IGC API and code adds additional functionality that conventional gadgets do not have.

Referring to in the inter gadget architecture or framework several gadgets are brought together on a single HTML page using iFrames . shows two inter communicating gadgets at the upper left portion of the browser window that communicate with each other using inter gadget communications and three intercommunicating gadgets at the lower right portion of the browser window wherein two gadgets intercommunicate with a third gadget . HTML provides the ability to split a content window of the browser into several frames. Each of the iFrames comprises a window of its own within the content window i.e. the main window of the browser . The iFrame is an inline frame that contains a completely separate web page with its own URL i.e. the gadget .

The gadget framework is configured so that it is aware of all unique session IDs assigned to each gadget iFrame since the framework creates the iFrames when the gadgets load and assigns a unique ID. When a gadget is requesting to call exposed methods of another gadget the framework can get the iFrame object of the corresponding gadget from the frames array. Once the iFrame object is obtained the exposed methods can be called from within. Gadgets that have exposed methods for other gadgets to use will wrap and include these methods and their parameters inside an IGC JavaScript object . When two or more gadgets link together through the framework the framework grabs the corresponding IGC objects from the producer gadgets and sends them out to the consumer gadgets .

All gadgets that use inter gadget communications preferably include the following JavaScript files available from the gadget framework fw lib Prototype 1.6.0.2 prototype.js and fw api js fwapi.js . The inter gadget communications JavaScript files include basic hash map functionality as well as the following objects to be used for IGC by the gadgets or internally by the framework 

igcObjectHash which is a hash map with a name value pair linking gadget session IDs of currently linked gadgets with their IGC objects 

igcGadgetSpecificHash which is a hash map with a name value pair linking gadget Library IDs with an array of gadget session IDs of currently linked gadgets 

igcCategoryHash which is a hash map with a name value pair linking IGC category IDs with an array of gadget session IDs of currently linked gadgets 

linkGadget function gadgetSessionId which links the gadget to a gadget with an ID of gadgetSessionId and stores its igcObject inside the igcObject hash map 

unlinkGadget function gadgetSessionId which unlinks the gadget from gadget with an ID of gadgetSessionId and removes the appropriate igcObjects from the hash map and

getIgc function TYPE igcId which returns an array of igcObjects of all currently linked gadgets with either gadgetLibraryId igcId if TYPE GADGET or with IGC producer category Id igcId if TYPE CATEGORY .

The functions and objects listed above are part of the exposed API that the framework provides to all gadgets . Once the gadget includes the reference to the API it can call any of these methods. Only two of these methods register and getIgc are to be used by gadget developers while the rest of the methods are used internally by the framework. When the gadget contents are loaded in the web page the gadget calls the register function to register in the framework . Once registered a user may automatically or manually link the gadget to another gadget . If acceptable the framework linking process internally calls the linkGadget function to link the two gadgets and the IGC objects . When two gadgets link the framework gets all corresponding IGC objects from all the linked producer gadgets and sends them to all the linked corresponding consumer gadgets . The unregister and unlinkGadget functions called internally by the framework do the opposite and remove the IGC functionality. IgcObjectHash igcGadgetSpecificHash and igcCategoryHash are three variables referencing hash maps that correspond to retrieving all IGC objects of all the gadgets that a gadget is currently linked to. The function getIgc is used to retrieve the necessary IGC object and call any of the included exposed methods to pass along data.

Pertinent attributes of inter gadget communications are that 1 a gadget is known as a producer of inter gadget communications and a consumer of inter gadget communications 2 as a producer a gadget contains an IGC object that the framework can access and send to other gadgets that register and link as consumers 3 gadgets can consume IGC objects of a specific gadget via a gadget Universally Unique Identifier or UUID or of a specific IGC category via IGC category UUID 4 all IGC objects of a specific category UUID have the same exposed methods including the same parameters .

Once a gadget is developed it can be submitted to a gadget library or repository which will retain all necessary metadata for that gadget . This metadata can include gadget size author details category etc. The majority of the metadata is based on the Netvibes Widgets 1.0 proposal and Google GModule Gadget specifications that have already been established. In addition to this metadata the IGC attributes required for the framework to use are also included. These IGC attributes determine whether a gadget is a producer consumer or both. Also they determine which gadgets it will be able to link to via IGC. Once the gadget is submitted a UUID for the gadget known as the Gadget Library ID is then generated automatically by the server. This UUID defines this specific gadget in the gadget repository or library and any other gadget that wishes to link to it will use this UUID as its IGC attributes. This UUID is different than the Gadget Session ID which is a UUID that gets generated dynamically by the framework when a gadget is created on the web page once the user selects a gadget from the repository or library. If the gadget belongs to an IGC category where the exposed methods are pre defined then other gadgets are able to link to it using the pre existing IGC category UUID. This UUID is also generated automatically but only each time a new IGC category gets created. The inter gadget communications attributes for a gadget are as follows 

The rest of the gadget attributes based upon the Netvibes Widgets 1.0 W3C and Google GModule Gadget specifications include LibraryId UUID generated by back end to identify specific gadget in entire listing or library SessionId UUID generated by back end to identify specific gadget generated on web page Width Height Url Description Icon link Thumbnail link Image link Author Optional including Name Organization Email and Link.

Whenever a gadget is developed an IGC object is written for the framework to send out to other gadgets . The new IGC object includes all necessary methods that are exposed for other gadgets to call upon and pass data through. An exemplary IGC object has the form 

An IGC category of gadgets has similar generic methods exposed. For example all map plotting gadgets have Igc.plotPoint latitude longitude and Igc.plotLine latitudeArray longitudeArray as their exposed methods. All gadgets that adhere to a single category of inter gadget communications as opposed to being gadget specific have the same exposed methods and parameters.

Whenever a gadget is developed code is written to call exposed methods of other gadgets using the provided JavaScript API of the gadget framework . This code may be formatted in the same fashion as is shown in .

When the contents of a gadget load onto the HTML page an API call is made to register the gadget within the framework i.e. 

Once the linking event process is triggered an IGC object is sent by the framework that includes all necessary exposed methods.

The IGC object is then added into the gadget s igcObject hash map and can be accessed using either the IGC Category ID or the Gadget Library ID for later retrieval 

An exemplary IGC object retrieval process will now be described. An exemplary process for retrieving an IGC object and calling its exposed method is as follows. This flow of IGC object retrieval is actually done by the gadget framework internally while the developer of the consumer gadget would only have to reference the getIgc method mentioned above. Reference is made to the three hash maps below. First the gadget framework must get the session IDs of all currently linked gadgets for either a specific IGC category or single IGC gadget 

This makes a call to one of two intermediate Hash Maps that return an array of gadgetSessionlds of all currently linked gadgets with either 

Once the gadgetSessionlds are known the igcObject can get retrieved from the igcObject hash map. This makes a call to a final Hash Map that returns IGC object for a specific gadget with now known sessionId.

While in actuality a total of three hash maps are used to retrieve the IGC object from a higher level it is like one hash map. This single hash map is for the IGC objects of the GeoRSS gadget and conceptually looks like this 

From within the returned igcObject the Geo RSS gadget can call the exposed Google Map gadget methods and pass the proper parameters for example 

Exemplary inter gadget communications between GeoRSS and Google Maps is pictorially illustrated in . A GeoRSS gadget in an iFrame having gadgetLibraryId geo rss lib1 and sessionId geo rss session012 communicates with a Google Map gadget in an iFrame having gadgetLibraryId google map lib1 and sessionId google map session004 using the inter gadget communications object Igc.plotPoint name htmlContent latitude longitude .

The size of the iFrame may be specified in the surrounding HTML page so that the surrounding web page can be presented in the browser while the iFrame is being loaded. Thus when an iFrame is generated by the web page several attributes can be specified URL to the contents size of the iFrame and unique session ID or name for the iFrame . An iFrame can thus be of specific size and take up only part of the web page. The iFrame will also have a library ID and point to a unique URL all provided by the metadata in the back end. The iFrame behaves much like an inline image and the user can scroll it out of view. The iFrame can also contain its own scroll bar independent of the scroll bar of the surrounding web page.

Each gadget may be an iFrame which can communicate or interact with other gadgets on the same web page by accessing other iFrames gadgets on the same web page. When a new gadget is added to a web page a new iFrame is generated through a W3C Document Object Model DOM . Thus when a gadget is dragged into the web page the gadget framework generates the gadget including the corresponding iFrame according to the attributes given from the gadget repository or library. Each gadget has a predefined library UUID that maps to a specific gadget listing in the gadget repository or library. The framework simply creates a DIV HTML element for each gadget which includes all necessary attributes and appropriate iFrame with newly generated session UUID. Each iFrame or gadget holds separate HTML content with JavaScript.

The inter gadget communication architecture or framework thus embodies gadgets that export specific methods that can be used by other gadgets . By allowing other gadgets to call these exported methods directly on the HTML DOM layer data can be passed between different gadgets . Gadgets can therefore asynchronously pull data from different sources and web services and through the inter gadget communication architecture or framework the data can mash up on the client side of the browser . Gadget developers can then export new methods produce IGC for other gadgets to call upon or use available method calls consumer of IGC exported by other gadgets in order to either receive or send their data for mashing up.

Thus an inter gadget communication architecture or framework has been disclosed that allows information from different sources to be viewed independently or correlated from within a browser. It is to be understood that the above described embodiments are merely illustrative of some of the many specific embodiments that represent applications of the principles discussed above. Clearly numerous and other arrangements can be readily devised by those skilled in the art without departing from the scope of the invention.

