---

title: System, method, and computer program product for simulating at least one of a virtual environment and a debugging environment to prevent unwanted code from executing
abstract: A system, method, and computer program product are provided for simulating at least one of a virtual environment and a debugging environment to prevent unwanted code from executing. In use, at least one of a virtual environment and a debugging environment is simulated. Additionally, unwanted code is prevented from executing as a result of the simulation.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08782615&OS=08782615&RS=08782615
owner: McAfee, Inc.
number: 08782615
owner_city: Santa Clara
owner_country: US
publication_date: 20080414
---
The present invention relates to computer security systems and more particularly to preventing the execution of unwanted code.

Many techniques exist that attempt to protect against unwanted code e.g. malware etc. . For example virtual machines may be used to run and analyze e.g. debug unwanted code on a system. In another example debuggers may be used to analyze unwanted code and attempt to reverse engineer the code. These techniques attempt to collect information about the unwanted code event when source code for the unwanted code is unavailable.

However such techniques generally exhibit various limitations in detecting unwanted code. For example authors of unwanted code may protect and or pack the unwanted code for preventing detection thereof by a virtual machine. Protectors and packers are widely available and code that is easily compressed or packed may be difficult or impossible to unpack or replicate by existing methods. As another example authors of unwanted code may disable execution of the code to prevent detection thereof by a debugger. Thus utilizing current techniques may result in unwanted code that is resistant to detection.

A system method and computer program product are provided for simulating at least one of a virtual environment and a debugging environment to prevent unwanted code from executing. In use at least one of a virtual environment and a debugging environment is simulated. Additionally unwanted code is prevented from executing as a result of the simulation.

Coupled to the networks are servers which are capable of communicating over the networks . Also coupled to the networks and the servers is a plurality of clients . Such servers and or clients may each include a desktop computer lap top computer hand held computer mobile phone personal digital assistant PDA peripheral e.g. printer etc. any component of a computer and or any other type of logic. In order to facilitate communication among the networks at least one gateway is optionally coupled therebetween.

The workstation shown in includes a Random Access Memory RAM Read Only Memory ROM an I O adapter for connecting peripheral devices such as disk storage units to the bus a user interface adapter for connecting a keyboard a mouse a speaker a microphone and or other user interface devices such as a touch screen not shown to the bus communication adapter for connecting the workstation to a communication network e.g. a data processing network and a display adapter for connecting the bus to a display device .

The workstation may have resident thereon any desired operating system. It will be appreciated that an embodiment may also be implemented on platforms and operating systems other than those mentioned. One embodiment may be written using JAVA C and or C language or other programming languages along with an object oriented programming methodology. Object oriented programming OOP has become increasingly used to develop complex applications.

Of course the various embodiments set forth herein may be implemented utilizing hardware software or any desired combination thereof. For that matter any type of logic may be utilized which is capable of implementing the various functionality set forth herein.

As shown in operation at least one of a virtual environment and a debugging environment is simulated. In the context of the present description the virtual environment may include any environment that is virtual in nature. In one embodiment the virtual environment may include virtualization software. For example the virtual environment may include a virtual machine. Accordingly the virtual environment may be simulated as an option.

Additionally in the context of the present description the debugging environment may include any environment that is used for debugging code or other data. In one embodiment the debugging environment may include debugging software. For example the debugging environment may include a debugger. To this end the debugging environment may be simulated as another option.

Further in one embodiment the simulation may include including a file and or a folder with a predetermined identifier. For example the file and or folder may be included in e.g. stored in etc. a system. Such system may optionally include a computer system capable of simulating the virtual environment and or debugging environment.

In the context of the present embodiment the identifier may include a vendor name a manufacturer name version identifier and or any other identifier that is predetermined. In another embodiment the identifier may be associated with the virtual environment and or the debugging environment. As an option the identifier may indicate a presence of the virtual environment and or debugging environment on the system. For example files that are associated with the debugging environment and or the virtual environment may be included under a programfiles directory and or any other directories. In another example registry entries belonging to the debugging environment and or the virtual environment may be included in a registry.

In another embodiment the simulation may include simulating hardware with a predetermined identifier. The identifier may be associated with the virtual environment and or the debugging environment. As an option the predetermined identifier may include a name of the hardware. The hardware may be utilized for implementing the virtual environment and or the debugging environment. For example a graphics card may be simulated with a name and or other information typically used by a virtual and or debugging environment. In another example a compact disc CD drive may be simulated with information typically found in a virtual and or debugging environment.

In yet another example a network card may be simulated with a typical virtual and or debugging name. Also in still another example all or part of a media access control MAC address of the network card may be simulated with all or part of a MAC address typically used by a virtual and or debugging environment.

In still yet another embodiment the simulation may include simulating one or more elements of firmware associated with the virtual and or debugging environment. For example the simulation may include simulating one or more elements of a basic input output system BIOS with elements typically used by a virtual and or debugging environment.

Additionally in yet another embodiment the simulation may include maintaining a predetermined port open. The open port may be associated with the virtual environment and or the debugging environment. For example a network port may by kept open. In this way it may optionally appear that a communication has been established between a host system and the virtual environment and or the debugging environment thus simulating the virtual environment and or the debugging environment.

Further in still another embodiment the simulation may include simulating an execution of a predetermined process. The predetermined process may be associated with the virtual environment and or the debugging environment. For example a name of an executable associated with the virtual environment and or the debugging environment may be included in a list of running processes. In another example an operating system may return the name of an executable indicative of the virtual environment and or the debugging environment in response to a query for running processes thus simulating the virtual environment and or the debugging environment.

Further still in another embodiment the simulation may include simulating a predetermined central processing unit command. The predetermined central processing unit command may be associated with the virtual environment and or the debugging environment. For example the predetermined central processing unit commands may be simulated as occurring during a virtual environment session and or a debugging environment session. In another example calls and or execution of program code may be simulated.

In yet another embodiment hardware acceleration indicative of the debugger and or virtual machine may be simulated. Further in another embodiment an application programming interface API response may be simulated. For example a positive response may be given to an API call requesting an indication of whether the virtual environment or the debugging environment is present.

In still yet another embodiment the simulation may include incorporating one or more keywords indicating the presence of the virtual environment and or the debugging environment into a title of a window. For example keywords such as process monitor file monitor and or registry monitor may be incorporated into the window title. Furthermore in another embodiment the simulation may include increasing the amount of time taken to execute one or more portions of the code or other data.

Also in one embodiment the simulation of the virtual environment and or the debugging environment may be incorporated into a software product. For example a desktop anti malware product may perform the simulation.

Additionally as shown in operation unwanted code is prevented from executing as a result of the simulation. In the context of the present description the unwanted code may include any code that is unwanted. In one embodiment the unwanted code may include an unwanted program process file folder etc. In another embodiment the unwanted code may include an instance of malware. For example the unwanted code may include a virus a worm a Trojan horse spyware etc. In yet another embodiment the unwanted code may include an instance of adware.

Also in one embodiment the unwanted code may be compressed. As an option the unwanted code may be compressed by being packed e.g. by a packer application etc. . For example the unwanted code may be runtime packed. In another embodiment the unwanted code may be packed in a polymorphic manner. For example unwanted code may appear different each time the unwanted code is compressed by the packer application.

Furthermore in yet another embodiment the unwanted code may be protected. For example the unwanted code may be protected against actions such as disassembling decompilation debugging analysis etc. In another embodiment the unwanted code may require that a condition is met before the unwanted code executes. For example the unwanted code may detect whether the unwanted code is being debugged in a debugging environment or being run in a virtual environment and may not execute if such debugging environment and or virtual environment are present. In another example the unwanted code may detect the location of the unwanted code and may execute only if the unwanted code is found to be in a particular location e.g. outside of the debugging environment and or virtual environment etc. .

In addition in one embodiment as a result of the simulation the unwanted code may determine that the virtual environment and or debugging environment exist e.g. that unwanted code is located in the virtual environment and or the debugging environment etc. . For example the unwanted code may search for and find the file or the folder with the identifier associated with the virtual environment and or the debugging environment. In another example the unwanted code may search for and find the simulated hardware associated with the virtual environment and or the debugging environment. Additionally in another example the unwanted code may search for and find the simulated elements of firmware associated with the virtual and or debugging environment.

In yet another example the unwanted code may search for and find the simulated open port associated with communication between the host system and the virtual environment and or the debugging environment. In still another example the unwanted code may search for and find the simulated process associated with the virtual environment and or the debugging environment.

In still yet another example the unwanted code may search for and find the central processing unit command associated with the virtual environment and or the debugging environment. Additionally in another example the unwanted code may detect hardware acceleration indicative of the virtual environment and or the debugging environment. Also in yet another example the unwanted code may perform the API call requesting whether the virtual environment and or the debugging environment is present and may receive a positive response to the API call indicating the presence of the virtual environment and or the debugging environment.

Further in another example the unwanted code may check the title of one or more windows and may detect one or more keywords indicating the presence of the virtual environment and or the debugging environment in the title of the windows. Additionally in yet another example the unwanted code may time the execution of one or more portions of the code or other data and may determine from the amount of time taken to execute the code or data that the virtual environment and or the debugging environment is present.

Also in one embodiment the simulation of the virtual environment and the debugging environment may be performed by creating a layer between the operating system and the unwanted code. In another embodiment the layer may indicate to the unwanted code that the virtual environment and or the debugging environment is installed and or executing on the operating system. For example the layer may positively respond to queries from the unwanted code that the virtual environment and or the debugging environment are installed and or executing. In this way the unwanted code may determine that the unwanted code is located in the virtual environment and or the debugging environment even though elements of the virtual environment and or the debugging environment are nonexistent with respect to the operating system.

Further in another embodiment the unwanted code may fail to execute as a result of the determination that the unwanted code is located in the virtual environment and or the debugging environment. For example the unwanted code may purposefully avoid execution if the unwanted code is determined to be in the virtual environment and or the debugging environment. Of course however the execution of the unwanted code may be prevented in any manner as a result of the simulation.

In this way the unwanted code may fail to execute as a result of the simulation of the virtual environment and or the debugging environment. Additionally the unwanted code may be packed and or protected once or multiple times and may still be prevented from executing as a result of the simulation.

More illustrative information will now be set forth regarding various optional architectures and features with which the foregoing technique may or may not be implemented per the desires of the user. It should be strongly noted that the following information is set forth for illustrative purposes and should not be construed as limiting in any manner. Any of the following features may be optionally incorporated with or without the exclusion of other features described.

As shown a computer system is included. The computer system may include any type of computer system. In one embodiment the computer system may include the servers and or clients illustrated in .

In addition the computer system includes a whitelist of whitelisted applications. In one embodiment the whitelist may be stored in the various storage mediums illustrated in including RAM ROM disk storage units etc.

In another embodiment the whitelist may include an identification of code e.g. applications as shown that is predetermined to be acceptable by the computer system e.g. predetermined to be allowed to execute etc. . As an option the determination may be performed by the computer system a user a policy etc. In yet another embodiment the whitelist may identify one or more portions of the code that is determined to be acceptable by the computer system . For example the whitelist may list a protector application and or packer application used by a legitimate commercial software developer that is predetermined to be acceptable.

In one embodiment the whitelist may store an identifier e.g. name etc. of the whitelisted applications. In another embodiment the whitelist may store definitions of the whitelisted applications. In another example the whitelist may store a characteristic of the whitelisted applications. Of course however the whitelist may store any information regarding whitelisted applications.

Additionally the computer system includes a security system . In one embodiment the security system may protect the computer system against execution of unwanted code. For example the security system may protect against the execution of malware on the computer system . In another example the security system may protect against the execution of code that is not found in the whitelist .

Further the security system includes a virtual environment simulator and a debugging environment simulator . In the context of the present embodiment the virtual environment simulator may include any simulator capable of simulating a virtual environment. Additionally in the context of the present embodiment the debugging environment simulator may include any simulator capable of simulating a debugging environment.

For example the security system may use the virtual environment simulator and the debugging environment simulator to create a layer between the computer system and code stored on the computer system that simulates the virtual environment and or the debugging environment. In one embodiment the layer may lead unwanted code to believe that the virtual environment and or the debugging environment is installed and or executing on the computer system . For example the layer may positively respond to queries from unwanted code indicating that the virtual environment and or the debugging environment are installed and or executing.

In another example the security system may use the virtual environment simulator and the debugging environment simulator to create one or more physical files processes etc. on the computer system that simulate the virtual environment and or the debugging environment. In this way unwanted code that is created to be disabled from execution when a virtual environment and or debugging environment are present on the computer system may assume that the virtual environment and or the debugging environment is present based on the simulation and may thus be prevented from executing. As a result the computer system may be protected against execution of unwanted code.

In one exemplary embodiment a request for executing an executable file may be identified by the computer system . Additionally the simulation of the virtual environment by the virtual environment simulator and or the debugging environment by the debugging environment simulator may be conditionally performed by the security system based on the identification of the request. Just by way of example the simulation may be performed if it is determined that the executable file is protected or packed utilizing a respective packer or protector that is not whitelisted.

Further in another embodiment it may be determined by the security system whether a file in the computer system is protected so as to preclude execution of the file in the virtual environment and or the debugging environment. The simulation by the virtual environment simulator and or the debugging environment simulator may be conditionally performed based on the determination. As an option the simulation may be performed if it is determined that the file is protected for preventing execution of the file.

Also in still another embodiment it may be determined by the security system whether the file is packed. Additionally the simulation by the virtual environment simulator and or the debugging environment simulator may be conditionally performed based on the determination. For example the simulation may be disabled from being performed if it is determined that the file is not packed.

Further still in yet another embodiment it may be determined by the security system whether the file is legitimate. As an option the whitelist may be utilized to determine whether the file is legitimate. For example the file may be compared against one or more files listed by the whitelist . Additionally the simulation by the virtual environment simulator and or the debugging environment simulator may be conditionally performed based on the determination. In one embodiment the simulation may be disabled from being performed if it is determined that the file is legitimate.

As a result commercial applications implementing packers and protectors which may fail to execute on the computer system due to simulation by the virtual environment simulator and or the debugging environment simulator may be allowed to execute by disabling the simulation. Therefore interference with commercial applications implementing packers and or protectors may be avoided as a result of the simulation.

As shown in decision it is determined whether an executable file has requested to be executed. In the context of the present embodiment the executable file may include any file that is able to be executed. For example the executable file may include a binary file a script a program file etc. In one embodiment the executable file may include unwanted code. If it is determined that the executable file has not requested to be executed then the determination shown in decision is repeated.

If it is determined in decision that the executable file has requested to be executed then in decision it is determined whether the executable file is protected or packed. In one embodiment a portion of the executable file may be examined in order to determine whether the executable file is protected or packed. For example it may be determined whether the executable file contains a protected or packed file structure. In another example the executable file may include an identifier which identifies whether the executable file is protected or packed.

In another embodiment an attempt may be made to analyze the executable file in order to determine whether the executable file is protected or packed. For example a protected or packed file may not allow analysis of the executable file and may therefore deny the attempt to analyze the executable file. In yet another embodiment a heuristic method may be used to determine whether the executable file is protected or packed. Of course however it may be determined whether the executable file is protected or packed in any manner.

If it is determined that the executable file is not protected or packed then in operation simulation of a virtual environment and or a debugging environment is disabled. In one embodiment the simulation of the virtual environment and the debugging environment may be disabled by removing a file and or a folder with a predetermined identifier indicating a presence of the virtual environment and or the debugging environment. In another embodiment a simulation of hardware with a predetermined identifier may be disabled for disabling the simulation.

In yet another embodiment the simulation may be disabled by closing a predetermined port indicative of the virtual environment and or the debugging environment. In still another embodiment a simulation of an execution of a predetermined process may be disabled for disabling the simulation. In still yet another embodiment a simulation of a predetermined central processing unit command may be disabled for disabling the simulation.

Also in another embodiment a simulation of hardware acceleration indicative of the virtual environment and or the debugging environment may be disabled. In yet another embodiment a simulation of an API response may be disabled for disabling the simulation. Of course however the simulation may be disabled in any manner.

If it is determined that the executable file is protected or packed it is then determined whether the respective packer or protector utilized to protect or pack the executable file is whitelisted. See decision . In one embodiment the determination may be performed by identifying the packer protector and comparing the identification against a whitelist containing identifications of packers and protectors predetermined to be acceptable.

In another embodiment the determination may be performed by identifying a characteristic of the packer protector and comparing the characteristic against a predetermined list of characteristics of the whitelisted packers and protectors. Of course however the determination may be performed in any manner.

If it is determined in decision that the packer protector is whitelisted then in operation the simulation of the virtual environment and or the debugging environment is disabled. As a result packers and protectors that are deemed acceptable may not be subject to the simulation of the virtual environment and the debugging environment thus allowing executable files associated with such packers and protectors to execute.

If it is determined in decision that the packer protector is not whitelisted then in operation the simulation of the virtual environment and or the debugging environment is enabled. For example the simulation may be enabled by including a file and or folder with a predetermined identifier indicative of a presence of the virtual environment and or the debugging environment simulating hardware with a predetermined identifier indicative of a presence of the virtual environment and or the debugging environment etc. In this way the simulation of the virtual environment and the debugging environment may be performed when packers and protectors associated with unwanted code request to be executed for preventing execution of the unwanted code.

While various embodiments have been described above it should be understood that they have been presented by way of example only and not limitation. Thus the breadth and scope of a preferred embodiment should not be limited by any of the above described exemplary embodiments but should be defined only in accordance with the following claims and their equivalents.

