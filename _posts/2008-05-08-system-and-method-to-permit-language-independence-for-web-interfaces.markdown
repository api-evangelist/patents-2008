---

title: System and method to permit language independence for web interfaces
abstract: The disclosed system and method provides a user interface in which language-related content is decoupled from a document structure or content to permit the document to accept variable language text. The language-related content is stored separately from the document structure and content. The document without the language-related content acts like a template that can be populated with any type of language-related content. The language-related content can be provided in a separate file together with associated identifiers, and can be loaded into a cache or document object model (DOM) for processing. An XML file may be used for the language file, and the document may be constructed using HTML code. Document components can be assigned event handlers that cause pop-up boxes to be loaded and displayed with language-related content upon an event trigger.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07958442&OS=07958442&RS=07958442
owner: Dialogic Corporation
number: 07958442
owner_city: Montreal, Quebec
owner_country: CA
publication_date: 20080508
---
The presently disclosed system and method relate generally to dynamic rendering of a document in a display and more particularly to dynamically rendering the document with a content being presented in a selected language.

A widely employed network communication topography provides for a client and a server to interact to exchange information. In such an architecture the client typically requests data from the server in the form of a document that can be transmitted over a communication link between the client and the server. Accordingly the document is preferably but not necessarily electronic in form and can be constructed with one or more pages or a portion of one or more pages as a web page a message providing information to the user of the user interface and any other type of representation of information. For example a document can be implemented as a web page constructed with HTML and scripting code and having media components with labels tags text boxes menus text audio image video symbolic iconic or representative content or any other type of media representation including components or controls for the media representations. As used herein the term document encompasses all media types such as those mentioned above as well as other well known types and provides a representation of media content that can be stored or displayed with a user interface.

The request from the client is processed at the server which responds by sending data to the client in the form of an electronic document. A common protocol for the exchange of information between the client and the server is a hypertext transfer protocol HTTP that is deployed on top of a transmission control protocol internet protocol TCP IP . HTTP based transfers typically define the data involved in the exchange while TCP IP provides for the control of packets of data exchanged between the client and the server.

The client typically has a user interface with a display upon which the document transferred from the server may be displayed. The document may be rendered on the display within a web browser using hypertext markup language HTML code style sheets scripts and or extended markup language XML code collectively referred to hereinafter as rendering instructions. The web browser operates to read and or execute rendering instructions to render the document on the display. The rendering instructions may include content such as language related content that is stored or displayed by the user interface. As used herein language related content is meant to indicate any type of media provided in conjunction with the document in which a user s language may make the content meaningful to the user. As an example language related content may be text used in constructing the document such as menu text text for labels headings buttons check boxes text for help or information pop up boxes or for any other type of control or presented information in the display using text. Language related content is also meant to encompass all media representations that may be found in the document including such examples as alphanumeric characters symbols icons indicators indicia audio images video formatting instructions such as left to right or right to left text orientation formatting queues tactile media representations or any other type of information that can be represented in document media that is meaningful to the user in the context of the user s language.

One challenge in rendering a document in a display is presented when different languages are to be represented by the language related content provided in the rendering instructions. That is if a document rendered in a display is to be presented in different languages difficulties arise in translating all the language related content items provided in the document for display. The document in general may be presented in a large variety of languages with each different language being supported through the implementation of a different document that can be selectively presented by the browser in the user interface. For example each document may have labels instructions values help text and other language related content that is provided in a unique language so that each document version formed in a different language becomes a unique document.

Accordingly a new document is generated for each language that is added to the set of available languages from which the user may select. The maintenance and administration of a large of number of separate documents that are to be provided to a user interface in dependence upon a language selection can be daunting. In some cases a document can represent a certain configuration in relation to a service or product available through a server. If the service or product for which the document is constructed is changed in content or scope each individual document in each language is modified to reflect the change. Thus even a simple update to a service or product for which the document is provided represents a large scale effort in modifying and coordinating documents with a wide variety of language related content that may be impacted by the change. Such an arrangement for providing language dependent documents to a user interface based on a configuration of a server or product is unwieldy and may limit the usefulness of providing different language representations of the document. For example maintaining a number of different documents based on language differences can be challenging for consistent version control.

A number of advantages and conveniences can be obtained for manufacturers administrators and users of products that are generally accessible through a network. For example it may be advantageous and convenient to implement a server within a unit of a given product where information concerning the product can be made available over an internet connection for example. Access to the unit can be obtained through the server for such purposes as configuring various settings or querying various parameters within the unit. When the product is distributed on a wide geographical basis such as world wide a user seeking access to a given unit can be provided with a document through the server embedded in the unit such document describing the configuration of the unit and permitting the user to install configure or update the unit for example. It is highly advantageous to permit a user to administer a given unit as described above on a remote basis such as through an internet connection with the server embedded in the unit. However a document provided to the user should provide the unit information in a language and representation that is suitable for the user. When multiple different languages are to be supported by documents available from the server to permit administrative interaction between the unit and the user the above described issues and challenges in relation to language specific documents are typically encountered.

Such a product as described above may be implemented in the form of a gateway which is a telecommunications device serving as a network node to provide translation or mapping of protocols between different networks such as between a traditional telephone network and a voice over IP VoIP network. An example of such a gateway is the Dialogic 1000 Media Gateway series or the Dialogic 2000 Media Gateway series which are commercially available from Dialogic Corporation of Montreal Quebec Canada.

Referring to a diagram of a client server system is illustrated in which a client interacts with a server to exchange information. In system a unit that is representative of a product such as the above described gateway includes server as an embedded device. Server includes XML code HTML code and scripting code that can be used to respond to a request from client over network link which can provide connectivity for an HTTP transfer using TCP IP as discussed above. System typically operates by having a user interface submit a request to server through a browser . Server responds with XML code HTML code and or scripting code or with documents which may contain XML HTML or scripting code as well.

Conventionally documents are provided to browser upon request and contain information concerning unit to permit a user to interact with and administer unit as discussed above. Documents may be provided to have a unique copy for each supported language that is desired by purchasers administrators or users of unit in general. A user accessing a language specific document from documents selects a language and receives the appropriate language specific document in browser .

As part of request the user may specify a particular language in which the requested document should be rendered within browser . If the configuration of unit is modified such as by a new installation a configuration modification or update to unit documents are updated to also reflect changes to the configuration of unit . If not updated to track changes to unit documents may provide incorrect or incomplete information concerning unit . Accordingly each language specific document in documents is reconfigured and potentially created anew if significant changes are implemented to the configuration of unit . Examples of modifications to the configuration of unit include instances where new parameters are available information is stored in a different location than previously expected new data structures or controls are introduced or any other type of configuration change that calls for modification to documents . To properly maintain support for a number of different languages all the language specific items in documents are modified to reflect the configuration changes to unit to maintain consistent administrative access to unit across the different supported languages. As discussed above the exercise of modifying documents to correspond with configuration changes in unit occurs even if the changes to unit are small in number or effect. Such an arrangement can be unwieldy and problematic also as discussed above.

In accordance with the disclosed system and method language related content is decoupled from a document structure or content to permit the document to accept variable language related content. The language related content is stored separately from the document structure and content. The document without the language related content acts like a template that can be populated with any type of language related content. The language related content can be provided in a separate file which may provide all available language related content for the different supported languages. Alternately or in addition language related content for each of the supported languages can be provided in a separate file specific to a given language. The language related content can include rendering instructions that are imported into a user interface with the document.

According to one aspect of the disclosed system and method a language specific file is delivered from a server to a client before during or after a requested template document is requested from the server by the client. The language specific file can be parsed and the parsed language related content can be stored in a cache or in a document object model DOM associated with a user interface. At the client the template document is scanned for language independent elements using for example a script in conjunction with a scripting engine available at the client. The script may be provided to the client as part of the requested template document. A language independent element is a part of the template document that can indicate the use of variable language related content as well as a location where the language related content should be inserted. An identifier associated with a language independent element is used to reference language related content in the cache or DOM. The language related content is extracted from the cache or DOM and populated in the template document to form the document which may then be stored or displayed to the user.

According to one aspect of the disclosed system and method the language specific file is implemented in XML code. The language specific file may be implemented as an XML file. The language specific XML file is delivered to the client prior to the request from the client to the server for the template document. The XML code or content may be stored in the DOM. When the template document is delivered to the client in response to the submission of a request to the server HTML and or scripting code in the template document is scanned for language independent elements that have associated identifiers IDs tags or insertion points. Upon detection of such elements the associated identifiers tags or insertion points also referred to herein collectively as language element indicators are used to search the language specific XML file for the language related content matching the language element indicators to be inserted at the specified points in the template document

According to another aspect of the disclosed system and method language independent elements are identified in a document delivered from a server to a client which elements mark insertion points for language related content. According to one aspect a script executes to scan the document for elements marking language insertion points. For example the scan detects a tag an ID or an attribute as a language element indicator that identifies an entry in a corresponding language file. The language element indicators detected in the document have identifiers that are used to locate corresponding identifiers in a set of language related content items. When a match is found for corresponding identifiers in the set of language related content items which can be implemented as a language file the content associated with a matched identifier is extracted from the set of language related content items and inserted into the matching language element indicator within the document. Once all the language element indicators in the document are populated with matched content found in the language file if any the language related content is stored or displayed within the document on the display for the user interface.

According to another exemplary aspect the disclosed system and method provides language related content as pop up information on the display when an event is triggered that causes pop up information to be displayed. For example an event handler may be installed for a mouse cursor or other input device to trigger a pop up box for displaying pop up information. For example a mouse cursor hovering over a specified item or location can trigger a pop up box display that may be used for help or hint information and that can be populated with content in accordance with the selected language. In such a case the template document is scanned by a script to detect language element indicators associated with a template document component such as a pushbutton label and so forth. The script can be configured to install an event handler for the template document component upon detection of a particular type of language element indicator for example. An event trigger can be selected for a number of events which are well known in the art such as for example when the mouse cursor moves over a given item or location. When the user moves the cursor over the item or location and causes an event trigger the installed event handler executes to locate the language related content associated with the pop up box to be rendered by the event handler. The language related content associated with the triggered event is found for example by searching a corresponding language file for an identifier associated with the language related content to be inserted in the pop up box. The identifier associated with the language related content can be implemented in various forms such as a tag ID or attribute associated with the language related content. If the identifier is found the associated language related content is extracted from the language file and populated within the pop up box.

The disclosed system and method provides a technique for flexibly implementing a document in a client server environment in a selected language. A given document provided to a client by a server upon request from the client acts as a template within which language related content can be populated by the client. Previous documents constructed to be rendered in a client user interface such as a browser were constructed to be unique with respect to the configuration of the document and the language of the content within the document. If the structure of the document changed for example to match a new configuration of a service or device associated with the document the entire document was reconfigured with the attendant changes to the specific language content that was unique to the document. If a number of languages were to be supported the changes to the structure of the document would be repeated for each of the documents having a different language.

In accordance with the present disclosure a language related content and structure of a document provided by a server are decoupled to permit the document to be rendered in a user interface with a wide degree of flexibility with respect to a language chosen for the content represented in the document. According to an exemplary embodiment a document template is provided with components arranged to be non language specific. The components of the document template include such items such as buttons tables text boxes labels and any other type of control or content with which the user can interact. Embedded in the document template are language independent elements such as tags IDs or attributes that mark locations for the insertion of content from a language file. A language file is selected by the user when a particular language for the document is selected. For example the user is prompted to select a language from a list presented in the user interface and selection of the language causes selection of the particular language file associated with the language selection. Alternately or in addition the desired language can be determined from settings in the browser. Various other techniques can be used to permit or cause a language selection as may be apparent to those skilled in the art. A script running in the browser scans the document template for the language independent elements and uses identifiers associated with the elements to conduct searches for the same in the language file. If an identifier match is found the language related content with the matching identifier from the language file is inserted into the document template at the appropriate location associated with the appropriate language independent element.

Referring now to a diagram of a client server system is illustrated in which a client interacts with a server to exchange information. Server includes XML code HTML code and scripting code that can be used to respond to a request from client over network link . Server also includes separate language files that are used in conjunction with documents to browser . Client implements a user interface that may operate in conjunction with a browser . Browser can provide a widely accepted means for requesting and receiving content over a network connection such as is illustrated with network link . In compliance with widely accepted conventions browser can implement a scripting engine that can interpret and execute scripts received over network link . Browser also can implement a DOM in which may be stored XML related code or data. Browser can also interpret and execute HTML code that can be retrieved over network link . An operation of system is illustrated with respect to the sequence diagram shown in .

In a sequence diagram shows interaction between a client and a server . A series of events occur on client server or between the two as indicated by event numerals . A first event represents a request from client sent to server to obtain a language file. The language file may be an XML file and may have a name indicative of the language content. For example an English language file may have a name of language English.xml whereas a German language file may have the name of language German.xml. Any type of file construct or organization may be used as long as the different language related content items for insertion into a template document can be searched and identified. The actual request of a language file submitted by client can be prompted through a number of techniques including permitting the user to select a language in user interface . Alternatively or in addition a desired language for the document to be rendered in user interface can be determined from another source such as a language setting provided in browser . In any case a request for an appropriate language file is generated from client and submitted to server as indicated with event . In the exemplary embodiment of the language file is implemented as a unique XML file that includes content directed to a single language.

Server receives the request from client and provides the language data to client in a second event . In an exemplary embodiment the language data provided by server in response to the request from client is in the form of an XML file that is static. That is the returned XML file is composed of predetermined fixed entries. It should be apparent that the language file provided by the server can be dynamic in nature in that language related content entries in a given language can be composed through a translation engine for example. Alternately or in addition the language related content entries can include coded instructions such as HTML coded rendering instructions. In the embodiment in the language file is a static file with predetermined fixed text content which is loaded from an internal file system not shown provided in server . The language file is returned to client and may have a predetermined naming convention such as language xxx.xml where the xxx portion is a term identifying a particular language associated with the language file sent from server . In a third event client receives the XML language file and saves the file locally for later access. If client is equipped with a cache the XML language file can be stored in such a cache for quick access during document rendering to reduce overall display latency. Alternately or in addition the language related content from the XML language file can be parsed and stored in a cache or a DOM associated with the user interface.

A fourth event indicates a request from a user submitted to server for a document or page to obtain the desired document rendered in user interface with the desired language. It should be noted that in event the request submitted by the user may prompt a request for the XML language file. The XML language file can be sent before along with or after the document template is requested and returned to client . According to an exemplary embodiment event occurs with a user requesting a configuration or status page for unit . With such a configuration or status page the user can configure unit or obtain parameter value information to monitor operation of unit . For example unit can be a gateway as discussed previously which can be administered remotely with a configuration or status document provided by server over an internet connection to a remote client . Because such a gateway can be implemented in various locations on a worldwide basis the configuration or status document associated with the gateway should be understandable in a number of different languages. The presently disclosed system and method solves the challenge of administering a large number of configuration or status documents associated with a potentially large number of gateways in a large number of supported languages.

In a fifth event server receives the request from client originated by event and looks up the requested document in the file system not shown with which server is provided. The document corresponding to the request from client is retrieved from storage and sent to client . Alternately or in addition the document corresponding to the request from client can be generated by server on a dynamic basis. For example depending upon the content that is sought in conjunction with the request from client a document can be configured to provide a specified structure to include language independent elements that can be completed with language related content by client . In accordance with an exemplary embodiment server provides a template document that includes language independent elements which can be detected upon the template document being scanned such as by a script operating in browser . The template document generally has provisions for storing or visually representing the desired features information or controls available in observing or configuring unit . The template document returned from server does not necessarily include any language related content that will be stored or presented to the user through browser . For example the template document may include an HTML specification for a table with a certain number of rows and columns. The usual entries for text to define a table title column or row headings or other text information associated with the table are instead identified with language independent elements which have identifiers that may match the identifiers of corresponding text items in an associated XML language file. The components in the template document that are to have language independent text are typically identified and provided by a developer who creates the template document.

In a sixth event client receives and renders the template document in browser . The template document may be rendered without language related content that would be dependent upon a language selected by the user. In addition the template document may be rendered in a background environment so that it is not initially displayed in browser . Browser renders the template document by interpreting the rendering instructions provided with the template document. The rendering instructions cause the browser to construct the components of the template document with appropriate attributes. Components may include such items as pictures push buttons radio buttons labels menus drop down boxes text boxes and any other type of component or control that can be represented with the rendering instructions. The component attributes may be for example color size or location on a display screen component functional capability and other attributes of the components to permit interaction with the user through the user interface. The rendering of the template document in event provides for the rendering of each of the components in accordance with the rendering instructions and without language related content items that can be associated with the components. The language related content items are provided to the components separately to reflect the language selection.

In a seventh event a script such as may be provided with script code scans the constituent parts of the template document for language independent elements during or after the loading or rendering process. The language independent elements indicate that language related content should be inserted into corresponding components in the template document such as into text or symbol variables or other types of media placeholders within the language independent elements provided within the template document for example. Each of the language independent elements identified in the scan of the template document has an associated identifier that can be used to prompt a look up of language related content that also has an associated identifier. The language related content can be stored in a language file a cache or a DOM for example.

An eighth event provides for the look up of the language related content items associated with the language independent elements identified during the scan of the template document. The script executing within browser accesses the language related content items downloaded in event wherever they are stored. For example the language related content items may be parsed and stored in a cache or in a DOM associated with the user interface. The exemplary embodiment of a language file is used in the following discussion and is provided as an example that is inclusive of language related content items stored in a cache or in a DOM.

In the case of the language related content items being stored in a language file the script looks for a file with the naming convention of language xxx.xml where xxx can be any predefined term indicating a particular language. As an example the xxx term can be provided as such terms as English Spanish or German to indicate the respective language text items contained within the language file. Alternately or in addition the term xxx can be provided with a native language identifier such as Fran ais or Allemand for French and German respectively.

The script looks through the language file for entries with identifiers that match the identifiers associated with the language independent elements detected in the scan of the template document. The search may be conducted based on for example an identifier implemented as a tag an ID or attribute that is associated with the language related content item in the language file. If the script locates an identifier in the language file that matches the identifier from a language independent element found in the scan the language related content associated with the matched entry is extracted from the language file and inserted into the template document in the appropriate variable such as in the language independent element or component location. The results of the script search through the language file may be dynamic in nature where depending upon certain settings in the template document client or language file some language related content may be extracted or selected over other language related content. For example client may provide a setting for a verbose mode to indicate that a particular selection of language related content should be extracted from the language file for a given language element in the template document. The setting for verbose mode may retrieve an expanded language related content for a language element as opposed to a setting for summary mode which may retrieve an abbreviated language related content from the language file for the language element in the template document.

The process continues until all language elements identified in the template document have been searched in the associated language file for language related content items to be inserted into appropriate variables or placeholders in the template document.

In the case of text items stored in a cache or DOM the search for an identifier among the text items that matches the identifier from a detected language independent element is conducted in the cache or DOM respectively. The same mechanism described above is used to extract text from text items matching the language independent element and to insert the text in a desired location within the template document.

After all language elements in the template document have been identified and processed as discussed above the document is complete for display purposes and can be stored or provided to a display of user interface for viewing by the user. According to an exemplary embodiment the template document may be rendered and displayed to the user without text. The language related content extracted from the identified text items may then be provided to the appropriate location on the display as determined by the language independent elements and component attributes or construction as the rendered template document is scanned by an executing script. Alternately the entire document with visual constructs and language related content can be displayed to the user after it is fully constructed such as may be achieved in a background mode and ready for display to the user.

The language related content items provided in the language file cache or DOM can be any type of representation of information that is meaningful to the user in the context of the user s language. For example the language related content may include text alphanumeric characters symbols icons indicators indicia audio images video formatting instructions such as left to right or right to left text orientation formatting queues tactile media representations or any other type of media representation that may be provided in the document. In addition the language related content items can be any type of HTML code for example such as HTML code used to generate text or other language related content as discussed above. The use of HTML code in a language related content item enables the fully rendered document to support language representations that include for example symbols right to left reading or other conventions as may be used in the various languages encountered around the globe.

The following example provides portions of an XML file and an HTML file representing the language file and template document respectively. The following illustrative code samples show an exemplary embodiment of a link between HTML code representing components of the template document and the language file as an XML file containing text as the language related content.

In the above example the language is English as indicated in the second line of the XML language file. The HTML file includes a place holder blank nbsp that is used as the variable in the language independent element identified with the tag as a table header. The place holder blank nbsp is replaced with the term Main Settings Configuration drawn from the XML file in the above example. The replacement is achieved by using a script to scan and detect the language independent element with the identifier Label SettingsTableText which identifier is used to search the XML file. The matching identifier is located on the third line of the XML file and the language related content associated with the matched identifier in the XML file is extracted for insertion into the HTML file. The content of the square brackets following the CDATA keyword is HTML code embedded within the XML file and is not interpreted or rendered as HTML code until inserted into the template document replacing blank placeholder nbsp following the identifier Label SettingsTableText. Accordingly the text Main Settings Configuration has the word Main rendered in bold when the text is inserted into the HTML file in accordance with the HTML code provided in the XML file for the table header language related content item.

Any type of language related content can be provided in the XML file to be used to populate a template document for display to the user in relation to a desired language. With this configuration the HTML file can be constructed and implemented on a one time basis with variations in supported languages being provided through the appropriately selected language file. In the exemplary embodiment above the language independent element in the HTML file has an identifier that matches a corresponding identifier in the XML file. The script scanning the HTML file uses the identifier with the Label notation to search for a match in the XML file. The matched identifier in the XML file references the desired language related content items to be inserted into the HTML file in the placeholder blank associated with the language independent element.

As illustrated in the above example the language file can have tags IDs or attributes that can be found with reference to language independent elements in the template document. The above discussed architecture permits language and component construction to be disassociated or decoupled. By separating language related content from a document construct and components in the document greater flexibility in reconfiguring the document is gained. If the HTML file is reconfigured for example to correspond with configuration changes in unit such a reconfiguration can be done on a one time basis. The reconfigured HTML file continues to operate properly with the supported language files without necessarily requiring additional maintenance efforts. Accordingly further language translations to implement a multi language support for viewing a status or changing a configuration of unit can be limited in scope.

One area in which the disclosed system and method can be highly advantageous is where a document includes pop up boxes that are used to display pop up data based on the triggering of a predetermined event. For example if user interface includes a display with a mouse cursor that can be manipulated by a user moving a mouse the position of the mouse cursor can be used as a specified event to trigger a response that was previously defined within the displayed document. A common example of this type of pop up provision is provided in the case where the mouse cursor is maintained in a position or hovers over an underlying document component that is provisioned with an event detector for detecting a hovering mouse cursor. If the event detector is triggered by a hovering mouse cursor a pop up box can be displayed with language related content that provides information to the user. This type of pop up data is often provided in the context of help or hints to the user when the user causes the mouse cursor to hover over the component of interest.

According to an exemplary embodiment of the disclosed system and method a content of such a pop up box as discussed above can be provided for any supported language without requiring a reconfiguration of the document. For example referring to the above example the XML file includes a tag identifier to identify language related content items that should appear when a pop up box event is triggered.

Referring now to a sequence diagram illustrates events that can occur to provide support for pop up boxes with language related content entries in a supported language selected by the user. Portions of diagram are based in part on diagram shown in and continue with a fifth event corresponding to fifth event illustrated in . As with event event is a look up of a requested document or page by server in a server file system not shown . Diagram presumes that a client has stored or parsed a language file corresponding to the document or page being requested by client . Server obtains or generates the requested template document in event and returns the template document to client . The template document has one or more language independent elements that are associated with document components constructed for display in the user interface. The components are typically implemented as objects that have associated methods some of which provide for detection of an event in the user interface. Upon detection of an event the component object may provide a method for handling the event such method causing a pop up box to be rendered in the browser with a particular language related content. Initially the template document retrieved from server may or may not have event handlers installed for the document components. A sixth event provides for the rendering of the template document or page retrieved from server . The rendered template document or page has language independent elements such that the document components are rendered without being populated with language related content.

A seventh event occurs with a script scanning the template document for language independent elements that when detected prompt a look up for corresponding language related content items. In the above example a table heading and table data are identified as language independent elements by the script scan of the HTML file with the entries of

The script that executes to scan the template document for language elements can also provide a number of other functions in relation to installing support for pop up data. An eighth event illustrates the activity of the script in assigning event handlers to selected components in the template document for which pop up support is to be provided. Using the above example of the portion of the HTML file the language elements

Accordingly event in does not necessarily cause the insertion of a language related content item into a component displayed in the document but provides a mechanism for referencing the language related content upon the triggering of a specified event. It should be apparent that any kind of available event may be used to cause a component to be populated with one or more language related content items extracted from the language file for the supported language. For example events such as double clicking right clicking left clicking or simultaneous left and right clicking with respect to mouse activities can all be assigned to have an event handler to cause a given component to be populated with one or more language related content items from the language file.

Referring now to a flow chart illustrates a process for implementing a pop up box that is populated with one or more language related content items extracted from a language file for a supported language. Box illustrates the assignment of event handlers to template document components when the script scans the template document as discussed above. In block an activity of a user is indicated such as the user causing a mouse cursor to hover over a component in the document for which component an event handler has been previously installed. In decision block a determination is made within the component rendered in the browser for example as to whether an event has occurred for which an event handler has been installed in the component. If the component determines that the specified event has occurred the event handler is triggered with processing along the YES path exiting decision block . If the component determines that an event has not occurred to cause triggering of an event handler processing proceeds along the NO path which resumes a waiting state in which the component looks for the occurrence of further events.

In block upon the triggering of the event handler such as the execution of an API that is installed in the component for execution when the component determines an event has occurred the component passes the tag ID or attribute associated with the language independent element for which the event handler was installed to permit language related content to be located for insertion into the pop up box. In block the event handler routine such as the API searches the XML language file for the tag ID or attribute that was passed to it from the component event handler. In decision block the API determines whether a match for the language element of the document is found within the XML language file. If no match is found the API does not provide any language related content in the pop up box and may omit displaying the pop up box altogether. This activity is reflected by the NO processing path taken from decision block which causes the component to return to a waiting state looking for further events.

If a language related content item match is found in the language file for the language independent element in the document the YES path is taking from decision block whereupon the language related content item is extracted from the matched entry in the language file as illustrated in block . In block the API opens the pop up box for display to the user in accordance with the characteristics defined by the API for the pop up box. As an example of defined characteristics the API may provide an icon or symbolic information such as a warning sign in conjunction with text supplied from the language file for display to the user. Alternately or in addition the language file may supply language related content that may include such iconic or symbolic information for display in the pop up box. Any number of types of functions may be implemented using an API including the display of menus peripheral functions such as printing audio alerts or any other functionality that can be implemented using an API with client for example. In the exemplary embodiment illustrated in flow chart extracted language related content taken from the language file is inserted into a pop up box constructed by the API for display to the user as illustrated in block . After the pop up box is displayed as indicated in blocks and another event may be provided for the removal of the box and associated language related content from the display such as moving the mouse cursor off of the component or the expiration of a certain time interval. The behavior of the event detection in the component can indicate how the event is to be triggered and also how the results of an event trigger are handled for example. In any case the component returns to a waiting state where the component looks for the occurrence of various events for which event handlers have been installed.

In an exemplary embodiment a pop up box can be built in the browser such as in the DOM which includes the language related content during an initialization phase for a template document. A number of component types including pop up boxes can be rendered with language related content and stored for later retrieval and use in a display. Such an arrangement avoids having a script scan for language related content in a language file upon the triggering of an event handler. That is the language file can be scanned once and the appropriate language related content can be stored in the DOM for example to be used for display as desired in accordance with the arrangement of the template document and its components.

The operations herein described are purely exemplary and imply no particular order. Further the operations can be used in any sequence when appropriate and can be partially used. With the above embodiments in mind it should be understood that the invention can employ various computer implemented operations involving data transferred or stored in computer systems. These operations are those requiring physical manipulation of physical quantities. Usually though not necessarily these quantities take the form of electrical magnetic or optical signals capable of being stored transferred combined compared and otherwise manipulated.

Any of the operations described herein that form part of the invention are useful machine operations. The invention also relates to a device or an apparatus for performing these operations. The apparatus can be specially constructed for the required purpose or the apparatus can be a general purpose computer selectively activated or configured by a computer program stored in the computer. In particular various general purpose machines employing one or more processors coupled to one or more computer readable medium described below can be used with computer programs written in accordance with the teachings herein or it may be more convenient to construct a more specialized apparatus to perform the required operations.

The disclosed system and method can also be embodied as computer readable code on a computer readable medium. The computer readable medium is any data storage device that can store data which can be thereafter be read by a computer system. Examples of the computer readable medium include hard drives read only memory random access memory CD ROMs CD Rs CD RWs magnetic tapes and other optical and non optical data storage devices. The computer readable medium can also be distributed over a network coupled computer system so that the computer readable code is stored and executed in a distributed fashion.

The foregoing description has been directed to particular embodiments of this invention. It will be apparent however that other variations and modifications may be made to the described embodiments with the attainment of some or all of their advantages. The procedures processes and or modules described herein may be implemented in hardware software embodied as a computer readable medium having program instructions firmware or a combination thereof. For example the function described herein may be performed by a processor executing program instructions out of a memory or other storage device. Therefore it is the object of the appended claims to cover all such variations and modifications as come within the true spirit and scope of the invention.

