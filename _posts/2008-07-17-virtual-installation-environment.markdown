---

title: Virtual installation environment
abstract: A virtual installation process and supporting environment. The virtual installation process may be considered a two-stage installation process. In the first stage a pseudo-installation may occur in which a user is provided an installation experience by a virtual installation environment that stores changes to be made as a result of the installation process. In the second stage of the installation process, the changes that were previously stored may be made to the host system. These changes may include changes to the registry, filesystem and/or any other host system components. The second stage may be initiated by a user attempting to launch the application for the first time. Other triggers may also be supported.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08694989&OS=08694989&RS=08694989
owner: Apple Inc.
number: 08694989
owner_city: Cupertino
owner_country: US
publication_date: 20080717
---
The present U.S. Patent application is related to the following U.S. Patent applications filed concurrently 

Installation of applications on a computing device such as a computer system smartphone personal digital assistant etc. More particularly the invention relates to use of a virtual installation environment for installing new applications on the computing device.

When an application is installed on an electronic system an installer program is typically used to manage the installation process. For example the Windows operating system provides the Windows Installer to install and uninstall other applications. Windows Installer allows registry and other system files to be updated or modified during the installation process. All registered trademarks used herein are the property of their respective owners. Other operating systems may provide a different user experience during installation but some basic operations for example modification of files on disk may still be performed.

Some programs exist only for certain operating system and or hardware platform combinations. Thus if a user is lacking the correct operating system or hardware that user is unable to utilize the desired program. Certain solutions exist for this problem including for example upgrading operating systems or hardware which can be expensive or use of multiple operating systems on a single computing system which can be expensive and provide technical challenges. Currently solutions to this problem are expensive or otherwise burdensome to users.

Described herein are techniques to provide a virtual installation environment that may be used to install an application on a host computing system. In one embodiment an electronic system may receive an executable application installation program configured to run on within a first operating system. The electronic system receiving the installation program may be configured to run a second operating system. The electronic system may detect beginning execution of the installation program.

In response to the beginning of the installation program the host electronic system may provide a virtual installation environment for the installation program. The virtual installation program may collect changes to be made to one or more components of the electronic system during installation. The virtual installation environment may store the collected changes to be made to the one or more components and the application to be installed on the electronic system in a predetermined file relationship with the application. The collected changes may be made to the one or more components to be performed in response to access to the application.

In one embodiment the one or more components of the electronic system include at least a filesystem of the second operating system. In one embodiment the one or more components of the electronic system include at least a system registry file of the second operating system. In one embodiment the one or more components of the electronic system include at least a file organization of the second operating system.

In one embodiment storing the collected changes to be made to the one or more components and the application to be installed on the electronic system in the predetermined file relationship may be accomplished by creating a bundle associated with the application to be installed storing in the bundle an indication of changes to be made to a registry in association with the installation and storing in the bundle an indication of changes to be made to a filesystem in association with the installation.

In one embodiment causing collected changes to the filesystem to be performed in response to access to the application may be accomplished by determining if the access to the application comprises a first access to the application after creation of the bundle and installing the application if the access is the first access wherein installation includes causing the stored changes to the registry and the stored changes to the filesystem to be implemented.

In one embodiment the first operating system may be a WINDOWS compliant operating system. In one embodiment the second operating system may be a MacOS compliant operating system. In one embodiment the second operating system may be a UNIX compliant operating system. In one embodiment the second operating system may be a LINUX compliant operating system.

In the following description numerous specific details are set forth. However embodiments of the invention may be practiced without these specific details. In other instances well known circuits structures and techniques have not been shown in detail in order not to obscure the understanding of this description.

Described herein are techniques to provide a virtual installation environment that may be used to install an application on a host computing system. In one embodiment the application to be installed is configured to function on a computing system using a different operating system than is used on the host computing system. For example an application may be written to run on a Windows operating system may be installed on a computing system running a MacOS UNIX or LINUX operating system. Registered trademarks used herein are the property of their respective owners.

The virtual installation environment may allow an installer application to run and go through the installation process for the application to be installed without making changes to the filesystem and or database file e.g. registry of the host computing system. In one embodiment the virtual installation environment tracks a hierarchy of processes created during the installation process to identify a process that is an installer application. If an installer application is identified all changes attempted by the installer application as well as child processes may be stored in files rather than applied to the host system. In one embodiment in response to an initiation of the application the host system may be modified as indicated by the installer application. Thus the virtual installation environment may provide a two step installation process which is described in greater detail below.

Computing system includes bus which is coupled to one or more microprocessors to form processing system . Bus is also coupled to memory and to a nonvolatile memory which may be a magnetic hard drive in certain embodiments or flash memory in other embodiments. Bus is also coupled to display controller and display and one or more input output I O devices .

Further bus may be coupled to storage medium a hard disk drive or other device where data may be stored. In one embodiment snapshots of files stored on a primary storage device e.g. hard disk may be stored on a secondary storage device e.g. another hard disk . Storage medium may be used to store snapshots and or other data. In alternate embodiments snapshots may be stored by other devices including for example the device on which the original file is stored.

Processing system may optionally be coupled to cache . Processing system may include one or more microprocessors such as a microprocessor from Intel or IBM. Bus interconnects these various components together in a manner which is known in the art. Typically the input output devices are coupled to the system through input output controllers.

Memory may be implemented as dynamic RAM DRAM which provides fast access to data but requires power continually in order to refresh or maintain the data in memory . Nonvolatile memory may be a magnetic hard drive or other nonvolatile memory which retains data even after power is removed from the system. While shows that nonvolatile memory is a local device coupled directly to the rest of the components in the data processing system it will be appreciated that other embodiments may utilize a nonvolatile memory which is remote from a system such as a network storage device which is coupled to the data processing system through a network interface such as a modem or an Ethernet interface.

Bus may include one or more buses interconnected through various bridges controllers and or adapters. In one embodiment I O controller may include a USB compliant adapter for controlling USB compliant peripherals and an IEEE1394 controller for IEEE1394 compliant peripherals. Many other peripheral devices may also be supported.

Aspects of the inventions described herein may be embodied at least in part in software. That is the techniques may be carried out in a computer system or other data processing system in response to its processor or processing system executing sequences of instructions contained in a memory such as memory or nonvolatile memory . In various embodiments hardwired circuitry may be used in combination with the software instructions to implement the present inventions. Thus the techniques are not limited to any specific combination of hardware circuitry and software or to any particular source for the instructions executed by the data processing system. In addition throughout this description various functions and operations are described as being performed by or caused by software code to simplify description. However what is meant by such expressions is that the functions result from execution of the code by a processing system.

When computing system is in an operating condition operating system may partially or completely loaded in memory while running Any operating system known in the art may be utilized to provide operating system . For example operating system may be a MacOS UNIX or LINUX operating system. Computing system may also run one or more application s which may also be partially or completely loaded in memory . Any suitable applications known in the art may be utilized.

In one embodiment a user of computing system may wish to install an application that is designed to run on an operating system other than operating system . For example if operating system is a MacOS compliant operating system the application to be installed may be designed to run with a Windows compliant operating system. Other operating systems may also be supported. The application to be installed may be provided to computing system via a tangible storage medium network connection etc.

In one embodiment when the user begins the installation process for the application operating system may detect the initiation of the installation process and cause the installation process to occur within virtual installation environment . In one embodiment the user experience is the same as or similar to the installation experience when installing the application within the operating system for which it was designed. For example virtual installation environment may prompt the user for a location to store particular files prompt the user for the type of installation to perform etc.

During the installation process within virtual installation environment changes that would be made to components of computing system e.g. filesystem database non volatile memory are not made but indications of the changes to be made are stored within one or more files created within virtual installation environment . During the installation process multiple applications and or threads may be initiated that correspond to the installation process. Changes from each of these applications and or threads are stored in a similar manner.

In one embodiment the result of the installation process within virtual installation environment is bundle which may include a version of the application executable within operating system any supporting files necessary as well as one or more files indicating the changes to be made to complete installation. Bundle may be system independent for computing systems running an operating system compatible with operating system . That is the bundle created by the virtual installation process may be transferred to another computing system for final installation or the application may be installed on computing system .

The virtual installation process may be considered a two stage installation process. In the first stage a pseudo installation may occur in which a user is provided an installation experience by a virtual installation environment that stores changes to be made as a result of the installation process. In the second stage of the installation process the changes that were previously stored may be made to the host system. These changes may include changes to the database filesystem and or any other host system components. In one embodiment the second stage is initiated by a user attempting to launch the application for the first time. Other triggers may also be supported.

In one embodiment the host operating system is configured to detect launch of an installer that is configured for a different operating system for example a Windows compliant operating system. While the detection functionality is described with respect to as being within the host operating system the detection functionality may not be included in the host operating system. For example the detection functionality may be provided by an application other than the host operating system.

When launch of the installer is detected the virtual installation environment may be launched . In one embodiment the virtual installation environment may provide all of the application program interfaces APIs expected from the operating system for which the application to be installed is designed. For example if the application is designed to function with a Windows compliant operating system the virtual installation environment may provide an emulation of the APIs provided by the Windows operating system. The same technique may be applied to any operating system.

Within the virtual installation environment the installer may be executed . In one embodiment execution of the installer includes the installer providing the user experience of the installer when running on the operating system for which it was designed. For example the installer may provide prompts for location of files optional features to be installed etc. In one embodiment the virtual installation environment provides a mapping between the default path structure of the operating system for which the installer is designed and the path structure of the host operating system. For example in a Windows operating system an application may be stored at

During the virtual installation process output from the installer application may be stored in a file . That is any changes that are to be made by the installation process are stored rather than made. For example changes to the database changes to any portion of the host filesystem and or any other changes may be stored in a file rather than made. In one embodiment storage of the changes may allow for analysis to determine whether the installation will be successful. In one embodiment storage of the changes may support rollback or a removal of the application should the installation be unsuccessful. Other advantages may also be provided by the storage of changes rather than immediate implementation of the changes.

In one embodiment the application to be installed along with the file s containing the changes to be made to complete the installation are stored in a bundle . The term bundle refers to an association between the application to be installed and the file s storing the changes to be made. Also the application to be installed may include one or more files. For example an executable application file and one or more support files may provide the application to be installed.

In one embodiment the operating system or other system component determines whether the access is a first access . If the access is not the first access the application is executed in the normal manner because the installation has been completed. In one embodiment normal installation of the application includes a host operating system or other system component providing a set of APIs that are expected by the application.

That is if the application is designed to run with a Windows compliant operating system and the host operating system is a MacOS compliant operating system the host operating system may provide an emulation of the Windows APIs so that function calls and or other operations by the application are executed properly by the host system. By providing an emulation of the expected APIs the host system may support execution of an application designed for a different operating system without the presence of the expected operating system on the host computing system. This may allow for example an application designed for a Windows operating system to run on a computing system having a MacOS operating system without the need for a user to install a Windows compliant operating system on the host computing system.

If the access to the application bundle is the first access after the virtual installation process the changes indicated by the file s stored in the bundle are made . For example changes to the filesystem changes to path names changes to the database may be made in response to a first access to the application before the application is launched by the host operating system. After the appropriate filesystem database and or other changes are made the application is executed as discussed above.

Virtual installation agent includes memory which represents a memory device and or access to a memory resource for storing data and or instructions. Memory may include memory local to virtual installation agent as well as or alternatively including memory of the host system on which virtual installation agent resides. Virtual installation agent also includes one or more interfaces which represent access interfaces to from an input output interface virtual installation agent with regard to entities electronic or human external to virtual installation agent .

Virtual installation agent also virtual installation engine which represents one or more functions that enable virtual installation agent to provide the virtual installation environment as described above. The example of provides several modules that may be included in virtual installation engine however different and or additional modules may also be included. Example modules that may be involved in providing the virtual installation environment include installer detection module change capture module change file creation module and bundle creation module . Each of these modules may further include other modules to provide other functions. As used herein a module refers to routine a subsystem etc. whether implemented in hardware software firmware or some combination thereof.

Installer detection module may detect the launch of an installer application used to install an application. For example installer detection module may cause the installer to run within the virtual installation environment and or launch the virtual installation environment. Installer detection module may also perform additional functions related to providing the virtual installation environment.

Change capture module may provide the functionality to capture changes to be made during installation of the target application. Change capture module may for example create one or more files that may be used to store changes to be made to various system components including for example a database the registry components of the file system etc. Change capture engine may also determine path names and or provide path name mapping as described above. Change capture module may also perform additional functions related to capture of information related to changes to be made to the host system in response to installation of an application.

Change file creation module may provide functionality related to creation of files to be used to store changes to be made in response to installation of the application. Change file creation module may for example cause the host operating system to create one or more files to be used to store the installation changes. Change file creation module may also create file names according to a predetermined strategy or may provide predetermined file names. Change file creation module may also perform additional functions related to file creation in response to installation of an application.

Bundle creation module may provide functionality related to creation of a bundle to be used to store change files and the application to be installed. Bundle creation module may for example cause the host operating system to create one or more folders or other collection of files to be used to store the installation changes and the application. Bundle creation module may also create folder names according to a predetermined strategy or may provide predetermined file names. Bundle creation module may also perform additional functions related to bundle creation in response to installation of an application.

Additional and or different modules and functionality may be supported by virtual installation engine and virtual installation agent . Any number of modules may be supported by virtual installation engine and virtual installation agent .

Reference in the specification to one embodiment or an embodiment means that a particular feature structure or characteristic described in connection with the embodiment is included in at least one embodiment of the invention. The appearances of the phrase in one embodiment in various places in the specification are not necessarily all referring to the same embodiment.

In the foregoing specification the invention has been described with reference to specific embodiments thereof. It will however be evident that various modifications and changes can be made thereto without departing from the broader spirit and scope of the invention. The specification and drawings are accordingly to be regarded in an illustrative rather than a restrictive sense.

