---

title: Method and system for supporting multiple display devices
abstract: A method and a system for supporting multiple display adapters in the WDDM architecture are provided. A driver wrapper serves as the interface between the OS and the display drivers. The driver wrapper hides the display drivers from the knowledge of the OS and provides the standard display driver interface (DDI) to the OS. In the view of the OS, the driver wrapper is the single common driver which receives requests from the OS. The driver wrapper dispatches the requests from the OS to the display drivers and relays responses from the display drivers to the OS. The driver wrapper of the present invention is compatible with multiple distinct display drivers.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08365199&OS=08365199&RS=08365199
owner: S3 Graphics Co., Ltd.
number: 08365199
owner_city: Grand Cayman
owner_country: unknown
publication_date: 20081226
---
This application claims the priority benefit of U.S. provisional application Ser. No. 61 017 806 filed on Dec. 31 2007. The entirety of the above mentioned patent application is hereby incorporated by reference herein and made a part of this specification.

The present invention relates to multiple adapter multiple monitor MAMM support based on Windows Display Driver Model WDDM . More particularly the present invention relates to supporting multiple display adapters from different manufacturers in the WDDM architecture.

As the performance of personal computers PCs and the demands from users increase there are usually a lot of applications running on a single PC at the same time. Sometimes the desktop area of the operating system gets crowded. For this issue there is a trend to connect multiple display monitors to a single PC simultaneously in order to widen the desktop area.

Recent versions of the Microsoft Windows operating system support multiple adapter multiple monitor MAMM to solve above addressed issue. For example XP Display Driver Model XDDM of the Microsoft Windows XP operating system supports MAMM Windows Display Driver Model WDDM of the Microsoft Windows Vista operating system also supports MAMM. However in WDDM the multiple display adapters have to be driven by a single common display driver. This is relatively easy for display adapters from the same manufacturer since the manufacturer can fix its own display driver to drive multiple display adapters of the same manufacturer identification. On the other hand using several display adapters from different manufacturers in Windows Vista is not so easy since it is impractical to expect the manufacturers to cooperate to provide a common driver. In Windows Vista the only solution is using multiple XDDM display drivers to drive multiple display adapters from different manufacturers because XDDM does not impose the single driver requirement. However XDDM display drivers do not support the latest WDDM architecture and do not support some latest software such as DirectX 10.

Accordingly the present invention provides a method and a system in a computer system for supporting multiple display devices.

According to an embodiment of the present invention a method for supporting multiple adaptor multiple monitor in a computer system is provided. The method comprises initializing an operating system sending a request from the operating system to a driver wrapper determining an identification of the request by the driver wrapper forwarding the request to a display driver according to the identification and driving a display device to perform the request by the display driver.

In an embodiment of the present invention the initializing step further comprises loading a filter driver intercepting an I O request from the display driver by the filter driver transmitting data related to the identification of the display driver to the driver wrapper and transmitting identification of the driver wrapper to the operating system.

In an embodiment of the present invention the method further comprises storing the data related to the identification of the display driver in the driver wrapper wherein the identification of the request is determined according to the stored data.

In an embodiment of the present invention the identification is a DDI function address a manufacturer ID or a model ID wherein each of the display devices possesses unique identifications.

In an embodiment of the present invention each of the display drivers corresponds to one or more display devices.

According to an embodiment of the present invention a graphics system for supporting multiple display devices is provided. The graphics system comprises a first display driver a second display driver a subsystem of an operating system and a driver wrapper. The first display driver is configured to drive a first display device. The second display driver is configured to drive a second display device. The subsystem of the operating system is configured to send a request. The driver wrapper is configured to determine and dispatch the request according to a function address of the request. The request is forwarded to the first display driver if the function address is determined as corresponding to the first display device and the request is forwarded to the second display driver if the function address is determined as corresponding to the second display device.

In an embodiment of the present invention the driver wrapper is further configured to return response corresponding to the request from the first display driver and or the second display driver to the subsystem of the operating system.

In an embodiment of the present invention the first display driver comprises a first user mode driver and a first kernel mode driver. The second display driver comprises a second user mode driver and a second kernel mode driver. The driver wrapper comprises a user mode driver wrapper and a kernel mode driver wrapper. The user mode driver wrapper is corresponding to the first user mode driver and the second user mode driver. The kernel mode driver wrapper is corresponding to the first kernel mode driver and the second kernel mode driver.

In an embodiment of the present invention the user mode driver wrapper dispatches the request from the subsystem of the operating system to one of the first user mode driver and the second user mode driver and the kernel mode driver wrapper dispatches the request from the subsystem of the operating system to one of the first kernel mode driver and the second kernel mode driver.

In an embodiment of the present invention the first display driver further comprises a first installed client display driver and the second display driver further comprises a second installed client display driver and wherein the driver wrapper further comprises an installed client display driver wrapper corresponding to the first installed client display driver and the second installed client display driver.

In an embodiment of the present invention the installed client display driver wrapper dispatches the request from the subsystem of the operating system to one of the first installed client display driver and the second installed client display driver.

According to an embodiment of the present invention a computer system in multiple adaptor multiple monitor architecture is provided. The computer system comprises an operating system a driver wrapper unit and a graphics driver unit. The operating system is configured to send requests. The driver wrapper unit is coupled to the operating system and is configured to receive the requests from the operating system. The graphics driver unit is coupled to the driver wrapper unit and comprises user mode drivers and kernel mode drivers. The graphics driver unit is configured to receive the request from the driver wrapper unit and process the requests. The driver wrapper unit is configured to dispatch requests from the operating system to the user mode drivers and transmit responses from the user mode drivers to the operating system and is configured to dispatch requests from the operating system to the kernel mode drivers and transmit responses from the kernel mode drivers to the operating system.

In an embodiment of the present invention the computer system further comprises a graphics hardware unit driven by the graphics driver unit. The graphics hardware unit comprises a plurality of display devices. Each of the display devices is driven by a corresponding user mode driver and a corresponding kernel mode driver. The driver wrapper unit dispatches the requests to the user mode driver and the kernel mode driver corresponding to the display device assigned to perform the requests.

In an embodiment of the present invention the driver wrapper unit dispatches requests from a graphics application programming interface of the operating system to the user mode drivers and dispatches requests from a graphics kernel of the operating system to the kernel mode drivers. The driver wrapper unit maintains correspondence of display driver interface function addresses of the requests and the kernel mode drivers.

In an embodiment of the present invention the computer system supports MAMM based on the WDDM architecture of the OS.

In the aforementioned method and system a driver wrapper unit serves as the interface between the OS and the display drivers. The driver wrapper unit hides the display drivers from the knowledge of the OS and provides the standard display driver interface DDI to the OS. In the view of the OS the driver wrapper unit is the single common driver which receives requests from the OS. The driver wrapper unit dispatches the requests from the OS to the display drivers and relays responses of the display drivers to the OS. The driver wrapper unit of the present invention is compatible with display drivers from any manufacturer. Consequently the present invention enables the support of multiple display adapters in the WDDM architecture of the Microsoft Windows Vista operating system wherein the display adapters may belong to different manufacturers and different design models. Moreover the present invention does not require any modification of existing display drivers.

Reference will now be made in detail to the present embodiments of the invention examples of which are illustrated in the accompanying drawings. Wherever possible the same reference numbers are used in the drawings and the description to refer to the same or like parts.

The graphics hardware unit may include multiple display devices. Each of the display devices may be coupled to a display driver respectively in the case that these display devices are from different manufacturers. Therefore the graphics driver unit may include a plurality of display drivers corresponding to the display devices connected thereto respectively. As described above display devices from different manufacturers may require different display drivers in order to work properly with the OS . However the OS can only respond to a single display driver in the case that multiple display drivers exist. In this case the driver wrapper unit functions as a common driver interface between the OS and the multiple display drivers. Accordingly the driver wrapper unit is regarded as the single display driver existing to the OS . In response to requests issued from the OS the driver wrapper unit forwards the requests to a corresponding display driver in the graphics driver unit for processing.

According to an embodiment of the present invention the OS issues a request containing an identification which indicates the display device that the request is directed to. In other words each display device in the graphics hardware unit is assigned with a unique identification. The OS may identify all existing display devices connecting to the computer system and thus issues requests to proper display devices by use of the identification. The driver wrapper unit receives the request sent from the OS and determines which display driver in the graphics driver unit the request should be directed to according to the identification. Once the driver wrapper unit confirms the correct display driver and forward the request the display driver may perform the request so that the corresponding display device can respond to the OS .

According to an embodiment of the present invention some of the display devices in the graphics hardware unit may correspond to the same display driver in the graphics driver unit . For example several display devices of the same manufacturer may be connected to the computer system while the other display devices are from different manufactures in between. Display devices of the same manufacturer may be driven by a common display driver thus the number of the display drivers decreases. However display devices driven by the same display driver still possess unique identification independently. When a request is issued from the OS the driver wrapper unit forward the request to the corresponding display driver according to the identification. In this case several identifications may correspond to the same display driver. The driver wrapper unit may construct a mapping table of identifications to the display devices and the display drivers. While receiving a request the driver wrapper unit determines the identification by use of the mapping table.

While the high level embodiments of the present invention are described above the following illustrates other embodiments in more detail. is a schematic diagram showing a graphics system supporting multiple display devices according to an embodiment of the present invention for example WDDM architecture in particular. Similar as the graphics system according to an embodiment of the present invention comprises application a subsystem of the OS a driver wrapper unit and a graphics driver unit . The graphics system of a computer in general includes two major components the kernel space and the user space as separated by the dotted line. The kernel space interacts with the graphics hardware directly. However the user space is isolated and has no direct access to the graphics hardware such as a graphics adaptor and or a display monitor.

The subsystem of the OS comprises at least a Direct3D D3D runtime library an Open GL runtime library a Windows graphical device interface GDI client dynamic link library GDI DLL and a graphics kernel . The driver wrapper unit comprises at least a user mode display driver UMD wrapper an OpenGL installed client display driver ICD wrapper and a kernel mode display driver KMD wrapper . The graphics driver unit comprises at least a UMD driver an ICD driver and a KMD driver . The graphics kernel KMD wrapper and KMD driver reside in the kernel space while the remaining components reside in the user space. The driver wrapper unit may be installed in the OS for example Microsoft Windows Vista and function as a common display driver. The UMD driver ICD driver and KMD driver may be configured based on the graphics hardware connected to the computer system. Meanwhile the UMD wrapper ICD wrapper and KMD wrapper are configured as interfaces between the UMD driver ICD driver and KMD driver to interact with the subsystem of the OS .

The application may send requests through the OS to the graphics hardware unit via two routes. The OS may comprise application interfaces API such as D3D which belongs to DirectX series or OpenGL to interact with the applications. DirectX is developed by Microsoft while OpenGL is developed by Silicon Graphics Inc. For a request in DirectX it may be forward from the D3D runtime library then sent to the UMD wrapper . As described above the UMD wrapper serves as an interface between the D3D runtime library of the OS and the UMD driver . Once the request is processed by the UMD driver it will trace back through the UMD wrapper then to the D3D runtime library to complete process in the user space. The D3D runtime library then forwards the request to the graphics kernel in the kernel space and eventually to the KMD driver for driving the graphics hardware unit . The KMD wrapper serves as an interface between the graphics kernel and the KMD driver for passing the request.

For a request in OpenGL the request is forward from the OpenGL runtime library through ICD wrapper ICD driver then to GDI DLL . Same as the UMD wrapper the ICD wrapper serves as an interface between the OpenGL runtime library and the ICD driver . Here the GDI DLL serves as an interface between OpenGL and DirectX in order to provide kernel mode access. One of ordinary skill in the art would understand that OpenGL and DirectX including D3D are two distinct standards. OpenGL requests cannot be processed directly in DirectX environment thus an interface like GDI DLL is necessary. Same as D3D request GDI DLL forwards the request from user space to the graphics kernel in kernel space. The graphics kernel further forwards the request to the KMD wrapper then to KMD driver as described above.

According to an embodiment of the present invention the UMD driver ICD driver and KMD driver may comprises multiple drivers corresponding to multiple display devices respectively. For example when two display devices from different manufacturers are connected to the computer system each of the display devices may have corresponding UMD drivers ICD drivers and KMD drivers respectively rather than sharing the same driver. However only one UMD wrapper ICD wrapper and KMD wrapper exist between the subsystem of the OS and the multiple drivers in the display driver unit . The UMD wrapper ICD wrapper and KMD wrapper determine the corresponding display drivers that the request is directed to according to the identification of the request. The identification indicates the corresponding display device. The identification may be for example display driver interface DDI address of the display device.

The driver wrapper unit only provides the standard display driver interface DDI in front of the OS . The actual operation of the request is not carried out directly by the driver wrapper unit but by the underlying display drivers of the graphics driver unit . The driver wrapper unit hides the display drivers from the knowledge of the OS details later . In the view of the OS the driver wrapper unit is the single common driver which receives requests from the OS. The driver wrapper unit dispatches requests from the OS to the display drivers and relays responses of the display drivers to the OS . The driver wrapper unit is compatible with different display drivers from different manufacturers. In this way computer system of the present invention is able to support multiple display devices provided by different manufacturers.

According to an embodiment of the present invention the graphics kernel is a Windows DirectX graphics kernel. The computer system is configured in WDDM architecture. The graphics system may support OpenGL and or DirectX. According to an embodiment of the present invention the OS may be Windows XP Windows Vista or any other operation system that supports MAMM.

Reference is now made to which depicts a schematic diagram showing the flow of dispatching a request in the kernel space according to an embodiment of the present invention. First upon receiving a request from the user space the graphics kernel transmits the request to a KMD Display Driver Interface of the KMD driver wrapper step S . Next the KMD driver wrapper dispatches the operation request according to an identification indicated by the request. The identification may be a DDI address manufacturer ID and or model ID corresponding to a display device. In the embodiment of the KMD driver includes two drivers with different identifications namely the KMD driver A for driving the display device A and the KMD driver B for driving the display device B . If the request is directed to the display device A the KMD driver wrapper dispatches the request to the KMD driver A . Otherwise the KMD driver wrapper dispatches the request to the KMD driver B step S . Each of the display devices A and B may be a stand alone display adapter installed in an expansion slot of the motherboard of a PC an embedded display adapter integrated in the motherboard or any other similar device.

Next the KMD driver A or B controls its corresponding display device A or B to finish the request step S and returns a response to the KMD driver wrapper step S . The KMD driver wrapper returns the response to the graphics kernel step S . In this way the KMD driver wrapper serves a single common driver for the display device A and the display device B in view of the OS.

The UMD driver wrapper and the ICD driver wrapper dispatch requests from the OS in similar ways as that of the KMD driver wrapper . Any person skilled in the art can comprehend the request dispatching of the driver wrapper unit with the understanding of and .

The driver wrapper unit has to know the identification of the underlying graphics hardware before it can dispatch requests from the OS. The identification may be for example DDI address of the graphics hardware. This task is easy for the UMD driver wrapper and the ICD driver wrapper in the user space. The UMD driver wrapper and the ICD driver wrapper may call system functions to get the DDI addresses of the display devices and thus dispatch the requests. For the KMD driver wrapper in the kernel space this task is more complex.

Now return to the flow in . First the filter driver is attached to the graphics kernel step S so that the filter driver can filter out and intercept initialization I O requests from the KMD driver A and or the KMD driver B to the graphics kernel . The filter driver may be attached by calling a system function during start up according to an embodiment of the present invention. In another embodiment of the present invention the filter driver may be installed along with the driver wrapper unit . Yet in another embodiment of the present invention the filter driver may be installed alone or loaded onto the graphics kernel .

Every KMD driver has a corresponding entry function. When the OS starts up it loads the KMD driver and calls its entry function. The entry function in turn calls a system function. The system function sends an I O request to the graphics kernel to transmit the DDI function addresses of the display device to the graphics kernel in order to initialize. Since the filter driver is attached to the graphics kernel to filter out and intercept such initialization I O requests when the KMD driver A is loaded by the OS the DDI function addresses of the display device A are received by the filter driver step S .

Next the filter driver sends the DDI function addresses of the KMD driver wrapper to the graphics kernel so that the KMD driver wrapper serves as the single common driver for receiving requests from the OS step S . Next the filter driver transmits the DDI function addresses of the display device A to the KMD driver wrapper so that the KMD driver wrapper can save the DDI function addresses step S . From this moment the KMD driver wrapper can dispatch requests to the KMD driver A to drive the display device A because the KMD driver wrapper knows the DDI function addresses of the display device A .

As mentioned earlier the KMD driver B is masked to avoid being loaded by the OS. Instead the KMD driver wrapper loads the KMD driver B by calling another system function step S . The process of loading the KMD driver B is similar to the process of loading the KMD driver A . The I O request of the KMD driver B is intercepted by the filter driver and the DDI function addresses of the display device B are received by the filter driver step S . Next the filter driver transmits the DDI function addresses of the display device B to the KMD driver wrapper so that the KMD driver wrapper can save the DDI function addresses step S . From this moment the KMD driver wrapper can dispatch requests to the KMD driver B for driving the display device B because the KMD driver wrapper knows the DDI function addresses of the display device B .

After the DDI function addresses of all the KMD drivers are saved into the KMD driver wrapper the filter driver can be detached from the graphics kernel step S . The flow in terminates here.

According to an embodiment of the present invention both the KMD driver A and the KMD driver B may correspond to one or more display devices. According to another embodiment of the present invention the graphics kernel is a Windows DirectX graphics kernel. The computer system is generally configured in WDDM architecture and the OS may be Windows Vista Windows XP or any other system that supports MAMM. The graphics system may support OpenGL and or DirectX.

It will be apparent to those skilled in the art that various modifications and variations can be made to the structure of the present invention without departing from the scope or spirit of the invention. In view of the foregoing it is intended that the present invention cover modifications and variations of this invention provided they fall within the scope of the following claims and their equivalents.

