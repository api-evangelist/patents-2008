---

title: Translating a relational query to a multidimensional query
abstract: Data stored in relational databases can be retrieved using a relational database query language, while data stored in a multidimensional database is typically retrieved using a multidimensional database query language. However, most users do not have a functional working knowledge of multidimensional database query languages, which leaves large amounts of data inaccessible. Further, while some relational database query languages may be translated into a multidimensional database language, the information generated by such translations is often unusable, or returns large numbers of errors. In order to obtain effective translation of a relational database query language to a multidimensional database query language effective translation and filtering needs to occur. Using effective mapping and retrieval of database metadata along with effective, customizable business logic filtering of query components, more effective and reliable results may be achieved.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08606803&OS=08606803&RS=08606803
owner: Microsoft Corporation
number: 08606803
owner_city: Redmond
owner_country: US
publication_date: 20080401
---
In a computing environment data can be stored in databases with different storage schema. A relational database stores data in tables which is a collection of relations with schema that identifies relationships between columns and rows and various tables. Multidimensional databases can store data in tables but have a high degree of flexibility in the definition of dimensions units and unit relationships with data stored using schema that relates data in time as well as relationships identified by the characteristics of data. Further each database scheme has a different language for querying against the database for example a relational database often uses structured query language SQL while a multidimensional database typically uses a multidimensional expression language MDX .

This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key factors or essential features of the claimed subject matter nor is it intended to be used to limit the scope of the claimed subject matter.

In computing environments data e.g. sales work and production information tracking and storage tools often include customizable collections of fields for storing information about items of interest in a relational database. Further historical data stored in a relational database can be pushed to a multidimensional database e.g. an online analytical processing cube which is often used for data mining and reporting. In order to be useful customizable records should have an ability to be searched by users. A common approach to searching is to have a search capability that utilizes an underlying query language of the relational database e.g. structured query language SQL . Users are often asked to create relational database language queries in order to search and retrieve information of interest to a user. However in order to query a multidimensional database a different query language is provided e.g. multidimensional expressions language MDX than that of a relational database.

Because most database users either have a working knowledge of the relational database query language or programs they use employ a relational database query language to generate reports from database it would be desirable to have a way to translate relational database queries into relevant multidimensional queries.

As provided herein a technique and system for querying a multidimensional database using a relational database query language e.g. SQL such that the relational database queries may be translated into relevant multidimensional database language queries e.g. MDX . The techniques and systems identify individual components for example of an SQL query and then sends them through a business logic filter. In this example the business logic filter applies rules that eliminate certain SQL fields that cannot be effectively translated into MDX queries. Further the amount of data retrieved can be trimmed and data ranges recognized using a customizable process.

Once business logic filtering has been applied for example respective metadata for the SQL query components and work item query language WIQL can be looked up in a metadata store and corresponding MDX query component metadata can be retrieved from the metadata store. In this example with the MDX query component metadata identified respective MDX query components can be generated and arranged into respective MDX queries. Further sets of MDX queries can be generated for current snapshot data and sets of MDX queries for historical trend data can be generated. The MDX queries can be submitted to a multidimensional database to retrieve data corresponding to the SQL query submitted by the user.

To the accomplishment of the foregoing and related ends the following description and annexed drawings set forth certain illustrative aspects and implementations. These are indicative of but a few of the various ways in which one or more aspects may be employed. Other aspects advantages and novel features of the disclosure will become apparent from the following detailed description when considered in conjunction with the annexed drawings.

The claimed subject matter is now described with reference to the drawings wherein like reference numerals are used to refer to like elements throughout. In the following description for purposes of explanation numerous specific details are set forth in order to provide a thorough understanding of the claimed subject matter. It may be evident however that the claimed subject matter may be practiced without these specific details. In other instances well known structures and devices are shown in block diagram form in order to facilitate describing the claimed subject matter.

In computing environments few database users have a functional working knowledge of a multidimensional database language e.g. MDX . This leaves users of multidimensional databases with a few options for performing data mining and reporting in a multidimensional database. A user could hire someone proficient in a multidimensional database language or hire a service for performing necessary operations although this may be too expensive for a user. A user could utilize out of the box reporting tools that may come with the purchase of a multidimensional database system although this often limits the user s reporting ability to that provided by the out of the box tools or the user may abandon the multidimensional database system entirely. A user may elicit a relational database language query e.g. SQL to multidimensional language query e.g. MDX translator for mining and reporting. However current translators may not properly account for situations where portions of the relational database language query cannot be properly translated into a multidimensional language query or where the relational database language query will not return meaningful information from the multidimensional database. Therefore it may be desirable for a user to have the ability to translate a relational database language query into a multidimensional language query that will return results that are meaningful to the user and account for situations where the relational database language query cannot be properly translated into a multidimensional language query.

Embodiments described herein relate to techniques and systems for querying a multidimensional database using a relational database query language e.g. SQL such that the relational database queries may be translated into relevant multidimensional database language queries e.g. MDX .

In an exemplary method begins at and involves identifying relational database query tokens in a relational database query at . After the tokens are identified relevant metadata is identified from a metadata store at for metadata associated with the relational database tokens at and for metadata associated with multidimensional database query tokens at . After relevant metadata has been identified corresponding multidimensional database query tokens are retrieved for the respective identified metadata at . Having retrieved the multidimensional database query tokens one or more multidimensional database queries are generated using the multidimensional database query tokens at . After the one or more multidimensional database queries are generated the exemplary method ends at .

In one embodiment of the method described above relational database queries may be parsed into respective components e.g. fields that make up the relational database query. Respective components can be identified and grouped into buckets that correspond to query component identities or query tokens e.g. operators filter criteria filter fields and results fields . After the respective relational database query tokens have been identified and grouped business logic filtering may be applied to the relational database query tokens which can determine whether the respective tokens can effectively be translated into a corresponding multidimensional database language query e.g. will the token used in the relational database query translate into a usable multidimensional database query or whether the respective tokens will provide useful information when translated into a multidimensional database query e.g. data trimming to target the most meaningful data based on a customizable process guidance . Further the business logic filter may translate the relational database query tokens into work item queries e.g. utilizing work item query language WIQL .

Information associated with the business logic filtered relational database query tokens and work item queries can be used to identify metadata e.g. schema metadata in an XML file stored in a metadata store e.g. metadata can be generated continually updated and stored during creation and use of a relational database that utilizes a multidimensional database for storing historical data and corresponding multidimensional database metadata can be identified from the metadata store. Using the corresponding multidimensional database metadata a list of multidimensional database tokens e.g. filter criteria for a subset of fields that form a filter clause filter values and a subset of fields to be returned in a query result that correspond to the relational database query tokens can be retrieved. The retrieved multidimensional database tokens and respective relationships can be used to generate sets of multidimensional database queries. One set of multidimensional database queries may be generated to retrieve current data e.g. a current snapshot at the time of a query while a second set of multidimensional database queries may be generated to retrieve historical data e.g. a trend snapshot prior to the time of a query . In this embodiment resulting multidimensional database queries may be used by a multidimensional database management system e.g. online analytical processing OLAP cube to extract meaningful data from a data warehouse and display the data to a user.

One example of this embodiment is shown in . In an exemplary method begins at and involves parsing a relational database language query into its respective components at . At relational database language query tokens are identified then arranged into respective buckets containing filter operators filter criteria filter fields and results fields at . At business logic rules are operated upon the relational database query tokens. At relevant metadata is identified from a metadata store for current and trend related multidimensional metadata associated with the relational database query tokens metadata at . After the metadata has been identified corresponding multidimensional database query tokens are retrieved for the respective identified metadata at . At the respective multidimensional database query tokens are arranged according to the respective relational database query metadata e.g. filter operators filter criteria filter fields and results fields and work item query metadata. After the respective multidimensional database query tokens have been arranged sets of multidimensional database a queries for trend historical information and for current information are generated using the multidimensional database query tokens at . Having generated the multidimensional database queries the exemplary method ends at .

In one aspect business logic filtering is applied to relational database queries prior to translating them into multidimensional database queries. This business logic filtering helps make resulting multidimensional database queries more meaningful and the resulting data from a query more useful to a user. The business logic filtering is configured to look at filters and operators used in a relational database query and determine whether they would return useful information against a multidimensional database. As an example certain SQL conditions may not be effectively translated into MDX as they may return a much larger dataset than is useful to a user or are simply not supported by MDX. A data warehouse may have millions of rows so if a query limit is reached information would not be returned. Some examples of conditions filtered by the business logic filter which may not be effectively translated from a relational query language e.g. SQL to a multidimensional database query language e.g. MDX include 

Further the business logic filtering may translate relational database language queries e.g. SQL into work item queries e.g. WIQL due to certain complex operators used in multidimensional database queries. As an example while SQL may be translated into MDX the business logic filter may translate portions of an SQL query into WIQL to account for the complex operators used by MDX. The complex operators in WIQL which are translated from SQL can then be translated into MDX. For example WIQL has an IN GROUP clause that has a similar implementation in SQL but is not exactly the same. The business logic filter can translate WIQL primitives to MDX primitives ensuring that SQL to WIQL primitive mapping semantics are not altered while allowing for use of the complex operators found in MDX.

The business logic filter may also enable data trimming to target the most meaningful data based on a customizable user interface e.g. Team Foundation process guidance . As an example process guidance can provide information about data fields how reports may be generated and various guidelines for data ranges in reports. These guidelines may be used to customize the business logic filter so that for example SQL and WIQL fields are selected or translated to account for the data ranges requested in the process guidance. As an example an iteration in a report may be defined as a 6 week period therefore the business logic filter may perform date based filtering so that historical data generated by an MDX query is limited to 6 weeks. Further a customizable process guidance designated by a user may allow for additional client side filtering performed by the business logic filter for example producing only a top ten report of certain data.

In another aspect a metadata store may contain definitions of schema tables relationships between tables and columns and other information concerning how data is stored and updated in a relational database and relationships to how the data is stored and updated when it is pushed out to a multidimensional database. For example as data is stored and updated on a daily basis in a relational database information on the schema of the database tables columns and their relationships to each other can be stored in order to allow for orderly retrieval and manipulation of the data. Further as data is pushed from the relational database for example to an OLAP cube the schema of the cube can also be stored. Therefore in this example a metadata store can also store information on mapping between the databases in an XML file. In one embodiment when metadata relating to relational database query tokens is identified in a metadata store metadata relating to corresponding multidimensional database query tokens can be identified. Therefore in this example a list of multidimensional database query fields can be retrieved that correspond to fields in the relational database query. After a list of fields in the multidimensional database has been retrieved which correspond to fields in the relational database query e.g. filter criteria for a subset of fields that form a filter clause filter values and a subset of fields to be returned in query results information for generating an equivalent multidimensional database query is available.

In another aspect a relational database query to multidimensional database query translation technique can generate two set of multidimensional queries. A first set of multidimensional queries can be configured to retrieve a current data snapshot e.g. data relevant to a time of the query . A second set of multidimensional queries can be configured to retrieve an historical data trend e.g. a trend of data within a specified period of time prior to the time of the query . The queries in the first and second sets can be complimentary for example where each current snapshot query has a corresponding historical trend query. Respective sets of queries may be generated from a same set of relational database query tokens however the historical trend query includes a date range. Therefore the historical trend query returns data for a specified date range instead of data relevant to the time of the query. Further for example the date range can be customizable. The date range can be stored a configuration store which can be modified by a user.

A system may be configured for querying a multidimensional database using a relational database query language e.g. SQL such that the relational database queries may be translated into relevant multidimensional database language queries e.g. MDX . is a block diagram illustrating an exemplary system for translating a relational database language query into one or more relevant multidimensional database language queries. In a relational database query is sent to a relational database query token identifier . The relational database query token identifier identifies respective components of the relational database query and breaks the components into respective query tokens . A business logic operator operates upon the identified query tokens by applying business logic rules to determine which of the respective tokens will be able to retrieve relevant multidimensional database data. Information associated with the applicable query tokens is sent to a metadata retriever which calls to a metadata storage component to retrieve respective multidimensional database metadata corresponding to applicable query tokens. Information associated with multidimensional database metadata corresponding to applicable query tokens is sent to a multidimensional database query token retriever which retrieves multidimensional database query tokens corresponding to metadata information sent from the metadata retriever . Information associated with the retrieved tokens are sent to a multidimensional database query generator which generates one or more a multidimensional database queries .

One example of this system is illustrated by an exemplary system in . A structured query language SQL query is sent to a SQL query parser that parses the query into respective components. A SQL query token identifier receives the query components identifies the respective components by their particular characteristics and places each token into respective buckets for filter fields filter criteria result fields and operators. A business logic operator which also contains a work item query language WIQL operator applies rules to the bucketed SQL tokens from the SQL query token identifier . The business logic operator can determine which of the SQL query tokens will produce relevant data from a multidimensional database. Information from applicable SQL tokens and WIQL query items is sent to a metadata retriever which calls to a metadata storage component to retrieve respective multidimensional database metadata corresponding to metadata associated with the SQL tokens . Retrieved metadata is sent to a multidimensional expression language MDX token retriever which retrieves corresponding MDX tokens for the respective metadata which arranges the MDX tokens according to the respective relational database query metadata e.g. filter operators filter criteria filter fields and results fields and work item query metadata. The arranged MDX tokens are sent to a MDX query generator which generates a MDX query for current data from a multidimensional database and a MDX query for historical e.g. trend data from a multidimensional database.

In one embodiment of the techniques and systems described herein a user may interact with a multidimensional database through a graphical user interface GUI on a computer system configured to utilize a relational database query language. As an example the user may query the multidimensional database without knowing how to write a query in the relational database query language. In this example a GUI may prompt the user to enter query related information then an underlying application can generate an SQL query and forward the query to systems configured to query the multidimensional database using a SQL query language such that the SQL query is translated into one or more relevant MDX queries. illustrates an example of this embodiment. A user enters query criteria into a graphical user interface GUI on a computer system . The GUI sends the query criteria to a SQL generator which generates a SQL query based on the query criteria entered by the user . The SQL query is sent through a method which generates corresponding MDX queries for current e.g. snapshot data and historical e.g. trend data . These MDX queries are sent to the multidimensional database management system e.g. an online analytical processing cube which processes the queries against data stored its system. Data generated by the MDX queries is sent from the multidimensional database management system back to the computer system which displays the requested information on the GUI for the user to use e.g. see .

Another embodiment which may include one or more of the variations described above involves a computer readable medium comprising processor executable instructions configured to apply one or more of the techniques presented herein. An exemplary computer readable medium that may be devised in these ways is illustrated in wherein the implementation comprises a computer readable medium e.g. a CD R DVD R or a platter of a hard disk drive on which is encoded computer readable data . This computer readable data in turn comprises a set of computer instructions configured to operate according to the principles set forth herein. In one such embodiment the processor executable instructions may be configured to perform a method for generating a multidimensional database query from a relational database query such as the exemplary method of for example. Many such computer readable media may be devised by those of ordinary skill in the art that are configured to operate in accordance with the techniques presented herein.

Although not required embodiments are described in the general context of computer readable instructions being executed by one or more computing devices. Computer readable instructions may be distributed via computer readable media discussed below . Computer readable instructions may be implemented as program modules such as functions objects Application Programming Interfaces APIs data structures and the like that perform particular tasks or implement particular abstract data types. Typically the functionality of the computer readable instructions may be combined or distributed as desired in various environments.

In other embodiments device may include additional features and or functionality. For example device may also include additional storage e.g. removable and or non removable including but not limited to magnetic storage optical storage and the like. Such additional storage is illustrated in by storage . In one embodiment computer readable instructions to implement one or more embodiments provided herein may be in storage . Storage may also store other computer readable instructions to implement an operating system an application program and the like. Computer readable instructions may be loaded in memory for execution by processing unit for example.

The term computer readable media as used herein includes computer storage media. Computer storage media includes volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions or other data. Memory and storage are examples of computer storage media. Computer storage media includes but is not limited to RAM ROM EEPROM flash memory or other memory technology CD ROM Digital Versatile Disks DVDs or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can be accessed by device . Any such computer storage media may be part of device .

Device may also include communication connection s that allows device to communicate with other devices. Communication connection s may include but is not limited to a modem a Network Interface Card NIC an integrated network interface a radio frequency transmitter receiver an infrared port a USB connection or other interfaces for connecting computing device to other computing devices. Communication connection s may include a wired connection or a wireless connection. Communication connection s may transmit and or receive communication media.

The term computer readable media may include communication media. Communication media typically embodies computer readable instructions or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term modulated data signal may include a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal.

Device may include input device s such as keyboard mouse pen voice input device touch input device infrared cameras video input devices and or any other input device. Output device s such as one or more displays speakers printers and or any other output device may also be included in device . Input device s and output device s may be connected to device via a wired connection wireless connection or any combination thereof. In one embodiment an input device or an output device from another computing device may be used as input device s or output device s for computing device .

Components of computing device may be connected by various interconnects such as a bus. Such interconnects may include a Peripheral Component Interconnect PCI such as PCI Express a Universal Serial Bus USB firewire IEEE 8394 an optical bus structure and the like. In another embodiment components of computing device may be interconnected by a network. For example memory may be comprised of multiple physical memory units located in different physical locations interconnected by a network.

Those skilled in the art will realize that storage devices utilized to store computer readable instructions may be distributed across a network. For example a computing device accessible via network may store computer readable instructions to implement one or more embodiments provided herein. Computing device may access computing device and download a part or all of the computer readable instructions for execution. Alternatively computing device may download pieces of the computer readable instructions as needed or some instructions may be executed at computing device and some at computing device .

Various operations of embodiments are provided herein. In one embodiment one or more of the operations described may constitute computer readable instructions stored on one or more computer readable media which if executed by a computing device will cause the computing device to perform the operations described. The order in which some or all of the operations are described should not be construed as to imply that these operations are necessarily order dependent. Alternative ordering will be appreciated by one skilled in the art having the benefit of this description. Further it will be understood that not all operations are necessarily present in each embodiment provided herein.

Although the subject matter has been described in language specific to structural features and or methodological acts it is to be understood that the subject matter defined in the appended claims is not necessarily limited to the specific features or acts described above. Rather the specific features and acts described above are disclosed as example forms of implementing the claims.

As used in this application the terms component module system interface and the like are generally intended to refer to a computer related entity either hardware a combination of hardware and software software or software in execution. For example a component may be but is not limited to being a process running on a processor a processor an object an executable a thread of execution a program and or a computer. By way of illustration both an application running on a controller and the controller can be a component. One or more components may reside within a process and or thread of execution and a component may be localized on one computer and or distributed between two or more computers.

Furthermore the claimed subject matter may be implemented as a method apparatus or article of manufacture using standard programming and or engineering techniques to produce software firmware hardware or any combination thereof to control a computer to implement the disclosed subject matter. The term article of manufacture as used herein is intended to encompass a computer program accessible from any computer readable device carrier or media. Of course those skilled in the art will recognize many modifications may be made to this configuration without departing from the scope or spirit of the claimed subject matter.

Moreover the word exemplary is used herein to mean serving as an example instance or illustration. Any aspect or design described herein as exemplary is not necessarily to be construed as advantageous over other aspects or designs. Rather use of the word exemplary is intended to present concepts in a concrete fashion. As used in this application the term or is intended to mean an inclusive or rather than an exclusive or . That is unless specified otherwise or clear from context X employs A or B is intended to mean any of the natural inclusive permutations. That is if X employs A X employs B or X employs both A and B then X employs A or B is satisfied under any of the foregoing instances. In addition the articles a and an as used in this application and the appended claims may generally be construed to mean one or more unless specified otherwise or clear from context to be directed to a singular form.

Also although the disclosure has been shown and described with respect to one or more implementations equivalent alterations and modifications will occur to others skilled in the art based upon a reading and understanding of this specification and the annexed drawings. The disclosure includes all such modifications and alterations and is limited only by the scope of the following claims. In particular regard to the various functions performed by the above described components e.g. elements resources etc. the terms used to describe such components are intended to correspond unless otherwise indicated to any component which performs the specified function of the described component e.g. that is functionally equivalent even though not structurally equivalent to the disclosed structure which performs the function in the herein illustrated exemplary implementations of the disclosure. In addition while a particular feature of the disclosure may have been disclosed with respect to only one of several implementations such feature may be combined with one or more other features of the other implementations as may be desired and advantageous for any given or particular application. Furthermore to the extent that the terms includes having has with or variants thereof are used in either the detailed description or the claims such terms are intended to be inclusive in a manner similar to the term comprising. 

