---

title: Framework for computing device with auxiliary display
abstract: A computer system with an architecture and protocol that facilitate ready integration with an auxiliary display device. The auxiliary display device is coupled to the computer system over a transport, such as Bluetooth, USB or TCP/IP. From an application level gadget, control of the display device is through a programming interface to a platform component. The platform component interfaces with a device driver, which has two components. One component is common and can be used with any auxiliary display device supporting the protocol, regardless of which transport is used. The second component is transport specific. The second component processes data streams representing packets according to the protocol, conveying the packets as data in accordance with the format of the transport. The second component may be simple because it is not required to perform any processing specifically associated with the display functions or protocol.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08365202&OS=08365202&RS=08365202
owner: Microsoft Corporation
number: 08365202
owner_city: Redmond
owner_country: US
publication_date: 20080204
---
Computing devices have long used displays to present information to users of the devices. In early computers monitors using cathode ray tubes were used to create displays. The computing device controlled the information on the display by writing information to a display controller which was inside the computing device. The display controller then generated analog signals to cause the monitor to display the required information.

The display controller was a hardware component connected to the monitor through a cable and interfacing to other components of the computing device over a standardized bus within the computing device. The display controller was controlled by a software component called a display driver. In some instances the display driver was written for a specific monitor but in many instances a display controller could generate required control signals for a monitor using a standard display driver.

More recently smaller and lower power display devices have been used as computer monitors. For example TFT and LCD monitors are widely used instead of cathode ray tube monitors. Though implemented with different technology the basic hardware and software architecture of a computer system using a TFT or LCD monitor is the same as for a computing device using a cathode ray tube monitor.

Smaller and lower power display devices have also enabled other forms of user displays instead of or in addition to traditional computer monitors. Some computing devices incorporate auxiliary displays that may be used to present information to a user on small displays close to a point of use or in ways other than through a traditional monitor. As one example a laptop computer may be equipped with a auxiliary display on an external surface. Such an auxiliary display can be used to present information to a user when the laptop is closed and the main display is not available.

Auxiliary displays may also be incorporated in devices detached from the core computing device. Printers and keyboards may include auxiliary displays. These auxiliary displays may be used for functions such as displaying thumbnails of documents about to be printed or to indicate special functions mapped to keys on the keyboard. Also devices that can communicate wirelessly with a computing device may have displays that can serve as auxiliary displays for a computing device. For example a Personal Digital Assistant PDA may have a display that can be used as an auxiliary display for a computing device.

Consequently to communicate with an auxiliary display device a computing device may need to communicate over any of multiple transports. For example if the auxiliary display is part of a device that is physically connected to the computing device that device may communicate with the computing device over a Universal Serial Bus USB . Alternatively if the auxiliary display is part of a portable electronic device that device may communicate with the computing device over a wireless transport such as Bluetooth.

To aid in the use of auxiliary displays computing devices may be equipped with a platform that provides a mechanism for application programs to interface with a device containing an auxiliary display. Such a platform may provide some common functions and services useful in communicating with auxiliary display auxiliary display devices. Such a framework may be provided for example in some versions of the Microsoft s Windows Vista operating system. The framework is referred to as the SideShow framework.

To reduce the complexity of creating drivers for each device controlled through the SideShow framework that framework uses a known communication framework to enable applications executing on a computing device to send commands to a device with an auxiliary display and receive notifications of events from such a device. As an example the .NET microframework may be used as a mechanism for a computing device to exchange information with a device with an auxiliary display. However use of this framework requires firmware customized to the device to enable the .NET framework to execute on the device.

To simplify integration of an auxiliary display into a computer system including a computing device a framework within the computing device may be provided to facilitate programming of the computing device to interface with the display devices. The framework may interface with application program components executing on the computing device so that those application components may access functions or other services provided by the framework. The framework interacts with a driver that can send or receive display related information over a transport connecting the computing device and the display device. By accessing the driver through the framework the application components on the computing device can exchange information with the display device. The exchanged information may include commands to the display device initiated by the application components event notifications initiated by the display device or responses to such commands or event notifications.

To facilitate interfacing the computing device with multiple types of devices providing auxiliary displays the driver may include separate components including a common driver component and a transport specific driver component. The transport specific driver portion implements a simple interface that supports a limited number of commands such as read and write. The common driver component translates between a format used by the framework to represent display related information and a data stream that may be processed by a simple transport specific driver.

Because the transport specific driver implements only a few commands it may be readily implemented facilitating use of auxiliary display devices with computing devices within the framework. Extensive functionality for the auxiliary device may be provided despite this simple interface through the representation of display related information as packets. Each packet may represent an interaction between an application component and the auxiliary display device. Packets may be simply converted into data streams for easy transmission by a simple transport specific driver.

The transport specific driver passes such data streams between the common driver component and an underlying transport which can transmit or receive the data stream representing a packet in its native format.

On the auxiliary display device data streams can likewise be transmitted and received by a transport. An endpoint component on the display device may generate and process such data streams based on a packet protocol defined for communication between application components and the display device. The endpoint may modify its display based on received packets representing commands or generate packets representing responses to those commands or representing events such as user input. By making the supported packet types and packet formats widely known auxiliary display devices can readily interfaced to a computing device.

The inventors have appreciated that a more desirable user experience may be provided for users of computing devices by facilitating the use of auxiliary displays. By providing a simple mechanism for interfacing an auxiliary device with a computing device independent hardware vendors and computer system manufacturers are more likely to provide auxiliary display devices. Independent Software vendors are more likely to provide application components that provide useful and interesting display functions.

These benefits may be promoted by including in the computing device a platform to provide functions and services for application components that interface to a user through an auxiliary display. The platform may provide an interface to application components such as gadgets that interface to a user through an auxiliary display device. The platform may also provide a simple mechanism for auxiliary display devices to interface with the computing device over readily available transports.

A framework according to embodiments of the invention may be incorporated into any suitable type of computing device. An example of such a computing device is illustrated in . illustrates laptop . Laptop may be a laptop computer with a display as is known in the art. Such a display may be implemented as a panel made with thin film transistors TFT or in any other suitable way.

In the embodiment illustrated laptop computer has a clamshell design allowing computer to be placed in an open or closed position. In laptop is illustrated in an open position. In the open position display is visible to a user of laptop . Other input output devices may also be available to the user. For example a keyboard not numbered may be incorporated in laptop and made available to a user viewing display with laptop in the open position.

Laptop also may be placed into a closed configuration such as for ease of transport by a user. illustrates a closed configuration of laptop . In this configuration the portion of the case of laptop containing display is folded into the portion of the case containing the keyboard. In this configuration display is not visible to a user and the input output devices such as the keyboard that may be used in the open configuration are no longer accessible to a user.

In the embodiment illustrated in laptop contains an auxiliary display illustrated as display . Display is visible when laptop is in the closed configuration. Display may be used by a processor within computer to present information to a user even when laptop is in a closed configuration. For example an application program installed on laptop may maintain a calendar for a user of laptop . Such a program may display information on a user s calendar such as upcoming meetings or scheduled tasks. When laptop is closed such information may be of interest to a user.

Calendar information is just one example of information that may be presented on display . The type of information presented on display is not a limitation on the invention and any suitable information may be presented. Moreover an auxiliary display may be positioned in any suitable location. Accordingly display may be used to display that information when laptop is closed.

For example the auxiliary display though coupled to a processor within laptop computer need not be physically integrated with laptop . illustrates an embodiment in which a display device is separate from laptop . In the embodiment of a display on a portable electronic device may be used as an auxiliary display for application components executing on laptop . In the example illustrated display on personal digital assistant PDA may serve as an auxiliary display for application components on laptop . In this example information is conveyed over a wireless transport that allows application components executing on laptop computer to control display . Transport may be any suitable wireless transport such as Bluetooth. However the specific transport over which information is conveyed between laptop computer and PDA is not a limitation on the invention and any suitable wired or wireless transport may be used.

In the embodiment of FIG. IC display also has an input mechanism associated with it. In this example a user viewing display may use a stylus to select active objects on display or otherwise provide input. In this example display includes a touch sensitive screen such that the position at which stylus contacts display signifies an input. Touch sensitive displays and other known input mechanisms may be included in auxiliary display devices. However any suitable input mechanism may be used.

Regardless of the specific input mechanism used PDA communicates user input over transport to application components on laptop computer . Current computing devices are frequently constructed with one or more transports. For example laptop computers and other computing devices frequently include network connections for Bluetooth networks TCP IP networks and universal serial bus USB networks. One or more transports are available in a computing device to connect an auxiliary display device to a processor and the specific transport used is not critical to the invention.

According to embodiments of the invention a computing device may be equipped with a software architecture that facilitates use of one of multiple transports to couple an auxiliary display to application components generating information to present to a user on the display or receiving input from the user associated with the display. illustrates an architecture that supports integration of a display device with a computing device over a transport . In the embodiment illustrated transport is a TCP IP transport but the architecture supports Bluetooth USB and other transports.

Computing device may be any suitable computing device such as laptop and the specific form of computing device is not critical to the invention. Display device also may be any suitable display device such as PDA . However it is not necessary that the display device be physically separate from computing device and display device may be a device physically integrated with computing device such as display .

In the embodiment illustrated known components of computing device and display device are not expressly shown for simplicity. In the example of computing device is not illustrated as having a computer monitor. A computer monitor or other display may be provided in addition to display provided by display device . In such an embodiment display device may display information in addition to that presented on the monitor or other display or may display information only when the other display is not used. However in some embodiments display device may provide the only available display for computing device . Accordingly as used herein an auxiliary display signifies a display device coupled to computing device over a transport and does not necessarily indicate that the display is one of multiple displays or of lesser importance than other displays accessible to computing device .

However the specific functions and implementation of the application components that generate information for display and respond to notifications of events are not critical to the invention. Any suitable components performing any suitable functions may be used. Also illustrates three application components. The number of application components is also not a limitation on the invention.

Regardless of the form and function of the application components a mechanism may be provided within the operating system of computing device to convey information from the application components to display device and to convey notifications of events from display device to the application components. In the embodiment illustrated those operating system components include a platform component and a driver . Platform component may be a software component implemented using techniques as is known in the art. In the example illustrated platform component provides an application programming interface API through which gadgets A B and C may interface with platform component . Through API gadgets may send information for display on display and otherwise provide commands that may control the operation of display device . Additionally API provides a mechanism through which gadgets A B and C may receive notifications of events reported by display device and receive information in response to commands issued by gadgets A B and C.

The type of commands and event notifications supported by API is not critical to the invention. A specific example illustrating the types of commands and notifications that are supported is provided below. Regardless of the specifics the collection of commands and notifications defines a protocol with which an application component may interact with an auxiliary display such as display device . According to embodiments of the invention an operating system vendor may make the protocol supported by API known to application developers. In this way any independent software vendor ISV may provide gadgets that can interface with display device or other auxiliary display associated with computing device .

Regardless of the form of API platform component receives commands through API and invokes driver to communicate those commands to display device . In reverse platform component may receive from driver information initiated from display device . That information may be a response to a command or may signify an event detected by display device for which it has been programmed to notify one of the gadgets A B or C.

Accordingly platform component shares an interface with driver through which such information may pass. In the embodiment illustrated driver is implemented with IOCTL interface . With an IOCTL interface each command response or other event is represented by IOCTL values. The IOCTL values communicate the type of command response or other event and any associated parameters. For example a command to display information may be represented by an IOCTL value and associated parameters defining the information to display and its format. In contrast a notification from display device that user input has been received may be represented by a different IOCTL value and may have different parameters identifying the nature of the input and a specific application component for which the input is directed. However the specific format of the interface between platform component and driver is not critical to the invention and any suitable form of interface may be used. Also it is not critical that communications to device be in the same form as communications from device . For example a communication from the device may cause driver to post an event to which platform component responds to retrieve information sent by device . Such an interface is used in drivers called PnP drivers as is known in the art and may alternatively be employed in some embodiments of the invention.

In the embodiment of driver is implemented with a common component and a transport specific portion. The common component may provide functions applicable regardless of the specific transport used to communicate with display device . The transport specific portion may be selected based on a specific transport in use.

In the example of the common portion is provided by common driver component . The transport specific portion is provided by a transport driver such as one of transport drivers A B C and D. In some embodiments a single transport driver may be present to facilitate communication over the specific transport used to link computing device and display device . In other embodiments multiple transport drivers may be present within the operating system of computing device . Accordingly driver may additionally contain one or more sources of information to identify a specific transport driver A . . . D for use in configuring driver for communication with a specific display device .

In the embodiment illustrated an initialization file INF may be associated with driver . Initialization files are known in the art and represent a mechanism that may be used to configure driver for communication with display device . A property store may also be associated with driver . The property store may contain information that may be accessed by common driver component to obtain executable code that implements a selected one of the transport specific drivers A . . . D and an identifier that may be used by the common driver component to access the transport specific driver. In the example of transport specific driver A has been selected and interfaces with common driver component through an interface A. When common driver component sends or receives data over transport it performs these functions by interfacing with transport specific driver A through interface A.

In the illustrated embodiment each of the transport specific drivers may be implemented as an object according to the common object model COM . Accordingly an identifier within store may be a CLSID associated with the specific transport driver which allows common driver component to interface with any selected transport specific driver. The information in INF file and store provides a mechanism for common driver component to interface with any of the transport specific drivers even if not initially implemented in conjunction with the common driver component. For example each of the transport specific devices A . . . D may have a COM interface such as interface A . . . D which allows common driver component to interface with any selected driver. In this way a manufacturer of display device may provide a transport specific driver in conjunction with information for INF file and store that allows common driver component to interface with display device . A transport specific driver may be readily supplied by an independent hardware vendor IHV that provides display device for use in conjunction with computing device .

In the embodiment illustrated the software architecture enables a transport specific driver to be implemented with simple functionality. In the embodiment illustrated common driver component may internally process information representing each interaction between an application component and a display device as a data stream. To send a command to display device common driver component writes a data stream to transport specific driver A. Transport specific driver A transmits that data over transport using the format of transport defined for data transmission. No special formatting is required even though the data stream may represent a command that ultimately changes the content on display . For responses or other event notifications generated on display device transport specific driver A needs only receive a data stream over transport and provide the data stream to common driver component . Even though the data stream may represent a response or other event notification transport specific driver A may be a simple driver and does not need to be coded to perform functions based on a specific response or notification received.

Accordingly the interface between common driver component and transport specific driver A may be a relatively simple interface. In one embodiment interface A may support only a read and a write command. A write command through interface A may allow common driver component to convey to display device a data stream representing a command. A read command through interface A may allow common driver component to receive a response or other event notification from display device .

Common driver component may translate between IOCTL values received through IOCTL interface and data streams provided through interface A. Likewise common driver component may translate between data streams read through interface A and IOCTL values provided to platform component through IOCTL interface . Any suitable mechanism may be used within common driver components to make these translations between data streams and IOCTL values.

In the embodiment illustrated such translations may be based on a defined display packet protocol. Interactions between gadgets A . . . C and display device may be represented by packets. Each packet may have a format defined according to the protocol. The protocol may define one or more fields for each packet. The position of specific bits of information within a data stream may define the field of the packet with which those data bits are associated. In this way devices operating according to the display packet protocol may either generate or interpret data streams representing packets. An example packet format is given below in conjunction with and a specific example of a protocol is provided below.

Common driver component may translate between IOCTL values and packets in any suitable way. For example common driver component may contain a look up table or other suitable data structure for mapping between IOCTL values and packets. However the specific mechanism used to translate between IOCTL values and data streams representing packets is not critical to the invention.

A display packet protocol may additionally describe other aspects of communications between application components and a display device. For example aspects of the display packet protocol may be state based. In such a scenario the display packet protocol may define allowable state transitions.

In some embodiments an additional function of common driver component may be to maintain state information to correctly implement state transitions. As one example communications according to a defined protocol may entail a device receiving a packet to generate an acknowledgement packet. The acknowledgement may indicate either that the packet was successfully received called an ACK or that the packet was not successfully received called an NACK. In this embodiment common driver component may maintain state information indicating packets transmitted that have not been acknowledged. In response to a NACK related to a packet common driver component may provide a data stream to transport specific driver A causing it to retransmit the packet. Alternatively common driver component may use state information to notify an application component that a specific communication was not successfully completed allowing the application program to respond appropriately.

As another example common driver component may use state information to generate a synchronization packet called a SYNC packet. A SYNC packet may contain data in fields indicating to the recipient device to ignore any partially completed communications. Such a packet for example may be useful in which display is transmitted to display device using multiple packets. In such a scenario common driver component may maintain state information indicating which portions of the data have been transmitted and may sequentially generate packets containing portions of the data until all of the data has been successfully transmitted. If common driver component detects an error in transmission during such a transaction involving multiple packets common driver component may issue a SYNC packet. Display device may be programmed to respond to a SYNC packet received during a multi packet transaction by ignoring any packets or portions of packets associated with the multi packet transaction that it has previously received. Common driver component may then restart transmission of the data.

The specific format of packets used to represent transactions between a computing device and display device is not critical to the invention. However a specific example of the packets according to an exemplary protocol is provided below.

Regardless of the specific protocol in use display device may be constructed to receive and generate data streams containing data formatted as packets according to the protocol. In the embodiment illustrated display device contains a device side transport driver . In this embodiment display device may be specifically constructed to operate over transport . Accordingly a single device side transport driver is illustrated. However the number and type of transports over which device may operate is not a limitation on the invention. Accordingly display device may contain one or more device side transport drivers though a single device side transport driver is shown for simplicity.

As with transport specific driver A device side transport driver may be configured to send and receive data streams over transport . In the embodiment illustrated each of the data streams received is provided as a packet to Endpoint . Endpoint represents a software component that controls functioning of display device . The specific functions performed by Endpoint may depend on the nature of display device . However in the embodiment illustrated Endpoint receives data streams representing packets defining commands and alters display in response to those commands.

Additionally Endpoint may generate data streams using the packet format for responses to commands executed by Endpoint . Endpoint may provide such data streams to device side transport driver for communication over transport . Within computing device such data streams may be received through transport specific driver A and read by common driver component through interface A. As described common driver component may process those received data streams so that the responses are provided to the appropriate gadgets A . . . C.

Additionally endpoint may receive user input or other indications of events associated with display device . In response endpoint may generate data streams formatted as packets representing event notifications. Those data streams may similarly be conveyed over transport for processing within common driver component .

Endpoint otherwise may perform functions that support communication according to the defined display packet protocol. In embodiments in which display device receives acknowledgements of packets it sends or may initiate multi packet transactions endpoint may maintain state information similar to common driver component . Endpoint may respond to ACK and NACK packets in the same way as common driver component . Additionally if display device may initiate multi packet transactions endpoint may issue SYNC packets in the same way as common driver component .

It should be appreciated that illustrates one embodiment of partitioning of software that performs functions associated with communications between application components and an auxiliary display device. Any suitable partitioning of functions may be used. For example the functions attributed to device side transport driver and endpoint may be performed in a single component. Similarly functions associated with endpoint may alternatively be implemented in device side transport driver and vice versa.

Regardless of the specific implementation of the software components the components may interact to perform a process of sending a command to a display device. Process begins at block where a gadget initiates a command to the display device. The nature of the command initiated by a gadget may depend on the function implemented by the gadget. In the example in which an auxiliary display is used to depict reminders of upcoming events the gadget may initiate a command to cause text describing an upcoming event to be presented on the display. However by facilitating the integration of auxiliary displays with computing devices many functions may be implemented using auxiliary displays. For example an auxiliary display may present information depicting controls for an audio visual device. As one example a command initiated at block may indicate to a display device to present a volume control or volume level information to a user.

Regardless of the nature of the command initiated at block processing may proceed to block . At block the gadget may call platform component through API to initiate transmission of the command to the display device.

At block platform component may generate IOCTL values representing the command and any relevant parameters. These IOCTL values may be passed to common driver component through IOCTL interface . Upon receipt of the IOCTL values common driver component may generate a packet with fields according to a defined packet protocol. The IOCTL values received by common driver component may be translated to specific values in the fields of the packet. This packet may then be represented as one or more data streams as a result of processing at block .

At block the common driver component may write the data stream or streams generated at block to a transport specific driver. The transport specific driver may be selected to match the transport used to communicate with the display device. In the embodiment illustrated in a transport specific driver is selected by instantiating a COM object based on information in INF file and store . Regardless of the specific transport driver A . . . D used the driver will present a corresponding interface A . . . D respectively to common driver component . Because each of the transport specific drivers is encoded to implement the same COM interface upon writing to that interface at block the write command will be directed to the selected transport specific driver. However any suitable mechanism may be used for selecting a transport specific driver at block and providing a data stream to it.

The process continues to block where the transport specific driver transmits the data stream to device side transport driver using transport . In the embodiment illustrated the data stream is formatted for communication according to the protocol used by transport . At block the device side driver provides the data stream to endpoint . At block the endpoint sends an acknowledgement indicating that it received the packet. Thereafter at block the endpoint performs processing in accordance with the command indicated in the packet.

Regardless of the nature of the event represented in a data stream processing proceeds to block where endpoint calls a device side driver to send the data stream. At block the device side driver transmits the data stream over transport . Communication over transport may be in accordance with a known protocol for transport with the data stream represented as data associated with a transmission over transport .

At block the transport specific driver A within computing device receives the transmission over transport . At block common driver component reads the data stream from transport specific driver A through interface A. Any suitable mechanism may be used to trigger common driver component to read the data through interface A. For example common driver component A may poll interface A to determine whether transport specific driver A has received data. Alternatively transport specific driver A may use a notification scheme to indicate to common driver component that it has received data. Such a notification scheme may be implemented as is known in the art or in any other suitable way.

At block common driver component generates an appropriate acknowledgement message. In scenarios in which the received data stream can be correctly formatted as a packet according to the protocol in use for communications between computing device and display device common driver component sends an ACK. In scenarios in which the data stream received does not represent a valid packet common driver component may send a NACK and the process of may terminate or otherwise be diverted to an error handling routine.

Once common driver component has successfully read the data stream common driver component creates values representing the event described in the data stream. The common driver component creates a PnP Event rather than an IOCTI here. See updated block . At block common driver component creates a PnP event platform component to obtain the values representing the event. At block platform component provides notification of an event to a gadget targeted by the event notification. The notification may be provided through API using a format as is known in the art. However any suitable mechanism may be used to convey an event notification to a gadget or other application component.

Regardless of the specific mechanism used to notify the gadget of the event the gadget processes the event at block . Processing at block may be in any suitable form and may depend on the nature of the event notification.

In process and process commands responses and other event notifications are represented as packets according to a defined protocol. Any suitable packet format may be used in protocols according to embodiments of the invention. illustrates a packet with a format according to an embodiment of the invention. In the example illustrated packet includes a header and a data portion . In the example illustrated header contains two fields fields and . Field contains data indicating the size of the packet. In the described embodiment each packet regardless of type has a header of a fixed size. Accordingly the value in field may indicate the size of only data portion . However any suitable encoding may be used for values within field .

Field includes a value defining a packet type. The type associated with a packet may signify actions to be taken by the device receiving the packet. The type may for example identify the packet as a command a response or an event notification.

Different types of packets may have different numbers and sizes of fields associated with them. Packet is shown to have multiple data fields and . . . In this example packet represents a response that may be generated by a display device processing a get application order command. Accordingly the values in fields and . . . convey information about applications and the order of those applications recognized by the display device. For example illustrates multiple gadgets A . . . C each of which may communicate with display device . Display device may track gadgets with which it is in communication so that it may direct notifications of events to the appropriate gadget. Additionally the display device may maintain an order of application components which may be used in controlling the configuration of information on the display. For example when multiple application components generate information for display the display device may layer the information in accordance with the order of the devices resulting in information generated by higher order devices being overlaid on information generated by lower order devices. Packet may also identify an order associated with applications.

In this example field contains a value indicating the total number of applications that have been added to the device. In the example illustrated N applications have been added to the device. Accordingly N fields . . . are included within packet . Each of the fields . . . identifies using a unique identifier one of the applications added to the device. The applications may be identified in these fields in accordance with their order.

Packet has a data portion representing one type of packet. Other types of packets may have data portions with different numbers of fields containing information appropriate for other types of packets. In some embodiments each packet regardless of type will have a header with fields as indicated in header . However packets may be formatted in any suitable way.

Regardless of the format of the packets used to communicate display information the packets may be communicated over a transport. Communications over a transport may be in accordance with the protocol defined for the transport. illustrates a transport packet as an example of a format that may be used for communications over a transport. In this example transport packet includes a header and a data portion . Header may be in a format defined by the specific transport. Accordingly a TCP IP transport has a header in a different form than a packet communicated over a Bluetooth or USB transport. Likewise transport packets formatted for different transports may have different size data portions. However regardless of the size of data portion the data portion may accommodate a stream of data.

Regardless of the specific format for communications over a transport used to interconnect a computing device with a display device illustrates that the transport may be used to communicate display information. In a display packet such as packet has been encapsulated in transport packet . Display packet is encapsulated in transport packet by representing display packet as a data stream stored in the data portion of transport . However any suitable mechanism may be used to encapsulate display packet for communication over a transport.

The following provides a specification for packets according to an example packet protocol. In this example packets conveying display information are referred to as SideShow packets.

In the example below packet types are defined. The packet types collectively supported by the protocol represent the types of commands responses and notifications supported by the protocol. In the embodiment of API may be configured to support communication of each of these commands responses or notifications. Similarly IOCTL interface may be configured to support each type of command response or notification.

All packets have a common header that contains the packet type a packet number and the size of the packet 

Each type of SideShow packet is assigned a packet type number. The packet header contains this number. Packet numbers are a four byte value where the high byte is a bitfield that indicates response packets. The bitfield is defined as 

Bit seven is set if this packet is a response packet to a command. Bit six is set if the response is a NACK or cleared if the response is an ACK. Bits five through zero contain an error code if bit six was set.

Return packets are sent in response to command packets and event packets. Response packets are either ACKs or NACKs. A well formed response packet header has the following format 

Packet Number Is set to the same packet number of the command packet that is being responded to. This ensures that the response can be matched correctly with the command.

Packet Type Is the same packet type as the command packet that is being responded to. The packet type s high bit is set to indicate that the packet is a response packet.

An ACK response packet is a positive response packet and is specified by clearing bit six of the high byte of the Packet Type portion of the packet header. Some response packets that are ACKs may also contain data that was requested by the command. The specifics of what data is sent in response to what commands is specified in the description for the Command packets.

A NACK response packet is a negative response packet and is specified by setting bit six of the high byte of the Packet Type portion of the packet header. In addition bits five through zero contain an error code for the failure of the command that is being responded to.

Command packets represent the operations that the SideShow platform is requesting of the device. Command packets are initiated by the computing device for communication to the display device driver. Command packets can be composed of several pieces of data that constitute arguments for the command. String arguments contained within packets are composed of a four byte value that indicates the length in bytes of the string including NULL terminator followed by the string data. Strings are by convention NULL terminated. Buffer arguments contained within packets are formatted like strings a four byte value that indicates the length followed by the buffer data. For every command a response packet is returned by the device. Response packets are packets with the response bit set on the Packet Type in the header and contain the same packet number as the command. The response packet is either 

An ACK that indicates success of the command. The ACK response may contain optional data described in the individual commands or

Data The data contained in the response packet is an encoded PROPVARIANT. The supported PROPVARIANT types are VT EMPTY VT I2 VT I4 VT R4 VT R8 VT DATE VT BOOL VT I1 VT UI1 VT UI2 VT UI4 VT U8 VT UI8 VT INT VT UINT VT LPWSTR VT CLSID VT UI1 VT VECTOR.

The PROPVARIANTs are encoded such that the first four bytes are the VARTYPE and the proceeding bytes are the data. Well known platform capabilities are defined in WindowsSideShow.h and consist of the following 

Retrieves the list of applications that a device enabled by default for all users of a computer if those applications are installed.

A NULL terminated string that indicates the format of the date. For more information about the contents of the string see Day Month Year and Era Format Pictures in the Microsoft Windows SDK documentation.

A NULL terminated string that indicates the format of the date. For more information about the contents of the string see Day Month Year and Era Format Pictures in the Microsoft Windows SDK documentation.

A 32 bit value Boolean value that indicates whether the application is an on line application. An on line only application is an application that is functional only when the computer is in the S0 power state.

Removes all the previously added applications from the device the content for the applications and their notifications.

A FILETIME structure that contains the date and time that indicates when the notification should expire. For more information about FILETIME see the Microsoft Windows SDK documentation.

Event packets represent events that the device wants the Windows SideShow platform to be aware of. Event packets are always initiated by the device and sent to the driver.

Contains an event sent by an application on the device. The data is determined by the application and the event identifier.

The SID of the user that the device is requesting to take ownership as the current user of the device.

Having thus described several aspects of at least one embodiment of this invention it is to be appreciated that various alterations modifications and improvements will readily occur to those skilled in the art.

Such alterations modifications and improvements are intended to be part of this disclosure and are intended to be within the spirit and scope of the invention. Accordingly the foregoing description and drawings are by way of example only.

The above described embodiments of the present invention can be implemented in any of numerous ways. For example the embodiments may be implemented using hardware software or a combination thereof. When implemented in software the software code can be executed on any suitable processor or collection of processors whether provided in a single computer or distributed among multiple computers.

Further it should be appreciated that a computer may be embodied in any of a number of forms such as a rack mounted computer a desktop computer a laptop computer or a tablet computer. Additionally a computer may be embedded in a device not generally regarded as a computer but with suitable processing capabilities including a Personal Digital Assistant PDA a smart phone or any other suitable portable or fixed electronic device.

Also a computer may have one or more input and output devices. These devices can be used among other things to present a user interface. Examples of output devices that can be used to provide a user interface include printers or display screens for visual presentation of output and speakers or other sound generating devices for audible presentation of output. Examples of input devices that can be used for a user interface include keyboards and pointing devices such as mice touch pads and digitizing tablets. As another example a computer may receive input information through speech recognition or in other audible format.

Such computers may be interconnected by one or more networks in any suitable form including as a local area network or a wide area network such as an enterprise network or the Internet. Such networks may be based on any suitable technology and may operate according to any suitable protocol and may include wireless networks wired networks or fiber optic networks.

Also the various methods or processes outlined herein may be coded as software that is executable on one or more processors that employ any one of a variety of operating systems or platforms. Additionally such software may be written using any of a number of suitable programming languages and or programming or scripting tools and also may be compiled as executable machine language code or intermediate code that is executed on a framework or virtual machine.

In this respect the invention may be embodied as a computer readable medium or multiple computer readable media e.g. a computer memory one or more floppy discs compact discs optical discs magnetic tapes flash memories circuit configurations in Field Programmable Gate Arrays or other semiconductor devices or other tangible computer storage medium encoded with one or more programs that when executed on one or more computers or other processors perform methods that implement the various embodiments of the invention discussed above. The computer readable medium or media can be transportable such that the program or programs stored thereon can be loaded onto one or more different computers or other processors to implement various aspects of the present invention as discussed above.

The terms program or software are used herein in a generic sense to refer to any type of computer code or set of computer executable instructions that can be employed to program a computer or other processor to implement various aspects of the present invention as discussed above. Additionally it should be appreciated that according to one aspect of this embodiment one or more computer programs that when executed perform methods of the present invention need not reside on a single computer or processor but may be distributed in a modular fashion amongst a number of different computers or processors to implement various aspects of the present invention.

Computer executable instructions may be in many forms such as program modules executed by one or more computers or other devices. Generally program modules include routines programs objects components data structures etc. that perform particular tasks or implement particular abstract data types. Typically the functionality of the program modules may be combined or distributed as desired in various embodiments.

Also data structures may be stored in computer readable media in any suitable form. For simplicity of illustration data structures may be shown to have fields that are related through location in the data structure. Such relationships may likewise be achieved by assigning storage for the fields with locations in a computer readable medium that conveys relationship between the fields. However any suitable mechanism may be used to establish a relationship between information in fields of a data structure including through the use of pointers tags or other mechanisms that establish relationship between data elements.

Various aspects of the present invention may be used alone in combination or in a variety of arrangements not specifically discussed in the embodiments described in the foregoing and is therefore not limited in its application to the details and arrangement of components set forth in the foregoing description or illustrated in the drawings. For example aspects described in one embodiment may be combined in any manner with aspects described in other embodiments.

Also the invention may be embodied as a method of which an example has been provided. The acts performed as part of the method may be ordered in any suitable way. Accordingly embodiments may be constructed in which acts are performed in an order different than illustrated which may include performing some acts simultaneously even though shown as sequential acts in illustrative embodiments.

Use of ordinal terms such as first second third etc. in the claims to modify a claim element does not by itself connote any priority precedence or order of one claim element over another or the temporal order in which acts of a method are performed but are used merely as labels to distinguish one claim element having a certain name from another element having a same name but for use of the ordinal term to distinguish the claim elements.

Also the phraseology and terminology used herein is for the purpose of description and should not be regarded as limiting. The use of including comprising or having containing involving and variations thereof herein is meant to encompass the items listed thereafter and equivalents thereof as well as additional items.

