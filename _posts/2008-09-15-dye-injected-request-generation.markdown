---

title: Dye injected request generation
abstract: Web server processes can host multiple web applications that process multiple requests from multiple clients. Recorded diagnostic information may not provide a useful separation of server execution data (e.g., functionality executed to process a request) based on a client's use of the web server process. An effective method for separating server execution data by client information is provided herein. Dye is injected into a request from a client, the dye comprises information regarding the client application making the request and a transaction (e.g., client defined set of requests) that the request is comprised within. The dye injected request is sent to a web server process (e.g., on a web server) that extracts the dye and executes the request. During execution of the request, executed functionality is associated and stored with the extracted dye. The recorded server execution data may be organized based upon the request, client, application, and/or transaction.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08156203&OS=08156203&RS=08156203
owner: Microsoft Corporation
number: 08156203
owner_city: Redmond
owner_country: US
publication_date: 20080915
---
It can be appreciated that a web server process can host multiple web applications that execute requests from multiple clients. However other than the instructions comprised within a particular request the web server process is generally aware of very little other information associated with the request. For example a web server process may be able to identify an IP address of a client making a particular request but not the application and or context from which the request was made. Diagnostic information e.g. server execution data of a particular client s use of a web server process is thus limited because of the multitude of web applications hosted on the particular client device and the multitude of requests issued to the web application e.g. from the same or different clients running the same or different applications as well as other factors. Accordingly only moderately useful analysis may presently be performed to provide some type of correlation between server execution data and client information e.g. based upon a client s IP address.

This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key factors or essential features of the claimed subject matter nor is it intended to be used to limit the scope of the claimed subject matter.

Within a computing environment many times a client application accesses functionality and data from a source remote to the client application. For example a client machine may host a client application that requests functionality to be executed on a server machine. The server machine may comprise a web server process for example that hosts web applications. The client application e.g. a web browser may send requests to the web server process to execute functionality of a web application e.g. a webpage . For example a user may invoke a web browser to display a webpage. The web browser sends an HTTP request to a web server process to execute functionality and return HTML display information of the webpage.

The web server may be configured to record server execution data e.g. application execution data during execution by the web server process of the requests. Server execution data may comprise data inputs used in executing a request and or functionality executed in executing the request e.g. a runtime call tree application data . Because a request may not provide information regarding the client however the recorded server execution data may not provide enough information to separate records based upon the client machine the request originated from the application that made the request and or any logical grouping or contextual information of the request e.g. a transaction . Thus the recorded server execution data can not be fully harvested because it is not correlated to client information.

As provided herein a technique for separating server execution data based upon information regarding a request an application originating the request and or a client transaction comprising the request is disclosed. For example when a client application makes a request to a web server process dye is injected into the request at the client machine. The dye comprises information regarding the client application from which the request originated and or information regarding the transaction within which the request is comprised. A transaction is a client defined logical grouping of one or more requests and may be arbitrarily chosen by the client. For example a user may initiate a test of a merchant webpage e.g. a webpage allowing a user to purchase goods from the webpage . The user may define a transaction as the user interaction with the webpage through a web browser from beginning to end e.g. product selection and purchase via mouse clicks keystrokes etc. . The transaction comprises the corresponding functionality processed by a web server process handling the user interaction e.g. functionality of an event handler . For example the user may define a transaction as 3 requests a selection of a product on the merchant webpage an input of credit card information for the purchase and a confirmation of the purchase.

Once the dye regarding the client application and transaction is injected into the request the dye injected request is sent to the web server process designated by the request. The web server process receives the dye injected request and extracts the dye from the request. Information regarding the request and the dye may be stored in memory. The information may be stored for a request lifetime e.g. a duration of time corresponding to the execution fulfillment of the request . The web server process executes the request by invoking functionality used to process the request. During the execution of the request one or more operations performed during executing the request are associated with the stored information regarding the request and the dye. An operation may comprise for example information regarding functionality executed by the web server process and or data inputs used by the web server process. A record representing server execution data for the request may be made that comprises the request the dye information and or other operation information.

Server execution data e.g. one or more recordings may be analyzed based upon the additional client information comprised within the dye. Server execution data may for example be parsed according to particular requests the client applications that made the requests and or the transactions comprising the requests. A user is thus able to organize and view server execution data pertaining to some logical activity instead of just a huge heap of all the server execution data performed by the web server process. The organization by client information is useful because the web server process may handle multiple web applications multiple requests and multiple client machines making requests which would otherwise be undistinguishable based upon client information. Another benefit is the ability to facilitate a secure testing environment. The diagnostic information may be filtered to server execution data pertaining to a specified tester.

To the accomplishment of the foregoing and related ends the following description and annexed drawings set forth certain illustrative aspects and implementations. These are indicative of but a few of the various ways in which one or more aspects may be employed. Other aspects advantages and novel features of the disclosure will become apparent from the following detailed description when considered in conjunction with the annexed drawings.

The claimed subject matter is now described with reference to the drawings wherein like reference numerals are used to refer to like elements throughout. In the following description for purposes of explanation numerous specific details are set forth in order to provide a thorough understanding of the claimed subject matter. It may be evident however that the claimed subject matter may be practiced without these specific details. In other instances structures and devices are illustrated in block diagram form in order to facilitate describing the claimed subject matter.

A client machine may host a client application configured to interact with web applications. The client application may make requests to a web application to execute functionality e.g. HTTP request for execution of a web service HTTP request for execution of an event handler for a webpage etc. . A web server process may host multiple web applications on a web server machine. The web server process handles the requests from client applications by executing functionality of a web application requested by the client applications. One example is a client server environment.

It may be appreciated that the client application may make requests to a web application a database a web service and or any other functionality that may be invoked through a generic protocol.

It may be advantageous to provide a user of a client machine making requests to a web server process with diagnostic information regarding the user s activity with the web server process e.g. one or more requests made by the user server execution data etc. . Creating a useful analysis of server execution data becomes an issue because the requests from a client machine may not comprise detailed information regarding the client. Therefore the web server process does not know the client application that originated the request and or the context in which the request was made e.g. is the request part of a series of logically related requests such as the completion of a test or task . Furthermore the web server process may handle multiple requests from multiple client machines such that the server execution data from different client requests becomes indistinguishable. For example a user would be unable to separate server execution data based upon which client application made a particular request.

For example two users on different client machines may use a similar version of a client application e.g. web browser to access functionality from a web server process hosting a web application e.g. a web service . While the web server process handles the requests for both users server execution data may be recorded. A particular user may not be able to separate the server execution data that pertains to the particular user because the server execution data does not provide enough information about the client machines that made the requests. The server execution data may provide the IP address of the client machine but no information regarding the client application that made the request.

A web application development environment is one example where separation of server execution data may be advantageous. A web application may be hosted by a single web server process. The web server process may handle requests from multiple developers on separate client machines. A developer may conduct a test e.g. a transaction that involves multiple requests using more than one client application to make the requests. It may be advantageous for a developer to be able to analyze the server execution data pertaining to the developer and filter out server execution data pertaining to other developers.

As provided herein server execution data can be separated by a request a client application making the request and or a transaction comprising the request. When a client application makes a request to a web application on a web server additional information regarding the client is injected at the client machine into the request. The additional information may comprise information regarding the client application making the request and or information regarding the context in which the request is made. For example one way to define additional contextual information is where a client defines a transaction. The transaction may provide contextual information about one or more requests associated with the transaction. A transaction may be a client defined logical grouping of one or more requests and may be arbitrarily chosen by the client. A logical grouping may be a set of requests made to accomplish a task or test e.g. a set of requests made to a web commerce webpage in order to select an item and complete a credit card transaction for the purchase of the selected item . Another example of contextual information may be a current user associated with a request a call stack of a thread making the request client machine properties an operating system of the client machine and or information describing one or more applications installed on the client machine. It may be appreciated that contextual information may comprise other information than listed. Once the information is injected into the request the injected request may be sent to the web server.

At the web server the additional client information is extracted from the injected request. The extracted information may be stored in memory while the request is executed. A web server process executes the request by invoking functionality and or handling data inputs of a web application corresponding to the request. During execution of the request information regarding the execution of the request is associated with the client information. A record may be created comprising the request the additional information regarding the client e.g. the application that made the request and or the context information of the request and the server execution data e.g. functionality and or input data used in processing the request . The record may be stored in memory for later analysis.

An analysis may be performed on one or more records. The analysis may allow the data e.g. server execution data comprised within the records to be separated by client information. For example an analysis may provide record data corresponding to a specific client application that made requests to a web server. Another analysis may provide record data associated with a specified logical grouping e.g. a transaction . The analysis may further provide record data associated with a specified request.

One embodiment of creating a dye injected request is illustrated by an exemplary method in . At the method beings. At dye is inject into a request the dye comprising information regarding an application from which the request originated and information regarding a transaction within which the request is comprised. At the method ends.

At the client machine a dye injected request is created by injecting dye into a request made by an application e.g. a client application . The dye injected request may be sent a web server process handling a web application the original request was intended to reach. Injecting dye into the request provides a web server process with additional information regarding the application and the transaction that the web server process may not otherwise have.

It may be appreciated that injecting dye comprising the application and injecting dye comprising the transaction may be actions independent of one another. The dye injection is performed at the client machine because the target web application or web service may be stateless and run on separate computers. The web server process may not have the ability to track the application that made the request. Application information is injected into the request at the client because the request may not expose this information to the web server process.

Transaction information is injected at the client because the transaction is a concept defined by the client. A transaction may comprise multiple applications and or multiple requests that the client logically groups together. Because the web application is stateless the web server process has limited ability to provide contextual meaning to the request e.g. the web server process may not be able to provide a logical grouping or relationship between requests and or client information . The injected dye may be injected into one or more requests that are a part of a transaction.

One example of injecting dye into a request is the use of an HTTP header. An HTTP proxy may be used to connect to a web request framework. The web request framework makes and sends requests to destinations such as a web server. Using the HTTP proxy an HTTP header may be attached to the request. The HTTP header may comprise information regarding the application which made the request and or information describing the transaction that the request is a part of. The HTTP header may be attached to one or more requests to uniquely identify the client. In particular an HTTP header may be duplicated and injected into one or more requests that are a part of the same transaction.

One embodiment of tracking one or more dye injected requests is illustrated by an exemplary method in . At the method begins. At a dye injected request is received. The dye injected request may be received as HTTP a stream of data and or any other data format. The dye injected request may be received at the web server by a web server process handling requests for a web application.

At the dye is extracted from the request. The dye comprises information regarding an application from which the request originated and a transaction within which the request is comprised. The extracted dye may be stored in memory for the lifetime of the request. A request lifetime may be the duration of the time associated with the execution of the request such from the initiation of processing associated with the request to the completion of processing associated with the request. A request lifetime may be coupled and stored with the dye in memory. For example a request lifetime may be extracted from a web server processing pipeline. A begin request event and an end request event may be extracted from the pipeline and stored with dye in memory.

At the request is executed. While the request is executed one or more operations performed during the execution of the request are associated with the dye. An operation may comprise a set of data inputs used to execute the request a set of functionality executed in order to execute the request and or a request lifetime. The operations may be associated with the dye by storing information regarding the operations in memory with the dye. At the method ends.

The request information the extracted dye information the request lifetime and operation information may be stored as a record. One or more records may be analyzed and presented to a user. Because of the additional information from the dye the recorded information may be organized and separated based upon client information. The user may be able to specify criterion used to filter and sort the records in a meaningful way. For example the user may filter by request client making the request application originating the request and or the transaction comprising the request.

For example a user may use a web browser e.g. a client application and an image viewer e.g. a second client application configured to request images from a web application to test a photo search webpage e.g. web application . The user may define a transaction as comprising three requests from the web browser to the photo search webpage and one request from the image viewer to the photo search webpage. The three requests from the web browser may encompass navigating the photo search webpage to an image available for download requesting the image from the photo search webpage and verifying a secure connection for downloading of the image. The request from the image viewer may encompass a request to the photo search webpage to initiate the download of the image.

The three requests from the web browser may be injected with dye comprising information regarding the web browser and the transaction. The one request from the image viewer may be inject with dye comprising information regarding the image viewer and the transaction. Once a request is injected with dye the dye injected request is sent to a web server comprising the photo search webpage. Upon receiving one of the dye injected requests the dye is extracted and stored in memory. During execution of the request operations performed are associated with and stored with the dye in memory. A record is formed comprising the request information the extracted dye information a request lifetime and one or more associated operations.

Server execution data e.g. one or more records pertaining to the transaction may be organized based upon the application the transaction and or the request. A user may usefully analyze the information regardless of the fact that the transaction is defined at the client machine the transaction comprises multiple applications the web server process may handle other client s requests and other client s requests may originate from the same application version as the user s version. The server execution data is no longer an undistinguishable set of records but is organized based upon client information.

The dye injector may be configured to identify a request identify an application originating the request and or identify a transaction comprising the request . The dye injection may identify the request and the application by connecting to and monitoring a web request framework configured to create and send web requests. The dye injector may receive information regarding the transaction from the transaction component . The transaction component may be configured to define a transaction based upon a user input and or a logical grouping of requests. The transaction component may send the defined transaction to the dye injector .

The dye injector is further configured to inject dye into the request the dye comprising information regarding the application and the transaction. The transaction component may specify the transaction information to be injected. The application information to be injected may comprise information regarding the client machine running the application the name of the application the version of the application and or other appropriate information regarding the application .

One example of injecting dye into a request is where the dye injector connects to a web request framework. The dye injector may monitor the web request framework for HTTP requests. The dye injector intercepts the HTTP requests using an HTTP proxy. The HTTP proxy allows the dye injector to inject additional HTTP headers that identify an application and a transaction associated with the intercepted HTTP request.

A dye injected request is created when the dye injector injects the dye into the request . The dye injected request may be sent to a web server that the request was intended to reach. The web server comprises a web server process that hosts a web application. The web server process may be configured to execute functionality of the web application that the dye injected request calls for. The dye extractor is configured to intercept the dye injected request . The dye injected request may be intercepted through a web server process pipeline. The dye extractor extracts the dye from the dye injected request and creates a dye and request record that is recorded for the duration of executing the dye injected request e.g. a request lifetime . Once the dye is extracted the dye extractor may send request information to the execution component .

The web server process executes the dye injected request e.g. the original request information from the request . During execution the execution component associates operations performed by the web server process with the recorded dye information e.g. dye and request record . An operation may comprise server execution data such as a set of data inputs used to execute the request a set of functionality executed to execute the request and or a request lifetime. The execution component may associate operations by storing associated operations with the dye and request record in memory.

The recording component is configured to create one or more records relating to server execution data. A record may comprise information corresponding to a request dye extract from the request and or one or more associated operations performed during execution of the request. The record may be stored in memory and or in an execution recording for analysis. For example the recording component may create one or more records corresponding to the request . The record may comprise information from the dye and request record and or the associated operations that correspond to the request .

The analysis component is configured to present one or more records based upon user defined criterion. The user defined criterion may comprise a sort by application a sort by client a sort by transaction sort by request lifetime sort by transaction lifetime sort by user identity sort by calling function sort by client OS and or a sort by request criteria. The user defined criterion may also comprise a sort by client machine property wherein the client machine property may relate to a hardware property a software environment property and or user data on the client machine. It may be appreciated that user defined criterion may comprise other information and or criteria than listed. The analysis component allows a user to separate server execution data based upon client information such as the application the transaction the request and or the client. This allows the user to organize server execution data into a useful analysis even though the sever execution data may comprise data regarding multiple clients making multiple requests simultaneously from the same web server process.

The transaction is defined by a transaction start and a transaction end . The transaction comprises a request a request and a request . The application sends the requests to the web server. The dye injector intercepts the requests and the information defining the transaction. The dye injector injects dye into request to produce a dye injected request . The dye injector injects dye into request to produce a dye injected request . The dye injector injects dye into request to produce a dye injected request . The dye that is injected into the three requests comprises information regarding the application and information regarding the transaction comprising the three requests.

The three dye injected requests are sent to the web server. The web server comprises a dye extractor an execution component a set of records and an analysis component . The dye extractor intercepts the three dye injected requests. The dye extractor extracts the dye associated with the three dye injected requests. The dye may be extracted from an HTTP header associated with the request. A dye and request record comprising the extracted dye and request information may be stored in memory for the duration of time the request is executed e.g. a request lifetime .

Once the dye is extracted a request information a request information and a request information are received by the execution component . The request information may be used to identify and locate requests that have extracted dye associated with the request. During execution of a request the execution component associates e.g. creates an associated operations set operations performed by the web server process with the dye and request record e.g. the stored dye information corresponding to the executed request. For example the execution component may connect to a web server processing pipeline to extract information regarding operations performed by the web server process in executing the request.

A record may be created comprising information from the dye and request record and or information from the associated operations set . In another implementation the record may comprise information regarding the dye. The associated operations may not be comprised within the record but are associated with the record during analysis of the record. It may be appreciated that dye information and execution operations may be associated after a record is created and that the record may comprise information about the dye the request and or execution information. The record may comprise information of a request dye information associated with the request and or associated operations. The associated operations may comprise data inputs used in executing the request functionality executed in executing the request and or a request lifetime. One or more records may be stored within the set of records . The set of records may be save in memory and or a server execution log.

The analysis component is configured to organize and present server execution data e.g. one or more records within the set of records . A user is able to input user criteria into the analysis component . The user criteria may comprise a sort by application transaction request and or other client information. The analysis component presents an analysis that provides meaningful server execution data that pertains to the transaction comprising the three requests and . This allows the user to filter out server execution data that does not pertain to the transaction such as execution data pertaining to other clients other user transactions etc. Separating server execution data by client information is important because the same web server process may host multiple web applications and process multiple requests multiple clients making requests and multiple applications making requests during recording of server execution data.

It may be appreciated that a client machine may comprise multiple transactions that simultaneously exist on the client machine. A request may be associated with a corresponding existing transaction. For example multiple transactions may be associated with one or more users that may be logged into a client machine. One or more requests made by a user through one or more applications may be associated with the appropriate transaction wherein multiple transactions may exist on the client machine. It may be further appreciated that a transaction may be defined by an application a user and or an action e.g. a user starting a test .

The three requests are sent to a web server. The dye injector intercepts the three requests and the transaction information. The dye injector creates a dye injected request by injecting dye into the request the injected dye comprising information about the application and information of the transaction. The dye injector creates a dye injected request by injecting dye into the request the injected dye comprising information about the application and information of the transaction. The dye injector creates a dye injected request by injecting dye into request the injected dye comprising information about the application and information of the transaction. Once the dye is injected the dye injected requests are sent to the web server.

The web server may comprise a dye extractor an execution component a set of records and an analysis component . The dye extractor intercepts the dye injected requests. The dye extractor extracts the dye associated from the dye injected requests. A dye and request record comprising the extracted dye and request information may be stored in memory for the duration of time the request is executed e.g. a request lifetime . Once the dye is extracted a request information a request information and a request information are received by the execution component . The request information may be used to identify and locate requests that have extracted dye associated with the request.

During execution of a request the execution component associates e.g. creates an associated operations set operations performed by the web server process with the dye and request record . A record may be created comprising information from the dye and request record and information from the associated operations set . One or more records may be stored within the set of records . The analysis component allows a user to specify user criteria . The analysis component organizes and presents one or more records from the set of records based upon the user criteria .

For example the user may specify a user criteria instructing the analysis component to present records pertaining to the application . The analysis component presents tagged record information of the request and the request because the two requests originated from the application . The tagged record information may comprise server execution data the transaction comprising the two requests and or other client information. This allows the user to view server execution data corresponding to specified client information such as an application a request and or a transaction.

A transaction may be defined by the client as a transaction start and a transaction end . The transaction comprises a request . When the application A makes the request the dye injector intercepts the request . The dye injector injects dye comprising information regarding application A and transaction . A dye injected request is created and sent to a web server comprising a server process hosting a web application e.g. the request is meant to invoke functionality of the web application .

A transaction may be defined by the client as a transaction start and a transaction end . Transaction comprises a request from the application A a request from application B and a request from application B . Once the dye injector intercepts one of the requests the dye injector creates a corresponding dye injected request. For example the dye injector creates a dye injected request comprising the request information regarding the application A and information regarding the transaction . The dye injector creates a dye injected request comprising the request information regarding the application B and information regarding the transaction . The dye injector creates a dye injected request comprising the request information regarding the application B and information regarding the transaction . One or more dye injected requests are sent to the web server.

It may be appreciated that a transaction may span multiple client machines. That is a transaction may comprise one or more requests from a client machine A and one or more requests from a client machine B .

At the web server a dye extractor intercepts the dye injected requests e.g. and . When the dye extractor intercepts one of the dye injected requests the dye comprised within the intercepted request is extracted. The extracted dye may be stored as a dye and request record in memory. An execution component receives the request information after the dye is extract. During execution of the request the execution component associates operations performed by the web server process with the recorded dye information e.g. the dye and request record . A record is created comprising the request information the dye the associated operations and a lifetime of the request. One or more records may be stored as a set of records in memory and or an execution log.

A user may create with an analysis component a presentation comprising the server execution data related to application A request user machine and or transaction . A user may create with an analysis component a presentation comprising the server execution data related to application A application B request request request user machine and or transaction . An analysis may be presented based upon one or more records from the set of records that correspond to specified client filter e.g. user defined criterion sort by client application etc. .

An analysis view presents a data analysis chart of server execution data. The data analysis chart comprises 4 rows wherein a row corresponds to a record of information for a request executed by a web server process. A row may comprise information from multiple records. The record of information may comprise server execution data and or client information pertaining to the request. For example a request row is presented within the data analysis chart . The request row presents information regarding the client that sent request e.g. a user cell the application that made request e.g. an application B cell the transaction that request is within e.g. a transaction cell and the operations performed during execution of request e.g. an operations list cell . It may be appreciated that a data analysis may comprise other information than listed.

An analysis view presents a data analysis chart of server execution data corresponding to a transaction . The data analysis chart provides client information and server execution data corresponding to requests executed for the purpose of completing transaction . For example the data analysis chart is filtered by a transaction criterion. Because server execution data may comprise a large number of requests the ability to filter the server execution data by a criterion e.g. client application transaction etc. provides a user with an organized and useful analysis of the server execution data. The user is able to view what server functionality was performed in completing transaction and exclude other server execution data. This may provide useful debug and diagnostic information because of the organized format.

A user may view the server execution data through sorting by client machine the number of requests from a specified user what applications made the requests and or what transactions comprised the requests. A user analysis is not limited to server execution data but may comprise other useful information e.g. an operating system of a client machine making the request a call stack of a thread making the request and or other contextual information that further describes requests made by a client. Another view may provide data sorted by a request the client making the request and what transaction comprised the request. The different views of server execution data allow a user to separate server activity e.g. web server process executing requests by client information.

Still another embodiment involves a computer readable medium comprising processor executable instructions configured to implement one or more of the techniques presented herein. An exemplary computer readable medium that may be devised in these ways is illustrated in wherein the implementation comprises a computer readable medium e.g. a CD R DVD R or a platter of a hard disk drive on which is encoded computer readable data . This computer readable data in turn comprises a set of computer instructions configured to operate according to one or more of the principles set forth herein. In one such embodiment the processor executable instructions may be configured to perform a method such as the exemplary method of for example. In another such embodiment the processor executable instructions may be configured to implement a system such as the exemplary system of for example. Many such computer readable media may be devised by those of ordinary skill in the art that are configured to operate in accordance with the techniques presented herein.

Although the subject matter has been described in language specific to structural features and or methodological acts it is to be understood that the subject matter defined in the appended claims is not necessarily limited to the specific features or acts described above. Rather the specific features and acts described above are disclosed as example forms of implementing the claims.

As used in this application the terms component module system interface and the like are generally intended to refer to a computer related entity either hardware a combination of hardware and software software or software in execution. For example a component may be but is not limited to being a process running on a processor a processor an object an executable a thread of execution a program and or a computer. By way of illustration both an application running on a controller and the controller can be a component. One or more components may reside within a process and or thread of execution and a component may be localized on one computer and or distributed between two or more computers.

Furthermore the claimed subject matter may be implemented as a method apparatus or article of manufacture using standard programming and or engineering techniques to produce software firmware hardware or any combination thereof to control a computer to implement the disclosed subject matter. The term article of manufacture as used herein is intended to encompass a computer program accessible from any computer readable device carrier or media. Of course those skilled in the art will recognize many modifications may be made to this configuration without departing from the scope or spirit of the claimed subject matter.

Although not required embodiments are described in the general context of computer readable instructions being executed by one or more computing devices. Computer readable instructions may be distributed via computer readable media discussed below . Computer readable instructions may be implemented as program modules such as functions objects Application Programming Interfaces APIs data structures and the like that perform particular tasks or implement particular abstract data types. Typically the functionality of the computer readable instructions may be combined or distributed as desired in various environments.

In other embodiments device may include additional features and or functionality. For example device may also include additional storage e.g. removable and or non removable including but not limited to magnetic storage optical storage and the like. Such additional storage is illustrated in by storage . In one embodiment computer readable instructions to implement one or more embodiments provided herein may be in storage . Storage may also store other computer readable instructions to implement an operating system an application program and the like. Computer readable instructions may be loaded in memory for execution by processing unit for example.

The term computer readable media as used herein includes computer storage media. Computer storage media includes volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions or other data. Memory and storage are examples of computer storage media. Computer storage media includes but is not limited to RAM ROM EEPROM flash memory or other memory technology CD ROM Digital Versatile Disks DVDs or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can be accessed by device . Any such computer storage media may be part of device .

Device may also include communication connection s that allows device to communicate with other devices. Communication connection s may include but is not limited to a modem a Network Interface Card NIC an integrated network interface a radio frequency transmitter receiver an infrared port a USB connection or other interfaces for connecting computing device to other computing devices. Communication connection s may include a wired connection or a wireless connection. Communication connection s may transmit and or receive communication media.

The term computer readable media may include communication media. Communication media typically embodies computer readable instructions or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term modulated data signal may include a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal.

Device may include input device s such as keyboard mouse pen voice input device touch input device infrared cameras video input devices and or any other input device. Output device s such as one or more displays speakers printers and or any other output device may also be included in device . Input device s and output device s may be connected to device via a wired connection wireless connection or any combination thereof. In one embodiment an input device or an output device from another computing device may be used as input device s or output device s for computing device .

Components of computing device may be connected by various interconnects such as a bus. Such interconnects may include a Peripheral Component Interconnect PCI such as PCI Express a Universal Serial Bus USB firewire IEEE 1394 an optical bus structure and the like. In another embodiment components of computing device may be interconnected by a network. For example memory may be comprised of multiple physical memory units located in different physical locations interconnected by a network.

Those skilled in the art will realize that storage devices utilized to store computer readable instructions may be distributed across a network. For example a computing device accessible via network may store computer readable instructions to implement one or more embodiments provided herein. Computing device may access computing device and download a part or all of the computer readable instructions for execution. Alternatively computing device may download pieces of the computer readable instructions as needed or some instructions may be executed at computing device and some at computing device .

Various operations of embodiments are provided herein. In one embodiment one or more of the operations described may constitute computer readable instructions stored on one or more computer readable media which if executed by a computing device will cause the computing device to perform the operations described. The order in which some or all of the operations are described should not be construed as to imply that these operations are necessarily order dependent. Alternative ordering will be appreciated by one skilled in the art having the benefit of this description. Further it will be understood that not all operations are necessarily present in each embodiment provided herein.

Moreover the word exemplary is used herein to mean serving as an example instance or illustration. Any aspect or design described herein as exemplary is not necessarily to be construed as advantageous over other aspects or designs. Rather use of the word exemplary is intended to present concepts in a concrete fashion. As used in this application the term or is intended to mean an inclusive or rather than an exclusive or . That is unless specified otherwise or clear from context X employs A or B is intended to mean any of the natural inclusive permutations. That is if X employs A X employs B or X employs both A and B then X employs A or B is satisfied under any of the foregoing instances. In addition the articles a and an as used in this application and the appended claims may generally be construed to mean one or more unless specified otherwise or clear from context to be directed to a singular form.

Also although the disclosure has been shown and described with respect to one or more implementations equivalent alterations and modifications will occur to others skilled in the art based upon a reading and understanding of this specification and the annexed drawings. The disclosure includes all such modifications and alterations and is limited only by the scope of the following claims. In particular regard to the various functions performed by the above described components e.g. elements resources etc. the terms used to describe such components are intended to correspond unless otherwise indicated to any component which performs the specified function of the described component e.g. that is functionally equivalent even though not structurally equivalent to the disclosed structure which performs the function in the herein illustrated exemplary implementations of the disclosure. In addition while a particular feature of the disclosure may have been disclosed with respect to only one of several implementations such feature may be combined with one or more other features of the other implementations as may be desired and advantageous for any given or particular application. Furthermore to the extent that the terms includes having has with or variants thereof are used in either the detailed description or the claims such terms are intended to be inclusive in a manner similar to the term comprising. 

