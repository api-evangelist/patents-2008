---

title: Development environment integration with version history tools
abstract: Instructions within an instruction set (such as source code for a software application) may be documented within many separate tools, such as a development environment, a version control system, and a bug report database. However, it may be inefficient to search for such information in many locations and through many interfaces while investigating the version history of an instruction. Instead, the development environment may be configured to retrieve relevant information (such as bug reports, versioning, and version release notes) and to display the version history information for a selected instruction together within the development environment.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08352445&OS=08352445&RS=08352445
owner: Microsoft Corporation
number: 08352445
owner_city: Redmond
owner_country: US
publication_date: 20080523
---
Development of instruction sets such as software often occurs within a development environment that facilitates the organization of instructions and assembly into working products such as compiled programs. For example the development environment may provide an integrated help tool for providing information on available instructions an integrated compiler for building assemblies and an integrated debugger to trace programming flow.

Such instruction sets may be developed through many versions where groups of instructions may be changed to achieve improvements in prior versions of the instruction sets e.g. to correct errors to add features or to improve compatibility with other components. These new versions may be tracked e.g. in a versioning tool that may record changes among versions of an instruction and may display a version of the instruction set at a particular stage of development.

This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key factors or essential features of the claimed subject matter nor is it intended to be used to limit the scope of the claimed subject matter.

New versions of instruction sets are often developed in view of particular motivations e.g. addressing a bug or implementing an idea. These motivations may be documented in various tools such as a bug database used to track observations of and information about incorrect or inconsistent program behavior. However these tools are often external to the development environment and a developer who wishes to investigate the circumstances of a particular instruction may have to conduct searches and reading outside of the development environment such as in a web browser. Moreover the separation of the historic information from the development environment may be inefficient e.g. a bug tracking database may not be tied to the particular instructions and versions of such instructions that were found to cause the undesirable behavior and or motivate the updating of the instruction to a new version.

An alternative design of a development environment may be devised that integrates the documentation tools such that the various documentation and testing tools that together illustrate the motivation of a developer in creating a particular version of an instruction in an instruction set. For example the development environment may store and utilize associations of a version of an instruction with observations recorded in a bug database that indicate an undesirable behavior caused by the instruction and with notes by the developer of the version concerning the improvements to be achieved by the version as compared with other versions of the instruction. Accordingly when a developer wishes to explore the history of an instruction comprising one or more versions of the instruction including the current version the development environment may query the various sources of information about the instruction and aggregate the results into a summary of the version history of the instruction. This information may then be presented to the developer within the development environment thereby facilitating an understanding of the particular configuration without interrupting the focus of the developer within the development environment. Additional features may be included in the development environment to enhance further the researching of version histories of an instruction e.g. by identifying participants in the development of a version of the instruction who may have additional and or specialized knowledge of the circumstances of the development and by facilitating contact with such participants by retrieving and displaying contact information. 

To the accomplishment of the foregoing and related ends the following description and annexed drawings set forth certain illustrative aspects and implementations. These are indicative of but a few of the various ways in which one or more aspects may be employed. Other aspects advantages and novel features of the disclosure will become apparent from the following detailed description when considered in conjunction with the annexed drawings.

The claimed subject matter is now described with reference to the drawings wherein like reference numerals are used to refer to like elements throughout. In the following description for purposes of explanation numerous specific details are set forth in order to provide a thorough understanding of the claimed subject matter. It may be evident however that the claimed subject matter may be practiced without these specific details. In other instances structures and devices are shown in block diagram form in order to facilitate describing the claimed subject matter.

Many scenarios involve the development of an instruction set comprising one or more instructions selected by one or more developers in a particular configuration that together achieve a desired mechanism. One such scenario is software development wherein an application is designed as a set of instructions for manipulating devices and data in a particular manner however other endeavors may also satisfy this description such as the development of mathematical formulae in an engineering endeavor or a manufacturing schematic for fabricating a workpiece in a particular fashion.

In such scenarios one or more developers may seek an advantageous configuration of instructions in an instruction set to achieve a desired result. The designing of such instruction sets may be facilitated by a development environment which may assist developers by providing information with the selection of instructions the testing of the instruction set in various conditions e.g. by application of exemplary testing data sets and the debugging of the operation in furtherance of an improved instruction set. The development environment may assist users in creating adjusting reviewing and utilizing instruction sets and may be provided e.g. as a windowed application a console application a web interface etc. The development environment may therefore incorporate various components such as a documentation component that describes available instructions a compiler component that generates a result of the instruction set e.g. a partially or wholly compiled software application or a predicted result of a fabrication run and or a debugging component that facilitates testing and exploration of the instruction set in action e.g. a code profiling tool that measures performance or a trace tool that records the flow of instructions during use of the instruction set. 

A developer may seek to develop a new version of an instruction set and the changes implemented to formulate the new version may be driven by a specific motivation e.g. addressing a particular undesirable behavior or implementing a particular improvement in features or compatibility. Often these motivations are documented in other tools e.g. in a bug tracking database or a web forum where testers and users may describe suggestions for updating the instruction set to reduce bugs. As new versions are developed the developer may author documentation describing the motivations for creating new versions such as observations of deficiencies or ideas for improvements.

In pursuing these motivations while updating an instruction in an instruction set a developer may not fully understand why an instruction in a current version is configured in a particular manner or why a particular behavior is occurring. The developer may therefore endeavor to research the documentation relating to an instruction in the instruction set such as the recorded thoughts of another developer who participated in the creation of the current version of the instruction. However such documentation may exist in tools that are not easily accessible within the development environment e.g. the research may involve reading about bugs on a web forum or in a bug tracking database tool reading version notes in a document reader tool and reading developer motivations in a developer weblog or ad hoc documentation. If the developer is motivated to contact a developer of a previous version a developer contact database may be utilized to identify contact information such as an email address and office number and a separate communication program such as an email client or an instant messaging client may be utilized to establish contact with the latter developer.

The disjointed aspect of these discrete tools may result in inefficiency in the research of the developer into the status history and conceptual mechanics of an instruction. illustrates an exemplary scenario in which a developer utilizes a development environment in the development of an instruction set illustrated herein as a programming library for a set of container classes to be used in other applications. In this exemplary scenario the instruction set features container classes such including a BubbleSortList class for sorting comparable objects according to a simple bubble sort algorithm a QuickSortList class for sorting comparable objects according to a quick sort algorithm a RadixExchangeList class for sorting a list of integers according to a radix exchange sorting algorithm and a HeapSortTree class for organizing a set of prioritized objects according to a heap sort also known as a priority queue algorithm. The instruction set is edited in the development environment which may provide support services to the developer s such as context sensitive help compiling and linking tools and support for debugging and tracing an executing version of the instruction set .

The instruction set may be developed through multiple versions each prepared by a developer in view of some motivations such as addressing particular bugs or implementing new features. In this exemplary scenario as in many contemporary development scenarios the versions of the instruction set are stored in a version control system which may e.g. capture a snapshot of the instruction set assign it a version number based on a version numbering scheme and store it in a version control database . Developers may also include some comments regarding the changes made to respective versions of the instruction set stored in the version control system such as notes about particular classes or methods that are newly introduced or newly altered with respect to prior versions.

The different versions of the instruction set may also be directed toward particular motivations. For example a first version of the instruction set may be intended to fix a particular bug observed in a prior version of the instruction set while a second version may be intended to include a new class or an improvement to an existing class as compared with a prior version of the instruction set . Some such motivations might be documented e.g. in a bug report forum which may include reports of potential bugs observed by users such as alpha and beta testers of pre release software customers of a released software product etc. that may be addressed by the developers of the instruction set . These bugs may be accepted by the software providing the bug report forum and may be stored in a bug report database .

Within the exemplary scenario of a developer working with an application may wish to understand its history according to the succession of versions of the instruction set . However the development environment may not be configured to present such information to complement the contents of the source code comprising the instruction set . As a first example the version control system may be integrated to various degrees with the development environment e.g. a tightly integrated version control system may allow developers to invoke version capturing within the development environment while a loosely integrated version control system may comprise a standalone tool that allows a user to select a particular snapshot of the instruction set to be loaded into a new instance of the development environment . In particular the version control system may not be capable of presenting developer documentation of a version within the development environment and the developer may have to review different versions of the instruction set and related developer documentation in an external version control system before loading a desired version into the development environment . Moreover the version control system might not include information about the versioning of particular instructions of the instruction set and it may be difficult to tell which versions pertain to a particular instruction or group of instructions in the instruction set such as the Sort method of the BubbleSortList class. As a second example the bug report forum is not coupled with the development environment and is accessed through a standalone browser such as a web browser and it may be difficult to track which bug reports in the bug report database pertain to a particular instruction in the instruction set .

This incomplete coupling of design tools results in inefficiencies such as those illustrated in the exemplary scenario of . For example a developer may not understand why an instruction was written in a particular manner e.g. with regard to the illustrated portion of the instruction set a new developer may wish to understand why the sorting loop begins sorting at index 1 instead of index 0 of the zero indexed array forming the base class for the BubbleSortList class. An explanation of this behavior may be indicated in the versioning information which may be not accessible to the developer within the development environment . The developer may have to exit the development environment to examine the contents of the version control database through the version control system which may not be capable of indicating which versions of the instruction set relate to instructions in the Sort method of the BubbleSortList class. The developer may instead have to read through the version notes of each version to find relevant versions e.g. it is not readily apparent at first glance that version 0.9.14.2 pertains to the method of interest which may be inaccurate and time consuming. Similarly this discovery may evidence a change in the instruction set e.g. from for int i 0 . . . to for int i 1 . . . but may not indicate a motivation or explanation for this change. The developer may then have to search the bug report database through yet another tool such as a bug report forum viewed in a web browser again such information might not easily be correlated with particular portions of the instruction set and it may be difficult to locate relevant bug reports e.g. the BubbleSortList crashes with invalid index exception entry. As a result the developer separately interacts with several design tools in order to extract information contained among such sources that relates to a particular portion of the instruction set . In large projects with many developers bug reports and versions this research may be particularly onerous and may diminish productivity and coordination among team members.

The techniques discussed herein may be devised with variations in many aspects and some variations may present additional advantages and or reduce disadvantages with respect to other variations of these and other techniques. Moreover some variations may be implemented in combination and some combinations may feature additional advantages and or reduced disadvantages through synergistic cooperation. The variations may be incorporated in various embodiments e.g. the exemplary method of and the exemplary system of to confer individual and or synergistic advantages upon such embodiments.

A first aspect that may vary among embodiments of these techniques relates to the scenario to which such techniques may be applied. illustrates an application of such techniques to computer code written in an object oriented programming language to be compiled into a class library and where the instruction version motivations comprise observed bugs. However it may be appreciated that many other scenarios might advantageously utilize such techniques. As a first example the development environment may comprise many types of tools for facilitating the selection and organization of instructions in the instruction set including e.g. a simple text editor a visual development environment an object oriented development environment such as an avatar or component based environment. As a second example these techniques may be utilized with many types of instruction sets specified according to many types of operational languages including e.g. other object oriented programming languages such as Java and C non object oriented programming languages such as Lisp and Perl declarative languages such as XML query languages such as SQL and LINQ machine level languages such as assembly and mathematical expressions. Those of ordinary skill in the art may be able to devise many scenarios to which the techniques discussed herein may be applied.

A second aspect that may vary among implementations relates to the architecture of systems designed to implement the techniques discussed herein. While the exemplary system of presents one architecture that embodies these techniques it may be appreciated that those of ordinary skill in the art may develop many equivalent architectures and some architectures may present additional advantages and or reduce disadvantages in certain circumstances. As a first example the instruction version data source and the instruction version motivation data source may comprise many types of data sources e.g. a relational database one or more files in a file system an email repository etc. These data sources may also expose the stored information through many types of interfaces e.g. a relational data source may provide data through a query engine a structured report or data set a web service a web interface such as a web forum etc. As a second example the exemplary system of illustrates the instruction version data source and the instruction version motivation data source as separate data stores but these data stores may be combined into a single data source that stores both instruction versions and instruction version motivations. As a third example these data sources may be combined with other components of the exemplary system e.g. by integrating the instruction version history generating component with one or both data sources such as by designing it as a stored procedure that fetches data for an instruction and provides instruction version histories formatted in a particular manner. As a fourth example these data sources may also be combined with components of the development environment e.g. the development environment may include one or both data sources and or may also serve as an instruction version history generating component by retrieving information from one or both data sources and formatting it for use by the instruction version history displaying component . As a fifth example the development environment may natively incorporate the instruction version history displaying component as part of the user interface of the development environment or may receive the output of an externally operated instruction version history displaying component and may simply render the received output as part of the user interface of the development environment . Those of ordinary skill in the art may be able to devise many architectures that implement the techniques discussed herein.

A third aspect that may vary among implementations of these techniques relates to the nature of the motivation for creating a new version. The various types of documented motivations wherein the history of the instruction is described might affect design choices in the implementation of these techniques. As a first example the motivations may be based on an instruction version behavior observation and an instruction version alteration description in response to the instruction version behavior observation. For example and as illustrated in illustrated in the exemplary scenario of the motivation may comprise error observations e.g. a bug report submitted by a user of a version of the instruction set and new versions devised to address the documented error observations e.g. this version addresses the bug described in this bug report. However other motivations may be documented according to the techniques discussed herein such as an inefficiency observation e.g. this instruction works but could be more efficient an inconsistency observation e.g. this instruction yields different results in equivalent circumstances an incompatibility observation e.g. this instruction does not work as expected if utilized in conjunction with this type of hardware or software an unexpected behavior observation e.g. this instruction resulted in a surprising side effect an improvement opportunity observation e.g. this instruction may be improved in some aspect by implementing the following tweaks alternatives and a deprecated technique observation e.g. this instruction invokes a programming interface or code library that is obsolete and using an alternative technique may improve the lifespan of the application. 

As a second example of this third aspect the motivation and or instruction version alteration description forming the basis of an instruction version history may include evidence supporting such documentation e.g. a narrative of an observed behavior of the instruction version a data capture relating to an observed behavior of the instruction version or a screenshot illustrating an observed behavior of the instruction version. Such supporting evidence may be incorporated in the documentation e.g. the development environment may include the screenshot or data capture or may include references to such evidence e.g. hyperlinks or thumbnails displayed within the development environment that when clicked display a screenshot or data capture illustrating the observation or the documented alteration. 

As a third example the motivation may be documented by the instruction set development team members managers or analysts who discover such motivations while reviewing the instruction set during development an internal or external pre release testing users customers of a released application or developers utilizing a released code library based on the instruction set members of the public participating in an open source project involving the instruction set etc. Those of ordinary skill in the art may apply these techniques to support the documentation of many types of motivations and by many types of individuals within the development environment in relation to instructions of the instruction set.

A fourth aspect that may vary among implementations of these techniques relates to the manner of selecting the instruction in the development environment. As a first example the development environment may interpret user actions as focusing on certain elements of the instruction set e.g. clicking on a component in a visual designer such as a button in a window or moving a caret within a text document in a text based development environment. The development environment may monitor the user focus select one or more instructions that are a current focus of the user and displaying the instruction version history for the selected instruction. For example the text entry user interface may include a caret that may be positioned within the text and based on the position of the caret the development environment may infer which instructions the user wishes to select and to investigate the documented instruction version history. However in some instances the text selection may be ambiguous and the development environment may have to choose one of many combinations of selected instructions for which the user wishes to view instruction version histories.

One technique for identifying a selected instruction may be applied when the development environment detects at least two instructions within an instruction set selection in the development environment i.e. when the selection is ambiguous. In this scenario the development environment may select a first instruction in the instruction set selection and may display the instruction version history within the virtual development environment for the first instruction. Moreover upon detecting a user action indicating interest in a second instruction the development environment may select the second instruction in the instruction set selection and display the instruction version history within the virtual development environment for the second instruction. However those of ordinary skill in the art may devise many ways of inferring a selected instruction based on user input while implementing the techniques discussed herein.

A fifth aspect that may vary among implementations of these techniques relates to the displaying of additional information with relation to a selected instruction such as the supplementing of an instruction version history with additional information describing the history of the instruction. As a first example the instruction version history may include references to participants who have been involved in creating an instruction version history. Such participants might include individuals such as developers testers users etc. and even groups of individuals or automated tools involved in the development e.g. this class was auto generated by the development environment. illustrates an exemplary scenario wherein the instruction version history indicates the individuals who were involved in the formulation of the instruction versions and the individuals who were involved in the authoring of the instruction version motivations e.g. the authors of various bug reports. Participants might also be indicated for instruction version alteration descriptions e.g. version notes accompanying a version individuals who contributed screenshots or data captures that support an instruction version behavior observation etc. An exemplary architecture might include relational references to various participants by the other sources of data comprising the instruction version history e.g. as shown in the bug report database and or version control database may reference a participant data source . Moreover the displaying of information may include the displaying of contact items for some or all of the indicated participants which may facilitate further contact with the participant if the researching developer has further questions or wishes to discuss an instruction version. For example as illustrated in the names of participants displayed within the development environment may be hyperlinked and the hyperlinks may lead to e.g. a biography page a display of an office location and or telephone number and an email hyperlink that initiates an email message directed to the participant and entitled with reference to the instruction version e.g. Re ContainerClasses version 0.8.3.4. Such contact information may be stored for example in the participant data source and may be retrieved by the development environment and utilized in the displaying of version information history. Those of ordinary skill in the art may devise many ways of supplementing instruction version histories with participant information while implementing the techniques discussed herein.

As a second example of this fifth aspect in addition to displaying an instruction version history for a selected instruction the development environment may display software components utilized by the selected instruction and or software components that utilize the selected instruction. Such software components may comprise e.g. a class a class instance a member of a class such as a member method a member class instance or class declaration a member primitive a member constant declaration etc. a declared constant a runtime a script an application programming interface a code library a linked or embedded resource. For example if an entire method is selected the development environment may display a list of the classes interfaces and methods invoked by the method and a list of the other classes and class projects that invoke the method. illustrates an exemplary scenario wherein the selected instruction within the instruction set is a class declaration. Upon detecting a selection of this instruction in addition to displaying the instruction versions and the instruction version motivations the development environment may search the other portions of the current project and related projects to identify references to the selected class and components utilized by the class. Moreover the entries of the displayed list of related components may be associated with the other software components e.g. via hyperlinks to the locations of the related software components in the project or to documentation for such related software components. Those of ordinary skill in the art may devise many ways of identifying displaying and associating software components related to a selected instruction while implementing the techniques discussed herein.

A third example of this fifth aspect involves annotating instructions to supplement the instruction version history. In many scenarios a developer may wish to annotate an instruction e.g. to indicate the effects of the instruction or to explain an ambiguous operation. The annotations could be inserted as an inline comment but this insertion might interrupt a reading of the instruction set particularly if the annotation is lengthy. Instead the annotation might be associated with an instruction but displayed separately as part of the metadata or documentation of the instruction. For example an embodiment such as the exemplary method of might be configured upon receiving an instruction version annotation relating to an instruction version history to store the instruction version annotation related to the instruction version history and to display the instruction version annotation along with the instruction version history within the development environment when the instruction is selected.

A sixth aspect that may vary among implementations of these techniques relates to options that may be extended to a developer to facilitate research into the history and description of an instruction version. In particular a user may wish to indicate whether a particular item such as a participant an instruction or a related software component is of more interest and that the user prefers to receive more information about the item or is of less interest and the user prefers to focus the research on other areas of the instruction history. Accordingly the development environment may be configured to provide such options to the user and may customize the displaying of information based on the user s indicated preferences.

As a first example of this sixth aspect a user may wish to indicate a level of interest in an instruction. For example the user may wish to indicate more interest in an instruction and this indication may be construed as consent to be notified of subsequent instruction version histories relating to the instruction e.g. subsequently posted bug reports subsequent versions of the instruction registered with a version control system and subsequent instruction version alteration descriptions such as release notes referencing the instruction. Accordingly the development environment may be configured upon detecting a user action within the development environment indicating more interest in a selected instruction to add the selected instruction to a bookmarked instruction set. The user may then utilize the list of bookmarked instruction versions to check if the instructions of interest have recently changed. Alternatively or additionally the development environment may treat the indication of interest as a subscription such that the user wishes to be actively notified of subsequent changes. Accordingly the development environment may be configured to monitor subsequent instruction version histories involving the bookmarked instruction and to display the subsequent instruction version histories within the development environment. Conversely if the user indicates less interest in a portion of an instruction version history for an instruction version the information may be hidden within the development environment. For example if a user indicates that a particular bug pertaining to an instruction is not related to the focus of the user s research the development environment may hide any instruction versions and or instruction version motivations involving the bug. Those of ordinary skill in the art may devise many ways of configuring the development environment to respond to indications of interest in instructions such as instruction versions or instruction version histories while implementing the techniques discussed herein.

As a second example of this sixth aspect the development environment may permit a user to indicate a level of interest in a participant of an instruction version history relating to an instruction. If the user indicates more interest in a participant the development environment may display more information within the development environment relating to the participant e.g. additional instruction versions that the selected participant participated in creating and or additional instruction version motivations that the selected participant participated in creating. For example if the user finds a particular tester s bug reports to be helpful the user may indicate an interest in seeing other bug reports generated by the participant for the current project. Conversely if the user indicates less interest in a participant the development environment may hide some information relating to the participant e.g. the name of the participant additional instruction versions that the selected participant participated in creating and or additional instruction version motivations that the selected participant participated in creating. Those of ordinary skill in the art may devise many ways of configuring the development environment to display more or less information about participants based on a user s expressed interest level in the participant.

Although the subject matter has been described in language specific to structural features and or methodological acts it is to be understood that the subject matter defined in the appended claims is not necessarily limited to the specific features or acts described above. Rather the specific features and acts described above are disclosed as example forms of implementing the claims.

As used in this application the terms component module system interface and the like are generally intended to refer to a computer related entity either hardware a combination of hardware and software software or software in execution. For example a component may be but is not limited to being a process running on a processor a processor an object an executable a thread of execution a program and or a computer. By way of illustration both an application running on a controller and the controller can be a component. One or more components may reside within a process and or thread of execution and a component may be localized on one computer and or distributed between two or more computers.

Furthermore the claimed subject matter may be implemented as a method apparatus or article of manufacture using standard programming and or engineering techniques to produce software firmware hardware or any combination thereof to control a computer to implement the disclosed subject matter. The term article of manufacture as used herein is intended to encompass a computer program accessible from any computer readable device carrier or media. Of course those skilled in the art will recognize many modifications may be made to this configuration without departing from the scope or spirit of the claimed subject matter.

Although not required embodiments are described in the general context of computer readable instructions being executed by one or more computing devices. Computer readable instructions may be distributed via computer readable media discussed below . Computer readable instructions may be implemented as program modules such as functions objects Application Programming Interfaces APIs data structures and the like that perform particular tasks or implement particular abstract data types. Typically the functionality of the computer readable instructions may be combined or distributed as desired in various environments.

In other embodiments device may include additional features and or functionality. For example device may also include additional storage e.g. removable and or non removable including but not limited to magnetic storage optical storage and the like. Such additional storage is illustrated in by storage . In one embodiment computer readable instructions to implement one or more embodiments provided herein may be in storage . Storage may also store other computer readable instructions to implement an operating system an application program and the like. Computer readable instructions may be loaded in memory for execution by processing unit for example.

The term computer readable media as used herein includes computer storage media. Computer storage media includes volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions or other data. Memory and storage are examples of computer storage media. Computer storage media includes but is not limited to RAM ROM EEPROM flash memory or other memory technology CD ROM Digital Versatile Disks DVDs or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can be accessed by device . Any such computer storage media may be part of device .

Device may also include communication connection s that allows device to communicate with other devices. Communication connection s may include but is not limited to a modem a Network Interface Card NIC an integrated network interface a radio frequency transmitter receiver an infrared port a USB connection or other interfaces for connecting computing device to other computing devices. Communication connection s may include a wired connection or a wireless connection. Communication connection s may transmit and or receive communication media.

The term computer readable media may include communication media. Communication media typically embodies computer readable instructions or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term modulated data signal may include a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal.

Device may include input device s such as keyboard mouse pen voice input device touch input device infrared cameras video input devices and or any other input device. Output device s such as one or more displays speakers printers and or any other output device may also be included in device . Input device s and output device s may be connected to device via a wired connection wireless connection or any combination thereof. In one embodiment an input device or an output device from another computing device may be used as input device s or output device s for computing device .

Components of computing device may be connected by various interconnects such as a bus. Such interconnects may include a Peripheral Component Interconnect PCI such as PCI Express a Universal Serial Bus USB firewire IEEE 1394 an optical bus structure and the like. In another embodiment components of computing device may be interconnected by a network. For example memory may be comprised of multiple physical memory units located in different physical locations interconnected by a network.

Those skilled in the art will realize that storage devices utilized to store computer readable instructions may be distributed across a network. For example a computing device accessible via network may store computer readable instructions to implement one or more embodiments provided herein. Computing device may access computing device and download a part or all of the computer readable instructions for execution. Alternatively computing device may download pieces of the computer readable instructions as needed or some instructions may be executed at computing device and some at computing device .

Various operations of embodiments are provided herein. In one embodiment one or more of the operations described may constitute computer readable instructions stored on one or more computer readable media which if executed by a computing device will cause the computing device to perform the operations described. The order in which some or all of the operations are described should not be construed as to imply that these operations are necessarily order dependent. Alternative ordering will be appreciated by one skilled in the art having the benefit of this description. Further it will be understood that not all operations are necessarily present in each embodiment provided herein.

Moreover the word exemplary is used herein to mean serving as an example instance or illustration. Any aspect or design described herein as exemplary is not necessarily to be construed as advantageous over other aspects or designs. Rather use of the word exemplary is intended to present concepts in a concrete fashion. As used in this application the term or is intended to mean an inclusive or rather than an exclusive or . That is unless specified otherwise or clear from context X employs A or B is intended to mean any of the natural inclusive permutations. That is if X employs A X employs B or X employs both A and B then X employs A or B is satisfied under any of the foregoing instances. In addition the articles a and an as used in this application and the appended claims may generally be construed to mean one or more unless specified otherwise or clear from context to be directed to a singular form.

Also although the disclosure has been shown and described with respect to one or more implementations equivalent alterations and modifications will occur to others skilled in the art based upon a reading and understanding of this specification and the annexed drawings. The disclosure includes all such modifications and alterations and is limited only by the scope of the following claims. In particular regard to the various functions performed by the above described components e.g. elements resources etc. the terms used to describe such components are intended to correspond unless otherwise indicated to any component which performs the specified function of the described component e.g. that is functionally equivalent even though not structurally equivalent to the disclosed structure which performs the function in the herein illustrated exemplary implementations of the disclosure. In addition while a particular feature of the disclosure may have been disclosed with respect to only one of several implementations such feature may be combined with one or more other features of the other implementations as may be desired and advantageous for any given or particular application. Furthermore to the extent that the terms includes having has with or variants thereof are used in either the detailed description or the claims such terms are intended to be inclusive in a manner similar to the term comprising. 

