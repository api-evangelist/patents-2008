---

title: De-serializing data objects on demand
abstract: The invention is directed to techniques for de-serializing data from a software system, such as an enterprise software system, upon request. For example, techniques are described for converting a data description language, such as the extensible markup language (XML), representation of data from an enterprise software system to an object when requested by a software application. A computing device connected to the enterprise software system loads multidimensional data via an XML data stream. The XML data is de-serialized to create objects as the objects are requested by software applications executing on the computing device. The remaining XML data may be stored on the computing device until the corresponding objects are requested by the software applications.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08171023&OS=08171023&RS=08171023
owner: International Business Machines Corporation
number: 08171023
owner_city: Armonk
owner_country: US
publication_date: 20080821
---
This application is a continuation of and claims priority to U.S. patent application Ser. No. 10 998 409 filed Nov. 29 2004 the entire content of which is incorporated herein by reference.

The invention relates to software systems and in particular techniques for de serializing a data description language stream into an object.

Enterprise software systems are typically sophisticated large scale systems that support many e.g. hundreds or thousands of concurrent users. Examples of enterprise software systems include financial planning systems budget planning systems order management systems inventory management systems sales force management systems business intelligent tools enterprise reporting tools project and resource management systems and other enterprise software systems.

In a typical computing environment remove client devices often retrieve enterprise data from the enterprise software system. However the enterprise software system often stores the enterprise data as multidimensional data comprising complicated object definitions and data types that cannot easily be transmitted to the user device via most communication protocols such as the Transmission Control Protocol Internet Protocol TCP IP . Therefore the enterprise planning system may serialize the multidimensional data into a data description language such as the extensible markup language XML which expresses the enterprise planning data as plain text for transmission.

Upon receiving the serialized transmission the client device de serializes the XML stream into objects or in the case of multi dimensional data a hierarchy of objects. The representation of multi dimensional data as objects can include tens of thousands of object instantiations. Some programming languages although optimized for object oriented programming begin to slow down during the creation and especially the deletion of many small objects. In an attempt to prevent the slow down the XML representation of the data may be broken into multiple XML calls. The user device may then retrieve subsets of the XML from the enterprise software system as needed. For example the client device may initially on retrieve the highest levels of the object hierarchy and retrieve subsequent levels when requested by the software executing on the client device. In this way the client device does not retrieve data from the enterprise system that is never actually needed by the client device. This process of retrieving data from the enterprise system as needed is often referred to as load on demand. 

In general the invention is directed to techniques for de serializing data from a software system such as an enterprise software system as needed. For example techniques are described for de serializing i.e. converting a data description language such as the extensible markup language XML representation of data from an enterprise software system to an object when needed by a software application within the enterprise software system.

The techniques allow an XML stream of serialized data representing an object model to be loaded onto a computing device from the enterprise software system. The XML data is de serialized to create objects as the objects are requested by software applications executing on the computing device. The remaining XML data may be stored on the computing device until the corresponding objects are requested by the software applications.

The serialized data received from the enterprise software system may comprise multi dimensional data which can be de serialized into a hierarchy of objects. The de serialize on demand techniques discussed herein allow large object hierarchies to be constructed on an as needed basis. The techniques may reduce object instantiation and deletion time by only de serializing the stored XML data and creating those objects requested by the software applications.

In addition the techniques described herein may be utilized in conjunction with a load on demand process that selectively retrieves the XML data from the enterprise software system when requested. For example portions of object hierarchies may be selectively retrieved from the enterprise software system as XML data when needed. The retrieved XML data may be buffered and only de serialized into particular objects when the specific objects are requested by the software applications executing on the computing device.

In one embodiment a method comprises storing serialized data in accordance with a data description language to define a hierarchical object model having a plurality of data objects. The method further comprises receiving a request to access one of the plurality of data objects defined by the stored serialized data and processing at least a portion of the serialized data to create the requested data object in response to the request.

In another embodiment a computer comprises a software application executing within on the computer and a computer readable medium storing serialized data in accordance with a data description language to define a hierarchical object model having a plurality of data objects. The computer further comprises de serialization software executing on the computer to process at least a portion of the serialized data to create the data objects when the software application requests access to the data objects.

In another embodiment a computer readable medium comprises instruction that cause a programmable processor of a computing device to execute a plurality of software applications on the computing device store serialized data in accordance with a data description language to define a hierarchical object model having a plurality of data objects and receive a request from one of the plurality of software applications to access one of the plurality of data objects defined by the serialized data. The computer readable medium further comprises instructions that identify a portion of the serialized data that corresponds to the requested data object and convert the identified portion of the serialized data into the requested data object.

The details of one or more embodiments of the invention are set forth in the accompanying drawings and the description below. Other features objects and advantages of the invention will be apparent from the description and drawings and from the claims.

For exemplary purposes the invention will be described in reference to an enterprise planning system such as an enterprise financial or budget planning system. The techniques described herein may be readily applied to other software systems including other large scale enterprise software systems. Examples of enterprise software systems include order management systems inventory management systems sales force management systems business intelligent tools enterprise reporting tools project and resource management systems and other enterprise software systems.

In general enterprise planning system enables and automates the reconciliation of top down targets with detailed bottom up forecasts for an enterprise. Enterprise planning system implements and manages an enterprise planning process which can be divided into three functions 1 modeling 2 contribution and 3 reconciliation.

Initially high level enterprise managers or executives referred to as analysts define organizational targets and build planning models for the enterprise. The analysts may include for example financial analysts such as the chief financial officer senior financial analysts or product and sales analysts. More specifically the analysts develop a model having a number of hierarchically arranged nodes representing various cost centers within the organization such as business units or departments. The analysts specify corporate target data for each node of the organizational hierarchy. Corporate target data may include financial data revenue data order data inventory data and the like depending on the particular enterprise planning activity being carried out by the enterprise. The analysts then assign one or more enterprise users to each node such as managers supervisors sales representatives lab managers or the like that are responsible for enterprise planning for the cost center corresponding to the node. Each enterprise user may be designated as a contributor that provides planning data to enterprise planning system a reviewer that accepts or rejects contributions from the contributors or both. The contributors and reviewers may be authorized users within the enterprise or within other entities coupled to network such as suppliers or customers.

Next enterprise users that are designated as contributors interact with enterprise planning system to input detailed forecasts in the form of contribution data. As described above enterprise users may provide detailed financial forecasts revenue forecasts order forecasts inventory forecasts estimated resource requirements and the like depending on the particular enterprise planning activity being carried out by the enterprise.

Enterprise planning system automates the reconciliation of the forecast data with the corporate target data provided by the analysts. In particular enterprise planning system operates in accordance with a defined model i.e. the enterprise planning model created by the analysts to provide a hierarchical planning process having multiple reconciliation levels. As each of the contributors provides his or her contribution data enterprise planning system automatically aggregates the contribution data across the enterprise in real time and provides access to the aggregated data to enterprise users designated as reviewers associated with higher levels of the enterprise. In particular upon receiving contribution data from the contributors enterprise planning system identifies all higher levels of the organizational model affected by the newly received contribution data and calculates new aggregate totals at each level in real time.

Consequently the reviewers view aggregated data across the enterprise in real time during the enterprise planning session. At each level enterprise planning system ensures that the reviewers as defined by the nodes of the enterprise model reconcile the target data with the forecast data. Each of the reviewers may for example reject or accept the contribution data in view of corporate targets provided by the analysts. This process continues until the contribution data is ultimately approved by the highest level of the organizational hierarchy thereby ensuring that the contribution data from the contributors reconciles with corporate targets provided by the analysts.

In this manner enterprise planning system may provide more accurate enterprise planning than with conventional techniques. For example enterprise planning system may improve the accuracy and predictability of enterprise planning by enabling organizations to reconcile corporate models and organizational targets with detailed forecasts. The techniques may provide a platform that delivers collaborative real time planning capabilities without requiring offline consolidation and aggregation of forecasts. Because enterprise planning system can aggregate contribution data in real time all users can be presented with an accurate up to date view of the numbers. Further the architecture of enterprise planning system can readily scale to thousands of users and may be designed around best planning practices. In addition the techniques enabling high participation by enterprise users i.e. the contributors and reviewers allowing accurate planning cycles to be reduced

Enterprise users may use a variety of computing devices to interact with enterprise planning system via network . For example an enterprise user may interact with enterprise planning system using a laptop computer desktop computer or the like running a web browser such as Internet Explorer from Microsoft Corporation of Redmond Wash. Alternatively an enterprise user may use a personal digital assistant PDA such as a Palm organizer from Palm Inc. of Santa Clara Calif. a web enabled cellular phone or similar device.

Network represents any communication network such as a packet based digital network like the Internet. In this manner system can readily scale to suit large enterprises. Enterprise users may directly access enterprise planning system via a local area network or may remotely access enterprise planning system via a virtual private network remote dial up or similar remote access communication mechanism.

Enterprise planning system may utilize a cut down process by which the multidimensional data store is sliced for each user in accordance with the defined enterprise model. During this process enterprise planning system identifies areas of the defined model to which users are assigned either as contributors or reviewers and slices the data store based on the assignments. When a given user logs in and proceeds with an enterprise planning activity enterprise planning system communicates the respective data slice to the respective computing device for display to the user via the extended spreadsheet application. In this fashion enterprise planning system need not communicate the entire model to each of users thereby reducing communication time as well as resource requirements. Instead each user receives only relevant information. Users interact with computing devices to capture contribution data and to reconcile the contribution data with organizational targets.

The multidimensional data received from enterprise planning system often comprises complicated object definitions. For this reason enterprise planning system serializes the multidimensional data into a data description language such as the extensible markup language XML which expresses the data as plain text for transmission to computing devices .

As described herein computing devices apply techniques for de serializing the data description language stream into data objects when specifically needed by enterprise planning software executing on the computing devices. Specifically each of computing devices includes an application programming interface API for receiving data requests from a software application executing on computing device and returning the de serialized data to the software application.

The data slices may comprise multi dimensional data. The representation of the multi dimensional data as objects can include tens of thousands of object instantiations.

For example computing devices load XML representations of the multidimensional data i.e. the respective slices associated with users from enterprise software system . When a software application executing on one of computing devices requests access to an object associated with the multidimensional data an object model interface of the respective computing device directs a de serialization module to convert i.e. de serialize a respective portion of the XML data into the requested data object.

Often the XML data represents a hierarchy of data objects comprising parent objects and child objects. As a result the parent objects are de serialized when specifically requested by the enterprise planning software and the child objects lower in the hierarchy remain stored as XML data until requested by the software application.

In this fashion an object hierarchy may be constructed from the XML data in a top down fashion as needed. As a result the de serialize on demand techniques reduces object instantiation and deletion time associated with the object hierarchy by only de serializing and instantiating those objects that are actually requested by a software application.

In addition a load on demand process may used in conjunction with the de serialize on demand process described herein. Client device A for example may selectively retrieve portions of object hierarchies from enterprise software system as XML data when needed. The retrieved XML data may be buffered and only de serialized into particular objects when the specific objects are requested by the software applications executing on the computing device.

In one embodiment calculation engine comprises a forward calculation engine wrapped in an Active X object built in an array based language. In the example of enterprise planning user A may interact with web browser to enter and manipulate enterprise planning data such as budget or forecast data. Data cube contains planning data which may include top down targets and bottom up contribution data and allows all calculations for an enterprise planning session to be performed locally by computing device A. Therefore in this example a contributor can modify his or her respective contribution data and perform calculations necessary for the enterprise planning process without necessarily accessing enterprise planning system . In other words calculation engine and data cube may be maintained locally e.g. as ActiveX components via computing device A. User A may save the planning data locally and submit the planning data to enterprise planning system for aggregation with the planning data from other users .

Enterprise planning system automatically aggregates the contribution data across enterprise in real time and provides access to the aggregated data to reviewers associated with higher levels of the enterprise. This process continues until the contribution data is ultimately approved by the reviewers associated with the highest level of the organizational hierarchy thereby ensuring that the contribution data from the contributors reconciles with corporate targets. In other embodiments calculation engine and data cube may be maintained only at enterprise planning system and installed locally upon computing devices .

Planning applications represent software applications executing on computing device A. For example planning applications may include reporting tools modeling tools spreadsheet applications data collection templates business intelligence tools or other types of enterprise planning applications.

Object model interface comprises an application programming interface API that exposes object model . For example object model may be a metadata model for data cube .

In general object model represents any hierarchy of data objects and may comprise a series of collections and objects within the collections. In other words object model may comprises a hierarchy of objects each of which contains a collection which in turn provides access to one or more objects. Object model may be wrapped to protect the objects within the collections. In this way user A and planning applications cannot alter the data within object model . Instead planning applications retrieve the objects from object model via object model interface . In particular object model interface receives data requests from planning applications and returns the requested de serialized data to planning applications .

As illustrated in object model includes an XML store such that an XML representation of enterprise data required during the planning session may be loaded from enterprise planning system before de serialization into object model . XML store may include an XML stream for an entire slice associated with user A. In other cases XML store may include a subset of the slice the remaining portion of the slice is loaded from enterprise planning system when needed by planning applications using a load on demand process.

When one of planning applications requests access to object model object model interface determines whether the requested object has already been instantiated. If an instantiation for the desired object does not exist in object model object model interface identifies the corresponding XML data within XML store . Object model interface then directs de serialization module to de serialize the XML that represents the requested data into an object in object model . Object model interface may then return the de serialized data object or a handle to the object to the requesting one of planning applications . The remaining data objects of object model i.e. the lower level child objects remain stored in XML store in XML form until requested by one of planning applications .

In some situations planning applications may request information about data objects stored in XML store . For example one of planning applications may issue a request to count the data objects within a given collection. In that case object model interface need not instantiate and directly access the particular data objects. As a result object model interface may return the requested information without de serializing and instantiating the associated objects.

The following XML listing illustrates exemplary serialized data that may be provided by enterprise planning system and stored within XML store . In this example the serialized data defines an object hierarchy having four dimensions submissions company accounts and periods. For each dimension the XML defines one or more items and each item has one or more attributes.

In particular a dimension of multidimensional data generally is defined as a hierarchy of parent nodes and child subnodes. The dimension hierarchy may be represented by the object hierarchy within object model . In other words each object within object model represents a node within the dimension and provides access to the multidimensional data associated with the respective node.

In the illustrated embodiment object model includes a dimension collection which contains dimension objects A and B. In other embodiments dimension collections may contain any number of dimension objects . In some cases object model interface may direct de serialization module to create all objects within dimension collection when one of planning applications attempts to access either of dimension objects A or B. In other cases object model interface may direct de serialization module to only create the requested object. In either case object model stores the XML data that describes each of dimension objects and only de serializes the stored XML data when one or planning applications requests multidimensional data represented by the objects.

As further illustrated each of dimension objects may include an item collection. illustrates an expansion of item collection within dimension object B. In this example item collection contains item object A and item object B. Item object B is shown to include an attribute collection which contains attribute objects A and B.

When one of planning applications requests data associated with a dimension object within a dimension collection object model interface directs de serialization module to access XML store convert the corresponding XML data and instantiate dimension object .

Once dimension object is instantiated object model interface passes dimension object the XML data associated with the dimension object. Dimension object uses attributes specified in the XML data to prepare properties of the object. Dimension object stores the XML data within dimension node store for use as needed to create its child objects i.e. object of item collection in this example.

In similar fashion when one of planning applications requests multidimensional data associated with an item object within item collection object model interface directs de serialization module to convert the corresponding XML data stored in dimension node store and instantiate the item object. Once item object is instantiated object model interface passes item object its corresponding XML data. Item object uses attributes included in the XML data to prepare properties of the object and stores the XML data within item node store for use as needed to create child objects from attribute collection .

When one of planning applications requests data associated with an attribute object within attribute collection object model interface directs de serialization module to convert the corresponding XML data stored in item node store . Again once attribute object is instantiated object model interface passes attribute object its respective XML data. Attribute object uses attributes included in the XML data to prepare properties of the object. If attribute object has any child objects defined within the XML data the attribute object stores its XML data within attribute node store .

In this manner once instantiated the objects at each level of object model store their respective XML data and utilize the XML data to instantiate child objects as needed.

Initially object model interface loads an XML representation of multidimensional data from enterprise planning system into XML store . In some embodiments an XML stream representing all of the planning data associated with user A i.e. a slice may be loaded into XML store . In other embodiments a load on demand processes may be utilized to load only a subset of the needed multidimensional data with the remaining data being loaded upon request by any of planning applications .

Upon loading the XML representation object model interface may de serialize and instantiate an initial portion of object model . For example object model interface may de serialize and instantiate dimension collection shown in the example of . During this process object model interface access XML store to retrieve the corresponding XML data de serialize the corresponding XML data and instantiate dimension object . Object model interface passes dimension object the XML data associated with the dimension object for initialization of attributes subsequent use if needed to create child objects.

Next any of planning applications may issue requests via object model interface to access object model . For example planning applications may issue requests to access properties of the instantiated portion of object model e.g. dimension collection in this example. In this case object model interface returns the proper values without de serializing additional XML data as the attributes have already been loaded.

However planning application may issue requests that require access to a child object . For example planning application may attempt to index a child object iterate on the child objects or access an attribute associated with a child object.

In this case object model interface accesses object model to determine whether the requested data object has already been instantiated within the object model . If the data object does already exists yes branch of object model interface access the requested child data object in accordance with the request. Object model interface may for example return a handle to the child data object return an attribute associated with the child data object return a count of the child data objects or return some other parameter .

If however the requested child data object does not exist in object model no branch of the parent data object de serializes the requested child data object based on the stored XML data and accesses the child data object in accordance with the original request . If the XML data store of the parent data object does not include the XML necessary to de serialize the requested data object the parent data object raises an error .

The parent data object then passes the newly instantiated child object its corresponding XML data corresponding to as described in . The newly created object then uses attributes included in the XML node to prepare its properties . In the event the XML defines lower level child objects the newly created object stores the XML data for later use to create the child objects when requested by one of planning applications . The child object then initializes one or more flags or other marker indicating that its child objects have not yet been converted into objects .

Finally after the child object has been instantiated and initialized the parent object may delete the XML data used in creating the child node in order to conserve memory .

Various embodiments of the invention have been described. Although described in reference to an enterprise planning system such as an enterprise financial or budget planning system the caching techniques may be readily applied to other software systems including other large scale enterprise software systems. Examples of other enterprise software systems include order management systems inventory management systems sales force management systems business intelligent tools enterprise reporting tools project and resource management systems and other enterprise software systems. Moreover the techniques may be implemented on any type of computing device including client devices servers or other devices. These and other embodiments are within the scope of the following claims.

