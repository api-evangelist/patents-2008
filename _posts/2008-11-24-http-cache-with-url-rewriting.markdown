---

title: HTTP cache with URL rewriting
abstract: URL rewriting is a common technique for allowing users to interact with internet resources using easy to remember and search engine friendly URLs. When URL rewriting involves conditions derived for sources other than the URL, inconsistencies in HTTP kernel cache and HTTP user output cache may arise. Methods and a system for rewriting a URL while preserving cache integrity are disclosed herein. Conditions used by a rule set to rewrite a URL may be determined as cache friendly conditions or cache unfriendly conditions. If cache unfriendly conditions exist, the HTTP kernel cache is disabled and the HTTP user output cache is varied based upon a key. If no cache unfriendly conditions exist, then the HTTP kernel cache is not disabled and the HTTP user output cache is not varied. A rule set is applied to the URL and a URL rewrite is performed to create a rewritten URL.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08073829&OS=08073829&RS=08073829
owner: Microsoft Corporation
number: 08073829
owner_city: Redmond
owner_country: US
publication_date: 20081124
---
URLs are commonly used as text based addresses to identify internet resources e.g. web pages . It may be advantageous to identify an internet resource that may be easily remembered by a user and easily found through search engines. Because a URL may comprise additional information used by the internet resource the URL may become complex and difficult to discover through searches. URL rewriting is a common technique to allow users to interact with an internet resource using a simple URL. The user may enter a simple URL that is then rewritten to a URL comprising more complex and useful information for the internet resource e.g. information concerning the web browser requesting the URL . Another technique used to enhance a user s experience with internet resources is caching techniques allowing URL and or internet data to be stored for quick access.

This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key factors or essential features of the claimed subject matter nor is it intended to be used to limit the scope of the claimed subject matter.

A technique for rewriting an input URL while preserving the integrity of HTTP kernel cache and HTTP user output cache is provided herein. An input URL comprising at least one condition is received. The input URL may be comprised within an HTTP request. The condition may relate to an HTTP header HTTP server variables and or other information that may be used in applying a rule set to the input URL. A determination is made as to whether at least one condition is cache unfriendly. The condition may be cache unfriendly if the condition derives from a source other than the input URL e.g. an HTTP server variable deriving from web browser information . The condition may be cache friendly if the condition derives from the input URL and or is a constant value. A server e.g. a web hosting process may resolve HTTP server variables corresponding to an HTTP request for example.

If at least one cache unfriendly condition exists then a key is created comprising a concatenation of the input URL and the cache unfriendly conditions. A rule set is executed upon the input URL to create an output URL. The execution of the rule set may be bypassed if a cached rewritten URL corresponding to the input URL exists within an internal cache. If at least one cache unfriendly condition exists then a HTTP kernel cache is disabled and an HTTP user output cache is varied based upon the key. A URL rewrite is performed on the output URL to create a rewritten URL. If the rewritten URL is frequently accessed then the rewritten URL may be stored within the internal cache as a cached rewritten URL. This technique allows HTTP user output cache and or HTTP kernel cache to be utilized in certain situations. For example if no cache unfriendly conditions exist then HTTP kernel cache may still be used to provide improved performance. HTTP user output cache is not disabled but is altered based upon the cache unfriendly conditions thus mitigating cache inconsistencies while maintaining improved performance from utilizing the cache.

To the accomplishment of the foregoing and related ends the following description and annexed drawings set forth certain illustrative aspects and implementations. These are indicative of but a few of the various ways in which one or more aspects may be employed. Other aspects advantages and novel features of the disclosure will become apparent from the following detailed description when considered in conjunction with the annexed drawings.

The claimed subject matter is now described with reference to the drawings wherein like reference numerals are used to refer to like elements throughout. In the following description for purposes of explanation numerous specific details are set forth in order to provide a thorough understanding of the claimed subject matter. It may be evident however that the claimed subject matter may be practiced without these specific details. In other instances structures and devices are illustrated in block diagram form in order to facilitate describing the claimed subject matter.

URL rewriting provides users with easy to remember and search engine friendly URLs corresponding to internet resources. URL rewriting allows modification to the appearance of a web site s URL based upon a rule set and conditions which may be based on contextual information. URL rewriting may be accomplished by applying the rule set to a URL to produce a rewritten URL. For example a user may input a URL www.carmaker.com carmodel to access an internet resource. The input URL may be easy for the user to remember and understand. Once the input URL is received a URL rewriting module may apply a rule set to the input URL to create a rewritten URL www.carmaker.com 2348 authenicated region3 en us carmodel a 3 . The input URL is more concise and user friendly than the rewritten URL but the input URL is rewritten because the internet resource may take advantage of additional information within the rewritten URL that is not provided in the input URL.

Another technique used in accessing internet resources is caching. Two common types of caching are HTTP kernel cache and HTTP user output cache e.g. caching technique used in IIS . HTTP kernel cache may increase performance of a web page e.g. load time by storing frequently accessed static content for quick access in subsequent requests. HTTP user output cache may increase performance of a web page by storing frequently accessed dynamic content of the web page in memory for quick access in subsequent requests. The HTTP user output cache may be based upon URLs. The dynamic content may be varied based upon contextual information within an HTTP header. HTTP user output cache may expose an API allowing for additional information to be provided to the HTTP user output cache.

Conflicts and inconsistencies may arise between URL rewriting and caching techniques e.g. HTTP user cache and HTTP kernel cache . URL rewriting may be based upon a rule set that comprise conditions based on contextual information such as HTTP server variables and HTTP headers. Because the caching techniques may not be aware of conditions within the rules incorrect content for a particular HTTP request may be cached. For example a URL rewriting module may apply a set of rules with conditions based upon contextual information within HTTP server variables and or HTTP headers to an input URL. The input URL may be received comprising a first HTTP server variable that is derived from the input URL and a second HTTP server variable that is derived from a source other than the input URL e.g. UserAgent server variable describing the web browser that made the HTTP request . An HTTP kernel cache may have access to information regarding the input URL but not the HTTP server variables therefore the HTTP kernel cache may be able to understand the first HTTP server variable derived from the input URL but not the second HTTP server variable derived from another source. The HTTP kernel cache may incorrectly store URL information regarding the input URL and or rewritten URL because the HTTP kernel cache is unaware of the second HTTP server variable which may have been used in rewriting the input URL.

A current approach to solving cache inconsistencies with URL rewriting is to disable the HTTP kernel cache every time an input URL is rewritten which minimizes the effectiveness of HTTP kernel cache. The HTTP kernel cache is disabled because there is a potential that the URL rewriting may comprise conditions derived from sources other than the input URL. The HTTP kernel cache is unaware on these conditions. Disabling kernel cache during every URL rewrite mitigates the chance that a cached URL is incorrectly returned to a user in response to a request for an internet resource. For example a cached URL may be incorrectly returned when a user provides a similar input URL with different conditions than the cached URL was rewritten from where the different conditions are derived from sources other than the input URL. This approach is ineffective because the HTTP kernel cache is disabled even though the URL rewriting may only comprise conditions derived from the input URL which the HTTP kernel cache understands. The increased performance from HTTP kernel cache is lost because the HTTP kernel cache is disabled.

As provided herein a URL may be rewritten while mitigating cache integrity issues. An HTTP user output cache may be configured to vary based upon conditions within a rule set used to rewrite an input URL. An HTTP kernel cache may be disabled if cache integrity would be not preserved based upon conditions used within the rule set used to rewrite the input URL. The input URL may comprise conditions within HTTP server variables and or HTTP headers. If a condition is derived from the input URL and or is a constant then the condition is cache friendly. A condition is cache friendly because the HTTP kernel cache understands the input URL and therefore may be aware of the condition derived from the input URL. If the condition is not derived from the input URL e.g. the condition is derived from a non URL derived HTTP server variable then the condition is cache unfriendly. A condition is cache unfriendly because the HTTP kernel cache in unaware of the condition because the condition may be derived from sources e.g. web browser unknown to the HTTP kernel cache.

If the input URL comprises cache friendly conditions and no cache unfriendly conditions then the HTTP kernel cache and or the HTTP user output cache are not disabled or varied because they may be able to understand the cache friendly conditions based upon the input URL. If an input URL comprises at least one cache unfriendly condition then the HTTP kernel cache is disabled because the cache unfriendly conditions are not derived from the input URL. The HTTP user output cache may be varied based upon the unfriendly conditions. For example upon determining the input URL comprises cache unfriendly conditions the cache unfriendly conditions may be concatenated and encoded together with the input URL as a key. The HTTP user output cache may be varied based upon the information within the key to mitigate cache integrity issues.

One embodiment of URL rewriting is illustrated by an exemplary method in . At the method begins. At an input URL comprising at least one condition is received. The input URL may be received in an HTTP request from a web browser. The at least one condition may correspond to an HTTP server variable and or an HTTP header used by a rule set to rewrite the input URL. At a determination is made as to whether the at least one condition is cache unfriendly. For example a condition may be cache unfriendly if the condition corresponds to context information derived from a source other than the input URL e.g. the web browser . A cache friendly conditions list may comprise a list of HTTP server variables and or HTTP headers that are URL derived and or constant. A condition may be determined cache unfriendly if the condition does not corresponding to an HTTP server variable and or HTTP header within the cache friendly conditions list. In another example of determining a cache unfriendly condition the rule set may be examined to determine whether the rule set references HTTP server variables and or HTTP headers derived from sources other than the input URL.

At upon determining the input URL comprises at least one cache unfriendly condition a key comprising the input URL and at least one cache unfriendly condition may be created at . For example the values of the cache unfriendly conditions may be concatenated together and encoded with the input URL. The HTTP user output cache may vary by the concatenated values to ensure correctness. The concatenated values may also serve as a key used in an internal cache used for looking up frequently accessed rewritten URLs e.g. cached rewritten URLs .

At the rule set is executed upon the input URL to produce an output URL. Because at least one cache unfriendly condition was determined the HTTP kernel cache is disabled at . At the HTTP user output cache is varied based upon the key. The HTTP user output cache may expose an API allowing additional information such as the key to be provided to the HTTP user output cache. The key may comprise information regarding the input URL and or a concatenation of the cache unfriendly conditions. Because the HTTP user output cache is provided with the cache unfriendly conditions the HTTP user output cache may vary caching to provide correct cache information. At a URL rewrite is performed on the output URL to produce a rewritten URL. At the method ends.

One embodiment of URL rewriting is illustrated by an exemplary flow diagram in . At an input URL is received. At a determination is made as to whether a cache unfriendly condition exists. A cache unfriendly condition may exists based upon a rule set that is to be applied to the input URL referencing contextual information deriving from a source other than the input URL e.g. an HTTP server variable deriving from a web browser and or a user s operating environment .

At if no cache unfriendly conditions exist e.g. all conditions are derived from the input URL then a determination is made as to whether the input URL is frequently accessed at . If the input URL is frequently accessed then the input URL is used to look up a cached rewritten URL corresponding to the input URL in an internal cache at . The internal cache provides an optimization for quickly retrieving a cached rewritten URL e.g. a rewritten URL corresponding to an input URL without executing the rule set upon the input URL. At a determination is made as to whether the cached rewritten URL exists within the internal cache. If the cached rewritten URL exists then a URL rewrite may be performed at .

If the cached rewritten URL does not exist then a rule set is executed upon the input URL to create an output URL at . A determination is made as to whether cache unfriendly conditions exist at . Because no cache unfriendly conditions exist a URL rewrite is performed on the output URL to create a rewritten URL at .

At if the input URL is not frequently accessed then a rule set is executed upon the input URL to create an output URL at . Because no cache unfriendly conditions exist a URL rewrite is performed on the output URL to create a rewritten URL at .

At if at least one cache unfriendly condition exists then the cache unfriendly conditions are retrieved at . At the cache unfriendly conditions are concatenated with the input URL and may be encoded to create a key. At a determination is made as to whether the input URL is frequently accessed. If the input URL is frequently accessed then the input URL is used to look up a cached rewritten URL corresponding to the input URL in an internal cache using the key at . At a determination is made as to whether the cached rewritten URL exists within the internal cache. If the cached rewritten URL exists then a URL rewrite may be performed at .

If the cached rewritten URL does not exist then a rule set is executed upon the input URL to create an output URL at . A determination is made as to whether cache unfriendly conditions exist at . Because at least one cache unfriendly condition exists the HTTP kernel cache is disabled at . At the HTTP user output cache is varied based upon the key. At a URL rewrite is performed upon the output URL to create a rewritten URL.

At if the input URL is not frequently accessed then a rule set is executed upon the input URL to create an output URL at . Because at least one cache unfriendly condition exists the HTTP kernel cache is disabled at . At the HTTP user output cache is varied based upon the key. At a URL rewrite is performed upon the output URL to create a rewritten URL.

Upon the performance of the URL rewrite to create a rewritten URL at a determination is made as to whether the rewritten URL is frequently accessed at . If the rewritten URL is frequently accessed then the internal cache is updated at . The internal cache may comprise a cached rewritten URL corresponding to a rewritten URL of an input URL. The internal cache allows a cached rewritten URL to be retrieved in place of executing the rule set upon an input URL thus mitigating processing involved with rewriting an input URL. Upon updating the internal cache the URL rewrite ends at . At if the rewritten URL is not frequently accessed then the URL rewrite ends at .

The cache friendly determination component may be configured to determine whether at least one condition within the input URL is cache friendly. For example the cache friendly determination component may examine a rule set that is to be applied to the input URL to determine whether the rule set comprises references to conditions e.g. HTTP server variables HTTP headers etc. deriving from sources other than the input URL . The cache friendly determination component may determine whether a condition is cache friendly by determining if the condition is listed within the cache friendly conditions list . The cache friendly conditions list may comprise a set of URL derived HTTP server variables and or a set of constant HTTP server variables. If the condition matches a condition within the cache friendly conditions list then the condition is determined to be a cache friendly condition. If the condition is not found within the cache friendly conditions list then the condition is determined to be cache unfriendly.

If the cache friendly determination component determines the input URL comprises at least one cache unfriendly component then a key is created comprising the input URL and at least one cache unfriendly condition. The key may comprise the input URL concatenated and encoded with at least one cache unfriendly condition. The cache friendly determination component disables the HTTP kernel cache . The cache friendly determination component sends the key to an HTTP user output cache which is varied based upon the key. The HTTP user output cache may expose an API that may be used to receive the key.

The rule execution component may be configured to execute a rule set upon the input URL to create an output URL. The output URL may be used by the rewrite component to produce a rewritten URL based upon the output URL. The internal cache may be configured to store cached rewritten URLs. The internal cache may provide quick access to frequently rewritten URLs. For example if the frequency of access to a rewritten URL exceeds a predetermined threshold then the rewritten URL may be stored as a cached rewritten URL. An input URL and or a key may be used to look up a cached rewritten URL. The rule execution component may bypass execution of the rule set upon the input URL if the input URL corresponds to at least one cached rewritten URL. The rule execution component may bypass executing the rule set upon the input URL if the key corresponds to at least one cached rewritten URL.

The rewrite component may be configured to execute a URL rewrite upon the output URL to produce a rewritten URL. The rewrite component may execute the URL rewrite based upon a non matching pattern within the output URL.

The web hosting process comprises a URL rewrite module which may be configured to assist in processing an input URL. The web hosting process comprises an HTTP user output cache which may be configured to cache information frequently requested by users e.g. if a dataset is frequently requested then the dataset may be stored in the HTTP user output cache for quick access instead of being retrieved from a database comprising the dataset for every subsequent request . The web hosting process may resolve HTTP server variables corresponding to the HTTP request .

The URL rewrite module comprises a rewrite component a rule execution component a cache friendly determination component a cache friendly conditions list and an internal cache . In example the HTTP request is received from the web browser . The HTTP request may comprise the HTTP header and an input URL e.g. a URL to a webpage a user wants displayed through the web browser . Upon a determination the input URL is to be rewritten e.g. the input URL matches at least one rule within a rule set the cache friendly determination component determines whether at least one condition within the input URL is cache unfriendly. For example the cache friendly determination component may determine whether the rule set that is to be applied to the input URL comprises references to conditions within the input URL that derive from sources other than the input URL. The conditions may be contextual information within the HTTP header and or the HTTP server variables . If a condition derives from a source other than the input URL then the cache friendly determination component determines the condition is a cache unfriendly condition. In another example the cache friendly determination component may determine a condition is a cache unfriendly condition if the condition does not correspond to at least one condition within the cache friendly conditions list .

In example the cache friendly determination component determines there are no cache unfriendly conditions and that the HTTP header and the HTTP server variables are cache friendly conditions e.g. the HTTP header and the HTTP server variables matched conditions within the cache friendly conditions list derive from the input URL and or are constants . Upon determining no cache unfriendly conditions exist the rule execution component may make a determination as to whether the input URL corresponds to a cached rewritten URL within the internal cache . If a corresponding cached rewritten URL is not within the internal cache then the rule execution component executes the rule set upon the input URL to produce an output URL. The rewrite component performs a URL rewrite upon the output URL to produce a rewritten URL. If the rewritten URL is frequently accessed then it may be stored within the internal cache . The internal cache mitigates the execution of the rule set by the rule execution component to improve overall performance in URL rewriting.

The web hosting process comprises a URL rewrite module which may be configured to assist in processing an input URL. The web hosting process comprises an HTTP user output cache which may be configured to cache information frequently requested by users in order to mitigate processing time. The web hosting process may resolve HTTP server variables corresponding to the HTTP request .

The URL rewrite module comprises a rewrite component a rule execution component a cache friendly determination component a cache friendly conditions list and an internal cache . In example the HTTP request is received from the web browser . The HTTP request may comprise the HTTP header and an input URL. Upon a determination the input URL is to be rewritten the cache friendly determination component determines whether at least one condition within the input URL is cache unfriendly. The cache friendly determination component may determine a condition is cache unfriendly if the condition derives from a source other than the input URL and or the condition does not corresponding to at least one condition within the cache friendly conditions list .

In example the cache friendly determination component determines at least one cache unfriendly condition exists. Because at least one cache unfriendly condition exists the cache friendly determination component may create a key comprising the input URL concatenated and encoded with at least one cache unfriendly condition. The cache friendly determination component may disable the HTTP kernel cache because the HTTP kernel cache is unaware of the cache unfriendly conditions e.g. the HTTP kernel cache may only be aware of conditions derived from the input URL and may cache incorrect information. The cache friendly determination component may vary the HTTP user output cache based upon the key thus allowing the HTTP user output cache to cache consistent data corresponding to the input URL the cache unfriendly conditions and or cache friendly conditions.

The rule execution component may execute a rule set upon the input URL to create an output URL. The rule execution component may bypass executing the rule set if a cached rewritten URL corresponding to the input URL exists within the internal cache . The rewrite component performs a URL rewrite upon the output URL to create a rewritten URL which may be stored within the internal cache if the URL is frequently accessed.

The HTTP kernel cache is disabled because the HTTP kernel cache may cache incorrect URL and or web application data e.g. a dataset HTTP corresponding to a web page etc. without correctly understanding the cache unfriendly HTTP server variable 1 . For example if web browser B provides a similar input URL within an HTTP request 2 then the HTTP kernel cache may respond with the same data that was returned to web browser A . An inconsistency arises when the HTTP kernel cache returns similar data to web browser A and web browser b when in actuality the data may be different because of the different HTTP server variables that the HTTP kernel cache could not take into account. The HTTP kernel cache is unaware of the HTTP server variables e.g. an HTTP server variable and is unable to distinguish a variance that may exists in a response to a similar input URL having different cache unfriendly conditions.

The increased performance from the HTTP kernel cache is harnessed because a determination is made as to whether cache unfriendly conditions exist. If no cache unfriendly conditions exist then the HTTP kernel cache may not be disabled and is operable to cache URL and or web application data. Similarly the increased performance from the HTTP user output cache is harnessed because the HTTP user output cache is not disabled but is varied based upon cache unfriendly conditions.

Still another embodiment involves a computer readable medium comprising processor executable instructions configured to implement one or more of the techniques presented herein. An exemplary computer readable medium that may be devised in these ways is illustrated in wherein the implementation comprises a computer readable medium e.g. a CD R DVD R or a platter of a hard disk drive on which is encoded computer readable data . This computer readable data in turn comprises a set of computer instructions configured to operate according to one or more of the principles set forth herein. In one such embodiment the processor executable instructions may be configured to perform a method such as the exemplary method of for example. In another such embodiment the processor executable instructions may be configured to implement a system such as the exemplary system of for example. Many such computer readable media may be devised by those of ordinary skill in the art that are configured to operate in accordance with the techniques presented herein.

Although the subject matter has been described in language specific to structural features and or methodological acts it is to be understood that the subject matter defined in the appended claims is not necessarily limited to the specific features or acts described above. Rather the specific features and acts described above are disclosed as example forms of implementing the claims.

As used in this application the terms component module system interface and the like are generally intended to refer to a computer related entity either hardware a combination of hardware and software software or software in execution. For example a component may be but is not limited to being a process running on a processor a processor an object an executable a thread of execution a program and or a computer. By way of illustration both an application running on a controller and the controller can be a component. One or more components may reside within a process and or thread of execution and a component may be localized on one computer and or distributed between two or more computers.

Furthermore the claimed subject matter may be implemented as a method apparatus or article of manufacture using standard programming and or engineering techniques to produce software firmware hardware or any combination thereof to control a computer to implement the disclosed subject matter. The term article of manufacture as used herein is intended to encompass a computer program accessible from any computer readable device carrier or media. Of course those skilled in the art will recognize many modifications may be made to this configuration without departing from the scope or spirit of the claimed subject matter.

Although not required embodiments are described in the general context of computer readable instructions being executed by one or more computing devices. Computer readable instructions may be distributed via computer readable media discussed below . Computer readable instructions may be implemented as program modules such as functions objects Application Programming Interfaces APIs data structures and the like that perform particular tasks or implement particular abstract data types. Typically the functionality of the computer readable instructions may be combined or distributed as desired in various environments.

In other embodiments device may include additional features and or functionality. For example device may also include additional storage e.g. removable and or non removable including but not limited to magnetic storage optical storage and the like. Such additional storage is illustrated in by storage . In one embodiment computer readable instructions to implement one or more embodiments provided herein may be in storage . Storage may also store other computer readable instructions to implement an operating system an application program and the like. Computer readable instructions may be loaded in memory for execution by processing unit for example.

The term computer readable media as used herein includes computer storage media. Computer storage media includes volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions or other data. Memory and storage are examples of computer storage media. Computer storage media includes but is not limited to RAM ROM EEPROM flash memory or other memory technology CD ROM Digital Versatile Disks DVDs or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can be accessed by device . Any such computer storage media may be part of device .

Device may also include communication connection s that allows device to communicate with other devices. Communication connection s may include but is not limited to a modem a Network Interface Card NIC an integrated network interface a radio frequency transmitter receiver an infrared port a USB connection or other interfaces for connecting computing device to other computing devices. Communication connection s may include a wired connection or a wireless connection. Communication connection s may transmit and or receive communication media.

The term computer readable media may include communication media. Communication media typically embodies computer readable instructions or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term modulated data signal may include a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal.

Device may include input device s such as keyboard mouse pen voice input device touch input device infrared cameras video input devices and or any other input device. Output device s such as one or more displays speakers printers and or any other output device may also be included in device . Input device s and output device s may be connected to device via a wired connection wireless connection or any combination thereof. In one embodiment an input device or an output device from another computing device may be used as input device s or output device s for computing device .

Components of computing device may be connected by various interconnects such as a bus. Such interconnects may include a Peripheral Component Interconnect PCI such as PCI Express a Universal Serial Bus USB firewire IEEE 1394 an optical bus structure and the like. In another embodiment components of computing device may be interconnected by a network. For example memory may be comprised of multiple physical memory units located in different physical locations interconnected by a network.

Those skilled in the art will realize that storage devices utilized to store computer readable instructions may be distributed across a network. For example a computing device accessible via network may store computer readable instructions to implement one or more embodiments provided herein. Computing device may access computing device and download a part or all of the computer readable instructions for execution. Alternatively computing device may download pieces of the computer readable instructions as needed or some instructions may be executed at computing device and some at computing device .

Various operations of embodiments are provided herein. In one embodiment one or more of the operations described may constitute computer readable instructions stored on one or more computer readable media which if executed by a computing device will cause the computing device to perform the operations described. The order in which some or all of the operations are described should not be construed as to imply that these operations are necessarily order dependent. Alternative ordering will be appreciated by one skilled in the art having the benefit of this description. Further it will be understood that not all operations are necessarily present in each embodiment provided herein.

Moreover the word exemplary is used herein to mean serving as an example instance or illustration. Any aspect or design described herein as exemplary is not necessarily to be construed as advantageous over other aspects or designs. Rather use of the word exemplary is intended to present concepts in a concrete fashion. As used in this application the term or is intended to mean an inclusive or rather than an exclusive or . That is unless specified otherwise or clear from context X employs A or B is intended to mean any of the natural inclusive permutations. That is if X employs A X employs B or X employs both A and B then X employs A or B is satisfied under any of the foregoing instances. In addition the articles a and an as used in this application and the appended claims may generally be construed to mean one or more unless specified otherwise or clear from context to be directed to a singular form.

Also although the disclosure has been shown and described with respect to one or more implementations equivalent alterations and modifications will occur to others skilled in the art based upon a reading and understanding of this specification and the annexed drawings. The disclosure includes all such modifications and alterations and is limited only by the scope of the following claims. In particular regard to the various functions performed by the above described components e.g. elements resources etc. the terms used to describe such components are intended to correspond unless otherwise indicated to any component which performs the specified function of the described component e.g. that is functionally equivalent even though not structurally equivalent to the disclosed structure which performs the function in the herein illustrated exemplary implementations of the disclosure. In addition while a particular feature of the disclosure may have been disclosed with respect to only one of several implementations such features may be combined with one or more other features of the other implementations as may be desired and advantageous for any given or particular application. Furthermore to the extent that the terms includes having has with or variants thereof are used in either the detailed description or the claims such terms are intended to be inclusive in a manner similar to the term comprising. 

