---

title: Interactive design environments to visually model, debug and execute resource oriented programs
abstract: In scenarios involving a data set accessible through a protocol, operations sets may be formulated for performing various operations on the data set, and may be expressed as resource scripts according to a scripting language. However, such resource scripts may be difficult to design due to the complicated aspects of the interaction, such as asynchrony, network transport, the syntax of the scripting language, and the details of the protocol. A design environment may be devised to facilitate designers in generating resource scripts, e.g., through the manipulation of visual elements. The design environment may abstract the lower-level working details of the resource scripts, and may allow designers to focus on the logical designing of the operations set. The design environment may then automatically generate the resource script from the operations set in accordance with the constraints of the script language and the protocol.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08533666&OS=08533666&RS=08533666
owner: Microsoft Corporation
number: 08533666
owner_city: Redmond
owner_country: US
publication_date: 20081017
---
Many computing scenarios involve a data set such as a file system a database an object set etc. that managed by a host and that is to be updated based on a set of operations such as creating one or more items in the data set reading one or more items in the data set updating one or more items in the data set and or deleting one or more items in the data set together comprising a standard set of CRUD operations. Moreover the host may be accessible through a particular protocol such as HTTP and the operations may correspond to a set of verbs permitted in the protocol e.g. HTTP POST HTTP GET HTTP PUT and HTTP DELETE. An operations set may involve a series of such operations configured in a sequence to achieve a particular result e.g. bidirectionally synchronizing a portion of a filesystem on a remote server with a locally stored version of the same portion of the filesystem. This operations set may be performed on a device other than the host e.g. by issuing a first operation to the host and upon receiving notice of completion of the operation issuing a second operation etc. The operations set may also be performed on the device as part of an application e.g. a data driven application that exchanges data with the host as the source of the data featured in the application.

This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key factors or essential features of the claimed subject matter nor is it intended to be used to limit the scope of the claimed subject matter.

One technique for performing an operations set against the data set managed by the host involves the use of a script language that includes data set instructions corresponding to the verbs of the protocol as well as flow control instructions that specify an altering of the execution flow of operations. A resource script expressed according to this script language may be executed by a script processor that can interpret the operations of the resource script to apply the corresponding protocol verbs to the data set and to alter the execution flow of the resource script based on the flow control operations. Moreover the resource script may be expressed at design time and when the resource script is selected promptly or at a later date for execution an execution context may then be selected such as local execution e.g. by issuing corresponding verbs of the protocol to the host or remote execution e.g. by delivering the script to the host. The execution context may therefore be selected at runtime without compromising the logical flow of operations specified therein.

However it may be difficult to design the resource script in view of the underlying complexities of the interaction. While endeavoring to author a resource script that implements a particular logic e.g. a domain specific business logic a resource script designer may have to understand and attend to many unrelated aspects arising from the configuration of the host and the interaction with the client such as network transport the asynchronous nature of the operations the handling of exceptions and compensation and the serialization of the resource script according to various wire protocols.

Some of this difficulty may be alleviated by the provision of a visual design environment for resource scripts that facilitates the selection organization and configuration of operations in an operations set in compliance with the script language. For example the visual design environment may present to a designer a set of visual elements corresponding to the instructions of the script language that may be positioned e.g. with a mouse to indicate the ordering properties and interrelationships of the operations. The visual design environment may also facilitate the designing of syntactically correct resource scripts by validating the resource script and indicating operations that are incompletely or incorrectly configured. When the designing is complete and the operations set is validated the visual design environment may also facilitate the generating of a resource script the debugging of the resource script through tools such as breakpoints and state inspection and the executing of the resource script in various execution contexts.

To the accomplishment of the foregoing and related ends the following description and annexed drawings set forth certain illustrative aspects and implementations. These are indicative of but a few of the various ways in which one or more aspects may be employed. Other aspects advantages and novel features of the disclosure will become apparent from the following detailed description when considered in conjunction with the annexed drawings.

The claimed subject matter is now described with reference to the drawings wherein like reference numerals are used to refer to like elements throughout. In the following description for purposes of explanation numerous specific details are set forth in order to provide a thorough understanding of the claimed subject matter. It may be evident however that the claimed subject matter may be practiced without these specific details. In other instances structures and devices are shown in block diagram form in order to facilitate describing the claimed subject matter.

Many computing scenarios involve a data set managed by a host such as a filesystem hosted by a filesystem host a database hosted by a database server and an object set hosted by an object server. The data set may be exposed to various clients such as devices and users which may perform various operations on the data set. Many such scenarios include a basic set of operations for manipulating the data set such as create read update and delete operations together referred to as a CRUD model for manipulating data sets. Moreover these operations are often combined in a particular configuration to achieve a particular task such as synchronizing a remote filesystem on a server with a local version of the filesystem or inserting records into a database in a transactional manner.

The computing host may be configured to receive requests for performing such operations if specified according to a particular protocol. For example the host may be configured as an HTTP endpoint such as a webserver and may permit interaction with the data set through a standard set of HTTP verbs. The hypertext transfer protocol was originally devised for communicating with a webserver e.g. to request a page or resource stored on the webserver via HTTP GET and a set of applications provided therein such as HTTP gateway scripts which could be accessed with parameters via HTTP POST many servers translate HTTP requests to particular instructions for manipulating a data set e.g. HTTP POST corresponding to a read instruction HTTP GET corresponding to a create instruction HTTP PUT corresponding to an update instruction and HTTP DELETE corresponding to a delete instruction. This configuration sometimes referred to as a representational state transfer RESTful use of a protocol permits the server to extend access to the data set to a wide range of applications over a widely supported protocol.

Many techniques may be devised for performing an operations set on a data set accessible through a host according to a protocol. One such technique involves a scripting language featuring two types of instructions data set instructions corresponding to the verbs of the protocol and flow control instructions. Data set operations those that specify data set instructions may be processed by the host according to the corresponding verbs of the protocol e.g. an operation comprising a read instruction may be processed by the host as an HTTP GET operation whereas flow control operations those that specify flow control instructions may be evaluated and may alter the execution flow of the resource script e.g. by repeating the performing of particular operations by conditioning the performing of particular instructions on a predicate and or by jumping relocating the flow of execution to a target operation. By expressing an operations set in a resource script having at least one data set operation and at least one flow control operation the client may permit the host to evaluate the resource script in a comparatively lightweight script processor that processes operations pertaining to the data set according to the protocol e.g. by passing the operations through to the components of the host that handle requests through the protocol such as a webserver while the flow control instructions may be handled by the script processor. The script language may also permit instructions to be linked e.g. a conditional operation may be predicated on the success or failure of a preceding operation. In addition the resource script may be specified in a platform agnostic manner such that a choice may be made at execution time of an execution context in which the resource script may be executed. If a local execution context is selected a local script processor may run on the client and issue protocol operations to the server but if a host execution context is selected the resource script may be delivered to a script processor located on the host for remote execution. While the performance of the resource script and applications utilizing the resource script may differ based on the execution context the same logical sequence of operations is performed regardless of the location of the script processor.

While such resource scripts may be advantageously utilized for performing operations sets on data sets designing such resource scripts may be difficult due to the complexity of the interactions. As a first example a designer of a resource script may have to understand the details of the protocol such as the types of operations that the protocol enables and the types of data consume by protocol requests and provided by protocol responses. As a second example the designer may have to understand and account for various aspects of communication such as establishing and utilizing communications network transport costs such as latency serialization and deserialization of data for transport across a network and the graceful handling of communications interruption such as parallel online and offline operations sets. As a third example the designer may have to understand and account for various aspects of the host client relationship such as synchronization authentication and statefulness of the host for both short running and long running resource scripts wherein the host may suspend and store a long running resource script for later resuming and processing. As a fourth example the designer may have to understand the particulars of the script language such as the syntax of specifying instructions the hierarchical organization of the operations in the resource script and the correlation of particular instructions of the script language with the verbs of the protocol. These and other complexities may considerably complicate the efforts of a designer to author a resource script for a particular feature and such complexities may have little relation with the nature and logic of the domain specific operations that the designer wishes to implement.

The pseudocode block of illustrates the contents of a resource script that may be utilized to interact with the account store during the fulfilling of the protocol request . It may be appreciated that the pseudocode block exhibits but one formulation of a resource script formatted according to one script language that may be utilized in this capacity and that many other resource scripts in this and other script languages may be available.

However the resource script expressed in the pseudocode block of presents some advantages with respect to other resource scripts and other script languages. As a first example the resource script is declaratively specified comprising a set of elements that together describe the process in performing the authentication operation. In contrast with resource scripts expressed in script languages designed according to other programming paradigms such as imperative programming paradigms procedural programming paradigms and object and aspect oriented programming paradigms the declarative structure of the pseudocode block may be more easily human readable and more easily parsed by a parser due to the regular structure such as may be conferred by a hierarchically organized document object model. As a second example the resource script presented in the pseudocode block of is expressed in a script language that is based on the protocol which enables platform independent execution and in particular a runtime selectable execution context. For example the resource script may be designed and stored in a manner independent of the hardware or software architecture of the system on which the resource script may be executed. At runtime an execution context for the resource script may be specified and the resource script may be executed in many runtime specified execution contexts without platform specific reconfiguration and with an equivalent effect on the data set . As a third example the regular structure and comparatively simple structure of the script language of this pseudocode block as contrasted with the more complex structure of programming languages such as Java and C enables a comparatively lightweight design for a script processor which may execute data set operations by passing them through to the protocol e.g. for handling by the webserver components of the host and may execute flow control operations by altering a flow of execution of the resource script. Nevertheless higher level features may still be offered within the comparatively simple script language such as failure compensation through the use of flow control operations and data binding through the use of instructions for associating a property of an operation with a property of another operation or with an aspect of the client the host the data set the protocol request or the protocol response . 

However it may also be appreciated that the pseudocode block of may be difficult for a designer to author without assistance. Successfully expressing a resource script in the script language illustrated in this pseudocode block without assistance involves a detailed knowledge of many aspects of the interaction of . For example the designer may have to understand the hierarchical structure of the declaratively specified resource script the syntax of the script language and of the declaratively specified resource script such as the definitions of various parameters and the enclosure of elements such as Conditional and DataBind the details of the underlying HTTP GET protocol request and the correlation of instructions of the script language with the verbs of the protocol such as the manner of executing an HTTP GET operation in the resource script through the use of a GET type statement in the script language the nature of the user credentials provided with the protocol request and the manner of providing the user credentials to the account store and interpreting the result the use of data binding features to relate various properties of the operations in order to achieve the desired result of the resource script and the network transport costs such as lag incurred by the resource script upon issuing the protocol request over a network. Designing a resource script that correctly respects all of these concepts while also fulfilling the syntactic constraints of the script language may be very difficult even for a skilled designer. Moreover all of these complex details may be unrelated to the interests of the designer developing the resource script in order to read the data set in furtherance of a data driven application on the client .

A design environment may be devised to facilitate the creation of resource scripts that alleviates some of the complexity arising from the interactions specified therein. The design environment may present to a designer the set of instructions in the script language and may assist the designer in choosing and arranging such instructions as operations of the operations set. As one example the design environment may be presented in a partially graphical manner that permits designers to manipulate the instructions through a windowing interface such as by dragging and dropping instructions through keyboard and mouse gestures to select organize and associate the operations of the operations set. A design environment of this nature sometimes referred to as a visual design environment may facilitate the design of an operations set that obscures the working details of the resource script such as the syntax of the script language the details of the protocol and network parameters such as connection establishing and asynchrony and that allows the designer to focus on the logical configuration of the operations in the resource script. In addition the design environment may facilitate the generating of an operations expressing the operations set specified by the designer and in particular may automatically generate operations in the resource script that comply with the syntactic and logical constraints of the script language.

The techniques discussed herein may be devised with variations in many aspects and some variations may present additional advantages and or reduce disadvantages with respect to other variations of these and other techniques. Moreover some variations may be implemented in combination and some combinations may feature additional advantages and or reduced disadvantages through synergistic cooperation. The variations may be incorporated in various embodiments e.g. the exemplary method of and the exemplary system of to confer individual and or synergistic advantages upon such embodiments.

A first aspect that may vary among embodiments of these techniques involves the scenarios in which the techniques may be applied. As a first example the resource script may be prepared for application to a data set comprising a resource in a deployable computing environment. This scenario may be devised to address the increasingly large and diverse set of objects managed by a set of object systems. For example a computing environment may comprise a set of files managed by a file system one or more databases managed by a database system a set of executable binaries representing applications and managed by an assembly cache a set of user profiles managed by a user profile component of an operating system and various data caches managed by data caching components such as a set of copied items managed by a copy buffer of the operating system a set of undo actions managed by an undo component of the operating system and a set of most recently used items managed by an item usage tracking component of the operating system. Moreover such objects may be exchanged among a plurality of devices operated by one or more users and according to one or more operations e.g. an object synchronization operation that merges two object sets and an object mirroring operation that adjusts a target object set to match a source object set. In this manner the objects are loosely organized through a set of object systems and aggregated to represent the computing environment.

In order to reduce the complex variety and decentralization of the objects comprising a contemporary computing environment a deployable representation of the computing environment may be devised where the objects comprising the computing environment are organized in an object hierarchy which may be hosted by a computing environment host. If the objects are represented in a uniform manner and managed in a consistent way by an object system a set of services may be devised to apply to all of the objects of the computing environment. Moreover the object hierarchy may be delivered to various devices to represent the same computing environment including the same user profiles applications data files etc. and each device may render the computing environment in a consistent manner but customized based on the capabilities of the device e.g. a hard keyboard interface for receiving data entry from a keyboard device attached to a workstation and a touchscreen software keyboard interface for receiving data entry from a cellphone device. With relation to the concept of a deployable computing environment it may be advantageous to configure at least one server to manage one or more data objects within the representation and to operate as a host that accepts access requests to such resources through a protocol such as RESTful interactions over HTTP. In accordance with these techniques the resource script may be configured as an operation applying to a resource in the deployable computing environment which may be accessed through a computing environment host according to the verbs of a protocol through which the host provides access to the resource. However those of ordinary skill in the art may devise many such scenarios in which the techniques discussed herein may be applied.

As a second exemplary scenario in which these techniques may be applied the development environment may be designed to interface with the designer in many contexts. As a first example the design environment may comprise an application executing on a device such as an integrated development environment on a computer. In this example the design environment may be displayed on the device hosted on the design environment . As a second example the design environment may comprise a web deployed application which may be hosted on an application host and may be partially or wholly loaded into a browser for execution. In this example the design environment may be hosted on the application host but displayed within a browser. The browser may be also configured to load and execute some or all of the capabilities of the design environment such as storing the resource script and generating the operations set. Conversely the application host may provide some or all of the capabilities of the design environment e.g. the browser may operate as a thin client interface to the web application executing on the application host. Those of ordinary skill in the art may devise many architectures for the design environment and may choose many platforms on which part or all of the design environment may operate and interface with the designer while implementing the techniques discussed herein.

A second aspect that may vary among embodiments of these techniques relates to the presentation of the design environment and the actions that a designer may perform within the design environment . While it may be possible to presenting the design environment as a text based design environment such as a text editor significant advantages may be achieved by presenting the design environment in a partially graphical manner wherein items in the design environment may be manipulated by a designer as controls in a windowing interface such as by dragging and dropping instructions through keyboard and mouse gestures to select organize and associate the operations of the operations set . This visual layout of a design environment may significantly reduce the amount of input involved in performing basic operations e.g. adding an operation to an operations set in a text editor may involve sixty keystrokes but may only involve a drag and drop operation in a visually oriented design environment and the errors associated with data entry thereby providing a significant convenience and an improved experience to the designer while accelerating the development of the operations set .

In furtherance of a visually oriented design environment a first example of this second aspect may involve receiving input e.g. from a designer indicating a relocating of an operation in the operations set to a destination location and responding by relocating the operation in the operations set. illustrates an exemplary scenario wherein a user first selects an operation with a pointer which may be controlled by a pointing device such as a mouse a touchpad or a touchscreen interface and then drags the selected operation downward to relocate the selected operation to a later position in the sequence of the operations set . The development environment may respond by relocating the selected operation in the ordering of the operations set as displayed within the design environment . As a second example upon receiving input selecting an operation in the operations set e.g. by clicking on the operation with a pointer the design environment may respond by displaying at least one property of the operation . Additionally upon receiving input configuring at least one property of the operation the design environment may respond by configuring the at least one property of the operation according to the input. Some examples of this manner of configuring an operation involve data binding a property of the operation to a data source such that the property of the operation is unidirectionally or bidirectionally synchronized with the data source. For example at least one data set instruction may comprise a request property relating to a request to apply the verb of the protocol to the data set e.g. an aspect of the protocol request and a response property relating to a response generated by applying the verb to the data set e.g. an aspect of the protocol response . Data binding such properties may enable the operations set to perform operations on the protocol request and or the protocol response and such data binding may be formed in response to input within the design environment .

A third aspect that may vary among embodiments of these techniques relates ton operations set validating feature of the design environment whereby the operations set may be reviewed at design time to indicate whether the operations set is valid or invalid according to the script language and whether or not a resource script may be generated therefrom. As a user builds and configures the operations of the operations set the design environment may periodically continuously or upon request monitor the validity of the operation set such as the validity of data bound properties of operations and the complete or incomplete configuration of the operations . illustrates an exemplary scenario wherein a design environment validates an operations set at design time. In this exemplary scenario one particular operation comprises an invalid operation a DATABIND operation having an unspecified data source. In this and other embodiments upon failing to validate at least one invalid operation of the operations set the design environment may display an invalid operation indicator for the invalid operations of the operations set . This invalid operation indicator may draw the attention of the designer to the invalid operations that are to be corrected before the operations set may be expressed as a resource script . Additional indicators may also be displayed within the design environment such as an invalid operations set indicator indicating that the resource script is not yet valid and cannot be expressed and an invalid operation property indicator indicating the property of an invalid instruction that is invalidly configured e.g. the DESTINATION parameter of the invalid DATABIND instruction. Alternatively if the design environment validates the operations set the design environment may display a valid operations set indicator denoting that the operations set is valid according to the script language and may be expressed as a resource script . Those of ordinary skill in the art may devise many operations set validation features in design environments developed in accordance with the techniques discussed herein.

A fourth aspect that may vary among embodiments of these techniques relates to the generating of a resource script from an operations set according to the script language. The generating may be performed on demand at design time and may present the user with a resource script specified in the script language e.g. the pseudocode block of . In some embodiments the generating may also be performed in accordance with a wire protocol such as JSON Atom or RSS. It may be desirable to generate the resource script according to a wire protocol that is supported by a particular host on which the resource script may be executed and may confer advantages on the processing of the resource script such as well known formatting and serialization processes. Thus in some embodiments the design environment may receive input requesting generating of the resource script according to a wire protocol and may respond by generating the resource script according to the wire protocol. Those of ordinary skill in the art may devise many ways of generating a resource script from an operations set in accordance with the techniques discussed herein.

A fifth aspect that may vary among embodiments of these techniques relates to an executing of a resource script and the participation of the design environment therein. Where the resource script is expressed in a script language that is platform agnostic a choice may be made at execution time of an execution context in which the resource script may be executed. If a local execution context is selected a local script processor may run on the client and issue protocol operations to the host but if a host execution context is selected the resource script may be delivered to a script processor located on the host for remote execution. While the performance of the resource script and applications utilizing the resource script may differ based on the execution context the same logical sequence of operations is performed on the data set regardless of the location of the script processor resulting in an equivalent effect of the executing of the resource script on the data set .

In view of the flexible execution contexts of a resource script the design environment may enable a designer to execute the resource script in a particular execution context. For example upon receiving input requesting execution of the resource script the design environment may present at least two execution contexts and may await a choice by the designer. Upon receiving input choosing a selected execution context the design environment may execute the resource script on a script processor according to the selected execution context. For example where the input denotes the choice of a host execution context the design environment may execute the resource script by sending the resource script to a script processor on the host . More particularly the host may be configured to receive resource scripts formatted e.g. serialized according to one or more wire protocols such as JSON Atom and RSS. The design environment may therefore execute the resource script in the host execution context by selecting a wire protocol supported by the host serializing the resource script according to the wire protocol and sending the resource script serialized according to the wire protocol to a script processor on the host . Alternatively where the input denotes a choice of a local execution context the design environment may execute the resource script on a local script processor which may be configured to process data set operations by issuing the corresponding verb of the protocol to a host through which the data set is accessible and to process flow control operations by altering an execution flow of the resource script e.g. by altering an instruction pointer to indicate a particular operation to be executed next. 

A particular scenario where executing the resource script on in a local execution context may be advantageous involves debugging of the resource script wherein a designer may wish to monitor some aspects of the resource script during execution e.g. the flow of execution through the resource script the properties of various operations or the interaction with the host and or the data set . Executing the resource script in a local execution context may facilitate such monitoring as compared with a host execution context since the host may not be properly configured for debugging or may not permit debugging techniques.

The design environment may offer many debugging techniques that may be utilized while a resource script is executing in a local execution context. illustrates an exemplary scenario featuring some debugging techniques that may be applied to an executing operations set . As a first example the design environment may permit the use of breakpoints that stop execution of the operations set at a particular point of interest. For example upon receiving input representing a setting of a breakpoint at an operation the design environment may associate a breakpoint with the operation . illustrates some breakpoints associated with particular operations of the operations set . If the design environment detects an executing of an operation of a resource script associated with the breakpoint the design environment may break the executing of the resource script . The design environment may also display for the designer the operation of the operations set corresponding to the operation of the resource script associated with the encountered breakpoint . Moreover upon receiving input requesting a resuming of the executing of the resource script the design environment may resume the executing of the resource script . A related debugging technique that may be applied to an executing resource script involves the inspecting of various properties of the resource script either during the executing of the resource script or when the execution of the resource script has been broken at a breakpoint . In these scenarios and as illustrated in the design environment may receive input representing a selecting of a property of an executing resource script such as a property of an operation e.g. the operation associated with the encountered breakpoint . The design environment may respond by displaying the property of the executing resource script thereby permitting the designer to inspect various aspects of the executing resource script . Those of ordinary skill in the art may include many debugging techniques that may be applied to execution scripts within design environment implemented according to the techniques discussed herein.

Although the subject matter has been described in language specific to structural features and or methodological acts it is to be understood that the subject matter defined in the appended claims is not necessarily limited to the specific features or acts described above. Rather the specific features and acts described above are disclosed as example forms of implementing the claims.

As used in this application the terms component module system interface and the like are generally intended to refer to a computer related entity either hardware a combination of hardware and software software or software in execution. For example a component may be but is not limited to being a process running on a processor a processor an object an executable a thread of execution a program and or a computer. By way of illustration both an application running on a controller and the controller can be a component. One or more components may reside within a process and or thread of execution and a component may be localized on one computer and or distributed between two or more computers.

Furthermore the claimed subject matter may be implemented as a method apparatus or article of manufacture using standard programming and or engineering techniques to produce software firmware hardware or any combination thereof to control a computer to implement the disclosed subject matter. The term article of manufacture as used herein is intended to encompass a computer program accessible from any computer readable device carrier or media. Of course those skilled in the art will recognize many modifications may be made to this configuration without departing from the scope or spirit of the claimed subject matter.

Although not required embodiments are described in the general context of computer readable instructions being executed by one or more computing devices. Computer readable instructions may be distributed via computer readable media discussed below . Computer readable instructions may be implemented as program modules such as functions objects Application Programming Interfaces APIs data structures and the like that perform particular tasks or implement particular abstract data types. Typically the functionality of the computer readable instructions may be combined or distributed as desired in various environments.

In other embodiments device may include additional features and or functionality. For example device may also include additional storage e.g. removable and or non removable including but not limited to magnetic storage optical storage and the like. Such additional storage is illustrated in by storage . In one embodiment computer readable instructions to implement one or more embodiments provided herein may be in storage . Storage may also store other computer readable instructions to implement an operating system an application program and the like. Computer readable instructions may be loaded in memory for execution by processing unit for example.

The term computer readable media as used herein includes computer storage media. Computer storage media includes volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions or other data. Memory and storage are examples of computer storage media. Computer storage media includes but is not limited to RAM ROM EEPROM flash memory or other memory technology CD ROM Digital Versatile Disks DVDs or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can be accessed by device . Any such computer storage media may be part of device .

Device may also include communication connection s that allows device to communicate with other devices. Communication connection s may include but is not limited to a modem a Network Interface Card NIC an integrated network interface a radio frequency transmitter receiver an infrared port a USB connection or other interfaces for connecting computing device to other computing devices. Communication connection s may include a wired connection or a wireless connection. Communication connection s may transmit and or receive communication media.

The term computer readable media may include communication media. Communication media typically embodies computer readable instructions or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term modulated data signal may include a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal.

Device may include input device s such as keyboard mouse pen voice input device touch input device infrared cameras video input devices and or any other input device. Output device s such as one or more displays speakers printers and or any other output device may also be included in device . Input device s and output device s may be connected to device via a wired connection wireless connection or any combination thereof. In one embodiment an input device or an output device from another computing device may be used as input device s or output device s for computing device .

Components of computing device may be connected by various interconnects such as a bus. Such interconnects may include a Peripheral Component Interconnect PCI such as PCI Express a Universal Serial Bus USB firewire IEEE 1394 an optical bus structure and the like. In another embodiment components of computing device may be interconnected by a network. For example memory may be comprised of multiple physical memory units located in different physical locations interconnected by a network.

Those skilled in the art will realize that storage devices utilized to store computer readable instructions may be distributed across a network. For example a computing device accessible via network may store computer readable instructions to implement one or more embodiments provided herein. Computing device may access computing device and download a part or all of the computer readable instructions for execution. Alternatively computing device may download pieces of the computer readable instructions as needed or some instructions may be executed at computing device and some at computing device .

Various operations of embodiments are provided herein. In one embodiment one or more of the operations described may constitute computer readable instructions stored on one or more computer readable media which if executed by a computing device will cause the computing device to perform the operations described. The order in which some or all of the operations are described should not be construed as to imply that these operations are necessarily order dependent. Alternative ordering will be appreciated by one skilled in the art having the benefit of this description. Further it will be understood that not all operations are necessarily present in each embodiment provided herein.

Moreover the word exemplary is used herein to mean serving as an example instance or illustration. Any aspect or design described herein as exemplary is not necessarily to be construed as advantageous over other aspects or designs. Rather use of the word exemplary is intended to present concepts in a concrete fashion. As used in this application the term or is intended to mean an inclusive or rather than an exclusive or . That is unless specified otherwise or clear from context X employs A or B is intended to mean any of the natural inclusive permutations. That is if X employs A X employs B or X employs both A and B then X employs A or B is satisfied under any of the foregoing instances. In addition the articles a and an as used in this application and the appended claims may generally be construed to mean one or more unless specified otherwise or clear from context to be directed to a singular form.

Also although the disclosure has been shown and described with respect to one or more implementations equivalent alterations and modifications will occur to others skilled in the art based upon a reading and understanding of this specification and the annexed drawings. The disclosure includes all such modifications and alterations and is limited only by the scope of the following claims. In particular regard to the various functions performed by the above described components e.g. elements resources etc. the terms used to describe such components are intended to correspond unless otherwise indicated to any component which performs the specified function of the described component e.g. that is functionally equivalent even though not structurally equivalent to the disclosed structure which performs the function in the herein illustrated exemplary implementations of the disclosure. In addition while a particular feature of the disclosure may have been disclosed with respect to only one of several implementations such feature may be combined with one or more other features of the other implementations as may be desired and advantageous for any given or particular application. Furthermore to the extent that the terms includes having has with or variants thereof are used in either the detailed description or the claims such terms are intended to be inclusive in a manner similar to the term comprising. 

