---

title: Controller area network condition monitoring and bus health on in-vehicle communications networks
abstract: A method and system monitor a communications network, e.g., a controller area network (CAN), and more specifically, an in-vehicle communications network, by maintaining a count of each type of error code and a histogram of all network messages seen by each of the controllers during a measurement period; and by determining a bus health index of the communication bus based upon a percentage of a given type of error to the total count of all errors during a measurement period. An individual controller or controller area network bus segment can be indicated as having a communications problem as a result of the health index.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08213321&OS=08213321&RS=08213321
owner: Deere & Company
number: 08213321
owner_city: Moline
owner_country: US
publication_date: 20080129
---
This document including all drawings claims priority based on U.S. provisional application Ser. No. 60 887 668 filed Feb. 1 2007 and entitled CONTROLLER AREA NETWORK CONDITION MONITORING AND BUS HEALTH ON IN VEHICLE COMMUNICATIONS NETWORKS under 35 U.S.C. 119 e .

Problems facing the use of onboard electronics in vehicles include the lack of diagnostic ability by service personnel and No Fault. Found NFF warranty costs. When a controller is returned to the manufacturer it must be assumed to be defective until proven otherwise. Service and Warranty departments need time to put a returned controller on a manufacturing tester and perform other diagnostic tasks to determine either the root cause of the problem or to determine whether it is a NFF controller i.e. to determine that no problem could be found. Some controllers that are returned as NFF may indeed have a physical problem but the problem may not manifest itself unless it is embedded in a vehicle and is being subjected to vibrations temperature extremes or other operating conditions.

A system and method of an embodiment of the invention utilizes advanced diagnostics to minimize No Fault Found determinations by diagnosing Electronic Control Units ECUs problems in the fields and by predicting the failure of a component before the component fails. A controller area network e.g. CAN condition monitor system defines and identifies how a controller area network bus fails over time detects these problems at run time and reports this information back to an end user and or service personnel.

A system and method of an embodiment of the invention monitors an in vehicle communications network having a plurality of controllers coupled together over the network. An error diagnostic originates from one of the plurality of controllers over the network. The error diagnostic comprises a diagnostic signal and a lost signal over the network. The error diagnostic is received over the network at one or more other remaining ones of the plurality of controllers. The remaining controllers statistically analyze the error diagnostic and determine an origin of the error diagnostic.

A system and method for monitoring a network of controllers maintains a count of each type of error codes and a histogram of all controller area network messages seen by each of the controllers during a measurement period. The data is read analyzed and presented by at least one controller that is within or separate from the network being analyzed. The data is presented as a network area controller bus health index based upon a percentage of a given error to the total count of all errors. The health index may additionally be based on pre defined weights given to the percentage of each of the given type of errors to the total count of errors and the number of messages lost during the measurement period. Failures can be predicted for a component before the component fails by determining a change in the health index over time. Web pages are generated with the status and results of the monitoring. Links in the web page are enabled to show graphs of CAN errors CAN bus loading and error counts. A controller having communications problems can be detected and isolated by determining that the isolated individual controller having the communications problem has an elevated health indicator when compared to other controllers on the CAN bus. A controller can further be determined to fail at some future point in time based on the trends in the health index over time.

In a preferred embodiment of the invention pre existing controllers on the CAN bus are utilized to provide some amount of diagnostic information. This information is typically in the form of error flags and error counts. The standard John Deere Operating System JDOS v4.05 keeps a count of the number of times a CAN controller goes error active and bus off. Traditionally this information has not been communicated to other controllers to perform advanced diagnostics. To further enhance the diagnostic capability of each controller programming code is provided that maintains a count of the error codes and a histogram of all CAN messages seen by each of the controllers on the CAN bus. This information is then sent to a central controller e.g. the Machine Information Gateway or MiG for analysis.

Software on each controller records errors and keeps a histogram of all CAN messages. These counts are synchronized across all of the controllers via a start and stop message. To synchronize the counts Parameter Group Name PGN 65124 ISO 11992 General Purpose Message 2 5 is used. Byte 1 offset in this message indicates if the counters should be started or stopped. A non zero value indicates the counters should be started. A zero value indicates the counters should be stopped. This sets up a measurement interval by synchronizing all controllers on the bus within some margin of error. The current software implementation assumes the start and stop messages will always be transmitted and received successfully.

The measurement interval synchronization may be off by a few CAN messages. The variance will be in the CAN bus length and message propagation delay the interrupt or CAN polling latency the processing time it takes to receive the CAN message and determine it is a message to synchronize the counts and the time it takes to clear the counts.

Once a measurement period has been concluded the data is read from the controllers via J1939 Memory Access protocol. The software that reads this data can be a PC based tool or software on an embedded controller. It is analyzed and the results are presented to an interested person as a CAN bus health index.

The CAN Monitoring program health index calculation is based on user defined weights the percentage of errors and the number of messages lost during a measurement period. The program produces useable indicators of CAN bus health.

When errors are received that are greater than a CAN frame s bit the health index starts to increase. With interruption durations in the 2 8 us micro second range a user or dealer can be informed that a potential problem is forming. At greater than 10 us problems may be encountered that would cause loss of function on a vehicle. With the detection of a lost message the health index increases rapidly. Missing messages may most likely cause a loss of vehicle function.

The end result of the analysis is an executive summary. The CCMON generates several web pages that list the status and results of the analysis. The general idea behind the summary is a stop light approach. If the CAN Bus Health is green then everything is working correctly yellow indicates an elevated error occurrence on the CAN bus but the vehicle is still operating normally and a red status indicates the CAN bus is potentially affecting the operation of the vehicle. A user can also click on the links to see graphs of CAN errors Tx Rx counts CAN bus loading and graphs of the CAN bus loading.

Based on this data it is possible to detect and isolate a controller that is having communications problems. It is also possible to isolate what part of the CAN network is having intermittent communications. The CCMON program isolates the problem to an individual controller by determining that the isolated individual controller having the communications problem has an elevated health indicator when compared to other controllers on the CAN bus thereby indicating to the user what controller should be replaced and or repaired. In the case of a failing CAN harness the program should be able to indicate to the user where oh the CAN bus the problem is occurring. With this data it is possible to perform preventive maintenance and thereby keep the vehicle operating at maximum productivity. Based on trends in the data it is possible to determine if a controller is going to fail. Currently this is performed by an end user setting the desired weights for the various errors. These weights can be further refined by running the program on actual vehicles over time and recording the results. The results can be post processed and adjusted for optimal results on a particular vehicle.

Advantages of a preferred embodiment include i the use of existing controllers on the CAN bus with no incremental cost for additional controllers ii minimal impact on the performance of the controllers through the use of minimal programming code for maintaining diagnostic counts iii the ability to retrofit existing vehicles in the field by reprogramming the controllers with updated application software and iv the capability to isolate a problem to either a field replaceable electronics unit or between two points on the CAN bus where the problem is occurring.

A preferred embodiment of the invention provides a system and method for performing advanced diagnostics on a communication bus for example a controller area network CAN bus.

In an exemplary controller area network environment such as a vehicle having controllers for sensors and devices all documented messages can be simulated and transmitted on the CAN bus. Intermittent CAN faults can occur in such an embodiment. For example when a vehicle is traveling in rough terrain and experiencing intense vibrations the connector on an ECU may intermittently interrupt the CAN bus. Likewise a pinch in the CAN harness may rub against the body of the vehicle during the vibrations. These CAN interruptions will introduce corrupt CAN frames on the bus. When a controller detects these corrupt CAN frames it will assert the CAN error frame. If the vehicle slows down or stops these problems may go away. Therefore this problem may go undetected during a service repair unless the vehicle is driven again in rough terrain.

The following discusses i the problem of advanced CAN diagnostics ii how CAN exists within a framework of an OSI model iii how a CAN bus operates v what comprises a CAN frame v what errors are typically detectable on individual controllers vi how to measure errors on the CAN bus and vii ways to measure CAN bus health. The following also introduces the concept of health . Health is defined herein as the ability of a controller area network bus to operate effectively and efficiently without the loss of data or an increase in CAN error frames. Therefore a decrease in CAN health is defined as a decrease in the ability to convoy data or the loss of data and an increase in CAN error frames.

The Open System Interconnect OSI model is a layered abstract description for communication protocols. It is used to describe the functionality of these protocols at different levels. The layers are from top to bottom the application layer presentation layer session layer transport layer network layer data link layer and the physical layer. The application layer provides information to the user. Examples of protocols at the application level are Hyper Text Transport Protocol HTTP File Transfer Protocol FTP Simple Mail Transfer Protocol SMTP and Telnet. The presentation layer provides a data interface to the application layer. This layer may compress decompress or encrypt decrypt data. The session layer handles individual sessions between the host and the client. The transport layer handles transporting the data between two computers. Examples include Transmission Control Protocol TCP User Datagram Program UDP and the transport protocol defined in ISO 11783. The network layer handles routing of the data between two computers. The Data Layer handles the physical transfer of the data. Examples include Ethernet and the CAN data frames. The physical layer defines the hardware that is used to transfer data. For CAN the physical layer is typically a twisted pair wire using differential signaling.

The BOSCH CAN specification version 2.0 only defines CAN with respect to the Physical and Data Link Layer. The other layers are left to a user product manufacturer to implement as desired. In a preferred embodiment the J1939 and ISO 11783 protocols are used on top of the CAN bus. These protocols define the Network and Application layer. The remaining layers are somewhat defined throughout the protocol specifications.

The Physical layer is defined in broad terms. A few types of physical layers that can be used are a 2 wire differential twisted pair 4 wire differential twisted pair or a fiber optical channel. In a preferred embodiment a 2 wire twisted pair is utilized. The BOSCH spec thoroughly defines the Data Link Layer. CAN uses a Carrier Sense Multiple Access Bitwise Arbitration CSMA B scheme for collision control. This is done with the concept of recessive and dominant bits. This is done using an open collector implementation. When controllers transmit on the bus they listen to the resulting bit stream. If they attempt to transmit a recessive bit but see a dominant bit on the bus they back off and retry the transmission when the current message has finished transmitting. Therefore each CAN message can be encoded with a priority. The first controller to transmit a dominant bit wins control of the CAN bus.

The CAN communication bus has been designed to be a ruggedized robust communication bus. This bus is often used to communicate information between ECU s on a vehicle. These ECUs can include engine controllers transmission controllers hitch controllers header controllers displays data loggers and hydraulic control systems.

There are several potential error sources in a CAN message. The receiving CAN controller will generate one or more flags in response to detected errors. These flags are stuff errors form errors ACK errors bit errors bit errors CRC errors error warning status and bus off status. Some CAN controllers may provide additional information such as the transmit and receive error counts.

The following summarizes the definitions of various types of errors that are detectable on a CAN controller.

Stuff A stuff error is when the CAN controller detects six or more consecutive bits of the same state. Normally the transmitting CAN controller will insert a stuff bit of the opposite state to allow other CAN controllers on the bus to resync their internal clocks.

Form A form error occurs when a fixed format part of a CAN frame was received with an incorrect state. For example the EOF field has a fixed format. If they are not received correctly a form error will be generated.

ACK An ACK Error occurs when no other controllers on the bus acknowledge the transmitted CAN message. Typically if at least one controller receives a transmitted CAN message then it will assert the acknowledge bit.

Bit A bit error occurs when a transmitting unit wanted to transmit a recessive bit a logic 1 but the monitoring value on the CAN bus was a dominant a logic 0 bit.

Bit A bit error occurs when a transmitting unit wanted to transmit a dominant bit a logic 0 but the monitoring value on the CAN bus was a recessive bit a logic 1 .

CRC A CRC error occurs when the calculated CRC of the data that was received and the CRC within the frame do not match. This is typically caused by a corrupt bit in the frame.

Error Warning The error warning status indicates the CAN controller has gone from the Error Active state to the Error Passive State. The BOSCH CAN Specification Version 2.0 defines three different states a CAN controller can be in. The first is Error Active. In this state the CAN controller will transmit and receive CAN frames normally. Each CAN Controller maintains transmit and receive error counts. If either the transmit or receive counts are incremented above the unit goes into Error Passive. In this state the CAN Controller can only assert the passive error frame see BOSCH spec for details . If the transmit count goes above the unit goes bus off. In the bus off state the CAN controller can no longer transmit CAN frames. Most CAN controllers require some sort of reset logic to get a controller out of the bus off state. The controllers in this preferred embodiment will always attempt to reset the CAN controllers and get the unit back into error passive state. It is estimated that in some embodiments resetting the controller will take at the most 100 ms.

Bus Off The bus off status indicates the CAN controller has shut itself off from transmitting or receiving data. Once this happens the node will no longer communicate. Typically software monitors this condition and resets the CAN controller to recover from this failure.

By monitoring the controller area network bus for these error types potential bus problems can be localized and potential failures predicted thereby reducing vehicle down time.

In a preferred embodiment the CAN bus used is based on the SAE J1939 ISO 11783 standards. These standards define a bus speed of 250 Kbps. This allows controllers from different manufactures to be connected to the same CAN bus. This speed results in a CAN bit width of 4 s.

Several methods to measure the health of a CAN bus are further explained. The Time Domain Reflectometer TDR method determines impedance mismatches. This method would allow periodic checks of the integrity of the bus. However a TDR is an expensive device and would add cost to a vehicle. A TDR does not catch intermittent errors only impedance mismatches. The CAN Bit Timing Measurement device is able to measure short duration interruptions in the CAN bus. However this device would be a separate controller on the CAN bus with special hardware. It would require increased processing power to handle the large amounts of data this device would collect. As such this may be a potentially expensive device that would add cost to the vehicle. Digital Averaging is a method that can accurately determine very short intermittent faults in a wire. This is also an expensive method. It would only be able to perform the checks while the bus is not being used. The CAN Condition Monitor CCMon is a device that would be able to detect problems in the CAN bus prior to degrading vehicle operation capability. It is fairly inexpensive. The data can be collected in a distributed manor or sent to a central device for collection. This may have a lower cost approach than the other methods. However this method may not be able to detect sub bit errors accurately. It may also still require a device with a moderate amount of processing capability to synchronize the data collection and analyze the data.

A TDR is a device that uses signal integrity principles to measure the mismatch in impedance on a communication bus or Printed Circuit Board PCB trace. The idea is to generate a fast signal transition impulse . This impulse will have a rise time that is sufficient to treat the communication bus or PCB trace as a transmission line. The impulse travels the length of the transmission line and reflects at the end or at any impedance mismatches. The reflection s then travels back to the source of the pulse were it is measured. The reflection strength is based on the reflection coefficient . This is calculated by the following equation 

Zt is the impedance of the termination end of the transmission line and Zo is the impedance of the transmission medium. Any discontinuity in the transmission line will show up as an impedance mismatch. This mismatch can be substituted for Zt in the equation above and will result in some small reflection. These reflections will add and subtract to the standing wave voltage at the source and can be measured. Once the wave has traveled the length of the transmission line one can look at the resulting measured voltages and see a representation of the transmission line.

The concept was to measure a baseline health of a CAN bus when the vehicle rolls off the production line. A TDR would be used to measure this baseline which would be stored in non volatile memory on some controller or the TDR controller itself. Periodically the TDR would measure the CAN bus when the CAN bus was idle for example some time between 1 00 AM and 4 00 AM and after some amount of idle time on the CAN bus. This new measurement would be compared against the baseline measurement. If the new measurement differs from the baseline measurement by some configurable threshold the user could be notified to have the service personal do more extensive diagnostics.

Unfortunately the rise time of the pulse and the sample rate required to perform the TDR functionality would have to be very high. A 10 ns pulse may have a 4 meter blind spot but would be able to measure a line of up to 500 meters in length. A typical CAN bus on a vehicle is most likely going to be less than 10 meters in length. Therefore a 4 meter blind spot is not acceptable. To reduce the blind spot the pulse duration increase frequency would need to be decreased. An Analog to Digital A D converter capable of sampling in the hundreds of megahertz range and a microcontroller or digital signal processor DSP capable of handling the bandwidth of data could be used to sample the pulse and reflections. These factors make this approach prohibitively expensive to embed in every vehicle. This method may be able to isolate where on the CAN bus a problem is occurring but to convert the length on the CAN bus to a Field Replaceable Unit FRU may be difficult.

A second approach or embodiment is to put a device on the CAN bus that monitors both CAN bus bit timing at a much faster rate than a normal CAN controller. This device can look for any signal changes outside the normal bit timing parameters. If it sees a very fast bit it could signal the end user that abnormally fast bits were seen on the CAN bus. This may indicate a failing CAN bus. The downside to this approach is it would require a new device on the CAN bus. Also the required sampling rate of the CAN bus would generate vast amounts of data that would have to be collected and analyzed. Therefore the cost of this approach may be cost prohibitive. This method would not be able to isolate the problem to a FRU.

A third approach or embodiment could use a system of digital and analog averaging. This method uses analog signals and processing to look for very fast intermittent failures on a communications bus.

A fourth approach or embodiment is to use the existing controllers on the CAN bus. Each CAN controller usually provides some amount of diagnostic information. This information is typically in the form of error flags and error counts. The standard John Deere Operating System JDOS v4.05 keeps a count of the number of times a CAN controller goes error active and bus off. Traditionally this information has not been communicated to other controllers to perform advanced diagnostics. In this embodiment to further enhance the diagnostic capability of each controller additional code is added to maintain a count of the error codes and a histogram of all CAN messages seen by each of the controllers on the CAN bus. This information would then be sent to a central controller for analysis.

This approach has several benefits over the TDR approach in that i it uses the existing controllers on the CAN bus with no incremental cost ii the additional code required to maintain the diagnostic counts is very small and has minimal impact on the performance of the controllers iii this method can be retrofitted on existing vehicles in the field by reprogramming the controllers with updated application software iv this method can isolate the problem to either a FRU or between two points on the CAN bus where the problem is occurring.

The description above has discussed the CAN bus from the BOSCH Specification and the CAN frame up to the J1939 ISO 11783 protocol. It discussed what some of the problems are with regard to advanced CAN diagnostics and how errors are reported on a CAN bus. Finally it discussed methods to measure the CAN bus health.

This following discusses sources of corruption on a CAN bus how signal corruption on the CAN bus can be simulated how the software was instrumented and what results were obtained.

With any digital signal there are several problems that can occur. Normally the signal can transition between logic 0 and logic 1. But the signal could become shorted to ground or shorted to VCC or go open circuit. This would prevent the signal from conveying information. These states are relatively easy to detect. When data is transmitted on a CAN bus any resulting errors are flagged and are readable within software.

If the signal is shorted to ground then it will always be in a dominant state. This is not a valid state for a CAN bus to be in. Therefore it would be an indicator that the CAN bus is shorted to ground.

If a CAN bus is shorted to VCC then when a controller transmits a dominant bit it will see a recessive one. This is also not valid. A dominant bit should always override a recessive bit.

If a CAN bus becomes open circuited then the transmitting controller will never see other controllers Acknowledge CAN frames that it transmits.

Therefore the above three error conditions are relatively easy to detect and diagnose. The problem is however that if any of these three conditions occur it will most likely reduce the functionality of the vehicle and potentially make the vehicle in operable. Also a fourth error condition could exist that being intermittent short s to ground battery or open circuits.

As an example assume that based on a product s warranty data only two root causes of CAN corruption are known. The first is interference between a CAN choke and the potting for the product. This can cause the CAN choke to have an intermittent connection with the CAN bus. The second problem is a poor connection between a connector on a PCB and the mating connector s pin receptacles. These pin receptacles would not make adequate contact with the connector on the PCB. This can cause intermittent connectivity problems with the PCB and the harness.

These problems will manifest themselves as the various types of errors on the CAN bus as discussed above. These errors can be measured and analyzed.

To simulate the CAN bus corruption a device can be utilized that allows the CAN bus to be interrupted simulating an intermittent open circuit failure. The duration and frequency of the interruption can be controlled by an input to this device. The bus corruptor uses high frequency video switches to connect the two sides of the CAN bus together or open the connection. shows an illustration of a bus corruptor device . The banana plugs on the left are the CAN high and low lines for Controllers and of . The banana plugs on the right are the CAN high and low lines for controller . The red and black banana jacks on the side of the bus corruptor are 12 volts power and ground. The bayonet Neill Concelman BNC connector is the connection point for the frequency generator.

The bus corruptor can be precisely controlled and it is repeatable to support data collection and analysis. A test set up as shown in included three CAN based controllers . These controllers are connected together via a CAN bus . The CAN bus interrupter is placed between controller and controllers and on the CAN bus. A frequency generator is fed into the CAN bus interrupter .

To verify operation of the CAN corruptor several oscilloscope screen captures can be taken. When the CAN corrupter is conducting both CAN H and CAN L at a point B of the CAN corrupter can be seen. The CAN bits are viewable. The signal level is approximately 2.2V pk pk and shows no appreciable signal level degradation. Other oscilloscope screen captures can show the signal level at a point A of the CAN corruptor with the corruptor non conducting. This will show the bus lost arbitration signal that occurs when no terminator is connected. During transitions of the control signal to the CAN corrupter the oscilloscope will illustrate the signal levels including CAN L at a point B at the transition from connected to disconnected where CAN L is interrupting a CAN frame. There will be no indication of the CAN signal when the CAN corruptor turns off. Likewise the oscilloscope will show CAN H at a point B during the transition from connected to disconnected. Again the signal is effectively eliminated when the CAN corruptor is non conducting. It appears that this transition occurred when the CAN bus was in the recessive state. Oscilloscope screens can capture the bus being dominant when the CAN corruptor switches to non conducting. When CAN H interrupts a dominant bit the bus switches to the non conducting state quickly. Oscilloscope screens can capture a dominant bit on the CAN L line when the CAN L interrupts a dominant bit. The CAN corruptor conducts with no appreciable change to the signal levels and when it is in the non conducting state it affectively blocks the signal. It also switches at a fast speed to support pulses down to 1 s.

Software code is incorporated into each controller to record errors and keep a histogram of all CAN messages. These counts are synchronized across all of the controllers via a start and stop message. To synchronize the counts Parameter Group Name PGN 65124 ISO 11992 General Purpose Message 2 5 is used. Byte 1 offset in this message indicates if the counters should be started or stopped. A non zero value indicates the counters should be started. A zero value indicates the counters should be stopped. This sets up a measurement interval by synchronizing all controllers on the bus within some margin or error. The software implementation assumes the start and stop messages will always be transmitted and received successfully.

The measurement interval synchronization may be off by a few CAN messages. The variance will be in the CAN bus length and message propagation delay the interrupt or CAN polling latency the processing time it takes to receive the CAN message and determine it is a message to synchronize the counts and the time it takes to clear the counts. For the test CAN bus described above and shown in there was at most 2 counts difference between the controllers. Although in this test example the CAN bus system was running 3 identical controllers with identical software. Therefore in a real system the counts may differ by a larger margin.

Once a measurement period has been concluded the data is read from the controllers via J1939 Memory Access protocol. The software that reads this data can be a PC based tool or software on an embedded controller. The software to analyze the measurements will be discussed in a later section below.

A number of tests were run on the instrumented software running on the three controllers. The bus corruptor was used to simulate periodic interruptions of the CAN bus and a frequency generator was used to generate the interruptions. Initially the simulation was started with very short interruption durations of 0.2 s. This was chosen since it is much smaller in duration then the 4 s width of a CAN bit at 250 Kbps.

As shown in the CAN interruptions were broken up into four categories sub bit bit sub message and message interruptions . shows a graphical example of the interruption types. In the test example the frequency of the interruptions was set to 83 Hz. This was chosen so the interruption frequency seemed random and the period wasn t a multiple of a typical CAN transmit rate of 10 Hz or 100 Hz. It was also assumed that when the CAN bus is interrupted it isn t a single interruption. The interruption will probably occur several times in a row. This modeling of intermittent faults is similar to a switch opening and closing. Switches typically do not have a clean open or close response. When a switch is closed the signal may bounce between two logical states for tens of microseconds. Therefore 5 interruptions were generated in a row. The width of the interruptions was increased and the effect on the CAN bus was measured.

The interruption frequency duration of the interruption the duty cycle the percent of the period to interrupt the CAN bus burst rate number of back to back interruptions burst frequency period at the rate the interruptions occur all of the error counts in percent this is a percentage of each type of error based on the samples taken and the health index as calculated by the CAN Condition Monitor program discussed further below are detailed.

Acknowledge errors become significant as the interruptions move into the bit error range . These errors will be caused by the CAN bus becoming interrupted as controller finishes transmitting a message but before it detects a bit or error. This will occur when controller does not receive an acknowledgement after it transmits a message.

CRC errors also become significant in the bit error range . These are caused by receiving bits that become corrupt as the message is received. A CRC error will only be generated if the bit that was corrupted is not a fixed bit. This only occurs when controller receives messages from controller and .

At the sub message error range form errors suddenly occupy the majority of the errors on the bus. An eight microsecond interruption is enough time to corrupt 2 bits of data. This drastically increases the probability of a form error . Stuff errors also start to become significant. As the interruptions become longer it will affect the bit stuffing algorithm of the CAN controllers. The BOSCH CAN specification indicates that only five bits of the same polarity can be transmitted in a row. After five bits of the same polarity a sixth bit will be inserted into the bit stream of the opposite polarity. If the CAN bus corruptor interrupts the CAN bus during a stream of recessive bits a receiving CAN controller can see this as a stuff error. When the CAN bus corruptor interrupts the bus it causes the bus to go to the recessive state. Therefore a receiving controller may see more than five recessive bits.

Based on this data it is feasible to detect and isolate an individual controller that is having communications issues on the CAN bus. A good indicator of sub bit and bit failures is to look at the Bit ACK and CRC Errors. This holds true up to eight microsecond interruption durations. As the interruption duration increases form and stuff errors become a good indicator. However the controllers that can communicate with each other will also have an elevated stuff error rate. Therefore stuff errors become difficult to use if the controller that is suffering from communications errors is to be isolated.

It is unclear from the BOSCH spec if a CAN message that caused an error is retransmitted. The specification does state that any CAN frames will be either fully accepted by all controllers on the bus or an error frame will be transmitted to inform all controllers to ignore the previous message. But if a controller is in the error passive mode it will be unable to assert the error frame on the bus. Another issue that will contribute to the mismatch in counts is the fact that the Tx Successful and Rx Successful flags must be cleared by software but the error bits will be set whenever a CAN error occurs. It takes a finite time to service the CAN interrupt routine and therefore a message may have been transmitted or received successfully but the next message to be received could be corrupt. This could happen prior to servicing the interrupt routine. So when the software reads the error register and the Tx Successful and Rx Successful flag it may see all three bits set. Therefore it may log a CAN message was successfully transmitted received and also generated an error. This is indicative of a hardware limitation.

The description above described the method for inducing corruption on the CAN bus and how the results were measured and obtained. The results were documented and discussed. The analysis of the distribution of errors on the CAN bus during the measurement interval was also described. The total counts of messages transmitted versus received were also described.

The following describes the details and architecture of the CAN Condition Monitor CCMON program. This central controller can either be fixed within the communications network or it can be removable i.e. temporarily included within the network when needed to perform any of its functions. The methods for obtaining storing analyzing and presenting the results to the end user are also described.

The CCMON is the master diagnostic module in this setup. It is responsible for i starting and stopping a measurement interval ii reading the data from the individual controllers iii performing the analysis of this data and iv generating web pages from the results of the analysis. These web pages can be viewed with any web browser. A web server presents the web pages to the end user via the standard HTTP protocol over an Ethernet connection. The data will also be stored in a log file that can be analyzed offline. In an embedded application these web pages would be served up by a high end embedded controller or could generate custom Graphical User Interface GUI objects on a high end graphic display such as John Deere s Green Star 2 GS2 or the Virtual Terminal Implement VTi .

Next the settings are read from an Extensible Markup Language XML file and parsed into a class that represents all of the settings used throughout the program. The CAN Hardware Abstraction Layer HAL is initialized . Finally the database is loaded from the file system into Random Access Memory RAM .

At this point the CCMON is ready to perform the measurements and analysis operations. The CCMON sends out a synchronization signal to all controllers on the CAN bus . This message is used to synchronize the error counts and histograms across all controllers on the CAN bus.

After the measurement period is complete the CCMON sends a stop measurement message to all controllers on the CAN bus . This stops the error count and histogram data collection on the controllers. The CCMON then reads all of the data collected on the controllers and stores it in the database .

When the data is read from all of the controllers the CCMON performs the data analysis on the collected data and presents this information to the user presentation layer .

Other embodiments of the CCMON program have a more robust start and stop synchronization system that includes a request to start or stop a measurement followed by an acknowledgement of that message. When a stop message is received the controllers move the data being collected into a holding area in memory. It is this holding area that the CCMON program reads back. If a controller did not acknowledge the stop sync message the CCMON would resend the stop sync message. All controllers save away the collected data to a temporary storage area. This guarantees the collected data is accurate and uncorrupted.

The CCMON is written in an object orientated fashion using C . shows the high level organization and software architecture . The CCMON consists of several modules within a hardware abstraction layer driver layer and application layer . The blocks in represent classes or collection of classes. The lines represent the high level data flow and interfaces between the classes.

The entire program is configured via an XML file that is stored in the file system of the target. A utility called Expat is used to parse the XML data into a settings run time class. This class contains all of the data that was stored in the XML file. Other classes query the settings class to find the current settings .

All operating system and platform specific implementations are encapsulated in the platform class . This encapsulates things such as thread sleep suspend functions Central Processing Unit CPU timing information time duration etc.

A module exists to abstract the CAN hardware layer . This is done to allow the CAN Hardware layer to be of any type. Currently a hardware abstraction class exists for the Software CANCard using Windows based drivers and the MIG platform. The J1939 classes implements the J1939 communications protocol over the CAN bus. This will be discussed in more detail in a later section.

The Measurement Services class will send a CAN message to initiate a measurement period. After some time period another CAN message is sent to stop the measurement service. This module also initiates a memory access read request to all of the controllers on the CAN bus. Once a measurement period has been completed and the data has been read from the controllers the data will be passed to the Data Analyzer module .

The Data Analyzer module does the actual analysis on the data. It sends the data to other modules to generate graphs of the data. It also looks for trends in the data and generates a summary of the CAN bus health. This is sent to the HTML Generator.

The HTML Generator takes the information from the Data Analyzer module and generates HTML code. This module also uses standard I O file services to write the data to a file system . Therefore this software must be used with an operating system that provides some basic functionality.

The Tx Rx Graph and the Error Graph module use two classes that encapsulate and hide the gd library. These two classes are used for drawing line and bar graphs.

The J1939 module is shown in . The J1939 protocol is a rather complex protocol. For a controller to exist on a CAN bus there are some elements that should be implemented. The implementation shown in is a basic implementation that can be used for this particular application. It is not intended to be a full implementation of the J1939 protocol.

At the lowest level the CAN driver that communicates with the hardware will receive CAN frames and push them into the J1939 system. A callback function must be registered with the J1939 system to allow it to send CAN frames to transmit to the hardware interface.

At the center of the entire module is the J1939 routing table . All messages go through the J1939 routing table. All J1939 sub systems are derived from the CRoutingService class. This class has three static member variables that store a list of J1939 sub systems. There is a list of PGNs that each sub system wants to process and a list of PGNs that the subsystem will respond to if a PGN request is received. When a J1939 sub system is derived from the CRoutingService it s constructor automatically registers this information.

The Claimed Address module stores any address claim message that is received. This module also provides an Application Programming Interface API for other modules to determine who is on the CAN bus.

The Address to Claim module provides an API to send an address claim message with the desired address of this unit. It also provides the capability to send a PGN request for address claim message. This system also allows a module to claim multiple addresses if necessary. To claim multiple addresses additional Address To Claim modules would be instantiated.

The transport protocol module handles all of the J1939 transport protocol messages. When a J1939 sub system needs to handle or transmit data via a transport session it creates a new instance of a Transport Protocol TP manager. The TP Manager then allocates the memory for the TP session on the heap. When TP messages are detected the TP Manager handles all of the transactions. Once a TP session is finished it notifies the owner that the session has been completed. At this point the owner can read the data stored in the TP Manager or destroy the object and recover the memory.

The Memory Access module handles the J1939 memory access protocol. Typically this needs to go through the Transport Protocol module to read or write data from or to controllers on the CAN bus. Only memory access reads are supported in a preferred embodiment although other access types could be supported in other embodiments. When a read operation is requested the Memory Access MA module will determine if it needs to perform a standard MA Read or a TP Read. If a TP read is required it creates a new instance of a TP Manager. The TP Manager then handles the TP session. The MA module handles the Diagnostic Messaging DM 14 15 messages. This module also notifies the owner when a MA read is complete.

There are numerous classes that were created to abstract a CAN frame. In the J1939 protocol a CAN Frame can be interpreted differently depending on its PGN. Based on the PGN of a J1939 message the data and Protocol Data Unit PDU Specific PS Group Extension GE are interpreted differently. Therefore classes were written to provide an interface to reinterpret the data and Identifiers ID s of a CAN frame. Classes were written to interpret a CAN frame as a DM14 DM15 J1939 Name PGN Request and Transport Protocol Connection Manager. This facilitated the coding and handling of various types of CAN frames.

The CAN Message class encapsulates a CAN Data frame. It provides an API to get and set the data in a CAN Frame. It also provides extended functionality to support the J1939 constructs that exist on top of a CAN Frame.

The functions of the Data Analyzer are based on a measurement period. A measurement period is a user defined time window when the measurement of CAN messages and error counts is performed.

The Process measurement class initiates and stops a measurement period. It also handles the creation of the memory access objects and the receiving of data from the controllers. Once the data has been received it formats the data into unit measurement objects. A unit measurement object encapsulates all of the data necessary to represent the error count and CAN message histogram information during a measurement period.

The unit measurement objects are further inserted into a single measurement block . A Single measurement object consists of a start time a stop time the number of controllers followed by all of the single measurement objects. Several single measurement objects make up the database . The database is periodically written to the file system to be stored across CCMON invocations and power cycles of the MIG.

When CCMON is invoked it reads the database file and parses the data into the run time database. The run time database only stores the last 24 hours of data. The database is purged of data older than 24 hours when new data is added.

The end result of the analysis is an executive summary. The CCMON generates several web pages that list the status and results of the analysis. shows an illustrative example of the HTML output .

The general idea behind the summary is a stop light approach. If the CAN Bus Health is green then everything is working correctly. The color yellow indicates an elevated error occurrence on the CAN bus but the vehicle is still operating normally. A red status indicates the CAN bus is potentially affecting operation of the vehicle. Other status indicators may also be used. A user can also click on the links to see graphs of CAN errors Tx Rx counts CAN bus loading and graphs of the CAN bus loading.

Once the measurement results have been stored in the database the CCMON performs an analysis on the data as shown in . Each controller gets assigned a health index . The health index is composed of two separate calculations. The first part of the health index is based on the total error count for each controller and the individual error counts multiplied by a configurable weight . The second part of the health index is based on the number of CAN messages a controller transmits versus the number of CAN messages another controller receives . This information is used as a type of histogram to relate the number of times a controller transmitted a CAN message that another controller failed to receive.

His the health index Wis the weight of the index i Eis the error count for the error i as obtained from each individual controller and Eis the total error count for all errors on the controller. These are summed for all eight errors no error stuff error form error ack error bit error bit error and CRC error.

The weights for all of the experiment results are listed below for a preferred embodiment and in parenthesis for a later preferred embodiment. Other embodiments may have different weights and or different types of errors.

For stuff errors the weight is 20 4.8 . Stuff errors occur more frequently on controllers that do not have the CAN corruption. The weight was chosen to be higher than a bit or bit error but much lower than CRC errors.

For form errors the weight is 20 4.4 . Form errors seem to occur with the same frequency on all controllers on the bus. The weight was chosen to be higher than a bit or bit error but much lower than CRC errors.

For ack errors the weight is 200 140 . If a controller gets ACK errors that means there is no other controller on the bus to acknowledge a CAN frame it is trying to transmit. Therefore there is a high likelihood that this indicates a connector problem.

For bit error the weight is 10 6.7 . This type of error is a good indicator that the controller is having some sort of CAN corruption. Other embodiments may change this weight.

For bit errors the weight is 10 38 . However these errors occur so infrequently that they can be deemed to be of low importance.

For CRC errors the weight is 100 5.8 . CRC errors are an indication that a CAN frame was initially transmitted correctly but was corrupted in route. This is typically an indication of sub bit errors.

His the transmit failure rate between controller X and controller N His the transmit failure rate between controller N and controller X Tis the total number of messages transmitted by controller X Ris the total number of messages received by controller N from controller X Tis the total number of messages transmitted by controller N to controller X Ris the total number of messages received by controller X from controller N m is the total number of controllers detected on the CAN bus. Finally His the overall health for controller X.

The health index may be backwards from what one would expect. A higher health index indicates a decrease in the health of the controller. A health index of 0 or near 0 indicates a healthy controller.

The total health is then compared to a configurable health index threshold. The following pseudo code is used to decide if the health of a controller is in the Green Yellow or Red range 

The total health of the CAN bus is also governed by configurable values. The overall health uses a similar weighting scheme as the health index above. The overall health is determined by the equation below 

Where His the overall health indicator and Cis the color value. Each color is assigned a number. Green health is 0 yellow health is 1 red health is 2 and black health is 3. The current overall health thresholds are as follows less than 2 is a green CAN bus less than 4 is a yellow CAN bus anything equal to or greater than 4 is a red CAN bus. Therefore it takes 2 yellow controllers to make the overall health yellow 4 yellow controllers to make a red bus 2 red controllers to make a red bus and so on.

The above description has described the details of the CCMON program including its architecture how it obtains measurement results and how it analyzes the results stores the results and displays the results to an end user. The configurability of the CCMON program is also discussed as well as the mathematics behind the health indicator.

Based on the above a controller that is having communications problems can be detected and isolated. The part of the CAN network that is having intermittent communications can also be isolated. The CCMON program can isolate a problem to an individual controller having communications problems if it has an elevated health indicator when compared to other controllers on the CAN bus. In other embodiments the program may indicate which controller should be replaced or repaired or for the case of a failing CAN harness the program may indicate to the user where on the CAN bus the problem is occurring.

With this information preventive maintenance can be maintained thereby keeping the vehicle operating at maximum productivity. Based on trends in the data a determination can be made as to whether or not a controller is going to fail. In a preferred embodiment the weights for the various types of errors are configurable. Setting the desired configurable weights for the various errors is performed by an end user. An end user may be the CCMON product manufacturer or program developer maintenance or service providers or vehicle owners. These weights can be further refined by running the program on actual vehicles over time and recording the results. The results can be post processed and adjusted for optimal results on a particular vehicle.

Other embodiments may analyze the data into other ways to analyze the data. For example embodiments may take all of the collected data for all vehicles that the CCMON is on. This data is then hand analyzed to determine what data is good data and what data shows CAN communications failures. A neural network is taught the good data from the bad data. The neural network can be integrated into the CCMON program to perform additional checks on the measured data. If several sources indicate the data is good the neutral network could then use this data to update its training.

Other embodiments may take into account the effects of additional controllers on the bus and how the CAN corruptor is inserted on the CAN bus. In this embodiment only three controllers were used and one controller was always separated from the other two via the CAN corrupter. Other embodiments may include any other number and configuration of controllers. For example an embodiment may have four controllers on the bus with the CAN corruptor inserted between two of them. Therefore controllers and would be able to communicate without problems and controllers and would be able to communicate without problems. However controllers and would have problems communicating with controllers and . This configuration would represent a problem with the CAN harness itself and not a connector on a controller. The effects of this CAN topology may influence how the weights should be configured in the CCMON program.

In the preferred embodiment discussed herein a high end embedded controller was utilized but other embodiments may have the CAN Condition Monitor ported to other less capable controllers or displays. The data could also be collected stored and post processed on a PC running a variant of this program although this configuration would loose the real time diagnostic capability of the current implementation.

There are several benefits of the CAN condition monitor program. First this program can be used as a valuable tool to analyze and predict potential CAN bus problems before they reduce the functionality of the vehicle. Variations in the preferred embodiment with modifications to the CCMON program can provide additional benefit. The CCMON program can be connected to a CAN database containing all of the information about CAN traffic on a vehicle. This includes what controller transmits a message which controller receives the message the periodic transmit rate if it is a periodic message the time out of a message the length of the message and what data in the message is transmitted. The CCMON program can read this data into a run time database monitor all periodic CAN traffic and verify it against the periodic rate from the CAN database. The CCMON can notify the user if the periodic messages start to deviate from the desired rate. This could be factored into each controller health indicator. Eventually this information could be fed back to the designers of the various controllers to help them tune the performance and therefore reduce jitter in the messages.

Another embodiment utilizes microcontrollers that provide the transmit and receive error counts in the CAN controllers. The Infineon formerly Siemens C16x family of microcontrollers do not allow the transmit and receive error counts in the CAN controller to be read by software. These counts are contained with the CAN controller built into the microcontrollers. Also the first ST10 microcontrollers had the same CAN controller as the C16x family. The new ST10F27x microcontrollers as well as the new Infineon XC16x parts provide the transmit and receive error counts as memory mapped registers. This information can be graphed over time and increases in transmit and receive counts can be correlated with external events. These external events could be vibrations in the field high vehicle speeds ambient temperature driver abuse or some other external event that could lead to increased CAN errors or increased stress on a controller.

Although the above description has described monitoring a controller area network where the controllers are communicatively coupled by being physically hard wired other embodiments could utilize wireless technologies between the controllers themselves and between the controllers and the data collector and or analyzer.

Having described the preferred embodiment it will become apparent that various modifications can be made without departing from the scope of the invention as defined in the accompanying claims.

