---

title: Systems and media for sharing session data on a network
abstract: Systems and media for sharing session data on a network are disclosed. More particularly, hardware and/or software for sharing user session data between different servers on a network are disclosed. Embodiments include a data processing system for sharing session data on a network, where the network includes an application server and an enterprise server, each providing at least part of an application to a user on the network. In some embodiments, the application server includes a session transport component for recording changes to user session data with the application server and the enterprise server includes a session transport component for requesting updated user session data from the application server. In further embodiments, the enterprise server may establish a user session based on the updated user session data received from the application server.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07996542&OS=07996542&RS=07996542
owner: International Business Machines Corporation
number: 07996542
owner_city: Armonk
owner_country: US
publication_date: 20081205
---
Pursuant to 35 USC 120 this continuation application claims priority to and benefit of U.S. patent application Ser. No. 10 955 180 entitled SYSTEMS METHODS AND MEDIA FOR SHARING SESSION DATA ON A NETWORK filed on Sep. 30 2004 the disclosure of which is incorporated herein in its entirety for all purposes.

The present invention is in the field of computer systems. More particularly the present invention relates to systems and media for sharing session data on a network particularly for managing user sessions with different servers on a network.

Personal computer systems are well known in the art. They have attained widespread use for providing computer power to many segments of today s modern society. Personal computers PCs may be defined as a desktop floor standing or portable microcomputer that includes a system unit having a central processing unit CPU and associated volatile and non volatile memory including random access memory RAM and basic input output system read only memory BIOS ROM a system monitor a keyboard one or more flexible diskette drives a CD ROM drive a fixed disk storage drive also known as a hard drive or hard disk drive a pointing device such as a mouse and an optional network interface adapter. One of the distinguishing characteristics of these systems is the use of a motherboard or system planar to electrically connect these components together. Examples of such personal computer systems are International Business Machine Corporation s IBM s PC 300 ThinkCentre ThinkPad Aptiva and IntelliStation series of personal computers.

The widespread use of PCs in various segments of society has resulted in a reliance on PCs both at work and at home such as for telecommuting news stock market information and trading banking shopping shipping communication in the form of hypertext transfer protocol http and email as well as other services. PCs are often connected to a network such as the Internet to perform these tasks and access those services. Users gain access to the Internet by accessing a web server via personal Internet service providers ISP s broadband network connections or high speed network connections through office systems. Typically a user will view Internet or intranet content using a graphical browser application such as Microsoft Corporation s Internet Explorer Netscape Communication Corporation s Navigator Mozilla Apple Corporation s Safari etc. Browsers at their most basic level of operation permit users to connect to a given network site download informational content from that site and display that information to the user. To view additional information the user designates a new network address such as by selecting a link whose contents then replace the previously displayed information on the user s computer display.

For traditional web applications a single session is established for a user each time the user logs into the web server. Unlike desktop computers a web server often handles many users simultaneously. A session management mechanism at the web server allows maintaining most of each user s state information i.e. session information at the web server while only passing necessary information for instance the session identifier back to the user via cookies Uniform Resource Locator URL rewriting a Hypertext Markup Language HTML hidden field etc.

The connectivity of PCs has facilitated unprecedented amounts of communication over the Internet as more and more individuals gain access to them and an increasing number of services have become available and such usage is expected to continue to increase. Moreover many content providers are adding more sophisticated features such as high resolution images video shopping carts etc. As usage of the Internet has grown it has experienced slowdowns because of the increased demands. Even though new capacity continues to be added the demands on that capacity also continue to increase. In addition even though the cost of network access has decreased reduction in network traffic still can save on costs. These problems have a particular impact on e commerce websites that often serve thousands of users across the world and require significant network traffic for each user.

Distributed computing over the Internet is one solution that has been developed to help alleviate this problem. A distributed computing system may split processing tasks among multiple servers placing high volume less critical applications on application servers near the user and lower volume more critical applications on a centralized enterprise server or group of servers. For example an e commerce site may locate applications such as a catalog or a user s shopping cart on an application server near the user while functions such as checking out and purchasing items with a credit card are performed on a central enterprise server. This allows the processing burden to be split and optimized over a large number of servers with some closer to the user and thus often quicker to respond while preventing bottlenecks at the enterprise server. One provider of distributed Internet processing is Akamai Technologies Inc. s Akamai EdgeComputing system which allows user interface applications to be deployed on servers on the edge or near the user while communicating back to the enterprise server via Web service calls. IBM s WebSphere Application Server Internet infrastructure software and development tools facilitate network and application deployment. Sun Microsystems Inc. s Java 2 Enterprise Edition J2EE may be used to provide a standard for developing component based multi tier enterprise applications to be used in the distributed Internet computing environment.

One common problem with distributed Internet computing environments involves managing user sessions over the multiple servers. Session data in the form of the HttpSession object of the Java Servlet Application Program Interface API cannot easily be shared between edge and enterprise environments resulting in network inefficiencies in handling user requests and information. For example when a user is an edge application server with a session for their shopping cart and desires to check out a function often reserved for a central enterprise server there is no easy mechanism for sharing session information. One solution to this problem is to manually code the sharing of session information into the application but this requires advance knowledge that sharing is required it must be maintained and is susceptible to getting out of synchronization if not done properly. Moreover this solution does not provide container managed capabilities inherent in J2EE.

There is therefore a need for an easy and effective mechanism for managing user sessions on a network over multiple servers particular for distributed processing of applications on a network. There is an even greater need for such a system when the application is split among a central server and distributed servers.

The problems identified above are in large part addressed by systems methods and media for sharing session data on a network. One embodiment provides a system for sharing session data on a network. The session data sharing system may generally include an application server for providing at least part of an application to a user on the network where the user has an established session on the application server with associated session data. The session data sharing system also generally includes a session transport component of the application server for recording changes to the session data of the user session. The session data sharing system also generally includes an enterprise server in communication with the application server for providing at least part of the application to the user including a session transport component for requesting updated user session data from the application server. Further embodiments include an HttpSession component located on the application server for determining which methods will modify session data and an HttpSession component located on the enterprise server for determining which methods will modify the session data and which methods will require updated session data.

Another embodiment provides a machine accessible medium containing instructions effective when executing in a data processing system to cause the system to perform a series of operations for synchronizing a database on a network. The series of operations generally includes determining that updated session data will be needed by a method of the enterprise server and requesting new session data from the application server. The series of operations also generally includes receiving a request for updated session data and transmitting any updated session data to the enterprise server. The series of operations further may include creating a local session at the enterprise server based on the updated session data. Further embodiments also may include identifying a network address for the application server and forcing session data retrieval from the application server. An additional embodiment provides for determining that session data has been modified at the enterprise server and transmitting an indication of the modified session data from the enterprise server to the application server.

The following is a detailed description of example embodiments of the invention depicted in the accompanying drawings. The example embodiments are in such detail as to clearly communicate the invention. However the amount of detail offered is not intended to limit the anticipated variations of embodiments but on the contrary the intention is to cover all modifications equivalents and alternatives falling within the spirit and scope of the present invention as defined by the appended claims. The detailed descriptions below are designed to make such embodiments obvious to a person of ordinary skill in the art.

Systems and media for sharing session data on a network are disclosed. More particularly hardware and or software for sharing user session data between different servers on a network are disclosed. Embodiments include a data processing system for sharing session data on a network where the network includes an application server and an enterprise server each providing at least part of an application to a user on the network. In some embodiments the application server includes a session transport component for recording changes to user session data with the application server and the enterprise server includes a session transport component for requesting updated user session data from the application server. In further embodiments the enterprise server may establish a user session based on the updated user session data received from the application server.

The disclosed embodiments provide a methodology and system whereby session data may be shared between servers on a network particularly between application servers such as edge application servers and enterprise servers. When a method of the enterprise server needs updated session data a mechanism is provided to retrieve updated session data from the application server. This automates and streamlines the process of getting session data from an application server to an enterprise server. When a method of the enterprise server modifies the session data for a user a mechanism is provided to transmit a notification of the updated session to the application server reducing the probability of conflicts in session data. By providing an easy and automated process of synchronizing session data between application and enterprise servers a user s experience is improved and network traffic is reduced.

While specific embodiments will be described below with reference to particular configurations of hardware and or software those of skill in the art will realize that embodiments of the present invention may advantageously be implemented with other substantially equivalent hardware and or software systems.

Turning now to the drawings depicts an environment for a system for sharing user session data over a network according to one embodiment. In the depicted embodiment session data sharing system includes one or more user computer systems in communication with a network . Each user computer system may include a browser to allow a user of the user computer system to access and view information on various network sites. Each user computer system may be in communication with one or more edge application servers via network . Each edge application server may host part or all of an application on which a user has a session. Each edge application server may include a session transport component for facilitating communication of session data between the edge application server and the enterprise server . The session data sharing system also includes in the depicted embodiment an enterprise server and a session database both in communication with network . The enterprise server also be in communication with user computer system via network and may host all or part of an application on which a user has a session. The enterprise server may serve as a central aspect of a particular network application such as hosting a network site i.e. website . For example a particular network application such as an e commerce website may have many core functions hosted on the enterprise server while many other functions e.g. user display shopping cart catalog etc. may be hosted on edge application servers geographically closer to the user computer system . Enterprise server may include a session transport component for facilitating communication of session data with the edge application servers . Optional session database may be in communication with edge application servers via network for storage of user session information in the event of server failure change out etc.

In session data sharing system any of the user computer systems the edge application servers the enterprise server or the session database may be located at the same location such as in the same building or computer lab or could be remote. While the term remote is used with reference to the distance between the components of session data sharing system the term is used in the sense of indicating separation of some sort rather than in the sense of indicating a large physical distance between the systems. For example any of the components of session data sharing system may be physically adjacent or located as part of the same computer system in some network arrangements. In one embodiment the user computer systems may be spread across the country or world being served by an enterprise server with edge application servers located remote from the enterprise server and closer to the user computer systems to assist in handling user sessions with those user computer systems .

A user may utilize a user computer system and its associated browser to facilitate the access and viewing of content from a network site. User computer systems may include personal computers workstations servers mainframe computers notebook or laptop computers tablet PCs desktop computers portable computer systems PDAs set top boxes mobile phones wireless devices or the like. Browser may be a graphical browser application that allows a user to view Internet or intranet content such as Microsoft Corporation s Internet Explorer Netscape Communication Corporation s Navigator Mozilla Apple Corporation s Safari etc. Using a browser a user may connect to a given network site download content from that site and view that content. To view additional content i.e. content from an edge application server or enterprise server the user may designate a new network address such as by selecting a link on the network site whose contents then replace the previously displayed information on the user s browser .

When a user on a user computer system accesses a network site via either the edge application server or enterprise server the server may establish a session when the user logs in. Optional user identification and authentication information e.g. user identification and password may be required. Login information user preferences or any information about the session may be stored as a cookie on the user computer system so that information and preferences do not need to be reentered each time the user accesses the portal and to reduce network traffic. Session day or information may also be stored in the form of Uniform Resource Locator URL rewriting hidden HTTP fields or other mechanism. When the user has a cookie on their user computer system the server with which they are communicating accesses this cookie and adjusts the information or content sent to the user for display.

Network may be one or more of any type of data communications channel such as the Internet an intranet a LAN a WAN an Ethernet network wireless networks etc. The Internet or other public network may be particularly useful as network so that the components of the session data sharing system may be widely distributed. Those skilled in the art will recognize however that the invention described herein may be implemented utilizing any type of data communications channel.

The edge application servers may serve as an application server for a user on a user computer system providing some or all of the content of a network site. A user may have a user session on an edge application server to store data relating to their interaction with the network site. Each edge application server may be one or more of any type of computer system including servers personal computers workstations mainframe computers notebook or laptop computer desktop computers or the like. In one embodiment an edge application server is an IBM eServer or similar server and may include software such as IBM s WebSphere Edge Server for Multiplatforms Edge Server which provides distributed application processing to the edge of the network under centralized administrative and application control. This type of software may help shift the burden of serving personalized dynamic content from an enterprise server to edge application servers located nearer the edge of the network in other words closer to the users . This type of software may also allow an edge application server to cache and invalidate dynamic content including Java Server Pages JSPs components and servlets whether the content was generated at the edge application server or the enterprise server .

Each edge application server may include a session transport component . A session transport component may be any type of application that facilitates communication including transmitting and receiving between different computer systems e.g. servers . One example session transport component may be a Java SessionTransport method. The session transport component of the edge application server may transmit and or receive session data between the edge application server and the enterprise server . The session transport component of the edge application server may also be used to record changes to session data timestamps for changes to session data indications of requests for updated session data etc. in a table such as that described in more detail in relation to .

The enterprise server may also serve as application server for a user on a user computer system . An enterprise server may establish a user session with a user to store data relating to their interaction with the network site. Each enterprise server may be one or more of any type of computer system including servers personal computers workstations mainframe computers notebook or laptop computer desktop computers or the like. In one embodiment enterprise server is an IBM eServer or similar server. The enterprise server may include software such as IBM s WebSphere Application Server to provide an application server for deployment of enterprise Web services which may use a Java 2 Enterprise Edition J2EE and Web services technology based application platform. In combination with the edge application servers applications historically run on the enterprise server may now execute in whole or in part on edge application servers to take advantage of distributed application processing and proximity of local edge application servers to users.

The enterprise server may include a session transport component . The session transport component of the enterprise server may be similar to session transport component in one embodiment. Session transport component may transmit and or receive session data between the edge application server and the enterprise server . In one embodiment session transport component may be a Java SessionTransport method.

Session database may be in communication with the edge application servers and or enterprise servers via network to provide for a database for storing user session data. Saved user session data may be used to restore user sessions in the event of failure of one of the edge application servers and or enterprise servers .

The disclosed embodiments of the session data sharing system provide an improved methodology for sharing session data between different servers on a network such as the edge application servers and the enterprise server . In one embodiment when the enterprise server determines that it needs updated session data it may request such data from the appropriate edge application server utilizing session transport components respectively . This may occur for example when a user of an e commerce site desires to check out as the enterprise server will need the latest version of the user s shopping cart which likely part of an edge application server session to proceed. The edge application server may then determine whether any new user session data exists and transmit to the enterprise server . The enterprise server in this embodiment may then establish a user session using its existing session data if any and the new session data received from the edge application server . Similarly if the enterprise server modifies any session data the new session data may be pushed out to the edge application server so that it also has the most recent session data. Current solutions do not allow any sharing of session data between the edge application server and the enterprise server without rewriting the application requiring instead that entire pages be transmitted between them at best. The methodology of the disclosed embodiments allows session data to be automatically and easily maintained among the various servers as the user s session moves between the servers while also reducing the amount of network traffic required to provide information to the enterprise server .

The post aspect component may be created by the HttpSession component as a modification to the code using aspect oriented programming AOP principles of methods identifies as modifying session data. AOP is a new programming methodology enabling the modularization of crosscutting concerns through the use of aspects. Crosscutting concerns are aspects of code that cross over multiple functional components. AOP languages such as AspectJ from Xerox Palo Alto Research Center PARC simplify working with aspects by supporting explicit mechanisms for programming crosscutting modularities and structuring code. AspectJ is an AOP language that provides an extension to Java . AOP may be seen as a complementary design and implementation technique to object oriented programming OOP . The process of complementing object functionality in AOP may be carried out by an aspect mechanism that observes and reacts to certain events that happen in objects such as the reception of a message or the catching of an exception. Modification of HttpSession data is another event that may be observed and reacted to by an AOP aspect. An aspect language processor may be responsible for implementing the mechanism through weaving a systematic process of combining aspects and objects and can be done with an interpreter a compiler or a pre processor. For example the AspectJ system may be implemented as a preprocessor which generates Java files where code relating to aspects is automatically woven into the code relating to application classes. AOP allows one to set up replacement and or pre post actions e.g. call this logging procedure use this cached variable etc. whenever a particular variable is accessed or modified or whenever the call stack matches a particular pattern.

In the depicted embodiment post aspect component may be created as a post action to methods that executes after the methods execute. The post aspect component may be created by the HttpSession component when it reviews methods to determine which change HttpSession data and weaves the appropriate code into those methods to create the post aspect component . The appropriate code may be weaved whenever the method is called. The post aspect component may transmit an indication of any changes to the HttpSession data made by methods to the session transport component for recording and eventual transmission to the enterprise server .

The pre aspect component may be created by the HttpSession component as a modification to the code of methods identified as requiring session data and thus updated session data by the HttpSession component . In the depicted embodiment the pre aspect component may be created as a pre action to methods that executes before the methods execute. The pre aspect component may request updated HttpSession data from the session transport component which then requests updated HttpSession data from the edge application server in one embodiment. By requesting updated HttpSession data before methods of the enterprise server execute the most recent user session data may be used by the enterprise server by methods . The session transport component may facilitate transmission of the request for updated session data to the edge application server and receipt of updated session data from the edge application server . In one embodiment the HTTP data e.g. the IP address may be stripped from the HTTP headers of the user request to identify the edge instance i.e. the edge application server with which the user has been communicating so that the proper edge application server may be contacted by session transport component . Once session transport component receives updated user session data session transport component establishes a session local to enterprise server for the user to be used by methods .

The post aspect component may be created by the HttpSession component as a modification to the code of methods identified as modifying session data by the HttpSession component . In the depicted embodiment the post aspect component may be created as a subsequent action to the execution of methods that executes after the methods execute. The post aspect component may be used to save changes to session data to session transport for ultimate transport to session transport component and the edge application server . In one embodiment the HTTP data e.g. the IP address may be stripped from the HTTP headers of the user request data to identify the edge instance i.e. the edge application server with which the user has been communicating so that the proper edge application server may be contacted by session transport component . The post aspect component allows for changes to session data at the enterprise server to be pushed to the appropriate edge application server so that it will be properly updated. When session transport at the edge application server receives the updated session data the session data may be saved and the time of receipt recorded.

In an alternative embodiment the user s request may be held up until any modified data is transmitted to the edge application server . This may help prevent confusion between different user sessions with the edge application server and enterprise server . This does however potentially slow down the user s interaction with the enterprise server . For this and other reasons it may be beneficial to limit the number of modifications made to the session at the enterprise server .

The IIS server may include an IIS session transport component . IIS session transport component may perform many of the same functions as session transport component . In one embodiment IIS session transport component may include a module in the IIS webapp root location in order to be able to gain access to the session state of the IIS based applications. Accordingly high level access to the IIS server is required for the operation of IIS session transport component of the session data sharing system .

The IIS server and the J2EE application server may communicate with user computer system through a router connected to network . The J2EE application server of the depicted embodiment includes a pre aspect component one or methods a HttpSession component a J2EE session transport component and a post aspect component . These components may be substantially similar to those of and the discussion thereof will not be repeated here in the sake of brevity.

Modifications to user session data in the IIS server may be communicated to the J2EE application server utilizing the IIS session transport component and the J2EE session transport component . The HttpSession component may be used to identify methods within the J2EE application server that require updated session data and automatically instrument those methods. The pre aspect component may be used to initiate the request to the IIS server for updated session data for a user session and once the session data is received a session local to the J2EE application server may be created. In many fashions the principles of session data sharing system may be applied to that of session data sharing system with the IIS server taking the role of the edge application server and the J2EE application server taking the role of the enterprise server . In the depicted embodiment however changes to session data at the J2EE application server cannot be shared with the IIS server . Accordingly changes to the J2EE session data should be minimized in the depicted embodiment.

Elements through may be performed by session transport component in one embodiment. The method of flow chart then continues to element receiving notification that session data was modified. In this element the session transport component may receive notification from a post aspect component that a method modified session data such as HttpSession. The method of flow chart then continues to element saving an indication of the modification of session data. In this element any modifications to session data the time of the modifications or other data may be saved by the session transport component in a database or cache. In one embodiment the data may be saved in the format described in relation to . The method continues to element receiving a request from the enterprise server for updated session data. The request in this element may be received from the session transport component of the enterprise server .

The method of flow chart then continues to decision block where it is determined whether the request for session data is for all session data or just session data since the last request. If the request is for all session data the method continues to element transmitting all the session data to the enterprise server . After the session data is transmitted the method continues to element saving an indication of the enterprise request for session data after which the method terminates. The indication of the request may be saved in a table as described in relation to . If the request is for the updated session data the method continues to decision block determining whether the session data has been modified since the last request of the enterprise server . The determination may be made based on saved information regarding the last request from the enterprise server the record of changes to session data stored at the session data component and the current time.

If the session data has not been modified since the last request the method continues to element transmitting an indication to the enterprise server that no session data has changed. The method then continues to element saving an indication of the enterprise request of session data after which the method terminates. If the session data has been modified since the last request the method continues to element transmitting new session data to the enterprise server . Afterwards the method continues to element saving an indication of the enterprise request of session data after which the method terminates.

The method of flow chart continues to decision block determining if session data is received from the edge application server . If session data is received the method continues to element creating a local session from received session data after which the method terminates. If only updated session data is received the local session may be based on the earlier session data and the updated session data. If full session data is received the local session may be based on the full session data. If no session data is received such as after a period time the method continues to decision block determining if previous session data exists from the last time the user had a session with the enterprise server . If previous session data exists the method continues to element using the existing session after which the method terminates. If previous session data does not exist the method continues to element requesting forced session data retrieval from the edge application server . When session data is received from the edge application server the method continues to element creating a local session based on the received session data after which the method terminates.

If the local session data did not change the method continues from decision block to element leaving the local session for the standard timeout timeframe. The method then continues to element receiving modified subsets of session data. Element may be performed by the session component module of the edge application server where it receives the modified session data from session component module . The method then continues to element saving an indication of the modification of session data which may also be performed by session component module . After element the method terminates.

In an alternative embodiment the user s request is not completed until the edge application server is notified of any changes in the session data at the enterprise server . In this embodiment element would be executed after the other elements of . This embodiment may slow the user s experience with the enterprise server but helps to minimize the possibility of incorrect session data at the edge application server .

The methods of and may be applicable to the session data sharing system of with the IIS server taking the role of the edge application server and the J2EE application server taking the role of the enterprise server . In one embodiment however the method of would not be applicable to session data sharing system as the IIS session transport component may not receive changes to the session data at the J2EE application server resulting in the inability to update the IIS server with updated session data from the J2EE application server . One of ordinary skill in the art will recognize that many alternatives are possible for applying the methods of and to the session data sharing system .

Elements and may be performed by the session transport component of the enterprise server in one embodiment. In element the session transport component may receive the session invalidation from the edge application server . The method of flow chart continues to element invalidating the session and to element transmitting an acknowledgement of the invalidated session to the edge application server . After element the method continues to decision block determining whether an acknowledgement was received. Element is performed at session transport component of the edge application server in one embodiment. If an acknowledgement is received indicating that the enterprise server invalidated the session the method terminates. If no acknowledgement is received the method returns to element where a new notification may be transmitted to the enterprise server . In one embodiment notifications may be sent to the enterprise server until an acknowledgement is received. In another embodiment notifications may only be sent a set number of times. Termination of the session at the enterprise server assists in preventing hackers or other unauthorized persons from attempting to access a user s session data.

Session invalidation may be modified when applied to the session data sharing system of . When an IIS server abandons a session e.g. when a user logs out there is nothing that can be done to notify the J2EE application server . In this case the J2EE application server may simply timeout the user s session. Any activity that the user should attempt to continue on the J2EE server will not affect anything on the IIS server as the user would no longer have their IIS session cookie.

The session identifier column may hold an identifying number used by the edge application server to identify different user sessions. The modification timestamp column may hold a record of the last time a session was modified. In an alternative embodiment the modification timestamp column may include a record of multiple modifications to a session. Enterprise requests column may include a record of the last time the enterprise server requested updated session data. Other alternatives for session data table are possible.

In general the routines executed to implement the embodiments of the invention may be part of an operating system or a specific application component program module object or sequence of instructions. The computer program of the present invention typically is comprised of a multitude of instructions that will be translated by the native computer into a machine readable format and hence executable instructions. Also programs are comprised of variables and data structures that either reside locally to the program or are found in memory or on storage devices. In addition various programs described hereinafter may be identified based upon the application for which they are implemented in a specific embodiment of the invention. However it should be appreciated that any particular program nomenclature that follows is used merely for convenience and thus the invention should not be limited to use solely in any specific application identified and or implied by such nomenclature.

It will be apparent to those skilled in the art having the benefit of this disclosure that the present invention contemplates methods systems and media for sharing session data on a network. It is understood that the form of the invention shown and described in the detailed description and the drawings are to be taken merely as examples. It is intended that the following claims be interpreted broadly to embrace all the variations of the example embodiments disclosed.

