---

title: Systems and methods for configuring, updating, and booting an alternate operating system on a portable data reader
abstract: Systems and methods are provided for updating configuration settings, updating an OS image, and booting an alternate OS on a portable data reader including a reading engine for reading data from an object. Configuration settings of a portable data reader may be updated by detecting whether a storage device having a set of updated configuration settings stored thereon has been coupled to the portable data reader and, if so, updating one or more configuration settings on the portable data reader with one or more of the updated configuration settings from the storage device.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09298479&OS=09298479&RS=09298479
owner: Datalogic ADC, Inc.
number: 09298479
owner_city: Eugene
owner_country: US
publication_date: 20081217
---
This application claims the benefit under 35 U.S.C. 119 e of U.S. Provisional Application No. 61 018 371 filed Dec. 31 2007 which is hereby incorporated by reference in its entirety.

 2008 Datalogic Mobile Inc. A portion of the disclosure of this patent document contains material that is subject to copyright protection. The copyright owner has no objection to the facsimile reproduction by anyone of the patent document or the patent disclosure as it appears in the Patent and Trademark Office patent file or records but otherwise reserves all copyright rights whatsoever. 37 CFR 1.71 d .

The field of the present invention relates generally to portable data reading devices and methods of configuring updating and booting an alternate operating system on data reading devices.

Data reading devices such as barcode or optical code scanners RFID readers and the like are a popular means for data acquisition in computerized processing systems. Barcode scanners are used to optically capture barcode patterns or other symbols or information imprinted on different surfaces in order to transmit the information encoded in the barcode pattern or symbol to a host processing device.

Two major types of commonly used barcode scanners are flying spot laser scanners and image based barcode scanners. Flying spot laser barcode scanners generally obtain barcode information by sweeping a laser spot across the barcode. The laser spot may be generated from a light source inside an oscillating reflecting surface typically a mirror. The light reflected from the barcode is collected by a photosensor which outputs an analog waveform representing the relative spacing of the bars in the barcode. The analog signal may then be digitized and decoded into data representing the information encoded in the barcode.

Barcode scanning devices based on solid state image circuitry such as charge coupled devices CCDs are also conventionally known. These types of barcode scanners are typically implemented using either a one dimensional or two dimensional imaging array of photosensors or pixels to capture the barcode. One dimensional CCD readers capture a linear cross section of the barcode at once producing an analog waveform whose amplitude represents the relative darkness and lightness of the barcode. Two dimensional CCD readers capture an entire two dimensional image at once.

A relatively new type of data reading technology is radio frequency identification RFID . An RFID system typically employs at least two components a transponder or tag which is attached to the physical item to be identified and a reader which sends an electromagnetic signal to the transponder and then detects a response. Typically the reader emits an RF signal which is received by the transponder after the transponder comes within an appropriate range. In response to the signal from the reader the transponder sends a modulated RF signal back to the reader. The reader detects this modulated signal and receives the information from the transponder by decoding the modulated signal. After receiving the information from the transponder the reader can either store the decoded information or transmit the decoded signal to a computer or other host.

The transponder used in an RFID system may be either passive or active. A passive transponder can be a simple resonant circuit including an inductive coil and a capacitor. Passive transponders are generally powered by the carrier signal transmitted from the reader. Active transponders on the other hand generally include transistors or other active circuitry and require their own power source.

Barcode scanners and RFID readers may be physically separate from host processing devices such as personal computers which provide decoding software computer storage and communication interfaces. Increasingly however barcode scanners and RFID scanners are being integrated into portable host processing devices. For instance the Falcon 4420 data collection terminal available from Datalogic Mobile Inc. of Eugene Oreg. combines a laser barcode scanner storage memory and wireless communication interface in a compact portable form factor. Such portable devices can be easily transported to different locations within a warehouse retail store or the like greatly simplifying the tasks of receiving and inventorying.

Updating configuration settings updating an operating system OS image and booting an alternate OS on a portable data reader may require intervention by the user e.g. to initiate updates monitor status and respond to prompts and may also require connection to a host computer. Accordingly the present inventor has recognized a need for techniques to update configuration settings update an OS image and boot an alternate OS on a portable data reader that does not require a host computer and that requires little or no user intervention.

With reference to the above listed drawings this section describes particular embodiments and their detailed construction and operation. The embodiments described herein are set forth by way of illustration only. In light of the teachings herein those skilled in the art will recognize that there may be equivalents to what is expressly or inherently taught herein. For example variations can be made to the embodiments described herein and other embodiments are possible. It is not always practical to exhaustively catalog all possible embodiments and all possible variations of the described embodiments.

For the sake of clarity and conciseness certain aspects of components or steps of certain embodiments are presented without undue detail where such detail would be apparent to those skilled in the art in light of the teachings herein and or where such detail would obfuscate an understanding of more pertinent aspects of the embodiments.

Before describing detailed examples of updating configuration settings updating an operating system OS image and booting an alternate OS on a portable data reader a representative portable data reader and associated concepts will first be described.

The portable data reader may include a reading engine such as a barcode scanning engine RFID reading engine or both. The reading engine may read barcode symbols from a physical object information from an RFID tag or both. Various reading engines are known in the art. For instance a laser barcode scan engine is available from Datalogic Mobile Inc. or other manufacturers. Similarly an RFID reading engine is available from Datalogic Mobile Inc. SAT Corporation of Houston Tex. or other manufacturers. In various other embodiments the reading engine may provide dual barcode RFID reading. As used herein barcode scan engines may also encompass CCD based imagers.

The portable data reader may include a processing unit . The processing unit may be any of various commercially available processors or other logic machine capable of executing instructions such as an Intel XScale PXA270 520 MHz processor. Dual microprocessors or other multi processor architectures may also be employed as the processing unit .

A standard input controller may be provided to receive user input from a keypad a pointing device not shown or other wired wireless input devices. The input controller may comprise a universal interface driver application specific integrated circuit UIDA . Further details of the UIDA can be found in U.S. Pat. No. 6 877 663 which is hereby incorporated by reference in its entirety. Other input devices e.g. input device s may be included such as a microphone digital camera fingerprint scanner touchscreen touchpad trackball and tablet. While the input devices may be integrated into the portable data reader and coupled to the processing unit via the input controller the input devices may also connect via other interfaces such as one or more connector s . The connector may include one or more data interfaces bus interfaces wired or wireless network adapters or modems for transmitting and receiving data. Accordingly the input controller may include one or more of hardware software and firmware to implement one or more protocols such as stacked protocols along with corresponding layers such as for example application layers e.g. HTTP transport layers e.g. TCP network layers e.g. IP and link layers e.g. Ethernet . According to one embodiment the connector functions as a serial port e.g. RS232 . However the connector may also support other interfaces such as a Universal Serial Bus USB port an Ethernet port a parallel port an IEEE 1394 serial port or an IR interface. The input controller may also support various wired wireless optical and other communication standards.

The portable data reader may present data prompts and otherwise communicate with a user via one or more display devices such as an integrated liquid crystal display LCD organic light emitting diode OLED cathode ray tube CRT display or other suitable micro display. A display controller may drive the display device .

The portable data reader may also include a network interface to communicate with one or more other devices such as a server a host computer or a point of sale terminal via an external network not shown . For example data gathered by or decoded by the portable data reader may be passed along to a server. The network interface may facilitate wired or wireless communication with other devices over a short distance e.g. Bluetooth or nearly unlimited distances e.g. the Internet . In the case of a wired connection a data bus may be provided using any protocol such as IEEE 802.3 Ethernet advanced technology attachment ATA personal computer memory card international association PCMCIA and USB. A wireless connection may use low or high powered electromagnetic waves to transmit data using any wireless protocol such as Bluetooth IEEE 802.11b or other WiFi standards infrared data association IrDa and radio frequency identification RFID . In addition a modem module not shown or Ethernet module not shown may be coupled to the connector to facilitate a WAN networking environment.

The portable data reader further includes a memory which may be implemented using one or more standard memory devices. The memory devices may include for instance RAM ROM and EEPROM devices and may also include magnetic or optical storage devices such as hard disk drives CD ROM drives and DVD ROM drives. The portable data reader may also include an interface coupled to an internal hard disk drive . Interface may also be coupled to removable memory such as flash memory a magnetic floppy disk drive an optical disk drive or another drive. Further the interface and or input controller may be configured for external drive implementations such as over a USB IEEE 1194 or PCMCIA connection.

In one embodiment any number of program modules may be stored in the drives e.g. drive and RAM including an operating system OS one or more application programs other program modules e.g. instructions to implement the methods described below data file system settings and read data . All or portions of the program modules may also be cached in RAM . Any suitable operating system may be employed such as Windows CE 5.0 Windows Mobile Linux or other commercially available or proprietary operating systems.

A boot loader such as a basic input out system BIOS may be stored in a non volatile memory such as ROM EPROM EEPROM for loading the OS of the portable data reader . According to one embodiment the OS is booted on the portable data reader as follows. Upon initialization e.g. when the portable data reader is turned on or reset the processing unit runs the boot loader stored in the non volatile memory . The boot loader reads an OS image into operational memory within the processing unit RAM or both. The OS image may comprise an executable file containing an operating system kernel that the boot loader uses to load the OS . The OS image may be stored in the non volatile memory along with the boot loader or may be stored in another suitable location such as in the internal hard disk drive e.g. within the master boot record . Once the boot loader loads the OS image into operational memory control of the boot up process transitions to the OS image which reads the OS e.g. the components and modules that comprise the OS into volatile memory e.g. RAM from a non volatile memory e.g. the internal hard disk drive . Once the OS has been loaded into memory control of the portable data reader transitions to the OS . Booting the OS on the portable data reader may comprise additional or fewer steps. For example the boot loader may perform a power on self test e.g. test whether the processor memory and I O devices are functioning before loading the OS image may sequence through a predetermined list of non volatile storage devices in search of an OS image to load and may comprise multiple stages.

The memory the internal hard disk drive or both may also store a number of settings for the portable data reader . As will be described in greater detail below the settings may include various symbology settings device settings e.g. user interface and network settings. Additionally the memory the internal hard disk drive or both may store read data e.g. symbols and information read from barcodes and RFID tags obtained by the reading engine . Any of the foregoing may be stored within or indexed by a file system which may be managed by the OS .

The above described components including the reading engine processing unit input controller display controller network interface memory and interface may be interconnected via a bus . While a bus based architecture is illustrated in other types of architectures are also suitable e.g. one or more components may be directly coupled to one another . While the illustrated embodiment depicts one possible configuration of a portable data reader it should be recognized that a wide variety of hardware and software configurations may be provided. For example other versions of the portable data reader may have less than all of these components or may contain other components. Other examples and additional details regarding portable data readers may be found in commonly owned U.S. Pat. No. 7 273 179 issued Sep. 25 2007 entitled Portable Data Reading Device With Integrated Web Server For Configuration And Data Extraction which is incorporated herein by reference in its entirety.

Traditionally updating configuration settings updating an OS image and booting an alternate OS on a portable data reader involved connecting the portable data reader to a host computer installing custom software on the host computer and sequencing through a series of prompts. As will be described in more detail below updating configuration settings updating an OS image and booting an alternate OS on a portable data reader may be performed by connecting an external USB mass storage device or other memory device to the portable data reader. However before describing the details of the USB architecture e.g. USB 2.0 and associated concepts will be described in this section. The USB architecture comprises three components 1 a host 2 one or more hubs and 3 one or more functions. Generally there is only one host in a USB system and the host may be implemented in any combination of hardware firmware or software. The host may detect the attachment and removal of USB devices manage USB standard control flow between the host and USB devices manage data flow between the host and USB devices collect status and activity statistics and control the electrical interface between the Host Controller and USB devices including power limits. Hubs may provide additional attachment points to the USB e.g. the host may have a hub to which other hubs and functions may be connected . Functions may provide a capability to the host such as an ISDN connection or providing storage. A USB device e.g. a peripheral may refer to a logical or physical entity that performs a function. For example a device may refer to a single hardware component such as a memory device or a device may refer to a collection of hardware components that perform a particular function such as a USB interface device. Thus a device may be either a hub or function.

USB On The Go OTG is a supplement to the USB 2.0 specification and was developed to allow portable devices to communicate with each other over a USB interface. With respect to USB OTG all devices are considered peripherals. In other words when two USB OTG devices are connected either device may lack one or more characteristics including for example storage for a large number of device drivers an ability to source a large current a USB A type connector or any combination thereof. However the USB OTG devices may include one or more characteristics such as for example limited host capability session request protocol SRP host negotiation protocol HNP and or a micro AB receptacle. A limited host generally has little or no ability to dynamically add new device support. Instead the limited host is generally designed to have host control over a predetermined number of peripherals such as a USB mass storage device. As the name implies SRP allows a B device e.g. the device that starts a session as a peripheral to initiate a data session with an A device e.g. the device that supplies power to the B device and acts as the host at the start of a session . HNP allows the devices to switch roles e.g. host and peripheral roles .

Additional details regarding the USB architecture e.g. USB 2.0 and USB OTG may be found in the Universal Serial Bus Specification Revision 2.0 dated Apr. 27 2000 and the On The Go Supplement to the USB 2.0 Specification Revision 1.3 dated Dec. 5 2006 both of which are incorporated herein by reference in their entireties.

Traditionally configuration settings on a portable data reader have been updated using one of several methods. For example the user may navigate to one or more menus and select desired configuration settings e.g. using a portable data reader with an input device and a display or coupling the portable data reader to a display via a host or other computer . However navigating through a menu system may be time consuming. Additionally if the user would like to select a configuration setting not currently installed on the portable data reader e.g. the capability of reading or decoding a new barcode symbology the user may need to download the new configuration setting and connect the portable data reader to a host computer to install the new configuration setting.

The one or more configuration settings may be stored in memory drive another memory or a suitable combination thereof. The configuration settings may include one or more of the following various display settings network settings device settings decoding settings user interface settings and input settings. Other configuration settings may be provided.

The decoding settings of the portable data reader may allow a user to select a decoding device decoding options general options and audio properties. For example the user may be able to select from various decoding devices such as a barcode or optical code scanner magnetic stripe reader or RFID reader. In addition the user may be able to select from various general options such as programming labels symbology IDs label prefixes and suffixes data separator options whether a spotting beam should be enabled and the spotting beam timeout. The audio properties may include for instance a beeper volume and a number of good read tones. Various decoding options including user IDs e.g. certain users may only be authorized to decode using certain symbologies redundancy levels decoding aggressiveness symbologies as well as various symbology related settings such as minimum length maximum length and trioptic settings. The various decoding settings will depend of course on the specific reading engine being used.

The portable data reader may be configured to read or decode certain symbology types. In the context of barcode scanning symbologies are effectively barcode languages. Different symbologies provide different tradeoffs in terms of the size of the symbol set the encoding density and the readability of the symbols. Various symbologies are known in the art. For example one dimensional 1D barcode symbologies may include Code 128 Code 29 Interleaved 2 of 5 matrix 2 of 5 Universal Product Code UPC Extended Code 39 Code 93 UCC 128 Codabar EAN JAN MSI Zip 4 Pharmacode 39 RSS Standard 2 of 5 Trioptic DPBC POSTNET. Examples of two dimensional 2D symbologies include PDF 417 DataMatrix Code and MaxiCode.

The various display settings network settings device settings user interface settings and input settings will depend of course on the specific portable data reader . For example the display settings may include backlight settings and display configuration e.g. background settings coloring scheme display resolution and display rotation . The network settings may include Bluetooth settings internet options e.g. default web pages connection settings security privacy and advanced options network and dial up connection settings e.g. IP address settings and name server settings host computer connection options e.g. USB or RS232 serial port connections and WiFi settings. The user interface and input settings may include input panel properties keyboard configurations and stylus calibration. The device settings may include data and time settings error reporting password settings and power configuration settings.

As will be described in more detail with respect to one or more configuration settings on the portable data reader may be updated with configuration settings stored on the USB mass storage device as illustrated by the logical update . According to one embodiment the USB mass storage device comprises a flash memory device. However the USB mass storage device may include other memory devices such as magnetic hard drives optical drives e.g. a CD ROM or DVD reader and writer drives floppy drives digital cameras digital audio players and mobile phones. According to one embodiment the configuration settings may be stored within or indexed by a configuration settings file type. For example the configuration settings file may be a text file .txt with a set of linked values e.g. decoding device bar code scanner symbology Code 39 and backlight on . However the configuration settings file may take another suitable form. For example the configuration settings may be formatted such that the configuration settings may be transmitted as Simple Network Management Protocol SNMP Management Information Base MIB data which may define a set of configuration settings. The following example lists partial MIB file contents for a Falcon data collection terminal. For brevity only portions of the example MIB file contents are provided.

According to one embodiment the USB mass storage device is connected to the portable data reader via the docking station e.g. a cradle for the portable data reader . The dock may have a connector to facilitate a connection between the portable data reader and the dock with or without a cable. For example the dock may have contacts configured to receive a corresponding connector on the portable data reader e.g. the connector of . Once connected to the dock the portable data reader may transfer data to and from the dock via data link . In addition the dock may also charge a battery within the portable data reader using a power supply connected to the dock .

The dock may also have a connector to facilitate a connection between the USB mass storage device and the dock . For example the connector may be a USB A type receptacle or plug a B type receptacle or plug a micro AB receptacle or plug or other micro or mini USB plug. In addition the connector may comprise an RS232 connector or PCMCIA connector. Once connected to the dock the USB mass storage device may transfer data to and from the dock via data link .

According to one embodiment the connector of the portable data reader facilitates both USB and RS232 serial bus connections. For example the connector may include 16 pins four of which may be used for USB e.g. V D D and GND and eight of which may be used for RS232 e.g. RX TX CTS RTS DSR DTR and GND . The remaining pins may be used for power and ground connections a USB OTG ID signal other signals e.g. when the portable data reader is connected to the dock or may not be connected. Accordingly the portable data reader may connect to a host computer in several ways using one or more cables. For example a cable may facilitate a connection between the portable data reader and a USB connector on the host computer. Further a cable may facilitate a RS232 connection. Thus the dock may be configured to convert the I O connector of the portable data reader into both a USB connector and RS232 connector. In other words the dock may pass the RS232 pins to a RS232 connector mounted thereto and pass the USB pins to a USB connector mounted thereto e.g. a type A connector a type B connector or a micro AB receptacle . Thus the dock may provide a straight through connection between the portable data reader and the USB mass storage device when both devices are connected to the dock . However the dock may also contain logic such as logic to implement a USB hub.

According to another embodiment the portable data reader contains a micro AB receptacle and is configured to support USB OTG peripherals. In other words the portable data reader may itself be a fully compliant USB 2.0 peripheral and may also support USB OTG features such as limited host capability e.g. to support a USB mass storage device session request protocol and host negotiation protocol. In addition the portable data reader may have full host capability. Thus the USB mass storage device may be directly connected to the portable data reader if the portable data reader incorporates a suitable connector e.g. a type A receptacle or a micro AB receptacle . Other suitable methods of connecting a USB mass storage device or other peripheral device to a portable data reader may be utilized such as one or more of the interconnection systems methods and devices described in commonly owned U.S. Pat. No. 6 612 495 entitled Multiple Interface Selection System For Computer Peripherals which is incorporated herein by reference in its entirety one or more of the host interface drivers described in commonly owned U.S. Pat. No. 6 877 663 entitled Universal Interface Driver System For Data Reader which is incorporated herein by reference in its entirety or one or more of the interfaces described in commonly owned U.S. Pat. No. 6 041 374 entitled PCMCIA Interface Card For Coupling Input Devices Such As Barcode Scanning Engines To Personal Digital Assistants And Palmtop Computers which is incorporated herein by reference in its entirety.

Thus with reference to the portable data reader may be considered a host in one context and a function in another context. For example when connected to a personal computer the personal computer may be considered the host and the portable data reader may be considered the peripheral. By way of another example when the USB mass storage device is connected to the portable data reader the portable data reader may provide host functionality and the USB mass storage device may be considered the peripheral. Further in the USB OTG context the portable data reader may be considered the A device when connected to the USB mass storage device e.g. the B device .

Next at step the method detects whether the USB mass storage device has been attached to the portable data reader. Step may be accomplished in several ways. According to one embodiment the portable data reader includes a hub. Hubs may have status bits used to report the attachment or removal of a USB device on one of its ports. Thus the host may periodically query the hub to retrieve the bits to determine if a device has been attached or removed. For example the portable data reader may include a hub and a host driver e.g. supplied with the OS . After the USB mass storage device and the portable data reader have been connected to the dock a status bit within the hub may report the attachment. The host driver may periodically poll the status bit to discover if the USB mass storage device or any other device has been connected and report this event to the OS an application program or another program module. Other suitable methods of detecting whether the USB mass storage device has been attached to the portable data reader may be utilized. For instance a physical wire that changes state e.g. from high to low or from low to high may be included.

At step the method determines whether the USB mass storage device has stored thereon any configuration settings e.g. decoding options default bar code symbology . For example the OS may receive a notification that the USB mass storage device has been attached to the portable data reader and mount a file system e.g. a directory structure of the USB mass storage device . An application waiting for the USB mass storage device to be attached may also receive a notification e.g. via the OS that the storage device has been attached. After being notified the application may search the directory structure of the USB mass storage device for configuration settings. For example the application may look for a certain file type that should contain the configuration settings e.g. a text file or other file type .

Other suitable methods of determining whether the USB mass storage device has configuration settings stored thereon may be utilized. For instance the USB mass storage device may have stored thereon one or more sentinel files such as a file that indicates that there is a special file e.g. the configuration settings on the file system. Further information could also be embedded in a control structure of the file allocation table FAT that indicates that there is a special file on the file system. In addition the USB mass storage device may be formatted to include another or unique type of file system. For example the USB mass storage device could include a FAT16 FAT32 new technology file system NTFS or other type of file system. In addition a unique file system may be specifically designed. For example the unique file system may look corrupted to other file systems but may be recognized by the portable data reader.

After determining that the USB mass storage device has configuration settings stored thereon at step the method may optionally determine whether any of the configuration settings stored on the USB mass storage device are different from the configuration settings on the portable data reader. For example the method may compare each configuration setting on the portable data reader to corresponding configuration settings stored on the USB mass storage device and update only those configuration settings on the portable data reader that are different from the configuration settings on the USB mass storage device. Thus even if the USB mass storage device contains configuration settings the configuration settings on the portable data reader may not be updated if the configuration settings on the USB mass storage device are not updated.

At step the method updates one or more of the portable data reader s configuration settings using the configuration settings stored on the USB mass storage device and optionally restarts the portable data reader . For example after an application determines that the USB mass storage device has configuration settings stored thereon the application may transfer e.g. execute a file copy command the configuration settings from the USB mass storage device onto the portable data reader see e.g. in . However if the configuration settings are stored within a file the file need not be transferred to the portable data reader. For example the portable data reader may simply access the file on the USB mass storage device.

One or more configuration settings on the portable data reader may be updated by transmitting at least one configuration setting to the portable data terminal via an application programming interface API . For example after an application determines that the USB mass storage device has configuration settings stored thereon the application may request the OS to update the portable data reader s configuration settings with the configuration settings found on the USB mass storage device e.g. via a source code interface . In addition the application may utilize a standard Win32 API for Windows settings.

Other suitable methods of updating configuration settings on the portable data reader with configuration settings found on the USB mass storage device may be utilized. For instance the portable data reader s registry settings may be modified. In addition the USB mass storage device s memory may be physically mapped onto the portable data terminal s system memory. Mapping the USB mass storage device s memory onto the portable data terminal s system memory effectively allows the USB mass storage device to become an extension of the operating system on the portable data reader. If the USB mass storage device includes applications settings and configurations the portable data reader may access the applications settings and configurations stored on the USB mass storage device while the operating system on the portable data reader remains the same. In other words attaching a USB mass storage device and mapping the USB mass storage device s memory on the portable data terminal s system memory effectively extends the operating system on the portable data reader and may allow the portable data reader to contain only part of the operating system until the USB mass storage device is attached to the portable data reader. Thus attaching a USB mass storage device and mapping the USB mass storage device s memory on the portable data terminal s system memory may be used for security reasons.

The method may update one or more of the portable data reader s configuration settings at step automatically without user intervention or may prompt the user before updating the configuration settings. Thus the method may implement an unattended configuration parameter update of the portable data reader once the user connects the portable data reader to the dock without connecting the portable data reader to a host computer.

Multiple portable data readers may be updated with one or more USB mass storage devices. For example the same or different configuration settings may be stored on a plurality of USB mass storage devices e.g. settings for inventorying shipping and receiving applications . The USB mass storage devices may be plugged into various docks and when each of the portable data readers is plugged into its respective dock e.g. for charging its configuration settings may be updated. By way of another example one USB mass storage device may have a plurality of configuration settings some of which are intended for specific portable data readers e.g. the configuration settings are addressable or otherwise marked for use with specific portable data readers . If the USB mass storage device is plugged into a dock a plurality of portable data readers may access the mass storage device and search for and update configuration settings intended for each of the individual portable data readers.

Traditionally updating an OS image on a portable data reader involved obtaining an updated OS image e.g. by downloading the updated OS image and installing an OS image update utility on a host computer. After attaching the portable data reader to the host computer and executing the OS image update utility on the host computer the user can navigate through a series of menus to select the updated OS image file and initiate an OS image update e.g. using a portable data reader with an input device and a display or coupling the portable data reader to a display via a host or other computer . Thus traditional methods for updating an OS image on a portable data reader require a fair amount of user intervention and knowledge may be time consuming and are prone to errors that may corrupt the OS image on the portable data reader thereby rendering the portable data reader inoperable an inoperable portable data reader may need to be sent to a service center or the manufacturer for repair .

The operating system image may be stored in memory drive another memory or any combination thereof and may comprise executable files containing an operating system kernel and other additional machine executable code that a boot loader of the portable data reader uses to load an operating system and transfer control of the portable data reader to the operating system e.g. a 32 bit executable file . The operating system image may also comprise any combination of an operating system kernel and other additional machine executable code one or more configuration files and one or more data files that together form the operating system.

As will be described in more detail with respect to the operating system image on the portable data reader may be updated with an updated operating system image stored on the USB mass storage device . According to one embodiment the USB mass storage device comprises a flash memory device. However the USB mass storage device may include other memory devices such as magnetic hard drives optical drives e.g. a CD ROM or DVD reader and writer drives floppy drives digital cameras with memory digital audio players with memory and mobile phones with memory.

According to one embodiment the USB mass storage device is connected to the portable data reader via the docking station . The dock may have a connector to facilitate a connection between the portable data reader and the dock with or without a cable. For example the dock may have contacts configured to receive a corresponding connector on the portable data reader e.g. the connector of . Once connected to the dock the portable data reader may transfer data to and from the dock via data link . In addition the dock may also charge a battery within the portable data reader using a power supply connected to the dock .

The dock may also have a connector to facilitate a connection between the USB mass storage device and the dock e.g. a USB A type receptacle or plug a B type receptacle or plug a micro AB receptacle or plug other micro or mini USB plug an RS232 connector or a PCMCIA connector . Once connected to the dock the USB mass storage device may transfer data to and from the dock via data link

As described with reference to the dock may be configured to convert an I O connector of the portable data reader into both a USB connector and RS232 connector. In other words the dock may pass RS232 pins to a RS232 connector mounted thereto and pass USB pins to a USB connector mounted thereto e.g. a type A connector a type B connector or a micro AB receptacle . Thus the dock may provide a straight through connection between the portable data reader and the USB mass storage device when both devices are connected to the dock . However the dock may also contain logic such as logic to implement USB hub functionality.

According to another embodiment the portable data reader contains a micro AB receptacle and is configured to support USB OTG peripherals. In other words the portable data reader may itself be a fully compliant USB 2.0 peripheral and may also support USB OTG features. In addition the portable data reader may have full host capability. Thus the USB mass storage device may be directly connected to the portable data reader if the portable data reader incorporates a proper connector e.g. a type A receptacle or a micro AB receptacle . Other suitable methods of connecting a USB mass storage device or other peripheral device to a portable data reader may be utilized such as those described with reference to .

At step the portable data reader is initialized. For example the portable data reader may be turned on or undergo a hard reboot by cycling its power e.g. turning the portable data reader off and then back on . In addition a reset line may be activated e.g. via a reset button . Further the portable data reader may undergo a soft reboot e.g. via selecting an option to restart the portable data reader .

With reference to when the USB mass storage device is connected to the portable data reader the portable data reader may provide host functionality and the USB mass storage device may be considered the peripheral. In addition the portable data reader may be considered an A device USB OTG when connected to the USB mass storage device e.g. the B device .

At step the method detects whether a USB mass storage device has been coupled to the portable data reader. As previously described with reference to hubs may have status bits used to report the attachment or removal of a USB device on one of its ports. Thus the host may periodically query the hub to retrieve the bits to determine if a device has been attached or removed. For example the portable data reader may include a hub and a boot loader e.g. a program or set of programs that load an image of an operating system that may be run on the portable data reader into memory such as RAM and transfers control of the portable data reader to the operating system . After the USB mass storage device and the portable data reader have been connected to the dock a status bit within the hub may report the attachment. The boot loader or other application may poll the status bit to discover if the USB mass storage device or any other device is connected. If so the boot loader may check for an operating system image see e.g. step . Other suitable methods of detecting that the USB mass storage device has been attached to the portable data reader may be utilized such as methods similar or identical to those described with reference to .

At step the method determines whether the USB mass storage device has stored thereon an updated operating system image. For example the boot loader may receive a notification that the USB mass storage device has been attached to the portable data reader or may discover this event itself. The boot loader may then search the USB mass storage device for an updated operating system image. For example the boot loader may look for a certain file type that might contain the updated operating system image e.g. a .img file .bin file .dmg file or other file type . By way of another example the boot loader may be programmed to look for the update operating system image at a specific address. The boot loader may check the operating system image stored on the USB mass storage device to check whether it is indeed an update. For example the boot loader may compare a date or version associated with the operating system image file stored on the USB mass storage device to an a date or version associated with the operating system image file stored on the portable data reader. Other suitable methods of determining whether the USB mass storage device has an updated operating system image stored thereon may be utilized such as methods similar to those described with reference to .

The method updates the operating system image on the portable data reader using the updated operating system image stored on the USB mass storage device at step . For example after the boot loader determines that the USB mass storage device has an updated operating system image or simply an operating system image stored thereon the application may transfer the operating system image from the USB mass storage device onto the portable data reader see e.g. the logical update in . In one embodiment the boot loader copies the operating system image file one block at a time into flash memory within the portable data reader.

For example is a flowchart illustrating additional details of step according to one embodiment. At step the OS image file found on the storage device is read and a file based checksum is read. At step a checksum for the OS image file found on the storage device is calculated using any number of checksum generation techniques. At step the file based checksum is compared to the calculated checksum. If the checksums do not match the user is notified at step and the OS image update may be aborted. If the checksums do match defined sections of the OS image are read from the storage device at step . At step a section of the portable data reader s internal flash memory is erased. At step the erased section of the portable data reader s flash is written with the section of the OS image read at step . At step steps and are repeated until the OS image on the storage devices is completely written to the portable data reader s flash.

The boot loader may also transfer the operating system image stored on the portable data reader e.g. the prior OS image to the USB mass storage device. The backup copy may be used if for example the updated operating system image becomes corrupt during transfer. According to a preferred embodiment the method does not backup operating data from the portable data reader on the USB mass storage device at step . Other suitable methods of updating the operating system image on the portable data reader with an operating system image found on the USB mass storage device may be utilized such as methods similar to those described with reference to .

After the boot loader has been reprogrammed e.g. updated the portable data reader the boot loader or user may initiate a soft reboot. Thereafter the portable data reader may boot using the updated operating system image. In one method the USB mass storage device may be disconnected from the portable data reader before the soft reboot. However if the USB mass storage device were still connected the portable data reader may recognize that the operating system image stored on the USB mass storage device is not an update. For example the portable data reader may recognize that the operating system image stored on the USB mass storage device is not newer than the currently installed operating system image e.g. by checking associated dates or versions and abort the OS image update.

The method may update the operating system image of the portable data reader at step automatically without user intervention or may prompt the user before updating the operating system image. Thus the method may implement an unattended operating system image update of the portable data reader once the user connects the portable data reader to the dock without connecting the portable data reader to a host computer.

Multiple portable data readers may be updated with one or more USB mass storage devices. For example the same or different operating system images may be stored on a plurality of USB mass storage devices e.g. operating systems images optimized for inventorying shipping and receiving applications . The USB mass storage devices may be plugged into various docks and when each of the portable data readers is plugged into its respective dock e.g. for charging and rebooted its operating system image may be updated. By way of another example one USB mass storage device may have a plurality of operating system images some of which are intended for specific portable data readers e.g. the operating system images are addressable or otherwise marked for use with specific portable data readers . If the USB mass storage device is plugged into a dock a plurality of portable data readers may access the mass storage device and search for and update their operating system images intended for each of the individual portable data readers.

Traditionally booting an alternate OS on a portable data reader has involved obtaining an alternate OS image e.g. by downloading the alternate OS image and installing an OS image update utility on a host computer. After attaching the portable data reader to the host computer and executing the OS image update utility on the host computer the user can navigate through a series of menus to select the alternate OS image file and initiate an OS image update that replaces the OS image on the portable data reader with the alternate OS image. Thus traditional methods for booting an alternate OS on a portable data reader require a fair amount of user intervention and knowledge may be time consuming and are prone to errors that may corrupt the OS image on the portable data reader thereby rendering the portable data reader inoperable an inoperable portable data reader may need to be sent to a service center or the manufacturer for repair . Additionally if the user wants to revert back to the prior OS version the user would need to update the OS image on the portable data reader with the prior version of the OS image. Thus if the user simply wants to test new features of another OS version the user traditionally needed to update the portable data reader with the other OS image. Then if the user wanted to revert back to the prior OS the user would needed to update the portable data reader with the prior OS image.

As previously discussed entirely updating the OS of a portable data reader may involve reflashing the portable data reader e.g. load the OS onto the portable data reader s internal flash memory . Entirely updating the OS of a portable data reader may take some time and may require the user to send the portable data reader to the manufacturer or to a technical support center. In addition reflashing carries with it the risk that an error may arise during reflash that corrupts the OS image stored on the portable data reader which may require the user to purchase a new portable data reader or have the portable data reader repaired . Thus booting the alternate OS off of the USB mass storage device may allow the user to test the new or revised features. After the portable data terminal is rebooted and the USB mass storage device is disabled the portable data terminal may revert back to the prior version of the OS.

As described with reference to the portable data reader may include a memory which may include for instance RAM ROM . The portable data reader may also include an internal hard disk drive . In one embodiment any number of program modules may be stored in the drives e.g. drive and RAM including an operating system OS one or more application programs other program modules data or any combination thereof. All or portions of the program modules may also be cached in RAM . The operating system may include Windows CE 5.0 Windows Mobile Linux or other commercially available or proprietary operating systems.

According to a preferred embodiment the USB mass storage device comprises a flash memory device or other suitable non volatile memory . However the USB mass storage device may include other memory devices such as magnetic hard drives optical drives e.g. a CD ROM or DVD reader and writer drives floppy drives digital cameras with memory digital audio players with memory and mobile phones with memory. In addition the USB mass storage device may be partitioned to facilitate various file structures.

The USB mass storage device may be connected to the portable data reader via the docking station . The dock may have a connector to facilitate a connection between the portable data reader and the dock with or without a cable. For example the dock may have contacts configured to receive a corresponding connector on the portable data reader e.g. the connector of . Once connected to the dock the portable data reader may transfer data to and from the dock via data link . In addition the dock may also charge a battery within the portable data reader using a power supply connected to the dock .

The dock may also have a connector to facilitate a connection between the USB mass storage device and the dock e.g. a USB A type receptacle or plug a B type receptacle or plug a micro AB receptacle or plug other micro or mini USB plug an RS232 connector or a PCMCIA connector . Once connected to the dock the USB mass storage device may transfer data to and from the dock via data link

As described with reference to the dock may be configured to convert an I O connector of the portable data reader into both a USB connector and RS232 connector. In other words the dock may pass RS232 pins to a RS232 connector mounted thereto and pass USB pins to a USB connector mounted thereto e.g. a type A connector a type B connector or a micro AB receptacle . Thus the dock may provide a straight through connection between the portable data reader and the USB mass storage device when both devices are connected to the dock . However the dock may also contain logic such as logic to implement a USB hub.

In another embodiment the portable data reader contains a micro AB receptacle and is configured to support USB OTG peripherals. In other words the portable data reader may itself be a fully compliant USB 2.0 peripheral and may also support USB OTG features. In addition the portable data reader may have full host capability. Thus the USB mass storage device may be directly connected to the portable data reader if the portable data reader incorporates a proper connector e.g. a type A receptacle or a micro AB receptacle Other suitable methods of connecting a USB mass storage device or other peripheral device to a portable data reader may be utilized such as those described with reference to .

At step the portable data reader is initialized. For example the portable data reader may be powered up or undergo a hard reboot by cycling its power e.g. turning the portable data reader off and then back on . In addition a reset line may be activated e.g. via a reset button . Further the portable data reader may undergo a soft reboot e.g. via selecting an option to restart the portable data reader .

The method detects whether a USB mass storage device has been coupled to the portable data reader at step . As previously described with reference to hubs may have status bits used to report the attachment or removal of a USB device on one of its ports. Thus the host may periodically query the hub to retrieve the bits to determine if a device has been attached or removed. For example the portable data reader may include a hub and a boot loader. After the USB mass storage device and the portable data reader have been connected to the dock a status bit within the hub may report the attachment. The boot loader or other application may poll the status bit to discover if the USB mass storage device or any other device is connected. The boot loader may wait a predetermined period of time for the USB mass storage device to be connected. After a certain period of time the boot loader may boot the OS stored on the portable data reader. In other words the boot loader may give priority to booting an OS off of the USB mass storage device. Additionally the boot loader may sequence through a predetermined list of non volatile storage devices in search of an OS image to load e.g. start with a USB mass storage device and if a USB mass storage device is not found boot from memory internal to the portable data reader . Other suitable methods of detecting that the USB mass storage device has been attached to the portable data reader may be utilized such as methods similar to those described with reference to .

At step the method determines whether the USB mass storage device has stored thereon an alternate operating system image. For example the boot loader may receive a notification that the USB mass storage device has been attached to the portable data reader or may discover this event itself. The boot loader may then search the USB mass storage device for an alternate operating system image. For example the boot loader may look for a certain file type indicative of an operating system image e.g. a .img file .bin file .dmg file or other file type . By way of another example the boot loader may be programmed to look for the update operating system image at a specific address. Other suitable methods of determining whether the USB mass storage device has an alternate operating system image stored thereon may be utilized such as methods similar or identical to those described with reference to .

In one embodiment the method loads the operating system image from the USB mass storage device onto the portable data reader at step . For example after the boot loader determines that the USB mass storage device has an alternate operating system image or simply an operating system image stored thereon the application may transfer the operating system image from the USB mass storage device onto the portable data reader. Loading the operating system image into RAM for example may allow for faster performance. In addition loading the operating system image into RAM for example avoids the need to update the operating system image stored on internal flash memory e.g. reflashing the portable data reader . However the method may boot the alternative operating system directly from the USB mass storage device.

At step the method boots the alternate operating system on the portable data reader using the alternate operating system image. Other suitable methods of loading the operating system image on the portable data reader and booting the alternate operating system may be utilized such as methods similar to those described with reference to .

The method may boot an alternate operating system on a portable data reader automatically without user intervention or may prompt the user before booting the alternate operating system on the portable data reader. Thus the method may implement an unattended boot of an alternate operating system on a portable data reader once the user connects the portable data reader to the dock without connecting the portable data reader to a host computer and without installing additional hardware in the portable data reader e.g. particular connectors or one or more switches for rerouting memory requests from internal portable data reader memory to memory on a data card .

Multiple portable data readers may be booted with alternate operating systems with one or more USB mass storage devices. For example the same or different operating system images may be stored on a plurality of USB mass storage devices e.g. operating systems optimized for inventorying shipping and receiving applications . The USB mass storage devices may be plugged into various docks and when each of the portable data readers is plugged into its respective dock e.g. for charging and rebooted an alternative operating system is booted onto each of the portable data readers. By way of another example one USB mass storage device may have a plurality of operating system images some of which are intended for specific portable data readers e.g. the operating system images are addressable or otherwise marked for use with specific portable data readers . If the USB mass storage device is plugged into a dock a plurality of portable data readers may access the mass storage device and search for load and boot their respective alternate operating systems.

Certain devices may require drivers to fully function over a USB. According to one embodiment a USB storage device embedded within an attachable peripheral contains a device driver stored in memory . Thus when connected to the host the host may load the required driver from the portable data reader . Loading the required driver from the portable data reader may avoid having to install an operating system containing a wide variety of drivers needed to support a large array of possible peripherals. In addition this allows the peripheral to supply its own driver and may avoid having to distribute separate media along with peripherals with the necessary drivers.

While embodiments disclosed herein have been discussed with reference to USB mass storage devices the embodiments disclosed herein may be implemented using other memory devices such as a PC card PCMCIA card flash memory or optical media. Additionally while certain embodiments have been discussed with reference to portable data readers the embodiments disclosed herein may be implemented on fixed scanners. Further while certain embodiments have been discussed with reference to USB other bus interfaces may be used such as RS232 FireWire and other USB versions e.g. USB 3.0 and beyond .

A portable data reader may comprise any combination of the embodiments disclosed herein. For example the following is a sample pseudo code for updating configuration settings on a portable data reader updating an OS image on a portable data reader and booting an alternate OS on a portable data reader 2008 Datalogic Mobile Inc. 

Thus as should be appreciated in view of the teachings herein certain embodiments may be capable of achieving certain advantages including by way of example and not limitation one or more of the following 1 providing an unattended update of configuration settings of a portable data reader 2 automatically updating configuration settings of a portable data reader without user intervention 3 updating configuration settings of a portable data reader without connecting to a host computer e.g. a PC or server 4 updating the configuration settings of multiple portable data readers 5 providing an unattended image update of a portable data reader 6 automatically updating an operating system image of a portable data reader with little or no user intervention 7 updating an operating system image of a portable data reader without connecting the portable data reader to a host computer e.g. a PC or server 8 updating operating system images of multiple portable data readers 9 providing proof of concept of software designs for portable data readers 10 providing customer software validations 11 providing the ability to boot different operating systems on a portable data reader 12 providing the ability to boot various operating systems on a portable data reader without reflashing 13 automatically booting an alternate operating system on a portable data reader without user intervention 14 booting an alternate operating system on a portable data reader without connecting to a host computer e.g. a PC or server and 15 booting alternate operating systems of multiple portable data readers.

The methods and systems disclosed herein may be implemented in and or by any suitable hardware software firmware or combination thereof. Accordingly as used herein a component or module can comprise hardware software and or firmware components e.g. self contained hardware or software components that interact with a larger system . For example the methods and systems may exist as one or more software or firmware programs comprised of program instructions in source code object code executable code or other formats. A software module or component may include any type of computer instruction or computer executable code located within a memory device or transmitted as electronic signals over a system bus or wired or wireless network. A software module or component may for instance comprise one or more physical or logical blocks of computer instructions which may be organized as a routine program object component data structure etc. that performs one or more tasks or implements particular abstract data types.

In certain embodiments a particular software module or component may comprise disparate instructions stored in different locations of a memory device which together implement the described functionality of the module. Indeed a module may comprise a single instruction or many instructions and may be distributed over several different code segments among different programs and across several memory devices. Some embodiments may be practiced in a distributed computing environment where tasks are performed by a remote processing device linked through a communications network. In a distributed computing environment software modules may be located in local and or remote memory storage devices. In addition data being tied or rendered together in a database record may be resident in the same memory device or across several memory devices and may be linked together in fields of a record in a database across a network.

Embodiments may include various steps which may be embodied in machine executable instructions to be executed by a general purpose or special purpose processor or other electronic device . Alternatively the steps may be performed by hardware components that include specific logic for performing the steps or by a combination of hardware software and or firmware. A result or output from any step such as a confirmation that the step has or has not been completed or an output value from the step may be stored displayed printed and or transmitted over a wired or wireless network.

Embodiments may also be provided as a computer program product including a machine readable storage medium having stored thereon instructions in compressed or uncompressed form that may be used to program a computer or other electronic device to perform processes or methods described herein. The machine readable storage medium may include but is not limited to hard drives floppy diskettes optical disks CD ROMs DVDs read only memories ROMs random access memories RAMs EPROMs EEPROMs flash memory magnetic or optical cards solid state memory devices or other types of media machine readable medium suitable for storing electronic instructions. Further embodiments may also be provided as a computer program product including a machine readable signal in compressed or uncompressed form . Examples of machine readable signals whether modulated using a carrier or not include but are not limited to signals that a computer system or machine hosting or running a computer program can be configured to access including signals downloaded through the Internet or other networks. For example distribution of software may be via CD ROM or via Internet download.

The terms and descriptions used herein are set forth by way of illustration only and are not meant as limitations. Those skilled in the art will recognize that many variations can be made to the details of the above described embodiments without departing from the underlying principles of the invention. The scope of the invention should therefore be determined only by the following claims and their equivalents in which all terms are to be understood in their broadest reasonable sense unless otherwise indicated.

