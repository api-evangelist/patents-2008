---

title: Control of access to mass storage system
abstract: Disclosed are various systems, methods, and other embodiments for the control of access to a mass storage system. In one example, a plurality of buckets are maintained in mass storage system, each of the buckets being employed to store at least one data file. In a server, a use of the buckets by a plurality of entities that use a plurality of clients is facilitated for the storage of a plurality of files over a public network. The use of one of the buckets by the one of the entities is restricted to a namespace.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08321915&OS=08321915&RS=08321915
owner: Amazon Technologies, Inc.
number: 08321915
owner_city: Reno
owner_country: US
publication_date: 20080331
---
This Application claims priority to co pending U.S. Provisional Patent Application entitled CONTROL OF ACCESS TO MASS STORAGE SYSTEM filed on Feb. 29 2008 and assigned application No. 61 032 743 which is incorporated herein by reference in its entirety. Also this application is related to co pending U.S. patent application entitled SECURE TRANSFER OF FILES filed on even day herewith and assigned application Ser. No. 12 059 588.

Mass storage systems have appeared in which users can store massive amounts of data for a fee. Such mass storage systems facilitate the creation of various applications on the Internet that require such data storage. One drawback for large scale mass storage systems that are made available to multiple customers for a fee revolves around securing data and limiting access to such data to appropriate clients. Specifically one customer that stores data may wish to provide access to select parts of the data to select clients. Also such a customer would not want unauthorized clients to access such data nor would the customer care to have access to the data of a third party. This is especially the case given that the data stored by a given individual may be critical data that cannot be exposed to unauthorized third parties.

With reference to shown is an example of a transfer and storage network according to various embodiments of the present disclosure. The transfer and storage network includes one or more servers that are coupled to a network . A client is also coupled to the network . The server may comprise a single server or multiple servers as can be appreciated. Likewise the client is representative of many different clients that may be coupled to the network . The network may comprise for example the Internet intranets wide area networks WANs local area networks wireless networks or other suitable networks etc. or any combination of two or more such networks.

The server may comprise for example a server computer a processor based device or other device with like capability that performs the operations of a server . The client may comprise for example a computer system such as a desktop laptop personal digital assistant portable computing device or other device with like capabilities.

The server is in data communication with mass storage . In this respect the server may be coupled to the mass storage by way of a network or other data link as can be appreciated. The mass storage may comprise a bank of storage devices or multiple banks of storage devices. Such storage device may comprise for example hard drives tape drives or other storage devices that can serve to hold large amounts of data. Such storage devices are typical of those used for the performance of various functions of various entities on the Internet such as for example an online merchant who sells goods over the Internet etc.

There are several components that are either stored and or executed on the server according to the various embodiments of the present disclosure. Specifically such components may include for example an instruction service . The components in the server also include a data store that is used to store various data in coordination with the operation of the instruction service and other services and or applications on the server .

The server also includes a storage application that is executed on the server in order to facilitate the storage of and access to files in the mass storage . Together the mass storage and the storage application comprise a mass storage system according to various embodiments.

In addition although the instruction service data store storage application are shown as being executed on the same server in it is understood that these systems may be executed on entirely different servers .

In addition there may be other components executed in the server such as appropriate server applications such as Web servers or like applications that facilitate communication between the various components on the server and the client . For example various application programming interfaces APIs may be employed for such purposes as can be appreciated.

The storage application is executed in the server to facilitate or control storage and access to a number of files maintained in the mass storage . The mass storage organizes the storage of the files using so called buckets . The buckets comprise an abstraction that defines storage units within the mass storage that are used to organize the storage of files . The files may comprise for example digital files that include content items such as for example video content i.e. movies videos and the like audio content i.e. songs and the like or other data as can be appreciated.

It may be the case that a given bucket may include a single file . Alternatively there may be many files contained in or associated with a given bucket . Access to the data represented by the files on the part of clients is restricted based upon allowable access to respective ones of the buckets . In particular according to one embodiment access to the data stored in the mass storage depends upon access that a given client has to one or more buckets .

The storage application is executed in the server in order to control access to the mass storage . To this end the storage application may cause files to be stored in various buckets . Also the storage application controls whether files may be accessed by various clients . Further the storage application controls whether files may be overwritten deleted or deprecated i.e. marked for deletion or other status based upon the actions of clients . In addition there may be many other functions performed by the storage application that are not described herein in detail.

Stored within data store are a plurality of bucket policies according to various embodiments. Each bucket policy is associated with a given one of the buckets in the mass storage . The bucket policy includes information such as for example a bucket identification and administrator credentials of an entity that can control access to the bucket through the storage application as will be described. The term entity as employed herein may comprise individuals groups of individuals organizations corporations or other types of entities.

Associated with each bucket policy are one or more entities . Associated with each entity is at least one certificate or other type of identification that uniquely identifies the entity . In one embodiment each certificate is associated with a single one of the buckets . Thus if a given entity needs access to multiple buckets they would receive multiple corresponding certificates. Also associated with each entity in a given bucket policy are a number of permissions that govern access by the entity to the contents of a given bucket in the mass storage . According to one embodiment the permissions are organized according to namespaces maintained with respect to the buckets .

Associated with each bucket policy are instruction rules from which instructions are generated. The instruction rules comprise information that may be employed by the instruction service to generate instructions that are sent to the client to cause the client to perform a desired function with respect to a given one of the buckets .

Also associated with each bucket policy is bucket storage data includes information about all of the files stored in the corresponding bucket . Such information may include instructions previously sent to a client to direct a client to initially store a file in the data storage system so that the file can be accessed at a later time as will be described.

Each of the instruction rules of each bucket policy includes information from which the instructions are generated that are used to perform the various functions with respect to the respective bucket . For example a rule may specify that all files to be stored in the mass storage system that comprise video content shall be sliced into component files that are one megabyte or less in size. Accordingly assuming that the instruction service receives a request to store a video file the instruction service will generate an instruction to the respective client to slice the file into 1 megabyte component files. There are many other types of instruction rules that may be employed.

The instruction rules represented are unique with respect to each other. Thus in order to generate the instructions to direct a client to perform any one of a number of different functions or tasks as will be described various combinations of the instruction rules may be consulted depending upon the function to be performed. That is to say instructions for each function or task are generated based upon various respective combinations of the rules . Ultimately the storage of the instruction rules in the bucket policies allows operators of the servers to control how clients access or use various buckets in the mass storage . Specifically this allows the operators to change the instructions generated over time to control the operation of the clients as desired by changing the instruction rules from which the instructions are generated. Note that when instructions are generated to send to a client to facilitate the performance of a requested action the instructions sent are saved in the bucket storage data and are immutable. This ensures that the instruction service can determine how the files were saved in the future to facilitate future access.

The client is employed to execute and store various components according to the various embodiments. Specifically the client includes an instruction executor that is executed in the client to implement instructions received from the server to perform data storage and other functions with respect to one of the buckets . According to one embodiment the client also includes a data store in which a file may be disposed that is to be uploaded and stored for example in a given bucket .

In one embodiment the instruction executor is a lightweight client application in that it is only capable of implementing instructions provided to it from the server as will be described. To this end the client is manipulated by an entity to perform various functions with respect to the buckets such as get read put store or write delete overwrite and or other functions.

In another embodiment the instruction server may be implemented as a service executed in the client that may or may not be within the same process as the instruction executor . Accordingly the data store may be included in or be accessible to the client .

Next a general discussion of the operation of the various components of the transfer and storage network is provided according to various embodiments. According to one embodiment the instruction executor is a lightweight application that essentially executes the instructions received from the instruction service . This provides one advantage in that the interaction between the client and the mass storage system is controlled at the server . Such interaction is controlled by specifying the instruction rules stored in the bucket policies from which the instructions are generated. This advantageously eliminates the need to update the instruction executor at the clients in order to change the interaction between clients and the mass storage system .

To begin assume for example that the client has a file in the data store that the client wishes to transfer to an appropriate bucket of the mass storage over the network . Also assume that the file is quite valuable and susceptible to attempts at interception by malicious entities on the network . In this respect the network may comprise for example a public network such as the Internet or other public network as can be appreciated. In order to begin to transfer the file to the mass storage the client generates a request that is transmitted to the server that includes for example an entity certificate an action to perform in this case a PUT action a filename of the file to store the size of the file to be stored and any other pertinent information. Alternatively it may be that other items are included in the request or that some of the items listed above may be omitted.

Upon receiving the request a server application such as for example a web server or other appropriate server application executed in the server forwards entity information to an appropriate application to authenticate the entity. In one embodiment this authentication may be performed by the instruction service or other application. As contemplated herein data is received by a device or system when the data such as the instructions is accessible by the device or system such that the device or system can act upon it as can be appreciated. Assuming the entity is authenticated then the server application may forward the request to the instruction service .

The instruction service then determines whether the entity indicated in the request is authorized to transfer the file from the client to the mass storage system over the network . In order to do so the instruction service or other component of the server may search through the various bucket policies in the data store to see if the respective entity indicated in the request is also listed in one of the bucket policies . Specifically the certificate included in the request identifies both the entity and the bucket to which it pertains. Thus upon receiving the request based on the certificate of the entity in the request the instruction service can look up the corresponding bucket policy of the respective bucket . Once the entity is located in a bucket policy then the instruction service can identify the namespace associated with the entity and the permissions for the use of the namespace of the respective bucket for the entity .

Assuming that the permissions allow the client to transfer the file the instruction service then proceeds to generate an appropriate set of instructions based upon the relevant instruction rules associated with the bucket policy to send to the client to implement the transfer. The instruction rules from which the instructions are generated may be identified based upon the information provided by the client in the request. Such information may comprise for example the size and type of file to be transferred etc.

Once the instructions are generated they are sent to the client for execution. Such instructions are configured to control the activity of the client in transferring the file from the client to the mass storage system over the network .

As mentioned above the instruction executor is a lightweight application with a primary function of implementing the instructions received from the server . Stated another way the instruction executor is configured to execute instructions from the server and not to perform functions independently. The instruction service sends the instructions to the client in order to implement the transfer of the file from the client to the mass storage system .

The instructions applied to the client may indicate various actions that are to be performed with respect to the file to effect the transfer of the file to the mass storage system . For example the instructions may indicate that the file is to be sliced into a plurality of component files. This may be required where the file size is greater than a maximum file size limit for the mass storage system . That is to say the mass storage system may be designed to receive only files that are smaller than a predefined maximum file size limit.

The component files that result from the act of slicing the file fall below the maximum file size limit of the mass storage system . The instructions may also direct the encryption of the file or each of the component files according to a predefined encryption algorithm. To this end the instruction service may also send one or more encryption keys to the client to be used by the client to encrypt the file or component files.

Also the instructions may direct the compression of the file or component files according to a predefined compression algorithm. Still further the instructions may specify how the instruction executor is to throttle the rate of requests that are submitted to the mass storage system such as may be the case for example where a file is sliced into multiple component files that are transmitted to the mass storage system in requests for storage etc. By controlling the rate at which the requests are transmitted the instructions generated by the instruction service may control the rate at which such requests are received by the storage application to make sure it can handle the load. The instructions may also specify how digital rights management DRM is to be applied to the file as it is read from the mass storage system .

Ultimately the client executes the instructions to transfer the file or the component files resulting from a slicing of the file to the mass storage system to be stored in one or more buckets based upon the permissions provided to the entity . Where component files are sent they are sent individually and handled by the storage application as separate files. Specifically the storage application does not know anything about how various files may be related its primary function is for storage. Effectively according to one embodiment the tracking of how files are related is performed by the instruction service .

When the instructions are sent to the client to implement the transfer of the file from the client to the mass storage system the instruction service also limits the time in which the client can implement the transfer. In order to do this the instruction service provides credentials to the client that are in turn sent back to the server in connection with the transfer of the file to allow the storage application to determine whether the time limit imposed upon the transfer to be performed by the client has passed.

According to one embodiment the credentials employed comprise a signed universal resource identifier URI which indicates a location in the mass storage where the file is to be stored. Also the URI is signed such that it can be employed to indicate whether the time period specified for the transfer has expired. Such a URI may be associated with a given bucket . By signing the URI a token or other component is added to the URI that is used by the storage application to determine whether the time period within which the requested action is to occur has expired. In one alternative the token may be encrypted to prevent interference by nefarious third parties. Also the entire URI and token may be encrypted such that the client has no knowledge of the actual location of the file within the mass storage . This also prevents third parties from intercepting such information. In any event the signed URI is stored in the server to be used to track the time period within which the transfer of the file is to take place. Specifically when the URI is received from the client with the file to be stored the storage application can determine whether the time period has expired based upon the time that the URI was originally signed. Alternatively the URI may be specified such that the time bound credentials may be extracted from the URI itself rather than requiring the URI to be stored in the server .

In an alternative the credentials used to allow the storage application to determine whether the time limit imposed upon the transfer to be performed by the client has passed may involve the use of one time use URIs. In this respect the storage application may be configured to allow a given URI to be used only once. Where error occurs during use of such a URI such as during the transfer of a file from a client to the mass storage system a new one time use URI may be issued by the instruction service at the request of the client .

According to one embodiment the signed URI is sent to the client along with the instructions sent by the instruction service . The actual URI sent may be generated for each file or component file to be stored by the instruction service based upon a URI associated with the respective bucket indicated in the bucket policy . As an additional alternative the credentials sent to the client to be passed to the storage application to track whether the time period has expired may comprise a token or other data that is not appended to the URI that is passed to the storage application with the URI indicating the location of a file to be stored or accessed. However for purposes of this description where the discussion refers a time limited signed URI it is understood that some other alternative credential may also be used in order to track whether a time period has expired within which to perform the desired action.

Note that where a file is to be sliced into multiple component files as it is larger than a maximum file size limit of the mass storage system according to one embodiment the instruction service sends a time limited signed URI for each component file that is separately transmitted to the mass storage system . The number of URIs that need to be sent to the client with the instructions may be calculated based upon the size of the file indicated in the original request from the client as described above. The instructions sent to the client guide the activity of the instruction executor in the client in transmitting the multiple component files to the storage application of the mass storage service .

In addition in various embodiments the instruction service and the storage application facilitate the use of the buckets by a plurality of the clients for the storage of files to provide access to such files over the network as described above. Also the instruction service ultimately restricts the use of the buckets by respective ones of the clients to specific namespaces. In particular associated with each of the buckets may be one or more namespaces that serve as categories for the storage of respective files or component files. In one embodiment each of the files or component file stored in a respective bucket is associated with a given one of the namespaces associated with the bucket .

There may be many ways that access by a client to files within a given bucket may be controlled. For example a given client may be given access to all of the files in a given bucket . Alternatively a client may be given access to only some of the files within a given bucket . Of course this assumes that there are multiple files within a respective bucket .

In order to restrict access to some of the files within a given bucket one or more namespaces may be associated with each of the buckets in a given bucket policy . Respective ones of the files may be associated with a given one of the namespaces associated with a given bucket . In order to restrict the use of one of the buckets by one of the clients to a given one of the namespaces the entities listed in the bucket policy for a respective bucket are associated with one or more namespaces to which such entities may have access.

Associated with each namespace for each entity in a bucket policy are permissions . The permissions may vary from namespace to namespace for a given entity . For a given namespace there can be any number of permissions that specify which actions an entity may take with respect to the namespace of the bucket . To this end after an entity is authenticated by the instruction service based upon the credentials received in a request from the client the instructions service determines whether the entity is authorized to perform the requested action by determining what permissions a given client has with respect to a given namespace of a respective bucket as set forth in a respective bucket policy .

Once the entity is verified as having permissions for access to a respective namespace of a given bucket then the instruction service generates and sends appropriate instructions to the client . Also the time limited signed URI s and encryption key s are sent to the client along with the instructions as described above.

The permissions associated with a given entity in the data store govern the use of a namespace of a respective bucket by the client . For example the permissions may indicate whether the client is allowed to put a file into the namespace of a respective one of the buckets . Also the permissions may indicate whether the client is allowed to get or read a file from a given namespace in a bucket . Also a permission may indicate whether the client is allowed to delete a file from or overwrite a file in a given namespace of one of the buckets . The signed URI allows the instruction service to limit the use of a respective namespace of one of the buckets to a limited period of time as was described above.

With reference to shown is one example of a bucket policy according to various embodiments of the present disclosure. The bucket policy is associated with a respective one of the buckets and controls the use of or access to namespaces associated with one of the buckets by virtue of the permissions described above.

The bucket policy includes a bucket identification that identifies the bucket in the mass storage that is associated with the bucket policy . Also the bucket policy includes a universal resource indicator URI that is used in storing files or component files to a corresponding bucket . To this end the URI may comprise a file location to which further file extensions are applied for individual files stored therein.

Also the bucket policy includes administrator credentials such as an administrator certificate. The administrator credentials are associated with an entity that has administrator rights with respect to the bucket policy . Once authenticated various user interfaces may be presented through which an entity may add or delete entities from the bucket policy . Also an administrator may change the namespaces associated with an entity or may change permissions associated with the namespaces of respective entities for a bucket . In this respect the entity associated with the administrator credentials has the ultimate control over the use of and access to the respective bucket in the mass storage .

The bucket policy also includes a listing of entities . Associated with each entity are the credentials . The credentials may comprise for example an entity identifier password certificate public key or other information that may be employed to verify that the entity has access to the functionality of the instruction service as described above. In one embodiment the credentials comprise the certificate associated with a respective entity as described above.

Also associated with each entity are permissions . The permissions are organized according to namespaces . In particular a given entity may have permissions relating to multiple namespaces with respect to a given bucket . The permissions associated with a given namespace may involve authorization to get put delete overwrite and or other authorizations as can be appreciated. By associating the respective namespaces with a given entity the instruction service may identify those namespaces that the entity may use or access within the bucket .

The bucket policy further includes the instruction rules from which instructions are generated that may be sent to the clients to direct their activity in performing various functions with respect to a given bucket as described above. Also the bucket storage data is associated with the bucket policy and includes information about files or component files that are already stored in the bucket . Specifically the instructions used to store such files as well as the URIs associated with such files are included so that such files may be accessed in the future etc.

Next reference is made to that depict a flow diagram of the functionality of the various entities or devices in the transfer and storage network in performing various tasks such as a transfer of a file from a client into the mass storage system as described above. Alternatively the flow diagram of may be viewed as depicting steps of a method implemented in the various entities or devices in the transfer and storage network according to various embodiments.

Beginning with box the instruction executor in the client generates a request that includes for example the entity certificate an action to perform and a filename or other identifier of a file that is the subject of the action to perform and the file size of the file . Also information may be included that facilitates an authentication of the entity generating the request. The entity certificate may be used for this purpose. Also the entity certificate provides information that allows the instruction service to locate the appropriate bucket with information to verify that the requesting entity has the authority to perform the requested action as described above. Further it may be the case that more or less information is included in the request that is described above. For example it may not be necessary to include the file size where the action to perform does not involve a PUT action in which a file is to be stored in the mass storage system .

Once generated the instruction executor transmits the request to the server . An appropriate application in the server such as a server application or web server receives the request and forwards the request to the instruction service for processing.

The data from the request received from the client is also forwarded to the instruction service . In box the instruction service authenticates the entity indicated in the request to prevent unauthorized access to the system. Then in box the instruction service determines whether the entity exists in the bucket policy associated with the certificate included in the request. In this respect each certificate is associated with a respective one of the buckets . In box if the entity is not listed in the respective bucket policy then a service denial is issued to the client . This may be the case where the administrator of a given bucket policy removes the entity from the bucket policy .

Assuming in box that the entity is listed in the bucket policy then in box the instruction service identifies the namespace and the permissions associated therewith for the entity . In one embodiment there may be only a single namespace per entity . Alternatively there may be more than one namespace per entity . Based on the namespace and permissions listed in box the instruction service verifies that the entity is authorized to perform the requested action with respect to the namespace of the respective bucket .

In box if the entity is not authorized then the instruction service issues a denial of service to the client . Otherwise the instruction service proceeds to box . In box the instruction service generates the appropriate instructions based upon the instruction rules where the instructions facilitate the requested action for the entity. In order to determine the relevant instruction rules from which the instructions are generated the instruction service may examine the size of the file the type of file and other information as can be appreciated. For example if the requested action is to store a file in the mass storage system then certain instruction rules may be implicated depending on the file size in generating the instructions are to be used depending on whether the file needs to be sliced. The instructions generated may be any instructions described herein or other instructions.

Also in box the instruction service generates one or more time limited signed URI s or one time use URI s etc. to be sent to the client to implement the requested action if needed. If the action involves accessing files already stored in the mass storage service then the URI s may be the actual locations of the files in the mass storage . Where files are to be stored the URI s will indicate the locations at which such files are to be stored in the mass storage system .

In box if necessary the instructions URI s encryption information compression information slice size and other information used to implement the requested action are stored in the bucket storage data . This may be necessary for example where the action involves the transfer of the file or component files from the client to the mass storage system to be stored in the mass storage . In such case this is done to as to facilitate future access to the files or component files. Such information is stored in the bucket storage data in association with the filename or other information relating to the file or component files so that the file or component files may ultimately be accessed at a later time from the mass storage .

Thereafter in box the instruction service is configured to transmit the data including the instructions and other information such as encryption keys the time limited signed URI s and any other applicable information to the instruction executor in the client . In box the instruction executor implements the instructions to perform the requested action. For example where the action is to transfer the file for storage in the mass storage system the instruction executor will implement the instructions that cause the client to perform such actions resulting in the transfer the file from the client to the mass storage system . Such instructions may direct the slicing of the file into component files the encryption of the file or component files the compression of the file or component files and or other actions as described above.

Also in box the instruction executor generates and sends one or more requests associated with the originally requested action to the storage application as directed by the instructions executed. For example if the requested action is a put action to store a file in the mass storage system then the request may include the file or reference on a network where the file may be obtained and the time limited signed URI received from the instruction service as well as any other pertinent information.

In box the storage application actions upon the received request s and confirms that the time limited signed URIs are still valid. This may be done for example by consulting appropriate data in the data store indicating when authorization for the action was first issued by the instruction service . In box if the time limited signed URI for a given request is invalid then the storage application issues a denial of service .

Otherwise in box the storage application implements the desired action. For example the storage application may store a file to or get a file from a namespace of a respective bucket . Also the action may involve deleting deprecating or overwriting a file stored in a namespace of a given bucket . Once the storage application implements the respective action in box then in box the storage application proceeds to send a reply or confirmation to the client indicating whether the action was successfully implemented.

For example each confirmation is sent to the instruction executor of the client to inform the client that the storage of a file or component file was successful. This is important in that it may be possible that due to network outages and or other anomalies the transfer of the file or component file to the mass storage system may be interrupted thereby requiring that the file or component file be resent. Thereafter the flow diagram of ends as shown.

Referring next to shown is a schematic block diagram of one example of a server according to an embodiment of the present disclosure. The server includes a processor circuit for example having a processor and a memory both of which are coupled to a local interface . To this end the server may comprise for example a server computer with such structure. The local interface may comprise for example a data bus with an accompanying address control bus as can be appreciated.

Stored in the memory are several components that are executable by the processor or that are stored within the memory . In particular stored in the memory are a server operating system the instruction service and the storage application . It is understood that there may be other applications that are stored in the memory and are executable by the processor as can be appreciated. In addition stored in the memory is the data store that includes the bucket policies as described above. According to one embodiment the data store may comprise for example a database or other appropriate data structure.

Referring next to shown is one example of a client according to an embodiment of the present disclosure. The client includes a processor circuit that comprises for example a processor and a memory both of which are coupled to a local interface . To this end the local interface may comprise for example a data bus with an accompanying address control bus as can be appreciated.

Stored on the memory and executable by the processor are the operating system and the instruction executor . Also one or more files may be stored in the memory or otherwise may be accessible to the client .

With reference to a number of software components are stored in the memories and are executable by the respective processors . In this respect the term executable means a program file that is in a form that can ultimately be run by the processors . Examples of executable programs may be for example a compiled program that can be translated into machine code in a format that can be loaded into a random access portion of the memories and run by the respective processors or source code that may be expressed in proper format such as object code that is capable of being loaded into a of random access portion of the memories and executed by the respective processors etc. An executable program may be stored in any portion or component of the memories including for example random access memory read only memory a hard drive compact disk CD floppy disk or other memory components.

Each of the memories is defined herein as both volatile and nonvolatile memory and data storage components. Volatile components are those that do not retain data values upon loss of power. Nonvolatile components are those that retain data upon a loss of power. Thus each of the memories may comprise for example random access memory RAM read only memory ROM hard disk drives floppy disks accessed via an associated floppy disk drive compact discs accessed via a compact disc drive magnetic tapes accessed via an appropriate tape drive and or other memory components or a combination of any two or more of these memory components. In addition the RAM may comprise for example static random access memory SRAM dynamic random access memory DRAM or magnetic random access memory MRAM and other such devices. The ROM may comprise for example a programmable read only memory PROM an erasable programmable read only memory EPROM an electrically erasable programmable read only memory EEPROM or other like memory device.

Also each of the processors may represent multiple processors and each of the memories may represent multiple memories that operate in parallel processing circuits respectively. In such a case each of the local interfaces may be an appropriate network that facilitates communication between any two of the multiple processors between any processor and any of the memories or between any two of the memories etc. The processors may be of electrical or of some other construction as can be appreciated by those with ordinary skill in the art.

The operating systems are executed to control the allocation and usage of hardware resources such as the memory processing time and peripheral devices in the server client. In this manner the operating systems serve as the foundation on which applications depend as is generally known by those with ordinary skill in the art.

In addition the functionality of the executable components indicated above may be expressed in any one of a number of programming languages such as for example C C JAVA or other programming languages.

Although the instruction service storage application instruction executor and any other executable components of the present disclosure are described above as being embodied in software or code executed by general purpose hardware as discussed above as an alternative the same may also be embodied in dedicated hardware or a combination of software general purpose hardware and dedicated hardware. If embodied in dedicated hardware the same can be implemented as a circuit or state machine that employs any one of or a combination of a number of technologies. These technologies may include but are not limited to discrete logic circuits having logic gates for implementing various logic functions upon an application of one or more data signals application specific integrated circuits having appropriate logic gates or other components etc. Such technologies are generally well known by those skilled in the art and consequently are not described in detail herein.

The block diagrams and or flow diagrams of show the architecture functionality and operation of an implementation of the instruction service storage application instruction executor and any other executable components of the present disclosure. If embodied in software each block may represent a module segment or portion of code that comprises program instructions to implement the specified logical function s . The program instructions may be embodied in the form of source code that comprises human readable statements written in a programming language or machine code that comprises numerical instructions recognizable by a suitable execution system such as a processor in a computer system or other system. The machine code may be converted from the source code etc. If embodied in hardware each block may represent a circuit or a number of interconnected circuits to implement the specified logical function s .

Although the flow diagrams of show a specific order of execution it is understood that the order of execution may differ from that which is depicted. For example the order of execution of two or more blocks may be scrambled relative to the order shown. Also two or more blocks shown in succession in may be executed concurrently or with partial concurrence. In addition any number of counters state variables warning semaphores or messages might be added to the logical flow described herein for purposes of enhanced utility accounting performance measurement or providing troubleshooting aids etc. It is understood that all such variations are within the scope of the present invention.

Also where the instruction service storage application instruction executor and any other executable components described above comprise software or code each can be embodied in any computer readable medium for use by or in connection with an instruction execution system such as for example a processor in a computer system or other system. In this sense the logic may comprise for example statements including instructions and declarations that can be fetched from the computer readable medium and executed by the instruction execution system. In the context of the present invention a computer readable medium can be any medium that can contain store or maintain the instruction service storage application instruction executor and any other executable components described herein for use by or in connection with the instruction execution system. The computer readable medium can comprise any one of many physical media such as for example electronic magnetic optical electromagnetic infrared or semiconductor media. More specific examples of a suitable computer readable medium would include but are not limited to magnetic tapes magnetic floppy diskettes magnetic hard drives or compact discs. Also the computer readable medium may be a random access memory RAM including for example static random access memory SRAM and dynamic random access memory DRAM or magnetic random access memory MRAM . In addition the computer readable medium may be a read only memory ROM a programmable read only memory PROM an erasable programmable read only memory EPROM an electrically erasable programmable read only memory EEPROM or other type of memory device.

It should be emphasized that the above described embodiments of the present disclosure are merely possible examples of implementations set forth for a clear understanding of the principles of the disclosure. Many variations and modifications may be made to the above described embodiment s without departing substantially from the spirit and principles of the disclosure. All such modifications and variations are intended to be included herein within the scope of this disclosure and protected by the following claims.

