---

title: Remote management system and method for service objects
abstract: A remote management system is able to remotely manage service objects () in a bundle (). The remote management system thereto contains a management platform () in a customer device where the bundle () is installed, a remote management server () somewhere in the network, and a management agent () able to expose the service object representation () of the service objects () via a remote management protocol () to the remote management server (). The remote management system in addition is foreseen with a proxy bundle () with a generic interface to populate and export a generic service object representation () of the service objects () towards the management agent ().
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09003011&OS=09003011&RS=09003011
owner: Alcatel Lucent
number: 09003011
owner_city: Boulogne-Billancourt
owner_country: FR
publication_date: 20080710
---
The present invention generally relates to remote management of service software modules the so called service objects according to OSGi terminology that are shared amongst software applications the so called bundles installed on customer premises equipment CPE . A home network typically contains several interconnected CPE devices that offer various applications or user services to the home network user for instance audio video telephony applications a graphical user interface GUI a web browser etc. At the underlying software level these applications may share certain services or components named service objects if the CPE devices and the applications are built on a single management platform that supports remote management of the service objects. Examples of such components or service objects are for instance an HyperText Transfer Protocol HTTP service a codec a Transmission Control Protocol TCP service a driver for audio video hardware a GUI toolkit etc. The remote management involves for instance installation configuration invocation removal etc. of the service object and or its parameters and methods by means of a server located somewhere remotely in a network with connectivity to the CPE devices. The server is named the auto configuration server ACS or remote management server throughout this patent application. Examples of CPE or customer devices are a Digital Subscriber Line DSL modem a Set Top Box STB a personal computer PC a digital TV server a web server a WiFi point of access a wireless terminal such as a mobile telephone a Personal Digital Assistant PDA etc. In the context of the current invention a customer device can also be a device residing in the network whereon remotely manageable services are installed like for instance a Digital Subscriber Line Access Multiplexer DSLAM a remote unit RU a service blade etc. The current invention more particularly relates to the announcement exposure and manipulation of service objects to or by the remote management server.

As is illustrated by remote management systems consist of a management platform in the customer device a remote management server in the network and a remote management protocol for communication between a management client or agent running on the management platform and the remote management server .

An example management platform is the OSGi Open Service Gateway initiative service platform which is a Java based service platform that runs on top of a Java Virtual Machine JVM inside the customer device that is remotely managed. Presence of an OSGi service platform in the customer device enables remote installation update invocation removal etc. of service objects i.e. software components such as for instance a File Transfer Protocol FTP service from an auto configuration server anywhere in the network without disrupting the operation of the customer device. This way installation of a service object upgrading the service object to a new version re configuring the service object adding or activating new features of the service object and removal of the service object from the customer device is made possible without dispatching a technician to the customer premises and without requiring an intervention by the customer. Thanks to the management platform the software services service objects and applications bundles running on a single customer device or on different customer devices within the same home network can share their capabilities with each other.

The management agent or management client serves as an interface between the service object and the remote management server . On the one hand the management agent enables the management platform in the customer device to expose manageable parameters of the service object to the remote management server on the other hand the management agent serves as a master coordinating and controlling the lifecycle and the parameter configuration of the bundle s installed on a CPE.

One of the roles of the management protocol is to provide a mechanism by which the auto configuration server can securely read or write parameter values to configure the service object software in the customer device and eventually monitor the status and statistics of the customer device. An example management protocol for secure remote management of customer devices is the TR 069 protocol defined by the DSL Forum in its Technical Report TR 069 entitled CPE WAN Management Protocol that can for instance be retrieved from the Internet via the following URL 

The TR 069 protocol is Remote Procedure Call RPC based i.e. a generic message based mechanism by which the auto configuration server is able to read write configure parameters and parameter attributes of a software component running on a CPE device. Each parameter consists of a name value pair. The name identifies the particular parameter and has a hierarchical structure similar to files in a directory the different levels being separated by a . dot . The value of a parameter may be one of several defined data types. Each parameter further may be defined as a read only or read write parameter depending on whether the auto configuration server is allowed to only read the parameter or also to change the value of the parameter. In order to expose a service object to the auto configuration server the names and values of the remotely manageable parameters of that service object are first communicated to the auto configuration server in response to for instance the TR 069 GetParameterValues instruction. Thereafter the attributes of the parameters may be communicated in response to for instance the TR 069 GetParameterAttributes instruction.

Alternative remote management protocols are for instance the Open Mobile Alliance Device Management OMA DM protocol and the Simple Network Management Protocol SNMP .

A particular example could be an HyperText Transfer Protocol HTTP service object that is installed on an ADSL or VDSL modem for client server communications. All parameters of the HTTP service object constitute the service object representation of the HTTP service object for instance represented by in if is assumed to represent the HTTP service object. An example parameter is the number or identification of the port where the HTTP service listens to. The ADSL or VDSL modem is supposed to have an OSGi platform running on top of a Java Virtual Machine. The OSGi platform enables to share the capabilities of the HTTP service object with other applications e.g. a web browser or a local web server. Via a TR 069 management agent installed on top of the OSGi platform the parameters of the HTTP service object can be made visible and accessible to an auto configuration server ACS in the DSL network or indirectly to any other TR 069 aware bundle. However the bundle where the HTTP service forms part of thereto must explicitly announce the HTTP service object to the local management agent e.g. a TR 069 management agent via a protocol specific interface or external service object representation e.g. a TR 069 OSGi interface. Although drawn differently in it is noticed that the external service object representation can directly couple with the service object.

There are several drawbacks resulting from the known way to expose service objects and their parameters to a remote manager. Firstly every bundle must implement the same but remote protocol specific interface and must consequently conform to the behaviour object and data model structure imposed by the remote management protocol. This is illustrated by which shows a first bundle with two service objects and whose service object representations and are exported to the TR 069 management agent via respective TR 069 OSGi interfaces and . Another bundle Bundle x or in must implement the same TR 069 OSGi interface to export the service object representation of another service object to the TR 069 management agent in order to enable the latter to further expose the manageable parameters and methods of that service object via the TR 069 protocol to the TR 069 auto configuration server . The TR 069 interface for instance serves as an instrument to perform the TR 069 remote procedure calls such as GetParameterNames GetParameterValues and SetParameterValues. The remote protocol specific interface maps the TR 069 parameters and procedures onto the internal parameters and methods of the bundle . . . . In case of an audio bundle for instance the TR 069 parameter devices.services.OSGI.audio.volume is mapped onto the Java parameter Volume in the audio bundle and the TR 069 procedure call GetParameterValues for that parameter is mapped onto the Java method GetVolume available in the bundle. The implementation of such remote protocol specific interfaces is a repetitive task that must be executed for every bundle that desires to export a service object for remote management. Every bundle that implements one or more protocol specific interfaces e.g. TR 069 interfaces must provide functionality to query and map the TR 069 parameters or external service object representation to the internal representation of the service object e.g. in or and in .

Another drawback of the prior art way of announcing and exposing service objects to a remote management server is that it ties each bundle to a specific remote management protocol. For each type of remote management protocol e.g. TR 069 OMA DM SNMP etc. a different bundle must be developed which implements the remote protocol specific interface for exposing the service object representation to the corresponding management agent. A TR 069 aware bundle cannot be used on an OMA DM or SNMP based service platform.

The known mechanism for exposing service objects based on protocol specific interfaces is further limited in that it only provides remote access to the functionality that is exposed by the bundle and in its flexibility in case the underlying service object changes.

It is an objective of the present invention to provide a system and method for remote management of service objects in bundles that does not require implementation of protocol specific interfaces resulting in protocol specific bundles. It is a further objective of the present invention to provide a system and method for remote management of service objects which is more flexible in case of modification of the service object s and which does not restrict remote access to the functionality exposed by the bundle.

According to the present invention the above defined objectives are realized and the shortcomings of the prior art are overcome by a remote management system for remote management of a bundle having at least one service object with corresponding service object representation the remote management system comprising a management platform in a customer device where the bundle is installed a management agent and a remote management server the management agent being able to expose the service object representation via a remote management protocol to the remote management server wherein the remote management system further comprises a proxy bundle with a generic service object representation interface adapted to populate and export a generic service object representation of the at least one service object towards the management agent.

Thus the basic idea of the present invention is the introduction of a new bundle the proxy bundle whose task is to offload the implementation of remote management specific interfaces from existing bundles or newly installed bundles. Thanks to the generic service object representation populated and exported by the proxy bundle the bundles no longer have to map their internal service object representation to the model imposed by the remote management protocol. These bundles consequently can be made protocol independent. In addition it is noted that the introduction of the proxy bundle e.g. an OSGi proxy bundle all service objects running on the OSGi management platform become visible to the remote management server thus increasing the accessibility and flexibility for remote management of functionality in the bundles.

A further characteristic feature of the management system according to the present invention concerns the presence of a Java Application Programming Interface adapted to populate the generic service object representation from the service object representation.

Thus one way to populate the generic object model or generic service object representation in the proxy bundle introduced by the current invention is through a Java Reflection API. Such Java Reflection API is able to inspect and request all parameters methods arguments types etc. of all service objects running on the management platform. The generic object model thereafter is transmitted over the remote management protocol towards the remote management server. An alternative solution could for instance use a similar API in another actual or future language or environment e.g. the .NET environment from Microsoft.

Further optionally the generic service object representation interface that forms part of the proxy bundle introduced by the current invention may be adapted to map on a remote management protocol interface.

Indeed the generic interface that populates and exposes the generic service object model may map on e.g. the TR 069 interface or any other remote management protocol interface.

Also optionally the generic service object representation interface that forms part of the proxy bundle introduced by the current invention may be incorporated in the management agent.

Thus the management agent which is typically implemented as a bundle installed on the management platform and the new proxy bundle that forms the basis of the present invention may be integrated into a single bundle.

The management system according to the present invention may further comprise translation means for translating the generic service object representation to a representation that is understandable by the remote management server e.g. the original representation the translation means residing in between said proxy bundle and said remote management server i.e. including even in the proxy bundle.

This way the generic object model can further be translated to a proper service representation such that existing server side management is not impacted by the changes introduced by the current invention. The optional object model translation step can be performed either on remote server side or on service platform side i.e. at or near the management agent or in or near the proxy bundle.

Possibly the translation means may comprise an eXtensible Markup Language or XML scheme based on eXtensible Stylesheet Language Transformations or XSLT syntax and semantics or a dedicated application.

Indeed the translation of the generic model can be achieved by an XML scheme using XSLT as underlying technology or alternatively by a dedicated application.

The proxy bundle in the management system according to the present invention may further comprise means adapted to monitor and notify parameter value changes to the management agent.

Yet another optional aspect of the management system according to the present invention is that the proxy bundle may comprise means adapted to implement a service object interface not present on the management platform.

Thus the proxy bundle introduced according to the present invention may provide extra functionality such as the creation of service object placeholders or so called stubs that implement a known service object interface that is not present on the management platform.

A last optional aspect of the management system according to the invention is that the proxy bundle further may comprises means adapted to troubleshoot running service objects on the management platform.

The proxy bundle lying at the basis of the present invention thus introduces the opportunity of universal service level troubleshooting on the management platform. The troubleshooting may comprise tracing of service object method calls e.g. which bundle uses what service objects monitoring and measurements e.g. in case of resource allocation problems and conflicts relating to memory network traffic or CPU usage invoking methods of service objects via remote management and performing measurements or changing parameters in a dynamic and adaptive way etc.

The Java Reflection API will use a jar file or compressed Java archive installed on the CPE. When active it will inspect all service objects and manage a database of all objects and their parameters methods attributes etc. The OSGi proxy then can create and populate the generic object model as a result of which the management agent can request all parameters methods attributes etc. of all service objects. Whereas the prior art required each service object to implement a protocol specific interface e.g. a TR 069 interface with predefined parameters the current invention no longer is restricted by the parameter or procedure call convention of the remote management protocol. Java parameter and method naming can be used for the generic object model.

As is illustrated by the generic interface that lies at the basis of the present invention may map onto the TR 069 interface or any alternative existing remote management protocol interface in order to avoid any impact on current existing implementations. As is shown by bundles and may expose their service object parameters methods and attributes via the OSGi proxy bundle which according to the principles of the current invention implements a generic service object interface that maps onto TR 069 interface . The latter TR 069 interface further transmits the service object model to the management agent . No changes are required to current installations of the management agent and or management servers.

Alternatively as is shown in the OSGi proxy bundle and the generic interface implemented thereby may be incorporated in the management agent . In such case the bundles and shall export their service object representation directly with the newly developed management agent .

Although the present invention has been illustrated by reference to specific embodiments it will be apparent to those skilled in the art that the invention is not limited to the details of the foregoing illustrative embodiments and that the present invention may be embodied with various changes and modifications without departing from the spirit and scope thereof. The present embodiments are therefore to be considered in all respects as illustrative and not restrictive the scope of the invention being indicated by the appended claims rather than by the foregoing description and all changes which come within the meaning and range of equivalency of the claims are therefore intended to be embraced therein. In other words it is contemplated to cover any and all modifications variations or equivalents that fall within the spirit and scope of the basic underlying principles and whose essential attributes are claimed in this patent application. It will furthermore be understood by the reader of this patent application that the words comprising or comprise do not exclude other elements or steps that the words a or an do not exclude a plurality and that a single element such as a computer system a processor or another integrated unit may fulfill the functions of several means recited in the claims. Any reference signs in the claims shall not be construed as limiting the respective claims concerned. The terms first second third a b c and the like when used in the description or in the claims are introduced to distinguish between similar elements or steps and are not necessarily describing a sequential or chronological order.

