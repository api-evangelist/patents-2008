---

title: Apparatus for the reliability of host data stored on fibre channel attached storage subsystems
abstract: An apparatus for improving the reliability of host data stored on Fiber Channel attached storage subsystems by performing end-to-end data integrity checks. When a read or write operation is initiated, an initial checksum for data in the read/write operation is generated and associated with the data, wherein the association exists through a plurality of layers of software and attached storage subsystems. The initial checksum is passed with the data in the read/write path. When a layer of software in the read/write path receives the initial checksum and data, the layer performs an integrity check of the data, which includes generating another checksum and comparing it to the initial checksum. If the checksums do not match, the read/write operation fails and the error is logged. If the checksums match, the integrity check is repeated through each layer in the read/write path to enable detecting data corruption at the point of source.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08205137&OS=08205137&RS=08205137
owner: International Business Machines Corporation
number: 08205137
owner_city: Armonk
owner_country: US
publication_date: 20081124
---
This application is a continuation of application Ser. No. 11 189 895 Jul. 26 2005 now U.S. Pat. No. 7 472 332 issued Dec. 30 2008.

The present invention relates to an improved data processing system and in particular to a method and apparatus for improving the reliability of host data stored on Fibre Channel attached storage subsystems.

Host data that is written to Fibre Channel or iSCSI attached storage subsystems may pass through many layers of the operating system before it is written to disk. At any point along the data transfer path the data may be corrupted. As a result corrupted data may be written to disk without the host s knowledge. The data corruption is not tracked at the time of occurrence and may lead to serious problems. For example when corrupted data is later read from disk no indication is provided to the host that the data has been previously corrupted and the host assumes that the data is valid for use. The host s use of the corrupted data typically results in host errors. This situation also will lead to the scenario of not being able to pinpoint the source of corruption and not able to correct the problem.

Although the current art contains a number of solutions for improving the reliability of host data stored Fibre Channel attached storage subsystems these solutions all contain significant shortcomings. For example some host resource managers i.e. file systems databases etc. compute and maintain checksums for data at the time the data is written to disk. A checksum is an integrity protection measure that is performed by adding up components in a string of data and storing the data. It may later be verified that the object was not corrupted by performing the same operation on the data and checking the sum . After reading previously written data but prior to using the data the resource manager computes a checksum on the data read from disk and compares it to the checksum computed at the time data was written to disk. If the data has been corrupted at the time of the write the resource manager detects the corruption through a miss compare of the two checksum values and consequently does not use the corrupted data.

Within this solution a number of major drawbacks exist. First detection of the corruption occurs at the time the corrupted data is re accessed from disk. This detection may be well after days months years the time at which the data was corrupted and at points in processing where it is difficult or impossible for the resource manager or an application on the host using the resource manager i.e. file system to recover from the corruption. Second this solution is specific to a particular resource manager. For instance as the application database layer only manages this information by either storing it as part of the data or its headers the information is not understood by other layers in the stack of software involved. Third although this solution detects corruption it does nothing in the way of identifying the point at which the corruption occurred. The only thing that is known is that the data was corrupted between the time a write request was issued for the data by the resource manager and the data was later read by the resource manager. Finally the solution does not provide end to end data verification and has a window of vulnerability in which data corruption may occur and not be detected. For the most part resource managers store application data. Once provided to the resource manager application data may be corrupted while it resides with the resource manager but prior to being written to disk by the resource manager. In this case the corruption will not be detected and the application will be provided with corrupted data that is read from disk with no indication given to the application that the data is invalid.

The current art provides another solution through the combined support of a specific host resource manager in this case a database and a Fibre Channel attached storage subsystem. The database data written to disk is of a fixed data and block format and contains a checksum value within the data format. Prior to writing a data block to disk the database computes a checksum for the data contents of the block and records the computed checksum in the block. The data and block format of database are understood by the storage subsystems and prior to satisfying a write request for a database block the storage subsystem computes the checksum for the data contents of the block and compares this to the previously computed checksum. If the data has been corrupted in the write path the storage subsystem detects this through a miss compare of the two checksum values. If a corruption is detected the storage subsystem does not write the block to disk but rather signals an error condition back to the data base for this write request.

While this solution is an improvement over the previous solution described above in that the data corruption is detected earlier and affords better recoverability it still has a number of major drawbacks. First it imposes a fixed data and block format that includes a checksum value. Second it imposes the requirement that a component outside of the database namely the storage subsystem have intimate knowledge of the database specific format. Third this solution like the previous solution above also suffers from the problem that is does little in the way of identifying the source of the corruption. It narrows the point of corruption to operating systems and Fibre Channel input output I O paths involved in written the data but these are significant paths and in the case of the operating system made up of many components.

A third solution in the current art is provided through an extension of the Fibre Channel protocol to include a cyclical redundancy check CRC control value for verifying packets. Similar in concept to a checksum a CRC value is computed at the host for host data to be transmitted over the Fibre Channel link by the Fibre Channel adapter as part of writing host data to disk. The CRC value is sent along with the host data to the storage subsystem over the Fibre Channel. On receipt the storage subsystem computes a CRC value for the received data and compares it against the received CRC. If the data has been corrupted during transmission this is detected by a miss compare of the CRC values and the storage subsystem does not write the data to disk and errors off the packet. The major drawback of this solution is that it does not provide end to end verification of data and only detects corruption that has occurred in the transmission of data across the Fibre Channel link.

Therefore it would be advantageous to have an improved method for improving the reliability of host data stored on Fibre Channel attached storage subsystems. It would further be advantageous to have an end to end solution for data reliability between a host system and a Fiber Channel attached storage device without any restriction on the form structure or content of the data transacted.

The present invention provides a method apparatus and computer program product for improving the reliability of host data stored on Fibre Channel attached storage subsystems by performing end to end data integrity checks. With the present invention when a read or write operation is initiated an initial checksum for data in the read write operation is generated and associated with the data wherein the association exists through a plurality of layers of software and attached storage subsystems in the data processing system. The initial checksum is passed with the data in a read write path. When a layer of software in the read write path receives the initial checksum and data the layer performs an integrity check of the data wherein the integrity check includes generating a comparison checksum and determining whether the comparison checksum matches the initial checksum. If the initial and comparison checksums do not match the read write operation fails and the error is logged. If the initial and comparison checksums match the integrity check is repeated through each layer of software and attached storage subsystems in the read write path to enable detecting data corruption at the point of source.

With reference now to the figures depicts a pictorial representation of a network of data processing systems in which the present invention may be implemented. Network data processing system is a network of computers in which the present invention may be implemented. Network data processing system contains a network which is the medium used to provide communications links between various devices and computers connected together within network data processing system . Network may include connections such as wire wireless communication links or fiber optic cables.

In the depicted example server is connected to network along with storage unit . In addition clients and are connected to network . These clients and may be for example personal computers or network computers. In the depicted example server provides data such as boot files operating system images and applications to clients . Clients and are clients to server . Network data processing system may include additional servers clients and other devices not shown. In the depicted example network data processing system is the Internet with network representing a worldwide collection of networks and gateways that use the Transmission Control Protocol Internet Protocol TCP IP suite of protocols to communicate with one another. At the heart of the Internet is a backbone of high speed data communication lines between major nodes or host computers consisting of thousands of commercial government educational and other computer systems that route data and messages. Of course network data processing system also may be implemented as a number of different types of networks such as for example an intranet a local area network LAN or a wide area network WAN . is intended as an example and not as an architectural limitation for the present invention.

Referring to a block diagram of a data processing system that may be implemented as a server such as server in is depicted in accordance with a preferred embodiment of the present invention. Data processing system may be a symmetric multiprocessor SMP system including a plurality of processors and connected to system bus . Alternatively a single processor system may be employed. Also connected to system bus is memory controller cache which provides an interface to local memory . I O Bus Bridge is connected to system bus and provides an interface to I O bus . Memory controller cache and I O Bus Bridge may be integrated as depicted.

Peripheral component interconnect PCI bus bridge connected to I O bus provides an interface to PCI local bus . A number of modems may be connected to PCI local bus . Typical PCI bus implementations will support four PCI expansion slots or add in connectors. Communications links to clients in may be provided through modem and network adapter connected to PCI local bus through add in connectors.

Additional PCI bus bridges and provide interfaces for additional PCI local buses and from which additional modems or network adapters may be supported. In this manner data processing system allows connections to multiple network computers. A memory mapped graphics adapter and hard disk may also be connected to I O bus as depicted either directly or indirectly.

Those of ordinary skill in the art will appreciate that the hardware depicted in may vary. For example other peripheral devices such as optical disk drives and the like also may be used in addition to or in place of the hardware depicted. The depicted example is not meant to imply architectural limitations with respect to the present invention.

The data processing system depicted in may be for example an IBM eServer pSeries system a product of International Business Machines Corporation in Armonk N.Y. running the Advanced Interactive Executive AIX operating system or LINUX operating system.

With reference now to a block diagram illustrating a data processing system is depicted in which the present invention may be implemented. Data processing system is an example of a client computer. Data processing system employs a peripheral component interconnect PCI local bus architecture. Although the depicted example employs a PCI bus other bus architectures such as Accelerated Graphics Port AGP and Industry Standard Architecture ISA may be used. Processor and main memory are connected to PCI local bus through PCI Bridge . PCI Bridge also may include an integrated memory controller and cache memory for processor . Additional connections to PCI local bus may be made through direct component interconnection or through add in boards. In the depicted example local area network LAN adapter small computer system interface SCSI host bus adapter and expansion bus interface are connected to PCI local bus by direct component connection. In contrast audio adapter graphics adapter and audio video adapter are connected to PCI local bus by add in boards inserted into expansion slots. Expansion bus interface provides a connection for a keyboard and mouse adapter modem and additional memory . SCSI host bus adapter provides a connection for hard disk drive tape drive and CD ROM drive . Typical PCI local bus implementations will support three or four PCI expansion slots or add in connectors.

An operating system runs on processor and is used to coordinate and provide control of various components within data processing system in . The operating system may be a commercially available operating system such as Windows XP which is available from Microsoft Corporation. An object oriented programming system such as Java may run in conjunction with the operating system and provide calls to the operating system from Java programs or applications executing on data processing system . Java is a trademark of Sun Microsystems Inc. Instructions for the operating system the object oriented programming system and applications or programs are located on storage devices such as hard disk drive and may be loaded into main memory for execution by processor .

Those of ordinary skill in the art will appreciate that the hardware in may vary depending on the implementation. Other internal hardware or peripheral devices such as flash read only memory ROM equivalent nonvolatile memory or optical disk drives and the like may be used in addition to or in place of the hardware depicted in . Also the processes of the present invention may be applied to a multiprocessor data processing system.

As another example data processing system may be a stand alone system configured to be bootable without relying on some type of network communication interfaces As a further example data processing system may be a personal digital assistant PDA device which is configured with ROM and or flash ROM in order to provide non volatile memory for storing operating system files and or user generated data.

The depicted example in and above described examples are not meant to imply architectural limitations. For example data processing system also may be a notebook computer or hand held computer in addition to taking the form of a PDA. Data processing system also may be a kiosk or a Web appliance.

As previously mentioned data reliability problems may occur when data is corrupted while on its way through the write path. Data corruption unnoticed at the time of store will show up during a later read of the data and can be invariably non recoverable. Even after using a series of problem determination efforts it still may not be possible to identify the source of the data corruption. In some cases hardware will be suspected to be faulty resulting in a hardware replacement resulting in excessive costs. This situation is one of the most critical customer satisfaction issues.

Currently Fiber Channel FC protocol does not accommodate end to end checksums that reach the operating system. Existing checksum based data integrity solutions require that checksums be embedded within the application data. Consequently as the operating system is unaware of the checksum data it is not able to verify the checksum in various layers of the operating system. Also lack of awareness leads to the requirement that the data being transacted be of certain form and structure.

The mechanism of the present invention provides an end to end solution for data reliability between the host system and the FC attached storage device without any restriction on the form structure or content of the data transacted. With the present invention a mechanism is provided for associating a checksum with application data wherein the association exists through all of the layers of software involved in the host system as well as through FC attached storage subsystem data transactions. The mechanism of the present invention allows for verifying the associated checksum in various software modules for data integrity. In this manner corruption of data may be detected at the point of source.

The solution proffered by the present invention provides several advantages over existing systems. The mechanism of the present invention uses checksums to verify data and check for corruption but does not impose any format restriction on the data. Verifiers of the data are not required to have specific knowledge of the data format. Checksum values are specified as a known data type and are provided with but are separate from the data at each level in the write path. In addition windows of vulnerability within which data may be corrupted before the data is checksummed resulting in corruption being undetected are closed. Initial checksum values are computed and provided by high level producers e.g. applications etc. of the data at the time the data is initially provided to resource managers e.g. file system logical volume manager etc. . Furthermore the data is verified at multiple levels in the write path not just at the level of the storage subsystem. Using the specified initial checksum value and data for the write operation each level of the system is capable of detecting data corruption and in the case of detection logging the event and failing the write to disk.

Turning now to a block diagram illustrating an example application scenario with respect to the operating system in accordance with a preferred embodiment of the present invention is shown. In particular depicts example components that may be used in a write read operation. The example host system components shown in may be implemented in a data processing system such as data processing system in . The remote storage system components shown in may be implemented in a storage system such as storage system in .

In this illustrative example host system comprises resource manager e.g. an application or a database operating system and FC adapter . Resource manager contains host data that may be sent to remote storage system via operating system and FC adapter . Resource manager send host data to operating system via file system interface . Operating system comprises various layers including file system logical volume manager LVM and FC device drivers . Operating system is coupled to FC adapter .

Remote storage system comprises FC adapter and storage system . Data received from FC adapter on host system may be stored in storage system .

When a write operation within resource manager is initiated data from resource manager will flow through the many layers of operating system and eventually over the fiber to remote storage system . Data sent by resource manager is associated with a checksum such as checksum . Checksum percolates through the various layers of operating system where the checksum may be verified in each layer and then flows over the fiber to storage system to be verified at that end. If a checksum error is detected in any of these checkpoints the write operation may fail straight away. Similarly read operations may verified at various points from the storage system to the application layer with an associated checksum calculated and sent by the storage system.

Fibre Channel communication between resource manager and storage system is enhanced to include data integrity related information along with the data in each data flow between the two entities. In other words checksum may be associated with the host data using current FC protocols. As current FC protocols provide for optional fields one header in the fiber will be used to contain the checksum information associated with the data.

Operating system provides necessary layer to layer changes to enable association of checksum information with the data as the data flows from file system to LVM and other layers within the operating system. For instance changes may be made to LVM and other such layers so that the data buffer will have space for the associated checksum value. These data buffers are passed from layer to layer and understood by various layers. Also as part of the layer to layer interfaces an additional control may be used to indicate whether or not the checksum verification should be performed in a particular layer. Operating system also provides a new set of file system interfaces such as file system interface that perform the read and write operations with checksum information. The read write operations may also be controlled by file input output controls IOCTLS with regards to levels of checksum verification performed in the operating system. These controls may designate which layers in the operating system should perform a check of the data. For example a check may be performed in none some of all of the layers in the operating system. Operating system may also provide interfaces to enable publishing of this capability such that resource manager may also make use of this selective verification. For example the application may indicate through controls whether or not the application desires an exhaustive level of verification within the OS.

In addition operating system embedded FC device driver layers are made checksum data aware. This awareness may be achieved by modifying the interfaces to and from the device drivers to allow the interface to include the checksum related attributes. Such attributes include checksum information as well as controls for checksum verifications. FC device drivers send and receive checksum information while interacting with FC adapter .

Resource manager may make use of the new file system interfaces provided by operating system to send and receive data with checksum information. Resource manager generates the checksum and provides the checksum during write operations. If a write operation fails due to checksum errors the resource manager may choose to enable more levels of checksum verification in the various layers of operating system in order to detect the data corruption at the instant of occurrence. Similarly during data receptions resource manager may receive the data and associated checksum from storage system . Resource manager generates a checksum for the received data and verifies its checksum against the received checksum. If the checksums do not match the resource manager discards the data.

Remote storage system is made aware of the optional headers over the Fibre Channel and may send and receive checksum information to and from host system . Remote storage system lies remote to the server and typically will have its own OS and management capabilities. Consequently remote storage system may be modified to detect checksums and control information and act accordingly. These modifications may be performed for both write and read operations. Storage system knows the checksum algorithm used by host system . Storage system may know the algorithm used if both the server and the storage system use a common fixed algorithm. Alternatively storage system may know the algorithm if the algorithm type is sent as part of the packet structure. In either case storage system may use the algorithm to generate and verify checksums during write operations. If the checksums generated by storage system and host system differ the write operation will fail and the host system is notified. During read operations storage system generates a checksum for the data and transmits the checksum along with the data to host system .

Return code may be used to indicate whether a write is unsuccessful. For example when a write operation is performed the data may flow through various layers of the host system in the write path such as from layer L to L L to L etc. If at any point the checksum verification fails then return code may be used by that layer performing the verification to return enough information as part of the failure to indicate the layer concerned as well as data related to failure e.g. data length of data etc. . For example if the checksum verification fails at layer L the information from return code may help aid in debug efforts as to why the preceding layer L or current layer L created the failure and further debugging may then be pursued in these layers. Similarly return code may be used to indicate the success of a read operation.

The process begins with a resource manager initiating a write operation to a storage system step . The resource manager generates a checksum for the data and sends the data and associated checksum through the write path step . The checksum may be sent with the data by placing the checksum in an optional header of the Fibre Channel.

When a layer in the operating system receives the data and checksum step the layer verifies the data integrity by generating a checksum and comparing its checksum against the initial checksum passed from the application step . The operating system provides a new interface that is capable of receiving checksum information and allows checksum information to be passed through the operating system layers. Input output controls may designate that all some or none of the layers perform the data integrity verification. Each designated layer knows the checksum algorithm used by the host application to generate the initial checksum. For instance a common default method of algorithm may be used by both entities. Alternatively the application may make a request to the OS to use a particular algorithm amongst a choice of algorithms supported by the OS. As previously mentioned this request may be part of the request from the application to OS.

The layer then makes a determination as to whether checksum it generated and the initial checksum match step . If the checksums do not match the write fails the write error is logged to a log file and a write failure notification is sent to the application step . The write may fail at the point where the checksum verification fails and the information about the failure is returned to the original requester. The write error log may include information regarding the location of the corruption. The write failure notification comprises a unique return code that flows back to the requester.

Turning back to step if the checksums do match the process returns to step for each designated layer of the operating system.

When the FC adapter on the host system receives data and checksum from the operating system step the FC adapter also verifies the data integrity by generating a checksum and comparing its checksum against the initial checksum passed from the application step . The FC adapter then makes a determination as to whether checksum it generated and the initial checksum match step . If the checksums do not match the write fails the write error is logged to a log file and a write failure notification is sent to the application step . If the checksums do match the data and checksum continues on the write path to the FC adapter on the storage system.

When the FC adapter on the storage system receives the data and checksum from the FC adapter on the host system step the FC adapter generates a checksum and compares its checksum against the initial checksum passed from the application step . The FC adapter then makes a determination as to whether the checksums match step . If the checksums do not match the write fails the write error is logged to a log file and a write failure notification is sent to the application step . If the checksums do match the data and checksum continues on the write path to the storage system.

When the storage system receives the data and checksum step the storage system generates its own checksum and compares its checksum against the initial checksum passed from the application step . The storage system determines whether the checksums match step . If the checksums do not match the write fails the write error is logged to a log file and a write failure notification is sent to the application step . If the checksums do match the data and checksum is stored on disk step .

Thus the present invention provides an advantage over existing systems by providing end to end data integrity checks on Fibre Channel iSCSI based storage systems. The mechanism of the present invention prevents corrupted data from being stored on the disk by associating a checksum with application data wherein the association exists through all of the layers of software involved in the host system as well as through FC attached storage subsystem data transactions. In addition if data corruption is detected this detection may be made at the point of source. In this manner without any restriction on the structure form or content of the host data the present invention achieves highly reliable data transport both to and from the host and storage systems.

It is important to note that while the present invention has been described in the context of a fully functioning data processing system those of ordinary skill in the art will appreciate that the processes of the present invention are capable of being distributed in the form of a computer readable medium of instructions and a variety of forms and that the present invention applies equally regardless of the particular type of signal bearing media actually used to carry out the distribution. Examples of computer readable media include recordable type media such as a floppy disk a hard disk drive a RAM CD ROMs DVD ROMs and transmission type media such as digital and analog communications links wired or wireless communications links using transmission forms such as for example radio frequency and light wave transmissions. The computer readable media may take the form of coded formats that are decoded for actual use in a particular data processing system.

The description of the present invention has been presented for purposes of illustration and description and is not intended to be exhaustive or limited to the invention in the form disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art. The embodiment was chosen and described in order to best explain the principles of the invention the practical application and to enable others of ordinary skill in the art to understand the invention for various embodiments with various modifications as are suited to the particular use contemplated.

