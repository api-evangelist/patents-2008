---

title: Addressing query scheduling and system resource requirements
abstract: Method, system and article of manufacture for scheduling queries. In particular, the scheduling options made available to a user for a particular unit of work are determined dynamically at the time of scheduling. In this way, the execution cost, for example, of a particular unit of work can be taken into account when determining which scheduling options to make available. In addition, or alternatively, system availability and/or user parameters may be accounted for when determining which scheduling options to make available.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07925619&OS=07925619&RS=07925619
owner: International Business Machines Corporation
number: 07925619
owner_city: Armonk
owner_country: US
publication_date: 20080807
---
This application is a continuation of U.S. patent application Ser. No. 10 787 477 filed Feb. 26 2004 now U.S. Pat. No. 7 454 404 which is herein incorporated by reference in its entirety.

The present invention generally relates to data processing and more particularly to scheduling the performance of units of work in a data processing system.

Databases are computerized information storage and retrieval systems. A relational database management system is a computer database management system DBMS that uses relational techniques for storing and retrieving data. The most prevalent type of database is the relational database a tabular database in which data is defined so that it can be reorganized and accessed in a number of different ways. A distributed database is one that can be dispersed or replicated among different points in a network. An object oriented programming database is one that is congruent with the data defined in object classes and subclasses.

Regardless of the particular architecture a DBMS can be structured to support a variety of different types of operations for a requesting entity e.g. an application the operating system or an end user . Such operations can be configured to retrieve add modify and delete information being stored and managed by the DBMS. Standard database access methods support these operations using high level query languages such as the Structured Query Language SQL . The term query denominates a set of commands that cause execution of operations for processing data from a stored database. For instance SQL supports four types of query operations i.e. SELECT INSERT UPDATE and DELETE. A SELECT operation retrieves data from a database an INSERT operation adds new data to a database an UPDATE operation modifies data in a database and a DELETE operation removes data from a database.

In some environments it is desirable to schedule queries. Scheduling queries allows users to specify specific times and or frequencies for running queries. Query schedules are appropriate in environments where the underlying data is constantly changing i.e. being updated or augmented with additional data . For example a researcher runs one query to get an initial list of candidates for a research study to start the research process. But over the coming weeks to years the researcher wants to know if other people develop conditions that would satisfy the query and therefore make them candidates for similar research. Similarly summary tables or normalized values might be periodically updated via expensive SQL operations. Thus some classes of queries are scheduled to be run multiple times over long periods of time.

While the ability to schedule queries is a useful tool for users indiscriminate scheduling can result in substantial system performance degradation. Left in isolation a scheduled system can easily tend towards chaos. As more queries get scheduled the system s performance becomes more unpredictable. It is common to deal with this situation by having an administrator determine why the system has become unresponsive and selectively terminate queries identified as being problematic. Alternatively to prevent any one user or group of users from destabilizing a system query execution limits are often placed on users. For example a specific user s may be limited to running queries that take less than 20 minutes to run or is not allowed to run queries that can consume more than 20 of the CPU power at a time. Typically these rules are administrative actions enforced at runtime and commonly the action taken is to terminate any offending query.

The problem with the foregoing approach is that the users administrators of a system have to recover from the system action. The ramifications include lost time too late in the process frustration on the part of users and lost profits by the system owner who is likely paying the users running the queries. Therefore what is needed is a more intelligent approach to scheduling units of work such as queries.

The present invention generally provides for methods systems and articles of manufacture for scheduling queries.

In one embodiment methods systems and articles of manufacture for scheduling execution of units of work is provided. A cost to execute a unit of work is determined. On the basis of the cost a plurality of user selectable scheduling options for future execution of the unit of work can be determined. The plurality of user selectable scheduling options are then returned to a user interface for display to a user.

In another embodiment scheduling units of work includes determining a cost to execute a unit of work determining system availability to execute the unit of work and determining a plurality of user selectable scheduling options for further execution of the unit of work on the basis of the cost and at least one of system availability and user rules. The plurality of user selectable scheduling options are then returned to a user interface for display to a user.

In another embodiment a computer system includes a schedule indicating when units of work are to be executed and a scheduler. The scheduler is configured to determine a cost to execute a unit of work determine a plurality of user selectable scheduling options for future execution of the unit of work on the basis of the cost and return the plurality of user selectable scheduling unit of work to a user interface for display to a user.

The present invention is directed to a method system and article of manufacture for scheduling queries. In particular the scheduling options made available to a user for a particular unit of work are determined dynamically at the time of scheduling. In this way for example the execution cost for a particular unit of work can be taken into account when determining which scheduling options to make available.

One embodiment of the invention is implemented as a program product for use with a computer system. The program s of the program product defines functions of the embodiments including the methods described herein and can be contained on a variety of signal bearing media. Illustrative signal bearing media include but are not limited to i non writable storage media e.g. read only memory devices within a computer such as CD ROM disks readable by a CD ROM drive having information permanently stored thereon and ii writable storage media e.g. floppy disks within a diskette drive or hard disk drive having alterable information stored thereon. Such signal bearing media when carrying computer readable instructions that direct the functions of the present invention represent embodiments of the present invention.

In general the routines executed to implement the embodiments of the invention may be part of an operating system or a specific application component program module object or sequence of instructions. The computer program of the present invention typically is comprised of a multitude of instructions that will be translated by the native computer into a machine readable format and hence executable instructions. Also programs are comprised of variables and data structures that either reside locally to the program or are found in memory or on storage devices. In addition various programs described hereinafter may be identified based upon the application for which they are implemented in a specific embodiment of the invention. However it should be appreciated that any particular program nomenclature that follows is used merely for convenience and thus the invention should not be limited to use solely in any specific application identified and or implied by such nomenclature.

In some embodiments the invention can be implemented in a hardware software configuration including at least one client computer and at least one server computer. The client s and server s may be executing on a common machine or may be deployed in distributed environment in which the client s and server s communicate via a network. In a particular embodiment aspects of the invention are implemented in a web based environment. However the client server model and web based environment are merely representative models environments in which the present invention may be implemented and persons skilled in the art will recognize other possibilities. Furthermore embodiments of the present invention can apply to any comparable hardware configuration regardless of whether the computer systems are complicated multi user computing apparatus single user workstations or network appliances that do not have non volatile storage of their own.

In the following reference is made to embodiments of the invention. However it should be understood that the invention is not limited to specific described embodiments. Instead any combination of the following features and elements whether related to different embodiments or not is contemplated to implement and practice the invention. Furthermore in various embodiments the invention provides numerous advantages over the prior art. However although embodiments of the invention may achieve advantages over other possible solutions and or over the prior art whether or not a particular advantage is achieved by a given embodiment is not limiting of the invention. Thus the following aspects features embodiments and advantages are merely illustrative and unless explicitly present are not considered elements or limitations of the appended claims.

Referring now to a block diagram of one embodiment of a data processing system is illustrated. Illustratively the data processing system is a networked environment in which a plurality of client computers . . . access a server computer via a network . In one embodiment the network is the Internet and the server computer is a web based server hosting any number of applications by way of example two applications and collectively the applications are shown on the server computer . Accordingly the client computers may each be configured with a browser application capable of navigating to the network address of the server computer and submitting user requests to the applications . For purposes of the present illustration the applications are considered to be database applications configured to externalize graphical user interface elements for the construction scheduling and submission of queries . The queries may then be executed against a database which may be any queryable collection of data and may reside on the server computer remotely on another computer or be distributed over a plurality of networked computers. In addition to allowing users to construct queries the applications may also include analysis routines . For example an analysis routine may run through a group of text documents annotating interesting information that would later be cross referenced by search engines. Another analysis routine may be configured to generate a complex three dimensional model display of data points. More generally an analysis routine may refer to any unit of work performed with respect to the data in the database or results derived from the data in the database .

More generally the applications may be configured to allow implementation of any unit of work of which queries and analysis routines are merely examples. Accordingly while reference is made herein to queries and or analysis routines the invention is not so limited.

A user accessing the database applications via the browser is presented with an interface screen which makes available to the user a plurality of scheduling options . After selecting the desired scheduling options a resulting schedule entry is made to a schedule that is maintained by the respective application . Subsequently the scheduled unit of work e.g. query or analysis routine is run in accordance with the schedule .

A representative scheduling interface output by either of the applications is shown in . By way of example the scheduling interface is configured for scheduling the execution of queries. However persons skilled in the art will recognize that the scheduling interface is equally adaptable to scheduling other units of work such as the execution of an analysis routine. The scheduling interface includes a name field for specifying the name of a query and a description field for specifying a brief description of the query. The scheduling interface also includes a list of scheduling options e.g. scheduling options made available to the user in the form of a drop down menu . Illustratively the drop down menu provides the user with six scheduling options. With the exception of the first scheduling options which the user selects for immediate execution of the query the remaining five scheduling options require the user to specify additional scheduling parameters. Illustratively it is assumed the user selected Monthly from screen as the frequency for running the query and then clicks the OK button to advance to a next screen for specifying additional parameters. One such interface screen is shown in . The screen includes a schedule configuration area in which the user may specify starting and ending parameters for running the query. For example the starting parameters include the date and time of day and the ending parameters include the number of occurrences to schedule. Upon completing the schedule configuration process the user clicks the OK button to submit the schedule. The query is then run on the basis of the schedule without further user interaction.

While any given application may allow for a broad range of scheduling options the system performance may be optimized by restricting users to a subset of all available scheduling options. For example shows an interface screen corresponding to the interface screen except that the list of available scheduling options in the dropdown menu has been reduced. In particular the user is now only given Weekly and Monthly as the available scheduling options. It is contemplated that the available scheduling options may be determined on the basis of a variety of factors including for example the cost to execute the query the system availability and or user rules as will be described in more detail below. Assume that the user again selects Monthly as the frequency for running the query and then clicks the OK button to advance to a next screen for specifying additional parameters. One such interface screen is shown in and corresponds to the screen shown in . In general the screen may be augmented with information describing restrictions about running the query e.g. restrictions on running the query during business hours . In this example the screen includes a text message indicating to the user that the scheduling options are restricted to off peak hours because of the determined execution cost. The text message is merely illustrative of one manner of conveying to the user a limitation on scheduling options. Persons skilled in the art will recognize other embodiments within the scope of the invention.

In one embodiment the scheduling options made available to a user for a given unit of work are determined by a scheduler such as the one shown residing on the server computer in . Although not shown the scheduler may be configured with appropriate application programming interfaces APIs for each of the applications . In this way the scheduler may interface with the applications and operate to limit the scheduling options externalized by the respective applications as was illustrated with respect .

The component of the scheduler responsible for determining scheduling options for a given unit of work is a scheduling optimizer . In general the scheduling optimizer is configured to take input and then determine which of the scheduling options of the various applications are to be externalized for selection by users. Illustrative inputs to the optimizer include the cost of a query calculated by a cost calculator and the system availability calculated by a system availability determination unit . In one embodiment user rules are also employed to determine scheduling options. Persons skilled in the art will recognize that other parameters may be relied upon to determine scheduling options. It should be noted that the scheduling architecture shown in is merely one embodiment. In another embodiment each application may be configured with a scheduler capable of determining which scheduling options to make available to users for a given unit of work. It is also contemplated that the scheduling options need not be statically defined but may instead be dynamically generated by the respective application.

Referring now to one embodiment of a scheduling routine is shown. The scheduling routine is collectively implemented by the scheduler and an application e.g. any of the applications shown in . Initially a unit of work is received step . For example a user may construct a query using a graphical user interface made available by an application. The cost calculator of the scheduler is then invoked to determine a cost of executing the query step . In one embodiment the system availability determination unit is then invoked to determine system availability step . In addition to cost and system availability is contemplated that the scheduling optimizer may rely on other input in determining which scheduling options to make available to a user for a given unit of work. Accordingly the scheduling routine includes a determination of other parameters affecting the available scheduling options step . The scheduling optimizer then determines the user selectable scheduling options step and returns those options to a user interface step such as the one shown in . The user is then able to make and submit scheduling options selections. The user selections are received step and saved in an appropriate schedule step such as one of the schedules shown in . When the selected scheduling selections are met the unit of work is performed step .

Regarding determination of cost it is noted that it is well known to estimate the execution cost of queries even where the queries were not previously run. Query optimizers and query expense estimation tools exist for this purpose. Given any particular query it is possible to predictively estimate how long it will take to run with a reasonable degree of accuracy. How long a query will take to run is determined by a number of factors that can be discovered relatively quickly related to how the system is going to have to execute the query. Illustrative factors include what indexes are in place for the query what joins will have to be executed the expected distribution of data that will come from each table used in the query etc.

As noted above user rules may be applied to determine which scheduling options to make available. One user rule may require accounting for a given user s other scheduled units of work. For example if a user that wants to execute a 2 hour query at 2 A.M. but already has three long running queries scheduled for that time the option to schedule another can be disallowed. In such a model it is contemplated to use a display e.g. made available by the scheduler which highlights to users their scheduling options on the basis of what is already scheduled. Thus times of day might be blocked out and potentially differentiated by the different reasons they are blocked out. Illustrative reasons for blockage include core business hours queries the user already has scheduled and queries others have scheduled. In this way a user viewing the display could choose to not run a given scheduled query s in favor of the one currently being scheduled or may opt to move a scheduled query to another time to free up a time block. Thus users have the advantage of intelligently prioritizing and scheduling. Of course scheduled queries can overlap and run concurrently but any potential detrimental cumulative effect would be accounted for by restricting scheduling options. It is also contemplated that some users would be given priority over other users allowing the higher priority users to move the queries of other lower priority users to a different time or remove it from the schedule entirely to free up the resources to run their queries.

While the execution cost may be an estimation prediction where the unit of work was not previously run it is also contemplated that historical execution time s may be relied upon where the unit of work was previously performed. Thus the scheduler may have access to historical information for units of work and use this information to determine the cost. Further it is contemplated that both cost determination approaches estimation and history based may be used in tandem.

In any case the execution cost and other inputs to the scheduler can be used to determine what options to provide a user during the scheduling process. By preemptively accounting for the cost of units of work before scheduling the unit of work system performance degradation may be mitigated or avoided. For example if a determination is made that a query is relatively inexpensive it may be acceptable to run the query every minute. On the other hand if a system recognizes that a query is going to be a significant drain on the system the user may be restricted to running the query only once per week. Further if a system predictively determines a query is never going to be allowed to complete in during business hours and thus requires off hours execution the scheduler may eliminate any options allowing business hours execution. Such an approach yields advantages system wide in that the system remains more usable and predictable to other users and the administrator can expect fewer instances requiring intervention.

While the foregoing is directed to embodiments of the present invention other and further embodiments of the invention may be devised without departing from the basic scope thereof and the scope thereof is determined by the claims that follow.

