---

title: Responding to interrupts while in a reduced power state
abstract: To reduce power consumption, a processor can be placed into a reduced power state. Before doing so, interrupt events can be designated as wakeup events. While the processor is in the reduced power state, if an event designated as a wakeup event occurs, then a signal is directed to a wakeup event handler instead of to an interrupt handler. In response to the signal, the wakeup event handler causes power to be restored to the processor, so that the event can be subsequently serviced.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08762759&OS=08762759&RS=08762759
owner: Nvidia Corporation
number: 08762759
owner_city: Santa Clara
owner_country: US
publication_date: 20080410
---
Embodiments according to the present invention generally relate to power management in limited powered devices.

Power consumption is of particular concern in limited power devices e.g. battery powered devices such as laptop and notebook computer systems cell phones personal digital assistants PDAs portable media players remote control units hand held devices including video game players and the like. These devices are limited in size and weight and generally portable and therefore they typically use smaller and lighter batteries of limited capacity. However these types of devices may be used for a variety of computationally intensive and therefore power hungry applications such as three dimensional 3D rendering and video encoding and decoding. As a result such devices can usually be used only for relatively short periods of time before their batteries need to be recharged.

One way to reduce power consumption is to turn off or reduce power to selected components when possible. For example certain components can be powered off or placed into a sleep state if they are not used or needed for a prescribed period of time.

An electronic device may include a central processing unit CPU additional processors such as for example an audio video processor AVP and other functional components such as buses and memory controllers. Although the CPU and the other components may be coupled they can generally perform certain tasks and functions independent of each other. Thus for example while the AVP is executing a particular task it may be possible to shut down the CPU in order to conserve power. As described more fully below the CPU can be powered independently of other components so that in some situations the CPU can be placed into a reduced power state while other components e.g. the AVP remain at full power.

As used herein the term reduced power state refers to a state in which the amount of power supplied to the CPU is less than full normal power and specifically includes the case in which no power is supplied to the CPU. For simplicity of discussion the term reduced power state includes the period of time when the CPU is at a reduced power level as well as the period of time when the CPU is transitioning to the reduced power level. Exceptions to this terminology may occur but will be evident within the context of the surrounding discussion.

While the CPU is in the reduced power state it may be desirable to ignore certain types of events so that the CPU is not unnecessarily awakened. On the other hand there are times when it is necessary to restore full power to the CPU so that it can handle events such as interrupt events that can occur because other components e.g. the AVP may be active even though the CPU is in a reduced power state. Described below are methods and systems that can be used to efficiently place the CPU into a reduced power state and to decide when to restore full power to the CPU after the CPU has been placed into a reduced power state.

According to embodiments of the invention the CPU prepares to enter a reduced power state by specifying conditions presets that will go into effect when the CPU enters the reduced power state and that will remain in effect while the CPU is at reduced power.

In one embodiment according to the invention certain interrupt events are designated as wakeup events. Other types of events in addition to interrupt events may also be designated as wakeup events. While the CPU is in a reduced power state if an event designated as a wakeup event occurs then a signal is directed to a wakeup event handler instead of or in addition to an interrupt handler. In response to the signal the wakeup event handler causes full power to be restored to the CPU so that the event can be subsequently serviced. In one particular embodiment of the invention the wakeup event handler e.g. a power management interface sends a signal to a power management unit PMU that is connected between the CPU and a power source e.g. a battery . In response to the signal the PMU restores power to the power rail that supplies the CPU.

In one embodiment according to the invention after the CPU specifies the conditions that are to go into effect when it enters a reduced power state the CPU sets an enable bit as one of its last acts if not its last act before entering the reduced power state. The CPU continues to function in its normal fashion up to the point at which the enable bit is set. After the enable bit is set the specified conditions are active and remain active until the enable bit is de asserted e.g. when full power is restored to the CPU .

In one embodiment according to the invention the transition to the reduced power state is accomplished in hardware using a state machine. The state machine can perform the actions associated with entering the reduced power state without relying on the CPU. Accordingly once a decision is made to place the CPU into the reduced power state there is no need to delay implementation of that decision. In other words if the transition was implemented in software instead of in hardware it would be necessary to delay reducing power to the CPU to allow the CPU enough time to complete execution of the software instructions that need to be executed before the CPU is completely powered down. The length of the delay needs to be generous to make sure the CPU has enough time to perform the activities required and as a result the CPU may operate at full power longer than actually necessary. By accomplishing the transition automatically in hardware alone power can be removed from the CPU earlier which helps conserve power. Also by accomplishing the transition in hardware instead of in software a race between removing power to the CPU and stopping the CPU clock is avoided. When software controls the CPU power down procedure if the CPU power reaches a critical threshold before the clock is completely stopped then the CPU may behave unpredictably with unpredictable results. The hardware state machine assures that power down occurs in an orderly fashion.

In summary according to embodiments of the present invention the CPU can be placed in a reduced power state e.g. powered down completely . However power can be restored to the CPU so that it can respond to events such as interrupt events that may occur while the CPU is in the reduced power state. More specifically before the CPU enters the reduced power state it designates interrupt events and perhaps other types of events as wakeup events that cause power to be restored to the CPU should such an event occur while the CPU is in the reduced power state. Accordingly hardware e.g. a power management interface can respond to a designated event by awakening the CPU so that the event can be serviced.

Thus power is conserved by placing the CPU in a reduced power state when conditions dictate that it is appropriate to do so but the capability remains for the CPU to respond to interrupt events.

These and other objects and advantages of the various embodiments of the present invention will be recognized by those of ordinary skill in the art after reading the following detailed description of the embodiments that are illustrated in the various drawing figures.

Reference will now be made in detail to embodiments in accordance with the present invention examples of which are illustrated in the accompanying drawings. While the invention will be described in conjunction with these embodiments it will be understood that they are not intended to limit the invention to these embodiments. On the contrary the invention is intended to cover alternatives modifications and equivalents which may be included within the spirit and scope of the invention as defined by the appended claims. Furthermore in the following detailed description of embodiments of the present invention numerous specific details are set forth in order to provide a thorough understanding of the present invention. However it will be recognized by one of ordinary skill in the art that the present invention may be practiced without these specific details. In other instances well known methods procedures components and circuits have not been described in detail as not to unnecessarily obscure aspects of the embodiments of the present invention.

Some portions of the detailed descriptions which follow are presented in terms of procedures steps logic blocks processing and other symbolic representations of operations on data bits within a computer memory. These descriptions and representations are the means used by those skilled in the data processing arts to most effectively convey the substance of their work to others skilled in the art. A procedure computer executed step logic block process etc. is here and generally conceived to be a self consistent sequence of steps or instructions leading to a desired result. The steps are those requiring physical manipulations of physical quantities. Usually though not necessarily these quantities take the form of electrical or magnetic signals capable of being stored transferred combined compared and otherwise manipulated in a computer system. It has proven convenient at times principally for reasons of common usage to refer to these signals as bits values elements symbols characters terms numbers or the like.

It should be borne in mind however that all of these and similar terms are to be associated with the appropriate physical quantities and are merely convenient labels applied to these quantities. Unless specifically stated otherwise as apparent from the following discussions it is appreciated that throughout the present invention discussions utilizing terms such as sending signaling setting enabling performing determining designating placing backing up operating experiencing directing latching or the like refer to the actions and processes of a computer system or similar electronic computing device that manipulates and transforms data represented as physical electronic quantities within the computer system s registers and memories into other data similarly represented as physical quantities within the computer system memories or registers or other such information storage transmission or display devices.

Embodiments of the invention described herein may be discussed in the general context of computer executable instructions residing on some form of computer usable medium such as program modules executed by one or more computers or other devices. Generally program modules include routines programs objects components data structures etc. that perform particular tasks or implement particular abstract data types. The functionality of the program modules may be combined or distributed as desired in various embodiments.

By way of example and not limitation computer usable media may comprise computer storage media and communication media. Computer storage media includes volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. Computer storage media includes but is not limited to random access memory RAM read only memory ROM electrically erasable programmable ROM EEPROM flash memory or other memory technology compact disk ROM CD ROM digital versatile disks DVDs or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium that can be used to store the desired information.

Communication media can embody computer readable instructions data structures program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term modulated data signal means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example and not limitation communication media includes wired media such as a wired network or direct wired connection and wireless media such as acoustic radio frequency RF infrared and other wireless media. Combinations of any of the above should also be included within the scope of computer readable media.

In the embodiment of the system includes a system on a chip SOC a power management unit PMU a power source and a memory . The SOC includes an always on module a central processing unit CPU or processor a graphics 3D processing unit GPU non power gated functions and an audio video processor AVP e.g. a multimedia player or decoder . These elements are interconnected using one or more buses not shown .

The CPU can access the memory via a bridge component memory controller not shown or the CPU can be directly coupled to the memory via a memory controller not shown internal to the CPU . The memory facilitates storage of component e.g. context or state application and operating system information for SOC . For example the memory may be used to store context information and other information when portions of SOC enter reduced power states.

The power source provides power to the system . The power source may include for example one or more batteries or the like.

The PMU regulates power to the SOC . In the example of the PMU is illustrated as being external to the SOC however the PMU may instead be implemented as a part of the SOC . In one embodiment the PMU provides power to the SOC via power rails coupled to selected components or groups of components referred to as power domains. For example the power domain includes the CPU the GPU the AVP and the non power gated functions . In the example of the PMU provides power to the always on module via a power rail and to the power domain via a power rail . A power rail may be switched on off or power gated.

In general each power rail provides power to a single power domain that includes one or more components. Thus power domains can be independently turned off and on e.g. independently power gated one power domain can be on while another power domain is off. Within a power domain that contains multiple components the power to each of the components can be independently controlled e.g. independently power gated and or clock gated . That is one component in a power domain may be reduced in power or turned off while another component within the same power domain remains at full power. Accordingly for example the CPU may be turned off or reduced in power while the AVP remains at full power. In the embodiment the non power gated functions can be clock gated but are not power gated.

In the example of the always on module is a power domain that remains powered while other portions of the SOC are put into a reduced power state. The always on module thus facilitates the components of the SOC e.g. the CPU GPU AVP and non powered gated functions as they enter and exit reduced power states. The always on module may include resources e.g. registers and the like for storing information to facilitate components of the SOC that enter into a reduced power state allowing those components to recover their internal state context information after waking from the reduced power state. The always on module is not literally always on it may be powered off when a user turns off the system . However after a user turns on the system the always on module remains on even if all other components have entered reduced power states. That is the always on module remains on once a user turns on the system and remains on until a user turns off the system .

The always on domain and the power domain are both turned off with no power consumption in the off state. In the off state the device e.g. the system is turned off by for example a user pressing an on off button on the larger device. In one reduced power state referred to herein as the LP0 state and sometimes also referred to as a deep sleep state the always on domain is on and the power domain is off e.g. the power rail is switched off or power gated or the power domain is power gated . In another reduced power state referred to herein as the LP1 state and sometimes also referred to as the suspended power state the always on domain is on and components within the power domain are selectively and independently power gated and or clock gated. In the full on power state both the always on domain and the power domain are on.

In the LP1 state the CPU may be power gated while other components e.g. the AVP may be fully powered or possibly clock gated. Generally speaking the CPU may be placed in a reduced power state while other components remain active. As noted previously herein the reduced power state may be one in which all power is removed from the CPU the CPU is completely shut down. Also for example pins on the CPU may be clamped so that they cannot be driven after power is removed from the CPU so that spurious signals are not sent to downstream components in particular while the CPU is transitioning to the reduced power state.

While the CPU is in a reduced power state it may be desirable to ignore certain types of events so that the CPU is not unnecessarily awakened. However it may be necessary to restore full power to the CPU for other types of events such as interrupt events that can occur because as mentioned above other components may be active.

While certain components are shown as separate blocks in the functionality provided by multiple blocks may be implemented within a single component. For example the flow controller may be implemented as part of the interrupt handler or the PMIF . Additionally the functionality provided by a particular block may be distributed across multiple blocks. For example the state machine may be implemented across both the interrupt handler and the power management interface .

The flow controller can be used to control the clocks for the various components such as the CPU the GPU the non power gated functions and the AVP . In general the flow controller includes a programmable engine that allows clocks to be selectively turned on and off thus helping to reduce power consumption.

In one embodiment of the invention the PMIF of is implemented as part of the always on module . The PMIF signals the PMU to adjust the power levels provided to the various components of the SOC including the CPU . When conditions dictate the PMIF can signal the PMU to decrease power to the CPU e.g. shut it down . As will be seen the PMIF can also signal the PMU to increase power restore full power to the CPU in response to the occurrence of an event designated as a wakeup type of event. When power is being restored to the CPU the clock reset module holds the CPU in a reset condition until the power to the CPU is stable at which point the reset can be removed restore code can be executed and previously stored context information can be restored to the CPU.

In one embodiment according to the invention the transition of the CPU to a reduced power state is accomplished in hardware using the state machine . Because it accomplishes the transition in hardware the state machine does not need to rely on the CPU . Accordingly once a decision is made to place the CPU into the reduced power state there is no need to delay implementation of that decision. By accomplishing the transition in hardware instead of in software a race between removing power to the CPU and stopping the CPU clock is avoided. When software controls the CPU power down procedure if the CPU power reaches a critical threshold before the clock is completely stopped then the CPU may behave unpredictably with unpredictable results. The hardware state machine assures that power down occurs in an orderly fashion.

Furthermore if the transition was accomplished using software instead of in hardware it would be necessary to delay reducing power to the CPU by a prescribed amount of time in order to give the CPU enough time to execute the software required for power down. By accomplishing the transition automatically in hardware independent of the functionality of the CPU power can be removed from the CPU earlier than it would have been if the transition was handled using software.

According to embodiments of the invention while at full power the CPU prepares to enter a reduced power state by specifying a set of conditions presets that will go into effect when the CPU enters the reduced power state and that will remain in effect while the CPU is at reduced power. After the CPU enters the reduced power state the presets are executed in hardware as described below. As such the presets can be executed without any further involvement on the part of the CPU meaning that they can be performed even with the CPU completely inactive e.g. shut down .

In one embodiment according to the invention certain interrupt events are designated as wakeup events. The set of wakeup events can be specified using writes to registers that reside in for example the PMIF . For example an interrupt mask can be specified in which certain inputs to the SOC are designated as wakeup events. In other words the presence of a signal on a particular input output pin of the SOC can be used to indicate that an event designated as a wakeup event has occurred. The types of events that may be designated as wakeup events include but are not limited to signals e.g. interrupts from sources such as peripheral devices e.g. a timer removable storage slot a real time clock a Universal Serial Bus USB port e.g. a cable is inserted a keyboard e.g. a key is pressed a touch panel e.g. the screen is touched a power button e.g. a built in camera is turned on and a built in cell phone interface e.g. there is an incoming call . Other types of events in addition to interrupt events can be designated as wakeup events.

In one embodiment according to the invention once the process of designating interrupt events as wakeup events is complete the CPU writes an enable bit to the register as one of its last acts and perhaps as its last act before entering the reduced power state. Effectively the CPU can enter the reduced power state immediately after the enable bit is set no other actions need be completed before power to the CPU is reduced. The CPU continues to function in its normal fashion up to the point at which the enable bit is set. After the enable bit is set the CPU is powered down and the predefined conditions are activated. The predefined conditions remain active until the enable bit is de asserted e.g. when full power is restored to the CPU .

If an event designated as a wakeup event occurs while the CPU is in a reduced power state then a signal is directed to the wakeup event handler e.g. the PMIF . In response to the signal the wakeup event handler signals the PMU to restore full power to the CPU so that the event can be subsequently serviced.

Additional information is provided in conjunction with which is a timeline illustrating a sequence of events for reducing and restoring power to the CPU according to one embodiment of the present invention. is described with reference to the elements of .

In region A of from time T to time T the CPU is active and operating at its normal and full power level designated as power state P in the figure and the aforementioned enable bit is not asserted. At some point in time between times T and T the device s operating system determines that the CPU can be placed in a reduced power state. Systems methods for making such a determination are known in the art.

At time T the CPU will be placed into a reduced power state. At a point in time prior to time T the CPU preprograms a set of actions presets that can be atomically executed in hardware after the CPU is placed in the reduced power state. In particular a set of interrupt events are designated to serve as wakeup events as mentioned above. The interrupt events so designated can be identified in software executed by the CPU before power to the CPU is reduced. Information identifying the designated events can be written to registers. That is an interrupt mask can be set up to define sources of interrupts that will be allowed to awaken the CPU after the CPU enters the reduced power state.

At time T once the presets are programmed the CPU writes an enable bit to the register just before entering the reduced power state. The CPU can also save back up its context information e.g. the state of its internal registers to for example the memory . Otherwise the CPU continues to function in its normal fashion up to the point at which the enable bit is set.

Once the enable bit is set the presets are activated and the PMIF specifically the state machine and the flow controller can be signaled to initiate a hardware implemented power down of the CPU . Alternatively after it is signaled the PMIF can send a signal to the flow controller . As noted above in one embodiment of the invention the reduction in power is accomplished in hardware via the state machine .

If a race condition occurs in which an event occurs while the CPU is transitioning to the reduced power state or if an event occurs at the same time the enable bit is set then power is immediately restored to the CPU so that it can handle the event.

The presets remain active between time T and time T region B of . In region B the CPU is in the reduced power state designated as power state P in and the enable bit is asserted.

While operating in region B if an event designated as a wakeup event occurs then the event is diverted to the PMIF . More specifically the PMIF and the flow controller can be signaled in response to an event designated as a wakeup event. Alternatively after it is signaled the PMIF can send a signal to the flow controller . In response to the event signal the enable bit is de asserted and the PMIF signals the PMU to restore full power to the CPU so that the event can be subsequently serviced. In an embodiment of the invention the interrupt handler also latches the interrupt signal so that it can subsequently service the event after full power is restored to the CPU .

After time T in region C power has been restored to the CPU and the enable bit has been de asserted. Accordingly any subsequent interrupt events will be routed to the interrupt handler but not necessarily to the PMIF . The CPU can continue to operate at full power until another determination is made that the CPU can be placed in a reduced power state in which case the process just described is repeated.

In block of a determination is made that a processor specifically the CPU of can be placed in a reduced power state. The determination may be made for example by the electronic device s operating system.

In block of presets are specified. More specifically actions presets that are to go into effect after the CPU is powered down are specified before the CPU is powered down. In one embodiment of the invention interrupt events are designated as wakeup events.

In block in one embodiment of the invention an enable bit is set to indicate that the CPU is ready to enter the reduced power state. The CPU sets the enable bit as one of its last actions and perhaps as its last action before entering the reduced power state. In effect the CPU can enter the reduced power state immediately after the enable bit is set. Also the CPU may back up its internal registers before entering the reduced power state.

By setting the enable bit the presets are activated and the CPU can then enter the reduced power state power to the CPU may be reduced or the CPU may be shut down completely with no power consumption . The presets will remain in effect as long as the enable bit is set correspondingly as long as the CPU remains in the reduced power state .

In block while the CPU is in the reduced power state an event is experienced. In block if the event has been designated as a wakeup event then a signal is directed to a wakeup event handler e.g. the PMIF of instead of to the interrupt handler . However the signal may be latched by the interrupt handler for subsequent handling after power is restored to the CPU .

In block of the wakeup event handler signals the PMU to restore power to the CPU . In block after power is restored to the CPU the CPU can service the event.

Thus according to embodiments of the present invention the CPU can be placed in a reduced power state e.g. powered down completely . However power can be restored to the CPU so that it can respond to events such as interrupt events that may occur while the CPU is in the reduced power state. More specifically before the CPU enters the reduced power state it designates interrupt events and perhaps other types of events as wakeup events that will cause power to be restored to the CPU should such an event occur while the CPU is in the reduced power state. Accordingly hardware e.g. the PMIF of can respond to a designated event by awakening the CPU so that the event can be serviced.

Because the CPU can be placed in a reduced power state power consumption can be reduced prolonging battery life between charges. However the CPU remains capable of servicing events that may occur while it is in the reduced power state. It may be possible to employ a mechanism other than what is described above to respond to events like interrupt events while the CPU is at reduced power. However embodiments according to the invention allow such events to be handled without unnecessarily increasing the complexity of the response. In other words because the CPU can still service events after it awakens implementation of the present invention is transparent to peripheral processes and components. More specifically up to the point at which the CPU is powered down and after the point at which power is restored to the CPU the response to an event is not significantly perturbed by the power conservation techniques described herein.

The foregoing descriptions of specific embodiments of the present invention have been presented for purposes of illustration and description. They are not intended to be exhaustive or to limit the invention to the precise forms disclosed and many modifications and variations are possible in light of the above teaching. The embodiments were chosen and described in order to best explain the principles of the invention and its practical application to thereby enable others skilled in the art to best utilize the invention and various embodiments with various modifications as are suited to the particular use contemplated. It is intended that the scope of the invention be defined by the claims appended hereto and their equivalents.

