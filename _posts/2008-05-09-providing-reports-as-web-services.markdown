---

title: Providing reports as web services
abstract: A report web service system comprises a web service interface, a report service manager, and a Web Services Description Language (WSDL) generator. The web service interface receives from a Client Application a request for a web service definition for a report as a web service, and transports to the client application the requested web service definition. The report service manager converts definitions of one or more objects in a report definition in a report store that corresponds to the requested report into web service definitions, and generates an object model based on the web service definitions to reflect a structure of the objects of the report. The WSDL generator generates a WSDL definition for the web service based on the object model. When a report as defined in the WSDL definition is rendered, a selector selects relevant objects from a generalized model of the rendered results based on information in the WSDL definition, and a representation formatter formats representation of the relevant objects.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08171451&OS=08171451&RS=08171451
owner: International Business Machines Corporation
number: 08171451
owner_city: Armonk
owner_country: US
publication_date: 20080509
---
There exist reporting tools that generate reports from underlying data sources. Typically these reporting tools have mechanisms to render the report result in visually accessible formats such as HTML and PDF . To access the report results programmatically these reporting tools have mechanisms to obtain the results of rendering of a report in the form of a homogenous set of rows with many columns in some format e.g. Comma Separated Values or XML. Those rows need to be parsed to understand the context and meaning of each individual cell in the unstructured table of data. Each column has specific meaning and is position dependent. Important information about the data like group breaks often needs to be detected by parsing the data and maintaining state information from row to row.

Such parsing needs extensive programming and is prone to errors. It is also fragile and can easily be broken for example by common report maintenance activities such as adding new data columns to the report.

As well these programmatically accessible tabular data formats only capture the raw data values and do not capturing the presentation properties e.g. layout and formatting of the report that represent a large part of the Business Intelligence report rendering application s value.

Conversely formats such as HTML and PDF are commonly generated from these reporting tools formats of which do capture this presentation information. However these formats are not structured in a format which allows the output to be used in other contexts programmatically without the previously mentioned complexity and fragility .

It is therefore desirable to provide a mechanism that can provide programmatic access to report results with presentation properties without requiring such complex parsing.

The invention uses a mechanism that dynamically generates an object model of a report that reflects layout information of the report as authored.

In accordance with an aspect of the present invention there is provided a report web service system comprising a web service interface a report service manager and a Web Services Description Language WSDL generator. The web service interface is provided for receiving from a client application a request for a web service definition for a report as a web service and transporting to the client application the requested web service definition. The report service manager is provided for converting definitions of one or more objects in a report in a report store that corresponds to the requested report into web service definitions and generating an object model based on the web service definitions to reflect a structure of the objects of the report. The WSDL generator is provided for generating a WSDL definition for the web service based on the object model and providing the WSDL definition to the web service interface for transporting it to the client application.

In accordance with to another aspect of the invention the web service interface receives from the client application a request for rendering a selected report as defined by a WSDL definition of the selected report and transports a report content of the selected report to the client application. The report service manager requests rendering of the selected report receives rendered results and generates a generalized model of the rendered results. The report web service system further comprises a selector and a representation formatter. The selector is provided for selecting relevant objects from the generalized model based on information in the WSDL definition. The representation formatter is provided for formatting representation of the relevant objects and for providing a formatted objects to the web service interface to return to the client application as the requested report content of the selected report.

In accordance with to another aspect of the invention there is provided a method of managing report web services. The method comprises the steps of receiving from a client application a request for a web service definition for a report as a web service converting definitions of one or more objects in a report definition in a report store that corresponds to the requested report into web service definitions generating an object model based on the web service definition to reflect a structure of the objects of the report generating a WSDL definition for the web service based on the object model and transporting the WSDL definition to the client application.

In accordance with to another aspect of the invention the method further comprises the steps of receiving from the client application a request for rendering a selected report as defined by the WSDL definition requesting rendering of the selected report receiving rendered results generates a generalized model of the rendered results selecting relevant objects from the generalized model based on information in the WSDL definition formatting representation of the relevant objects and transporting the formatted objects to the client application as the requested report content of the selected report.

In accordance with to another aspect of the invention there is provided a computer readable medium storing instructions or statements for use in the execution in a computer of a method of managing report web services. The method comprises the steps of receiving from a client application a request for a web service definition for a report as a web service converting definitions of one or more objects in a report in a report store that corresponds to the requested report into web service definitions generating an object model based on the web service definitions to reflect a structure of the objects of the report generating a WSDL definition for the web service based on the object model and transporting the WSDL definition to the client application. The method may further comprise the steps of receiving from the client application a request for rendering a selected report as defined by the WSDL definition requesting rendering of the selected report receiving rendered results generates a generalized model of the rendered results selecting relevant objects from the generalized model based on information in the WSDL definition formatting representation of the relevant objects and transporting the formatted objects to the client application as the requested report content of the selected report.

Web services use a standardized way of communication between web based applications over an Internet protocol backbone. Thus the report web service system facilitates easy programmatic access to the reports by web service consumers from any programming environment.

In this embodiment the report web service system has a web service interface a report service manager a Web Services Description Language WSDL generator a selector and a presentation formatter .

There are two phases in which the report web service system is used. In the first phase an application developer develops his her own client application in a software development environment based on the reports provided as web services by the report web service system . In the second phase a user runs the developed client application which makes web service operation requests as defined in the WSDL on the web services provided by the report web service system .

The web service interface receives from a software development environment a request for a web service description for a report web service. The web service interface can handle requests in multiple standard protocols for a web service. The web service interface extracts the request information from the protocol specific format and maps it into a protocol independent format. The web service interface passes the protocol independent formatted request to the report service manger .

The report service manager obtains from the report store definitions of one or more objects of a requested report and converts them into web service definitions. The report service manager generates an object model that represents a common schema of the objects based on the web service definitions of the objects. The generated object model reflects the layout of the objects in the report as the report author created and other information e.g. authored report object names parameters queries and drill paths as further described below.

The WSDL generator generates a WSDL description or definition based on the object model and provides the WSDL description to the web service interface . The WSDL description describes the operations that the web service supports and the structured response types of these operations which are generated based on the generated object model.

The web service interface receives the WSDL description from the WSDL generator and transports it to the software development environment as a response to the request in the same protocol in which the request was received.

Thus the report web service system can automatically create a unique report web service definition for each report based on the report definition including the report specification as authored by the report author.

The web service interface receives from the client application a request to run a selected report. The web service interface can handle requests in multiple standard protocols for web services such as Simple Object Access Protocol SOAP REST HTTP XML JSON etc. The web service interface extracts the request information from the protocol specific format and maps it into a protocol independent format. The web service interface passes the protocol independent formatted request to the report service manger

The report service manager determines a relevant report server based on the received request and which report authoring tool was used for the requested report and requests to the report server to render the selected report to obtain format layout and desired data from the underlying data source or sources . The report service manager receives the report render results including the desired data from the report server in a format specific to the relevant report server and converts them into common generalized structured model of a report artifact. The generalized model of a particular report is same as the object model generated for the particular report during the client application developing phase described above.

The selector receives the generalized model of the report results from the report service manager and selection filter specifications from the protocol independent formatted request. The selector selects just the relevant objects based on the selection filter in the generalized model of the report results to form a filtered selection of the results.

The representation formatter receives the filtered generalized model of the report results from the selector and formats the presentation of objects in the model based on the requested format from the protocol independent formatted request.

The web service interface receives the formatted model of the report results from the representation formatter and transports it to the client application as a response to the request in the same protocol in which the request was received.

Thus data that appears in the resultant report output is presented to the report consumer through the client application being laid out in a manner that it is easy for the report consumer to understand. For example in visual layouts of a report output aggregate values appear in group footers or list footers. These visual aids help a report consumer navigate the data and easily understand the semantics or meaning of the data based on where it appears.

Similarly the report service manager also builds some semantics of the data into the object model so that it structures the report web service to capture this layout structure to make it easy to reference exactly the data that the programmer requires. For example a list object has row objects which have child elements based on the column titles that name the data in the row. Another example is that list group objects have footer elements that match any group level footers that are defined for the list object. The report service manager builds the semantics at report execution request time. The semantic information is contained in the report definition and the rendered result format received from the report servers . The report service manager has a mapping per report authoring tool report server of combining these two information sources to provide the normalized structured generic model of the report results.

In order to support client application development with web services in a format best suited for any particular development environment application needs in an embodiment shown in the web service interface has a SOAP handler for handling SOAP requests and transferring data and a Representational State Transfer REST handler . Thus the report web service system can support both REST and SOAP messages that are compliant with the web service standards. Using these standards facilitates handling of the specific issues of popular vendor toolkits.

As shown in the selector has various selection filters e.g. a no filter an object ID filter a context selector and or a XPath XQuery handler . The object ID filter filters objects in the generalized model based on the value of the object ID report objects. Similarly the context selector selects the context based on the data context of a report object such as a crosstab cell where the row header is country Canada and the column header is year 2004 . The XPath XQuery handler handles XML Path Language XPath or XQuery selection criteria. XPath is a language for selecting nodes from an XML document. XQuery is a query language that is designed to query collections of XML data and includes XPath expressions .

By using these elements the selector can efficiently address name identify and select parts of the report based on selection mechanisms including object name Xpath Xquery cell query definition context and the like. Thus the report web service system can provide web service access not only to the entire report but also parts of the report.

As shown in the representation formatter may have multiple representation handlers e.g. an XML handler an HTML handler an HTML fragment handler an image handler and or a print friendly format handler . These handlers handle representations of the selected report in the respective format i.e. XML HTML HTML fragments images and PDF. The image handler may handle various image formatting e.g. PNG JPEG and GIF. The print friendly format handler may handle various print friendly formatting e.g. PDF and XML FO.

By using such representation formatter the report web service system can provide alternative representations of the requested report report part though an efficient translation mechanism .

During the client application developing phase Phase the software development environment requests a WSDL definition for a selected report to the report web service system . The report web service system requests layout information of the selected report to the report server . The report server returns the report definition XML of the selected report to the report web service system . The report web service system generates a WSDL definition and sends it to the client application .

During the client application execution phase Phase the client application developed in Phase issues a request for report content for a report as defined in the WSDL definition and sends it to the report web service system . The report web service system requests to run the report to the report server . The report server returns the rendered report output to the report web service system . The report web service system generates a SOAP response for the report content as defined in the WSDL and transports it to the client application .

Referring now to the report service manager is further described. In this embodiment the report service manager has a plurality of providers a provider execution engine renderer a report definition converter an object model generator a report rendering handler and a generalized model generator .

Each provider is associated with a report authoring tool and respective report server and provides functions to communicate with the associated report server. The provider execution engine controls execution of each provider. The report definition converter converts the definitions of the objects in the report which can have different formats for each provider into a common generic report representation not representing any provider report definition specifically. The object model generator generates an object model based on the generic report representation definition of the objects. During the client application execution phase the report rendering handler requests rendering of the report by the corresponding report server through its associated provider and receives rendered results including objects. The generalized model generator generates a generalized model based on the objects of the rendered results.

The report definition converter parses the report definitions into a common representation of the report definition. This is accomplished by having a mapping for each provider s report definition format from the elements and containment hierarchy defined in the report definition to a best representation of these elements in the common representation format. The object model generator uses this common representation to build an object model of the report s structure. The WSDL generator builds a WSDL description of the web service that is created for this report from the object model. This is done by defining web service operations for each named report element object in the model to support requests for specific parts of the report as well as an operation for requesting the entire report. Information identifying the selector and which object to select is encoded into the web service operation definition. During the client application execution phase calls to the report part operations use this information to identify the selector to use and identify the report object selected. The WSDL generator also defines the request and response XML type definitions for each operation. This is done by mapping the objects and the object hierarchy in the object model into XML types using XML Schema Definition XSD language.

The report service manager allows objects from the report to be referenced in whole e.g. entire charts lists or in part e.g. group headers and footers specific text boxes specific cell values .

The report service manager structures the object model based on the objects that the report author has created making it very easy to reference the object or cells within it. The object model also reflects the physical appearance or layout of objects for example a list object that are formatted to make it easy to visually understand the data e.g. group footers containing aggregate values . This also makes it very easy to reference specific data in the report. The report web service typically represents all of the objects in the report. All attributes and available actions of the report objects formatting information unformatted cell values data type data source references drill target information etc. are included as attributes of the represented objects.

This allows business logic e.g. process workflows to be defined which act upon the content of reports allowing reports to truly become a single version of the truth i.e. the business logic is acting on the exact same reports that people are looking at visually in the reporting portal .

The object model generated by the report service manager significantly reduces the fragility of client apps consuming a report output in the face of changes to the report objects and the contents of the query. Thus the report web service system makes it possible to use simple programming constructs and very intuitive code to reference and use all of or parts of a report.

The generalized model of a reporting artifact captures all the reporting application details not just the query data of the artifact including layout information style information colors fonts borders etc. drill behaviors etc. This information is structured in a manner to facilitate navigating and understanding the context of the parts of the report e.g. a list cell .

Define a generalized object model of a reporting object or artifact and provide a normalizing role to know how to get artifacts from different underlying applications and how to transform the artifacts into the generalized model. This has the advantage of simplifying the job of the consumer from having to understand code to different underlying applications.

Thus the report web service system is capable of automatically creating a unique web service based on the report specification for various reports. The structure of the report web service given by the report web service system provides for the simple programmatic reference to entire objects or pieces of objects e.g. individual cells in a list or indexing the columns in a crosstab. The report web service system generates a web service with the structure that provides an object model based on the objects that the report author has created in the report which allows a person viewing the report to see the structure visually. The report web service can follow the nesting structure of the report which results in intuitive easy to read client code.

Also as the report web service system programmatically represents all the attributes and behavior of a report in a client agnostic format it makes it easy to do alternate renderings of reports with high fidelity to the native reporting applications look and feel and behaviors into new client environments e.g. Mobile devices Rich Interactive Application environments desktop widget environments mashup and composite application environments etc. . These objects are the effective mechanism for programmatically using the report results. Some example usages include rendering the report in alternate formats to view on a small screen device or in other applications like Excel or to find a specific cell value to be used in the conditional flow of control in a business process engine .

The report web service system provide report web services in two modes. The first mode is a report specific web service mode in which the report service manager generates a report specific object model for each report authored by a report author as described for the report web service system .

The second mode is a generic report web service mode in which the report service manager uses the generic report and generates a generic or static object model that is generic enough to be applicable to all reports. Thus the report web service system provides a generic web service.

The static nature of the generic service is that it is the same object model for any reports created by various report authoring tools. The generic object model represents a normalized view of a report document. An example of such a generic object model is shown in . In this example the report is made up of a collection of pages each page with a body footer and header containing collections of report elements each report element may be a choice of the different report element types e.g. a text frame chart list crosstab or image .

This generic report web service is useful for alternate rendering of a report e.g. rendering a report for a mobile device and suitable to use with reporting tools that want to generically be able to consume any reports. Also this generic report web service is suitable for building general extension to the functions of an existing report authoring tool e.g. where the client application report tool does not know about the structure of specific reports and want to work generically for all reports.

Thus the report web service system provides two distinct Report Web Service object models. One object model that gives priority to replicating the object structure of the report specification and yields a service that is more applicable for client applications that provide alternate renderings of the report. Another object model that simplifies the report structure and gives priority to a simplified object structure that simplifies finding or referencing the report objects and data that is important to the Report Web Service client.

Because of the dynamic implicit nature of the per report web services and their number it is preferable that the report web service system provides an ability to navigate the collection of web services made available by the report web service system . Moreover to allow a developer to logically be able to find services based on the reporting portal folder organization they are already familiar with a portal folder view mapping handler is provided as exemplified in .

The portal folder view mapping handler models an organization of the per report web services in a dynamically generated mapping of the portal folder view to a web service discovery mechanism e.g. WS inspection DISCO and ATOM and allows discovery of these web services. Each folder either contains more folders or leaf node reporting artifacts. For example the portal folder view mapping handler may use the WS inspection XML dynamically created which generates a web service reference for all leaf node report artifacts and generates a reference to another recursive WS inspection resource for the contained folder. Thus a web service consumer can inspect a top level root entry which is dynamically generated discover document for a given server and be able to recursively navigate down to the web service of the reporting artifact of interest.

As an example for the Cognos Connection folder the report web service system may provide a portal folder view as shown in . The report web service system may dynamically generate a WS inspection XML as shown in .

The report web service system of the present invention may be implemented by any hardware software or a combination of hardware and software having the above described functions. The software code instructions and or statements either in its entirety or a part thereof may be stored in a computer readable memory. Further a computer data signal representing the software code instructions and or statements may be embedded in a carrier wave may be transmitted via a communication network. Such a computer readable memory and a computer data signal and or its carrier are also within the scope of the present invention as well as the hardware software and the combination thereof.

While particular embodiments of the present invention have been shown and described changes and modifications may be made to such embodiments without departing from the scope of the invention. For example the elements of the report web service system are described separately however two or more elements may be provided as a single element or one or more elements may be shared with other components in one or more computer systems.

