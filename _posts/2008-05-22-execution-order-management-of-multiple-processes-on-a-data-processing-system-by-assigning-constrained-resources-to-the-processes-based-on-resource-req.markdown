---

title: Execution order management of multiple processes on a data processing system by assigning constrained resources to the processes based on resource requirements and business impacts
abstract: Techniques are presented for managing execution of processes on a data processing system The data processing system comprises process instances that are each an execution of a corresponding process. Each process instance comprises activity instances. Business impacts are determined for the process instances, the activity instances, or both. Order of execution of the activity instances is managed by allocating resources to activity instances in order to achieve an objective defined in terms of the business impacts. In another embodiment, requests are received for the execution of the processes. For a given request, one or more of the operations of assigning, updating, aggregating, and weighting of first business impacts associated with the given request are performed to create second business impacts associated with the given request. Additionally, requests can be modified. Modification can include changing the process requested or process input as deemed appropriate, combining related requests into a single request, or both. Unmodified requests and any modified requests are managed.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08745628&OS=08745628&RS=08745628
owner: International Business Machines Corporation
number: 08745628
owner_city: Armonk
owner_country: US
publication_date: 20080522
---
This application is a continuation of U.S. patent application Ser. No. 10 967 779 filed Oct. 18 2004 now abandoned incorporated by reference herein

The present invention relates generally to the field of Workflow Management Systems WFMSs and relates in particular to controlling the order of activity execution in a WFMS based upon resource requirements and impact to the business.

A workflow process called a process herein is a directed acyclic graph of activities to be performed In general an activity is a unit of work to be performed by for instance a human or a software agent a block of activities which can be repeated until some condition is reached or another process. Between activities are links possibly conditional which are evaluated at runtime to determine an execution path. Data can also be passed between activities or made globally available to all activities.

Because a process is a graph of activities to be conditionally performed a process is considered to be a model i.e. a template for the execution of the activities. An execution of a process is referred to as a process instance. The representation of an activity within a process is performed by an activity instance. If and in what order the activity instances within a process instance are readied for execution is determined by the links between activity instances in the process model. An activity instance which is ready to be executed can be queued in one or more work lists each of which is associated with a human or software agent which can perform the activity and is commonly referred to as a work item. In the scheduling domain a job is equivalent to a process instance and a task is equivalent to an activity instance or a work item.

A Workflow Management System WFMS enables the modeling and execution of processes. A WFMS facilitates codification automation composition and lifecycle management of business system support BSS and operations system support OSS processes. IBM WebSphere MQ Workflow is an example of a WFMS. Workflow management is also emerging as an important application execution management technology particularly in the area of grid and utility computing where planned application execution sequences are essentially managed and composed as automated workflows. The ability to manage the execution of processes is valuable across the many domains where workflow is employed. Some examples of processes which can benefit from process execution management are semi automated loan approval workflows Information Technology IT operations management workflows e.g. provisioning of servers and software application job execution workflows.

Illustratively consider a business which offers its customers a number of services with guaranteed levels of service level and associated refund and rewards. For example the business may offer a storage service with a service level guarantee that over the course of a month 97 percent of customer requests for additional storage will be provisioned within two hours. If the business fails to meet this commitment a penalty which is a percentage of the monthly service fee will be refunded to the customer. The penalty could be defined as a step function which increases as the percentage of customer requests completed within the threshold of two hours decreases. The business offers several different classes of storage e.g. economy fast and super fast with different service level guarantees e.g. in terms of target percentage and threshold time at appropriate prices with different refunds and rewards. The refunds and rewards which the business offers to its customer represent an actual financial impact to the business as well as an objective measure of value to the customer.

The business has an obligation to meet its commitments and needs to do so in a cost effective and efficient manner if it is to remain viable and competitive. Therefore when the business executes its processes e.g. responding to customer requests for additional storage the business needs to manage its resources e.g. people and computing servers in a manner consistent with the business commitments e.g. service quality defined as service levels and cost and efficiency objectives of the business e.g. to minimize penalties . Current WFMSs ready activity instances for execution based on conditions and navigation defined by the processes but no explicit consideration is given to objectives or commitments of businesses.

What is needed then are techniques for enabling an organization to manage process execution in a manner which meets its commitments while also meeting its cost and efficiency objectives.

The present invention provides techniques for managing the execution of processes. Using the present invention allows an organization to meet its commitments while also meeting its cost and efficiency objectives.

In an exemplary aspect of the invention techniques are presented for managing execution of processes on a data processing system. The data processing system comprises one or more process instances that are each an execution of a corresponding process. Each process instance comprises one or more activity instances. In this exemplary aspect one or more business impacts are determined for the one or more process instances the one or more activity instances or both the one or more process instances and the one or more activity instances. The order of execution of the activity instances is managed by allocating resources to activity instances in order to achieve an objective defined in terms of the one or more business impacts.

In another exemplary aspect of the invention techniques are presented for managing requests for execution of one or more processes on a data processing system. One or more requests are received for the execution of the one or more processes. For at least a given one of the one or more requests one or more of the operations of assigning updating aggregating and weighting of one or more first business impacts associated with the given request are performed to create one or more second business impacts associated with the given request. The given request is for execution of a given process. A given request is modified to create a modified request. The modified request is for execution of the given process or another process. Unmodified requests and any modified requests are managed in order to execute processes corresponding to the unmodified and modified requests.

A more complete understanding of the present invention as well as further features and advantages of the present invention will be obtained by reference to the following detailed description and drawings.

In conventional Workflow Management Systems WFMSs a single resource generally a person or a software agent is required to perform an activity instance. The WFMS may assign an activity instance to any number of resources which can perform the activity. Eventually one resource will execute the activity instance using implementation code associated with the activity. At any point in time a resource may have multiple activity instances which are deemed ready to execute assigned to the resource. Which of the ready activity instances and in which order the resource executes these activity instances is generally not dictated by conventional WFMSs. The order is rather left to human intuition or experience a static priority scheme or first come first served queuing. Also if any additional resources e.g. a software license are required for execution of an activity instance it is the responsibility of the activity implementation code and not the responsibility of the WFMS to discover reserve and obtain those resources.

The present invention can solve these problems by in an exemplary embodiment managing the order of activity execution by assigning constrained resources required for execution based on an overall objective defined in terms of one or more business impacts. This is accomplished by illustratively integrating one or more WFMSs or equivalents one or more scheduling systems and one or more resource managers using a process execution manager controller and one or more business impact integrators. Additionally requirements for multiple resources per activity instance can be managed. The scheduling system determines when an activity instance requiring constrained resources and deemed ready to execute by the WFMS should start and which resources will be assigned to the activity instance. This managing action of starting a task is made in an exemplary embodiment in a just in time manner so that the scheduling system can accommodate dynamic changes in the system e.g. newly arriving jobs or changes in business impact for an existing process instance . As a result a resource e.g. a human or software agent typically has only one assignment at a given time i.e. only one work item in its work list .

A business impact is associated with the execution of a process instance or activity instance or both. A business impact is a measure of relative importance e.g. defined through a value that timely execution of an instance e.g. process or activity instance will have on the organization. For example a business may want to execute its processes in a manner which minimizes penalties associated with failure to meet a guaranteed level of service. Thus the business impact could be the values e.g. defined as a step function for penalties associated with not meeting guaranteed levels of service. The overall objective in this scenario is to minimize penalties. The business impact can also include an objective function or pointer to an objective function which could be used by the scheduling system controller when the scheduling system performs an objective optimization.

A business impact can be pre defined or obtained dynamically at runtime. The business impact can be but is not limited to one or more of a simple priority a utility function or a cost function over time. Additionally the business impact can be modified over the duration of the process instance activity instance or both process and activity instances.

In certain embodiments of the present invention a resource is an entity such as a person a software agent hardware or a software license required for an activity to be performed. In general exemplary embodiments of present invention enable an organization to ensure that jobs with a high business impact and a tight deadline will be allocated resources in preference to those jobs with a lower business impact a more flexible deadline or both a lower business impact and a more flexible deadline.

Certain embodiments of the present invention are able to address process models ranging from simple task lists to complex task graphs. Illustratively a process can be fully automated or be partially automated i.e. contain manual tasks performed by humans . Embodiments of the present invention can also be applied to processes which cross organization boundaries that is processes which contain activities which are performed by another organization. The extent to which one can manage resources outside of an organization will depend on the ability to monitor those resources the extent of control allowed by the owning organization or both.

For sake of clarity it is assumed that the term instance relates to a process instance or an activity instance. It is also assumed that a business is any entity using a WFMS or equivalent and the terms organization and business are interchangeable.

Exemplary embodiments of the present invention enable an organization through a data processing system having a process execution manager to perform one or more of the following 

 1 associate business impact with instances where the business impact can be modified throughout the duration of the instances 

 3 manage the order of execution of instances based on the assignment of constrained resources to instances using one or more of the following although typically all would be used which could reside on different data processing systems A one or more WFMSs or systems with comparable functions to define the process models and execute the process instances B one or more scheduling systems to order execution of instances by assigning resources to instances in a manner which achieves an objective defined in terms of the business impacts associated with the instances and C one or more resource managers to provide resource information required by the scheduling system or systems selected 

 5 extend the definitions of key data e.g. business impact resource override and task duration and the functions provided in order to support the requirements of a given environment e.g. the organization and the selected scheduling systems workflow systems and resource managers 

 7 transform if possible a workflow model of a WFMS to one supported by one or more selected scheduling systems 

 8 assign default business impacts including objective functions as needed and weight business impacts as required by the organization 

 9 combine individual related requests with associated business impacts into a single request with an aggregated business impact and

 10 modify e.g. alter or combine requests for process execution the modification performed for cost and efficiency purposes the cost and efficiency determined by one or more criteria set by the organization.

An exemplary embodiment of the present invention describes a method for managing the execution of process instances in one or more existing WFMSs or systems with comparable functionality. Those skilled in the art will recognize that much of the functionality of this invention could also be incorporated into the design of future WFMSs.

According to various exemplary embodiments of the present invention and as previously described techniques are provided to manage requests for process execution and to order the execution of activity instances in the process instances in one or more WFMSs. An exemplary goal of the present invention is to achieve some objective defined by the organization in terms of the business impacts associated with the execution of instances. For example an organization can associate a penalty function with the completion of each process instance and use a scheduling system which would assign resources such that the overall penalty incurred is minimized.

Design elements of an exemplary framework which can be used to implement an illustrative embodiment of the present invention can include one or more of the following 

 1 the framework should support multiple and arbitrary WFMSs provided the WFMSs offer the ability to monitor progress at the activity instance level and control the start of an activity instance 

 5 the framework should to the extent possible support transformation of a workflow model to one supported by a particular scheduling system 

 6 the framework should provide core functionality generally supported by WFMSs and extensible functionality for those functions likely to vary by environment 

 7 an assumption may be made that the WFMSs will maintain the current state and history of workflow executions that the resource managers will maintain the availability and required skill information and that the scheduling system maintains no persistent data 

 8 the framework can use a store associated with each business impact integrator for maintaining information about the process requests possible aggregations of requests possible modifications of requests and their associated business impacts and aggregations and

 9 the framework can use a store for maintaining information on business impacts associated with process instances process model information and override information.

With reference now to the figures and in particular with reference to a pictorial representation of a computer system in which the present invention may be implemented is depicted in accordance with an exemplary embodiment of the present invention. A computer system is depicted which includes system unit video display terminal keyboard storage devices which may include floppy drives and other types of permanent and removable storage media and mouse . Additional input devices may be included with computer system such as for example a joystick touchpad touch screen trackball microphone and the like. Computer system can be implemented using any suitable computer. Although the depicted representation shows a computer other embodiments of the present invention may be implemented in other types of data processing systems such as a network computer. Computer system also preferably includes a graphical user interface GUI that may be implemented by means of systems software residing in computer readable media in operation within computer system .

With reference now to a block diagram of a data processing system is shown in which embodiments of present invention may be implemented. Data processing system is an example of a computer system such as computer system in in which code or instructions implementing the processes of the present invention may be located. Data processing system employs a Peripheral Component Interconnect PCI local bus architecture. Although the depicted example employs a PCI bus other bus architectures such as Accelerated Graphics Port AGP and Industry Standard Architecture ISA may be used. Processor and main memory are connected to PCI local bus through PCI bridge . PCI bridge also may include an integrated memory controller and cache memory for processor . Additional connections to PCI local bus may be made through direct component interconnection or through add in boards.

In the depicted example Local Area Network LAN adapter small computer system interface SCSI host bus adapter and expansion bus interface are connected to PCI local bus by direct component connection. In contrast audio adapter graphics adapter and audio video adapter are connected to PCI local bus by add in boards inserted into expansion slots. Expansion bus interface provides a connection for a keyboard and mouse adapter modem and additional memory . SCSI host bus adapter provides a connection for hard disk drive tape drive and CD ROM drive . Typical PCI local bus implementations will support three or four PCT expansion slots or add in connectors.

An operating system not shown runs on processor and is used to coordinate and provide control of various components within data processing system in . The operating system may be a commercially available operating system such as Windows XP which is available from Microsoft Corporation. An object oriented programming system such as Java may run in conjunction with the operating system and provides calls to the operating system from Java programs or applications executing on data processing system . Java is a trademark of Sun Microsystems Inc. Instructions e.g. computer readable code for the operating system the object oriented programming system and applications or programs are located on storage devices such as hard disk drive and may be loaded into main memory for execution by processor .

As is known in the art the methods and apparatus described herein may be distributed as an article of manufacture that itself comprises a computer readable medium having computer readable program code means embodied thereon. For instance the computer readable medium could be disk tape or CD ROM . The computer readable program code means is operable in conjunction with data processing system to catty out all or some of the steps to perform the methods or create the apparatuses discussed herein.

Further those of ordinary skill in the art will appreciate that the hardware in may vary depending on the implementation. Other internal hardware or peripheral devices such as flash read only memory ROM equivalent nonvolatile memory or optical disk drives and the like may be used in addition to or in place of the hardware depicted in . Also the processes of the present invention may be applied to a multiprocessor data processing system.

For example data processing system if optionally configured as a network computer may not include SCSI host bus adapter hard disk drive tape drive and CD ROM . In that case the computer to be properly called a client computer includes some type of network communication interface such as LAN adapter modem or the like. As another example data processing system may be a stand alone system configured to be bootable without relying on some type of network communication interface whether or not data processing system comprises some type of network communication interface. As a further example data processing system may be a personal digital assistant PDA which is configured with non volatile memory such as flash ROM to provide for storing operating system files user generated data or both.

The depicted example in and above described examples are not meant to imply architectural limitations. For example data processing system also may be a notebook computer or hand held computer in addition to taking the form of a PDA. Data processing system also may be a kiosk or a Web appliance. The processes of the present invention are performed by processor using computer implemented instructions which may be located in a memory such as for example main memory memory or in one or more peripheral devices .

An exemplary embodiment of the present invention is represented in the high level block diagram of which depicts a process execution manager . It should be noted that a process execution manager can be implemented on a distributed computer system comprised on many data processing systems. The process execution manager depicts the process execution manager controller interacting with one or more scheduling systems resource managers and WFMSs . also shows that requests for execution of processes can be sent to a business impact integrator which in an exemplary embodiment can 1 assign a default business impact 2 weight the business impact 3 combine related requests and aggregate weight or both their business impacts 4 alter individual or combined requests or 5 perform a combination of 1 4 to improve cost and efficiency of the execution of instances which should improve cost and efficiency for the business. The improvement in cost and efficiency of execution of instances may be determined by one or more criteria set by the organization. In other words the organization itself typically determines how cost and efficiency are defined such as faster response time or lower cost It should be noted that not all requests need have an associated business impact. Nonetheless the capability to combine related requests is useful for those environments where multiple requests for the same process execution are received and should be filtered.

for example several requests to start a server can be satisfied with a single process execution. The business impact integrator should implement one or more procedures e.g. algorithms methods or functions for determining if two requests are related and how they should be combined An organization typically defines the one or more procedures used to combine requests . The capability to alter requests is useful for cost and efficiency purposes e.g. defined by an organization and can include cost or time . For example a request for executing a process may be altered to use another process which will accomplish the same goal more efficiently. The business impact integrator could also combine and alter requests for process execution. For example the business impact integrator may receive multiple requests for additional storage where the multiple requests could be combined into another request with an aggregated business impact where the other request would perform e.g. through execution of a corresponding process all the additions for storage in a more cost effective manner. The cost effectiveness can be determined in any number of ways including execution time of the process. The business impact integrator should have the data and methods implemented to provide this combining function. It should be noted that a given request will have associated with the request a goal.

In an exemplary embodiment of the present invention as depicted in there can be multiple business impact integrators . A process execution request along with an associated business impact can be sent to one of the business impact integrators. Alternatively the process execution request can be sent directly to the process execution manager controller . In addition a request to execute process instances can be sent to the WFMS directly. In this case the associated business impact for the process instance should be sent to or otherwise obtained or determined by the process execution manager controller .

The process execution manager controller is used to allow embodiments of the present invention to manage process execution through resource allocation based on business impacts. The business impact integrator may be used to allow embodiments of the present invention to manage requests fox process execution and their associated business impacts. The process execution manager controller in particular interacts with and provides a framework for the scheduling systems resource managers and the WFMSs to manage process execution. The techniques and data stores for the business impact integrator and the process execution manager controller can be implemented in other entities such as a WFMS .

A role of the scheduling system is to determine which tasks i.e. activity instances of those that have been deemed ready to execute by the WFMS to start in order to use the required constrained resources in a manner which optimizes the objective function defined in terms of business impact of the organization. The process execution manager controller provides the scheduling systems with information on resources e.g. availability cost and capability process model information current process execution status and business impact associated with specific process and activity instances. A conventional scheduling system might assign resources in such a manner as to maximize throughput. By contrast a scheduling system in an exemplary embodiment of the present invention would use its objective optimizer to assign resources in a manner which achieves a business objective defined in terms of business impact e.g. minimize penalty and in a just in time fashion so as to take into account any dynamic changes in the system e.g. a newly arrived job updates to business impact of an existing jobs etc. .

For each resource manager the process execution manager controller interacts with a resource adapter which in turn interacts with a resource manager controller . Similarly for each WFMS the process execution manager controller interacts with a workflow system adapter which in turn interacts with a WFMS controller . The process execution manager controller also creates a monitor for each WFMS for tracking progress of process instances in the WFMS . The Application Programming Interface API methods and are defined for each of the interactions and respectively.

Requests regarding process instances e.g. startProcessInstance in API can be sent to the process execution manager controller directly or through the business impact integrator . As previously described the business impact integrator can be used to add a default business impact or can weight or otherwise modify the business impacts associated with a process instance request. Additionally the business impact integrator can combine related process instance requests into a single request and aggregate weight or both associated business impacts into a single business impact. The business impact integrator can also alter the process requested to a process which is more efficient e.g. cost effective or timely for an organization. The business impact integrator can also combine and alter process instance requests into a single request for execution of another process where the other process is more efficient for the business. The business impact integrator maintains a store of process requests associated business impacts and any combinations and alterations made.

The resource manager note that there may be multiple resource managers is expected to maintain resource information required for scheduling e.g. skills and schedules in a store . The WFMS note that there may be multiple WFMSs is expected to maintain information of processes and process instances in stores and . The process execution manager controller maintains a store for information for configuration a store for process instances and their associated business impacts and a store for processes and scheduling overrides . A scheduling override overrides an assignment for a resource. For example a manager may have a reason for wanting a particular employee to perform an activity for a particular process instance and therefore may choose to override the assignment by the scheduling system of that activity to another employee.

Use cases for a process execution manager controller such as the process execution manager controller in are illustrated in . The actors e.g. humans systems and software agents and their associated tasks are as follows 

 1 System administrator initializes the process execution manager step imports a process template step suspends an activity instance step and resumes an activity instance step .

 2 Activity assignee suspends assignments to himself or herself step and resumes assignments to himself or herself step .

 4 Business impact requester plus a business impact assigner e.g. a business impact integrator associates or updates a business impact with a process instance step queries status of a process instance step creates or starts the execution of a process step and cancels a process instance step .

 5 Process Requestor creates and starts cancels and suspends a process instance step directly in the WFMS .

 6 Scheduling system requests a refresh of all required information step queries about some or all resources step starts a task by assigning resource s to the task e.g. possibly preempting other assignments step and updates information about selected resource s step .

 7 Resource manager refreshes information for some or all resources step and overrides an assignment of resource s by a scheduling system to a task step .

 5 unique mappings between the process instance identifications IDs in the WFMSs and job IDs in the scheduling system jobMap instances of JobIDMap and

 6 unique mappings between the workflow resource IDs in the workflow systems and the resource IDs in the scheduling systems resMap instances of ResIDMap .

A process contains a list of activities activities instances of Activity and a list of links links an instance of Link between activities. Each activity instance contains a duration Duration . An impact Impact can be associated with a process instance or an activity instance. Each ResourceManager resManagers instances of ResourceManager contains a resource adapter adapter an instance of ResAdapter which implements the ResourceManagerAdapter interface and is used by the ProcessExecutionManagerController to interact with the resource manager ResourceManager . Each workflow system manager instance wfSystems instances of WFSystem contains the name of a workflow adapter adapter and instance of WFAdapter which implements the WFSystemAdapter interface and is used by the ProcessExecutionManagerController to interact with the workflow system manager and a monitor monitor an instance of Monitor which is used to monitor progress in the WFMS e.g. .

Each scheduling system manager schedulers instances of SchSystem contains the name of a model transformer modelTransformer an instance of ModelTransformer and a scheduling system adapter adapter an instance of SchAdapter . The ProcessExecutionManagerController interacts with the model transformer e.g. which in turn interacts with the scheduling system adapter e.g. . The SchedulingSystemAdapter class defines a programming interface which should be supported by any scheduling system adapter integrated with the ProcessExecutionManager framework . The WFModelTransformer class defines a programming interface which should be supported by any model transformer integrated with the ProcessExecutionManager framework .

Each scheduling system manager schedulers instances of SchSystem also contains a list of jobs jobs instantiated from Job resources res instantiated from Resource overrides overrides instantiated from Override commonalities commonalities instantiated from Commonality and simultaneities simultaneities instantiated from Simultaneity which the scheduling system manager schedulers instances of SchSystem uses for scheduling purposes Each job may contain a business impact Impact a list of tasks tasks instantiated from Task and a list of links between tasks links instantiated from Link Each task Task contains a duration Duration and optionally a business impact Impact .

The framework also contains a class for a business impact integrator which is used to aggregate related requests for the execution of a process into a single request and to aggregate weight or both associated business impacts for the similar requests into a single business impact e.g. associated then with the single request . The business impact integrator can also be used to assign default business impacts to requests for the execution of a process or to weight requests for some business purpose e.g. to give preference to a certain types of requests or to requests from particular customers . Additionally a business impact integrator can be used to alter request for process execution individual or combined to a request for another process with aggregated business impact for cost and efficiency purposes.

Classes are also specified for a ResourceEvent a WorkflowEvent and a generalized Event . These are used to inform the ProcessExecutionManagerController and SchSystem of events e.g. Event regarding resource changes e.g. ResourceEvent or workflow progress WorkflowEvent .

With reference to the initialization of a module illustratively referred to as the ProcessExecutionManagerController e.g. ProcessExecutionManagerController which will be assumed during the upcoming description is shown in accordance with an exemplary embodiment of the present invention. The method shown in may be illustratively named in pseudocode as PEMC init . When initialized the ProcessExecutionManagerController will read configuration data in the persistent store e.g. configuration store of . This occurs in step . In step the ProcessExecutionManagerController will create a list of scheduling systems e.g. schedulers to be supported including the adapter e.g. adapter and model transformer e.g. modelTransformer to be used for each scheduling system. In step a list of WFMSs e.g. wfSystems is created including the appropriate adapter to be used for each workflow system. In step a list of resource managers e.g. resManagers is created including the adapter to be used for each resource manager. In step an empty list of processes e.g. processes currently being managed is created. A map e.g. jobMap of scheduling system job IDs to workflow system job IDs is created from information in the store e.g. Process Instances Impacts store of . This occurs in step .

In steps a list of resource IDs along with an associated scheduler IDs and workflow resource IDs which are to be managed by each scheduling system is determined from the resource manager e.g. resManagers . Step for each resource manager resManagers i begins a loop that ends in step . In step the list of resource IDs associated scheduler ID and workflow resource ID information is added to the resource map e.g. ResMap maintained by the ProcessExecutionManagerController . In step the pseudocode for determining a list of resources associated with schedulers and workflow resource IDs is res resManagers i .adapter getResources In step the resource IDs are added to resMap along with a matching ID in the WFMS. The resource information is added to each of the appropriate schedulers in steps . Step starts a loop for each scheduler schedulers j that ends in step . In step resources in res which are scheduled by the currently selected scheduler e.g. schedulers are added to schedulers j .res.

Step starts a loop ended in step . For each WFMS e.g. for each wf system wfSystems i in step steps are performed. In step a timestamp is determined for a last event recorded in an audit trail e.g. get end date of recorded audit trail auditDate wfSystem i .adapter.getAuditAsOf in step . In step a list is determined of currently active jobs process instances e.g. get info on running jobs jobs wfSystem i .adapter.getStatus auditDate in step .

In step a map e.g. jobMap is updated as needed where the map is of scheduling system job IDs to workflow system process instance IDs. In step any newly encountered processes are added to the list of processes e.g. processes . Step starts a loop for each job jobs j and this loop ends in step . Step starts a loop for each scheduler schedulers j and this loop ends in step . Thus for each job in steps and each scheduler in steps if the job requires resources managed by the scheduler step written as jobs j uses resources in scheduler i .res in information on the job is added to the scheduler step written as add jobs j to schedulers i .jobs in .

In step a monitor for this WFMS e.g. create a monitor wfSystem i .adapter.mon and progress is monitored in step e.g. Start monitoringwfSystem i .adapter.mon.monitorProgresso . Finally step starts a loop performed for each scheduler schedulers i that ends in step . For each scheduler get a list of overrides from the store e.g. store of for resources and jobs managed by this scheduler step . Additionally the scheduler is initialized with the jobs resources and override information written in pseudocode as the following schedulers i .modelTransformer.init schedulers i .jobs schedulers i .res scheduler i .overrides . Method ends after step .

With reference to a method for importing a process is illustrated in accordance with an exemplary embodiment of the present invention. In pseudocode the method shown in may be illustratively named PEMC.importProcess wfs pID validFrom inputClass . The input parameters specify the WFMS the process ID the valid from date e.g. used to differentiate versions of a process and the name of a class which is used to prepare input for the execution of this process e.g. defined by the process ID . Method is used to import process information required by the ProcessExecutionManagerController as well as metadata required by one or more schedulers into the store for e.g. Processes store of .

The first step step of method is to match the WFMS specified with one of those supported shown as determine wfSystems i for specified workflow system wfs in step of . In step the workflow adapter for this WFMS is invoked to load the basic process information needed by the ProcessExecutionManagerController . This is described as invoke wfSystems i adapter.importProcess pID validFrom to get process details from wfs or elsewhere if necessary in step of . Metadata about the new process is stored in a store e.g. store of in step written as record information about the new process wfs pid validFrom inputClass etc. in permanent store. In step a zero e.g. successful or one e.g. unsuccessful is returned to a requestor if the update was successful or was not successful respectively. Method ends after step .

With reference to a method for suspending a resource is illustrated in accordance with an exemplary embodiment of the present invention. The method shown in may be illustratively named in pseudocode as PEMC.suspendResource wfs wfResID duration flag . The input parameters specify the WFMS the workflow resource ID a duration during which the resource will not be available and a flag indicating how the current assignment if any is to be handled e.g. allow resource to complete the current assignment before beginning suspension re assign the current assignment to another resource or hold this assignment for this resource . The method is intended to allow a human resource to inform the scheduler of an unscheduled period of unavailability.

The first step step in method is to match the WFMS specified with of those supported which is a step of determining a wfsystems i for a specified WFMS wfs. In step the appropriate resource ID is obtained for the specified workflow resource ID e.g. get resID for this wfs and wfResID . Step starts a loop performed for each scheduler schedulers i and the loop ends in step . In step it is determined if this resource is managed by the scheduler shown as resIDscheduler i .res in . If not step No the method continues in step . If so step Yes step is performed and the handleEvent method of a model transformer and adapter is used to send a suspend event for this resource to the scheduler. Pseudocode for informing a scheduler is written as the following in step scheduler s i .modelTransformer handleEvent suspend resID duration flag . In step a zero e.g. successful or one e.g. unsuccessful is returned to a requestor if the suspend resource was successful or was not successful respectively. Method ends after step .

With reference to a method for resuming a resource is illustrated in accordance with an exemplary embodiment of the present invention. The method shown in may be illustratively named as PEMC resumeResource wfs wfResID . The input parameters specify the WFMS and the workflow resource ID. This method is intended to allow a resource to inform the scheduler of his or her availability after an unscheduled period of unavailability.

The first step step is to match the WFMS specified with one that is supported e.g. determining a wfSystems i for a specified workflow system wfs. In step the appropriate resource ID resID is obtained for the specified workflow resource ID wfResID. Step begins a loop performed for each scheduler schedulers i and the loop ends in step . For each scheduler in steps if this resource is managed by the scheduler step written in pseudocode as resID scheduler i .res the handleEvent method of the model transformer and adapter is used to send a resume event for this resource to the scheduler in step . Informing the scheduler in pseudocode is written as the following schedulers i .modelTransformer.handleEvent suspend resID duration flag . In step a zero e.g. successful or one e.g. unsuccessful is returned to a requester if the resume resource was successful or was not successful respectively. Method ends after step .

Turning now to a method for updating impact for a process instance is illustrated in accordance with an exemplary embodiment of the present invention. The method of may be illustratively named PEMC.updateImpact wfs piID impact . The input parameters specify the WFMS the process instance ID and the business impact. Method allows the association of a business impact with a process instance not started by the ProcessExecutionManagerController the update of a business impact for any process instance or both.

The method begins in step when the WFMS ID wfs is matched with one of those supported e.g. determining wfSystems i for specified WFMS wfs. In step a unique job ID jobID assigned to this process instance is determined based on the wfs and reqID. The business impact and job ID are stored in step in a store e.g. store of . Step begins a loop for each scheduler sch i and the loop ends in step . Thus for each scheduler in steps check if this job is being managed by the scheduler in step in pseudocode jobID in schedulers i .jobs If the job is not being managed by the scheduler step No select another scheduler step . If the job is being managed by the scheduler step Yes then update the information e.g. including business impact in the list of scheduler s e.g. schedulers i .jobs for that scheduler in step . In step the updateImpact method of the model transformer is performed to inform that scheduler of the update via the scheduling system adapter shown in pseudocode as schedulers i .modelTransformer updateImpact jobID impact . In step a zero e.g. successful or one e.g. unsuccessful is retuned to a requestor if the update to the business impact was successful or was not successful respectively. Method ends after step .

With reference to a method for starting a process instance is illustrated in accordance with an exemplary embodiment of the present invention. The method shown in may be illustratively named in pseudocode as PEMC.startProcessInstance wfs pID input impact . The input parameters specify the WFMS the process ID the input for the process and a business impact. Method is used to request that the ProcessExecutionManagerController start an instance of a specified process with given input and associate a business impact with that process instance.

The first step step in method is to match the WFMS specified with of those supported which is a step of determining a wfSystems i for a specified WFMS wfs. In step it is determined which class prepares the input for the execution of the process e.g. defined by the pID and the class e.g. prep is loaded if necessary. In step the class is invoked with the specified input to prepare the input for the workflow system execution. In pseudocode this is shown as pi input wfSystems i .adapter prep input .

In step a unique process instance ID piID is created for the process ID pID In step a unique job ID jobID is also created for the process ID. In step information e.g. wfs pID piID jobID input impact is recorded about this process instance in a store such as store of . The next step step is to invoke the startProcessInstance method of the workflow adapter to start the process instance with the prepared input data In pseudocode this is wfSystems i .adapter.startProcessInstance pID pi input piID . Next the store e.g. store in is updated with a status of started for this process instance defined by wfs and piID . The process instance ID is returned to the requester in step if the starting of the process instance was successful. If the starting of the process instance was not successful FAILURE is returned to the requester in step .

With reference to a method for canceling a process instance is illustrated in accordance with an exemplary embodiment of the present invention. The method may be illustratively named in pseudocode as PEMC.cancelProcessInstance wfk piID . The input parameters specify the WFMS and a unique process instance ID. Method is used to request that the ProcessExecutionManagerController cancel the specified process instance e.g. defined by the piID in the specified workflow system e.g. defined by wfs .

The first step step in method is to match the WFMS specified with of those supported WFMSs which is a step of determining a wfsystems i for a specified WFMS wfs. In step a cancelProcessInstance method is used for the workflow adapter for the specified WFMS. In pseudocode this may be written as wfSystems i .adapter.cancelProcessInstance piID . In step a store e.g. store is updated for the specified process instance ID e.g. piID in the specified workflow with a status of cancelled. In step a zero e.g. successful or one e.g. unsuccessful is returned to a requestor if the canceling of the process instance was successful or was not successful respectively. Method ends after step .

Turning now to a method for suspending an activity instance is illustrated in accordance with an exemplary embodiment of the present invention. The method may be illustratively named in pseudocode as PEMC suspendActivityInstance wfs piID actID . The input parameters specify the WFMS a unique process instance ID and an activity ID. Method is used to request that the ProcessExecutionManagerController suspend the specified activity instance e.g. defined by the piID and the actID in the specified WFMS e.g. defined by wfs .

The first step step in method is to match the WFMS specified with one of those supported WFMSs which is a step of determining a wfSystems i for a specified WFMS wfs. The next step step is to invoke the suspendactivityInstance indicated as suspendAI in method of the workflow adapter with the activity instance information. In pseudocode this may be written as wfSystems i .adapter.suspendActivityInstance piId actID flag . In step a zero e.g. successful or one e.g. unsuccessful is returned to a requestor if suspension of the activity instance was successful or not. Method ends after step .

With reference to a method for resuming an activity instance is illustrated in accordance with an exemplary embodiment of the present invention. The method may be illustratively named in pseudocode as PEMC.resumeActivityInstance wfs piID actID . The input parameters specify the WFMS a unique process instance ID and an activity ID. Method is used to request that the ProcessExecutionManagerController resume the specified activity instance e.g. defined by the piID and the actID in the specified WFMS e.g. defined by the wfs .

In step the specified WFMS is matched with one of those WFMSs supported which is a step of determining a wfSystems i for a specified WFMS wfs. In step a check is made to see if the activity is actually suspended. If not step No an error e.g. a zero is returned to the requester in step . Otherwise step Yes a resumeActivityInstance method indicated as resumeAI in of a workflow adapter is invoked with the information about the activity instance. This occurs in step and may be written in pseudocode as wfSystem.adapter.resumeActivityInstance piId actID . In step a zero e.g. successful or one e.g. unsuccessful is returned to a requestor if resumption of the process instance was successful or was not successful respectively. Method ends after step .

Turning now to a method for querying a process instance is illustrated in accordance with an exemplary embodiment of the present invention. The method may be illustratively named in pseudocode as PEMC query wfs piID . The input parameters specify the WFMS and a unique process instance ID. Method is used to query the ProcessExecutionManagerController for the current status of the specified process instance in the specified WFMS.

In step a job ID is determined for the specified WFMS e.g. defined by wfs and process instance ID. Step begins a loop that examines each scheduler scheduler i and that ends in step . Thus for each scheduler check if the jobID corresponds to one of the managed jobs schedulers i .jobs in step . If yes step Yes the state is returned for this job in step and the method ends. If the process instance is not one of the active jobs step No continue loop checking other schedulers. If all schedulers are checked and the job is not found in any of them then look up status of the job in the store e.g. store of in step . The state of the job found in the store or an error if the job was not found in the store is returned step to the requestor. Method ends after step .

With reference to a method for restarting a scheduler is illustrated in accordance with an exemplary embodiment of the present invention. The method may be illustratively named in pseudocode as PEMC.restartScheduler sch . The input parameter specifies the scheduler. Method is used by a scheduling system e.g. schedulers to request that the ProcessExecutionManagerController send all the information e.g. information on jobs and resources required by the scheduler to reinitialize.

The first step step in method is to match the WFMS specified with one of those supported WTMSs which is a step of determining a wfSystems i for a specified WFMS wfs. In step the init method of the scheduler model transformer and adapter is invoked and passed the required information. In pseudocode this may be written as schedulers i .modelTransformer.init schedulers i .jobs schedulers i .res commonalities simultaneities overrides . In step a zero e.g. successful or one e.g. unsuccessful is returned to the requestor if starting of the scheduler sch was successful or was not successful respectively. Method ends after step .

With reference to a method for querying resource information is illustrated in accordance with an exemplary embodiment of the present invention. The method may be illustratively named in pseudocode as PEMC.queryResources res rcs . The input parameter specifies one or more resources. Method is used by a scheduling system e.g. schedulers to request that the ProcessExecutionManagerController obtain information on specified resources. Step begins a loop performed for each resource e.g. res i and that ends in step . For each of the specified resources the ProcessExecutionManagerController invokes the queryResource method of the associated resource manager adapter in step . In pseudocode this may be written as res i .rm.adapter.queryResources res i . The results are returned to the requestor in step and method ends after step .

Turning to a method for performing starting a task is illustrated in accordance with an exemplary embodiment of the present invention. The method may be illustratively named in pseudocode as PEMC startTask jobID taskID res preempt . The input parameters specify the job ID the task ID one or more resources and a parameter indicating whether or not current assignments should be preempted. Method is used by a scheduling system e.g. schedulers to request that the ProcessExecutionManagerController assign the specified one or more resources to the specified process activity instance optionally preempting previous assignments .

The first step is to match the scheduling system with one of those supported and get the process instance ID and activity instance ID for the specified job ID and task ID. This occurs in step . The next step is to convert the resource ID or resource IDs used by the scheduler to those used by the WFMS wfResID which occurs in step . In step the ProcessExecutionManagerController invokes a startActivityInstance method indicated as startAI in of the associated workflow system adapter to start the activity. This may be written in pseudocode as wfSys i .adapter.startActivityInstance piID actID wfresID preempt . In step a zero e.g. successful or one e.g. unsuccessful is returned to the requestor if the one or more resources were or were not assigned respectively to the activity instance for the process. Method ends after step .

With reference to a method for updating resource information is illustrated in accordance with an illustrative embodiment of the present invention. The method may be illustratively named in pseudocode as PEMC.updateResources res . The input parameter specifies one or more resources to be updated. Method is used by a scheduling system e.g. scheduler to send resource update information that the ProcessExecutionManagerController obtains on the specified one or more resources.

Step begins a loop performed for each resource res i and the loop ends in step . For each of the specified resources in step the ProcessExecutionManagerController invokes the updateResource method of the associated resource manager adapter with the resource information. In pseudocode this may be written as res i .rm. adapter updateResources res i . In step a zero e.g. successful or one e.g. unsuccessful is returned to the requestor if updating the resources was successful or was not successful respectively. Method ends after step .

With reference to a method for performing a refresh resources request is illustrated in accordance with an exemplary embodiment of the present invention. The method may be illustratively named in pseudocode as PEMC refeshResources rm res all . The input parameters specify the resource manager to use one or more resources to be refreshed and a value indicating whether or not all resources are being refreshed. Method is used by a resource manager e.g. resManager to refresh resource information.

The first step step is to match the resource manager e.g. rm with one of those resource managers that are supported e.g. resManagers i . Step starts a loop performed for each scheduler e.g. schedulers i and this loop ends in step . Thus for each of the schedulers steps are performed. In step an empty list saveRes of resources is created. Step starts a loop performed for each resource res j and the loop ends in step . In step it is determined if the resources are managed by this scheduler in pseudocode this may be written as res j .scheduler schedulers i . If not step No the loop continue with the next resource if any. If yes step Yes the resource is added to the list saveRes.

In step it is checked if all resources are being refreshed If yes step Yes then delete all resources for this resource manager in this schedulers list of resources in step . In pseudocode this may be written as delete all resources in schedulers i .res where schedulers i .rm rm. Then add the new resource information to the scheduler in step . In pseudocode step can be written as add saveRes to schedulers i .res. Finally in step the refreshResources method of the associated scheduling system model transformer and adapter is invoked with the list of resources for this scheduler and a value of TRUE. In pseudocode this may be written as schedulers i .modeTransformer refreshResources schedulers i .res TRUE .

If no in step then step starts a loop performed for each resource managed by this scheduler and the loop ends in step . In step it is determined if this resource is already in the list of resources managed by this scheduler. In pseudocode this can be written as saveRes j in schedulers i .res. If it is step Yes then the resource information is updated in step . Otherwise step No add the resource information to the list kept by the scheduler in step . Finally in step the refreshResources method of the associated scheduling system model transformer and adapter is invoked with the list of resources for this scheduler and a value of FALSE. In pseudocode this may be written as schedulers i .adapter.refreshResources schedulers i .saveRes FALSE .

Once steps have been completed for all schedulers supported the resource map e.g. resMap for all the resources is regenerated. This occurs in step . In step a zero e.g. successful or one e.g. unsuccessful is returned to the resource refresh did complete or did not complete respectively. Method ends after step .

With reference to a method for requesting to override a schedule is illustrated in accordance with an exemplary embodiment of the present invention. The method may be illustratively named in pseudocode as overrideSchedule sch override . The input parameters specify a scheduler and one or more overrides. Method is used by a resource manager e.g. resManagers to request that the ProcessExecutionManagerController override resource assignment or resource assignments made by the scheduler.

The first step step is to match the scheduling system sch with one of a number of supported schedulers schedulers i . The next step step is to record the override information in a store such as store in . In step the ProcessExecutionManagerController invokes the overrideSchedule method of the associated scheduling system model transformer and adapter with the override information. In pseudocode this may be written as schedulers i .modelTransformer.overrideSchedule override . Method ends after step .

Turning now to a method for requesting handling of an event is illustrated in accordance with an illustrative embodiment of the present invention. The method may be illustratively named in pseudocode as wfSystems i .adapter.mon.handleEvent wfEvent . The input parameter specifies an event to be handled. Method is used by a WFMS illustratively a workflow adapter to inform the appropriate monitor in ProcessExecutionManagerController of progress in the execution of process instances.

The first step is to determine the job ID jobID corresponding to the specified process instance ID wfevent.piID. Step begins a loop performed for each scheduler sch i and the loop ends in step . Steps are therefore performed for each scheduler. In step it is determined if this job jobID is being scheduled by this scheduler. In pseudocode this may be written as jobID in scheduler s i .jobs .

If yes step Yes the status is updated in step e.g. schedulers i .jobs jobID wfEvent.status . In step the handleEvent method of the appropriate scheduler model transformer and adapter is invoked with the details of the event. This may be written in pseudocode as the following scheduler i .modelTransformer.handleEvent wfEvent . If step is No another scheduler is selected in step and the method continues in step .

Once all scheduler s have been examined in step it is determined if the event indicated the end of a process instance. If not step No the method ends. If so step Yes a store such as store in would be updated with the status e.g. complete of this process instance defined by e.g. piID in step . In step it is determined if the ProcessExecutionManagerController e.g. PEMC initiated this process instance. If yes step Yes in step the requester is informed of the end of the process instance and any output if necessary is communicated to the requestor. If not step No method ends.

It is to be understood that the embodiments and variations shown and described herein are merely illustrative of the principles of this invention and that various modifications may be implemented by those skilled in the art without departing from the scope and spirit of the invention.

