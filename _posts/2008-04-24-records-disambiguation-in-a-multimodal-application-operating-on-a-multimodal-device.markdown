---

title: Records disambiguation in a multimodal application operating on a multimodal device
abstract: Methods, apparatus, and products are disclosed for record disambiguation in a multimodal application operating on a multimodal device, the multimodal device supporting multiple modes of interaction including at least a voice mode and a visual mode, that include: prompting, by the multimodal application, a user to identify a particular record among a plurality of records; receiving, by the multimodal application in response to the prompt, a voice utterance from the user; determining, by the multimodal application, that the voice utterance ambiguously identifies more than one of the plurality of records; generating, by the multimodal application, a user interaction to disambiguate the records ambiguously identified by the voice utterance in dependence upon record attributes of the records ambiguously identified by the voice utterance; and selecting, by the multimodal application for further processing, one of the records ambiguously identified by the voice utterance in dependence upon the user interaction.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09349367&OS=09349367&RS=09349367
owner: Nuance Communications, Inc.
number: 09349367
owner_city: Burlington
owner_country: US
publication_date: 20080424
---
The field of the invention is data processing or more specifically methods apparatus and products for record disambiguation in a multimodal application operating on a multimodal device.

User interaction with applications running on small devices through a keyboard or stylus has become increasingly limited and cumbersome as those devices have become increasingly smaller. In particular small handheld devices like mobile phones and PDAs serve many functions and contain sufficient processing power to support user interaction through multimodal access that is by interaction in non voice modes as well as voice mode. Devices which support multimodal access combine multiple user input modes or channels in the same interaction allowing a user to interact with the applications on the device simultaneously through multiple input modes or channels. The methods of input include speech recognition keyboard touch screen stylus mouse handwriting and others. Multimodal input often makes using a small device easier.

Multimodal applications are often formed by sets of markup documents served up by web servers for display on multimodal browsers. A multimodal browser as the term is used in this specification generally means a web browser capable of receiving multimodal input and interacting with users with multimodal output where modes of the multimodal input and output include at least a speech mode. Multimodal browsers typically render web pages written in XHTML Voice X V . X V provides a markup language that enables users to interact with an multimodal application often running on a server through spoken dialog in addition to traditional means of input such as keyboard strokes and mouse pointer action. Visual markup tells a multimodal browser what the user interface is look like and how it is to behave when the user types points or clicks. Similarly voice markup tells a multimodal browser what to do when the user speaks to it. For visual markup the multimodal browser uses a graphics engine for voice markup the multimodal browser uses a speech engine. X V adds spoken interaction to standard web content by integrating XHTML eXtensible Hypertext Markup Language and speech recognition vocabularies supported by VoiceXML. For visual markup X V includes the XHTML standard. For voice markup X V includes a subset of VoiceXML. For synchronizing the VoiceXML elements with corresponding visual interface elements X V uses events. XHTML includes voice modules that support speech synthesis speech dialogs command and control and speech grammars. Voice handlers can be attached to XHTML elements and respond to specific events. Voice interaction features are integrated with XHTML and can consequently be used directly within XHTML content.

In addition to X V multimodal applications also may be implemented with Speech Application Tags SALT . SALT is a markup language developed by the Salt Forum. Both X V and SALT are markup languages for creating applications that use voice input speech recognition and voice output speech synthesis. Both SALT applications and X V applications use underlying speech recognition and synthesis technologies or speech engines to do the work of recognizing and generating human speech. As markup languages both X V and SALT provide markup based programming environments for using speech engines in an application s user interface. Both languages have language elements markup tags that specify what the speech recognition engine should listen for and what the synthesis engine should say. Whereas X V combines XHTML VoiceXML and the XML Events standard to create multimodal applications SALT does not provide a standard visual markup language or eventing model. Rather it is a low level set of tags for specifying voice interaction that can be embedded into other environments. In addition to X V and SALT multimodal applications may be implemented in Java with a Java speech framework in C for example and with other technologies and in other environments as well.

Current multimodal applications support a voice mode of user interaction using a speech engine. A speech engine provides recognition and generation or synthesis of human speech though use of an acoustic model that associates speech waveform data representing recorded pronunciations of speech with textual representations of those pronunciations also referred to as phonemes. Because most languages include sets of words that have the same pronunciation but have different spellings to distinguish each word s semantics a set of phonemes representing a pronunciation may refer to more than one word in the language. A set of words having the same pronunciation regardless of the words semantics are referred to as a homophonic set. When a voice utterance specifying a word in a homophonic set is provided to the speech engine for recognition therefore the speech engine may return any one or all of the words in the homophonic set but not necessarily the word intended by the speaker of the voice utterance.

In many multimodal applications the multimodal application retrieves information for dynamic rendering from a database or other data repository. For example the multimodal application may retrieve contact information for a user from the user s contact database. In such a database or other data repository values for a particular attribute for multiple records may belong to the same homophonic set. When such an attribute is utilized as the key to select information from a data repository the multimodal application cannot disambiguate between records to select the record desired by the user.

Methods apparatus and products are disclosed for record disambiguation in a multimodal application operating on a multimodal device the multimodal device supporting multiple modes of interaction including at least a voice mode and a visual mode that include prompting by the multimodal application a user to identify a particular record among a plurality of records receiving by the multimodal application in response to the prompt a voice utterance from the user determining by the multimodal application that the voice utterance ambiguously identifies more than one of the plurality of records generating by the multimodal application a user interaction to disambiguate the records ambiguously identified by the voice utterance in dependence upon record attributes of the records ambiguously identified by the voice utterance and selecting by the multimodal application for further processing one of the records ambiguously identified by the voice utterance in dependence upon the user interaction.

The foregoing and other objects features and advantages of the invention will be apparent from the following more particular descriptions of exemplary embodiments of the invention as illustrated in the accompanying drawings wherein like reference numbers generally represent like parts of exemplary embodiments of the invention.

Exemplary methods apparatus and products for record disambiguation in a multimodal application operating on a multimodal device according to embodiments of the present invention are described with reference to the accompanying drawings beginning with . sets forth a network diagram illustrating an exemplary system for record disambiguation in a multimodal application operating on a multimodal device according to embodiments of the present invention. The multimodal application is a software component that supports user interaction in both a voice mode and visual mode and optionally various other modes such as for example tactile modes. The multimodal application may include computer program instructions implemented in machine code that may be scheduled for execution directly by an operating system on a processor of the multimodal device . For example the multimodal application may be implemented as a compiled version of program written in C .

In other embodiments the multimodal application may include computer program instructions implemented in a higher level non machine language that requires runtime translation into machine code. In such embodiments the multimodal application is supported as by a multimodal execution environment . The multimodal execution environment may support execution of the multimodal application by processing the multimodal application itself or coordinating with other components such as for example a voice interpreter to process portions of the multimodal application . The multimodal execution environment may translate the multimodal application into platform specific machine code directly executable on the processors of the multimodal device perform memory management for the multimodal application during execution control access to platform hardware and so on. The implementation of the multimodal execution environment typically depends on the implementation of the multimodal application . When the multimodal application is implemented using X V or SALT tags then the multimodal execution environment may be implemented as a multimodal browser. When the multimodal application is implemented using Java then the multimodal execution environment may be implemented as a Java Virtual Machine. Readers will note that the implementations described above are for explanation only and not for limitation.

The multimodal device of supports multiple modes of user interaction with the multimodal application including a voice mode and a visual mode and optionally one or more other modes of user interaction with the multimodal application . The voice mode is represented here with audio output of voice prompts and responses from the multimodal devices and audio input of speech for recognition from a user . Non voice modes are represented by input output devices such as keyboards and display screens on the multimodal devices . The voice mode of user interaction with the multimodal application is supported by a voice interpreter through which the multimodal application is operatively coupled to a speech engine . The operative coupling may be implemented with an application programming interface API a voice service module or a VoIP connection as explained in more detail below.

In the exemplary system of the voice interpreter supports the voice mode of user interaction with the multimodal application by providing grammars speech for recognition and text prompts for speech synthesis to the speech engine and by returning to the multimodal application speech engine output in the form of recognized speech semantic interpretation results and digitized speech for voice prompts. The implementation of the voice interpreter typically depends on the technology implementing the multimodal application . The voice interpreter of may be implemented as a VoiceXML interpreter when the multimodal application implements X V. A VoiceXML interpreter is a software module of computer program instructions that accepts voice dialog instructions from a multimodal application typically in the form of a VoiceXML element. The voice dialog instructions include one or more grammars data input elements event handlers and so on that advise the VoiceXML interpreter how to administer voice input from a user and voice prompts and responses to be presented to a user. The VoiceXML interpreter administers such dialogs by processing the dialog instructions sequentially in accordance with a VoiceXML Form Interpretation Algorithm FIA . When the multimodal application is implemented according to SALT the voice interpreter may be implemented as a SALT interpreter. When the multimodal application is implemented using Java the voice interpreter may be implemented using a VoiceXML interpreter that exposes a Java interface.

The multimodal application of includes a set of computer program instructions for record disambiguation according to embodiments of the present invention. The multimodal application operates generally for record disambiguation according to embodiments of the present invention by prompting a user to identify a particular record among a plurality of records receiving in response to the prompt a voice utterance from the user determining that the voice utterance ambiguously identifies more than one of the plurality of records generating a user interaction to disambiguate the records ambiguously identified by the voice utterance in dependence upon record attributes of the records ambiguously identified by the voice utterance and selecting for further processing one of the records ambiguously identified by the voice utterance in dependence upon the user interaction.

A voice utterance represents a speech waveform spoken by a user. When the voice utterance specifies a word or phrase in a homophonic set the multimodal application is generally not capable of distinguishing which word in the homophonic set the user intended to reference with the voice utterance. Accordingly when that voice utterance is used to identify records in a database the multimodal application ambiguously identifies more than one record based on the voice utterance. The multimodal application operating according to embodiments of the present invention then further interacts with the user to disambiguate the records ambiguously identified based on the voice utterance.

Each multimodal device of is an automated device that is automated computing machinery or a computer program running on an automated device that is capable of accepting from users more than one mode of input keyboard mouse stylus and so on including speech input and also rendering more than one mode of output graphic speech and so on. A multimodal device is generally capable of accepting speech input from a user digitizing the speech and providing digitized speech to a speech engine for recognition. A multimodal device may be implemented for example as a voice enabled browser on a laptop a voice enabled browser on a smart phone handset an online game implemented with Java on a personal computer and with other combinations of hardware and software as may occur to those of skill in the art. Because multimodal applications may be implemented in markup languages X V SALT object oriented languages Java C procedural languages the C programming language and in other kinds of computer languages as may occur to those of skill in the art this specification uses the term multimodal application to refer to any software application server oriented or client oriented thin client or thick client that administers more than one mode of input and more than one mode of output typically including visual and speech modes.

Each of the example multimodal devices in the system of includes a microphone an audio amplifier a digital to analog converter and a multimodal application capable of accepting from a user speech for recognition digitizing the speech and providing the digitized speech to a speech engine for recognition. The speech may be digitized according to industry standard codecs including but not limited to those used for Distributed Speech Recognition as such. Methods for COding DECoding speech are referred to as codecs. The European Telecommunications Standards Institute ETSI provides several codecs for encoding speech for use in DSR including for example the ETSI ES 201 108 DSR Front end Codec the ETSI ES 202 050 Advanced DSR Front end Codec the ETSI ES 202 211 Extended DSR Front end Codec and the ETSI ES 202 212 Extended Advanced DSR Front end Codec. In standards such as RFC3557 entitled

As mentioned a multimodal device according to embodiments of the present invention is capable of providing speech for recognition to a speech engine . A speech engine is a functional module typically a software module although it may include specialized hardware also that does the work of recognizing and generating or synthesizing human speech. The speech engine implements speech recognition by use of a further module referred to in this specification as a ASR engine and the speech engine carries out speech synthesis by use of a further module referred to in this specification as a text to speech TTS engine. As shown in a speech engine may be installed locally in the multimodal device itself or a speech engine may be installed remotely with respect to the multimodal device across a data communications network in a voice server . A multimodal device that itself contains its own speech engine is said to implement a thick client or thick client because the thick client itself contains all the functionality needed to carry out speech recognition and speech synthesis through API calls to speech recognition and speech synthesis modules in the multimodal device itself with no need to send requests for speech recognition across a network and no need to receive synthesized speech across a network from a remote voice server. A multimodal device that does not contain its own speech engine is said to implement a thin client because the thin client itself contains only a relatively thin layer of application software that obtains speech recognition and speech synthesis services from a voice server located remotely across a network from the thin client. For ease of explanation only one of the multimodal devices in the system of is shown with a speech engine but readers will recognize that any multimodal device may have a speech engine according to embodiments of the present invention.

As shown in a speech engine and a voice interpreter may be installed locally in the multimodal device itself or a speech engine and a voice interpreter may be installed remotely with respect to the multimodal device across a data communications network in a voice server . In a thick client architecture a multimodal device includes both its own speech engine and its own voice interpreter . The voice interpreter exposes an API to the multimodal application for use in providing speech recognition and speech synthesis for the multimodal application. The multimodal application provides for example dialog instructions VoiceXML elements grammars input elements event handlers and so on through the API to the voice interpreter and the voice interpreter administers the speech engine on behalf of the multimodal application. In the thick client architecture a multimodal application including for example VoiceXML dialogs is interpreted by a voice interpreter on the multimodal device. In the thin client architecture a multimodal application including for example VoiceXML dialogs is interpreted by a voice interpreter on a voice server located remotely across a data communications network from the multimodal device running the multimodal application .

In a thin client architecture the speech engine and the voice interpreter are located remotely from the multimodal client device in a voice server the API for the voice interpreter is still implemented in the multimodal device with the API modified to communicate voice dialog instructions speech for recognition and text and voice prompts to and from the voice interpreter on the voice server. For ease of explanation only one of the multimodal devices in the system of is shown with a voice interpreter but readers will recognize that any multimodal device may have a voice interpreter according to embodiments of the present invention.

The use of these three example multimodal devices is for explanation only not for limitation of the invention. Any automated computing machinery capable of accepting speech from a user providing the speech digitized to a speech engine through a voice interpreter and receiving and playing speech prompts and responses from the voice interpreter may be improved to function as a multimodal device for adjusting a speech engine based on background noise according to embodiments of the present invention.

The system of also includes a voice server which is connected to data communications network through wireline connection . The voice server is a computer that runs a speech engine . The voice server provides voice recognition services for multimodal devices by accepting requests for speech recognition and returning text representing recognized speech. Voice server also provides speech synthesis text to speech TTS conversion for voice prompts and voice responses to user input in multimodal applications such as for example X V applications SALT applications or Java voice applications.

The system of includes a data communications network that connects the multimodal devices and the voice server for data communications. A data communications network for record disambiguation in a multimodal application operating on a multimodal device according to embodiments of the present invention is a data communications network composed of a plurality of computers that function as data communications routers connected for data communications with packet switching protocols. Such a data communications network may be implemented with optical connections wireline connections or with wireless connections. Such a data communications network may include intranets internets local area data communications networks LANs and wide area data communications networks WANs . Such a data communications network may implement for example 

The system of includes a web server connected for data communications through wireline connection to network and therefore to the multimodal devices . The web server may be any server that provides to client devices markup documents that compose multimodal applications. The web server typically provides such markup documents via a data communications protocol HTTP HDTP WAP or the like. That is although the term web is used to described the web server generally in this specification there is no limitation of data communications between multimodal devices and the web server to HTTP alone. The markup documents also may be implemented in any markup language that supports non speech display elements data entry elements and speech elements for identifying which speech to recognize and which words to speak grammars form elements and the like including for example X V and SALT. A multimodal application in a multimodal device then upon receiving from the web sever a markup document as part of a multimodal application may execute speech elements by use of a voice interpreter and speech engine in the multimodal device itself or by use of a voice interpreter and speech engine located remotely from the multimodal device in a voice server .

The arrangement of the multimodal devices the web server the voice server and the data communications network making up the exemplary system illustrated in are for explanation not for limitation. Data processing systems useful for record disambiguation in a multimodal application operating on a multimodal device according to various embodiments of the present invention may include additional servers routers other devices and peer to peer architectures not shown in as will occur to those of skill in the art. Data communications networks in such data processing systems may support many data communications protocols in addition to those noted above. Various embodiments of the present invention may be implemented on a variety of hardware platforms in addition to those illustrated in .

Record disambiguation in a multimodal application operating on a multimodal device according to embodiments of the present invention in a thin client architecture may be implemented with one or more voice servers computers that is automated computing machinery that provide speech recognition and speech synthesis. For further explanation therefore sets forth a block diagram of automated computing machinery comprising an example of a computer useful as a voice server in record disambiguation in a multimodal application operating on a multimodal device according to embodiments of the present invention. The voice server of includes at least one computer processor or CPU as well as random access memory RAM which is connected through a high speed memory bus and bus adapter to processor and to other components of the voice server.

Stored in RAM is a voice server application a module of computer program instructions capable of operating a voice server in a system that is configured to carry out record disambiguation in a multimodal application operating on a multimodal device according to embodiments of the present invention. Voice server application provides voice recognition services for multimodal devices by accepting requests for speech recognition and returning speech recognition results including text representing recognized speech text for use as variable values in dialogs and text as string representations of scripts for semantic interpretation. Voice server application also includes computer program instructions that provide text to speech TTS conversion for voice prompts and voice responses to user input in multimodal applications such as for example X V applications SALT applications or Java Speech applications.

Voice server application may be implemented as a web server implemented in Java C or another language that supports X V SALT VoiceXML or other multimodal languages by providing responses to HTTP requests from X V clients SALT clients Java Speech clients or other multimodal clients. Voice server application may for a further example be implemented as a Java server that runs on a Java Virtual Machine and supports a Java voice framework by providing responses to HTTP requests from Java client applications running on multimodal devices. And voice server applications that support record disambiguation in a multimodal application operating on a multimodal device may be implemented in other ways as may occur to those of skill in the art and all such ways are well within the scope of the present invention.

Also stored in RAM is a voice interpreter a module of computer program instructions that supports the voice mode of user interaction with a multimodal application operating on a multimodal device. The voice interpreter provides speech engine input such as grammars speech for recognition and text prompts for speech synthesis to the speech engine and returns to the multimodal application speech engine output in the form of recognized speech semantic interpretation results and digitized speech for voice prompts. Input to voice interpreter may originate for example from VoiceXML clients running remotely on multimodal devices from X V clients running remotely on multimodal devices from SALT clients running on multimodal devices or from Java client applications running remotely on multimodal devices. In this example voice interpreter interprets and executes VoiceXML segments representing voice dialog instructions received from remote multimodal devices and provided to voice interpreter through voice server application .

When implemented in X V a multimodal application in a thin client architecture may provide voice dialog instructions VoiceXML segments VoiceXML elements and the like to voice interpreter through data communications across a network with the multimodal application. The voice dialog instructions include one or more grammars data input elements event handlers and so on that advise the voice interpreter how to administer voice input from a user and voice prompts and responses to be presented to a user. The voice interpreter administers such dialogs by processing the dialog instructions sequentially in accordance with a VoiceXML Form Interpretation Algorithm FIA . The voice interpreter interprets VoiceXML dialogs provided to the voice interpreter by a multimodal application.

To provide voice services to a multimodal application the voice server in this example includes a speech engine . The speech engine is a functional module typically a software module although it may include specialized hardware also that does the work of recognizing and generating human speech. The speech engine includes an automated speech recognition ASR engine for speech recognition and a text to speech TTS engine for generating speech. The speech engine also includes grammars lexicons and language specific acoustic models . Each lexicon and language specific acoustic model may be associated with a separate language in a configuration parameter repository .

The acoustic models associate speech waveform data representing recorded pronunciations of speech with textual representations of those pronunciations which are referred to as phonemes. The speech waveform data may be implemented as a Speech Feature Vector SFV that may be represented for example by the first twelve or thirteen Fourier or frequency domain components of a sample of digitized speech waveform. Accordingly the acoustic models may be implemented as data structures or tables in a database for example that associates these SFVs with phonemes representing to the extent that it is practically feasible to do so all pronunciations of all the words in various human languages each language having a separate acoustic model . The lexicons are associations of words in text form with phonemes representing pronunciations of each word the lexicon effectively identifies words that are capable of recognition by an ASR engine. Each language has a separate lexicon . Also stored in RAM is a Text To Speech TTS Engine a module of computer program instructions that accepts text as input and returns the same text in the form of digitally encoded speech for use in providing speech as prompts for and responses to users of multimodal systems.

The grammars communicate to the ASR engine the words and sequences of words that currently may be recognized. For precise understanding distinguish the purpose of the grammar and the purpose of the lexicon. The lexicon associates with phonemes all the words that the ASR engine can recognize. The grammar communicates the words currently eligible for recognition. The set of words currently eligible for recognition and the set of words capable of recognition may or may not be the same.

Grammars for use in record disambiguation in a multimodal application operating on a multimodal device according to embodiments of the present invention may be expressed in any format supported by any ASR engine including for example the Java Speech Grammar Format JSGF the format of the W3C Speech Recognition Grammar Specification SRGS the Augmented Backus Naur Format ABNF from the IETF s RFC2234 in the form of a stochastic grammar as described in the W3C s Stochastic Language Models N Gram Specification and in other grammar formats as may occur to those of skill in the art. Grammars typically operate as elements of dialogs such as for example a VoiceXML or an X V. A grammar s definition may be expressed in line in a dialog. Or the grammar may be implemented externally in a separate grammar document and referenced from with a dialog with a URI. Here is an example of a grammar expressed in JSFG 

In this example the elements named and are rules of the grammar. Rules are a combination of a rulename and an expansion of a rule that advises an ASR engine or a voice interpreter which words presently can be recognized. In this example expansion includes conjunction and disjunction and the vertical bars mean or. An ASR engine or a voice interpreter processes the rules in sequence first then then . The rule accepts for recognition call or phone or telephone plus that is in conjunction with whatever is returned from the rule and the rule. The rule accepts bob or martha or joe or pete or chris or john or artoush or tom and the rule accepts today or this afternoon or tomorrow or next week. The command grammar as a whole matches utterances like these for example 

The voice server application in this example is configured to receive from a multimodal client located remotely across a network from the voice server digitized speech for recognition from a user and pass the speech along to the ASR engine for recognition. ASR engine is a module of computer program instructions also stored in RAM in this example. In carrying out automated speech recognition the ASR engine receives speech for recognition in the form of at least one digitized word and uses frequency components of the digitized word to derive a SFV for the digitized word. The ASR engine can use the SFV to infer phonemes for the word from the language specific acoustic model . The ASR engine then uses the phonemes to find the word in the lexicon .

Also stored in RAM is an operating system . Operating systems useful in voice servers according to embodiments of the present invention include UNIX Linux Microsoft Vista IBM s AIX IBM s i5 OS and others as will occur to those of skill in the art. Operating system voice server application voice interpreter speech engine device location manager device location repository and configuration parameter repository in the example of are shown in RAM but many components of such software typically are stored in non volatile memory also for example on a disk drive .

Voice server of includes bus adapter a computer hardware component that contains drive electronics for high speed buses the front side bus the video bus and the memory bus as well as drive electronics for the slower expansion bus . Examples of bus adapters useful in voice servers according to embodiments of the present invention include the Intel Northbridge the Intel Memory Controller Hub the Intel Southbridge and the Intel I O Controller Hub. Examples of expansion buses useful in voice servers according to embodiments of the present invention include Peripheral Component Interconnect PCI and PCI Extended PCI X bus as well as PCI Express PCIe point to point expansion architectures and others.

Voice server of includes disk drive adapter coupled through expansion bus and bus adapter to processor and other components of the voice server . Disk drive adapter connects non volatile data storage to the voice server in the form of disk drive . Disk drive adapters useful in voice servers include Integrated Drive Electronics IDE adapters Small Computer System Interface SCSI adapters and others as will occur to those of skill in the art. In addition non volatile computer memory may be implemented for a voice server as an optical disk drive electrically erasable programmable read only memory so called EEPROM or Flash memory RAM drives and so on as will occur to those of skill in the art.

The example voice server of includes one or more input output I O adapters . I O adapters in voice servers implement user oriented input output through for example software drivers and computer hardware for controlling output to display devices such as computer display screens as well as user input from user input devices such as keyboards and mice. The example voice server of includes a video adapter which is an example of an I O adapter specially designed for graphic output to a display device such as a display screen or computer monitor. Video adapter is connected to processor through a high speed video bus bus adapter and the front side bus which is also a high speed bus.

The exemplary voice server of includes a communications adapter for data communications with other computers and for data communications with a data communications network . Such data communications may be carried out serially through RS 232 connections through external buses such as a Universal Serial Bus USB through data communications data communications networks such as IP data communications networks and in other ways as will occur to those of skill in the art. Communications adapters implement the hardware level of data communications through which one computer sends data communications to another computer directly or through a data communications network. Examples of communications adapters useful for record disambiguation in a multimodal application operating on a multimodal device according to embodiments of the present invention include modems for wired dial up communications Ethernet IEEE 802.3 adapters for wired data communications network communications and 802.11 adapters for wireless data communications network communications.

For further explanation sets forth a functional block diagram of exemplary apparatus for record disambiguation in a multimodal application operating on a multimodal device in a thin client architecture according to embodiments of the present invention. The example multimodal device of includes a sound card which is an example of an I O adapter specially designed for accepting analog audio signals from a microphone and converting the audio analog signals to digital form for further processing by a codec .

In some embodiments the multimodal application of may include computer program instructions implemented in machine code that may be scheduled for execution directly by an operating system on a processor of the multimodal device . For example the multimodal application may be implemented as a compiled version of program written in C . In some other embodiments in which the multimodal application is implemented in higher level non machine language a multimodal execution environment may support the multimodal application by translating the multimodal application into platform specific machine code directly executable on the processors of the multimodal device performing memory management for the multimodal application during execution controlling access to platform hardware and so on. The implementation of the multimodal execution environment typically depends on the implementation of the multimodal application . When the multimodal application is implemented using X V or SALT tags then the multimodal execution environment may be implemented as a multimodal browser. When the multimodal application is implemented using Java then the multimodal execution environment may be implemented as a Java Virtual Machine.

The multimodal application of includes a set of computer program instructions for record disambiguation according to embodiments of the present invention. The multimodal application operates generally for record disambiguation according to embodiments of the present invention by prompting a user to identify a particular record among a plurality of records receiving in response to the prompt a voice utterance from the user determining that the voice utterance ambiguously identifies more than one of the plurality of records generating a user interaction to disambiguate the records ambiguously identified by the voice utterance in dependence upon record attributes of the records ambiguously identified by the voice utterance and selecting for further processing one of the records ambiguously identified by the voice utterance in dependence upon the user interaction.

The example of also includes a voice server having installed upon it a voice server application a voice interpreter and a speech engine . The speech engine includes an ASR engine grammars lexicons acoustic models and a TTS engine . The voice interpreter of is implemented as a VoiceXML interpreter that interprets and executes VoiceXML dialog instructions received from the multimodal application and provided to voice interpreter through voice server application . VoiceXML input to the voice interpreter may originate from the multimodal application implemented as an X V client running remotely on the multimodal device . As noted above the multimodal application also may be implemented as a Java client application running remotely on the multimedia device a SALT application running remotely on the multimedia device and in other ways as may occur to those of skill in the art.

In the example of the voice server connects to the multimodal device for data communication by a VoIP connection through a data communications network . VoIP stands for Voice Over Internet Protocol a generic term for routing speech over an IP based data communications network. The speech data flows over a general purpose packet switched data communications network instead of traditional dedicated circuit switched voice transmission lines. Protocols used to carry voice signals over the IP data communications network are commonly referred to as Voice over IP or VoIP protocols. VoIP traffic may be deployed on any IP data communications network including data communications networks lacking a connection to the rest of the Internet for instance on a private building wide local area data communications network or LAN. 

Many protocols are used to effect VoIP. The two most popular types of VoIP are effected with the IETF s Session Initiation Protocol SIP and the ITU s protocol known as H.323. SIP clients use TCP and UDP port 5060 to connect to SIP servers. SIP itself is used to set up and tear down calls for speech transmission. VoIP with SIP then uses RTP for transmitting the actual encoded speech. Similarly H.323 is an umbrella recommendation from the standards branch of the International Telecommunications Union that defines protocols to provide audio visual communication sessions on any packet data communications network.

The apparatus of operate in a manner that is similar to the operation of the system of described above. Multimodal application is a user level multimodal client side computer program that presents a voice interface to user provides audio prompts and responses and accepts input speech for recognition . Multimodal application provides a speech interface through which a user may provide oral speech for recognition through microphone and have the speech digitized through an audio amplifier and a coder decoder codec of a sound card and provide the digitized speech for recognition to ASR engine . Multimodal application then packages the digitized speech in a recognition request message according to a VoIP protocol and transmits the speech to voice server through the VoIP connection on the network .

Voice server application provides voice recognition services for multimodal devices by accepting dialog instructions VoiceXML segments and returning speech recognition results including text representing recognized speech text for use as variable values in dialogs and output from execution of semantic interpretation scripts as well as voice prompts. Voice server application supports text to speech TTS conversion for voice prompts and voice responses to user input in multimodal applications such as for example X V applications SALT applications or Java Speech applications.

The voice server application receives speech for recognition from a user and passes the speech through API calls to voice interpreter which in turn uses an ASR engine for speech recognition. The ASR engine receives digitized speech for recognition uses frequency components of the digitized speech to derive an SFV uses the SFV to infer phonemes for the word from the language specific acoustic model and uses the phonemes to find the speech in the lexicon . The ASR engine then compares speech found as words in the lexicon to words in a grammar to determine whether words or phrases in speech are recognized by the ASR engine.

The multimodal application is operatively coupled to the speech engine . In this example the operative coupling between the multimodal application and the speech engine is implemented with a VoIP connection through a voice services module then through the voice server application and the voice interpreter . Depending on whether the multimodal application is implemented in X V Java or SALT the voice interpreter may be implemented using a VoiceXML interpreter a VoiceXML interpreter exposing a Java interface a SALT interpreter or any other implementation as will occur to those of skill in the art. The voice services module is a thin layer of functionality a module of computer program instructions that presents an API for use by an application level program in providing dialog instructions and speech for recognition to a voice server application and receiving in response voice prompts and other responses. In this example application level programs are represented by multimodal application and the multimodal execution environment .

The voice services module provides data communications services through the VoIP connection and the voice server application between the multimodal device and the voice interpreter . The API of may be the same API presented to applications by a voice interpreter when the voice interpreter is installed on the multimodal device in a thick client architecture. So from the point of view of an application calling the API the application is calling the VoiceXML interpreter directly. The data communications functions of the voice services module are transparent to applications that call the API . At the application level calls to the API may be issued from the multimodal browser which provides an execution environment for the multimodal application when the multimodal application is implemented with X V. And calls to the API may be issued from the JVM which provides an execution environment for the multimodal application when the multimodal application is implemented with Java.

Record disambiguation in a multimodal application operating on a multimodal device according to embodiments of the present invention in thick client architectures is generally implemented with multimodal devices that is automated computing machinery or computers. In the system of for example all the multimodal devices are implemented to some extent at least as computers. For further explanation therefore sets forth a block diagram of automated computing machinery comprising an example of a computer useful as a multimodal device in record disambiguation in a multimodal application operating on the multimodal device according to embodiments of the present invention. In a multimodal device implementing a thick client architecture as illustrated in the multimodal device has no connection to a remote voice server containing a voice interpreter and a speech engine. All the components needed for speech synthesis and voice recognition in record disambiguation in a multimodal application operating on a multimodal device according to embodiments of the present invention are installed or embedded in the multimodal device itself.

The example multimodal device of includes several components that are structured and operate similarly to the components of the voice server having the same drawing reference numbers as described above with reference to at least one computer processor frontside bus RAM high speed memory bus bus adapter video adapter video bus expansion bus communications adapter I O adapter disk drive adapter an operating system a voice interpreter a speech engine and so on. As in the system of the speech engine in the multimodal device of includes an ASR engine grammars lexicons acoustic models and a TTS engine . The voice interpreter may be implemented as a VoiceXML interpreter that administers dialogs by processing the dialog instructions sequentially in accordance with a VoiceXML Form Interpretation Algorithm FIA .

The speech engine in this kind of embodiment a thick client architecture often is implemented as an embedded module in a small form factor device such as a handheld device a mobile phone PDA and the like. An example of an embedded speech engine that may be improved for record disambiguation in a multimodal application operating on a multimodal device according to embodiments of the present invention is IBM s Embedded ViaVoice Enterprise. The example multimodal device of also includes a sound card which is an example of an I O adapter specially designed for accepting analog audio signals from a microphone and converting the audio analog signals to digital form for further processing by a codec . The sound card is connected to processor through expansion bus bus adapter and front side bus .

Also stored in RAM in this example is a multimodal application a module of computer program instructions capable of operating a multimodal device as an apparatus that supports multiple modes of user interaction including a voice mode and one or more non voice modes. The multimodal application implements speech recognition by accepting speech for recognition from a user and sending the speech for recognition through API calls to the ASR engine . The multimodal application implements speech synthesis generally by sending words to be used as prompts for a user to the TTS engine . As an example of thick client architecture the multimodal application in this example does not send speech for recognition across a network to a voice server for recognition and the multimodal application in this example does not receive synthesized speech TTS prompts and responses across a network from a voice server. All grammar processing voice recognition and text to speech conversion in this example is performed in an embedded fashion in the multimodal device itself.

More particularly multimodal application in this example is a user level multimodal client side computer program that provides a speech interface through which a user may provide oral speech for recognition through microphone have the speech digitized through an audio amplifier and a coder decoder codec of a sound card and provide the digitized speech for recognition to ASR engine . The multimodal application may be implemented as a set or sequence of X V documents executing in a multimodal execution environment implemented as a multimodal browser or microbrowser that passes VoiceXML grammars and digitized speech by calls through an API directly to an embedded voice interpreter for processing. The embedded voice interpreter may in turn issue requests for speech recognition through API calls directly to the embedded ASR engine . Multimodal application also can provide speech synthesis TTS conversion by API calls to the embedded TTS engine for voice prompts and voice responses to user input.

In a further class of exemplary embodiments the multimodal application may be implemented as a Java voice application that executes in a multimodal execution environment implemented as a Java Virtual Machine and issues calls through an API of the voice interpreter for speech recognition and speech synthesis services. In further exemplary embodiments the multimodal application may be implemented as a set or sequence of SALT documents executed in a multimodal execution environment implemented as a multimodal browser or microbrowser that issues calls through an API of the voice interpreter for speech recognition and speech synthesis services. In addition to X V SALT and Java implementations multimodal application may be implemented in other technologies as will occur to those of skill in the art and all such implementations are well within the scope of the present invention.

The multimodal application of includes a set of computer program instructions for record disambiguation according to embodiments of the present invention. The multimodal application operates generally for record disambiguation according to embodiments of the present invention by prompting a user to identify a particular record among a plurality of records receiving in response to the prompt a voice utterance from the user determining that the voice utterance ambiguously identifies more than one of the plurality of records generating a user interaction to disambiguate the records ambiguously identified by the voice utterance in dependence upon record attributes of the records ambiguously identified by the voice utterance and selecting for further processing one of the records ambiguously identified by the voice utterance in dependence upon the user interaction.

The multimodal application of is operatively coupled to the speech engine . In this example the operative coupling between the multimodal application and the speech engine is implemented through the voice interpreter . Depending on whether the multimodal application is implemented in X V Java or SALT the voice interpreter may be implemented as a VoiceXML interpreter a VoiceXML interpreter exposing a Java interface or SALT interpreter. When the multimodal application is implemented in X V the operative coupling is effected through the multimodal execution environment which provides an operating environment and an interpreter for the X V application and then through a VoiceXML interpreter which passes grammars and voice utterances for recognition to the speech engine through the voice interpreter . When the multimodal application is implemented in Java Speech the multimodal execution environment is implemented as a Java Virtual Machine which provides an operating environment for the Java application and the voice interpreter which passes grammars and voice utterances for recognition to the speech engine . When the multimodal application is implemented in SALT the multimodal execution environment is implemented as a multimodal browser which provides an operating environment and an interpreter for the X V application and then through a SALT interpreter which passes grammars and voice utterances for recognition to the speech engine .

The multimodal application in this example running on a multimodal device that contains its own voice interpreter and its own speech engine with no network or VoIP connection to a remote voice server containing a remote VoiceXML interpreter or a remote speech engine is an example of a so called thick client architecture so called because all of the functionality for processing voice mode interactions between a user and the multimodal application is implemented on the multimodal device itself.

For further explanation sets forth a flow chart illustrating an exemplary method of record disambiguation in a multimodal application operating on a multimodal device according to embodiments of the present invention. The multimodal device described with reference to supports multiple modes of interaction including at least a voice mode and a visual mode. The voice mode of interaction may be implemented using speakers or a microphone of the multimodal device along with a sound card to provide an interface for the speakers or the microphone with the remaining components of the device. The visual mode of interaction may be implemented using a display for the multimodal device on which the device may render a graphical user interface GUI along with a graphic card that provides an interface for the display with the other components of the multimodal device.

The method of includes prompting by the multimodal application a user to identify a particular record among a plurality of records. The multimodal application may request an identifier for a particular record among a plurality of records to further process that particular record. The type of further processing typically depends on the specific implementation of the multimodal application . For example when the multimodal application is implemented as personal information management PIM software the multimodal application may request that the user identify a record representing the contact information for a particular individual among many other similar records so that the PIM can create a blank email to the particular individual into which the user can type. For another example when the multimodal application is implemented as a personal finance application the multimodal application may request that the user identify a record representing a particular financial transaction for display to the user.

The multimodal application may prompt a user to identify a particular record among a plurality of records according to the method of by rendering a prompt to the user through the voice mode or visual mode of user interaction. The prompt of represent information provided to the user that requests the user to providing information to the multimodal device through some user interaction. The multimodal application may render the prompt through the voice mode by synthesizing text into speech using a TTS engine and playing the synthesized speech through a speaker for the multimodal device. The multimodal device may render the prompt through the visual mode of user interaction by displaying text or graphics to the user using a GUI on the multimodal device s display.

For further explanation sets forth a line drawing illustrating an exemplary GUI useful in prompting by a multimodal application a user to identify a particular record among a plurality of records according to embodiments of the present invention. The exemplary multimodal application of is an application for contacting an individual in an employee directory. Each record in the plurality of records represents the contact information for a single employee in the company. The GUI of renders a prompt in an exemplary multimodal application that requests the user to identify an employee by the employee s name. The prompt of is implemented using the text Who do you want to contact Because the exemplary application is a multimodal application the multimodal application may play a speech representation of the prompt through the multimodal device s speakers.

To generate the GUI and prompt the user using a speech representation and a visual representation of the prompt illustrated in the multimodal application may include the following exemplary instructions implemented below using HTML and VoiceXML 

In the exemplary multimodal application above an exemplary prompt is specified at line in a HTML paragraph element . Using the prompt at line the multimodal application may display the text Who do you want to contact on a GUI as illustrated in GUI of . Concurrently the multimodal application plays a speech representation of the prompt at line through the speakers of the multimodal device. The multimodal application accomplishes this concurrent multimodal interaction by including the ev event load ev handler vforml parameters in the HTML element at line which instruct a multimodal browser to process the VoiceXML form vforml at lines when the HTML element is processed. As the multimodal browser processes the HTML element the multimodal browser may pass the VoiceXML form vforml to a VoiceXML interpreter for processing. The VoiceXML element at line instructs a VoiceXML interpreter to synthesize the prompt at line and pass the synthesized speech back to the multimodal browser for playback through the speakers of the multimodal device as the HTML element is rendered on the device s display. In such a manner the exemplary multimodal application above prompts a user to identify a particular record among a plurality of records according to embodiments of the present invention. Readers will note however that the exemplary multimodal application above is for explanation only and not for limitation. The multimodal application may be implemented in a variety of ways as discussed above and as will occur to those of ordinary skill in the art.

Turning back to the method of also includes receiving by the multimodal application in response to the prompt a voice utterance from the user. The multimodal application may receive a voice utterance from the user in response to the prompt according to the method of by recording a speech waveform through a microphone and digitizing and encoding the speech waveform for speech recognition using a codec implemented in the multimodal device.

The method of includes determining by the multimodal application that the voice utterance ambiguously identifies more than one of the plurality of records in a data repository . The data repository may be implemented as a database structured document or any other data structure capable of storing records for processing the multimodal application . The data repository may be installed on the multimodal device along with the multimodal application or accessed remotely through a data communications network. Further explanation of determining that the voice utterance ambiguously identifies more than one of the plurality of records is described with reference to . each set forth flow charts illustrating an exemplary method of determining that a voice utterance ambiguously identifies more than one of a plurality of records according to embodiments of the present invention.

In the method of determining by the multimodal application that the voice utterance ambiguously identifies more than one of the plurality of records includes determining using a speech recognition engine one or more recognition results in dependence upon the voice utterance and a grammar . The multimodal application may determine one or more recognition results using a speech engine in dependence upon the voice utterance and a grammar according to the method of by passing the voice utterance and the grammar to the speech engine through a voice interpreter and receiving in response the recognition results in an ECMAScript data structure such as for example the application.lastresult array. ECMAScript data structures represent objects in the Document Object Model DOM at the scripting level in an X V page. The DOM is created by a multimodal browser when the X V page of the multimodal application is loaded. The application.lastresult array holds information about the last recognition generated by an ASR engine for the multimodal application. The application.lastresult is an array of elements where each element application.lastresult i represents a possible result through the following shadow variables 

When a voice interpreter stores the recognition results in an ECMAScript field variable array for a field specified in the multimodal application the recognition results may be stored in field variable array using shadow variables similar to the application variable application.lastresult . For example a field variable array may represent a possible recognition result through the following shadow variables 

In the method of determining by the multimodal application that the voice utterance ambiguously identifies more than one of the plurality of records also includes determining that a record attribute of more than one of the plurality of records is a homophone of the recognition results . The multimodal application may determine that a record attribute of more than one of the plurality of records is a homophone of the recognition results according to the method of by identifying the phonetic representation of the recognition results and determining whether more than one record of the data repository has an attribute with the same phonetic representation. The multimodal application may identify the phonetic representation of the recognition results by retrieving the value of the utterance shadow variable in the ECMAScript structure application.lastresult representing the recognition results .

In the method of the multimodal application may determine whether more than one record of the data repository has an attribute with the same phonetic representation by identifying whether more than one entry exists in an attribute s phonetics table for the phonetic representation of the recognition results used to identify records in the data repository using that particular attribute. If more than one entry exists in an attribute phonetics table for the phonetic representation of the recognition results then more than one record of the data repository has an attribute with the same phonetic representation. The records are indistinguishable based on the voice utterance . The multimodal application may record the identifiers for these ambiguously identified records for later disambiguation. If more than one entry does not exist in an attribute phonetics table for the phonetic representation of the recognition results then more than one record of the data repository does not have an attribute with the same phonetic representation and the multimodal application is able to identify a single record based on the voice utterance .

The attribute phonetics table of is a data structure that associates record attribute values with the phonetic representations of those attribute values. Each record of the attribute phonetics table associates a phonetic representation of a record attribute value with a textual representation of the attribute value . For further explanation consider an exemplary data repository having the following exemplary records 

Further consider the following exemplary attribute phonetics table for a first name attribute for the records of Table 1 

The exemplary phonetics table above associates the values for the first name attribute of the records in the exemplary data repository in Table 1 with the phonetic representations of the first names. Specifically the exemplary phonetics table above specifies that two records in the exemplary data repository have first name attribute values having the same phonetic representation of K R IY S. That is two records of the data repository specify first names that are homophones namely Chris and Cris. Readers will note that the exemplary homophone table above is for explanation and not for limitation.

The attribute phonetics table may be maintained by the database management system DBMS that maintains the data repository . That is as records are inserted and deleted from tables in the data repository the DBMS may add and remove entries in an attribute phonetics table for each attribute of the records for the data repository . The DBMS may obtain the phonetics representations of the attributes from a larger table that may contain the phonetic representations for all of the words in a particular language.

As mentioned above also sets forth a flow chart illustrating an exemplary method of determining that a voice utterance ambiguously identifies more than one of a plurality of records according to embodiments of the present invention. In the method of determining by the multimodal application that the voice utterance ambiguously identifies more than one of the plurality of records includes determining using a speech recognition engine a predefined recognition result in dependence upon the voice utterance and a grammar . The predefined recognition result of is a recognition result that represents an attribute for a record that is a homophone of the same attribute for some other record in the data repository . The multimodal application may determine a predefined recognition result using a speech recognition engine according to the method of by passing the voice utterance and the grammar to the speech engine through a voice interpreter and receiving in response the recognition results in an ECMAScript data structure such as for example the application.lastresult array.

In the example of the grammar may specify that the predefined recognition result represents an attribute for a record that is a homophone of the same attribute for some other record using a semantic interpretation script . The semantic interpretation script is a set of instructions embedded in the grammar that are executed by voice interpreter based on the recognition results matched by the grammar . The semantic interpretation script operates to transform the recognition result from the format matched by the ASR engine into a format more suitable for processing the multimodal application. The semantic interpretation script may be embedded in the grammar according to the Semantic Interpretation for Speech Recognition SISR specification promulgated by the W3C or any other semantic interpretation specification as will occur to those of skill in the art.

For further explanation consider again the exemplary data repository in Table 1 above having a plurality of records. Further consider the grammar from the exemplary multimodal application above and reproduced below 

The exemplary data repository of Table 1 includes records with first name attributes Chris and Cris that are homophones of one another. The exemplary grammar above specifies that a predefined recognition result Chris represents an attribute for a record that is a homophone of the same attribute for some other record using a semantic interpretation script duplicate true. By attaching the semantic interpretation script to the grammar element Chris the grammar informs the multimodal application that the voice utterance supplied by a user may in fact represent a predefined recognition result Chris or a homophone of the predefined recognition result Chris such as Cris. 

In the method of determining by the multimodal application that the voice utterance ambiguously identifies more than one of the plurality of records includes executing a semantic interpretation script for the predefined recognition result specifying that the voice utterance ambiguously identifies more than one of the plurality of records. The multimodal application may execute the semantic interpretation script according to the method of by passing the grammar which includes the semantic interpretation script to a voice interpreter along with the voice utterance . The voice interpreter in turn processes the semantic interpretation script when the speech engine matches the predefined recognition result . Continuing with the exemplary grammar above the voice interpreter executes the semantic interpretation script duplicate true when the speech engine returns the predefined recognition result Chris. Because the multimodal application uses the ECMAScript variable duplicate to indicate whether the values for same attribute of at least two records are homophones executing the semantic interpretation script duplicate true instructs that the multimodal application that the values for same attribute of at least two records are homophones. Therefore the voice utterance used to determine the predefined recognition result Chris ambiguously identifies more than one record. The multimodal application may then record the identifiers for these ambiguously identified records for later disambiguation.

Turning back to the method of includes generating by the multimodal application a user interaction to disambiguate the records ambiguously identified by the voice utterance in dependence upon record attributes of the records ambiguously identified by the voice utterance . The multimodal application may generate a user interaction to disambiguate the records ambiguously identified by the voice utterance according to the method of by executing an ECMAScript to create a VoiceXML form. In such a manner the user interaction is implemented with a VoiceXML form. For example consider again the exemplary multimodal application listed above. The exemplary multimodal application executes an ECMAScript function createDisambiguateForm at lines to create the content of the disambiguate VoiceXML form listed in the exemplary multimodal application above at lines .

For further explanation sets forth a flow chart illustrating an exemplary method of generating by the multimodal application a user interaction to disambiguate the records ambiguously identified by the voice utterance in dependence upon record attributes of the records ambiguously identified by the voice utterance according to embodiments of the present invention. The multimodal application generates a user interaction to disambiguate the ambiguously identified records according to the method of by creating a disambiguation grammar in dependence upon the record attributes of the records ambiguously identified by the voice utterance . The disambiguation grammar of is a grammar that aids the speech engine in recognizing spoken attribute values for a particular attribute of the records ambiguously identified by the voice utterance that is the records having identifiers .

Creating a disambiguation grammar according to the method of includes identifying an attribute type for the records ambiguously identified by the voice utterance that specifies a unique value for each of the records ambiguously identified by the voice utterance. The multimodal application may identify an attribute type for the ambiguously identified records according to the method of by traversing through each type of attribute for the records having identifiers until an attribute type is located that has different values for each record identified by identifiers . The order in which the attribute types are traversed may be determined by the physical layout of the records in the storage medium by priority values associated with each attribute type and so on. For example consider again the exemplary data repository above having four exemplary records and the user provided a voice utterance that specified the homophonic set Chris and Cris. The ambiguously identified record identifiers for such an example specify the following records 

Further consider that the multimodal application creates a disambiguation grammar giving first priority to the last name attribute for each ambiguously identified record and second priority to job attribute for each ambiguously identified record. When the multimodal application traverses the last name attribute for the records above the multimodal application determines that none of the last name attributes have different values. The multimodal application then traverses the job attribute for each ambiguously identified record above and determines that the job attribute for each record contains different values namely Engineer and Accountant. Accordingly the multimodal application identifies the job attribute as an attribute type that specifies a unique value for each of the ambiguously identified records. Readers will note that the exemplary ambiguously identified records and identified attribute type above are for explanation only and not for limitation.

Creating a disambiguation grammar according to the method of also includes creating the disambiguation grammar in dependence upon the record attributes of the identified attribute type for the records ambiguously identified by the voice utterance. The multimodal application may create the disambiguation grammar in dependence upon the record attributes of the identified attribute type according to the method of by invoking an ECMAScript that parses the attribute values of the attribute type for the ambiguously identified records specified by identifiers and inserts the parsed values in a grammar template which in turn is inserted into a VoiceXML form template. For example consider the following exemplary ECMAScript that may be included in the header of the exemplary multimodal application described above 

Readers will recall from above that the exemplary multimodal application listed above invokes the createDisambiguateForm function when a user initially provides a voice utterance that ambiguously specifies Chris or Cris. The createDisambiguateForm function at line of the exemplary ECMAScript above invokes the createFormTxt function at lines that generates the text for the VoiceXML form disambiguate at lines of the exemplary multimodal application above. The createFormTxt function parses the attribute values of the attribute type job for the ambiguously identified records specified by identifiers and inserts the parsed values in a grammar template which in turn is inserted into a VoiceXML form template specified by the createVxmlFormContent function.

An exemplary disambiguate VoiceXML form that results from the ECMAScript above may include the following exemplary VoiceXML form 

The method of continues as the multimodal application generates a user interaction to disambiguate the ambiguously identified records according to the method of by prompting the user to disambiguate the records ambiguously identified by the voice utterance . The multimodal application may prompt the user to disambiguate the ambiguously identified records according to the method of by rendering a VoiceXML element such as for example the following exemplary VoiceXML element from the exemplary disambiguate VoiceXML form above 

The multimodal application may pass the exemplary VoiceXML element above to a voice interpreter which in turn passes the prompt to a speech engine that generates a synthesized speech representation of the prompt. The speech engine then returns the synthesized speech to the multimodal application and the multimodal application plays the synthesized speech to the user through the multimodal device s speakers which prompts the user to provide a response. Readers will note that the exemplary prompt above is for explanation only and not for limitation.

The multimodal application also generates a user interaction to disambiguate the ambiguously identified records according to the method of by receiving in response to the disambiguation prompt a second voice utterance from the user. The multimodal application may receive a second voice utterance from the user according to the method of by recording a speech waveform through a microphone and digitizing and encoding the speech waveform for speech recognition using a codec implemented in the multimodal device.

The multimodal application further generates a user interaction to disambiguate the ambiguously identified records according to the method of by determining using a speech recognition engine a recognition result in dependence upon the second voice utterance and the disambiguation grammar . The multimodal application may determine a recognition result in dependence upon the second voice utterance and the disambiguation grammar according to the method of by passing the second voice utterance and the disambiguation grammar to the speech engine through a voice interpreter and receiving in response the recognition results in an ECMAScript data structure such as for example the application.lastresult array.

Turning back to the method of includes selecting by the multimodal application for further processing one of the records ambiguously identified by the voice utterance in dependence upon the user interaction . As described with reference to the user interaction yields a recognition result from a second voice utterance . The multimodal application may select for further processing one of the records ambiguously identified by the voice utterance according to the method of by identifying one of the records ambiguously identified by the voice utterance in dependence upon the recognition result determined from the second voice utterance received during the user interaction . The multimodal application may identify one of the ambiguously identified records specified using identifiers by traversing each of these records for a record having an attribute value that matches the recognition results from the second utterance and recording the identifier for the record having an attribute value that matches the recognition results from the second utterance . The multimodal application may then reference the record using the record identifier to access the record for further processes such as for example displaying the record information sending an email based on the record information performing a financial transaction based on the record information and so on.

Exemplary embodiments of the present invention are described largely in the context of a fully functional computer system for record disambiguation in a multimodal application operating on a multimodal device. Readers of skill in the art will recognize however that the present invention also may be embodied in a computer program product disposed on computer readable media for use with any suitable data processing system. Such computer readable media may be transmission media or recordable media for machine readable information including magnetic media optical media or other suitable media. Examples of recordable media include magnetic disks in hard drives or diskettes compact disks for optical drives magnetic tape and others as will occur to those of skill in the art. Examples of transmission media include telephone networks for voice communications and digital data communications networks such as for example Ethernets and networks that communicate with the Internet Protocol and the World Wide Web. Persons skilled in the art will immediately recognize that any computer system having suitable programming means will be capable of executing the steps of the method of the invention as embodied in a program product. Persons skilled in the art will recognize immediately that although some of the exemplary embodiments described in this specification are oriented to software installed and executing on computer hardware nevertheless alternative embodiments implemented as firmware or as hardware are well within the scope of the present invention.

It will be understood from the foregoing description that modifications and changes may be made in various embodiments of the present invention without departing from its true spirit. The descriptions in this specification are for purposes of illustration only and are not to be construed in a limiting sense. The scope of the present invention is limited only by the language of the following claims.

