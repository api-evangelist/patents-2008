---

title: Method, apparatus, and product for prohibiting unauthorized access of data stored on storage drives
abstract: A method, apparatus, and computer program product are disclosed in a data processing system for prohibiting unauthorized access of data that is stored on storage drives. Multiple logical partitions are generated. A different unique randomizer seed is associated with each one of the logical partitions. In response to one of the logical partitions needing to access a storage drive, the logical partition transmits a seed to the storage drive. The transmitted seed is associated with the one of the logical partitions. A transmitting one of the logical partitions is unable to transmit a seed that is other than a seed that is associated with the transmitting one of the logical partitions. The storage drive utilizes the transmitted seed to randomize and de-randomize data for the one of the logical partitions. Data randomized for one of the logical partitions cannot be de-randomized for a different one of the logical partitions.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07865690&OS=07865690&RS=07865690
owner: International Business Machines Corporation
number: 07865690
owner_city: Armonk
owner_country: US
publication_date: 20081113
---
This application is a continuation of application Ser. No. 11 165 048 filed Jun. 23 2005 status allowed.

The invention relates to the field of data processing systems and more specifically to a method apparatus and product for prohibiting unauthorized access of data that is stored on storage drives.

As is well known to those of ordinary skill in the art certain binary sequences or patterns are to be avoided when writing binary data to a magnetic recording disk since these binary patterns stress the ability of the head disk interface to accurately position the magnetic transitions at the desired positions linearly along the track surface of the disk. In order to avoid these patterns it is known in the art to randomize data prior to writing the data to the disk. The data is then de randomized upon subsequently reading the randomized data from the disk.

In known storage drives a standardized seed is used by the storage drive when reading or writing data regardless of the process application or partition that requests the read write access. This seed is generated within the storage drive itself for use by the storage drive s randomizer de randomizer. When a request is received by the storage drive to write data the randomizer uses the storage drive s seed to randomize the data. The randomized data is then written to the storage drive. When a request is received by the storage drive to read data the de randomizer uses the same seed to de randomize the retrieved randomized data.

This same seed is used whenever a request to read or write is received. Therefore all applications and partitions that write data to the storage drive will have their data randomized using the same seed. Conversely when data is requested by any application to be read from the storage drive the requested data is de randomized using the same seed.

In the prior art the seed is selected by the storage drive. The seed is kept within the storage drive. The seed is not unique to any particular application process partition or operating system. Thus all data on the storage drive is randomized using the same seed. Therefore all of the data can be de randomized using the same seed.

The seed of the prior art is a method for eliminating read write errors when accessing a storage drive. The seed is not used as a security device to protect the data on the storage drive because any process can access the data by transmitting an access command to the storage drive.

Storage drives can be removed from one computer system and inserted into a different computer system where the data stored on the drive can then be accessed. This may be necessary in order to repair a drive. The drive may be removed from its computer system and then sent to a repair facility which then has access to the drive s data. Because the standardized seed is stored within the storage drive once the drive is removed its data can be accessed and is not protected. In order to access the data on a typical drive an appropriate access command is sent to the drive. The drive then uses the standardized seed that is stored in the drive to de randomize the data that is stored on the drive. Thus the data on a drive that is inserted into a different computer system can be easily accessed.

The ability to protect a data processing system is limited by the manner in which trust is created or rooted within the data processing system. To address the issues of protecting data processing systems a consortium of companies has formed the Trusted Computing Group TCG to develop and to promulgate open standards and specifications for trusted computing. According to the specifications of the Trusted Computing Group trust within a given data processing system or trust between a data processing system and another entity is based on the existence of a hardware component within the data processing system that has been termed the trusted platform module TPM .

A need exists for a method apparatus and computer program product for prohibiting unauthorized access of data that is stored on storage drives.

A method apparatus and computer program product are disclosed in a data processing system for prohibiting unauthorized access of data that is stored on storage drives. Multiple logical partitions are generated. A different unique randomizer seed is generated within a host computer system and associated with each one of the logical partitions. In response to one of the logical partitions needing to access a storage drive the logical partition transmits a seed to the storage drive. The transmitted seed is associated with the one of the logical partitions. A transmitting one of the logical partitions is unable to transmit a seed that is other than a seed that is associated with the transmitting one of the logical partitions. Thus a logical partition is capable of transmitting only the seed that is associated with that logical partition and is not capable of transmitting a seed that is associated with another logical partition. The storage drive utilizes the transmitted seed to randomize and de randomize data for the one of the logical partitions. Data randomized for one of the logical partitions cannot be de randomized for a different one of the logical partitions. In this manner the present invention protects the data of one logical partition in a computer system from access by other logical partitions.

In addition to protecting a logical partition s data from other logical partitions the present invention also protects the data that is stored on a drive from unauthorized access when that drive is removed from its computer system. Because randomizer seed are not stored within the drive itself the data that is stored in the drive cannot be accessed by unauthorized processes and or partitions when the drive is removed. Only the logical partition that has the randomizer seed that was used to randomize data that is stored on the drive can later access that data.

The above as well as additional objectives features and advantages of the present invention will become apparent in the following detailed written description.

A preferred embodiment of the present invention and its advantages are better understood by referring to the figures like numerals being used for like and corresponding parts of the accompanying figures.

The present invention is a method apparatus and computer program product in a data processing system for prohibiting unauthorized access of data that is stored on storage drives. A different unique randomizer seed is generated for and associated with each one of a plurality of logical partitions. The different randomizer seeds are maintained within a secure device in a host computer system to which a storage drive is coupled.

When an application within a logical partition needs to either read data from or write data to the storage drive the application sends the appropriate data access request. The operating system in that logical partition then retrieves a copy of the seed that is associated with the logical partition. The operating system is permitted to retrieve only the seed that is associated with the operating system s logical partition. The operating system then transmits a command that includes the seed to the storage drive. Thereafter the operating system will transmit the application s data access request.

The storage controller in the storage drive will receive the seed and use it to either de randomize data retrieved from the disk in response to a read or randomize data that is to be stored on the disk in response to a write.

The present invention protects the data that is stored on the storage drive from unauthorized access. Data that is stored on the drive can be accessed only by the logical partition that originally stored the data on the drive. The randomizer seed that is associated with the logical partition that originally stored the data on the drive must be used in order to de randomize the randomized data.

In this manner the data that is stored by one logical partition is protected from being accessed by any other logical partition. A logical partition has access to only its own randomizer seed. A logical partition cannot access the randomizer seeds of any other logical partitions. Therefore logical partitions that exist within the same computer system cannot access data that was stored by a different logical partition.

In addition the present invention protects the data even when the storage drive is removed from its computer system. All of the randomizer seeds used to randomize data that is stored on the drive are stored in the host system. No randomizer seed used to randomize data that is stored on the drive is stored on the drive. Therefore when the storage drive is removed from its computer system and inserted into a new computer system the new computer system will not have access to the randomizer seeds that were used to randomize the data that is stored on the drive. Thus unauthorized users or processes cannot gain access to the data that is stored on the drive.

In the depicted example distributed data processing system may include the Internet with network representing a worldwide collection of networks and gateways that use various protocols to communicate with one another such as Lightweight Directory Access Protocol LDAP Transport Control Protocol Internet Protocol TCP IP Hypertext Transport Protocol HTTP Wireless Application Protocol WAP etc. Of course distributed data processing system may also include a number of different types of networks such as for example an intranet a local area network LAN or a wide area network WAN . For example server directly supports client and network which incorporates wireless communication links. Network enabled phone connects to network through wireless link and PDA connects to network through wireless link . Phone and PDA can also directly transfer data between themselves across wireless link using an appropriate technology such as Bluetooth wireless technology to create so called personal area networks PAN or personal ad hoc networks. In a similar manner PDA can transfer data to PDA via wireless communication link .

Those of ordinary skill in the art will appreciate that the hardware in may vary depending on the system implementation. For example the system may have one or more processors such as an Intel Pentium based processor and a digital signal processor DSP and one or more types of volatile and non volatile memory. Other peripheral devices may be used in addition to or in place of the hardware depicted in . The depicted examples are not meant to imply architectural limitations with respect to the present invention.

The present invention could be implemented on a variety of hardware platforms and computational environments and are intended as examples of a heterogeneous computing environment and not as architectural limitations for the present invention.

In addition to being able to be implemented on a variety of hardware platforms and computational environments the present invention may be implemented in a variety of software environments. A typical operating system may be used to control program execution within each data processing system. For example one device may run a Unix operating system while another device contains a simple Java runtime environment. A representative computer platform may include a browser which is a well known software application for accessing hypertext documents in a variety of formats such as graphic files word processing files Extensible Markup Language XML Hypertext Markup Language HTML Handheld Device Markup Language HDML Wireless Markup Language WML and various other formats and types of files.

Read write channel includes a write channel that includes randomizer and a read channel that includes de randomizer . When storage drive controller receives a Persistent Reserve Command PRC storage drive controller will extract a seed from the PRC. This seed was inserted into the PRC by the logical partition that transmitted the PRC. The seed inserted by the logical partition is the seed that the partition retrieved from a secure device such as a trusted platform module TPM . A logical partition is permitted to retrieve a copy of the seed that was generated for and associated with that logical partition. A logical partition is not permitted to access and or receive a copy of another logical partition s seed.

When storage drive controller receives a PRC storage drive controller extracts the seed from the PRC and provides the seed to read write channel . Thereafter storage drive will receive an access command from the same logical partition.

When this access command is a write command storage randomizer uses the extracted seed to randomize the data that is included in the write command to be written to disk platters .

When this access command is a read command storage de randomizer uses the extracted seed to attempt to de randomize the randomized data requested to be read from disk platters . If this same logical partition wrote this data to storage drive de randomizer will be able to de randomize the data using the extracted seed. If another logical partition wrote the data de randomizer will not be able to de randomize the data using the extracted seed because the other logical partition s seed was used to randomize the data.

Partitioned hardware includes a plurality of processors a plurality of system memory units a plurality of input output I O adapters and a storage unit . Each of the processors memory units NVRAM storage and I O adapters may be assigned to one of multiple partitions .

Hypervisor is responsible for partitioning the primary platform . Partition management firmware hypervisor performs a number of functions and services for partitions to create and enforce the partitioning of logically partitioned primary platform . Hypervisor is a firmware implemented virtual machine identical to the underlying hardware. Firmware is software stored in a memory chip that holds its content without electrical power such as for example read only memory ROM programmable ROM PROM erasable programmable ROM EPROM electrically erasable programmable ROM EEPROM and non volatile random access memory non volatile RAM . Thus hypervisor allows the simultaneous execution of independent OS images by virtualizing all the hardware resources of logically partitioned platform . Hypervisor may attach I O devices through I O adapters to single virtual machines in an exclusive mode for use by one of OS images .

Data processing system includes service processor . A service processor is a separate hardware partition within system that executes its own operating system.

A trusted building block which includes one or more hardware trusted platform modules may also be included within platform .

A TBB comprises the combination of the core root of trust for measurement CRTM component a secure device such as a trusted platform module TPM the connection of the CRTM to motherboard and the connection of the TPM to motherboard . For example TBB includes TPM and CRTM .

A TBB provides trust to one of the platforms of system . A TBB includes its own CRTM. A CRTM is an immutable portion of a platform s initialization code that executes upon a platform reset. This is the platform for which the TBB that includes the CRTM provides its services.

The platform s execution must begin at the CRTM upon any platform reset event. In this manner the trust in the platform is based on the CRTM and the behavior of the TPM and the trust in all measurements is based on the integrity of the CRTM.

For example the BIOS may be assumed to include a BIOS Boot Block and POST BIOS each of these are independent components that can be updated independent of each other wherein the manufacturer must control the update modification and maintenance of the BIOS Boot Block but a third party supplier may update modify or maintain the POST BIOS component. In the example that is shown in CRTM may be assumed to be the BIOS Boot Block and the POST BIOS is a measured component of the chain of trust. Alternatively the CRTM may comprise the entire BIOS.

The software components may be received through a network such as network that is shown in or they may be stored e.g. on hard disk . Platform receives electrical power from power supply for executing the software components on add on cards and motherboard which includes typical components for executing software such as CPU and memory although motherboard may include multiple CPUs. Interfaces connect motherboard to other hardware components within system and firmware contains POST BIOS power on self test basic input output system .

Trusted platform module comprises input output component which manages information flow over communications bus by performing appropriate protocol encoding decoding operations and routing of messages to appropriate components. Cryptographic co processor performs cryptographic operations within a trusted platform module. Key generator creates symmetric keys and RSA asymmetric cryptographic key pairs. HMAC engine performs HMAC Keyed Hashing for Message Authentication calculations whereby message authentication codes are computed using secret keys as integrity checks to validate information transmitted between two parties e.g. in accordance with Krawczyk et al. HMAC Keyed Hashing for Message Authentication Request for Comments RFC 2104 Internet Engineering Task Force IETF February 1997.

Random number generator acts as a source of randomness for the computation of various values such as nonces keys or other values. SHA 1 engine implements the SHA 1 hash algorithm. Power detector manages the power states of a trusted platform module in association with the power states of the platform. Opt in component maintains the state of persistent and volatile flags and enforces semantics associated with those flags such that the trusted platform module may be enabled and disabled. Execution engine runs program code to execute commands that the trust platform module receives through input output component . Non volatile memory stores persistent identity and state associated with the trusted platform module the non volatile memory may store static data items but is also available for storing dynamic data items by entities that are authorized by the trusted platform module owner whereas volatile memory stores dynamic data items.

Encryption keys are stored within TPM . Various encryption keys may be utilized by TPM in order to authenticate another device and or to communicate with another device. Although encryption keys are depicted separately from the other components of the TPM the various encryption keys will typically be stored in non volatile memory .

According to the present invention a separate unique randomizer seed is stored in keys for each logical partition. For example a randomizer seed is associated with logical partition LPAR . A randomizer seed is associated with logical partition LPAR . A randomizer seed is associated with logical partition LPAR . A randomizer seed is associated with logical partition LPAR . A randomizer seed is associated with logical partition LPAR . A randomizer seed is associated with logical partition LPAR . Randomizer seeds are each unique and different from each other.

A copy of a randomizer seed may be obtained from the TPM by only that logical partition that is associated with the particular randomizer seed. For example only logical partition can get a copy of seed . None of the other logical partitions can get a copy of that seed.

Each LPAR includes a virtual TPM which includes a TCG software stack TSS and a TPM device driver TPMDD . Each virtual TPM is generated for a logical partition by the hypervisor. For example LPAR includes TSS and TPMDD while LPAR includes TSS and TPMDD . The other LPARs also include a virtual TPM that includes its own TSS and TPMDD that are not depicted. TSS and TSS implement the specification of the host programming interfaces that an operating system an application or other software component utilizes to interface with a TPM. TSS comprises the TSS service provider to which an entity may interface via common application programming interfaces APIs the TSS core services which provides centralized management of key storage contexts and handles the direct interaction with the TPM on the host and the TPM device driver library and the TPMDD such as TPMDD or TPMDD . Generally all interfacing to the TPM occurs through TSS service provider interface TSPI or an API above the TSPI.

Hypervisor is firmware that is responsible for creating and enforcing the partitioning of platform among the various partitions. Hypervisor provides a set of firmware services to the operating system in each partition so that interference between operating system images is prevented. Each partition includes an operating system executing in that partition that may be the same as or different from the operating system that is executing in the other logical partitions. Hypervisor manages the logical partitions and allocates and manages the physical devices that are allocated to each partition.

Block then illustrates a determination of whether the command is a read or write command. If a determination is made that the command is a write command the process passes to block which illustrates the randomizer randomizing using the standardized seed that was generated by the storage drive the data included in the write command. Thereafter block depicts the randomized data being stored on the drive. The process then terminates as illustrated by block .

Referring again to block if a determination is made that the command is a read command the process passes to block which illustrates the read channel retrieving the data specified in the read command from the drive. The data was randomized using the standardized seed. Next block depicts the de randomizer of the read channel de randomizing the data using the standardized seed. This randomizer seed is retrieved from within the storage drive. Thus the storage drive itself maintains the seed that is necessary to de randomize data that is stored on its disk. In this manner if the storage drive is removed from the host computer any other host computer system can read the data that is stored on the disk because the seed that is necessary to de randomize the stored data is included within the drive itself. Block then illustrates the storage controller sending the de randomized data to the requester. The process then terminates as depicted by block .

The process of is executed any time any application operating system process and or logical partition needs to either read data from or write data to the storage drive. Thus the same randomizer seed is used within the storage drive regardless of the identity of the requester. Further all data that is stored on the storage drive is randomized using the same randomizer seed.

The process then passes to block which illustrates the partition s operating system retrieving the seed that is associated with this partition. The seed is requested and retrieved from the TPM. The logical partition can retrieve only its own seed from the TPM. Next block depicts the operating system generating a Persistent Reserve Command PRC and inserting the seed into the PRC.

The following tables include a definition for a PRC that can be used according to the present invention.

Hard drives use the extent Reservation which means that specific ranges of LBA can be reserved by an initiator.

Block then illustrates the operating system transmitting the PRC including the seed to the drive s storage controller. Thereafter block depicts a determination of whether the command is a read command or a write command. If a determination is made that the command is a read command the process passes to block which illustrates the operating system sending the application s read command to the drive s storage controller. The process then terminates as depicted by block . Referring again to block if a determination is made that the command is a write command the process passes to block which illustrates the operating system sending the application s write command to the drive s storage controller. The write command includes un encrypted and non randomized data to be written to the drive. The process then terminates as depicted by block .

Block then illustrates a determination of whether or not the command is a read command or a write command. If a determination is made that the command is a write command the process passes to block which depicts the randomizer in the write channel receiving the seed that was included in the PRC command. Thereafter block illustrates the storage controller receiving the un encrypted non randomized data that is to be written to the drive. This un encrypted non randomized data is included in the write command. The process then passes to block which depicts the randomizer randomizing the data using the seed that was included in the PRC command. Once the seed is used it is not kept within the drive. Thus the storage drive includes no stored randomizer seed that was used to randomize data this is stored on the drive. Next block illustrates the randomized data being written to the disk. The process then terminates as depicted by block .

Referring again to block if a determination is made that the command is a read command the process passes to block which depicts the de randomizer in the read channel receiving the seed that was included in the PRC command. Next block illustrates the read channel retrieving the data from the drive that was specified in the read command. This data was randomized before it was stored in the drive.

Block then depicts the de randomizer attempting to de randomize the data using the seed that was included in the PRC command. Once the seed is used it is not kept within the drive. Thereafter block illustrates a determination of whether or not the de randomizer was able to the de randomize the data using the seed that was included in the PRC command. If the same partition caused this data to be stored in the drive the de randomizer will be able to de randomize the data with the seed received in the PRC because this partition will have sent the same seed used to randomize the data. If a different partition caused this data to be stored in the drive the de randomizer will not be able to de randomize the data with the seed received in the PRC because this partition will have sent a different seed from the seed that used to randomize the data. If a determination is made that the de randomizer was not able to de randomize the data the process passes to block which depicts sending an error message to the requesting partition. The process then terminates as illustrated by block .

Referring again to block if a determination is made that the de randomizer was able to de randomize the data the process passes to block which depicts the storage controller sending the de randomized data to the requesting partition. The process then terminates as illustrated by block .

The invention can take the form of an entirely hardware embodiment an entirely software embodiment or an embodiment containing both hardware and software elements. In a preferred embodiment the invention is implemented in software which includes but is not limited to firmware resident software microcode etc.

Furthermore the invention can take the form of a computer program product accessible from a computer usable or computer readable medium providing program code for use by or in connection with a computer or any instruction execution system. For the purposes of this description a computer usable or computer readable medium can be any apparatus that can contain or store the program for use by or in connection with the instruction execution system apparatus or device.

The medium can be an electronic magnetic optical or semiconductor system or apparatus or device . Examples of a computer readable medium include a semiconductor or solid state memory magnetic tape a removable computer diskette a random access memory RAM a read only memory ROM a rigid magnetic disk and an optical disk. Current examples of optical disks include compact disk read only memory CD ROM compact disk read write CD R W and DVD.

A data processing system suitable for storing and or executing program code will include at least one processor coupled directly or indirectly to memory elements through a system bus. The memory elements can include local memory employed during actual execution of the program code bulk storage and cache memories which provide temporary storage of at least some program code in order to reduce the number of times code must be retrieved from bulk storage during execution.

Input output or I O devices including but not limited to keyboards displays pointing devices etc. can be coupled to the system either directly or through intervening I O controllers.

Network adapters may also be coupled to the system to enable the data processing system to become coupled to other data processing systems or remote printers or storage devices through intervening private or public networks. Modems cable modem and Ethernet cards are just a few of the currently available types of network adapters.

It is important to note that while the present invention has been described in the context of a fully functioning data processing system those of ordinary skill in the art will appreciate that the processes of the present invention are capable of being distributed in the form of a computer readable medium of instructions and a variety of forms and that the present invention applies equally regardless of the particular type of signal bearing media actually used to carry out the distribution. Examples of computer readable media include recordable type media such as a floppy disk a hard disk drive a RAM CD ROMs DVD ROMs and transmission type media such as digital and analog communications links wired or wireless communications links using transmission forms such as for example radio frequency and light wave transmissions. The computer readable media may take the form of coded formats that are decoded for actual use in a particular data processing system.

The description of the present invention has been presented for purposes of illustration and description and is not intended to be exhaustive or limited to the invention in the form disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art. The embodiment was chosen and described in order to best explain the principles of the invention the practical application and to enable others of ordinary skill in the art to understand the invention for various embodiments with various modifications as are suited to the particular use contemplated.

