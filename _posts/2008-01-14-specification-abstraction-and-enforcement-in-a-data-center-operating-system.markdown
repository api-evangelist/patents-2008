---

title: Specification, abstraction, and enforcement in a data center operating system
abstract: An exemplary data center architecture includes a services abstraction, a data sources abstraction, an internal applications abstraction and a core administration abstraction for static and dynamic enforcement of data center polices based on compliance with a property set, a specification set or a property set and a specification set. Such an architecture can include a core administration abstraction with logic to install services and to upgrade services in a data center where a service must comply with the property set and the specification set prior to installation of the service or upgrade of the service in the data center. Various other devices, systems and methods are also described.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08468513&OS=08468513&RS=08468513
owner: Microsoft Corporation
number: 08468513
owner_city: Redmond
owner_country: US
publication_date: 20080114
---
Large scale data centers are a relatively new human artifact and their organization and structure has evolved rapidly as the commercial opportunities they provide has expanded. Typical modern data centers are organized collections of clusters of hardware running collections of standard software packages such as web servers database servers etc. interconnected by high speed networking routers and firewalls. The task of organizing these machines optimizing their configuration debugging errors in their configuration and installing and uninstalling software on the constituent machines is largely left to human operators.

Moreover because the Web services these data centers are supporting are also rapidly evolving for example a company might first offer a search service and then an email service and then a Map service etc. the structure and organization of the underlying data center architecture might need to be changed accordingly. This reorganization is also largely left to human architects to figure out. One problem data center operators currently face is deciding when a service being offered by a data center is no longer needed and can be turned off. The knowledge of why a piece of software is installed or what other software uses that software is largely maintained in the fragile memory of the human architects and operators.

Various exemplary technologies described herein pertain to architecture and management of data centers. Various technologies can address one or more of the aforementioned problems or other problems associated with data centers.

An exemplary data center architecture includes a services abstraction a data sources abstraction an internal applications abstraction and a core administration abstraction for static and dynamic enforcement of data center polices based on compliance with a property set a specification set or a property set and a specification set. Such an architecture can include a core administration abstraction with logic to install services and to upgrade services in a data center where a service must comply with the property set and the specification set prior to installation of the service or upgrade of the service in the data center. Various other devices systems and methods are also described.

As mentioned in the Background section various issues exist in management of data center operations. For example in the same way that software engineering researchers attempt to discover the architecture of complex software systems after the fact sometimes called software archaeology the organizing principles of large data centers may have evolved so much over time that even the architects themselves do not fully understand the organization of such a system.

Even more problematic for such systems is the inability of anyone associated with the system to be able to provide guarantees about specific properties beyond the most simple. For example without installing a hardware firewall it might be very difficult to guarantee that some subset of machines in a data center does communicate with another subset of machines.

As described herein various exemplary techniques apply principles of abstraction and specification to data center operation. An exemplary technique for data center organization includes a core administration component which can act as an operating system for an entire data center. Such an approach includes defining strong abstractions and using various techniques for specification static checking and runtime enforcement that can to some degree ensure that the specifications are met. An exemplary core administration component or module can provide at least some assurances without a need for human intervention.

An exemplary approach to data center management and organization uses strong abstractions declarative specifications and system properties and static and dynamic enforcement. In various examples a core administration module relies on strong abstractions and maintains properties and specifications for static and dynamic enforcement of policies. Such a core administration module can include automated tools to guarantee properties and ensure consistency and can include declarative configuration information to optimize data center performance.

In the example of the data center relies on abstractions. In particular abstractions include a core administration module that maintains a property set and a specification set as well as services data sources and internal applications layer . In this arrangement the core administration module may be referred to as a kernel somewhat analogous to a kernel of a single computer operating system.

With respect to abstractions the core administration module functions as a data center OS for example implemented on a machine or cluster of machines which are designed as the secure base of the entire data center . This machine or machines is responsible for managing services resources and applications layer that run in the data center . The core administration module is the entity that is responsible for owning checking and enforcing the properties and specifications that form the basis for the data center management.

The services can be one or more services where a service can be a set of APIs that allow external clients e.g. users to request functionality from the data center . A service may be APIs provided by databases e.g. queries mail and Web servers.

The data sources maintain data accessible by the services . Data sources can include traditional file systems databases mail repositories etc. A data center may have multiple tiers with for example a front end tier an external facing part of the data center implemented as stateless Web servers and a back end tier containing all the state e.g. customer info product data account information etc. .

As shown in the core administration module relies on a property set and a specification set . Most services require some data sources for their function. An email service requires access to an email repository. A Web server has to have page content to post. Such dependencies can be categorized along familiar lines e.g. read only read write as well as partial dependencies can be specified e.g. an HTML service has read only permission only to a group records in a specified records database . While the services block represents particular types of services in general the term service can refer to various components of a data center including data sources internal applications runtimes etc.

One or more of the services can depend on other services and sometimes on services offered by other data centers. Such dependencies can be described in a declarative specification e.g. the specification set written in a formal language that can be checked using automatic static analysis techniques. The language that describes these dependences can be quite rich yet still optionally implemented using conventional techniques to both describe and check dependences between program modules. A specification can be alternatively implemented in a purely operational not declarative manner for example where compliance checking occurs at runtime. In yet another alternative a specification may rely on a combination of a declarative specification and an operational runtime specification.

With respect to an operational specification such a specification may be implemented as code in an appropriate language that allows for checking to occur at runtime. Such an approach provides a form of abstraction and enforcement that can be programmed to output any of a variety of information to help manage a data center.

The internal applications layer can be used by a data center owner for example to manipulate data in the data center . The internal applications layer may include applications to extract information about stored data. For example a search data center will process its large collection of stored Web pages to build indices. The internal applications layer can include applications like those associated with a traditional operating system and can be supported by an application runtime that allows them to extract process and generate new data with support for scalability fault tolerance etc.

In the example of which is described in more detail further below the internal applications layer includes a data transformation application and a data center runtime library . The data transformation application may transform data in the mail database for any of a variety of purposes. The data center runtime library is a library used by data center internal applications such as the data transformation application to support their execution. The DC runtime library may provide mechanisms that allow data center internal applications to access data distributed across machines in a data center handle cases where specific sub jobs of a large data transformation operation fail and possibly load balance work across multiple machines in a data center.

The internal applications layer can have some of the services and or data sources serve as inputs while other of the data sources might be outputs. For example an internal application might read all messages in an email database and generate a list of senders of that email which is then made available as a file in a shared filesystem. Just as with the services the behavior of the internal applications layer can be specified using formal methods and conformance can be checked either statically or dynamically. For example an exemplary data center may specify the following No internal application can take a Records Database as a source and produce a result stored in a Shared Files repository. 

The users include a professor and three students and where the professor and the students and have different types of accounts or permissions with respect to the data center .

The services include an administrative service an email service an HTML service e.g. Web page service and a remote file service . These services are visible to external users as for example email Web pages remote files and a remote administrative service that can be used by professors to update the student records enter grades etc.

In the example of data sources include a student records data source an HTML files data source a mail DB and a shared file system . Each of the services and is associated with a respective data source and .

Some of the data sources are optionally used by different services. Consider the specific case where the remote file service has not been created yet. An exemplary method can include adding of a remote file service. A description of such a method is given further below which helps to illustrate the types of issues addressed when a new service is added.

As mentioned the core administration module maintains a property set and a specification set of all the specifications of the installed services internal applications data sources etc. Whenever the data center configuration changes the module can check that the specification set remains internally consistent e.g. that removing a data source does not prevent a service that requires it from functioning .

With respect to the property set this set describes properties that the data center administrators have deemed important. These properties form the basis for managing the data center and for example allowing automated tools to guarantee that the entire data center remains consistent with respect to issues related to security privacy reliability and performance.

While various examples described herein list properties in terms of English language in practice these would be specified in an unambiguous formal language that can be automatically checked against a specification using for example automated proof techniques such as theorem proving and model checking.

In the example of properties to enforce can include Users of the remote file service cannot access the Student Records Database The Student Records Database is only accessible from the Admin service and from no other service Data center applications such as data transformation application which may include the data center runtime library never have the Student Records Database as a source .

Examples of more complex policies related to partial service installation include A partially installed service upgrade always returns the same results on existing requests as the original service A partially installed service upgrade never modifies permanent data when its results differ from the results of the original service . and describe additional examples of partial operations.

While the example of clearly shows what services use what data sources in a real data center answering such a simple question can be a difficult task. Each of the services typically involves thousand of lines of code and what sockets this code connects to using what protocols often can only be determined by inspecting all of the code. Because code may be loaded dynamically at runtime often it is difficult to be completely certain via static inspection whether a particular program makes a specific call to a system function.

It is not unusual that when a new service is added e.g. the Remote File Service data center operators guess at the impact of the addition on other services and then see what happens. In the example of because HTML files can be accessed either for reading or writing assuming the HTML service is being used largely to post web pages the file system in which the HTML files are stored may experience increased load. Furthermore because access to web pages is mostly read only the write traffic from those files from the Remote File Service might cause substantial performance bottlenecks not seen before.

Another major concern when a new service is added is that it might directly or indirectly provide access to data that should not be accessible. Accordingly the exemplary core administration module can provide strong guarantees that the Remote File Service cannot under any circumstances access the Student Records database . In contrast most current organizational approaches only allow this kind of guarantee by using hardware isolation e.g. placing them on physically disconnected networks .

The exemplary data center relies on the definition of several abstractions. With these abstractions a data center can be defined in terms of formally defined and verifiable specifications which can be enforced either statically or at runtime. By having access to declarative information data center implementation itself can be automatically optimized and reconfigured without human intervention based on how the configuration changes over time.

The description that follows pertains to inter data center operations management of connections in a data center partial operations with respect to data center resources and a computing environment that can be used in a data center .

The module includes a blanket policy for data integrity a policy for CPU use a policy for data access a policy for resource rental and one or more other policies . The policy can maintain data integrity by prohibiting inter data center writing of data. For example the data center may access data in data center but not write data or overwrite data to the data center . The policy allows one data center to request and use CPU resources in another data center. The policy pertains to data security and requires encryption for data access e.g. data transmission . The policy may operate in conjunction with one or more other policies and may provide terms for cost of resources time of resource rental etc.

With respect to policies a policy may be included for any of a variety of resources that need to be or benefit from being constrained and or managed. For example one or more policies may apply to resources such as disk space network or I O bandwidth memory usage etc.

According to the method in a reception block the core administration module receives the API call . In an access block the core administration module accesses the list of allowed connections. A decision block follows where the core administration module decides if the API call requested a connection that is in the list . If the decision block decides that the connection is not in the list then the method enters a send block that sends a message to the service e.g. Refused Connection Not Allowed . However if the connection is allowed then the method enters a permission block that permits the service i.e. one of the services connection to the data source connection .

An exemplary core administration module can enforce compliance with a specification. More specifically with the foregoing abstractions and organization a data center can be managed in a manner e.g. in an automatic fashion without any operator intervention that guarantees that the specification set is internally consistent and that the properties in the property set are not violated are maintained.

Such guarantees can be automated with a two step approach. First as much as possible the specifications and properties can be statically checked whenever a change is made to configuration of a data center. Since code that implements a service while the term service makes this discussion more concrete the same process applies to most any data center entity may violate a formal specification static checking may require static analysis tools that verify the properties of the implementation itself and determine automatically that the code obeys the specification. Such an analysis is easier to do if the code that implements the service is written in a type safe programming language executing in a managed runtime such as C CLR . In some instances it may not be possible for static analysis to guarantee that the service implementation conforms to the specification in which case the specification can be enforced with checks at runtime.

Referring again to the system and method if a service is written in C or C it may be difficult to determine if that code ever establishes a TCP connection with a port on some other computer in the data center. If this is the case runtime enforcement would require that whenever that service attempted to make a connection by issuing the CA API call the target of the connection would be checked to determine if it was in the list of allowed connections as specified by the service specification. If the target was not on the list the connection would be refused and the service may fail see e.g. send block . Operators observing this failure would either have to modify the specification of the service or modify the implementation of the service before it would be allowed to execute.

In an exemplary data center isolation between services etc. can be enforced via a specification and can be optionally enforced with hardware support in the form of firewalls. Noting that with a well defined specification the implementation of inter service isolation can be implemented with a combination of hardware software runtime checks and through static analysis. Moreover because the specifications and properties can be formally defined more complex isolation guarantees can be confidently specified and automatically enforced than is possible using operator configured firewall isolation techniques.

As mentioned an exemplary core administration module provides for partial operations. shows an exemplary core administration module with a core administration lifecycle operations component . This component may include an install module an upgrade module and an uninstall module . As indicated in each of these modules may provide for partial operations for example the install module may install a service in less than all machines in a data center. In addition the core administration module includes an information store that maintains information on installed components such as services data sources and internal applications . For example if a call is made to the upgrade module of the core administration module to upgrade one of the services then the core administration module may consult the information to determine the extent of current installation of the service as well as how the service relies on the specification. With respect to the latter upon installation of a service the core administration module can perform a check and the results of this check may be stored to indicate what portions of the specification were relied on by the service.

The arrangement of relies on well defined abstractions for various data center entities where the core administration module controls these entities. In such an arrangement it is possible to more precisely define and check whether the entities meet a declarative specification.

With respect to a lifecycle the lifecycle of an entity can include an initial introduction installed modification upgrade and removal uninstalled . Because data centers offer services and data sources to a large number of clients simultaneously the partial modifier is added to the lifecycle abstractions e.g. to define partial install partial upgrade and partial uninstall . An entity is partially installed when it is made available in the data center only to a fraction of the total number of data center clients. Often data centers deploy upgrades by offering new services to only a fraction of their clients for example as a form of beta testing. Partial upgrades are well defined abstractions that can be reasoned about in specifications just as regularly installed applications can.

Installing a service data source or internal application requires making that entity known to the core administration module and providing a specification for it which describes how it interacts with other parts of the data center what its dependencies are . When a service or other entity is upgraded its specification may change and just as with an installation the data center specification set can or must be checked to make sure that the rest of the data center remains consistent and the properties hold before the upgrade is allowed to proceed.

When an entity is uninstalled the data center specification set can or must be checked again to ensure that removing the entity for example a data source does not violate any other specifications or properties. For example removing a data source that other services use should not be allowed as the other services would fail to function without the data source present.

If the decision block decides that the entity does meet the specification then the method continues in another decision block that decides if partial installation is desired. If not then the method continues in a performance block that performs a full installation of the entity. If a partial installation is desired then another performance block performs a partial installation of the entity. A partial installation may occur based on a schedule e.g. time event etc. or information provided in a call to install. In either instance the method can continue at an update block that updates a core administration module. For example referring to the method can update the information for the core administration module .

The exemplary interface includes a specification graphic and an installation graphic . The specification graphic indicates whether the entity passed certain requirements e.g. S S . . . SN of the specification and the installation graphic indicates progress of installation e.g. on blocks B B . . . BN and whether installation occurred without error.

If the decision block decides that the entity does meet the specification then the method continues in another decision block that decides if the beta test is relying on a smart beta feature of the core administration module. For example a smart beta feature may preferentially install beta test code on particular machines where the machines may have similarities or differences that can help a tester assess beta performance. A smart beta feature may also install beta test code based in part on usage information. For example where high traffic volume is desired the core administration module can install beta test code on high volume machines or where slower testing is desired the beta test code may be installed on lower volume machines.

If smart beta is not desired then the method continues in an installation block that installs the beta entity for example to some select server blocks less than all server blocks . If a smart beta installation is desired then another installation block installs the beta entity according to some developer instructions or other smart criteria. In either instance a beta is typically not a fully installed and a partial beta installation may occur based on a schedule e.g. time event etc. or information provided in a call to install.

The exemplary interface includes a specification graphic and an installation graphic . The specification graphic indicates whether the beta entity passed certain requirements e.g. S S . . . SN of the specification and the installation graphic indicates progress of installation e.g. on blocks B B . . . BN and whether installation occurred without error. In the example of the specification graphic indicates that the beta entity did not pass part of the specification check. Hence as indicated by the installation graphic installation of the beta entity did not occur.

The check block checks the specification information of the service for example as generated during installation and or upgrade. Next an uninstallation block uninstalls the service based at least in part on the specification information.

A decision block decides whether to revert the data center to a prior configuration for example according to configuration information about the uninstalled service. If the decision block decides to not revert then an update block updates the configuration noting that the service has been uninstalled and that for example certain resources may be available or not available.

If the decision block decides to revert to a prior configuration then a reversion block performs the reversion. Depending on history of the service e.g. installation upgrade prior uninstallion etc. the reversion may be straightforward or more complex. Reversion may consider information about other entities that have been installed upgraded and or uninstalled.

The exemplary interface includes a configuration graphic and an uninstallation graphic . The configuration graphic lists a series of configurations which may be a set of configuration states historical configurations predicted optimal configurations etc. The uninstallation graphic indicates progress of installation e.g. on blocks B B . . . BN and whether uninstallation occurred without error and or whether uninstallation was necessary e.g. a partially installed service .

Various exemplary techniques described herein focus on data center properties that represent isolation guarantees and other correctness properties. Data center management based on declarative specifications can be optionally automatically re provisioned based on configuration information. For example when a new service is added to a data center that puts a large load on an existing data source with a declarative specification a core administration module can have enough information to automatically scale up the hardware resources devoted to the shared data source.

As described with respect to automatic re configuration can occur after a service is uninstalled. Without a formal specification it may not even be clear what data sources the service that is being uninstalled was using or how much capacity that service was consuming from the data sources. However with declarative specifications dependences are explicit and automated decisions may be made by a core administrative module. Further configuration information can be generated and stored when a service is installed upgraded and or uninstalled. As a result when a service is uninstalled a data center configuration can be reliably restored to a configuration it had before the service was installed.

In a very basic configuration computing device typically includes at least one processing unit and system memory . Depending on the exact configuration and type of computing device system memory may be volatile such as RAM non volatile such as ROM flash memory etc. or some combination of the two. System memory typically includes an operating system one or more program modules and may include program data . The operating system include a component based framework that supports components including properties and events objects inheritance polymorphism reflection and provides an object oriented component based application programming interface API such as that of the .NET Framework manufactured by Microsoft Corporation Redmond Wash. The device is of a very basic configuration demarcated by a dashed line . Again a terminal may have fewer components but will interact with a computing device that may have such a basic configuration.

Computing device may have additional features or functionality. For example computing device may also include additional data storage devices removable and or non removable such as for example magnetic disks optical disks or tape. Such additional storage is illustrated in by removable storage and non removable storage . Computer storage media may include volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. System memory removable storage and non removable storage are all examples of computer storage media. Computer storage media includes but is not limited to RAM ROM EEPROM flash memory or other memory technology CD ROM digital versatile disks DVD or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can be accessed by computing device . Any such computer storage media may be part of device . Computing device may also have input device s such as keyboard mouse pen voice input device touch input device etc. Output device s such as a display speakers printer etc. may also be included. These devices are well know in the art and need not be discussed at length here.

Computing device may also contain communication connections that allow the device to communicate with other computing devices such as over a network. Communication connections are one example of communication media. Communication media may typically be embodied by computer readable instructions data structures program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term modulated data signal means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example and not limitation communication media includes wired media such as a wired network or direct wired connection and wireless media such as acoustic RF infrared and other wireless media. The term computer readable media as used herein includes both storage media and communication media.

Although the subject matter has been described in language specific to structural features and or methodological acts it is to be understood that the subject matter defined in the appended claims is not necessarily limited to the specific features or acts described above. Rather the specific features and acts described above are disclosed as example forms of implementing the claims.

