---

title: Inter partition communication within a logical partitioned data processing system
abstract: Each of a plurality of partitions within a logical partitioned data processing system is configured for an inter partition communication area (IPCA) allocated from partition's own system memory. Each partition's IPCA combined together forms a non-contiguous block of memory which is treated as a virtual shared resource (VSR). Access to VSR is controlled by hypervisor to maintain data security and coherency of the non-shared resources of a partition. Messages are written to and read from VSR under a specific partition's IPCA for inter partition communication. No physical shared or non-shared resources are involved during inter partition communication, hence no extra overhead on those resources, thus achieving optimized performance during inter partition communication.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07921426&OS=07921426&RS=07921426
owner: International Business Machines Corporation
number: 07921426
owner_city: Armonk
owner_country: US
publication_date: 20080728
---
This application is a continuation of U.S. application Ser. No. 11 029 586 filed Jan. 4 2005 now U.S. Pat. No. 7 412 705 B2.

This invention relates generally to inter partition communication within a partitioned data processing system and more particularly to a method and structure for inter partition communication within a logical partitioned data processing system using virtualized shared resources under the control of a hypervisor.

In a data processing system with a plurality of partitions inter partition communication between the firmware and software of two partitions has been a challenge. This difficulty imposes a limitation on sharing vital information between the firmware and software of two different partitions. Further to that due to lack of well defined techniques for inter partition communication it also limits the firmware of two given partitions getting actively involved in the each other s error reporting and or recovery actions.

A method and apparatus to define inter partition communication using a virtualized shared memory resource such as a portion of a partition s own allocated memory is provided. The advantage of this technique is that there is virtually no limit imposed on the message size to be passed across the partitions. Further to that there is no association with the physical shared and non shared resources of the data processing system hence other critical operations needing such physical resources can run in parallel without additional overhead of inter partition communication on these resources. Also at run time resources can be reconfigured dynamically across partitions with ease or remapping can be accomplished in event of an error condition in one partition.

In a data processing system logical partitioning is frequently done. An example of logical partitioning is shown and described in application Ser. No. 10 112 483 filed Mar. 28 2002 entitled METHOD AND APPARATUS FOR BACKING UP AND RESTORING DATA FROM NON VOLATILE MEMORY now U.S. Pat. No. 6 934 879 B2 which is incorporated herein by reference. shows at a very high level the interposition of a hypervisor as used to control various partitions in a logical partitioned data processing system. Briefly a data processing system may have multiple heterogeneous operating systems or multiple instances of a single operating system running simultaneously under multiple logical partitions . Total system resources processors memory and PCI I O slots are logically assigned to these partitions in such a way that each partition contains a subset of total system resources. Each of these operating systems may have any number of software programs executing within it. A hypervisor program a very specialized program entrusted to carefully perform the operations is provided. The hypervisor program is normally stored in a system flash module in the server hardware. During system initialization the hypervisor is loaded into the first available physical address region of system memory by the boot firmware. The hypervisor program is trusted to create partition environments and is normally the only program that can directly access special processor registers and translation table entries. In conventional architecture partition programs have no way to access the hypervisor s instructions or data other than through controlled hypervisor service calls that are part of the processor architecture. These protections allow the hypervisor to perform its duties in a simple and rigorous manner resulting in the confinement of each operating system to a very tight inescapable box.

In short all access by processors and PCI I O adapters assigned to a partition are controlled by address relocation mechanisms and the mechanisms themselves cannot be tampered with by partition programs not even by firmware that runs inside the partitions.

Hypervisors and their use are well known in the art for example see LPAR Protection in Firmware in the article Logical Partition Security in the IBM eServer pSeries 690 which is incorporated herein by reference. It is to be understood however that the hypervisor is not limited to this particular IBM system. Each partition in the data processing system with a plurality of partitions has a block of total system memory assigned to it. Out of this system memory block assigned to a partition a portion of memory is reserved for inter partition communication. For example if partition has a block of system memory memory block e.g. 1 gigabyte assigned to it a small portion portion e.g. 128 megabytes is reserved for inter partition communication. This portion of memory is termed as Inter Partition Communication Area IPCA under partition or IPCA and the same for partitions . . . N. After such an assignment the base address of each IPCA . . . N is provided to hypervisor firmware. Each partition within the plurality of partitions reserves such IPCAs in its memory block and registers the base address of its own IPCA to hypervisor firmware.

A look up table TABLE 1 below is maintained containing all such base addresses of IPCAs defined in various partitions. It will be noted that TABLE 1 is constructed for an operating system that has four partitions however this is not to be construed as limiting since more or less than four partitions can be present. 

In this embodiment the sum of the non contiguous memory portions or IPCAs forming virtual shared resource VSR is being used for inter partition communication. Hypervisor firmware makes necessary adjustments such that total virtualized shared memory is accessible to all the partitions within a data processing system. Hypervisor also ensures that only the IPCA of a given partition is exposed to the rest of the partitions and no other part of that partition s memory. In a server environment Logical Partitioning Option LPAR allows multiple copies of a single operating system or multiple heterogeneous server compliant operating systems to be simultaneously run on a single platform. A partition within which an operating system image is running is assigned a non overlapping sub set of the platform s resources. These resources include one or more processors with their interrupt management regions of system memory and I O adapter bus slots.

Since the main purpose for partitioning is isolation of the operating systems the capability of managing real system resources that are common to all partitions is achieved through hypervisor rather than those resources being under direct control of a partition s operating system. Therefore a logical partitioning platform employs a firmware component called the hypervisor which runs in hypervisor mode to manage the address mapping and common platform hardware facilities thereby ensuring isolation between partitions and their resources. OS uses this hypervisor firmware interface to mange a partition s resources.

Apart from firmware component for logical partitioning hypervisor support is also provided from hardware as well. IBM s eServer platforms supporting LPAR contain PowerPC processors that support hypervisor addressing mode in which the physical address is equal to the effective address and all processor resources are available. The Real Mode addressing in these processors is defined in such a way to translate and limit the physical addresses that the processor can access and to restrict access to certain address translation controlling processor resources.

Referring now to a source partition partition X in data processing which needs to communicate to a destination partition partition Y of the data processing system requests the same through hypervisor. Hypervisor then looks for the base address of the partition Y s communication area IPCA Y. Hypervisor then provides necessary access to partition X for writing the messages into IPCA Y. An event scan routine within partition Y periodically checks for new messages under virtualized shared resource. On detection of a new message partition Y reads the message and takes a responsive action. If an output from the responsive action is to be communicated to partition X then partition Y initiates the communication process with partition X by repeating the same steps and delivering the message to partition X communication area IPCA X.

Referring now to which is a flow diagram of partition X reading the IPCA of partition Y partition X requests through hypervisor a read in an IPCA. The hypervisor looks up the base address of the IPCAs and all the addresses falling within the shared resources which are marked accessible. Partition X sends a read request with the I O destination. Hypervisor then checks to see if the address falls in the shared resources. If the address is not within the shared resources an error message is returned and the program is finished. If the address is within the shared resources access is granted and partition X reads the information in the IPCA assigned to partition Y.

Referring now to a flow chart for a partition to read its own IPCA for messages is shown. The partition polls its own IPCA for messages. Any old messages that have been read are deleted and then the IPCA is scanned for new messages. If no new messages are found the program is ended. If a new message is found the message source and content are read a responsive action to the message content is taken and the message is marked as read. A determination is made as to whether the source needs to be notified if not the program is ended and if so a write to the source partition s IPCA is made after which the program is ended

The hypervisor gets actively involved in the inter partition communication to ensure the transparency of virtualized shared resources and also to ensure the security of a non IPCA memory block within a partition. Hypervisor also ensures that no two partitions access the same IPCA in the virtualized shared resource simultaneously. Within this embodiment as many as N partitions N being the maximum number of partitions on a system can write to the virtualized shared resources simultaneously as long as those are accessing mutually exclusive IPCAs within VSR. Effectively messages are written to a destination partition s memory for an action utilizing virtualized shared resource hence response time on desired action is minimized.

In a data processing system with a plurality of partitions inter partition communication between the firmware and software of two partitions could be needed in multiple scenarios.

The actual invoking of a communication event can happen in multiple ways. For example in the case of dynamic resource configuration or in case of dynamic logical partitioning partition X may get an operating system initiated event indication through hypervisor that certain resources are being relocated from this partition X to another Partition Y. In those cases OS will inform the partition about the actual resource that is being moved along with the details of the partition to which it is going to be moved. Thus this will trigger a communication event between partition X and partition Y. Partition X will write to partition Y s IPCA or virtualized shared resource VSR to give and an indication to partition Y about what resource changes are going to occur.

Another case would be when various resources within a partition are over utilized due to increased work load from various running applications in that partition. In those cases via OS performance check routines partition will determine that system needs additional resources to increase performance. Based on receiving the need partition X will broadcast a message to all the other partitions to see if they have any underutilized resources which could dynamically be allocated to requesting partition partition X . Read event triggers can be derived from above text as well however it will be apparent that a read event of partition Y from partition X is not necessary but can be present since partition Y can read its own IPCA.

While the invention has been described in combination with specific embodiments thereof there are many alternatives modifications and variations that are likewise deemed to be within the scope thereof. Accordingly the invention is intended to embrace all such alternatives modifications and variations as fall within the spirit and scope of the present invention as defined and limited by the appended claims.

