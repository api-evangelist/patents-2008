---

title: File system operation and digital rights management (DRM)
abstract: File system interaction with digital rights management (DRM) is facilitated by enabling one or more file system components to be DRM-aware. These one or more file system components may be part of a computer operating system. An exemplary system implementation includes: one or more processors; and one or more media in operative communication therewith, the media storing one or more file system components that are configured to provide content having DRM controls to a requesting program in either a raw form or a decrypted form in dependence on whether the DRM controls comprise simple DRM content controls or complex DRM content controls. In another exemplary system implementation, the one or more file system components are configured to provide files with simple DRM content controls to requesting applications in a decrypted form and to provide files with complex DRM content controls to requesting applications in an unaltered form.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08117666&OS=08117666&RS=08117666
owner: Microsoft Corporation
number: 08117666
owner_city: Redmond
owner_country: US
publication_date: 20080602
---
This application is a divisional of U.S. Pat. No. 7 383 586 filed on Jan. 17 2003 and issued on Jun. 3 2008 which is incorporated herein by reference in its entirety.

This disclosure relates in general to digital rights management DRM and in particular by way of example but not limitation to enabling a file system component to be DRM aware and to be able to handle at least some DRM controlled content.

Computers are utilized in personal professional educational and other areas and fields to perform functions provide services and or facilitate access to content. Examples of such content include text audio images audiovisual or multimedia material executables some combination thereof and other content. Creators of much of this content often rely on intellectual property protections such as copyright to secure control and compensation for their works. However rights holders also usually wish to supplement these legal protections with technical protections. This is especially true of content that is in a digital form because digital content can be copied sold shared transferred viewed otherwise used etc. without undergoing any degradation. Consequently there is no natural technical based expiration or other limitation on digital content once it has been disseminated.

One technique for offering technical protections i.e. control over content is digital rights management DRM . DRM can limit for example a user s access to content. Such limitations may include for instance limiting the number of times content may be experienced limiting the number of transfers of content limiting the amount of time content may be experienced limiting allowable modifications to content and so forth. DRM may be implemented in any of a myriad of manners however any of these myriad of manners are generally intended to provide technical controls over content.

Computers typically employ application programs in order to provide the aforementioned functions services and content access. These application programs facilitate content viewing content modifying and content experiencing in general. Traditionally in order for DRM to be effective in controlling content use the application that is attempting to interact with DRM controlled content must be DRM aware and capable of enforcing DRM controls. This conventional approach to DRM may be effective for new applications being developed today for a DRM enabled world. Unfortunately there are many legacy applications that are already present on computers and that have no understanding of or ability to interact with DRM controlled content.

Accordingly there is a need for schemes and or techniques to enable legacy applications to interact with DRM controlled content.

File system interaction with digital rights management DRM is facilitated by enabling one or more file system components to be DRM aware. These one or more file system components may be for example part of a computer operating system. An exemplary system implementation for file operations and DRM includes one or more processors and one or more media in operative communication with the one or more processors the one or more media storing one or more file system components that are adapted to execute on the one or more processors and that are configured to provide content having DRM controls to a requesting program in either a raw form or a decrypted form in dependence on whether the DRM controls comprise simple DRM content controls or complex DRM content controls.

Another exemplary system implementation for file system operations and DRM includes one or more processors and one or more media in operative communication with the one or more processors the one or more media storing one or more file system components that are adapted to execute on the one or more processors and that are configured to provide files with simple DRM content controls to requesting applications in a decrypted form and to provide files with complex DRM content controls to requesting applications in an unaltered form.

An exemplary electronically accessible media implementation includes electronically executable instructions that when executed direct an electronic apparatus to perform actions including inspecting one or more DRM controls from a tag of DRM controlled content determining whether the one or more DRM controls are simple DRM controls and providing the DRM controlled content in a decrypted form when the one or more DRM controls are determined to be simple DRM controls wherein the actions of inspecting determining and providing are performed at least partly by one or more file system components.

File system component may be implemented as all or part of a file system of an operating system OS . For example it may be the entire file system of the OS or one or more device drivers thereof. It may also be realized as a middleware component. Program may be any application code software middleware etc. that attempts to access content with DRM control s .

In a described implementation content with DRM control s may be constrained by one or more DRM controls on the use of the content. As illustrated a tag indicates which DRM control or controls are applied to content . Tag may be any sort of tag or tags that may be associated with content . Examples of tag include a file header an alternate stream such as an NTFS alternate stream an application manifest and so forth.

DRM controls are divided into simple DRM controls and complex DRM controls . Simple or basic DRM controls include those DRM controls that can be enforced by a file system such as file system component . Thus simple DRM controls include for example those controls directed to read write and or modify.

Complex or rich DRM controls include those DRM controls that cannot be enforced by a file system. Complex DRM controls include for example no forwarding no printing allowing X reads allowing plays for Y days allowing reads without any modifications e.g. thus preventing save as functions and so forth. Although eight different DRM controls are all illustrated in tag any number of these or other possible DRM controls may alternatively be indicated in tag .

In operation program requests access to content with DRM control s . File system component inspects tag to see which DRM control s are applicable to content . If tag indicates that only one or more simple DRM controls constrain the use of content then file system component performs or causes to be performed DRM related functions. For example file system component decrypts e.g. directly decrypts or indirectly causes to be decrypted content with DRM control s . Additional exemplary DRM related functions are described below. After decryption of the content with DRM control s the decrypted content is provided to program .

If on the other hand tag indicates that one or more complex DRM controls constrain the use of content then file system component provides content with DRM control s to the requesting program in a raw state with all DRM protections in force e.g. still encrypted etc. .

Using approach to file system operation and DRM enables a number of possibilities. For example legacy applications that are not DRM aware may be given access to DRM controlled content in at least limited situations. For instance an anti virus program may access and review files having content with DRM control s even when the anti virus program cannot understand or does not wish to handle DRM controls on content. As another instance DRM controls can be used with legacy applications that have no innate understanding of DRM functionality to establish a group or groups that are permitted to access content with such legacy applications when the DRM control s on such content are simple DRM controls .

In a described implementation a non DRM aware application A and a DRM aware application B access one or more files through file system component . Files include multiple files . . . . File comprises content that is associated with simple DRM content controls . File comprises content that is associated with complex DRM content controls . Simple DRM content controls and complex DRM content controls may be indicated respectively for files and at for example a tag of the file and or the content thereof.

An application such as DRM aware application B may be considered DRM aware when it is capable of understanding and enforcing DRM controls of and on content and the files that include such content. Hence in the abstract DRM aware application B is capable of accessing files and and interacting with a DRM client so as to facilitate use of both file and file to the extent permitted by simple DRM content controls and complex DRM content controls respectively. Non DRM aware application A on the other hand is not capable of interacting with DRM client and is thus unable to access or use file or file absent intervention and aid by file system component .

In a described implementation file system component is capable of understanding and enforcing DRM controls of and on content and the files that include such content. Hence file system component is capable of interacting with DRM client so as to facilitate use of certain files that include DRM controlled content. In this sense file system component is DRM aware. For example file system component may have a manifest or other type of tag that delineates to DRM client what or which DRM controlled content file system component is permitted to access. However file system component is authorized from a DRM perspective to directly handle those files that include simple DRM content controls .

Operation of file system component along with certain other illustrated elements of approach is described in four 4 permutations in which each of non DRM aware application A and DRM aware application B each attempt to access file and file . In a first of the four described permutations non DRM aware application A attempts to access file with simple DRM content controls . When file system component receives a request for file file system component detects that file is protected with DRM content controls.

Specifically file system component detects that file is protected with simple DRM content controls . Because the content controls are simple DRM controls file system component acts on behalf of non DRM aware application A by interacting with DRM client . File system component provides an identity or user to DRM client . This identity or user may be representative of the human user of user computer and or the requesting application. Thus this identity may establish or define a user context for DRM.

DRM client uses communication link to contact license server . Communication link may be a wireless or wireline link a public or private network link a local or wide are network link some combination thereof and so forth. Furthermore communication link may be established using one or more of application protocol s remote procedure calls RPCs simple object access protocol SOAP messages and so forth. Additional examples of communications between two computers are described below with particular reference to .

Specifically DRM client contacts authorization provider component via communication link . DRM client forwards the identity to authorization provider which has access to licensing rights information . Authorization provider utilizes the forwarded identity context to reference information related thereto that is located in licensing rights information .

Authorization provider informs DRM client as to what rights have been granted to the identity. If the identity has rights to the DRM controlled content of file DRM client uses the appropriate key in accordance with DRM protocols to decrypt the content. File system component may then provide the decrypted content of file to non DRM aware application A . Any DRM controls of simple DRM content controls for file are enforceable by file system component as non DRM aware application A uses file .

In a second of the four described permutations non DRM aware application A attempts to access file with complex DRM content controls . When file system component receives a request for file file system component detects that file is protected with DRM content controls. Specifically file system component detects that file is protected with complex DRM content controls . Because the content controls are complex DRM controls file system component does not act on behalf of non DRM aware application A .

In other words file system component does not interact with DRM client if the requested file has complex DRM content controls . Instead file system component provides file to non DRM aware application A in an unaltered form. Because file is encrypted in accordance with DRM protocols and non DRM aware application A is not able to handle files with DRM controls non DRM aware application A is unable to access file and the DRM related protections for file are enforced as intended. Alternatively as described further below with particular reference to FIG. Element file system component may only provide file to applications that are validated as being properly DRM aware.

In a third of the four described permutations DRM aware application B attempts to access file with simple DRM content controls . When file system component receives a request for file file system component detects that file is protected with DRM content controls. Specifically file system component detects that file is protected with simple DRM content controls . Because the content controls are simple DRM controls file system component acts on behalf of DRM aware application B by interacting with DRM client .

As described above with respect to the first permutation DRM client eventually decrypts the content of file for file system component assuming that the current user identity context for DRM aware application B as provided to DRM client has the appropriate DRM related access rights. File system component may then provide the decrypted content of file to DRM aware application B . Any DRM controls of simple DRM content controls for file are enforceable by file system component as DRM aware application B uses file .

In an alternative implementation file system component may forward files with any DRM content controls and or to DRM aware application B in an unaltered form. This permits DRM aware application B to access such files and enforce any DRM controls without direct intervention by file system component . File system component may in such cases perform a check to determine whether an application is a DRM aware application B either as a matter of course or in response to an assertion by an application that it is DRM aware. This check may be accomplished using for example digital signatures of applications manifests of applications and so forth.

In a fourth of the four described permutations DRM aware application B attempts to access file with complex DRM content controls . When file system component receives a request for file file system component detects that file is protected with DRM content controls. Specifically file system component detects that file is protected with complex DRM content controls . Because the content controls are complex DRM controls file system component does not act on behalf of DRM aware application B .

In other words file system component does not interact with DRM client if the requested file has complex DRM content controls . Instead file system component provides file to DRM aware application B in an unaltered form. This provisioning may be accomplished by giving a pointer a handle etc. for file to DRM aware application B . Although file is encrypted in accordance with DRM protocols DRM aware application B is able to handle files with DRM controls. Consequently DRM aware application B interacts with DRM client without needing to make any additional calls to file system component .

This interaction may result in the verification of identity and any accompanying DRM rights the validation of DRM aware application B the decryption of the content of file and so forth as described above with respect to the first permutation. DRM aware application B is thus provided with a decrypted version of the DRM controlled content of file . The DRM related protections for file as enumerated in complex DRM content controls are enforced by the DRM provisions of DRM aware application B .

Hence file system component may provide access to files having content with simple DRM content controls to any type of application. Such simple DRM protections are enforced by file system component . For files having content with complex DRM content controls file system component provides these files to requesting applications in raw unaltered form. Consequently only appropriately DRM aware applications B can access and otherwise use files having content with complex DRM content controls .

At block it is determined whether the requested file is protected. For example the file system component may review the file to see if it is encrypted such as when the file is protected with DRM. If the file is not protected then the requested file is provided unaltered to the requesting application at block . For example the file system component may pass a handle to the unaltered file to the requesting application A B . Regardless of whether the requesting application is a non DRM aware application A or a DRM aware application B the requesting application A B may access the unaltered and unprotected file .

If on the other hand the requested file is determined to be protected at block then it is determined whether the requested file is protected with simple DRM control s at block . For example the file system component may inspect a tag of file to determine whether it is protected with simple DRM content controls . If the requested file is not protected with simple DRM control s then the requested file is provided unaltered to the requesting application at block . In this case if the requesting application A B is a non DRM aware application A then the DRM protected file with complex DRM content controls will not be accessed. If the requesting application A B is a DRM aware application B then the DRM protected file may be accessed depending on the result of a DRM analysis effectuated by interaction between the DRM aware application B and a DRM client .

If on the other hand the requested file is determined to be protected with simple DRM control s at block then a license for the DRM controlled file is verified at block . For example the file system component interacts with the DRM client in order to have the identity context verified with a license server at least with regard to the requested file with the simple DRM content controls . At block the DRM controlled file is decrypted. For example the DRM client uses a key which is acquired and or authorized through exchanges over a communication link with an authorization provider to decrypt the requested file .

At block the requested file in a decrypted form is provided to the requesting application. For example the file system component may pass a handle to the decrypted file to the requesting application A B . Regardless of whether the requesting application A B is a non DRM aware application A or a DRM aware application B the requesting application A B may access the decrypted file . The file system component may enforce the simple DRM content control s of the decrypted file .

Exemplary computing operating environment is only one example of a computing environment and is not intended to suggest any limitation as to the scope of use or functionality of the applicable computer including general electronic device and network architectures. Neither should computing environment be interpreted as having any dependency or requirement relating to any one or any combination of components as illustrated in .

Additionally file system operation with DRM may be implemented with numerous other general purpose or special purpose computing system environments or configurations. Examples of well known computing systems environments and or configurations that may be suitable for use include but are not limited to personal computers server computers thin clients thick clients personal digital assistants PDAs or mobile telephones hand held or laptop devices multiprocessor systems microprocessor based systems set top boxes programmable consumer electronics video game machines network PCs minicomputers mainframe computers distributed computing environments that include any of the above systems or devices and so forth.

Implementations with file system component s interacting with DRM functionality may be described in the general context of electronically executable instructions. Generally electronically executable instructions include routines programs objects components data structures etc. that perform particular tasks or implement particular abstract data types.

DRM aware file system component s as described in certain implementations herein may also be practiced in distributed computing environments where tasks are performed by remotely linked processing devices that are connected through a communications network. Especially in a distributed computing environment electronically executable instructions may be located in separate storage media executed by different processors and or propagated over transmission media. For example file system commands may be called over a network and executed on a remote computing device that is not directly attached to a computer in which an application is running and attempting to access DRM protected content.

Computing environment includes a general purpose computing device in the form of a computer which may comprise any electronic device with computing and or processing capabilities. The components of computer may include but are not limited to one or more processors or processing units a system memory and a system bus that couples various system components including processor to system memory .

System bus represents one or more of any of several types of bus structures including a memory bus or memory controller a peripheral bus an accelerated graphics port and a processor or local bus using any of a variety of bus architectures. By way of example such architectures may include an Industry Standard Architecture ISA bus a Micro Channel Architecture MCA bus an Enhanced ISA EISA bus a Video Electronics Standards Association VESA local bus and a Peripheral Component Interconnects PCI bus also known as a Mezzanine bus.

Computer typically includes a variety of electronically accessible media. Such media may be any available media that is accessible by computer or another electronic device and it includes both volatile and non volatile media removable and non removable media and storage and transmission media.

System memory includes electronically accessible media in the form of volatile memory such as random access memory RAM and or non volatile memory such as read only memory ROM . A basic input output system BIOS containing the basic routines that help to transfer information between elements within computer such as during start up is stored in ROM . RAM typically contains data and or program modules instructions that are immediately accessible to and or being presently operated on by processing unit .

Computer may also include other removable non removable and or volatile non volatile electronic storage media. By way of example illustrates a hard disk drive for reading from and writing to a typically non removable non volatile magnetic media not separately shown a magnetic disk drive for reading from and writing to a typically removable non volatile magnetic disk e.g. a floppy disk and an optical disk drive for reading from and or writing to a typically removable non volatile optical disk such as a CD ROM DVD ROM or other optical media. Hard disk drive magnetic disk drive and optical disk drive are each connected to system bus by one or more data media interfaces . Alternatively hard disk drive magnetic disk drive and optical disk drive may be connected to system bus by one or more other separate or combined interfaces not shown .

The disk drives and their associated electronically accessible media provide non volatile storage of electronically executable instructions such as data structures program modules and other data for computer . Although exemplary computer illustrates a hard disk a removable magnetic disk and a removable optical disk it is to be appreciated that other types of electronically accessible media may store instructions that are accessible by an electronic device such as magnetic cassettes or other magnetic storage devices flash memory cards CD ROM digital versatile disks DVD or other optical storage random access memories RAM read only memories ROM electrically erasable programmable read only memories EEPROM and so forth. In other words any electronically accessible media may be utilized to realize the storage media of the exemplary computing system and environment .

Any number of program modules or other units or sets of instructions may be stored on hard disk magnetic disk optical disk ROM and or RAM including by way of example an operating system one or more application programs other program modules and program data . By way of example only operating system may comprise file system component application programs may comprise program and or applications and program data may comprise files and or the content thereof. DRM client may also optionally comprise part of operating system . If so DRM client may exist as part of operating system at the time of original manufacture or it may be subsequently installed on top of operating system and so forth. Alternatively DRM client may be a middleware component of computer and or user computer of .

A user may enter commands and information into computer via input devices such as a keyboard and a pointing device e.g. a mouse . Other input devices not shown specifically may include a microphone joystick game pad satellite dish serial port scanner and or the like. These and other input devices are connected to processing unit via input output interfaces that are coupled to system bus . However they may instead be connected by other interface and bus structures such as a parallel port a game port a universal serial bus USB port an IEEE 1394 interface an IEEE 802.11 interface and so forth.

A monitor or other type of display device may also be connected to system bus via an interface such as a video adapter . In addition to monitor other output peripheral devices may include components such as speakers not shown and a printer which may be connected to computer via input output interfaces .

Computer may operate in a networked environment using logical connections to one or more remote computers such as a remote computing device . By way of example remote computing device may be a personal computer a portable computer e.g. laptop computer tablet computer PDA mobile station etc. a server a router a network computer a peer device other common network node or other computer type as listed above and so forth. Remote computing device is illustrated as a portable computer that may include many or all of the elements and features described herein relative to computer .

Logical connections between computer and remote computer are depicted as a local area network LAN and a general wide area network WAN . Such networking environments are commonplace in offices enterprise wide computer networks intranets the Internet fixed and mobile telephone networks other wireless networks and so forth.

When implemented in a LAN networking environment computer is connected to a local area network via a network interface or adapter . When implemented in a WAN networking environment computer typically includes a modem or other means for establishing communications over wide area network . Modem which may be internal or external to computer may be connected to system bus via input output interfaces or any other appropriate mechanism s . It is to be appreciated that the illustrated network connections are exemplary and that other means of establishing communication link s between computers and may be employed.

In a networked environment such as that illustrated with computing environment program modules or other instructions that are depicted relative to computer or portions thereof may be fully or partially stored in a remote memory storage device. By way of example remote application programs reside on a memory device of remote computer . Also for purposes of illustration application programs and other executable instructions such as operating system are illustrated herein as discrete blocks but it is recognized that such programs components and other instructions reside at various times in different storage components of computing device and or remote computing device and are executed by data processor s of computer and or those of remote computing device .

The methods and processes of and are illustrated in flow diagrams that are divided into multiple blocks. However the order in which the methods and processes are described is not intended to be construed as a limitation and any number of the described blocks can be combined in any order to implement one or more methods or processes for file system operation and DRM. Furthermore although the methods and processes are described herein with reference to the various implementations or approaches of and as well as the exemplary system environment of where applicable the methods and processes can be implemented in any suitable hardware software firmware or combination thereof and using any suitable network architectures file system configurations DRM technologies and so forth.

In kernel mode portion at block a file system NTFS receives these operational requests. NTFS is an acronym for the New Technology File System of a Microsoft Windows operating system such as Windows XP. NTFS initiates a callout to EFS to determine whether the file to be created or opened is to be protected or is already protected respectively at block . EFS is an acronym for Encrypting File System which is also present in certain Microsoft Windows operating systems such as Windows XP. Although the described implementation refers specifically to NTFS and EFS alternative operating systems and or operating system components may be employed for any of the described methods approaches and processes. For example any file system with a file folder encryption component driver and or functionality may be used.

NTFS may alternatively only initiate a callout to EFS at block if NTFS cannot directly manipulate e.g. open the relevant file. However in a described implementation at block EFS determines whether the file is protected. If the file is not protected then control is returned to NTFS with no action being taken by EFS. If the file is protected as determined at block EFS examines the file data at block to determine the type of protection. If the protection is a standard encryption or other non DRM protection then EFS decrypts the file and the decrypted file is returned to NTFS .

If on the other hand the examination of the file data at block indicates a DRM type protection then it is determined at block whether the DRM protection is complex. If the DRM content controls are not complex then a callout to a DRM module or other functionality is initiated at block . Because the DRM content controls are not complex EFS and NTFS can enforce the DRM content controls. However the DRM functionality still determines whether the user has access rights to the file at block . The user is usually the human user but it may optionally be the requesting application from user mode portion . If the user does not have access rights the event is logged in an application or security log for security purposes at block and process may terminate optionally after returning some type of error code or status to the requesting application .

If on the other hand the user is determined to have access rights at block then the user license is retrieved at block . In order to retrieve the user license and or verify user access rights group membership or other authorization data may be checked at block as indicated by connection A . After the user license is retrieved at block the content of the file is decrypted. After content decryption and file opening process may terminate.

Returning to block if the DRM content controls are determined to be complex then the requesting application is validated from a DRM perspective at block . In other words whether the requesting application is a trusted DRM application that has been appropriately signed is validated. The requesting application may be validated as a trusted DRM application for example by referring to its manifest which lists and or defines the binaries associated with an application and is frequently digitally signed.

Although block is an optional block performing these action s at the file system level may limit or even prevent some brute force attacks on the DRM functionality. If the validation fails then EFS NTFS denies to the calling application access to the file. If the validation succeeds the content unaltered is returned to the calling application . Hence the validated and DRM aware calling application may interact with the DRM functionality and enforce the complex DRM controls. Regardless of whether the requesting application is validated process may terminate thereafter.

Specifically the exemplary process of flow diagram is divided into user mode portion and kernel mode portion . In user mode portion application is creating a file and application is saving modifying a file such as a file of . Saving in the abstract can refer to creating and then writing a file opening or reading an existing file and then writing changes thereto and so forth. These create file and save file operations instigate interaction with a file system such as one or more file system components . The remainder of the process of flow diagram occurs within kernel mode portion .

In kernel mode portion at block a file system component NTFS receives these operational requests. NTFS initiates a callout to EFS to determine whether the file to be created or saved modified is to be protected or is already protected respectively at block . NTFS may alternatively only initiate a callout to EFS from block to block if NTFS knows that the relevant file is to be encrypted in accordance with some scheme which may or may not be related to DRM.

Regardless in this described implementation at block EFS determines whether there is a DRM attribute for the file. If there is no DRM attribute associated with the file then control is returned to EFS. One of at least two options may occur at EFS at block . First if other non DRM encryption protection is appropriate EFS may effectuate such encryption before returning control to NTFS. Second if no encryption is appropriate EFS returns control to NTFS without any encryption action being taken by EFS. If on the other hand there is a DRM attribute associated with the file as determined at block a callout to a DRM client API is performed to activate the DRM functionality at block .

At block the DRM client determines whether the current user context has access rights to the file and if so whether such rights include saving modifying the DRM controlled content. If the current user context does not include saving modifying access rights then the attempted manipulation of DRM controlled content fails and the event is logged in an application or security log at block . Thereafter control is returned to NTFS at block . If on the other hand the current user context does include saving modifying access rights as determined at block then a user license is retrieved at block .

When a user license is successfully retrieved at block the DRM controlled content is encrypted by the DRM client of block . Also the DRM controlled content may be returned to the calling application via EFS of block and or NTFS of block . Although illustrated separately NTFS and EFS may have no logical or actual division within a file system component or components.

File system operation with DRM may provide a number of possibilities. For example as described in certain general implementations herein a file system can abstract and provide a DRM functionality layer to applications that cannot provide DRM content enforcement or are not aware of DRM client APIs on the platform. DRM client subsystems rely on the application being trusted e.g. digitally signed with an appropriate code and DRM aware. By moving the abstraction layer lower e.g. into the file system EFS or another encrypting file system component may be considered to be a trusted DRM aware application. For example enabling the file system to be DRM aware allows for an anti virus program to scan and verify content as being virus free when that content is DRM protected even if the anti virus scanner is not DRM aware.

A file system can also provide a group encryption model for files applications and users by combining a file system driver with a DRM client subsystem. Users that have applications that need basic sharing of encrypted content among user groups can obtain seamless group sharing of content through DRM functionality such as a DRM client server licensing architecture. The DRM client determines access and encrypts decrypts content based on the license server permissions. Neither the upper level file system nor the application nor the user need be aware of the DRM capability of the lower level file system because the capability inherently results from using EFS or another encrypting file system component as a DRM enabled application.

A validation component of a file system may provide additional performance and security enhancements to a file system operation with DRM scheme. For example when multiple DRM aware applications are running under the same user context and accessing DRM protected files EFS or another encrypting file system component can enhance performance by maintaining a user context cache to the DRM client for validating users and obtaining licenses for DRM controlled content on behalf of such users. In other words after a DRM aware application initially retrieves a license for DRM controlled content other DRM aware applications that are operating in the same or joint user context may benefit from the cached validation and licensing retrieval.

An encrypting file system component such as EFS can also ensure that even DRM aware applications are validated prior to returning protected content. Even if the content is protected with rich DRM controls the EFS component may refuse to return any content whether still encrypted or not to an application that is not trusted as evidenced by the possession of a valid code signature in the application. This can limit or prevent an un trusted application from acquiring encrypted content and then performing brute force attacks thereon. This is also described further above with reference to block of .

Server OS is communicating with non DRM aware client OS A of user computer via communication link and with DRM aware client OS B of user computer via communication link . Server OS interacts with non DRM aware client OS A and DRM aware client OS B differently because of their differing DRM aware statuses.

Specifically DRM controlled content is sent from server OS to DRM aware client OS B unaltered so that it may handle the DRM controlled content locally at user computer . For example DRM aware client OS B may appropriately handle DRM controlled content using a DRM client of and or one or more DRM aware file system components .

However with non DRM aware client OS A server OS first handles any possible license acquisition and content decryption prior to sending the content to non DRM aware client OS A provided that server OS is capable of enforcing the DRM controls. These controls may correspond to simple DRM content controls of . By providing decrypted DRM controlled content to non DRM aware client OS A server OS enables legacy non DRM aware client OS A to access manipulate use etc. the DRM controlled content.

At block a server OS interrogates a client OS. For example the server OS may interrogate the non DRM aware client OS A and or the DRM aware client OS B . At block the server OS determines through the interrogation and optionally a verification whether the client OS is DRM aware. For example the server OS may determine that the client OS A is not DRM aware and that the client OS B is DRM aware. Alternatively this determination may be a result of an affirmative assertion by the DRM aware client OS B e.g. via a verifiable DRM capable indicator sent from the DRM aware client OS B to the server OS .

If it is determined that the client OS is not DRM aware at block then requested content that is DRM protected is returned to the client OS in a decrypted form at block . For example the server OS may return content with simple DRM controls in a decrypted form to the non DRM aware client OS A . If on the other hand it is determined that the client OS is DRM aware at block then requested content that is DRM protected is returned to the client OS in an unaltered or raw binary form at block . For example the server OS may return DRM controlled content in an unaltered form to the DRM aware client OS B .

Although systems media methods approaches processes etc. have been described in language specific to structural and functional features and or methods it is to be understood that the invention defined in the appended claims is not necessarily limited to the specific features or methods described. Rather the specific features and methods are disclosed as exemplary forms of implementing the claimed invention.

