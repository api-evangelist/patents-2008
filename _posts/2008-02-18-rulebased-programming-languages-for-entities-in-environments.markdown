---

title: Rule-based programming languages for entities in environments
abstract: A rule-based programming language may be devised for programming an entity in an environment. Computer systems may therefore be configured to program the entity with at least one rule comprising at least zero language conditions representing an action condition, at least one language verb representing an action, and at least zero language verb parameters representing an action object. The computer system may also be configured to facilitate entry by a user of a rule set according to the rule-based programming language by receiving user selections of language conditions, language verbs, and language verb parameters. By facilitating the programming by users of entities within environments, the computer system may facilitate individuals (such as non-technical individuals, aspiring programmers, and children) in understanding programming concepts, encourage the development of experience with computer programming, and permit the generation of useful computer programs by non-proficient programmers.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08015141&OS=08015141&RS=08015141
owner: Microsoft Corporation
number: 08015141
owner_city: Redmond
owner_country: US
publication_date: 20080218
---
Many computing scenarios involve the entry of a computer program by a user according to a programming language. Many such programming languages such as C Java and Perl are defined according to a sequential paradigm comprising sequences of instructions organized and executed in a linear manner with conditional branching and procedural invocation conditional statements that alter the flow of the computer program. Computer programs organized in this manner in various computing scenarios may therefore give rise to a predictable and consistent programmatic behavior.

This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key factors or essential features of the claimed subject matter nor is it intended to be used to limit the scope of the claimed subject matter.

Computer programs organized according to a sequential paradigm may be helpful for performing a logical sequence of operations. However some computing scenarios and programmatic behaviors may be better suited to other programming paradigms wherein a computer program chooses an action based on a set of conditions. For example models of human behavior may be more advantageously crafted as a set of human actions that may be taken in view of the current mental and physical state of the human e.g. if tired sleep if hungry locate and eat food etc. rather than as a current operation in a long sequence of operations to be performed by the human. Therefore a programming language applied to such a model of human behavior may comprise not a sequence of instructions but a set of statefulness tests to be evaluated against the current state of the human e.g. a current emotion and executed in view thereof e.g. to achieve a transition to a more desirable state.

One computing scenario that may benefit from a rule based programming language is a configuration of an entity in an environment such as a virtual three dimensional graphical environment having one or more three dimensional entities that interact with each other and the other objects of the environment. An environment of this nature may be developed to facilitate an exploration of the interactions of the entities according to the rules by which the entities are programmed. This scenario may be advantageous for providing training in the development of critical thinking skills with regard to some aspects of computer programming such as statefulness and conditional testing that may be applicable to more complex programming languages such as sequential paradigm programming languages that include such concepts. Moreover these environments may provide training in these computer programming concepts without involving more complicated concepts such as sequential program flow and variable types and instances. The simplified computer programming environment based on the concept of one or more entities programmed with rules that may be selected based on a current state of the entity may therefore be advantageous in exposing individuals e.g. young children to computer programming concepts in a familiar context while avoiding the often complicated abstractions of sequential paradigm programming languages.

Therefore a technique may be devised to facilitate the programming of an entity in an environment with a rule set specified according to a rule based programming language. The rule based programming language may comprise at least one language condition at least one language verb and at least one language verb parameter e.g. if entity is hungry eat food . The technique involves receiving at least one rule comprising at least zero language conditions representing an action condition at least one language verb representing an action and at least zero language verb parameters representing an action object and then programming the entity to perform the rules having satisfied action conditions within the environment. The entity thus configured may perform the rules of the rule set with respect to the current state of the entity and the environment occupied thereby and continued experimentation with the rule based programmatic configuration of the entity may be helpful in training individuals in some aspects of computer programming.

To the accomplishment of the foregoing and related ends the following description and annexed drawings set forth certain illustrative aspects and implementations. These are indicative of but a few of the various ways in which one or more aspects may be employed. Other aspects advantages and novel features of the disclosure will become apparent from the following detailed description when considered in conjunction with the annexed drawings.

The claimed subject matter is now described with reference to the drawings wherein like reference numerals are used to refer to like elements throughout. In the following description for purposes of explanation numerous specific details are set forth in order to provide a thorough understanding of the claimed subject matter. It may be evident however that the claimed subject matter may be practiced without these specific details. In other instances well known structures and devices are shown in block diagram form in order to facilitate describing the claimed subject matter.

Programming languages are often devised for various computing contexts to achieve various ends such as generating a new program controlling hardware or modeling a behavior of an entity in a simulation or a real world environment. Such programming languages may have many advanced features for achieving complex functionality such as synchronization operations for multithreaded cooperative access to an area of memory event raising and handling through event handling delegates exception throwing and catching and object oriented polymorphism. Advanced programmers who are adept at writing and understanding the nuances of these languages may therefore achieve complex programming behaviors.

However the complexity of the feature set of many programming languages may be a cognitive hindrance to unskilled programmers such as aspiring but inexperienced programmers non technical individuals and children. Such individuals may wish to participate in computing scenarios that involve reading and writing programs but may not be familiar with common programming concepts such as subroutines recursion and object usage. Even the sequential paradigm of many programming languages may cause cognitive problems due to the length of some programs and potentially intricate nesting of function invocations. These complexities of many programming languages may therefore obstruct an understanding of the programming language by many individuals and discourage or diminish their capability of creating programs in the programming language.

An alternative programming language may be devised that reduces some of the obstacles to understanding the embodied programming concepts. For example the alternative programming language may replace the sequential paradigm with a stateful paradigm and may replace the use of abstract variables with more familiar concepts such as properties of an environment. The alternative programming language may therefore comprise a rule based programming language for programming an entity in an environment. The environment might comprise a two or three dimensional virtual graphical environment in which the entity visibly interacts with other entities and aspects of the environment or a real world environment in which an entity such as an automaton is to be configured for operation. The behavior of the entity may be specified according to simple rules such as if the weather includes rain open the umbrella and if I am hungry and I am carrying an apple eat the apple. The rules may also be organized into rule groups that may represent e.g. different states of the entity such as a hungry state that has rules for finding food and a tired state that has rules for resting and or different objectives such as a locate friendly entity objective that has rules for seeking and finding a friendly entity and a play game objective that has rules for playing a particular game within the environment. Because these concepts may be more familiar to unskilled programmers the programming language may more easily relate some programming concepts to the non programmer and may promote programming by such individuals that leads to the creation of useful software and the development of programming skills. Therefore a rule based programming language for programming an entity in an environment may be useful for illustrating programming concepts training aspiring programmers and or permitting the authoring of computer programs that may be useful for experimental purposes or for real world applications with which automatons in a real world environment may be programmed.

The exemplary rule based programming language illustrated in may be used to specify a computer program useful for controlling an entity placed in an environment comprising a maze with the objectives of locating the exit of the maze while picking up some items along the way such as fruit and stars. illustrates an exemplary computer program devised from the exemplary rule based programming language of comprising a set of set of rules comprising at least zero language conditions at least one language verb and at least one language verb parameter. For example a first rule of the exemplary computer program comprises a language condition of facing wall specifying whether or not the entity is currently facing a wall of the maze a language verb of turn specifying that the entity should turn and a language verb parameter of left specifying the direction to the left of the entity. These elements therefore specify a rule that an action turn should be performed with respect to an action object left if the action condition facing wall is satisfied. Additional rules are provided for specifying similar actions and action conditions e.g. an action condition of standing on star evaluating whether or not the entity is located in the same position as a star object should invoke the action pick up with respect to the action object star and should invoke the action play sound with respect to the action object sound e.g. a scoring tone indicating that the entity has collected a star that conveys a point score. Together the rules of the exemplary rule based computer program may guide an entity through a maze while collecting items according to some simple conditions and some actions to be performed for satisfied action conditions.

In accordance with the foregoing examples illustrates an embodiment of these techniques embodied as an exemplary method of programming an entity in an environment with a rule set specified according to a rule based programming language. The rule based programming language comprises at least one language condition at least one language verb and at least one language verb parameter from which rules may be constructed. The exemplary method begins at and involves receiving at least one rule comprising at least zero language conditions representing an action condition at least one language verb representing an action and at least zero language verb parameters representing an action object. The exemplary method also involves programming the entity to perform the rules having satisfied action conditions within the environment. Having programmed the entity for operation within the environment with the received computer program specified in the rule based programming the exemplary method thereby achieves the programming of the entity and so ends at .

The techniques described herein may also be embodied as a method of facilitating the entry by a user of a rule set such as the exemplary rule set of specified according to a rule based programming language such as the exemplary rule based programming language of which may be used to program an entity in an environment such as illustrated in the exemplary application of . The method of facilitating the entry of the computer program may be embodied e.g. as a user interface that solicits the user for the selection of language conditions language verbs and language verb parameters that together comprise a rule and when the user signals the completion of the computer program the method may save the entered instructions as a rule set comprising a computer program with which an entity in an environment may be programmed.

The techniques presented above may vary in many aspects and some variations may present additional advantages and or reduce disadvantages with respect to other variations of these and other techniques. Such variations may be included in various embodiments such as the exemplary method of and the exemplary method of to achieve various ends. Such variations may also be compatible with other variations of the aspect and other aspects.

A first aspect that may vary among implementations of these techniques relates to the manner of programming the entity with the computer program specified according to the rule based programming language. As one example the entity may be programmed according to a rule cycle wherein the entity chooses a rule and performs the action and then waits for other entities to choose a rule and perform an action based on other computer programs before choosing and performing a second rule. This configuration may be advantageous for allowing each entity in the environment to perform one action per turn thereby synchronizing the activities of the entities. For example the programming of an entity may involve programming the entity each rule cycle to evaluate the action conditions of respective rules within the environment to identify a satisfied rule having satisfied action conditions and upon identifying a satisfied rule to perform the satisfied rule within the environment. As a further refinement of this embodiment upon failing to identify a satisfied rule the entity may be programmed to remain idle for the rule cycle. As a contrasting example an asynchronous environment may be provided wherein an entity may be allowed to evaluate the rules of its programming language and perform the actions thereof without respect to the processing and actions of other entities in the environment. Those of ordinary skill in the art may be able to devise many ways of programming an entity to evaluate the rules of such computer programs and to perform the rules thereof while implementing the techniques discussed herein.

A second aspect that may vary among implementations of these techniques relates to a grouping of rules which may be applied to provide distinct rule sets for various states of the entity such as a first rule set applied when the entity is hungry a second rule set applied when the entity is thirsty a third rule set applied when the entity is tired and a fourth rule set applied when the entity is OK and or to control the entity in furtherance of various objectives such as a first rule set applied when the entity is looking for a star a second rule set applied when the entity is seeking a friendly entity and a second rule set applied when the entity is playing a particular game within the environment. The entity may additionally comprise a rule group identifier which indicates the rule group that the entity is currently configured to process. The evaluating may therefore comprise evaluating the action conditions of respective rules of the rule group identified by the rule group identifier within the environment to identify a satisfied rule having satisfied action conditions. Moreover in some such variation the rule based programming language may include a capacity for transitioning from one rule group to another such as to indicate a state change in the entity e.g. from hungry to OK. For example the language verbs of the rule based programming language may include a language verb representing a rule group transition action and the language verb parameters may include the rule group names. A computer program specified according to the rule based programming language may therefore include a rule having an action that represents a rule group transition to a specified rule group. As a further refinement at least one rule group designated as a start rule group for the entity and the entity may be programmed upon initialization of the entity to set the rule group identifier to one of the start rule groups. This refinement may prevent the entity from beginning in a rule group for an objective that may not be initially relevant e.g. beginning in the play checkers rule group when the entity is not near a friendly entity. 

A third aspect that may vary among implementations of these techniques relates to the manner of evaluating the rules either of an entire computer program or of a rule set in order to identify a satisfied rule. As one variation the rules may simply be evaluated arbitrarily i.e. where the entity randomly chooses any rule and evaluates it and upon identifying a satisfied rule the entity may choose to perform the action associated therewith. Because the rules of a rule based programming language are not accorded the sequential ordering of a sequential paradigm programming language the rules are not necessarily to be evaluated in a particular order. For example the rules may be chosen for evaluation in an arbitrary e.g. random manner and two entities operating the same computer program and present in the same circumstances of the environment may choose different behaviors. For instance if an entity is concurrently tired and hungry then rules with hungry and tired conditions may be concurrently satisfied and a first entity may choose the first rule relating to the hungry condition while a second entity may choose the second rule relating to the tired condition. This variation may present an advantage of programming the entities to exhibit more organic behavior than automatically determined behavior such as may often be exhibited by sequential paradigm programming languages.

Another variation of the third aspect relates to the prioritization of rules. While the rules of the rule based programming language are not placed in the strictly sequential ordering of a sequential paradigm programming language some rules may nevertheless be prioritized with respect to other rules. Accordingly in one such example respective rules comprising a rule priority and the evaluating may comprise evaluating the action conditions of respective rules in descending priority order within the environment to identify a satisfied rule having satisfied action conditions. For instance in the OK rule set in the exemplary computer program of the tired rule may be assigned a priority above the other rules of the OK rule set such that the entity is programmed first to satisfy the tired condition when it arises and then to choose among the other conditions in the rule set that have the same priority. Conversely the see friendly entity and near friendly entity rules may be assigned a lower priority than the other rules such that more significant conditions the tired condition and the hungry condition are evaluated before less significant conditions.

Another exemplary prioritization of rules involves an evaluation of all of the rules of the rule set to determine the rules that are satisfied before selecting a satisfied rule to perform. Such evaluation may be performed in series or in parallel and may involve an evaluation of all rules of the rule set all rules having a certain priority or range of priorities the rules of a rule group within the rule set etc. If more than one evaluated rule is satisfied the computer system may be configured to choose among the rules to perform in any manner. For instance the computer system may choose a rule at random a rule that was most or least recently performed or a rule relating to the most proximate object in the environment. Alternatively or additionally a plurality of satisfied rules may be performed concurrently. For example an entity may have a satisfied rule of if hungry move toward tree and also a satisfied rule of if see friendly entity move toward friendly entity. The entity may be programmed to choose between such rules or if permitted by the environment may perform both rules thereby moving toward both the tree and the friendly entity. Alternatively or additionally the entity may be programmed to choose rules of various action types e.g. one move rule and one say rule and may choose satisfied rules of various action types to perform multiple compatible actions at once. Those of ordinary skill in the art may devise many ways of programming the entity to choose among a plurality of satisfied rules while implementing the techniques discussed herein.

A fourth aspect that may vary among implementations relates to some additional features that may be included in the programming language and that may be incorporated in computer programs specified according to such rule based programming languages. As one example the programming language may comprise at least one Boolean logic connector and the rules may comprise at least two action conditions joined by a Boolean logic connector. The evaluation of a rule may therefore comprise evaluating the action conditions of the rule according to the Boolean logic connector to identify a satisfied rule having satisfied action conditions according to the Boolean logic connector. For instance a first rule may specify that all of three conditions are to be concurrently satisfied e.g. tired near tree and nighttime in order to satisfy the rule and perform the action e.g. rest while a second rule may specify that any of three conditions may be satisfied e.g. have apple have orange or have plum in order to satisfy the rule and perform the action e.g. eat food. Such Boolean connectors may also be nested e.g. hungry and have apple or have plum in order to represent more nuanced rules.

As a second example the entity in the environment may be configured to accept input from an external source such as a user e.g. through a computer peripheral such as a game controller or another computer program. The language conditions may therefore comprise at least one entity controller input condition such that a rule may be specified with reference to input from the entity controller e.g. if receiving up entity controller input move north. Such entity controller input conditions may be combined with other conditions e.g. if holding apple and receiving up entity controller input eat apple. 

As a third example at least one language condition comprising an environment test which may be evaluated in the context of the entity within the environment. The environment test may involve e.g. a test of a sensory condition such as an entity type condition e.g. the entity is a turtle an entity status condition e.g. the entity is hungry an entity possessory condition e.g. the entity has an apple an entity sensory input condition e.g. the entity sees an apple an environment status condition the time of day is nighttime etc. The sensory condition may be specified in isolation e.g. it is raining or with respect to an object such as a language verb parameter e.g. see tree vs. see apple. The evaluating therefore comprises evaluating the sensory condition for the sensory object of the rule within the environment to identify a satisfied rule having a satisfied sensory condition for the sensory object within the environment.

As a first refinement of the third example the language verb parameters may comprise a sensory object reference that represents the sensory object of the language condition of the rule e.g. if the entity sees an apple or sees a plum eat it . This refinement may facilitate the application of a rule to more than one condition which may therefore reduce redundant rule input.

As a second refinement of the third example the rule based programming language may also comprise at least one language adjective which may refer to a property of the sensory object referenced in a sensory condition. For instance objects in the environment may comprise various properties such as color shape size and texture and the rule based programming language may permit the specification of rules targeting only certain kinds of objects having certain properties. According to this refinement an environment test may comprise a condition representing a sensory condition a language verb parameter representing a sensory object and a language adjective representing a sensory object adjective and the evaluating of the rule may comprise evaluating the sensory condition for the sensory object of the rule modified by the sensory object adjective within the environment to identify a satisfied rule having a satisfied sensory condition for the sensory object modified by the sensory object adjective within the environment. For instance in the exemplary application of the stars in the maze may have different colors red green and blue and the entity may be programmed only to pick up blue stars. Accordingly the computer program with which the entity is programmed may include a rule having a sensory condition if standing on a blue star pick up the star in order to configure the entity not to pick up the red or green stars. Moreover the inclusion of adjectives may permit rules to specify any object having a certain property such as any red object which might include red stars red fruit and even other entities that are red. Other variations and additional features may be devised for the rule based programming language by those of ordinary skill in the art while implementing the techniques discussed herein.

A fifth aspect that may vary among implementations relates to the manner of accepting the computer program such as from a user according to the method of . The computer system may provide an integrated development environment that serves as a user interface for creating computer programs based on the rule based programming language. Such computer programs may be created and stored such as to a file server and may later be retrieved for programming an entity within an environment or the computer program so created may upon completion be promptly used to program a newly created entity in an environment or the computer program or the computer program may be used to program an entity that already exists within an environment. In one such variation the computer program may be stored on a computer program server that holds many computer programs created by many programmers for programming various entities within various environments.

With respect to some of the variations of the rule based programming language the user interface for facilitating the entry of computer programs may be customized in various ways. As a first example the computer program may be generated for an entity type which may comprise a set of actions represented by some but not all of the language verbs of the computer based programming language. While entering the computer program the user may specify the entity type with which the computer program is to be compatible. A user interface configured to permit such specification of the entity targeted by the computer program may adapt to present to the user only the language verbs that are compatible with the specified entity type. Alternatively or additionally an entity type may comprise only some of the available sensory inputs e.g. a snail may not have a hear capability and the sensory conditions presented to the user for programming the entity type may be limited to present only the sensory conditions that are compatible with the specified entity type. In this manner the user interface may reduce errors produced by the script involving a specification of a language verb that the targeted entity type cannot perform. As a second example if the rule based programming language permits rules to be organized into rule groups with rule group names the user interface may be configured to receive the rule group names from the user upon defining a new rule group and to generate the rule set for the entity within the environment where the rules are grouped according to the rule groups. Moreover where the programming language includes the capability of transitioning to a new rule group such as where the language verbs may comprise a rule group transition action and the language verb parameters comprise the rule group names the user interface may be configured to display these options for the user in order to facilitate the entry of the computer program.

As a third example the user interface may be configured to reduce or prevent the entry of syntax errors that violate the semantics of the rule based programming language. The user interface may initially present to the user all of the language conditions language verb parameters and language verbs and may await selection of one such language part representing the specification of part of a new rule. Upon receiving a selection the user interface may then remove the language conditions language verb parameters and language verbs that are not grammatically compatible with the selected language part or that may be compatible but are logically incompatible e.g. when facing a wall and when not facing a wall. or that are simply uncommon. As one variation of this third example if the language conditions include an environment test comprising a language condition representing a sensory condition and a language verb parameter representing a sensory object the user interface may be configured to present to the user the language verb parameters of the rule based programming language that are grammatically compatible with a selected language condition. For instance if the user selects see to denote a sensory condition applying to visible objects then the user interface may limit the language verb parameters presented to the user as sensory objects to objects that are visible. As another variation of this example upon receiving a selection of a language verb the user interface may limit the language verb parameters presented to the user as action objects to those that are grammatically compatible with the selected verb e.g. if move is selected the presented language verb parameters may include only the directions of the rule based programming language such as north south etc. 

In view of these aspects and variations thereof an embodiment may be devised that incorporates several such variations and presents several of the advantages and mitigates several of the disadvantages discussed herein. illustrates one such embodiment comprising an exemplary method of programming an entity in an environment with a rule set comprising at least one rule. This exemplary method may be applied within a particular computing environment. First respective rules are grouped according to at least one rule group having a rule group name with at least one group designated as a start rule group for the entity. Second the entity is configured to accept input from an entity controller e.g. a game controller operated by a user. Third the exemplary method involves a rule based programming language that comprises various language conditions including at least one entity controller input condition at least one environment test comprising a sensory condition e.g. an entity type condition an entity status condition an entity possessory condition an entity sensory input condition and or an environment status condition a language verb parameter representing a sensory object and zero or more language adjectives representing the sensory object. The rule based programming language also comprises at least one language verb including at least one rule group transition verb and at least one language verb parameter including the rule group names and a sensory object reference representing the sensory object of the language condition of the rule. The rule based programming language also includes at least one language adjective and at least one Boolean logic connector. Third according to this rule based programming language respective rules comprise a rule priority at least one language condition representing an action condition at least one language verb representing an action and at least one language verb parameter representing an action object. Also the entity comprises a rule group identifier that identifies the rule group currently evaluated by the entity.

Within a programming environment of this nature the exemplary method performs the programming of the entity to operate within the environment in the following manner. The exemplary method begins at and involves receiving the rule set comprising at least one rule. As noted the rule comprises at least zero language conditions representing an action condition at least one language verb representing an action and at least zero language verb parameters representing an action object. The exemplary method also involves programming the entity to perform the rule set in the following manner. The exemplary method involves programming the entity to upon initialization of the entity set the rule group identifier to one of the start rule groups. The exemplary method also involves programming the entity per rule cycle to evaluate the action conditions of respective rules of the rule group identified by the rule group identifier and in descending priority order within the environment to identify a satisfied rule having satisfied action conditions according to Boolean logic connectors of the rule. If the entity identifies a satisfied rule for the rule cycle the exemplary method programs the entity to branch at and to perform the satisfied rule within the environment. If the entity fails to identify a satisfied rule the exemplary method programs entity to branch at and to remain idle for the rule cycle. By receiving the rule set and programming the entity to perform the rule set by evaluating the rules per rule cycle to identify and perform a satisfied rule the exemplary method thereby achieves the programming of an entity with a rule set specified according to the rule based programming language and so ends at .

Although not required embodiments are described in the general context of computer readable instructions being executed by one or more computing devices. Computer readable instructions may be distributed via computer readable media discussed below . Computer readable instructions may be implemented as program modules such as functions objects Application Programming Interfaces APIs data structures and the like that perform particular tasks or implement particular abstract data types. Typically the functionality of the computer readable instructions may be combined or distributed as desired in various environments.

In other embodiments device may include additional features and or functionality. For example device may also include additional storage e.g. removable and or non removable including but not limited to magnetic storage optical storage and the like. Such additional storage is illustrated in by storage . In one embodiment computer readable instructions to implement one or more embodiments provided herein may be in storage . Storage may also store other computer readable instructions to implement an operating system an application program and the like. Computer readable instructions may be loaded in memory for execution by processing unit for example.

The term computer readable media as used herein includes computer storage media. Computer storage media includes volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions or other data. Memory and storage are examples of computer storage media. Computer storage media includes but is not limited to RAM ROM EEPROM flash memory or other memory technology CD ROM Digital Versatile Disks DVDs or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can be accessed by device . Any such computer storage media may be part of device .

Device may also include communication connection s that allows device to communicate with other devices. Communication connection s may include but is not limited to a modem a Network Interface Card NIC an integrated network interface a radio frequency transmitter receiver an infrared port a USB connection or other interfaces for connecting computing device to other computing devices. Communication connection s may include a wired connection or a wireless connection. Communication connection s may transmit and or receive communication media.

The term computer readable media may include communication media. Communication media typically embodies computer readable instructions or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term modulated data signal may include a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal.

Device may include input device s such as keyboard mouse pen voice input device touch input device infrared cameras video input devices and or any other input device. Output device s such as one or more displays speakers printers and or any other output device may also be included in device . Input device s and output device s may be connected to device via a wired connection wireless connection or any combination thereof. In one embodiment an input device or an output device from another computing device may be used as input device s or output device s for computing device .

Components of computing device may be connected by various interconnects such as a bus. Such interconnects may include a Peripheral Component Interconnect PCI such as PCI Express a Universal Serial Bus USB firewire IEEE 1394 an optical bus structure and the like. In another embodiment components of computing device may be interconnected by a network. For example memory may be comprised of multiple physical memory units located in different physical locations interconnected by a network.

Those skilled in the art will realize that storage devices utilized to store computer readable instructions may be distributed across a network. For example a computing device accessible via network may store computer readable instructions to implement one or more embodiments provided herein. Computing device may access computing device and download a part or all of the computer readable instructions for execution. Alternatively computing device may download pieces of the computer readable instructions as needed or some instructions may be executed at computing device and some at computing device .

Although the subject matter has been described in language specific to structural features and or methodological acts it is to be understood that the subject matter defined in the appended claims is not necessarily limited to the specific features or acts described above. Rather the specific features and acts described above are disclosed as example forms of implementing the claims.

As used in this application the terms component module system interface and the like are generally intended to refer to a computer related entity either hardware a combination of hardware and software software or software in execution. For example a component may be but is not limited to being a process running on a processor a processor an object an executable a thread of execution a program and or a computer. By way of illustration both an application running on a controller and the controller can be a component. One or more components may reside within a process and or thread of execution and a component may be localized on one computer and or distributed between two or more computers.

Furthermore the claimed subject matter may be implemented as a method apparatus or article of manufacture using standard programming and or engineering techniques to produce software firmware hardware or any combination thereof to control a computer to implement the disclosed subject matter. The term article of manufacture as used herein is intended to encompass a computer program accessible from any computer readable device carrier or media. Of course those skilled in the art will recognize many modifications may be made to this configuration without departing from the scope or spirit of the claimed subject matter.

Various operations of embodiments are provided herein. In one embodiment one or more of the operations described may constitute computer readable instructions stored on one or more computer readable media which if executed by a computing device will cause the computing device to perform the operations described. The order in which some or all of the operations are described should not be construed as to imply that these operations are necessarily order dependent. Alternative ordering will be appreciated by one skilled in the art having the benefit of this description. Further it will be understood that not all operations are necessarily present in each embodiment provided herein.

Moreover the word exemplary is used herein to mean serving as an example instance or illustration. Any aspect or design described herein as exemplary is not necessarily to be construed as advantageous over other aspects or designs. Rather use of the word exemplary is intended to present concepts in a concrete fashion. As used in this application the term or is intended to mean an inclusive or rather than an exclusive or . That is unless specified otherwise or clear from context X employs A or B is intended to mean any of the natural inclusive permutations. That is if X employs A X employs B or X employs both A and B then X employs A or B is satisfied under any of the foregoing instances. In addition the articles a and an as used in this application and the appended claims may generally be construed to mean one or more unless specified otherwise or clear from context to be directed to a singular form.

Also although the disclosure has been shown and described with respect to one or more implementations equivalent alterations and modifications will occur to others skilled in the art based upon a reading and understanding of this specification and the annexed drawings. The disclosure includes all such modifications and alterations and is limited only by the scope of the following claims. In particular regard to the various functions performed by the above described components e.g. elements resources etc. the terms used to describe such components are intended to correspond unless otherwise indicated to any component which performs the specified function of the described component e.g. that is functionally equivalent even though not structurally equivalent to the disclosed structure which performs the function in the herein illustrated exemplary implementations of the disclosure. In addition while a particular feature of the disclosure may have been disclosed with respect to only one of several implementations such feature may be combined with one or more other features of the other implementations as may be desired and advantageous for any given or particular application. Furthermore to the extent that the terms includes having has with or variants thereof are used in either the detailed description or the claims such terms are intended to be inclusive in a manner similar to the term comprising. 

