---

title: Personal video recording with machine learning for messaging
abstract: Machine learning for control of a personal video recorder (“PVR”), including providing records of transmissions of messages; identifying a message point in operation of a PVR; selecting, in dependence upon the message point, a message to be transmitted; and determining in dependence upon the records of transmissions of messages whether to transmit the selected message. Embodiments include determining whether to transmit the selected message in dependence upon a frequency with which the message is transmitted to a user. Embodiments include transmitting to users messages prompting for responses identifying commands; storing records of transmissions of messages, including storing records of responses; and selecting a message to be transmitted in dependence upon the records of responses to messages. Embodiments include structuring the selected message in dependence upon the records of responses to messages, including inserting in the selected message choices for a set of sequenced commands.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08412783&OS=08412783&RS=08412783
owner: International Business Machines Corporation
number: 08412783
owner_city: Armonk
owner_country: US
publication_date: 20080528
---
This application is a continuation application of and claims priority from U.S. patent application Ser. No. 10 180 361 filed on Jun. 25 2002.

The field of the invention is data processing or more specifically methods systems and products for automated personal video recording.

In the current art of the personal video recorder PVR the storage space available upon which to record television shows or other video content shows is a limited resource. PVRs are relatively expensive and therefore are typically shared by more than one user. The Tivo system is an example of such a PVR and today the Tivo system is marketed by the number of hours of video content it can record typically 20 30 or 50 hours. In a setting with more than one user the recording time available on typical PVRs is not configured or controlled by user allocation which causes problems. One user may use a disproportional share of the storage space available for recording video content leaving little or none for other users of the recorder. It would be advantageous if there were ways to configure or control storage space to facilitate use by multiple users allowing for multiple users to share the storage resources collision free with little risk of erasing or overwriting someone else s recorded shows.

In addition it is useful to note that estimates of storage space required for recording a particular show are made in dependence upon an estimated compression level. It would be advantageous therefore to have means and methods of administering the risk that an estimate of compression level and therefore an estimate of storage space requirement will be too small. Moreover although such provisions are substantially lacking in the prior art it would be advantageous also to provide various ways for users to aggregate their abilities to lend borrow and record shows. In addition although such provisions are substantially lacking in the prior art it would be advantageous also to provide various ways for users to lend storage space to other users and to groups of users. It would also be useful particularly when free space for lending is scarce for users to be able to recover used space so that it could be used in recording additional shows.

Users will operate the PVR controls to control a PVR and to track the operations of a PVR. PVR operations can be so complex however that it would be advantageous for users to have improved ways of tracking and controlling PVR operations. It would particularly useful if there were ways for PVRs to utilize means of sending and receiving messages to and from users regarding PVR operations.

Exemplary embodiments comprise methods of machine learning for control of a personal video recorder PVR that include providing records of transmissions of messages identifying a message point in operation of a PVR selecting in dependence upon the message point a message to be transmitted and determining in dependence upon the records of transmissions of messages whether to transmit a selected message. In such embodiments providing records of transmissions of messages includes transmitting messages to users and storing records of transmissions of messages.

In PVRs according to embodiments of the present invention determining whether to transmit a selected message typically includes determining whether to transmit the selected message in dependence upon a frequency with which the message is transmitted to a user. In such embodiments the frequency is often defined with respect to the number of times an associated message point is encountered in PVR operations. PVRs according to such embodiments typically record a result of determining whether to transmit the selected message.

PVRs according to embodiments of the present invention transmit to a user a selected message and store in records of transmissions of messages a record representing the transmission of the transmitted message. In typical embodiments the records of transmissions of messages include messaging inputs and messaging outputs. Such embodiments include creating mappings from messaging inputs to messaging outputs. In such embodiments messaging inputs include message identifications message point identifications user identifications for a user to whom messages are transmitted indications whether messages are sends or posts and command identifications for commands associated with prompts for choices in messages. In such embodiments messaging outputs include message point counts message counts and indications of users responses to messages. In such embodiments mappings include confidence ratings messaging counts messaging frequencies and indications whether to transmit sends or posts at message points.

In exemplary embodiments of the invention providing records of transmissions of messages typically includes transmitting users messages prompting for responses identifying commands storing records of transmissions of messages including storing records of responses and selecting a message to be transmitted further comprises selecting a message to be transmitted in dependence upon the records of responses to messages. Such embodiments include structuring the selected message in dependence upon the records of responses to messages. In such embodiments structuring the selected message includes inserting in the selected message choices for a set of sequenced commands.

The foregoing and other objects features and advantages of the invention will be apparent from the following more particular descriptions of exemplary embodiments of the invention as illustrated in the accompanying drawings wherein like reference numbers generally represent like parts of exemplary embodiments of the invention.

The present invention is described to a large extent in this specification in terms of methods for automated personal video recording. Persons skilled in the art however will recognize that any computer system that includes suitable programming means for operating in accordance with the disclosed methods also falls well within the scope of the present invention.

Suitable programming means include any means for directing a computer system to execute the steps of the method of the invention including for example systems comprised of processing units and arithmetic logic circuits coupled to computer memory which systems have the capability of storing in computer memory which computer memory includes electronic circuits configured to store data and program instructions programmed steps of the method of the invention for execution by a processing unit. The invention also may be embodied in a computer program product such as a diskette or other recording medium for use with any suitable data processing system.

Embodiments of a computer program product may be implemented by use of any recording medium for machine readable information including magnetic media optical media or other suitable media. Persons skilled in the art will immediately recognize that any computer system having suitable programming means will be capable of executing the steps of the method of the invention as embodied in a program product. Persons skilled in the art will recognize immediately that although most of the exemplary embodiments described in this specification are oriented to software installed and executing on computer hardware nevertheless alternative embodiments implemented as firmware or as hardware are well within the scope of the present invention.

In this specification the terms field and data element unless the context indicates otherwise generally are used as synonyms referring to individual elements of digital data. Aggregates of data elements are referred to as records or data structures. Aggregates of records are referred to as tables or files. Aggregates of files or tables are referred to as databases. Complex data structures that include member methods functions or software routines as well as data elements are referred to as classes. Instances of classes are referred to as objects or class objects. 

The terms borrow lend and loan subject to context generally imply a relatively shorter term rearrangement of storage space effected under automated control of a PVR. The term allocate subject to context generally implies a relatively longer term rearrangement of storage space effected by users manual inputs through user interfaces. An example of borrowing is a PVR s determination at record time that a deficit of storage space exists that needs to be cured before recording proceeds. If the cure is a rearrangement of storage space to be reversed after users view a show then the cure is said to be a borrowing or a loan. An example of an allocation is a user s manual instruction through a keyboard or a remote control device in response to prompt screens and by use of data input screens on a display device to assign a portion of unallocated storage space to a user or to a pool.

 Codec is an industry standard term referring to encoder decoder or perhaps more legibly coder decoder . Codecs are means and methods for encoding and decoding video with audio. Codecs are implemented in hardware or in software. The codec illustrated at reference in shown in a system or apparatus diagram is implicitly a hardware codec. Hardware codecs like other co processors tend to offload CPU burden and render overall PVR operation more efficient. Software only codecs are freely available for downloading from various sources on the Internet. It is probably an accurate general description that software codecs tend to be less expensive than hardware codecs while hardware codecs tend to be more efficient. There are many codecs including for example Cinepak Motion JPEG and of course MPEG. PVR operations are video intensive so that hardware codecs will be common in PVRs according to embodiments of the present invention although the use of software codecs is also well within the scope of the present inventions and actually quite likely in a variety of cost conscious embodiments.

Codec functions include compression and decompression. When show is encoded it is converted to a compressed format suitable for storage or transmission when it is decoded it is converted to a non compressed raw format suitable for presentation. Each codec has certain input formats that it can handle and certain output formats that it can generate. In some situations a series of codecs are used to convert from one format or compression level to another.

 DVD stands for Digital Versatile Disc or Digital Video Disc an improved storage standard that holds at least of 4.7 gigabytes enough for a full length movie. DVD storage like CD ROM storage is typically eventually optical although the format does not strictly required optical storage and is often implemented in other kinds of storage magnetic or electronic at least as interim measures. The DVD specification supports disks with capacities of from 4.7 gigabytes to 17 gigabytes and access rates of 600 KBps to 1.3 MBps. DVD drives are backward compatible with CD ROMs. That is DVD players can play old CD ROMs CD I disks and video CDs as well as DVD ROMs. DVD players can also read CD R disks. DVD may be pertinent to PVRs according to embodiments of the present invention because DVD like HDTC uses MPEG 2 to compress video data.

 Compression as the term is used in this disclosure refers to the overall effect of all applicable techniques for video file size reduction including for example reduction of color space reduction of frame rate reduction of resolution reduction of audio quality and changes in compression algorithms or compression algorithm parameters as such. There are many ways as will occur to those of skill in the art to reduce file size by manipulation of compression algorithms and the parameters of compression algorithms. The use of the term compression in this disclosure however subject to context of course is generally broader than mere manipulation of compression algorithms.

 Compression level refers to an estimated compression level calculated on the basis of a show s duration and an estimated compression level for the recorded content of the show. Unless the context requires otherwise the term compression level means estimated compression level. 

 Compression algorithm refers to a particular type of compression technique including lossy as well as lossless compression including for example Lempel Zif Welch compression which is the compression technique used in the popular graphics file format known as GIF various flavors of Lempel Zif compression such as LS 77 and LZ 78 LZ 78 being a dictionary compression technique used in many popular applications such as the well known zip utilities run length encoding and Huffman encoding.

 ID abbreviates identification meaning identification code or identification field. It is a style of reference in this disclosure to refer to user identification codes as user IDs. By convention in this disclosure the field name UserID is used to store a user ID. That is for example the UserID field in the example user profile in contains a user ID of a registered user on a PVR. When a user ID for a borrower is stored in a data element in computer memory it is a convention in this disclosure to refer to that user ID a borrower s identification that is as a borrower ID. Similarly lenders identifications are often termed lender IDs. Borrower IDs and lender IDs are user IDs for roles of users as lenders borrowers owners viewers and so on. That is for example borrowers and lenders are users having user IDs. When a user acts as a borrower depending on the context the user is generally said then to have a borrower ID. When we name a field to store a borrower ID we adopt the convention of naming the field BorrowerID. The lending authorization records at reference in for example include a LenderID field which contains a user ID of a user authorizing lending.

 IMAP means Internet Message Access Protocol. IMAP is a protocol for retrieving email message from an Internet email server. In offline operation an email client fetches messages from an email server to the client machine where the email client program is running and then deletes the email messages from the server. In online operation messages can be left on the email server and manipulated remotely by email client programs. In online mode mail is left on the server which is useful when users access different computers at different times to read their email. POP support offline email operations. IMAP supports both offline and online email operations. That is IMAP the newer protocol is currently similar to POP3 with some additional features. With IMAP for example clients can search through email messages for keywords while the messages are still on the email servers. Email clients can then choose which messages to download leaving others resident on a server.

 JPEG stands for Joint Photographic Experts Group the original name of the committee that developed the standard. JPEG is a data compression standard for graphic images. JPEG can reduce files sizes to about 5 of their uncompressed size although some detail is lost in the compression.

 Motion JPEG or MJPEG extends the JPEG standard by supporting video. In Motion JPEG each video frame is stored using the JPEG format. In this regard note that the 5 compression estimate for JPEG is the effect of the compression algorithm alone without regard to frame rate resolution and so on.

 MPEG stands for Moving Picture Expert Group a working group under ISO the International Organization for Standardization and IEC the International Electrotechnical Commission. What is commonly referred to as MPEG video actually includes three standards MPEG 1 MPEG 2 and MPEG 4. MPEG 1 and MPEG 2 are similar. They both work on motion compensated block based transform coding techniques. MPEG 4 differs in its use of software image construct descriptors for target bit rates in the very low range less than 64 Kb sec.

 MPEG 1 was originally optimized to work at video resolutions of 352 240 pixels at 30 frames sec NTSC based or 352 288 pixels at 25 frames sec PAL based commonly referred to as Source Input Format SIF video. The MPEG 1 resolution is not limited to the above sizes and in fact may go as high as 4095 4095 at 60 frames per second. MPEG 1 s bit rate is optimized for applications of around 1.5 megabits per second although MPEG 1 can be used at higher rates if required. MPEG 1 is defined for progressive frames only and has no direct provision for interlaced video applications such as are used in broadcast television applications.

 MPEG 2 addresses issues directly related to digital television broadcasting such as the efficient coding of field interlaced video and scalability. MPEG 2 s target bit rate is higher than MPEG 1 s between 4 and 9 Mb sec resulting in potentially very high video quality. MPEG 2 is based upon profiles and levels. The profile defines bitstream scalability and colorspace resolution while the level defines image resolution and maximum bit rate per profile. Probably the most common descriptor in use currently is Main Profile Main Level MP ML which refers to 720 480 resolution video at 30 frames sec at bit rates up to 15 Mb sec for NTSC video. Another example of an MPEG 2 descriptor in common use is the HDTV resolution of 1920 1080 pixels at 30 frames per second at bit rates up to 80 megabits per second. This HDTV example is a Main Profile High Level MP HL descriptor. A complete table of the various legal combinations can be found in reference.

 NTSC stands for a video standard promulgated by the National Television Standards Committee. The Committee is responsible for setting television and video standards in the United States. In Europe and the rest of the world the dominant television standards are PAL and SECAM. The NTSC video standard defines a composite video signal with a frame rate of 30 frames second implemented as 60 interlaced half frames per second. Each frame contains 525 lines and can contain 16 million different colors. A newer digital television standard is called HDTV for High Definition Television supporting higher resolutions than NTSC.

 POP means Post Office Protocol. POP is a protocol used by an email client to retrieve email from a mail server. POP is in very common usage among email clients although the new IMAP protocol is becoming popular also. There are two versions of POP. POP2 requires SMTP to receive email messages from clients or other servers. The newer version POP3 can be used with or without SMTP.

 Show means any recordable or distributable electronic or digital content including television broadcasts movies CD contents DVD recordings cable transmission satellite transmissions commercial video clips audio multi media programming and the like. Shows include any image or series of images delivered to users through any mechanism or means including associated audio or other multi media content.

 SMTP means Simple Message Transfer Protocol. SMTP is a protocol for sending e mail messages between servers. Internet email traffic largely travels over SMTP from server to server. After email arrives at a target server email messages are then retrieved from the server with an e mail client using either POP or IMAP. SMTP also is used to send messages from mail clients to mail servers. This is why users generally must specify both a POP or IMAP server and an SMTP server when configuring an email client. Email client means an email application program such as for example Microsoft s Outlook .

Unless the context requires otherwise user means registered user that is a user having within a PVR a representative user profile such as those illustrated by the record structure at reference on . Readers will notice that there are no logons required within the scope of the present invention although logons are permitted. Unregistered users therefore are permitted in many embodiments to view shows recorded by other users. The benefit of allowing viewing by unregistered viewers is that visiting relatives do not need to have user profiles installed for them. The can just sit down and watch TV. In many embodiments however access controls are installed that do as a practical matter require logons despite the fact that logons are optional within the invention itself. Examples of configurations of PVRs according to embodiments of the present invention that require logons for access control are PVRs that control children s viewing hours and PVRs that control access to mature content by younger viewers.

With reference now to the figures and in particular with reference to and pictorial representations of an information handling system in which an exemplary embodiment of the present invention may be implemented are depicted. Embodiments of the present invention generally are implemented as information handling systems that include automated computing machinery. For simplicity however and because such information handling systems with automated computing machinery will often in fact comprise personal video recorders of one form or another this disclosure refers generally to implementations of embodiments of the present invention as personal video recorders or PVRs. 

The PVR is connected to the television by cable . The cable connection can be for video and audio through a standard video cable or for television broadcast frequencies through a standard coaxial cable. A remote control unit allows users to interact with and control the PVR . Remote control unit emits infrared IR signals although other kinds of remote control emissions are within the scope of the invention including for example radio control. The example PVR includes an IR window for receipt of information and instructions from remote control unit . Functions provided by use of the remote control unit include the ability to move a cursor on a display and select items shown on a display.

The remote control unit includes conventional numeric keys as well as buttons associated with television and recorded playback control including a Volume control a Channel selector a Mute button and buttons for Play a rewind button called Back a fast forward button labeled Fwd and a pause button . The Record button is used to instruct the PVR to record a show typically when the show has been selected for example through navigation through a series of display screens depicting television broadcast schedules for televisions shows.

In the previous few paragraphs we described an embodiment of the present invention as an information handling system with automated computing machinery configured as a PVR a set top box coupled to a television for display and user interaction and controlled by a remote control unit. It is useful to understand that the set top box configuration is not at all the only configuration of a PVR within the scope of the present invention and to clarify this point we ask the reader to consider PVRs implemented as software installed upon general purpose computers. In the case of a PVR embodied upon a general purpose computer the PVR is implemented as software installed in computer memory in a conventional fashion to embody the inventive steps of the present invention.

Although a PVR implemented as a set top box will include by special design within the set top box all the hardware resources needed to implement the steps of the invention and store content in accordance with the invention not all computers will possess such hardware. To the extent that any general purpose computer however and today many of them do possesses sufficient resources to download read from a compact disc receive cable television or otherwise access recordable content and sufficient resources to store such recordable content on hard disk writable optical drives or other storage media then any general purpose computer can be configured as a PVR according to an embodiment of the present invention.

For PVRs embodied in general purpose computers according to the present invention PVR controls are implemented through the usual user interface as provided in connection with any particular computer terminal computer screen computer keyboard computer mouse and so on. In this sense general purpose computers include personal computers portable computers minicomputers mainframes laptop computers handheld computers personal digital assistants wireless Internet enabled cell phones and so on.

Also stored in RAM is an operating system . Embodiments of the present invention are directed towards personal video recording for multiple users. It will occur to readers skilled in the art that much of the work of administering user accounts for many users may be downshifted to a multi user operating system such as Unix Linux or Microsoft NT . The multi user features of typical embodiments of the present invention however tend to be features of application software. PVRs according to embodiments of the present invention therefore may use single user operating systems such as Microsoft s Disk Operating System or DOS as well as multi user operating systems or even operating systems developed as special purpose systems just for use in PVR according to this invention. In this disclosure we speak of administration of multiple users in terms of user profiles to distinguish our application level user administration from any operating system s administration of user accounts. 

The PVR of includes storage space for shows. Storage space can be implemented as hard disk space optical drive space electrically erasable programmable read only memory space so called EEPROM or Flash memory RAM drives not shown or as any other kind of computer memory capable of receiving and storing recorded content as will occur to those of skill in the art.

The example PVR of includes a subsystem for content capture . This subsystem for content capture is implemented in typical embodiments according to content sources and can include in various embodiments a broadcast television tuner for receipt of broadcast television a cable box for receipt of cable television a satellite receiver for receipt of satellite television and an Internet connection for downloading recordable content from the Internet .

The example PVR of includes a codec which can take the form of a video card plugged into the system bus of a personal computer or other forms as will occur to those of skill in the art. The codec provides video and audio output from recorded shows in storage space to an input output interface . The codec can also provide changes in video compression or video quality as needed in particular instances. The input output interface provides video and audio output to a display device . In the case of PVRs implemented with connection to televisions the display device is a television. In the case of PVRs implemented as general purpose computers the display device is often implemented as a computer screen. The display device is any device as will occur to those of skill in the art capable of displaying video and audio content.

The example PVR of includes an input output interface . The input output interface in PVRs implemented as general purpose computers is a computer interface including for example conventional software drivers and computer hardware for controlling output to display devices such as computer screens as well as user input from user input devices such as computer keyboards and computer mice. In the case of PVRs as set top boxes an input output interface comprises for example software drivers and computer hardware for controlling displays on display devices such as television screens and user input from user input devices such as remote control devices like the one illustrated at reference in and .

The PIN is assigned to the user at registration time and is unique to the user. In PVRs implemented as set top boxes it is common to utilize numeric PINs because they are easily entered through numeric keys on remote control units reference on . Numeric PINs of course are not a requirement of the invention. Clearly PVRs implemented upon general purpose computers or any device having a keyboard for example would experience no particular benefit from numeric only PINs or passwords.

The user privilege level provides the capability of distinguishing privileges according to class of user. That is the user privilege level supports the establishment of classes of users having various levels of privilege. A common example is a class of administrative users or super users who are privileged to edit the profiles of other users. In a home setting therefore parents would often be super users privileged to set content restrictions on children s profiles. In a business setting system administrators in the Information Technology Services organization would often be privileged to create and administer profiles for users with normal usage privileges.

The example user profile of also provides several example data elements for recording characteristics of storage space available for recording shows on behalf of the user represented by the profile. The user profile provides data elements for allocated space used space free space borrowed space loaned space a Boolean indication whether the user authorizes lending to other users storage space allocated to the user and a lending priority rating .

The allocated space field records the amount of storage space presently allocated to the user. It is usual although not a requirement of the invention that the allocated space is altered only by super users so that normal users avoid conflict risked by normal users changing their own storage space allocations. An initial quantity of allocated space is assigned to each user at registration time when the user s user profile is created. sets forth a pie chart showing an example of allocation of storage space in a residential setting. In the example allocation of allocation of 100 of the storage space of a PVR within a family includes allocation of 80 of the storage space for parents 40 for father and 40 for mother and allocation of 20 of the storage space for children 10 for a son and 10 for a daughter .

As the user records shows in the user s allocated space when a show is recorded in a user s allocated storage space some of the storage space the space upon which the show is recorded is said to be used. Each show has a storage space requirement that uses some of a user s allocated storage. The current total of the used space of all the shows recorded for a user can be stored in the UsedSpace field . The free space field is provided for storing the difference between allocated space and used space . When a PVR records a show for a user the PVR increments UsedSpace by the amount of the show s storage requirement and decrements FreeSpace by the same amount.

When the PVR records a show for a user whose FreeSpace is less than the show s storage space requirement it is an aspect of PVRs according to embodiments of the present invention that the user acting as a borrower can borrow space from another user a lender. The amount of storage space that the user represented by the user profile has borrowed can be recorded in the BorrowedSpace field . Similarly the amount of storage space that the user has loaned to other users can be recorded in LoanedSpace . Just as the PVR decrements FreeSpace when the PVR records a show for the user the PVR also can decrement FreeSpace when the PVR loans a portion of the user s allocated space . In this example therefore the FreeSpace amount that is the amount of storage space available to a user for recording shows would be the user s allocated space minus the user s used space minus the user s loaned space . It will be discussed in more detail below but it should be clear that when a user s free space is less than the storage space requirement for a show to be recorded for the user an alternative process available to a PVR in addition to borrowing space from a lender is to repossess space that the user previously loaned to borrowers. In the present example such repossession would reduce LoanedSpace and increment FreeSpace by the amount of space repossessed.

The example user profile of also provides a Boolean data element LendingAuthorized for indicating whether the user represented by the profile authorizes borrowings from the user s allocated storage. A lending control such as the LendingAuthorization field can be provided at the user level for users who may wish to for example exclude all lending from their allocated storage. Establishing a blanket lending authorization at the user level is a fairly coarse quality of control and it is possible within the scope of the present invention to establish more fine grained controls over lending authorization.

An example of a more finely grained lending authorization is depicted in the lending authorization records in . The example lending authorization records are more finely grained in that they represent authorizations to lend a specific maximum amount identified in the MaximumLoan field from a specific lender identified by the lender s user ID in the LenderID field to a specific borrower identified by the borrower s user ID in the BorrowerID field . An example of a less finely grained lending authorization is one in which a PVR is programmed to permit lending to any registered user. In terms of the example data structures of lending to any user can be implemented by permitting a wild card entry in the BorrowerID field in the lending authorization records such as for example an asterisk which is treated by the PVR as an indication that the lender identified in the lending authorization record authorizes loans to any user.

Of course other granularities are possible within the scope of the present invention including for example lending authorizations having validity periods with beginning dates and ending dates or lending authorization for identified user groups or for users having certain lending priority levels. The possible settings are many and any data structure encoding method or granularity of lending authorization as will occur to those of skill in the art is well within the scope of the present invention.

The example user profile of also provides a data element called LendingPriority for establishing lending priority ratings for users. This data element can be used in algorithms to establish the sequence in which space otherwise authorized for lending will be borrowed or to exclude some loans on the basis of comparisons of priorities among users. By establishing two simple lending priorities for example lending priority rating 1 and lending priority rating 2 in a home setting super users parents for example can assign themselves a higher lending priority rating than child users and either exclude all lending from parents to children or exclude lending to children as long as space is available for lending from children to children so that children could only borrow from parents after using all space allocated to children. A further example data structure a system level profile in this example called PVR Profile can be established to record PVR level parameters. In this example the PVR profile includes a Boolean indication LendingPriorityExcludes whether user s lending priority ratings are to be used by the PVR to exclude all lending to users having lower priority ratings or just sequence the lending by requiring loans first from users with lower priority ratings.

The example data structures of include show records . A show record is a data structure representing a segment or clip of recorded content such as video and audio for example a television show or a motion picture. There are generally two sources of show records user scheduling and preference recording. User scheduling is a user s entering through a user interface a title and recording schedule for the show. The user interface will vary from PVR to PVR. The user interface in PVRs implemented as set top boxes is typically a remote control unit maneuvering a pointer over a scrolling list of television shows on a television screen. The user interface in PVRs implemented as personal computers is typically a keyboard a mouse and a computer screen upon which is displayed a mouse pointer used to highlight and select from scrolling lists of television programs or web sites hosting video clips of interest.

 Preference recording is a PVR s being programmed to select and record shows based upon previous indications of user preference. Previous indications of user preference are implemented for example as a genre preference in a user profile causing a PVR so programmed when a user has sufficient free space to support such recording reading the user s previously indicated preference for Comedy Drama Science Fiction or Sports for example scanning presently available sources selecting the first show that matches the user s genre preference for which the user has sufficient free space and recording that show. In accordance with the present invention the PVR can be programmed to borrow space from another user if the user has insufficient free space to store the show.

Alternatively to achieve even greater power to express particular preferences PVRs can support separate user preference records linked to user profile through a userID as a foreign key. Such separate preference records can support any indication of user preference including for example preferences for particular actors preferences for particular title and indications of a user s intensity of preference encoded as preference Level . With respect to preference levels in particular the PVR can be programmed to record a range of preference levels for example 1 through 10 in which a preference level of 10 indicates that the user likes a particular show title very much 5 indicates neutrality and a 1 indicates dislike. The Boolean field Preference on the show record indicates whether a recording is a preference recording. So that a user can know what has been recorded on the user s behalf without the user s prior knowledge PVR screens showing a user s recorded shows typically indicate visually the recorded shows that are instances of preference recording.

The example show record of includes data elements representing an identification code for the show represented by the show record a show title a filename for the show the genre of the show comedy drama sports and so on an owner identification field called ownerID recording the user ID of the user on behalf of whom the show is recorded the estimated storage space requirement for the show the duration of the show a Boolean indication whether the show has been viewed by the owner an indication of the source of the show the schedule data for the show a record period for the show and a retention period for the show .

Shows in the present example however are identified by identification codes identification codes having no relationship to storage locations in storage space. There would be for example one identification code for a show titled Dukes of Hazzard another identification code for the show titled Star Trek and another for the show titled Buffy The Vampire Slayer. Operating systems on generally organize storage space on in segments identified by filenames. Show records according to therefore provide a filename field to record the location in storage space where a show is recorded so that shows can be located for viewing and later for deletion.

PVRs according to some embodiments of the present invention are programmed to utilize the ShowID field as a completely unique key identifying a particular instance of a show to be recorded at a particular date and time encoded in the Schedule field in . Other embodiments are programmed to treat the ShowID as a short identifier for a title such as Star Trek or Buffy The Vampire Slayer. In embodiments that treat the ShowID are a title identifier PVRs can build a unique key for a particular instance of a show from the title plus the date and time Schedule when the show is to be recorded.

The storage space requirement and the duration are related. The storage space requirement generally is expressed as some number of bytes kilobytes or megabytes of storage space. The duration is generally expressed in minutes or hours a half hour show a two hour movie and so on. Shows can be recorded in storage space using various kinds of compression ranging from no compression to lossless compression to quite lossy compression. For a show of a given duration applying higher levels of compression reduces the storage space requirement for the show.

The source can be encoded to indicate a channel number for capturing recorded content from broadcast television cable television or satellite television. The source can be encoded with an Internet address identifying a source for downloading recordable content. Internet addresses can be encoded by use of dotted decimal addresses Universal Resource Locators URLs or Universal Resource Identifiers URIs .

The schedule is a data element for storing the broadcast schedule of the show represented by the show record . For example the schedule field can be encoded with a date and time when a television show is broadcast and therefore to be recorded. The record period provides an indication of a period over which a show may be recorded many times. For example schedule can be encoded with a schedule indication of Wednesday 7 00 p.m. and record period can be encoded with January through June resulting in recording the indicated show weekly for six months.

The retention period is a field indicating how long to retain the show before deleting it. The retention period and indications of viewing can work together in various PVR according to embodiments of the present invention. In for example the PVR Profile includes a Boolean indication whether to delete shows only after they are viewed DeleteOnView . In a PVR according to if DeleteOnView is set True then the PVR will not delete a show from storage space until the show is viewed even if the view time is later than the end of the retention period . The PVR will retain the show until the end of the retention period if the end of the retention period is later than the time when the show is viewed. Alternatively DeleteOnView is reset False and then the PVR deletes the show at the end of the retention period regardless whether the show has been viewed.

The Viewed field in the show records indicates whether the owner of the show has viewed the show. In a multi user environment however it may be useful to retain the show in storage until more than one user has viewed it. The viewing records in are an alternative or an expansion of the use of the Boolean Viewed field in the show records to allow more than one user to express an interest in viewing the show and retain the show in storage space until all users indicating interest have viewed the show. The ShowID is a foreign key linking the viewing records to a show record . The ViewerID is a user ID of a user indicating an interest in viewing the show identified by the ShowID . Viewed is a Boolean indication whether the user identified as ViewerID has viewed the show. The fact that a viewing record exists bearing a particular ViewerID can be treated as an expression of interest or a Boolean field such as Interest can be added to viewing records as an affirmative expression of interest in viewing the show identified in ShowID .

In lending and borrowing storage space among users some method is needed to keep track of who has lent what to whom. The example data structures of provide an example data structure loan records for recording which lending user identified by LenderID has lent what amount of storage space to which borrowing user identified by BorrowerID . In a common example a user identified by a userID in a user profile shall have outstanding several loans of storage space each represented by loan record . In such an example the user s BorrowedSpace field in the user s user profile will contain the sum of the amounts in the LoanAmount field in the representative loan records .

The method according to includes comparing a borrower s free space in user profile on and the show s space requirement in the show record . The comparison supports determining whether the show s storage space requirement exceeds the borrower s free space. As shown in the example of the determination whether storage space requirement exceeds free space is done at the beginning of the overall recording process that is just prior to beginning actual recording represented as step on . If the show s storage space requirement does not exceed the borrower s free space then recording continues to completion . If the show s storage space requirement does exceed the borrower s free space the difference is referred to as a deficit amount then a PVR implementing the example method of selects a lender from whom to borrow some storage space.

A lender in this sense is a user registered on the PVR having free storage space or free space that is for example a free storage space field in the lender s user profile having as its value an amount larger than zero and reflected in the lender s user profile free space larger than zero. All lenders may have MaximumLoan authorizations on less than the deficit amount. All lenders may have free space on less than the deficit amount. It may therefore be necessary to borrow loan amounts from more than one lender the loan amounts each being less than the deficit amount but adding up in total to at least the deficit amount.

The PVR can fail to select one or more lenders having authorized and available storage space for lending. In such an eventuality the PVR can be programmed to stop the recording of the show.

The example method of includes borrowing a loan amount from a selected lender. Borrowing the loan amount from the selected lender can be carried out by use of the data structures of for example by adding the loan amount to the LoanedSpace field in the lender s user profile subtracting the loan amount from the FreeSpace field in the lender s user profile and adding the loan amount to the BorrowedSpace field in the borrower s user profile. In addition to adjusting the LoanedSpace FreeSpace and BorrowedSpace as just described in this example the PVR also would create at least one loan record on identifying the lender in LenderID the borrower in BorrowID and the loan amount in LoanAmount . In this example the borrowing is carried out in dependence upon the deficit amount in the sense that the loan amount is the deficit amount.

In other examples the loan amount the amount actually borrowed is not equal to the deficit amount. The PVR may be programmed to borrow for the borrower more than the deficit amount to give a little headroom for recording. In addition several loans may be required to amount to the deficit amount if for example no single lender has an authorized maximum larger than the deficit amount or if no single lender has free space larger than the deficit amount. In such cases there would be more than one loan amount none of which would be equal to the deficit amount but the sum of which would be at least equal to the deficit amount. In these examples although the loan amount may not be equal to the deficit amount the borrowing is carried out in dependence upon the deficit amount in the sense that the deficit amount is a guide to the total amount to borrow that is a guide to borrowing the loan amount.

In the example method of the owner of the show that is the borrower or others who may be interested to do so eventually view the show. That is the PVR displays the show . The loan amount of storage space borrowed to support recording the show is then returned to the lender. Returning the loan amount involves effectively reversing the borrowing process. That is the PVR finds each loan record bearing the ShowID of the recorded show. For each such loan record the PVR subtracts the LoanAmount from the LoanedSpace field in the lender s user profile adds the LoanAmount to the FreeSpace field in the lender s user profile subtracts the LoanAmount from the BorrowedSpace field in the borrower s user profile and deletes the loan record .

With reference to and also with reference to the example data structures of we describe an exemplary method of selecting lenders. In selecting a lender the PVR can for example as shown in identify a lender by scanning through lender authorization records like those depicted at reference on for MaximumLoan authorizations on at least equal to the deficit amount. To the extent that the PVR supports borrowerIDs in lending authorization records then the scan is for lender authorizations records authorizing for the user who owns the show to be recorded a MaximumLoan amount at least equal to the deficit amount. To the extent that the PVR supports borrowerIDs with wild card authorizations for lending to any user then the scan is for lender authorizations records authorizing lending to the user who owns the show to be recorded or to any user a MaximumLoan amount at least equal to the deficit amount. Using the LenderID in the scanned lending authorization records as a foreign key into the user profiles the PVR compares MaximumLoan authorizations and the free space for user identified as lenders in lending authorization records having MaximunLoan amounts at least equal to the deficit amount. The PVR then selects as the lender the first lender found in the scan and comparison having a MaximumLoan amount and a free space amount both of which are at least equal to the deficit amount. In this sense lenders are selected in dependence upon the deficit amount.

All lenders may have MaximumLoan authorizations on less than the deficit amount. All lenders may have free space on less than the deficit amount. It may therefore be necessary to borrow loan amounts from more than one lender the loan amounts each being less than the deficit amount but adding up in total to at least the deficit amount.

In the example method of it is the existence of a lending authorization record bearing the borrower s user ID in the BorrowerID field that represents authorization for a loan from a lender the lender identified in the LenderID field to the borrower. The PVR programmed to find and finding or not finding at least one such lending authorization record is determining whether there are lenders authorizing borrowing. More particularly the PVR programmed to find and finding or not finding at least one such lending authorization record is determining whether the borrower is authorized to borrow from one or more lenders. The example method of selects as lenders one or more users whose free space is at least equal to the deficit amount.

More particularly with regard to the example method depicted includes finding a lending authorization record on for the borrower meaning a lending authorization record having the borrower s user ID in the BorrowerID field . The method of compares the MaximumLoan value from the lending authorization record with the free space value in the corresponding user profile that is in the user profile of the lender identified in the LenderID field in the lending authorization record .

The method of includes checking for correct priority . The correct priority depends on the particular PVR. The PVR can be programmed for example so that the priority borrower s priority must be higher than the lender s priority greater that or equal to the lender s priority less than the lender s priority or less than or equal to the lender s priority. Other ways of programming a PVR for priority comparisons or dependencies will occur to those of skill in the art and all such ways are well within the scope of the present invention. In the method of if the lender identified in a lending authorization record fails the priority requirement the method loops back and repeats the process of the method by finding another lending authorization record .

In operation of the example method of it is possible that no single lender alone has sufficient free space to meet the deficit. The PVR implementing the method of therefore is programmed so that upon finding a lender who has some free space and meets the priority requirement the PVR creates a loan record having a LoanAmount equal to the lender s MaximumLoan amount or the lender s free space whichever is less. The example method of also adds the loan amount to the borrower s BorrowedSpace adds the loan amount to the lender s LoanedSpace and subtracts the loan amount from the lender s FreeSpace . The example method adds the loan amount to a running total for the current show and the example repeats the steps of finding an lending authorization record comparing checking priority creating loan records accounting for the loan and adding a running total until the running total of the loan amounts is at least equal to the deficit amount.

Processing of borrowed storage space according to embodiments of the present invention includes returning borrowed space to lenders. As described earlier return of borrowed space can occur when the borrower has viewed the show for which the space was borrowed. It can also occur however within the scope of the present invention that borrowed space needs to be repossessed by a lender. More particularly when recording a show for a lender the show can have a storage space requirement exceeding the lender s free space. The difference between the storage space requirement of the show and the lender s free space is called a deficit amount. The lender in this example is a user who has already loaned some storage space to one or more other users that is borrowers. In this example a PVR according to an embodiment of the present invention is programmed to determine whether other free space is available for lending from other users to the lender and if no other free space is available for lending to the lender returning from at least one borrower to the lender at least part of the loan amount previously loaned to the borrower from the lender.

The PVR in this example is programmed to scan lending authorization records to determine whether there exists storage space available for the lender to borrow . If storage space is available for the lender to borrow then the PVR arranges a loan to the lender and recording continues . In this example if there is no space available for borrowing then the PVR repossesses at least some of the storage space previously borrowed by other users borrowers from the lender. More particularly the PVR proceeds by finding a loan record representing a loan of storage space from the lender to a borrower adding the LoanAmount from the loan record to the lender s FreeSpace field subtracting the LoanAmount from the lender s LoanedSpace field and subtracting the LoanAmount from the borrower s BorrowedSpace field.

In the example of there remains the problem of whether the borrower gets to keep the borrower s show the show identified in the ShowID in the loan record the show for which the borrower previously borrowed storage space from the lender. In the example of the PVR is programmed to determine whether the borrower has sufficient free space to store the show identified in the ShowID field in the loan record . If not the PVR deletes the borrower s show deletes the loan record and completes the recording . If the borrower does have sufficient free space to accommodate the borrower s show the PVR subtracts the loan amount from the borrower s FreeSpace deletes the loan record and completes the recording .

If the LoanAmount in the loan record is less than the deficit amount the PVR may be programmed to repeat the steps of finding a loan record repossessing loaned storage space deleting a borrower s show or subtracting a loan amount from borrower s FreeSpace and deleting a loan record until sufficient storage space has been repossessed to support completing the recording of the lender s show . This is an example of repossessing more than one loan amount. That is in this example when the lender has outstanding loan amounts to more than one borrower or more than one loan to the same borrower wherein returning from the borrower to the lender at least part of the loan amount includes returning at least parts of loan amounts from more than one borrower.

The storage space requirement for a show is an estimate calculated on the basis of the duration of the show and the estimated compression level for the show. illustrates three example data structures for compression level One as a default compression level for the entire PVR another as a default compression level at the user level and a third as a compression level for particular show . The default compression levels at the user level and the PVR level are provided so that the PVR can record a compression level in a show record whenever a show record is created either by a user s scheduling a show for recording or by preference recording.

As an aid to understanding we discuss an example of a calculation of a desired minimum compression level. As mentioned earlier one of the formats defined for HDTV broadcasting within the United States is 1920 pixels horizontally by 1080 lines vertically at 30 frames per second. If these numbers are all multiplied together along with 8 bits for each of the three primary colors the total data rate required would be approximately 1.5 gigabits per second. Because of the 6 megahertz channel bandwidth allocated for HDTV each channel will only support a data rate of 19.2 Mb sec which is further reduced to 18 Mb sec by the fact that the channel must also support audio transport and ancillary data information. This restriction in data rate means that the original signal must be compressed by a figure of approximately 83 1. This estimated minimum compression is for broadcast only with commercial HDTV quality of frame rate and resolution. In addition this estimated minimum compression is raw broadcast compression only just enough to fit a video stream into a transmission bandwidth not yet affected by desirable further relative compression needed to fit a show into a particular space requirement in the storage space of a PVR. As illustrated by the example compression level records in and discussed in more detail below users willing to reduce video quality can achieve much higher compression levels for data storage.

As a further aid to understanding compression operations in PVRs we present an example calculation of a compression ratio presented in terms of a single image which could be for example a static graphic image or a single video frame. The compression ratio is defined for calculation as the number of bits pixel in the original image divided by the number of bits pixel in the compressed image. Assume that the original image has a resolution or rather a size of 320 240 pixels each represented in a 24 bit data word. And assume that after initial compression the compressed file size is 5000 bytes. Then the bits pixel for the compressed image is 5000 8 320 240 0.52 bits pixel. In other words the original image used need 24 bits to represent each pixel but after compression only need 0.52 bits are used to store each pixel on average . The compression ratio therefore is 24 0.52 46.

Factors that affect overall estimate compression level are shown in tables and in and . As shown in both tables but referenced to table factors affecting compression level are shown to include encoding type which we assume carries with it a particular compression algorithm supported colorspace size frame rate resolution and audio quality .

The example records in table show several examples of compression level estimated on the basis of the factors affecting compression. The compression levels are shown in absolute terms and then in parenthesis relative to a video source bit stream. Table is organized with respect to an HDTV source having an initial resolution of 1930 1080. Table is organized with respect to an NTSC source having an initial resolution of 720 480.

Record shows an estimated initial raw compression level in the source stream of 80 1 estimated on the basis of encoding according to MPEG 2 colorspace size 4 4 4 or 48 frame rate of 30 frames second resolution of 1930 1080 pixels an HDTV standard with High audio quality . Record is shown with a relative compression of 1 with respect to itself.

The target records records through illustrated compression levels supported by an exemplary PVR with respect to a video source of the kind represented in the source record . Record for example shows an estimated absolute compression level of 480 1 or a compression level of 4 relative to the source stream estimated on the basis of encoding according to MPEG 2 colorspace size 48 frame rate of 30 frames second resolution of 720 480 pixels an NTSC video standard with High audio quality . In other words recompressing the source stream using a resolution reduced from 1930 1080 HDTV to 720 480 a high quality of NTSC video reduced projected space requirement for a subject show by a factor of six. This is a useful demonstration of the fact that although algorithmic compression alone can result in absolute compression ratios in the range of approximately 100 to 200 reductions in parameters other than compression technique as such factors such as for example colorspace frame rate resolution and audio quality can result in very large overall compression levels.

Record shows an estimated absolute compression level of 960 1 and a relative compression of 12 with respect to the source stream achieved by reducing the size of the colorspace from 48 to 24 that is for example from 4 4 4 to 4 2 4. Record shows an increase in relative compression to approximately 48 through an additional reduction in resolution . Record shows an estimated relative compression level of 100 from changing encoding to MPEG 1 and reducing audio quality . Record shows an estimated relative compression level estimated from an additional change in encoding to MJPEG and an additional reduction in audio quality .

For a further example consider table in . Table shows a video source having raw compression of 80 encoded in MPEG 2 supported a colorspace size 426 of 48 4 4 4 having a frame rate of 30 a resolution of 720 480 and high audio quality . The relative target compressions supported in a example PVR implementing table include those represented by record having a relative compression level of 4 achieved by reducing resolution record having a relative compression level of 16 achieved by a further reduction in resolution record having a relative compression level of 32 achieved by reducing colorspace record having a relative compression level of 128 achieved by changing encoding and reducing audio quality record having a relative compression level of 256 achieved by a further change in encoding and a further reduction in audio quality .

The examples records representing various compression levels in and illustrate that compression level generally increases with decreases in colorspace size resolution and audio quality. Compression level also increases with decreases in frame rate. Effect on compression level of different encoding types with their associated compression algorithms depends on the particular encoding type and the kind of control provided by particular codecs implementing an encoding. For all these reasons representations of compression level in various embodiments of the present invention typically are estimates based upon the factors discussed and other factors as will occur to those of skill in the art. The use of a wide variety of video encodings video compression algorithms and factors affecting video compression levels as will occur to those of skill in the art are all well within the scope of the present invention.

Tables such as those shown in and can be used to establish a show s storage space requirement. A show will have a raw compressed file size or space requirement determined for a show of a given duration on the basis of a source record such as the exemplary ones depicted at references and . PVRs according to embodiments of the present invention can support establishment at their system levels in for example a PVR profile such as the one depicted at reference in a data element as TargetFileSize in which is stored a storage space guideline for all shows recorded on the PVR. To accommodate shows of varying length the TargetFileSize parameter can be expressed in terms of for example megabytes per minute so that shows having durations of 60 minutes would have target storage requirements twice as large as 30 minute shows and so on. Then given an initial raw compressed file size based on source parameters exceeding a show s target space requirement according to TargetFileSize a PVR can be programmed to scan a table such as those depicted in and to find a relative compression level and parameter set whose additional compress will result in an actual space requirement no greater than the target space requirement according to TargetFileSize .

For example consider given a 30 minute NTSC show broadcast in MPEG 2 with a resolution of 720 480 requiring with no further compression an initial raw compressed file size of 50 megabytes corresponding to a supported video source depicted at record in table on . In this example the TargetFileSize indication for a 30 minute show is 15 megabytes. The PVR is programmed to scan through table for a supported compression configuration resulting in a file size no greater than 15 megabytes. The PVR selects the supported compression level represented by record having a relative compression level of 4 with respect to source video. The PVR orders its MPEG 2 codec to recompress the show using the parameters of compression level record resulting in an actual estimated storage requirement of 12.5 megabytes which the PVR stores as the show s storage requirement in for example a SpaceRequirement data element in a representative show record as depicted on .

The tables in and show two example configurations of supported compression levels in PVRs according to embodiments of the present invention. Many such configurations are possible including at least one for each kind of source video supported by any particular embodiment of PVR. All such configurations as will occur to those of skill in the art are well within the scope of the present invention.

Shows recorded on PVRs generally are compressed but the actual level of compression actually achieved generally is known only as an estimate. Each show s storage space requirement therefore is an estimate. In other words when a PVR begins recording a show perhaps even borrowing storage space in dependence upon a comparison of the show s storage requirement and a user s free space the PVR cannot know for certain that the amount of space borrowed can actually support the recording. A method is needed for checking the show s storage space requirement during recording and borrowing more space if needed. In fact we disclose two ways of administering the risk of storage space estimation one method using a space check threshold for checking a show s storage space requirement during recording and a second method using overallocation.

The space check threshold is the portion of the show duration in show record to be recorded before recalculating the show s storage space requirement . The space check threshold can be implemented in data structures as shown at reference in the PVR profile structure in . A show having for example a duration of 30 minutes in a PVR having a space check threshold of 90 the tracked recording period for the show would be 27 minutes.

When the tracked recording period is at least equal to the space check threshold multiplied by the show s duration the PVR checks the estimated storage space requirement by comparing the actual storage space used with the amount of storage space projected to be used based on the estimated storage space requirement. The projected usage is the space check threshold multiplied by the original estimated storage space requirement .

If the actual space used is greater than the projected usage the PVR according to the method of increments the show s storage space requirement . Incrementing the show s storage space requirement can be accomplished by adding a predetermined proportion of the original storage space requirement. A predetermined proportion can be stored as for example the SpaceCheckAddProportion in the PVR profile . If the original storage requirement for the show reflected in field in the show record were 20 megabytes and the SpaceCheckAddProportion were 10 then the PVR would add 2 megabytes to the show s storage space requirement resulting in a new storage space requirement of 22 megabytes.

The method of includes comparing the borrower s free space and the new storage space requirement to determine whether a deficit exists. This comparison is useful now because even if the user had a deficit requiring borrowing when recording began whether the user has a deficit now is not known. The borrower s free space can change after recording begins. If a deficit does exist then the method of selects a lender borrows a new loan amount at least as large as the current deficit and completes the recording . If the PVR according to is unable to find a lender recording stops .

Assume that the initial bit rate for a 30 minutes show a video download for example is 150 kilobits second which would be fairly high quality video at MPEG 1. Thirty minutes is 1800 seconds the duration of the show. 150 000 multiplied by 1800 is 270 megabits total space requirement divided by 8 bits byte is about 34 megabytes for the show s storage space requirement. This show is downloaded with quite a lot of compression and the storage space requirement is definitely an estimate.

Because we know before beginning recording that the storage space requirement is an estimate another way of dealing with the risk of estimation is shown in the method illustrated in . We discuss the method of in view of the example data structures of . The method according to begins the overall recording process by incrementing the show s storage space requirement in accordance with an overallocation rate. The overallocation rate in this example is provided in the data structures of at reference in the PVR profile . If the overallocation rate were 110 for example then according to the method of the show s storage space requirement would be increased from 34 megabytes to 37.4 megabytes 34 110 .

The method of continues by comparing the borrower s free space and the show s new storage space requirement selecting a lender if a deficit exists borrowing a loan amount and completing the recording . The method of proceeds after recording to compare the actual storage space used read from an operating system s file system for example using the show s filename and return to a lender the unused amount.

Returning the unused loan amount expressed in terms of the data structures of includes finding a loan record bearing the ShowID of the recorded show . The PVR according to the method of subtracts the unused amount of storage space from the LoanedSpace field in the lender s user profile adds the unused amount to the FreeSpace field in the lender s user profile and subtracts the unused amount from the BorrowedSpace field in the borrower s user profile.

The effectiveness of compression depends on genre. More particularly the effectiveness of actual video compression depends on the motion of the subjects depicted in the video. Consider five frames of a close up still life of an apple. The first frame must be encoded in its entirety but the subsequent four frames need only refer to the first frame they need not be encoded at all. In five frames of video tightly focused on eleven football players during a play however a large proportion of the pixels in the frame will change from frame to frame for each of the five frames. Five frames of football is must less effectively compressed than five frames of a fine arts show. The arts are more effectively compressed than drama. Drama is more effectively compressed than action movies. Action movies are more effectively compressed than sports events and so on.

The methods of are also adapted to address the problem that effectiveness of compression varies with genre. First we discuss the method of in view of the example data structures in . depicts a form of PVR profile already familiar from which has been amended to shift to a new space check profile the space checking fields SpaceCheckThreshold SpacecheckAddProportion and OverallocateRate . The new space check profile includes a genre field . The space check profile is useful to vary according to genre the values of the space checking fields SpaceCheckThreshold SpacecheckAddProportion and OverallocateRate .

In a PVR implementing the method of for checking storage space requirements during recording the SpaceCheckAddProportion can be set in a space check profile to 5 for a genre of fine arts. The SpaceCheckAddProportion can be set in another space check profile to 10 for a genre of drama. The SpaceCheckAddProportion can be set in still another space check profile to 15 for a genre of action. The SpaceCheckAddProportion can be set in yet another space check profile to 20 for a genre of sports. And so on using different increments for various genres as will occur to those of skill in the art or as set in the discretion of users authorized to set the SpacecheckAddProportion in space check profiles.

In a PVR implementing the method of for overallocating storage space at the beginning of the recording process the proportional increment of overallocation the OverAllocationRate can be set in a space check profile to 105 for a genre of fine arts. The OverAllocationRate can be set in another space check profile to 110 for a genre of drama. The OverAllocationRate can be set in still another space check profile to 115 for a genre of action. The OverAllocationRate can be set in yet another space check profile to 120 for a genre of sports. And so on using different OverAllocationRate values for various genres as will occur to those of skill in the art or as set in the discretion of users authorized to set the SpacecheckAddProportion in space check profiles.

With reference to and in view of the data structures of we described a method of incrementing the storage space requirement in dependence upon genre. More particularly the method of is a more detailed method of incrementing the storage requirement as disclosed in connection with reference of a method of checking a storage space requirement during recording. The method of includes reading the show s genre on from the show record selecting a space check profile in dependence upon the show s genre and incrementing the storage space requirement by the product of the SpaceCheckAddProportion on Space Check Profile in and the current SpaceRequirement for the show in show record on .

With reference to and in view of the data structures of we described a method of overallocating storage space at the beginning of the recording process. More particularly the method of is a more detailed method of incrementing a storage space requirement according to an overallocation rate as disclosed in connection with reference of . The method of includes reading the show s genre on from the show record selecting a space check profile in dependence upon the show s genre and incrementing the storage space requirement to the amount of the product of the OverAllocateRate on Space Check Profile in and the current SpaceRequirement for the show in show record on .

At this point we have disclosed at length personal video recording with loans of storage space among users. We can add power and flexibility to personal video recording however by supporting various ways of allowing users to aggregate their abilities to lend borrow and record shows. We therefore now turn our attention to pools and groups.

We begin with a reconsideration of overall structure of storage space. With reference to we described above an overall structure of storage space in which all available storage space was allocated to users. Now with reference to we describe a more flexible overall structure of storage space. The exemplary structure of storage space according to depicts at reference 20 of the overall storage space as unallocated to anyone at reference 20 allocated to Father at reference 20 to Mother at reference 10 to a group at reference 10 to a pool at reference 10 to Son and at reference 10 to Daughter. In the following discussion we describe in some detail how this new overall structure of storage space adds flexibility to personal video recording.

A pool is an aggregation of storage space for lending. Pools are assigned their own storage space. Pools lend their storage space to borrowers. Although there is nothing within the scope of the present invention that excludes pools from lending in this disclosure our examples of aggregations for borrowing are the groups described below. In our examples of pooling to reduce the risk of confusion and augment clarity of explanation and understanding we describe examples of pools that do not borrow.

Pools acquire their storage space by assignments of storage space from unassigned storage space or through allocations from users free space. Pools are generally authorized to lend their storage space to users or to groups. An example of an authorization to lend is creations of a lending authorization record.

More particularly depicts example data structures useful for implementation of pools. The data structures for lending authorization records loan records and the PVR profile are similar to those of . PVRs according to this kind of embodiments contain at least one pool profile each pool profile representing a pool. The pool profile comprises the data elements PoolID a pool identification field AllocatedSpace in which is stored the amount of storage space currently allocated to the pool FreeSpace in which is stored the portion of the pool s allocated space available for recording or lending and LoanedSpace in which is stored the amount of space currently on loan from the pool to users or groups.

Loans of storage space from a pool are authorized in lending authorization records such as those depicted at reference . The lending authorization records comprise the data elements LenderID . In the case of loan authorizations from pools the LenderID field stores a pool ID. Fields of the lending authorization records also include a BorrowerID which stores a user ID or a group ID of a user or group authorized to borrow from the pool. The BorrowerID field can also store a wild card value such as a indicating authorization to lend from the pool to any user or group. Fields of the lending authorization records also include a MaximumLoan field in which is stored the maximum amount of storage space authorized by the lending authorization record for lending from the pool to a borrower.

The selecting is carried out in dependence upon the deficit amount . That is for example a lender is selected who has authorized lending of at least the deficit amount and who has free space at least equal to the deficit amount. Alternatively if no single lender has sufficient free space and sufficient lending authorized several lenders may be selected until the lenders aggregate free space and maximum loan amount authorizing lending to the borrower are at least equal to the deficit amount.

The method according to includes borrowing in dependence upon the deficit amount from the selected lender for a borrower at least one loan amount of storage space the borrower having allocated storage space on the PVR optionally including free space . The borrowing is carried out in dependence upon the deficit amount in that at least the deficit amount needs to be borrowed. The loan amount may be for more than the deficit amount. The PVR can be programmed to build up the loan amount from several loan amounts each of which is less than the deficit amount but the sum of which is at least the deficit amount. When the loan or loans is settled a PVR programmed according to proceeds to record a show for the borrower. In this example the show has a storage space requirement as reference on exceeding the borrower s free space reference by the deficit amount .

In the method according to the selected lender can be a pool . In the method according to the borrower can be a user. As discussed in more detail below the borrower also can be a group. The method of as described in more detail below can include creating a pool including assigning storage space to the pool.

More particularly sets forth a flow chart depicting an exemplary method of assigning storage space to a pool. In the method of assigning storage space to the pool comprises allocating storage space from at least one user to the pool . It is useful for the user to have free space available for allocation to the pool. In the method of allocating storage space to the pool includes decrementing by a pooled allocation amount the user s storage space allocation and the user s free space . The method of also includes incrementing by the pooled allocation amount the pool s free space and the pool s allocated space .

Now with respect to the overall storage space structures illustrated in and consider the increased flexibility afforded by the use of pools. In the overall structure according to for example parents can treat the pool as a repository of borrowing overhead for the children . By issuing lending authorization records authorizing lending from the pool to the children with no lending authorization records authorizing lending directly from the parents to the children the parents empower the children with available storage space beyond that allocated specifically to the children and at the same time reserve for the parents exclusive use of their own core allocations .

Groups are aggregations of recording power. That is groups aggregate free space and borrowing power in support of recording rather than lending. Although it is not a limitation of the present invention in our exemplary aggregations it is groups rather than pools that are authorized to borrow storage space. It is pools rather than groups in our examples that lend storage space. Groups comprise members and groups at least implicitly and as described in more detail below apportion storage space among their members.

Group space that is storage space assigned to a group can be allocated or borrowed. Group space can be allocated from users free space or from unallocated space. Group space can be borrowed from any lender issuing a lending authorization record in favor of a group that is from users or pools.

The exemplary data structures of provide a member record representing each member of a group. A member of a group is a user having a member record identifying the user as a member of a group. The member records contain a group ID field as a foreign key linking each member record to a group in a one to many relationship.

The member records contain a user ID field identifying a user as a member of the group identified in the GroupID field . The user ID field is a foreign key linking the member records one to many to user profiles . In the exemplary data structures of therefore member records implement a many to many relationship between groups and users . That is each group can have many users as members and each user can be a member of many groups.

Groups can have stated preferences. More particularly groups through their authorized representatives can create expressions of preference in the form for example of user preference records . For groups expressions of preference the UserID field in a preference record stores a group ID acting as a foreign key linking user preference records one to many to groups. That is each group can assert many preferences. PVRs according to embodiments of this kind are programmed to carry out preference recording for groups in the same way that preference recording is done for individual users.

Groups authorized representatives can schedule recordings of shows for groups in the same way that shows are scheduled for users for example by creation of a show record effected through a user interface. More particularly a show scheduled to be recorded on behalf of a group has stored in its OwnerID field the group ID of the group on whose behalf the show is scheduled to be recorded. In such embodiments that group is considered the owner of such a show.

As for borrowing any lending authorization record on issued by any lender can store in its BorrowID field a group ID effectively authorizing lending to a group. Groups are authorized to borrow by use of a wild card such as a in the BorrowerID field when the wild card represents authority to lend to any borrower including groups. Lenders identified in the LenderID field of a lending authorization record can be any lender including for example users and pools.

Borrowing for groups can be further explained with reference to the exemplary method of personal video recording depicted in . The method of includes borrowing from a lender a loan amount on behalf of a borrower . The lender can be any authorized lender including for example individual users and pools. And the borrower can be any authorized borrower including for example groups as well as individual users. In the context of our example data structures an authorized borrower can be a group whose group ID appears in the BorrowerID field of a lending authorization record .

Loans from pools to groups are optional. That is there is no requirement within the present invention for pools to loan to groups and it is entirely within the scope of the present invention for a PVR s programming to effect loans to groups only from individual users.

PVRs can be programmed to accept scheduling entries for shows or expressions of group preferences from all group members or less than all. The example data structure for member records includes a Boolean field AuthorizedRep in which is stored an indication whether the member represented by the member record is authorized to schedule shows and assert preferences on behalf of the group.

To the extent that group allocation comes from members free space members allocated space as reference on and members free space on is reduced by the amount of storage space allocated from users free space to group storage space. There is no requirement that members contribute equally to allocations from members free space to group storage space. There no requirement that all or any users contributing free space to a group must be members of the group. Contributors users and or members can determine proportions of allocation from users free space when the group is created or can amend later through user interface screens .

It is an advantage of the use of groups to record shows that the use of individual user s free space is leveraged. An example of such leveraging is a show having a storage space requirement of 50 megabytes recorded for a group having three members each of whom contributed 20 megabytes of user free space to the group s storage space that is equal contributions from each user. In this example each user s free space is implicitly used at the level of 16.67 megabytes in return for which each user is empowered to record and view a 50 megabyte show.

It is also an advantage that group ownership in shows implicitly apportions ownership among members according to their relative contributions to a group storage space. Consider an example in which three users group to record comedy shows knowing in advance that users 1 and 2 have less interest in comedy that user 3. The users contribute their free space to group storage space in the proportion 1 1 2 that is 10 megabytes from user 1 10 megabytes from user 2 and 20 megabytes from user 3. In using 10 megabytes to record a show therefore the three users implicitly use their storage space respectively at the levels of 2.5 megabytes 2.5 megabytes and 5 megabytes. This is an explicit use of group storage space that implicitly apportions the space requirement according to predetermined weighted coefficients set by the users themselves rather than equally among all three members of the group.

In all our example thus far regarding groups it is a group as a whole that records and deletes each show and despite the implicit apportionment of storage space it is nevertheless the group as a whole who benefits from or suffers from the use of the show s entire space requirement at all times. It would be advantageous to have more flexibility than that. It would be advantageous to be able to allow users to aggregate their storage space in groups and then opt out user by user with flexibility granted to each user when to opt out rather than requiring the entire group to wait until they all recoup a show s used space at the same time. It would be useful to be able to explicitly apportion ownership and loan amounts also among members of a group.

We now describe an additional class of embodiments of PVRs according to the present invention embodiments for recording shows for groups in which a show s storage space requirement is charged to group members rather than to a group as such. In such embodiments with reference to the example data structures in to the extent that the data elements for charging space requirements to groups the fields for space allocation free space used space and borrowed space are present in group profiles such fields are not utilized. Indeed in some PVRs according to this class of embodiments such fields may be entirely excluded from group profiles .

In other embodiments two modes of operation are supported one for charging space requirements to a group as such another mode for charging space requirements to group members. In the first mode the fields for charging space requirements to groups are utilized in the second mode they are ignored. PVRs according to such embodiments can switch between the two modes of operation using a mode switch implemented for example in a Boolean field established for that purpose such as for example the field GroupMode in the example group profile on . We described the first mode of operation in detail above. In the description which follows we focus on the second mode charging space requirements to members.

With reference to and with reference to the example data structures of we described a method of personal video recording of shows for groups that apportions storage space requirements to group members . The method of includes creating show records in two circumstances. The method includes creating show records when shows are scheduled for recording through data entry by an authorized representative of a group .

The method includes also creating show records when shows are identified for preference recording on the basis of indications of member preference . Members are users and users as described in detail above are supported by PVRs of the present invention in data entry of indications of user preference including for example entry into user preference records users indications of preferred show titles and preferred actors as well as users indications of the relative intensity with which such preferences are asserted as for example in the preference level field at reference .

A show to be recorded on behalf of a group has stored in its OwnerID field the group ID of the group on whose behalf the show is to be recorded. In such embodiments that group rather than any individual user is considered the owner of such a show.

In the method of apportioning the show s storage space requirement alternatively includes apportioning according to the number of members . In PVRs according to this kind of embodiment the number of members is typically recorded on a group profile in for example a field such as NumberMembers . Apportioning a show s storage space requirement then includes dividing the show s space requirement by the number of members thereby determining an apportioned amount of the show s storage space requirement to be charged to each member. Apportioning the show s storage space requirement then includes incrementing each member s UsedSpace by the apportioned amount and decrementing each member s FreeSpace by the apportioned amount.

In the method of apportioning the show s storage space requirement alternatively includes apportioning according to predefined proportions . In PVRs according to this kind of embodiment predefined proportions are established in fields such as the SpaceShare field in member records . Predefined proportions can be percentages adding up to one hundred percent so that for example in a group having four members the predefined proportions can be for example 10 10 40 and 40 . Apportioning a show s storage space requirement in such embodiments then includes multiplying the show s storage space requirement by each predefined proportion thereby determining a separate apportioned amount for each member. Apportioning the show s storage space requirement in such embodiments then includes for each member incrementing a member s UsedSpace by the apportioned amount for that member and decrementing a member s FreeSpace by the apportioned amount for that member.

In the method of apportioning the show s storage space requirement alternatively includes apportioning according to members preferences .

Members indicate preferences in for example user preference records including indications of levels of relative intensity . Apportioning a show s storage space requirement in such embodiments then includes establishing as percentages for example a weighted coefficient of preference for each member. Apportioning a show s storage space requirement in such embodiments then includes multiplying the show s storage space requirement by each weighted coefficient thereby determining a separate apportioned amount for each member. Apportioning the show s storage space requirement in such embodiments then includes for each member incrementing a member s UsedSpace by the apportioned amount for that member and decrementing a member s FreeSpace by the apportioned amount for that member.

Further with regard to weighted coefficients of preference we present this example for further explanation. In user preference records for the show title Dukes of Hazzard Mom asserts a preference level of 3 Dad asserts a preference level of 2 Son asserts a preference level of 1 and Daughter asserts no preference for Dukes of Hazzard. The weighted coefficients of preference for the member respectively are 3 6 2 6 1 6 and 0 6 or in terms of percentages 50 33.33 16.67 and 0 . The show s storage space requirement for an episode of Dukes of Hazard is 10 megabytes. The apportioned amount for each member respectively then is 5 megabytes 3.3 megabytes 1.67 megabytes and 0 megabytes. In this example the members UsedSpace is incremented and FreeSpace is decremented in each member s user profile respectively by 5 megabytes for Mom 3.3 megabytes for Dad 1.67 megabytes for Son and 0 megabytes for Daughter. In this example Daughter gets a free ride which is reasonable in light of the fact that she expressed no preference for the show.

Despite their prior agreement to join a group it is possible that members may wish to recoup their free space allocated to group storage of a show by opting out of the group s joint ownership of a show. A member may wish to opt out and therefore recoup storage for other uses for example when the member has viewed a show. A member may wish to opt out upon discovering that the group has recorded and therefore apportioned part of a show s storage requirement to the member a show in which the member has little interest. Remember the example just above in which the Son expressed a preference level of 1 for Dukes of Hazzard. Upon learning that his group has recorded an episode of Dukes of Hazzard the Son might very well believe this his storage space might be better utilized elsewhere.

In our teachings thus far regarding personal video recording there is no very easy way for a member to opt out of group ownership of a show. Consider for example the case of storage space apportionment according to the number of members in a group. We disclosed storing the group size in the NumberMembers field in a group profile shown on . If the one member opts out however the effective group size is reduced by one. Presumably we could then define a field called for example EffectiveGroupSize in which a PVR could store the number of members who have not opted out but then there would be no easy way to know which members remain. What is needed is something with more flexibility.

The exemplary reapportionment record of provides a ShowID field which functions as a foreign key relating the reapportionment record to a show record . The show record identifies a group as the owner of the show by storing a group ID in its OwnerID field . The SpaceRequirement field in the show record stores the total space requirement of the show.

The exemplary reapportionment record provides a UserID field storing a user ID of one of the member to whom the show s storage space requirement is to be reapportioned. The exemplary reapportionment record also provides a reapportionment amount field storing the portion of the show s space requirement to be reapportioned to the member identified in the UserID field of the reapportionment record .

The method of includes a member s opting out and subsequently reapportioning the show s storage space requirement among group members . Reapportioning the show s storage space requirement includes reversing the previous apportionment of the show s storage space requirement by decrementing each member s UsedSpace by the original apportioned amount and incrementing each member s FreeSpace by the original apportioned amount.

Reapportioning also includes creating reapportionment records one reapportionment record for each group member remaining after one opts out. Each reapportionment record as shown in stores the show ID a user ID of a remaining member and a reapportionment amount . Reapportionment amounts are determined in many ways. We discuss three exemplary alternative ways of determining reapportionment amounts and then reapportioning storage space requirements accordingly.

In the method of reapportioning the show s storage space requirement alternatively includes reapportioning according to the number of members . In PVRs according to this kind of embodiment the number of members is typically recorded on a group profile in for example a field such as NumberMembers . Reapportioning a show s storage space requirement then includes decrementing by one the number of members thereby determining the number of members remaining after one opts out and the number of reapportionment records to be created creating one reapportionment record for each remaining member described above dividing the show s space requirement by the number of remaining members thereby determining a reapportioned amount of the show s storage space requirement to be charged to each remaining member and storing the reapportioned amount in the ReappAmount field in each reapportionment record . Reapportioning the show s storage space requirement then also includes incrementing each remaining member s UsedSpace by the reapportioned amount and decrementing each remaining member s FreeSpace by the reapportioned amount.

In the method of reapportioning the show s storage space requirement alternatively includes reapportioning according to predefined proportions . In PVRs according to this kind of embodiment predefined proportions are established in fields such as the SpaceShare field in member records . Predefined proportions can be percentages adding up to one hundred percent so that for example in a group having four members the predefined proportions can be for example 10 10 40 and 40 . After a member opts out however the remaining members predefined proportions no longer add up to 100 . The method of therefore includes recalculating by weight the remaining predefined proportions so that they again add up to 100 . Reapportioning a show s storage space requirement in such embodiments then includes multiplying the show s storage space requirement by each recalculated predefined proportion thereby determining a separate reapportioned amount for each remaining member. Reapportioning a show s storage space requirement in such embodiments then includes storing each remaining member s reapportioned amount in the ReappAmount field in a reapportionment record . Reapportioning the show s storage space requirement in such embodiments then includes for each remaining member incrementing a member s UsedSpace by the reapportioned amount for that member and decrementing a member s FreeSpace by the reapportioned amount for that member.

In the method of reapportioning the show s storage space requirement alternatively includes reapportioning according to members preferences . Members indicate preferences in for example user preference records including indications of levels of relative intensity . Reapportioning a show s storage space requirement in such embodiments then includes establishing as percentages for example a weighted coefficient of preference for each remaining member. The weighted coefficients so established will be different after a member opts out than they were before a member opted out unless as described above the member opting out had asserted no preference for the show in question. Reapportioning a show s storage space requirement in such embodiments then includes multiplying the show s storage space requirement by each newly established weighted coefficient thereby determining a separate reapportioned amount for each member. Reapportioning a show s storage space requirement in such embodiments then includes storing each remaining member s reapportioned amount in the ReappAmount field in a reapportionment record . Reapportioning the show s storage space requirement in such embodiments then includes for each remaining member incrementing a member s UsedSpace by the reapportioned amount for that member and decrementing a member s FreeSpace by the reapportioned amount for that member.

We now describe an additional class of embodiments of PVRs according to the present invention embodiments for recording shows for groups where in addition to apportioning storage space requirements among members loans of storage space are also apportioned among members. It is useful to note that a need for a loan can arise in at least two ways. One way a need for a loan can arise is when a deficit is discovered at the time of a user scheduled or recording or in preference recording.

Another way a need for a loan can arise is when a member opts out of group ownership of a show. When a user opts out the remaining members apportioned amounts of the show s storage space requirement typically will increase. If one member s apportioned amount exceeds the member s free space a deficit exists that requires borrowing if recording is to continue.

PVRs according to the embodiments under discussion charge group loan amounts by apportionment to group members rather than to a group as such. If a member opts out then any outstanding group loan amount is reapportioned to the remaining members.

With reference to the exemplary data structures of a group loans that is a loan to a groups is authorized by storing a group ID in a BorrowerID field in a lending authorization record . A data structure useful in apportioning group loans among members is show in the loan record of . The loan record of is similar to the loan record of with the addition of a Boolean GroupLoan field a field used for identifying a group loan. More particularly a group loan is represented by two types of loan records used in tandem. One loan record type called a group loan record has a group ID stored in its BorrowerID field and its GroupLoan field is set to True. The other loan record type called a member loan record has a group ID stored in its BorrowerID field and its GroupLoan field is reset to False. Group loan records and member loan records are therefore related one to many through the BorrowerID field which stores a group ID operating as a relational key.

The LenderID field in each member loan record stores a user ID of a member and therefore serves as a foreign key relating the member loan record to a user profile . From the point of view of the user profile the member loan record looks like any other loan record but it is in fact a little different. The LoanAmount in the member loan record represents an amount to be added to a member s BorrowedSpace and subtracted from a member s FreeSpace just like any other loan to a user. There is a difference however because the only actual loan in question is one which was authorized as a loan to the group in a lending authorization record issued in favor of the group not for any particular member of the group. The only loan involved here is a loan to a group. The LoanAmounts in the member loan records are apportionment amounts of a group loan not actual loans to individual members.

Described in the paragraphs just preceding is one exemplary way to represent group loans in data structures. Another way would be to create a separate table for the header records the group loan records. Many other data structures for representing group loans will occur to those of skill in the art and all such structures are well within the scope of the present invention.

The method of includes selecting in dependence upon the deficit amount one or more lenders . The lenders can include users having free storage space and pools having free storage space. The selecting is carried out in dependence upon the deficit amount in the sense that lenders are selected who have authorized lending to the group in at least the deficit amount and who have free space at least equal to the deficit amount. Alternatively if there is no lender who authorizes lending to the group in at least the deficit amount and who has free space at least equal to the deficit amount then more than one lender is selected.

The method of includes borrowing in dependence upon the deficit amount from the lenders for the group at least one loan amount of storage space. The borrowing is carried out in dependence upon the deficit amount in the sense that a loan amount is borrowed at least equal to the deficit amount. If there is no lender who authorizes lending to the group in at least the deficit amount and who has free space at least equal to the deficit amount then more than one loan is effected with more than one loan amount until the total of the loan amounts is at least equal to the deficit amount.

The method of include apportioning the loan amount among the group members . Apportioning the loan amount among the members includes apportioning to each member an apportioned amount of the loan amount. Three exemplary alternative ways of apportioning loan amount are disclosed below.

In the method of apportioning the loan amount alternatively includes apportioning according to the number of members . In PVRs according to this kind of embodiment the number of members is typically recorded on for example a group profile in a field such as NumberMembers shown on . Apportioning a loan amount includes dividing the show s space requirement by the number of members thereby determining an apportioned amount of the loan amount to be charged to each member. Apportioning a loan amount includes creating loan records including a group loan record and one member loan record for each member. Apportioning a loan amount includes storing in the LoanAmount field in each member loan record the apportioned amount to be charged to each member. Apportioning the loan amount includes incrementing each member s BorrowedSpace by the apportioned amount and decrementing each member s FreeSpace by the apportioned amount.

In the method of apportioning the loan amount alternatively includes apportioning according to predefined proportions . In PVRs according to this kind of embodiment predefined proportions are established in fields such as the SpaceShare field in member records . Predefined proportions can be percentages adding up to one hundred percent so that for example in a group having four members the predefined proportions can be for example 10 10 40 and 40 . Apportioning a loan amount in such embodiments includes multiplying the loan amount by each predefined proportion thereby determining a separate apportioned amount for each member. Apportioning a loan amount includes creating loan records including a group loan record and one member loan record for each member. Apportioning a loan amount includes storing in the LoanAmount field in each member loan record the apportioned amount to be charged to each member. Apportioning the loan amount in such embodiments includes for each member incrementing a member s BorrowedSpace by the apportioned amount for that member and decrementing a member s FreeSpace by the apportioned amount for that member.

In the method of apportioning the loan amount alternatively includes apportioning according to members preferences . Members indicate preferences in for example user preference records including indications of levels of relative intensity . Apportioning a loan amount in such embodiments includes establishing as percentages for example a weighted coefficient of preference for each member. Apportioning a loan amount in such embodiments includes multiplying the loan amount by each weighted coefficient thereby determining a separate apportioned amount for each member. Apportioning a loan amount includes creating loan records including a group loan record and one member loan record for each member. Apportioning a loan amount includes storing in the LoanAmount field in each member loan record the apportioned amount to be charged to each member. Apportioning the show s storage space requirement in such embodiments then includes for each member incrementing a member s BorrowedSpace by the apportioned amount for that member and decrementing a member s FreeSpace by the apportioned amount for that member.

The method of includes optionally recording the show optionally displaying the show and eventually deleting the show including canceling the loan . Recording is said to be optional in the method of because to the extent that the need for borrowing is caused by a user s opting out of group ownership the show in question probably has already been recorded. Displaying or viewing the show is said to be optional in that an authorized member is perfectly free within the method of to delete the show before anyone watches it.

Canceling the loan includes scanning through the loan records for the show and for the member identified in each member loan record decrementing a member s BorrowedSpace by the LoanAmount for that member and incrementing a member s FreeSpace by the LoanAmount for that member. Canceling the loan then includes deleting all the loan records for the show that is all the loan records related to the show record through the ShowID field .

When a member opts out of responsibility for group ownership not only must the storage space requirement be reapportioned as described in detail above in this disclosure but any existing loan amount must be reapportioned also. sets forth a flow chart depicting a method of personal video recording in which group members are empowered to opt out of group ownership of a show when the show has an associated group loan of storage space. The method of includes a member s opting out after a PVR apportions a loan amount among group members .

There is no particular timing limitation on opting out. A member can opt out before or after a show is recorded before or after a show is viewed or displayed. When a member opts out therefore it is possible in fact likely that the members free space quantities have changed since the related show record was created. The method of includes comparing members currently apportioned amounts of the show s storage space and the members free space to determine whether a deficit still exists.

If members free space has changed so that no deficit currently exists then the method of cancels the now unnecessary loan. Canceling the loan as described above includes scanning through the loan records for the related show and for the member identified in each member loan record decrementing a member s BorrowedSpace by the LoanAmount for that member and incrementing a member s FreeSpace by the LoanAmount for that member. Canceling the loan then includes deleting all the loan records for the show that is all the loan records related to the show record through the ShowID field . After canceling the loan the method of is still left with a reduction in the number of members responsible for the show s storage requirement so the method includes reapportioning the show s space requirement among the remaining members as described in detail above.

If members free space has not changed so that a deficit still exists of if members free space has changed but nevertheless a deficit still exists the method of proceeds by reapportioning the loan amount among the remaining members. Reapportioning the loan amount includes reversing the current apportionment of the loan deleting the member loan record of the member opting out and recalculating the members apportioned amounts of the loan.

Reversing the current apportionment of the loan includes scanning through the loan records for the related show and for the member identified in each member loan record decrementing a member s BorrowedSpace by the LoanAmount for that member and incrementing a member s FreeSpace by the LoanAmount for that member. Then because the method at this point is not canceling the loan entirely only the member loan record for the member opting out is deleted .

In the method of reapportioning the loan amount alternatively includes recalculating apportioned amounts of the group loan according to the number of members . In PVRs according to this kind of embodiment the number of members is typically recorded on a group profile in for example a field such as NumberMembers . Recalculating apportioned amounts of a loan then includes decrementing by one the number of members thereby determining the number of members remaining after one opts out. Alternatively the PVR can be programmed to determine the number of remaining members by counting the number of member loan records remaining with the same ShowID setting now that the member loan record of the member opting out has been deleted. Recalculating then includes dividing the show s space requirement by the number of remaining members thereby determining a reapportioned amount of the loan to be charged to each remaining member. The method includes storing the reapportioned amount in the LoanAmount field in each remaining member loan record . Reapportioning the loan then also includes incrementing each remaining member s UsedSpace by the reapportioned amount and decrementing each remaining member s FreeSpace by the reapportioned amount.

In the method of reapportioning the loan amount alternatively includes recalculating apportioned amounts of the group loan according to predefined proportions . In PVRs according to this kind of embodiment predefined proportions are established in fields such as the SpaceShare field in member records . Predefined proportions can be percentages adding up to one hundred percent so that for example in a group having four members the predefined proportions can be for example 10 10 40 and 40 . After a member opts out however the remaining members predefined proportions no longer add up to 100 . Recalculating apportioned amounts of a loan therefore includes recalculating by weight the remaining predefined proportions so that they again add up to 100 . Recalculating in such embodiments then includes multiplying the total loan amount by each recalculated predefined proportion thereby determining a separate reapportioned amount for each remaining member. Recalculating in such embodiments then includes storing each remaining member s reapportioned amount in the LoanAmount field in a remaining member loan record . Recalculating in such embodiments then includes for each remaining member incrementing a member s UsedSpace by the reapportioned amount for that member and decrementing a member s FreeSpace by the reapportioned amount for that member.

In the method of reapportioning the loan amount alternatively includes recalculating apportioned amounts of the group loan according to members preferences . Members indicate preferences in for example user preference records including indications of levels of relative intensity . Recalculating apportioned amounts of a group loan in such embodiments then includes establishing as percentages for example a weighted coefficient of preference for each remaining member. The weighted coefficients so established generally will be different after a member opts out than they were before a member opted out unless for example as earlier described in detail the member opting out asserted no preference for the show in question. Recalculating in such embodiments then includes multiplying the total loan amount by each newly established weighted coefficient thereby determining a separate reapportioned amount for each remaining member. Recalculating in such embodiments then includes storing each remaining member s reapportioned amount in the LoanAmount field in a remaining member loan record . Recalculating in such embodiments then includes for each remaining member incrementing a member s UsedSpace by the reapportioned amount for that member and decrementing a member s FreeSpace by the reapportioned amount for that member.

In this specification so far our discussion has assumed that if a show s storage space requirement exceeds available free space and it is not possible find a lender so that storage space can be borrowed then the show will not be recorded. See for example our discussion above regarding the method depicted in in which a failure to select a lender results in stopping recording .

See also for example our discussion above regarding the methods depicted in both of which are concerned with the risk of underestimating a show s storage space requirement. Both methods include stopping recording if no lender can be found . See also our discussion of apportioning or reapportioning storage space requirement among group members in connection with where once again we assumed that a failure to find a lender would mean stopping recording .

It would be advantageous however if there were other ways to find or create additional free space so that recording can continue over a broader range of circumstances and storage space can be used more efficiently. One way to proceed against this problem is to note that at any given moment used space may store recorded shows portions of which have already been displayed to viewers. It would be useful to have ways of recovering such displayed storage space for current use in recording shows.

In the following discussion we use the terms displayed storage space or displayed space to refer to the storage space upon which is recorded portions of shows that have already been displayed to viewers. depicts exemplary data structures useful in freeing displayed space for use in recording shows. PVRs according to embodiments of this invention are programmed to refrain from attempting to free displayed space in shows that are marked as write protected as for example in the Boolean fields DefaultRecordProtect on user profile RecordProtect on show record and DefaultRecordProtect on PVR profile . DefaultRecordProtect and DefaultRecordProtect are Boolean indications at the user level and the PVR level respectively whether to set RecordProtect to True as a default that is whether the default for the PVR is to exclude recovering displayed space for use in further recording. An indication whether a particular show is write protected such as for example the RecordProtect field can be changed at any time by an authorized user through manipulation of a user interface. The defaults can be changed also.

DisplayStartTime and DisplayStopTime record display start time and display stop time respectively for a display period for a show . The amount of used space that has been displayed for the show can be stored in DisplayedSpace or the amount of displayed space can be calculated on the fly as described in more detail below.

DisplayStartTime and DisplayStopTime in the viewing records record display start time and display stop time respectively for a display period for a show identified in ShowID for a particular user as identified in ViewerID . The amount of used space that has been displayed for the show to the user can be stored in DisplayedSpace or can be calculated on the fly as described below.

In the method of the first show and the second show can be same show. depicts in a flow chart and a schematic diagram of storage space requirements an alternative method of freeing displayed space of a show while recording and viewing a show. In the step for recording a second show includes recording a second show in free space made available by freeing displayed space of a first show . In addition the step for recording a second show includes recording a second show actually the first show in free space made available by freeing displayed space of a first show . That is the method depicted in includes operation by recording a show into space in which an earlier portion of the same show was recorded displayed and subsequently freed. This can occur when for example in the process of checking a storage space requirement during recording of a show that is being viewed while it is being recorded a PVR finds a deficit. If the only displayed space available to be freed is the earlier displayed portion of the same show then the PVR frees that displayed space and continues recording.

Referring again to note that if a PVR is to free displayed space the PVR will need to be able to identify displayed space to free. Displaying a show therefore in the example of includes identifying the displayed space for the show. depicts in more detail a method of identifying displayed space for a show. More particularly the method of includes storing in a viewing record for a show identified by ShowID a display start time and a display stop time for a display period for a the show. The method of includes subtracting the start time from the stop time thereby establishing a duration for a display period for the show. The method of also includes multiplying the duration of the display period by a frame rate for the show thereby identifying in terms of a number of video frames a particular amount of displayed space for the show.

Consider for example a thirty minute show displayed at a frame rate of thirty frames per second having a display period of ten minutes. In this example show there are 10 minutes 60 seconds minutes 30 frames second equals 18 000 displayed frames.

That is the displayed space for such a show can be represented as comprising the first 18 000 frames of the video file in which the show is recorded. If the show s storage space requirement is 60 megabytes then the displayed space for the show can alternatively be represented as comprising one third of the show s storage space requirement or 20 megabytes of displayed space.

The PVR needs the frame rate for calculating displayed space in terms of video frames. PVRs according to some embodiments of the present invention store the frame rate for a show directly on the show record . Other embodiments treat frame rate as one factor in compression level and store frame rates in tables keyed by compression level such as for example the tables depicted in and . PVRs implementing the method of for example typically include identifying frame rates in dependence upon compression levels of shows that is inferring or identifying frame rates from compression level tables such as those of and

In the method of freeing displayed space comprises discarding displayed frames. As shown in one way to discard displayed frames is to issue video editing calls to software routines in an application programming interface API for video editing a video editing API. There are many APIs for video editing. Most if not all codecs have associated APIs for video editing. Examples of APIs for video editing include Video For Linux Microsoft s Video For Windows and the Sun Microsystems s Java Media Framework . Video For Windows for example is a hardware independent API used by popular video editing packages such as Adobe Premier and by video conferencing software such as Microsoft s NetMeeting .

In all this opening closing and deleting of files in PVRs according to many embodiments of the present invention the application software in a PVR will need the shows filenames for dealing with the PVR s operating system. Shows filenames are stored for example in fields provided for that purpose such as the one at reference in show record on . In the method of for example it is useful after opening a new video file and deleting the original video file for the PVR to update the filename field presently containing the filename of the original video file in the show record with a filename for the new video file .

It is useful to consider in more detail the process of deleting displayed frames and excluding displayed frames from a stream to a new video file as these processes apply to discarding displayed frames. More particularly it is useful to identify how to determine when to stop. That is it is useful to have particular ways of determining in deleting displayed frames which is the last frame to be deleted assuming the PVR takes as the first frame to be deleted the first frame in the video file. Similarly with respect to excluding displayed frames from a steam to a new file it is useful to be able to identify exactly which frame is to be the last frame excluded from the stream to the new file assuming that the PVR begins exclusion with the first frame in the original video file. The answer as to which frame is the last frame depends on the video encoding of the video being worked upon the file from which frames are to be deleted or the file from which frames are streamed to a new file.

MJPEG for example compresses only a single frame at a time so called intra frame or spatial compression. Each MJPEG video frame is a complete picture in itself. Identifying a particular MJPEG frame as the last frame to be deleted or excluded a stream is straightforward Count the number of frames identified by use of for example the method of for identifying displayed space . That is multiply a duration of a display period by a frame rate for a show. The product is a number of frames. In using a method according to delete that number of frames from the front of a video file. In using a method according to exclude that number of frames from the front of a stream from an original video file to a new video file.

MPEG on the other hand is an inter frame compression format that uses both spatial compression in each frame and temporal compression across frames. In MPEG that is several frames at once are considered while performing encoding operations. illustrates a simplified illustrative example of the structure of MPEG 1 video. MPEG 1 video includes a sequence header followed by one or more alternating sequences of Group of Pictures or GOP headers and GOPs followed by a sequence end marker . A GOP is a series of pictures frames each of which consists of a picture header and actual picture data.

A frame or picture can be of type I P or B . An I frame is an intracoded frame intracoded meaning coded only with reference to itself. I frames are coded spatially with no reference to any other frame in the sequence. That is I frames are coded spatially but not temporally. I frames can be decoded or reconstructed for display with no reference to other frames. Each I frame is a complete picture ready for display on its own after decoding.

Starting with an I frame an MPEG encoder can forward predict a future frame. A forward predicted frame is called a P frame P for predicted. P frames are predicted from I frames and from other P frames. P frames are encoded both spatially and temporally. It is not possible to reconstruct or decode a P frame without data from another frame. P frames are forward predicted only from the most recently preceding I frame or P frame.

B frames are both forward predicted and backward predicted B for bidirectional. B frames are forward and backward predicted from the last and next I frame or P frame therefore requiring two other frames to reconstruct each encoded B frame.

As an example of the usage of I P and B frames consider the following sequence of six frame GOPs IBPBPB IBPBPB IBPBPB . . . . The I frames are coded spatially only and the P frames are forward predicted based on previous I and P frames. The B frames are coded based on forward prediction from a previous I or P frame as well as backward prediction from a succeeding I or P frame. The example sequence is processed by the encoder so that the first B frame is predicted from the first I frame and first P frame the second B frame is predicted from the second and third P frames and the third B frame is predicted from the third P frame and the first I frame of the next group of pictures.

Note that the second B frame in each GOP in addition to depending on backward prediction from a next I frame also depends on forward prediction from a preceding P frame which in turn depends on forward prediction from a preceding P frame and a preceding I frame. Because the P frames and B frames between I frames depend directly or indirectly on forward prediction from a previous I frame cutting an MPEG sequence at a point in the sequence between I frames renders useless the frames between the cut point and the next I frame. Cuts for deleting displayed frames from MPEG video files and excluding displayed frames from MPEG streams in PVRs according to embodiments of the present invention therefore are usefully made at I frames.

With reference to the methods of therefore PVRs according to those methods usefully include when processing MPEG video in the process of deleting displayed frames and in the process of streaming while excluding displayed frames checking frame types. Frame types are checked in such embodiments for MPEG video to determine that the first frame in continuation is an I frame that is that the next frame after a last frame deleted or excluded is an I frame so that an MPEG decoder in reconstructing the modified or new file for display is not presented initially with a P frame or a B frame frames which cannot be decoded without a preceding I frame.

In other words if the last frame to be deleted or excluded is a P frame or a B frame then PVRs processing MPEG video according to these embodiments can delete all the frames up to the next I frame. If the cut would then occur in the middle of GOP requiring editing a GOP header then PVRs can delete or exclude all the frames up to the beginning of the next GOP including the GOP header for the current GOP. A typical MPEG block frame count is sixteen frames including one I frame. On average this method therefore would be expected to exclude about eight undisplayed frames comprising about a fourth of a second of video display which is unlikely to be noticed by viewers.

An alternative for MPEG that is slightly more conservative and slightly more complex is to buffer GOPs that is buffering all the frames in each GOP one by one as each GOP is processed for deletion or exclusion. Then when a displayed frame count indicates a mid GOP discard the PVR can still include or stream out to the new video file the entire current GOP including the displayed frames in the GOP as well as the undisplayed frames in the block thereby deleting somewhat fewer than all the displayed frames but conservatively preserving all the frames not yet displayed.

We discussed in this disclosure several ways of carrying out deletions and exclusions of displayed frames particularly with reference to the exemplary encodings MJPEG and MPEG. Many ways of deleting or excluding displayed frames in these encodings and other encodings will occur to those of skill in the art and all such ways are well within the scope of the present invention.

Above in this disclosure we discussed various ways of making free space available for recording shows including lending free space to other users or groups of users repossessing loaned space and recovery of displayed space. We discussed also the fact that compression levels affect storage space requirements and storage space usage. In light of that discussion we note now that it would be useful also to be able not only to calculate and reset storage space requirements in dependence upon compression levels but also to affect compression levels as such. Having the capability of changing compression levels for shows already recorded or currently in the process of being recorded would add a useful alternative way of making free space available for recording.

We turn now to a discussion of further compression of shows. We speak of further compression because as readers will realize from our earlier discussion of compression all shows are compressed to some extent during delivery or capture and storage. Readers will also understand by now that in this discussion the term show includes show records that identify shows and store the shows attributes as well as the physically recorded video and audio content associated with particular shows. Although it is true that the physically recorded content can be stored in a variety of media including streams and temporary data structures in RAM for ease of explanation we generally speak in this disclosure of recording shows in files for storage in file systems on magnetic or optical media.

The need to make additional free space available for recording can arise in several ways. Additional free space is needed for scheduled recording and for preference recording when for example a show to be recorded for a user has a storage space requirement larger than the user s free space. Additional free space is needed for apportioning and reapportioning shows storage space requirements among group members when for example an apportioned amount of a storage space requirement exceeds a member s free space. Additional free space is needed for apportioning and reapportioning group loan amounts among group members when for example an apportioned amount of a loan exceeds a member s free space.

In addition to the method of further compressing recorded shows PVRs can implement also the method of comprising freeing displayed space . In such PVRs it is only necessary to stop recording in the event that the combination of borrowing freeing displayed space and further compressing recorded shows fails to provide sufficient free space to meet a deficit.

A further kind of embodiment illustrated also in includes selecting a recorded show to be further compressed. Selecting the recorded show can include selecting a show having an original compression level lower than a highest supported compression level in a PVR. The recorded show s original compression level is the compression level presently stored in the compression field show s show record . Regarding the relationship between the original compression level and the highest supported compression level consider for example compression level table in . Assume for explanation that the original compression level is 320 1 indicating the compression level whose affecting factors are listed in record of table including MPEG 2 encoding a frame rate of 30 frames per second a resolution of 352 240 and so on. The compression level of 320 1 is relative to raw video. The same compression level is 4 relative to an NTSC source stream identified in record of table .

The highest supported compression level in this example context is 20480 1. Highest supported compression level means the highest level for which a PVR has a codec capable of handling the show s present encoding as an input and producing a more compressed encoding of video as output. In this example context such a highest supported compression level is indicated in record of table . As long as the show s original compression level is less than a highest supported compression level the show is a candidate for further compression. In this example as among several candidate shows selecting a show for further compression includes selecting the first show among the candidates having an original compression level lower than a highest supported compression level in a particular PVR according to an embodiment of the present invention.

The method of includes further compressing a recorded show. The recorded show comprises an original video file original in the sense that it is in a beginning condition for the current process of further compression. As shown in one way to further compress the original video file is to issue calls to software routines in an application programming interface API for a codec. There are many APIs for codecs. Most if not all codecs have associated APIs. Examples of APIs for codecs as mentioned earlier include Video For Linux Microsoft s Video For Windows and the Sun Microsystems s Java Media Framework . 

In the method of a recorded show comprises an original video file having original encoding parameters including an original encoding type . Examples of encoding type include MPEG 1 MPEG 2 MPEG 4 MJPEG DVD and so on. Further compressing the recorded show includes opening the original video file opening a new video file converting through a codec the original video file into a new video file having new encoding parameters .

Encoding parameters implement factors affecting compression level including as illustrated for example in and encoding type color space size frame rate resolution and audio quality . The new encoding parameters may optionally include a new encoding type although it may or may not be necessary to change encoding type in order to achieve a higher compression level. In the sequence of compression levels depicted in table in for example beginning with an original compression level of 320 1 for the MPEG 2 encoding type there are two higher compression levels having the MPEG 2 encoding type represented by records and that can be used before there is a need to change to MPEG 1 record or MJPEG record in order to obtain even higher compression.

In addition when changing encoding types it may or may not be necessary to change codecs. At least some codecs that handle MPEG 2 also handle MPEG 1 for example. Our system block diagram in depicts only one codec but that illustration is for convenient explanation not for limitation. PVRs according to embodiments of the present invention often will implement more than one codec. In situations requiring changes in encoding type to achieve higher supported compression levels a series of codecs are used to convert from one encoding type or compression level to another.

The method of includes closing the new video file and deleting the original video file . The PVR may give the new video file a filename different from the filename of the original video file and to the extent that it does so then the PVR can be programmed to update the filename field in the show record with the new filename of the new video file . In addition the PVR also is programmed to update the compression field on the show record with the new compression level resulting from the change in the encoding parameters.

Regarding changing compression levels our discussion thus far has centered on changes for existing recorded shows. It would be useful also however to have ways of changing compression level during recording if for example a need for additional free space is discovered during a check of an estimated storage space requirement. If there were at that time no other useful or desirable way of quickly freeing space for continuing recording it would be useful to be able to increase compression on the fly so to speak.

More particularly the codec operating parameters are changed so as to increase the compression level. Again with reference to consider an example in which the first video file is encoded with codec operating parameters that effect the compression level identified by record in table . That is the codec is an MPEG codec set to encode an MPEG 2 video file having a frame rate of 30 frames per second a resolution of 352 240 and so on all resulting in a compression level of 320 1 with respect to raw NTSC video. Changing the values of the codec operating parameters to increase the compression level from 320 to 1280 then includes calling the codec API with the new operating parameters of record that is in this example changing the resolution to 180 120.

The method of includes calling the codec API with a filename for the second video file thereby redirecting the video stream to the second video file . The method also includes closing the second video file at the end of the show and further compressing the first video file to the compression level of the second video file. The first video file is stored at its original compression level. If the show as a whole is to be effectively compressed so that it can be decoded for display through a single codec it is useful to convert the entire show including the first portion of the show stored in the first video file to the new higher compression level of the second video file.

Alternatively it is possible within the scope of the present invention to leave a single show fragmented among more than one video file each video file having different encoding parameters. PVRs implementing this alternative then would need to expand the data structures representing shows see to include file related information such as file name and compression level for each file comprising a show. Such PVRs will need to be programmed to change files change parameters and perhaps even change codecs to decode during display a show comprising more than one video file.

Among embodiments that leave a show fragmented among more than one video file recording is simplified by reducing or even eliminating the need to further compress the first video file to the compression level of the second video file and concatenate the two files. On the other hand decoding a show for display is easier if the show is encoded at record time into a single video file because there is no need during playback to track and change video files change codec parameters or change codecs. In addition further compressing the first video file at record time increases the amount of free space made available by changing to a higher compression level. Some increases in compression level such as for example changes in audio quality have no effect on video playback quality although they may affect other aspects of playback. Nevertheless leaving the show fragmented in more than one file having more than one compression level may affect display quality if the show is later replayed changing display quality when playback changes from the first video file to the second video file particularly when changes in resolution or frame rate were required in order to effect a particular increase in compression level.

The exemplary method of includes further compressing the first video file and concatenating the second video file to the first video file . Concatenating the video files typically includes calls to codec APIs to effect orderly changes in sequence headers GOP headers and so on. Although we refer in this specification to concatenating the two video files readers of skill in the art will recognize that in fact such concatenating may include combining through a codec two source streams from the first video file and the second video file into a target stream directed to a third video file.

We have now discussed in this disclosure several ways of further compressing or increasing compression of shows in PVRs. Many ways of further compressing or increasing compression of shows in PVRs will occur to those of skill in the art and all such ways are well within the scope of the present invention.

Users will operate the PVR controls described above in connection with and to control a PVR and to track the operations of a PVR. PVR operations can be so complex however that it would be advantageous for users to have improved ways of tracking and controlling PVR operations. It would particularly useful if there were ways for PVRs to utilize means of sending and receiving messages to and from users regarding PVR operations.

Messages have many purposes are of many types and have data structures appropriate to their types and purposes. A message point is a point in PVR operations when it is useful to send or at least consider transmitting a message of a particular type for a particular purpose.

Some messages are transmitted as posts asynchronous non blocking messages. PVR operations do not pause to wait for a response to such messages. Messages transmitted as posts typically include notifications of routine operations such as for examples messages advising that a scheduled show has been recorded on schedule. Some messages are transmitted as sends synchronous blocking messages for which PVR operations are paused for at least some period of time to give a user an opportunity to respond with control instructions before the PVR proceeds with a previously defined default action. An example of a message that can be sent as a synchronous blocking message is a message asking for instructions whether to compress a show that has not yet been viewed by its owner in order to make free space available in which to record another show.

In this disclosure we use with particularity the terms send post and transmit. Send generally refers to transmitting to a user a blocking synchronous message prompting for a response. Post generally refers to transmitting to a user a nonblocking asynchronous message that does not prompt for a response. Transmit generally refers to the process of conveying or communicating a message. Defining these terms in this way for this discussion allows terminology such as transmit a send message for a message point to a user the count of the number of times a message associated with a particular message point has been transmitted to a user as a post and so on.

Messages can be implemented procedurally in languages like C Cobol or Fortran. Or messages can be implemented as objects in an object oriented language such as C or Java. For procedural languages the PVR application software itself typically will need to be aware of message attributes whether a message is blocking or non blocking timeout period message transmission mode and so on. In object oriented messages it is a message class or message object itself that typically knows the message attributes insulating the application level from message details.

Many PVR applications on are implemented in an event driven fashion but for convenience of explanation uses an exemplary control loop to illustrate several typical operations of a PVR. The method of includes logging in a user . The method of includes scheduling a show in response to user direction . The method also includes preference scheduling a show in dependence upon downloaded broadcast schedules and user preferences . The method includes recording a show in a video file . The illustrated method includes identifying a message point and transmitting a message . The method of includes displaying upon a display device a show from a video file as instructed by a user .

Transmitting a message can be carried out in a variety of ways. notes a networked message and many messages will be transmitted across networked means of data communications including for example as will be discussed in more detail below pager messages instant messaging using instant messaging protocols email and messages using SMS the Small Message Service protocol. Many messaging protocols support two way messaging so that PVRs according to embodiments of the present invention can both transmit information to users and receive controlling responses from users.

The identified message point in the method of is inserted after recording steps and before a display step . Message points however can be inserted anywhere in PVR operations. Here are several examples of messages of several types and purposes inserted at various exemplary message points in PVR operations 

Example message Recorded TitleOfShow on schedule. This message has a message point in PVR operations just after the PVR records the show identified in the message. The PVR application obtains the title of the show from the title field in the show record and inserts the title as a substring in the main message test string. This message is implemented as a post asynchronous non blocking not requesting a control response from the user to whom the message is directed.

Example message Preference recorded comedy genre show Friends This message has a message point in PVR operations just after the PVR records the show identified in the message. The PVR application obtains the title of the show from the title field in the show record and inserts the title as a substring in the main message test string. The PVR application software obtains the genre of the show from the genre field in the show record . This message is implemented as a post asynchronous non blocking not requesting a control response from the user to whom the message is directed.

Example message Borrower SoAndSo viewed a show recorded in space borrowed from you. X megabytes of your loaned space has been repossessed. This message has a message point in PVR operations just after the PVR displays the show to the borrower. The PVR application obtains the identity of the borrower and the loan amount X from a loan record on . The message is transmitted to the lender identified in the loan record. The message can include the title of the show which is also on the loan record in our example data structures at least but this PVR assumes that the lender does not care what the borrower is watching as long as the lender s loaned space is returned in due course. This message is implemented as a post asynchronous non blocking not requesting a control response from the user to whom the message is directed.

Example message Cannot detect your cable box. This message is directed to a user identified in a user profile as having administrative privileges or to a user identified in a PVR profile as being responsible for PVR operations. This message has a message point in PVR operations just after a PVR boots. This message is implemented as a post asynchronous non blocking not requesting a control response from the user to whom the message is directed. This does not mean that the user will take no action. In likelihood the user will reboot the cable box or phone the cable company. But the PVR will not synchronously block operations during the message to wait for user action.

Example message Non conflictive schedule change Buffy The Vampire Slayer is rescheduled to 8 00 p.m. The new schedule presents no conflicts with other shows. Recording will proceed at the new time. This message has a message point in PVR operations just after the PVR downloads a broadcast schedule from a content source and compares the broadcast schedule to the recording schedules in the show records . The message is directed to the user identified in the ownerID field in the show record . The title also is from the show record. This message is implemented as a post asynchronous non blocking not requesting a control response from the user to whom the message is directed.

Example message Conflicting schedule change Buffy The Vampire Slayer is rescheduled to 8 00 p.m. The new schedule conflicts with your scheduled recording of Dukes of Hazzard. You have thirty seconds to respond. Receiving no response the default procedure is to record the Dukes of Hazzard. Should the recording schedule default to Dukes of Hazzard Your response Y N . This message has a message point in PVR operations just after the PVR downloads a broadcast schedule from a content source and compares the broadcast schedule to the recording schedules in the show records . The message includes a default action in this example recording the show originally scheduled for the slot in question. The message is directed to the user identified in the ownerID field in the show record for either show because the same user owns both shows. There are two titles concatenated into the message both from the title fields in the respective show records for the two shows. There are two schedules one for each show but they are either identical or overlapping so that this particular example message only includes one of them but it can be read by the PVR from either schedule field in the show record for either show. This message is implemented as a send synchronous and blocking during the timeout period of thirty seconds.

Example message Conflicting schedule change Buffy The Vampire Slayer is rescheduled to 8 00 p.m. The new schedule conflicts with Mary Jones scheduled recording of Dukes of Hazzard. You have thirty seconds to respond. Receiving no response the default procedure is to record Buffy The Vampire Slayer. Should the recording schedule default to Buffy The Vampire Slayer Your response Y N . This message has a message point in PVR operations just after the PVR downloads a broadcast schedule from a content source and compares the broadcast schedule to the recording schedules in the show records . In this example there are two owners one for Buffy another for Dukes. The message is directed to the owner having the higher privilege level. The message includes a default action in this example recording the show belonging to the user having the higher privilege level. The PVR reads the owners privilege levels from field in their respective user profiles . There are two titles concatenated into the message both from the title fields in the respective show records for the two shows. There are two schedules one for each show but they are either identical or overlapping so that this particular example message only includes one of them but it can be read by the PVR from either schedule field in the show record for either show. This message is implemented as a send synchronous and blocking during the timeout period of thirty seconds. This message resolves a conflict among users on the basis of privilege level. There are many many ways of resolving such conflicts as will occur to those of skill in the art and all such ways are well within the scope of the present invention.

Example message Owner who presently is not authorized to borrow your storage space asks permission to borrow 5 megabytes from you. Timeout is thirty seconds. Default is No. Your current free space is 125 megabytes enough for about 10 hours of recording. Lend 5 megabytes to Owner Your response Y N . This message has a message point in PVR operations just after at the beginning of a recording step when a comparison of the owner s free space and the storage space requirement for a show evidence a deficit. The proposed loan amount 5 megabytes is the deficit amount. This message is directed to a selected prospective lender. The lender is selected for example by the prospective borrower in this example Owner or for another example by the PVR according to which user has the most free space at the moment. There are many ways to select a prospective lender and they are all well within the scope of the invention. This message is implemented as a send synchronous and blocking during the timeout period of thirty seconds having a default action of refusing the loan.

Example message Junior has authorized viewing hours beginning at 6 30 p.m. Junior is requesting a logon to watch television at 6 15 p.m. Timeout on this message is thirty seconds. Default is No. Allow login Your response Y N . This message has a message point in PVR operations during a logon process such as the one depicted at reference in . The message is directed to a user identified in a user profile as having administrative privileges. The PVR reads the authorized viewing hours for example from a user profile field such as AuthViewHours in user profile on . This message is implemented as a send synchronous and blocking during the timeout period of thirty seconds having a default action of refusing the logon.

Example message Junior has a viewing restriction that excludes the Adult genre. Junior just attempted to schedule a show having the Adult genre. The schedule request was rejected. This message has a message point just after a scheduling step such as the one illustrated at reference in . The message is directed to a user having administrative privileges. This message is implemented as a post asynchronous non blocking not requesting a control response from the user to whom the message is directed. This does not mean that the user will take no action. If for example the administrator to whom the message is directed is Junior s father or mother then in all likelihood quite a lot of action will result.

This message has a message point in PVR operations some time after the show is scheduled by a user or is scheduled for preference recording by the PVR. Readers will recall from the detailed description above in this disclosure that discovery of a deficit usually occurs just prior to actual recording of a show and that also would be a good message point for this message. If the message point were just prior to recording however then the user would not have hours or even minutes in which to take action. This message is described as a post asynchronous non blocking not requesting a control response from the user to whom the message is directed.

If this message had a message point just prior to recording however then the message would probably be preferred as a send synchronous and blocking during a timeout period of for example thirty seconds having a default action of not recording in which case the message text can appear as follows 

There are many ways of implementing messaging. This disclosure focuses somewhat on two way messaging because it is so useful for messages implemented as sends synchronous blocking messages with timeouts and defaults. In implementations of two way messaging PVR application software is programmed to parse a response message by extracting from the text of a response message a meaningful token comprising an identifier for a command or an action to be taken by the PVR upon receipt of a response message.

Messages can be transmitted to wireless pagers identified by telephone numbers. Messages can be transmitted by a PVR application over for example the Simple Network Paging Protocol or SNPP version 3 of which is an enhanced two way protocol as defined in RFC1861. RFC1861 is an Internet protocol suite specification document promulgated by the Network Working Group in the Internet Engineering Task Force.

Messages to wireless pages also can be transmitted by a PVR application over for example WCTP the Wireless Communication Transfer Protocol. WCTP also is a two way messaging protocol. WCTP is designed with the particular intention of using HTTP as its transport mechanism. WCTP is an open non proprietary industry standard promulgated by members of the PCIA the Personal Communications Industry Association.

Messages can be transmitted over HTTP through any of a number of proprietary instant messaging protocols all of which have application programming interfaces APIs available just for this purpose that is for use in messaging applications such as PVRs. Examples of such instant messaging protocols having APIs include those available from American On Line AOL Microsoft Network MSN Yahoo Imici Inc. and ICQ Inc. Instant messaging protocols make user presence detection and two way instant messaging available between a PVR and users web browsers on their personal computers as well as microbrowsers on mobile or cellular telephones wireless web enabled personal digital assistants PDAs and laptop computers and other wireless web enabled portable or handheld devices.

Messages can be transmitted by a PVR application through email to any email client through SMTP POP IMAP or other email protocols to email clients in any kind of client device personal computers laptops handhelds cell phones and so on. Email supports two way communication. In typical embodiments using email for messaging a PVR application is enabled as an email agent a software program to which is assigned an ordinary email account on an email service. In this way the PVR sends and receives email just like any other email user. When the PVR sends a message to a user through email the user can press the Reply button on the user s email client and respond to the PVR s email.

Messages can be transmitted by a PVR application through a Small Message Service SMS supported by any telecommunications or telephone service. SMS provides a mechanism for transmitting short messages to and from wireless devices. SMS supports the transmission of short text messages from a PVR to a cellular phone similar to alpha numeric paging. SMS makes use of a Small Message Service Center or SMSC which acts as a store and forward system for short messages. In contrast to other existing text message transmission services such as alphanumeric paging SMS is a reliable system providing mechanisms to guarantee delivery of text messages to destinations. Additionally SMS supports several input mechanisms that allow interconnection with different message sources and destinations. A PVR can for example function as a so called External Short Message Entity or ESME and transmit SMS messages as HTTP forms or email messages. A PVR can function as a mobile originator or MO that is SMS enabled client device or in effect a cellular telephone. A distinguishing characteristic of SMS is that an active mobile handset or effectively a PVR is able to receive or submit a short message at any time regardless whether a voice or data call is in progress. This latter feature is very useful in PVRs implementing messages as sends synchronous blocking messages with timeouts and defaults.

We just explained four means of messaging paging instant messaging email and SMS. Persons of skill in the art will think of many other ways of implementing one way or two way messaging between a PVR and a user and all such ways are well within the scope of the present invention.

Again referring to identifying a message point and transmitting a message can be carried out as illustrated by the following exemplary snippet of messaging pseudocode 

The following two lines of pseudocode identify a message point in PVR operations a message point from which a message is sent. The exemplary messaging pseudocode set forth above sendMessage can be invoked by a call from anywhere within the program code comprising a PVR application program by for example code similar to the follow snippet of calling pseudocode.

In using source code of the kind illustrated by the snippets just above the insertion of calling lines similar to the calling pseudocode identifies a message point. Similarly the PVR s processor s encountering such calling lines as it processes the software comprising a PVR s application program identifies a message point. The two exemplary lines of calling pseudocode are simple but they still require the application level of programming to know or determine rather a lot about the messaging process including knowing the messaging text itself which is built up by concatenation using the operator on the show title and then passed as a parameter to the sendMessage function.

The sendMessage function itself calls getUserProfile to obtain a copy of the user profile of the user identified in the userID parameter. sendMessage then uses a switch statement switched on User.MsgMode the field at reference in the user profile in to determine what kind of message to send. MsgMode is a field that stores a messaging mode that is an indication whether a user s preferred messaging is by pager email instant messaging SMS or other messaging means as will occur to those of skill in the art. The exemplary user profile in also contains fields for pager number and email address as well as an instant messaging address and a separate telephone number for SMS messages . In contrast with the application level the messaging function sendMessage knows little about the message text itself merely receiving the message text in the function parameter messageString. 

In effect in the operation of this pseudocode the application level decides the message type and the message content while the messaging function itself sendMessage simply looks up the messaging mode and sends the message. It would be useful to have a more independent and flexible messaging functionality. The pseudocode snippets set forth above are procedural in orientation rather than object oriented. For reasons shown in more detail below object oriented programming may be a promising way of depicting aspects of messaging.

The object oriented function that is the member method message1.send like the procedural pseudocode function sendMessage accepts a message text string and a user ID as parameters and relies on the calling application code for the message text. A message point for message.sent can be identified by including or encountering the following exemplary pseudocode.

In this example the member methods setMessage and send are initially declared in an abstract class for messages as depicted in the pseudocode snippet just following this paragraph. The abstract class effectively defines the application interface for concrete message classes that inherit from the abstract class. In fact this is our definition of these terms Abstract base classes are not instantiated into objects. Abstract base classes are used in this disclosure only to define interfaces. Concrete classes are classes for instantiation. This is pseudocode of course in which we are free to use a variety of common conventions from C C Java and other sources so long as our usage is helpful to our readers. It may be worthwhile to point out however that abstract base class is C terminology for a class whose interface declarations are designed to be inherited by concrete derived classes or subclasses. In Java such a structure would be called an interface that a Java class implements. In our pseudocode we use abstract base class because interface has many more alternative meanings depending on context. Here is our exemplary abstract base class for messages 

In addition in this example the PVR s application code does not know exactly which message class is actually sending any particular message. The member method MessageFactoryOne.createMessageObject is a factory method in a factory class that creates a message object and returns to the calling application code a reference or a pointer to a message class object that will carry out the actual task of sending a particular message. Here is exemplary pseudocode describing a message factory class including a message factory method called createMessageObject 

The factory method createMessageObject is said to be parameterized in the sense that it accepts a parameter in this example the message point ID MessagePointID and then determines which of many message classes to instantiate and return in dependence upon the parameter. About a dozen different example messages are described above in this disclosure and a PVR according to embodiments of this invention can have concrete message classes for all those exemplary messages and as many others as persons of skill in the art can design.

We mentioned above that the PVR s application code does not know exactly which message class is actually sending any particular message. Attentive readers will have noticed however that MessageFactoryOne implements a one to one correspondence between the message point ID and the message type or message class. In this sense message type and message class are substantially synonymous. This one to one correspondence between message point and message type is not required it is well within the scope of the invention and it is useful for purposes of explanation. Later we will show how to add program logic to the factory class to usefully decouple the one to one relationship between message point ID and message type.

The member method message1.send can operate quite like the procedural function sendMessage with the application level building the message text and the messaging software itself used only to transmit the message. The object oriented approach however can bring more flexibility. Consider the following concrete message class in which the message class itself does the work of building the message text greatly relieving the burden from the application level which now needs only to identify a message point and call a send method with appropriate parameters.

The following lines of pseudocode inserted in PVR application code comprise an exemplary identification of a message point and transmission of a message. Using MessageFactoryOne with respect to a message point identified as MessagePoint2 these lines transmit a message using a message object instantiated from the message class message2. 

In this example the PVR application code has no knowledge of the message text and no knowledge which message class will actually be used to transmit the message. The application code upon discovering a conflict in schedule simply sets the showID parameters from the respective show records identifies a message point in its call to createMessageObject and then calls the send member method. By operation of createMessageObject in MessageFactoryOne the returned message object m is in fact a message object instantiated from message class message2. 

Because PVRs according to the present invention often support not only one way messaging but also two way messaging it is useful to be able to select actions or commands in dependence upon users responses to messages from a PVR. illustrates in a flow chart a method of identifying message points in which a message point has an associated message point ID and the method includes selecting a message in dependence upon the message point ID . The method includes transmitting messages . The method of also includes receiving responses to messages and selecting in dependence upon a response a command to be executed. The method includes executing the selected command .

One example of how to transmit messages and receive responses is set forth in the following pseudocode for a message class for handling the kind of example message described above in which a user is prompted to select a method of making available more storage space for recording a show.

The following lines of pseudocode inserted in PVR application code identify a message point that in operation of MessageFactoryOne results in utilization of message class message3. 

In this example the PVR application code has no knowledge of the message text and no knowledge which message class will actually be used to transmit the message. The application code upon discovering a the existence of a deficit sets the showID parameter from the pertinent show record and the DeficitAmount parameter from the calculation of the deficit identifies a message class with a call to createMessageObject and then calls the send member method. In this example the send method implements two way messaging and returns a user s response as an action ID.

The method of includes receiving responses to messages and selecting in dependence upon a response a command to be executed. The action ID returned in response to message3.send is an example of receiving a response to a message . A way of selecting in dependence upon such a response a command to be executed is illustrated by the following pseudocode 

The member method ActionFactory.createActionObject actionID is a factory method defined in the following pseudocode for an exemplary action factory class 

The exemplary member method ActionFactory.createActionObject actionID is a parameterized factory method that functions by creating a new concrete action class object selected in dependence upon the action ID provided as a parameter. Set forth below are examples of action classes one abstract several concrete that are useful for example in carrying out actions or commands selected by users in response to messages such as for example responses to messages transmitted by message3.send .

The next example class set forth just below is a pseudocode example of a concrete class having a member method that carries out the action associated with the first choice presented to the user in message3.send . That is the following example class is designed to carry out the default action of not recording the show in question.

The next example class set forth just below is a pseudocode example of a concrete class having a member method that carries out the action associated with the second choice presented to the user in message3.send . That is the following example class is designed to carry out the action of repossessing loaned space in order to make available free space for recording the show in question.

The next example class set forth just below is a pseudocode example of a concrete class having a member method that carries out the action associated with the third choice presented to the user in message3.send . That is the following example class is designed to carry out the action of borrowing space in order to make available free space for recording the show in question.

The following is a pseudocode example of a concrete class having a member method that carries out the action associated with the fourth choice presented to the user in message3.send . That is the following example class is designed to carry out the action of deleting previously recorded shows in order to make available free space for recording the show in question. Action4.takeAction proceeds by finding the first show owned by the same owner that has already been viewed and deleting it.

The following is a four line pseudocode example that gathers into one place for convenient reference all the lines of exemplary pseudocode set forth above that are needed to identify a message point for prompting a user to select a method of making available more storage space for recording a show obtaining a response from the user and taking action according to the response.

It should be clear to our readers by now that with reference to the method of for example the four lines of pseudocode set forth just above operating in coordination with the object oriented classes described above illustrate a method of identifying message points in which a message point has an associated message point ID . In this example the message point is the location in a PVR s application code of the line 

The message point ID is the parameter MessagePoint3. The four example lines of pseudocode illustrate also a method of transmitting messages through the call to m.send as well as a method of receiving responses to messages in the return code the parameter named actionID. 

The four example lines illustrate also a way of selecting in dependence upon a response a command to be executed. That is the call to createActionObject parameterized with actionID select create and return to the application level an action object called a. The action object contains the command to be executed a member method called takeAction . The call to the member method takeAction executes the selected command within the meaning of the method of .

Depending on how actively a user uses a PVR it is possible for a PVR to generate many messages to a user. Many such messages are fairly routine notices that scheduled recordings occurred on time that changes in schedule have been made with no problems and so on. For these reasons it would be useful to be able to cull or filter or limit or screen in some way the number of messages rather than always sending the same message for the same message point.

In other circumstances regarding messages prompting for decisions a user can repeatedly select some choice other than a default in which case it would be useful for the default to be changed. When the same default is taken repeatedly it could be useful to change the message type from a blocking message prompting for a response to a posting merely advising a user that the default action was taken without prompting for a response. In all these circumstances with respect to limiting the number of messages changing defaults and changing message types it would be useful if the PVR itself could learn how to make such changes based upon historical behavior of users.

PVRs comprising computers are machines capable of machine learning in dependence upon proper programming. Machine learning is often referred to as pattern recognition or data classification. The terms pattern recognition and classification are substantially synonymous because the underlying problem of pattern recognition is deciding how to classify elements of data as either belonging or not belonging to a pattern. In embodiments of PVRs according to the present invention classifications include for example 

In addition to classification machine learning includes training. Training comprises mapping known inputs to known outputs. Mappings are the basis for classification. In the case of PVR messaging the known inputs are messaging inputs including message types sent to users prompting for responses associated with particular commands. In this object oriented discussion a message type is identified by a message class name. The known outputs are messaging outputs that is results of PVR operations regarding messaging including for example frequencies or counts of message points whether messages are transmitted when message points are encountered and counts of how many times messages are transmitted whether messages are transmitted as sends or posts users responses to messages which command a user chooses and how often and whether a user takes the default for a send and how often. Mappings include statistical descriptions of relations between the messaging inputs and messaging outputs. An example of a mapping is User SoAndSo in response to message takes the default at the rate of 45 . 

PVRs according to embodiments of the present invention carry out frequent classification operations. Some kind of classification typically is carried out every time a message point is encountered during normal operation. For every message point a PVR typically carries out classifications such as determining whether to transmit a message whether to transmit a post or a send which commands to include which command is to be the default and so on. Training on the other hand occurs less often. A training routine can be scheduled hourly daily weekly monthly or at any time that makes sense in terms of overall PVR performance. Training can be run at midnight or 4 00 a.m. when most users are asleep and there is little chance that execution of a training routine will slow normal PVR operations. Because classification occurs often and training need not occur often readers will observe in this disclosure a design bias or strategy rather in favor of offloading complexity from classification to training.

Machine learning as it is practiced in embodiments of the present invention depends on training mappings of historical data. The records of transmissions of messages comprise the historical data needed for training mappings for machine learning. In exemplary PVRs embodying the method of providing records of transmissions of messages includes transmitting messages to users and storing records of transmissions of messages.

 Storing in this context means storing computer data in data structures in computer memory representing particular transmissions of particular messages to particular users. The transmission record data structure illustrated in is an example of a structure useful in various embodiments of the present invention for storing records of transmissions of messages. The example transmission records of include data elements identifying a message point in connection with which a message was transmitted a messageID identifying a particular form of message transmitted a userID identifying the user to whom a message was transmitted an indication whether the message was transmitted as a send or a post and a commandID identifying the command chosen by the user if the message was a send.

Our example PVR implements the convention of treating command choice number 1 as the default so there is no need for a separate data element indicating whether the default was taken. If the value of commandID is 1 then the user took the default. This kind of data structure will work if the PVR accepts that commandIDs are not unique. A unique identification of a command would require both the commandID and the messageID with which the command is associated. Commands identified in this way may not be very reuseable.

It may be more flexible to use a sequence indication such as CommandSequence to indicate the choice order of commands in a message including which one is the default. The PVR can still adopt the command having the sequence number 1 as the default but now an additional data elements is needed in the transmission records to describe which sequence number was chosen by the user a data element such as for example ChoiceID .

In the method described with reference to determining whether to transmit the selected message often includes determining whether to transmit the selected message in dependence upon a messaging frequency with which the message is transmitted to a user. In such embodiments the messaging frequency typically is defined for example with respect to the number of times an associated message point is encountered in PVR operations. That is for example a messaging frequency of 1 means transmit a message every time a corresponding message point is encountered. A messaging frequency of 5 means transmit a message every fifth time a corresponding message point is encountered. And so on.

The method according to includes recording a result of determining whether to transmit the selected message . If the selected message is not transmitted then determining whether to transmit the message includes incrementing a message point count for statistical purposes recording messaging outputs for later use in training.

Similarly if the selected message is not transmitted then determining whether to transmit the message includes incrementing a frequency supporting count such as a send count or a post count for use in determining whether to transmit a selected message. In particular PVRs increment such counts until the counts are equal to a messaging frequency such as MessagingFrequency and then reset to zero. If a pertinent messaging frequency is for example set to 5 indicating that a message is only to be transmitted on each fifth occurrence of its associated message point then the process of determining whether to transmit that message includes comparing a message count for the message model identified by the messageID of the particular message in question. If the message count is less than the messaging frequency the PVR increments the message count and does not transmit the message. If the message count is equal to the messaging frequency the PVR resets the message count to zero and transmits the message.

If the PVR transmits the message that is if determining whether to transmit a selected message results in a determination that the message is to be transmitted then the PVR transmits the selected messages to a user and stores a record representing the transmission of the transmitted message in the transmission records . The method illustrated in often in fact includes transmitting to a user the selected message and storing in the records of transmissions of messages a record representing the transmission of the transmitted message the stored record having the form for example of the transmission records illustrated at reference in . Transmitting a message to a user comprises transmitting the message to a display device identified in a user profile as for example a pager number utilized because the user s asserted preferred messaging mode is set to pager. 

Examples of messaging inputs useful in PVRs that implement methods of the kind illustrated in include several data elements shown in the example data structures of . Such data elements include for example message identifications reference in transmission records message point identifications user identifications for users to whom messages are sent indications whether messages are sends or posts and command identifications for commands associated with prompts for choices in messages.

Examples of messaging outputs useful in PVRs that implement methods of the kind illustrated in include several data elements shown in the example data structures of . Such data elements include for example message point counts in messaging model . Messaging outputs include data elements such as message counts like those shown at references and on . Such counts comprise relative indications whether messages are transmitted when message points are encountered. Messaging outputs include data elements indicating users responses to messages such as for example the field CommandID in the transmission records indicating that the user identified by userID chose commandID in response to messageID .

Examples of mappings useful in PVRs that implement methods of the kind illustrated in include several data elements shown in the example data structures of . Such data elements include for example confidence ratings in messaging model messaging counts messaging frequencies and indications whether to transmit sends or posts at message points.

In fact the creation of mappings is an important component of the training phase of machine learning in typical embodiments of the present invention. More particularly exemplary PVRs according the present invention calculate a mapping element such as for example a SendConfidence by first scanning through the transmission records and counting as a first count the total number of send messages that have been transmitted to a particular user having a particular userID for a particular message point that resulted in the user s choosing the default indicated by TransmissionRecord.CommandID 1 reference or by TransmissionRecord.ChoiceID 1 reference . The PVR then makes a second count of all the send messages to the same user for the same message point regardless whether the default was taken. These two counts are often developed in the same scan through the transmission records. 

The PVR then calculates SendConfidence by dividing the first count by the second count. SendConfidence in this example therefore represents for a particular messaging model the proportion of times the default is taken for send messages to a particular user identified by userID from a particular message point identified by MessagePointID .

The messaging model records in this example are repositories of mapping data elements combined with data elements identifying particular messaging model. Each messaging model that is each messaging model record aids message classification for a particular message point for a particular user. That is in exemplary PVRs using data structures similar to those of there is a separate messaging model for each combination of users to whom messages are transmitted and messaging points in connection with which messages are transmitted. In other words a unique key for the messaging model records is a combination of MessagePointID and userID .

The phrase message classification appeared in the paragraph just above and it may be useful for readers understanding to reiterate and expand upon classification. As described above machine learning comprises two principal phases training and classification. The phrase message classification as used in this disclosure refers to decision making regarding messaging in the classification phase of the machine learning cycle. Message classification is decision making for messages regarding for example whether a message is to be transmitted at a message point if a message is to be transmitted is it to be a send or a post if it is a send then which command choice are included and which one is the default and so on.

Exemplary PVRs according to embodiments of the present invention in their training phases typically also count post messages and store the counts as mapping data elements such as PostConfidence in the messaging models on . The example PostConfidence is a count in a particular messaging model of the messages posted to a particular user identified by userID from a particular message point identified by MessagePointID .

Another exemplary mapping data element in our exemplary messaging models is MessagingModel.MessagingFrequency . Messaging frequency in this example refers to how often a message is to be transmitted when encountering a particular message point. A value of 1 in MessagingFrequency for example can indicate that a message of some kind either a post or a send is to be transmitted every time the message point identified by MessagePointID is encountered in PVR operations. A value of 5 in MessagingFrequency for example can indicate that a message is to be transmitted every fifth time a particular message point is encountered and so on.

PVRs according to this kind of embodiment set a messaging frequency by comparing messaging counts or confidence ratings to thresholds. In the present example the PVR during training as part of creating mappings compares a confidence rating for a messaging model with a corresponding set of confidence thresholds in a PVR profile record . In this example the thresholds are stored at the PVR level. In some embodiments thresholds are set at the user level or even in messaging models themselves. Any storage arrangement for threshold parameters as will occur to those of skill in the art is well within the scope of the invention.

In this example if a messaging model is currently functioning as a send that is with TransPostOrSend set to send then the PVR compares SendConfidence with the send confidence thresholds . SendConfidenceThreshold SendConfidenceThreshold and SendConfidenceThreshold are set respectively to 5 10 and 20. If SendConfidence exceeds SendConfidenceThreshold then the PVR changes MessagingFrequency from 1 to 5 and thereafter transmits messages for the message point identified in MessagePointID only upon every fifth occurrence of the message point. If SendConfidence exceeds SendConfidenceThreshold then the PVR changes MessagingFrequency from 5 to 10 and thereafter transmits messages for the message point identified in MessagePointID only upon every tenth occurrence of the message point.

Readers lulled almost to sleep by the repetitive nature of the last two sentences will want to raise their heads for the next one. If SendConfidence exceeds SendConfidenceThreshold then the PVR changes MessagingFrequency from 10 to 1 changes TransPostOrSend from send to post and thereafter transmits messages for the message point identified in MessagePointID upon every occurrence of the message point.

Continuing with this example when a messaging model is functioning as a post that is with TransPostOrSend set to post then the PVR compares PostConfidence with the post confidence thresholds . PostConfidenceThreshold PostConfidenceThreshold and PostConfidenceThreshold are set respectively to 5 10 and 20. If PostConfidence exceeds PostConfidenceThreshold then the PVR changes MessagingFrequency from 1 to 5 and thereafter transmits messages for the message point identified in MessagePointID only upon every fifth occurrence of the message point. If PostConfidence exceeds PostConfidenceThreshold then the PVR changes MessagingFrequency from 5 to 10 and thereafter transmits messages for the message point identified in MessagePointID only upon every tenth occurrence of the message point. If PostConfidence exceeds PostConfidenceThreshold then the PVR changes MessagingFrequency from 10 to 20 and thereafter transmits messages for the message point identified in MessagePointID upon every twentieth occurrence of the message point.

It is possible and well within the invention for a PVR to carry out comparisons of confidence ratings with confidence thresholds every time a message point is encountered. Training a messaging model by mapping confidence ratings to thresholds through messaging frequency however makes classification processing faster because upon encountering a message point the PVR needs only to operate on values within the messaging model for the message point. That is rather than carrying out comparisons with thresholds the PVR needs only compare messaging frequency with a message count. As described earlier if the count is less than the frequency increment the count and do not transmit. If the count is equal to the frequency clear the count and transmit the message. This is a particular example of the design strategy mentioned earlier in favor of offloading complexity from classification to training.

Another exemplary mapping data element in our exemplary messaging models is Command.CommandSequence in the command records in . CommandSequence in this example refers to the order in which a PVR inserts choices for commands into send messages. As noted earlier the example PVRs under discussion define choice number 1 as the default choice to be executed in the absence of a user response. Absence of a user response is defined as a timeout on a send message. In exemplary PVRs according to embodiments of this invention a count such as CommandCount of the number of times a command is chosen in response to a particular message identified by messageID is maintained separately from the command sequence. CommandSequence is calculated for each command during training. More particularly during training a PVR according to this kind of exemplary embodiment scans through all the command records . The PVR sorts the command records having the same MessageID according to CommandCount and then assigns incrementing values to CommandSequence beginning with 1 and continuing through the number of commands having the same MessageID. That is the command having the highest value of CommandCount is set to CommandSequence 1 and CommandSequence 1 defines the default command for the message identified by the same MessageID .

It is useful to note that although CommandSequence in this example is calculated for each command during training CommandCount is incremented only for the chosen or defaulted command when a particular message is transmitted. Command sequence calculation or updating is a voluminous task applied to all command records as part of training. Incrementing CommandCount is a quick single step applied to a single command record when a particular message is transmitted. This is yet another example of a design strategy that favors offloading complexity from classification to training.

The following factory class illustrates in pseudocode an example of selecting a message to be transmitted in dependence upon records of responses to messages. In this example fields such as MessagingModel.TransPostOrSend are previously set by a training routine operating as described in detail above in dependence upon historical records of message transmission such as for example records structured as illustrated by the data structures in . Selecting a message to be transmitted occurs at a message point. Within our terminology of machine learning such selecting of a message comprises classification rather than training.

In this example if a training scan through historical records set TransPostOrSend to send then MessageID is set to the message ID of a send message identified in SendMessageID and the message selected by the switch statement and returned by the return statement is a send message. If the training scan through historical records set TransPostOrSend to post then MessageID is set to the message ID of a post message identified in PostMessageID and the message selected by the switch statement and returned by the return statement is a post message.

At this point in our discussion it is useful to compare MessageFactoryOne and MessageFactoryTwo. Earlier in our discussion of MessageFactoryOne we noted its one to one correspondence between message point and message type and commented that later we would show how to add program logic to the factory class to usefully decouple the one to one relationship between message point ID and message type. In fact this line of pseudocode in MessageFactoryTwo. createMessageObject by use of TransPostOrSend effectively decouples the one to one correspondence between message point ID and message type 

In MessageFactoryTwo.createMessageObject one cannot identify a single message type that will be transmitted as a result of encountering any particular message point. On the contrary when application code asks MessageFactoryTwo for a message object for a particular message point in use of the particular example code and data structures set forth in this disclosure createMessageObject can return either of at least two message objects depending on whether the subject message is to be transmitted as a send or a post. This present messaging model particularly as depicted in the data structure at reference in is capable of choosing among two alternative messages for each message point. There is no limitation to only two choices in the scope of the present invention however. Persons of skill in the art will define messaging models capable of choosing among more than two message classes for each message point and all such messaging models are well within the scope of the present invention.

The method described with reference to includes structuring the selected message in dependence upon the records of responses to messages. In the method of structuring the selected message includes inserting in the selected message choices for a set of sequenced commands . The following message class illustrates in pseudocode an example of structuring a selected message in dependence upon records of responses to messages including inserting message choices for commands. In particular this example illustrates a selected send message prompting a user to choose a way of making available more storage space for recording.

To explain operation of this pseudocode assume that showID identifies a show titled Buffy The Vampire Slayer scheduled to record at 5 00 p.m. with a deficit of 5 megabytes a default of choice number 1 and a timeout period of thirty seconds. Assume that there are six commands identified by command records for the message identified by MessageID the commands indexed on sequence number and having respectively the following ChoiceStrings 

The example method send returns an integer representing the user s choice 1 if the user takes the default and does not record 2 if the user chooses to repossess loaned space 3 if the user chooses to borrow space and so on.

The example method send operates in a method according to to selected messages in dependence upon records of responses to messages including inserting in a selected message choices for a set of sequenced commands . In this example send operates in dependence upon records of responses in the sense that send steps from command record to command record in an indexed sequence generated at training time from historical message transmission records including historical records of a user s responses to each of the commands for a particular message all as identified for example in fields such as those at references and in exemplary transmission records on . In this example the set of commands is the set of commands identified by command records having the same value of MessageID . 

For further explanation of machine learning for messaging we present the following example use case. Consider the example of a PVR that has a messaging model having the following values 

An example PVR is programmed so that it transmits upon encountering MessagePoint4 posts of message4P incrementing PostCount when it does so. The PVR s training routine periodically calculates PostConfidence and when PostConfidence exceeds 25 the PVR sets MessagingFrequency to 5 . Similarly when PostConfidence exceeds 50 the PVR sets MessagingFrequency to 10. When PostConfidence exceeds 100 the PVR sets MessagingFrequency to 1 and TransPostOrSend to Send. 

Our example PVR is programmed so that it transmits now that TransPostOrSend is set to Send upon encountering MessagePoint4 sends of message4S incrementing SendCount when it does so. The PVR s training routine periodically calculates SendConfidence and when SendConfidence for a current default choice 4468 exceeds 0.25 the PVR sets MessagingFrequency to 5 . Similarly when SendConfidence exceeds 0.50 the PVR sets MessagingFrequency to 10. When SendConfidence exceeds 0.95 the PVR sets MessagingFrequency to 20. 

The following is a four line pseudocode example that identifies a message point for prompting a user to select a method of making available more storage space for recording a show obtaining a response from the user and taking action according to the response.

In this example the example PVR identifies a message point identified as MessagePoint4. The PVR application software calls factory method createMessageObject in the message factory class MessageFactoryTwo. The member method createMessageObject returns a message object m . The factory method decides which message is to be transmitted if any.

The PVR applications software next calls the message object member method m.send which may or may not send a message. Which message to send is decided by the factory. In this example it is the message object that decides whether to send a message returning NULL if no message is sent 

That is the message object in this example will not send a message if a pertinent messaging count is less than the governing messaging frequency. In addition the message object member method m.send returns a NULL if the message transmitted is a post there being no need to execute and action in response to the message if there is no response to the message because no response was prompted for or sought 

That is there is no need to take action if the message was transmitted as a post. In fact there is no action to be taken. Notice however that the four line snippet includes a provision for a send despite the fact that a send may not occur. That is the application level code includes a provision for sending or posting because the application level code has no idea which will occur if either. At this point in other words the application level is completely decoupled from the messaging subsystem comprises of factory classes message classes and action or commend classes. The application level is privileged to simply insert at any message point four line of code similar to those described above insert the message point ID in the call to the factory method compile and run. The application level has no idea whether a message will be sent. If a message is sent the application level will not know what kind of message it is.

The operation of our four line pseudocode example evolves dramatically as parameters change in the course of machine learning. When our use case begins operation the example PVR always transmits a send message requesting a response choosing one of six alternative ways for to make available additional storage space for recording. As training routines are applied the sequence in which the six alternative are presented including which one is the default change over time. When one default is taken long enough to raise the SendConfidence past the first SendConfidenceThreshold the PVR ceases to send messages on every occurrence of the MessagePoint4 and begins to transmit sends only on every fifth occurrence of the message point.

If the default is taken long enough the PVR changes to messaging with posts instead of sends taking a default action and merely advising the user that the PVR has taken the default action. As PostConfidence increases through training the PVR transmits posts less often eventually transmitting post messages to the user only on every twentieth occurrence of the message point. Through all of these dramatic changes in PVR performance from prompting sends and command choices on every occurrence of a message point to merely advisory posts on every twentieth occurrence of the message point the application code identifying the message point remains unchanged. That is these lines of code 

It will be understood from the foregoing description that modifications and changes may be made in various embodiments of the present invention without departing from its true spirit. The descriptions in this specification are for purposes of illustration only and are not to be construed in a limiting sense. The scope of the present invention is limited only by the language of the following claims.

