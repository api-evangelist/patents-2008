---

title: Method and apparatus for operating an open API network having a proxy
abstract: A telecommunication system, method, apparatus, and computer readable media that implements an open application program interface (API) system in which open API servers pass and receive API commands to applications through a novel proxy. The proxy assists implementing various management functions, such as assigning open API servers to application and monitoring the overall system, and service contract control, all beneficially in a transparent manner. The proxy enables the telecommunication system to handle geographically diverse applications and open API servers. All API command can, but need not, pass through the proxy.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08001555&OS=08001555&RS=08001555
owner: Alcatel Lucent
number: 08001555
owner_city: Paris
owner_country: FR
publication_date: 20080710
---
This application is a divisional of U.S. patent application Ser. No. 10 764 754 filed on Jan. 26 2004 entitled METHOD AND APPARATUS FOR OPERATING AN OPEN API NETWORK HAVING A PROXY now U.S. Pat. No. 7 426 737 which application is incorporated herein by reference.

Embodiments of the present invention relate to telecommunication networks. More specifically embodiments of the present invention relate to telecommunication networks that support open API resources.

Telecommunication network operators are often reluctant to open their networks to new companies that offer communication based applications. Their reluctance is at least somewhat justified in that network operators risk cannibalizing their own applications particularly if price becomes the major difference between their applications and those offered by new companies. In fact telecommunication network operators risk becoming mere transporters of bits if they cannot compete with applications offered by new companies having low overhead costs.

Additionally if telecommunication network operators open their networks to new applications and companies network operators facing losing control of their networks by having to support network demands driven by applications written and maintained by 3rd parties such as service providers or software vendors.

While the reluctance to open their networks may be justified if telecommunication network operators do not do so they risk losing lucrative markets that new companies and applications might create. Since most new companies operate outside of the traditional telecommunication network boundaries new applications may create entirely new services that bring in customers that normally would not use the network. Additionally government mandated forces that seek to increase telecom market competition can force network operators to open their networks.

In one scenario transactions between a network and applications are beneficially based on a set of interfaces and data types that form Application Programming Interfaces APIs . If those APIs are standardized and widely available for use such APIs are referred to as open APIs. Open APIs are typically established by software organizations that both carefully define the APIs and promulgate their use. Many sets of open APIs exist for example the Parlay OSA APIs which were originally defined within the Parlay group and standardized in the context of 3GPP and ETSI. The Parlay OSA APIs where OSA stands for Open Service Architecture form a set of nine orthogonal Service Capability Functions SCFs each of which address a different telecom area call control user interaction mobility terminal capabilities data session control generic messaging connectivity management presence availability and charging.

Thus a prior art API based system includes a set of open APIs a set of users that send and receive information via servers a telecommunication network that transports the information and 3rd party owned applications that receive information through the open APIs runs an application based on those APIs and sends responding information back to the network through the open APIs.

While useful prior art API based systems are subject to significant limitations. First in prior art API based systems there is a one to one relationship between open API servers and applications. To overcome this limitation prior art API based systems have included a Registration and Discovery entity that is used by the Open API servers to announce themselves and used by the applications to discover what APIs are available. When there are multiple Registration and Discovery entities a fundamental problem is what registration and discovery entity an Open API server should use. To avoid that problem an Open API server could announce itself to all of the available Registration and Discovery entities. But that creates a problem since to assign an open API server to multiple registration and discovery entities the configuration of the overall system must be known and that is difficult to determine.

Another problem in prior art API based systems is after an application discovers what open API server to use for its services that relationship is static. While the initial open API server might have been beneficial at a certain moment in time a subsequent occurrence such as an Open API server failure could create huge problems. In that case the application providing a certain service could no longer be used without a recovery session that was initiated by the application. Yet another problem in prior art open API systems is the difficulty of enforcing Service Level Agreements.

In view of the foregoing and other limitations a new open API based system has been proposed. That system includes open applications and open API servers but the telecommunications network inserts a proxy device between the open applications and the open API servers. That proxy can handle start up to avoid overlap determine which open API server or servers will handle a particular API event or method invocation balance communication loads between the various open applications and open API servers and dispatch events between the open applications and open API servers.

While the proxy is a promising addition to open API based systems the proposed proxy fails to address other foreseeable problems in successful systems. Therefore a proxy that addresses other problems in open API based system would be beneficial. Also beneficial would be a telecommunication network having a proxy that addresses other problems of open API based system. In addition a method of operating a proxy that addresses other problems of open API based system would be beneficial. A computer readable media that stores a computer program that operates a proxy that addresses other problems of open API based system would also be beneficial.

The disadvantages heretofore associated with the prior art are addressed by a novel method for operating a telecommunication network in a way that addresses limitations of open API based systems.

The disadvantages heretofore associated with the prior art are addressed by a novel proxy and a telecommunication network having such a proxy that addresses limitations of open API based systems.

The disadvantages heretofore associated with the prior art are addressed by a computer readable media that stores a computer program that operates a proxy and thus a telecommunication network such that limitations of open API based systems are addressed.

To facilitate understanding identical reference numerals have been used where possible to designate identical elements that are common to the figures.

The present invention is directed to novel open API based methods apparatus computer readable media and systems that incorporate a proxy between applications and open API servers. Open API systems in accord with the present invention can handle two types of information flows those that originate in the network and are forwarded to the application and those that flows from the applications to the network. Although both flows are communicated through the APIs in what follows the first type is referred as an event and the second is referred to a method invocation.

As shown between the open API servers and the applications is a proxy . The open API servers and the proxy could be part of a commonly owned network . Furthermore while the applications are shown at an application level it is possible that one or more applications are also owned or operated by the owner of the network . As is subsequently described in more detail the proxy transparently handles communications between the open API servers and the applications . To that end the applications initially authenticate and subsequently register their presence with the proxy which is accomplished by the applications contacting a registration and discovery device that receives or can determine from an authentication mechanism the registration information such as IP addresses start conditions geographic locations allowable APIs etc required by the proxy to identify accept and use the application .

Registration of applications primarily takes place when the applications announce their start conditions. After an application is authenticated it can discover select and start using the services offered by the open API servers . By registration the proxy determines the capabilities of all open API servers and subsequently combines those capabilities to form a superset of capabilities. The proxy subsequently registers the superset capabilities with the registration and discovery device making it possible for the registration and discovery device to advertise a more generic set of services to authenticated applications that are discovering services. This also offers the open API servers the ability to register only at a single location and also offers a central place for monitoring and maintaining the open API network which is described in more detail subsequently.

Although the proxy is depicted as a general purpose computer that is programmed to perform various control functions in accordance with the present invention the invention can be implemented in hardware for example as an application specified integrated circuit ASIC . As such the process steps described herein are intended to be broadly interpreted as being equivalently performed by software hardware or a combination thereof. Furthermore if implemented in software or firmware the proxy includes a computer readable media that stores information that can be run and or accessed by the processor . Whether implemented in hardware or in software or in a combination of hardware software the proxy operates to fulfill the functions described below.

A first function fulfilled by the proxy is in enforcing of service contracts between two or more of the open API servers the users the applications and the telecommunication network operators. Examples of parameters that could be part of a service contract include the resource usage allowed by an open API server e.g. the maximum number of calls the maximum number of call legs allowed per call the maximum number of mailboxes open billing time limitations and APIs that are allowed. In some embodiments the proxy dynamically distributes service contracts to the open API servers .

After the open API servers have their implementation parameters at step a trigger may cause a local open API server to determine that its local service contract is deficient. For example if a local open API server is restricted to 10 calls when it is handling 8 calls that open API server may set a trigger to indicate that it may need authorization to handle more than 10 calls. In that case at step the local open API server sends a request to the proxy asking for a modification to its service contract. Meanwhile at step the proxy has been monitoring the open API servers to identify such requests. At step after a request for a modification has been received the proxy at step queries the relevant open API servers as to their current local usage. Once that usage has been determined a loop is made back to step for a re calculation of relevant open API server s local contracts. Thus the proxy can allocate resources based on current usage while remaining within the service contract.

It should be understood that each entity may react to service contract terms differently. For example the service contract for the open API server may specify that no time critical information is to pass to or from the open API server . Consequently the proxy can give APIs for the other open API servers and a higher priority.

After the entities have been provided with implementation parameters at step the various entities implement their portions of the contract terms. If the open API server determines that it s local service contract for a particular set of applications requires an update this open API server can interrogate the proxy requesting an update of the contract in method . If the service contract for the set of applications stops the method then stops at step . For example when a user contacts an open API server that server searches its service contract parameters and determines whether it can handle the particular call or service required by the user . For example if the open API server has a maximum number of calls all calls in excess of that number may be refused or redirected to another open API server .

As the open API model becomes more popular the number of open API entities will increase. This will introduce management and integration problems into the model. This presents a particular challenge since an open API system may consist of various entities that reside in highly diverse geographical locations. Since open API entity behavior has to be monitored to ensure system wide compliance and if needed appropriate corrective actions must be taken diverse geographical locations present problems. Corrective action is a major concern because system wide changes in a large network can be extremely difficult time consuming and expensive. The proxy provides an effective solution to such issues. Furthermore the proxy can do so in a transparent manner.

One important corrective action that the proxy can take is to act as a firewall to prevent inappropriate or dangerous APIs from propagating through the open API system. This becomes especially valid if a registration and discovery device operates within the domain of a foreign network operator that wants to open its network resources for third parties that could develop APIs that could cause localized or system wide breakdowns. Having the proxy act as a filter to block such APIs is particularly beneficial.

As discussed above the proxy is aware of the other open API system entities and can directly assign a specific open API server to a specific application not only initially but dynamically. Assignments can be changed to reflect network conditions such as additions of applications and open API servers or as a result of system failures. This dynamic assignment capability significantly increases network availability.

While the foregoing may suggest that all communications between the applications and the open API servers pass through the proxy such is not required. illustrates an open API system in which certain API calls by pass the proxy and run directly between open API server and application . As shown a specific call designated IpCall is communicated directly on lines . However other API calls are handled by the proxy . Direct routing can prevent the proxy from acting as a performance bottleneck.

If properly configured the proxy is transparent an open API server need not know that it is communicating through the proxy and an application need not know it is communication through the proxy except possibly while initially registering. The proxy can provide proper start up conditions decide which competing application receives an event if several applications are available act as a traffic cop introduce delays in forwarding events to avoid potential problems provide central management functions implement service contracts hide the network choose to relay outstanding or new requests to other resources thus increasing network availability act as a firewall to maintain the integrity of the system gather information from multiple resources and distribute the information as required and or at the right time ease system wide changes and their integration and centrally monitor applications and open API servers .

While the foregoing is directed to embodiments of the present invention other and further embodiments of the invention may be devised without departing from the basic scope thereof and the scope thereof is determined by the claims that follow.

