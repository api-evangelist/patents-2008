---

title: Process reflection
abstract: Process reflection techniques are described in which a reflected process is created to facilitate analysis of a process. Events are detected to initiate reflection of a target process. Process reflection of a target process may be initiated by an external process or by the target process itself. A reflected process of the target process is created. In an implementation, data defining the target process is replicated, copied, or otherwise collected from the target process to create the reflected process. Then, analysis may be performed on the reflected process while execution of the target process continues.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07908521&OS=07908521&RS=07908521
owner: Microsoft Corporation
number: 07908521
owner_city: Redmond
owner_country: US
publication_date: 20080625
---
On occasion processes e.g. applications executing on a computing device may experience problems such as bugs memory leaks crashes hang ups and so forth. One technique to discover and resolve such problems is through live diagnosis analysis and or debugging of processes on a user s computing device in the field. However traditional techniques for live diagnosis of a process may be quite disruptive to the user as these techniques involve suspending the process for the duration of the diagnosis. Such diagnosis can last anywhere from tens of seconds for leak detection and dump creation to several hours or even days for debugging of processes with very large memory allocations. In addition live diagnosis of a process following a crash or a hang may prevent restarting of the process until the diagnosis is complete.

Process reflection techniques are described in which a reflected process is created to facilitate analysis of a process. Events are detected to initiate reflection of a target process. Process reflection of a target process may be initiated by an external process or by the target process itself. A reflected process of the target process is created. In an implementation data defining the target process is replicated copied or otherwise collected from the target process to create the reflected process. Then analysis may be performed on the reflected process while execution of the target process continues.

This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter nor is it intended to be used as an aid in determining the scope of the claimed subject matter.

One technique to discover and resolve problems that may occur with processes e.g. applications executing on a computing device is through live diagnosis analysis security recovery and or debugging of processes on a user s computing device in the field. However traditional techniques for live diagnosis of a process may be quite disruptive to the user as these techniques involve suspending the process for the duration of the diagnosis.

Process reflection techniques are described in which a reflected process is created to facilitate diagnosis and analysis of a target process which may be performed with little or no user disruption. A variety of different diagnosis analysis techniques may be performed on the reflected process while execution of the target process continues.

For example when Bob uses his word processor he may notice that certain keystrokes cause the word processor to crash . Using process reflection techniques when the word processor crashes a reflection module may detect the crash and initiate a reflection of the word processor. The reflection module may collect a variety of data that defines a state of the executing word processor. Using this collected data the reflection module may call functionality of an operating system to cause creation of a reflection of the word processor e.g. a reflected process. The reflected process closely recreates the state of the word processor. The reflected process may be created very quickly and then Bob s word processor may be restarted. Thus Bob is able to continue working with little disruption.

Behind the scenes analysis may occur on the reflected process to debug the crash. For instance a debugging tool may operate on the reflected process and communicate information back to a manufacturer or developer. When the cause of the word processor crash is determined a fix may be sent to Bob s computing device and installed automatically. Thereafter Bob may notice that the keystrokes no longer cause his word processor to crash. Bob may not even have been aware of the process reflection and analysis occurring behind the scenes to correct his problem with the word processor.

In the following discussion an example environment is first described that is operable to perform process reflection techniques. Example procedures are then described that may be employed in the example environment as well as in other environments. Although these techniques are described as employed within an example computing environment in the following discussion it should be readily apparent that these techniques may be incorporated within a variety of environments without departing from the spirit and scope thereof.

Processors are not limited by the materials from which they are formed or the processing mechanisms employed therein. For example processors may be comprised of semiconductor s and or transistors e.g. electronic integrated circuits ICs . In such a context processor executable instructions may be electronically executable instructions. The one or more processors may perform single threaded and multi threaded operations. Additionally although a single memory is shown for the computing device a wide variety of types and combinations of computer readable memories may be employed including volatile and non volatile memory and or storage media. For example computer readable memories media may include but are not limited to random access memory RAM hard disk memory read only memory ROM flash memory video memory removable medium memory and other types of computer readable memories media that are typically associated with a computing device to store data executable instructions and the like.

The computing device is further illustrated as including an operating system and a variety of applications . The one or more processors may retrieve and execute computer program instructions from applications to provide a wide range of functionality to the computing device including but not limited to office productivity email media management printing networking web browsing and so forth. A variety of program data related to the applications is contemplated examples of which include office documents multimedia files emails data files web pages user profile and or preference data and so forth.

Computing device may also include various interfaces through which applications may interact with the operating system common resources dynamic link libraries DLLs networks resources content and services and so forth. Interfaces may include a network interface through which application may engage in various network interactions over a network not shown accessible to the computing device . Interfaces may also include one or more application programming interfaces APIs providing core tools and functions that may be used to take advantage of the functionality of the operating system . Generally APIs are interfaces that various applications may call to take advantage of various tools resources features services and so forth provided via the operating system . A variety of other examples are also contemplated.

An application when executed may utilize one or more interfaces to interact with the operating system and or resources of the computing device such as processor memory common resources DLLs network interface peripheral devices and so forth. An executed instance of an application may be referred to as a process . Process depicted in is representative of many such processes e.g. executing instances of applications or other code that may exist on a computing device . Operating system may support and manage creation execution and destruction of processes .

For instance operating system may allocate memory for a process load program instructions to the allocated space in memory and assign a process identifier PID . Operating system also manages multiple processes such as scheduling sequential processing of program instructions for the multiple processes on one or more processors . By way of example and not limitation a process may consist of a process identifier PID memory allocation and addressing an instance of executable program instructions for the corresponding application process registers a process counter and so forth. Multiple processes may be derived from the same application .

Sometimes applications and processes experience problems. For instance a process may hang up memory leaks may occur heap errors may occur and so forth. Traditional techniques to detect analyze and debug such errors may involve suspension of the process . This may be quite disruptive to a user who is unable to interact with the suspended process during the duration of the analysis which may last several minutes hours or even days for some processes .

Process reflection techniques are described herein. For instance the computing device is further illustrated as including a reflection module that is representative of functionality operable to create a reflected process corresponding to a process . Reflection module may be storable in memory and executable via the processor . In an implementation reflection module may interact with one or more interfaces to cause creation of a reflected process through the operating system .

The reflection module to may be implemented in a variety of ways to provide process reflection techniques to enable diagnosis for applications and computing devices . For instance reflection module may be configured as a stand alone component as illustrated integrated with operating system located remotely in a network accessible location and so on. In an implementation reflection module may be representative of one or more application programming interfaces APIs of operating system and or related resources data DLLs and the like. In this example the APIs implementing process reflection techniques may be callable by a variety of applications to create reflected processes .

In one example technique to create a reflected process a process may interact directly with reflection module to initiate a process reflection of itself. In another example technique to create a reflected process computing device includes a monitor module that is representative of functionality operable to monitor processes and determine when to reflect a process . Monitor module may be further operable to inject code into a process to initiate creation of a reflected process . The injected code may interact with refection module and or interfaces to cause creation of the reflected process . Monitor module may be storable in memory and executable via the processor . While illustrated separately monitor module may be implemented as a component of the reflection module . Further discussion of techniques to create reflected processes may be found in relation to the following figures.

The computing device is further illustrated as including an analysis tool that may be storable in memory and executable via the processor . Analysis tool is representative of a variety of tools operable to analyze processes including reflected processes . Such tools may include existing tools applied to reflected process as well as tools designed specifically for process reflection techniques. Because analysis by one or more analysis tools is performed on the reflected process rather than the process a user may experience little or no disruption related to the analysis. A user may not even be aware of process reflection techniques that may occur on a computing device associated with the user.

It is noted that one or more analysis tools may operate on the same computing device as an analyzed process as depicted . Analysis tools may also operate via a separate computing device to perform analysis in a separate environment e.g. an analysis support environment . For instance a reflected process may be communicated over a network to a support environment where a developer support technician or other user may perform analysis. Online server client techniques may be employed by remote support personnel to operate analysis tools over a network to analyze a reflected process of a computing device . However for simplicity sake the analysis tool is depicted as a component of the illustrated computing device of . Additional discussion of analysis techniques using reflected processes may be found in relation to .

Generally the functions described herein can be implemented using software firmware hardware e.g. fixed logic circuitry manual processing or a combination of these implementations. The terms module functionality engine and logic as used herein generally represent software firmware hardware or a combination thereof. In the case of a software implementation for instance the module functionality or logic represents program code that performs specified tasks when executed on a processor e.g. CPU or CPUs . The program code can be stored in one or more computer readable memory media devices. In a software implementation modules of a computing device are storable in memory and executable via the processor . The features of the techniques to provide process reflection techniques are platform independent meaning that the techniques may be implemented on a variety of commercial computing platforms having a variety of processors.

The following discussion describes techniques related to process reflection that may be implemented utilizing the previously described environment systems and devices. Aspects of each of the procedures may be implemented in hardware firmware or software or a combination thereof. The procedures are shown as a set of blocks that specify operations performed by one or more devices and are not necessarily limited to the orders shown for performing the operations by the respective blocks. In portions of the following discussion reference may be made to the example environment of .

In other instances reflection module and or monitor module may be configured to initiate process reflection automatically e.g. without user input responsive to a variety of events. Examples of events that may automatically trigger reflection of a process include but are not limited to start up of the process a time event non responsiveness of the process e.g. a process hang up an error code memory leak detection and or detection of a state of a process .

A reflected process of the target process is created block . For instance reflection module of computing device may create a reflected process responsive to the various triggers and or events. Continuing the previous example input from the support technician may cause reflection module to create a reflected process from a process corresponding to the database program experiencing memory leaks.

In particular reflection module is operable to obtain relevant portions of data corresponding to the process and to copy the relevant portions to create the reflected process . The relevant portions may include a variety of data parameters executable code and the like that are obtained to create a reflected process that substantially recreates the process . In general reflection module may perform a copy of a memory space and associated parameters that define a process . Reflection module may be further operable to communicate the data defining the process e.g. copied memory and parameters to the operating system to cause creation of a reflected process . In one example the reflection module may call an application programming interface API and communicate the copied memory space and associated parameters as input to create a reflected process . A variety of techniques to create a reflected process are contemplated. Example techniques to create a reflected process using a monitor module are discussed with respect to . Example techniques in which a process reflects itself are discussed with respect to .

The reflected process is analyzed while execution of the target process continues block . For instance an analysis tool of a computing device may perform a variety of analysis diagnostics debugging troubleshooting and so forth upon the reflected process . As noted analysis tool may operate via the same computing device as the analyzed process e.g. locally or via a separate computing device e.g. remotely over a network .

Since the reflected process is employed for the analysis rather than the process there may be little or no disruption experienced by a user. Moreover once created the reflected process is independent of the process . This may be contrasted with traditional techniques to clone or fork a process in which a cloned process has a high degree of dependency on its parent process. This dependency of traditional cloned processes may include sharing of files handles code memory allocation and other resources.

In contrast code executed via a reflected process may not affect the process and vice versa. In particular a reflected process may have its own allocated memory handles parameters and instance of executable code. Further a process and a reflected process generally do not share resources such as files parameter memories and so forth. While generally handles are different it is worth noting that optionally some inheritable handles may be shared between a process and a reflected process . For instance certain diagnosis may be enhanced through sharing of some handles. Further discussion of inheritable handles may be found in relation to . In an implementation other than some optionally shared handles a reflected process is substantially independent of the process from which it is derived. Accordingly execution of a process may continue without significant disruption while analysis is being performed on a reflected process .

The reflected process is also active in that code implemented by the process reflection module or other code sources may be run within the reflected process . This may be contrasted with a memory dump which is an inactive snapshot of data for a process at a particular time e.g. a snapshot of the state of the process . The reflected process may be analyzed actively in the background so that execution of the originating process may continue. Thus a user of a process may not be even aware of the analysis being conducted on a reflected process . In the above example once a support technician has created a reflected process of the database program the control of the database program may be given back to the consumer. Support technician may then use various tools e.g. analysis tool to troubleshoot the memory leaks in the background while at the same time the consumer may create edit and manipulate records with the database program.

Thus some characteristics of a reflected process have been described which include being online or active capable of executing code and independent of a process from which the reflected process is derived. It is contemplated that process reflection techniques and reflected processes may be employed with a wide range of analysis and diagnosis techniques. By way of example and not limitation the following discussion provides some example scenarios in which a reflected process may be employed for a variety of different types of analysis.

In one example a reflected process may enable online diagnosis analysis. In other words analysis occurs while the process from which the reflected process is derived is online e.g. still executing. Traditionally analysis of a process would involve suspending the process for the duration of the diagnosis. Accordingly the user may be disrupted and or some lengthy analysis may be foregone to prevent the associated disruption. Using a reflected process however a module e.g. operating system application and or user may perform online diagnosis e.g. of memory leaks on the reflected process using various analysis tools . The process does not have to be terminated or suspended so there is virtually no impact to users.

In another example analysis technique a non disruptive process dump or memory dump may be created from a reflected process rather than from the process . Again traditionally this involves suspending the process for the duration of the dump collection. In this scenario a crashed or hung up application may be restarted more quickly as compared to traditional techniques because dump collection and or checking for solutions occurs using the reflected process instead of the actual process . Accordingly a user may resume work right away instead of waiting for the collection routine to be completed.

In a further example a reflected process may be employed to perform online debugging. Debugging as used herein refers to finding and correcting errors in code that may be under development. In this scenario process reflection techniques may be used to reflect a process so a developer may debug the reflected process instead of the actual process . A developer may distribute a test version of a program e.g. beta version that takes advantage of process reflection techniques. For instance the test version may incorporate functionality to create a reflected process . Various debugging activities such as data collection live remote debugging process analysis and so forth may be performed on the reflected process while users continue to use the test version. Accordingly users e.g. beta testers may continue using a computing device and interacting with the test version of the program without being interrupted for debugging. This may allow a developer to obtain more consistent and complete information regarding errors in the code and as a result may o shorten development time.

In yet another example a reflected process may be employed to perform online process recovery. When an application crashes or hangs up on a computing device automatic process recovery may attempt to recover data and restart the application . Traditionally this involves saving recovery information from an associated process before the process is closed. In some traditional techniques an exception handler is employed for the data recovery. Exception handlers may not provide reliable recovery of data. Accordingly using traditional data recovery techniques may be disruptive and often incomplete.

Using process reflection techniques a failed process may be reflected to create a reflected process . The failed process may then be restarted quickly. The reflected process is used as a source to recover data instead of taking the time to collect data from the failed process before restarting. This data recovery using the reflected process may occur from memory to memory e.g. from the reflected process to a restarted process . Such memory to memory recovery may be faster and more reliable than using an exception handler which typically operates memory to disk. Thus using the reflected process to perform online recovery the time for data recovery may be shortened and data recovery may be more reliable.

In an additional example a reflected process may be used to enable safe memory scanning. Traditionally memory scanning e.g. by anti virus AV or anti malware AM programs involves a dangerous scan of process memory that may have device memory mapped into it. Reading scanning device mapped memory may be unsafe and have unforeseen consequences e.g. data disk corruption data loss hang ups and so on . Process reflection techniques enable anti virus or anti malware scanning software to reflect a process and scan the reflected process . The reflected process may remove device mapped memory and accordingly may be safer to scan.

Another example involves process migration using a reflected process . Process migration refers to moving of one or more processes from a first computing device to a second computing device . For example a user running many applications may be asked to reboot the first computing device to install critical security updates. The reboot may be quite disruptive to the user and prevent the user from accomplishing work during the reboot. Process migration is one way in which this disruption may be reduced. In traditional techniques periodic checkpoints of a process were taken to enable restarting of a process from the latest checkpoint. This periodic creating of checkpoints has associated costs which may include disruption to users to create checkpoints tie up of resources processor and memory that might otherwise be used for other purposes time to create the checkpoints memory to store the checkpoints and so forth.

Process reflection techniques enable a user to reflect each running process on the first computing device . Then on the second computing device the user may use the reflected processes to restart the applications and continue working where the user left off. In particular applications that the user was using may be launched in a process migration state that pulls in the data to recreate the state of the first computing device on the second computing device using the reflected processes . Rather than taking periodic checkpoints a checkpoint may be taken of the reflected processes when the reflected processes are to be migrated. The applications may use the checkpoint of the reflected processes to recreate the state on the second computing device . Thus using process reflection techniques the costs of taking periodic checkpoints e.g. time use of resources user disruption and so forth may be avoided.

Process reflection is initiated of a target process block . For example consider Abby as a consumer user of a computing device . Abby may notice that over time her computing device becomes sluggish. This may result from memory leaks caused by an email client used by Abby. In relation to Abby s email client the monitor module may detect one or more events that signal performance problems. Responsive to detecting these events the monitor module may pass a process identifier PID of the email client to the reflection module to initiate reflection of Abby s email client. Reflection module may then cause a reflected process of Abby s email client to be created. Again execution of reflection module to cause process reflection may alternatively be initiated by a process itself without monitor module .

Data is collected to define the target process block . For example to enable creation of a reflected process reflection module may collect data and or copy a virtual address space of a target process Abby s email client in the continuing example . Collected data for a target process may includes heaps threads copies of code information on handles and a variety of other data to define the target process . A reflected process that substantially recreates the target process may be created using the collected data that defines the target process .

In an example reflection module may copy information in a virtual address space of a process to collect data that may be used to recreate the process in a reflected process . The virtual address space may include a variety of data that defines an associated process . Reflection module may copy the virtual address space in whole or in part. In an implementation the reflection module may be configured to extract relevant portions of the virtual address space that are sufficient to enable recreation of the state the process in a reflected process .

In another example collecting data to define a target process involves providing parameters to collect specified data. For instance reflection module may allocate memory in the target process . The reflection module may provide parameters to collect data sufficient to define the target process . These parameters may be loaded to the allocated memory. Then the reflection module may inject a thread into the target process . In the injected thread the parameters are copied to a call stack to populate the parameters with data defining the target process . The allocated memory may then be copied by the reflection module to collect data that is specified by the parameters.

As noted copying of handles to a reflected process may be optional. For example to maintain independence between a reflected process and it associated process handles typically may not be copied to the reflected process . However the parameters specified via reflection module may include a configurable inherit handles flag that may be configured to enable one or more inheritable handles to be included in the data that is collected to define a process. Thus inheritable handles may be optionally selected in some cases. It is noted that some handles related to non shareable sections of memory may be designated as non inheritable. The non inheritable designation may be prevent these handles from being copied even when the inherit handles flag is set to permit copying of inheritable handles.

The collected data is passed to reflect the target process block . For example date that is collected from a process associated with Abby s email client may be passed to an operating system of a computing device . Operating system may implement functionality to create a reflected process from the collected data. In particular the reflection module may interact with one or more interfaces e.g. application programming interfaces APIs through which functionality to reflect a process may be made available. Once a reflected process is created various analysis may be performed using the reflected process as discussed with respect to .

In the preceding example various analysis of the reflected process may identify the memory leaks associated with Abby s email client. An automatic fix could then be communicated to Abby s computing device to correct the memory leaks. The fix may be installed automatically and Abby may notice the sluggishness disappear. During the analysis Abby may be able to continue use of the email client and an associated process with little or no disruption. Abby may not even be aware of the process reflection techniques which may occur behind the scenes to fix her email client.

To enable creation of a reflected process reflection module may collect data and or copy a virtual address space of a process Patrick s business application in this example . More particularly a parameter block is allocated in memory of the process block . Parameters in the parameter block are populated to define the process block .

In this example reflection module may allocate memory of the process that is associated with the business application to store various parameters. Reflection module may populate the parameter block with parameters sufficient to recreate a process in a reflected process . Data defining a process may then be collected via the parameters. When data defining the process has been collected the allocated memory including the parameters may be copied to enable creation of the reflected process . While aspects of procedure are described as using parameters a variety of other techniques to collect data defining a process are contemplated that may be employed with process reflection techniques without departing from the sprit and scope thereof.

An interface is called that is configured to cause creation of a reflected process of the process block . The parameters defining the process are passed to the interface to create the reflected process block . For example reflection module may call an application programming interface API or equivalent functionality that is operable to cause creation of a reflected process . Data that is collected to define the process related to Patrick s business application including the parameters may be passed to the API by the reflection module . The API may be configured to enable interaction with functionality of the operating system to reflect the process based upon the collected and passed data. The operating system may accordingly create a reflected process that substantially recreates process associated with Patrick s business application.

Once a reflected process corresponding to Patrick s business application is created the business application may be quickly restarted so that Patrick does not lose time. Further process recovery operations may be performed on the reflected process so that Patrick experiences little or no disruption. Patrick s data may be recovered through the reflected process . A variety of other types of analysis may be performed using the reflected process of Patrick s business application examples of which include the various analysis discussed with respect to .

Although the process reflection techniques have been described in language specific to structural features and or methodological acts it is to be understood that the invention defined in the appended claims is not necessarily limited to the specific features or acts described. Rather the specific features and acts are disclosed as example forms of implementing the claimed invention.

