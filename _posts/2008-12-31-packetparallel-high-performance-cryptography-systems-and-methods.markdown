---

title: Packet-parallel high performance cryptography systems and methods
abstract: A cryptographic system () includes cryptographic sub-units () and associated input buffers () connected to a scheduler () and a reassembler (). The scheduler () receives packets, where each of the packets includes one or more data blocks, and assigns each of the packets to one of the sub-units (). The input buffers () temporarily store the packets from the scheduler (). Each of the sub-units () performs a cryptographic operation on the data blocks from the associated input buffer () to form transformed blocks. The reassembler () receives the transformed blocks from the sub-units (), reassembles the packets from the transformed blocks, and outputs the reassembled packets in a same order in which the packets were received by the scheduler ().
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07721086&OS=07721086&RS=07721086
owner: Verizon Corporate Services Group Inc. & BBN Technologies Corp.
number: 07721086
owner_city: Basking Ridge
owner_country: US
publication_date: 20081231
---
This application claims priority under 35 U.S.C. 119 based on U.S. Provisional Application No. 60 316 574 filed Aug. 31 2001 and U.S. application Ser. No. 10 166 547 filed Jun. 10 2002 the disclosure of which is incorporated herein by reference.

The U.S. Government may have a paid up license in this invention and the right in limited circumstances to require the patent owner to license others on reasonable terms as provided for by the terms of Contract No. MDA 904 00 C 2123.

The present invention relates generally to cryptography and more particularly to systems and methods that provide high performance cryptography.

Compared to network data transmission cryptographic protection of data is a computationally intensive task. There is a need however for network speed cryptography to support the Secure Internet Protocol IPsec security standard for data protection between entities communicating over the Internet. This has lead to the development of cryptography units employing multiple cryptography engines whose aggregate performance matches network data rates.

Existing parallel cryptography units employ one of three techniques to achieve higher performance pipelined block parallel and flow parallel techniques. is a diagram of a conventional pipelined system that operates upon blocks of a packet. Each packet is broken into multiple fixed sized data blocks before being operated upon by pipelined system .

Pipelined system includes a series of cryptography stages that perform a cryptographic e.g. encryption or decryption operation on data blocks of a packet. Each of cryptography stages performs part of the cryptographic operation f X on a data block and passes it onto the next stage for the next part of the cryptographic operation. If the pipelined system includes four cryptography stages the portions of the cryptographic operation performed by the four cryptographic stages may be represented by f X f X f X and f X respectively. In this case the cryptographic operation may be defined as f X f f f f X .

Demultiplexer uses information within the packet to be encrypted or decrypted to select a sub unit to process the packet. When IPsec is used demultiplexer normally uses the Security Association SA to which the packet belongs in determining which sub unit to select. There is typically a different SA for each remote entity with which the network device is communicating. Other characteristics of a packet such as the TCP connection to which it belongs can also be used.

Demultiplexer stores the packet in an input buffer of the selected sub unit . Input buffer typically includes a first in first out FIFO memory. Sub unit performs a cryptographic operation e.g. encryption or decryption on the packet and stores the result in output buffer . Output buffer typically includes a FIFO memory. Multiplexer receives packets from output buffers and multiplexes them together into a single stream.

Pipelined and block parallel systems suffer from an inability to handle common cryptographic modes where the encryption or decryption of a block is dependent on the completion of the prior block in a series of blocks. In particular the Cipher Block Chaining CBC mode which is widely accepted as the only current cryptographic mode suitable for the encryption of packet data has this property. Thus pipelined and block parallel systems are not suited for packet based cryptography employing the CBC mode. The block parallel technique can also experience difficulties with other modes such as the counter mode where certain state information must be shared among multiple sub units working on the same packet.

It may be possible to modify the block parallel technique so that all data blocks from a single packet are assigned in sequence to the same sub unit. Assuming that all sub units have similar performance this means that short packets with few data blocks will finish faster than long packets with many data blocks resulting in packets becoming out of order as short packets get ahead of longer ones. Packet reordering is considered a highly undesirable behavior because it degrades the throughput of the widely used TCP. Thus such a modified block parallel technique has significant disadvantages that prevent its successful use.

Flow parallel systems can handle CBC and similar feedback modes because all related data blocks from a single packet are handled by the same sub unit. These systems also avoid the problems of packet reordering because all packets from a single flow are processed in order through the same sub unit. Reordering of packets between flows is considered acceptable behavior because it does not affect TCP throughput. Flow parallel systems however limit the maximum throughput on any flow to the maximum performance of a single sub unit. As a result while large aggregate data rates can be achieved for many flows through a single cryptography device individual flows cannot approach the full throughput of a high bandwidth network interface.

Also flow parallel systems can suffer from traffic imbalances among the different sub units with some sub units going unused with no flows currently assigned to them or actually sending traffic enough to fill them while other sub units are oversubscribed with several high bandwidth flows that exceed the capacity of the sub units. Because it is difficult to determine a priori what the bandwidth of a given flow will be the assignment of flows to sub units will generally be sub optimal.

Therefore there is a need for network speed cryptography that supports current security protocols such as IPsec for data protection between entities communicating over a network at full line rate with no reordering.

Systems and methods consistent with the present invention address this and other needs by providing parallel packet high performance cryptography. The systems and methods assure that packets are output in the same order in which they were received thereby avoiding out of order packets.

In accordance with the principles of the invention as embodied and broadly described herein a cryptographic system includes cryptographic sub units and associated input buffers connected to a scheduler and a reassembler. The input buffers are configured to temporarily store packets where each of the packets includes one or more data blocks. Each of the sub units are configured to perform a cryptographic operation on the data blocks from the associated input buffer to form transformed blocks. The scheduler is configured to assign each of the packets to one of the sub units based on an amount of data stored in the associated input buffer. The reassembler is configured to receive the transformed blocks from the sub units reassemble the packets from the transformed blocks and output the reassembled packets in a same order in which the packets arrived at the scheduler.

In another implementation consistent with the present invention a cryptographic system includes cryptographic sub units connected to a scheduler and a reassembler. Each of the sub units performs a cryptographic operation on data blocks associated with multiple received packets to form transformed blocks. The scheduler receives the packets identifies the sub units that would output the packets the soonest and assigns the packets to the identified sub units. The reassembler receives the transformed blocks from the sub units reassembles the packets from the transformed blocks and outputs the reassembled packets in a same order in which the packets were received by the scheduler.

In yet another implementation consistent with the present invention a cryptographic system includes cryptographic sub units connected to a scheduler and a reassembler. Each of the sub units performs a cryptographic operation on data blocks associated with multiple packets to form transformed blocks. The scheduler receives the packets associates a sequence number with each of the packets and assigns the packets to the sub units. The reassembler receives the transformed blocks from the sub units reassembles the packets from the transformed blocks orders the packets based on the associated sequence numbers and outputs the packets in a same order in which the packets were received by the scheduler.

The following detailed description of the invention refers to the accompanying drawings. The same reference numbers in different drawings may identify the same or similar elements. Also the following detailed description does not limit the invention. Instead the scope of the invention is defined by the appended claims and equivalents.

Systems and methods consistent with the present invention provide parallel packet high performance cryptography in a network device. The systems and methods assure that packets are output in the same order in which they were received thereby avoiding out of order packets.

System includes a packet processing system connected to input ports and output ports . Input ports may include processing logic to process packets received from a network and or memory to temporarily store the received packets. For example input ports may include logic that strips and or analyzes packet header information. Output ports may include processing logic to process packets for transmission to the network and or memory to temporarily store the packets prior to transmission. For example output ports may include logic that forms a packet by adding proper packet header information according to the protocol s used by the network.

Packet processing system may include one or more mechanisms for processing packets and or routing packets from input ports to output ports . For example packet processing system may include switching fabric to route packets from input ports to output ports one or more memory devices to temporarily store the packets and or one or more packet processors to analyze the packets obtain routing information for the packets and possibly perform certain service related e.g. quality of service functions.

In an implementation consistent with the present invention packet processing system includes a cryptography system that performs cryptography operations such as encryption and decryption on packets received by system . is an exemplary diagram of a cryptography system consistent with the principles of the invention. For the description that follows assume that received packets are divided into blocks and that packet framing data i.e. whether the block is the first middle or last block of a packet accompanies each block.

Cryptography system includes multiple cryptographic sub units and corresponding input buffers connected between scheduler and reassembler . Scheduler may include logic that receives blocks of packets and assigns them to the cryptographic sub units . Scheduler may assign all of the blocks of a packet to the same sub unit . Input buffers may include a memory device such as a first in first out FIFO memory that stores the packet framing data along with the packet block. All of input buffers may be of the same size and may be assigned out of a common memory using for example well known buffer management techniques.

Each of cryptographic sub units may include logic that takes blocks from input buffer performs a cryptographic operation e.g. encryption or decryption on the blocks and outputs the transformed blocks along with their packet framing data to reassembler . Reassembler may include logic that resequences and reassembles packets and outputs them in a single stream in the same order that the packets arrived at scheduler . Reassembler may include a buffer memory that temporarily stores packet blocks in a reassembly or output queue until the packets are ready to be output from cryptography system . The reassembly queue may be organized in many ways such as a two dimensional linked list.

The queue may maintain a set of pointers corresponding to sub units . Each of these pointers may identify the current packet being processed by corresponding sub unit . Queue may use these current packet pointers to facilitate the matching of blocks of a packet in sequence as they are output by sub unit . For example a current packet pointer may point to the last packet block stored in queue so that subsequent blocks of the same packet output from sub unit may be matched with the already stored blocks of the packet.

Each of the first packet blocks in queue may include a flag 1 that indicates that the packet is complete i.e. all of the packet blocks have been processed by the responsible sub unit or a flag 0 that indicates that the packet is still in progress i.e. not all of the packet blocks have been processed by the responsible sub unit . Further the final packet blocks in queue may include a flag L that indicates that it is the last block of the packet. These flags may be encoded in various ways such as using bits in the linked list pointers or using bits separate from the pointers.

The two dimensional linked list structure is one of many possible ways to implement reassembly queue . Further it is possible for there to be more packets in queue than there are sub units though the number of in progress packets should not exceed the number of sub units .

Returning to the functions performed by the components of cryptography system may differ based on the throughputs and latencies of cryptographic sub units . Three implementations will be described below 1 sub units have the same constant throughput and latency 2 sub units have possibly different but predictable throughputs and latencies and 3 sub units have unpredictable throughputs and latencies.

In this implementation cryptographic sub units have the same constant throughput and latency. is a flowchart of exemplary processing by cryptography system according to this implementation consistent with the present invention. Processing may begin when scheduler receives a flow of packets. Each of the packets may include one or more packet blocks and accompanying packet framing data.

Scheduler assigns each arriving packet to cryptographic sub unit with the least amount of data currently stored in its input buffer act . If more than one sub unit qualifies then scheduler may use an arbitration algorithm to select one of sub units . If the packet will not fit into input buffer of assigned sub unit then scheduler may hold the packet until there is sufficient room. This may assure that the beginning block of the packet will be processed through sub unit after the beginning blocks of all packets preceding it through scheduler and before the beginning blocks of any packets following it.

Scheduler stores the packet blocks and accompanying framing data in input buffer of assigned sub unit act . Assigned sub unit reads each of the packet blocks and accompanying framing data from input buffer and performs a cryptographic operation on the blocks act . For example sub unit may perform an encryption or decryption operation on a packet block and output the transformed block along with the framing data to reassembler .

Reassembler reassembles the blocks into packets and resequences the packets as necessary to assure that the packets are output in the same order in which they arrived at scheduler act . is a flowchart of exemplary processing by which reassembler reassembles and resequences packets according to an implementation consistent with the present invention. Processing may begin when reassembler receives a completed block i.e. a packet block that has been processed by a cryptographic sub unit from a sub unit act .

Reassembler may determine whether the completed block is the first block of a packet act . If the completed block is the first block of a packet reassembler may store the block at the end of reassembly queue act . Reassembler may then set the current packet pointer associated with this sub unit to point to this block so that subsequent packet blocks output by that sub unit until the end of the packet can be attached in sequence to the first block of the packet.

Reassembler may then determine whether the completed block is also the last block of the packet act . If the completed block is not the last block of the packet reassembler may return to act to await receipt of the next packet block. If the completed block is the last block of the packet however reassembler may mark the packet as complete by for example setting its flag to 1 act and the processing may end. In an alternative viewpoint reassembler may return to act to await receipt of the first block of the next packet.

Returning to act if the completed block is not the first block of the packet reassembler determines whether the completed block is the last block of the packet act . If the completed block is not the last block of the packet reassembler may attach the block to the end of the packet indicated by the current packet pointer corresponding to sub unit from which it received the block act . Reassembler may do this by storing the completed block in reassembly queue and modifying a pointer from the most recently stored block of this packet to point to the completed block. Reassembler may then return to act to await receipt of the next packet block.

If the completed block is the last block of the packet reassembler may place the last block at the end of the packet indicated by the current packet pointer corresponding to sub unit from which it received the block act . Reassembler may do this by storing the last block in reassembly queue and modifying a pointer from the most recently stored block of this packet to point to the last block. Reassembler may then mark the packet as complete by for example setting its flag to 1 act and the processing may end. In the alternative view reassembler may return to act to await receipt of the first block of the next packet.

Returning to once the packet at the head of reassembly queue is marked as complete reassembler removes the packet and outputs it in a single stream of packets act . Because scheduler guarantees that initial packet blocks arrive at reassembler in an unambiguous and correctly sequenced order the packets are output in the same order as they arrived at scheduler after a variable time delay.

In this implementation cryptographic sub units have possibly different but predictable throughputs and latencies. is a flowchart of exemplary processing by the cryptography system according to this implementation consistent with the present invention. Processing may begin when scheduler receives a flow of packets. Each of the packets may include one or more packet blocks and accompanying packet framing data.

Scheduler may determine the output time of the first block of a packet act . Scheduler may make this determination based on the current amount of data buffered in input buffer of each cryptographic sub unit and knowledge of the behavior of sub units . Scheduler may then assign the packet to sub unit that would output it the soonest act . If more than one sub unit qualifies then scheduler may use an arbitration algorithm to select one of sub units .

If the output time would be earlier or the same as the output time of the first block of a prior packet processed by scheduler then scheduler may delay the placing of the first block of the packet into input buffer of selected sub unit until the first block s output time becomes distinctly greater than the output time of the first block of the prior packet.

Scheduler stores the packet blocks and accompanying framing data in input buffer of assigned sub unit act . Assigned sub unit reads each of the packet blocks and accompanying framing data from input buffer and performs a cryptographic operation on the blocks act . For example sub unit may perform an encryption or decryption operation on a packet block and output the transformed block along with the framing data to reassembler .

Reassembler reassembles the blocks into packets and resequences the packets as necessary to assure that the packets are output in the same order in which they arrived at scheduler act . To do this reassembler may perform acts similar to those described with regard to . In this implementation it is possible for several packet blocks to complete in different sub units at the same time. Scheduler assures however that no two first blocks will complete at the same time by delaying if necessary the storing of a first block in input buffer of an assigned sub unit . This aids reassembler in keeping the packets in the same order in which they arrived at scheduler .

Once the packet at the head of reassembly queue is marked as complete reassembler removes the packet and outputs it in a single stream of packets act . Because first packet blocks are guaranteed to come out in an unambiguous and correctly sequenced order the packets are output in the same order as they arrived at scheduler after a variable time delay.

In this implementation cryptographic sub units have possibly different and unpredictable throughputs and latencies. This implementation may also apply to the situation in which the computation of the output ordering is unreasonably complex. is a flowchart of exemplary processing by the cryptography system according to this implementation consistent with the present invention. Processing may begin when scheduler receives a flow of packets. Each of the packets may include one or more packet blocks and accompanying packet framing data.

Scheduler may associate a monotonically increasing sequence number or a correctly ordered worst case completion time timestamp with the first block of each arriving packet act . Scheduler may then assign the packets to cryptographic sub units using any well known technique such as a round robin distribution act .

Scheduler stores the packet blocks and accompanying framing data in input buffer of assigned sub unit act . Assigned sub unit reads each of the packet blocks and accompanying framing data from input buffer and performs a cryptographic operation on the blocks act . For example sub unit may perform an encryption or decryption operation on a packet block and output the transformed block along with the framing data to reassembler .

Reassembler reassembles the blocks into packets and resequences the packets as necessary to assure that the packets are output in the same order in which they arrived at the scheduler act . is a flowchart of exemplary processing by which reassembler reassembles and resequences packets according to an implementation consistent with the present invention. Processing may begin when reassembler receives a completed block i.e. a packet block that has been processed by a cryptographic sub unit from a sub unit act .

Reassembler may determine whether the completed block is the first block of a packet act . If the completed block is the first block of a packet reassembler may store the block in reassembly queue based on its sequence number or timestamp act . In this implementation the first blocks are sorted in reassembly queue in increasing sequence number or timestamp order. Reassembler may then set the current packet pointer associated with this sub unit to point to this block so that subsequent packet blocks output by that sub unit until the end of the packet can be attached in sequence to the first block of the packet.

Reassembler may then determine whether the completed block is also the last block of the packet act . If the completed block is not the last block of the packet reassembler may return to act to await receipt of the next packet block. If the completed block is the last block of the packet however reassembler may mark the packet as complete by for example setting its flag to 1 act and the processing may end. From an alternative viewpoint reassembler may return to act to await receipt of the first block of the next packet.

Returning to act if the completed block is not the first block of the packet reassembler determines whether the completed block is the last block of the packet act . If the completed block is not the last block of the packet reassembler may attach the block to the end of the packet indicated by the current packet pointer corresponding to sub unit from which it received the block act . Reassembler may do this by storing the completed block in reassembly queue and modifying a pointer from the most recently stored block of this packet to point to the completed block. Reassembler may then return to act to await receipt of the next packet block.

If the completed block is the last block of the packet reassembler may place the last block at the end of the packet indicated by the current packet pointer corresponding to sub unit from which it received the block act . Reassembler may do this by storing the last block in reassembly queue and modifying a pointer from the most recently stored block of this packet to point to the last block. Reassembler may then mark the packet as complete by for example setting its flag to 1 act and the processing may end. From an alternative viewpoint reassembler may return to act to await receipt of the first block of the next packet.

Returning to once the packet at the head of reassembly queue is marked as complete and the sequence number is the next one in sequence or the value of the timestamp is less than or equal to the current time reassembler removes the packet and outputs it in a single stream of packets act . Reassembler may then discard the associated sequence number or timestamp.

Systems and methods consistent with the present invention provide parallel packet high performance cryptography for systems that include 1 cryptographic sub units with the same constant throughput and latency 2 cryptographic sub units with possibly different but predictable throughputs and latencies and 3 cryptographic sub units with unpredictable throughputs and latencies. The systems and methods assure that packets are output in the same order in which they were received thereby avoiding out of order packets.

The foregoing description of preferred embodiments of the present invention provides illustration and description but is not intended to be exhaustive or to limit the invention to the precise form disclosed. Modifications and variations are possible in light of the above teachings or may be acquired from practice of the invention. For example while series of acts have been described with regard to the order of the acts may differ in other implementations consistent with the present invention.

In the preceding description reassembler has been described as including a reassembly queue to facilitate the reassembly and resequencing of packets. In an alternate implementation consistent with the principles of the invention each of sub units may include an output memory such as a FIFO or a ring buffer and associate a packet finished state with each packet at the front of the output memory. In this case reassembler may track the ordering of first blocks of packets in the output memories. To accomplish this reassembler may maintain a list of sub units from which to take packets. Each sub unit may appear in the list more than once. Using this technique reassembler would track when packets started and ended but would not be concerned with the middle blocks of the packets.

Also certain portions of the invention have been described as logic that performs one or more functions. This logic may include hardware such as an application specific integrated circuit software or a combination of hardware and software.

No element act or instruction used in the description of the present application should be construed as critical or essential to the invention unless explicitly described as such. Also as used herein the article a is intended to include one or more items. Where only one item is intended the term one or similar language is used. The scope of the invention is defined by the claims and their equivalents.

