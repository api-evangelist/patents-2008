---

title: Multi-user, multi-timed collaborative annotation
abstract: A displayed document comprises an annotation widget, the widget associated with an annotation document and a corresponding annotation key in an annotation store. The annotation document associated with a workflow action program. A user with a predetermined privilege selects a widget and is presented with the annotation document. The user performs an annotation task modifying the annotation document and submits the annotation document to the annotation store, the submission triggering the workflow action program to progress the workflow to another step.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08839092&OS=08839092&RS=08839092
owner: International Business Machines Corporation
number: 08839092
owner_city: Armonk
owner_country: US
publication_date: 20081218
---
The present patent application is a continuation of U.S. patent application Ser. No. 10 983 820 now U.S. Pat. No. 7 472 341 which was filed on Nov. 8 2004 and commonly assigned herewith to International Business Machines which is hereby incorporated by reference in its entirety.

The present invention is related to computer software. It is more particularly related to GUI assisted Workflow process control.

This invention deals with the area of collaborative software. Collaborative software provides systems which aid multiple users in performing a task that requires the skills and attention of a plurality of people.

One type of collaborative software is an annotation system. An annotation system is one where descriptive information is stored about objects or parts of objects. An annotation store typically a database contains the descriptive information for the annotation and an indexing scheme is used to map each annotation to the object or the position within the object.

Annotation systems may store the annotations within the target document s data stream thus simplifying the tasks of discovery and retrieval of the annotations by the annotation system. Annotation systems which store annotations in that manner include the comments functionality of the MICROSOFT Office suite of products or the annotation markup feature of the Adobe Acrobat product.

Annotation systems may also store the annotations in a database independent of the target document s data stream thus simplifying advanced queries across all annotation data and allowing annotation of read only target documents. Annotation systems which store annotations in this manner include the IBM INSIGHTLINK product and the systems described in the disclosures both have been filed as patents already POU8 2003 0147 Recovery of Lost Annotations via Digital Fingerprinting and ROC8 2003 0446 Universal Annotation Management System .

Annotation systems are in high demand in Life Sciences and biotech but not limited solely to that domain.

Annotations systems are used to gather comments that is metadata about some target data. Many annotation systems simply present a simple text field for users to insert free form comments. More advanced annotation systems present the user with multiple fields so that the user creates a structured annotation. When annotations are structured the information becomes easier to index and query.

Today annotation systems are simply used in a simplistic model where users input information of interest into annotations for the benefit of users at a later time who find this extra information and make use of the annotation s recorded insight. Essentially users are asked to enter annotations for a possible benefit which will help a possible future user. That is the interaction model presented by current annotation systems. This model has multiple problems. Often users consider annotating a document a burden. The current annotation model does not help the user achieve any task directly and thus the user often perceives little value in putting forth the effort to annotate documents. If user s see direct benefit from annotations such as in the special case where the annotations are intended for the same user who is annotating as is taking notes upon a lecture then the user is more likely to annotate a document. Even when a user does annotate documents within the current annotation model the quality of the annotation suffers since the user cannot anticipate the future user that will read their annotations. This future user may be performing a very different task from the annotator. If the annotator had knowledge of the task and role of the future readers of his annotations in essence his audience the annotator could more effectively mark up the document. Thus there is a need for an annotation system which creates a new paradigm for annotations a system that gives immediate benefit to the annotator by helping to accomplish the user s task and a system where the annotator knows more about the audience for his annotations and can thus create more effective annotations.

U.S. Pat. No. 5 239 466 System for selectively routing and merging independent annotations to a document at remote locations Filed Oct. 4 1990 and incorporated herein by reference deals with using annotations as sticky notes to conduct communication over long physical distances. This is accomplished by allowing annotations containing pointers to original documents to be sent singularly or in groups and reassembled at the receiving end by a personal communicating computer. This patent does not deal with structured annotations and does not provide the well defined and structured multi user semantics that comprise the novel combination of target data independent annotation combined with workflow. Furthermore this invention only relates annotations together via a grouping mechanism. It does not allow for additional semantic workflow information to be associated within the system with a series of annotations or a single annotation over its lifetime on a target object.

U.S. Pat. No. 6 240 429 Using attached properties to provide document services Filed Aug. 31 1998 and incorporated herein by reference provides for associating key value properties with documents within a document management system. As such this invention requires that all data objects to which properties or code may be attached must exist within a document management system. This limitation exists because the properties and executable code are accessed via file operations such as read . This is a significant limitation because the properties and workflow information are part of data object.

Another type of collaborative software is workflow software. Workflow systems provide a way to automatically coordinate a task where different users accomplish individual portions of the task. A workflow system is a collaborative pipeline where a process flow with a number of steps is implemented and includes means for notification at each step that action should be taken by a particular actor actor could be a user or a program and on the completion of the step the next stage in the pipeline flow is invoked or informed. For example a workflow system might be configured to automatically coordinate the task of fulfilling a customer order placed by telephone. In such a case the workflow system might be configured to receive order or payment information from the telephone operator. The workflow system may then send a notification of pending work to the shipping department. Workflow systems typically show a personalized pending work list to each user. Once the item is shipped the shipping department marks their portion as complete in the workflow system and the system automatically sends a notification to the accounting department. This simple example illustrates how a workflow system can be configured with the steps in a specific task and the specific users involved in each portion of the task. The workflow system can then coordinate the execution of the task using notifications and task lists as the central interaction mechanisms. The limitations of the typical workflow software paradigm become apparent with tasks that are heavily based around data or a document. For example the task of evaluating a candidate for a new position. This task is heavily related to the job application or resume as the key target document. At each step in the workflow the document is referenced by the users. Typical workflow systems would separate the task from the document simply referencing the document as an attachment for reference by the users. This is in contrast to annotation systems which tightly couple the users comments and judgments with the document itself. Thus there exists room for an improved workflow system where annotation is a key paradigm to accomplish the tasks in the workflow.

The key problem in current art is that annotation systems ignore the idea of workflow and tasks while workflow systems ignore the idea of annotation as a useful model for collaboration. Our invention merges these two collaboration approaches to provide an improved collaboration system.

The present invention provides annotation widgets located on an image of an annotated target document. A user selects an annotation widget to perform a workflow annotation task. The user is presented with an annotation form. When the user submits the annotation form to the annotation store a workflow task is performed advancing the workflow to another workflow state.

It is therefore a goal of the invention to perform a Workflow Annotation task by retrieving a document from a document store. Then relating the document with one or more annotations in an annotation store the annotation store comprising annotations and annotation keys the one or more annotations related to the document by corresponding annotation keys. Then retrieving one or more annotations from the annotation store the annotations related to the document by the corresponding annotation keys the annotation widgets having corresponding annotation GUI widgets. Then displaying the document at a GUI interface the displayed document having the one or more annotation GUI widgets overlaying predetermined portions of the displayed document the one or more annotation GUI widgets comprising a first annotation widget. Then selecting the first widget by way of the GUI interface. Then responsive to selecting the first widget retrieving the first annotation document from an annotation store. Then displaying at the GUI interface the retrieved first annotation document the document comprising one or more fields. Then modifying by way of the GUI interface a first field of the one or more fields. Finally submitting the modified first annotation document to the annotation store the submitting step comprising the further step of performing a workflow action.

It is another object of the invention to provide a user with an application to allow the user to create the first annotation document. Then relate the first annotation document with the first annotation widget. Then create the corresponding annotation key the corresponding annotation key relating the first annotation document with the document. Then to associate a location of the document with the widget the location for displaying the first annotation widget. Then to save the first annotation document and the corresponding annotation key in the annotation store.

It is another goal of the invention to perform a workflow action whereby workflow action is any one of ending the work flow transforming the workflow to a next workflow step changing the appearance of the first annotation widget changing the location of the first annotation widget or informing another user of the workflow action.

It is another goal of the invention to customize the first annotation document for one or more user roles such that elements of the first annotation are displayed differently for a first user role than for a second user role.

It is another goal of the invention to provide an annotation document that comprises one or more annotation structures an annotation structure comprising a title field for prompting a user for annotation data the annotation document further comprising a data entry field for receiving user provided annotation data.

It is another goal of the invention to provide an annotation document that comprises one or more workflow notification annotation structures a workflow notification annotation structure comprising a workflow title field the workflow title field for prompting a user for a workflow action the workflow notification annotation structure further comprising a workflow notification program for performing a workflow notification action.

It is another goal of the invention to provide a workflow action that comprises the further step of sending a notification to responsible users the responsible users responsible for taking a next step in a workflow associated with the annotation.

It is another goal of the invention to provide notification that comprises any one of an email a phone message a text message an instant message a portion of the document or a portion of the annotation.

Additional features and advantages are realized through the techniques of the present invention. Other embodiments and aspects of the invention are described in detail herein and are considered a part of the claimed invention. For a better understanding of the invention with advantages and features refer to the description and to the drawings.

The detailed description explains the preferred embodiments of the invention together with advantages and features by way of example with reference to the drawings.

The system may communicate with other computers or networks of computers by way of a network adapter capable of communicating with a network . Example network adapters are communications channels token ring Ethernet or modems. Alternatively the workstation may communicate using a wireless interface such as a CDPD cellular digital packet data card. The workstation may be associated with such other computers in a Local Area Network LAN or a Wide Area Network WAN or the workstation can be a client in a client server arrangement with another computer etc. All of these configurations as well as the appropriate communications hardware and software are known in the art.

Still referring to the networks may also include mainframe computers or servers such as a gateway computer client server or application server remote server which may access a data repository . A gateway computer serves as a point of entry into each network . A gateway is needed when connecting one networking protocol to another. The gateway may be preferably coupled to another network the Internet for example by means of a communications link. The gateway may also be directly coupled to one or more workstations using a communications link. The gateway computer may be implemented utilizing an IBM ESERVER ZSERVER and 900 SERVER available from IBM.

Software programming code which embodies the present invention is typically accessed by the processor of the system from long term storage media such as a CD ROM drive or hard drive. The software programming code may be embodied on any of a variety of known media for use with a data processing system such as a diskette hard drive or CD ROM. The code may be distributed on such media or may be distributed to users from the memory or storage of one computer system over a network to other computer systems for use by users of such other systems.

Alternatively the programming code may be embodied in the memory and accessed by the processor using the processor bus. Such programming code includes an operating system which controls the function and interaction of the various computer components and one or more application programs. Program code is normally paged from dense storage media to high speed memory where it is available for processing by the processor . The techniques and methods for embodying software programming code in memory on physical media and or distributing software code via networks are well known and will not be further discussed herein.

In the preferred embodiment the present invention is implemented as one or more computer software programs . The implementation of the software of the present invention may operate on a user s workstation as one or more modules or applications also referred to as code subroutines or objects in object oriented programming which are invoked upon request. Alternatively the software may operate on a server in a network or in any device capable of executing the program code implementing the present invention. The logic implementing this invention may be integrated within the code of an application program or it may be implemented as one or more separate utility modules which are invoked by that application without deviating from the inventive concepts disclosed herein. The application may be executing in a Web environment where a Web server provides services in response to requests from a client connected through the Internet. In another embodiment the application may be executing in a corporate intranet or extranet or in any other network environment. Configurations for the environment include a client server network Peer to Peer networks wherein clients interact directly by performing both client and server function as well as a multi tier environment. These environments and configurations are well known in the art.

Our invention is an annotation system for annotating a diverse variety of documents including for example Text or Images wherein annotations can be collaboratively authored by multiple users at different times and from different machines. Also as the annotation is collaboratively authored different users may see different views of the annotation such as different data entry fields in the annotation according to their role or privileges. The annotation system also has the ability to notify users as appropriate that their attention to an annotation is required such as when they must perform their portion of the annotation authoring or that previously authored annotations have been changed. Our invention provides the ability to attach a workflow to arbitrary target data via an annotation. A traditional workflow system is typically a standalone program whereas annotation by definition is integrated with the data and so can easily enable workflow for all annotatable data without requiring a standalone workflow client program.

The present invention merges the traditional workflow software concepts of tasks and collaborative work on the same task together with the tradition annotation concepts of deep integration with a document and simple discovery and analysis. Previously annotations were thought of as a single observation by a single individual about object s and sub object s . However some processes benefit from a collection of different individual thoughts. Our invention provides an annotation system with such a benefit.

By combining the two ideas a new type of system is created in which workflow process can be automatically attached to any objects that can annotated without requiring that the object being annotated or actually be under the control of the workflow process. The presence of annotation is the vehicle for gathering the output of each stage of a workflow pipeline. Where this in particular is different from a regular workflow system is that any actor with permission to see the annotation can now participate in editing or simply viewing the results of a workflow process.

The annotation paradigm gives the user an improved view of the pending tasks and more importantly an improved association with the target data relevant to the workflow task. In a traditional form based workflow system the pending task list presented to the user is workflow centric. That means that the user interacts with the system mainly as a flat list of tasks. The user opens or starts a pending task to determine the data that is relevant to accomplishing the task. The annotation paradigm of our invention is not workflow centric or based around a flat list of pending tasks. The annotation paradigm of our invention presents a data centric interaction mechanism that is more suited to many types of problems. For example imagine a hypothetical application that is used by city real estate assessors. Every day a real estate assessor must travel to multiple properties to assess their value for property tax collection purposes. A traditional workflow system would present the user assessor with a flat list of properties to be assessed.

With the present invention each morning the assessor would open his map application and see a map of the city Reference . As he zooms into the area for which he is responsible he sees icons on the map over properties that need to be assessed. Those icons represent annotations and in our invention they are his pending tasks. By presenting the task list in a data centric manner the assessor is immediately able to easily prioritize and map an efficient route to perform the current day s property assessments. The fact that our invention attaches a workflow to arbitrary target data makes this functionality an inherent advantage of the system. Simply because the property was chosen as the target data for the annotation the assessor sees immediate advantages over the traditional workflow task list model.

One embodiment of the Annotation Workflow System consists of an Annotation Workflow Engine which communicates with a database to store annotations. The Annotation Workflow Engine is configured with the annotation layouts and specific workflow for each annotation. The Annotation Workflow Engine also communicates with a user directory for determining particular user s roles and privileges in the configured workflows. The Annotation Workflow Engine exposes the following set of operations to its clients 

The Annotation Workflow Engine can be implemented as a web service the user directory can be a standard Lightweight Directory Access Protocol LDAP server and the annotation database can be a standard relational database such as IBM s DB2 system. The clients that interact directly with the users and communicate on their behalf with the Annotation Workflow Engine can be written as plug ins into existing document viewer applications. For instance the MICROSOFT OFFICE suite of products from MICROSOFT CORPORATION provides an extensibility and integration application programming interface API to allow third parties to extend the functionality of the applications directly. The communication with the Annotation Workflow Engine and the presentation of annotations can be implemented as such a plug in.

The architecture described so far is consistent with the architecture for an annotation system described in IBM U.S. patent application Ser. No. 10 600 014 Universal Annotation Management System filed Jun. 20 2003 incorporated herein by reference. The main changes from that architecture is that the annotation engine has the added configuration information and functionality of interpreting configured workflows and taking the appropriate action at each step of the workflow such as pending work notifications.

The configuration of a workflow can be achieved together with the configuration of an annotation type. With every field that is added to annotation information about who is able to read and write each field is added along with constraints on the field being required or optional and other such restraints. Also with each field in the configuration for an annotation type a list of conditions and actions is defined. These conditions will be evaluated upon annotation submission by the Annotation Workflow Engine. The engine will perform the action described for any conditions that evaluate to a true value. Conditions and actions can even be described in languages such as JavaScript and Perl but need not be so generic. Conditions and actions can reference external data sources such as other databases and web services and can even modify annotations or other data sources when executed. However they need not be so elaborate especially for security reasons the actions should run in a limited or sandboxed environment. The conditions and actions can also be evaluated and performed either at the Annotation Workflow Engine or also at the client plug in application.

The following describes the implementation of a user interaction with the system from start to finish as the user opens a document to view the tasks presented in the form of annotations and completes the task. The embodiment of the described invention is illustrative of the elements of the invention.

The scenario is that of the assessor example described above. An assessor is assigned properties to assess via the workflow system. The assessor is a central step in the example workflow. The tasks have been assigned to him by a user in a prior step of the workflow such as the assessor s manager or supervisor by attaching an annotation icon to a map . After the assessor finishes each task the next step in the workflow is given a subsequent task in the workflow. For example the subsequent task after a property is assessed might be the responsibility of a tax collector to send a tax bill to the property owner.

The first step is the assessor starts the annotation enabled MICROSOFT MAPPOINT application to view his assigned tasks. The assessor sees a screen as shown in . The annotations represent the tasks. To provide this view a plugin component has been added to MICROSOFT MAPPOINT to communicate with a central annotation workflow server. Upon the user starting the MICROSOFT MAPPOINT application the application loads the annotation plugin in the form of a Component Object Model COM component contained in a Windows Dynamic Link Library DLL file and registered as a MAPPOINT plugin in the MICROSOFT MAPPOINT section of the Windows Registry. Once the annotation workflow plugin has been loaded by the MAPPOINT application the plugin queries the annotation workflow server for all annotations that apply to the assessor and the area being viewed by him. This query is accomplished as an HTTP request to the annotation workflow server at a well known address on the network. Typically the assessor would have previously configured the plugin with the network address of his company s deployed annotation workflow server. The HTTP request sent to the server includes information such as the particular document for which annotations should be retrieved as well as contextual information such as the particular user making the request and the application from which the request is being made. All of that information is then used by the annotation workflow engine as input parameters to create a Structured Query Language SQL query to a relational database store which contains the annotation and workflow information. The response to the HTTP request contains the resulting annotations that match those query parameters. In particular a unique identifier for each annotation along with information about where in the document the annotation applies is returned. The plugin then uses that information to render the icons appropriately on screen for the user to see.

Next the assessor chooses an annotation to edit. The assessor double clicks on one of the annotations displayed and an annotation editing GUI is presented by the plugin. To present this GUI the plugin communicates again with the annotation workflow server. It sends another HTTP request to the server including as a parameter within the HTTP request the unique annotation identifier of the user selected annotation. In response the server does another SQL query to retrieve the data inside the particular annotation as well as the schema to which the annotation data conforms. When the plugin receives this data which is formatted as an extensible Markup Language XML document the plugin uses an extensible Stylesheet Language XSL document to transform the annotation data and schema into a rendered presentable form. Specifically the XSL document converts the data and schema into a HyperText Markup Language HTML document which is presentable to the user using a web browser component such as MICROSOFT Internet Explorer. The annotation schema describes the annotations structure and includes information such as data entry fields and their types i.e. String field called Title Number field called ZipCode or Currency field called AssesedValue . The schema information can contain more advanced information also such as access control lists for fields i.e. Salary field is read only to everyone except user in the Managers group and information about the field being required or optional among other such information. The annotation data simply contains the actual values that exist for the fields described in the schema i.e. ZipCode field value is 02142 . The annotation workflow system can typically be configured to contain multiple annotation schemas to define different types of annotations. The particular schema that applies to an annotation is selected by the user upon creation of the annotation. After that the annotation s unique identifier is associated with its schema within the relational database employed by the annotation workflow server.

Once the annotation form is rendered via an embedded web browser component such as MICROSOFT Internet Explorer as described above the user is allowed to enter and edit the data of the annotation. The assessor in this case adds notes about the property as prescribed by the annotation form and enters the final assessment of the property s value into the annotation form. Once all of the data is entered the user clicks the submit button on the form to submit the annotation data. At this point the plugin gathers the entered and edited annotation data and formats it as parameters into another HTTP request sent to the annotation workflow server. When the server receives this request it inserts the new data into its relational database store keyed by the unique annotation identifier. It then queries its configuration information to determine the next workflow step associated with a submission of that annotation. The workflow steps are previously configured by a system administrator. Having found the next step in the workflow the annotation workflow server performs the required action which typically includes making the annotation available in the appropriate place for the next user in the workflow.

In the example above the plugin communicates via HTTP requests. That communication can be accomplished via multiple means including but not limited to WebServices via a number of different transport protocols and wire encodings or other distributed computing technologies such as the Component Object Request Broker Architecture CORBA or even simple sockets based custom TCP protocols.

The capabilities of the present invention can be implemented in software firmware hardware or some combination thereof.

As one example one or more aspects of the present invention can be included in an article of manufacture e.g. one or more computer program products having for instance computer usable media. The media has embodied therein for instance computer readable program code means for providing and facilitating the capabilities of the present invention. The article of manufacture can be included as a part of a computer system or sold separately.

Additionally at least one program storage device readable by a machine tangibly embodying at least one program of instructions executable by the machine to perform the capabilities of the present invention can be provided.

The flow diagrams depicted herein are just examples. There may be many variations to these diagrams or the steps or operations described therein without departing from the spirit of the invention. For instance the steps may be performed in a differing order or steps may be added deleted or modified. All of these variations are considered a part of the claimed invention.

While the preferred embodiment of the invention has been illustrated and described herein it is to be understood that the invention is not limited to the precise construction herein disclosed and the right is reserved to all changes and modifications coming within the scope of the invention as defined in the appended claims.

