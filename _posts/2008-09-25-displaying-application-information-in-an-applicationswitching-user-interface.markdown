---

title: Displaying application information in an application-switching user interface
abstract: An application status system is described herein that informs the user about application-specific status updates and notifications through a changing status icon associated with an application-switching user interface displayed by an operating system when the application is running. When an application has focus, there is typically no way for another application to display status to the user without displaying a dialog box or a notification balloon that interrupts the user. The application status system takes advantage of the existing application-switching user interface to display a lightweight status icon overlay on the application-switching user interface itself. Thus, the application status system allows applications to provide application-specific status updates without interrupting a user's activity in another application and without adding additional UI for a user to process.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08694920&OS=08694920&RS=08694920
owner: Microsoft Corporation
number: 08694920
owner_city: Redmond
owner_country: US
publication_date: 20080925
---
Users of computers today run many applications at the same time. For example a user may be actively working in a word processing application while also viewing related information in a spreadsheet application listening to music through a media player application staying in touch with others through an email application and an instant messaging application and so forth. Many of these applications have a changing status over time for which the applications alert the user. For example an instant message application may alert a user each time one of the user s contacts signs on. As another example an email application may alert a user each time the application receives a new email message.

Software applications have various ways of alerting a user to events and status changes. For example applications may display a dialog box make a beeping sound or use operating system provided facilities such as a system tray area for displaying icons displaying a balloon notification or flashing the application window. Each of these ways of alerting a user seeks to get the user s attention and notify the user that something has happened that may make the user want to transition from whatever activity the user is currently working on to address the event that caused the alert. Application developers design these events to be disruptive and the events may actually begin to annoy or distract the user and affect the user s productivity.

One problem with notifying the user in this way is that applications can overload the user with the quantity and variety of notifications that the user receives. For example a user may have a large number of status icons in his her system tray receive several dialog boxes per hour and so forth. The quantity of application notifications may lead the user to ignore the notifications run fewer applications or become less productive as the user spends more time staying aware of various applications status and less time performing productive tasks. Another problem is that the user does not know where to focus to get information about the application because the user may receive information in so many places. For example an application may have status information in the application UI in the system tray on the desktop such as through a separate dialog box window and on the taskbar.

An application status system is described herein that informs the user about application specific status updates and notifications through a changing status icon associated with an application switching user interface displayed by an operating system when the application is running. Most operating systems provide an application switching user interface UI such as a taskbar which allows users to switch between running applications. When an application has focus e.g. is actively being used by the user there is typically no way for another application to display status to the user without displaying a dialog box or a notification balloon that interrupts the user. The application status system takes advantage of the existing application switching user interface to display a lightweight status icon overlay on the application switching user interface itself. Thus the application status system allows applications to provide application specific status updates without interrupting a user s activity in another application and without adding additional UI for a user to process.

This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter nor is it intended to be used to limit the scope of the claimed subject matter.

An application status system is described herein that informs the user about application specific status updates and notifications through a changing status icon associated with an application switching user interface e.g. a taskbar displayed by an operating system when the application is running. The application status system provides the user with status information without interrupting the user with dialog boxes or otherwise being excessively intrusive. Most operating systems provide an application switching user interface UI such as a taskbar which allows users to switch between running applications. When an application has focus e.g. is actively being used by the user there is typically no way for another application to display status to the user without displaying a dialog box or a notification balloon that interrupts the user. The application status system takes advantage of the existing application switching user interface to display a lightweight status icon overlay on the application switching user interface itself e.g. a 16 16 icon overlay on the taskbar button for the application . For example an email application that receives a new email message can change the status icon to notify the user that a new message has arrived. As another example if a user sets his her messaging status to busy in an instant messaging application the application can display the busy status using the status icon. Thus the application status system allows applications to provide application specific status updates without interrupting a user s activity in another application and without adding additional UI for a user to process.

In some embodiments the application status system provides an overlay application programming interface API that applications can call to set a status icon e.g. a 16 16 overlay for the system to display e.g. in the bottom right hand corner of the application s taskbar button . For example Microsoft Windows provides an ITaskBarList3 interface to which the system can add a new API to allow an application to specify a status icon for a given window. When the taskbar renders a taskbar button if an icon is associated with the taskbar button then the taskbar draws the icon overlay on top of the usual application icon on the taskbar button. Following is an example API prototype for setting an application s overlay icon 

The application status system displays the status icon overlay in a taskbar button when a caller invokes the SetOverlayIcon API with the taskbar button s window handle e.g. HWND . An application may have multiple windows that have associated taskbar buttons and the window parameter handle allows the caller to specify which of the multiple windows on which to display the received status icon. The caller also provides a handle to a loaded icon e.g. HICON . The icon can come from a resource file associated with the application or another other storage location for icons. If the window handle passed by the caller has a corresponding taskbar button group then the system shows the overlay. If the caller passes a NULL icon handle then the system clears the status icon associated with the calling application.

The application interface includes a receive icon component and a notify application component . The application interface handles interactions with the application on behalf of the application status system . The receive icon component provides an API that the application calls to set and clear status icons for the application . For example the receive icon component may provide an API that the application can call with an icon to set the icon as the current status icon and can call without an icon to clear the status icon currently associated with the application . The notify application component notifies the application of relevant events to which the application may want to respond. For example the notify application component may notify the application when the operating system shell starts or restarts so that the application can provide a status icon for the shell to display in the user interface .

The user interface provides an interface for the user to switch between applications and view information about applications that are currently running. The user interface may display a taskbar start menu system tray and other operating system shell elements with which users and applications can interact. The user interface may display a taskbar button for each running application as well as the status icons described herein in an overlay over the taskbar button.

The item manager component manages each individual item that can be present in the user interface . For example each application or application window may have a corresponding item that is associated with a taskbar button or other user interface element in the user interface . The item manager component tracks which applications are associated with each element.

The display item component manages data associated with an item and performs the steps for displaying an item. For example the display item component may store the overlay icon currently set for an application the time the overlay icon was last set and so on. The display item component renders elements for display in the user interface such as by alpha blending an application main icon and title with the status icon as an overlay on the main icon.

The configuration component manages configuration of the application status system . For example the user may be able to configure whether the user interface groups application windows and if so how many application windows the user interface displays before the grouping occurs. The configuration component may also allow status icons to be turned on or off animation to be allowed or not and other preferences to be set.

In some embodiments the user interface component groups user interface elements associated with the same application. For example web browsers often display each web page that a user opens in a separate window where each window has an associated user interface element in the user interface . As another example word processing programs often display each document that a user opens in a separate window. The application status system includes a group manager and a display group component that manage the display of status icons for application groups. The group manager keeps track of each application window the system can potentially group. For example the group manager may store a group class instance in memory that contains a pointer to each application item within the group. The display group component manages displaying a status icon for the group. The display group component may determine which of several application status icons to display for grouped application windows that have multiple status icons. For example the display group component may access the timestamp associated with each item and display the most recently set overlay icon as the status icon for the whole group. These and other behaviors of the application status system are described further herein.

The computing device on which the system is implemented may include a central processing unit memory input devices e.g. keyboard and pointing devices output devices e.g. display devices and storage devices e.g. disk drives . The memory and storage devices are computer readable media that may be encoded with computer executable instructions that implement the system which means a computer readable medium that contains the instructions. In addition the data structures and message structures may be stored or transmitted via a data transmission medium such as a signal on a communication link. Various communication links may be used such as the Internet a local area network a wide area network a point to point dial up connection a cell phone network and so on.

Embodiments of the system may be implemented in various operating environments that include personal computers server computers handheld or laptop devices multiprocessor systems microprocessor based systems programmable consumer electronics digital cameras network PCs minicomputers mainframe computers distributed computing environments that include any of the above systems or devices and so on. The computer systems may be cell phones personal digital assistants smart phones personal computers programmable consumer electronics digital cameras and so on.

The system may be described in the general context of computer executable instructions such as program modules executed by one or more computers or other devices. Generally program modules include routines programs objects components data structures and so on that perform particular tasks or implement particular abstract data types. Typically the functionality of the program modules may be combined or distributed as desired in various embodiments.

The operating system shell includes classes for managing the display of the application switching user interface. In the example illustrated the operating system shell includes an instance of a CTaskBand class one or more instances of a CTaskGroup class one or more instances of a CTaskItem class an instance of a CTaskListWnd class and one or more instances of a CTaskBtnGroup class . The CTaskBand class manages the data and display of the application switching user interface. For example the CTaskBand class may store information about a window associated with the application switching user interface and pointers to each of the other class instances described. The CTaskGroup class manages data associated with a particular application and each of its windows that the user interface represents with an element e.g. a button in the application switching user interface. The CTaskItem class manages data associated with a particular application window. For example the CTaskItem class may store the queue of icons for an application and the time when the system received each one.

A single application may display many windows and the operating system shell may group them together or show them individually. For example Microsoft Internet Explorer may display a window for each web page that a user has open and Microsoft Windows Explorer may display a taskbar button for each window or group the windows into a single taskbar button e.g. when the count of windows exceeds a certain number . The CTaskListWnd class manages a window for displaying the application switching user interface. For example in Microsoft Windows the taskbar is a window e.g. displayed at the bottom of the screen and on top of other applications and applications are represented by buttons displayed within the window. The CTaskBtnGroup class manages the rendering of the individual application or group elements within the application switching user interface. The CTaskBtnGroup class gathers information from the CTaskGroup class and the CTaskItem class to determine what to display. For example for Microsoft Windows the CTaskBtnGroup class manages the portion of the taskbar that contains application buttons e.g. the area excluding the start menu and system tray .

In block the system provides the status icon to the application switching user interface window. For example the system may call PostMessage to send a TBC SETOVERLAYICON message to the taskbar passing the HWND and HICON received from the caller. The taskbar receives this call through the message pump of the window associated with the CTaskListWnd class instance described herein. The CTaskListWnd class instance locates the CTaskItem corresponding to the window and calls CTaskItem SetOverlayIcon . In decision block if the received icon handle is NULL then the system continues at block else the system continues at block . In block the application switching user interface stores a copy of the icon. For example CTaskItem SetOverlayIcon may make a copy of the icon handle and store it in a local variable.

In block the component stores a timestamp of the current time when the application called the API as a basis for selecting status icons later on. In block the component clears any currently stored status icon. In block the component redraws the item. For example the component may signal the user interface component to update the taskbar window. After block these steps conclude.

In decision block if the component successfully retrieved the icon then the component continues at block else the component continues at block . In decision block if the user has configured the application switching user interface to group items from the same application then the component continues at block else the component continues at block . In block the component selects an icon to display from each of the items associated with the application. For example the component may call CTaskItem GetOverlayIconTimestamp to get the timestamp for each status icon and select the icon handle belonging to the CTaskItem instance with the highest timestamp for the component to display. If there is only one CTaskItem instance in the group with an overlay icon then the system uses any icon associated with that instance. In block the component displays the selected icon as an overlay on the associated taskbar item. For example the component may paint the taskbar button and then paint the overlay icon on top of it or alpha blend the taskbar button and overlay icon. In decision block if there are more items then the component loops to block to process the next item else the component completes. After block these steps conclude.

In some embodiments the application status system prevents applications not associated with a taskbar button from modifying the status icon associated with the taskbar button. For example a malicious or erroneous application could try to modify another application s status icon. The system ignores calls to the overlay API that are not from a process associated with the taskbar button.

In some embodiments the application status system automatically unloads status icons associated with terminated applications. For example if an application terminates and fails to clear its status icon then the system may unload the icon to save system resources.

In some embodiments the application status system automatically selects a status icon when multiple windows or an application are grouped together on the taskbar. For example Microsoft Windows can be set to group windows of the same application into one taskbar button when an application is displaying more than a set number of windows e.g. four . Each of the application windows may expect to have its own taskbar button and may have set a status icon. The system may select one of the icons to display in association with a single group taskbar button displayed by the operating system. For example the application status system may select the most recently set status icon or the icon associated with the leftmost e.g. earliest created application window. If the application clears the selected icon then the application status system may select another status icon displayed by another application window to display in association with the group button.

In some embodiments the application status system queues status icons received from an application. The application pushes status icons to the system one at a time and the system stores each one in a queue. When the application has multiple windows that the system groups into a single taskbar button the system displays the most recent status icon pushed to the system by the application. Applications can clear status icons at any time. When an application clears a status icon the system displays the next most recent status icon. This allows applications to easily display a transient status and then revert to a long term status by clearing the transient status.

In some embodiments the application status system provides a message to applications to inform the applications that the operating system created the application switching user interface. This can occur at system startup when a new user logs on when the operating system shell restarts and so on. Applications may respond to the message by setting an initial status icon.

In some embodiments the application status system displays special types of icons. For example the application status system may receive an animated GIF icon from an application and display the icon animated in the application switching user interface.

In some embodiments the application status system throttles painting of the application switching user interface to avoid degrading system performance. For example the application status system may only refresh the application switching user interface 30 times per second since this is the highest amount that a typical user can perceive even though an application may supply a status icon update more frequently.

In some embodiments the application status system provides transitions between status icons as the application sets new status icons or the system displays other icons in the queue. For example the system may provide a fade out fade in effect when transitioning between icons or animate the icon in some way e.g. inflating the icon to attract attention to it. If the system is not currently displaying an overlay for an application and receives a call to display an overlay the system may fade in the overlay with a medium speed e.g. 500 800 ms . If the system is currently displaying an overlay and receives a call to clear the overlay the system may fade out the overlay with a medium speed e.g. 500 800 ms .

In some embodiments the application status system receives configuration information from a user that modifies the behavior of the system. For example the system may allow the user to turn off the display of the status icon such as if the user finds it annoying. As another example the system may allow the user to specify which applications can display a status icon how frequently the system updates the icon and other configuration settings.

In some embodiments the application status system makes the status icon clickable so that an application can display a menu or other additional information about the application. Icons in the system tray today are clickable and to encourage applications to use the taskbar overlay instead the application status system may provide similar functionality through the status icon.

From the foregoing it will be appreciated that specific embodiments of the application status system have been described herein for purposes of illustration but that various modifications may be made without deviating from the spirit and scope of the invention. For example the system can be used with many operating systems and status display user interface paradigms. As an example the status icon could be displayed in place of the main application icon in the taskbar on the application window or in other locations. Accordingly the invention is not limited except as by the appended claims.

