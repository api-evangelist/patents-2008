---

title: Browser-based user interface and control architecture with priority attributes
abstract: A browser-enabled device includes a browser-based user interface and control architecture, which has a browser core, a browser framework, and a user interface. The user interface is written using a markup language. In processing event registrations, the browser framework receives an event registration. The received event registration having a response unique resource identifier (URI) content and a priority field. The priority field of the received event registration is examined to determine priority of the received event registration. If the browser core is loading the response URI content of a prior event registration and if the priority of the received event registration is higher than the priority of the prior event registration, then the loading of the response URI content of the prior event registration is halted, and loading of the response URI content of the received event registration is begun.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08458728&OS=08458728&RS=08458728
owner: Access Co., Ltd.
number: 08458728
owner_city: Tokyo
owner_country: JP
publication_date: 20081218
---
This application is a 35 U.S.C. 371 National Stage filing of International Patent Application No. PCT US2008 087543 filed Dec. 18 2008 which is a continuation in part of U.S. Nonprovisional Patent Application No. 12 004 663 filed Dec. 20 2007 both of which are hereby incorporated by reference for all purposes.

The present application generally relates to browser enabled devices and more particularly to browser enabled devices having browser based user interface and control architectures with priority attributes.

An ever increasing number of electronic devices e.g. mobile phones handhelds home appliances set top boxes etc. include browser software. In some of these browser enabled devices the user interface and control architecture is implemented using the browser software i.e. a browser based interface and control architecture rather than a full function operating system O S .

The user interface portion of the browser based interface and control architecture can be written using a markup language e.g. hypertext markup language HTML Javascript etc. which can be faster to write and more flexible than if written using C C as an example. However markup languages typically do not support prioritization of events.

For example if a mobile phone has a browser based interface and control architecture and the user interface portion is written using HTML then the browser based interface and control architecture may not be able to interrupt an event that is currently being performed e.g. the downloading of a page to perform an event with a higher priority e.g. an incoming call . Thus in this example the user of the mobile phone may not be informed about the incoming call until the downloading of the page is completed. This may result in the incoming call going unanswered which may be undesirable.

With regard to mobile phones that support both telephony and browsing functions one conventional approach to allowing for an incoming call to halt the downloading of a page is to perform the telephony and browsing functions on separate threads one thread for telephony functions and another thread for browsing functions . This running multiple threads requires the use of a full function OS. It may be undesirable however to use a full function OS in some circumstances. For example it may be desirable for a browser enabled device to use a less powerful processor and less memory than are typically required to support a full function OS. Additionally it may be desirable to run only a single thread because of simplified programming model.

In one exemplary embodiment a browser enabled device includes a browser based user interface and control architecture which has a browser core a browser framework and a user interface. The user interface is written using a markup language. In processing event registrations the browser framework receives an event registration. The received event registration having a response unique resource identifier URI content and a priority field. The priority field of the received event registration is examined to determine priority of the received event registration. If the browser core is loading the response URI content of a prior event registration and if the priority of the received event registration is higher than the priority of the prior event registration then the loading of the response URI content of the prior event registration is halted and loading of the response URI content of the received event registration is begun.

The following description sets forth numerous specific configurations parameters and the like. It should be recognized however that such description is not intended as a limitation on the scope of the present invention but is instead provided as a description of exemplary embodiments.

As depicted in browser enabled device can include a processor memory output device and input device . Processor can be configured to perform the steps of the processes described below. Memory can include various types of memories including ROM RAM flash etc. Output device can include a display to provide output to a user. Input device can include buttons a full keyboard and the like to receive input from the user. It should be recognized that output device and input device can be integrated. For example a touch screen can be used both as an output device and as an input device.

It should be recognized that browser enabled device can include any number of additional components depending on the functions supported on browser enabled device . For example returning to the example of browser enabled device being a mobile phone additional components of browser enabled device can include various telephony components such as a speaker and microphone to support the telephony functions.

As described above browser enabled device can include a user interface and control architecture that is implemented using browser software i.e. a browser based user interface and control architecture . depicts an exemplary browser based user interface and control architecture . Browser based user interface and control architecture can be stored in memory and executed by processor . Browser based user interface and control architecture can receive input from a user through input device and provide output to a user through output device .

In the present exemplary embodiment browser based user interface and control architecture includes an OS kernel a browser core a browser framework and a user interface . It should be recognized that browser based user interface and control architecture can include any number of additional components.

OS kernel and browser core can be written in any desirable device native code. As described above user interface however can be written using a markup language such as HTML Javascript etc. For information on a markup language based man machine interface see U.S. Pat. No. 6 173 316 which is incorporated herein by reference in its entirety for all purposes.

In the present exemplary embodiment OS kernel is not a full function OS. Thus OS kernel possesses limited capabilities in comparison to a full function OS. For example OS kernel is capable of running only a single thread in contrast to a full function OS that can run multiple threads. The limited capabilities of OS kernel permit browser enabled device to operate with a less powerful processor and less memory than if a full function OS was used. Additionally it may be desirable to run only a single thread because of simplified programming model. OS kernel however does possess at a minimum input and output functions a file system and network capabilities.

Browser core can include extensions or plug ins to map native OS commands to the markup language used to write user interface of browser based user interface and control architecture . Browser framework controls the event loops and calls on browser core periodically to process incoming events. The source code for user interface can be stored as a file on browser enabled device online or generated in by or on a web server.

In the present exemplary embodiment browser based user interface and control architecture is configured to have priority attributes i.e. events are handled using a priority based system . In particular as depicted in browser framework includes an application programming interface API to register events. The events are registered with a priority level and uniform resource identifier URI which can include a uniform resource location and or uniform resource name URL URN to load responses to the events.

For example an exemplary event registration is depicted below for an event EventType evt with a priority field UInt priority and URI field String uri 

It should also be recognized that the event registration can include any number of additional fields and or parameters. For example the following exemplary event registration includes a timeout parameter UInt timeout 

If an event is triggered browser framework calls on browser core to load the response URI content of the event. If a subsequent event is triggered while the response URI content of an earlier event is still being loaded then browser framework checks the priority levels of the two events. If the subsequent event has a higher priority than the earlier event then browser framework calls on browser core to halt the loading of the response URI content of the earlier event and start to load the response URI content of the subsequent event. If the subsequent event does not have a higher priority than the earlier event then the URI content of the earlier event will continue to load.

For example depicts an event A that has been triggered which causes the URI content of event A to load browser progress loops n . Before loading is completed event B triggers. The browser framework checks the priority levels of events A and B. If event B has a higher priority than event A then the browser framework calls on the browser core to halt the loading of the response URI content of event A browser progress loop n 1 and start to load the response URI content of event B browser progress loops and . If event B does not have a higher priority than event A then the URI content of event A will continue to load.

In step an event registration is received by the browser framework. As noted above the event registration includes a priority field. In step the priority field in the event registration is examined by the browser framework.

In step the browser framework determines if the browser core is processing another event. If there is no other event being processed then the current event is processed on the browser core in step . If there is another event being processed the browser framework determines the priority of the event being processed in step .

In step the browser framework compares the priority of the current event to the priority of the event being processed. If the priority of the current event is higher than the priority of the event being processed then the current event is processed in step . In particular the browser framework directs the browser core to halt the loading of the response URI content of the event being processed and begin to load the response URI content of the current event. If the priority of the current event is not higher i.e. lower or the same than the priority of the event being processed then the event being processed continues to be processed in step .

In one exemplary embodiment the various events to be processed by the browser core are assigned priorities in advance. In particular all events to be processed by the browser core are defined in advance such as when the browser framework is being written. Priorities are then assigned to the events. The assignment of priorities to events can be stored in various formats such as a table.

For example assume again that browser enabled device is a mobile phone having telephony functions in addition to browsing functions. It is desirable for all browsing activity to be ceased when an incoming call is received. Thus an incoming call event can be assigned the highest priority e.g. priority 1 while all browsing related events are assigned a lesser priority e.g. priority 2 and below .

In one exemplary embodiment event registrations can be queued before being processed. The browser framework processes the event registrations from the queue based on their priorities. In particular the event priority in the queue with the highest priority is the first event priority to be processed from the queue. The queue can be stored in memory or any other desirable location. It should be recognized that the queue can be managed according to various known techniques.

As described above with reference again to when a subsequent event has a higher priority than an earlier event browser framework calls on browser core to halt the loading of the response URI content of the earlier event and start to load the response URI content of the subsequent event with the higher priority. It should be recognized that browser core need not be then dedicated to the subsequent event. Instead browser core can switch between the two events.

For example assume that the two events relate to two web pages. In particular assume that the earlier event relates to web page A while the subsequent event relates to web page B. As is well known browser core can load multiple web pages simultaneously such as by alternating between loading portions of the multiple web pages.

Thus in the present example after halting the loading of the response URI content of web page A browser core can begin the loading of the response URI content of web page B. After beginning the loading of the response URI content of web page B browser core can then return to loading the response URI content of web page A. This process of switching between the loading of the response URI contents of web pages A and B can continue until the response URI content of web page B has been completely loaded. In one exemplary embodiment browser core devotes longer time for loading of the higher priority event than the lower priority event. Web page B is then displayed on browser enabled device such as on output device .

In the example above if web page A has already been loaded and is being displayed on browser enabled device then browser core can load the response URI content of web page B in the background. When the response URI content of web page B has been completely loaded browser enabled device switches from displaying web page A to displaying web page B.

Although only certain exemplary embodiments of this invention have been described in detail above those skilled in the art will readily appreciate that many modifications are possible in the exemplary embodiments without materially departing from the novel teachings and advantages of this invention. For example aspects of embodiments disclosed above can be combined in other combinations to form additional embodiments. Accordingly all such modifications are intended to be included within the scope of this invention.

