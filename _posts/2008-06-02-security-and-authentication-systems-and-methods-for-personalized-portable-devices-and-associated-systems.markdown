---

title: Security and authentication systems and methods for personalized portable devices and associated systems
abstract: Systems and methods for client authentication and verification in a distributed client-server system are described. An authentication and verification system may include a plurality of client devices containing private keys, a first server configured to interface with the plurality of client devices, and a second, secure server configured to interface with the first server and store public keys associated with the private keys on the client devices. A method is further described for verifying client devices in conjunction with the first and second servers. The first server may contain secure tokens that can be decrypted in conjunction with the authentication and verification method.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08583915&OS=08583915&RS=08583915
owner: BBY Solutions, Inc.
number: 08583915
owner_city: Richfield
owner_country: US
publication_date: 20080602
---
This application claims priority under 35 U.S.C. 119 e to U.S. Provisional Patent Application Ser. No. 60 941 252 entitled SECURITY AND AUTHENTICATION SYSTEMS AND METHODS FOR PERSONALIZED PORTABLE DEVICES AND ASSOCIATED SYSTEMS filed on May 31 2007 the contents of which are incorporated by reference herein for all purposes.

The present invention is related generally to user authentication in a client server system. More particularly but not exclusively the present invention relates to security and authentication systems and methods that can be implemented on a system comprised of a set of personalized audiovisual devices in Internet based communication with a service provider.

It is well known that broadband Internet connectivity is becoming substantially more pervasive among consumers as a result of competition among service providers utilizing various different technologies e.g. cable digital subscriber line DSL satellite . In many households personal computers PCs constitute the primary users of the bandwidth furnished by these broadband connections. In order to facilitate sharing of the Internet connection among PCs in a given household a variety of wired and wireless home networking technologies have been utilized.

As a result of the impracticality of installing Ethernet cable throughout a residence RF based wireless networking technology is becoming increasingly commonplace among consumers. Although systems based upon the 802.11b or Wi Fi wireless networking standard may currently be the most pervasive versions of the 802.11 standard offering increased bandwidth have been introduced and yet higher bandwidth approaches have been proposed.

The increased bandwidth available within the home has increased the usage of a number of different services such as Internet based delivery of digital audio video and graphic content. However since many of these services are facilitated by a desktop or notebook PC capable of communication over a broadband Internet connection users are forced to remain proximate to their respective computers in order to utilize such services. Although other strategies to leverage the availability of broadband Internet connectivity within the home are currently being developed many of these approaches involve creation of a relatively powerful costly centralized communications hub e.g. a PC with enhanced media capabilities or a multi purpose cable set top box . Unfortunately this typically requires either the purchase of an expensive hardware device or extended subscription plan and constrains the extent to which Internet enabled entertainment or other services are enjoyed outside of the immediate vicinity of the centralized hub device.

As use of these portable networked devices proliferates the portable devices and their associated networked systems will likely be subject to a variety of security attacks. It will be desirable to provide device security to prevent intrusion malicious attacks store and protect privacy and other personal information as well as allow a user to easily authenticate him or herself to a networked system. Accordingly the widespread availability of broadband networks creates an opportunity for networking of personal devices wherein security systems and methods are implemented to provide ease of access and use of the devices within an open architecture as well as providing for storage and protection of users private information as well as protecting portable devices and associated systems from other forms of malicious attacks.

In one aspect the present invention relates to an authentication system comprising a first server including a first processor readable medium which stores a plurality of public keys matched with corresponding private keys stored on a plurality of client devices a first server private key matched to a public key stored on the client devices and a second server configured to store client device information and electronically communicate with the first server and client devices.

In another aspect the present invention relates to a client device for use in an authentication system including a first processor and a processor readable medium storing a putative ID PID associated with the client device a private key matched to a public key stored on a first server a public key matched to a corresponding private key stored on the first server and an owner key associated with a storage token stored on a second server.

In another aspect the present invention relates to a method of authentication including receiving at a first server an authentication request including a PID associated with the device comparing the PID with a plurality of PIDs stored on the first server sending a reply request in response to the comparison to the client device receiving at the first server a reply message including information signed by a private key stored on the client device the information including an owner key OK and verifying the signed information using a public key stored on the first server the public key being matched to the private key stored on the client device.

In another aspect the present invention relates to a method of authentication of a client device including generating an authentication request at the device including a PID sending the request to a second server receiving a reply request from the second server including a first random number generated by a first server electronically connected to the second server generating a reply message including signed and unsigned information the signed information signed using a private key stored on the client device and matched to a public key stored on the first server and sending the reply message to the second server wherein the message is then forwarded to the first server for verification.

Additional aspects of the present invention are described and illustrated in the following detailed description and associated figures.

The present invention generally relates to security and authentication systems and methods that can be implemented on a system comprised of a set of personalized audiovisual devices in Internet based communication with a service provider as is further described herein. It is anticipated that the personalized audiovisual devices will be commercially distributed under the trademark Chumby and may also be referred to herein as Chumby devices and or portable devices. Likewise associated networking systems servers may be referred to as the Chumby system server or the portable system server respectively. Associated Chumby services may also be provided through a Chumby service provider also denoted herein as a service provider. In a typical system in accordance with the present invention a Chumby device communicates with a service provider. During communication with the service provider each Chumby device periodically receives a set of application programs or widgets which are sequentially executed by the Chumby device after being received from the service provider or locally from a personal computer e.g. via a USB connection . Since each Chumby device is typically Internet enabled each may also be remotely configured and otherwise personalized via the Chumby service provider through a Web browser executed by a remote terminal e.g. a PC or wireless handset . Such personalization may include for example specifying the set of widgets provided to a given Chumby device as well as their sequence and priority of execution.

As is described hereinafter it is a feature of embodiments of the invention that a user configuring a Chumby device via an interface provided by the Chumby service provider may drag and drop icons representative of various widgets onto a rectangular or other portion of the interface representative of the screen of the Chumby device being configured. In this way the layout of the screen of the Chumby device may be remotely configured by the owner of the device. Although each Chumby device will preferably be capable of being configured in this manner in certain embodiments each may also come loaded with a default set of widgets e.g. an alarm clock widget disposed to be executed by the Chumby device upon its registration with the Chumby service provider. Once a Chumby device has been configured i.e. with either a default or user specified configuration it will generally execute the widgets defined by the configuration without user intervention.

The configuration of a Chumby device may also specify the events or conditions under which the sequence of execution of widgets is to be altered or interrupted and allows certain widgets to be accorded the highest available priority with respect to execution. For example an alarm clock widget could be granted such priority in order to ensure that its alarm function would not be prevented from being actuated at the scheduled time due to contemporaneous execution of another widget. In one embodiment the Web interface provided by the Chumby service provider is in the form of a timeline enabling the sequence of execution of the widgets associated with a given Chumby device to be controlled in an intuitive manner. In an exemplary implementation the timeline defines the order in which the widgets are to be played in a constantly repeating sequence that is the timeline is representative of the complete set of widgets played by a given Chumby device as well as their relative order of execution. However certain widgets e.g. the alarm clock widget can be specified to be actuated at a given time by appropriately setting the applicable configuration element of such widgets.

Although in exemplary embodiments it is not contemplated that more than a single content related widget be operative at any given time a system configuration widget may be utilized to run concurrently with each such content related widget in order to for example control the relative priority of execution of such content related widgets and system settings such as loudness brightness navigation and the like.

In one embodiment Chumby devices are each capable of wireless communication in accordance with an accepted wireless networking standard such as the 802.11b or 802.11g standard. Accordingly in homes or other environments containing one or more wireless access points multiple Chumby devices may be distributed throughout the coverage area of the access points.

Among the features of embodiments of the invention is the capability of the interface presented by each Chumby device to change in accordance with the nature of the widget currently being executed by the device. For example a clock radio widget could be employed to produce audio and visual imagery consistent with a conventional alarm clock at an appointed time in the morning. In exemplary embodiments the clock radio widget would allow for the selection of a standard wake up chime or choice of several different audio programs. Later in the day the device interface could be devoted to a rotating selection of several standard information screens such as news headlines local weather sports scores stock market updates horoscope and the like.

In accordance with another aspect of the invention users of Chumby devices may optionally participate in a Chumby Network along with other users by logging on to a Web site e.g. www.chumby.com hosted by the Chumby service provider. At this site also referred to hereinafter as the Chumby site a user will be able to register with the Chumby Network and access services enabling the basic capabilities of the user s Chumby device to be enhanced and refined. Such enhancements may comprise for example the opportunity to send receive widgets and other content to from other Chumby users for improved personalization of the device s generic information features more detailed alarm setting capabilities and better selection and configuration of audio capabilities.

Registration with the Chumby Network which would potentially require payment of a periodic subscription fee enables members of the Network to access a wide array of additional widgets. It is contemplated that certain of such widgets would be developed by the entity operating the Chumby Network while other widgets would be developed by independent developers. In addition members of the Chumby Network would also be able to communicate with the Chumby devices of other members provided that permission for such communication has been authorized by the other members. Such communication could entail for example the sending of a widget and corresponding data from the Chumby service provider to a member of the Chumby Network the receiving member in response to a request sent to the Chumby service provider by another member the sending member . For example a sending member could after receiving permission from a receiving member request the Chumby service provider to send a photo viewer widget to the receiving member. In addition the sending member could specify that a link be established between the photo viewer widget and pictures uploaded by the sending member to the Chumby service provider. In this way the receiving member could without any effort other than providing authorization to the sending member enable their Chumby device to essentially automatically receive and display a sequence of photos provided by the sending member. Similarly while traveling a sending member could send a personalized wake up message to the Chumby device of a consenting receiving member. Finally a sending member could send widgets to a group of receiving members included on a buddy list of the sending member which could be established after the receipt of suitable permissions from those proposed to be included on the list.

In an exemplary embodiment members of the Chumby Network are enabled to completely configure through any Web browser their respective Chumby devices by specifying a set of premium widget programs or content to play or be shown rotationally or in some other user defined sequence on their respective Chumby devices. Such premium widgets and content may include for example webcam shots RSS readers filtered news reports personalized stock performance data short animations or movies podcasts or audio files to function as the audio sources for alarms or reminders scheduled to be triggered at different times throughout the day.

As is discussed further below one exemplary implementation of a Chumby device is comprised of a malleable housing attached to a rigid core structure supporting a display screen and the electrical components of the device. The malleable housing would generally encompass all of the electrical components of the Chumby device and will preferably be filled with an appropriate material or otherwise constructed to enable it to be squeezed or otherwise deformed by a user. Moreover the core structure is designed to be capable of being removed from the housing and snapped in to a different housing. A set of bend sensors are enclosed by the malleable housing in order to permit the detection of such a squeezing or similar action by a user. In this way a user is afforded the opportunity of conveying information through physical deformation of the Chumby device in addition to the more conventional textual and other modes of communication facilitated by the display screen. For example in one exemplary system a user could initiate the conveying of a hug to another user by squeezing the housing of the user s Chumby device in a particular manner. The electrical signals generated by the sensor array in response to this squeeze would be appropriately interpreted and the user s Chumby device would communicate via the Chumby service provider a hug message to the intended recipient user. At this point the recipient s Chumby device could register receipt of the hug message by for example illuminating an indicator light or sending a message to the display of the device.

In certain embodiments a Chumby device may include hardware software or both for use in detecting and tracking device location and relative position as well as for tracking physical contacts with the device and for detecting and tracking motion. In one exemplary embodiment a Chumby device may include an accelerometer and related hardware and software to implement a variety of motion related functions including motion detection position identification and tracking gesture recognition and user contact such as by squeezing or squishing the device.

In some embodiments a Chumby device may be configured and operative to interface to one or more virtual worlds such as the virtual world known as Second Life accessible at http www.secondlife.com. Features of such an interface may include but are not limited to display of content from the virtual world on a Chumby device interaction through a Chumby device with other users and features of the virtual world display and interaction with avatars on the Chumby device and in the virtual world monitoring of virtual world activities and other features and functions.

In some embodiments of a Chumby device and system security and authentication systems and methods may be provided to provide protection of the user s privacy and security and protect against malicious attacks. Because a networked device may inherently be a part of an open architecture it may become vulnerable to a wide range of security breaches or delivery of undesirable and unwanted content. Problems such as spam phishing trojan horse attacks and a wide variety of other problems may impact the device render it unusable or cause loss of a user s private information. Consequently it may be desirable to employ one or more authentication and security measures such as are described herein to provide protection against these as well as other types of attacks. In embodiments as described in further detail in subsequent sections systems and methods to implement configure and employ security protection are described. In some embodiments security systems and methods are provided to maintain an open architecture wherein secrets are not hidden from a user and or users are not restricted from repurposing their portable device for applications unrelated to primary services such as those described herein.

Referring again to the system also includes a plurality of user computers disposed for communication with the service provider via an access network not shown and the Internet . Each user computer executes a Web browser capable of displaying Web pages generated by the service provider through which a user may configure one or more Chumby personal audiovisual devices . As mentioned above such configuration may include for example specifying a set of widgets to be sent to a particular device and their sequence of execution adjusting audio or visual parameters relating to such execution defining and managing a user s Chumby network including for example defining a buddy list comprised of other Chumby users with respect to which the device is permitted to communicate and defining the layout or other aspects of the user interface presented through the screen of the device . To this end a given Web browser may when in communication with the service provider present a rectangular configuration window corresponding to the display screen of a corresponding Chumby device . By dragging and dropping iconic representations of widgets or content files into such a configuration window a user may personalize the behavior and user interface presented by the corresponding Chumby device . Moreover users may access the service provider via a Web browser for the purpose of sending widgets or other information to other users for execution or display by their respective Chumby devices . In one embodiment the service provider maintains a record of the permissions granted among users of Chumby devices in order to determine which users are authorized to provide via the service provider a given user with widgets messages or other information and vice versa. Such permissions may be granted or withdrawn by a given user via appropriate pages presented by a Web browser in communication with the service provider .

In the exemplary embodiment a configuration window may be utilized to configure one or more Chumby devices consistent with the permissions granted by the users of such devices . In addition a user of a given Chumby device may elect to have the interface of the device mirror or otherwise replicate that of another device subject to the requisite permissions being granted. Similarly one or more Chumby devices may be configured to mirror the interface for a virtual Chumby device or vice versa defined via a configuration window.

Different users of a given Chumby device may be accorded different roles or privileges in configuring the device . For example a user granted supervisory privileges could be given the authority to filter or monitor the widgets or content sent to the Chumby device . This would enable for example parents to manage and or monitor the widgets and content executed and displayed by the one or more Chumby devices used by their children. Moreover administrators of the system would typically possess an elevated level of privilege relative to users of Chumby devices within the system . Also if a specific widget performs functions requiring communication with a web site controlled by a third party in order to access content the developer of the widget may create a hierarchical user model to regulate such access and perhaps the functions of the widget .

Attention is now directed to which illustrates an exemplary distribution of Chumby devices throughout a residence or other building having a number of rooms . In the embodiment of each Chumby device is equipped with wireless transceiver e.g. a Wi Fi transceiver to facilitate communication with one or more access points . Each access point is interconnected with an access network by way of for example a local area network thereby enabling Internet based communication to be established between the service provider and the devices within the residence .

Turning now to a block diagrammatic representation is provided of the principal components of an embodiment of a Chumby device of the present invention. As shown the device includes a central processing unit CPU memory including volatile e.g. SDRAM and non volatile memory e.g. flash memory an audio interface a wireless communications interface and a sensor interface . In an exemplary implementation the CPU comprises a microprocessor e.g. based upon an ARM core configured to run a Linux kernel and having attendant capabilities for graphics rendering. The device may or may not include a battery backup unit which serves to preserve real time information in the event of a power outage and may also serve as a primary power source if the user desires untethered operation. The battery may or may not be rechargeable. The operating system is made aware of the power status and actively configures the Chumby device and the running widget to either save power or modify the user interface consistent with untethered operation.

The device may or may not include a Security Module not shown If included the Security Module serves to store secrets and compute authentication algorithms in a fashion that fully isolates core security routines from otherwise unsecured code running on CPU . The secret storage and authentication capability may or may not be used by the client server communication protocol to enable authenticated and encrypted communication capabilities for among other things financial transactions. The Security Module is initialized in such a way that there is no default mapping of the secrets contained within the module versus the identity of the hardware of the user. Furthermore the secrets are revocable and a routine exists for generating new secrets based upon a master secret that is never associated with a specific user s profile. This enables opt in policies for privacy and a limited ability to revoke identity information barring forensic network analysis thereby enabling anonymity as well. The anonymous trust network can be extended with a variety of client server protocols to enable a wide range of anonymous transactions including but not limited to cash and content transactions.

As shown software comprising widgets or other applications received from the service provider are stored in memory and loaded into SDRAM or non volatile memory for execution by the CPU . In one embodiment widgets are downloaded from the service provider to Chumby devices in the format of a Macromedia Flash file also referred to as a Flash movie . As is known by those skilled in the art Flash movies are usually accorded a .swf file extension and may be played by a Flash Player developed and distributed by Adobe Systems. Accordingly the memory also includes a Flash Player as well as a copy of the operating system executed by the CPU . In other embodiments widgets may be developed in accordance with other formats and played by players compatible with such other formats.

The Chumby device also includes a liquid crystal display LCD controlled by an LCD controller which may or may not be integrated into the CPU . The display visually renders iconic representations of the widget programs stored within the Chumby device and images generated in connection with the execution of such widgets by the CPU . In an exemplary implementation a touchscreen overlays the LCD and is responsive to a touchscreen controller . In one embodiment a user may induce the Chumby device to enter a user interface mode or U.I. mode by touching the touchscreen . When this occurs the touchscreen controller informs the CPU which then instructs the LCD to enter U.I. mode and display representations of arrows buttons and or icons selectable by the user via the touchscreen . As is discussed below selection of one or more of these elements during operation in the U.I. mode enables the user to control various aspects of the operation of the Chumby device. In alternate implementations the LCD and touchscreen may comprise an integral device controlled by an integrated controller.

Turning to there is shown an exemplary user interface generated by the LCD during operation of the Chumby device in U.I. mode. As shown the interface defines an address book icon a heart shaped icon a right arrow button a left arrow button and an exit U.I. mode icon . Selection of the address book icon brings up a personalized list of other users of Chumby devices to which it may be desired to send widgets or otherwise communicate. A user may from any Web browser access a Web page generated by the service provider and designate a favorite widget. Alternatively a user may press a virtual touchscreen based button on his or her Chumby device to designate the current widget as the new favorite widget. When the user then selects the heart shaped icon on his or her Chumby device an iconic representation of this favorite widget e.g. a clock widget replaces the heart shaped icon and enables the user to immediately activate i.e. cause the CPU to execute the program instructions corresponding to such favorite widget. Alternatively selection of the heart shaped icon or other predefined icon results in the Chumby device becoming configured in accordance with a favorite or other profile rather than executing a favorite widget. Of course certain profiles may be specified to include only a single widget such as for example an alarm clock or photo viewer widget.

Referring again to selection of the right arrow button advances one widget in a user defined or default widget sequence or just skips ahead in implementations in which widgets are chosen to be displayed randomly. Similarly selection of the left arrow button results in going back one widget in the user defined or default widget sequence. As the buttons and are selected an iconic representation or avatar corresponding to the currently active widget is displayed in a display box . If it is desired to configure the currently active widget the exit U.I. mode icon is selected and the U.I. mode interface changes to a screen though which the user may adjust parameters of the active widget e.g. set time or alarm in the case of an active clock widget .

In certain embodiments a physical button element not shown may be provided proximate the LCD screen to enable navigation through menus and the like presented by the LCD screen . In one implementation this button element is cross shaped in order to facilitate two dimensional navigation and may further include a smaller dedicated button e.g. in the center of the cross associated with a specific widget e.g. clock widget . Pressing this dedicated widget would interrupt the operation of all other widgets.

In implementations in which two dimensional navigation through the user interface of the Chumby device is supported users may be provided with the ability to navigate forward and back in the configured widget timeline. Similarly users may navigate up and down a stack of related widgets. This function depends on the implementation of the concept of widget categories i.e. associating widgets into logical categories that can be displayed sequentially if configured to be displayed. An example of a category could be News . Widgets included within this category could include for example a local news widget a sports news widget an entertainment news widget a business news widget and the like. For each category there would be a default widget which is designated by the user on the Chumby web site for each category selected to be displayed by the user s Chumby device.

If more than one widget in a category is selected then the widgets are conceptually stacked with the default widget being 

If a widget for a given category e.g. News is displayed and there exist additional widgets in the category which are also configured for display then in the exemplary embodiment these additional widgets are stacked below the displayed widget. In this case the user may take some predefined action with respect to the user s Chumby device e.g. perhaps selecting a control on the touchscreen or accessing a function via the control panel which is instantiated via actuating the bend sensor in order to cause the next widget in the stack for that category to be displayed. The Chumby device may be configured such that taking further predefined actions of the same type will cause the widgets either above or below in the stack to be displayed as designated by the user. The last widget that is displayed in the stack for the applicable category when the Chumby device cycles to the next widget category will be the widget displayed in the next cycle for the just exited category e.g News .

The tabular illustration below provides a conceptual layout of exemplary widget stacks in various categories 

The following provides a conceptual representation of the case in which the user has navigated into widget stacks for News Entertainment and Sports 

Attention is now directed to which provides various perspective views of an exemplary Chumby device configured with a malleable housing comprising a rubber type frame in combination with a fabric material. The housing surrounds a core structure and a plush interior fill material not shown in . The rubber type frame fabric and fill materials collectively impart a soft and malleable feel to users handling the Chumby device.

In one embodiment the rubber type frame is composed of Texin a soft tactile rubber like material similar to TPE thermo plastic elastomer . The frame provides structure and form to the housing and allows the core electronics unit to be replaced and inserted. The frame will generally be manufactured in a relatively flattened configuration and then manually flexed or curved and stitched to the fabric when assembling the housing the Chumby device.

Turning now to interior to the flexible housing of an exemplary embodiment of the device there is included daughterboard circuitry containing an external power switch external power supply connector external headphone connector external USB connector internal left and right speaker connectors internal 9V back up battery connector internal bend sensor connector and internal Chumbilical connector. In one implementation the Chumbilical connector is used to connect all the signals received processed by the daughterboard to the core electronics unit of the Chumby device which is press fit into the soft TPE frame. Also positioned interior to the flexible housing are a pair of speakers for left and right audio output as well as a bend sensor and various cabling required to attach such elements to the daughterboard.

Referring to a flat pattern commonly used in soft goods and garment manufacturing is used to define the exterior structure of the flexible housing or bag of an exemplary Chumby device Chumby bag . Any number of artistic design elements can be added to the exterior fabric material of the Chumby bag to add dimension and visual features. The use of a fabric type enclosure for the Chumby device provides for unlimited possibilities for product housing creation both by the original manufacturer and end users such as craftspeople hobbyists etc. and is believed to represent a novel approach in the design of consumer electronic and or wireless devices. Fabric tags patches or other fabric garment related items can be stitched or otherwise attached to the exterior housing of the Chumby device to convey product or corporate information such as a logo.

The core electronics module will generally include for example a main circuit board LCD display touchscreen ambient light sensor USB WiFi dongle 9V backup battery and an RF shield. This core module is designed to be removable from the frame by the user of the Chumby device. It is typically connected into the housing Chumby device via a 22 pin cable assembly referred to hereinafter as a Chumbilical .

The WiFi dongle is a part of the core electronics module and provides 802.11 wireless networking support. In an exemplary embodiment the WiFi dongle attaches externally to the core electronics.

The backup battery currently consisting as a standard 9V alkaline is used to provide backup supplemental power to the Chumby unit in the event of failure of the primary power supply. The backup battery is mounted onto the RF shield and is meant to be replaceable by the user. The RF shield is positioned on a back side of the core electronics module.

The daughterboard provides connectors available to the user including power input headphone output and external USB style connector for future accessories and or facilitating device upgrades. The daughterboard is clamped to the fabric in between the daughterboard front and rear bezel components which are made of rigid ABS type plastic. The daughterboard connects to the core electronics via the Chumbilical .

In the exemplary embodiment the Chumby device includes a pair of internally mounted speakers to provide stereo sound. The speakers are held in place using square pouches sewn into the interior of the unit. The pouches each have a small drawstring to keep the speakers in a relatively fixed position within the interior of the Chumby device. Both speakers connect to the daughterboard.

The bend sensor is connected to the daughterboard and may comprise a flexible resistive element which varies in resistance based upon the angle of flex of the sensor. Accordingly the bend sensor is capable of detecting physical squeezing of the soft housing of the Chumby device. Signals from the bend sensor are processed e.g. by the core electronics module or dedicated electronic circuitry and generally will precipitate performance a defined action which may be dependent upon characteristics of the currently active widget. The bend sensor connects to the daughterboard. The bend sensor will generally be attached to the inside of the Chumby bag and oriented parallel to the vertical access of the Chumby device. In other embodiments one or more displacement sensors may be used to effect the same function.

Attention is now directed to the exemplary user interface screens of a Chumby device shown in to which reference will be made in describing a process for calibration of bend sensors within the device. When a user squeezes the back of a Chumby device and displaces the bend sensor beyond the calibrated tolerance the Control Panel function is activated and the appropriate user interface is displayed . From a settings screen accessed via the Control Panel of the user can then access the squeeze calibration function to recalibrate the bend sensor.

Although in certain embodiments the flexible or malleable housing of each Chumby device is intended to be essentially permanent and not replaced in other embodiments such housings may comprise interchangeable skins designed to be easily detached and replaced at the discretion of the user. In such implementations the Chumby device may be configured to operate in accordance with various profiles depending upon the particular skin currently attached to the underlying hardware core of the device. Specifically one or more sensors could be deployed upon the core of the Chumby device in order to read electronic identifiers embedded within the various skins disposed to be employed as the housing for the Chumby device. Each identifier could consist of a persistent non volatile storage module containing unique identifying information and would be physically configured so as to make electrical or radio contact with a corresponding sensor on the core of the Chumby device upon its skin becoming attached to the device core. The information read from such embedded identifiers could be used to inform the control system of the Chumby device of the identity of the skin currently enveloping the core of the device. Certain of such skins could for example include characteristics or features suggestive of various applications e.g. clock radio or boom box or intended operating environments e.g. car kitchen workshop 

Once a new skin has been attached or otherwise secured to the core of a Chumby device and the information from the embedded identifier has been read the Chumby device may send a message to the service provider indicative of its current skin e.g. skin 1 . In response the service provider may reply with a message instructing the Chumby device to utilize a particular profile e.g. profile 3 . It is contemplated that users may elect to define via a Web browser in communication with the service provider profiles for each of their skins or simply utilize default profiles available from the service provider . Each profile could define for example i the widgets to be executed ii the configuration to be used for executing the widgets and iii the style and theme information color schemes control decorations fonts backgrounds etc utilized in presenting information via the LCD display .

In some embodiments a portable device may include hardware software or hardware and software in combination to implement functionality related to acceleration motion and location detection and tracking. Additional related applications and functions are also envisioned such as detection of contact with the device including contact caused by persons or objects hitting or squeezing the device as well as contact caused by the device impacting other surfaces or objects such as a floor table desk or other surface or object. In some applications motion detection and tracking may also be used to implement gesture recognition where movement of the device in pitch or roll axes or in rectilinear motion may be used to control device functionality. In addition motion matching may be used to identify when the portable device is moving in a particular predefined way such as based on a particular type of vibration.

Referring now to a block diagrammatic representation of one embodiment of motion detection system hardware also denoted herein as a motion sensing unit in accordance with aspects of the present invention is shown. It is understood that is merely representative of one embodiment and that other configurations providing similar functionality are possible within the spirit and scope of the present invention.

As illustrated in motion sensing unit may be implemented in one or more axes of motion by use of an accelerometer and associated hardware. For example accelerometer may be a three axis accelerometer such as an Analog Devices ADXL330 which is an integrated acceleration to voltage converter Kionix KXP74 1050 or similar device providing detection of acceleration and signal outputs in one or more axes of motion. The output of accelerometer may consist of multiple analog signal channels representing the acceleration in each of the associated axes such as three voltage signals corresponding to orthogonal X Y and Z axes of motion.

The multiple axis analog signals may then be provided via channels to a signal filtering network for signal conditioning. Signal conditioning may include a variety of functions related to improving the quality of the signals provided to successive stages of signal processing. For example signal filtering network may comprise a lowpass filter to set the time constant of the system response to changes in the accelerometer output or to remove higher frequency acceleration components or noise from the signal. Such a filter may be implemented via a wide variety of circuits. For example in one embodiment a network of capacitors in parallel with the input signals from each channel may be used.

The outputs from signal filtering network may then be provided to an analog to digital converter . Analog to digital converter may then convert the filtered analog input signals to one or more channels of digitized data representing accelerations along the associated axes of motion of the device. The output of the analog to digital converter may then be stored buffered and transmitted to the portable device CPU such as CPU as shown in and processed by system software as described in further detail below.

The provided data may then be stored and buffered as well as further processed in driver software module . Storage of data may be accomplished via a scheduled task running on the device s operating system such as a scheduled task running on a linux operating system. Such a task may be run periodically or asynchronously based on a time reference such as an operating system clock tick or other timing signal. In one embodiment an asynchronous task may be run approximately once every operating system tick period which may be set to occur at the rate of 100 Hz.

At each tick the X Y and Z acceleration data may be recorded and stored in a circular buffer which may be configured in different lengths based on the desired amount of stored data and system data retrieval timing. The circular buffer may also have a data structure associated with it that keeps track of relevant statistics. These may include aggregate statistics on parameters related to the acceleration data such as mean and variance of the signal. In some embodiments as shown in driver software module may also implement higher level signal processing functions such as those higher level functions described in further detail below or others.

Driver software module will generally be configured to interface with other system software modules to provide data related to the accelerometer signals. In some embodiments driver software module may interface with the operating system and other software modules within the portable device via an application programming interface API as shown in . The interface mechanism to higher level software may be implemented in a variety of ways based on different types of interfaces. One exemplary embodiment uses a file device interface that dispatches to the accelerometer device driver. The file device can be used to query the driver for any information that the driver may contain such as the instantaneous acceleration and extrapolated velocity or the current adaptive noise thresholds as determined by the running average and variance of the data in the sample buffer.

In addition to the conventional interface as described previously driver module may also serve as an interrupt source wherein an interrupt is generated based on the acceleration data processed results buffer status or other related parameters. The driver module may also serve as a source of polled data that can be used to emulate the interrupt event. In some embodiments a system integrator may use the interrupt mode of the accelerometer to provide better response to certain events such as rapid changes in the portable device position.

In addition to low level software as described above a portable device may also include higher level software modules for processing accelerometer data to extract related information. Such software may apply a variety of signal processing algorithms to the raw accelerometer data to extract useful information. This information may include a range of related parameters such as relative angle and position of the portable device rate of angular or rectilinear positional change and other useful parameters. For example in some embodiments it may be desirable to measure the relative angle of the device with respect to a previous or reference position. In the case of a reference position determination of the reference position may be done by calibrating the device as further described in detail in later sections of this document discussing calibration. It will be noted that the relative angle of the device with respect to a reference position may be given in three dimensional coordinates x y and z as . Given a reference orientation defined as g g g and a current orientation defined as g g g the relative angle may be approximately determined simply by the following equation sin sin sin Where each of the terms of sinmay be saturated to 1 or 1 as appropriate. In order to improve the fidelity of this operation the values of g recorded may be oversampled and averaged.

In some embodiments it may be desirable to determine relative velocity and position of the device in one or more axes. As is well known in the art acceleration is the time derivative of velocity and velocity is the time derivative of position. Therefore velocity v x y z and position p x y z may be determined by integrating acceleration a x y z as shown below. It will be noted that a system based on integration may be sensitive to offsets in acceleration which may further enhance errors in calculating velocity and position. Furthermore when implementing such a system with discrete time sampled data additional errors may be introduced however these errors may be addressed by various means known in the art. In a digital system integration such as might be applied to determine velocity or position may be implemented in the form of a Reimann sum 

Referring now to a block diagrammatic representation of certain aspects of one embodiment of a accelerometer signal processing system is provided. Data buffer may be used to provide storage and buffering of multiple samples of raw accelerometer data. Accelerometer data may consist of multiple samples of data in one or more axes of motion. Data stored in buffer may then be provided to one or more signal processing modules to provide various motion related information. In some embodiments data from buffer may be provided to a heuristic trend analysis module configured as a noise offset discriminator. The output of analysis module which may be an offset suppression signal may then be applied to low pass filter modules and used in conjunction with integration modules and to calculate velocity and position data. In addition embodiments including heuristic trend analysis may also include a time delay module to delay integration of the raw accelerometer samples a sufficient amount of time to be in synchronization with the output of heuristic trend analysis module . It will be noted that the use of heuristic filters may introduce some dead zones in the signal response of the system but this can be compensated at higher levels such as by modifying the states of the gesture recognition machine or through the use of a vector quantizer to snap the location of the portable device in 3 space to one of a small set of known possible locations.

As further shown in some embodiments may contain integration modules such as and that integrate acceleration data to determine velocity based on a first integration and position based on a second integration. As implemented in the embodiment shown in acceleration samples are provided to first integrator which provides an output that is an approximation of the integral of the input signal such as by use of a Riemann sum algorithm or by other discrete time integration algorithms known in the art. The output representative of the velocity of the device may then be applied to a lowpass filter module for purposes of noise and other error correction. Lowpass filter module may also apply a correction signal from heuristic trend analysis module to improve noise and error performance. The output of lowpass filter module may then be subtracted from the input acceleration signals in a signal addition module as part of a closed loop feedback system. A similar feedback loop comprising second integrator module lowpass filter module and signal addition module may also be provided to integrate the velocity data in order to provide position data.

In some embodiments a Kalman filter may be provided to improve prediction of the device s position velocity and acceleration in the presence of noise. As is known in the art Kalman filters are widely used in navigation systems to improve performance in the presence of limited or inaccurate data samples and noise. As shown in a Kalman filter module may be provided with acceleration velocity and position data from the associated stages of the signal processing chain. For example acceleration data may be provided from data buffer velocity data may be provided from the output of first integrator module and position data may be provided from the output of second integrator module . The Kalman filter module may then process the input signals using filtering methods known in the art to provide improved positional data. In some embodiments as shown in interpolated position data output from Kalman filter module may be provided to a position log which may also be provided with a movement suppression signal output from heuristic trend analysis module . The output of position log representing an approximation of the relative position may then be combined in a vector quantization module with spacial calibration data. Spacial calibration data as described in further detail in successive sections of this disclosure may be provide from a special calibration data module . The vector quantization module may include quantization routines to limit the resulting output to a finite set of values thereby reducing errors that may be introduced through other processing steps such as heuristic filters. The resulting output of vector quantization module which is representative of the device s absolute position may then be provided to an implied position module where it may be further used by applications or widgets to provide position related functions.

In some embodiments a matched filter may be provided to detect particular motion related signatures. As is known in the art a matched filter may be used to detect particular signals by correlating an incoming signal with a sampled representation of a desired target signal and making a decision on whether the desired signal is present based on the output of the correlator. For example acceleration data velocity or positional data may be provided to a matched filter module to detect a particular motion event such as vibration of the portable device at a particular frequency. Motion events may be based on either preset or system programmed target events or may be programmed by the user. In some embodiments matched filter module may be provided with one or more reference signals corresponding to targeted motion profiles such as acceleration velocity or position profiles related to particular targeted movements. Matched filter module may then correlate the incoming signals with the target signals and signal a match when the correlation output exceeds a preset threshold.

Alternately the user may train the matched filter to detect a particular motion sequence. For example a user might train the filter to monitor motion processes related to their washing machine. The user might do this by selecting a training mode placing the device on the washing machine while it is operating with a particularly desired motion for a specified amount of time perhaps 5 seconds and then recording the motion signature. The motion signature may then be stored in the matched filter module as a target signal and the incoming signal could then be correlated with the target signal to detect the desired motion signal. As is apparent a wide variety of other motion related matched filter applications are possible within the spirit and scope of the present invention.

In some embodiments a gesture recognition module may be included. Such a module may operate on position data such as interpolated position output data from Kalman filter module to detect particular position sequences associated with motions of the device caused by hand movement. A wide range of gesture implementations are possible. For example in one embodiment a dynamic programming algorithm such as the Viterbi algorithm or a similar trellis algorithm may be used to determine the most likely user intended gesture based on the input position profile. In this implementation a state diagram may be laid out consisting of the various legal states and branching conditions that may occur. As the user traces a trajectory through the state diagram a maximum likelihood predictor may be dynamically applied to determine which gesture is implied by the transaction through state space.

To further illustrate one possible example the device may be configured with 4 control motions providing four different functions based on rotation about 2 orthogonal axes X and Y. Rotation in one direction about the X axis controls the first motion rotation in the opposite direction controls the second and likewise for the 2 directions along the Y axis. Applying the positional data to the gesture recognition module results in detection of both the corresponding axis and direction of rotation for device movements. This information may then be provided to other applications or widgets to provide associated functionality.

As discussed previously with respect to portable devices may include modules implementing gesture recognition functionality such as through gesture recognition module . A wide range of gesture recognition applications are possible. In some embodiments gesture recognition may be based on pitch and roll axes of motion to control a pair of horizontal and vertical scroll bars. As illustrated in the portable device may be moved as shown by the arrows and the associated device motion may be detected. This process may be used in place of a keyboard or mouse in widgets or applications where text scrolling is required. Alternately the portable device may be moved in a rectilinear fashion as shown by the arrows in where the device is used to trace out the position on the screen and then the device may be moved up or down to emulate the equivalent of a mouse click. Operation in the rectilinear mode may require sampling the accelerometer at a high rate and double integrating the acceleration data as shown in to derive the device position.

A range of processing may be further applied such as adaptive detection and cancellation of accelerometer drift and static offsets within the integration process. There may also be need for application of intelligence in interpreting the resultant positional readings as these translate into screen coordinates because the human user s perception of linear motion is tempered by the total range of linear motion allowed. For example a common problem when using a mouse is that the area for mouse usage is smaller than the area traced on the screen requiring the user to pick up the mouse and replace it on the mouse pad. Intelligence algorithms may be applied to monitor the acceleration profiles to detect and correct differences between re centering a device and the actual movement and clicking motions made by the user.

Another mode of operation using gesture recognition may be implemented using common gestures in a form of sign language. For example a series of sign language motions for particular words or expressions could be predefined. Flipping a portable device upside down and shaking it like one might shake a piggy bank could be defined to switch the portable device to a stock portfolio application or widget. Other common gestures such as those associated with frustration affection or simple symbols could be used as a method of activating a particular behavior on the device. Other embodiments could allow the user to throw the device and measure how fast it has been thrown or acceleration data could be stored on the device in non volatile memory to indicate that the device is no longer in warranty because it was thrown or dropped too hard. It will be noted that all of the above profiles could be used in a variety of applications from video game interfaces to control panel configurations.

In certain embodiments portable devices may use a bend sensor to detect when the device is squeezed by a user. Alternately the accelerometer and associated modules may also be trained to recognize this type of gesture. In particular there are at least two types of motions that portable devices may be configured to learn that are specific to soft devices. The first is denoted here as the squeeze and the second is denoted as the squish. A squeeze motion occurs when a user takes the device and compresses it in their hands as may be done with a stress ball or similar device. This may cause the accelerometer to deflect in a characteristic velocity and tilt profile. As previously discussed with reference to a matched filter such as matched filter may be either pre programmed based on calibrated squeeze motions or user programmed based on their specific squeeze motion to recognize the squeeze gesture. Subsequent squeeze motions may then be detected based on correlating a squeeze motion with the pre programmed motion sequence in the matched filter. Such as process could be used either in conjunction with bend sensors or as a replacement for a bend sensor in certain embodiments.

A squish motion occurs when a user pushes a portable device down on a hard surface such as a table similar to pushing off an alarm clock sounding in the morning. This type of motion can be detected through a variety of mechanisms including matched filtering acceleration profiling tilt detection or by other means. As defined the difference in detection of a squeeze motion versus a squish motion lies in the way the device is manipulated. A squeeze motion compresses the device primarily depth wise while a squish motion compresses the device height wise. It will be recognized however that both motions are related to the more general motion related detection processes and systems described previously.

In some embodiments portable devices may use the accelerometer and related modules to detect and track the position of the device within a building. For example in some embodiments the device may be configured to detect and track which room it is currently located in. In order to determine location in this way it is assumed that the device is fitted with proper hardware and software to allow it to operate in a portable mobile mode. In the simplest implementation the X Y and Z accelerations are double integrated such as is illustrated in and position is determined. As previously noted absolute position determination applying this approach may be difficult because of introduction of noise and system errors. In particular position errors may accumulate rapidly because the double integral required to convert acceleration into position tends to accumulate error factors at a square law rate. Nevertheless there are a variety of ways of addressing these problems as discussed in further detail below.

With reference to in one embodiment the portable device may be used in two distinct operating modes related to location detection. The first mode is denoted as a training mode and the second is a running mode.

In the training mode as illustrated in the user holds the device at a reference position resting spot in step such as in a reference position in the first room. The user then makes a gesture initiating a training session in step by for example pressing the screen or squeezing the device to generate a start signal. The device then performs a step of recording data and computing position. The process may be continued by picking up the device in step and moving to another position such as a reference position in another room. Once in the next position the user again makes a gesture in step and continues the training in step until completion of training is signaled by a user supplied indication in step such as another gesture. The device may then complete any associated training and calibration calculations in step . This process may be repeated at step by returning to step until all rooms have been trained. In one exemplary embodiment there is a preference that the user return to the first room and position then notify the device that it is in the original reference position whereupon the device determines overall drift and error factors over the entire trajectory.

In the second mode denoted the running mode as illustrated in the portable device may set a dead zone around the accelerometer which may be determined based on the overall drift and error factors so that it avoids integrating noise and static offsets. As shown in a user may start operation by picking up the device at step whereupon the device begins determining position based on integrating acceleration in step . There may also be additional intermediate movement steps as the user moves the device around a room or other trained area.

As the user moves the device various errors may place the devices in a location that is not identical to any of the previously trained locations. In this case the device may determine the nearest trained location in step by for example calculating the magnitude of the vector between the current inferred location and the previously memorized locations. The device may then apply processing to snap i.e. quantize the position to the nearest trained location in step . This snapping process may be used to help eliminate some or all of the drift factors that may accumulate over time and may be repeated as the user moves the device from place to place. It will be noted that this approach may have some weaknesses. For example if the user cannot decide where to place the device it may end up in a slightly different location each time it is put down. Presumably however each room will be large compared to the relative error in the placement of the device so the snapping routine will still place the device close to the desired position. Further it will be noted that if the device is turned off moved then turned on again in a different location it will generally not know where it is so a user may be required to provide the current position to the device. This may be done by telling the device via a menu which of the previously trained locations it is closest to.

These motion tracking features may be used to implement a number of clever and fun applications on a portable device especially if the device is coordinated with data from a central server so that the device has some knowledge or awareness of other the portable or similar devices in it s vicinity. In addition these motion tracking features can be used to implement security features. For example if a device is moved without a known user entering a security code it may be configured to sound an alarm. Alternately it could be hung on a door handle to provide an alarm or door chime when moved.

As previously discussed with reference to a portable device may be trained to detect a particular motion pattern using a matched filter. For example a device may be programmed to detect when motion on a washing machine stops and then send a message to another device indicating that the washing process is finished. The other device may then indicate to a user by a variety of means such as audible or visual indicators that the wash is finished. In other embodiments a device may be configured to detect a motion pattern associated with earth movement such as a vibration associated with a earthquake. In this mode a seismometer widget could be continuously or intermittently run so that when targeted earth movements occur the position time magnitude and other parameters could be reported to a central server or local or remote user. This implementation might be used by geologists or seismologists to create more detailed maps of seismic activity than have been previously available.

In some embodiments it may be desirable to provide for calibration of the portable device. It will be noted that there are a variety of methods for calibrating a device either based on a known reference position or relative to the current device position. Due to natural static offsets in the accelerometer it may not be possible to determine based on a particular analog output such as a voltage a representative fixed tilt angle. As a consequence in some embodiments it may only be possible to reliably determine the relative angle of the device given an initial starting point. Therefore in some embodiments calibration of the device may be an important step prior to operation.

In one exemplary embodiment of a calibration procedure as illustrated in a portable device may use the multimedia capabilities described in other sections of this and other related disclosures to aid in calibration. In this embodiment the user initiates the calibration process by for example providing an initiation gesture in step . Once the process has been started the device then instructs the user to place it on a surface such as by placing it down on a table as in step . The device then performs calibration calculations determines the calibrated position and notifies the user in step by for example making a beep or other sound or visual indication that the process is complete. Following the notification of step the user may then signal the device in step by for example squeezing the device. The device may then notify the user to return it to an upright position in step . Because most tables in modern countries are flat with respect to gravitational attractive forces this process can be used to establish a well known fixed geometry with respect to the earth as a calibration or reference point.

In some embodiments a Chumby device may be configured and operative to interface to one or more virtual worlds such as the virtual world known as Second Life accessible at http www.secondlife.com. Features of such an interface may include but are not limited to display of content from the virtual world on a Chumby device interaction through a Chumby device with other users and features of the virtual world display and interaction with avatars on the Chumby device and in the virtual world monitoring of virtual world activities and other features and functions.

Virtual worlds allow users to interact with other users typically using avatars to represent the users in the virtual world. In a virtual world users may be presented with a type of virtual webcam where virtual world services such as Second Life World of Warcraft Toontown Entropia Universe and others host a machine or group of network machines or servers to render views into the virtual world from a variety of vantage points. Virtual worlds may include rendered versions of practically any feature of the real world as well as fantasy features and functions that do not or could not exist in the real world. Example features include parks meeting places stores battle areas and a wide variety of other public and private places. Users in the form of avatars may be able to navigate the virtual world in a variety of ways including by walking as in the real world or by other ways such as by flying.

User interaction with virtual worlds may be analogized to a webcam that may be described as a virtual webcam providing a webcam like view into the virtual world. Once the world is created and user avatars are instantiated the interaction may become much like a real webcam where images are streamed on demand to client applications. Typical virtual world interaction is done via a personal computer PC where the user accesses the virtual world via a web browser interface or standalone desktop application and navigates and interacts with the virtual world using PC controls such as a mouse and keyboard.

Aspects of the present invention include extending interaction with the virtual world to a mobile and or portable device such as a Chumby device. In some embodiments there may be an authentication process to allow a Chumby device to interface and interact with the virtual world. Alternately in some embodiments as is done with many webcams no authentication may be necessary or used. In some embodiments no user avatar may be provided in conjunction with access via the portable device however in other embodiments the normal user avatar or a unique device specific avatar such as an avatar representing a camera Chumby device a combination of camera and Chumby device or another similar type of avatar may be provided in the virtual world.

In some embodiments user access to a virtual world may be limited to a fixed or stationary position wherein the user may be able to see hear or otherwise sense activities in the virtual world but may not be able to move around within the virtual world. Alternately in some embodiments an interface may be configured to allow the user to move around within the virtual world using controls provided on the portable device. For example controls associated with a Chumby device such as those described elsewhere in this document may be configured and operative to allow the user to move around within and interact with the virtual world in a similar fashion to the movements and interactions effected via PC based controls.

In some embodiments user interaction with the virtual world via the portable device may be limited to monitoring activities for those of interest to the user wherein the user may then access the virtual world through a PC or other access means to participate in any available event or activities. For example the portable device may be configured and operative to monitor the virtual world for some defined event such as a big battle unexpected crowd activity friends showing up or other targeted activity and then notify the user through any available notification mechanism that an event of interest is occurring. In response the user may then access the virtual world through their PC and engage in the associated event or activity.

Alternately in some embodiments the portable device may be configured and operative to allow the user limited or full engagement with the virtual world through control devices and functions described herein as well as through audible and visual display devices such as speakers buzzers LEDs LCDs LCD display panels and or other audible visual tactile or motion related devices.

Many virtual worlds provide interfaces allowing users to interact with the service provider using existing infrastructure. Interfaces such as these may be used to allow a portable device to interact with the virtual world without requiring changes to the existing infrastructure. For example Second Life provides a mechanism in which users can interact with custom in game objects via XML RPC. In one embodiment this interface and associated protocols may be used to allow a portable device to interact with objects and processes real time information. Second Life provides a representative example OSX dashboard widget at http secondlife.com devdown detail.php pid 00000005 designed by Sweet Vitriol http www.sweetvitriol.com that implements such functionality.

In the following description and examples of systems and methods for interaction with virtual worlds steps and configurations are shown in conjunction with devices processes and methods associated with embodiments of the invention. It will be recognized that a variety of alternate steps and configurations may be used and therefore those described and shown in the figures are provided for purposes of illustration only and are not in any way intended to be limiting unless explicitly so stated.

Attention is now directed to which illustrates one embodiment of a workflow for configuration and interaction between a portable device such as a Chumby device and a virtual world such as Second Life . As shown in a user may first be provided with a means or option to select a virtual web cam widget VWCW in step and add it to one of their widget channels as described elsewhere herein. The widget may then be displayed on the user s portable device in a fashion as described elsewhere herein.

The user may be provided with a means or option to configure the VWCW based on relevant configuration parameters in step . In one embodiment the configuration parameters may include the ID of the virtual world. Alternately there may be one or more specific widgets for each virtual world where two or more virtual worlds are accessed. Each widget may also be configured with identification information for the virtual world being accessed. For example identification information may include a username password combination or some other type of security key token or other identification means. In some virtual worlds identification may not be needed or used to allow either limited or full entry and access. For example in some embodiments a user may be able to gain limited or even full access to features and functions of the virtual world without having to enter identification information. In one embodiment a user may be able to view a specific location such as a previous location default location random location neutral location or other location in the virtual world upon connection. Other variations on access and initial user positioning within the virtual world are also envisioned within the scope of the present invention.

The user may then be provided with a means for playing the widget on the portable device. For example in one embodiment a Chumby device may retrieve and instantiate a widget to be played using a method such as those described herein where playback consists of execution of operations of the widget associated with configuration connection and operation of the widget in conjunction with the virtual world. Widget playing may be executed on associated hardware software firmware interface devices and other related elements. Once widget playing has begun the widget may then contact the virtual world in step over an available interconnection pathway such as the Internet wired or wireless networks or other networks such as the telecommunications network. The access protocol will vary depending on the type of connection and service. For example in some embodiments the XML RPC protocol may be used.

The widget may then authenticate the user to the virtual world service in step . For example the user may use the secure identification proxy on the Chumby web site or authenticate directly with the service at its web site such as at http www.secondlife.com.

The widget may then retrieve information from the virtual world site at step . Such information may include data files objects application programs controls or other information provided in such a way as to allow the widget to interact with the virtual world and user. For example the virtual world may provide data to allow a Chumby device to render a view on a display screen such as an LCD display on the device. The data may also allow audible information speech music videos sounds buzzers visible displays or other content or indicators to be output by the portable device. In some embodiments the information link may be configured to provide data in a primarily unidirectional fashion wherein content associated with the virtual world is displayed and or played back audibly on the portable device. Alternately in some embodiments the information link may be bi directional allowing content delivery from the virtual world site to the portable device as well as content and or control information to be sent from the portable device to the virtual world site. For example in some embodiments the portable device and associated widget may be configured and operative to allow a user to control operations in the virtual world such as changing views panning tilting zooming or moving around within the virtual world. In addition in some embodiments users may be able to upload content to the virtual world and signal or otherwise interact with other users and associated avatars in the virtual world.

Once instantiated the VWCW may send a request to a virtual world service provider at step such as at a web page URL associated with a virtual world. In one representative example the Second Life top level domain www.secondlife.com may have one or more associated URLs for access and interface to the virtual world. The virtual world service VWS may be hosted on a range of hardware and software such as a virtual world server or servers running one or more programs implementing the virtual world. The request may be transmitted between the Chumby device and the virtual world service by any available means of communication included wired Internet connections wireless connections such as Wi Fi telecommunications interfaces or other available wired or wireless connection means. The request may use a standard communications protocol such as the XML RPC protocol which is a simple protocol using XML to encode calls and HTTP as a transport mechanism. For example Second Life provides a mechanism in which users can interact with custom virtual world objects via XML RPC. It is also noted that other protocols may be used.

Once a request has been transmitted to the VWS the VWS may process the request according to a supported protocol and procedures in step . In some embodiments the VWS may provide for direct access without additional user identification. In other embodiments however the VWS may require an identification and or authentication step prior to establish a connection. Authentication may include typical authentication procedures based on a userid and password or may use other alternate identification procedures. If ID Authentication is used the VWS may then send an ID Authorization request to the portable device requesting the desired information. In some embodiments the portable device may be configured to respond directly to the request however in other embodiments such as that shown in the ID Authorization request may be forwarded to a proxy in step such as a virtual world authentication proxy on the Chumby web site. The proxy may then retrieve authentication information from a database such as a VWCW database including ID Authentication data or records for the particular portable device and or user seeking VWS access. The proxy may then send a response to the VWS in step where it is subsequently processed by the VWS at step . At this point the VWS may process the request by rejecting authorization and transferring execution to another step such as step as shown in to repeat the process may accept the response and transfer execution to another step such as step or may execute alternate or additional steps not shown in .

At this point a session token may be generated and sent from the VWS to the portable device in step . The portable device may then cache the token and request data from the virtual world in step . In one exemplary embodiment the portable device may request location or positional data from the VWS in step so that it may render an image of the present virtual world location such as might be shown by a standard webcam. Additional or alternate data may also be requested such as text audible other visual or similar types of data about the virtual world or other virtual world users avatars.

In step the VWS may process the data request such as by processing a request for location information and then retrieve process and send virtual world data such as location view data to the portable device in step . Once the data is received at the personal device the VWCW may then process the data as necessary in step and render a view other images audio text or related content at step . In some embodiments this process may be repeated until the user provides an input to stop or change processing. In other embodiments additional optional steps such as step may be provided to allow user manipulation of the interaction with the virtual world. For example in a personal device playing an appropriately configured widget a user may be able to effect controls such as zoom pan tilt rotation translation and other functions. The associated information may be sent to the virtual world in order to enable the interaction and an associated request for new or additional data may be sent in step to the VWS to update the personal device display and or output to reflect the user s manipulations. Process execution may then return to step where new location or other data is requested and sent to the personal device VWCW.

In some embodiments a Chumby device and associated system may be configured to provide user authentication and security. It is noted that the embodiments described herein are illustrative only and not intended to be limiting. Other embodiments in keeping within the spirit and scope of the invention are fully contemplated herein.

In order to clarify some of the details of the embodiments described herein a number of acronyms or abbreviations including those described below may be used along with others known in the art.

In typical embodiments a Chumby device is an open architecture Internet client for push content delivery as for example is described elsewhere in this document with respect to various embodiments . One advantage of such a device is that it can simplify the Internet experience. However a major technical challenge is how to do this without compromising a user s privacy or security. This presents challenges including ensuring that authentic content is delivered to users for example anti spam anti phishing anti trojan as well as how to proxy in a secure fashion third party authentication to the client as would be required if one wished to view their email bank balance or other personal information on a portable device such as a Chumby client . These tasks must be done without hiding secrets from the user or restricting users from repurposing the Chumby for applications unrelated to the primary service such as those described elsewhere herein.

For example it may be undesirable for a Chumby device to own or know about the user s email or bank passwords. In that situation it is important that users ultimately retain control over their third party keys even though they may be stored physically on a Chumby server in embodiments such as are described elsewhere herein.

For exemplary embodiments of security systems and methods it may be desirable to implement one or more of the following tasks authenticating a Chumby client while preserving as much as commercially possible the privacy of users enabling authenticity integrity checking of delivered content to a client enabling a revocable mechanism for lease of security authentication facilities to third party providers enabling owner override by deleting all secrets in the system upon owner s request via a hardware enabled path enabling owner token revocation by encrypting all security tokens in the Chumby database to keys stored on the chumby client only as well as other tasks.

In order to address these needs a basic authentication and token transfer protocol may be used. In conjunction with the particular security protocol used basic assumptions may be made regarding the security needs of the particular system. For example in one exemplary embodiment it will be assumed that the value of secrets to be protected by the security system is less than 300 and the mean duration of the secret value will be less than four years. It is anticipated that secrets will typically expire due to obsolescence such as by obsolescence due to password changes hardware turnover third party software migration account changes or imposed password limits. An optional secondary mechanism employing a force flush of encrypted secrets at designated times or time intervals may also be employed. It will be noted that the systems and methods as described herein may be implemented in similar or analogous fashion based on different assumptions from those above.

Attention is now directed to which illustrates a typical client server architecture for a Chumby or other device in which may be implemented embodiments of systems and methods consistent with the present invention.

A typical Chumby system will include a Chumby device Chumby client as shown in capable of providing connectivity via wired or wireless networks to one or more Chumby servers and or other networks and servers. A Chumby client may be configured to consist of two parts an open client based on a core processor and an open but lightly tamper resistant cryptographic also denoted herein as crypto processor . The open client will typically be considered to be untrusted as it will typically be an unmaintained unverified linux host with open network ports. As a result no secrets should be placed on it. There may be however a need or desire to provide a location for users to store secret information such as passwords or other private information. It is assumed that a user cannot simply trust Chumby services servers with security tokens since in a typical embodiment the Chumby server is relatively closed and difficult for a user to inspect or regulate. Moreover a Chumby can potentially be compromised by subpoena or hacker or the user may wish to cancel an account or subscription and be fairly sure that Chumby cannot later use these tokens for other purposes. Therefore other solutions are required.

One approach is to include a lightly tamper resistant crypto processor CP in a Chumby device for use in facilitating security and authentication of the device consistent with aspects of the invention. A principle property of a typical implementation of a CP such as CP is that its execution path should be in a separate and unreachable domain from the core processor making it much more difficult to create software only attacks that can compromise secrets stored in the CP. The CP may also be configured in an open way and its entire source code specification and schematics may be published as well.

The CP may be configured to contain a set of Private Keys PRKs and Owner Keys OKs . Note that no third party authentication tokens will normally be stored in the CP. The CP will typically be used as a front line authentication device to a Closed Server CS which can then store secrets in an environment that is constantly monitored such as a network operations center NOC . This approach is not intended to be completely foolproof. Rather it is intended to provide a commercially reasonable assurance that secrets cannot be abused and more importantly provide a quick and easy path for remedying and detecting most security breaks.

In order to save on costs in some embodiments the CP may be configured so that it does not generate its own private keys as generating a large set of private keys requires a high quality entropy source and significant amounts of computational power. The CP s keys may instead be generated by a testing machine in a factory and controls must be placed on the key generating machine in the factory to ensure that it is not logging the private keys it generates. It will nevertheless be apparent that other means of generating and providing security keys as are known in the art may also be used.

In typical embodiments of the present invention the CP implements one or more of the following features typically all of the them . However it should be understood that the principles of the present invention are not limited to any particular combination of such features.

the CP implements elements of RSA PKCS 1 the CP will generally be configured to be capable of storing at least 16 1024 bit RSA key pairs with an option to go up to 30 1024 bit key pairs with tighter memory packing the CP will generally be capable of storing at least 16 128 bit symmetric keys a pair of pins used to implement a serial TTL level protocol to the Chumby client processor the serial protocol is implemented for communication with the core processor per a serial protocol spec such as the one outlined in detail in a subsequent section an n deep authentication queue with immediate response and delayed flushing i.e. the queries from the queue may be responded to immediately but the answered queries persist in the queue for at least a few minutes before being flushed and queries that overflow the queue are ignored the reset pin of the CP is tied to the client s reset pin in a method that is inconvenient to bypass to prevent resetting of the CP without resetting the core processor to bypass the authentication query time out an external pin the SETAC ASTRONOMY pin is made available that enables a user to destroy the secrets inside a CP this is the equivalent of an owner override feature in the presence of an environment where the owner s identity cannot be easily established over an attacker assuming a hostile physical environment and an optional user presence pin which is connected to a button to verify the user s physical presence at the device when necessary all other pins may be ignored or otherwise passivated on the CP. In addition optional features may include a method for preventing back door hardware access to secure ROM contents e.g. a security fuse to prevent code data readout via JTAG or programmer the JTAG port may be made available to test equipment so that it is easy to audit if the CP implements the anti JTAG readout ROM fuse.

As noted above an immediate response delayed flush authentication queue feature may be implemented to meet one or both of the following competing requirements 1 A requirement that a Chumby client rapidly authenticates itself to a server even in an environment where network connectivity is spotty and packets can be dropped thereby mandating a retry of the authentication sequence 2 A requirement that the Chumby client be robust against an attack where a user can hack their Chumby and use their CP as a query server so that other Chumbys can proxy their authentication requests through the CP on the hacked Chumby.

The authentication queue s time out may be configurable by the system architect based upon the use model for the authentication. The time out essentially limits the rate of authentication leakage to less than one unit every few minutes minus the regular authentication queries mandated by the system design. In one exemplary embodiment it is suggested that the server re authenticate a Chumby device once every 46 minutes with a time out of 15 minutes. A depth three authentication queue may be provided to help ensure that up to three queries can be immediately and quickly serviced when network connectivity is spotty and the authentication must retry several times due to excessive packet loss.

Another feature that can be used in place of or in addition to the immediate response delayed flush authentication queue is the User Presence input . This feature also satisfies feature 2 but in a different manner that enables a different range of use models. The mode for usage may be configured in the factory depending on the system architect s usage model. The User Presence input may be connected to a simple button on the device. The principle of operation is that the CP will not allow an authentication to happen unless someone is present to push the User Presence button. Since the User Presence button is connected directly to the CP hardware there is no way for an intruder that has gained control of the primary CPU to spoof this signal. The protocol is constructed so that when a high confidence authentication sequence is requested such as prior to performing a financial transaction the user is required to push the User Presence button. Pushing this button authorizes the CP to perform exactly one authentication transaction. Therefore a remote attacker attempting to execute a relay attack on the system by sending rogue authentication requests to the CP is typically denied because nobody is present to hit the User Presence button. In the case that the attacker does manage to time an attack to steal the single authentication sequence that the user has authorized then the legitimate user will be denied their authentication and will be immediately informed about the breach. Thus one can see that while the system does not perfectly prevent authentication theft it is constructed such that it is unlikely a user can have their identity stolen without being immediately notified of the problem. Obviously the system does not protect against an attacker that is physically present to press the User Presence button although the use of two factor authentication such as a PIN code entered via the touchscreen can mitigate that risk.

In a typical embodiment the queue may be implemented as a counter in the main loop of the code. Every time the loop executes it checks the real time clock and decrements an expiration timer. Whenever the expiration timer runs out the authentication count is decremented until it hits a value of zero. Whenever an authorization request is performed the authorization count variable is immediately incremented. Authorization requests are denied if the count variable value exceeds the preset authorization maximum value. Authorization count saturates at the maximum value it does not accumulate beyond the maximum value so as to prevent a denial of service attack on the device from a rogue program spamming the CP with authorization requests.

A depth 3 queue is suggested because it is highly unlikely for a network request to fail three times in a row to the authorization server. Higher or lower level queues may be used however if the network connectivity is sufficiently poor that the authorization request packet fails to return to the server three times within 46 minutes then the network is likely performing poorly enough that the user experience is not adequate anyway.

In addition to the client side Chumby device a typical Chumby system will include one or more servers as shown in . In a typical system the preservation of user privacy is an important goal of the authentication systems described herein and consequently a Closed Server CS with split domains may be provided and configured to consist of two physically distinct computers servers. The use of two physically distinct computers enables user authentication information to be strongly partitioned from private user information. Although in typical embodiments such a closed server system may be used the invention is not intended to be so limited and other embodiments with more open connections to and or between the servers may also be used in some applications.

One of these physically distinct computers is denoted herein as a Widget Server WS and the other is denoted herein as an Authentication Query Server AQS . One embodiment of these elements is illustrated as server system shown in . The WS is the externally visible server that every Chumby client contacts to retrieve widgets as is described elsewhere in this document. The AQS is an intranet only server that can only be contacted by the WS typically through a dedicated protocol and medium. The WS has no knowledge of any authentication tokens but it does contain all of the personal preferences and settings of the users. The AQS has no knowledge of who what a user is but it can verify the authenticity of tokens.

In a typical system embodiment the public keys are all stored and indexed on the AQS and the private keys are distributed among Client Devices .

A single piece of information a Putative ID PID may be used to share the authentication status of a user. Each Chumby client may have one or more PIDs stored on it with the PIDs typically independent from the device ID. A WS may index its databases on the PID key and the AQS may index its database on the PID or a secure hash of the PID. The hash of the PID may be used to index the AQS to increase the system s privacy robustness in the case that an intruder compromises the AQS database. In a typical transaction the WS simply asks the AQS is this PID authentic and the AQS simply responds with a yes or a no answer.

Alternately if a user is disciplined about not divulging private information they may enjoy the benefits of using the Chumby service to proxy passwords to their secure accounts yet not be identifiable as a particular individual. On the other hand certain practical conveniences are typically conferred through the exchange of identifying information such as credit card payments . Corporate policy associated with deployment of Chumby systems may be established such that owners are educated on the risks of such conveniences. However even if a user does divulge certain private information the fact that the widget server may be configured to be oblivious to which exact physical Chumby is being authenticated only the AQS knows this but the AQS is oblivious to which exact user is being authenticated creates a layer of possible deniability in certain scenarios.

In order for a WS to work as a proxy for security tokens the security tokens should typically be stored somewhere on the WS. Accumulating millions of users private security tokens and writing them into a single database is problematic for many reasons including but not limited to the difficulty of maintaining the security of something so valuable the threat of a subpoena intended for a single user inadvertently leading to the leak of all the users tokens and also the fact that this requires the user to trust the Chumby network to manage his or her keys. In general the user should not be required to trust the Chumby network as the user would typically have no reason to do so. Therefore in typical embodiments users will be empowered to manage their own keys remotely.

In order to facilitate this process a set of owner keys OKs may be stored on the CP. An OK may comprise a 128 bit symmetric cipher key. The OKs may be used to encrypt the security tokens that the user hands over to the Chumby network. Each client may have or be provided with a set of unique OKs that are not shared with any other client.

The WS only stores E ST OKx where E x k denotes the encryption of message x with key k so that even if the entire security token ST database were compromised the attacker cannot decrypt security tokens without first contacting every client in the database and requesting the corresponding OK. This is complicated by the fact that the client may not respond to queries for the OK without first verifying authenticity through the certifying public keys which can only be done with the assistance of the AQS. Therefore the attacker must typically compromise the AQS and the WS in order to fool a Chumby client into divulging its OKs.

Finally if a user decides he or she no longer wants to be a part of the Chumby network all she has to do is destroy OKx i.e. the one OK used during her tenure with the Chumby network and all her tokens stored on the Chumby server as E ST OKx become essentially unrecoverable. If the Chumby client is then resold to another customer the next OK on the list may be used and so on until the list is exhausted.

An additional component of the system may be an Off Network Secure Signing Agent ONSSA as shown in . This machine may be used to sign data with Chumby s private keys such as one or more master private and associated public signage keys Sn Pn as shown in . Because the corresponding public keys are typically burned into every Chumby device such as at the manufacturing stage or delivery stage the value of the private keys is very high. Therefore it is desirable to provide a very security conscious implementation of the ONSSA and the signing protocols.

In exemplary embodiments the ONSSA includes an image signing computer that is ideally entirely air gapped or otherwise physically disconnected from the network and methods such as are known in the art may be employed to split secret access across multiple individuals so no individual can act alone to compromise the contents of the ONSSA. A device such as USB dongle may be used to sign master dongle images by for example physical insertion in image signing computer to implement signing.

The following description illustrates exemplary embodiments of system and protocol implementations to achieve one or more of the above described security and authentication criteria. It will be noted that these embodiments are provided for the purpose of illustration and not limitation and therefore other embodiments in keeping within the spirit and scope of the invention are fully contemplated.

In typical implementations of the protocols as further described in subsequent sections it is desirable to generate a random number on the CP. In a typical embodiment a CP will not have a native hardware facility for generating random numbers nor does it have a facility for setting time in a secure fashion. In order to facilitate the generation of random numbers the following procedures may be used 

Each CP in the factory is programmed with a seed entropy list. This is not intended to be a long term source of entropy but it does guarantee a minimum amount of difference between each CP so as to prevent easy BORE attacks.

Each CP samples with its internal analog to digital A D converter which will typically be a noisy Sigma Delta implementation. The least significant bits LSBs of the A D converter are noisy. The LSBs of this sampling process are folded into an entropy pool maintained by a running a secure hashing algorithm SHA 1 digest of the initial entropy pool and the additional entropy of the A D converter.

The value of the RTC is folded into the entropy pool once every random number generator RNG request. Small variations in the clock setting and random drift help add a little extra entropy to the pool.

As a result the RNG inside the Chumby is not so much a true RNG TRNG but rather a pseudo RNG PRNG with several rather hard to control and predict parameters.

Task 1 Authenticating a Chumby Client while Preserving as Much as Commercially Possible the Privacy of the Users

The following exemplary procedural steps may be used typically but not necessarily in the order shown and would typically be done in a factory prior to shipping a Chumby device to a sales chain or user. Additional and or alternate steps may also be used. The factory production environment is considered to be mostly trusted with the possible exception of unscrupulous factory workers.

2. The CP programmer tester generates a set of private and public key pairs P S and writes ID P and Sto internal memory of the CP along with the program code for the CP. All keys and the ID are stored as binary numbers.

4. After programming and verification the CP internal memory may optionally be locked to prevent readout via JTAG this step may not add significantly to the robustness of the protocol however it may nevertheless be beneficial .

6. Periodically a list of Pand SHA1 ID s are forwarded to the AQS via a secure method such as a non network method. Use of a non network method is not necessarily done to insure the secrecy of the transmitted data but rather to reduce venues for remote attacks on the AQS database minimize number of ports open on the AQS .

Attention is directed to which illustrates a procedure for a user authentication transaction in accordance with aspects of the present invention. At stage a Client Device Chumby sends a request for authentication to the Widget Server WS with a message including the PID PIDX typically in the form of a hash of the PID H PIDX . As shown in one or more PIDs are stored in the Crypto Processor CP with the hash of PIDX typically being generated in the CP .

The WS receives H PIDX and sends it to the Authorization Query Server AQS which then checks for the hash of PIDX in a local table of keys at stage . If the hash of PIDX is not present the AQS then rejects the transaction at stage . Alternately if the local table contains the hash of PIDX a first random number Rn may be generated and sent from the AQS to WS and then to the Chumby at stage .

At stage the Chumby receives Rn and generates and signs a Reply message. In an Exemplary embodiment the Reply message includes Rn along with additional information including a new random number Rm PIDX a protocol version number and an owner key OKx which is encrypted using the public key of the AQS Paqs . The signing is done with the private key inside the CP of index X Scc x . Additional information may be returned in the reply message in plaintext including Rm the OK encrypted using the public key of AQS Paqs and the version strings. This facilitates reconstructing the signed string and verifying the signature at AQS . The reply may be conditioned on actuation of a User Presence button as described previously coupled to a User Presence input to CP . If a user fails to actuate the User Presence button typically within a predefined time period of transmission of Rn from the AQS the process may be terminated without reply.

Once generated the reply message may then be sent to the WS and then to the AQS at stage . AQS then verifies the signature using the public key of the CP of index x Pcc x all public keys are typically stored inside the AQS and indexed by PID as a sub index of x at stage . In an exemplary embodiment the verification is implemented per PKCS 1. At stage the OKx is decrypted at AQS using it s private key Sags . The AQS then validates the result at stage and rejects the transaction at stage if authentication fails which may include an invalid message sent to the WS. Alternately if verification passes the AQS returns information to the WS at stage . This typically includes a validation message as well as the decrypted OKx which may then be used by the WS to access the secure tokens STs by decrypting them using OKx.

The following process stages illustrate additional details of an exemplary embodiment of a user authentication transaction according to aspects of the present invention 

In this process robustness against impersonation is provided via the proof of knowledge of the secret public key provided by the signature with appendix. This implementation relies on random numbers instead of timestamps for robustness against replay attacks. Timestamps are not practical in typical implementations with Chumby devices because the clock on the client side cannot be trusted. The use of two random numbers r and r and ensuring that both of these numbers are referenced in step 4 of the protocol helps provide protection against interleaving attacks. The protocol is also structurally sound against reflection attacks due the asymmetric nature of the protocol. The embedding of rand r in the optional step 5 may provide robustness against chosen plaintext attacks. It will also be noted that there may not be any protection against a forced delay attack inherent in the protocol and consequently the AQS should implement a timeout of its own. Although random numbers are used in this embodiment other approached may be used in alternate implementations.

Because the CP typically has no ability to certify the integrity of its connection to the AQS there exists an opportunity for a type of interleaving or relay attack where a CC is acting as a reflector for authentication requests across multiple devices. The use of the internal clock to measure relative time between authorization requests may not solve the problem entirely but it may be helpful in slowing the rate of leakage to limit damage. Optional steps requiring the User Presence button to be pressed within seconds of the authentication request may also help the system notify the user if they are currently a victim of a relay attack.

While potentially worrisome in some contexts it may also be a feature in other contexts if one or more Chumbys up to the replication limit wish to share content with each other. In other words a system could be designed so that this attack is actually used as a weak e.g. somewhat insecure method for legitimately sharing the authentication with a limited number of Chumbys.

It will be noted that the following feature is optional and users will be generally free to opt out of any authenticity integrity checking if they so desire by simply loading the alternate code they wish to run on the client processor.

Basic operations that the content integrity mechanism may implement are 1 a method for implementing the ONSSA 2 a method for signing a given binary package and 3 A method for verifying the signature of a given binary package.

The ONSSA should be kept off network in all ways and kept in a secure monitored location. The ONSSA typically stores a single private key although new keys may be rotated in at the expense of having to do a lookup on the devices PID to identify the correct key.

When presented with a block of data of a given length the ONSSA may execute a signature algorithm such as the PKCS 1v12 s RSASSA PSS algorithm described in further detail below using the SHA 1 hash and emit the signature as an octet stream.

Verification of the signed data may be done on the client using PKCS 1v12 s RSASSA PSS described in further detail below . The public key for verification may be selected by the index specified in the first octet of the data stream requested for verification. The index may first be checked against the revocation list as described below.

Task 3 Enabling a Revocable Mechanism for Lease of Security Authentication Facilities to Third Party Providers

Implementation may be done in a fashion similar or identical to Task 1 above with the role of the Widget server WS being played by a third party provider.

The Chumby security mechanism has the potential to store multiple public private key pairs. Since one of the biggest challenges in security is how to distribute keys the Chumby system provider s ownership of a database of somewhat hardened keys across a large user base may be an asset. In some embodiments third parties may be enabled to lease authentication keys from an operator of the Chumby system in a fashion that is securely revocable in the case that the third party ceases to require or pay for the authentication service.

Put another way this mechanism opens up the AQS to generic queries from third party servers 3PS that may play the role of the WS in the Task 1 protocol. The third party would thus be given the explicit ability to read the PIDs out of Chumby clients it will be noted that in a typical embodiment any third party with the right software can obtain this information since the PID is an open piece of information and the service Chumby may provide is to authenticate PID s against an internal database of public keys through yes no queries via the AQS. In the situation where the lease is revoked the AQS may simply be configured to deny answering requests from a particular source.

In an exemplary embodiment the CP has a SETAC ASTRONOMY pin. By asserting this pin the CP enters an operational mode where a command set is enabled that will allow the erasing of all secret data inside the CP. This means that the CP is hiding no secrets from the user and it also means that the user can no longer enjoy the authentication benefits of the network. This is a feature that may be provided for owners who believe that the hardware should never hide secrets from them regardless of the potential benefit to the owner.

The following process steps illustrate one embodiment of a procedure for enabling owner token revocation.

As part of the P P PID programming process described previously in Pre Shipping Factory Configuration Test Steps a set of OK s are generated and also burned into the same image.

Widgets are typically configured via a web interface over SSL as described elsewhere herein . Some widgets may require a security token to be presented to enable personalized access for example accessing an owner s MySpace private messages . Recording an owner s token may be done using the following steps 

1. The OK is fetched periodically per step 4 of the process shown previously User Authentication Transaction . Note that the OK may be sent encrypted to the AQS using P.

3. When the ST is entered on the server web page it is immediately encrypted using the OK and the plaintext version is discarded.

Note that in order for this process to work the user must leave their Chumby on and connected so that the OK is periodically refreshed. If the target Chumby is turned off the implementation of the security token handling is defined by service provider policy. In one implementation users are denied the ability to enter an ST without the target Chumby being on and authenticated. An alternate embodiment providing more convenience caches the ST in the plain until the next authorization transaction occurs and updates the OK so that the ST can be encrypted for permanent storage in the database. While more convenient this approach does introduce the possibility of the token being lost stolen or abused for the duration of the interval between when the token is entered and when the token is encrypted.

It will be noted that no matter which implementation is used care must be exercised in implementing the caching of the STs and OKs so that the cached values are securely erased after they have been encrypted. For example it may increase risk to use a transactional database to store the temporary values so that the retired ST and OKs remain in the transaction history of the database and hence remain vulnerable to attack or loss through unintended mechanisms e.g. insecure disposal of broken hard drives with sensitive information on them .

In exemplary embodiments the CP will include a command that enables owner revocation. For example the owner may request the CP to delete a given OK. Two successive requests to delete the same OK using different commands may be required to confirm deletion of a given OK. Once the owner has deleted OKx all of the keys held by the WS may then become unrecoverable.

In some embodiments as a practical cost matter the CP may be configured to perform power management for the Chumby client. In typically embodiments the CP is a general purpose microcontroller and its presence enables the implementation of a soft power on facility using techniques known in the art. It will however be noted that feature creep of outside tasks into the CP represents a potential venue for information leak about the internal state of the CP and therefore careful consideration must be made before providing other features on the CP.

The following section provides a description of details of one embodiment of a system implementation and query parser according to aspects of the present invention.

The CP interface to the core processor is via a TTL level serial link using asynchronous communication at a rate of 38400 8 N 1. The format of the serial data is described below.

The CP implementation consists of a state machine driven by a parser. The parser must first accept a query once it is accepted an internal flush timer is set for the query and it is entered into the query queue. The parser has a reset state which is simply referred to as the Reset State.

The query parser must digest the following query sequence strictly. All unrecognized formats and states must bring the parser to the Reset State and a clearing of all the parser internal variables. The parser expects query data in a stream format with byte being sent first and all data is presented in ASCII format with base 64 encoding.

There is no data for WIPE and SURE. The two commands must be issued back to back and the SETAC ASTRONOMY pin must be active.

In the case of an unrecognized command the CP responds with the string CMD if an unrecognized command is caught. Command parsing is self synchronizing to the EOF character so only one CMD response will be received per malformed request.

Command requests that are too long are not honored even if all the other fields are valid. The response to dishonored commands is simply CMD as well.

These routines may be included in the CP during test and development. They should either be removed and verified and removed or evaluated as not a threat if they remain in place.

A random number can be retrieved from the CP by issuing a RAND string similar to other commands. This isn t harmful per se but it could facilitate attacks on the random number generator if the implementation is flawed. It should be removed before production.

The ADC value of channel at the current time can be requested by the CP for testing purposes by issuing an ADVL string similar to other commands. The channel ADC value is significant because its LSBs are used in the random number generator as an entropy source. The actually value used by the random number generator is never retrieved but there is a possibility of some time correlation between the ADC value and the value used by the random number generator. This should be removed before production.

The CP as implemented for production major version 3 corresponding to spec 1.2 contains the following types of keys 

Referring now to a block diagrammatic representation is provided of the server components and other infrastructure which may be utilized to facilitate the operations of the Chumby service provider . It is understood that the representation of is functional in nature and single or multiple computers may be adapted to execute software designed to perform one or more than one of the functions described below. For example the functionality provided by the load balancers may be provided by a single computer or multiple computers. Similarly each of the servers represented in may be realized using either a single server computer or using a cluster comprised of primary secondary and backup server computers interconnected in configurations familiar to those skilled in the art.

As shown in one or more Web servers are used to define the Web interface presented by the Chumby service provider to users or other interested parties. A system database may include among other things marketing materials press information and contact information relating to the Chumby service that is served by the Web servers . Also included may be information relating to registration and first level support.

A user account server maintains user account data and provides authentication services to the other servers depicted in .

One or more widget servers are used to serve widgets to Chumby devices . Each widget server will typically be sufficiently powerful to encrypt and sign widgets on demand. In addition each server will be configured to store and forward widgets being sent from one user to another.

The service provider may also utilize a number of content servers to provide information e.g. new weather stock market information to Chumby devices . In an exemplary embodiment all content servers function in a pull mode of operation that is Chumby device polls the applicable content server for new data on some periodic basis. Each response from a content server preferably contains the schedule and frequency for subsequent polls. For example a content server disposed to provide stock market information can change the polling frequency to reflect whether or not the stock market is open. In other implementations a Chumby device may be provided with the capability to change polling frequencies on the basis of for example environmental conditions e.g. ambient room brightness or other factors. One or more of the content servers may be used for serving certain types of content uploaded by users for use on their own or other Chumby devices and stored within the system database .

The Chumby service provider will typically maintain a small number of load balanced Network Time Protocol NTP servers to provide time to Chumby devices . Each such server will be configured to fetch their time from a primary NTP server which fetches time from an upstream external public NTP server. If the primary NTP server is inoperative secondary NTP servers will synchronize with a random selection of upstream servers. If all servers are unavailable a Chumby device will either fetch time information from random public NTP servers or simply have its time adjusted via user input. In one embodiment each Chumby device requests time upon connecting to the Internet and at jittered intervals thereafter no more frequently than once a day.

Turning now to an illustrative representation is provided of an exemplary object oriented database schema utilized by the system database . As shown the schema includes the following tables buddies categories Chumby devices parameters profiles skins users widget instance widgets. Although the type of information contained within a number of these tables will be readily apparent to those skilled in the art in view of the discussion herein a simplified example of various steps performed during user registration and the adding of a widget to a profile is provided in order to further illuminate the structure of the database schema .

In one embodiment the user registration and account creation process is initiated by a user through submission via a Web browser of a Chumby ID so as to identify a particular Chumby device . The act of creating a user account results in the construction of a default profile and one or more widget instances each of which is automatically assigned to the Chumby device as identified by its Chumby ID currently being registered. When a user adds a widget to the user s profile the user is presented with a list of potential categories based upon information within the categories table. The user then selects a category from the categories table and the user is presented with a list of widgets belonging to the chosen category. After the user chooses a widget a widget instance is constructed and information is entered into the appropriate fields e.g. profile id widget id index . The user is then presented a user interface via the Web browser for editing the widget specific parameters associated with the selected widget. In response to the user s parameter selections records are appropriately updated in the parameters table.

In general it is contemplated that embodiments of the invention will be implemented such that each Chumby device will function as a client relative to various servers existing within the Chumby service provider . In these embodiments the Chumby devices do not engage in direct communication with each other but may do so via independent client sever relationships established with the service provider . In this way the service provider may facilitate the communication of a variety of different types of executable files e.g. widgets or other computer programs audio clips short Flash movies etc. among Chumby devices subject to the permission of the content owner and potential recipient. A user may designate that a widget or other content be sent to another user or to the members of a user s buddy list or the like. This designation may be made via a Web browser in communication with the service provider or directly through the interface of the user s Chumby device .

In one embodiment executable files may be created by users of Chumby devices or other third parties and loaded within the system database after being approved by the entity operating the service provider . Once a widget or other executable file has been created and stored within the system database it is made available for use by all those users of Chumby devices that have been granted the requisite permission. Various schemes for granting permissions among and between users are possible. For example one such type of permission could entail that any user X that is given permission by a user Y to send widgets to user Y s Chumby device may select any widget for which user X has usage rights and send such widget to user Y s Chumby device. Other restrictions could be placed on the transferability of widgets or other files from the service provider to a Chumby device at the request of another user. For example a user could be provided with the capability to lock certain widgets on only the user s Chumby device or a Chumby device could reach a full state and advertise itself as being incapable of receiving any additional widgets.

Although widgets and other executable files could be transferred between the service provider and Chumby devices in a number of different formats in one embodiment such transfers will occur in the Flash movie format i.e. as .swf files when not signed or encrypted . In this case the process for downloading widgets from the service provider includes receiving a notification at a Chumby device that a new widget is ready for downloading. Since in the exemplary embodiment each Chumby device acts in a pull mode each device periodically polls the service provider and inquires as to whether any configuration changes are available to load. In the case in which a new widget is available for downloading the Chumby device will generally use standard HTTP or HTTPS protocols in downloading the applicable widget file.

Attention is now directed to which are a series of signal flow diagrams representative of the client server communication protocol established between a Chumby device and the Chumby service provider . As mentioned above each Chumby device functions as a client relative to the Chumby service provider . In one embodiment the basic protocol established between each Chumby device and the corresponding server entity of the Chumby service provider may be characterized as XML using a Representational State Transfer REST architecture transmitted using HTTP. In general the Chumby device issues periodic HTTP GET or POST requests and the service provider responds with a block of XML. The Chumby device will use HTTP GET for relatively simple requests and POST for more complex requests which will be in encapsulated in XML. Individual data elements are uniquely identified by Global Unique Identifiers GUID . In one embodiment there will be some form of cryptographic key exchange and transactions will be encrypted using those keys. Furthermore XML may be compressed in order to facilitate transfer between the Chumby device and the Chumby service provider .

Referring to a signal flow diagram illustratively represents one manner in which a Chumby configuration is provided to a Chumby device by the service provider . In one embodiment each Chumby device operates in accordance with a configuration which specifies the profile to be loaded by the Chumby device under various conditions. The user specifies the profile for the Chumby device via a web interface at the Chumby web site. The profile contains several operational parameters for the Chumby device .

As shown in the requesting of a configuration is initiated when the Chumby device sends an HTTP GET request containing the GUID of the requested configuration to a Chumby configuration object within the system database maintained by the service provider stage . An example of such a request is provided below 

Referring to a signal flow diagram illustratively represents one manner in which a profile is provided to a Chumby device by the service provider . In one embodiment each Chumby device operates in accordance with a profile which specifies the set of widgets to be executed by the Chumby device under various conditions. This enables a user to specify that a certain subset of the available set of widgets is to be instantiated and utilized during a particular time frame based upon the location of the user s Chumby device or the skin or housing within which the Chumby device is currently seated. For instance the user may desire that local weather and traffic information be provided while the user is located at home but would prefer that airline flight information be available from the Chumby device when the user is traveling.

As shown in the requesting of a profile is initiated when the Chumby device sends an HTTP GET request containing the GUID of the requested profile to a profile object within the system database maintained by the service provider stage . An example of such a request is provided below 

Each Profile has a name a description a skin and a list of Widget Instances . The Profile will be periodically refetched in order to reflect changes made by the owner for instance adding and removing Widget Instances.

The Chumby device processes each Widget Instance in turn fetching the settings for each widget and the Widget itself and displays the Widget with the settings encapsulated by the Widget Instance.

A process similar to that described with reference to may be used to change a profile. An example of an HTTP POST containing an the GUID of the profile to modify and an XML based request to change a profile generated by the Chumby device is given below 

Turning now to there are shown signal flow diagrams representative of the communication of widget instance information from the Chumby device to the service provider and vice versa. In one embodiment the set of parameters associated with a widget instance determine the user specified manner in which the behavior of the widget is modified when executed by a Chumby device . That is the parameters fetched by the Chumby device from the service provider for a given widget constitute the user s customized settings rather than dynamic content. For example in the case of a stock ticker widget the applicable parameters could comprise the names and symbols of the stocks within the user s portfolios but would not define or relate to the current prices of the stocks which would be furnished by another service supplied by the service provider .

As shown the widget instance change operation is initiated when the Chumby device sends an HTTP POST and an XML request to a widget instance object within the system database maintained by the service provider stage . This type of UPLOAD operation informs the service that the parameters of a specific widget instance have been updated by the applicable user. As shown the updated parameters are received by the service provider stage and are attempted to be written to a corresponding widget instance object within the system database stage . If this attempted write operation is unsuccessful stage the service provider responds with an error message that is processed by the requesting Chumby device stage . If the write operation is successful the newly updated widget instance are retrieved from the system database stage and sent to the applicable Chumby device stage .

Once received the widget instance is processed by the Chumby device stage . In general the processing of the parameters contained in a widget instance are dependent upon the characteristics of the particular widget. In certain cases the parameters may be sufficient to enable the widget to display information while other widgets may use the parameters to fetch content from another service. As an example of the former consider a clock widget capable of displaying information following receipt of a parameter indicating a time zone. In contrast a stock widget may have stock symbols as parameters and use such symbols to fetch quote information.

Referring now to there is shown a signal flow diagram illustrating an exemplary widget instance download operation in which the service provider is requested to push values of widget specific parameters to a requesting Chumby device . The requesting of a parameter download is initiated when the Chumby device sends an HTTP GET containing the GUID of the requested widget instance request to a parameter object within the system database maintained by the service provider stage . An example of such a request in the case of a weather widget is provided below 

The Chumby device uses the GUID in the widget tag to fetch the information about the Widget to be displayed. Once the widget has been started it is passed the name value pairs in the widget parameters section in order to customize the behavior of the widget.

If the requested parameters do not exist a default widget instance is attempted to be retrieved from the system database stage . If such a widget instance exists stage the service provider responds with an XML based parameters message that is processed by the Chumby device upon receipt stage . If such a default widget instance does not exist an error message is returned to the Chumby device stage .

Referring now to a signal flow diagram is provided which illustratively represents the process of downloading the code for a widget e.g. a .swf file from the service provider for execution on a Chumby device . The process is initiated when the Chumby device sends an HTTP GET request containing the GUID of the requested widget to a specific widget description object within the system database maintained by the service provider stage . An example of such a request is provided below 

The service provider receives the request stage and attempts to retrieve the requested widget description from the system database or other data source available to the service provider stage . If the requested widget description is able to be retrieved the service provider responds with an XML based widget description message if not the service provider responds with an XML based error message stage . An exemplary XML based response generated by the service provider is given below 

Once the requested widget description is received by the Chumby device the Chumby device uses the URL referencing the movie for the requested widget to download the movie e.g. .swf file from the service provider . The Chumby device sends an HTTP GET request containing the GUID of the requested movie to a specific movie object within the system database maintained by the service provider stage . An example of such a request is provided below 

The service provider receives the request stage and attempts to retrieve the requested movie from the system database or other data source available to the service provider stage . If the requested movie is able to be retrieved the service provider responds with the .swf file which implements the movie if not the service provider responds with an XML based error message stage . Once the requested movie is received by the Chumby device it is loaded by the Master Controller and queued for subsequent execution stage . If an error is instead received it is processed accordingly stage .

Referring now to a signal flow diagram is provided which illustratively represents the process of obtaining content from the service provider for a widget of a Chumby device . The process is initiated when the Chumby device sends an HTTP GET and an optional XML request to a specific content object within the system database maintained by the service provider stage . An example of such a request for content for a tide widget is provided below 

The service provider receives the request stage and attempts to retrieve the requested content from the system database internal content service external content service or other data source available to the service provider stage . If the requested content is able to be retrieved the service provider responds with an XML based content message if not the service provider responds with an XML based error message stage . Once the requested content is received by the Chumby device corresponding audiovisual output is generated by the device for the benefit of its user stage . If an error is instead received it is processed accordingly stage . An exemplary XML based response generated by the service provider is given below 

In the case where content is retrieved directly from an external content service provider i.e. from other than the service provider a series of web based transactions most likely HTTP and or XML based defined by such content service provider will take place between the Chumby device and such provider.

Chumby devices may optionally include a hardware security module which in one implementation is accessed via a character driver interface in the operating system OS of the device . The module may or may not be installed. When the module is not installed the OS preferably virtualizes the hardware security module by emulating it in software. While losing all the security benefits of a hardware module this feature enables cost reduction savings while maintaining protocol interoperability with a secured system.

The hardware security module of a Chumby device may be implemented in a number of ways. As an example the hardware security module may be implemented using a cryptographic Smart Card module. This module or its emulated counterpart is capable of at a minimum the following operations 1 storage of secret numbers in hardware 2 the ability to compute public key signatures 3 the ability to compute one way cryptographic hashes and 4 the ability to generate crytographically trusted random numbers.

During the manufacturing process the hardware security module or its emulated counterpart is initialized with a set of secret numbers that are only known to the module and to the Chumby service provider . These secret numbers may or may not consist of public and private keys. If the numbers consist of public and private keys then a mutual key pair is stored by both the Chumby service provider and the hardware module along with a putative insecure identifier number for the pair. Furthermore these numbers are prefereably not recorded by the Chumby service provider in association with any other identifying information such as the MAC address for the WLAN interface or any other serial numbers that are stored in insecure memory for customer service purposes.

When the user or service wishes to initiate a strong authenticated transaction the Chumby device sends the putative insecure key pair identifier to the service provider . The service provider looks up the putative insecure key pair identifier and issues a challenge to the hardware module consisting of a random number and time stamp encrypted by the public key whose private key is stored only inside the target hardware module. In particular the challenge is packetized and sent through the Internet to the Chumby device . The device unpacks the challenge and passes it directly to the hardware module. The hardware module decrypts the random number and time stamp optionally hashing it adds another time stamp and encrypts the entire message with the unique server public key associated with the putative insecure key pair identifier. Again this message is packetized and transmitted by the device to the service provider over the Internet. Upon receipt the service provider decrypts the message and verifies that the random number or its hash is valid and that the timestamps are unique and increasing within a reasonable error bound. At the conclusion of this transaction the service provider has authenticated the device and can fall back to any number of session keys that can be either dynamically generated or statically stored for further secured transactions. Advantageously this authentication transaction does not involve uniquely associating the hardware module with user information. Rather the service provider is simply aware of the existence of the approved hardware module and upon completion of the authentication transaction may safely trust the integrity of the secrets stored therein.

A user of the device may opt out of privacy mode and provide identifying information as required by some billing services such as credit cards and banks. Optionally an anonymous cash based transaction network can be established where accounts are opened and managed only by secrets contained within the hardware module.

To enable limited revocation of user identifying information the specific embodiment of the master authentication protocol should operate on a set of clean room servers with a multiplicity of connections that are trusted by the Chumby service provider and authenticated session keys are then passed on laterally to the content servers. Thus the anonymity of the master authentication key is nominally preserved although it is possible to recreate and correlate transactions from forensic logs and transaction timings. The use of multiple servers and multiple connections along with network routing randomization techniques can be used to increase the anonymization resistance to forensic logging cf. Tor network but this configuration is in no way essential to the network s operation.

Attention is now directed to which are a set of flowcharts representative of the calibration registration and initial operation of a Chumby device and associated account management functions.

In one embodiment a Chumby device downloads configuration information from the service provider each time it is powered on or otherwise re establishes communication with the service provider . However a minimal amount of widget and configuration information may be locally stored on a Chumby device so that it may continue to function in the absence of network connectivity. For example a clock widget may be permanently stored on a Chumby device so that its clock function could remain operational at all times. A Chumby device will typically include sufficient memory capacity to hold configuration information received from the service provider for all of the widgets to be executed by the device up to some reasonable number of widgets. If a user changes the configuration for a Chumby device through the Web site maintained by the service provider a polling function implemented on the corresponding Chumby device will typically be used to pull the modified configuration information from the service provider . Alternatively an operation may be manually initiated via the interface of the corresponding Chumby device in order to obtain this information e.g. an Update My Chumby Device Now operation .

Turning now to there is shown a flowchart which illustrates an exemplary routine used to calibrate the touchscreen of a Chumby device . provide a set of screen shots of the user interface of the Chumby device being calibrated pursuant to the routine of . As shown the calibration routine involves determining an upper left set point stage after the user has initiated the routine by touching the touchscreen of the device . This set point is determined by generating a target through the LCD screen which the user is then prompted to tap. A lower right set point is then determined by prompting the user to tap a target depicted in stage . Similarly a center set point is next determined by prompting the user to tap a target depicted in stage . The results of the calibration process are then stored stage . Based upon the coordinate data received from the touchscreen during each of stages and the CPU executes a program to generate calibration information used during subsequent operation of the device . A screen is then displayed to the user indicating that the calibration process has been completed .

During or prior to stage the user may also be provided with the opportunity to enter a desired channel frequency and to select a mode of encryption e.g. WEP WPA WPA2 . Although describes the case in which WEP has been selected as the desired encryption methodology those skilled in the art will recognize that similar operations may be performed following selection of an alternate encryption methodology.

Referring now to a flowchart is provided of an exemplary account creation and registration process . The process begins upon presentation by the device via its LCD screen of its serial number or other identifying information stage . The user then logs in via a Web browser to a web site operated by the service provider e.g. www.chumby.com stage . In one embodiment the user may then select a create new user account tab or the like stage and is prompted to enter an email address stage password stage and name stage . In certain implementations the user may also be offered the opportunity to enter his or her address stage while in other implementations the user is not prompted to provide an address until this information is required for some particular purpose e.g. to provide a billing information for a subscription or shipping information for a product purchase . If this option is selected the user enters his or her address stage . At this point the service provider sends an email to the address entered in stage which contains a click through account activation hyperlink stage . If the user does not receive this message stage the user is provided with the opportunity to take advantage of various customer service options in order to remedy the account creation difficulties being experienced stages . In any event the account creation process is then finalized stage and the Chumby device being registered is associated within the system database with a particular user account in the manner described below stage . Once this has occurred a default configuration and a number of widget instances are established for the newly registered Chumby device stage .

Referring now to a flowchart is provided of exemplary Web based interaction occurring between a user and the service provider with regard to disabling a Chumby device that has been previously associated with the user s account. As shown the user logs in to the account via a Web browser stage and selects a Disable Chumby device tab or the equivalent stage . The user then selects the Chumby device to be disabled from a list based upon either the device s serial number or description stage . Next the user is prompted to confirm the selection stage and if so all references to the disabled Chumby device are removed from the directory maintained within the system database stage . The process is then completed whether or not the selection is confirmed stage at which point the service provider no longer responds to requests from the Chumby device which has been disabled.

Attention is now directed to which are a set of flowcharts representative of Web based widget selection removal and configuration processes contemplated by embodiments of the present invention. Screen shots of exemplary user interfaces presented by the Web browser used to facilitate certain of these processes are illustrated in .

Turning now to a top level flowchart is provided of exemplary Web based interaction occurring between a device user and the service provider with regard to adding removing and configuring widget profiles relative to the user s Chumby device. Although a user may have the impression that a Chumby device itself is being configured through the process of in the exemplary embodiment a profile currently assigned to the user s Chumby device is instead configured.

As shown in the user logs in to the user s account maintained with the service provider via a Web browser stage and proceeds to the user s home page or the equivalent stage . From this home page the user selects a Set Up device tab or the like stage and the Web browser presents a corresponding Set Up page stage . The user then selects the Chumby device profile to be configured from a list based upon either the device s serial number or description stage . The current configuration for the selected device profile is then retrieved from the system database and loaded into the device stage . Once this has occurred the user selects an action to be performed as is illustrated by stage . Such actions may include for example adding deleting or editing widget profiles. If the user opts to add widget profiles stage then the Web browser displays an Add Widgets Page through which widget profiles may be added to the current configuration of the applicable Chumby device in the manner described below with reference to stage . If the user instead chooses to delete widget profiles from such current configuration stage then a Delete Widgets Page is presented through which the deletion operation may be completed consistent with the approach described below with reference to stage . Alternatively the user may select another Chumby device profile to configure stage or simply exit and return to the user s home page stage .

If the user decides to exit the process of adding widgets to the current configuration the user may perform one of several actions including but not limited to select another Chumby device to configure navigate to another page on the Chumby site log out from the Chumby site or close the applicable browser window stage . If the user instead chooses to save the current widget configuration for the applicable Chumby device stage the user selects a Submit Commit Ok or similar button to cause any changes made to be recorded in the system database stage . After either saving the current widget configuration or electing to exit the process the user may be directed to a predefined page stage .

Referring now to a flowchart is provided which is representative of exemplary Web based interaction occurring between a device user and the service provider in connection with the removal of widgets from the current configuration of the user s Chumby device. Upon being presented with a Remove Widget Page stage the user may elect to either de activate a selected widget stage delete a selected widget stage or exit the process stage . If widget de activation is chosen the user is prompted to confirm the choice stage . Once such confirmation has been provided the widget is marked as inactive on the page currently being rendered by the Web browser stage . In addition the widget configuration for the Chumby device of interest is updated within the system database stage . Similarly if it is instead chosen to delete the selected widget the user is prompted to confirm the choice stage . Once such confirmation has been provided the widget is marked as deleted on the page currently being rendered by the Web browser stage and the widget configuration for the Chumby device of interest is updated stage . If confirmation to de activate or delete the selected widget is not provided stages and the Web browser goes to a Choose Widget Page through which a different widget may be selected for removal or de activation.

In an exemplary embodiment the service provider populates a corresponding widget and parameters tables within the system database in accordance with the user s parameter selections. In this regard the widget table may include an XML based param desc xml field containing instructions enabling the construction of associated records in parameters table. For example for a clock widget the XML based instructions could indicate that a time zone should be a valid parameter and could also be utilized to create appropriate records in the parameters table.

It is noted that in various embodiments the present invention may relate to processes such as are described or illustrated herein and or in the related applications. These processes are typically implemented in one or more modules comprising systems as described herein and or in the related applications and such modules may include computer software stored on a computer readable medium including instructions configured to be executed by one or more processors. It is further noted that while the processes described and illustrated herein and or in the related applications may include particular stages it is apparent that other processes including fewer more or different stages than those described and shown are also within the spirit and scope of the present invention. Accordingly the processes shown herein and in the related applications are provided for purposes of illustration not limitation.

As noted some embodiments of the present invention may include computer software and or computer hardware software combinations configured to implement one or more processes or functions associated with the present invention such as those described above and or in the related applications. These embodiments may be in the form of modules implementing functionality in software and or hardware software combinations. Embodiments may also take the form of a computer storage product with a computer readable medium having computer code thereon for performing various computer implemented operations such as operations related to functionality as describe herein. The media and computer code may be those specially designed and constructed for the purposes of the present invention or they may be of the kind well known and available to those having skill in the computer software arts or they may be a combination of both.

Examples of computer readable media within the spirit and scope of the present invention include but are not limited to magnetic media such as hard disks optical media such as CD ROMs DVDs and holographic devices magneto optical media and hardware devices that are specially configured to store and execute program code such as programmable microcontrollers application specific integrated circuits ASICs programmable logic devices PLDs and ROM and RAM devices. Examples of computer code may include machine code such as produced by a compiler and files containing higher level code that are executed by a computer using an interpreter. Computer code may be comprised of one or more modules executing a particular process or processes to provide useful results and the modules may communicate with one another via means known in the art. For example some embodiments of the invention may be implemented using assembly language Java C C C or other programming languages and software development tools as are known in the art. Other embodiments of the invention may be implemented in hardwired circuitry in place of or in combination with machine executable software instructions.

The foregoing description for purposes of explanation used specific nomenclature to provide a thorough understanding of the invention. However it will be apparent to one skilled in the art that specific details are not required in order to practice the invention. Thus the foregoing descriptions of specific embodiments of the invention are presented for purposes of illustration and description. They are not intended to be exhaustive or to limit the invention to the precise forms disclosed obviously many modifications and variations are possible in view of the above teachings. The embodiments were chosen and described in order to best explain the principles of the invention and its practical applications they thereby enable others skilled in the art to best utilize the invention and various embodiments with various modifications as are suited to the particular use contemplated. It is intended that the following claims and their equivalents define the scope of the invention.

