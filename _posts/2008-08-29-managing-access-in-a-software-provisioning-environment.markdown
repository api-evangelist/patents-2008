---

title: Managing access in a software provisioning environment
abstract: A provisioning server can be configured to associate user actions with users that have access to perform the associated user actions. The user actions can include any user action performed within or by the provisioning server, such as configuring the provisioning server, modifying provisioning objects in the provisioning server, accessing provisioning processes by the provisioning server, and the like. The association can be based on the identity of the users or a type of user (administrator, client, guest, etc.). Once a request is received for a particular user action, the provisioning server can be configured to enable the requested action if the requested action is associated with the requesting user.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09111118&OS=09111118&RS=09111118
owner: Red Hat, Inc.
number: 09111118
owner_city: Raleigh
owner_country: US
publication_date: 20080829
---
Software provisioning is the process of selecting a target machine such as a server loading the appropriate software operating system device drivers middleware and applications and customizing and configuring the system and the software to make it ready for operation. Software provisioning can entail a variety of tasks such as creating or changing a boot image specifying parameters e.g. IP address IP gateway to find associated network and storage resources and then starting the machine and its newly loaded software. Typically a system administrator will perform these tasks using various tools because of the complexity of these tasks. Unfortunately there is a lack of provisioning control tools that can adequately integrate and automate these tasks.

Typically software provisioning is performed on target machines regardless of the user requesting the software provisioning. A user can request software provisioning on different target machines and the software provisioning environment has no mechanism to determine whether the user should be granted the provisioning services. As such the software provisioning environment cannot authenticate the users requests. Additionally because the software provisioning environment cannot discriminate particular users different levels of access cannot be provided by the software provisioning environment.

Additionally the software provisioning environment should allow users to administer machines that they control but not allow them access to reinstall or manage machines they do not have access to. For instance a lab administrator should have access to control installation of machines in his lab but not outside of his network while a site administrator should be able to more widely access provisioning settings. Similarly there may be different levels of administrators administering a network. One administrator may need access to be able to reinstall hardware but not have access to change the definitions of what is being installed. Conventional provisioning environments however do not allow for levels of access or control to handle these situations. Accordingly it would be desirable to provide a provisioning environment in which users can be assigned access levels and software provisioning actions can be provided based on the access levels.

For simplicity and illustrative purposes the principles of the present invention are described by referring mainly to exemplary embodiments thereof. However one of ordinary skill in the art would readily recognize that the same principles are equally applicable to and can be implemented in all types of information and systems and that any such variations do not depart from the true spirit and scope of the present invention. Moreover in the following detailed description references are made to the accompanying figures which illustrate specific embodiments. Electrical mechanical logical and structural changes may be made to the embodiments without departing from the spirit and scope of the present invention. The following detailed description is therefore not to be taken in a limiting sense and the scope of the present invention is defined by the appended claims and their equivalents.

Embodiments of the present teachings relate to systems and methods for providing access in a software provisioning environment. More particularly a provisioning server can assign different access levels to users in the software provisioning environment and provide access to the environment based on the access levels.

In embodiments to provide access in the provisioning environment a provisioning server can be configured to associate user actions with users that have access to perform the associated user actions. The user actions can include any user action performed within or by the provisioning server such as configuring the provisioning server modifying provisioning objects in the provisioning server accessing provisioning processes by the provisioning server and the like.

In embodiments the provisioning server can be configured to include an access module. The access module can be configured to assign different levels of access to users in the software provisioning environment. In particular the access module can be configured to associate the users with the user actions available to the users. The association can be based on the identity of the users or a type of user administrator client guest etc. .

In embodiments once a request is received for a particular user action the provisioning server can be configured to enable the requested action if the requested action is associated with the requesting user. In particular the provisioning server can be configured to verify that the requesting user has access to the particular user action. The access module can be configured to perform the verification. Likewise the verification can be performed by an external source and the provisioning server can be configured to receive a verification message.

In embodiments the provisioning server can be configured to maintain user records for each user that can request user actions in the software environment. The user records can include identity information for each user associated with the user actions available to the user. Additionally the user records can be maintain by the external source.

In embodiments the provisioning server can be configured to authenticate the identity of the requesting user. In particular the access module can be configured to authenticate the user identity to ensure that the requesting user is authentic. Additionally the authentication of identity can be performed by the external source and the provisioning server can be configured to receive an authentication message.

In embodiments to provide access the provisioning server can be configured to provide a network user interface to the user. The network interface can be configured to allow the user enter identity and authentication information and request user actions.

By providing access controls the provisioning server can allow a user to be assigned different access levels. As such the provisioning server can provide different levels of software provisioning processes to different users. Additionally by providing access controls the provisioning server can maintain security and integrity in the software provisioning environment and provide ownership to different actions in the software provisioning environment. By allowing individual users access to install and manage provisioning actions for machines they own the needs of a central administrator to perform these tasks is reduced. Also by splitting the verification and authentication processes each process can be implemented with different protocols.

In particular the provisioning environment can manage software provisioning using a hierarchy of commands. In exemplary embodiments the hierarchy can include at least four levels of commands. The lowest level in the hierarchy can comprise distribution commands which primarily handle base operating system specific tasks of provisioning. The second level can comprise profile commands which associate a configuration file such as a kickstart file for Linux or other operating system with a distribution and optionally allow for customization. The third level comprises system commands which associate remote systems that are involved with the provisioning of the software. The fourth level comprises repository commands which address configurations and tasks related to updating the software remote installation procedures and optionally customizing the software.

The provisioning environment provides several capabilities and advantages over the known provisioning solutions. For example the present invention is capable of handling a variety of forms of installations such as preboot execution environment PXE virtualization re installations and image installations.

In exemplary aspects the provisioning environment enables integrating virtualization into a PXE provisioning infrastructure and provides several options to reinstall running machines as well. The provisioning environment can integrate mirroring of package repositories with the provisioning process so that a provisioning server may serve as a central mirror point of contact for all of an organization s software needs. In aspects a set of remote mirrored repositories can automatically be used by provisioned systems without additional setup.

Reference will now be made in detail to the exemplary aspects the provisioning environment . The provisioning environment can be applied to provisioning any form of software such as Windows systems UNIX systems and Linux systems. In the exemplary description that follows is presented to explain the provisioning environment for provisioning software such as Linux and Linux based software such as Fedora and Red Hat Enterprise Linux by Red Hat Inc.

In provisioning of software such as Linux many system administrators use what is known as the kickstart installation method. Kickstart files are files that specify the intended configuration of the software being provisioned. Kickstart files can be kept on a server and can be read by individual computers during the installation. This installation method allows the use a single or relatively few standard kickstart files to install Linux on multiple machines making it ideal for network and system administrators.

The kickstart file can be a simple text file containing a list of items each identified by a keyword. In general a kickstart file can be edited with any text editor or word processor that can save files as ASCII text. One skilled in the art will recognize that the present invention may be applied to non kickstart files in software provisioning. For example configuration files such as AutoYAST Answer files used in Novell SuSe Linux and Sun Solaris Jumpstart files may also be used by the provisioning environment .

Typically a kickstart file can be copied to the boot disk or made available on the network. The network based approach is most commonly used as most kickstart installations for software provisioning such as Linux systems tend to be performed via a network using NFS FTP or HTTP on networked computers. Administrators also find it desirable that kickstart installations can be performed using a local CD ROM or a local hard drive.

Using kickstart files a system administrator can create a single file containing the parameters that are needed to complete a typical software installation. For example kickstart files specify parameters related to language selection mouse configuration keyboard selection boot loader installation disk partitioning network configuration NIS LDAP Kerberos Hesiod and Samba authentication firewall configuration and package selection.

According to exemplary aspects illustrated in the provisioning environment can include a provisioning server a code repository which provides access to distributions and a set of installation templates a set of exception plugins a helper client running on target machines in a network a provisioning database which comprises a distribution tree list and template list . Each of these components will now be further described.

The provisioning server from herein referred to as a cobbler is responsible for serving as a extensible markup language remote procedure call XMLRPC handler linking to or mirroring install distribution trees and a configuration database hosting kickstart templates hosting plugins generating installation images and the like. The cobbler server can be implemented as software such as Python code installed on a boot server machine and provides a command line interface for configuration of the boot server. In addition the cobbler server can make itself available as a Python application programming interface API for use by higher level management software not shown . The cobbler server supports provisioning via PXE image ISO installation virtualization re provisioning. As will be described later the last two modes are performed with the assistance of a helper client .

The code repository is responsible for hosting distributions and . The code repository may be implemented using well known components of hardware and software. Additionally the code repository can be include one or more repositories hosting distributions. The distributions and can include bundles of software that is already compiled and configured. The distributions and may be in the form of either rpm deb tgz msi exe formats and the like. For example as Linux distributions the distributions and are bundles of software that comprise the Linux kernel the non kernel parts of the operating system and assorted other software. The distributions and can take a variety of forms from fully featured desktop and server operating systems to minimal environments.

In exemplary aspects the installation templates are any data structure or processing element that can be combined with a set of installation configurations and processed to produce a resulting configuration file such as a kickstart file.

In exemplary aspects exception plugins is software that interacts with cobbler server to customize the provisioning of software. In general the exceptions plugins are intended to address infrequent customization needs.

In exemplary aspects the helper client known as koan which stands for kickstart over a network can assist the cobbler server during the provisioning processes. The koan can allow for both network provisioning of new virtualized guests and destructive provisioning of any existing system. When invoked the koan can request profile information from a remote boot server that has been configured with the cobbler server . In some aspects what the koan does with the profile data depends on whether it was invoked with virt or replace self.

In exemplary aspects the koan can enable replacing running systems as well as installing virtualized profiles. The koan can also be pushed out to systems automatically from the boot server. In some aspects the koan client is also written in Python code to accommodate a variety of operating systems machine architectures etc.

In exemplary aspects the network can include a number of the target machines . The target machines can represent the particular machines to which software provisioning is directed. The target machines may represent a wide variety of computing devices such as personal computers servers laptop computers personal mobile devices and the like. In some aspects the target machines can represent distributed computing environments such as cloud computing environments. Although shows several of the target machines the provisioning environment can be capable of managing a wide range environments such as datacenters with thousands of machines or server pools with just a few machines. Additionally the cobbler server can be connected to multiple networks .

In exemplary aspects the provisioning database can serve as a data storage location for holding data used by the cobler server . For example as shown the provisioning database can comprise the distribution tree list and the template list . The distribution tree list can provide an inventory of the distributions and that are hosted or mirrored by the cobbler server . The template list can provide an inventory of the templates that are hosted by the cobbler server .

As noted above the cobbler server can manage provisioning using a hierarchical concept of distribution commands profile commands system commands and repository commands. This framework enables the cobbler server to abstract the differences between multiple provisioning types installation reinstallation and virtualization and allows installation of all three from a common platform. This hierarchy of commands also permits the cobbler server to integrate software repositories with the provisioning process thus allowing systems to be configured as a mirror for software updates and third party content as well as distribution content.

Distributions can contain information about base operating system tasks such as what kernel and initial ramdisk initrd are used in the provisioning along with other information such as required kernel parameters. Profiles associate one of the distributions and with a kickstart file and optionally customize it further for example using plugins . Systems commands associate a hostname IP or MAC with a distribution and optionally customize the profile further. Repositories contain update information such as yum mirror information that the cobbler server uses to mirror repository . The cobbler server can also manage generate DHCP configuration files using the templates .

In exemplary aspects the cobbler server can use a provisioning environment that is fully templated allowing for kickstarts and PXE files to be customized by the user. The cobbler server uses the concept of profiles as an intermediate step between the operating system and the installed system. A profile is a description of what a system does rather than the software to be installed. For instance a profile might describe a virtual web server with X amount of RAM Y amounts of disk space running a Linux distribution Z and with an answer file W.

In exemplary aspects the cobbler server can provide a command line interface to configure a boot server in which it is installed. For example the format of the cobbler server commands can be generally in the format of cobbler command subcommand arg132 arg2 . Thus a user can specify various aspects of software provisioning via a single interface such as a command line interface or other known interface. Examples of exemplary cobbler commands can be found in U.S. patent application Ser. No. 11 763 315 U.S. Patent Application Publication No. 2008 0288938 and U.S. patent application Ser. No. 11 763 333 U.S. Patent Publication No. 2008 0288939 the disclosures of which are incorporated herein in their entirety by reference.

According to exemplary aspects a user can use various commands of the provisioning environment to specify distributions and install trees hosted by the code repository such as a distribution from the distributions or . A user can add or import a distribution or import it from installation media or an external network location.

According to exemplary aspects in order to import a distribution the cobbler server can auto add distributions and profiles from remote sources whether his is an installation media such as a DVD an NFS path or an rsync mirror. When importing a rsync mirror the cobbler server can try to detect the distribution type and automatically assign kickstarts. By default in some embodiments the cobbler server can provision by erasing the hard drive setting up etho for DHCP and using a default password. If this is undesirable an administrator may edit the kickstart files in etc cobbler to do something else or change the kickstart setting after the cobbler server creates the profile.

According to exemplary aspects a user may map profiles to the distributions and map systems to the profiles using profile commands and systems commands of the provisioning environment . A profile associates a distribution to additional specialized options such as a kickstart automation file. In the cobbler server profiles are the unit of provisioning and at least one profile exists for every distribution to be provisioned. A profile might represent for instance a web server or desktop configuration.

According to exemplary aspects a user can map systems to profiles using system commands. Systems commands can assign a piece of hardware with cobbler server to a profile. Systems can be defined by hostname Internet Protocol IP address or MAC address. When available use of the MAC address to assign systems can be preferred.

According to exemplary aspects the user can map repositories and profiles using repository commands. Repository commands can address configurations and tasks related to updating the software remote installation procedures and optionally customizing the software. These repository commands can also specify mirroring of the provisioned software to remote servers. Repository mirroring can allow the cobbler server to mirror not only install the trees and but also optional packages third party content and updates. Mirroring can be useful for faster more up to date installations and faster updates or providing software on restricted networks. The cobbler server can also include other administrative features such as allowing the user to view their provisioning configuration or information tracking the status of a requested software installation.

According to exemplary aspects a user can utilize commands to create a provisioning infrastructure from a distribution mirror. Then a default PXE configuration is created so that by default systems will PXE boot into a fully automated install process for that distribution. The distribution mirror can be a network rsync mirror or a mounted DVD location.

According to exemplary aspects the administrator uses a local kernel and initrd file already downloaded and shows how profiles would be created using two different kickstarts one for a web server configuration and one for a database server. Then a machine can be assigned to each profile.

According to exemplary aspects a repo mirror can be set up for two repositories and create a profile that will auto install those repository configurations on provisioned systems using that profile.

According to exemplary aspects in addition to normal provisioning the cobbler server can support yet another option called enchant . Enchant takes a configuration that has already been defined and applies it to a remote system that might not have the remote helper program installed. Users might want to use this command to replace a server that is being repurposed or when no PXE environment can be created. Thus the enchant option allows the remote the koan client to be executed remotely from the cobbler server .

According to aspects if the cobbler server is configured to mirror certain repositories the cobbler server can then be used to associate profiles with those repositories. Systems installed under those profiles can be auto configured to use these repository mirrors in commands and if supported these repositories can be leveraged. This can be useful for a large install base fast installation and upgrades for systems are desired or software not in a standard repository exists and provisioned systems are desired to know about that repository.

According to exemplary aspects the cobbler server may also keep track of the status of kickstarting machines. For example the cobbler status will show when the cobbler server thinks a machine started kickstarting and when it last requested a file. This can be a desirable way to track machines that may have gone inactive during kickstarts. The cobbler server can also make a special request in the post section of the kickstart to signal when a machine is finished kickstarting.

According to exemplary aspects for certain commands the cobbler server will create new virtualized guests on a machine in accordance to the orders from the cobbler server . Once finished an administrator may use additional commands on the guest or other operations. The cobbler server can automatically name domains based on their MAC addresses. For re kickstarting the cobbler server can reprovision the system deleting any current data and replacing it with the results of a network install.

According to exemplary aspects the cobbler server can configure boot methods for the provisioning requested by the user. For example the cobbler server can configure a PXE environment such as a network card BIOS. Alternatively the cobbler server can compile and configure information for koan client . The cobbler server can also optionally configured DHCP and DNS configuration information.

According to exemplary aspects the cobbler server can serve the request of the koan client . The koan client can acknowledge the service of information of the cobbler server and then can initiate installation of the software being provisioned. Additionally the koan client can either install the requested software e.g. replace the existing operating system or install a virtual machine.

In embodiments to provide access in the provisioning environment the cobbler server can be configured to associate user actions with users for example users or administrator that have access to perform the associated user actions. The user actions can include any user action performed within or by the cobbler server such as configuring the cobbler server modifying or creating provisioning objects in the cobbler server accessing provisioning processes by the cobbler server and the like.

In embodiments the provisioning objects can include all the data required by a cobbler server to perform the software provisioning processes such as the process described above supported by the cobbler server. For example the provisioning objects can include software distributions configuration templates templates for generating configuration files such as kickstart files distribution profile information mapping a distribution to profile a configuration template or a configuration file and additional preferences such as kernel options template variables or virtual machine settings target machine information information representing the mapping of a physical piece of hardware plus hardware specific customizations to a profile that it should run repos information information representing external or internal software repositories stored on the cobbler server images such as distributions representing an undefined executable image like memtest a virtual machine to be cloned or an ISO file for use in installing a virtual machine and the like.

In embodiments the cobbler server can be configured to include an access module . The access module can be configured to assign different levels of access to users in the software provisioning environment . In particular the access module can be configured to associate the users with the user actions available to the users. The association can be based on the identity of the users or a type of user administrator client guest etc. For example administrator can be associated with all user actions for the cobbler server whereas users can be associated with actions related to target machines installing re installing configuring profiles for the target machines virtualization etc. . The cobbler server can be configured to associate the users independently or under the direction or assistance of the administrator or users .

In embodiments the cobbler server can be configured to receive a request such as request for a user action. The request can include information such as identity of the requesting user authentication information and user action requested. Once a request is received for a particular user action the cobbler server can be configured to enable the requested action if the requested action is associated with the requesting user. In particular the cobbler server can be configured to verify that the requesting user has access to the particular user action. The access module can be configured to perform the verification.

For example in an exemplary embodiment the access module can be configured to associate target machines with particular users . As such the users can request user actions e.g. software provisioning process modify profiles etc. for target machines with which they are associated. Additionally the access module can be configured to associate a set of software distributions a set of templates and or a set of profiles with the particular users . As such the users can request software provisioning processes for the associated set of software distributions associated set of templates and or associated set of profiles on the target machines with which they are also associated. As such the cobbler server can provide ownership to various target machines and software distribution templates and profiles.

In embodiments the cobbler server can be configured to authenticate the identity of the requesting user. In particular the access module can be configured to authenticate the user identity to ensure that the requesting user is authentic. For example once the request is received the provisioning server can authenticate the requesting user . In particular the access module can authenticate the requesting user based on the authentication information available to the cobbler server and the information in the request . The access module can be configured to authenticate the user using any type of security or cryptographic method such as password checks digital signatures digital certificates digest files and the like. For example the access module can be configured to use well known protocols such as Kerberos lightweight directory assistance protocol LDAP and the like. Additionally the access module can be configured to use any type of user developed or proprietary protocol.

In embodiments the access module can be implemented as a portion of the code for the cobbler server . Likewise the access module can be implemented as a separate software tool accessible by the cobbler server . The access module can be written in a variety of programming languages such as JAVA C Python code and the like to accommodate a variety of operating systems machine architectures etc. Additionally the access module can be configured to include the appropriate application programming interfaces APIs to communicate with and cooperate with other components of the cobbler server and to communicate with an external source the koan clients target machines and users .

In embodiments to verify the users and authenticate the users the cobbler server can be configured to maintain a user record for each user that can request user actions. For verification the record can include identity information for the user user name login name type of user etc. the target machines associated with the user machine identification network information etc. and user actions associated with the user . For authentication the records can also include authentication information for the user password digital certificate encryption decryption keys etc. . The cobbler server can be configured to maintain the record for each user in a repository such as database .

In embodiments to receive requests and register the users the cobbler server can be configured to provide a network user interface to the users. The network user interface can be configured to allow the user to enter identity information authentication information target machines and request user action. For example the cobbler server can be configured to generate and provide a web based network user interface using formats or combination of formats such as hypertext markup language HTML extensible markup language XML Javascript and the like.

Additionally in embodiments the verification and or the authentication processes can be performed by the external source . The external source can be any type of application software module or computer system configured to perform the verification and or authentication described above. As such the external source can be configured to authenticate the users using any type of security or cryptographic method such as password checks digital signatures digital certificates digest files and the like. For example the external source can be configured to use well known protocols such as Kerberos lightweight directory assistance protocol LDAP and the like. Additionally the external source can be configured to use any type of user developed or proprietary protocol.

The external source can be written in a variety of programming languages such as JAVA C Python code and the like to accommodate a variety of operating systems machine architectures etc. Additionally the external source can be configured to include the appropriate application programming interfaces APIs to communicate with and cooperate with other components of the cobbler server and to communicate with the koan clients target machines and users .

In embodiments for verification and or authentication by the external source when a user transmits a request for a user action the request can be received by the external source or the cobbler server can pass the request to the external source for verification and or authentication. In response the external source can be configured to send a message back to the cobbler server . The message include an indication that the user is verified and or authenticated to access the requested action. As such the cobbler server can enable the action based on the message .

Additionally in embodiments the external source can maintain all or a portion of the user records to provide the verification and or authentication processes. For example if performing only authentication the external source can maintain the authentication information for the user and the cobbler server can maintain the verification information user identities and associated user action .

Processor further communicates with network interface such as an Ethernet or wireless data connection which in turn communicates with one or more networks such as the Internet or other public or private networks. Processor also communicates with the provisioning database the access module to execute control logic and perform the software provisioning processes and access control described above. Additionally the processor can communicate with the external source to perform the software provisioning processes and access control described above. Other configurations of the cobbler server associated network connections and other hardware and software resources are possible.

While illustrates the cobbler server as a standalone system comprising a combination of hardware and software the cobbler server can also be implemented as a software application or program capable of being executed by a convention computer platform. Likewise the cobbler server can also be implemented as a software module or program module capable of being incorporated in other software applications and programs. In either case the cobbler server can be implemented in any type of conventional proprietary or open source computer language.

In the cobbler server can receive a request for a user action from a user. The request can include the identity information of the user the authentication information of the user and the user action requested. Alternatively the external source can receive the request from the user or from the cobbler server .

Then in the cobbler server or the external source can authenticate the identity of the user. For example the access module can compare the authentication information provided to the authentication information contained in the record . Alternatively the external source can compare the authentication information provided to the authentication information contained in the record and the external source can provide an indication of the authenticity in a message .

Once authenticated in the cobbler server or the external source can verify the user has access to the requested action. For example the access module can check the record to determine if the requesting user has access to the requested action. Alternative the external source can check the record to determine if the requesting user has access to the requested action and the external source can provide an indication of the verification in the message .

Then in if the requesting user is authenticated and verified the cobbler server can enable the requested action. In the process can end but the process can return to any point and repeat.

While the invention has been described with reference to the exemplary embodiments thereof those skilled in the art will be able to make various modifications to the described embodiments without departing from the true spirit and scope. The terms and descriptions used herein are set forth by way of illustration only and are not meant as Limitations. In particular although the method has been described by examples the steps of the method may be performed in a different order than illustrated or simultaneously. Those skilled in the art will recognize that these and other variations are possible within the spirit and scope as defined in the following claims and their equivalents.

