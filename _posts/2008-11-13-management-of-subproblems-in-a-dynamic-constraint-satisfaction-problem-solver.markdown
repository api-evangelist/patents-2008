---

title: Management of sub-problems in a dynamic constraint satisfaction problem solver
abstract: A solver solves a dynamic constraint satisfaction problem that is modeled as a constraint network of variables and constraints. The solver generates a dynamic sub-problem facility that includes one or more sub-problem pools that each comprises a sub-problem type, one or more sub-problems for the sub-problem type, and one or more clients for the sub-problem type. The solver generates a sub-problem set domain that comprises zero or more included sub-problems and zero or more excluded sub-problems. The solver synchronizes the sub-problem set domain with the dynamic sub-problem facility.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08065255&OS=08065255&RS=08065255
owner: Oracle International Corporation
number: 08065255
owner_city: Redwood Shores
owner_country: US
publication_date: 20081113
---
One embodiment is directed generally to a computer system and in particular to a constraint based computer system that solves dynamic constraint satisfaction problems.

Many of the tasks that are addressed by decision making systems and artificial intelligence systems can be represented as constraint satisfaction problems CSP s . In this representation the task is specified in terms of a set of variables each of which can assume values in a given domain and a set of constraints that the variables must simultaneously satisfy. The set of variables domains and constraints is referred to as a CSP. Each constraint may be expressed as a relation defined over some subset of the variables denoting valid combinations of their values. A solution to a CSP is an assignment of a value to all the variables from their respective domains that satisfies all of the constraints.

A constraint based system includes a constraint solver that attempts to find one or more solutions to a given CSP or prove that no solution exists. Constraint based systems are used for many artificial intelligence related applications and a variety of other applications including 1 Product configurators 2 Robotic control 3 Temporal reasoning 4 Natural language processing 5 Spatial reasoning 6 Test case generation for software and hardware systems 7 Machine vision 8 Medical diagnosis 9 Resource allocation and 10 Frequency allocation.

The network of constraints in a CSP can be viewed as a graph having a node for each variable and arc for each constraint. The members of each arc are the variables that appear in the constraint to which the arc corresponds. An arc is said to be consistent if for any variable of the arc and any value in the domain of the variable there is a valid assignment of values to the other variables on the arc that satisfies the constraint represented by the arc.

Classes of problems exist which are comprised of very large sets of variables that may only be conditionally related or required for a solution. One example of such problems is the configuration of large component based systems. For example selecting a type of hard disk controller for a computer configuration is not needed if a hard disk has not been chosen as a form of storage. If instead flash memory is chosen a different set of variables and constraints would be required to be solved. Known CSP solvers do not allow the representation of conditional structure or reasoning over an inclusion of a variable in a solution. Techniques have been developed to allow such large problems to be represented as a set of smaller sub problems conditionally related through composition or association. A dynamic constraint satisfaction problem is one in which these sub problems of variables and constraints can be incrementally added as required either explicitly or as a result of inference from the propagation of constraints.

One known approach to minimize large CSP problems is referred to as Conditional CSP and includes the notion of a variable being active or inactive as well as constraints to activate a variable. In this approach a variable is only assigned a value in the final solution if it is active. Conditional CSP is limited in that it does not provide any significant space savings in large problems nor does it allow for segmentation of related variables into sub problems. Another known approach is referred to as Generative CSP and extends Conditional CSP by introducing the concept of components which are groups of related variables and component type which is the further extension and specialization of these components. However similar to Conditional CSP Generative CSP is still implemented in terms of activity state and does not provide real space savings.

One embodiment is a solver that solves a dynamic constraint satisfaction problem that is modeled as a constraint network of variables and constraints. The solver generates a dynamic sub problem facility that includes one or more sub problem pools that each comprises a sub problem type one or more sub problems for the sub problem type and one or more clients for the sub problem type. The solver generates a sub problem set domain that comprises zero or more included sub problems and zero or more excluded sub problems. The solver synchronizes the sub problem set domain with the dynamic sub problem facility.

One embodiment is a dynamic constraint based system that models a problem as a Constraint Satisfaction Problem by defining sub problems and encapsulating the sub problem variables and constraints. The sub problems can be stored and managed so they can be independently reused in different sub problem sets and solutions.

Computer readable media may be any available media that can be accessed by processor and includes both volatile and nonvolatile media removable and non removable media and communication media. Communication media may include computer readable instructions data structures program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media.

Processor is further coupled via bus to a display such as a Liquid Crystal Display LCD for displaying information to a user. A keyboard and a cursor control device such as a computer mouse is further coupled to bus to enable a user to interface with system .

In one embodiment memory stores software modules that provide functionality when executed by processor . The modules include an operating system that provides operating system functionality for system . The modules further include a dynamic constraint solver module that performs dynamic constraint solving and sub problem storage as disclosed in more detail below. System can be part of a larger system that includes a constraint solver such as a product configurator or artificial intelligence system. Therefore system will typically include one or more additional functional modules to include the additional functionality.

In one embodiment a problem to be solved is modeled as a CSP. The CSP model definition may include variables that further encapsulate an optional type abstracted CSP sub problem. Embodiments ensure that a minimal required set of variables is present in the system and include methods to expand or reduce the set of variables as required by the solution.

Model definition may be used as a defined sub problem model for another CSP model. For example is a CSP model definition for a Home Theater type. Model definition includes a variable Video Screen which is defined as an instance of the sub problem TV defined by model definition as indicated by the TV within the curly brackets. Model definition further includes constraints. An example of a constraint for model definition is Seating distance is at least twice the screen size .

In one embodiment the sub problem type is further abstracted to group explicit types into an inheritance hierarchy that provides efficient reasoning similar to object oriented programming. Abstracting common features of two types A and B into a common super type C means that these features are now described without redundancy. On the individual component level type abstraction also allows efficient reasoning. For example for a given point in time if it is not clear whether type A or B will be advantageous for a certain component then the common properties and constraints represented by C can already be used to prune the search space without precluding any choice. A child type inherits all variables and constraints of its parent type and can add additional variables and constraints.

Type abstraction represents a hierarchy of abstract types and concrete types. An abstract type in the hierarchy possesses the set of properties that correspond to the intersection of all properties of its subtypes. For example after a component has been assigned an abstract type t its type assignment will later need to be refined to a subtype of t either by the constraint solver explicitly choosing that variable for refinement or because filtering removes other subtypes of t from consideration. A valid final assignment to be part of a solution will then be the assignment of a concrete type.

In one embodiment dynamic constraint solver utilizes the hierarchical structure of to provide an encapsulation of a set of sub problem variables and constraints into a single variable. In dynamic structured problems there may be two types of structures defined through different problem set variables. One type represents a composition relationship to sub problems. The other type represents an association relationship to peer problem instances. The dynamic structure allows for efficient management of the variables and constraints related to a given sub problem. is a data structure diagram that illustrates the composition of a sub problem variable in accordance with one embodiment. As shown in diagram the single sub problem variable includes the model type e.g. the Television type of one or more variables and zero or more constraints. Data structure diagram is an actual encapsulation of the sub problem elements into a single variable as opposed to the virtual grouping that is done in known CSP systems.

In one embodiment dynamic constraint solver provides a sub problem set variable that represents a set of optional sub problem variables. This allows a sub problem to be both conditionally and multiply instantiated in the solution. is a data structure diagram that represents the composition of a sub problem set variable in accordance with one embodiment. The sub problem set includes a model type e.g. the Television type of and a set of zero or more sub problem variables e.g. the sub problem variable of of the given type. As an example for the model type Home Theater of the variable AV Component is an optional and multi instantiable sub problem set because it has a domain cardinality of 0.6.

In one embodiment dynamic constraint solver instantiates an encapsulated sub problem and adds it to the primary problem thereby extending the set of variables in the solution. This is done in a manner that avoids the necessity of restarting and redefining the problem as is required by many prior art solvers. In one embodiment a constraint problem to be solved by dynamic constraint solver is modeled as a constraint network that includes a node for each variable in the problem and an edge between the nodes for each constraint in the problem. A choice of a value for a variable can be made by a user or through some other means. For example if the problem is for a product configurator a user makes a choice when interacting with the configurator model. The user choice may be a representation of an action by the user in the configurator user interface UI . Examples of a user choice include clicking a checkbox entering a number in a box choosing a number or choice within a drop down box etc. The user choices or choices made in any other manner are added and managed in a manner that allows for efficient backtracking and or negation.

At the choice is received and stored. The choice can be stored using any type of internal representation of the choice and in one embodiment is stored in memory . The choice at may cause one or more associated outward constraints in the constraint network to be affected i.e. due to the propagation of the choice throughout the constraint network which may modify the associated node for each constraint.

At it is determined if the nodes for the constraint have changed. If so at the previous state for each changed node is stored and associated with the added choice at .

At if the nodes for the constraint have not changed or after storing the previous state at it is determined if there are additional constraints to evaluate from the choice. If there are the flow returns to . In this manner the propagation of the entire constraint network as a result of the choice is evaluated and the previous state of any nodes that have changed in response to the choice is saved.

When the functionality of is complete for each node affected by propagation in the constraint network the prior domain state is recorded and is associated with the current choice. In one embodiment dynamic constraint solver instantiates an encapsulated sub problem and adds it to the primary problem thereby extending the set of variables in the solution. Because the prior art domain state has been recorded stored this is done in a manner that avoids the necessity to restart and redefine the problem as is required by prior art constraint solver systems. Further dynamic constraint solver views the sub problem set as including all possibilities from the beginning when adding a sub problem. Therefore adding a sub problem is reducing rather than expanding the problem which also avoids the need for restarting. is a flow diagram of the functionality of dynamic constraint solver when creating instantiating an encapsulated sub problem and connecting i.e. through an association relationship or a composition relationship it to the base primary problem.

At the sub problem type is associated with a variable. As disclosed above a sub problem variable has a type such as the TV type of

At sub problems variables are created within the sub problem instance. For example the TV type of has variables Size Weight etc.

At sub problem constraints are created within the sub problem instance. At this point all information needed for the data structure diagram of that represents the sub problem variable has been assembled.

At the sub problem constraints are propagated and consistency checked on the constraint network. The propagation at is an initial consistency checking of the sub problem constraints to establish their starting state given the runtime state of the CSP problem. Therefore the functionality of starting at is executed when each constraint is propagated. The propagation at this point is limited to the sub problem variable to reduce the amount of computing necessary.

If a conflict is detected at at the prior state of the nodes is restored so that the state of the network reverts to its state prior to the creation and propagation of the constraints. Because the functionality of was executed the prior state has been recorded and associated with the current constraint before the constraint was propagated. At the failure of the sub problem addition is reported.

If no conflict was detected at at the constraint connecting the sub problem to the base problem is added and propagated and the sub problem set of is successfully instantiated. In one embodiment connecting the sub problem to the base problem is similar to storing an arbitrary association of a component to structure in a CSP solver. In one embodiment the association of the base problem and the sub problem is stored in memory .

At it is determined if a conflict is detected as a result of the propagation of the constraint. If a conflict is detected the functionality continues at where the previous state of the nodes is restored.

Because of the functionality of dynamic constraint solver can revert the sub problem instantiation thereby ensuring efficient backtracking. Because the sub problem variables and constraints are encapsulated within the sub problem instance variable and the sole connection to the base problem is via a connection constraint removing the instance becomes a simple matter of removing the connection constraint. The sub problem can then either be discarded or retained for future reuse. Without the connection to the base problem it is no longer considered part of the solution.

Dynamic constraint solver provides multiple methods for creating and connecting a dynamic sub problem. In one embodiment the sub problem set of provides application programming interface methods or user interfaces which allow a user to explicitly create an instance of a given sub problem type as well as a method to create a connection between the sub problem instance and the sub problem set. For example a button may be displayed on a user interface that allows a user to select add a TV . This may result in the TV sub problem to be added to a home entertainment problem set with the associated constraints and variables.

In another embodiment dynamic constraint solver provides a method of implicitly creating and connecting in the solution a dynamic sub problem by reasoning over the cardinality of the containing set variable. The sub problem set of includes among its properties a cardinality which is a reflection of the number of members within the set. The cardinality of the sub problem set can be reasoned over by constraints as any numeric variable. As an example for SubProblemSet.card .gt 0 adding a numeric constraint enforcing that the cardinality of the SubProblemSet variable is greater than 0 may lead to the automatic addition of sub problem variables to the set.

In another embodiment dynamic constraint solver provides a method of implicitly creating and connecting in the solution a dynamic sub problem by reasoning over the abstract component type of the containing set variable. The sub problem set of includes among its properties a type which is a reflection of the type or family of types of the sub problem variables within the set. The type of the sub problem set can be reasoned over by constraints as any variable. As an example for Video Screen.isType PL52 using the variables and types disclosed in and above specifying that the Video Screen may only be of type PL52 will cause an instance of a sub problem variable of type PL52 to be created within the Video Screen set.

As disclosed above for solving a Dynamic CSP in one embodiment sub problems of variables and constraints can be incrementally added as required either explicitly or as a result of inference from the propagation of constraints. As with sub problem additions problems involving the generation and placement of components often exhibit symmetry under the interchange of component associations. For example consider a computer system composed of cards in slots. If a solution consisting of card A in slot and card B in slot satisfies a given set of requirements it is possible that the solution consisting of card B in slot and card A in slot is equally satisfactory. This symmetry introduces a degree of arbitrariness to the way in which inferences involving component existence and association are exhibited during an interactive session with a configurator or any other application that solves a CSP. Having determined for instance that card A is required in the solution the solver may reasonably place it in slot even though it may equally well have gone in slot .

A typical constraint solver system finds a solution to a given problem by making assignments to variables and well as backtracking over those assignments to explore alternatives until a complete set of assignments is found which respects all of the problem constraints. Because the solution to a Dynamic CSP can expand to include multiple optional sub problems the process of searching and backtracking can lead to the repeated addition and removal of sub problems to find a valid solution. Further symmetries may exist in the CSP that lead to the generation of identical sub problems in the solution. Without careful considerations this process can have detrimental results on performance.

In response in order to minimize the costs associated with adding a dynamic sub problem to a CSP one embodiment of the system specifically manages and reuses sub problems and provides a domain implementation for sub problems that allows the system to reason over both absolute and potential sub problems.

In one embodiment a data structure of a domain object functions as a set whose domain values are sub problems. illustrates a sub problem set domain object in accordance with one embodiment. Domain object allows for reasoning over and differentiation of sub problems that are included in the solution and those sub problems that may be potentially included in the solution. Domain object may be used by a CSP variable to maintain which sub problem instances are included in the variable domain which are excluded and which are potential candidates for inclusion . An example of an excluded sub problem would be a prohibition against a TV sub problem being placed in a living room when solving a home configuration. For example a TV greater than 50 inches may be prohibited from being placed in a living room due to size or style constraints.

In one embodiment dynamic constraint solver synchronizes sub problem set domain with sub problem cache . This is done to ensure that the domain correctly reflects those sub problems that may or may not be considered candidates for inclusion in the solution. is a flow diagram of the functionality of dynamic constraint solver when synchronizing sub problem set domain with storage cache in accordance with one embodiment.

The synchronization between sub problem cache and sub problem set domain is enabled by client list maintained by each sub problem pool of . When a noteworthy event occurs in sub problem pool such as the addition or removal of a sub problem of sub problem instances at a first one of the clients registered to that storage pool is selected. Examples of noteworthy events include a sub problem becoming unavailable to all clients for example it may be established that only one sub problem TV may be used in a configuration and that TV may already have been used or a new sub problem becoming available to all clients for example a new sub problem TV may be configured and its availability needs to be communicated to all clients . At the selected client is notified of the event and can update its internal states accordingly. At it is determined if there are any other clients registered in the storage pool. If yes functionality continues at . If no the functionality ends. The functionality of enables a single sub problem to be used and re used either exclusively or not by any sub problem variable of the given type.

As disclosed embodiments allow dynamic CSP sub problems to be added to a sub problem pool so that the sub problems are available to and can be easily connected to multiple clients. A notification mechanism informs the clients of the status of the availability of the sub problems.

Several embodiments are specifically illustrated and or described herein. However it will be appreciated that modifications and variations of the disclosed embodiments are covered by the above teachings and within the purview of the appended claims without departing from the spirit and intended scope of the invention.

