---

title: Systems, methods and computer program products for automatic network-based persistent XML storage and management
abstract: Systems, methods and computer program products for automatic network-based persistent XML storage and management. Exemplary embodiments include a method including loading an XDM widget having internal XML, sending an XCAP GET request via an XCAP URI parameter, retrieving an existing XML document at a location associated with the XCAP URI parameter, invoking an initializer callback function via the XDM widget to populate the internal XML with default values associated with an etag, wherein the etag is null, sending an XCAP PUT request via the XCAP URI to store the existing XML document, executing etag header scenarios, providing XML management functions to automatically publish changes to the server, and trigger a timer function to poll for updates from the server and display the resulting updates to the user's screen via a render callback function.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07844574&OS=07844574&RS=07844574
owner: International Business Machines Corporation
number: 07844574
owner_city: Armonk
owner_country: US
publication_date: 20080416
---
IBM is a registered trademark of International Business Machines Corporation Armonk N.Y. U.S.A. Other names used herein may be registered trademarks trademarks or product names of International Business Machines Corporation or other companies.

This invention relates to XML data management and storage and particularly to systems methods and computer program products for automatic network based persistent XML storage and management for Web 2.0.

With the emergence of the Web 2.0 service creation model for next generation web applications there is a need to manage and store XML data on the network for central and persistent access.

Exemplary embodiments include a method including loading an XDM widget having internal XML sending an XCAP GET request via an XCAP URI parameter retrieving an existing XML document at a location associated with the XCAP URI parameter invoking an initializer callback function via the XDM widget to populate the internal XML with default values associated with an etag wherein the etag is null sending an XCAP PUT request via the XCAP URI to store the existing XML document executing etag header scenarios including when the etag is null sending an if not match header in the XCAP request to ensure that an existing document is not replaced if one exists when the etag is not null sending an if match in the XCAP request to ensure that an existing document that matches the client etag is replaced and replacing the local XML document with a document version on the server. XDM Widget functions can be provided to modify the local XML document for which the widget automatically pushes the updates to the server via XCAP methods to synchronize the XML document on the server. Conversely a timer can be triggered to periodically poll the server via XCAP GET requests to check for new updates to the server s copy of the XML document. New updates of the XML document on the server can then be synchronized with the local XML document which triggers a callback function to render the new XML document to the user s screen.

System and computer program products corresponding to the above summarized methods are also described and claimed herein.

Additional features and advantages are realized through the techniques of the present invention. Other embodiments and aspects of the invention are described in detail herein and are considered a part of the claimed invention. For a better understanding of the invention with advantages and features refer to the description and to the drawings.

As a result of the summarized invention technically we have achieved a solution in which a JavaScript widget can be created that encapsulates the notion of an XML document that is persisted and managed by the XDMS. The widget can persist and manage the state of an XML document that represents the data model used by a JavaScript application. All of this can be done automatically without the JavaScript application invoking the XmlHttpRequest object.

The detailed description explains the preferred embodiments of the invention together with advantages and features by way of example with reference to the drawings.

In exemplary embodiments the systems and methods described herein include an XML Document Management Server XDMS that provides such XML storage and management services via an XCAP over HTTP interface. In exemplary embodiments the systems and methods described herein include a RESTFUL interface that allows for creating PUT updating PUT fetching GET deleting DELETE and searching POST of XML documents within the XDMS. In exemplary embodiments a JavaScript widget can be created that encapsulates the notion of an XML document that is persisted and managed by the XDMS. The widget can persist and manage the state of an XML document that represents the data model used by a JavaScript application. All of this can be done automatically without the JavaScript application invoking the XmlHttpRequest object.

In exemplary embodiments in terms of hardware architecture as shown in the computer includes a processor memory coupled to a memory controller and one or more input and or output I O devices or peripherals that are communicatively coupled via a local input output controller . The input output controller can be for example but not limited to one or more buses or other wired or wireless connections as is known in the art. The input output controller may have additional elements which are omitted for simplicity such as controllers buffers caches drivers repeaters and receivers to enable communications. Further the local interface may include address control and or data connections to enable appropriate communications among the aforementioned components.

The processor is a hardware device for executing software particularly that stored in memory . The processor can be any custom made or commercially available processor a central processing unit CPU an auxiliary processor among several processors associated with the computer a semiconductor based microprocessor in the form of a microchip or chip set a macroprocessor or generally any device for executing software instructions.

The memory can include any one or combination of volatile memory elements e.g. random access memory RAM such as DRAM SRAM SDRAM etc. and nonvolatile memory elements e.g. ROM erasable programmable read only memory EPROM electronically erasable programmable read only memory EEPROM programmable read only memory PROM tape compact disc read only memory CD ROM disk diskette cartridge cassette or the like etc. . Moreover the memory may incorporate electronic magnetic optical and or other types of storage media. Note that the memory can have a distributed architecture where various components are situated remote from one another but can be accessed by the processor .

The software in memory may include one or more separate programs each of which comprises an ordered listing of executable instructions for implementing logical functions. In the example of the software in the memory includes the XML storage and management methods described herein in accordance with exemplary embodiments and a suitable operating system OS . The operating system essentially controls the execution of other computer programs such as XML storage and management systems and methods described herein and provides scheduling input output control file and data management memory management and communication control and related services.

The XML storage and management methods described herein may be in the form of a source program executable program object code script or any other entity comprising a set of instructions to be performed. When a source program then the program needs to be translated via a compiler assembler interpreter or the like which may or may not be included within the memory so as to operate properly in connection with the O S . Furthermore the XML storage and management methods can be written as an object oriented programming language which has classes of data and methods or a procedure programming language which has routines subroutines and or functions.

In exemplary embodiments a conventional keyboard and mouse can be coupled to the input output controller . Other output devices such as the I O devices may include input devices for example but not limited to a printer a scanner microphone and the like. Finally the I O devices may further include devices that communicate both inputs and outputs for instance but not limited to a NIC or modulator demodulator for accessing other files devices systems or a network a radio frequency RF or other transceiver a telephonic interface a bridge a router and the like. The system can further include a display controller coupled to a display . In exemplary embodiments the system can further include a network interface for coupling to a network . The network can be an IP based network for communication between the computer and any external server client and the like via a broadband connection. The network transmits and receives data between the computer and external systems. In exemplary embodiments network can be a managed IP network administered by a service provider. The network may be implemented in a wireless fashion e.g. using wireless protocols and technologies such as WiFi WiMax etc. The network can also be a packet switched network such as a local area network wide area network metropolitan area network Internet network or other similar type of network environment. The network may be a fixed wireless network a wireless local area network LAN a wireless wide area network WAN a personal area network PAN a virtual private network VPN intranet or other suitable network system and includes equipment for receiving and transmitting signals.

If the computer is a PC workstation intelligent device or the like the software in the memory may further include a basic input output system BIOS omitted for simplicity . The BIOS is a set of essential software routines that initialize and test hardware at startup start the OS and support the transfer of data among the hardware devices. The BIOS is stored in ROM so that the BIOS can be executed when the computer is activated.

When the computer is in operation the processor is configured to execute software stored within the memory to communicate data to and from the memory and to generally control operations of the computer pursuant to the software. The XML storage and management methods described herein and the OS in whole or in part but typically the latter are read by the processor perhaps buffered within the processor and then executed.

When the systems and methods described herein are implemented in software as is shown in it the methods can be stored on any computer readable medium such as storage for use by or in connection with any computer related system or method. In the context of this document a computer readable medium is an electronic magnetic optical or other physical device or means that can contain or store a computer program for use by or in connection with a computer related system or method. The XML storage and management methods described herein can be embodied in any computer readable medium for use by or in connection with an instruction execution system apparatus or device such as a computer based system processor containing system or other system that can fetch the instructions from the instruction execution system apparatus or device and execute the instructions. In exemplary embodiments a computer readable medium can be any means that can store communicate propagate or transport the program for use by or in connection with the instruction execution system apparatus or device. The computer readable medium can be for example but not limited to an electronic magnetic optical electromagnetic infrared or semiconductor system apparatus device or propagation medium. More specific examples a non exhaustive list of the computer readable medium would include the following an electrical connection electronic having one or more wires a portable computer diskette magnetic a random access memory RAM electronic a read only memory ROM electronic an erasable programmable read only memory EPROM EEPROM or Flash memory electronic an optical fiber optical and a portable compact disc read only memory CDROM optical . Note that the computer readable medium could even be paper or another suitable medium upon which the program is printed as the program can be electronically captured via for instance optical scanning of the paper or other medium then compiled interpreted or otherwise processed in a suitable manner if necessary and then stored in a computer memory.

In exemplary embodiments where the XML storage and management methods are implemented in hardware the XML storage and management methods described herein can implemented with any or a combination of the following technologies which are each well known in the art a discrete logic circuit s having logic gates for implementing logic functions upon data signals an application specific integrated circuit ASIC having appropriate combinational logic gates a programmable gate array s PGA a field programmable gate array FPGA etc.

In exemplary embodiments if the current etag is null then the if not match header is sent in the XCAP request to ensure that an existing document is not replaced if one exists. If the current etag is not null then the if match header is sent in the XCAP request to ensure that an existing document that matches the client etag will be replaced. For the above to cases if the HTTP response indicates a conflict then that means the local XML document is stale and must be replaced by the version on the server. The following description discusses the steps that follow in exemplary embodiments.

Upon subsequent XCAP GET requests to the XDMS the latest version of the XML document is returned to the widget and the processor callback function is invoked to read the new XML document data. Also the appropriate headers such as last modified date and etag are also made available as public variables within the widget. APIs are provided to modify the sub elements and or attributes. An XPATH can be used to represent the node path to the modified sub element or attribute which is sent as part of the XCAP PUT request to the XDMS to modify the stored document. A timer is set configurable to automatically send an XCAP GET request that includes if not match HTTP header. This refreshes the document whenever etag value has changed someone has modified the document on the XDMS . A destroy API is provided to clear the document from the XDMS. An XCAP DELETE request is sent to the XDMS to remove the stored document.

The XDM widget provides generic management of XML documents against an XDMS and is agnostic of the actual XML document information. Typically another application specific widget that has awareness of the XML document content encapsulates the XDM widget to provide the initializer and processor callback functions. The processor callback functions can inspect the XML and set global variables which can be used for mashup purposes.

The capabilities of the present invention can be implemented in software firmware hardware or some combination thereof.

As one example one or more aspects of the present invention can be included in an article of manufacture e.g. one or more computer program products having for instance computer usable media. The media has embodied therein for instance computer readable program code means for providing and facilitating the capabilities of the present invention. The article of manufacture can be included as a part of a computer system or sold separately.

Additionally at least one program storage device readable by a machine tangibly embodying at least one program of instructions executable by the machine to perform the capabilities of the present invention can be provided.

The flow diagrams depicted herein are just examples. There may be many variations to these diagrams or the steps or operations described therein without departing from the spirit of the invention. For instance the steps may be performed in a differing order or steps may be added deleted or modified. All of these variations are considered a part of the claimed invention.

While the preferred embodiment to the invention has been described it will be understood that those skilled in the art both now and in the future may make various improvements and enhancements which fall within the scope of the claims which follow. These claims should be construed to maintain the proper protection for the invention first described.

