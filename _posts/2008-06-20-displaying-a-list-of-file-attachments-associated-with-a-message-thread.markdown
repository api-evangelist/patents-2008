---

title: Displaying a list of file attachments associated with a message thread
abstract: Technologies are described herein for displaying a list of file attachments associated with a message thread an email application. The messages associated with the message thread are identified, along with any file attachments attached to those messages. An aggregated attachment list is generated containing an entry for each file attachment associated with the message thread. The aggregated attachment list associated with the message thread is then displayed in a window of the email application.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08631079&OS=08631079&RS=08631079
owner: Microsoft Corporation
number: 08631079
owner_city: Redmond
owner_country: US
publication_date: 20080620
---
The development of reports presentations and other documents often involves collaboration between multiple remote individuals within an organization or group. However even in corporate environments that have access to collaboration software or other file sharing technologies individuals often use email to collaborate utilizing file attachments to share documents with each other or to distribute versions of documents for review and editing.

For example one person may send an initial email message containing an attached document to several individuals in the organization. Each of these individuals may in turn revise the documents often renaming the document in such a way to reflect that modifications have been made. The modified document may then be returned to the sender in a reply message or forwarded to others in the organization. The messages sent back and forth in response to the initial message together make up a conversation or message thread. The message thread may eventually include several file attachments representing different versions of the original document referred to herein as the root file.

Users accessing their emails through traditional email applications may be provided with a mechanism to view all the messages associated with a message thread either in date order or in a hierarchical display indicating the flow of messages among the individuals involved in the message thread. The display of messages associated with the message thread may also provide an indication of the messages that include a file attachment.

However there is currently no easy way to aggregate together all of the different file attachments that have been attached or modified by the individuals involved in the conversation or message thread. An email user typically accesses each message in the message thread that has an attachment manually in order to identify the root files associated with the message thread. Further users typically determine manually the most recent version of each root file by reviewing the varying names and last modified dates of each file attachment related to the root file.

Technologies are described herein for displaying a list of file attachments associated with a message thread in an email application. The messages associated with the message thread are identified along with any file attachments attached to those messages. An aggregated attachment list is generated containing an entry for each file attachment associated with the message thread. The aggregated attachment list associated with the message thread is then displayed in a window of the email application.

It should be appreciated that the above described subject matter may be implemented as a computer controlled apparatus a computer process a computing system or as an article of manufacture such as a computer readable medium. These and various other features will be apparent from a reading of the following Detailed Description and a review of the associated drawings.

This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter nor is it intended that this Summary be used to limit the scope of the claimed subject matter. Furthermore the claimed subject matter is not limited to implementations that solve any or all disadvantages noted in any part of this disclosure.

The following detailed description is directed to technologies for displaying an aggregated attachment list in an email application that contains a list of file attachments associated with a message thread or conversation. The aggregated attachment list allows a user to view and interact with all the file attachments or root files associated with the message thread in a single location. By providing the aggregated attachment list the user no longer needs to manually access each message in the message thread to identify the root files associated with the message thread. Nor will the user have to manually determine the most recent version of each root file by reviewing the varying names and last modified dates of each file attachment related to the root file.

While the subject matter described herein is presented in the general context of program modules that execute in conjunction with the execution of an operating system and application programs on a computer system those skilled in the art will recognize that other implementations may be performed in combination with other types of program modules. Generally program modules include routines programs components data structures and other types of structures that perform particular tasks or implement particular abstract data types. Moreover those skilled in the art will appreciate that the subject matter described herein may be practiced with other computer system configurations including hand held devices multiprocessor systems microprocessor based or programmable consumer electronics minicomputers mainframe computers and the like.

In the following detailed description references are made to the accompanying drawings that form a part hereof and which show by way of illustration specific embodiments or examples. Referring now to the drawings in which like numerals represent like elements through the several figures aspects of a methodology for displaying a list of file attachments associated with a message thread will be presented.

Turning now to details will be provided regarding an illustrative operating environment and several software components provided by the embodiments presented herein. illustrates an exemplary system for displaying an aggregated attachment list in an email application. The system includes a workstation that is connected to a display allowing the workstation to display a user interface UI to a user . It will be appreciated that the user may interact with the workstation through any number of input and output devices such as a computer monitor printer keyboard mouse trackball mouse pad stylus or touch screen that may be directly connected to the workstation or remotely connected via a network. It will be further appreciated that the workstation illustrated in may represent any computing device with which a user may interact including a desktop computer notebook laptop tablet computer ultra mobile PC server or handheld device.

An email application application executes on the workstation that allows the user to access and manage messages and other information. For example the email application may be a personal information manager PIM that provide access to email voicemail personal contacts organizational contacts calendar events and other personal or business data and processes. In one embodiment the email application is the MICROSOFT T OFFICE OUTLOOK messaging and collaboration client from MICROSOFT CORPORATION of Redmond Wash. It should be appreciated however that the embodiments presented herein may be utilized with email application programs from other vendors including but not limited to IBM LOTUS NOTES software from IBM CORP. of Armonk N.Y. NOVELL GROUPWISE software from NOVELL INC. of Waltham Mass. or GMAIL from GOOGLE INC. of Mountain View Calif.

The email application is connected through a network to a messaging server executing on a remote server platform . The messaging server provides messaging and other information services to the email application . In one embodiment the messaging server is the MICROSOFT EXCHANGE SERVER messaging server from MICROSOFT CORPORATION. As will be appreciated by one skilled in the art the messaging server may be any messaging server known in the art capable of providing the messaging services described herein to the email application such as IBM LOTUS DOMINO software from IBM CORP. or NOVELL GROUPWISE software from NOVELL INC.

According to example embodiments the network comprises the Internet. However it will appreciated that the network may comprise a LAN WAN or other type of network suitable to allow the email application located on the workstation to communicate with the messaging server executing on the server platform . It will be further appreciated that many more networks and network connections may be utilized than illustrated in .

The messaging server may be connected to a message store . The message store may store messages and other data items for access by the email application . A message may represent an email message text message fax voice mail or any other communication. The message may contain a subject . In example embodiments the message may also contain a conversation ID that is used to group messages into conversations or message threads as will be discussed in more detail below in regard to . According to further embodiments described herein the message may also include a number of file attachments . A file attachment is a document or file attached to the message . The file attachment may have a file name a modified date indicating the date the file was last modified a file size indicating the size of the file in bytes and an author ID indicating the author of the document or file. As will be appreciated by those skilled in the art the message store may be located on the server platform or on a remote storage device accessible by the messaging server . The message store may also contain other data items such as calendar events contacts tasks notes and other personal or business data beyond that illustrated in .

In further embodiments the email application may include a local storage where the email application caches data regarding messages and other data items. A message may be cached in the local storage upon the first access of the message by the email application or all available messages may be moved or copied from the message store to the local storage on a scheduled basis. For example the email application may access the messaging server via the Post Office Protocol version 3 POP3 protocol every hour to download the available messages from the message store and store them in the local storage . It will be appreciated that many other methods and protocols for retrieving messages from a messaging server and locally storing the messages may be utilized by the email application .

The email application may also include an attachment aggregation module that performs the operations of displaying the aggregated attachment list which will be described in detail below. In example embodiments the functionality of the attachment aggregation module is provided by the email application . It will be appreciated however that the attachment aggregation module may be provided as an add in module for the email application . The add in module may utilize an application programming interface API provided by the email application to access the data from the messaging server or the local storage and to display the aggregated attachment list as part of the UI of the email application .

The messages A I associated with the particular message thread may be identified based on a shared conversation ID same or similar subjects or some other method of determining the relationships among messages as will be described in more detail below in regard to . For example the message thread illustrated in contains several associated messages A I grouped under a heading of New Project Plan Document . . . The presence of one or more file attachments for a particular message A may be indicated by an attachment indicator image or icon. Another attachment indicator may be displayed next to the heading of the message thread to indicate that the message thread includes at least one message A with a file attachment . When a particular message F is selected by the user from the message thread as indicated by the selection box in information regarding the selected message F is displayed by the email application in a message detail pane of the window .

According to embodiments presented herein when the message detail pane is displayed for a message F associated with a message thread that includes at least one file attachment the attachment aggregation module displays an aggregated attachment list in the window in proximity to the message detail pane . In example embodiments the aggregated attachment list may contain list entries A C for the file attachments attached to the messages A I associated with the message thread of which the selected message F is a part. The list entries A C may contain a file type icon indicating the file type of the corresponding file attachment the name of the file the author of the file and the size of the file in bytes.

As described above the file attachments associated with the message thread may represent several different versions of a few root files. In further embodiments the aggregated attachment list may contain list entries A C for any root file identified from the file attachments associated with the message thread as will be described in more detail below in regard to . The file type icon name author and file size displayed for the list entries A C represents the latest version of the corresponding root file. In addition list entries A B for corresponding root files having multiple versions identified in the file attachments may also include an indication of the number of versions of the root file represented in the file attachments .

The latest version of a root file and the number of versions available may be determined by the attachment aggregation module as will be described below in regard to . The number of versions may be displayed as a hyperlink that allows the user to access the various versions of the root file when the user selects the hyperlink using a mouse for example. It should be appreciated that although the use of a mouse is described in the examples presented herein any suitable user input devices may be utilized to allow users to select or interact with UI controls including but not limited to a keyboard trackball mouse pad stylus or touch screen that may be connected to the workstation .

According to example embodiments the attachment aggregation module may provide the same UI functionality for the various list entries A C displayed in the aggregated attachment list as provided for any other representation of a file in the email application . For example a list entry B may be selected by a user with a mouse dragged from the aggregated attachment list and dropped into a file folder or other file location presented in the UI. If a list entry B is dragged from the aggregated attachment list and dropped into a file location the latest version of the root file corresponding to the list entry B may be copied to the file location.

The attachment aggregation module also provides for files to be dragged and dropped into the aggregated attachment list through the UI. If a file is dropped into the aggregated attachment list from another location the attachment aggregation module may create a new message associated with the message thread attach the file as a file attachment and store the message in the message store or the local storage . Additionally the attachment aggregation module may forward the message to some or all of the individual senders and recipients of messages A I associated with the message thread .

In another embodiment the attachment aggregation module may provide further functionality for managing the root files or file attachments corresponding to the list entries A C displayed in the aggregated attachment list . As illustrated in the UI depicted in this additional functionality may be accessed from a context menu displayed by the attachment aggregation module when a user hovers a mouse cursor over the aggregated attachment list and clicks the right mouse button for example. The context menu may contain menu items that allow the user to perform actions on the entire group of attachments such as 

While the aggregated attachment list is illustrated in as being displayed in conjunction with the data regarding a message F selected from a message thread it will be appreciated that the attachment aggregation module may generate an aggregated attachment list in conjunction with the display of any message in the message store that is associated with a message thread regardless of the context of its selection. Further many variations in the location of the aggregated attachment list in the window and the layout of the file type icon name author file size and number of versions displayed in the aggregated attachment list will be apparent to those of ordinary skill in the art and this application is intended to cover any such variations beyond those illustrated in .

Referring now to additional details will be provided regarding the embodiments presented herein. In particular illustrates routines denoted generally at for displaying an aggregated attachment list associated with a message thread. It should be appreciated that the logical operations described herein are implemented 1 as a sequence of computer implemented acts or program modules running on a computing system and or 2 as interconnected machine logic circuits or circuit modules within the computing system. The implementation is a matter of choice dependent on the performance and other requirements of the computing system. Accordingly the logical operations described herein are referred to variously as states operations structural devices acts or modules. These operations structural devices acts and modules may be implemented in software in firmware in special purpose digital logic and any combination thereof. It should also be appreciated that more or fewer operations may be performed than shown in the figures and described herein. These operations may also be performed in a different order than those described herein.

The routines begin at operation where the attachment aggregation module identifies the messages A I associated with the current message thread . As described above this may be done by identifying all messages in the message store or local storage that share a common conversation ID according to example embodiments. The conversation ID may be a globally unique identifier GUID or a string that identifies a conversation or message thread to which the message is associated. The conversation ID may be generated for the first message A in a message thread. Subsequent messages B I in the message thread such as replies or forwarded messages may have the same conversation ID as the original message A. This allows subsequent messages B I to retain their association with the message thread even if other data regarding the message such as the subject is changed.

In further embodiments the attachment aggregation module may utilize the subject of a given message to determine the messages A I associated with the message thread . In example email applications when a user replies to or forwards a message A the subsequent message B I may retain the same subject as the original message A except for a prefix such as Re or FW appended to the subject to indicate the action taken by the user upon the previous message. In determining the messages A I associated with the message thread the attachment aggregation module may identify all messages in the message store or local storage that share a similar subject ignoring any prefixes in the subject . It will be appreciated that other methods of identifying messages associated with a message thread may be used by the attachment aggregation module in operation .

From operation the routines proceed to operation where the attachment aggregation module identifies any file attachments of the messages A I associated with the message thread . The attachment aggregation module may access the messages A I identified in operation to determine the file attachments associated with the message thread . Once the file attachments associated with the message thread have been identified the routines may proceed from operation to operation where the attachment aggregation module identifies the root files for the file attachments as will be described in more detail below in regard to .

The routines then proceed from operation to operation where the attachment aggregation module displays the aggregated attachment list in the window of the email application . A list entry A C may be created in the aggregated attachment list for the root files associated with the message thread as identified by the attachment aggregation module in operation . The attachment aggregation module uses the file name file size and author ID retrieved from the file attachment determined to be the latest version of the corresponding root file to render the file type icon name author and file size for the list entries A C in the aggregated attachment list . In addition the number of versions of each root file determined in operation is displayed in the corresponding list entry A C.

According to example embodiments the attachment aggregation module may use the file name of the file attachments to determine if two file attachments are related to the same root file or document. If the file names of two file attachments are the same then the attachment aggregation module may determine that the file attachments are related to the same root file.

However when a user replies to or forwards a message containing a modified file attachment the user may rename the file attachment to indicate that the document or file has been revised. For example a user may receive a message A with a file attachment named Project X Project Plan.xls. The user then subsequently modifies the document attached to the message A and replies with a new message G attaching the modified document as a file attachment with the name Project X Project Plan BillJ revisions 9 15 .xls. In order to determine that the file attachments attached to the two messages A G are versions of the same root file the attachment aggregation module may analyze the file name of each file attachment by applying common syntactical rules or methods for such renaming of files. It will be appreciated that many methods of syntactical logic may be applied to determine file attachments related to the same root file and versioning of root files based on the file names.

In further embodiments the attachment aggregation module may use other attributes of the file attachments to determine if they are related to the same root file such as a document title or a description extracted from the contents of the file attachment . It will be appreciated that many other methods may be employed by the attachment aggregation module to compare the file attachments including a comparison of the contents of the file attachments.

At operation if the attachment aggregation module determines that the file attachment is related to an already identified root file then the routines may proceed to operation . In operation the attachment aggregation module may determine the version level of the file attachment based on a comparison with the identified root file. By determining a version level of each file attachment related to the same root file the attachment aggregation module may determine the file attachment that represents the latest version of the root file as well as the number of versions of the root file available for display in the aggregated attachment list . In example embodiments the attachment aggregation module may determine the version levels of the file attachments related to the same root file by comparing the last modified date of the file attachments .

If at operation the attachment aggregation module determines that the file attachment is not related to an already identified root file the routines may proceed to operation where a new root file is identified for the message thread from the file attachment . Next at operation if there are more file attachments to be processed the routines may return to operation where the attachment aggregation module repeats the routine for the next file attachment . If no more file attachments are left to process the routines may proceed from operation to operation where the routine ends.

The computer architecture shown in includes a central processing unit CPU a system memory including a random access memory RAM and a read only memory ROM and a system bus that couples the memory to the CPU . A basic input output system containing the basic routines that help to transfer information between elements within the computer such as during startup is stored in the ROM . The computer also includes a mass storage device for storing an operating system application programs and other program modules which are described in greater detail herein.

The mass storage device is connected to the CPU through a mass storage controller not shown connected to the bus . The mass storage device and its associated computer readable media provide non volatile storage for the computer . Although the description of computer readable media contained herein refers to a mass storage device such as a hard disk or CD ROM drive it should be appreciated by those skilled in the art that computer readable media can be any available computer storage media that can be accessed by the computer .

By way of example and not limitation computer readable media may include volatile and non volatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. For example computer readable media includes but is not limited to RAM ROM EPROM EEPROM flash memory or other solid state memory technology CD ROM digital versatile disks DVD HD DVD BLU RAY or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium that can be used to store the desired information and that can be accessed by the computer .

According to various embodiments the computer may operate in a networked environment using logical connections to remote computers through a network such as the network . The computer may connect to the network through a network interface unit connected to the bus . It should be appreciated that the network interface unit may also be utilized to connect to other types of networks and remote computer systems. The computer may also include an input output controller for receiving and processing input from a number of other devices including a keyboard mouse or electronic stylus not shown in . Similarly an input output controller may provide output to a display a printer or other type of output device.

As mentioned briefly above a number of program modules and data files may be stored in the mass storage device and RAM of the computer including an operating system suitable for controlling the operation of a networked desktop laptop or server computer. The mass storage device and RAM may also store one or more program modules. In particular the mass storage device and the RAM may store the email application or the messaging server each of which was described in detail above in regard to . The mass storage device and the RAM may also store other types of program modules or data.

Based on the foregoing it should be appreciated that technologies for displaying a list of file attachments associated with a message thread in an email application are provided herein. Although the subject matter presented herein has been described in language specific to computer structural features methodological acts and computer readable media it is to be understood that the invention defined in the appended claims is not necessarily limited to the specific features acts or media described herein. Rather the specific features acts and mediums are disclosed as example forms of implementing the claims.

The subject matter described above is provided by way of illustration only and should not be construed as limiting. Various modifications and changes may be made to the subject matter described herein without following the example embodiments and applications illustrated and described and without departing from the true spirit and scope of the present invention which is set forth in the following claims.

