---

title: Private source code commenting
abstract: A method, computer program product, and data processing system for exchanging information regarding software source code among a team of developers is disclosed. In a preferred embodiment of the present invention, a developer associates commentary with a particular code feature, such as a function or object class. A list of intended recipients or readers of the commentary is obtained from the developer. Additional settings regarding such things as an expiration date for the commentary are also obtained from the developer. The source code with associated commentary is then made available to the intended readers. If desired, the source code with associated commentary may be transmitted the intended recipients via e-mail or an “instant message” or other form of notification can be transmitted to the intended recipients to notify them of the commentary to be read.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08046741&OS=08046741&RS=08046741
owner: International Business Machines Corporation
number: 08046741
owner_city: Armonk
owner_country: US
publication_date: 20080407
---
This application is a continuation of application Ser. No. 10 614 548 filed Jul. 3 2003 now U.S. Pat. No. 7 454 744.

The present invention is related to computer aided software engineering CASE tools for collaborative software development.

 Software engineering is the practice of software development as an industrial discipline. The goal of Software Engineering is to produce high quality maintainable software through an efficient use of development resources.

Most commercially developed software is developed by teams of programmers. Very large software projects may require a large number of programmers or a large number of teams of programmers. One area of particular interest to Software Engineering is the interaction between members of a programming team and between programmers and management.

Conventional Software Engineering wisdom suggests that the task of producing a software product is best practiced by conceptualizing the product as a system of interrelated components dividing the components among members of a programming team having team members work in parallel to produce the components and assembling the components into a working system. In other words conventional wisdom suggests a divide and conquer approach to software development.

D. B. Simmons Communications a software group productivity dominator IEEE Software Engineering Journal November 1991 pp. 454 462 for example takes the position that a system design that is poorly partitioned will result in a large amount of inter programmer communication to resolve dependency issues which ultimately degrades productivity. In an ideal divide and conquer situation inter programmer communication should be unnecessary so any time spent communicating rather than on writing source lines of code SLOC degrades productivity. Simmons thus advocates employing careful system design and small team sizes to minimize communication between programmers the ultimate goal being to approach an ideal divide and conquer scenario.

A dramatically different approach to inter programmer communication can be found in the increasingly popular Software Engineering methodology known as extreme Programming XP which was founded by Ken Beck. XP is based on team collaboration on all phases of a software development project rather than a pure divide and conquer approach. XP emphasizes continuous communication between members of a programming team with the theory being that when all members of a team are familiar with the project as a whole a project design can evolve as needed to resolve whatever issues may arise during the implementation phase of a project such as dependency and integration issues. Thus the XP methodology includes such concepts as common code ownership in which all team members are allowed to work on any portion of the project.

Although divide and conquer and XP represent two very different approaches to software development these two methodologies highlight the significant role that inter programmer communication plays in a large software project. Two overarching principles come to mind First communication between team members is essential because in a practical setting dependency and integration issues between different programmers work will invariably arise. Second it is important to productivity that communication between team members is efficient. A design that is well planned as advocated in Simmons article or at least well understood as advocated in XP can help in this respect.

Computer Aided Software Engineering CASE is the sub field of Software Engineering that is concerned with developing software tools called CASE tools for making software development more efficient and less error prone. A number of existing CASE technologies are directed to problems relating to team software development including communication between developers. Several of these are discussed below.

A number of configuration management tools exist in the art. Configuration management tools allow different versions configurations of a file to be maintained so that a permanent copy of an earlier version of a file under modification can be maintained. These kinds of tools are very helpful in software development for maintaining different versions of source code files under development because working or stable versions of source code files can be maintained while newer versions are being developed. Many configuration management tools also allow a snapshot of a group of source files to be made so that a particular point in time of an entire software development project may be recorded.

Most modern configuration management tools also allow multiple users to check out files and check in modified versions of files to ensure consistency of file versions for multiple users. Generally a configuration management tool will keep a log so that comments regarding the changes made between versions can be recorded. Some configuration management tools such as the open source Concurrent Versioning System CVS allow for distributed access to a group of source files i.e. they allow developers to access the files from remote computers on a network such as the Internet . Revision Control System RCS is another popular open source configuration management tool.

Some existing tools provide more extensive features for collaborative programming than do simple configuration management systems. Some of these tools are network or World wide web based. For example SOURCEFORGE is a trademark for a collaborative software development system produced by VA Software Corporation of Fremont Calif. The SOURCEFORGE collaborative software development system is used by a number of organizations to support collaborative software development on organizational intranets using a web based interface. The SOURCEFORGE collaborative software development system also forms the basis for SOURCEFORGE .net which is reportedly the world s largest open source development website.

Open source software particularly in recent times is often a collaborative product of multiple developers working in remote locations over the Internet. The open source Linux operating system for example was created by Linus Torvalds for whom Linux is named in Finland. Many enhancements to Linux such as device drivers have been contributed by programmers worldwide through the Internet.

SOURCEFORGE .net supports a number of features that are conducive to collaborative programming over a wide area network WAN such as the Internet. On SOURCEFORGE .net each open source programming project is given a web page that includes a number of communication features for communicating with developers and users of open source software products. Trackers are provided to allow users or developers to report bugs request new features to be added to a program or request technical support. Other more general discussion forums including a public message forum mailing lists and a news archive are also provided. A task manager application is provided for project planning and delegation of tasks among developers. Source code or binary releases of a software product may be downloaded from that product s SOURCEFORGE .net page or from one of a number of mirror sites.

A developer or user for that matter may also use the CVS configuration management system to mount to the project s code repository and download any version of the source code including the latest under development sources . CVS may also be used by a developer having appropriate privileges to check out or check in source code files for inclusion in the project. SOURCEFORGE .net also includes a compile farm for compiling and testing software on various platforms e.g. that a particular developer might not have access to otherwise .

Most computer languages have some facility for leaving non executable comments in program code. For example in the C programming language comments are written between slash star and star slash delimiters e.g. comment . Some programming languages allow for more advanced commenting features. The JAVA programming language a trademark of Sun Microsystems Inc. allows special javadoc comments that can be associated with particular classes fields or methods in a JAVA programming language source file. javadoc comments may include special tags to provide program documentation in a structured format. A tool called javadoc is provided in Sun Microsystems JAVA 2 Software Development Kit J2SDK which can compile the javadoc comments into specially formatted Hypertext Markup Language HTML source for display in a web browser. The open source Perl programming language version 5 Perl 5 developed by Larry Wall includes a similar feature to javadoc called POD which stands for plain old documentation. 

The open source Python programming language developed by Guido van Rossum includes a feature known as doc strings. Doc strings are special strings denoted by triple quotation marks that are used to describe particular objects or functions in Python. Unlike ordinary comments however doc strings are available to a Python program at run time. Because Python has an interactive mode to allow code to be entered and executed at an interpreter prompt the ability to read program comments at run time is particularly valuable in Python.

Literate programming is a programming methodology originated by Turing Award winner Prof. Donald Knuth of Stanford University. Literate programming is based on the idea that well written program code should be written to be read by others. Knuth created the WEB programming system for literate programming in Pascal. WEB allows a programmer to write code in sections in which each section contains a descriptive subsection for entering a natural language description of a portion of code a macro section for defining macros and a code section for entering Pascal code. The macro features of WEB allow a programmer to write code for presentation to a reader in any particular order.

WEB is made up of two programs TANGLE and WEAVE each of which processes a WEB source file. WEAVE formats the text documentation and pretty prints the code in a format suitable for processing by Knuth s typesetting program TeX which incidentally was written using WEB . TANGLE on the other hand removes the text documentation and performs macro substitutions to arrive at source code suitable for compilation by a Pascal compiler.

A number of literate programming tools have been developed for other languages. Some of these are patterned after Knuth s original WEB program such as CWEB for literate programming in C and FWEB for literate programming in Fortran. A number of language independent literate programming tools are also available.

Thus configuration management tools aid in the management of team programming projects by providing some degree of concurrency control and transaction management in the database management sense and advanced documentation features such as are provided in literate programming tools make program code easier for others to understand. Both of these CASE technologies are a boon to software developers and software development teams because they help developers collaborate effectively to manage complexity. In very large software projects however the process of collaborating itself may become quite complex.

Whether one views inter developer communication as an unavoidable and necessary evil or as something to be encouraged the fact remains that communication needs to be efficient and effective. If too much information is exchanged information overload can result and productivity and quality are compromised. On the other hand when information is less freely exchanged the process of acquiring and disseminating necessary information may become inefficient.

There is a need then for an efficient form of information exchange between software developers working on a common project.

The present invention provides a method computer program product and data processing system for exchanging information regarding software source code among a team of developers. In a preferred embodiment of the present invention a developer associates commentary with a particular code feature such as a function or object class. A list of intended recipients or readers of the commentary is obtained from the developer. Additional settings regarding such things as an expiration date for the commentary are also obtained from the developer. The source code with associated commentary is then made available to the intended readers. If desired the source code with associated commentary may be transmitted the intended recipients via e mail or an instant message or other form of notification can be transmitted to the intended recipients to notify them of the commentary to be read.

The present invention may be embodied as part of an integrated development environment IDE in which an editor program and other programming tools e.g. compilers linkers debuggers etc. are presented to the developer using a common interface or in a common executable . Alternatively the present invention may be embodied in a command line style development tool much like the cc and make command line tools used in POSIX based operating systems POSIX stands for Portable Operating System Interface which is the name given to a family of operating system standards developed by IEEE the Institute for Electrical and Electronics Engineers . The present invention may also be combined with configuration management software.

With reference now to the figures depicts a pictorial representation of a network of data processing systems in which the present invention may be implemented. Network data processing system is a network of computers in which the present invention may be implemented. Network data processing system contains a network which is the medium used to provide communications links between various devices and computers connected together within network data processing system . Network may include connections such as wire wireless communication links or fiber optic cables.

In the depicted example server is connected to network along with storage unit . In addition clients and are connected to network . These clients and may be for example personal computers or network computers. In the depicted example server provides data such as boot files operating system images and applications to clients . Clients and are clients to server . Network data processing system may include additional servers clients and other devices not shown. In the depicted example network data processing system is the Internet with network representing a worldwide collection of networks and gateways that use the Transmission Control Protocol Internet Protocol TCP IP suite of protocols to communicate with one another. At the heart of the Internet is a backbone of high speed data communication lines between major nodes or host computers consisting of thousands of commercial government educational and other computer systems that route data and messages. Of course network data processing system also may be implemented as a number of different types of networks such as for example an intranet a local area network LAN or a wide area network WAN . is intended as an example and not as an architectural limitation for the present invention.

Referring to a block diagram of a data processing system that may be implemented as a server such as server in is depicted in accordance with a preferred embodiment of the present invention. Data processing system may be a symmetric multiprocessor SMP system including a plurality of processors and connected to system bus . Alternatively a single processor system may be employed. Also connected to system bus is memory controller cache which provides an interface to local memory . I O bus bridge is connected to system bus and provides an interface to I O bus . Memory controller cache and I O bus bridge may be integrated as depicted.

Peripheral component interconnect PCI bus bridge connected to I O bus provides an interface to PCI local bus . A number of modems may be connected to PCI local bus . Typical PCI bus implementations will support four PCI expansion slots or add in connectors. Communications links to clients in may be provided through modem and network adapter connected to PCI local bus through add in boards.

Additional PCI bus bridges and provide interfaces for additional PCI local buses and from which additional modems or network adapters may be supported. In this manner data processing system allows connections to multiple network computers. A memory mapped graphics adapter and hard disk may also be connected to I O bus as depicted either directly or indirectly.

Those of ordinary skill in the art will appreciate that the hardware depicted in may vary. For example other peripheral devices such as optical disk drives and the like also may be used in addition to or in place of the hardware depicted. The depicted example is not meant to imply architectural limitations with respect to the present invention.

The data processing system depicted in may be for example an IBM eServer pSeries system a product of International Business Machines Corporation in Armonk N.Y. running the Advanced Interactive Executive AIX operating system or LINUX operating system.

With reference now to a block diagram illustrating a data processing system is depicted in which the present invention may be implemented. Data processing system is an example of a client computer. Data processing system employs a peripheral component interconnect PCI local bus architecture. Although the depicted example employs a PCI bus other bus architectures such as Accelerated Graphics Port AGP and Industry Standard Architecture ISA may be used. Processor and main memory are connected to PCI local bus through PCI bridge . PCI bridge also may include an integrated memory controller and cache memory for processor . Additional connections to PCI local bus may be made through direct component interconnection or through add in boards. In the depicted example local area network LAN adapter SCSI host bus adapter and expansion bus interface are connected to PCI local bus by direct component connection. In contrast audio adapter graphics adapter and audio video adapter are connected to PCI local bus by add in boards inserted into expansion slots. Expansion bus interface provides a connection for a keyboard and mouse adapter modem and additional memory . Small computer system interface SCSI host bus adapter provides a connection for hard disk drive tape drive and CD ROM drive . Typical PCI local bus implementations will support three or four PCI expansion slots or add in connectors.

An operating system runs on processor and is used to coordinate and provide control of various components within data processing system in . The operating system may be a commercially available operating system such as the WINDOWS XP operating system which is available from Microsoft Corporation. An object oriented programming system such as JAVA may run in conjunction with the operating system and provide calls to the operating system from programs or applications executing on data processing system . JAVA is a trademark of Sun Microsystems Inc. Instructions for the operating system the object oriented operating system and applications or programs are located on storage devices such as hard disk drive and may be loaded into main memory for execution by processor .

Those of ordinary skill in the art will appreciate that the hardware in may vary depending on the implementation. Other internal hardware or peripheral devices such as flash read only memory ROM equivalent nonvolatile memory or optical disk drives and the like may be used in addition to or in place of the hardware depicted in . Also the processes of the present invention may be applied to a multiprocessor data processing system.

As another example data processing system may be a stand alone system configured to be bootable without relying on some type of network communication interfaces As a further example data processing system may be a personal digital assistant PDA device which is configured with ROM and or flash ROM in order to provide non volatile memory for storing operating system files and or user generated data.

The depicted example in and above described examples are not meant to imply architectural limitations. For example data processing system also may be a notebook computer or hand held computer in addition to taking the form of a PDA. Data processing system also may be a kiosk or a Web appliance.

The present invention provides a method computer program product and data processing system for exchanging information regarding software source code intended for limited distribution among a team of software developers. is a use case diagram depicting particular user directed actions use cases that can be performed by a preferred embodiment of the present invention. like many of the other diagrams in this document is patterned after the Uniform Modeling Language UML an open standard for object oriented modeling of systems. It should be noted however that this document does not strictly follow the UML standard.

Now turning to the content of commenting system represents a preferred embodiment of the present invention. User is a software developer using commenting system .

This document makes extensive use of the term developer. Although a developer as the term is used in the art is generally a programmer i.e. someone who writes program code the term developer should be interpreted more broadly in this document. In the present context the term developer is used to mean someone who may potentially view all or part of the source code to a software product.

One of ordinary skill will recognize that this definition of developer encompasses not only programmers but other parties as well. Some examples of non programmer developers of a software product include software architects members of management software testers intellectual property attorneys consultants system administrators and the like. In some instances the actual users of a software product may be considered developers as well since in the case of some software products customers clients or other end users are supplied with source code. In the case of open source software for example sometimes an end user is provided with only the source code and must compile the source code into an executable form. In these situations it may be necessary for an end user to edit or at least view the source code in order to configure or modify the source code for the purpose of making the source code compile on a particular target machine or for the purpose of enabling or implementing optional or novel features in a software product.

Use cases represent actions that user may use commenting system to perform. Commenting system may be integrated or embedded into another tool such an integrated development environment IDE or editor. In particular some editor programs such as the widely used open source EMACS editor developed by Richard Stallman are extensible in the sense that they include a facility for a user to program additional features into the editor application. For example EMACS includes its own dialect of the LISP programming language with which a user may program additional features as desired.

Alternatively commenting system may take the form of a standalone program or be embedded into a individual programming tool or a suite of tools. For example commenting system may be embedded within a configuration management system such as the open source configuration management tools RCS Revision Control System or CVS Concurrent Versioning System which are generally executed using a command line interface in a POSIX type operating system. POSIX stands for Portable Operating System Interface which is the name given to a family of operating system standards developed by IEEE the Institute for Electrical and Electronics Engineers. AIX Advanced Interactive executive an IBM Corporation product is an example of a POSIX based operating system.

User may associate a comment with a source code feature in a body of source code being edited or examined by user use case . Source code is computer program code that is in a form that can be edited by a developer. In the paradigmatic case of compiled languages such as C or an assembly language source code will generally be made up of one or more text files strictly speaking assembly language is assembled but one of ordinary skill in the art will recognize that assembly may be thought of as a special case of compilation .

In this document the term source code also includes code that is intended to be executed by an interpreter. Further other non text documents may also be considered source code for the purposes of this document. For example class diagrams state charts and other graphical forms for representing software are also source code for the purposes of this document since in many cases such diagrams may be translated or compiled into source code in a conventional programming language or even into executable or object code. For instance a number of programming utilities exist within the art to convert diagrams in Uniform Modeling Language UML into source code in conventional text based programming languages such as Java and C .

In addition some programming environments support programming using graphical tools in place of or in addition to conventional text based source code. For example the JAVA programming language supports an application programming interface API called JAVABEANS . The JAVABEANS API enables the creation of highly encapsulated objects called beans which support introspection and which are executed through an event driven interface. Although the JAVABEANS API may be used for producing conventional text based source code in the JAVA programming language the JAVABEANS API also supports the creation of applications and configuration of beans using graphical environments. Thus graphical program components such as beans and graphically programmed program code such as an application utilizing the JAVABEANS API are also considered source code for the purposes of this document.

 Source code feature or code feature in this context means a portion of a body of source code. A body of source code in the present context means one or more files or other units of program source code.

In the vast majority of cases a developer will want to associate commentary with code features that are defined by the programming language being used such as a subroutine e.g. a function procedure method etc. object class variable or line or statement of code. In some circumstances however a developer may choose to associate a comment with an arbitrary portion of code such as a portion of a statement for example. A developer may also wish to associate a comment with one or more source code files in a body of source code.

One particularly significant reason why a developer might want to associate a comment with a language defined code feature and in particular a relatively coarse grained feature such as a class or function is that such features tend to persist over time. For example specific lines of code in a function may change as a program is developed but the function may persist. A preferred embodiment enables a developer to associate a comment with a language defined code feature so that modifications to that code feature such as deletions of lines of code from the code feature that do not destroy the code feature as a whole do not also destroy the associated comment.

There are many ways in which association of a comment with a portion of program source code may be accomplished. For example user might highlight or otherwise select a portion of code in an editor program or IDE then enter a comment in a special dialog box or window. An exemplary embodiment of the present invention that includes this feature is described in .

Alternatively one may enter commentary directly into the text of a source document using special tags or characters to separate comments from program code and to associate particular comments with particular code features. This feature is described in with respect to an exemplary embodiment of the present invention utilizing markup language tags.

One of ordinary skill in the art will also recognize that many programming languages such as the JAVA programming language include special symbols or operators for denoting comments e.g. and in the C programming language and other related programming languages . The placement of such a comment in a source file in proximity to a particular code feature can indicate an association between the comment and the code feature as with javadoc comments in the JAVA programming language. This association by placement is typical of literate programming environments such as the aforementioned WEB system of Donald Knuth in which each section of a literate program has text and code sub sections. Another way in which a comment may be associated with a particular code feature is to place associating information within a standard language supported comment e.g. placing a string such as associate feature in an ordinary programming language comment .

In a graphical programming environment such as a workbench for configuring beans in the JAVABEANS API or in a modeling environment such as a UML modeling application comments may be associated with code features e.g. a bean by affixing a graphical feature to a graphical program component and entering text. UML for example includes a comment symbol that may be affixed to a class or other UML artifact to provide free form textual commentary. The UML comment symbol has the appearance of a dog eared paper note and text may be entered on the writing surface of the comment symbol.

Once a comment has been associated with a code feature user can assign access privileges to the comment to allow the comment to be accessed only by intended readers of the comment use case . Assigning access privileges to source code commentary allows messages to be directed to specific other developers or to groups of developers. Developers who are granted an access privilege to a particular comment will be able to view the comment when viewing the associated source code e.g. in an IDE editor or viewer program . Developers who are not given access privileges to a comment will not be able to read the comment when viewing the associated code feature assuming of course that these non privileged developers can access the actual code feature to begin with .

In one embodiment of the present invention these access privileges may actually be bifurcated into distinct designations of access privileges and intended readers. Specifying both access privileges and intended readers allows for situations in which one or more developers do not necessarily have use for particular information but might have a possible use for the information in the future. In such instances those particular developers can be given access privileges to the information but not designated as intended recipients. The developers would then be able to access the information only if desired.

A key advantage to this feature of providing commentary only to selected readers is that an individual developer is provided with only the information that the developer needs and is not inundated with excessive information having little relevancy to that developer s particular work. This makes communication more efficient because a developer does not have to spend as much time searching for information that the developer needs for that developer s particular contribution to a project. It also makes communication more effective because a developer that has less to read is less likely to miss important information by skimming through material in an effort to save time. These advantages of a preferred embodiment of the present invention although they can be realized in the context of practically any collaborative programming project are particularly useful when applied in conjunction with extreme Programming XP or collaborative development over a network e.g. collaborative open source development over the Internet .

Also when the full range of individuals who may view or edit the source code to a software product is considered the ability to choose a set of intended readers for a particular comment is very useful because different readers especially those with non programming roles have different informational needs. A number of examples not intended to be exhaustive are provided here to suggest the diversity of informational needs that can arise in a particular project. A project manager for example may need a high level view of the project as a whole. A software architect may need a more detailed high level understanding that reveals how closely the implementation of the software matches the original design. An intellectual property attorney may only be concerned with code excerpts that illustrate a novel process or the practical application of a novel algorithm and may not have any need for much overall design information or low level details. A user may only need to know where to look in order to configure or extend a software product and may not have any need to understand low level implementation details.

Commenting system may also be used to send a notification to one or more developers to let those developers know that the comment has been created use case . In a preferred embodiment this notification process may be performed by sending an electronic mail or some other form of message such as an instant message that appears on a recipient s desktop within the recipient s IDE or to an instant messaging client such as AOL America Online INSTANT MESSENGER or via some other form of communication e.g. sending a message to an alphanumeric pager leaving a voice mail sending a fax etc. . Such a notification may include the particular source code feature that is commented and a copy of the comment e.g. as an attachment to an electronic mail message or an indication of where the commented code feature is located e.g. file names and line numbers or any other appropriate information for locating and or displaying the comment and or the associated source code feature.

Finally additional options or constraints may be associated to the comment by user use case . An example of an additional option that might be incorporated into a comment is a rule concerning how long the comment should exist use case . For example a date and or time for expiration of a comment may be specified. As another example user could specify that a comment should only exist as a part of a notification message and only as long as the notification message exists e.g. in the recipient s electronic mail inbox . One of ordinary skill in the art will recognize then that a comment may be specified to be persistent meaning that the comment will be saved to secondary storage e.g. disk along with the latest version of the source code or a comment may be specified as being transient so that the comment only exists in a notification message and is not recorded in persistent secondary storage.

While many of the advantages of the present invention can be appreciated from the enumerated use cases depicted in one of ordinary skill in the art should recognize that the use cases depicted are not intended to be exhaustive. One of ordinary skill in the art will recognize that additional comment related functionalities may be provided for in an actual embodiment of the present invention.

Moreover one of ordinary skill in the art will recognize that even the functionalities described in are themselves amenable to a wide range of variations in the implementation of such functionalities. As stated previously a preferred embodiment of the present invention may be incorporated into wide variety of programming tools or embodied in one or more stand alone tools. are deployment diagrams that illustrate a number of different configurations of software development tools in which the present invention may be embodied. While depict with specificity a number deployments of embodiments of the present invention it should be noted that the various configurations depicted herein are not intended to be exhaustive of the wide range of architectural and deployment related variations within the scope and spirit of the present invention.

Thus if user creates a comment and associates that comment with a particular source code feature using IDE when user saves the edited source code the comment and source code will be saved to code repository along with user s designation of intended readers of the comment. When the source code is viewed by user via IDE the comments for which user is an intended reader are displayed by IDE in conjunction with the source code.

In developer workstations and each support a suite of software development tools i.e. components even numbers . With respect to workstation these tools include an editor program for editing source code a compiler for compiling source code into object code modules a linker for linking object code modules into executables a debugger for monitoring the execution of an executable for the purpose of identifying bugs and a configuration management client .

In this depicted embodiment the commenting related features of the present invention are for the most part incorporated into configuration management client and editor program .

Editor program is used to view and edit source code. Editor program allows a user to enter comments to be associated with particular code features and allows a list of intended readers to be associated with the comment as well. As stated previously this association of a comment to a code feature may be accomplished using various techniques including inserting comment text or markup tags into a source code text file and entering comment text special commands or graphical means provided by editor program among others.

Configuration management client is used to check source code in and out of a code repository that is controlled by a configuration management server software residing on a server hardware . When source code that has been annotated with comments by editor program is checked into code repository by configuration management client the comments are also stored in code repository . When configuration management client is used to retrieve the source code configuration management server returns the source code along with only those comments for which the user of developer workstation is listed as an intended reader.

Configuration management systems are typically designed to generate desired versions of source code files from stored changes. Such systems are also typically designed to enforce different levels of access privileges for different developers. The implementation of the preferred embodiment depicted in by enhancing a configuration management system to support access control for comments and to assemble differently commented versions of a source code file for different developers may thus be accomplished by programming the configuration management system to assemble different versions of a source code file according to version identifying criteria that not only include a version number as in conventional configuration management systems but also the identity of the developer requesting the source file.

For example assume that developer workstation is the workstation of an intended reader of a comment created by the user of developer workstation . E mail client which resides on developer workstation will receive an electronic mail message as a notification. In a preferred embodiment E mail client may be programmed to forward the received notification message to IDE on developer workstation . IDE can then display the comment and associated source code portion for the user of developer workstation .

Several variations on the notification scheme depicted in may be utilized in place of or in addition to the features described in . For example although shows separate IDE and E mail client processes one of ordinary skill in the art will recognize that a single program may be used for both editing source code and comments and for sending mail. For example the open source EMACS text editor supports electronic mail features as well text editing capabilities. Alternatively more specialized tools such as command line driven programming tools may be utilized instead of an IDE.

The particular protocol through which notification messages are transmitted may differ as well. For example some form of instant messaging or chat protocol may be used in place of or in addition to electronic mail. Other physical media such as telephone based messaging or facsimile may be used as well. One of ordinary skill in the art will recognize that a wide variety of communications media may be employed to provide notification capabilities without departing from the scope and spirit of the present invention.

User who we will assume is an intended reader of the comment opens the source code for editing or viewing using IDE action . IDE then requests the code from secondary storage action . Storage returns the requested code action and the associated commentary action . IDE then displays the requested code action and also the associated commentary assuming of course that user is an intended reader of the commentary action .

IDE produces from commented source code a source code document action and a commentary document action . One of ordinary skill will recognize that source code document consisting of only source code can be compiled or interpreted by any compiler or interpreter for the language the source code is implemented in. Source code document is stored in secondary storage .

Commentary document contains commentary and association data to allow the commentary to be associated with source code features contained within source code document . A document containing existing commentary is retrieved from secondary storage action . The commentary from commentary document is merged with existing commentary document to form a merged commentary document action which is then stored in secondary storage action .

In an alternative embodiment source code and comments may be stored in a single file. depicts a process of processing a combined code comment file for display and compilation of source code and comments by a developer. Combined file is filtered to remove from combined file comments that do not pertain to the developer action thereby obtaining a filtered combined commentary and source code document . Combined document may then be formatted action to obtain commented source code in a format suitable for display action .

Combined file may also be filtered to remove all of the commentary action and thus obtain clean source code suitable for compilation or interpretation. For example clean source code may be compiled action to obtain relocatable or executable object code .

In a preferred embodiment groups of intended readers may be specified by listing the members of the group or by referring to the group by name. For example in the example source code commentary excerpt provided in tags and enclose a comment that is intended to be read by anyone reading the source code. Additional options or constraints for comments may be included as well. Tag of includes an additional attribute that denotes an expiration date for the comment enclosed by tags and .

In this example a developer may associate a comment with a particular code feature by selecting highlighting the particular code feature with pointing device cursor as with selected code feature then actuating comment button . A commentary entry box is then displayed with a cursor provided for the entry of commentary text. Once the commentary text has been entered signified for example by the developer s pressing the enter or return key on the workstation s keyboard an additional dialog box is displayed as depicted in .

In a preferred embodiment of the present invention when an intended recipient of a comment views that comment it comment is highlighted so as to make that intended recipient aware that the comment is a comment that is not necessarily available to all readers of the source code.

It is important to note that while the present invention has been described in the context of a fully functioning data processing system those of ordinary skill in the art will appreciate that the processes of the present invention are capable of being distributed in the form of a computer readable medium of instructions or other functional descriptive material and in a variety of other forms and that the present invention is equally applicable regardless of the particular type of signal bearing media actually used to carry out the distribution. Examples of computer readable media include recordable type media such as a floppy disk a hard disk drive a RAM CD ROMs DVD ROMs and transmission type media such as digital and analog communications links wired or wireless communications links using transmission forms such as for example radio frequency and light wave transmissions. The computer readable media may take the form of coded formats that are decoded for actual use in a particular data processing system. Functional descriptive material is information that imparts functionality to a machine. Functional descriptive material includes but is not limited to computer programs instructions rules facts definitions of computable functions objects and data structures.

The description of the present invention has been presented for purposes of illustration and description and is not intended to be exhaustive or limited to the invention in the form disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art. The embodiment was chosen and described in order to best explain the principles of the invention the practical application and to enable others of ordinary skill in the art to understand the invention for various embodiments with various modifications as are suited to the particular use contemplated.

