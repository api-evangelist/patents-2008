---

title: Failover in an internet location coordinate enhanced domain name system
abstract: An exemplary failover module includes (a) instructions to respond to a connection problem to a host server at an IP address by selecting a different IP address from a cached list of IP addresses for a domain name associated with the host server and (b) instructions to return the selected, different IP address to future name queries where the instructions to respond, the instructions to initiate, and the instructions to return execute at an operating system level of a computing device configurable to connect to at least one of a plurality of host servers. Such a module may include instructions to optionally initiate a connection to a host server at the selected, different IP address. An exemplary failover module may optionally select an IP address based in part on Internet Location Coordinates (ILCs) where the host servers reside in an ILC enhanced Domain Name System (DNS). Other methods, devices and systems are also disclosed.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08458298&OS=08458298&RS=08458298
owner: Microsoft Corporation
number: 08458298
owner_city: Redmond
owner_country: US
publication_date: 20080303
---
Many applications require connection to remote resources on the Internet. For example an email application typically requires connection to an email host server. Consider the HOTMAIL email service that can be accessed using a client email application that connects to a host of the domain name www.hotmail.com. The client email application must resolve the domain name to a specific IP address for a HOTMAIL email service host server. In this example multiple host servers exist and the domain name resolution process returns a list of IP addresses for the multiple host servers. Upon receipt of the list in the local DNS resolver the client email application will typically select the first IP address in the list and attempts to connect to the host server at this IP address. However if the connection fails or cannot be made the client email application may or may not incorporate logic to use other IP addresses returned by the DNS and to attempt to connect to one of the other IP addresses. If the client email application does not incorporate this logic then the client email application receives an error message and it cannot connect until the resource is available or the DNS entry for the domain name times out and a different address is acquired. This mechanism can diminish a user s experience of the email system and needlessly waste Internet resources e.g. by making repeated requests to an unavailable IP address when a suitable alternative IP address is available . Additionally even if the client email application does incorporate logic to try multiple IP addresses the knowledge that the first IP address was unavailable is not made available to other applications. Accordingly other applications will naturally attempt to use the same unavailable IP address in attempting to connect to the same hostname further diminishing the user s experience and needlessly wasting Internet resources.

Various exemplary methods devices systems etc. described herein provide for client side failover and specifically failover that can enhance user experience.

An exemplary failover module includes a instructions to respond to a connection problem to a host server at an IP address by selecting a different IP address from a cached list of IP addresses for a domain name associated with the host server and b instructions to return the selected different IP address to future name queries where the instructions to respond the instructions to initiate and the instructions to return execute at an operating system level of a computing device configurable to connect to at least one of a plurality of host servers. Such a module may include instructions to optionally initiate a connection to a host server at the selected different IP address. An exemplary failover module may optionally select an IP address based in part on Internet Location Coordinates ILCs where the host servers reside in an ILC enhanced Domain Name System DNS . Other methods devices and systems are also disclosed.

Various exemplary methods devices system etc. described herein pertain to client side failover mechanisms in a Domain Name System DNS . An exemplary client failover module can be configured to failover client applications in a seamless manner. Such a module can enhance user experience of a client application when a host server fails or is unavailable to the client. An exemplary method can improve failover time by sharing knowledge across applications e.g. where a failure that occurs for a connection associated with a first application can failover a connection associated with one or more other applications .

An exemplary client failover module optionally fails over a client application to a new host server according to a list cached in client memory. Such a failover mechanism can alleviate the need to implement logic inside the client application for utilizing all the IP addresses for a domain name logic that some client applications currently fail to incorporate.

An exemplary client failover module can failover in a proactive manner for example by issuing a proactive DNS query when a certain number of IP addresses associated with a domain name appear to have connection problems. For example if a module registers three IP address failures where the IP addresses are associated with the same domain name then the module may issue a new DNS query.

An exemplary client failover module optionally fails over a client application to a new host server based in part on Internet Location Coordinates ILCs . Such a failover module operates in an ILC enhanced DNS system that includes beacons that help provide information to participants about their respective locations in a network space. A participant can be any resource on the network e.g. a client a server etc. . In various examples transmission of location information e.g. ILCs can occur via DNS and TXT records via Extensions to DNS EDNS and explicit new record types or entirely outside DNS but applied to select an address returned by a DNS query.

In various WINDOWS operating systems a client application can use an application programming interface API to resolve a domain name. For example a client application can for a specified domain name call the API function gethostbyname which causes a DNS client service to check a DNS resolver cache to see if the IP address is already known for the specified domain name. If the IP address for the domain name does not exist in the DNS resolver cache then the Domain Name Resolver DNR component on the client computer sends a name query to a DNS server. The DNS server returns a list of IP addresses to the DNR component on the client which is placed into the DNS resolver cache. Most applications then try to connect to the first IP address listed in the DNS resolver cache. For many applications if the application cannot connect to the first IP address listed in the DNS resolver cache then an error occurs e.g. the application usually fails . Also information in the DNS resolver cache may be stored in a file that can be used to preload the cache at boot e.g. a HOSTS file .

According to the method in a request block the client application requests a connection to a domain name DN e.g. www.msn.com . The client at the operating system level includes a mechanism to resolve the domain name. In some instances information may be cached at the client such that an IP address can be readily obtained. However where an IP address for the domain name is not cached then the name resolution mechanism routes the request to another machine such as the DNS server which can associate the requested domain name with one or more IP addresses.

In a reception block the client receives IP addresses associated with the requested domain name. Such addresses are typically stored in a client side resolver cache. The client then selects the first IP address in the cache. In the example of the address xxx.xxx.xxx.195 is the first IP address and is associated with the server i.e. a host of the www.msn.com domain name .

Upon selection of the first IP address the client attempts to establish a connection with the server . However per a failure block the connection fails. For example the server may be overloaded timeout down or on a pathway that is faulty. In such a situation the failover module selects another e.g. the next IP address in the cache which is the IP address xxx.xxx.xxx.197 which is associated with the server .

The method relies on the failover module of the client . The failover module can operate at an OS level in the client . The failover module may operate with or without notifying the client application . The failover module may operate in a seamless manner such that a user s experience of the client application is uninterrupted although possibly slightly delayed as failover occurs . As explained with respect to the failover module may also operate as or in conjunction with a service see e.g. the DNS service of .

As indicated in by a dashed arrow the failover module optionally notifies the client application of a failover. For example where the application is a stateful application it may require transmission of login information with a host server of a domain name e.g. an email account associated with the domain name www.hotmail.com . In such an example the specific email host server maintains state information such as login information or information generated at login. At failover the newly selected host server does not have the information stored by the failed host server and hence may require login by the stateful application . The failover module can allow the stateful application to transmit login or other stateful information to the newly selected host server. Such a process may occur in a seamless manner whereby user experience is not interrupted.

Optionally the failover module provides a notification that may be displayed via an OS interface to notify a user of a failover. This choice may be controlled by a client application or by a user. A client application may also include a mechanism that records displays etc. a failover notification. For example where the failover module has an associated application programming interface API an application developer may program features into a client application to respond to information received by the failover module . An exemplary failover module API may allow a client application to enable or disable failover see e.g. exemplary API functions of .

As described herein an exemplary failover module includes instructions to respond to a connection problem to a host server at an IP address by selecting a different IP address from a cached list of IP addresses for a domain name associated with the host server instructions to optionally initiate a connection to a host server at the selected different IP address and instructions to return the selected different IP address to future name queries and instructions to initiate a connection to a host server at the selected different IP address where the instructions to respond instructions to return and the instructions to initiate execute at an operating system level of a computing device configurable to connect to at least one of a plurality of host servers e.g. optionally a OS level service . By operating at the operating system level the knowledge of the connection problem is shared between applications In particular if a connection problem to the host server occurs in the context of a first application and the selected second IP address is returned in the context of a second application the second application will not experience the delay due to failing to connect to the first IP address before attempting the second IP address. In such a module the connection problem may be a connection failure an unacceptable connection response time or some other type of connection problem. As mentioned an application may be a stateless or stateful application. For a stateful application a host server typically stores state information about the application executing on the client. A failover module may include instructions to communicate state information to a host server.

As described herein an exemplary method for failover includes requesting resolution of a domain name e.g. name resolution receiving a list of IP addresses for host servers associated with the domain name selecting the first IP address in the list recognizing a connection problem to the host server associated with the first IP address selecting the second IP address in the list and establishing a connection to the host server at the second IP address. Such a method can occur without repeating a request for resolution of the domain name. While various examples refer to a first IP address and a second IP address in a situation where the second fails a third may be selected. More generally such an exemplary method selects the next IP address in a list where the particular position of that IP address typically depends on the position of the failed IP address e.g. 1failed select 2 2failed select 3 etc. . Hence an exemplary method may repeat a selecting step as many times as needed.

As mentioned an application may request resolution using an API call where the application seeks to establish a connection to a host server associated with the domain name. As described herein failover may occur in response to a failure of an established connection or a failure that prevents establishment of a connection.

The kernel space includes various components that operate in conjunction with a TCP IP stack which in turn operates via a network driver interface specification NDIS to communicate with network resources via frames . The TCP IP stack includes a transport layer a network layer and a framing layer . As shown frames are outgoing and frames are incoming both carry an IP datagram that may carry Internet Location Coordinate ILC information see e.g. .

The architecture includes the following APIs by which applications services or other system components access the TCP IP stack 

Sockets API used by Sockets based applications and services. The Sockets API operates through an Ancillary Function Driver AFD to perform Socket functions with the TCP IP stack .

Transport Driver Interface TDI used by NetBIOS over TCP IP NetBT clients and other legacy TDI clients . A translation layer exists between TDI and the TCP IP stack .

The TCP IP stack exposes an inspection API which provides a consistent general purpose interface to perform deep inspection or data modification of packet contents. The Inspection API is part of a filtering platform. The TCP IP stack provides access to the packet processing path at the Network and Transport layers.

The architecture includes the exemplary failover module which may be configured in any of a variety of manners. For example the failover module may be configured to directly access information in the TCP IP stack . The module may be configured to use the inspection API . The failover module may also be configured to expose an API for applications .

As already mentioned the failover module may be part of or function cooperatively with the DNS service . For example the failover module may be a separate OS service that can retrieve information from a resolver cache or resolver file.

The architecture also includes an ILC module which provides for processing Internet Location Coordinate ILC information. Such information is described in more detail with respect to . The ILC module may be configured to operate in conjunction with the failover module . For example failover may occur based at least in part on ILC information. The ILC module may be part of or function cooperatively with the DNS service . For example the ILC module may store ILC information in a cache and or a file associated with the DNS service .

The system may depend on time distance network traffic machine workload bandwidth etc. To understand better how such a system may be defined consider a vehicle on a major interstate highway en route to an airport. At various locations along the highway the state department of transportation transmits information to displays that provide information to vehicle operators. When the vehicle is at a display location the department of transportation may transmit a travel time message that indicates how many minutes it will take for a vehicle at the display location to reach the airport. Such information is helpful as the vehicle operator may decide to take an alternate route. Further the reasons for the stated travel time may be irrelevant to the vehicle operator. In other words the vehicle operator may not care whether the travel time is lengthy due to road construction holiday traffic an accident etc. While the department of transportation may choose to display a specific reason or reasons such information may not add much value to the information conveyed by a simple travel time in minutes.

As described herein in various examples an Internet Location Coordinate ILC may be a number a set of numbers or a set of numbers where each one is associated with some additional information e.g. a tuple for each beacon . An ILC may indicate a local position to a client where this position is with respect to a network logical space measuring travel time or congestion and not necessarily geographic location. ILCs may be compared to estimate travel time or congestion between participants. Such simplicity is in line with the DNS and such an ILC may be carried according to an existing DNS protocol.

Referring again to the system of the client acquires information associated with three beacons     and  . For example a beacon can act as a reflector where the client can send a packet to the beacon and receive a response packet. The client can then determine the round trip time RTT to and from a beacon e.g. a travel time . As the client performs the same process with multiple beacons i.e. the beacons     and   the client becomes more aware of its surroundings. In particular the client becomes aware of its own condition in the system where its own condition may be represented according to a number or a set of numbers etc. In the example of the condition is shown as Internet Location Coordinate ILC . While the example of shows three beacons other numbers of beacons may be used. Generally two or more beacons may be used.

As mentioned an ILC participant can be any resource on a network. Hence the web servers     and   may be participants that can determine respective ILCs using the beacons . For example the web server   may transmit packets to the beacons     and   and receive corresponding return packets. As the web server   may know a priori information about the beacons     and   it can now determine its position in the system e.g. its ILC .

As described herein the exemplary system allows clients to determine their position in a network logical space. Such information can be used for a variety of purposes. For example where the web servers     and   provide essentially identical services such information can be used to allow the client to connect to the best web server e.g. the closest server based on ILCs .

As described herein in various examples an Internet Location Coordinate ILC may be a number or a set of numbers e.g. a tuple for each beacon . An ILC may indicate local travel time to a client or local congestion around a client. Such simplicity is in line with the DNS and such an ILC may be carried according to an existing DNS protocol.

Referring again to the system of the client acquires information associated with three beacons     and  . For example a beacon can act as a reflector where the client can send a packet to the beacon and receive a response packet. The client can then determine the round trip time RTT to and from a beacon e.g. a travel time . As the client performs the same process with multiple beacons i.e. the beacons     and   the client becomes more aware of its surroundings. In particular the client becomes aware of its own condition in the system where its own condition may be represented according to a number or a set of numbers etc. In the example of the condition is shown as Internet Location Coordinate ILC .

As mentioned an ILC participant can be any resource on a network. Hence the web servers     and   may be participants that can determine respective ILCs using the beacons . For example the web server   may transmit packets to the beacons     and   and receive corresponding return packets. As the web server   may know a priori information about the beacons     and   it can now determine its condition in the system e.g. its ILC .

As described herein the exemplary system allows clients to determine their condition in a network space. Such information can be used for a variety of purposes. For example where the web servers     and   provide essentially identical services such information can be used to allow the client to connect to the best web server e.g. the closest server based on ILCs .

In an entry block a domain name is entered e.g. www.msn.com . In turn a DNS server may identify a plurality of servers associated with the domain name for example web server     and  . As explained each of the servers includes an ILC module to ascertain their respective ILCs. In a receipt block the client receives information about the group of servers along with the ILC for each of the servers in the group. In a determination block the client determines the optimal server based on the ILCs for the servers and its own ILC.

In the example of the client may be a user connected to the Internet and the domain name may be www.msn.com. This domain name has a plurality of associated servers at various geographical locations around the world. Given the exemplary system where beacons are scattered throughout the networked world each of servers for the www.msn.com domain name knows its own ILC. When the DNS server communicates with each server each server can respond by sending its ILC to the DNS server which in turn transmits this information to the client . The ILC module can then determine which server is the optimal server based on the client s ILC and those of the servers. In general the optimal server is the server that can provide the most efficient service to the client .

According to the method in a request block the client application requests a connection to a domain name DN e.g. www.msn.com . The client at the operating system level includes a mechanism to resolve the domain name and to select an optimal IP address associated with the domain name. In some instances IP address and ILC information may be cached at the client such that an optimal IP address can be readily obtained. However where an optimal IP address and ILC for the domain name is not cached then the name resolution mechanism routes the request to another machine such as the DNS server which can associate the requested domain name with one or more IP addresses and respective ILC s .

In a reception block the client receives IP addresses and ILCs associated with the requested domain name. The client uses the ILC module to select the optimal IP address based at least in part on the ILC information. In the example of the address xxx.xxx.xxx.195 is the optimal IP address based on an analysis of ILCs which may consider the ILC of the client .

Upon selection of the optimal IP address the client attempts to establish a connection with the server . However per a failure block the connection fails. For example the server may be overloaded resulting in a timeout down or on a pathway that is faulty. In such a situation the failover module selects the next best IP address based at least in part on an analysis of ILC information. As shown in the next best IP address is xxx.xxx.xxx.199 which is associated with the ILC enhanced server . In this example the client relies on the failover module and the ILC module .

As described herein an exemplary method for failover includes requesting resolution of a domain name receiving a list of IP addresses and Internet Location Coordinates for host servers associated with the domain name selecting a best IP address from the list based at least in part on the Internet Location Coordinates recognizing a connection problem to the host server associated with the optimal IP address selecting a next best IP address from the list based at least in part on the Internet Location Coordinates and establishing a connection to the host server at the next best IP address. Such a method may include receiving state information from a stateful application and communicating the state information to the host server at the next best IP address.

Time to live TTL functionality allows a client or client application to examine acquire or alter TTL information associated with one or more domain names IP addresses for example as stored in a cache and or a file.

Additional functionality allows for failover without ILC consideration which may be used by client applications that do not necessarily need the best host server. Yet further functionality allows a client or client application to present performance information which can reflect changes due to failover. Exemplary performance functionality allows a client application to select conditions for failover. For example if a client application requires a certain speed of transmission then a threshold may be set using the performance function to cause failover if the speed falls below the threshold.

In a very basic configuration computing device typically includes at least one processing unit and system memory . Depending on the exact configuration and type of computing device system memory may be volatile such as RAM non volatile such as ROM flash memory etc. or some combination of the two. System memory typically includes an operating system one or more program modules and may include program data . The operating system include a component based framework that supports components including properties and events objects inheritance polymorphism reflection and provides an object oriented component based application programming interface API such as that of the .NET Framework marketed by Microsoft Corporation Redmond Wash. The device is of a very basic configuration demarcated by a dashed line . Again a terminal may have fewer components but will interact with a computing device that may have such a basic configuration.

Computing device may have additional features or functionality. For example computing device may also include additional data storage devices removable and or non removable such as for example magnetic disks optical disks or tape. Such additional storage is illustrated in by removable storage and non removable storage . Computer storage media may include volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. System memory removable storage and non removable storage are all examples of computer storage media. Computer storage media includes but is not limited to RAM ROM EEPROM flash memory or other memory technology CD ROM digital versatile disks DVD or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can be accessed by computing device . Any such computer storage media may be part of device . Computing device may also have input device s such as keyboard mouse pen voice input device touch input device etc. Output device s such as a display speakers printer etc. may also be included. These devices are well know in the art and need not be discussed at length here.

Computing device may also contain communication connections that allow the device to communicate with other computing devices such as over a network. Communication connections are one example of communication media. Communication media may typically be embodied by computer readable instructions data structures program modules or other data forms. By way of example and not limitation communication media includes wired media such as a wired network or direct wired connection and wireless media such as acoustic RF infrared and other wireless media.

Although the subject matter has been described in language specific to structural features and or methodological acts it is to be understood that the subject matter defined in the appended claims is not necessarily limited to the specific features or acts described above. Rather the specific features and acts described above are disclosed as example forms of implementing the claims.

