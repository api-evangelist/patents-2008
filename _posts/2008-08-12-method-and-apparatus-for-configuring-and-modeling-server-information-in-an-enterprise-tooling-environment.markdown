---

title: Method and apparatus for configuring and modeling server information in an enterprise tooling environment
abstract: A computer implemented method, an apparatus, and a computer usable program product are provided for configuring and modeling server connection and deployment information in an enterprise tooling environment. A software model is provided that comprises a connections object, which includes a plurality of connection objects and deploy spec objects. Each of the connection objects is specific to a backend server type. A deploy controller is provided at run time to examine the connections object for a connection object. A backend resource manager is loaded for a specific application server. If a connection object is present, the backend resource manager loads a connection interpreter, which transforms development time connection information in the connection object to the run time connection information in corresponding deploy spec object and connection factory spec object. The backend resource manager then writes the deployment information to the configurations files of the application server.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07979525&OS=07979525&RS=07979525
owner: International Business Machines Corporation
number: 07979525
owner_city: Armonk
owner_country: US
publication_date: 20080812
---
This application is a continuation of application Ser. No. 11 213 237 filed Aug. 26 2005 status allowed.

The present invention relates generally to a data processing system. In particular the present invention relates to configuring and modeling server connections in a data processing system. Still more particular the present invention relates to configuring and modeling server information in an enterprise tooling environment of the data processing system.

Currently application developers use enterprise application development tools such as for example Rational Application Developer to develop enterprise applications. An enterprise tooling environment includes an integrated development environment IDE a graphical user interface and a runtime environment that are provided within an enterprise application development tool for developing enterprise applications. Rational Application Developer is a product available from International Business Machines Corporation. These development tools typically require a connection to be specified at development time in order to connect to backend servers. Backend servers include Enterprise Information Systems such as for example relational database servers SAP servers PeopleSoft servers and Siebel servers. SAP is a product available from SAP AG. PeopleSoft is a product available from Oracle Corporation. Siebel is a product available from Siebel Systems Inc.

In addition to a development time connection these development tools automatically set up runtime connection management configurations such as connection adapters based on users input. Most of the time the same information that is collected for development time connections may be used to set up run time configurations. Users are not separated from the concerns of setting up runtime configurations when they are in the development phase and no distinctions are drawn between development time and runtime portion of the connection model.

In addition development time connection information is not exactly in the same format as the run time connection information. For example the user Id of the development time connection may be called username but the user Id of the run time connection may be called userId .

The aspects of the present invention provide a computer implemented method an apparatus and a computer usable program product for configuring and modeling server connection and deployment information in an enterprise tooling environment. A software model comprising a connections object which includes at least one connection object and at least one deploy spec object. If a connections object is detected at deployment time a deploy controller is provided to determine whether at least one connection object is present to capture development time connection information specific to a backend server. The deploy controller then loads a backend resource manager specific to an application server to manage run time connections between the application server and the backend server.

With reference now to the figures depicts a pictorial representation of a network of data processing systems in which aspects of the present invention may be implemented. Network data processing system is a network of computers in which embodiments of the present invention may be implemented. Network data processing system contains a network which is the medium used to provide communication links between various devices and computers connected together within network data processing system . Network may include connections such as wire wireless communication links or fiber optic cables.

In the depicted example server connects to network along with storage unit . In addition clients and connect to network . These clients and may be for example personal computers or network computers. In the depicted example server provides data such as boot files operating system images and applications to clients . Clients and are clients to server . Network data processing system may include additional servers clients and other devices not shown.

In the depicted example network data processing system is the Internet with network representing a worldwide collection of networks and gateways that use the Transmission Control Protocol Internet Protocol TCP IP suite of protocols to communicate with one another. At the heart of the Internet is a backbone of high speed data communication lines between major nodes or host computers consisting of thousands of commercial governmental educational and other computer systems that route data and messages. Of course network data processing system also may be implemented as a number of different types of networks such as for example an intranet a local area network LAN or a wide area network WAN . is intended as an example and not as an architectural limitation for different embodiments of the present invention.

Referring to a block diagram of a data processing system that may be implemented as a server such as server in is depicted in accordance with an illustrative embodiment of the present invention. Data processing system may be a symmetric multiprocessor SMP system including a plurality of processors and that connect to system bus . Alternatively a single processor system may be employed. Also connected to system bus is memory controller cache which provides an interface to local memory . I O bus bridge connects to system bus and provides an interface to I O bus . Memory controller cache and I O bus bridge may be integrated as depicted.

Peripheral component interconnect PCI bus bridge connects to I O bus provides an interface to PCI local bus . A number of modems may be connected to PCI local bus . Typical PCI bus implementations will support four PCI expansion slots or add in connectors. Communication links to clients in may be provided through modem and network adapter connected to PCI local bus through add in connectors.

Additional PCI bus bridges and provide interfaces for additional PCI local buses and from which additional modems or network adapters may be supported. In this manner data processing system allows connections to multiple network computers. A memory mapped graphics adapter and hard disk may also be connected to I O bus as depicted either directly or indirectly.

Those of ordinary skill in the art will appreciate that the hardware depicted in may vary. For example other peripheral devices such as optical disk drives and the like also may be used in addition to or in place of the hardware depicted. The depicted example is not meant to imply architectural limitations with respect to the present invention.

The data processing system depicted in may be for example an IBM eServer pSeries computer system running the Advanced Interactive Executive AIX operating system or the LINUX operating system eServer pSeries and AIX are trademarks of International Business Machines Corporation in the United States other countries or both while LINUX is a trademark of Linus Torvalds in the United States other countries or both .

With reference now to a block diagram of a data processing system is shown in which aspects of the present invention may be implemented. Data processing system is an example of a computer such as client in in which codes or instructions implementing the processes for embodiments of the present invention may be located. In the depicted example data processing system employs a hub architecture including a north bridge and memory controller hub NB MCH and a south bridge and input output I O controller hub SB ICH . Processor main memory and graphics processor are connected to NB MCH . Graphics processor may be connected to the MCH through an accelerated graphics port AGP for example. In the depicted example local area network LAN adapter audio adapter keyboard and mouse adapter modem read only memory ROM hard disk drive HDD CD ROM drive universal serial bus USB ports and other communication ports and PCI PCIe devices connect to SB ICH . PCI PCIe devices may include for example Ethernet adapters add in cards PC cards for notebook computers etc. PCI uses a card bus controller while PCIe does not. ROM may be for example a flash binary input output system BIOS . HDD and CD ROM drive may use for example an integrated drive electronics IDE or serial advanced technology attachment SATA interface. A super I O SIO device may be connected to SB ICH .

An operating system runs on processor and coordinates and provides control of various components within data processing system in . The operating system may be a commercially available operating system such as Microsoft Windows XP Microsoft and Windows are trademarks of Microsoft Corporation in the United States other countries or both . An object oriented programming system such as the Java programming system may run in conjunction with the operating system and provides calls to the operating system from Java programs or applications executing on data processing system Java is a trademark of Sun Microsystems Inc. in the United States other countries or both .

Instructions for the operating systems the object oriented programming systems and applications or programs are located on storage devices such as hard disk drive and may be loaded into main memory for execution by processor . The processes for embodiments of the present invention are performed by processor using computer implemented instructions which may be located in a memory such as for example main memory ROM or in one or more peripheral devices and . These processes may be executed by any processing unit which may contain one or more processors.

Those of ordinary skill in the art will appreciate that the hardware in may vary depending on the implementation. Other internal hardware or peripheral devices such as flash memory equivalent non volatile memory or optical disk drives and the like may be used in addition to or in place of the hardware depicted in . Also the processes of the present invention may be applied to a multiprocessor data processing system.

A bus system may be comprised of one or more buses such as system bus I O bus and PCI buses and as shown in . Of course the bus system may be implemented using any type of communication fabric or architecture that provides a transfer of data between different components or devices attached to the fabric or architecture. A communication unit may include one or more devices used to transmit and receive data such as modem or network adapter of or modem or LAN of . A memory may be for example local memory or cache such as found in memory controller cache of or main memory of . A processing unit may include one or more processors or CPUs such as processor or processor of or processor of . The depicted examples in and above described examples are not meant to imply architectural limitations. For example data processing system also may be a tablet computer laptop computer or telephone device in addition to taking the form of a PDA.

The aspects of the present invention provide a computer implemented method an apparatus and a computer usable program product for configuring and modeling server connections in an enterprise tooling environment. In particular the different aspects of the present invention may be implemented in a Java enterprise tooling environment. The processes of the present invention are performed by a processing unit that comprises one or more processors such as processor in using computer implemented instructions which may be located in a memory such as for example main memory ROM or in one or more peripheral devices and in . In an illustrative embodiment the aspects of the present invention may be implemented using an application programming interface such as Eclipse API within an enterprise application development tool such as Rational Application Developer.

The aspects of present invention provide a software model that separates development time connection information from deployment or run time connection information. Development time connection information is information that is known at the time the enterprise application is developed and is used for connecting with the backend server. Examples of development time connection information include a name a user id a password and a trace level for the server. At development time an aspect of the present invention allows users to create populate and edit a connection object in the software model. At deployment or run time an aspect of the present invention provides a deploy controller that uses the information collected in the connection object to locate modify or construct the corresponding deployment specification object and connection factory specification object to configure the backend server. A connection object includes deployment time connection information for a particular type of backend server. For example a Siebel connection object includes deployment time connection information for a Siebel backend server. The connection object is a collection of connection objects representing deployment time connection information for different backend server types and deploy spec objects representing runtime connection information for the different backend server types.

Turning now to a diagram illustrating interactions between components for configuring and modeling server connection and deployment information in an enterprise tooling environment is depicted in accordance with an illustrative embodiment of the present invention. As shown in user may create populate or edit connection object provided within software model . Software model may be implemented using an application programming interface such as Eclipse API within an enterprise application development tool. Connection object includes attributes that are specific to a backend server. Once connection object is created edited or populated it is added to connections object . More details regarding software model is discussed in .

At deployment time the different illustrative examples of present invention provide deploy controller that uses the information within connection object to locate modify or construct the corresponding deployment specification object and connection factory specification object . Deploy controller may be implemented as a module within an enterprise tooling environment executed by user . After deployment specification object and connection factory specification object are filled Java enterprise deployment information are written to configuration files in Web server .

Turning now to a class diagram depicting a software model for modeling server connections in an enterprise tooling environment is depicted in accordance with an illustrative embodiment of the present invention. describes software model in in greater detail. As shown in software model includes connections object which comprises zero or more connection objects and zero or more deploy spec objects .

 Connection object includes development time server connection information such as name userID password traceLevel and eisType . For each backend server type a unique connection object with system specific attributes is created by subclassing connection object . In this example there are three connection objects that subclass connection object Siebel connection object representing a Siebel backend server PeopleSoft connection object representing a PeopleSoft backend server and SAP connection object representing a SAP backend server.

Other backend server types may also be supported by subclassing connection object without departing the scope and spirit of the present invention. Subclassing means creating a concrete instance of connection object by inheriting from the object.

Deploy spec objects capture run time specific connection information for example the class path of a Java enterprise module to be deployed at runtime and are kept separate from development time information that is captured inside connection object . Deploy spec objects are not instantiated until the application is deployed. At deployment time the deploy controller examines development time connection information in connection object in order to create deploy spec objects . Deploy spec objects capture run time connection information and each deploy spec object includes zero or more connection factory spec objects . Connection factory spec objects include run time information necessary to reference connection object .

Turning now to a diagram of an exemplary deployment scenario using the software model in is depicted in accordance with an illustrative embodiment of the present invention. As shown in in this example scenario connections object are shared among three applications servers IBM WebSphere Application Server V6 IBM WebSphere Portal V5.1 and BEA Weblogic 8 . Application servers are servers in which enterprise applications are executed. IBM WebSphere Application Server V6 and IBM WebSphere Portal V5.1 are products available from International Business Machines Corporation. BEA Weblogic 8 is a product available from BEA Systems Inc. The illustrated application servers are presented for purposes of depicting one example of the different embodiments of the present invention. The different aspects of the present invention may be implemented using any type and numbers of application servers.

IBM WebSphere Application Server V6 is connected to PeopleSoft 8.4 backend server while IBM WebSphere Portal V5.1 is connected to PeopleSoft 8.4 backend server SAP R 3 backend server and Oracle 9i backend server . Backend servers are servers in which enterprise data or applications are stored. BEA Weblogic 8 is also connected to SAP R 3 backend server as well as Domino 6 backend server . PeopleSoft 8.4 and Oracle 9i are products available from Oracle Corporation. SAP R 3 is a product available from SAP AG. Domino 6 is a product available from International Business Machines Corporation.

Since application servers connect to four different backend servers four connection objects are used to capture development time connection information in this example. At deployment time deploy controller provided by an aspect of the present invention loads a backend resource manager BERM for each application server type and a connection interpreter for each backend server type. In this example scenario WAS V6 BERM is loaded for IBM WebSphere Application Server V6 WPS V5.1 BERM is loaded for IBM WPS V5.1 and BEA 8 BERM is loaded for BEA Weblogic 8 .

Backend resource managers are responsible for configuring application servers with the needed resources to manager connections to backend servers at runtime. Connection interpreters are used by the deploy controller to construct any needed deploy spec objects and connection factory spec objects. In addition each connection interpreter transforms connection information collected at development time to run time connection information for the specific backend server type. For example development time user Id may be called username . At deployment time connection interpreter transforms username to userId for a J2C resource adapter.

Turning now to a flowchart of an exemplary process for configuring run time server connections in an enterprise tooling environment using a deploy controller is depicted in according with an illustrative embodiment of the present invention.

As shown in the process begins when an enterprise application development tool invokes the deploy controller at deployment time step . The deploy controller examines the connections object which includes zero or more connection objects step and makes a determination as to whether additional connection objects are present step . If no additional connection objects are present the process terminates thereafter.

However if additional connection objects are present the deploy controller loads a backend resource manager for the given application server type step which examines the connections object and makes a determination as to whether a deploy spec object is present step . If a deploy spec object is not present in the connections object the backend resource manager creates a new deploy spec object step and continues to step .

If a deploy spec object is present in the connections object the backend resource manager loads a connection interpreter for the backend server type step . The connection interpreter transforms the development time connection model to a run time connection model.

The backend resource manager then examines the deploy spec object and makes a determination as to whether a connection factory spec object is present step . If no connection factory spec object is present in the deploy spec object the backend resource manager creates a new connection factory spec object step and continues to step .

If a connection factory spec object is present the connection interpreter transforms development time connection information in the connection object to run time connection information and fills the deploy spec object and connection factory spec object with the run time connection information step .

The connection interpreter performs the transformation by first determining a format of the run time connection information specific to the backend server type. The connection interpreter then translates the development time connection information in the connection object for the application server to a run time connection information format that is specific to that backend server type.

After the deploy spec and connection factory spec objects are filled the backend resource manager writes enterprise deployment information to Web Server Configuration files step for deployment and the process terminates thereafter.

In summary the different aspects of the present invention provide a software model that captures development time and run time server connection information. In addition the aspects of the present invention provide a deploy controller that automatically transforms the development time server connection information to run time server connection information such that the users are only required to configure server connections once. By using the aspects of the present invention application developers may enable a new backend server by simply subclassing the connection object in the software model. In this way users are separated from the concerns of setting up run time configurations when they are in the development phase.

The invention can take the form of an entirely hardware embodiment an entirely software embodiment or an embodiment containing both hardware and software elements. In a preferred embodiment the invention is implemented in software which includes but is not limited to firmware resident software microcode etc.

Furthermore the invention can take the form of a computer program product accessible from a computer usable or computer readable medium providing program code for use by or in connection with a computer or any instruction execution system. For the purposes of this description a computer usable or computer readable medium can be any apparatus that can contain store communicate propagate or transport the program for use by or in connection with the instruction execution system apparatus or device.

The medium can be an electronic magnetic optical electromagnetic infrared or semiconductor system or an apparatus or device or a propagation medium. Examples of a computer readable medium include a semiconductor or solid state memory a magnetic tape a removable computer diskette a random access memory RAM a read only memory ROM a rigid magnetic disk and an optical disk. Current examples of optical disks include compact disk read only memory CD ROM compact disk read write CD R W and digital video disc DVD .

A data processing system suitable for storing and or executing program code will include at least one processor coupled directly or indirectly to memory elements through a system bus. The memory elements can include local memory employed during actual execution of the program code bulk storage and cache memories which provide temporary storage of at least some program code in order to reduce the number of times code must be retrieved from bulk storage during execution.

Input output or I O devices including but not limited to keyboards displays pointing devices etc. can be coupled to the system either directly or through intervening I O controllers.

Network adapters may also be coupled to the system to enable the data processing system to become coupled to other data processing systems or remote printers or storage devices through intervening private or public networks. Modems cable modems and Ethernet cards are just a few of the currently available types of network adapters.

The description of the present invention has been presented for purposes of illustration and description and is not intended to be exhaustive or limited to the invention in the form disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art. The embodiment was chosen and described in order to best explain the principles of the invention the practical application and to enable others of ordinary skill in the art to understand the invention for various embodiments with various modifications as are suited to the particular use contemplated.

