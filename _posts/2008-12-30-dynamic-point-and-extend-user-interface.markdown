---

title: Dynamic point and extend user interface
abstract: A computer-implemented method of extending a user interface of an executing application can include placing the user interface in a configure mode that allows functionality of the user interface to be extended and visually distinguishing an element of the user interface that is extendable. Responsive to a user input requesting extension of the functionality of the element, an editing window can be displayed within the user interface. The method can include receiving, within the editing window, computer-usable program code specifying extended functionality for the element and storing the computer-usable program code as part of an extension to the element. The extension can be bound to an extension point exposed for the element of the user interface.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08219922&OS=08219922&RS=08219922
owner: International Business Machines Corporation
number: 08219922
owner_city: Armonk
owner_country: US
publication_date: 20081230
---
The embodiments of the present invention relate to extending the functionality and customizing the user interface of a computer program. The ability to customize a user interface and extend the functionality of a computer program is an important consideration in computer program development is deployed. In view of the complexity of modern computer programs and the many functions such computer programs can provide it can be difficult for software developers to anticipate each possible use or extension of a computer program by an end user.

Typically the particular extensions implemented for a given computer program will be organization specific. That is the extensions implemented and used by one organization will likely be different from the extensions implemented and used within another organization for the same computer program. This often stems from the fact that the functionality of computer program that is needed by many organizations is driven largely by the particular business environment in which each organization utilizes the computer program.

The embodiments disclosed herein relate to extending the functionality of a computer program. One embodiment of the present invention can include a computer implemented method of extending a user interface of an executing application. The method can include placing the user interface in a configure mode that allows functionality of the user interface to be extended and visually distinguishing an element of the user interface that is extendable. Responsive to a user input requesting to expand functionality of the element an editing window can be displayed within the user interface. The method can include receiving within the editing window computer usable program code specifying a function for the element and storing the computer usable program code as part of an extension to the element. The extension can be bound to an extension point exposed for the element of the user interface.

Another embodiment of the present invention can include a computer implemented method of extending functionality of a computer program. The method can include placing the user interface in a configure mode that allows the computer program to be extended determining an operation performed by the computer program that is extendable and that is not represented by an element within the user interface and displaying an indicator corresponding to the operation within the user interface. Responsive to a user selection of the indicator an editing window can be displayed within the user interface. The method can include receiving within the editing window computer usable program code specifying a function for the computer program and storing the computer usable program code as part of an extension to the operation. The extension can be bound to an extension point exposed for the operation of the computer program.

Yet another embodiment of the present invention can include a computer program product including a computer usable medium having computer usable program code that when executed causes a machine to perform the various steps and or functions described herein.

As will be appreciated by one skilled in the art embodiments of the present invention may take the form of a system method or computer program product. Accordingly the present invention may take the form of an entirely hardware embodiment an entirely software embodiment including firmware resident software micro code etc. or an embodiment combining software and hardware aspects that may all generally be referred to herein as a circuit module or system. Furthermore an embodiment of the present invention may take the form of a computer program product embodied in any tangible medium of expression having computer usable program code embodied in the medium.

Any combination of one or more computer usable or computer readable medium s may be utilized. The computer usable or computer readable medium may be for example but is not limited to an electronic magnetic optical magneto optical electromagnetic infrared or semiconductor system apparatus device or propagation medium. More specific examples a non exhaustive list of the computer readable medium would include the following an electrical connection having one or more wires a portable computer diskette a hard disk a random access memory RAM a read only memory ROM an erasable programmable read only memory EPROM or Flash memory an optical fiber a portable compact disc read only memory CDROM an optical storage device a transmission media such as those supporting the Internet or an intranet or a magnetic storage device. Note that the computer usable or computer readable medium could even be paper or another suitable medium upon which the program is printed as the program can be electronically captured via for instance optical scanning of the paper or other medium then compiled interpreted or otherwise processed in a suitable manner if necessary and then stored in a computer memory. In the context of this document a computer usable or computer readable medium may be any medium that can contain store communicate propagate or transport the program for use by or in connection with the instruction execution system apparatus or device. The computer usable medium may include a propagated data signal with the computer usable program code embodied therewith either in baseband or as part of a carrier wave. The computer usable program code may be transmitted using any appropriate medium including but not limited to wireless wireline optical fiber cable RF etc.

Computer program code for carrying out operations of the present invention may be written in any combination of one or more programming languages including an object oriented programming language such as Java Smalltalk C or the like and conventional procedural programming languages such as the C programming language or similar programming languages. Computer program code also may be written in a programming language that must be compiled or a programming language that is interpreted e.g. JavaScript Ruby or Python. The program code may execute entirely on the user s computer partly on the user s computer as a stand alone software package partly on the user s computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario the remote computer may be connected to the user s computer through any type of network including a local area network LAN or a wide area network WAN or the connection may be made to an external computer for example through the Internet using an Internet Service Provider .

The present invention is described below with reference to flowchart illustrations and or block diagrams of methods apparatus systems and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and or block diagrams and combinations of blocks in the flowchart illustrations and or block diagrams can be implemented by computer program instructions. These computer program instructions may be provided to a processor of a general purpose computer special purpose computer or other programmable data processing apparatus to produce a machine such that the instructions which execute via the processor of the computer or other programmable data processing apparatus create means for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

These computer program instructions may also be stored in a computer readable medium that can direct a computer or other programmable data processing apparatus to function in a particular manner such that the instructions stored in the computer readable medium produce an article of manufacture including instruction means which implement the function act specified in the flowchart and or block diagram block or blocks.

The computer program instructions may also be loaded onto a computer or other programmable data processing apparatus to cause a series of operational steps to be performed on the computer or other programmable apparatus to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide processes for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

The embodiments disclosed within this specification allow a computer program and a user interface of that computer program to be dynamically extended. In accordance with the inventive arrangements disclosed herein the user interface of a computer program can be extended in a manner that provides the user with immediate visual feedback relating to the additional functionality being added. In general a user may place a user interface of a computer program into a configure mode. While in that mode the user may select particular elements of the user interface to extend. Additional visual cues can be provided from the computer program to guide the extension process. When complete the functionality specified by the user can be stored and bound to the selected user interface element.

The embodiments disclosed herein can be applied to any of a variety of different user interface elements. For example elements of a user interface including but not limited to menus toolbars sidebars status area side shelves editors viewers and the like can be extended using the techniques described within this specification. Once added the newly specified function of the user interface can become immediately usable by the user of the computer program.

Input output I O devices such as a keyboard a display and a pointing device not shown optionally can be coupled to system as well as one or more other I O devices. The I O devices can be coupled to system either directly or through intervening I O controllers. Network adapters also can be coupled to system to enable system to become coupled to other data processing systems or remote printers or storage devices through intervening private or public networks. Modems cable modems and Ethernet cards are just a few of the currently available types of network adapters.

As shown system can include a computer program that includes a multimodal user interface hereafter computer program . The user interface of computer program can include a first mode referred to as a normal mode that allows a user of computer program to access the various elements presented within the user interface. A second mode referred to as a configure mode also can be included in the user interface. The configure mode allows a user to dynamically extend the user interface of computer program and associate new functionality with the user interface. While in the configure mode the user interface can be extended by the user selecting a particular element of the user interface to extend using a pointer or other selection mechanism. While further details will be described with reference to the remaining figures the embodiments disclosed herein provide the user with visual feedback throughout the process of extending the user interface.

In the example pictured in user interface has been placed in configure mode as the user wishes to extend the functionality of some aspect of user interface . The user for example may access any of a variety of different controls provided by computer program in order to change the operational mode of user interface between the normal mode and the configure mode. In another aspect rather than providing native ability to switch between the normal mode and the configure mode within computer program itself computer program can be executed within an integrated development environment IDE that provides the different modes and provides the user the ability to switch back and forth between the modes while computer program executes in the IDE.

As shown user interface can include a plurality of elements such as menu bar toolbar and toolbar . Each of these elements further can include one or more elements. For example toolbar can include a plurality of selectable controls e.g. buttons and . Similarly toolbar can include a plurality of selectable controls and . When placed in configure mode the functionality of computer program and user interface can be extended.

In one embodiment computer program and thus user interface can be specified in terms of a plurality of plug ins each specifying a particular functionality or aspect of computer program . For example with reference to one plug in can be responsible for generating menu bar . Another plug in can be responsible for generating toolbar and another for generating toolbar . Each plug in may or may not allow for additional functionality to be specified and thus added to the related visual element e.g. elements and or . One way of allowing functionality to be added is by exposing extension points. Each plug in for example may expose one or more extension points to be described herein in greater detail.

Within configure mode movement of pointer can be tracked. Input received from the user can be intercepted e.g. pointer movements and selections. As pointer is moved over a particular element of user interface such as menu bar toolbar or toolbar that element can be visually distinguished from other elements of user interface . In the example shown pointer is placed over e.g. is hovering over toolbar . Accordingly toolbar has been highlighted and visually distinguished from menu bar and toolbar .

Visually distinguishing an element of user interface in this manner indicates that the selected element can be functionally extended as will be described in greater detail within this specification. For example only those elements of user interface that have one or more extension points exposed e.g. correspond to a module with one or more exposed extension points may be visually distinguished. It should be appreciated that hovering pointer over a particular element of user interface is one manner of selecting the element or providing user input to a system . In one embodiment when user interface is placed in configure mode each element of user interface that can be extended can be visually distinguished whether or not the user hovers pointer over such element.

In another embodiment when in configure mode computer program can access an access control list specifying rights of different users to extend the functionality of user interface or computer program . For example when placed in configure mode computer program can load or read the access control list. The access control list can indicate which users are permitted to modify which elements of the displayed user interface . In this example visually distinguishing toolbar indicates that the user is permitted according to the access control list to modify the functionality of toolbar . If for example the user is not permitted to modify the functionality of toolbar when the user moves pointer over toolbar toolbar would not be visually distinguished or highlighted as the user is not permitted to modify that element of user interface . In an embodiment in which any extendable visual elements are automatically visually distinguished when placed in configure mode each element of user interface that the user is permitted to extend according to the access control list can be visually distinguished.

It should be appreciated that the particular manner in which extendable elements of a user interface are visually distinguished from those that are not extendable is not intended to be limiting. Extendable visual elements can be indicated as such when user interface is placed in configure mode in any of a variety of different ways e.g. highlighting changing the color of the element including an additional indicator e.g. an additional specially colored or marked control e.g. a button or the like. The examples noted within this specification are provided for purposes of illustration only and as such are not intended to limit the embodiments described.

In the example pictured the user has selected toolbar by hovering pointer over the toolbar . Accordingly toolbar is highlighted indicating that toolbar may be extended in terms of functionality by the user. In this example responsive to a further selection of toolbar e.g. a left click when in configure mode an editing window and a list of extension points available or corresponding to toolbar can be displayed.

It should be appreciated that in the embodiment described with reference to a user can select the additional control to accomplish largely the same result. That is rather than selecting the element to be extended directly a user can select the indicator that is displayed within the element when user interface is placed in configure mode. When the indicator e.g. control of is selected editing window and list can be displayed.

In another embodiment when placed in configure mode and pointer selects toolbar editing window can be displayed. In this embedment an additional control can be presented within toolbar that when selected causes list of extension points to be displayed. In such an embodiment editing window can be displayable independently of whether list is displayed.

In any case editing window and list can be displayed atop or within user interface . Editing window can receive computer usable program code that can be entered by the user to extend the functionality of toolbar and thus computer program . For example the computer usable program code that can be received by editing window can be in the form of script or a reference to compiled code. It should be appreciated that by extending the functionality of toolbar or computer program additional functionality e.g. an additional function not originally included within computer program can be provided or specified. This is to be contrasted with the creation of a macro for example which relies upon new combinations of existing functionality. By allowing a user to specify computer usable program code entirely new functions can be created and added to computer program . The newly specified functionality for computer program can be referred to as an extension as will be described in greater detail within this specification.

List of extension points as noted can include one or more extension points that exist for toolbar . An extension point allows other components or plug ins to extend or customize portions of the functionality of the plug in to which the extension point corresponds. Each plug in can declare zero or more extension points. In this example the plug in responsible for toolbar will have declared extension points and .

Each extension point can declare an interface e.g. a contract. For example the interface can be specified in terms of a combination of Extensible Markup Language XML files and or other programmatic interfaces e.g. Java to which an extension that accesses the extension point must conform. A plug in that wishes to connect to an extension point must implement that interface in their extension. Extension points allow extensibility where the plug in that is being extended need not be aware of the plug in that is providing an extension e.g. a new function.

One type of extension point for example can be entirely declarative and as such provide no code at all. Examples of such extension points can include those that provide customized key bindings and those that define custom file annotations. Other types of extension points can be used to override default behavior of a component. For example some extension points allow other plug ins to replace the implementation of basic operations of the computer program such as deletion. A newly specified deletion function can be used in lieu of the native deletion function of computer program by allowing the newly specified deletion function to access the extension point provided by the computer program associated with the native deletion function or plug in. This list of available extension points is not intended to be exhaustive but rather to illustrate different types of extension points that may be provided within a given computer program and the manner in which new functions can be specified.

Each of extension points can be application level extension points system level extension points or a combination of both. In one aspect extension points can be a subset of the available extension points determined from filtering the available extension points for toolbar according to a selected parameter. For example extension points can be filtered so that list displays only those extension points that are not part of a user interface supporting set only extension points related to toolbar only application level extension points only system level extension points or only extension points corresponding to some specified parameter.

The filtering described can be used in the context of a search function. Such a search allows a user to search for a particular extension point or a particular extension that is bound to an extension point and recall the computer usable program code specifying the extension. The user can copy any desired portion of the computer usable program code of the extension and paste the selected computer usable program code into edit window as may be desired as a starting point for creating an extension for toolbar .

Access control lists while described with reference to elements of user interface also can be applied on a per extension point basis. For example if a user is not permitted to utilize a particular extension point the reference to that extension point as displayed within list can be darkened or otherwise changed to indicate that it is not available to the user or is not selectable. Alternatively such an extension point can be filtered as described and not shown within list .

In one embodiment a user may completely specify the extension for a given element such as toolbar within editing window . The user may enter computer usable program code specifying the particular functions and necessary accompanying computer usable program code to properly access a given extension point for toolbar .

In another embodiment the user can select one of the available extension points or . Responsive to that selection a template of computer usable program code e.g. a stub can be generated and presented within editing window . The template can include necessary interface functions registration metadata and starter code for specifying an extension to the selected extension point from the list . The template further can include comments that provide instructions to the user indicating where any user specified function is to be placed within the template.

In another embodiment template generation can be hidden from the user. That is the template can be generated but not presented within editing window . In that case for example the user may simply enter the user specified function into editing window . Upon exiting editing window the user provided function can be incorporated into or inserted into the template in the appropriate location.

In yet another embodiment one or more input panels can be displayed in the form of a wizard. User specified data can be received through the wizard e.g. in the form of data or references to code stored elsewhere. A code generator can be invoked to output the extension as a combination of lower level stub code automatically generated by the code generator which incorporates the user specified data at the appropriate locations. As used herein output or outputting can include but is not limited to storing data in memory e.g. writing to a file writing to a user display or other output device e.g. playing audible notifications sending or transmitting to another system exporting or the like.

In any case responsive to a user command or upon exiting editing window the template and user specified function s can be persisted to or output to memory as an extension. The extension can be bound to the user selected extension point.

In one embodiment the type of computer usable program code that can be entered into editing window can be script or an interpretive language that does not require compilation. In this manner the user specified function can be integrated into the template and output as an extension to toolbar to memory . The resulting extension can be invoked e.g. interpreted upon selection of a control that is included in toolbar and associated with the extension.

In another embodiment the computer usable program code that can be entered into editing window can require compilation. In that case computer program can include compilation functions or the compilation functions can be provided by the IDE within which computer program can be executed. In any case the user specified function can be combined with the template and compiled into an extension that can be output to memory .

Though not illustrated in it should be appreciated that a user may select a particular element e.g. control . When control is a control that has previously been defined through an extension technique as described within this specification selection of control can cause editing window to be displayed with the computer usable program code previously entered thereby allowing a user to edit the computer usable program code. Depending upon the configuration either the complete extension can be displayed or only those portions that were user specified e.g. without displaying any template code.

When the computer usable program code entered into editing window is persisted to memory and bound to an extension point toolbar can be modified to appear as shown where control is shown. Control can when activated can invoke the newly specified functionality e.g. invoke or execute the extension associated therewith. In one embodiment responsive to persisting the extension to memory and creating control user interface can be automatically taken out of configure mode and placed back into normal mode.

In another embodiment an operation of computer program can be extended through the use of extension points without having to modify an element of a user interface. For example responsive to placing the computer program in configure mode a control can be provided that when selected provides a list of extension points that are not affiliated with visual elements of the user interface. As discussed such a list can be filtered sorted or the like to allow the user to more easily locate a desired extension point. For example areas of extensibility that do not have corresponding elements in the user interface can be indicated by a menu that can be displayed within the IDE or in the form of a hanging or added user interface component that only becomes visible when the user interface is placed in configure mode.

In illustration the underlying functionality of computer program can be changed without providing any user accessible control. Consider the case where computer program is being modified to include functionality to process contacts specified in a format that is not natively supported by computer program . An extension point for reformatting contacts may be exposed by a plug in that operates on contacts within compute program . That extension point can be displayed within a list of extension points responsive to one or more user inputs when computer program is placed in configure mode.

Responsive to selecting that extension point from the list an editing window can be presented with or without appropriate template code. User specified computer usable program code that can parse a different contact format and convert the contact format into one that is understood or native to computer program can be inserted into the editing window. When saved or the user exits the editing window the resulting extension can be output and bound to the extension point thereby altering the functionality or native operation of computer program to now have the ability to process the newly specified contacts format. For example the prior operation of processing contacts within computer program can be replaced with the extension. The functionality is embedded within computer program and is not tied directly to any element of the user interface. The element of the user interface that was displayed within configure mode to access such extension points can be removed from the user interface when taken out of configure mode.

It should be appreciated that access control lists also can be applied in this example to control which users are able to access extension points that are not affiliated with an element of the user interface. In that case the access control lists can specify user access on a per extension point basis rather than according to particular elements of the user interface.

While the embodiments described herein have been illustrated largely through the use of toolbar type visual elements it should be appreciated that the techniques described can be applied to any of a variety of visual elements if such elements correspond to a plug in that has exposed one or more extension points. For example menu items can be added to a menu radio buttons can be added to a region of a user interface etc. Each of the added controls can be used to invoke new functionality specified through an extension that was not natively included within computer program .

Method can begin in step where the system can receive a user input that places the computer program in configure mode. In step the system can visually distinguish one or more elements of the user interface that can be extended. As noted in one embodiment the various user interface elements that can be extended e.g. that have extension points each can be visually distinguished from those elements of the user interface that do not have extension points. For example the system can search the available extension points correlate the extension points to elements of the displayed user interface and visually distinguish each element according to the extension points found that correlate to each respective element.

In another embodiment the system can visually distinguish an element in the configure mode only after a selection of the element by the user e.g. by hovering a pointer over the element or the like. In that case an element will only be distinguished when at least one extension point is available for the element the element is selected and the user interface is in configure mode. As noted an access control list can be applied to control whether a particular user may extend the functionality of any given element of the user interface.

In step the system can receive a user input that requests extension of the functionality of an element of the user interface. Any of the visually distinguished elements for example can be selected and therefore specified by the user input requesting extension. In step responsive to the user input the system can display an edit window through which the user can input computer usable program code to be included within an extension for the selected element.

In step responsive to the user input the system can determine each of the extension points associated with the selected element to be extended. That is each extension point exposed by the plug in that controls the selected element of the user interface can be determined. In step the system can display the extension points determined in step within a list upon or within the user interface.

In step the system can receive a user input selecting an extension point from the list of extension points. In step the system can generate template code for the selected extension point. As noted in one embodiment the generated template code can be placed in the edit window with comments or other indications of where any user specified computer usable program code e.g. user specified functions are to be inserted. In another embodiment the generated template can remain hidden such that the user enters only the user specified function into the edit window. Still as noted a wizard style interface can be presented to collect user input.

In step the system can combine the template with the user provided computer usable program code to generate an extension that can be output to memory. As noted depending upon the particular implementation compilation of the user specified computer usable program code and or the template can be required to generate the extension. In step the extension can be bound to the selected extension point. In step an element can be created and added to the selected element of the user interface of the computer program.

The embodiments described within this specification refer to the use of extension points as a means of extending the functionality of a computer program and or a user interface of a computer program e.g. providing extensions. It should be appreciated that the techniques described however can be applied with respect to other technologies that can be used to extend the capabilities or functionality of a computer program and or user interface. For example the techniques described within this specification can be applied to systems that allow the functionality of a user interface to be extended or customized through the use application programming interfaces APIs service provider interfaces SPIs or other mechanisms for binding a new function to an existing function.

The flowchart and block diagrams in the figures illustrate the architecture functionality and operation of possible implementations of systems methods and computer program products according to various embodiments of the present invention. In this regard each block in the flowchart or block diagrams may represent a module segment or portion of code which comprises one or more executable instructions for implementing the specified logical function s . It should also be noted that in some alternative implementations the functions noted in the block may occur out of the order noted in the figures. For example two blocks shown in succession may in fact be executed substantially concurrently or the blocks may sometimes be executed in the reverse order depending upon the functionality involved. It will also be noted that each block of the block diagrams and or flowchart illustration and combinations of blocks in the block diagrams and or flowchart illustration can be implemented by special purpose hardware based systems that perform the specified functions or acts or combinations of special purpose hardware and computer instructions.

The terminology used herein is for the purpose of describing particular embodiments only and is not intended to be limiting of the invention. As used herein the singular forms a an and the are intended to include the plural forms as well unless the context clearly indicates otherwise. It will be further understood that the terms comprises and or comprising when used in this specification specify the presence of stated features integers steps operations elements and or components but do not preclude the presence or addition of one or more other features integers steps operations elements components and or groups thereof.

The corresponding structures materials acts and equivalents of all means or step plus function elements in the claims below are intended to include any structure material or act for performing the function in combination with other claimed elements as specifically claimed. The description of the present invention has been presented for purposes of illustration and description but is not intended to be exhaustive or limited to the invention in the form disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art without departing from the scope and spirit of the invention. The embodiments were chosen and described in order to best explain the principles of the invention and the practical application and to enable others of ordinary skill in the art to understand the invention for various embodiments with various modifications as are suited to the particular use contemplated.

Having thus described the invention of the present application in detail and by reference to the embodiments thereof it will be apparent that modifications and variations are possible without departing from the scope of the invention defined in the appended claims.

