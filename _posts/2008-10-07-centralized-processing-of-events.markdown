---

title: Centralized processing of events
abstract: Disclosed are systems, methods, and other embodiments relating to event processing. A plurality of events from a plurality of services are buffered in a server, each of the services being implemented in at least one service server. An indexed storage of the events is performed in a data store. Metrics are generated from the events, where a condition associated with an operation of the services may be determined from the metrics.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09317343&OS=09317343&RS=09317343
owner: Amazon Technologies, Inc.
number: 09317343
owner_city: Seattle
owner_country: US
publication_date: 20081007
---
This application claims priority to U.S. Provisional Patent Application No. 61 040 342 filed on Mar. 28 2008 entitled CENTRALIZED RECORDING OF EVENTS which is incorporated herein by reference in its entirety.

As large scale data processing systems evolve for large entities principally engaged in commercial activity on the Internet the processing of data items such as digital content items can become disjointed and inefficient. In some cases where digital assets require processing by various different segments within an organization before they are available for commercial exploitation on the Internet it is possible that the processing of such assets can be stalled along the way. In some situations significant effort may need to be expended to determine where the stalled asset is in the data processing systems and why the stall occurred. Also it can be difficult to track the processing of such assets even under normal operating conditions.

With reference to shown is a data processing system according to various embodiments of the present disclosure. The data processing system includes a workflow pipeline that comprises a number of services as will be described. Each of the services may be executed on one or more servers or other hardware with like capability as can be appreciated. The data processing system also includes an event processing application . Each of the services within the workflow pipeline is configured to perform at least one task associated with a process workflow. In one example embodiment the process workflow involves processing target data . In such a case the target data emerges from the workflow pipeline as processed data . Alternatively each of the services may perform a task with respect to a workflow process that does not necessarily involve target data per se as will be described. The event processing application receives events from the services as will be described.

According to various embodiments the target data may comprise for example digital content items such as digital representations of songs movies or other digital content items in various formats. Alternatively the target data can be any data that is processed by the various services of the workflow pipeline . In general the target data is such that the services perform the various tasks thereon resulting in the processed data . For example the processed data can be the same as the target data but embodied in a different format. Alternatively the processed data may differ significantly from the target data such as may be the case when the tasks implemented by the services comprise compression operations translation of data in some manner or other transformative types of operations as can be appreciated. As an additional alternative the services may be perform various tasks that are part of a workflow process that does not involve target data .

Each of the services may include an event reporting agent . Each of the event reporting agents comprises logic that operates in conjunction with the subsystems or other components of the service that implements the respective tasks of the service . The event reporting agents generate events that are transmitted to the event processing application . Alternatively the functionality of the event reporting agents may be integrated with the operation of the respective services rather than being a separate logical entity. A predefined set of events may be associated with each of the services where the events associated with a given service may relate to or are associated with the performance of one or more tasks performed by the given service .

The event processing application includes various components and one or more event data stores . The event processing application is implemented in order to receive the events from the services and to record such events in the event data stores as will be described. In doing so the event processing application may be configured to generate a timestamp of the time that the events were received and may insert the timestamp as an attribute of the events before they are stored in respective event data stores . In addition the event processing application may perform other operations on the events before they are stored in the event data stores . Each of the event data stores may comprise for example a database or other storage system.

In one embodiment the events are transmitted from the services to the event processing application asynchronously where no acknowledgement is transmitted in reply. This may result in the loss of some events however such losses should be minimal and typically may be tolerated.

The event processing application cooperates with external clients in order to retrieve various ones of the events stored in one of the event data stores . For example various events may relate for example to the processing of specific target data . An external client may request each of the events associated with the target data based on a given identifier in order to track the progress of the target data through the workflow pipeline . To this end the events may indicate a progress of the target data through the workflow pipeline . Alternatively the events may indicate the progress of a workflow process such as for example the progress of fulfillment of an order for goods or other process. In such case there may not be target data as such but a record of progress of the workflow may be maintained. In addition relationships between different identifiers may be maintained for example by the event processing application or other system. Such relationships may be employed to track or otherwise obtain or generate data associated with events having different but related identifiers.

The event processing application is further configured to generate metrics based upon the events received from the services . Such metrics may comprise values that describe various aspects of the events or other data. The metrics that may be generated depend upon the nature of the events . For example one metric may comprise the time duration between respective events for a given identifier. Alternatively for example a metric may comprise a time duration between events having different identifiers where a relationship between identifiers is maintained as described above. In another example a metric may comprise a count of certain events received within a given time period for a given identifier or for related identifiers etc. Further metrics may describe sequences of events received that show when events associated with a given identifier or with related identifiers have been received out of order. In addition there may be many other metrics that may be generated based upon the events . In order to generate the metrics the event processing application may employ various heuristics or rules to generate metrics based upon the events received.

The external applications communicate with the event processing application to receive the metrics and other data generated by the event processing application . According to one embodiment the external systems are configured to detect various conditions in the operation of the various services . Such conditions may be operational benchmarks operational irregularities errors and or any other type of condition. The circumstances that comprise a condition detected by the external applications may be preconfigured. Upon detecting a given condition the external applications may take such action as is deemed necessary or important. In this respect the detection and measuring functions of the external applications are decoupled from the functionality of the event processing application that generates the metrics . Thus the event processing application advantageously receives raw events and generates useful metrics from which the detection of various conditions can be performed.

In one embodiment the tasks performed by each respective service are independent of the tasks performed by the other ones of the services . In this respect each service is disconnected or is independent of the other services . Stated another way no one service knows about the operations or tasks performed by any of the other services . Thus the services may be described as loosely coupled systems in that they operate independently of each other while at the same time in order to process the target data each service may require certain functions to be performed by preceding services .

In one embodiment the events may indicate a status of the performance of a given task by a given service with respect to the target data as it progresses through the workflow pipeline . Thus in one embodiment the content of the events stored in an event data store can act as a marker that indicates the progress that the target data is making through the workflow pipeline . For example the events may indicate whether a certain task has started or ended. Also the events may indicate whether certain component portions of tasks have completed etc. Alternatively the events may indicate the progress of a workflow process. For example such workflow processes may involve manufacturing processes order fulfillment processes processes for host provisioning for web site hosting and other hosting processes for managing subscriptions and payment in conjunction with fulfillment of orders processes related to digital content ingestion and reception catalog feed ingestion processes product recommendations processes processes involving developer tools and many other workflow processes.

Next a general discussion of the operation of the various components of the data processing system is provided. To begin assume for example that the target data is designated to be processed by the workflow pipeline . It is understood that the example described herein in terms of processing the target data is discussed as one illustration where the principles described herein apply to other processes as mentioned above. For the sake of illustration we will make the assumption that the target data comprises a digital content item such as a movie song or other item that is to be placed for sale for example on a network site that provides a merchant presence on the Internet. The digital content item represented by the target data may be a very large file embodied in any one of a number of formats that require reduction compression or other processing to be embodied in a format acceptable for access over the Internet for consumption by the average consumer electronic devices owned by consumers.

To begin the target data is applied to the services in a predefined progression in order to be transformed into the processed data that can ultimately be downloaded for example to individual users over the Internet. As such the services perform various compression tasks translation tasks and other tasks to transform the target data into the processed data . For example the target data may comprise a movie in a very large uncompressed file that needs to be compressed for example into an MPEG format or other appropriate format to be provided to set top boxes and the like.

In addition to processing the target data the various tasks performed by the services may also properly format the target data so as to be recognizable for various other purposes as can be appreciated. While the services perform the various tasks upon the target data the services may generate the events that are transmitted to the event processing application .

According to one embodiment the events generated are idempotent. This refers to the fact that they may be sent by the service to the event processing application several times and are stored without duplication. This may occur for example in the case that the service is temporarily rendered inoperative or has some other problem that results in the sending of duplicate events to the event processing application .

Also according to another embodiment the events are immutable when stored in the event data store in that they do not change or cannot be changed over time. Alternatively it may be possible that the events are changed over time based upon the actions of various applications or systems that access such events in the event data store .

In the event that the processing of the target data by a respective one of the services becomes stalled for some reason then the events can serve the purpose of identifying where the target data exists in the workflow pipeline and where the stall took place. For example it can happen that the function of handing off target data between services may stall the processing due to errors in the handoff procedure. In this respect as events are received and stored in the event data store the ultimate progress of the target data through the workflow pipeline is inherently maintained. This is because the events act as markers that indicate the status of the performance of various tasks on the target data by a respective one of the services .

Collectively the events stored in the event data stores provide information as to the status and location of the target data as it progresses through the workflow pipeline . To facilitate the use of the events to determine the status of the target data in the workflow pipeline an identifier is associated with each of the events generated by the services . The identifier may be the same for each event generated for given target data regardless of the service that generated the event . That is to say each event generated by a given service while performing a task with respect to the target data includes the same identifier so that all of the events stored in one of the event data stores that pertain to the processing of the target data can be accessed based upon the same identifier. Alternatively different identifiers may be associated with various events where relationships between identifiers may be maintained in an appropriate data store etc. Ultimately an external client may access the events associated with the target data to identify the location of the target data in the workflow pipeline as well as the status of the processing of such target data relative to the tasks performed by the respective services as will be described. Further the events may be accessed based on one or more identifiers in order to generate timelines of the processing of target data as will be described.

Thus the event processing application facilitates the collection of events and can perform some limited analysis on such events and store them for future operational reference. The event processing application advantageously helps to track and monitor the processes implemented on the services that are loosely coupled together in the workflow pipeline . As set forth above the tasks performed by any given one of the services may be completely independent of the tasks performed by the remaining ones of the services . Also the events may be obtained from the event data store based upon a predetermined identifier or related identifiers where individual events include useful pieces of information.

In addition the storage of the events facilitates the computation of summary information over the entire stream of events associated with given target data . Such computation may be performed by external applications that receive metrics or other data from the event processing application . Although queries may be generated to search through events to analyze the performance of the tasks by the respective services on the target data according to one embodiment the events are not stored in the event data store so as to facilitate the polling of such events in order to discover specific occurrences of such events . Rather in such an embodiment the events provide a chronological story of the progress of the target data through the workflow pipeline .

With reference to shown is a functional block diagram that depicts one example of the architecture of the event processing application . It is understood that the architecture depicted in is one example of the many different architectures and approaches that may be employed to accomplish the functionality described herein.

As depicted in the event processing application includes a translation application a buffer application an indexed storage application an event stream processor a backup storage application an event retrieval application and user interface generator applications . Each of these applications is discussed in turn below. In addition the event data stores include a persistent data store and a backup data store that store events and other data as will be described.

To begin the events received by the event processing application may be embodied in any one of a plurality of different formats. For example events may be embodied in various formats according to various standards protocols such as Simple Object Access Protocol SOAP Representational State Transfer REST or other standards or protocols. Alternatively the events may also be embodied in a proprietary messaging protocol employed by the event processing application .

In one embodiment the event processing application employs a proprietary messaging protocol. As a consequence events embodied in protocols other than the proprietary messaging protocol are received by the translation application and converted over to the proprietary messaging protocol. Thereafter the translated events are applied to the buffer application . Alternatively if the events are embodied in the proprietary messaging protocol they may bypass the translation application and be applied directly to the buffer application .

The buffer application serves as a buffer for the temporary storage of events before they are pulled by the indexed storage application the event stream processor and the backup storage application . The buffer application facilitates a multiplexed output where each event is provided to each one of the indexed storage application the event stream processor and the backup storage application . According to one embodiment each of the indexed storage application the event stream processor and the backup storage application are configured to pull events from the buffer application . Alternatively the events may be pushed to these applications . If one of these three applications pulls a particular event the same event is retained for the other two applications . That is to say the buffer application is configured to retain each event until all three of the indexed storage application the event stream processor and the backup storage application have obtained the events for processing. In one embodiment this may be accomplished by maintaining three separate buffers. Alternatively tags or other markers may be maintained that indicate when a given event has been accessed by any one of the indexed storage application the event stream processor and the backup storage application .

The indexed storage application is configured to store events in the persistent data store . When stored the events are indexed so that other applications and components can easily access such events for various purposes as will be described. In one embodiment the events are indexed according to the identifiers associated with the events the timestamps associated with the events or other information.

The event stream processor is implemented to generate metrics from the events that may be sent to the external application for monitoring or other purposes. In generating the metrics the event stream processor may apply heuristics or rules to the events received from the services . To this end the event stream processor generates values based upon the events that may be provided to the external applications for purposes of identifying conditions for alarming performing future performance predictions or for other purposes. In doing so the metrics or other data monitored or otherwise used by external applications to perform such functions is generated by the event stream processor such that the generation of such metrics or other data is decoupled from the operation of the services or other systems that generate the events in the first place.

In one example a heuristic or rule may direct the event stream processor to count each event received that is associated with a given identifier or associated with multiple identifiers.

In another example another metric generated based upon the events comprises a time duration between respective events for one or more identifiers. For example one may wish to determine the time elapsed between a start event relating to the start of a process by one of the services and an end event associated with the process. Accordingly a heuristic or rule may be applied that dictates that once an end event associated with respective identifiers is received from a service then the persistent data store is examined to find a corresponding start event associated with the same identifier s as the end event . The time duration of the process associated with the respective start and end events may be calculated by subtracting the time of the start event from the time of the end event .

In some situations the start event associated with a respective end event is missing from the persistent data store . This may be due to the fact that 1 the start event was lost due to malfunction 2 the start event was never sent by the respective service 3 the start event was held up due to network problems or 4 some other reason. In such case a heuristic algorithm may be implemented in which the event stream processor waits for a predefined period of time to wait for system convergence i.e. that the late start event is received . If the start event is not received then the heuristic may specify that a count of all end events that are identified for which there is no corresponding start event be incremented. Alternatively some other action may be taken.

In another alternative an end event may be missing for a given start event . This may occur due to malfunction or due to the end event being lost in transmission etc. In such case it may never be determined that the process associated with the start event was ever completed. In such case a heuristic may be specified that determines whether a period of time has elapsed within which the corresponding end event should have been received where such a time period includes extra time to ensure that the end event was not simply late etc. Assuming that the end event was not received in such time a metric such as a zero or other value may be generated that indicates that the end event was not received etc.

In another example it may be the case that multiple start events correspond to a given end event . In particular when an end event is received it is discovered that there are multiple candidate start events in the persistent data store that may coincide with the end event . This may happen for example in cases where a new start event associated with a new process also indicates the end of a prior process. In such case a heuristic algorithm or rule may be implemented in which the latest visible start event is selected from which the time duration between the start and end events is determined. Alternatively a respective start event may be selected based on other criteria.

In another example it may be the case that multiple start events correspond to a given end event . When a given end event arrives it is unknown whether there will be additional end events . Multiple end events may arrive for example when a process is repeated due to error or for other reasons. In such a case a heuristic algorithm or rule may be implemented in which a time duration is calculated for each end event relative to the single start event . Alternatively a count of multiple end events associated with a given start event may be maintained or other action may be taken.

In some situations there may be multiple start events followed by multiple end events for respective identifiers. Potentially such events may appear in a mixed order. A heuristic may be implemented in which a metric is calculated for each end event paired with the most recent start event visible at the time the end event was processed. Alternatively some other heuristic or rule may be implemented to mate respective pairs of start and end events in order to calculate appropriate time duration metrics .

In another situation from time to time a process is repeated by a service for various reasons. This may result in the receipt of a completely new set of certain events for one or more identifiers that may appear to have already been received. This may occur for naturally repeating processes or due to malfunction etc. In such cases one may implement a heuristic that mandates that each end event is paired with the latest start event received in order to generate a time duration metric . This may provide varying results if end events are paired with the wrong start events . Alternatively other approaches may be employed.

Ultimately the foregoing provides illustrations of the various heuristics that may be employed to respond to various events such as start and end events although other types of events may be processed based on predefined heuristics. By application of the heuristics rules or other algorithms the event stream processor generates metrics from the events received that can be examined by one or more external applications to detect various conditions associated with the operation of one or more of the services .

In one embodiment the event processing application thus receives events without knowledge of the nature of such events . For example the event stream processor processes events based upon the heuristics or rules set forth. Inconsistencies and anomalies in the events are handled based on the heuristics or rules set forth and not based upon an intimate knowledge of the operation of the services . In one embodiment the heuristics or rules are specified so that meaningful metrics may be created by which conditions association with the operation of the services may be detected or otherwise ascertained.

The backup storage application is configured to implement a basic backup storage of the events received by the event processing application in the backup data store . The backup storage application operates to store the events as they are received and does not perform substantive processing that results in a change to the events . This function advantageously provides for the retrieval of events in situations of major failure for example to reestablish a steady state of operation.

The event retrieval application facilitates retrieval of events based upon requests from an external client or other system. For example an external client may request the events associated with one or more identifiers that fall within a predefined range of time. In order to facilitate the specification of events the user interface generator applications are configured to generate various forms for the input of parameters such as identifiers time ranges or other information. The event retrieval application is configured to access the events stored in the persistent data store based upon requests from the external client . Alternatively the event retrieval application may access predefined data about an external client that indicates the events to be retrieved for the external client .

The retrieved events are provided to one or more user interface generator applications that are configured to generate user interfaces that facilitate viewing of events metrics or the target data associated with such events . In one embodiment the user interface generator applications are configured to generate a dashboard or other user interface that is sent to the external client . Such dashboards may be configurable for a respective external client where the configuration for a given external client may be stored for use by the user interface generator applications .

Referring next to shown is one example of an event according to various embodiments. Associated with the event are various attributes or variables as shown. An event is essentially an occurrence of something of interest with respect to the performance of tasks relative to the target data by the services . An event occurs at a specific time that is memorialized by a timestamp that is generated for example by the event reporting agent or other application associated with a given one of the services . Each event may include a name that specifically identifies the type of event that has occurred. Such a name might comprise for example Start Transfer End Transfer Start Store End Store or any other name.

An event is also tightly coupled to something identifiable such as an identifier that may comprise for example a single variable or a tuple of variables. For example an identifier may comprise a tuple comprising a name space and an opaque string as shown. The name spaces are predefined in advance before the creation of the events by the services . A restriction may be imposed on the opaque strings such that there is one and only one representation of a given identifier such that character wise equality is identifier based equality.

According to one embodiment each event is assigned to exactly one identifier. In such an embodiment one may imagine a scenario where an asset A may be split into many assets A. . . A . This may be viewed as a single event with many related identifiers called a SPLIT. To make such a collection of data meaningful the direction and the cardinality of the SPLIT relationship is preferably understood. However such a concept may be viewed as two separate ideas namely events and relationships. The events include the SPLIT UP event which occurred against the Aand many created events which occurred against A. . . A. A relationship on the other hand may be DERIVED FROM and is a static concept that links the various asset identifiers correctly.

An event may be placed within a given partition or domain as indicated by the domain attribute . This may help isolate unrelated problem spaces and may carry additional metadata therewith. In this respect the domain may indicate a partition such as for example video text or other partition.

The event may further include a location that indicates where the event occurred such as for example within which service was the event generated. When the event is received by the event processing application the event processing application may add a time stamp to the event that indicates the time that the event was received. Further the sender of the event such as a respective one of the services or other device may be indicated in the domain attributes . Finally any particular other information may be indicated in a message as shown.

Referring next to shown is a simple timeline that depicts a set of events recorded against a single identifier for example as described above with respect to according to an embodiment of the disclosure. As shown key events may be highlighted to aide in the understanding of the timeline . In this respect some events may be depicted with a larger graphical component such as a larger circle as shown in . A request for all of the events can be generated by an external client and provided to the event retrieval application that can obtain all of the events stored in the persistent data store associated with one or more identifiers. These events may be sent back to the external client through the user interface generator applications that generate an appropriate user interface that depicts the events . In one embodiment the events may be depicted in a user interface in the form of the simple timeline as shown.

With reference to shown is a complex timeline that depicts all events that were recorded against a given identifier or any related identifiers between two events .

With reference back to the event indicates something that actually occurred. In a transactional system the semantics should be to commit the work or task and then produce the event showing that it was committed. Business processes may be built with the assumption that some slight percentage of events may be lost. However the loss of events should be considered an exceptional occurrence. The events are idempotent. In this respect the same events are not written to the persistent data store twice. Thus the services may resend events that they believe were lost in a prior transmission to the event processing application .

Since each event contains a timestamp as described above the clock upon which that timestamp is based may be of significance. To that end each event is recorded based upon the local clock at the location at which the event was generated namely one of the services or other location. If the clocks are reasonably synchronized then the events should for the most part appear in chronological order. However it is possible that some events may be out of place relative to other events due to a lack of synchronicity between clocks in respective services or other devices as can be appreciated.

Thus when accessing events in the event data store respective systems may take into account that events may appear out of sequence from time to time. In one embodiment the events associated with one or more identifiers may be emitted on the order of tens per second or some other greater or lesser frequency where the time gap between meaningful events is measured in accordance with the rate at which events are received. The lifetime of events may be as short as possible or other time period. In one embodiment a maximum lifetime of events is approximately one year. Alternatively other maximums may be specified.

The metrics or other data that may be transmitted to external applications may be reviewed in order to perform such functions as generating various alarms based upon values making predictions about future values combining metrics to compute rates displaying elements and other reasons. According to one embodiment the event processing application is a lightweight system to the extent that it does not perform significant analysis or processing of events but may transmit such information to other systems where such analysis is performed as desired.

The event processing application may further be configured to transform data as it arrives to output summary information to external clients or external applications . Some specific methods of data processing include the computing of a time delta that occurs between the events or the counting of the number of events associated with one or more identifiers or target data as described above. Both methods vary on the name of the events in question and may be scoped by one or more identifiers within a given domain. For example an external client may ask to output the time between a first event of a first type T and a second event of a second type T where the identifiers are the same. With this data stream standard operations such as aggregation alarming prediction and other operations may be performed. In addition much more complex expressions may be possible where the underlying technology is likely to be based on complex event processing a technology that may allow specific queries over time bounded event data.

Events are related to other events through one or more identifiers. In some situations this makes it possible to compute deltas between events as described above. Specifically for a given timeline one may choose specific events of type T and T and subtract the time between them based upon their timestamps. If such events are out of order or if there is a mismatch between the number of T events and the number of T events then for a given metric collection such metric collection is either in progress or not in progress. When in progress it also has a time started. The arrival of an event moves such a state into in progress. If such state was already in progress the time started may optionally be reset. When the end event arrives it may transition to not in progress and emit the end event . As mentioned above the event processing application provides the ability to fetch timelines based upon one or more identifiers. For example it is possible to fetch the events that pertain to specific vendor SKUs or other identifiers.

It will also be possible to iterate over the events that occurred between two specific points in time although perhaps such an approach is not entirely efficient to locate information. Alternatively additional secondary indexes may be provided on location and name of an event within a query that is bounded by time so that common inquiries may be serviced rapidly. Given that the events are immutable the data returned by any queries about events generated in the past are always suitable for caching.

The event processing application may be configured to comport with any service level agreements with regard to the number of events received and recorded in the event data store . Also service level agreements may apply to information associated with the events stored in the event data store that is delivered to external clients or external applications as described above. In one embodiment the event processing application will make a best effort to record the events and deliver such information as needed. Also various data retention policies may be specified with respect to the events stored in the event data stores .

The events are stored in the persistent data store in a durable manner and eventual consistency of the events is contemplated given that events are immutable so that a primary concern of convergence is addressed when a writer can read its write. The events are idempotent such that they can be rewritten to the event data store but will not be written twice as can be appreciated. The various queries that may be received by the event retrieval application may include a fast lookup by a primary key such as an identifier a fast iteration over a range of timestamps or a reasonable lookup by a secondary key within a time range such as location or name of an event .

Various failure modes may also exist such as a failure to process the events or failure to record the events as can be appreciated. In addition the domain attributes of the events may be employed to partition data at some level. The partition name may also be based upon the identifiers or other information. The exact partitioning may evolve over time resulting in a number of active partitioning schemes all of which may be searched when obtaining the events from the event data store . In one embodiment the events are only stored in the persistent data store for a limited time. As such old schemes and storage partitions will gradually disappear from the event data store .

In other embodiments event processing nodes may also be employed to compute queries based upon a stream of events from the services in order to emit data to external applications . Such event processing nodes may be general purpose complex event processing CEP nodes or they may be customized systems to support specific use cases. Such event processing nodes may handle any number of events per second and may be confirmed based upon empirical evidence.

Further event query nodes may be employed to provide a basic abstraction to persistent store capability of the event processing application . Such event query nodes may allow iteration over events queries against keys etc. The typical types of queries that may be employed to access the events in the event data store may comprise for example finding events of a type X against a key Y i.e. an identifier or finding all events that took place against a key Y i.e. an identifier . Also one may query to find events of a given type E that occur during a time interval T expressed in terms of a start date time and end date time that expresses a time interval T that lasts for several milliseconds seconds minutes hours days or other time interval. Further one may query to find events that happened on a specific host H service during a time interval T or one may query to find events emitted by a source S service during a time interval T.

Further user interfaces may be generated by the user interface generator applications that facilitate identifier agnostic searching and visualization of the events . In addition the event processing application may be configured to provide appropriate user interfaces for external clients . Such user interfaces may provide appropriate operational dashboards or other interfaces as can be appreciated.

In addition it may be necessary at times to combine events that are logged against separate identifiers into a single timeline as described above. For example one part of a workflow pipeline may only know of a first identifier while another portion of the workflow pipeline assigns a second identifier. It may be necessary to combine such events under a common identifier for proper access. Alternatively both identifiers may be used to pull all events into a single timeline or other rendering.

The event processing application provides various advantages in that it provides a single central point for consolidation of events . In this respect each of the services is not required to maintain its own event tracking system or other system to obtain data therefrom as described above. Further once the basic system is in place there is minimal cost for operation and more complexity may be added to access the events by adding instrumentation to the various components of the event processing application as time progresses. Further the event processing application may be configured to meet an acceptable service level agreement that is published for all operators of the services such that the functionality provided by the event processing application may be employed by many customers that can depend upon the service level agreement.

Next with reference to shown is one example of a flowchart that illustrates one example of the operation of an external application according to various embodiments. Alternatively the flowchart of may be viewed as steps of a method implemented in an external server or other system as can be appreciated. The flowchart of depicts one example of the operation of an external application in detecting an undesirable delay between the receipt of chronologically consecutive events during the processing of target data through the workflow pipeline as described above. Specifically if a delay occurs between any two chronologically consecutive events received from the services that extends beyond a reasonable predefined delay then such delay is indicative of the fact that there might be a stalled service or some other anomaly exists in the respective system.

Beginning with box first the external application determines whether there is a new metric for a respective identifier received from the services indicating a time period between a respective pair of start and end events associated with one or more identifiers. If so then in box the external application determines whether the delay between the events indicated by the metric is irregular such that it indicates a stalling of a service or other irregularity that may require personnel to follow up to address the situation. The determination of whether a delay is irregular may be made by comparing the delay to predefined delay thresholds or in some other manner. If not then the external application ends as shown. Otherwise the application proceeds to box in which the occurrence of the irregular delay is reported to appropriate systems. In this respect the external application may generate a notification that is transmitted to an appropriate system that facilitates corrective action or informs personnel as to the problem. Thereafter the external application ends.

It should be noted that the above flowchart provides only one example of the types of functionality that may be implemented by an external application . Other processes may be implemented based on other metrics such as those generated by the counting of events received that include one or more identifiers or other functions as can be appreciated.

Referring next to shown is a schematic block diagram of one example of a server according to an embodiment of the present disclosure. The server includes a processor circuit for example having a processor and a memory both of which are coupled to a local interface . To this end the server may comprise for example a server computer with such structure. The local interface may comprise for example a data bus with an accompanying address control bus as can be appreciated.

Stored in the memory are several components that are executable by the processor or that are stored within the memory . In particular according to one embodiment stored in the memory are a server operating system and the event processing application . It is understood that there may be other applications that are stored in the memory and are executable by the processor as can be appreciated. Also the data stores and may be included in the server or may be located in other storage sites that are accessible to the server etc.

The various components such as the services and the event processing application may be implemented on servers that communicate with each other via a network. Such a network may comprise for example the Internet intranets wide area networks WANs local area networks wireless networks or other suitable networks etc. or any combination of two or more such networks.

A number of software components are stored in the memory and are executable by the processor . In this respect the term executable means a program file that is in a form that can ultimately be run by the processor . Examples of executable programs may be for example a compiled program that can be translated into machine code in a format that can be loaded into a random access portion of the memory and run by the processor or source code that may be expressed in proper format such as object code that is capable of being loaded into a of random access portion of the memory and executed by the processor etc. An executable program may be stored in any portion or component of the memory including for example random access memory read only memory a hard drive compact disk CD floppy disk or other memory components.

The memory is defined herein as both volatile and nonvolatile memory and data storage components. Volatile components are those that do not retain data values upon loss of power. Nonvolatile components are those that retain data upon a loss of power. Thus the memory may comprise for example random access memory RAM read only memory ROM hard disk drives floppy disks accessed via an associated floppy disk drive compact discs accessed via a compact disc drive magnetic tapes accessed via an appropriate tape drive and or other memory components or a combination of any two or more of these memory components. In addition the RAM may comprise for example static random access memory SRAM dynamic random access memory DRAM or magnetic random access memory MRAM and other such devices. The ROM may comprise for example a programmable read only memory PROM an erasable programmable read only memory EPROM an electrically erasable programmable read only memory EEPROM or other like memory device.

In addition the processor may represent multiple processors and the memory may represent multiple memories that operate in parallel. In such a case the local interface may be an appropriate network that facilitates communication between any two of the multiple processors between any processor and any one of the memories or between any two of the memories etc. The processor may be of electrical optical or some other construction as can be appreciated by those with ordinary skill in the art.

The various function systems and applications described herein may be implemented using any one of a number of programming languages such as for example C C JAVA or other programming languages.

Although the various components of the data processing system are generally described as being embodied in software or code executed by general purpose hardware as discussed above as an alternative the same may also be embodied in dedicated hardware or a combination of software general purpose hardware and dedicated hardware. If embodied in dedicated hardware the same can be implemented as a circuit or state machine that employs any one of or a combination of a number of technologies. These technologies may include but are not limited to discrete logic circuits having logic gates for implementing various logic functions upon an application of one or more data signals application specific integrated circuits having appropriate logic gates or other components etc. Such technologies are generally well known by those skilled in the art and consequently are not described in detail herein.

The flow chart of shows one example of an implementation of an external application . If embodied in software each block may represent a module segment or portion of code that comprises program instructions to implement the specified logical function s . The program instructions may be embodied in the form of source code that comprises human readable statements written in a programming language or machine code that comprises numerical instructions recognizable by a suitable execution system such as a processor in a computer system or other system. The machine code may be converted from the source code etc. If embodied in hardware each block may represent a circuit or a number of interconnected circuits to implement the specified logical function s .

Although the flow chart shows a specific order of execution it is understood that the order of execution may differ from that which is depicted. For example the order of execution of two or more blocks may be scrambled relative to the order shown. Also two or more blocks shown in succession in may be executed concurrently or with partial concurrence. In addition any number of counters state variables warning semaphores or messages might be added to the logical flow described herein for purposes of enhanced utility accounting performance measurement or providing troubleshooting aids etc. It is understood that all such variations are within the scope of the present invention.

Also where the various components of the data processing system comprise software or code each can be embodied in any computer readable medium for use by or in connection with an instruction execution system such as for example a processor in a computer system or other system. In this sense the logic may comprise for example statements including instructions and declarations that can be fetched from the computer readable medium and executed by the instruction execution system. In the context of the present invention a computer readable medium can be any medium that can contain store or maintain the component of the data processing system for use by or in connection with the instruction execution system. The computer readable medium can comprise any one of many physical media such as for example electronic magnetic optical electromagnetic infrared or semiconductor media. More specific examples of a suitable computer readable medium would include but are not limited to magnetic tapes magnetic floppy diskettes magnetic hard drives or compact discs. Also the computer readable medium may be a random access memory RAM including for example static random access memory SRAM and dynamic random access memory DRAM or magnetic random access memory MRAM . In addition the computer readable medium may be a read only memory ROM a programmable read only memory PROM an erasable programmable read only memory EPROM an electrically erasable programmable read only memory EEPROM or other type of memory device.

It should be emphasized that the above described embodiments of the present disclosure are merely possible examples of implementations set forth for a clear understanding of the principles of the disclosure. Many variations and modifications may be made to the above described embodiment s without departing substantially from the spirit and principles of the disclosure. All such modifications and variations are intended to be included herein within the scope of this disclosure and protected by the following claims.

