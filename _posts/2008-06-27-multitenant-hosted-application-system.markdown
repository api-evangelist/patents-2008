---

title: Multi-tenant hosted application system
abstract: Technologies are described herein for implementing a hosted multi-tenant application system. The server computers utilized to provide the hosted application are organized into logical groupings of server computers called scale groups. One or more tenants are assigned to each scale group. When a new tenant is provisioned, the tenant is assigned to a scale group and a database server in the assigned scale group creates a database for the tenant. An association between the tenant and the scale group is also created in a shared configuration database. When a request is received from a tenant to access the hosted application, the shared configuration database is consulted to locate the scale group hosting the tenant. Once the appropriate scale group has been located, the request is redirected to the appropriate scale group for processing.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09053162&OS=09053162&RS=09053162
owner: Microsoft Technology Licensing, LLC
number: 09053162
owner_city: Redmond
owner_country: US
publication_date: 20080627
---
This application is a continuation in part of U.S. patent application Ser. No. 11 789 993 entitled HOSTED MULTI TENANT APPLICATION WITH PER TENANT UNSHARED PRIVATE DATABASES which was filed on Apr. 26 2007 and which is expressly incorporated by reference herein in its entirety.

A hosted application is a software application where the software resides on servers that are accessed through a wide area network such as the Internet rather than more traditional software that is installed on a local server or on individual client computers. Hosted applications may also be known as Internet applications application service providers ASPs web based applications or on line applications. Hosted applications are commonly utilized concurrently by multiple subscriber organizations called tenants. 

Some hosted applications utilize a multi tier architecture wherein the middle tier that performs the application logic is separated from the database tier where application and tenant data is stored. In many cases the database tier is shared among all of the tenants. Use of a shared database tier in this manner is problematic however because a scheduled or unscheduled database outage in such a system will affect all of the tenants simultaneously. Moreover because all tenants share the same database tier application performance for all of the tenants may be significantly reduced if just one tenant places an excessive load on the database. Reduced performance may be unacceptable to the tenants of such a system. Additionally when a single database is utilized for all of the tenants of a hosted application it may be difficult for a tenant to customize the schema that is utilized to store the database.

Other hosted applications utilize a multi tier architecture wherein each tenant utilizes a middle tier and a database tier that are maintained separately from all other tenants. This type of architecture may be implemented for instance by providing each tenant with a virtual server computer for hosting the middle tier and the database tier. This type of architecture allows outages to be confined to a single tenant or a small group of tenants and reduces the possibility that an excessive load by one tenant will impact application performance for other tenants. This type of architecture however suffers from several other significant drawbacks. In particular it can be complex and expensive to operationally maintain the separate operating system and application installation on the virtual server computer provided for each hosted tenant. Moreover allocated hardware resources may remain unused by tenants that cannot utilize all of the processing and storage capabilities of a dedicated virtual server computer.

Hosted multi tenant applications implemented using previous architectures also suffer from several other limitations. In particular it may be very difficult to add additional hardware capacity to these systems or to upgrade software components without causing downtime for the tenants. Additionally it may also be difficult to geographically distribute the processing and data storage capabilities of systems that are implemented using these previous architectures.

Technologies are described herein for implementing a hosted multi tenant application system. Through the utilization of aspects presented herein a hosted application can be provided in a manner that permits the hardware and software of the system to be upgraded without downtime for tenants. Moreover through the use of the aspects presented herein the processing and data storage capabilities of a hosted multi tenant application program can be geographically distributed to thereby reduce latency for the tenants and to reduce the number of tenants that are impacted by a data center outage.

According to one aspect presented herein a hosted application is provided that supports concurrent use by multiple tenants. The hosted application may be a hosted business application such as a customer relationship management CRM application or another type of business application. The hosted application is provided through the use of a middle tier that is shared by the tenants of the hosted application. The middle tier represents the software and hardware components that provide the hosted application to the tenants including the performance of any business logic implemented by the application. A database tier operates in conjunction with the middle tier.

According to other aspects presented herein the server computers utilized to provide the hosted application are organized into site wide server computers servers and scale groups. The site wide server computers perform site wide functions for the hosted application including processing sign in and sign up requests site wide messaging help functions and domain name services DNS for mapping each tenant to an assigned scale group. The site wide server computers may also provide facilities for site configuration billing customer support and others.

The scale groups represent logical groupings of servers. Each scale group includes a shared middle tier and a database tier for supporting tenants assigned thereto. When a new tenant is provisioned the tenant is assigned to a scale group and a database server in the assigned scale group creates a private unshared database for the tenant. An association between the tenant and the scale group is also created in a shared configuration database. When a request is received from a tenant to access the hosted application the shared configuration database is consulted to locate the scale group hosting the private unshared database for the tenant. Once the appropriate scale group has been located the request is redirected to the middle tier in the appropriate scale group for processing. According to embodiments the scale groups may be geographically distributed.

According to other aspects each of the site wide server computers may be assigned to one or more roles. In particular according to one implementation each site wide server may be assigned to a portal role for providing a non tenant specific user interface to a name role for providing network addresses corresponding to sub domains that are unique to each tenant to a configuration role for providing configuration information to one or more other roles to an administration role for performing administrative tasks within the system and or to a router role for redirecting actions to an appropriate scale group. Servers in each of the scale groups may also be assigned to one or more roles. For instance scale group servers may be assigned to an application role for providing the hosted application to the tenants an asynchronous processing role for executing asynchronous processes assigned by the application role a scale group configuration role for maintaining scale group configuration information and or a database role for maintaining data for tenants assigned to the scale group. Other roles may also be assigned to the site wide server computers and the scale group servers.

According to additional aspects the average workload of scale groups and the individual server computers within scale groups is monitored. If a particular server within a scale group is experiencing an excessive average workload responsibility for servicing one or more tenants may be moved to another server computer within the scale group. If a particular scale group is experiencing an excessive average workload responsibility for servicing one or more tenants may be moved to another scale group. When responsibility for servicing a tenant is moved the mapping stored in the shared configuration database is updated to reflect the new server or scale group responsible for servicing requests received from the tenant.

The above described subject matter may also be implemented as a computer controlled apparatus a computer process a computing system or as an article of manufacture such as a computer readable medium. These and various other features will be apparent from a reading of the following Detailed Description and a review of the associated drawings.

This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter nor is it intended that this Summary be used to limit the scope of the claimed subject matter. Furthermore the claimed subject matter is not limited to implementations that solve any or all disadvantages noted in any part of this disclosure.

The following detailed description is directed to technologies for providing a hosted multi tenant application. While the subject matter described herein is presented in the general context of program modules that execute in conjunction with the execution of an operating system and application programs on a computer system those skilled in the art will recognize that other implementations may be performed in combination with other types of program modules. Generally program modules include routines programs components data structures and other types of structures that perform particular tasks or implement particular abstract data types. Moreover those skilled in the art will appreciate that the subject matter described herein may be practiced with other computer system configurations including hand held devices multiprocessor systems microprocessor based or programmable consumer electronics minicomputers mainframe computers and the like.

In the following detailed description references are made to the accompanying drawings that form a part hereof and which are shown by way of illustration specific embodiments or examples. Referring now to the drawings in which like numerals represent like elements through the several figures aspects of a computing system and methodology for providing a hosted multi tenant application program will be described. In particular is a network and software architecture diagram that provides details regarding an illustrative operating environment for the embodiments presented herein along with aspects of several software components presented herein. As discussed briefly above the illustrative computing system shown in provides a hosted multi tenant application program. In the embodiments presented herein the application program is a program for providing CRM functionality. CRM applications allow businesses to manage the relationships with their customers including the capture storage and analysis of customer information. It should be appreciated however that any type of hosted application may be implemented utilizing the technologies presented herein including other types of hosted business applications.

Through the use of the system shown in multiple organizations referred to herein as tenants may concurrently utilize the computing resources provided by the system . The illustrative computing system shown in includes a CRM server computer . The CRM server computer executes a CRM application and maintains one or more associated databases described more fully herein. The CRM application provides functionality for managing relationships with business customers including the capture storage and analysis of customer information.

The CRM functionality provided by the CRM application may be accessed through the use of a web browser application executing on a client computer such as the CRM client computer . In this regard the CRM application includes a web user interface UI module for exposing a web compatible network interface. In this manner the CRM client computer can be utilized to access functionality provided by the CRM application for creating and viewing customer information for communicating with customers via the CRM application and for performing other CRM related functions.

According to embodiments presented herein the CRM application also includes a business object platform . The business object platform is a software platform for executing software components that perform the actual business processing for the CRM application . The business object platform operates in conjunction with the web UI module to make this functionality accessible through a web interface. Aspects of the functionality provided by the CRM application may also be accessed through a plug in to a personal information manager PIM application . In one embodiment a plug in executing within the PIM application communicates directly with the business object platform to enable this functionality.

As shown in the CRM application operates in conjunction with a database server application which also executes on the CRM server computer . The database server application provides functionality for creating maintaining accessing and updating one or more databases. According to embodiments the database server application comprises the SQL SERVER database server application from MICROSOFT CORPORATION of Redmond Wash. It should be appreciated that any suitable database server application may be utilized in the manner described herein.

Through the use of the database server application the CRM application is operative to maintain several databases. In particular the CRM application maintains a shared configuration database . As will be described in greater detail herein the CRM application utilizes the shared configuration database to store global system level information and data that is shared by the tenants. For instance according to embodiments the shared configuration database may be utilized to store information about tenants such as their name and contact information information about which tenant particular users are members of and information mapping authentication data to a specific user. In one implementation presented herein the shared configuration database is also utilized to store data defining a scale group to which each tenant hosted by the CRM application has been assigned. Additional details regarding the use of the data in this regard will be provided below.

The CRM application also maintains the unshared organization databases A N. The unshared organization databases A N are utilized by the CRM application to store private unshared data for the tenants. Each unshared organization database A N is associated with a particular tenant and its contents are inaccessible to the other tenants. According to aspects each unshared organization database A N is utilized to store private tenant data for the associated tenant. Each unshared organization database A N may also be utilized to store customizations to the CRM application made by the associated tenant including but not limited to customized entities attributes relationships forms views code level extensibility plug ins and any other type of customization to the CRM application . Additional details regarding the creation and use of the shared configuration database and the unshared organization databases A N will be provided below. It should be appreciated that other types of databases and database schema may be utilized to store the global system level information and the tenant data according to embodiments.

Referring now to another embodiment of the invention for providing a hosted multi tenant application that utilizes per tenant unshared private databases will be described. In this embodiment a system is provided wherein the servers that provide the CRM functionality described herein are organized into the scale groups A N. The scale groups A N are logical groupings of servers each of which has one or more tenants assigned thereto.

In one implementation each scale group A N includes a shared middle tier and a database tier for supporting the tenants assigned to the scale group. The scale group Internet facing servers implement the middle tier by executing the CRM application while the scale group database servers implement the database tier by executing the database server application . One or more scale group utility servers are also provided within each scale group A N for performing utility functions such as reporting services load balancing provisioning configuration statistics and others. Each scale group may also include its own configuration database that is private to the scale group but shared amongst all of the tenants of the scale group. As will be described in greater detail below the servers in each of the scale group A N may be assigned to one or more roles for performing these functions.

When a new tenant is provisioned within the system the tenant is assigned to one of the scale groups A N. At this time one of the scale group database servers in the assigned scale group creates a private unshared database for the tenant. In this manner the private unshared database for the new tenant is created and stored in the assigned scale group . An association or mapping between the tenant and the assigned scale group is also created in the shared configuration database .

As shown in the system also includes one or more site wide servers . In particular one or more site wide Internet facing servers are provided along with one or more site wide utility servers . The site wide Internet facing servers perform site wide functions for the system including processing sign in and sign up requests site wide messaging help functions and DNS functions for mapping each tenant to the appropriate scale group A N. The site wide utility servers provide facilities for site configuration billing customer support and others. As will also be discussed in greater detail below the site wide servers may also be assigned to one or more roles for performing these functions.

As will be described in greater detail below network client requests to access the hosted application are received at the site wide Internet facing servers . In response to receiving such requests the shared configuration database is consulted to locate the scale group A N hosting the private unshared database for the tenant making the request. Once the appropriate scale group A N has been located the incoming request is redirected to the scale group Internet facing servers in the identified scale group A N for processing. Additional details regarding this process will be provided below with respect to .

Turning now to additional details will be provided regarding the roles to which the site wide server computers may be assigned. As shown in the site wide Internet facing servers may be assigned to a portal role A and or to a name role B. Server computers assigned to the portal role A are configured to provide the user interfaces the portal for the system that are not tenant specific. For example server computers assigned to the portal role A may be configured to provide sign up and sign in Web pages. Server computers assigned to the name role B are configured to provide DNS services. For instance server computers assigned to the name role B may be configured to provide network addresses corresponding to sub domains unique to each tenant. The definition of where tenant address records should point to comes from the configuration role C described below. It should be appreciated that the site wide Internet facing servers may be assigned to one or more of the roles shown in or to other roles not illustrated or described herein.

As also shown in the site wide utility servers may be assigned to a configuration role C an administration role D and or a router role E. Servers assigned to the configuration role C are responsible for exposing configuration information from the shared configuration database to other roles. For instance servers assigned to the configuration role C may expose data regarding the available scale groups data regarding the mapping of tenants to scale groups and the resource limits for the scale groups . Other information may also be exposed.

Servers assigned to the administration role D are configured for performing administrative tasks for manipulating the system . For example a server assigned to the administration role D may be configured to execute commands to create scale groups move tenants between scale groups and to provision tenants for testing support or monitoring purposes. Servers assigned to the router role E are configured to redirect certain actions to an appropriate scale group . For instance a server assigned to the router role E may be configured to route a job to provision a new tenant upgrade the data for a tenant or to delete a tenant to the appropriate scale group . Other types of actions may be routed in a similar manner. It should be appreciated that the site wide utility servers may be assigned to one or more of the roles shown in or to other roles not illustrated or described herein.

Referring now to additional details will be provided regarding the roles to which the server computers in each of the scale groups may be assigned. As shown in the scale group Internet facing servers are assigned to the application role A. Servers assigned to this role are responsible for providing the actual application that is used by the tenants. Servers assigned to the application role A may also be configured to assign long running tasks to a server computer assigned to an asynchronous processing role B described below. Server computers may also be assigned to an application programming interface API role E. The API role E allows its consumers to execute remote procedures through web service APIs thereby enabling rich clients and other integration applications to access features provided by the system .

As also shown in the scale group utility servers may be assigned to an asynchronous processing role B the scale group configuration role C and or the database role D. Servers assigned to the asynchronous processing role B are configured to off load long running operations from the application role A. Some examples include provisioning a new tenant upgrading tenant data deleting a tenant bulk data import to a tenant and bulk data extraction. Servers assigned to the scale group configuration role C are responsible for maintaining configuration settings for the scale group. Examples include data identified the servers that have been assigned to a scale group and data identifying the physical server that a tenant s data resides on. Server computers assigned to the database role D are configured to maintain the unshared organization databases . It should be appreciated that the scale group Internet facing servers and the scale group utility servers may be assigned to one or more of the roles shown in or to other roles not illustrated or described herein.

It should be appreciated that in one embodiment each of the roles described above may be assigned to two or more computing systems. By assigning each role to two or more computers redundancy can be achieved. Additionally this architecture permits zero down time patching of the operating system the application program or other dependent programs. The roles and architecture described above also allow the system to address numerous problems associated with previous architectures for hosted multi tenant applications. For instance using the roles discussed above tenants can be provisioned on the system by signing up through a server computer assigned to the portal role A. This triggers the router role E to decide on a target scale group for the new tenant and to record this selection through the configuration role C and the scale group configuration role B. After this has been performed the asynchronous processing role B will provision the tenant and initialize an unshared organization database for the new tenant. Once the tenant has been provisioned end users can sign on to the system through the portal role A where they will be redirected to the application role A at their assigned scale group via the name role B.

It should also be appreciated that the configuration of the system allows additional capacity to be added or existing capacity to be rebalanced easily. For instance additional scale groups can be added to accommodate the addition of tenants. Since the new scale groups are not initially serving any tenants their addition requires only configuration changes. The configuration role C allows such changes online without affecting other tenants. Resources can be rebalanced by monitoring tenant resource utilization versus role and scale group capacities and triggering a rebalance if they are near capacity. The name role B will detect the change quickly and provide the correct address of the new application role A to tenants.

The system also permits the site wide roles to be upgraded independently of any upgrade to the scale group roles. In this regard new site wide facilities may be added that scale group roles will leverage in which case the site wide roles will be upgraded first and the scale group ones thereafter. It is possible therefore to operate the system in this half upgraded state indefinitely while still permitting new tenants to be added. New scale groups would then generally be constructed with the new versions of the scale group roles. Provision requests that target the new scale groups can take advantage of new functionality immediately. Tenants that require a data upgrade can be upgraded at any time during which they will experience an outage depending upon the nature of the upgrade. After the upgrade the tenant can use the new functionality that required a data upgrade. Tenants also experience no service outage during system upgrades due to backward compatibility of newer versions of the software. Tenants will only experience an outage when their data is being upgraded to take advantage of new system features. Moreover one tenant s outage does not affect any other tenant. It should be appreciated that a tenant may not experience an outage where data and code is upgraded that is not visible to the tenant. These types of upgrades can be accomplished completely online without any tenant downtime whatsoever.

It should be appreciated that the concepts and technologies presented herein will generally result in service outages that are smaller in scope than previous solutions. Previous solutions using a shared tenant database typically require service outages having a larger scope. As a result developers typically utilize upgrade solutions that do not require a service outage. These types of solutions however can have a longer development time and increased development costs. By offering an upgrade path that reduces the scope of typical outages the technologies presented herein offer a viable alternative to developers as compared to the prior upgrade solutions that do not require a service outage.

It should also be appreciated that distribution of the system across multiple data centers may be achieved by defining scale groups pointing to servers in another data center. Crosstalk between subsequent data centers and the first can be minimized through a data replication technique on the configuration role C. Speed of name resolution can also be improved by replicating the name role B. Geo locality can also be achieved by defining the scale groups such that their network location is a low latency to network location of the tenant.

Turning now to additional details will be provided regarding the embodiments presented herein for providing a hosted multi tenant application. In particular is a flow diagram showing a routine that shows aspects of an illustrative process for provisioning a new tenant of the hosted multi tenant system in one implementation described herein.

It should be appreciated that the logical operations described herein are implemented 1 as a sequence of computer implemented acts or program modules running on a computing system and or 2 as interconnected machine logic circuits or circuit modules within the computing system. The implementation is a matter of choice dependent on the performance and other requirements of the computing system. Accordingly the logical operations described herein are referred to variously as operations structural devices acts or modules. These operations structural devices acts and modules may be implemented in software in firmware in special purpose digital logic and any combination thereof. It should also be appreciated that more or fewer operations may be performed than shown in and described herein. These operations may also be performed in a different order than those described herein with respect to .

The routine begins at operation where one of the scale groups A N is selected for the new tenant. According to embodiments the scale group to which the new tenant is assigned may be selected based upon the average workload of the servers within each A N. In this manner a new tenant may be assigned to a scale group A N that has available computing and storage capacity. It should be appreciated that other factors such as the geographic location of the tenant and the scale groups may also be utilized in determining the appropriate scale group A N to which a new tenant should be assigned.

From operation the routine continues to operation . At operation a scale group database server is selected within the assigned scale group to service the unshared organization database for the new tenant. As with the scale groups A N the particular scale group database server may be selected based upon the average workload of the scale group database servers within the assigned scale group . Other factors may also be utilized in identifying a scale group database server for the new tenant.

Once the scale group and the scale group database server have been selected the routine proceeds to operation where the selected scale group database server creates the unshared organization database for the new tenant. As discussed above the unshared organization database is utilized to store data and application customizations for the new tenant and is inaccessible by other tenants.

From operation the routine continues to operation where user credentials are created for the new tenant and stored in the shared configuration database . The routine then continues to operation where data is stored in the shared configuration database that associates the new tenant and its users with the assigned scale group and scale group database server . Once this data has been stored in the shared configuration database the new tenant has been provisioned and can begin using the hosted application. Accordingly the routine continues from operation to operation where it ends.

Referring now to an illustrative routine will be described for processing client requests in the hosted multi tenant system described above. The routine begins at operation where the site wide Internet facing servers receive a request to access the hosted application. In response to receiving such a request the routine continues to operation where the site wide utility servers authenticate the user on behalf of whom the request was made and determine the tenant that the user is associated with. These processes are performed utilizing data stored in the shared configuration database .

Once the user making the request has been authenticated and the tenant with which the user is associated has been identified the routine continues to operation where the data stored in the shared configuration database is utilized to identify the scale group A N associated with the tenant making the incoming request. As discussed above this data is stored in the shared configuration database at the time the tenant is provisioned. Once the scale group hosting the tenant has been identified the routine continues to operation where the incoming request is redirected by the site wide Internet facing servers to the identified scale group .

As discussed briefly above the server computers assigned to the name role B may be configured to provide network addresses corresponding to sub domains unique to each tenant. For instance sub domains may be created for each tenant such as http myorg.crm.dynamics.com. The name role B is responsible for maintaining an association between each sub domain and the network address of the scale group assigned to the corresponding tenant. Through the use of this information the name role B can redirect incoming requests to the appropriate scale group for servicing the requests. It should be appreciated that the sub domain remains the same for a tenant even if the tenant is migrated to another scale group in another data center. However the network address of the scale group will be changed following the change to a new scale group.

When a tenant is moved to a new scale group a client computer that has cached the network address of the old scale group may be redirected to an incorrect scale group. If a scale group detects that a request has been received for a tenant that has been moved to a different scale group a new temporary sub domain will be created for instance http temp.myorg.crm.dynamics.com that corresponds to the new scale group for the tenant. The request will then be redirected to the new temporary sub domain. Once the Internet DNS entry for the main domain has expired a new lookup will be performed the next request will be redirected to the name role B and subsequently will be redirected to the correct network address of the new scale group.

From operation the routine continues to operation where data stored in the shared configuration database is utilized to identify the scale group database server that maintains the unshared organization database for the tenant making the incoming request. Once the appropriate scale group database server has been identified a connection is made to the identified database server to obtain any private tenant data necessary to respond to the incoming request. This occurs at operation . Once the data has been obtained the data is utilized to respond to the incoming tenant request at operation . From operation the routine continues to operation where it ends.

Turning now to an illustrative routine will be described for load balancing the scale groups A N and the servers within each of the scale groups A N. Because each tenant in the systems described herein is assigned a private unshared database the location of these databases can be easily changed depending upon the load that an individual tenant is placing on the middle tier and database tier computing systems. In this manner the computing resources described above with respect to can be allocated to the various tenants in an efficient manner that is likely to reduce the possibility that activities by one tenant will adversely impact the performance experienced by other tenants. illustrates one such process for load balancing the scale groups A N and the servers within each of the scale groups A N.

The routine begins at operation where the average workload of the scale groups A N and the individual server computers within each of the scale groups A N is monitored. The routine then continues to operation where a determination is made as to whether the average workload for each scale group is too high. If a particular scale group is experiencing an excessive average workload the routine proceeds to operation where one or more of the private unshared databases A N maintained by servers within the identified scale group are moved to another one of the scale groups A N preferably with a lower average workload. If none of the scale groups A N are experiencing an undesirably high workload the routine proceeds from operation to operation .

At operation a determination is made as to whether any server computer within each of the scale groups A N is experiencing an undesirably high average workload. If so the routine proceeds from operation to operation where one or more of the private unshared databases A N maintained by the identified server are moved to another server computer within the scale group or to another scale group . It should be appreciated that when a private unshared database is moved the mapping stored in the shared configuration database is updated to reflect the new location of the private unshared database. From operation the routine returns to operation where the above described process is periodically repeated to maintain an appropriate workload balance across the scale groups A N and the server computers located within each of the scale groups A N.

Referring now to an illustrative computer architecture for a computer capable of executing the software components described above with respect to will be discussed. The computer architecture shown in illustrates a conventional desktop laptop computer or server computer and may be utilized to embody any of the computer systems described herein.

The computer architecture shown in includes a central processing unit CPU a system memory including a random access memory RAM and a read only memory ROM and a system bus that couples the memory to the CPU . A basic input output system containing the basic routines that help to transfer information between elements within the computer such as during startup is stored in the ROM . The computer further includes a mass storage device for storing an operating system application programs and other program modules which will be described in greater detail below.

The mass storage device is connected to the CPU through a mass storage controller not shown connected to the bus . The mass storage device and its associated computer readable media provide non volatile storage for the computer . Although the description of computer readable media contained herein refers to a mass storage device such as a hard disk or CD ROM drive it should be appreciated by those skilled in the art that computer readable media can be any available computer storage media that can be accessed by the computer .

By way of example and not limitation computer readable media may include volatile and non volatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. For example computer readable media includes but is not limited to RAM ROM EPROM EEPROM flash memory or other solid state memory technology CD ROM digital versatile disks DVD HD DVD BLU RAY or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can be accessed by the computer .

According to various embodiments the computer may operate in a networked environment using logical connections to remote computers through a network such as the network . The computer may connect to the network through a network interface unit connected to the bus . It should be appreciated that the network interface unit may also be utilized to connect to other types of networks and remote computer systems. The computer may also include an input output controller for receiving and processing input from a number of other devices including a keyboard mouse or electronic stylus not shown in . Similarly an input output controller may provide output to a display screen a printer or other type of output device also not shown in .

As mentioned briefly above a number of program modules and data files may be stored in the mass storage device and RAM of the computer including an operating system suitable for controlling the operation of a networked desktop laptop or server computer. The mass storage device and RAM may also store one or more program modules. In particular the mass storage device and the RAM may store the CRM application the web browser application the database server application and the unshared organization database each of which has been described above with reference to . Other program modules described herein may also be stored in the mass storage device and utilized by the computer .

Based on the foregoing it should be appreciated that technologies for providing a hosted multi tenant application are presented herein. Although the subject matter presented herein has been described in language specific to computer structural features methodological acts and computer readable media it is to be understood that the invention defined in the appended claims is not necessarily limited to the specific features acts or media described herein. Rather the specific features acts and mediums are disclosed as example forms of implementing the claims.

The subject matter described above is provided by way of illustration only and should not be construed as limiting. Various modifications and changes may be made to the subject matter described herein without following the example embodiments and applications illustrated and described and without departing from the true spirit and scope of the present invention which is set forth in the following claims.

