---

title: Business information warehouse toolkit and language for warehousing simplification and automation
abstract: A method for use with an information (or data) warehouse comprises managing the information warehouse with instructions in a declarative language. The instructions specify information warehouse-level tasks to be done without specifying certain details of how the tasks are to be implemented, for example, using databases and text indexers. The details are hidden from the user and include, for example, in an information warehouse having a FACT table that joins two or more dimension tables, details of database level operations when structured data are being handled, including database command line utilities, database drivers, and structured query language (SQL) statements; and details of text-indexing engines when unstructured data are being handled. The information warehouse is managed in a dynamic way in which different tasks—such as data loading tasks and information warehouse construction tasks—may be interleaved (i.e., there is no particular order in which the different tasks must be completed).
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08479158&OS=08479158&RS=08479158
owner: International Business Machines Corporation
number: 08479158
owner_city: Armonk
owner_country: US
publication_date: 20080605
---
The present invention relates generally to the field of information storage and retrieval and more particularly to automating and simplifying information warehouse management system tasks using a high level declarative information warehousing language and runtime system components to make system operational details transparent to the user.

Rapidly leveraging information analytics technologies e.g. to mine the mounting information in structured and unstructured forms derive business insights and improve decision making is becoming increasingly critical to today s business success. One of the key enablers of new information analytics technologies will be an information warehouse management system IWMS that processes different types and forms of information as well as builds and maintains the information warehouse IW effectively. Although traditional multi dimensional data warehousing techniques coupled with the well known extract transform and load ETL processes may meet some of the requirements in an IWMS they generally lack adequacy in several major respects 1 they often lack comprehensive support for both structured and unstructured data processing 2 they usually are database centric and require detailed database and warehouse knowledge to perform IWMS tasks and hence are tedious and time consuming to operate and learn 3 they are often inflexible and insufficient in coping with a wide variety of on going IW maintenance tasks such as adding new dimensions and handling regular and lengthy data updates with potential failures and errors.

Although data warehousing techniques such as multi dimensional data warehouse models and ETL processing have been widely practiced in industry they are increasingly inadequate in their functionalities due to major changes in today s information dynamics where there is a need for comprehensive support for structured and unstructured data simple and high level IW operations and on going IW maintenance operations.

Existing data warehousing techniques are mainly designed to handle structured data. However a large fraction of business enterprise data is in unstructured data formats e.g. call center problem tickets and customer complaints. Because it is vital for an IWMS to support both structured and unstructured types of data there is a need for comprehensive support for structured and unstructured data.

The prominent and rapid adoption of information analytics technologies such as text mining and business intelligence BI tools mandates simple and efficient IWMS systems that can quickly process various information sources and build information warehouses. Current data warehouse systems however are typically hard to use and require detailed database and data warehouse knowledge. Even with skilled staff building data warehouses often takes multi person weeks and months to complete. With the need to support unstructured data knowledge and skills about full text indexers and search engines have become necessary. It is often unrealistic to assume the existence of such knowledge and skills in the business world. For instance organizations that want to use BI and text mining tools may not have strong database administrators DBAs for handling complex ETL processing. Thus there is a need for IWMS that provide simple and high level IW operations.

Currently existing ETL solutions for information warehouse management generally focus on the single aspect of building the information warehouse. It is often assumed that once the information warehouse is fully constructed and the data are completely loaded from the given set of data sources the project is completed. In other words no subsequent modifications to the data warehouse will be needed. In practice however information is constantly changing. It is common for users to frequently adjust the information warehouses by adding new dimensions to an existing IW or modifying and loading new data on a regular basis. All such operations must ensure the overall IW integrity and consistency. Furthermore due to the on going data updating and loading it becomes extremely important for the IWMS system to cope with various forms of system failures and potential error conditions. Current IWMS generally have little or no support for fast failure recovery error correction or on going IW schema changes. The common practice is to simply rebuild the data warehouses from scratch each time that changes are required or to perform lengthy and error prone manual IW operations. Thus there is a need for an IWMS that provides on going IW maintenance operations.

As can be seen there is a need for information warehouse management systems that provide comprehensive support for structured and unstructured data simple and high level warehouse operations and on going IW maintenance operations.

In one embodiment of the present invention a method for information warehouse construction comprises providing a language specification for information warehouse construction the language specification having information warehouse IW level commands and dimension level commands and constructing an information warehouse based on a script comprising at least one of the IW level commands and the dimension level commands according to the language specification for information warehouse construction.

In another embodiment of the present invention a method for data loading in an information warehouse comprises providing a language specification for data loading in an information warehouse the language specification having source mapping commands and data loading commands and loading data into an information warehouse based on a script comprising at least one of the source mapping commands and data loading commands according to the language specification for data loading.

In yet another embodiment of the present invention a method for data maintenance of an information warehouse comprises providing a language specification for information warehouse IW maintenance in an information warehouse the language specification having failure recovery commands and error correction commands and performing an IW maintenance operation on the information warehouse based on a script comprising at least one of the failure recovery commands and error correction commands according to the language specification for IW maintenance.

In still another embodiment of the present invention an information warehouse system comprises a front end graphical user interface that accepts inputs from a user and generates commands in a declarative information warehouse language an information warehouse language processor that receives the commands from the user interface and provides system level database level and indexing engine level commands for performing tasks specified by the commands from the interface and a warehouse builder that receives the system level database level and indexing engine level commands from the information warehouse language processor and performs tasks specified by the system level database level and indexing engine level commands to build an information warehouse according to the commands from the user interface the system level database level and indexing engine level commands being hidden from the user.

In still another embodiment of the present invention a computer program product for use with an information warehouse comprises a computer useable medium including a computer readable program in which the computer readable program when executed on a computer causes the computer to accept commands of a declarative information warehouse language provided by a script parse the commands from the script generate data description language commands from the parsed commands and execute the data description language commands to construct an information warehouse.

In a further embodiment of the present invention a computer program product for use with an information warehouse comprises a computer useable medium including a computer readable program in which the computer readable program when executed on a computer causes the computer to accept commands of a declarative information warehouse language provided by a script parse the commands from the script extract desired data from a source file according to the parsed commands transform the extracted data into a target format according to the parsed commands and load the transformed data into information warehouse tables and file system locations according to the parsed commands.

These and other features aspects and advantages of the present invention will become better understood with reference to the following drawings description and claims.

The following detailed description is of the best currently contemplated modes of carrying out the invention. The description is not to be taken in a limiting sense but is made merely for the purpose of illustrating the general principles of the invention since the scope of the invention is best defined by the appended claims.

Broadly embodiments of the present invention provide systems and methods for information warehouse IW users without SQL sequential query language and database expertise to perform IW tasks without significant training. Embodiments of the present invention may provide information warehouse management systems IWMS that 1 support high level operations for users to specify what they want to do 2 automatically figures out the details of how to do what the user specifies and 3 handles the IW operations accordingly. IWMS in accordance with embodiments of the present invention may improve system usability robustness and performance for businesses that increasingly rely on vast amounts of information. Data warehousing may be considered an essential step towards exploring understanding and analyzing business information for better and faster decision making. Embodiments of the present invention may be useful to commercial enterprises that build and maintain increasingly large information warehouses to enable advanced information analytics and to improve the business value of information.

Embodiments of the present invention may provide novel information warehouse management systems that provide support for both structured and unstructured types of data in contrast to prior art systems such as traditional multi dimensional data warehouses that are mainly designed for on line analytical processing OLAP applications of structured data alone and whose main focus is warehouse schema design and data mining operations for structured data. Embodiments of the present invention by way of contrast may support both text mining as well as BI applications and integrate both structured and unstructured data in each.

Prior art data warehousing also generally assumes that skilled database administrators DBAs are available for most of the data warehousing tasks. Embodiments of the present invention use a high level declarative language to enable a much simpler more efficient and more easy to use IW toolkit than ETL extract transform load products existing in the prior art such as Kalido Sunopsis IBM DB2 Data Warehouse Edition IBM WebSphere Information Integrator also referred to as Ascential and Microsoft BI Accelerator which are often too complex lacking in simple high level operations to be usable or cannot handle structured and unstructured data in the same system.

Also no incremental data maintenance operations are supported in these products in contrast to for example failure recovery for data loading e.g. using checkpointing provided by embodiments of the present invention error recovery e.g. using versioning for undo and redo operations of data loading and other maintenance operations provided by embodiments of the present invention.

Typically the first task involved in information warehousing is to construct an information warehouse e.g. perform building warehouse tasks by designing the right data warehouse model designing the appropriate schemas e.g. tables and dimensions that constitute the information warehouse which may comprise file system and database and implementing the schema in the designated information warehouse . With current IW systems such tasks are generally time consuming and complex. It is desirable for the next generation IWMS to allow warehouse administrators such as user to build an information warehouse in an easy quick and flexible fashion without burdening the warehouse administrators with the details of data warehouse models and database file system specific operations required for example to operate file system and database .

Once an information warehouse is defined the next step is typically to load data into the warehouse e.g. perform loading data tasks . Loading data may be tightly related to the well known ETL i.e. extract transform load process in that proper data fields need to be extracted transformed and loaded into the target information warehouse . Due to the requirements originating from unstructured data the IWMS may support flexible data extraction for various sources with different formats such as XML files sophisticated data transformations and efficient loading mechanisms for large amounts of data. None of the prior art ETL tools known can handle the level of flexibility complexity and efficiency imposed by semi structured data and unstructured data.

Because of the potential changes in information sources and the need for different types of analytics an IWMS in accordance with an embodiment of the present invention may allow flexible changes e.g. perform maintaining data tasks to information warehouse while automatically maintaining the data consistency and integrity e.g. data and their indices in RDBMS and full text indices . Furthermore IWMS may provide via maintaining data tasks the ability to cope with various failure and error situations without requiring users to rebuild information warehouse .

An IWMS may support actions e.g. perform cleaning data tasks to clean the data already loaded in the information warehouse or before the data are loaded. Such cleansing may include for example cleansing for structured semi structured and unstructured data e.g. changing and merging dimension values coping with invalid XML files and handling different character encodings.

Once the information warehouse is built it may be used to serve various forms of queries e.g. perform querying data tasks . An IWMS may support efficient processing of IW queries e.g. OLAP operations as well as text search and retrieval operations.

IWMS may include a general and declarative high level language GIWL to simplify and automate the IW tasks . With GIWL users may need only to specify what they want rather than how to execute the operations for performing tasks . An analogy for example is that of sequential query language SQL and its relationship to relational database management systems RDBMS . With SQL users only need to define what they want in the query result rather than how to execute the query. The runtime system e.g. information warehouse system shown in may handle the query automatically. Similarly GIWL language can be used to declaratively define various IW tasks e.g. from among tasks . The runtime system e.g. information warehouse system may provide inherent support to carry out operations automatically without human intervention. Information warehouse system may manage both structured and unstructured data. Information warehouse system may use databases such as database to store and index structured data and file systems such as file system or databases such as database for unstructured data. To support high performance and complex keyword queries information warehouse system may integrate with full text indexers e.g. Juru and Lucence as known in the art to automatically build indices for unstructured data. Information warehouse system may maintain the data and index consistency between databases and file systems at all times.

The overall system architecture for information warehouse system may contain the front end GUI and the back end IWMS engine as shown in . The back end IWMS engine may include a command line based GIWL processor and its associated runtime modules for example the warehouse builder for constructing the IW e.g. performing building warehouse tasks the data loader for loading data e.g. performing loading data tasks and the warehouse maintainer for IW maintenance e.g. performing maintaining data tasks . The front end GUI may be a Web based graphical user interface for the back end IWMS engine . GIWL processor may employ input from database and full text indexer knowledge base to generate commands for modules .

As seen in the front end GUI may contain six modules warehouse design manager source mapping manager data loading manager maintenance manager source data manager and system configuration manager . The modules may generate GIWL commands for the IW building e.g. tasks schema mapping and data loading e.g. tasks and IW maintenance e.g. tasks tasks. Such a front end allows users to work with the information warehouse system without even knowing the details of the GIWL language . A more intuitive GUI front end may automatically generate the appropriate GIWL scripts. The generated commands may be passed to the back end IWMS engine for execution. The source data manager may manage the source data. The system configuration manager may manage and configure the IW settings e.g. for information warehouse .

Such a high level system architecture for an IW system may be extensible and support different databases while hiding the RDBMS details. Besides the fact and dimension tables IW system may also maintain several internal system tables to record the IW design. In particular IW system may record all the information about warehouses i.e. warehouse names their storage databases their fact tables dimension tables dimension models dimension attributes attribute types and index types in the internal system tables. In the IW construction phase e.g. building warehouse tasks file system storage and full text indexers may not be involved but may play a role in the data loading stage e.g. loading data tasks .

One of the major issues with current information warehouse tools is that they are often system dependent as are for example DB2 Oracle and SQL Server . Current information warehouse tools typically require detailed RDBMS IW modeling and text indexing knowledge on the part of the user. Moreover they often require highly skilled IW administrators to perform tedious time consuming and error prone customization when utilized in different customer environments. Such customizations may be necessary due to idiosyncrasy of different RDBMSs file systems and full text indexers. Even though there are standards such SQL for RDBMS and POSIX for file systems such standards often contain many non standard variations even for simple operations which require customization at customer sites. The following examples may illustrate some variations in different relational database management systems. Such customization tasks can create barriers for timely information warehouse construction and may require significant training even for proficient DBAs.

Databases may use different keywords for defining the same data type. For instance for the integer data type DB20 uses INTEGER and MySQL uses INT for the large object data type LOB DB20 uses CLOB size and MySQL uses TINYBLOB BLOB MEDIUMBLOB and LONGBLOB .

Databases may have different ways to drop an index. For instance in DB2 Oracle and PostgreSQL the syntax is DROP INDEX index name . In SQL Server however the syntax is DROP INDEX table name.index name . MySQL uses ALTER TABLE table name DROP INDEX index name .

Databases may have different ways to define automatically incremental attributes. For instance in DB2 the syntax is NOT NULL GENERATED ALWAYS AS IDENTITY . In MySQL the syntax is NOT NULL AUTO INCREMENT . In SQL Server the syntax is NOT NULL IDENTITY . Other databases may also have their own syntax.

Since creating and dropping databases are not supported in Java database connectivity JDBC and open database connectivity ODBC to create and drop a database one has to use database specific command line utilities that are often different from one database to another. For instance DB2 has its command line utility db2 MySQL has mysql and SQL Server has sqlcmd . Each of the command line utilities just mentioned may have its own set of options to execute distinct from all the others.

Similar to the examples just given full text indexers are typically even less standardized than file systems and RDBMS systems. For example building text indices may require users to link in very different libraries e.g. Juru versus Lucene . Also for example in order to integrate structured and unstructured data in a single information warehouse IW designers may need to be a highly skilled DBA a data warehouse modeling expert and a file system and full text indexer expert. Such needs can create significant roadblocks for the adoption of IW text mining and BI technologies. Embodiments of the present invention may address such needs by utilizing a high level declarative language GIWL to clearly separate the high level IW design and low level IW implementation. Using IW system for example IW designers may design an information warehouse by creating a language script such as language script shown in that contains a set of declarative statements defined in GIWL. The language script e.g. language script may indicate which database and full text indexer the user e.g. user wishes to use and what tasks need to be carried out. IW system may for example automatically generate low level database specific and full text indexer specific commands at runtime based on the script and execute them without human e.g. user intervention. Such an approach may remove the customization burden from users e.g. user and enable overall IW task simplification and automation.

The following describes an exemplary detailed language specification for IW construction. The language specification for constructing an information warehouse may include two levels an IW level and a dimension level. The IW level commands may define the language syntax at the granularity of entire information warehouses such as creating using and dropping an information warehouse. The dimension level commands may define the language syntax at the granularity of facts and dimensions such as creating altering and dropping a dimension. The concepts of facts and dimensions are well known in the art of data warehousing. In the language specification below the lower case words may indicate the command attributes that require user inputs and uppercase words may designate the command names.

Each dimension may consist of a set of attributes. Each attribute may be defined by a triplet attribute name e.g. attr name data type and index type. Data types may include all standard types such as INT BIGINT FLOAT DATETIME VARCHAR and CLOB. Index type can be an index in database or index in full text indexer or no index. In addition each dimension may require a schema model to be defined by the user e.g. user . In one implementation the schema model can be one of MEASURE STAR SNOWFLAKE NEWFACT and FILE. A dimension can be associated with either the fact table or another dimension which can be set using the ON keyword.

The above named models are known in the data warehousing art and have conventional meanings. In order to support integration of structured and unstructured data however in one IWMS system e.g. IW system modifications may be given to the meanings as listed below so as to help simplify information warehousing tasks. Given the tradeoffs of different models and usage patterns there may not be a single model that would fit all situations. Hence supporting different models by IW system may provide users with flexibility while still hiding the low level system specific details during model construction.

1. MEASURE A dimension with the MEASURE model means that the attributes in this dimension may be put in the fact table. No new tables are created for this type of dimension. MEASURE model may only be meaningful when associating with the fact table. Hence a dimension with the MEASURE model should always use ON FACT in the creation statement.

2. STAR A dimension with the STAR model means that the primary key of this dimension may be a foreign key of the fact table or another dimension depending on the setting of the ON keyword. Therefore a traditional snowflake model can be constructed by using a sequence of STAR models in IW system .

3. SNOWFLAKE A dimension D with the SNOWFLAKE model means this dimension may be linked to the fact table F or another dimension D through a map table or named bridge table. The map table may describe the n n relationship between D and F or D and D .

4. NEWFACT A dimension with the NEWFACT model means that the primary key of this dimension may also be the primary key of the fact table or another dimension it links to. The NEWFACT model may be needed for efficient incremental IW construction such as adding new measure attributes or new attributes into existing dimensions after the IW has been constructed and data have been loaded. This model may be used to accommodate the RDBMS limitation on adding new columns for already constructed tables.

5. FILE A dimension with the FILE model means that the dimension data may be stored in file systems instead of databases. Such a model may be designed to handle unstructured data. Although most databases also include text indexing and storage capabilities such support in RDBMSs may typically be premature and unscalable to large amounts of unstructured data. On the other hand file systems traditionally are more friendly to full text indexers and storing unstructured data. In the FILE model unstructured files may be directly associated with the primary key of the fact table.

1. A user e.g. user may first use IW level commands to indicate the intention of creation of the warehouse sale as shown in .

2. The user may set the name of the fact table to be sales and create a set of dimensions. In the sale example the user created a dimension amount with two measure attributes dollars sold and profit in the fact table sales . Both attributes need indexes in databases. The user also created a dimension date with the STAR model associated with sales .

4. A dimension location with the STAR model on branch is created. Note that the location dimension is traditionally considered as a snowflake model in the IW design. But in IW system it is viewed as a STAR model for its directly linked dimension.

5. The user also created a dimension product with the SNOWFLAKE model on sales . As a result a table called product map may be generated to connect the product table and the sales table.

6. A dimension feedback with the NEWFACT model on sales is also created. From it can be seen that although the attribute feedback may be stored in a database its index can be built using a full text indexer.

7. The user created a dimension attachments with the FILE model which uses file systems to store the attachment texts.

After the information warehouse e.g. information warehouse is constructed data loading can begin using for example IW system shown in . Data loading typically requires users e.g. user to first specify how the source data e.g. data is mapped to the target IW schema before the data are loaded according to the mappings. Source to target mapping generally entails two tasks data extraction i.e. extracting pieces of data of interest from the source data and data transformation i.e. transforming the extracted data into appropriate formats and or values for the target information warehouse . IW system may be implemented for example to work with any XML formatted sources. XML may be selected to illustrate the present examples because XML is commonly used and also may represent a combination of structured and unstructured data. That is XML data typically contains both structured fields as well as unstructured texts. XML data may also have a complex schema model. Loading data using IW system may entail separate requirements for data extraction data transformation and data loading.

Data Extraction Typically to support analytics applications only a subset of the source data fields needs to be populated into the target information warehouse. Thus the data extraction mechanism may desirably be flexible to allow accurate extraction of the desired source data fields from source data. For XML data for example this may be especially challenging due to XML data s highly flexible formats. For instance exactly the same data content can be organized very differently in XML format as shown in .

Each of segments through shown in although having very different document type definitions DTD contains the same data content i.e. the first and last names of two authors Jim Gray and Jeffrey Ullman . Yet some of the segments put data as text values i.e. segments and while others as put data attribute values i.e. segments and . Some of the segments put last name and first name as tag names i.e. segment while other segments put last name and first name as attribute names i.e. segment or attribute values i.e. segments and .

To resolve the issues described above IW system may use XPath to locate the desired data fields. For the examples shown in the xpath to locate the article nodes is doc article . Assuming that users would like to retrieve fields for each article and given an article node context the xpath to locate all the authors in segments is . author while the xpath to locate all the authors in segment is . item attr author . Given an author node context the xpaths to locate the value of the first name in these four segments are respectively 

Such record and attribute location capabilities can be modified and extended to support locating records and attributes in RDBMS or delimited files as well.

Data Transformation The extracted data e.g. extracted data shown in sometimes requires transformation before it can be inserted into the target information warehouse e.g. transforming a date value from yyyy mm dd format to mm dd yyyy or selecting a substring from the data value. IW system may support such transformations by providing a common set of transformation functions as well as user defined functions.

In addition to data format transformations an ETL process for information warehouse should also provide two common but more complex transformations e.g. source to target complex schema matching and complex data value mapping as shown in and .

Data Loading Once the desired data fields have been extracted and possibly transformed data loading e.g. processing by data loader on data as shown in may begin. Data loading may be required to ensure proper maintenance of the data relationships for example those existing in the source data . That is if two attributes Aand Ahave certain dependencies in the source data e.g. source data such dependencies may be required to be maintained in the target information warehouse e.g. information warehouse as well. Similarly if two attributes Aand Aare independent in the source data it may be required that they be so in the target information warehouse. shows different data relationships for three seemingly similar XML segment examples 1 2 and 3 . All three examples of assume that users e.g. user would like to create a dimension with two columns B and C. In segment the values of tags B and C are independent. In segment B and C are grouped together at all times. Segment also has B and C grouped together but within each group their values are independent. Such groupings indicate that the data loading results for the dimension table that contains B and C may be different in each case 1 2 and 3 as shown in .

The following describes an exemplary detailed language specification for IW loading data. To handle both structured and unstructured data in file systems and databases IW system may provide a set of high level GIWL commands for data loading tasks while hiding the extraction transformation and loading details from users e.g. user . The language specification for loading data may contain two main categories source mapping commands and data loading commands. The source mapping commands may define the language syntax for data extraction and data transformation. The data loading commands may define the language syntax for data loading.

Table 1 illustrates a data loading example using an information warehouse example . Assuming that the XML data e.g. source data contains all the attributes used in the script e.g. script shown in Table 1 may first create a mapping profile mth and set the xpath of all the records to be doc A which may locate all document records to be loaded. The script of Table 1 may then create a set of mappings. For example there may be three sample mappings to the value dimension value1 may contain an xpath value2 may contain a data transformation function Substring and value3 may contain nested functions. The question mark in the function may be used to represent the values extracted from the xpath.

The example script of Table 1 also shows a dimension with 1 n schema mapping for the date dimension . In this example a 1 n schema mapping may be decomposed into n individual simple mappings where each mapping utilizes the function SplitSelect to split and select the desired portions of data. The reverse i.e. a dimension with an n 1 schema mapping is illustrated in Table 1 using the name dimension where multiple xpaths may be used to specify the desired data e.g. the first name and last name and the function Concat concatenates them for the target field in the dimension where 1 denotes the extracted data from the first xpath and 2 extracted data from the second xpath. Similar to schema matching Table 1 shows two data mapping examples i.e. 1 n data mapping for the author dimension and n 1 data mapping for the comment dimension. The 1 n data mapping may use the function Split for example to split the data value into multiple data values and the n 1 data mapping may use the function Merge for example to merge multiple data values into one value. The LOAD command may load the XML data file data.xml according to the mapping profile mth .

After the information warehouse e.g. information warehouse is constructed and loading data completed IW maintenance may be performed using for example IW system shown in . IW system may provide two key types of maintenance capabilities e.g. the ability to efficiently recover from data loading failures and the ability to correct data errors efficiently. Without such capabilities failures or errors occurring in a lengthy data load typically result in complete IW reloads. Even if DBAs would manually clean up the failed loads there is often a danger of breaking the overall IW data integrity and consistency in such manual processes.

Failure recovery may describe a situation where a data loading e.g. data loading may fail due to unexpected system errors e.g. machine or network crash and an IWMS must properly clean up the incomplete records from the information warehouse and be able to resume loading data from where it was left off without breaking data integrity and consistency. To cope with such situations two logical actions abort and resume may be provided for example by IW system . Similar to the transaction rollback concepts in databases e.g. RDBMS abort may roll the IW state of information warehouse for example back to a consistent state before the failure point. Likewise resume may allow users e.g. user to resume the failed data load from that last consistent state without reloading everything from scratch. No known prior art RDBMS has readily available support for such failure recovery operations. Yet abort and resume may be extremely important for an IW environment and abort and resume may also be useful when users intentionally wish to abort a data load.

Error correction may describe a situation where the data e.g. source data may be loaded successfully but users may find errors in some loaded data content in the information warehouse e.g. information warehouse and hence wish to revert some portion of the data load and reload some of the data using corrected contents. To allow flexible error corrections for the loaded data IW system may support undo and redo operations. Such undo and redo operations may also be used to facilitate data modifications.

The following describes an exemplary detailed language specification for IW maintenance. Similar to other IW activities IW system may contain a set of high level GIWL commands to handle failure recovery and a set of high level GIWL commands to handle error correction cases. The IW system may automatically e.g. hiding system operational details from users recover from the failed and erroneous situations as described below.

Loading resumption may be done implicitly when users e.g. user issue the LOAD command e.g. shown above under the heading Data Loading Commands . IW system may automatically resume the loading from the last consistent break point e.g. checkpoint defined during data loading . Error Correction Commands

This command may undo all the loaded source files until the source file src name . The source file src name may also be included in the undo action. 

This command may list all the source files that have no changes after being undone and thus are redoable.

This command may redo loadings of all the source files until the source file src name . The source file src name may also be included in the redo action. 

The invention can take the form of an entirely hardware embodiment an entirely software embodiment or an embodiment containing both hardware and software elements. In a preferred embodiment the invention is implemented in software which includes but is not limited to firmware resident software microcode etc.

Furthermore the invention can take the form of a computer program product accessible from a computer usable or computer readable medium providing program code for use by or in connection with a computer or any instruction execution system. For the purposes of this description a computer usable or computer readable medium can be any apparatus that can contain store communicate propagate or transport the program for use by or in connection with the instruction execution system apparatus or device.

The medium can be an electronic magnetic optical electromagnetic infrared or semiconductor system or apparatus or device or a propagation medium. Examples of a computer readable medium include a semiconductor or solid state memory magnetic tape a removable computer diskette a random access memory RAM a read only memory ROM a rigid magnetic disk and an optical disk. Current examples of optical disks include compact disk read only memory CD ROM compact disk read write CD R W and DVD.

A data processing system suitable for storing and or executing program code will include at least one processor coupled directly or indirectly to memory elements through a system bus. The memory elements can include local memory employed during actual execution of the program code bulk storage and cache memories which provide temporary storage of at least some program code in order to reduce the number of times code must be retrieved from bulk storage during execution.

Input output or I O devices including but not limited to keyboards displays pointing devices etc. can be coupled to the system either directly or through intervening I O controllers. Network adapters may also be coupled to the system to enable the data processing system to become coupled to other data processing systems or remote printers or storage devices through intervening private or public networks. Modems cable modem and Ethernet cards are just a few of the currently available types of network adapters.

It should be understood of course that the foregoing relates to exemplary embodiments of the invention and that modifications may be made without departing from the spirit and scope of the invention as set forth in the following claims.

