---

title: Bridge device access system
abstract: A bridge device access system permits access to a locked bridge device coupled between a host and a storage device. The bridge device is unlocked by sending an unlock sequence of storage device verify commands from the host to the bridge device. Each verify command includes a start address and a length parameter, wherein the sequence of start addresses in the sequence of storage device verify commands is a pseudorandom sequence of hexadecimal values. The bridge device detects the unlock sequence and is unlocked. The host can send a bridge-access command as the first command after the unlock sequence. Bridge-access commands can include storage device commands that are interpreted by the bridge device as queries and/or instructions for performing various tasks. The bridge device processes the bridge-access command, performing a prescribed operation in response to the bridge-access command, and then immediately re-enters its locked state.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07761635&OS=07761635&RS=07761635
owner: Tableau, LLC
number: 07761635
owner_city: Waukesha
owner_country: US
publication_date: 20080620
---
The present invention relates generally to communications between a host computer and a command filtering bridge device or the like interposed between the host computer and a storage device.

Bridge devices can be interposed between a host computer and a storage device to perform various functions. One specialized type of bridge device works with an expander that provides an interface to a plurality of host computers an interface to a single ported storage drive and arbitration logic. The bridge device s arbitration logic controls and permits concurrent access by the hosts to the single ported storage drive so that the bridge need not store read or write data being received from or provided to the storage drive.

Another specialized type of bridge device is a write blocker which can include a blocking device that blocks certain commands actually such devices filter commands and can be referred to more accurately as command filtering devices such as read or write commands as they are transmitted to a storage device by a host computer or the like. The command filtering device is physically inserted between a host computer system and the storage device and is transparent to the host and the storage device. Write blockers which also are command filtering devices allow acquisition of information stored on a drive hard disk etc. without allowing accidental or intentional damage to the contents of the drive disk. Write blockers do this by allowing read commands to pass through to the protected disk but blocking write commands hence their name.

There are two types of write blockers Native and Tailgate. A Native device communicates with the host computer system over the same type of interface used to communicate with the storage device for example a IDE to IDE write block. A Tailgate device uses different types of interfaces for communication with the host computer system and with the storage device for example a Firewire to SATA write block. The blocking device intercepts communications between the host and the storage device and examines any commands from the host to the storage device. Certain commands such as commands that may modify the storage device may be discarded.

Systems methods and techniques that provide improved communication between a host computer and a bridge device or other similar intermediate device would represent a significant advancement in the art.

The following detailed description will refer to one or more embodiments but the present invention is not limited to such embodiments. Rather the detailed description and any embodiment s presented are intended only to be illustrative. Those skilled in the art will readily appreciate that the detailed description given herein with respect to the Figures is provided for explanatory purposes as the invention extends beyond these limited embodiments.

Certain terms are used throughout the description and claims to refer to particular system components. As one skilled in the art will appreciate computer and other companies may refer to components by different names. This disclosure does not intend to distinguish between components that differ in name but not function. In the following discussion and in the claims the terms including and comprising are used in an open ended fashion and thus should be interpreted to mean including but not limited to . . . Phrases such as coupled to and connected to and the like are used herein to describe a connection between two devices elements and or components and are intended to mean physically and or electrically either coupled directly together or coupled indirectly together for example via one or more intervening elements or components or via a wireless connection where appropriate. The term system refers broadly to a collection of two or more components and may be used to refer to an overall system e.g. a computer system or a network of computers a subsystem provided as part of a larger system e.g. a subsystem within an individual computer and or a process or method pertaining to operation of such a system or subsystem.

As seen in a host for example a host computer or a computer CPU motherboard can be coupled to a disk or other storage device via a bridge device . An interface connects host to bridge device . Similarly an interface connects the bridge device to the storage device .

Bridge devices perform various functions. As noted above one specialized type of bridge device is a command filtering device one type of which might be referred to as a write blocker which filters certain commands and or operations such as read or write commands and or operations as they are transmitted to storage device by a host computer or the like. The command filtering device typically is physically inserted between a host and the storage device and is transparent to the host and the storage device.

The storage device can be a long term non volatile memory device such as a block storage device or the like. For example the storage device may be a hard disk drive magnetic tape drive optical disk drive or flash memory. In one embodiment interface coupling the bridge device to the storage device is an Integrated Drive Electronics IDE interface. An IDE interface is a well known electronic interface that is frequently used to connect a computer s motherboard to each disk drive in the computer. In IDE drives the disk drive controller is built into the physical case of the disk drive. The IDE interface provides a relatively high level interface between the motherboard and the disk drive.

In other exemplary embodiments the host may be a computer being used by a person conducting forensics investigation of the storage device . In such a case the host can be connected externally to the storage device . Again an IDE or other appropriate interface can be used to connect bridge device to storage device .

Although some embodiments described herein may be disclosed in connection with an IDE magnetic hard disk drive they are not limited to such drives. Other types of media can be implemented such as flash memory with an IDE interface as will be appreciated by those skilled in the art. Other types of media usable with an IDE interface include magnetic tape and optical media such as a compact disc CD and a digital versatile disc DVD . In addition to the IDE interface concepts consistent with the invention may be applied in a straightforward manner to other types of high level storage interfaces such as the well known Small Computer System Interface SCSI standard or a hard drive connected through an IEEE 1394 connection.

It often is desirable to be able to perform discovery and querying functions and the like with regard to a bridge device. In its standard mode of operation a bridge device transparently emulates a storage device. Consequently a host typically has no way to discover that bridge devices are present and cannot interact with a bridge device in a fashion that is not supported by storage devices. This standard mode of operation of a bridge device is hereafter referred to as the bridge device s locked state.

In some cases it may be possible to transmit a vendor unique command to a bridge device using a storage device protocol as will be appreciated by those skilled in the art a bridge device can be programmed to respond to vendor unique commands without consideration for locked unlocked modes of operation . In such cases crafting a set of vendor unique commands for discovering and interacting with bridge devices is a straightforward task that can be performed readily by one skilled in the art. However transmission of vendor unique commands is not supported by all operating system drivers or by all storage device control hardware. In general a bridge device access system can only rely upon support for a relatively limited set of standard commands designed purely for manipulation of storage devices. Embodiments disclosed herein take advantage of the relatively ubiquitous nature of the limited set of standard commands as proxies for unlocking and communicating with a bridge device in a bridge device access system. Such a bridge device access system according to one or more embodiments provided herein can be used to retrieve information for example identifying and or operational state information from or otherwise interact with a forensic bridge. An unlock sequence of communications from a host to the bridge device provides access to query capabilities over interfaces that do not support vendor unique commands or the like that might otherwise be available.

As noted above the default state of a typical forensic bridge is locked. That is all read write verify commands received by the bridge are interpreted as commands to be either write blocked or passed through to the attached physical drive. Prior to querying the bridge directly the bridge device is unlocked by sending the unlock sequence of commands to it.

Embodiments of a bridge device access system use dual function or dual purpose commands for unlocking and accessing a bridge device interposed between a host for example a computer and a target device for example a storage device. That is commands are dual purpose in the sense that each command is a valid command used by the host to communicate with the storage device while concurrently providing a way for the host to communicate with an otherwise transparent bridge device between the host and the storage device. The commands thus function collaterally as a communications channel between host and bridge device.

In one embodiment the unlock sequence consists of a series of seemingly otherwise routine verify commands. The host s verify commands are passed along by the bridge device to the storage device as they normally would prompting a typical reply from the storage device. However each verify command can also function in a proxy type role when it is used as part of the unlock sequence. That is in addition to its normal function the verify command serves collaterally as a means for delivering the unlock sequence to the bridge device perhaps viewed as an alternate channel for communicating between the host and the bridge device .

As will be appreciated by those skilled in the art other types of commands and or communications can be used. Verify commands are advantageous because they are relatively benign commands that are supported by a wide variety of storage device interfaces. The verify command instructs a storage device to examine a section of its physical media and determine whether or not that section can be read. Two pieces of information are used typically to perform a verify command a start address and a length parameter. The control circuit performing the verify command uses the start address in the storage device so that the control circuit knows where to look for the data to be verified. After verifying the first codeword the verifying circuitry increments to the next address and performs verification on the data in the next address. The length parameter tells the circuit how long to perform the verification. That is the length parameter tells the circuit how many addressable locations for example sectors should be verified. Any valid sector is a valid starting address invalid addresses are avoided in some embodiments to reduce problems and unnecessary use of resources in dealing with commands that generate problems for the storage device to handle . Modern hard drives typically have between 2and 2addressable sectors but small devices for example flash drives have many fewer sectors.

While a number of command types could be used to construct an unlock sequence some bridge device applications require more care in sequence construction. For example a forensic bridge device must not transmit commands to the attached storage device which would cause modifications to the stored data. Read commands and verify commands do not modify stored data so both are acceptable for forensic applications.

In some embodiments an unlock sequence in the bridge device access system comprises a stipulated number of verify commands using a pseudorandom sequence of values in the start address field of the verify commands. Verify commands are used in some embodiments because they are generally supported across a variety of storage interface protocols do not require significant data transfer the verify command response from the storage device to the host does not require transmission of a data payload by the storage device as would a read command for example and save time and resources in the submission of an unlock sequence by a host to a bridge device. Limiting the length of each verify command to a single sector typically leads to improved performance as the storage device control logic must read only a minimal portion of its physical media to satisfy such a command. Moreover the unlock sequence can be made compatible with low capacity storage devices by limiting the set of starting addresses to small values. In the examples provided below the starting addresses all lie within the first 256 sectors this choice is compatible with very small storage devices yet provides a suitable degree of random potential to make the unlock sequence reasonably unique.

The generally unique unlock sequence of values is seen by the bridge device as a key to unlock the bridge device. For example as seen in Table 1 of an exemplary unlock sequence of 20 one sector verify commands can use a sequence of hexadecimal start addresses. The form of each verify command is specific to the storage device communication protocol being used. Generally a verify command is of the following form 

Those skilled in the art will understand from this example how to construct and implement similar commands using other operating systems and command types. A command that includes a selectively variable field for example address length etc. that is innocuous to the target device is suitable for use in connection with embodiments of the claimed bridge device access system. Those skilled in the art will appreciate that the commands do not all have to be of the same type nor do they have to be verify or other innocuous commands per se. For example write commands and or read commands can be used in lieu of the verify command embodiment discussed above. However such write commands can pose risks to the storage device in certain settings for example forensics evaluation of the storage device relies on the static nature of data on the storage device subject to examination . Therefore as will be appreciated by those skilled in the art some care and consideration likely should be employed when selecting the type and content of commands used in the unlock sequence.

According to its standard operating process a bridge device receiving a verify command such as the one shown in Table 2 will pass the verify command through the bridge device to the storage device and will pass the storage device s command response back to the host. However the bridge device also monitors commands from the host looking for the unlock sequence. If the bridge does not receive the exact sequence of commands in the unlock sequence the bridge device will remain locked. Once the bridge device enters the unlocked state the next command received will be treated as a potential bridge access command embodiments of which are discussed below. The bridge returns to the locked state immediately after processing the post unlock sequence command.

An exemplary process is shown in where the process starts with the bridge device locked and a valid sequence command counter N set to 0. Some or all of the process illustrated in and any methods and processes discussed herein can be embodied in a computer readable medium or other computer program product such as mass storage device of that includes instructions which when executed on a computer a host one or more processors or on one or more other devices operate to perform one or more of the methods and or processes disclosed herein.

At the host sends an innocuous command that includes a selectively variable field or value. This command is passed through to the target device at and any command response from the target device to the host is likewise communicated. The bridge device inquires at whether the command and field combination is the next step of a programmed unlock sequence. If not the bridge device remains locked and the command counter N is reset. If the command field combination is the next step in a valid unlock sequence then the counter N is incremented at and the bridge device determines at whether the sufficient number of valid unlock sequence commands have been received. If not then the process continues when the next command is sent by the host at . If the complete unlock sequence has been sent that is N reaches its limit K which in Table 1 above is 20 verify commands providing the correct sequence of start address values then the bridge device is unlocked at . Any valid bridge access command that follows is processed and or executed at and the bridge device immediately locked thereafter at . The process is again reset with the counter N being set again to 0 at .

When the bridge has been unlocked if the next command is one of any number of valid bridge access commands the bridge device will respond to the host with a prescribed message for example providing bridge identification or other information or confirming performance of another function such as a diagnostic of the bridge device or target device. Examples of these bridge access commands are provided below.

In one example the bridge access command can be a one sector read of a prescribed address for example 

For an operating system using a SCSI abstraction layer to manage block devices an appropriate read command can be constructed by formatting a SCSI READ 10 command descriptor block as shown in Table 3 of . Such a bridge access command can be used to retrieve identifying information and operational state from a forensic bridge such as those manufactured and sold by Tableau LLC of Waukesha Wis. An exemplary data exchange format is shown in Table 4 of and Table 5 of .

The bridge query response begins with a common header which may be followed by zero or more optional pages. Information that can be returned by the bridge device within the common header can include one or more of the exemplary data types 

In another example when the bridge has been placed in the unlocked state if the next command is a one sector verify command for example 

From the host software perspective a successful DEVICE CONFIGURATION RESTORE operation is indistinguishable from a series of successful verify commands sent directly to a block storage device. The host software can resolve this ambiguity by first issuing a Bridge Query and examining the response to verify that a suitable forensic bridge responds.

As will be appreciated by those skilled in the art other bridge access commands can be constructed using the bridge device access system described and claimed herein. The bridge access commands can be used to obtain information control the bridge device and or target device perform configuration operations perform diagnostic operations etc.

Exemplary CPU also is coupled to an interface that includes one or more input output devices such as such as video monitors track balls mice keyboards microphones touch sensitive displays transducer card readers magnetic or paper tape readers tablets styluses voice or handwriting recognizers or other well known input devices such as of course other computers. Moreover CPU optionally may be coupled to a computer or telecommunications network using a network connection as shown generally at . With such a network connection it is contemplated that the CPU might receive information from the network or might output information to the network in the course of performing described method steps for example where a network base station is in use. Finally CPU when it is part of a host computer or the like may be coupled to a bridge device according to one or more embodiments of the present invention and is used to access one or more target devices . The above described devices and materials will be familiar to those of skill in the computer hardware and software arts. The hardware elements described above may define multiple software modules for performing the operations of this invention. For example instructions for running a data encryption cracking program password breaking program etc. may be stored on mass storage device and executed on CPU in conjunction with primary memory .

The many features and advantages of the present invention are apparent from the written description and thus the appended claims are intended to cover all such features and advantages of the invention. Further since numerous modifications and changes will readily occur to those skilled in the art the present invention is not limited to the exact construction and operation as illustrated and described. Therefore the described embodiments should be taken as illustrative and not restrictive and the invention should not be limited to the details given herein but should be defined by the following claims and their full scope of equivalents whether foreseeable or unforeseeable now or in the future.

