---

title: Flexible, event-driven JavaScript server architecture
abstract: A script server architecture is disclosed herein. The script server architecture includes a core comprising means for creating a DOM node in a HTML document, a framework written in JavaScript, the framework comprising a plurality of registered event handlers for performing the business logic of the script server architecture and means for modifying the DOM of a HTML document, and means for bridging the core and the framework.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08954989&OS=08954989&RS=08954989
owner: Appcelerator, Inc.
number: 08954989
owner_city: Mountain View
owner_country: US
publication_date: 20081118
---
This Application claims priority to U.S. Provisional Patent Application No. 60 989 109 filed on Nov. 19 2008 which is hereby incorporated by reference in its entirety.

The present invention is related to development of Web sites and applications. More specifically the present invention relates to facilitated communications between a client side and a server side.

Prior to Rich Internet Applications traditional Web applications involved a client server architecture with all of the processing on the server side and the client side used to display the HTML web pages served by the server. Each time a user desired to view a new Web page a HTTP request was sent to the server and the requested Web page was served to the Web browser on the client side. Such a traditional system is shown in with a Web server on a server side receiving requests over the Internet from a Web browser on a client side.

Rich Internet Applications such as Ajax greatly improved on the traditional client server architecture by allowing the client machine to dynamically render and partially refresh web pages based on an initial set of instructions from the server user input and small amounts of subsequent data dynamically requested from the server. As shown in the client machine processes Ajax instructions to render a Web page for the user.

Early Web applications allowed a user s browser to send a request to a server. The server processed the request and responded to the browser with a Web page. When the user wanted to view a new page another request was sent to the server and the server responded to the browser with a new Web page. Such a process resulted in a waste of bandwidth since much of the Web contents in the first Web page were also contained in the second web page. The need to resend the same information led to a much slower user interface of a Web application than that of a native application.

An emerging technology called Ajax Asynchronous and JavaScript XML was developed for refreshing part of a page instead of refreshing the whole page on every interaction between the user and application. In an Ajax application when a user submits a form in a page a script program usually a JavaScript program resident on the Web browser receives the user s request and sends a XML Extended Markup Language HTTP Hyper Text Transfer Protocol request to the Web server in background so as to retrieve only the needed Web contents instead of the whole page and perform corresponding processing to partly refresh the page when receiving a response from the Web server. In this way the application response time is shortened because the amount of data exchanged between the Web browser and the Web server is greatly reduced. And the processing time of the Web server is saved because much of the processing is performed at the client side.

Ajax is the use of dynamic HTML JavaScript and CSS to create dynamic and usually interactive Web sites and applications. A more detailed explanation of Ajax is set forth in Edmond Woychowsky Prentice Hall 2007 which is hereby incorporated by reference in its entirety.

Applets or Java Applets are mini executable programs named with the .class suffix and are placed on a Web page and provide interactive and multimedia uses.

Application Programming Interface API is a collection of computer software code usually a set of class definitions that can perform a set of related complex tasks but has a limited set of controls that may be manipulated by other software code entities. The set of controls is deliberately limited for the sake of clarity and ease of use so that programmers do not have to work with the detail contained within the given API itself.

An Attribute provides additional information about an element object or file. In a Document Object Model an attribute or attribute node is contained within an element node.

Behavioral layer is the top layer and is the scripting and programming that adds interactivity and dynamic effects to a site.

Binding in a general sense is the linking of a library to an application program usually to prevent repetition of frequently utilized code.

Compiler is a computer program that translates a series of instructions written in one computer language into a resulting output in a different computer language.

Document Object Model DOM Element is an object contained in a Document Object Model DOM . The term DOM is generally used to refer to the particular DOM held in the memory region being used by the Web browser. Such a DOM controls the Graphical Respondent Interface GRI or Graphical User Interface GUI . The DOM is generated according to the information that the Web browser reads from the HTML file and or from direct JavaScript software instructions. Generally there exists a unique DOM element for every unique HTML element. DOM elements are sometimes referred to as HTML DOM elements because the DOM element exists only because HTML code that was read by the Web browser listed some HTML element that had not previously existed and thereby caused the Web browser to create that DOM element. Often specific elements of the greater set of HTML DOM elements are identified by specifying an HTML DOM checkbox element or an HTML DOM text input element. A more detailed explanation of the document object model is set forth in Jeremy Keith friendsof 2005 which is hereby incorporated by reference in its entirety.

HyperText Markup Language HTML is a method of mixing text and other content with layout and appearance commands in a text file so that a browser can generate a displayed image from the file.

Hypertext Transfer Protocol HTTP is a set of conventions for controlling the transfer of information via the Internet from a Web server computer to a client computer and also from a client computer to a Web server.

Internet is the worldwide decentralized totality of server computers and data transmission paths which can supply information to a connected and browser equipped client computer and can receive and forward information entered from the client computer.

JavaScript is an object based programming language. JavaScript is an interpreted language not a compiled language. JavaScript is generally designed for writing software routines that operate within a client computer on the Internet. Generally the software routines are downloaded to the client computer at the beginning of the interactive session if they are not already cached on the client computer. JavaScript is discussed in greater detail below.

JSON is JavaScript Object Notation format which is a way of taking data and turning it into valid JavaScript syntax for reconstituting an object at the other end of the transmission protocol.

MySQL is a relational database management system which relies on SQL for processing data in a database.

Parser is a component of a compiler that analyzes a sequence of tokens to determine its grammatical structure with respect to a given formal grammer. Parsing transforms input text into a data structure usually a tree which is suitable for later processing and which captures the implied hierarchy of the input. XML Parsers ensure that an XML document follows the rules of XML markup syntax correctly.

Platform is the combination of a client computer an operating system and a browser which together can support Internet access and in particular the operation of interactive forms.

Presentation layer follows the structural layer and provides instructions on how the document should look on the screen sound when read aloud or be formatted when it is printed.

Rendering engine is software used with a Web browser that takes Web content HTML XML image files and formatting information CSS XSL and displays the formatted content on a screen.

Serialization places an object in a binary form for transmission across a network such as the Internet and deserialization involves extracting a data structure from a series of bytes.

SQL Structured Query Language is a computer language designed for data retrieval and data management in a database.

Structural layer of a Web page is the marked up document and foundation on which other layers may be applied.

User is a client computer generally operated by a human being but in some system contexts running an automated process not under full time human control.

Web Browser is a complex software program resident in a client computer that is capable of loading and displaying text and images and exhibiting behaviors as encoded in HTML HyperText Markup Language from the Internet and also from the client computer s memory. Major browsers include MICROSOFT INTERNET EXPLORER NETSCAPE APPLE SAFARI MOZILLA FIREFOX and OPERA.

Web Server is a computer able to simultaneously manage many Internet information exchange processes at the same time. Normally server computers are more powerful than client computers and are administratively and or geographically centralized. An interactive form information collection process generally is controlled from a server computer to which the sponsor of the process has access.

World Wide Web Consortium W3C is an unofficial standards body which creates and oversees the development of web technologies and the application of those technologies.

XHTML Extensible Hypertext Markup Language is a language for describing the content of hypertext documents intended to be viewed or read in a browser.

XML Extensible Markup Language is a W3C standard for text document markup and it is not a language but a set of rules for creating other markup languages.

There are three types of JavaScript 1 Client side JavaScript 2 Server side JavaScript and 3 Core JavaScript. Client side JavaScript is generally an extended version of JavaScript that enables the enhancement and manipulation of web pages and client browsers. Server side JavaScript is an extended version of JavaScript that enables back end access to databases file systems and servers. Core JavaScript is the base JavaScript.

Core JavaScript includes the following objects array date math number and string. Client side JavaScript and Server side JavaScript have additional objects and functions that are specific to client side or server side functionality. Generally any JavaScript libraries .js files created in core JavaScript can be used on both the client and the server without changes. Client side JavaScript is composed of a Core JavaScript and additional objects such as document form frame and window. The objects in Client side JavaScript enable manipulation of HTML documents checking form fields submitting forms creating dynamic pages and the browser directing the browser to load other HTML pages display messages . Server side JavaScript is composed of Core JavaScript and additional objects and functions for accessing databases and file systems and sending email. Server side JavaScript enables Web developers to efficiently create database driven web applications. Server side JavaScript is generally used to create and customize server based applications by scripting the interaction between objects. Client side JavaScript may be served by any server but only displayed by JavaScript enabled browsers. Server side JavaScript must be served by a JavaScript enabled server but can be displayed by any browser.

United States Patent Publication Number 20010037359 describes a system and method for a server side browser including markup language graphical user interface dynamic markup language rewriter engine and profile engine. The system includes a user computer and a destination server computer separated by a server computer hosting a server side browser SSB . The SSB includes a markup language graphical user interface MLGUI a dynamic markup language rewriter engine DMLRE and a profiling engine PE . The SSB may be configured as an intermediary infrastructure residing on the Internet providing customized information gathering for a user. The components of the SSB allow for controlling brokering and distributing information more perfectly by controlling both browser functionality on the client side and server functionality on the destination site side within a single point and without the necessity of incremental consents or integration of either side.

Irassar et al. United States Patent Publication Number 20040250262 for Business To Business Event Communications discloses an event handling mechanism that allows communication of event information among providers and subscribers across a network using an event handling server.

Jennings et al. United States Patent Publication Number 20070073739 for a Data Driven And Plug In Defined Event Engine discloses an event engine that enables application developers to define finite state machines for implementation via a data driven approach using executable plug ins.

Lindhorst et al. U.S. Pat. No. 6 981 215 for a System For Converting Event Driven Code Into Serially Executed Code discloses an event driven server model that uses active server pages that appear to other files as objects with associated method and properties for developing Web pages.

However current technologies that operate server side JavaScript fail to offer complete interactions which are the hallmark of rich web sites and applications. Modern browsers are sophisticated software they understand multiple versions of HTML JavaScript and CSS they are extremely forgiving of HTML variations errors omissions etc. they are fast they parse and execute as they process the incoming stream and they allow complex dynamic manipulation of the HTML DOM by JavaScript. To do all this on the server and to keep doing it well as web technologies and standards evolve it s best to use a real browser s engine. But browsers are not immediately suitable for use as servers they do too much client oriented work that makes little sense for a server that does not interact directly with users e.g. rendering to a graphical display or handling user events and they don t do enough server oriented tasks such as accessing databases and files or selectively executing just the code that should run on the server rather than on the client.

The first thing that must be done is to extract just the engine of the browser and do so in such a way that the important aspects are preserved it can evolve as the browser evolves it can still carry out the basic functionalities needed on the server etc. Then the engine must be extended to provide the additional server functionalities. But because the engine is usually a highly optimized program written in a native platform specific language such as C C it is a lot of work to extend it in the same language and once extended in a certain way it is a lot of work to change it.

The Present Invention overcomes the obstacles of the prior art. The JavaScript server architecture of the present invention allows the best of both worlds keeping the advantages of the browser engine the core and coupling it to a flexible extensible accessible server framework. The framework is therefore preferably written in a flexible extensible accessible language for the present invention JavaScript is the natural choice though other languages such as Ruby or Python could be used without departing from the scope of the present invention. To bridge the core and the framework the server architecture of the present invention uses events at certain moments during the core s processing of the HTML document and any included documents it notifies the framework by sending it specific events. The events contain or make accessible data that is relevant for that event and for that particular stage in the processing. The framework acts on those events by having registered event handlers which carry out much of the business logic of present invention. For example when the core encounters a tag in the HTML document it creates a DOM node corresponding to that tag and notifies the framework that a NewHTMLElement event has occurred the framework looks at the associated data determines that the tag was a script element and depending on the attributes of the script element specifically its runat attribute notifies the core whether or not to actually process the JavaScript inside that script tag. The framework can also modify the DOM hand control to the developer s code or do various things at that point in the processing. Because the framework itself is written in JavaScript web developers can feel comfortable extending or modifying the framework to suit their own needs.

In a preferred embodiment the server architecture of the present invention is a combination of C C Core code and a server side JavaScript Framework. The server core provides the JavaScript parser and runtime HTML parser and DOM engine and an event architecture that calls the server framework as the document is being processed on the server. The server framework provides the server logic for example deciding which code to run on the server and which on the client creating proxies on the client for callable server side functions serializing and deserializing data and so on.

Because the server framework is preferably written in JavaScript the server framework is easily extensible by developers. The present invention is preferably an extensible platform for end to end Ajax development and for building rich presentation layers on top of existing back end platforms.

On the server side a developer s JavaScript environment is enhanced by the server framework which provides access to the database for example MySQL file system network the HTTP Request and Response data and the external server side platforms such as Java PHP and Ruby.

One aspect of the present invention is a server architecture including a core a framework and means for bridging the core and the framework. The core includes means for reading an HTML means for reading a CSS means for reading a JavaScript and means for creating a DOM node in a HTML document. The framework is written in JavaScript and includes a plurality of registered event handlers for performing the logic of the server architecture and means for modifying the DOM of a HTML document.

Another aspect of the present invention is a web environment including a Web server side and a Web client side. The Web server side includes a HTTP request server a handler in communication with the HTTP request server and a server architecture in communication with the handler. The server architecture includes a core a framework and means for bridging the core and framework. The core includes means for reading an HTML means for reading a CSS means for reading a JavaScript and means for creating a DOM node in a HTML document. The framework is written in JavaScript the framework comprising a plurality of registered event handlers for performing the logic of the server architecture and means for modifying the DOM of a HTML document. The web client side includes a graphical user interface a browser engine for transmitting a HTTP request to the HTTP request server a JavaScript code and a rendering engine for rendering the JavaScript code for display on the graphical user interface.

Another aspect of the present invention is a computer program product for a server. The computer program includes a core a frame work and means for bridging the core and framework. The core includes means for creating a DOM node in a HTML document. The framework is written in JavaScript and includes a plurality of registered event handlers for performing the business logic of the JavaScript server architecture and means for modifying the DOM of a HTML document.

Yet another aspect of the present invention is a web environment which includes a web server side and a web client side. The web server side includes a HTTP request server a handler in communication with the HTTP request server and a server architecture in communication with the handler. The server architecture includes a core having a plurality of web browser capabilities a framework written in JavaScript and means for bridging the core and framework. The web client side includes a graphical user interface a browser engine for transmitting a HTTP request to the HTTP request server a JavaScript code and a rendering engine for rendering the JavaScript code for display on the graphical user interface.

Yet another aspect of the present invention is a system for web development which includes a server architecture. The server architecture includes a core a framework and means for bridging the core and the framework. The core includes means for creating a DOM node in a HTML document. The framework is written in JavaScript and includes a plurality of registered event handlers for performing the business logic of the JavaScript server architecture and means for modifying the DOM of a HTML document.

Yet another aspect of the present invention is a method for processing a HTML page on a server. The method begins with encountering a HTML document by a core of a JavaScript architecture. Then creating a DOM node corresponding to the HTML document. Then notifying a framework of the JavaScript architecture that an event has occurred. Then inspecting the HTML document by the framework. Then directing the core pertaining to processing the HTML document.

Yet another aspect of the present invention is a method for processing a HTML page on a server. The method includes encountering a tag in a HTML document by a core of a JavaScript architecture. Then creating a DOM node corresponding to the tag of the HTML document. Then notifying a framework of the JavaScript architecture that a new HTML element event has occurred. Then inspecting an associated data of the new HTML element to determine if the tag was a script element. Finally directing the core pertaining to processing the script element.

To understand the differences between the server and browser sides it s important to keep in mind the page lifecycle. The page request from the browser is received by the Web server which fetches the appropriate HTML document either from the file system or perhaps from another handler such as PHP or Ruby or Java . The Web server Apache server then feeds the document to the script server of the present invention which begins to parse the HTML document and builds up the DOM tree. When the script server encounters tags the script server not only adds them to the DOM but may also execute them if they have a runat attribute that indicates they should run on the server. During the parsing and execution external content may also be fetched and loaded into the document via elements and Jaxer.load . . . for JavaScript code or via or for HTML content or via XMLHttpRequests for any content. After the DOM is fully loaded the onserverload event is fired. This is the server side equivalent of the onload event on the browser. The onserverload event is named differently so that a developer s code can react separately to onserverload and onload events. The script server post processes the DOM to carry out its built in logic and prepare the DOM for sending to the browser removing blocks meant only for the server replacing functions to be proxied with proxies saving as needed functions that should be available on callbacks . . . etc. Finally the DOM is serialized back to HTML and that HTML is streamed back via the Web server to the browser.

The resulting HTML page is sent back to the browser as the response to the browser s request. The browser begins to parse the HTML building up the DOM. When the browser encounters tags the browser not only adds them to the DOM but also executes them. External JavaScript code or any other content may also be loaded. The onload event fires. Of course the page is progressively rendered throughout much of this flow and also the user can interact with it.

Callbacks from the browser to server side functions are handled via XMLHttpRequests. When the script server receives such a request it creates a new empty document unless configured to use a different static document . The script server retrieves the saved functions that needed to be made available during callbacks to this page. If a function called oncallback is found it is executed. This is usually used to create the environment needed during a callback if the saved functions are not enough. The callback function itself is executed. Finally the result of that execution is packaged and returned as the response to the XMLHttpRequest.

While a DOM is available during callback processing it is not serialized as HTML and returned as the response as it was during the regular non callback page processing flow. The DOM on script server and the DOM on the browser typically are not synchronized. Both are created from the same HTML source but they are often subject to processing by different JavaScript code and both come to life at different points in the page lifecycle the DOM on the script server exists temporarily when the page is processed by the script server and is eliminated after it s been serialized into the HTML sent to the browser the DOM in the browser is built on the browser from that HTML and is the DOM that s rendered to the user and with which the end user interacts.

While script server and the browser may well share some code e.g. when using runat both usually the JavaScript code designated to run on script server and interacting with the script server DOM is different than the code designated to run on the client. The latter exists e.g. as a tag in the script server DOM but is not executed in script server.

Remember that the only things sent to the browser at the end of page processing is what s actually in the DOM and what the script server of the present invention has added such as proxies clientData and injected scripts. For example if a developer added an expando property which is an in memory change to the DOM that will not get serialized it will not appear on the client side.

On the browser the div is present with an id of myDiv but without a userId property. For this same reason setting event handlers programatically rather than in the DOM will not translate to DOM changes and hence will not propagate to the browser. For example with a button 

A developer could add an onclick . . . attribute to the tag but this does not assist with adding the event handler programatically. The script server of the present invention provides Jaxer.setEvent domElement eventName handler function that does the right thing in the script server as well as on the browser. var btn document.getElementById myButton function sayHi alert hi sayHi.runat client Jaxer.setEvent btn onclick sayHi 

The function used as the event handler should be made available to the browser. When setEvent is executed on the server as above it results in the following change to the myButton element This is sent to the browser since it is a DOM change. If the function passed into setEvent has no name its body source is used as the value of the attribute var btn document.getEleemntById myButton Jaxer.setEvent btn onclick function alert hi 

Which is useful for short functions but is easier to pass in the code to execute as a string var btn document.getEleemntById myButton Jaxer.setEvent btn onclick alert hi 

Having briefly described the present invention the above and further objects features and advantages thereof will be recognized by those skilled in the pertinent art from the following detailed description of the invention when taken in conjunction with the accompanying drawings.

As shown in a system of the invention generally includes a server side a client side and a network or preferably the Internet . The server side includes a web server a handler and a JavaScript server preferably having a server core and a server framework . The client side includes a Web browser has a client framework a client side JavaScript code and a rendering engine . The server framework accesses filesystems and databases as well as the Internet . A more detailed description of the abilities of the running JavaScript on the server side and client side is disclosed in U.S. patent application Ser. No. 12 270 817 filed Nov. 13 2008 for A Web Server Based On The Same Paradigms As Web Clients which is hereby incorporated by reference in its entirety.

In the system is shown during a callback operation. The callback begins at the client side JavaScript code with a callback request sent to the client framework . A HTTP GET request is transmitted over the Internet to the server side and received at the Web server . The HTTP GET request is sent to the server core which sends the HTTP GET request as a callback to the server framework . The server framework receives the callback deserializes performs the get functions invokes serializes and sends the response to the callback to the server core . The server core sends the response to the Web server which sends the response over the Internet to client framework on the Web browser .

In the system is shown during a normal process. The process begins with a HTTP GET request for a Web page sent over the Internet from the Web browser on the client side to the server side . The HTTP Request is sent to the handler server . The HTML Web page is then sent to the script server architecture . The server core of the script server architecture parses the HTML Web page to create a HTML DOM of the HTML Web page. The server core also parses and interprets the JavaScript of the HTML Web page. The server framework accesses databases and filesystems to respond to the Requests for the HTML Web page. The server framework also injects proxies to modify the HTML Web page. The server core serializes the DOM back to the HTML Web page and the web server transmits the HTML Web page to the client side where the Web browser renders the HTML Web page for display for a user. As shown in a Web server e.g. apache server receives a request from the client side. The request is sent to the handler server PHP Ruby or Java language . The handler server feeds the HTML document to script server core which begins to parse the HTML document thereby building the DOM tree for the HTML document on the server side. Events and callbacks are sent to the script server framework . The script server adds tags to the DOM and executes them if the has a runat attribute that indicates the should be run on the server. During the parsing and execution external content from filesystems databases and the like are fetched and loaded into the HTML document. After the DOM is loaded the onserverload event is fired from the script server framework . The script server architecture post processes the DOM to perform its built in logic and prepare the DOM for transmission to the client side. This post process includes removing block meant only for the server replacing function to be proxied with proxies saving functions that should be available as callbacks and the like. The DOM is serialized back to HTML and the HTML is streamed back via the web server to the browser.

As shown in the present invention allows the server to execute the JavaScript functions that are set to runat server or runat both . These functions might call databases file systems communicate across network sockets or get session data. And since the server side engine has a HTML DOM just like the browser the HTML page can be manipulated through standard DOM APIs and your favorite Ajax libraries. The present invention also has session objects that can be used to persist data for users during a session or transaction. Any functions set to runat server are stripped from what gets sent to the browser . Specifically at 1 the page executes on the server and a resulting HTML page is sent to the browser . A more detailed description of the runat function is set forth in Colton et al. U.S. patent application Ser. No. 12 270 868 filed on Nov. 14 2008 for a System And Method For Tagging Code To Determine Where The Code Runs which is hereby incorporated by reference in its entirety.

After server sends the resulting HTML page to the browser at 2 the browser interprets the HTML page and executes the JavaScript within the HTML page. If JavaScript functions tagged to runat server proxy are included then the present invention automatically strips out the bodies of those functions and replaces the bodies with a new functions by the same name that know how to invoke the original function on the server using Ajax calls and return the result either synchronously or asynchronously. Ajax communications do not need to be written using the present invention. Any functions not tagged with a runat attribute or set to runat client or runat both are processed by the browser .

Any functions set to runat server proxy can now be called from the browser . The function is called as if it were running on the browser and the present invention automatically via XHR communications with the server marshals the parameters to the server where the function executes calling databases getting info from the session data etc. . . . and returns the result to the browser . The server proxy functions can be invoked either synchronously or asynchronously. At 3 the browser calls the server asynchronously for new information.

The server computer program of the present invention is pre configured for preferable use as a plug in to the APACHE 2.x web server. To provide standards compliant JavaScript and DOM capabilities server side the server computer program is built on the MOZILLA engine which is the same engine used in the popular FIREFOX browser. The server computer program of the present invention is layered into APACHE as an input and output filter for use to modify dynamic pages created by other languages such as PHP or Ruby.

The server computer program of the present invention is preferably a combination of C C Core code and a server side JavaScript Framework. The server core provides the JavaScript parser and runtime HTML parser and DOM engine and an event architecture that calls the server framework as the document is being processed on the server side . The server framework provides the logic for example deciding which code to run on the server side and which on the client side creating proxies on the client side for callable server side functions serializing and deserializing data and other related activities.

On the server side a developer s JavaScript environment is enhanced by the server framework which provides access to the database e.g. MySQL file system network the HTTP Request and Response data and the external server side platforms such as Java PHP and Ruby.

An example of code written by a developer and prior to processing by the present invention is set forth below.

Processing of the code by the present invention results in the code being formatted as set forth below 

As shown in a server computer contains server architecture . The server architecture includes the server core and the server framework . The server core includes a JavaScript parser . The server computer is preferably a conventional server computer available from IBM HP APPLE DELL and SUN.

As shown in a user computer contains a Web browser . The Web browser preferably includes the client framework client side JavaScript code and the rendering engine . The user computer is preferably a conventional user computer such as a PC available from HP DELL and GATEWAY or a MAC available from APPLE. The Web browser is preferably MICROSOFT INTERNET EXPLORER NETSCAPE APPLE SAFARI MOZILLA FIREFOX or OPERA.

A general method of the present invention is shown in . At block an HTTP GET request for a HTML document is received on the server side . At block the server core processes the HTML document and sends a plurality of events to the server framework . At block the server framework acts on the plurality of events from the server core using a plurality of event handlers. At block a response to the original HTTP GET request is sent to the client side .

A more specific method of the present invention is shown in . At block an HTTP GET request for a HTML document is received on the server side . At block the server core encounters a tag in the HTML document during processing of the HTML document. At block the server core creates a DOM node corresponding to the tag. At block the server core notifies the server framework that a new HTML element event has occurred for the HTML document. At block the server framework inspects the data associated with the event to determine if the tag was a script element. At block the server framework directs the server core pertaining to processing the script element. At block a response to the original HTTP GET request is sent to the client side .

An example of how to create a simple one page Ajax style application to keep track of a list of tasks is set forth below. A user creates new tasks checks off and deletes existing tasks and all the data persists and is preferably accessible from any browser. The functionality in this example is extremely simple to focus on the basics e.g. no logging in step . Those skilled in the pertinent art can use one of the many popular Ajax libraries such as jQuery ext Dojo or YUI all of which are hereby incorporated by reference in their entireties in building the applications this simple tutorial assumes no specific Ajax library use and only

To begin one creates a client side web page such as set forth below which contains several exemplary tasks.

In order to add formatting to the client page a style block is added at the bottom of the section as shown below.

The web page does not yet have functionality. In order to provide functionality the sample data is deleted and event handlers and JavaScript are added to the HTML page.

To add client side script to the HTML page a helper function is first added to ease DOM access. The script block shown in below is added to the element.

When a user types a description into the top textbox and clicks add a new task line is created at the top of the list.

Next an onclick event handler is added to a button to grab the value of the textbox and call a JavaScript function that adds the task as shown below.

Next as shown below the rows of sample data are removed from the HTML page. The new function addTask description id inserts the new task into the DOM. For future use the id is specified or auto generated. This is added to the above block.

The addTask above uses pure DOM manipulation. Alternatively one could create the HTML as a string or copy a hidden HTML block acting as a template and convert it into the new HTML fragment. Alternatively one would use an Ajax library to achieve the same result quickly.

The application now has some basic functionality. Now the last bit of functionality is added when a task is checked off as done which makes it disappear from the list. Another function is added to the script block completeTask taskId to delete the task and its contents from the DOM and add a line to addTask that adds a call to completeTask from the checkbox s onclick handler as shown below.

Now it is possible to add tasks complete the tasks delete the tasks and modify descriptions of the tasks. However one cannot save or retrieve data yet. To add the onclick event handler programmatically to the checkbox the Aptana.setEvent domElement eventName handler function is used. There are multiple ways to add event handlers to a DOM element programmatically. An addTask is necessary to work both server side and client side. On the server side the event handler is added to the DOM changing the HTML that s then sent to the client. If one would have used checkbox.onclick completeTask newId that would have added the event handler without changing the DOM so the handler would not have made it to the client. The Aptana.setEvent function does the right thing on both server and client modifying the DOM on the former and directly setting the onclick property of the checkbox on the latter. With the present invention only DOM modifications make it from the server side to the client side.

From the foregoing it is believed that those skilled in the pertinent art will recognize the meritorious advancement of this invention and will readily understand that while the present invention has been described in association with a preferred embodiment thereof and other embodiments illustrated in the accompanying drawings numerous changes modification and substitutions of equivalents may be made therein without departing from the spirit and scope of this invention which is intended to be unlimited by the foregoing except as may appear in the following appended claim. Therefore the embodiments of the invention in which an exclusive property or privilege is claimed are defined in the following appended claims.

