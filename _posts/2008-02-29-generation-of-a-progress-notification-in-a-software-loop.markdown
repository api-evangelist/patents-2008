---

title: Generation of a progress notification in a software loop
abstract: Embodiments relate to systems and methods for generating a progress indicator in a programming loop. In embodiments, a programming language or application programming interface (API) can contain a loop operator that registers the occurrence of each iteration in a loop, and passes that information to a user interface to display an indicator of loop progress to a programmer or user. The progress notification can be a thermometer-style graph, a progress bar, or other graphical or other display representing the progress of the programming or process loop. In embodiments, the progress indicator and related information can be dumped to a log file, to create a record of loop progress to review and perform debugging operations, in the event of a crash during execution of the loop.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09285946&OS=09285946&RS=09285946
owner: Red Hat, Inc.
number: 09285946
owner_city: Raleigh
owner_country: US
publication_date: 20080229
---
The present teachings relates to systems and methods for generating a progress notification for a repetitive software process and more particularly to platforms and techniques for automatically generating a progress bar or other indicator that displays the real time progress in a software loop.

In the computer programming arts it is common to incorporate a processing loop that repeats a computation or logical operation until some criterion is satisfied. For example a loop can be set up to run a virus checker against a set of received email messages one after the other until the end of that inbox list is reached.

While that loop is being executed however there is no application programming interface or other programming construct built into available platforms to view the progress of the processing in the loop other than manual debugging. Thus a programmer or user invoking a loop to virus check a set of emails as noted will have to wait until the received email list is exhausted before an indication that the loop is presented or will have to prepare an additional portion of separate code to attempt to monitor loop progress. In the interval before the loop is complete the programmer or user may not be able to determine how far into the received email list the virus check has proceeded without preparing additional code simply for that purpose.

It may be desirable to provide methods and systems that can automatically generate a progress notification in a software loop as part of the programming syntax application programming interface or other platform or programming resource.

Embodiments of the present teachings relate to systems and methods for generating a progress notification in a software loop. More particularly embodiments relate to platforms and techniques including a loop progress decorator that can be inserted into a loop programming structure and that can be used to detect and generate a graphical output representing the progress through the loop. The loop progress decorator can be an operator nested within conventional loop programming statements and automatically register and track an increment counter used in the loop. The loop progress decorator can communicate the loop increment and other status information to a notification manager. The notification manager generates an output indicating the status of the loop execution to the programmer or user.

The notification manager can for example generate a graphical or visual output indicating the percentage or portion of the loop that has been completed. The graphical output can comprise for example an animated bar graph bullet graph thermometer bar or other moving or dynamic graphical indicator which corresponds to the degree of completion of the loop as it executes. A programmer or user therefore can gain information about the progress of a loop or other repetitive software process before that process is completed. The progress notification can be invoked and generated with the insertion of a dedicated programming instruction or function in the loop structure without altering the loop structure or requiring the programmer to prepare significant additional code for such purposes. In embodiments the notification manager can generate additional types of output besides a graphical progress bar such as a printed output indicating the lines or repetitions of a loop as each line or repetition is executed. In embodiments the notification manager can capture and store further information regarding the execution of the client machine as the loop as executed to assist in debugging or other activity. These and other embodiments described herein address the various noted shortcomings in known programming technology and provide enhanced loop code tools and resources.

Reference will now be made in detail to exemplary embodiments of the invention which are illustrated in the accompanying drawings. Where possible the same reference numbers will be used throughout the drawings to refer to the same or like parts.

According to some embodiments client can present a loop progress notification via user interface . Loop progress notification can reflect the progress or degree of completeness of a loop or other repetitive software process executing on client . In embodiments the loop or other repetitive software process can be or include for example a repetitive software process such as the encoding of an audio file for instance in MPEG Motion Pictures Expert Group or other format. In embodiments the loop or other repetitive software process can be incorporated or executed in application such as a media player or recorder application or other applications or software. Loop progress notification can consist of an animated or graphical representation of the progress of a loop or other repetitive or iterative software process executing on client .

Loop progress notification can be or include for example an animated bar graph representing the state of a loop or other repetitive software process of application or other software. The loop progress notification can indicate again for example the progress of the MPEG encoding of an audio file with the length of the progress bar increasing in proportion to the amount of the audio file that has been successfully encoded by application as that processing takes place. In embodiments loop progress notification can generate a completion message indicating that the loop or process is fully complete for example by changing color or presenting a text message when the encoding of an MPEG audio file is complete and the bar graph reaches maximum length. Other graphical messages or states can be reflected in loop progress notification . Other types of encoding as well as other software loops or processes can be reflected in loop progress notification . According to embodiments in one regard loop progress notification can be generated with the insertion of extended programming constructs into existing loop programming structures without a need for adding significant special purpose code as described herein.

More particularly in embodiments as shown in application or other software executing on client can incorporate loop code . Loop code can comprise high level source code such as code script or instructions coded in C C Java JavaScript Perl ColdFusion or other languages or platforms. Loop code can comprise code that is compiled or assembled into lower level or machine instructions. Loop code can include a loop construct such as an instruction in the general syntax of until  condition repeat loop or for i 1 to n perform action or other expressions or formats for performing an iterative software process.

Specifically according to embodiments loop code can incorporate a loop progress decorator . Loop progress decorator can comprise an encoded logical operator command or instruction that can be directly inserted in an in line fashion into loop code at the code level. The insertion of loop progress decorator automatically invokes functions and or services related to the tracking of the loop being executed in loop code . In embodiments as shown loop progress decorator can include an operator or instruction of the form notification.iterator inner loop counter or other encoded syntax or expression available to a programmer or user without a need to manually introduce other code definitions or customizations. In embodiments loop progress decorator can be encoded in one or more languages or platforms such as Java JavaScript C or other languages code or platforms. The following for example is an illustrative Python code implementation that can be used to establish an abstract base class for a loop progress decorator according to embodiments 

Loop progress decorator can in a further regard pass loop status information related to loop code in which it is inserted to a notification manager . Loop status information can include the value of an iteration counter of loop code indicating how many repetitions or passes through loop code have been completed and also indicating which iteration loop code is currently executing. Notification manager then generates loop progress notification based on loop status information . Notification manager can for example generate a thermometer style progress bar which displays a bar extending 50 along the axis of a progress strip when the iteration counter contained in loop status information reaches iteration 50 out of 100. Other types of loop progress notification can be generated including for instance other types of animated linear representations of the degree or amount of progress through the loop of loop code . In embodiments loop progress notification can comprise a chart trace or other two dimensional representation of the progress of loop code . Other types of notification such as an audible notification of progress can also be used.

The introduction of a loop progress decorator and generation of a loop progress notification permits a programmer or user to automatically generate a view of the in process progress of a loop or other repetitive or iterative process as that process takes place. A programmer or others can thereby conveniently incorporate a loop tracking function with notification to a user invoking that loop without preparing significant additional or special purpose code to permit the real time observation of any loop or other repetitive or iterative software process invoking those resources.

As shown in notification manager can also capture and store a loop execution record and store that record to data store . Loop execution record contains data related to the state and progress of loop code as well as execution states of the processor memory and other hardware or resources of client during the course of execution of loop code . Loop execution record can contain for example the execution time for each iteration of loop code whether an error state has been encountered by the processor or memory of client or other status information for the loop code client application or other hardware or software. Loop execution record can be used for instance to debug loop code or other software in the event of a crash or other anomaly including to determine the identity of a loop repetition at which a crash occurred and or the state of client loop code application or other hardware or software at that time. Loop execution record can further be used to optimize the execution time or other performance characteristics of loop code . Notification manager can in embodiments also or instead output loop execution record and other information to other media or destinations such as to print out loop execution record or upload loop execution record to a remote Web site. It may be noted that in embodiments notification manager can be integrated in operating system while in further embodiments notification manager can be hosted in other software or resources.

In step the loop code can be compiled assembled or otherwise prepared or translated for execution or further processing. In step the execution of compiled loop code can begin. In step an in loop or realtime progress notification is performed for each loop for example according to processing shown in the flow diagram for .

In step the notification manager can generate debugging information from loop execution record as appropriate. Notification manager can for instance generate a log of the state of application processor memory or other software hardware or other resources of client during an iterations of loop code during which a crash or hang is encountered. According to embodiments in one regard such debugging information can be used to detect and analyze errors or anomalies in loop code or other software or code. The state of the loop code or other hardware or software can for example recorded and examined to locate a logical error causing loop code to crash or halt during a specifically identified loop iteration or state. In embodiments loop execution record can be used to indicate other information such as the relative speed or performance of loop code depending on input data memory usage or other factors. In step the loop progress notification can be terminated or deactivated upon completion of processing and logging the activity of loop code . In step processing can repeat return to a prior processing point jump to a further processing point or end as understood by persons skilled in the art.

In step notification manager generates and displays loop progress notification via user interface . Loop progress notification can be or include for example an animated bar graph bullet graph thermometer bar or other visual or graphical representation of the state of loop code and its progress. In embodiments loop progress notification can comprise other types of notification or alerts for example an audible tone that rises or changes as loop code progresses. Other types of notification to the programmer or user of the progress of loop code are possible.

In step the notification manager can capture and or record the status of the loop code and other processing activity of client in loop execution record . Loop execution record can contain the loop iteration number or value of loop code for each successful loop as well as the execution state and or values of application processor memory or other hardware or software of client . Notification manager can store loop execution record to data store or other location. After step progress notification processing for an individual loop of loop code can be completed and processing can be proceed to step where processing can processing can repeat return to a prior processing point jump to a further processing point or end as understood by persons skilled in the art.

The foregoing description is illustrative and variations in configuration and implementation may occur to persons skilled in the art. For example while embodiments have been generally described in which loop code is integrated in or forms a part of an application in embodiments loop code need not be embedded within an application. Loop code can for instance be located in operating system within a utility can be self standing code or be located or compiled within other resources of client . Similarly while the loop progress notification has in embodiments generally been described as reflecting the progress through a set of loop code in embodiments loop progress notification or other notification services can report the progress through repetitive software processes that are not reflected in a do loop type programming syntax. For example loop progress decorator can be embedded in a recursive function call. Other resources described as singular or integrated can in embodiments be plural or distributed and resources described as multiple or distributed can in embodiments be combined. The scope of the invention is accordingly intended to be limited only by the following claims.

