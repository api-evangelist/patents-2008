---

title: Model-based view parts and reusable data source configurations
abstract: A first widget of a first view part associated with a component of a class model and with one or more members of the component, and a second widget of a second view part associated with the component of the class model and with the one or more members of the component are defined. A request for data associated with a first object instantiation of the component to populate the first widget is received, and a configuration is identified based on the first widget, the configuration specifying a data source, a data source interface, input parameters, and a mapping to one or more of the one or more members of the component.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08566781&OS=08566781&RS=08566781
owner: Siemens Aktiengesellschaft
number: 08566781
owner_city: Munich
owner_country: DE
publication_date: 20080417
---
This application claims priority to Provisional Application Ser. No. 60 926 069 filed Apr. 23 2007 and entitled Model Based View Parts with Reusable Data Source Configurations the contents of which are incorporated herein in their entirety and for all purposes.

The embodiments described below relate generally to systems for graphically presenting data using a class based model.

Conventional business software applications may allow end users to develop customized graphical interfaces for viewing business data. An end user may select the data to be viewed and a graphical layout for presenting the selected data. In some systems an end user may also associate role based logic with a graphical interface. As a result the particular data viewed and or the graphical layout may depend upon a role of the viewer.

User developed interfaces include bindings to the specific data to be displayed thereby. These bindings may include data filters ordering clauses grouping data aggregation definitions and other aspects typically associated with structured query language SQL functionality. Although the bindings may be transparent to the user during interface development the bindings limit reuse of the interfaces in other scenarios and or with other data sources.

Some prior systems attempt to promote reusable interfaces by facilitating editing of the above described bindings or other technical information needed to provide a graphical interface. Such systems may provide wizards to step users through configuration sequences along with anticipated guidance and help information. The above approach is limited to simple technical changes and even for simple changes might not provide the desired result.

In order to address the foregoing some embodiments concern a system a method an apparatus a medium storing processor executable process steps and means to define a first widget of a first view part associated with a component of a class model and with one or more members of the component and define a second widget of a second view part associated with the component of the class model and with the one or more members of the component. A request for data associated with a first object instantiation of the component to populate the first widget is received and a configuration is identified based on the first widget the configuration specifying a data source a data source interface input parameters and a mapping to one or more of the one or more members of the component. The requested data is received based on the data source the data source interface the input parameters and the mapping to one or more of the one or more members of the component and the first widget is populated with the received data.

Further a request for second data associated with a second object instantiation of the component to populate the second widget is received the configuration is identified based on the second widget the requested second data is received based on the data source the data source interface the input parameters and the mapping to one or more of the one or more members of the component and the second widget is populated with the second received data.

Some aspects include definition of a third widget of the first view part associated with the component of the class model and with the one or more members of the component reception of a request for third data associated with a third object instantiation of the component to populate the third widget identification of the configuration based on the third widget reception of the requested third data based on the data source the data source interface the input parameters and the mapping to one or more of the one or more members of the component and population of the third widget with the received third data.

In other aspects a third widget of the first view part associated with the component of the class model and with a second one or more members of the component is defined a request for third data associated with a third object instantiation of the component to populate the third widget is received a second configuration is identified based on the third widget. The second configuration specifies a second data source a second data source interface second input parameters and a second mapping to one or more of the second one or more members of the component. The requested third data is received based on the second data source the second data source interface the second input parameters and the second mapping and the third widget is populated with the received third data.

Further to the foregoing aspect a fourth widget of the first view part associated with the component of the class model and with the one or more members of the component may be defined a request for fourth data associated with a fourth object instantiation of the component to populate the fourth widget may be received the configuration based on the fourth widget the requested fourth data may be received based on the data source the data source interface the input parameters and the mapping to one or more of the one or more members of the component and the fourth widget may be populated with the received fourth data.

According to some embodiments a third widget of the first view part associated with the component of the class model and with a second one or more members of the component is defined a request for third data associated with a third object instantiation of the component to populate the third widget is received a second configuration is identified based on the third widget the second configuration specifying the data source a second data source interface second input parameters and a second mapping to one or more of the second one or more members of the component the requested third data is received based on the data source the second data source interface the second input parameters and the second mapping and the third widget is populated with the received third data.

The appended claims are not limited to the disclosed embodiments however as those in the art can readily adapt the teachings herein to create other embodiments and applications.

A view part as used herein is a logical definition of presentation content which is to be displayed to users and may be role based. A view part may therefore lack programming details data binding or network connection details or programming logic. A view part may be a subset of a Web page to appear in a browser window. A view comprises an entire page of information including zero i.e. if the page includes only widgets described below or more view parts. View parts may be reusable within other view parts or views to create pages containing information relevant to a user s business decisions and or role.

View parts and include graphical widgets and respectively. Examples of widgets include but are not limited to pull down menus context menus tables and graphs. Various systems to graphically create view parts including widgets are known but such systems suffer from difficulties such as those described in the present Background.

Configuration file generally provides a connection for populating widgets and with data from back end data source . According to some embodiments configuration file includes several configurations each of which specifies a data source a data source interface input parameters to the data source interface and a mapping. The mapping maps data fields returned by the data source interface to component members to be presented by one or more view parts.

Some embodiments allow two or more view parts to use a single configuration for retrieving data. Both view parts may be associated with a same component of a component model even though the data required by each view part may differ. For example view parts and may each be associated with object class but may present data of different instantiations of class .

Data source may comprise any source of any data that may receive queries and provide data based on the queries. Data source may expose interfaces to facilitate data queries. Data of data source may comprise any type of data in any type of data structure that is or becomes known. In some embodiments data source stores data in the form of objects instantiated based on components of a component model.

According to some embodiments data source comprises a back end data environment employed in an industrial context. Data source may therefore comprise many disparate hardware and software systems some of which are not interoperational with one another. Data source may comprise plant floor production systems enterprise resource planning data systems and any other data systems according to some embodiments. Data arising from data source may be associated with any aspect of industrial operations and may consist of point data and non point data used to characterize contextualize or identify the point data and or the source of the point data.

The illustrated elements of system may comprise any number of hardware and or software elements in communication with one another some of which are located remote from each other. As used herein systems in communication with one another are directly or indirectly capable of communicating over any number of different systems for transferring data including but not limited to a local area network a wide area network a telephone network a cellular network a fiber optic network a satellite network an infrared network a radio frequency network and any other type of network that may be used to transmit information between devices. Moreover communication between systems may proceed over any one or more currently or hereafter known transmission protocols such as Asynchronous Transfer Mode ATM Internet Protocol IP Hypertext Transfer Protocol HTTP and Wireless Application Protocol WAP .

Each of view parts and is associated with model component which may comprise an object class or other data structure. Accordingly each of widgets through and widgets through is associated with one or more members of component . View part includes view part and view part includes view part . Some embodiments therefore provide for nesting of view parts and their associated widgets within other view parts.

Configuration file includes configurations through . Configuration file and each of configurations through is associated with component . Each of configurations through is associated with any subset of the members of component . One of configurations through may be associated with the same members of component as another one or more of configurations through . Moreover one of configurations through may be associated with a different one or more members of component than another one or more of configurations through .

Each of configurations through is associated with a data source an interface of the data source and input parameters of the data source interface. Each configuration is also associated with a mapping between data fields returned by its associated data source interface and members of component . In this regard a widget may be intended to present data of particular component members of a particular instantiation of component stored in a particular data source. Accordingly the widget should be associated with one of configurations through which is associated with the particular data source and particular component members.

Turning to the particular associations illustrated in configuration is associated with back end data source and with each of widgets and of view part . Configuration may therefore be used to populate widgets and with particular component member data of an instantiation of component stored in data source .

Configuration is associated with back end data source view part widget and widget . Accordingly configuration may populate view part widget and widget with particular component member data of an instantiation of component stored in data source . Again the particular component instantiations may differ for each of view part widget and widget .

Although both are associated with back end data source configurations and may be associated with different subsets of the members of component . Configurations and may also or alternatively be associated with different interfaces of data source . Configurations and are both associated with back end data source and may therefore also be associated with different subsets of the members of component and or different interfaces of data source .

Configuration is associated with widget of view part and configuration is associated with view part and widget of view part . Each of configurations and may be used to populate view part and widgets and with particular component member data of an instantiation of component stored in data source . The particular members and or component instantiations may differ depending on which of configurations and is used.

In some embodiments the tag based data may be generated by and received from SCADA HMI DCS plant historians etc. and the non tag based data may be generated by and received from business systems and applications e.g. SAP ERP Oracle Manufacturing Apps general database apps etc . Moreover component model may represent assets and geographies of a plant or manufacturing organization.

Commonly assigned U.S. Pat. No. 6 700 590 describes a system to use a class based object and view model to collect and display data received from multiple heterogeneous sources. This system encapsulates received tag based data and non tag based data as objects which are instantiations of defined components. The use of components and objects may provide reusability consistency inheritance and other benefits known to those familiar with object oriented techniques. Component model may be established and utilized in any manner including but not limited to those specified in aforementioned U.S. Pat. No. 6 700 590 and or U.S. Patent Application Publication No. 2005 0144154 the contents of which are herein incorporated by reference for all purposes. Component model may follow any suitable modeling protocol or format including those mentioned in the foregoing references.

Each component of component model includes at least one member and each component member is associated with a member type. A member of a first component may be a second component in which case the associated member type is the name of the second component. All members that are associated with primitive member types which include anything other than another component are either associated with a tag attribute or not i.e. None .

Component model of is shown in a tree or hierarchical format which facilitates visualization and understanding of the relationships and patterns of inheritance instantiations for the various component definitions of . Component model may therefore be displayed to an administrator or user according to some embodiments. In the illustrated embodiment only components whose members are not associated with tag attributes are displayed in component model .

A component model may represent tag based operations data and non tag based operations data that are generated by an industrial process. The operations data may represent any type of operation including but not limited to batch processes discrete processes and or continuous industrial processes employed in the oil industry e.g. in an oil refinery gas industry and or chemical industry.

Conventional industrial systems often rely to some extent on computer based automation and monitoring. In some examples of automation and monitoring data arising from the operation of a manufacturing plant is acquired analyzed and responded to if necessary. The data may arise from independent sources with each source configured to provide substantially raw or native point data at pre defined intervals in real or near real time. The point data may be presented to an operator in real or near real time and may include such as numerical values produced by gauges and or monitors e.g. speed temperature or pressure .

Examples of systems that may acquire analyze and act on point data include industrial automation systems supervisory control and data acquisition SCADA systems and general data acquisition systems. In such systems point data may be associated with a tag to create a structural data element that is made accessible to other components systems applications and or users. In general point data obtained from selected sources is subject to dynamic change and is monitored and reported through various operations and functions associated with processing the point data. In industrial automation and control systems decision support and reporting capabilities may be provided based on tag associated point data that is monitored over very short timeframes ranging in the sub second to sub minute range.

Many conventional systems provide only limited capabilities to access interpret and or manipulate tag based point data collectively or in connection with non point data. Non point data relates to a broad category of context providing information that is associated with point data and may extend the functionality and meaning of the point data. Non point data may include descriptive and or attribute information characterizing the point data as well as other information such as limits ranges etc. In conventional systems integral and flexible manipulation of tag based point data and non point data is restricted due to the inherent differences between and properties of the two types of data.

Conventional systems also possess a limited ability to integrate and relate tag based point data and non tag based data. Non tag based data may originate from numerous sources and relate to disparate aspects of an enterprise environment. For example non tag based data may comprise data associated with conventional database applications environments and include transactional information production data business data etc. Conventionally attempts to integrate non tag based data with tag based point data may be hindered or prevented completely as a consequence of underlying differences in structure and content between these data types. As a result generating and implementing logical constructions or schema in which both tag based data and non tag based data are integrally used is problematic in conventional systems. Such limitations limit overall flexibility and increase the difficulty of scaling to complex enterprise level environments.

In this regard the various embodiments described herein can be employed in a wide variety of industries and operational facilities. Any industrial process with differing types of operations data may supply data to systems utilizing the invention. For instance facilities involved with natural resource refinement and procurement oil and gas procurement oil and gas refinement chemical synthesis and refinement water treatment power generation power transmission food and beverage processing raw materials processing e.g. pulp lumber metals and minerals agricultural processing and materials processing e.g. steel mills and foundries may be suited to utilize platforms and software built upon concepts described herein. Additionally facilities involved in finished goods manufacturing and production such as product assembly lines may utilize one or more embodiments or systems with such features.

These facilities may have various assets equipment machinery flows etc. that produce operations data which may be continuous or discrete and may involve operations data that is presented in batches. Examples include pumps motors tanks pipelines mills lathes mixers assembly lines and so on. Operations data may include data from machinery assets process historians maintenance systems enterprise resource planning systems and the like. Examples of such data include pressure temperature capacities volumes rates of flow production totals inventories performance indicators and the like.

 Operations data as used herein includes tag based point data non point data and non tag based data. As used herein point data may be characterized as current real time or value data associated with one or more instruments components or portions of a manufacturing industrial commercial or other system. Any of these instruments components or portions may be configured to generate measure and or sample point data of interest. For example a data acquisition system for a particular instrument or machine may continuously or periodically acquire data reflecting a motor s operating speed and or operating temperature as point data from a point data source associated with the motor. In certain instances the point data may be a simple numerical or string value. Point data may further be associated with monitoring control and reporting functions of various instruments components and applications to provide information relating to the operation of a selected system. This information may also be made available for collection and review by various data acquisition and control systems.

Point data is often acquired in a raw or unstructured form wherein the point data reflects a numerical or string value without supporting details description and or attributes. As previously described certain types of point data may be associated with real time or near real time information e.g. current temperature pressure speed voltage current etc. that may be desirably sampled updated or refreshed relatively frequently. The exact frequency of these operations is typically dependent on the characteristics of the point data itself and may be different across the multiple point data sources incorporated into a particular system.

A tag may therefore represent a data structure comprising selected quanta of information associated with a particular point data informational source and may also comprise certain non point data. In conventional systems acquisition of each tag s current value e.g. point data associated information generally requires a unique configuration for each tag and possibly for each tag s attributes e.g. non point data . Considering that it is not uncommon for complex industrial automation applications to contain upwards of 100 000 tags it will be appreciated that the individualized configuration and management of tags in the aforementioned manner can be very time consuming inefficient and error prone. Furthermore conventional mechanisms for control monitoring or archiving of tag based information tend to become even less useful when attempting to aggregate such information across multiple systems such as in the context of other plant production systems and applications.

Non point data may take many forms including but not limited to attribute information parameters limits and other descriptive information. Certain non point data may be associated with the point data to provide context thereto. As used herein the terms point data and non point data encompass various categories of information that are not necessarily constrained to the examples described herein.

Other types of non point data may include information such as maintenance work orders relational data or API Application Programming Interface structure data from maintenance systems equipment documentation unstructured data usually contained within operating system files and documents and information such as URL Uniform Resource Locator links to supplier web sites. These types of non point data may be associated with non tag based information contained for example within Oracle or SAP databases environments. Non point data therefore represents a broad class of information that may be associated with point data providing a contextual and informational basis.

Operational data sources comprise various data sources including but not limited to plant floor production systems enterprise resource planning data systems and other data systems. Operational data sources may support one or more proprietary interfaces for accessing the data stored therein. An example of such an interface according to some embodiments is an SAP BAPI interface. Operational data sources may also provide one or more non proprietary mechanism for accessing stored data. The stored data may represent any type of operation including but not limited to continuous industrial processes employed in the oil gas and or chemical industries. Operational data sources may include one or more of back end data sources and described above according to some embodiments.

Application environment may store and manage a component model such as component model . Application environment may transmit queries for data to operational data sources . In response operational data sources acquire and transmit the data to application environment . An example of this operation according to some embodiments will be described below with respect to .

Application environment may comprise enterprise server Web server solution server and data store . Application environment may comprise a single server device or multiple devices. In various embodiments enterprise server and solution server comprise application programs developed in Java and or C language and running under Windows XP NT 2000 2003 operating systems.

Web server manages data communication between application environment administration clients and browsing clients . One or more administration clients and browsing clients may execute one or more Java applets to interact with Java servlets of Web server according to some embodiments.

Solution server is used to access data from operational data sources . In some embodiments solution server includes connection groups and connection processes. A connection group includes one or more object instances each of which is associated with a particular data source of operational data sources . Different connection groups are associated with different data sources.

A connection process comprises processor executable process steps to retrieve data from a particular type of data source e.g. an SAP R 3 server . A connection process may comply with standard or proprietary protocols including but not limited to Oracle Database Connectivity ODBC Java Database Connectivity JDBC Object Linking and Embedding for Process Control OPC and Web Services. Process steps to retrieve data from a particular type of data source may be provided in a library by an owner of a proprietary interface for accessing the particular type of data source.

Accordingly several different connection groups may use a same connection process to access their respective data sources. Moreover each object instance may include scripts e.g. Structured Query Language scripts to populate itself based on retrieved data. Solution server manages the objects connection groups and connection processes to access data that is acquired and stored by disparate systems of operational data sources .

Solution server may transmit the data acquired from operational data sources to data store for storage according to some embodiments. Data store may store any data used during the operation of application environment . Data may be stored in data store according to any currently or hereafter known protocol for storing data including but not limited to a class based component and view model. In this regard data store may store data in the form of objects instantiated based on components of component model .

Data store may comprise a front end application that is usable to access and or manage the data stored therein. Such a front end application may support Structured Query Language commands or the like. According to some embodiments data store may receive data directly from operational data sources . Data store may embody one or more of back end data sources and according to some embodiments.

Administration clients may provide user interfaces to perform administration functions for operating system . For example an administrator may manipulate a user interface displayed by one of administration clients to create a configuration and or develop a view part such as those described above. Information input to the user interfaces may be received by Web server and transmitted to data store . Examples of administration clients according to some embodiments include but are not limited to a desktop computer a laptop computer a computer terminal a personal digital assistant a telephone and a tablet computer.

Browsing clients may request views of data contained in data store and or in operational data sources . Browsing clients may also access an application of application server to facilitate development of view parts and association of configurations therewith. Browsing clients may provide any suitable client application such as a Web browser or a Java applet. As such a browsing client may be connected to application environment through the Internet or through an Intranet. Browsing clients may comprise any suitable user devices including but not limited to those mentioned above with respect to administration clients .

In some embodiments the elements of are connected differently than as shown and each block shown is implemented by one or more hardware and software elements. The hardware and software elements of one or more blocks may be located remotely from each other. Some embodiments may include environments systems servers and clients that are different from those shown.

Administration client includes microprocessor in communication with communication bus . Microprocessor may comprise an Intel microprocessor or other type of processor and is used to execute processor executable process steps so as to control the elements of administration client to provide desired functionality.

Also in communication with communication bus is network interface . Network interface is used to transmit data to and to receive data from devices external to administration client such as a device housing Web server . Network interface is therefore preferably configured with hardware suitable to physically interface with desired external devices and or network connections. For example network interface may comprise an Ethernet connection to a local area network through which administration device may receive and transmit information over the Web.

Input device and display are also in communication with communication bus . Any known input device may comprise input device including a keyboard mouse touch pad voice recognition system or any combination of these devices. Of course information may also be input to administration device via network interface . Display may be an integral or separate CRT display flat panel display or the like used to present graphics and text in response to commands issued by microprocessor .

According to some embodiments display displays user interfaces that may be manipulated by an administrator using input device to create a configuration associated with a model component or other data structure. An example of such a user interface is described below.

RAM is connected to communication bus to provide microprocessor with fast data storage and retrieval. In this regard processor executable process steps being executed by microprocessor are typically stored temporarily in RAM and executed therefrom by microprocessor . ROM in contrast provides storage from which data can be retrieved but to which data cannot be stored. Accordingly ROM may be used to store invariant process steps and other data such as basic input output instructions and data used during boot up of administration device or to control network interface . One or both of RAM and ROM may communicate directly with microprocessor instead of over communication bus .

Data storage device stores among other data processor executable program code of operations data administrator application . Administration device may execute operations data administrator application to provide the functions attributed herein to administrator client . Operations data administrator application may comprise a Java applet or a standalone application suitable for the operating system of administration device .

Web browser may comprise processor executable program code of a Web client. As such administration client may execute process steps of Web browser to request and receive Web pages from a Web server such as Web server . A Java applet such as operations data administrator application may execute within an execution engine provided by Web browser .

Data storage device also includes processor executable process steps of other applications . Other applications may include process steps to perform calendaring e mail functions word processing accounting presentation development and the like. Data storage device may also store process steps of an operating system unshown . An operating system provides a platform for executing applications device drivers and other process steps that interact with elements of administration client . Data files may include any electronic files usable by any application of administration client .

Data storage device of browsing client stores among other data processor executable process steps of operations data client application . Operations data client application may comprise a Java applet or a standalone application suitable execution by the operating system of browsing client .

Web browser may comprise processor executable process steps of a Web client. As such browsing client may execute process steps of Web browser to request and receive Web pages from a Web server such as Web server . A Java applet such as operations data client application may execute within an execution engine provided by Web browser .

The process steps stored in data storage devices and may be read from one or more of a computer readable medium such as a floppy disk a CD ROM a DVD ROM a Zip disk a magnetic tape or a signal encoding the process steps and then stored in data storage devices and in a compressed uncompiled and or encrypted format. In alternative embodiments hard wired circuitry may be used in place of or in combination with processor executable process steps for implementation of processes according to some embodiments. Thus embodiments are not limited to any specific combination of hardware and software.

Process and all other process steps mentioned herein may be embodied in processor executable process steps read from one or more of a computer readable medium such as a floppy disk a CD ROM a DVD ROM a Zip disk a magnetic tape or a signal encoding the process steps and then stored in a compressed uncompiled and or encrypted format. In alternative embodiments hard wired circuitry may be used in place of or in combination with processor executable process steps for implementation of processes according to some embodiments. Thus embodiments are not limited to any specific combination of hardware and software.

Initially at step S a first widget of a first view part is defined. The widget is associated with a component of a class model and with one or more members of the component. According to some embodiments of S a user operates browsing client to execute operations data client application . Data client application then provides a user interface which allows the user to define the first widget.

User interface shows view part including widgets through . Any suitable system may be employed at S to associate widgets through with a component. For example the component may be selected from a hierarchical tree such as component model of . Moreover the pull down menus of widget may be used to select a member of the component for each column. As a result widget is associated with the selected members of the component.

A second widget of a second view part is defined at S. The second widget is associated with the same component and component members that are associated with the first widget. The second widget may be defined as described above with respect to the first widget or in a different manner. For example the second widget may be defined by a different user than the user who defined the first widget. According to some embodiments the first widget and the second widget are represented by widget and of respectively.

A request for data to populate the first widget is received at S. The requested data is associated with a first object instantiation of the component with which the first widget is associated. S may therefore occur upon user selection of the first view part defined at S.

As shown interface shows component model including several component instantiations. For purposes of the present example it will be assumed that each displayed instantiation is an instantiation of the component Assets . Also shown is context menu which is displayed in response to right clicking on the instantiation Hydrocracker . Context menu specifies several views and a notification view is selected therefrom.

Interface of displays the requested view. View includes field and field for receiving user criteria from the user. The user may input criteria to fields and in order to constrain the data that will be displayed in view . More specifically the user criteria input to fields and may comprise input parameters to a data source interface used to receive data of a first object instantiation of an Asset object. The data is intended to populate widget .

Continuing with the example of S the request for the data is transmitted to application environment and received thereby upon completion of fields and and user selection of Trigger button .

Next at S a configuration is identified based on the first widget. The configuration specifies a data source a data source interface input parameters and a mapping to one or more members of the component. In a case that the first widget is widget of the identified configuration is configuration . In some embodiments the first widget indicates an associated configuration and the identity of the configuration is received with the request at S. According to some embodiments the widget specifies a data source and a description of what type of data should be returned e.g. a table a single value etc. . In the latter instance a configuration is identified which is associated with the subject component and the specified data source and which returns the specified type of data.

Interface may be presented to an administrator on display of administration client . More specifically administration client may execute operations data administrator application to request access to a configuration utility served by application environment . In some embodiments administration client executes Web browser to request access from Web server of application environment .

Interface includes connection group field for specifying a connection group. The connection group is associated with a data source and also with a connector process for accessing the data source. The selected data source may comprise any system for storing data. The connector process may comprise proprietary process steps usable to invoke proprietary interfaces supported by the data source. The proprietary process may be provided in a library e.g. a Java Connector library available to application environment . As described above different connection groups are associated with different data sources and a connection process may be associated with one or more connection groups.

A data source interface supported by the data source is shown in function name field . The interface may comprise an Application Programming Interface API that is exposed by the selected data source and that may be invoked by application environment . The interface is selected in the present example by populating with a name of the interface.

Interface also shows input parameters associated with the selected data source interface. The parameters may comprise structures class instances values tables and or any other data types used to constrain the interface. According to some embodiments the input parameters may include input tables and or import parameters which comprise a structure like construct used to configure an SAP Business Application Interface BAPI prior to invocation. In the present example the specified interface does not require any import parameters but may require one or more input tables.

A particular data structure of the data source to query is shown in pull down menu . According to some embodiments the selected data source interface is capable of querying a particular set of tables. These tables are listed by and selectable via pull down menu .

Table shows a mapping of one or more members of the selected component i.e. Str Str to one or more return data fields of the data source interface. The return data fields comprise fields of each record returned by the interface.

Returning to process the requested data is received based on the above described features of the identified configuration. For example the data source interface of the configuration is invoked using the specified input parameters e.g. received from widgets and . Data associated with the return data fields of the interface is then received from the data source.

The first widget is populated with the received data at S. In some embodiments application environment populates the fields of the first widget representing component members with the received data based on the member returned data field mapping of the configuration. The component may comprise a collection including several object instantiations. Browsing client may therefore present the data of each member of each instantiation in appropriate rows and columns of widget .

S through S of process proceed as described above with respect to S through S although with respect to the second widget of the second view part. In this regard the same configuration is identified at S that was identified at S and the same data source data source interface input parameters and mapping are used to receive the data and populate the second widget. The data received at S may differ from the data received at S because the values of the input parameters used in S may differ from the values of the input parameters used in S.

Provided below are examples of a view part and a configuration file associated with an Asset component according to some embodiments. The view part includes information specifying widgets and the configuration file includes several configurations as described above. The examples are not intended to limit the scope of the appended claims.

A portion of the disclosure of this patent document contains material which is subject to copyright protection. The copyright owner has no objection to the facsimile reproduction by anyone of the patent document or the patent disclosure as it appears in the Patent and Trademark Office patent file or records but otherwise reserves all copyright rights whatsoever.

Those in the art will appreciate that various adaptations and modifications of the above described embodiments can be configured without departing from the scope and spirit of the claims. Therefore it is to be understood that the claims may be practiced other than as specifically described herein.

