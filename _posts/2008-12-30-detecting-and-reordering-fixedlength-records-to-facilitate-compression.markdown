---

title: Detecting and reordering fixed-length records to facilitate compression
abstract: Disclosed herein are one or more embodiments that facilitate compression of a source file having a fixed-length record therein. One or more of the disclosed embodiments detect the fixed-length records and determine a reordering plan for the source file, including determining a plurality of column groupings within the detected fixed-length records.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08149147&OS=08149147&RS=08149147
owner: Microsoft Corporation
number: 08149147
owner_city: Redmond
owner_country: US
publication_date: 20081230
---
With the wide adoption of communication networks such as the Internet efficient transmission and reception of large data files is increasingly important. To reduce the time and bandwidth for communicating such files compression and decompression are often used. Compression utilities such as WinZip or GZip are used to transform data files to Zip files Zip being a popular data compression format. Compression also involves the use of a number of well known compression algorithms such as the Lempel Ziv algorithm which remove repeated data from a compressed file.

To achieve better compression results compression tools often utilize knowledge of the structure of the to be compressed files and of the types of data in the to be compressed files. This knowledge is often provided in an associated file called a schema. Many to be compressed files however are not associated with any sort of schema. These sans schema to be compressed files often are quite complex and include numerous types of data such as tables text and images. Without access to a schema compression tools attempting to compress such complex to be compressed files achieve less desirable compression results.

In various embodiments a computing device is configured to facilitate compression of a source file. This computing device may detect a plurality of fixed length records within the source file. The computing device may further determine a reordering plan for the source file including determining a plurality of column groupings within the detected fixed length records. Also in some embodiments the computing device may reorder the fixed length records based on the reordering plan to facilitate compression of the source file.

Additionally the detecting performed by the computing device may further comprise determining a plurality of candidate records based on a repeating string pattern detected within the source file. The computing device may then determine a candidate record length based on a byte differential between repeated instances of the string pattern and compare first byte values occurring between the repeated instances of the string pattern with second byte values following the first byte values by the record length in order to calculate a score. If the score is less than or equal to a threshold value the computing device may determine that the candidate records are members of the set of fixed length records.

Further in some embodiments the determining of column groupings performed by the computing device may comprise determining a dependency relationship between a first column and a second column based on a tendency of values repeating in the first column to appear together with values repeating in the second column. In other embodiments the determining of column groupings may comprise determining a partition plan of a set of partition plans partitioning the fixed length records into candidate column groupings as an optimal partition plan based on coding bit sizes associated with each partition plan.

This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter nor is it intended to be used to limit the scope of the claimed subject matter.

As shown the source file may first be analyzed by a fixed length record detector . After analysis by the fixed length record detector the contiguous interval divider may then receive and process by source file . An evaluator of reordering may then analyze a reordering plan generated by the contiguous interval divider . In response to determining that reordering is appropriate the evaluator of reordering may then enable the generation of a reordering description file and the reordering of source file to generate a reordered source file . A back end compressor may then compress the reordering description file and reordered source file .

In various embodiments the operations logical components and files illustrated by may be performed by and or reside on one or more computing devices not shown . The one or more computing devices may be any sort of computing devices known in the art such as personal computers PCs laptops servers phones personal digital assistants PDAs set top boxes and data centers. The computing devices may be single or multi processor devices. In some embodiments one or more of the computing devices may be a virtual machine operating on another physical computing device. Also the one or more computing devices may be particular machines configured to facilitate compression and to perform some or all of the operations described above and below. and its corresponding description below illustrate any exemplary computing device of the one or more computing devices in greater detail.

Also in some embodiments when the operations logical components and files illustrated by may be performed by and or reside on at least two computing devices those computing devices may be connected by at least one networking fabric not shown . For example the computing devices may be connected by a local access network LAN a public or private wide area network WAN and or by the Internet. In some embodiments the computing devices may implement between themselves a virtual private network VPN to secure the communications. Also the computing devices may utilize any communications protocol known in the art such as the Transmission Control Protocol Internet Protocol TCP IP set of protocols. In other embodiments rather than being coupled by a networking fabric the computing devices may be locally or physically coupled.

As illustrated the one or more computing devices may receive or retrieve a source file . In various embodiments the source file may be for example a database file a text file a word processing document a spreadsheet or a presentation file. However the source file may be any sort of file known in the art which may include one or more fixed length tables. In some embodiments the source file may include both table data and non table data. The source file may have been stored on one of the computing devices or may have been received from another computing device. In some embodiments the source file is retrieved from local storage retrieved from remote storage or received through a storage medium such as a compact disc CD or thumb drive or signal.

As shown in the fixed length record detector may be any set of executable instructions to configure the one or more computing devices to automatically detect fixed length records of the one or more fixed length tables included in the source file .

The fixed length record detector hereinafter detector may process the source file in a single pass comparing bytes of the source file over a pre determined interval of the source file . For example the pre determined interval may be 50 bytes in length and detector may process the source file over that 50 byte interval to detect any byte in the interval which repeats more than once. Once two or more matching bytes are detected the detector may determine the byte length between the matching bytes as a candidate record length. For example if three bytes at positions p pand pare detected a candidate record length of n may be calculated as follows 

The matching bytes and candidate record length may be considered evidence of three candidate n byte length records beginning at positions p pand p respectively. While the actual records may begin at different byte positions in other words the matching byte may be at the middle of a record rather than its beginning detection of the positions at which matching bytes repeat and calculation of the record length allow the detector to determine which bytes belong to which columns of the records allowing the columns to be separated into column groupings.

In various embodiments detector may then confirm whether the candidate records are fixed length records by comparing matched bytes between the records i.e. bytes in each record separated by the candidate record length . To perform the comparison a function CalMatch may be defined to calculate the matched bytes between two l byte records that start at the positions q q 

Continuing with the above example if the candidate records satisfy CalMatch and CalMatch where t is an experimentally determined pre defined value the detector may consider fixed length records to be detected. In some embodiments the pre defined value t may range between 2 and 4. The detector may then repeatedly check matched bytes between every following n bytes and their preceding n bytes until the result of function CalMatch is larger than n t.

Upon completion of processing source file or concurrently while processing the file the detector may write the beginning position record length and number of records for each detected record group to a file or data structure. In some embodiments the file or data structure may be the reordering description file which may be created by detector . Continuing with the above example detector may write the beginning position p the record length n and the number of records three for the detected record group and for any other detected record groups to a file or data structure.

Additionally shows pseudocode for some of the above described operations of the detector for m records. As illustrated the detector may find repeating byte values calculate a candidate record length compare matched bytes between the candidate records to confirm the candidate records as records and repeat the comparing until all m records are detected and confirmed.

Further exemplary operations of the fixed length record detector are shown in and described in greater detail below.

As is further illustrated in the contiguous interval divider may be any set of executable instructions to configure the one or more computing devices to generate a reordering plan and determine a plurality of column groupings within the fixed length records for reordering. The reordering plan and column groupings may facilitate compression in some embodiments. In various embodiments the contiguous interval divider hereinafter divider may operate in at least one of two modes a fast mode and or a dynamic programming mode.

In the fast mode the divider may determine the column groupings and reordering plan by determining dependency relationships between first columns and second columns based on a tendency of values repeating in the first columns to appear together with values repeating in the second columns.

In various embodiments the divider may begin operating in the fast mode by initializing a first interval column grouping for a first column of the detected fixed length records. For example for a set of intervals column groupings l where i is an index of a current processing interval and for a set of columns C J where J is an index of a current processing column I C 0 .

The divider may then determine whether the current processing column and the column following it C J and C J 1 are dependent. To determine whether the two columns are dependent divider may calculate a number of probabilities and compare those probabilities to a threshold. For example let X denote the event that a byte in a column C j equals the byte in the same column but last row and let Y denote the event that a byte in the column C j 1 equals the byte in the same column but last row. Also let P X and P Y be the statistical probabilities of the events X and Y. If the conditional probabilities P X Y and P Y X where is a predefined threshold the divider may determine that a dependency relationship exists between columns C J and C J 1 . In some embodiments the threshold may be set to 0.95.

If the divider determines that C J and C J 1 are dependent the divider may merge C J 1 into the current processing interval I. If not the divider may increment the index i of the current processing interval. Regardless of whether the columns are dependent after adding the subsequent column C J 1 or incrementing the index i the divider may increment the current processing column index J and repeat the above determination of dependency for the incremented Jcolumn and the column subsequent to it. The divider may perform these above operations in the fast mode for each column J from 0 to n 1 n again referring to a record length .

Additionally shows pseudo code for some of the above described operations of the divider operating in fast mode. As illustrated the divider may for each column determine if there is a dependency relationship with the subsequent column and if so merge the subsequent column into the current interval.

In the dynamic programming mode the divider may determine a partition plan of a set of partition plans partitioning the fixed length records into candidate column groupings as an optimal partition plan based on coding bit sizes associated with each partition plan.

In various embodiments the divider begins operating in the dynamic mode by generating a plurality of partition plans. The partition plans may each propose one specific set of intervals column groupings of the detected fixed length records. In one embodiment there may be a partition plan for each and every possible set of column groupings. In other embodiments divider may propose a pre determined number of column groupings. In one embodiment the pre determined column groupings may be generated randomly.

Once the partition plans are generated the divider may calculate the coding bit size of each plan. In some embodiments the divider may utilize a compression algorithm such as the Lempel Ziv algorithm to calculate the coding bit sizes.

For example to calculate a coding bit size over a string S which may comprise some or all of an interval I a compressor of divider may parse S into c unmatched symbols Sand d matched symbols M. The offset and length of a matched symbol Mmay be and L respectively. R S may denote the coding bits of an unmatched symbol S and R M may denote the coding bits of a match M. The total coding bits over S may then be defined as 

In order to determine whether to encode a byte as a matched symbol or an unmatched symbol divider may compare a byte under consideration to the last byte in the same column. If the byte matches the last byte it may be encoded as a matching symbol. If not it may be encoded as an unmatched symbol.

Continuing with the above example divider may determine the coding bits for an unmatched symbol as being equal to one bit indicating whether or not the symbol is matched and log A bits representing the unmatched symbol where A is an alphabet of possible values of the symbol. Thus an unmatched symbol may be encoded without compression and represented by log A bits. Accordingly the coding bits of an unmatched symbol R S may be defined as 1 log

To encode a matched symbol R M the divider may determine the coding bits for an matched symbol as being equal to one bit indicating whether or not the symbol is matched and a number of bits representing the offset and length L of the matched symbol. The offset may be represented by 2 log 1 1 bits and the length Lmay be represented by 2 log L 1 1 bits. Accordingly the coding bits of a matched symbol R M may be defined as 1 2 log 1 1 2 log 1 1 

After calculating the coding bit size of each string S the divider may sum the strings S for each interval I and may sum the coding bit sizes R I for each interval Ias 

In various embodiments after calculating the coding cost R P for each partition plan P the divider may determine the optimal partition plan. In some embodiments the optimal partition plan may be the partition plan having the smallest coding cost i.e. smallest coding bit size . Accordingly the divider may attempt to determine an optimal partition plan P such that Min 

To calculate the coding cost of the optimal partition P the divider may utilize dynamic programming. For example Q i may denote the coding cost of the optimal partition on the sub table C 0 . . . C i . Also Q 1 0 and for any i 0 Q i can be calculated by recursive equation 

When Q n 1 is calculated the corresponding optimal partition plan P is also known by tracking backwards the optimal path from Q 1 to Q n 1 . Further in one embodiment the recursive equation Q i may be modified such that 

Exemplary operations of the contiguous interval divider are shown in and described in greater detail below.

As is further shown in the evaluator of reordering may be any set of executable instructions to configure the one or more computing devices to evaluate the reordering plan to determine whether a reordered source file would compress better than the original source file .

In various embodiments the evaluator of reordering hereinafter evaluator may estimate compression rates of the byte sequences representing the source file and reordered source file using order 2 empirical entropy. The order 2 empirical entropy for each byte sequence may be defined as

In various embodiments the one or more computing devices may then reorder block the source file to generate the reordered source file . As shown in the reordering operation s may be based on the reordering description file . In various embodiment the one or more computing devices may reorder the source file by scanning column groupings of the file separately the groupings set forth in the reordering description file . In one embodiment the scanning performed by the computing device may be raster scanning.

In some embodiments the reordering description file may be any sort of file known in the art such as a plain text file or an XML file. The reordering description file may include the reordering plan the starting positions of the fixed length records within the source file record lengths of the fixed length records and a number of fixed length records comprising a fixed length table. Also the reordering plan may comprise indications of the determined column groupings.

In various embodiments the reordered file may differ from source file in that the column groupings of the fixed length records may appear sequentially if scanned.

As illustrated the reordering description file and reordered file may be compressed by a back end compressor . In one embodiment the compressor may compress the files and into a Zip file format. The back end compressor may then be in such an embodiment a Zip compression utility such as WinZip or GZip . In other embodiments compressor may be any other sort of compression utility known in the art. And in some embodiments the back end compressor may be any set of executable instructions to configure the one or more computing devices to perform operations which may compress the files and .

After receiving retrieving the source file the computing devices may detect a plurality of fixed length records within the source file block . The detecting of block is illustrated in and described in greater detail herein.

As is shown in the computing devices may then determine a reordering plan for the source file including determining a plurality of column groupings within the detected fixed length records block . In some embodiments the determining may include determining a dependency relationship between a first column and a second column based on a tendency of values repeating in the first column to appear together with values repeating in the second column block . The determining of block is illustrated in and described in greater detail herein.

In some embodiments the determining may also or instead include determining a partition plan of a set of partition plans partitioning the fixed length records into candidate column groupings as an optimal partition plan based on coding bit sizes associated with each partition plan block . The determining of block is illustrated in and described in greater detail herein.

In various embodiments after determining the reordering plan and column groupings the computing devices may evaluate the reordering plan to ensure that the source file will compress better after reordering than before reordering block . Also either while detecting block and determining block or after the computing devices may create a reordering description file including the reordering plan the reordering description file further including starting positions of the fixed length records within the source file record lengths of the fixed length records and a number of fixed length records comprising a fixed length table.

As shown in the computing devices may then reorder the fixed length records based on the reordering plan to facilitate compression of the source file block . In some embodiments the reordering may comprise raster scanning each column grouping separately.

In various embodiments the computing devices may then compress the source file and the reordering description file the column groupings and any non record portions of the source file each compressed separately block .

In a very basic configuration computing device may include at least one processing unit and system memory . Depending on the exact configuration and type of computing device system memory may be volatile such as RAM non volatile such as ROM flash memory etc. or some combination of the two. System memory may include an operating system one or more program modules and may include program data . The operating system may include a component based framework that supports components including properties and events objects inheritance polymorphism reflection and provides an object oriented component based application programming interface API such as that of the .NET Framework manufactured by Microsoft Corporation Redmond Wash. The device may be of a configuration demarcated by a dashed line .

Computing device may also have additional features or functionality. For example computing device may also include additional data storage devices removable and or non removable such as for example magnetic disks optical disks or tape. Such additional storage is illustrated in by removable storage and non removable storage . Computer storage media may include volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. System memory removable storage and non removable storage are all examples of computer storage media. Computer storage media includes but is not limited to RAM ROM EEPROM flash memory or other memory technology CD ROM digital versatile disks DVD or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can be accessed by computing device . Any such computer storage media may be part of device . Computing device may also have input device s such as keyboard mouse pen voice input device touch input device etc. Output device s such as a display speakers printer etc. may also be included. These devices are well know in the art and need not be discussed at length here.

Computing device may also contain communication connections that allow the device to communicate with other computing devices such as over a network. Communication connections are one example of communication media. Communication media may typically be embodied by computer readable instructions data structures program modules etc.

Although the subject matter has been described in language specific to structural features and or methodological acts it is to be understood that the subject matter defined in the appended claims is not necessarily limited to the specific features or acts described above. Rather the specific features and acts described above are disclosed as example forms of implementing the claims.

References are made in the detailed description to the accompanying drawings that are part of the disclosure and which illustrate embodiments. Other embodiments may be utilized and structural or logical changes may be made without departing from the scope of the disclosure. Therefore the detailed description and accompanying drawings are not to be taken in a limiting sense and the scope of embodiments is defined by the appended claims and equivalents.

Various operations may be described herein as multiple discrete operations in turn in a manner that may be helpful in understanding embodiments however the order of description should not be construed to imply that these operations are order dependent. Also embodiments may have fewer operations than described. A description of multiple discrete operations should not be construed to imply that all operations are necessary.

The description may use perspective based descriptions such as up down back front and top bottom. Such descriptions are merely used to facilitate the discussion and are not intended to restrict the scope of embodiments.

The terms coupled and connected along with their derivatives may be used herein. These terms are not intended as synonyms for each other. Rather in particular embodiments connected may be used to indicate that two or more elements are in direct physical or electrical contact with each other. Coupled may mean that two or more elements are in direct physical or electrical contact. However coupled may also mean that two or more elements are not in direct contact with each other but yet still cooperate or interact with each other.

The description may use the phrases in an embodiment or in embodiments which may each refer to one or more of the same or different embodiments. Furthermore the terms comprising including having and the like as used with respect to embodiments are synonymous.

For the purposes of the description a phrase in the form A B means A or B. For the purposes of the description a phrase in the form A and or B means A B or A and B . For the purposes of the description a phrase in the form at least one of A B and C means A B C A and B A and C B and C or A B and C . For the purposes of the description a phrase in the form A B means B or AB that is A is an optional element.

