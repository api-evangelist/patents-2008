---

title: Handling sensors in a context-aware platform with hint signals
abstract: The context engine of a context aware platform may comprise a provider manager coupled to context providers and the provider manager may communicate with the context providers using application programming interfaces (API). To optimize the use of system resources, the provider manager may load/unload the context providers based on value of a load field of a hint signal or on prediction values. The context providers is to activate a first set of sensors of the plurality of sensors if the preferred activity level for the first set of sensors is set to activate state in the hint signal. The context providers is to deactivate a second set of sensors of the plurality of sensors if the preferred activity level for the first set of sensors is set to deactivate state in the hint signal.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08402174&OS=08402174&RS=08402174
owner: Intel Corporation
number: 08402174
owner_city: Santa Clara
owner_country: US
publication_date: 20081219
---
A context aware platform may understand itself its user and its surroundings and may adapt to the behavior make decisions or act on behalf of the user without receiving explicit user inputs. The context aware platform may generate context information and based on the context information the context aware platform may adapt without receiving explicit user inputs. The context information may be generated using the data provided by the sensors. The sensors may generate the data based on the inputs that the sensors sense.

The type and the disparity of the sensors that are available in the market place are ever increasing. The current context aware platforms lack the ability to handle disparate sensors. Also the sensors and the associated front end processing modules may consume significant amount of resources like battery power network bandwidth processing cycles and such other similar resources. The current context aware platforms lack the ability to handle the sensors to conserve such resources.

The following description describes embodiments of a technique to handle sensors in a context aware platform. In the following description numerous specific details such as logic implementations resource partitioning or sharing or duplication implementations types and interrelationships of system components and logic partitioning or integration choices are set forth in order to provide a more thorough understanding of the present invention. It will be appreciated however by one skilled in the art that the invention may be practiced without such specific details. In other instances control structures gate level circuits and full software instruction sequences have not been shown in detail in order not to obscure the invention. Those of ordinary skill in the art with the included descriptions will be able to implement appropriate functionality without undue experimentation.

References in the specification to one embodiment an embodiment an example embodiment indicate that the embodiment described may include a particular feature structure or characteristic but every embodiment may not necessarily include the particular feature structure or characteristic. Moreover such phrases are not necessarily referring to the same embodiment. Further when a particular feature structure or characteristic is described in connection with an embodiment it is submitted that it is within the knowledge of one skilled in the art to affect such feature structure or characteristic in connection with other embodiments whether or not explicitly described.

Embodiments of the invention may be implemented in hardware firmware software or any combination thereof. Embodiments of the invention may also be implemented as instructions stored on a machine readable medium which may be read and executed by one or more processors. A machine readable medium may include any mechanism for storing or transmitting information in a form readable by a machine e.g. a computing device .

For example a machine readable medium may include read only memory ROM random access memory RAM magnetic disk storage media optical storage media flash memory devices electrical optical acoustical or other similar signals. Further firmware software routines and instructions may be described herein as performing certain actions. However it should be appreciated that such descriptions are merely for convenience and that such actions in fact result from computing devices processors controllers and other devices executing the firmware software routines and instructions.

An embodiment of a context aware platform which may handle disparate sensors while conserving resources consumed by the disparate sensors is illustrated in . In one embodiment the context aware platform may comprise a sensor complex a context engine and clients .

In one embodiment the clients may include one or more client entities such as client to N. In one embodiment the client entities to N may include user level applications operating system platform utilities and tools. In one embodiment the clients may arrive at decisions and actions to be performed using contextual information received from the context engine . In one embodiment the clients may receive the contextual information from the context engine either synchronously or asynchronously. In one embodiment the clients may customize the context processing performed by the context engine .

In one embodiment the sensor complex may comprise an array of disparate sensors which may include physical and logical sensors. In one embodiment the sensors may provide data from which contextual information may be generated. In one embodiment the sensors may be hardware components embedded into the context aware platform or coupled to the context aware platform using components such as wired wireless networks. In one embodiment the sensor complex may be coupled to the context engine . In one embodiment the sensors may generate data based on the sensing of the parameters such as battery charge active radio location humidity blood pressure and activity level of the user of the context aware platform memory and processor usage and such other parameters. In one embodiment the sensors of the sensor complex may be activated and or deactivated dynamically to provide unified way for the context aware platform to request and receive context information from the sensors and also to conserve the resources consumed by the sensors.

In one embodiment the context engine may dynamically activate and deactivate the sensors of the sensor complex from the context aware platform . In one embodiment the context engine may generate hint signals using the information which may include indicators to the use of sensors by the clients . In one embodiment the context engine may also generate hint signals based on the information which may include indicators to the use of sensors by the context engine . In one embodiment the context engine may activate one or more sensors of the sensor complex based on the hint signal. In one embodiment the context engine may also use the hint signal to deactivate one or more sensors coupled to the context aware platform .

In one embodiment activating and or deactivating of sensors based on the hint signal may provide a unified approach to couple the sensors to the context aware platform . In one embodiment the context engine may track an elapsed time period for which a sensor may not be in use and if the elapsed time period is more than a first idle threshold value the context engine may deactivate the sensor which may conserve resources. In one embodiment the context engine may also predict a future time point at which a sensor may be used and if the future time point is greater than a second idle threshold value the context engine may deactivate the sensor which may conserve resources consumed by the sensors.

In one embodiment the hint signal may be generated in direct response to a request from a client for sensor data of one or more of the sensors . In one embodiment the direct response may include reference counting such that while at least the client uses the sensor A the sensor A may be activated and while the last client K for example completes using the sensor A the sensor A may be deactivated.

In other embodiment in addition to monitoring the usage of each sensors by the clients the context engine may use additional heuristics or inferencing or historical trend analysis to determine time points at which the sensors may be activated or deactivated. In yet other embodiment the context engine independent of any client activity may use other mechanisms to anticipate the best use of sensors to activate or deactivate each of the sensors .

An embodiment of the context engine which may support unified approach to activate and or deactivate sensors while causing conservation of resources consumed by the sensors is illustrated in . In one embodiment the context engine may comprise a client interface a control logic one or more context providers to K and a provider manager .

In one embodiment the client interface may couple the clients to the context engine . In one embodiment the client interface may receive contextual information from the provider manager after receiving an indication from the control logic . In one embodiment the client interface may transfer the contextual information to one or more of the appropriate clients to based on control values provided by the control logic . In one embodiment the client interface may also transfer control data generated by the clients to the context engine . In one embodiment the control data may include rules indications of sensor usage and such other similar data.

In one embodiment the control logic may receive an indication from the provider manager and may cause the contextual information to be transferred from the provider manager to the client interface . In one embodiment the control logic may generate the control values based on the inputs received from the provider manager . In one embodiment the control logic may provide control values to the client interface .

In one embodiment the provider manager may load and or unload the context providers to K based on the preferred activity levels of the sensors or predicted activity levels of the sensors . In one embodiment the provider manager may program the load field of the hint signal to a specific logic value for example 1 to load and 0 to unload the context provider . In one embodiment the provider manager may also program the activity level fields of the hint signal with a first logic level or a second logic value to either activate or deactivate the sensors A and B coupled to the context provider . In one embodiment the provider manager may support provider application program interface API to communicate with the context providers to K In one embodiment the provider API may enable the provider manager to support activities such as initialization registration loading getting contextual information unloading un installation of the context providers to K. In one embodiment the provider manager may support activities such as installation registration and un installation of the context providers to K even while the control engine may be in an inactive state.

In one embodiment the provider manager may provide hint signals to the context providers to K using provider APIs. In one embodiment the provider manager may start the context providers to K before getting the contextual information from the context providers to K using the provider API. In one embodiment the provider manager may get the contextual information from the context provider to K synchronously or asynchronously. In one embodiment the provider manager may provide the contextual information to the client interface in response to receiving a control signal from the control logic . In one embodiment the provider manager may provide indications to the control logic that may enable the control logic to cause the contextual information to be transferred to an appropriate client to 

In one embodiment the context provider may support sensors A and B the context provider may support sensors C and D and the context provider K may support sensor N. In one embodiment the context providers to K may couple the sensors A to N to the context engine . In one embodiment the operation of the context provider to activate and or deactivate the sensors A and B is described below. However the other context providers to K may operate in a similar mode to activate and or deactivate the sensors C to N. To couple the sensors A and B to the context engine in one embodiment the context provider may support protocols interfaces and signaling mechanism used by the sensors A and B. In one embodiment the context provider may also support a common data access and control protocol which may be provided in the form of a provider API application program interface .

In one embodiment the context provider may be loaded if the load unload field value of the hint signal equals a specific value e.g. logic 1 . In one embodiment the loaded context provider may retrieve the activity level field for the sensors A and B coupled to the context provider . In one embodiment the context provider may activate the sensor A if the activity level field for A of the hint signal represents a first logic level e.g. 1 and may deactivate the sensor B if the activity level field for B of the hint signal represents a second logic level e.g. 0 . In one embodiment the context provider based on the activity level field of the sensors A and B may activate the sensor A and B or deactivate the sensors A and B or activate the sensor A and deactivate the sensor B or deactivate the sensor A and activate the sensor B. An embodiment of the provider API used for communication between the context providers to K and the provider manager is described below.

An embodiment of an operation of the context provider which may activate deactivate disparate sensors to provide a unified approach to couple the disparate sensors to the context aware platform is illustrated in .

In block the context provider may receive a hint signal which may indicate the preferred activity level of the disparate sensors. In one embodiment the hint signal may be received from the provider manager . In one embodiment the hint signal may indicate that the sensor A may be activated and the sensor B may be deactivated for example.

In block the context provider may identify the sensors first set that may be activated and sensors second set that may be de activated. In one embodiment the context provider may identify that the sensor A first set may be activated and the sensor B second set may be de activated.

In block the context provider may activate the first set sensor A . In one embodiment the context provider may send a signal to the sensor A to activate the sensor A.

In block the context provider may deactivate the second set of sensors sensor B . In one embodiment the context provider may send a signal to the sensor B to deactivate the sensor B.

An embodiment of an operation of the provider manager which may communicate with the context provider to provide a unified approach to handle disparate sensors while conserving resources consumed by the disparate sensors is illustrated in

In block the provider manager may track the usage levels of the sensors based on the inputs provided by the clients . In one embodiment the usage levels of the sensors may indicate that the client may use the sensor A within a time period X. Also the usage levels of the sensors provided by the client may indicate that the sensor B may not be used for next Y time units.

In block the provider manager may determine the preferred activity level for the sensors A and B using the usage levels of the sensors tracked using the inputs provided by the clients . In one embodiment the provider manager may determine that the preferred activity level for the sensor A may be equal to activate first logic level and that of the sensor B may equal to deactivate second logic level .

In block the provider manager may generate a hint signal based on the activity levels. In block the provider manager may send the hint signal to the context provider using the provider API. In block the provider manager may receive a status update signal after sending the hint signal.

In block the provider manager may check if all the sensors coupled to the context provider are deactivated. In one embodiment the provider manager may check if the sensors A and B coupled to the context provider are deactivated and control passes to block if the sensors A and B coupled to the context provider are not deactivated and control passes to block otherwise.

In block the provider manager may maintain the loaded state of the context provider as at least one sensor A coupled to the context provider is in activate state.

In block the provider manager may unload the context provider if the sensors A and B coupled to the context provider are deactivated.

In other embodiments the provider manager may perform speculative loading or unloading of the context providers based on usage patterns of the sensors by the client entities to . In one embodiment the provider manager may speculate the usage of the sensors by the clients and may load the context provider that may couple such sensors to the context aware platform . In other embodiments the provider manager may continue to maintain the context provider in a loaded state to avoid for example frequent loading and unloading of the context provider .

In one embodiment the prior usage patterns may include probability values which indicate a probability of use of the plurality of sensors by the client entities wherein the usage patterns may include frequency values which indicate the frequency of use of the plurality of sensors by the client entities.

An embodiment of the provider API is illustrated in . In one embodiment the provider API comprises a registration interface IProviderRegistration and the context provider to K may register with the context aware platform using the IProviderRegistration interface .

In one embodiment the provider manager may use the context providers to K after the context providers to K get installed and registered with the context aware platform . In one embodiment the installation process may include copying the files onto a memory such as the hard drive and y setting any configuration settings that may be specific to the sensors that the context providers support. After the installation the provider manager may allow the context providers to register with the context aware platform .

In one embodiment the RegisterProvider may be used to indicate when the context provider is installed and ready for use. In one embodiment the RemoveProvider may be used to remove the context provider from the context aware platform which may occur during the uninstalling process i.e. before the files are deleted from the system . In one embodiment the IProviderRegister may be used even while the context engine may not be actively running. In one embodiment the ProviderRegistationInfo interface may be used to describe the context providers which may be registered and the XMLDoc that may be passed in as the RegistrationDetails parameter may describe all the context identifiers supported by the context providers .

In one embodiment the provider manager may use the IProviderControl interface to complete the initialization process and to activate individual identifiers supported by the context providers in addition to getting access to the IProviderData interface. In one embodiment the provider manager may use StartProvider and StopProvider interfaces to complete initialization which may not be done while the context provider is initially initialized. In one embodiment the provider manager may call the IProviderRegistration interface before using the context provider and the IProviderControl interface before unloading the context provider .

In one embodiment the provider manager may use ActivateContext to indicate to the context provider the identifiers that may be used by the context aware platform . In one embodiment the context provider may power ON the platform resources including power to conserve the resources consumed by the sensors . In one embodiment the context providers power ON some of the hardware resources and load some of the software resources to provide information for the hardware and software resources that are activated. In one embodiment after deactivation of the context providers may turn OFF the sensors and unload the unused hardware and software resources. In one embodiment the provider manager may enable the context provider to activate and or deactivate the individual identifiers multiple times during the life span of a single instance of the context providers . In one embodiment the GetProviderData may return a reference to the IProviderData interface which may be used to get the contextual information from the context provider .

In one embodiment the provider manager may use the IProviderData interface to get the contextual information on demand by calling the GetData method. In one embodiment the provider manager may use GetData method frequently and the GetData may be optimized to run quickly. In one embodiment the IProviderData interface may be used to get a reference to the IProviderNotifier interface by calling GetProviderNotifier for asynchronous notification.

In one embodiment the provider manager may use IProviderNotifier interface to register for proactive notifications of data changes that may avoid the need to poll the context provider for changes. In one embodiment the provider manager may instantiate an object that implements IProviderDataObserver such that a pointer to IProviderDataObserver interface may be passed in to RegisterObserver and RemoveObserver to start the event notifications and stop notifications. In one embodiment the context providers may support multiple observers.

In one embodiment while registering if the IProviderNotifier is used the observer object may be notified by the context provider of the data changes using the IProviderDataObserver interface . In one embodiment the context provider may call the EventContextUpdateAvailable to inform the provider manager of the change in the data associated with a ContextName after the previous report provided by the context provider . In one embodiment the control logic may place the data into a queue and return control to the context provider . In one embodiment the queue may be serviced by an internal thread by calling IProviderData GetData to get the latest data associated with a ContextName and to put the new context item into a context store.

In one embodiment the context provider may use EventIdentifierOnline and EventIdentifierOffline objects to notify the provider manager if an identifier supported by the context provider is temporarily unavailable. In one embodiment the identifier may become unavailable for a variety of reasons. For example the sensor may be connected to the platform using a serial or universal serial bus cable and a user may decouple the sensor from the platform . In one embodiment the context provider may report out such an event as EventIdentiferOffline . In one embodiment the context provider may also use EventIdentifierOnline to report out an event of reconnection of the sensor . Decoupling and coupling of the sensor may be caused for example due to loss and establishment of wireless connectivity that may trigger an EventIdentifierOffline and EventIdentifierOnline . While the identifier in the context provider is in the Offline state the provider manager may not call the GetData method to get contextual information.

An embodiment of a synchronous mechanism enabling communication between the context provider and the provider manager is illustrated in . In one embodiment the LoadProvider and UnloadProvider may be implemented by a operating system supported by the context aware platform . In one embodiment the provider manager may call the LoadPovider to load a specific context provider and may call UnloadProvider to unload the earlier loaded context provider . In one embodiment the context providers may be loaded and unloaded and reloaded as determined by the provider manager . In one embodiment the LoadProvider and UnloadProvider are shown outside the line representing to indicate that the LoadProvider and UnloadProvider methods are not a part of the provider API.

In one embodiment the provider manager may call StartProvider method to allow the context provider to perform initialization that may not be performed during initial initialization phase. In one embodiment the provider manager may perform ActivateContext string method which may indicate to the context provider the identifiers that may be used by the context aware platform . In one embodiment the provider manager may call GetData String Location DateTime multiple times to get the contextual information from the context provider . In one embodiment the GetData may return with contextual information of string type location details and date and time details. In one embodiment the multiple calls to the GetData method may be represented by the calls and . In between multiple calls of GetData String Location DateTime method and the provider manager may call DeactivateContext String to deactivate the sensors and may call ActivateContext String to activate the sensors .

In one embodiment the provider manager may then perform the DeactivateContext string method to deactivate the identifiers which may not be used by the context aware platform . In one embodiment the provider manager may then call StopProvider before unloading the context provider . In one embodiment the IProviderControl interface may comprise the methods StartProvider ActivateContext GetData and DeactivateContext and the StopProvider .

An embodiment of an asynchronous mechanism enabling communication between the context provider and the provider manager is illustrated in . In one embodiment the LoadProvider and UnloadProvider may be implemented by a operating system supported by the context aware platform . In one embodiment the provider manager may call the LoadPovider and to load a specific context provider and may call UnloadProvider and to unload the earlier loaded context provider . In one embodiment the context providers may be loaded and unloaded and reloaded as determined by the provider manager . In one embodiment the LoadProvider and and UnloadProvider and are shown outside the line representing to indicate that the LoadProvider and and UnloadProvider and methods are not a part of the provider API.

In one embodiment the provider manager may call StartProvider method to allow the context provider to perform initialization that may not be performed during initial initialization phase. In one embodiment the provider manager may perform ActivateContext stringA method and ActivateContext stringA method which may indicate to the context provider the identifiers that may be used by the context aware platform . In one embodiment the provider manager may call GetProviderNotifier String which may be used for asynchronous data notification. In one embodiment the provider manager may use RegisterObserver ProviderDataObserver method so that a pointer to method may be passed in to RegisterObserver to start the event notifications.

In one embodiment the context provider may call the EventContextUpdateAvailable StringA and EventContextUpdateAvailable StringB to inform the provider manager of the change in the data associated with a ContextName after the previous report provided by the context provider . In one embodiment the context provider may call the EventContextUpdateAvailable StringA and EventContextUpdateAvailable StringB multiple times and depicts that the context provider calls the EventContextUpdateAvailable String thrice and and .

In one embodiment the provider manager may call GetData StringB Location DateTime and GetData StringA Location DateTime multiple times to get the contextual information from the context provider . In one embodiment the GetData may return with contextual information of string type location details and date and time details. In one embodiment the multiple calls to the GetData method may be represented by the calls and .

In one embodiment the provider manager may use RemoveObserver IProviderObserver such that a pointer to IProviderDataObserver interface may be passed in to RemoveObserver to stop notifications. In one embodiment the provider manager may then perform the DeactivateContext stringA method and DeactivateContext stringA method to deactivate the identifiers which may not be used by the context aware platform . In one embodiment the provider manager may then call StopProvider before unloading the context provider using UnloadProvider . In one embodiment the ActivateContext StringA and ActivateContext StringB may respectively activate the sensors A and B for example. In one embodiment the In one embodiment the DeactivateContext StringA and DeactivateContext StringB may respectively deactivate the sensors A and B for example.

In between UnloadProvider and LoadProvider the provider manager and the context provider may not respectively call the GetData and EventContextUpdateAvailable methods. In one embodiment after the context provider may be reloaded by performing LoadProvider and the sequence of events such as the StartProvider ActivateContext StringA ActivateContext StringB GetProviderNotifier StringA RegisterObserver IProviderDataObserver EventContextUpdateAvailable StringA GetData StringA Location DateTime RemoveObserver IProviderObserver DeactivateContext StringA and DeactivateContext StringB and StopProvider may be called before unloading UnloadProvider the context provider .

Referring to a computer system supporting a context aware platform may comprise a processor which may include a single instruction multiple data SIMD reduced instruction set RISC and such other similar general purpose processors and a graphics processor unit GPU . The processor in one embodiment may process a sequence of instructions to provide and execute the codes for the context providers the provider manager and the clients which may be stored in machine readable storage medium . However the sequence of instructions may also be stored in the memory or in any other suitable storage medium.

The processor that operates the computer system may be one or more processor cores coupled to logic . In one embodiment the processor may comprise a central processing unit and a memory subsystem. In one embodiment the context providers and the provider manager may together provide a unified approach to dynamically load and or unload context providers which may activate and or deactivate sensors while conserving the resources such as the power memory space consumed by the sensors and the context providers coupling the sensors to the context aware platform in a loaded state.

The logic for example could be chipset logic in one embodiment. The logic is coupled to the memory which can be any kind of storage including optical magnetic or semiconductor storage. The I O devices may allow the computer system to interface with the devices such as the sensors A to N.

Certain features of the invention have been described with reference to example embodiments. However the description is not intended to be construed in a limiting sense. Various modifications of the example embodiments as well as other embodiments of the invention which are apparent to persons skilled in the art to which the invention pertains are deemed to lie within the spirit and scope of the invention.

