---

title: Defining a single annotation model
abstract: The present invention defines a single Java annotation model. A method in accordance with an embodiment includes: receiving a Java annotation declaration in a Java annotation model; receiving a Java annotation definition in the Java annotation model; receiving domain specific context rules in the Java annotation model; and providing access to combined meta-data information derived from the Java annotation declaration, the Java annotation definition, and the domain specific context rules through the Java annotation model.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08271942&OS=08271942&RS=08271942
owner: International Business Machines Corporation
number: 08271942
owner_city: Armonk
owner_country: US
publication_date: 20080506
---
The present application is related to copending and commonly owned U.S. application Ser. No. 12 043 349 entitled POPULATING INFORMATION CONTAINED IN JAVA ANNOTATIONS INTO EXISTING EMF MODELS filed on Mar. 6 2008 the entire contents of which are herein incorporated by reference.

The present invention relates to a Java Annotations. Specifically the present invention relates to the aggregation and access of meta data information that comes from multiple different sources.

Java annotations are used to represent meta data directly in the Java source code Java and all Java based trademarks are trademarks of Sun Microsystems Inc. in the United States other countries or both. This meta data often represents a certain domain model. Although Java annotations are specified in the Java source code only part of the relevant meta data information can be obtained directly from the annotation declaration in the source. Such relevant meta data information delivered by Java annotations may come from multiple sources 1 annotation declaration in the source code including a explicit value of annotation attributes and b location of the annotation within the source file and 2 annotation implementation meta data. This contains information with regard to a names of all annotation attributes including the ones that do not show up explicitly in the Java source b Java element scope in which given annotation is relevant type method field etc c Information about which annotation attributes are required and d default values of the annotation attributes. A third source 3 of data is domain specific information that provides rules of interpretation based on the context in which the annotation appears and semantic information provided by the domain. These can a determine implied values for Java annotation attributes depending on the location within Java source and b determine implied annotations based on the existence of other Java annotations. Currently there is no single model which would aggregate all this information together and provide user with single point of access to all of this information

The present invention defines a single Java annotation model that allows users to access information that comes from Java annotation declaration Java annotation implementation meta data and the context and semantic information specific to a particular domain. From the a developer s perspective obtaining information from the single model through the well defined set of APIs Application Program Interfaces provides a significant advantage over existing ways of obtaining the same information reading domain specifications to determine domain specific annotation behavior introspecting the annotation definition types and parsing the code . This combined annotation model serves as a basis for implementing rich tooling which can provide users with the ability to visualize and manage information provided through Java annotations.

A first aspect of the present invention is directed to a method for providing access to meta data information for Java annotations comprising receiving a Java annotation declaration in a Java annotation model receiving a Java annotation definition in the Java annotation model receiving domain specific context rules in the Java annotation model and providing access to combined meta data information derived from the Java annotation declaration the Java annotation definition and the domain specific context rules through the Java annotation model.

A second aspect of the present invention provides a system for providing access to meta data information for Java annotations comprising a module for receiving a Java annotation declaration in a Java annotation model a module for receiving a Java annotation definition in the Java annotation model a module for receiving domain specific context rules in the Java annotation model and a module for providing access to combined meta data information derived from the Java annotation declaration the Java annotation definition and the domain specific context rules through the Java annotation model.

A third aspect of the present invention is directed to a computer readable medium containing a program product for providing access to meta data information for Java annotations the computer readable medium comprising program code for causing a computer system to receive a Java annotation declaration in a Java annotation model receive a Java annotation definition in the Java annotation model receive domain specific context rules in the Java annotation model and provide access to combined meta data information derived from the Java annotation declaration the Java annotation definition and the domain specific context rules through the Java annotation model.

A fourth aspect of the present invention is directed to a method for deploying an application for providing access to meta data information for Java annotations comprising providing a computer infrastructure being operable to receive a Java annotation declaration in a Java annotation model receive a Java annotation definition in the Java annotation model receive domain specific context rules in the Java annotation model and provide access to combined meta data information derived from the Java annotation declaration the Java annotation definition and the domain specific context rules through the Java annotation model.

A fifth aspect of the present invention is directed to a method for providing access to meta data information for Java annotations comprising a memory medium having instructions a bus coupled to the memory medium and a processor coupled to the bus that when executing the instructions causes the data processing system to receive a Java annotation declaration in a Java annotation model receive a Java annotation definition in the Java annotation model receive domain specific context rules in the Java annotation model and provide access to combined meta data information derived from the Java annotation declaration the Java annotation definition and the domain specific context rules through the Java annotation model.

The drawings are not necessarily to scale. The drawings are merely schematic representations not intended to portray specific parameters of the invention. The drawings are intended to depict only typical embodiments of the invention and therefore should not be considered as limiting the scope of the invention. In the drawings like numbering represents like elements.

The present invention defines a single Java annotation model that allows a user to access information that comes from a Java annotation declaration Java annotation implementation meta data and the context and semantic information specific to a particular domain. From the a developer s perspective obtaining information from the single model through the well defined set of APIs provides a significant advantage over existing ways of obtaining the same information reading domain specifications to determine domain specific annotation behavior introspecting the annotation definition types and parsing the code . This combined annotation model serves as a basis for implementing rich tooling which can provide users with the ability to visualize and manage information provided through Java annotations.

Visually the solution can be represented as shown in . As depicted Java annotation declaration s A Java annotation definition s B and domain specific context rule s C collectively referred to as meta data information are received collected and or aggregated by annotation model which is developed and provided under the present invention as described below. This meta data information can be viewed by an end user using a set at least one of APIs for the annotation model . This solution can also implement a set of interfaces e.g. graphical that provide a rich environment for viewing and or accessing the meta data information. The provision of annotation model and the various API calls that can be made will now be described in greater detail.

There are three major model artifacts that represent an annotation model AnnotatedClassInfo object which represents the set of annotations in the class AnnotationInfo object which provides a unified view of all the meta data information for a given Java annotation and AnnotationAttributeInfo which provides information about specific annotation attribute. Each of these objects are described in greater detail below.

The AnnotatedClassInfo object represents the collection of annotations defined within a certain Java class. These annotations can be specified directly in the source or implied to be a part of the class. An example of an implied annotation in the JPA domain if Entity annotation is defined on the Java type level it implies the Column annotations on the private fields of this Java type.

public List getAnnotations This method returns the list of all the AnnotationInfo objects that correspond to annotations in the class.

public List getDeclaredAnnotations This method returns the list of AnnotationInfo objects that correspond to the Java annotations declared in the Java code for given Java type API calls that retrieve information defined by specific domain rules.

public List getImpliedAnnotations This method returns the list of AnnotationInfo objects that correspond to the implied Java annotations Java annotations that are not actually present in the Java source code but are implied to be there based on domain specific rules and depending on other Java annotations present in the code .

The AnnotationInfo object contains information specific to certain Java annotation located at certain Java element. This information can be accessed through the following set of APIs which retrieve information defined directly in the Java source 

public List getDeclaredAttributes Returns the list of AnnotationAttributeInfo objects which correspond to the annotation attributes that are explicitly defined in the source code.

public int getOffset If source level information is available model is derived from the Java source as oppose to the binary class this method returns the offset of the given Java annotation within the Java source file. If the source level information is not available 1 is returned.

public JavaElementInfo getParentJavaElementInfo Returns information about the Java element on which given Java annotation is defined.

public List getAllAttributes Returns the list of AnnotationAttributeInfo objects which correspond to all attributes defined for the given Java annotations.

public List getScopes Returns the list of java element scopes in which a given Java annotation is relevant e.g. method scope type scope private member scope etc .

public boolean isImpliedAnnotation Returns true if given model object does not correspond to Java annotation explicitly defined in the Java source code but is implied from the domain specific context rules based on other Java annotations defined in the source code.

public AnnotationAttributeInfo getAttribute String attributeName Utility Method that returns AnnotationAttributeInfo object that corresponds to the attribute with provided name. If no such attribute exists for given Java annotation NULL is returned.

The AnnotationAttributeInfo object contains information relevant to the particular Java annotation attribute and includes several API calls.

public Object getValue This method returns Object if the value of the attribute is explicitly defined in the code or null if this attribute was not explicitly defined in the Java source.

public boolean isDeclared Returns true if the value of this attribute is explicitly defined in the source code.

public Annotation Info getParentAnnotation Returns Annnotation Info object within which given annotation attribute object is defined.

public Object getDefaultValue Returns Object if Java annotation implementation class defines some default value for this attribute. Returns null otherwise.

public boolean isRequired Returns true if corresponding Java annotation implementation class marks given attribute as required.

public Object getImpliedValue This method returns Object if certain domain rules are defined with respect to the given attribute in context of the Java element on which corresponding annotation is defined when no attribute is explicitly present in the source code e.g. in EJB3 domain if Stateless annotation is defined on the type level of the Java class and the attribute name of this annotation is not explicitly defined in the code it is implied that the value of the name attribute is the name of the Java type . Returns NULL if no such rules have been defined.

This solution can be implemented in an Eclipse environment. Information from the three sources outlined above can be obtained by the model implementation by following means.

API calls that retrieve information defined directly in the Java source This information can be retrieved by simple code parsing or by using some existing development platform APIs. For example an implementation of this set of APIs can be based on the Java annotations support provided by Eclipse JDT framework starting from Eclipse 3.4 . In particular by using IAnnotation and IMemberValuePair APIs provided by Eclipse Java Tools framework.

API calls that retrieve information defined in the Java annotation definition Implementation of this set of APIs can be based on resolving the Java class that defines given Java annotation and obtaining corresponding data from the resolved class. The way a Java annotation definition class is resolved can be different it can be some simple Java introspection call or some call on the underlying development platform. For example an Eclipse JDT framework can be used to implement that functionality underneath the covers.

API calls that retrieve information defined by specific domain rules Context and semantic information provided by the domain is obtained through an extension point provided by the model. Developers using this model for a particular domain can implement an extension point that provides domain specific rules that calculate annotation meta data information based on the context in which give annotation is used. A discussion of extension points and the information obtained using them follows.

Domain owners implement this extension point by providing a callback class that can be called to calculate the implied value of the given annotation attribute in given Java element context. Each provided class extends the following abstract class 

Domain owners can implement this extension point by providing a callback class that can be called to determine if some Java annotation implies the presence of the other Java annotations in the source in accordance with domain specific rules. Each provided class extends the following abstract class defined in the framework 

As can be seen from this interface developers who define domain specific behavior by implementing this interface are provided with annotation info object and Java element object for which context is wanted to get the list of implied annotations. The extension can be declared in the plugin.xml as shown in the following example 

In this example JPA domain owners provide a class that returns the list of implied annotations for Entity annotation The information defined through these extensions is obtained from the model by calling 

In this method the list of providers that registered to provide the list of implied annotations for different Java elements is examined. After that corresponding call back classes are invoked. If a non NULL value is returned it is added to the result list. The returned list is of all implied annotations for all the Java elements in the given Java class

 1 The framework code determines if there are any annotated classes in a user s project and if this is the case an AnnotatedClassInfo object is created for each such class.

 1 The framework code listens to the Java source modification events and updates the model correspondingly this makes sure that model provides correct information all the time.

Under this solution a rich Eclipse view such as that shown in can be provided to represent the annotation meta data from all three sources. Such a view can help users to easily visualize and manage information that comes from all three sources. This view is for EJB3 Stateless annotation.

Tool developers and or others can access the annotation model through programmatic interfaces and retrieve pieces of information that they are particularly interested in. This gives them great flexibility in obtaining Java annotation information that is particularly relevant to their specific tasks.

Developers using the annotation model do not need to know about the specifics of the information retrieval. They are able to use the well defined APIs on the model classes to get all the required information. This way of obtaining the meta data defined by Java annotation is more simple user friendly and efficient than existing means such as code parsing annotation definition class introspection and determining the domain specific behavior info from the domain specification docs of obtaining the same information. Using unified annotation model also provides such benefits as 

Referring now to a computerized implementation of the present invention is shown. As depicted implementation includes computer system deployed within a computer infrastructure . This is intended to demonstrate among other things that the present invention could be implemented within a network environment e.g. the Internet a wide area network WAN a local area network LAN a virtual private network VPN etc. or on a stand alone computer system. In the case of the former communication throughout the network can occur via any combination of various types of communications links. For example the communication links can comprise addressable connections that may utilize any combination of wired and or wireless transmission methods. Where communications occur via the Internet connectivity could be provided by conventional TCP IP sockets based protocol and an Internet service provider could be used to establish connectivity to the Internet. Still yet computer infrastructure is intended to demonstrate that some or all of the components of implementation could be deployed managed serviced etc. by a service provider who offers to implement deploy and or perform the functions of the present invention for others. Although infrastructure depicts a single computer system this need not be the case. For example the present invention can be implemented using more than one computer system either in and or outside of computer infrastructure. For example end user could utilize computer system a different computer system within infrastructure and or a computer system outside of infrastructure not shown .

As shown computer system includes a processing unit a memory a bus and device interfaces . Further computer system is shown having external devices and storage system that communicate with bus via device interfaces . In general processing unit executes computer program code such as information program having modules stored in memory and or storage system . While executing computer program code processing unit can read and or write data to from memory storage system and or device interfaces . Bus provides a communication link between each of the components in computer system . Although not shown computer system could also include I O interfaces that communicate with one or more external devices such as a kiosk a checkout station a keyboard a pointing device a display etc. one or more devices that enable a user to interact with computer system and or any devices e.g. network card modem etc. that enable computer system to communicate with one or more other computing devices.

Computer infrastructure is only illustrative of various types of computer infrastructures for implementing the invention. For example in one embodiment computer infrastructure comprises two or more computing devices e.g. a server cluster that communicate over a network to perform the various process of the invention. Moreover computer system is only representative of various possible computer systems that can include numerous combinations of hardware. To this extent in other embodiments computer system can comprise any specific purpose computing article of manufacture comprising hardware and or computer program code for performing specific functions any computing article of manufacture that comprises a combination of specific purpose and general purpose hardware software or the like. In each case the program code and hardware can be created using standard programming and engineering techniques respectively. Moreover processing unit may comprise a single processing unit or be distributed across one or more processing units in one or more locations e.g. on a client and server. Similarly memory and or storage system can comprise any combination of various types of data storage and or transmission media that reside at one or more physical locations. Further device interfaces can comprise any module for exchanging information with one or more external devices. Still further it is understood that one or more additional components e.g. system software math co processing unit etc. not shown in can be included in computer system .

Storage system can be any type of system capable of providing storage for information under the present invention. To this extent storage system could include one or more storage devices such as a magnetic disk drive or an optical disk drive. In another embodiment storage system includes data distributed across for example a local area network LAN wide area network WAN or a storage area network SAN not shown . In addition although not shown additional components such as cache memory communication systems system software etc. may be incorporated into computer system .

Shown in memory of computer system is information program which includes a set of modules . The module s generally provide the functions of the present invention as described herein for receiving meta data information A C and providing access thereto via a set of APIs and rich tooling. It should be understood that information program can actually comprise one or more programs that are integrated and or or work in conjunction with one another. In any event the set of modules is configured to perform all functions described herein. While shown and described herein as an approach to provide access to meta data information it is understood that the invention further provides various alternative embodiments. For example in one embodiment the invention provides a computer readable useable medium that includes computer program code to enable a computer infrastructure to provide access to meta data information. To this extent the computer readable useable medium includes program code that implements each of the various process of the invention. It is understood that the terms computer readable medium or computer useable medium comprises one or more of any type of physical embodiment of the program code. In particular the computer readable useable medium can comprise program code embodied on one or more portable storage articles of manufacture e.g. a compact disc a magnetic disk a tape etc. on one or more data storage portions of a computing device such as memory and or storage system e.g. a fixed disk a read only memory a random access memory a cache memory etc. and or as a data signal e.g. a propagated signal traveling over a network e.g. during a wired wireless electronic distribution of the program code .

In another embodiment the invention provides a business method that performs the process of the invention on a subscription advertising and or fee basis. That is a service provider such as a Solution Integrator could offer to provide access to meta data information. In this case the service provider can create maintain support etc. a computer infrastructure such as computer infrastructure that performs the process of the invention for one or more customers. In return the service provider can receive payment from the customer s under a subscription and or fee agreement and or the service provider can receive payment from the sale of advertising content to one or more third parties.

In still another embodiment the invention provides a computer implemented method to provide access to meta data information. In this case a computer infrastructure such as computer infrastructure can be provided and one or more systems for performing the process of the invention can be obtained e.g. created purchased used modified etc. and deployed to the computer infrastructure. To this extent the deployment of a system can comprise one or more of 1 installing program code on a computing device such as computer system from a computer readable medium 2 adding one or more computing devices to the computer infrastructure and 3 incorporating and or modifying one or more existing systems of the computer infrastructure to enable the computer infrastructure to perform the process of the invention.

As used herein it is understood that the terms program code and computer program code are synonymous and mean any expression in any language code or notation of a set of instructions intended to cause a computing device having an information processing capability to perform a particular function either directly or after either or both of the following a conversion to another language code or notation and or b reproduction in a different material form. To this extent program code can be embodied as one or more of an application software program component software a library of functions an operating system a basic device system driver for a particular computing and or device and the like.

A data processing system suitable for storing and or executing program code can be provided hereunder and can include at least one processor communicatively coupled directly or indirectly to memory element s through a system bus. The memory elements can include but are not limited to local memory employed during actual execution of the program code bulk storage and cache memories that provide temporary storage of at least some program code in order to reduce the number of times code must be retrieved from bulk storage during execution. Input output or device devices including but not limited to keyboards displays pointing devices etc. can be coupled to the system either directly or through intervening device controllers.

Network adapters also may be coupled to the system to enable the data processing system to become coupled to other data processing systems remote printers storage devices and or the like through any combination of intervening private or public networks. Illustrative network adapters include but are not limited to modems cable modems and Ethernet cards.

The foregoing description of various aspects of the invention has been presented for purposes of illustration and description. It is not intended to be exhaustive or to limit the invention to the precise form disclosed and obviously many modifications and variations are possible. Such modifications and variations that may be apparent to a person skilled in the art are intended to be included within the scope of the invention as defined by the accompanying claims.

