---

title: Method of assigning resources to fulfill a service request by a programming model abstraction layer at a data center based at least in part on a reference of the requested resource class indicative of an abstract amount of resources
abstract: An exemplary method includes hosting a service at a data center, the service relying on at least one software component developed according to a programming model and the data center comprising a corresponding programming model abstraction layer that abstracts resources of the data center; receiving a request for the service; and in response to the request, assigning at least some of the resources of the data center to the service to allow for fulfilling the request wherein the programming model abstraction layer performs the assigning based in part on reference to a resource class in the at least one software component, the resource class modifiable to account for changes in one or more resources of the data center. Various other devices, systems and methods are also described.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08443370&OS=08443370&RS=08443370
owner: Microsoft Corporation
number: 08443370
owner_city: Redmond
owner_country: US
publication_date: 20080826
---
Large scale data centers are a relatively new human artifact and their organization and structure has evolved rapidly as the commercial opportunities they provide has expanded. Typical modern data centers are organized collections of clusters of hardware running collections of standard software packages such as web servers database servers etc. interconnected by high speed networking routers and firewalls. The task of organizing these machines optimizing their configuration debugging errors in their configuration and installing and uninstalling software on the constituent machines is largely left to human operators.

Web services e.g. software as a service SaaS supported by data centers are also rapidly evolving for example a company might first offer a search service and then an email service and then a Map service etc. . Such services rely on applications that are distributed to and hosted by one or more data centers. A service operator and a data center operator typically enter into an agreement for specific hardware resources e.g. number of processors disk space memory bandwidth etc. . A typically arrangement dedicates a certain number of servers and disk space to the service in a manner where the applications that provide the service live on the dedicated servers. When conditions change this type of arrangement incurs a significant management overhead for the data center and service operators. For example a data center operator may upgrade various hardware components that affect execution of the service s applications. In such an example hardware changes can generate ripples that force the service operator to revise or redevelop its applications to account for the changes to thereby ensure an acceptable level of service to the service s end users.

Various exemplary technologies described herein pertain to architectures and programming models that can facilitate application development hosting and performance.

An exemplary method includes hosting a service at a data center the service relying on at least one software component developed according to a programming model and the data center comprising a corresponding programming model abstraction layer that abstracts resources of the data center receiving a request for the service and in response to the request assigning at least some of the resources of the data center to the service to allow for fulfilling the request wherein the programming model abstraction layer performs the assigning based in part on reference to a resource class in the at least one software component the resource class modifiable to account for changes in one or more resources of the data center. Various other devices systems and methods are also described.

An exemplary programming model allows a developer to develop applications e.g. for Web services that target a programming model abstraction layer of a data center. Such a programming model abstraction layer can supervise execution of the application using data center resources. Accordingly a developer can develop applications to be hosted by a data center without having to know certain specifics about the data center s servers storage devices etc.

As described herein an exemplary programming model and associated abstraction layer abstract data center resources and thereby insulate application developers from various aspects of data center resources and their operation maintenance etc. Such a system can also facilitate negotiations between service and data center operators enhance quality of service and reduce costs.

For the conventional approach in the development stage a developer selects and develops an application according to a programming model . As shown the programming model includes various classes that may be relied on to perform specific functions in the developed application . The classes may target an operating system OS that operates a computer . As an alternative the classes may target a runtime engine or virtual machine which is a software layer that may exist between the application and the OS .

In a deployment stage a service operator deploys the developed application to a data center . As shown the data center includes various resources . . . . During the deployment stage a data center operator typically assigns the application to specific resources. As indicated in the hosting stage the dedicated resources host the application .

Once hosted in a usage stage a user may request use of the application i.e. a service via a user computer . Upon receipt of the request by the data center the request is satisfied by execution of the application on the dedicated resources .

As indicated by a Host Cost block in the conventional approach the service operator is billed for use of the resources which are exclusively reserved for the service.

In the conventional approach if the data center operator performs a hardware upgrade that impacts the resources then the impact of this change may be felt by the service operator. For example if the data center operator upgrades server hardware and or software the application may not execute properly or as efficiently as possible. In such a situation the service operator may not be informed directly by the data center operator of faults or delays in service to end users. Instead the service operator may receive complaints from disgruntled end users. In turn the service operator may complain to the data center operator and thereby stress the relationship and even call for renegotiation of host costs or assert allegations of breach of contract. While a service level agreement between the service operator and the data center operator may account for service disruptions due to upgrades ultimately the goal of both parties is to provide acceptable service.

In contrast the exemplary approach relies on an exemplary programming model and associated programming model abstraction layer that shift various roles and duties to a data center operator with a concomitant obligation placed on a service provider. As shown in in the development stage a developer develops an exemplary application using an exemplary programming model while in the deployment hosting and usage stages and an exemplary data center relies on the programming model abstraction layer to manage resources for the application .

In the exemplary approach the programming model includes classes that can be appropriated placed in application code for the application . The classes include various classes specific to resource management by the programming model abstraction layer . For example the classes may include a cost class that limits a cost per unit time a CPU class that sets a minimum amount of CPU power per request a memory class that sets a minimum amount of RAM per request etc. Hence the programming model may include one or more classes amongst the classes that set some requirements on a per request basis. As the number of requests may change or be unknown this approach allows the service operator and the data center operator some flexibility in negotiations i.e. such an approach can alleviate the need to dedicate resources to a service operator.

As described herein classes specific to management of the application in the data center may be centralized e.g. appear as a particular section of code or distributed throughout the code for the application . Further such classes may be relied on once e.g. during an initial assessment by the abstraction layer or multiple times e.g. periodically or whenever conditions change in the data center . For example a portion of code for the application may call for specific functionality followed by a statement that references a resource class in the set of classes which for example specifies an approximate memory for the functionality given a typical user request.

In the deployment stage upon receipt of the application the programming model abstraction layer may execute all statements for resource classes to determine or estimate resource requirements and nature of resources required responsive to each user request. Such an analysis may also help the data center operator determine a cost for hosting the application as indicated by the Host Cost block which refers to a model based cost approach.

In a hosting stage the programming model abstraction layer may rely on resource classes to assign hosting characteristics to the application . In a usage stage as there may be no requirement to host the application on specific dedicated resources in the data center the hosting characteristics may be relied on when a request is received by the data center to thereby provide available resources for execution of the application to meet the request. Depending on the hosting characteristics the available resources may be low cost high cost etc. resources that meet expectations of the service operator e.g. as programmed directly into the code during the development stage . In such an example the available resources may be determined by the data center operator which allows more flexibility in management of resources e.g. for lowest cost for maintenance etc. .

In the usage stage during actual execution of the application resource statements may be ignored or occasionally tagged and benchmarked against actual resource demand. The programming model abstraction layer may store such information in a log for use in managing the application or in managing one or more other applications.

Overall the exemplary approach allows a data center operator to manage its obligations with respect to a service without necessarily being bound by the conventional inflexible dedicated resource approach .

As described herein an exemplary method can include hosting a service at a data center the service relying on at least one software component developed according to a programming model and the data center comprising a corresponding programming model abstraction layer that abstracts resources of the data center see e.g. the programming model the application the data center and the abstraction layer of receiving a request for the service see e.g. the usage stage of and in response to the request assigning at least some of the resources of the data center to the service to allow for fulfilling the request where the programming model abstraction layer performs the assigning based in part on reference to a resource class in the at least one software component the resource class modifiable to account for changes in one or more resources of the data center see e.g. the classes of the programming model of . For example the resource class may be a processor resource class a memory resource class a bandwidth resource class or a class for another type of resource.

As described in more detail below a programming model abstraction layer may consider available resources in a data center as of a time of receipt of the request when assigning resources to fulfill the request. In various examples at least some of the resources assigned in response to a first request for a service may differ from resources assigned in response to a second request for the service. For example such a difference may depend on resource utilization in the data center at the first time and at the second time. Further such a difference may be in actual resources virtual resources or actual and virtual resources.

As mentioned an exemplary programming model and programming model abstraction layer can insulate services from changes to resources. For example instead of revising code for the service a data center operator may modify a resource class based on a change to a hardware resource or other resource of the data center. In such a manner code for the service e.g. a software component of the service can execute using in part the changed hardware resource or other resource without requiring any modification. This approach can effectively relieve a service operator from having to deal with changes to data center resources. For example an exemplary programming model and programming model abstraction layer approach can insulate a software component of a service from a change in number of servers in the data center from a change in type of processors in the data center etc.

As described herein an exemplary method can include providing a resource class for use in assigning a type of physical resource to a service hosted by a data center in response to a request for the service executing a software component using the type of physical resource changing a characteristic of the type of physical resource modifying the resource class and executing the software component using the changed type of physical resource wherein the modifying the resource class insulates the software component from the changing.

As described further below a service may rely on another service hosted by the data center or even externally hosted. In such situations a service level agreement may exist for the other service. An exemplary method can include performing event tracing during execution of the other service to collect information sufficient to determine if the other service complied with one or more terms of the service level agreement. While event tracing is mentioned with respect to service level agreements it may be used in one or more other contexts as well e.g. according to one or more statements in a software component of a service .

The exemplary approach of may be considered an architecture for a service where the architecture includes a programming model and a corresponding programming model abstraction layer for implementation by a data center and a service developed according to the programming model and hosted by the data center where the programming model abstraction layer assigns at least some resources of the data center to the service in response to a request for the service for example based in part on reference to a resource class in at least one software component of the service the resource class modifiable to account for changes in one or more resources of the data center.

As shown in the example of the two server side components and of the application are hosted by the data center and registered with the programming model abstraction layer . Further the application is hosted by the data center and registered with the programming model abstraction layer . Hence the programming model abstraction layer may already be aware of a relationship between the application and the application .

Also included in the data center is a event tracing ET module which may rely on various hardware and or software to trace events in the data center . For example the ET module may communicate with the resources and or the virtualization layer to gather information as to an order of events for a given request. Consider a user issuing a request from the client side component of the application via the user device . Upon receipt of the issued request by the programming model abstraction layer resources are assigned to allow for execution of the components and as well as the application . The programming model abstraction layer may be aware of the service level agreement for the application and take this into account when assigning resources e.g. to ensure compliance with the SLA .

As indicated by an event plot of component application versus time based on data collected by the event tracing module the component executed first using assigned virtual layer resource followed by execution of the application using assigned actual resource which was followed by execution of the component using assigned virtual layer resource . Between each of these executions a time gap exists that represents or at least includes a communication time for communication of information e.g. from one component application to another .

As the service provided by the application may be requested more frequently than the components and the programming model abstraction layer may treat it differently than the components and . For example the application may be deemed to have characteristics that bias its assignment to more persistent actual resources as opposed to virtual layer resources which may be created and destroyed on an as needed basis. Where the application relies on external input such as a satellite system then certain actual resources may be permanently linked to the external input and form a set of resources that can execute the application .

As may be appreciated where applications or components are interdependent the programming model abstraction layer may account for such interdependencies and call for event tracing using one or more event tracing modules . Event tracing information may be further used to determine whether a service level agreement has been met. In an exemplary programming model classes optionally include one or more classes that call for event tracing. Such event tracing may be occur independent of a programming model abstraction layer or may be managed by a programming model abstraction layer. While event tracing introduces some amount of overhead the information gathered can be used for any of a variety of beneficial purposes to improve a system e.g. to improve performance troubleshoot lower cost validate service level etc. .

The code includes two components and . The component parses a map request as received from a user via a user device that may have a client side component installed. The component performs various tasks including calling an external application . As the SLA ID 34256 pertains to use of the external application the developer of the application code has inserted a PMAL.ET statement that calls for event tracing by a data center. The event tracing can be used to collect information as to performance of the external application which may be hosted by the data center to determine whether one or more terms of the SLA are met i.e. to determine if the actual level of service provided meets a service level specified in the service level agreement .

The component generates a graphic for transmission to the client side component of a user s device. In addition it provides for insertion of an advertisement in the generated graphic. As described herein the PMAL.Advertising reference of the code may cause the PMAL to associate the component with an advertising placement service. Hence during execution of the code in response to a request by a user the PMAL ensures that an advertisement is received by the component .

With respect to generation of a graphic the component requires a certain amount of memory and CPU resources. To assist the PMAL in managing and assigning resources to the application component the code references a PAML.Mem class and a PMAL.CPU class associated with one or more memory and CPU intensive statements e.g. generate bitmap .

While conventional techniques exist to analyze application code to determine the amount of resources required for execution such post hoc techniques can be cumbersome to implement. Instead the resources classes referenced in the component can affirmatively direct the PMAL to assign resources at an approximate level as estimated by the developer of the application code . In essence this shifts the burden to the operator of the service provided by the application code whereby the operator states to perform this task I would like about X memory and Y CPU resources . In turn the PMAL can assign resources in whatever manner it deems appropriate to manage the service operator s needs e.g. with respect to users and the operational needs of the data center e.g. to optimize data center efficiency .

Given the code and its resource references the PMAL may estimate a cost per request and transmit this estimate to a service operator that operates a service provided via execution of the application code . Such an approach facilitates data center management and can alleviate a need for negotiating resource costs and dedication of resources. Such an approach provides a business model for deploying hosting and using services and can even integrate advertising and account for advertising revenue e.g. payments to a service operator hosting discounts for services that support ads etc. .

In the example of a developer may reference certain classes with respect to inputs from a user of the application . For example if X 3 where X equals terms then assign resources to execute multiple copies of a component of the application . As described herein various opportunities exist to facilitate use of parallel processing. Such an approach can be advantageous to both a service operator and a data center operator as a data center operator typically wants to maintain full usage of available resources and doing so typically speeds service time. For example where a window of opportunity exists upon receipt of a user request to use say four available blades then the data center should take full advantage this opportunity.

As described herein an exemplary programming mode and associated programming model abstraction layer can act dynamically to enhance both user experience and data center performance and utilization. Conventional approaches are restrained when a service has dedicated resources which are typically over specified. In turn resources are often in waiting. Costs associated with such conventional approaches are passed along to one or more parties often in a manner that confounds solution. The exemplary approach described herein consolidates various aspects of data center and service operation which in turn facilitates synergistic solutions by making adjustments to the programming model and or the programming model abstraction layer. As mentioned such an approach can help decouple users and service operators from day to day data center infrastructure maintenance and upgrades.

Where a data center includes event tracing technology information collected via event tracing can facilitate resource acquisition and de acquisition e.g. provisioning tasks . Further event tracing can allow for more accurate cost assessments benchmarking and decisions as to whether service level agreements are met.

While various examples are shown with respect to a single data center a service operator may deploy applications to multiple data centers. As described herein it is beneficial to the service operator and operator or operators of the multiple to rely on essentially the same programming model with appropriate variations occurring in the programming model abstraction layer to account for physical difference between the data centers. In such a manner a developer is not burdened with differences between data centers.

For a service operator that intends to expand services via some interrelated applications or components an exemplary programming model abstraction layer can facilitate the expansion as the overall approach is inherently more scalable than a conventional approach that requires negotiation for increase in resources whether driven by an operator change to a service or by an increase in user demand for service s .

In a very basic configuration computing device typically includes at least one processing unit and system memory . Depending on the exact configuration and type of computing device system memory may be volatile such as RAM non volatile such as ROM flash memory etc. or some combination of the two. System memory typically includes an operating system one or more program modules and may include program data . The operating system include a component based framework that supports components including properties and events objects inheritance polymorphism reflection and provides an object oriented component based application programming interface API such as that of the .NET Framework manufactured by Microsoft Corporation Redmond Wash. The device is of a very basic configuration demarcated by a dashed line . Again a terminal may have fewer components but will interact with a computing device that may have such a basic configuration.

Computing device may have additional features or functionality. For example computing device may also include additional data storage devices removable and or non removable such as for example magnetic disks optical disks or tape. Such additional storage is illustrated in by removable storage and non removable storage . Computer storage media may include volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. System memory removable storage and non removable storage are all examples of computer storage media. Computer storage media includes but is not limited to RAM ROM EEPROM flash memory or other memory technology CD ROM digital versatile disks DVD or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can be accessed by computing device . Any such computer storage media may be part of device . Computing device may also have input device s such as keyboard mouse pen voice input device touch input device etc. Output device s such as a display speakers printer etc. may also be included. These devices are well know in the art and need not be discussed at length here.

Computing device may also contain communication connections that allow the device to communicate with other computing devices such as over a network. Communication connections are one example of communication media. Communication media may typically be embodied by computer readable instructions data structures program modules etc. Communication may occur via wire e.g. a wired network a direct wired connection etc. or wirelessly e.g. acoustic RF infrared and other wireless transmission .

Although the subject matter has been described in language specific to structural features and or methodological acts it is to be understood that the subject matter defined in the appended claims is not necessarily limited to the specific features or acts described above. Rather the specific features and acts described above are disclosed as example forms of implementing the claims.

