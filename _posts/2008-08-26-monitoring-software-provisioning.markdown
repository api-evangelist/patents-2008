---

title: Monitoring software provisioning
abstract: A provisioning server can actively monitor the software provisioning processes being performed on a target machine to determine the status and integrity of the provisioning processes and notify an administrator or user of the status and integrity. The provisioning server can be configured to include a monitoring module and a message module. The monitoring module can be configured to monitor software provisioning processes being performed on a target machine and determine the status and integrity of the provisioning processes. The message module can be configured send notification to the administrator or user of the status and integrity of the provisioning processes.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09477570&OS=09477570&RS=09477570
owner: Red Hat, Inc.
number: 09477570
owner_city: Raleigh
owner_country: US
publication_date: 20080826
---
Software provisioning is the process of selecting a target machine such as a server loading the appropriate software operating system device drivers middleware and applications and customizing and configuring the system and the software to make it ready for operation. Software provisioning can entail a variety of tasks such as creating or changing a boot image specifying parameters e.g. IP address IP gateway to find associated network and storage resources and then starting the machine and its newly loaded software. Typically a system administrator will perform these tasks using various tools because of the complexity of these tasks. Unfortunately there is a lack of provisioning control tools that can adequately integrate and automate these tasks.

Typically once software provisioning processes have begun for a target machine the system administrator cannot determine if the software provisioning processes are executing properly unless the administrator examines the target machine. Usually the system administrator will examine the target machine to determine if the process executed properly and if the target machine is functioning properly after the processes are complete. If a software provisioning process stalls or terminates before completion the administrator or user may unaware of the error. Because the administrator is unaware the target machine may remain dormant until the administrator realizes that a problem has occurred and restarts the provisioning process. This can waste time if the administrator does not regularly monitor the target machines during the provisioning processes. To cure this the administrator must actively monitor the provisioning processes which also consumes the administrator s time. Accordingly it would be desirable to provide a provisioning environment in which a provisioning server can actively monitor target machines during the software provisioning processes.

For simplicity and illustrative purposes the principles of the present invention are described by referring mainly to exemplary embodiments thereof. However one of ordinary skill in the art would readily recognize that the same principles are equally applicable to and can be implemented in all types of information and systems and that any such variations do not depart from the true spirit and scope of the present invention. Moreover in the following detailed description references are made to the accompanying figures which illustrate specific embodiments. Electrical mechanical logical and structural changes may be made to the embodiments without departing from the spirit and scope of the present invention. The following detailed description is therefore not to be taken in a limiting sense and the scope of the present invention is defined by the appended claims and their equivalents.

Embodiments of the present teachings relate to systems and methods for actively monitoring software provisioning processes on target machines. More particularly a provisioning server can actively monitor the software provisioning processes being performed on a target machine to determine the status and integrity of the provisioning processes and notify an administrator or user of the status and integrity.

In embodiments the provisioning server can be configured to include a monitoring module and a message module. The monitoring module can be configured to monitor software provisioning processes being performed on a target machine and determine the status and integrity of the provisioning processes. The message module can be configured send notification to the administrator or user of the status and integrity of the provisioning processes.

In embodiments to monitor the provisioning processes the monitoring module can be configured to receive status messages from a provisioning client assisting the target machine during the software provisioning. Additionally if a provisioning client is not available the monitoring module can be to receive the status messages from the target machine or other software instantiated on the target machine directly. The status messages can include status information about the software provisioning processes. The status information can include the progress of the provisioning processes amount of the processes completed specific point reach in the provisioning the integrity of the processes still in progress stalled terminate early errors the completion of the provisioning processes and the like. The monitoring module can be configured to determine the status and integrity of the provisioning process based on the status information.

In embodiments the provisioning server can be configured to utilize the status information determined by the monitoring module to generate and update a log file. The log file can include information such as the identification of the target machine identification of the provisioning processes performed and status information such as start time of and time of errors or completion of the provisioning processes.

In embodiments if the monitoring module has determined the provisioning process has stalled terminated early or completed normally the provisioning server can be configured to notify an administrator of the provisioning server administrator of the target machine and or user of the target machine. In particular the message module can be configured generate and send notification to the administrator or user that the a problem has occurred with the provisioning processes or the provisioning processes is completed. Additionally the message module can be configured to periodically send notification to the administrator or user.

In embodiments the message module can be configured to generate and send notifications such as an email message text message pop up interfaces for the visual displays associated with the provisioning server and or target machine and the like. The notification can include the identification of the target machine the identification of the provisioning processes and status information such as start time of the provisioning processes time of errors or completion of the provisioning processes description of the errors if any and the like.

By actively monitoring the provisioning processes the provisioning server can continuously determine the status and integrity of the provisioning processes. As such problems with the provisioning processes can be identified as they occur and the administrator can be notified with minimal interaction. Accordingly the administrator can save time and resources by having access to the current status of provisioning processes and by actively identifying the target machines and processes with problems.

In particular the provisioning environment can manage software provisioning using a hierarchy of commands. In exemplary embodiments the hierarchy can include at least four levels of commands. The lowest level in the hierarchy can comprise distribution commands which primarily handle base operating system specific tasks of provisioning. The second level can comprise profile commands which associate a configuration file such as a kickstart file for Linux or other operating system with a distribution and optionally allow for customization. The third level comprises system commands which associate remote systems that are involved with the provisioning of the software. The fourth level comprises repository commands which address configurations and tasks related to updating the software remote installation procedures and optionally customizing the software.

The provisioning environment provides several capabilities and advantages over the known provisioning solutions. For example the present invention is capable of handling a variety of forms of installations such as preboot execution environment PXE virtualization re installations and image installations.

In exemplary aspects the provisioning environment enables integrating virtualization into a PXE provisioning infrastructure and provides several options to reinstall running machines as well. The provisioning environment can integrate mirroring of package repositories with the provisioning process so that a provisioning server may serve as a central mirror point of contract for all of an organization s software needs. In aspects a set of remote mirrored repositories can automatically be used by provisioned systems without additional setup.

Reference will now be made in detail to the exemplary aspects the provisioning environment . The provisioning environment can be applied to provisioning any form of software such as Windows systems UNIX systems and Linux systems. In the exemplary description that follows is presented to explain the provisioning environment for provisioning software such as Linux and Linux based software such as Fedora and Red Hat Enterprise Linux by Red Hat Inc.

In provisioning of software such as Linux many system administrators use what is known as the kickstart installation method. Kickstart files are files that specify the intended configuration of the software being provisioned. Kickstart files can be kept on a server and can be read by individual computers during the installation. This installation method allows the use a single or relatively few standard kickstart files to install Linux on multiple machines making it ideal for network and system administrators.

The kickstart file can be a simple text file containing a list of items each identified by a keyword. In general a kickstart file can be edited with any text editor or word processor that can save files as ASCII text. One skilled in the art will recognize that the present invention may be applied to non kickstart files in software provisioning. For example configuration files such as AutoYAST Answer files used in Novell SuSe Linux and Sun Solaris Jumpstart files may also be used by the provisioning environment .

Typically a kickstart file can be copied to the boot disk or made available on the network. The network based approach is most commonly used as most kickstart installations for software provisioning such as Linux systems tend to be performed via a network using NFS FTP or HTTP on networked computers. Administrators also find it desirable that kickstart installations can be performed using a local CD ROM or a local hard drive.

Using kickstart files a system administrator can create a single file containing the parameters that are needed to complete a typical software installation. For example kickstart files specify parameters related to language selection mouse configuration keyboard selection boot loader installation disk partitioning network configuration NIS LDAP Kerberos Hesiod and Samba authentication firewall configuration and package selection.

According to exemplary aspects illustrated in the provisioning environment can include a provisioning server a code repository which provides access to distributions and a set of installation templates a set of exception plugins a helper client running on target machines in a network a provisioning database which comprises a distribution tree list and template list . Each of these components will now be further described.

The provisioning server from herein referred to as a cobbler is responsible for serving as a extensible markup language remote procedure call XMLRPC handler linking to or mirroring install distribution trees and a configuration database hosting kickstart templates hosting plugins generating installation images and the like. The cobbler server can be implemented as software such as Python code installed on a boot server machine and provides a command line interface for configuration of the boot server. In addition the cobbler server can make itself available as a Python application programming interface API for use by higher level management software not shown . The cobbler server supports provisioning via PXE image ISO installation virualization re provisioning. As will be described later the last two modes are performed with the assistance of a helper client .

The code repository is responsible for hosting distributions and . The code repository may be implemented using well known components of hardware and software. Additionally the code repository can be include one or more repositories hosting distributions. The distributions and can include bundles of software that is already compiled and configured. The distributions and may be in the form of either rpm deb tgz msi exe formats and the like. For example as Linux distributions the distributions and are bundles of software that comprise the Linux kernel the non kernel parts of the operating system and assorted other software. The distributions and can take a variety of forms from fully featured desktop and server operating systems to minimal environments.

In exemplary aspects the installation templates are any data structure or processing element that can be combined with a set of installation configurations and processed to produce a resulting configuration file such as a kickstart file.

In exemplary aspects exception plugins is software that interacts with cobbler server to customize the provisioning of software. In general the exceptions plugins are intended to address infrequent customization needs.

In exemplary aspects the helper client known as koan which stands for kickstart over a network can assist the cobbler server during the provisioning processes. The koan can allow for both network provisioning of new virtualized guests and destructive provisioning of any existing system. When invoked the koan can request profile information from a remote boot server that has been configured with the cobbler server . In some aspects what the koan does with the profile data depends on whether it was invoked with virt or replace self.

In exemplary aspects the koan can enable replacing running systems as well as installing virtualized profiles. The koan can also be pushed out to systems automatically from the boot server. In some aspects the koan client is also written in Python code to accommodate a variety of operating systems machine architectures etc.

In exemplary aspects the network can include a number of the target machines . The target machines can represent the particular machines to which software provisioning is directed. The target machines may represent a wide variety of computing devices such as personal computers servers laptop computers personal mobile devices and the like. In some aspects the target machines can represent distributed computing environments such as cloud computing environments. Although shows several of the target machines the provisioning environment can be capable of managing a wide range environments such as datacenters with thousands of machines or server pools with just a few machines. Additionally the cobbler server can be connected to multiple networks .

In exemplary aspects the provisioning database can serve as a data storage location for holding data used by the cobbler server . For example as shown the provisioning database can comprise the distribution tree list and the template list . The distribution tree list can provide an inventory of the distributions and that are hosted or mirrored by the cobbler server . The template list can provide an inventory of the templates that are hosted by the cobbler server .

As noted above the cobbler server can manage provisioning using a hierarchical concept of distribution commands profile commands system commands and repository commands. This framework enables the cobbler server to abstract the differences between multiple provisioning types installation reinstallation and virtualization and allows installation of all three from a common platform. This hierarchy of commands also permits the cobbler server to integrate software repositories with the provisioning process thus allowing systems to be configured as a mirror for software updates and third party content as well as distribution content.

Distributions can contain information about base operating system tasks such as what kernel and initial ramdisk initrd are used in the provisioning along with other information such as required kernel parameters. Profiles associate one of the distributions and with a kickstart file and optionally customize it further for example using plugins . Systems commands associate a hostname IP or MAC with a distribution and optionally customize the profile further. Repositories contain update information such as yum mirror information that the cobbler server uses to mirror repository . The cobbler server can also manage generate DHCP configuration files using the templates .

In exemplary aspects the cobbler server can use a provisioning environment that is fully templated allowing for kickstarts and PXE files to be customized by the user. The cobbler server uses the concept of profiles as an intermediate step between the operating system and the installed system. A profile is a description of what a system does rather than the software to be installed. For instance a profile might describe a virtual web server with X amount of RAM Y amounts of disk space running a Linux distribution Z and with an answer file W.

In exemplary aspects the cobbler server can provide a command line interface to configure a boot server in which it is installed. For example the format of the cobbler server commands can be generally in the format of cobbler command subcommand arg 1 arg2 . Thus a user can specify various aspects of software provisioning via a single interface such as a command line interface or other known interface. Examples of exemplary cobbler commands can be found in U.S. patent application Ser. No. 11 763 315 and U.S. patent application Ser. No. 11 763 333 the disclosures of which are incorporated herein in their entirety by reference.

According to exemplary aspects a user can use various commands of the provisioning environment to specify distributions and install trees hosted by the code repository such as a distribution from the distributions or . A user can add or import a distribution or import it from installation media or an external network location.

According to exemplary aspects in order to import a distribution the cobbler server can auto add distributions and profiles from remote sources whether this is an installation media such as a DVD an NFS path or an rsync mirror. When importing a rsync mirror the cobbler server can try to detect the distribution type and automatically assign kickstarts. By default in some embodiments the cobbler server can provision by erasing the hard drive setting up eth0 for DHCP and using a default password. If this is undesirable an administrator may edit the kickstart files in etc cobbler to do something else or change the kickstart setting after the cobbler server creates the profile.

According to exemplary aspects a user may map profiles to the distributions and map systems to the profiles using profile commands and systems commands of the provisioning environment . A profile associates a distribution to additional specialized options such as a kickstart automation file. In the cobbler server profiles are the unit of provisioning and at least one profile exists for every distribution to be provisioned. A profile might represent for instance a web server or desktop configuration.

According to exemplary aspects a user can map systems to profiles using system commands. Systems commands can assign a piece of hardware with cobbler server to a profile. Systems can be defined by hostname Internet Protocol IP address or MAC address. When available use of the MAC address to assign systems can be preferred.

According to exemplary aspects the user can map repositories and profiles using repository commands. Repository commands can address configurations and tasks related to updating the software remote installation procedures and optionally customizing the software. These repository commands can also specify mirroring of the provisioned software to remote servers. Repository mirroring can allow the cobbler server to mirror not only install the trees and but also optional packages third party content and updates. Mirroring can be useful for faster more up to date installations and faster updates or providing software on restricted networks. The cobbler server can also include other administrative features such as allowing the user to view their provisioning configuration or information tracking the status of a requested software installation.

According to exemplary aspects a user can utilize commands to create a provisioning infrastructure from a distribution mirror. Then a default PXE configuration is created so that by default systems will PXE boot into a fully automated install process for that distribution. The distribution mirror can be a network rsync mirror or a mounted DVD location.

According to exemplary aspects the administrator uses a local kernel and initrd file already downloaded and shows how profiles would be created using two different kickstarts one for a web server configuration and one for a database server. Then a machine can be assigned to each profile.

According to exemplary aspects a repo mirror can be set up for two repositories and create a profile that will auto install those repository configurations on provisioned systems using that profile.

According to exemplary aspects in addition to normal provisioning the cobbler server can support yet another option called enchant . Enchant takes a configuration that has already been defined and applies it to a remote system that might not have the remote helper program installed. Users might want to use this command to replace a server that is being repurposed or when no PXE environment can be created. Thus the enchant option allows the remote the koan client to be executed remotely from the cobbler server .

According to aspects if the cobbler server is configured to mirror certain repositories the cobbler server can then be used to associate profiles with those repositories. Systems installed under those profiles can be auto configured to use these repository mirrors in commands and if supported these repositories can be leveraged. This can be useful for a large install base fast installation and upgrades for systems are desired or software not in a standard repository exists and provisioned systems are desired to know about that repository.

According to exemplary aspects the cobbler server may also keep track of the status of kickstarting machines. For example the cobbler status will show when the cobbler server thinks a machine started kickstarting and when it last requested a file. This can be a desirable way to track machines that may have gone inactive during kickstarts. The cobbler server can also make a special request in the post section of the kickstart to signal when a machine is finished kickstarting.

According to exemplary aspects for certain commands the cobbler server will create new virtualized guests on a machine in accordance to the orders from the cobbler server . Once finished an administrator may use additional commands on the guest or other operations. The cobbler server can automatically name domains based on their MAC addresses. For re kickstarting the cobbler server can reprovision the system deleting any current data and replacing it with the results of a network install.

According to exemplary aspects the cobbler server can configure boot methods for the provisioning requested by the user. For example the cobbler server can configure a PXE environment such as a network card BIOS. Alternatively the cobbler server can compile and configure information for koan client . The cobbler server can also optionally configured DHCP and DNS configuration information.

According to exemplary aspects the cobbler server can serve the request of the koan client . The koan client can acknowledge the service of information of the cobbler server and then can initiate installation of the software being provisioned. Additionally the koan client can either install the requested software e.g. replace the existing operating system or install a virtual machine.

In embodiments the cobbler server including the monitoring module and the message module can be configured to perform provisioning process as described above. The provisioning processes can be instantiated under the direction of the cobbler server or under the direction of the koan client or target machine . To track and determine the software provisioning processes the cobbler server can be configured to maintain an inventory which can include a list of target machines a list of provisioning processes performed completed and to be performed on each target machine and specifications of the provisioning process type of process start time of process and software to be provisioned .

In embodiments to monitor the software provisioning processes the monitoring module can be configured to receive status messages from the target machines on which provisioning process are being performed. For example the monitoring module can be configured to receive the status messages from the koan client assisting the target machine during the software provisioning. Additionally if the koan client is not associated with the target machine the monitoring module can be configured to receive the status messages from the target machine or other other software instantiated operating systems installation programs and the like on the target machine directly. Once a provisioning process has begun the koan client or the target machine can be configured to send the status messages at regular intervals during the provisioning process until the processes end or terminates. Likewise the koan client or the target machine can be configured to send the status messages when particular events are reached or when every event occurs during provisioning process particular portion completed particular percentage completed errors or problems in the provisioning provisioning completed or terminated .

In embodiments the monitoring module can be implemented as a portion of the code for the cobbler server . Likewise the monitoring module can be implemented as a separate software tool accessible by the cobbler server . The monitoring module can be written in a variety of programming languages such as JAVA C Python code and the like to accommodate a variety of operating systems machine architectures etc. Additionally the monitoring module can be configured to include the appropriate application programming interfaces APIs to communicate with and cooperate with other components of the cobbler server and the koan clients and target machines .

In embodiments the monitoring module can be configured to receive the status messages from the koan client or the target machine which includes status information. The status information can include the progress of the provisioning processes amount of the processes completed events occurring during the provisioning process portions of the processes complete the integrity of the processes still in progress stalled terminate early errors details of any errors the completion of the provisioning processes and the like.

In embodiments once the status messages are received the monitoring module can be configured to determine the status and integrity of the software provisioning processes based on the status information. To determine the status the monitoring module can be configured to parse the status message to extract the status information to determine the status and integrity of the provisioning processes. For example the monitoring module can examine the status message to determine the progress of the provisioning process whether the process has stalled or terminated details of errors or whether the the provisioning processes have completed.

Additionally in embodiments the monitoring module can be configured to compute a likely status and integrity of the provisioning processes. In particular the monitoring module can be configured to contain logic to interpolate a likely status and integrity. For example the monitoring module can examine the start time and details of the provisioning processes. If the provisioning processes has been running for a period of time longer than expected the monitoring module can interpolate that the provisioning processes may be experiencing problems. Likewise the monitoring module can interpolate the amount of the process completed by comparing the details for the provisioning process to the amount of the processes completed from the status messages .

In embodiments the cobbler server can be configured to utilize the status determined by the monitoring module from the status messages to generate and update a log . In particular the cobbler server can be configured to generate the log once monitoring begins and update the log each time the monitoring module receives a status message from the target machine . The log can include information such as the identification of the target machine identification of the provisioning processes performed status information such as start time of and time of errors or completion of the provisioning processes and details of any errors in the provisioning processes. Additionally the log can be linked to the inventory . The cobbler server can determine the status of the provisioning processes by examining the log .

In embodiments if the monitoring module has determined the provisioning process has stalled terminated early or completed normally the cobbler server can be configured to notify via the message module an administrator of the provisioning server administrator of the target machine and or user of the target machine. In embodiments the message module can be configured generate and send notification to the administrator and or user that the a problem has occurred with the provisioning processes or the provisioning processes is completed. Additionally the message module can be configured to periodically send notification to the administrator and or user in order to provide a update of the status during the provisioning processes. Additionally the message module can be configured to send notification on demand to the administrator and or user in order to provide a update of the status during the provisioning processes. To determine the status for the notification the cobbler server can be configured to examine the log .

In embodiments in order to notify the administrator and or the user the message module can be configured to generate and send the notification in a variety of formats such as an email message text message pop up interfaces for the visual displays associated with the cobbler server the koan client and or target machine and the like. The notification can include the identification of the target machine the identification of the provisioning processes and status information such as start time of the provisioning processes time of errors or completion of the provisioning processes description of the errors if any and the like.

In embodiments the message module can be implemented as a portion of the code for the cobbler server . Likewise the message module can be implemented as a separate software tool accessible by the cobbler server . The message module can be written in a variety of programming languages such as JAVA C Python code and the like to accommodate a variety of operating systems machine architectures etc. Additionally the m message module can be configured to include the appropriate APIs to communicate with and cooperate with other components of the cobbler server .

Processor further communicates with network interface such as an Ethernet or wireless data connection which in turn communicates with one or more networks such as the Internet or other public or private networks. Processor also communicates with the provisioning database the monitor module and the message module to execute control logic and perform the software provisioning processes and monitoring described above. Other configurations of the cobbler server associated network connections and other hardware and software resources are possible.

While illustrates the cobbler server as a standalone system comprising a combination of hardware and software the cobbler server can also be implemented as a software application or program capable of being executed by a convention computer platform. Likewise the cobbler server can also be implemented as a software module or program module capable of being incorporated in other software applications and programs. In either case the cobbler server can be implemented in any type of conventional proprietary or open source computer language.

In the cobbler server can receive status messages from the target machine . For example the status messages can include status information such as the progress of the provisioning processes amount of the processes completed events occurring during the provisioning process portions of the processes complete the integrity of the processes still in progress stalled terminate early errors details of any errors the completion of the provisioning processes and the like. The koan client or the target machine can send the status messages at regular intervals during the provisioning process until the processes end or terminates. Likewise the koan client or the target machine can send the status messages when particular events are reached or when every event occurs during provisioning process particular portion completed particular percentage completed errors or problems in the provisioning provisioning completed or terminated .

Once received in the cobbler server can determine the status of the software provisioning processes based on the status information. For example the monitoring module can parse the status messages to determine the status and integrity of the provisioning processes. Additionally the monitoring module can compute a likely status and integrity of the provisioning processes from the status messages.

Then in the cobbler server can provide notification of the status to an administrator and or user if a problem occurs and or provide notification of the status. For example the message module can generate and send notification to the administrator and or user that the a problem has occurred with the provisioning processes or the provisioning processes is completed. Additionally the message module can periodically send notification to the administrator and or user in order to provide a update of the status during the provisioning processes. Additionally the message module can send notification on demand to the administrator and or user in order to provide a update of the status during the provisioning processes.

Then in the cobbler server can update a log based on the status information. In the cobbler server can continue to receive the status messages from the target machine to determine the status. In the process can end but the process can return to any point and repeat.

While the invention has been described with reference to the exemplary embodiments thereof those skilled in the art will be able to make various modifications to the described embodiments without departing from the true spirit and scope. The terms and descriptions used herein are set forth by way of illustration only and are not meant as limitations. In particular although the method has been described by examples the steps of the method may be performed in a different order than illustrated or simultaneously. Those skilled in the art will recognize that these and other variations are possible within the spirit and scope as defined in the following claims and their equivalents.

