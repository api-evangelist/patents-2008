---

title: Destination list associated with an application launcher
abstract: A computer application launcher can be displayed. In response to receiving a first user input associated with the launcher while a computer application indicated by the launcher is not running, a destination list can be displayed. The destination list can include one or more destinations indicating one or more items that can be performed by a computer application. In response to a second user input associated with the destination list and indicating selection of a destination on the destination list, the application can be launched and instructed to perform an item indicated by the selected destination.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09612847&OS=09612847&RS=09612847
owner: MICROSOFT TECHNOLOGY LICENSING, LLC
number: 09612847
owner_city: Redmond
owner_country: US
publication_date: 20080926
---
This application is a continuation in part of U.S. Ser. No. 12 025 905 filed on Feb. 5 2008 entitled Generating a Destination List Utilizing Usage Data whose contents are expressly incorporated herein.

Existing computer applications are able to perform a variety of tasks that are useful and enjoyable for computer users. However to perform a desired task a user often must find the application the user wants to use and launch the application. Then the user must find the task or entry point for the action within the application. Then the user must make one or more appropriate selections within the application such as by depressing keyboard keys giving voice commands or making mouse clicks before the application performs a desired task.

Presently operating systems provide a variety of utilities that assist a user in conveniently launching applications and instructing applications to perform tasks. In some instances operating systems have attempted to expedite launching applications by promoting frequently used applications to a list. This list of applications is typically viewable upon accessing a main application menu. However this list often handles a small number of applications. In addition those applications will only perform tasks after the user provides user input to launch the application and then provides additional input to the running application such as entering a particular application environment or opening a file in the application.

Some operating systems have provided more convenient ways to perform tasks with applications that are currently running. For example a list of commands may be provided when a user executes a mouse click while the cursor is within the running application window or within a button corresponding to the running application. As another example notification icons are sometimes provided for applications that are running in the background and a user can view a list of available tasks for such an application by executing a mouse click with the cursor hovering over the application s notification icon. However often this still requires a user to select an application and launch it before such lists become available. An operating system can be configured to launch applications automatically when a user logs into the operating system but this often takes up valuable system resources at times when the application is not being used.

As another example of operating systems attempting to make it more convenient to perform desired tasks some operating systems allow the registration of general services. Once registered the services can be selected by users to perform tasks on associated data. However such lists of services are not conveniently associated with representations of applications that a user may want to launch to perform desired tasks.

Whatever the advantages of previous computer system testing tools and techniques they have neither recognized the item initiation tools and techniques described and claimed herein nor the advantages produced by such tools and techniques.

In one embodiment the tools and techniques can include receiving from a computer application a designation of one or more application designated items that can be performed by the application. A computer application launcher for launching the computer application can be displayed and a user input associated with the launcher can be received. In response to the user input an application specific destination list for the computer application can be displayed while the computer application is not running. The destination list can include one or more destinations indicating the one or more application designated items. In response to a user input selecting a destination on the destination list the application can be launched and instructed to perform an item indicated by the selected destination.

In another embodiment of the tools and techniques a computer application launcher can be displayed. In response to receiving a first user input associated with the launcher while a computer application indicated by the launcher is not running a destination list can be displayed. The destination list can include one or more destinations indicating one or more items that can be performed by the computer application. In response to a second user input associated with the destination list and indicating selection of a destination on the destination list the application can be launched and instructed to perform an item indicated by the selected destination.

In yet another embodiment of the tools and techniques an application specific destination list can be maintained. The destination list can include destinations indicating items that can be performed by a computer application and a launcher that indicates the computer application can be displayed. In response to a user input associated with the launcher the application specific destination list can be displayed while the computer application is not running.

This Summary is provided to introduce a selection of concepts in a simplified form. The concepts are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter nor is it intended to be used to limit the scope of the claimed subject matter. Similarly the invention is not limited to implementations that address the particular techniques tools environments disadvantages or advantages discussed in the Background the Detailed Description or the attached drawings.

Described embodiments are directed to techniques and tools for improved initiation of the performance of application specific items in association with an application launcher. Such improvements may result from the use of various techniques and tools separately or in combination.

Such techniques and tools may include displaying an application specific destination list in association with an application launcher such as in response to user input associated with the application launcher e.g. hovering a cursor over an area at or adjacent to the launcher or selecting a button associated with the launcher such as a split button . The application specific destination list can include a list of one or more destinations representing items that can be performed by an application when the application is running e.g. performing a command or opening a file . However the destination menu may be displayed whether or not the application is currently running. In response to a user selecting a destination on the destination list the application can be launched and an item indicated by the destination can be performed by the application.

Thus with a selection in an application specific list associated with an application launcher a user can initiate the execution or performance of a selected application specific item causing an inactive i.e. not yet launched so that it is not currently running application to launch and to perform a selected item. As used herein an application specific list is one that is customized for a particular computer application or set of related computer applications as opposed to a standard list for all applications in an operating system or computing device. However such a list can include some standard features such as standard functionality for interacting with the list or standard destinations on the list. As used herein reference to execution or performance of an application specific item can refer to performance of various types of items by an associated application such as without limitation executing a command in the application e.g. sign in for an instant messaging client application or backup now for a backup utility application opening or executing a content item associated with the application e.g. a file folder word processing document media file email calendar item or web page entering a particular mode or sub experience in the application e.g. entering an email inbox in an email application or entering an Internet radio environment in a media application and or changing or setting a configuration or status of the application e.g. launching a web browser with particular privacy and security settings . Accordingly one or more substantial benefits can be realized from the tools and techniques described herein for performing application specific items. For example users can more quickly and easily invoke frequently used tasks or other items. As another example available system resources may be freed because the application need not be running to enable a user to initiate the execution of application specific items.

The subject matter defined in the appended claims is not necessarily limited to the benefits described herein. A particular implementation of the invention may provide all some or none of the benefits described herein. Additionally although operations for the various techniques are described herein in a particular sequential order for the sake of presentation it should be understood that this manner of description encompasses rearrangements in the order of operations unless a particular ordering is required. For example operations described sequentially may in some cases be rearranged or performed concurrently. Techniques described herein with reference to flowcharts may be used with one or more of the systems described herein and or with one or more other systems. Moreover for the sake of simplicity flowcharts may not show the various ways in which particular techniques can be used in conjunction with other techniques.

As used herein the phrase destination list is not meant to be limiting and may encompass any set collection manifest catalogue record or index of destinations. Further the phrase destination list may refer to an actual listing embedded in computer readable media or a representation of a destination list that may be presented at a user interface display. In one instance the destination list may be generated by the operating system e.g. utilizing indications from an application of items to be indicated on the destination list and or frequently or recently used items to be represented in the destination list . In another instance the destination list can be generated at an application e.g. providing destinations related to important items for many or all users of the application or items managed by the application that have been accessed by a user . In yet another instance a user is able to influence contents of the destination list e.g. pinning a destination to the destination list . As such it should be understood and appreciated that the destination list can take on many forms and can be created or modified by one or more entities using various editing techniques. Upon generation the destination list can be stored in one or more locations such as on a local disk drive within a database or at a remote website.

In an exemplary embodiment the destination list includes one or more destinations. The term destinations is used broadly herein and refers to locations of items that are identified by a target application. The locations of items may take the form of an address to a file a universal naming convention UNC path to a folder or working directory a uniform resource locator URL of a website a command line identifier structures in binary format or any other string of characters or other data that signifies a particular item. In embodiments the item can include but is not limited to a file e.g. document media content a task e.g. user initiated action command that is executable by a computing device a folder a directory a website an applet or a device.

Having briefly described an overview of embodiments and some of the features therein an exemplary operating environment suitable for implementing described embodiments is described below.

Referring to the drawings in general and initially to in particular an exemplary operating environment for implementing described embodiments is shown and designated generally as computing device . Computing device is but one example of a suitable computing environment and is not intended to suggest any limitation as to the scope of use or functionality of the invention. Neither should the computing device be interpreted as having any dependency or requirement relating to any one or combination of components illustrated.

Embodiments may be described in the general context of computer code or machine useable instructions including computer executable instructions such as program components being executed by a computer or other machine such as a personal data assistant or other handheld device. Generally program components including routines programs objects components data structures and the like refer to code that performs particular tasks or implements particular abstract data types. Embodiments may be practiced in a variety of system configurations including handheld devices consumer electronics general purpose computers specialty computing devices etc. Embodiments may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network.

With continued reference to the computing device can include a bus that directly or indirectly couples the following devices memory one or more processors one or more presentation components input output I O ports I O components and an illustrative power supply . The bus represents what may be one or more busses such as an address bus data bus or combination thereof . Although the various blocks of are shown with lines for the sake of clarity in reality delineating various components is not so clear and metaphorically the lines would more accurately be grey and fuzzy. For example one may consider a presentation component such as a display device to be an I O component. In addition processors have memory. The inventors hereof recognize that such is the nature of the art and reiterate that the diagram of is merely illustrative of an exemplary computing device that can be used in connection with one or more embodiments. Distinction is not made between such categories as workstation server laptop handheld device etc. as all are contemplated within the scope of and references to computer or computing device. 

The computing device typically includes a variety of computer readable media. By way of example and not limitation computer readable media may comprise Random Access Memory RAM Read Only Memory ROM Electronically Erasable Programmable Read Only Memory EEPROM flash memory or other memory technologies CDROM digital versatile disks DVD or other optical or holographic media magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium that can be used to encode desired information and be accessed by the computing device .

The memory includes computer storage media in the form of volatile and or nonvolatile memory. The memory may be removable non removable or a combination thereof. Exemplary hardware devices include solid state memory hard drives optical disc drives etc. The computing device can include one or more processors that read data from various entities such as the memory or the I O components . The presentation component s can present data indications to a user or other device. Exemplary presentation components include a display device speaker printing component vibrating component etc. The I O ports allow the computing device to be logically coupled to other devices including the I O components some of which may be built in. Illustrative components include a microphone joystick game pad satellite dish scanner printer wireless device etc. The memory can include software stored thereon such as software implementing a destination list associated with an application launcher.

Turning now to a schematic diagram of an exemplary system architecture suitable for use in implementing described embodiments is shown in accordance with a described embodiment. It will be understood and appreciated by those of ordinary skill in the art that the exemplary system architecture shown in is merely an example of one suitable computing environment and is not intended to suggest any limitation as to the scope of use or functionality of the present invention. Neither should the exemplary system architecture be interpreted as having any dependency or requirement related to any single component or combination of components illustrated therein.

The exemplary system architecture can include a computing device for generating an application specific list of destinations which represent and indicate application specific items e.g. commands that can be executed or content items that can be opened by the application and for rendering the destinations within a submenu area associated with an application launcher upon detecting a request from a user. The list of destinations may be generated from data such as data at a data store e.g. registry or any other information storage location internal or external to the operating system . The computing device may take the form of various types of computing devices. By way of example only the computing device may be a personal computing device e.g. the computing device of handheld device e.g. personal digital assistant consumer electronic device various servers and the like. Additionally the computing device may comprise two or more electronic devices configured to share information therebetween.

In embodiments the computing device includes a display device input devices and and hardware with an operating system installed thereon. The computing device is configured to present a UI display on the display device . The display device which is operably coupled to the computing device may be configured as any presentation component that is capable of presenting information to a user such as a monitor electronic display panel touch screen and the like. In one exemplary embodiment the UI display is configured to present a submenu area not shown initiated by the operating system where the submenu area includes the destination list to a user. In another exemplary embodiment the UI display is capable of rendering a trigger area proximate to an application launcher icon that when actuated invokes the submenu area.

The input devices and are provided to provide input s affecting among other things a presentation of the destination list within the submenu area on the UI display . Illustrative devices include a key pad a mouse a joystick not shown a microphone not shown the I O components of or any other component capable of receiving a user input and communicating an indication of that input to the computing device . By way of example only the input devices and control the location where a cursor tool is positioned i.e. hovers on the UI display and or the selection of buttons appearing on the UI display .

The operating system OS refers generally to the software that manages the sharing of the resources of the computing device and provides programmers with an interface used to access those resources. In operation the operating system interprets system data and detects user inputs e.g. via the input devices and and responds by executing such processes as the following prioritizing system requests e.g. a user initiated request to view a destination list allocating internal system resources facilitating networking between the resources and or devices managing tasks e.g. generating a destination list and file systems controlling output devices e.g. rendering a destination list at the display device and operating as a platform for programs residing thereon such as a target application .

In an exemplary embodiment the operating system includes an input receiving component a calling receiving component a capturing component an aggregation component a list generation component and a rendering component . In addition the list generation component may include a determining element an accessing element a deriving element and a populating element . This operating system structure of the operating system is but one example of a suitable structure that may be run on the computing device and is not intended to suggest any limitation as to the scope of use or functionality of the invention. Neither should the illustrated operating system be interpreted as having any dependency or requirement relating to any one or combination of the components elements or as illustrated. In some embodiments one or more of the components elements or may be implemented as stand alone applications. In other embodiments one or more of the components elements or may be integrated directly into the display device of the computing device the target application or a combination thereof. By way of example only the rendering component may be housed in association with the display device while the capturing component may reside in the target application thereby monitoring activities related to items managed by the target application . It will be understood by those of ordinary skill in the art that the components elements and illustrated in are exemplary in nature and in number and should not be construed as limiting.

Any number of components elements may be employed to achieve the desired functionality. Although the various components elements of are shown with lines for the sake of clarity in reality delineating various components elements is not so clear and metaphorically the lines would more accurately be grey or fuzzy. Further although some components elements of are depicted as single blocks the depictions are exemplary in nature and in number and are not to be construed as limiting e.g. although only one display device is shown many more may be operably coupled to the computing device thereby functioning in conjunction to present the UI display .

In embodiments the input receiving component is configured to receive and process indications of commands from the input devices and . These indications of commands may include any outputs within a scope of outputs produced by the input devices and . In one embodiment the outputs include indications of user initiated activities associated with items managed by the target application . In another embodiment the outputs include a user initiated indication to view a destination list. In one instance as discussed more fully below the user initiated indication or user input selection to view a destination list is an indication to move a cursor tool into a trigger area rendered on the UI display . In another instance the user initiated indication or user input selection to view the destination list is a selection of a button e.g. a split button presented on the UI display .

The capturing component may be configured as an underlying program that continuously monitors usage data that corresponds with particular applications. In an exemplary embodiment the usage data is information related to user initiated activities associated with the items managed by the target application . For instance the usage data can include an indication that a user has opened a document managed by document editing software i.e. the target application . In another instance the usage data includes an indication that the target application has been active for over a prescribed amount of time typically reported from a timer object not shown . Although two different instances of the usage data have been described it should be understood and appreciated that other usage data could be monitored and stored by the capturing component and that the scope of functionality of the capturing component is not limited to capturing the usage data shown and described. In addition in some embodiments no usage data is monitored.

In embodiments the aggregation component generates application specific records such as from usage data and or from designations from the target application . Generally the records can include information associated with a particular item such as a content item that can be managed by the target application or a command that can be executed by the target application . For instance some usage based records can include a score indicating the frequency with which an item is invoked and a timestamp indicating when the item was last invoked. Records may also include a content item shell or a command item shell. A content item shell can include among other things an item identifier or display name e.g. a common namespace and a location of the content item such as an address within the operating system a pathway to a remote host and the like. A command item shell can include an item identifier or display name and a location of the item which can be a corresponding command line. An item shell may also include other information such as a location of a corresponding icon to be displayed in a corresponding destination in a destination list and a corresponding tooltip to be displayed when a cursor hovers over a corresponding destination in a destination list. In an exemplary embodiment records are indexed according to applications such that records relating to an item are associated with the application that manages the item. In one instance indexing includes storing the records in a table format at a data store. The table format lists records stored in a manifest underneath a heading depicting the application to which the records correspond that is the table format is generally data of a set of items such as a usage based set of items and or an application designated set of items collected together and sorted based on which application is used to perform the corresponding set of items.

In embodiments a timestamp a score and an item shell may comprise elements of a usage based destination item record that is listed as an entry within the table format. By way of example only the record may describe a content item as a media file such as a digital recording and the associated record may include the following elements a timestamp indicating the media file was opened at 12 31 PM a score indicating that the media file is opened very frequently an item identifier of Hey Jude and a location of the media file on a C drive in a Beatles folder. The record may also include an indication of whether the item has been designated by the corresponding application to be included in an application designated listing in a destination list.

As discussed above the score is an indication of the frequency with which an item is invoked. In one instance the score is calculated by incrementally increasing a running account each time the item is accessed. In addition the running account may be incremented if a timer object reports that the time has been active for more than a prescribed amount of time. For instance if the prescribed amount of time is four hours and a file has been open for five hours the score for the file is incremented twice once for initially opening the file and again for meeting the prescribed time criteria. Incrementing a score because an item is active for a period of time is based on the assumption that a user is more apt to access this item again if it is opened for a long time as opposed to an item that is opened for a brief duration of time.

In a more sophisticated embodiment a decay algorithm can be applied to the scores of each item. Generally the decay algorithm reduces a score for an item that has not been used recently. In operation the decay algorithm allows scores of individual items to increment until a combined score limit has been reached. At this point the score associated with the item that is being accessed is incremented as before in the degraded model above but the scores of each of the other items in the set of items managed by an application are decreased by a fractional point. In other words points are given to items until a maximum point total for a set of items has been reached. At that point when a point is given to an item a fractional point is taken away from the other items in the set of items where the sum of the fractional points equals a single point. By way of example only a send email task i.e. the item is one of twenty tasks i.e. the set of items associated with an email application. If a user initiates the send email task by way of the indication of a command the score associated with the email task is increased by a point while the scores of the other tasks are reduced by 1 19th of a point. This practice of reducing the scores associated with the items in the set of items is based on the assumption that a user is more likely to access a recently activated item than one accessed in the past. It should be understood and appreciated that the scope of the present invention is not limited to the methods for calculating a score and decaying the score described above. Embodiments could use other models for calculating a score and other decay algorithms for accurately reflecting a user s current preference of which items the user desires to view in a destination list. Indeed in some embodiments no usage based calculations are made. For example all the items could be designated by the corresponding application without making usage based calculations.

As discussed above the records of items can be listed as entries in a manifest associated with an application that manages those items. The manifest may include listings of items wherein each listing is an aggregation of items according to a logical scheme. One embodiment of a usage based listing is a listing of recently used items. The listing of recently used items can be built according to the timestamp associated with each item in the set of items. In one instance the list is built by ranking the items from the item with a most recent timestamp to the item with an earlier timestamp. Another embodiment of a usage based listing is a listing of frequently used items. The listing of frequently used items is built according to the score associated with each item in the set of items. In one instance the list is built by comparing each score of an item against a predefined threshold score and populating the listing of frequently used items with those items with a score that overcomes the threshold. In this way only those items that are frequently accessed by a user as indicated in the usage data are incorporated in the listing of frequently used items. In some implementations the listing is populated with those items with the highest scores but no threshold is used.

Another embodiment of an application designated listing is a listing of application designated items that are indicated by a corresponding application in a particular circumstance regardless of usage by a particular user. Alternatively an application designated listing could be a listing of items based on some combination of usage and designation by an associated application. As used herein application designated items represent items that are designated by the corresponding application such as the target application to be indicated by destinations in a destination list. For example the target application can designate application specific items that are commonly used by many or all users of the target application . In addition to initially designating a set of application designated items the target application may also send list update information to update the list information in the manifest for application designated items. This list update information could include list information such as updated item shells corresponding to application designated items to be indicated by updated destinations in an updated destination list and or updated list configuration settings. As an example such updated information could be sent by the target application when the application changes state.

As an example of application designated items if the target application is a media application the application designated items could be indicated by the labels Play All Shuffled Last Played Browse Library Create Music CD Internet Radio and Sync to Device among others. As another example if the target application is a personal information management program the application designated items could be indicated by the labels E mail Inbox View Calendar View Tasks View Contacts View New Email and New Calendar Item among others. As another example if the target application is an instant messaging application indicated items could be indicated by the labels Sign In or Sign Out depending on whether a user is currently signed in Change States and New Conversation among others. A destination list may include sub lists. For example the Change States entry might have a sub menu that appears with a sub destination list of states to select between such as Available Offline At Lunch Do Not Disturb etc. As yet another example for an application for educating users about features of a computing system such as a Welcome Center Getting Started or similar application application designated items could be indicated by the labels Connecting to a Network Personalizing the Desktop and Setting up Backup among others.

An application can indicate the application designated items in many ways. For example the target application can communicate application designated item shells to the calling receiving component of the operating system . While such communications could be initiated by the calling receiving component in some embodiments the communications to send item shells are primarily initiated by applications such as the target application . In addition to the application designated item shells the program API can also send other list information such as configuration settings e.g. an ordering or priority for listing the destinations corresponding to the application designated items .

As an example for each application designated item the application designated item shell can include a location such as a link path and filename or command line to launch the application with a desired experience. The application designated item shell may also include some or all of the following display information for each item a designation of an icon corresponding to the item e.g. a location of a single file such as a .ico file containing the icon or a location of the icon in a larger file such as a location in a .dll file a display name corresponding to the item and a tooltip corresponding to the item. Thus as an example an application designated item shell could include the following commands which are pseudo commands here for an item Set Command Outlook.exe composenewmail Set Icon OutlookComposeNewMail.ico Set Display Name New Mail and Set Tooltip New Mail Message . As just one example the existing IShellLink API could be used for communicating the information for an application designated item shell . Alternatively the application designated item shell could be an object that implements the existing IShellItem interface other existing or new API s could be used or application designated item shells could be communicated to the operating system in some other manner. Thus the list generation process can be extensible to retrieve application designated item shells from a variety of applications including applications that are developed after installing the operating system on the computing device . In addition all application designated information for an entire list could be sent at one time or individual parts of the information could be sent individually and or updated individually.

The application designated item shells can be initially communicated to the operating system when the target application is installed or linked with the operating system or at some other time. For example the operating system could query the target application when the associated launcher is displayed or when a user requests the display of the sub menu including a destination list corresponding to the target application . Moreover the target application can update the information. For example the target application may update the information when the application changes state. For example an instant messaging client application may update a Sign In application designated item to a Sign Out application designated item when a user signs in. As another example the target application may update information depending on whether the target application is running or inactive.

The operating system may include the application designated item shells in a manifest with other item shells such as usage based item shells. Alternatively application designated item shells could be stored in separate manifests stored by separate programs or stored in some other manner. For example usage based items and application designated items could both be managed by the target application and aggregated together by an aggregation component in the target application as discussed below.

Although several different listings of application specific items that may be included in the manifest have been discussed it should be understood and appreciated that other usage based listings of items based on the timestamp the score other criteria or any combination thereof other application designated listings of items other user indicated listings of items or other types of listings could be built and that embodiments are not limited to those listings described herein. Moreover the manifest may include other items such operating system items i.e. items that can be performed by the operating system without launching the application such as pinning the program to a launcher or launching an application in a standard manner without instructing the application to perform a specified application specific item. In addition the listings can be built dynamically. That is the listings can be continuously or periodically updated in an automated fashion by the aggregation component e.g. utilizing a recent items application programming interface . In one instance updating is triggered by changes to the usage data collected by the capturing component or by update information received from the target application such as when the target application changes state.

In an exemplary embodiment the aggregation component utilizes configuration parameters to build the listings. Accordingly the configuration parameters can comprise rules that dictate how many and which items are to be indexed in a particular listing. The configuration parameters may encompass a wide scope of criteria or properties provided by any source. In one instance the configuration parameters may be provided by the operating system e.g. the predefined usage threshold . In another instance the configuration parameters are provided by a user e.g. preferred websites that comprise a favorites listing . In yet another embodiment the configuration parameters are provided by the target application e.g. which recently visited websites are included in a listing . Alternatively the configuration parameters could be some combination of these or they could come from some other source such as another program.

In embodiments manifests of items may also be collected and edited by the target application . Generally the target application is any program that may be launched and manipulated by the operating system . These manifests may include listings of items e.g. tasks or content items managed by the target application that are built according to the configuration parameters provided by the target application. Initially building may include capturing usage data by a program API or some other API that is controlled by the target application . In one instance the program API operates substantially similar to the capturing component . That is the program API monitors user activities and stores usage data as records in a listing. The aggregation component dynamically builds listings by arranging items in the set of items according to configuration settings. The configuration settings may indicate which listings are used to generate a destination list and which items are utilized when building a particular listing. The configuration settings may also indicate particular application designated item shells for a particular state of the application. In embodiments the configuration settings direct the aggregation component to generate a destination list with one two or several separate listings. In addition the types of listings selected for the destination list may be indicated by the configuration settings. For instance the configuration settings may indicate that the destination list should be built from a listing of important application designated task items as predefined by the target application a listing of preferred command items as provided by a user and a listing of recently frequently opened content items e.g. files as determined from user activity monitored by the program API . Although a particular embodiment of building a destination list using exemplary configuration settings is described above it should be understood and appreciated that the configuration settings may guide the aggregation component to build a destination list utilizing any number and type of listings. Further this completed destination list may be provided to the operating system regularly upon a change of state of the target application upon a detecting an indication to surface the destination list or upon the occurrence of some other event.

In some embodiments the configuration settings indicate which items are incorporated into a particular listing. Accordingly the configuration settings may comprise information related to which application designated items are predefined as being in a listing e.g. top five most important tasks which items are selected by a user e.g. preferred items for incorporation into a listing and which items to add to a listing with reference to usage data gathered by the program API . By way of example only a calendar application i.e. the target application builds a listing of upcoming appointments from saved appointments i.e. the set of items that is limited to the ten most recent appointments beyond the present time i.e. utilizing configuration parameters provided by the target application . In another example a web browser application i.e. target application builds a listing of favorite websites that is limited to the user preferred websites i.e. utilizing configuration parameters provided by the user . Item shells describing items indexed by listings built by the target application may be provided to the calling component on the operating system as more fully discussed below.

As discussed above the listings that comprise the manifests can be dynamically built by the operating system and or the target application . The process of building may be executed in series in parallel or asynchronously with executing a list generation procedure as more fully discussed below with reference to the list generation component . As such it should be understood and appreciated that building a listing within a manifest and constructing a destination list may not be interdependent upon each other.

Returning to an exemplary structure of the operating system of the list generation component will now be described. Generally the list generation component is configured to construct a destination list utilizing a list generation procedure. Typically the destination list is generated incident to receiving one or more user initiated indications to view the destination list as provided via the indication of a user input command from the display devices and . However the list generation procedure may be executed independent of a request such as at regular intervals or in response to a prompt internal to the operating system . Because the contents of the destination list are updated automatically the destination list can reflect items that are relevant to a user s current task.

In embodiments the list generation component may include the determining element the accessing element the deriving element and the populating element . The determining element is generally configured to determine the appropriate data stores from which to select item shells e.g. item shell and to determine properties of a submenu area allocated for displaying the destination list. In an exemplary embodiment configuration settings are utilized to determine the appropriate data stores and listings within the data stores to access. Generally the configuration settings comprise rules that guide the accessing element to retrieve the proper item shells from a proper listing within a data store. The configuration settings may encompass a wide scope of criteria or properties provided by any source. In one instance the configuration settings may be provided by the operating system . By way of example only the configuration settings provided by the operating system may direct the accessing element to retrieve a listing of application designated items as well as ten item shells from each of the listing of frequently used items and the listing of recently used items where these listings reside in a data store on the operating system . In another instance the configuration settings are provided by the target application .

By way of example only the configuration settings provided by the target application may direct the accessing element to retrieve five item shells from each of the listing of upcoming appointments and the listing of favorite websites located in a data store controlled by the target application and a listing of frequently used items. As another example the configuration settings provided by the target application may direct the accessing element to retrieve one listing of application designated item shells if the application is in one state e.g. a user is logged out and the target application may update the configuration settings when the target application changes to another state e.g. a user is logged in so that that updated configuration settings direct the accessing element to retrieve another listing of application designated item shells. Accordingly in addition to pointing the accessing element to appropriate data stores for accessing item shells the configuration settings can assist in determining which and how many item shells to retrieve for incorporation into the destination list.

In an exemplary embodiment determining properties of the submenu area allocated for displaying the destination list includes retrieving attributes of the submenu area such as size e.g. width and height and or area required by each item shell once converted to a destination. In one embodiment these attributes may be gathered by requesting coordinates of the submenu area. Based on the properties of the submenu area the determining component can be capable of calculating the number of item shells that can be entered into the destination list. In particular these properties assist in determining how many item shells may be selected for entry in each of the category heads of the destination list. In embodiments the category heads are representations of the determined listings that are identified for accessing. For instance a category head Frequent Items would represent the listing of frequently used items while the category head Recent Websites would represent the listing of recently visited websites and the category head Tasks would represent application designated items. Thus by utilizing the configuration settings and the properties of the submenu area in conjunction the determining element can identify a the appropriate item shells for constructing the destination list and b where the identified item shells are located. The configuration settings may include information from a number of sources such as the target application and or the operating system . For example an application such as the target application may indicate the number of application identified items to be represented in one or more application designated listings and the operating system may indicate the number of items to be represented in each of one or more usage based listings. Some categories may be given priority in determining how many item shells from each category should be used to construct the destination list. For example the configuration settings can specify that all application designated item shells will be included if there is enough space for them and that any remaining space will be split evenly between recent items and frequent items.

The accessing element retrieves the appropriate item shells from the proper listings data stores as identified by the determining component . In embodiments a calling component is established to communicate with the target application in order to retrieve the item shells that are monitored and maintained thereby as discussed above with reference to the aggregation component . Although the calling component is shown and described as being operably coupled to the target application the accessing element could ask the calling component to communicate with any local or remote data store to retrieve the appropriate item shells. Accordingly the calling component facilitates accessing listings exposed by a variety of applications. In this way the list generation process is extensible to retrieve item shells from a variety of applications including applications that are developed after installing the operating system on the computing device .

Upon retrieving the appropriate item shells the deriving element creates the destination list from destinations derived from the item shells. As discussed above the destinations are derived from retrieved item shells such that when surfaced at the UI display the destinations indicate the items that correspond to the item shells and typically provide a link to the items. In embodiments the indication of the items is based on the item identifier or display name expressed by the item shell and the link to the items is pulled from the location of the item e.g. address or command line which is also included within the item shell. As such upon receiving an indication of a user initiated selection at a destination surfaced within the submenu area the item identified by the destination is invoked by following the link to the content or command item. Generally invoking an item includes launching an application that manages the item i.e. that manages a content item or performs a command and automatically executing the command or opening the content item within the application without requiring additional user participation.

In embodiments the populating element is configured to populate the destination list with derived destinations. Typically the destinations are hierarchically arranged e.g. according to an ordering as independent entries within the destination list. The ordering may be based on the configuration settings as discussed above or any other method for ordering known to those of skill in the relevant field. In one instance destinations derived from ranked item shells within a listing are ordered according to the ranking. By way of example only destinations derived from the five highest ranked item shells in the listing of frequently used items are arranged with the first ranked destination as the top entry under a category head of the destination list and the fifth ranked destination as the bottom entry. As another example destinations derived from application designated item shells can be listed in an order that is indicated by the target application . Category heads which are based on listings as discussed above or other separators can be inserted into the destination list to divide groupings of destinations from a common listing. For example category heads could include Recently Used for recently used items Frequently Used for frequently used items and Tasks for application designated items. The category heads could come from various sources such as the target application and or the operating system . For example some category heads could be designated by the operating system and some could be designated by the target application . Accordingly users are quickly guided to a section of the submenu area that has destinations relevant to their present task.

In embodiments the rendering component is configured to provide the generated destination list or a representation thereof to the UI display . In particular the rendering component may provide for presenting the destinations and category heads as arranged by the population element within the submenu area. As such the user is provided with a rich list of destinations that point to items associated with a selected application allowing a user easily to cause the application to launch and perform a selected item.

Referring now to a flow diagram is shown that illustrates an overall technique or method for displaying and using a destination list. A destination list can be maintained as indicated at a block . This maintenance may include receiving and processing usage data and or data from an application designating items to be included in the destination list such as with the receiving calling component the aggregation component and the list generation component . This maintenance can include initially building a list updating a list that has already been built or both.

As indicated at a block an application launcher can be displayed such as on the user interface . The application launcher can be displayed in a variety of ways and situations such as in association with a general menu including a general listing of available applications e.g. a menu accessed by selecting a displayed start button or a taskbar.

As indicated at a block a user input associated with the launcher can be received e.g. by the input receiving component . For example the launcher may include a displayed button and or icon on the user interface and the user input may include a user clicking on an adjacent icon or button such as a split button or it may include hovering a cursor over a target area including or adjacent to the icon or button.

A destination list such as an application specific destination list can be displayed such as on the user interface as indicated at a block . The destination list may be displayed in response to the user input associated with the application launcher and it may be displayed even if the application is currently inactive but could also be displayed if the application is running. The destination list may be displayed in association with the application launcher such as in a menu area near or overlapping with the launcher on a user interface display. The destination list may include usage based destination listings e.g. indicating frequently and or recently used items and or application designated listings e.g. indicating important task items as indicated by a target application .

As indicated at a block user input can be received e.g. by the input receiving component in association with the displayed destination list to select an item indicated by one of the destinations on the list. For example the displayed destination list may include a series of displayed destinations and the user input may include a user clicking on the area occupied by the destination indicating the selected item.

As indicated at a block the application associated with the destination list can be launched if it is not already running and the selected item can be performed by the application. This may be done without requiring additional user input. As an example if a destination with a display name Send New Mail is selected in association with an email application display in the launcher the email application can be launched and a template for a new email message can be displayed. A user can then fill in necessary information e.g. an email address and a text message and click on a displayed Send button to send an email message. As another example if a destination having a display name Create 10 Envelope is selected in association with a word processing application then the word processing application can be launched and a template for a 10 envelope can be opened in the application.

Referring now to a flow diagram is shown that illustrates a general method or technique for displaying and using an updated destination list. As indicated in a block update information can be received from an application such as with the calling receiving component . As an example this update information may be an indication from an application that one or more updated application designated items should replace existing items in a destination list associated with the application. As an example if the application designated items had previously included an item for signing into an instant messaging application then the updated items might instead include an item for signing out of the instant messaging application.

As indicated in a block an updated destination list can be displayed. For example this might include displaying a list with an updated Sign Out destination indicating a signing out item in place of a prior Sign In destination indicating a signing in item.

As indicated in a block user input can be received in association with a selected item indicated by a selected destination. In addition as indicated in a block the associated application can be launched if it is not already running and the indicated item can be performed by the application in response to the user input.

Turning to a flow diagram is shown that illustrates an overall method or technique for presenting a destination list at a user interface display. Initially a user initiated indication to view a destination list is received e.g. utilizing the input receiving component as indicated at a block . The indication can be done in association with an application launcher and may include at least one or more of the following actions traversing a cursor tool into a trigger area proximate to an application launcher selecting a split button rendered on a UI display near an application launching icon e.g. UI display hovering the cursor tool over an application icon pinned to a taskbar or selecting an application launcher within an application menu. Incident to receiving the indication to view a destination list a list generation process is executed e.g. utilizing the list generation component as indicated at a block . Generally the list generation process constructs a destination list by performing operations such as the following identifying item shells at a data store accessing the data store to retrieve the identified item shells deriving destinations from the item shells determining properties of a submenu area and populating the submenu area with the destinations. This may be done whether or not the corresponding application is currently running.

In particular the item shells can be identified within listings in one or more data stores e.g. utilizing the determining element as indicated at a block . The listings may be one or more of the listing of recently used items the listing of frequently used items the listing of application indicated items and another listing maintained by an application. As such the list generation process can be extensible to selecting item shells from various local and remote listings. As more fully discussed above the item shells can be identified according to configuration settings of the destination list. As indicated at a block the identified item shells can be retrieved from their respective listings upon accessing the data stores e.g. utilizing the accessing element . Destinations can be derived from the identified item shells e.g. utilizing the deriving element as indicated at a block . Typically the destinations are derived from retrieved item shells such that when surfaced at a UI display the destinations indicate the items that correspond to the item shells and typically provide a link to the items such as content items or commands. In embodiments the indication of the items is based on the item identifier or display name exposed by the item shell and the link to the items is pulled from the location of the item e.g. a path and file name or a command line embedded in the item shell. In other instances the item shells are generally stored shortcuts i.e. links to the appropriate items that comprise the destination list. As indicated at a block properties of a submenu area allocated for the destination list can be determined. In one instance determining includes measuring the size of the submenu area to determine a window height a window width and other dimensional attributes of the submenu area. The submenu area may then be populated by the destinations in accordance with the determined properties e.g. utilizing the populating element as indicated at a block .

As indicated at a block the destination list can be surfaced within the submenu at the UI display e.g. utilizing the rendering component . Incident to surfacing the destination list a destination within the submenu area may be indicated by a user initiated selection as indicated at a block . Again this may be done whether or not the application is currently running. The selection may comprise any method of selecting content presented on a UI display known in the relevant field. As indicated at a block upon detecting the indication an item identified by the selected destination e.g. by way of the item identifier or display name is invoked. Generally invoking the item includes launching an application that manages the item and performing the corresponding item such as by opening a corresponding item or executing a corresponding command or series of commands within the application.

With reference to a flow diagram is shown that illustrates an overall method or technique for generating a destination list utilizing usage data and or application designated data corresponding to a target application. Initially as indicated at a block usage data that corresponds to a target application can be automatically captured. In embodiments automatically capturing usage data includes receiving a notification of a recent user initiated activity associated with an item managed by the target application as indicated at a block and automatically capturing a timestamp cataloging the recent user initiated activity as indicated at a block . As indicated at a block the usage data can be aggregated in a data store. As indicated at a block a listing of recently used items can be dynamically built based on the usage data. In one instance the listing of recently used items is ordered by ranking the most recently used item first according to a comparison of the timestamps the second most recently used item second and so on.

As indicated at a block a listing of frequently used items can be dynamically built utilizing the usage data. Initially the listing of frequently used items can be dynamically built by determining a score associated with each item managed by the target application as indicated at a block . A decay algorithm can be applied to the scores of the items as indicated at a block thereby increasing the relevance of the listing. As indicated at a block the listing of frequently used items can be populated with items having a score above a predefined threshold. In one embodiment the predefined threshold corresponds to an attribute of the configuration settings that governs which if any items from the listing of frequently used items are represented in the destination list. As indicated at a block a listing of application designated item shells can be received such as from a target application . Such application designated item shells could represent important application specific items such as tasks that are commonly performed by many users of a target application. Such items can be represented by destinations on a destination list regardless of the usage of a particular user. As indicated at a block item shells can be stored in association with the above listings. In one instance destinations are derived from the item shells while or upon building the listings. These destinations to items may be indexed based on an ordering of item shells within the listings above.

With reference to screen displays are shown that illustrate exemplary display areas that include an application launcher and an associated destination list submenu area populated with destinations indicating application specific items in accordance with described embodiments. Turning to an exemplary display area is shown that includes a submenu area populated with destinations and . As discussed above the content of the submenu area is the destination list of destinations representing corresponding items. Accordingly the configuration settings of the destination list can guide the arrangement of the destinations and within the submenu area . In the embodiment illustrated three listings are accessed for populating the destination list which are represented by category heads and . In particular the category head Frequent identifies the destinations therebelow as representing frequently used items. The category head Recent identifies the destinations therebelow as representing recently used items. In addition the category head Tasks identifies destinations therebelow as items that are application identified tasks which can be performed by a corresponding email application. As such this destination list represented in the submenu area is associated with an email application and with the application launcher .

The email application is represented by a button in an application launcher and resides within a listing of application launchers . In embodiments an icon related to the application launcher is presented. The listing is arranged by recently launched applications frequently launched applications or any other ordering scheme known in the relevant field. In one embodiment the listing is surfaced within a menu area which can be invoked by selecting a button or trigger not shown on the exemplary display area . In another embodiment the listing is incorporated in a general menu e.g. invoked upon selecting a Start button . Proximate to the application launcher is a trigger area . In the embodiment shown the trigger area overlays a visual display of the application launcher .

In operation in one embodiment upon a cursor tool entering the trigger area the submenu area is surfaced even if the application has not already been launched. Typically a selection within the trigger area will launch the application e.g. target application that is identified by the application launcher . In another embodiment a split button is surfaced upon the cursor tool entering the trigger area . Selection of the split button causes the submenu area to surface. Also a pin button may be surfaced upon the cursor tool entering the trigger area . Selection of the pin button with reference to a particular destination causes the particular destination to be pinned to the destination list . Pinning implies that the particular destination is appended to the destination list thus consistently surfaced with the submenu area until the particular destination is deselected as being pinned . In embodiments a pin indicator signifies that the particular destination is pinned to the destination list . A user may be allowed to un pin a destination that has already been pinned. Also a user may be allowed to remove a destination from the destination list whether or not that destination has already been pinned. In some implementations removing a destination also clears usage based data for the associated item. Such removed destinations may reappear later such as if the associated items later meet the requirements for usage based listings. Pinning un pinning and or removing may be available for some categories on a destination list but not others. For example a destination list may include a Tasks category listing that includes destinations indicating application designated items that a user can neither pin to the destination list un pin from the destination list nor remove from the destination list.

As more fully discussed above selection of the particular destination or any of the application specific destinations and of the destination list invokes the item linked to the particular destination by launching the application if it is not already running and performing the item.

Turning to an exemplary display area is shown that includes a submenu area populated with destinations and . As discussed above the content of the submenu area is the destination list . Accordingly the configuration settings of the destination list can guide the arrangement of the destinations and within the submenu area .

In the embodiment illustrated three listings are accessed for populating the destination list which are represented by category heads and . In particular the category head Recent Websites indicates that the destinations therebelow identify items that are websites which have been recently visited. Typically these items are identified by item shells within a listing of recently visited websites managed by a web browser application. The category head Tools can indicate the destinations therebelow identify tools which are items that are available to be performed within the web browser application. In embodiments the destinations and can reference items that have been recently executed frequently executed or identified as a preferred tool by a user. In addition the category head Favorites can indicate the destinations therebelow are destinations that link to a user s favorite websites.

In an exemplary embodiment selection of one of the destinations or invokes the selected destination. In particular invoking the selected destination includes launching the web browser application if it is not running or opening an instance of it if it is already running and instructing the web browser application to automatically open a web page at a website referenced by the selected destination. As such this destination list represented in the submenu area is extensible to listings managed by a web browser application as well as to listings maintained according to user preferences.

In operation the submenu is surfaced upon selection of a split button proximate to an application launcher that upon selection launches the web browser application. The application launcher is included within a taskbar . Inclusion within the taskbar may be accomplished automatically by an operating system or manually by a user by pinning the application launcher thereto. In one embodiment the split button is surfaced upon a cursor tool entering within a trigger area not shown proximate to or substantially overlaying the application launcher . In another embodiment the split button is consistently surfaced adjoining the application launcher . Upon selection of the split button the submenu area can be surfaced thereby presenting the destination list .

Turning to an exemplary display area is shown that includes a submenu area populated with destinations and . In the embodiment illustrated two listings are accessed for populating the destination list the listing of frequently used items referenced by the destinations and the listing of recently used items referenced by the destinations . In operation the submenu is surfaced upon selection of a split button located adjacent to an application launcher on a preview menu . The preview menu is surfaced upon a cursor tool entering within a trigger area that substantially overlies a window switcher pinned to a taskbar . In the embodiment illustrated the application launcher upon selection launches a directory navigation application to find particular documents. The preview menu presents a thumbnail view of a page in a directory with documents listed therein. Additionally the preview menu includes the split button . Selection of the split button surfaces the submenu area accordingly the destinations and are surfaced as suggested by the destination list . Alternatively a user may be able to trigger the surfacing of the submenu area in some other manner such as from a right mouse click while a cursor tool hovers over a trigger area on a taskbar. In such a situation it may be desirable to omit the split button from the preview menu and not allow a user to surface the submenu area from the preview menu .

Turning to an exemplary display area is shown that includes a submenu area populated with destinations and . As discussed above the content of the submenu area is the destination list . Accordingly the configuration settings of the destination list can guide the arrangement of the destinations and within the submenu area .

In the embodiment illustrated four listings and are accessed for populating the destination list . Three listings and which are represented by category heads and include destinations representing application specific items and one listing includes destinations representing operating system items i.e. items to be performed by the operating system rather than the associated application . In particular the category head Pinned indicates that the destinations therebelow identify items that are media files that have been pinned to the destination list by a user as described above. Typically these items are identified by item shells within a listing of pinned items managed by a media application. The category head Frequent can indicate the destinations therebelow identify frequently accessed media files that are managed by the media application. The category head Tasks can indicate the destinations therebelow identify items that can be performed by a media application and that have been designated by the media application to appear on a listing of application designated items. Below the Tasks destinations a listing can include operating system tasks that can be performed by the operating system rather than the associated application.

In embodiments the destinations and can reference application specific items that have been pinned frequently executed or identified for inclusion by the associated application. In some embodiments some destinations may be able to be pinned to the submenu area by a user while others may not. For example destinations in the Frequent listing may be able to be pinned while destinations in the Tasks listing may not be able to be pinned.

In an exemplary embodiment selection of one of the destinations or invokes the selected destination. In particular invoking an application specific item destination or can include launching the media application and instructing the media application to automatically perform the selected item such as by playing a media file referenced by the selected destination opening a library browsing environment referenced by the selected destination open an internet radio environment referenced by the selected destination etc. Invoking an operating system item destination can include the operating system performing a selected item such as pinning the associated application to the taskbar or launching the application in a default manner. As such this destination list represented in the submenu area is extensible to listings managed by an operating system by a media application and or according to user data or user preferences.

In operation the submenu is surfaced upon selection of a split button proximate to an application launcher that upon selection launches the media application. The application launcher can be included within a taskbar . Inclusion within the taskbar may be accomplished automatically by an operating system or manually by a user by pinning the application launcher thereto. In one embodiment the split button is surfaced upon a cursor tool entering within a trigger area not shown proximate to or substantially overlaying the application launcher . In another embodiment the split button is consistently surfaced adjoining the application launcher . Upon selection of the split button the submenu area can be surfaced thereby presenting or displaying the destination list . A user can provide user input that indicates a desire to surface the submenu area in many different ways. For example the submenu area may be surfaced upon a user executing a right mouse click or providing some other user input indication while the cursor is hovering over a target area such as the area of the application launcher or a running window button on a taskbar. This could be done in lieu of or in addition to the use of a split button in user interfaces such as those illustrated in .

Turning to an exemplary display area is shown that includes a submenu area populated with destinations and . As discussed above the content of the submenu area is the destination list . Accordingly the configuration settings of the destination list can guide the arrangement of the destinations and within the submenu area .

In the embodiment illustrated three listings and are accessed for populating the destination list . Two of the listings listing and which are represented by a category head can include destinations representing application identified application specific items. These two listings and can be separated by a separator which is illustrated as a line but could be some other type of separator such as a shaded area a category head and or additional space between separate listings. This separator can be similar to other separators between separate listings and in the destination lists illustrated in and between the bottom two listings and in the destination list in . An application may designate where this separator will be as well as which application designated destinations will be in each of the two separate listings. This could be designated for example in the configuration settings for the destination list.

Another listing can include destinations indicating operating system items. In particular the category head Tasks can indicate the destinations and therebelow identify items that can be performed by an information management application and that have been indicated by the information management application to appear on a listing of application designated items. Below the Tasks destinations listings and a listing can include an operating system destination listing with destinations indicating items that can be performed by the operating system rather than the associated application. The destinations can be invoked and managed in manners similar to other destinations illustrated and discussed above with reference to . The operation of the submenu and the associated split button application launcher taskbar and cursor can be similar to corresponding operations described above with reference to .

The present invention has been described in relation to particular embodiments which are intended in all respects to be illustrative rather than restrictive. Alternative embodiments will become apparent to those of ordinary skill in the art to which the present invention pertains without departing from its scope.

From the foregoing it will be seen that this invention is one well adapted to attain all the ends and objects set forth above together with other advantages which are obvious and inherent to the system and method. It will be understood that certain features and sub combinations are of utility and may be employed without reference to other features and sub combinations. This is contemplated by and is within the scope of the claims.

