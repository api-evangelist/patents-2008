---

title: Methods for analyzing, limiting, and enhancing access to an internet API, web service, and data
abstract: The invention includes an API gateway server that monitors and controls the distribution of API elements from API sources to application developers based on a distribution rule set.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09027039&OS=09027039&RS=09027039
owner: Intel Corporation
number: 09027039
owner_city: Santa Clara
owner_country: US
publication_date: 20080129
---
This application claims the benefit of and priority to U.S. Provisional Application No. 60 898 365 filed on Jan. 29 2007 the entire contents of which are incorporated herein by reference.

An Application Program Interface API typically includes a library of program elements such as functions routines protocols or processes associated with a particular operating system or computing platform. The program elements may be software based functions and or processes in the form of source code scripts and or executable code. The computing platform may include software and or hardware. For example the hardware may include a type of processor e.g. Intel x86 processors or hardware system. The software may include a version of an operating system such as UNIX LINUX WINDOWS one or more proprietary operating systems or like environments that allow for running or executing an application and or program.

An API allows an application programmer to efficiently develop an application program capable of interfacing with the computing platform because the interface work is already done by the API. The programmer simply incorporates or programs the needed API functions from the API library into the application program. A programmer may use a software development kit SDK or other tool to develop application programs. The development tool may include APIs or may enable the developer to remotely access APIs for a particular computer platform. Currently most APIs are either openly accessible or include access control capabilities as part of the API.

Recently Internet or web based services have emerged that typically combine two or more web based services to enhance user experiences at a particular website. These combined web based services are referred to as mashups. One approach to combining web based services has been for at least one service to provide a web based API to developers such that the web based service can be integrated with another web based service. For example the Internet website ChicagoCrime.org combines the Google Maps web service with crime information in the Chicago Ill. USA area to show users where certain crimes have occurred geographically. To integrate the Google Maps service a user s web browser typically supports Javascript that further enables the user s browser to support the Google Maps API. Google Inc. of Mountain View Calif. USA freely distributes the Google Maps API to developers under certain conditions.

APIs are also used in other ways than mashups. APIs are used in web applications internal applications or intranet applications. APIs are used with desktop applications that access the API over the Internet. APIs are used in web page or desktop widgets. 

One problem with current approaches to distributing APIs including web based APIs is that there are no adequate mechanisms that enable the API provider to control regulate and or monitor API distribution or application development based on their APIs.

The invention in various embodiments is directed to systems methods and or devices that allow for a proxy application or server to operate as an intermediary between the program calling the API and the API itself which enables monitoring and control of access to the API. By monitoring and controlling developer access to the API usage of the API can be more fairly distributed among developers developer profiles of usage may be tracked and or analyzed and or usage based billing models may be employed.

In one aspect the invention includes an application program interface API gateway server. The API gateway server includes an API source interface capable of sending a request for one or more API elements to an API source and receiving the one or more API elements from the API source. The API gateway server includes a processor that controls the distribution of the one or more API elements based on a distribution rule set. The API gateway server also includes a developer interface capable of receiving a request for the one or more API elements from a developer client and sending the one or more API elements to the developer client based on the processor s control.

In one configuration the distribution rule set includes rules associated a limit on the number of API calls over a select period of time a limit of API calls for the developer client a limit of API calls for a select IP address whether a received identity of the developer client matches a stored identity of the developer client whether a received API developer key matches a stored API developer key whether a received developer client password matches a stored developer client password and whether a cryptographic authentication process has been satisfied by the developer client to validate the developer client s identity.

In another configuration the processor monitors the distribution of the API elements. The processor may monitor at least one of the number of API requests made by the developer client over a period of time the identity of the developer client usage trends by the developer client and usage trends based on IP address. The gateway server may include a monitor interface that sends API distribution information to a user interface where the user interface is remote from the gateway server. The user interface may include a web browser.

In one configuration the API source interface and the developer interface are included in the same network interface unit. In alternate configuration the API source interface and the developer interface are included in different network interface units.

In one feature the controlling process includes determining whether the developer client is authorized to access the one or more API elements and if authorized allowing the developer interface unit to send the one or more API elements to the developer client or if not authorized preventing the developer interface unit from sending the one or more API elements to the developer client. The determining process may include validating an API developer key associated with the request from the developer client.

In another configuration the developer client includes a network based application operating at run time and the one or more API elements are run time API elements. The request for the one or more API elements from the developer client may be substantially the same as the request for the one or more API elements to the API source. In other words the gateway server may relay the request from a developer client to the API source if access is allowed by the processor.

In another aspect the invention includes an intermediate server for controlling the exchange of data in a data network. The intermediate server includes a transceiver and a processor in communication with the transceiver. A computer readable medium e.g. software is configured that enables the processor to i receive a request for the one or more API elements from a developer client ii send a request to an API source for one or more API elements iii receive the one or more API elements from the API source iv control the distribution of the one or more API elements based on a distribution rule set and v send the one or more API elements to the developer client based on the distribution rule set.

In various aspects the invention enables an easy web based dashboard for setting up the a proxy sever configuration and for managing users business rules and access rules and for providing usage reports.

In certain embodiments the server includes a web server and operates as proxy server . A proxy server may be simply referred to as a proxy. The proxy server may receive requests for access from client developer application programs such as application hosted on computer systems or via a network . The proxy server may evaluate these requests and determine which of the communications requests to allow or reject. If a communications request is approved the proxy server may communicates with a remote server e.g. server or database or to retrieve the requested API information on behalf of the client application of the system or . In one embodiment the proxy server does so by relaying requests from the client application e.g. an SDK application of system to the remote server which stores API information or data in database and returning responses from the remote server back to the client application of the system . In this manner the proxy server provides the illusion that the client program is communicating directly with the remote server and also acts as a gateway for access to the API . During this and any subsequent communications between the system and remote server the proxy server may gather information related the to exchanges to measure for example usage rates types of exchanges frequency of exchanges types of requests origins of requests and so on.

In certain embodiments the client application program may include an Internet browser program and be configured to recognize and use the proxy server as a web server. In other embodiments the proxy server may be configured to recognize and interpret each protocol of a plurality of possible protocols that may be used by a client program . Commonly used protocols include Hypertext Transfer Protocol HTTP File Transfer Protocol FTP Telnet and Secure Sockets Layer SSL for example. However new protocols and revisions of existing protocols may be frequently introduced. Thus in order to support a new or revised protocol a new revision of the proxy server may be continuously developed and released.

In one embodiment the system enables the development of a networked based e.g. Internet based application that may be configured and run on the application server the client device or a combination of the server and device . The application server may include a web server running a Web 2.0 application or the like. The device may include a web browser that supports Web 2.0 operations e.g. personal media device cellular telephone personal computer and the like . Web applications running on the application server may use server side dynamic content generation mechanisms such without limitation Java servlets CGI PHP or ASP. In certain embodiments mashed content may be generated by the web browser via for example client side scripting including without limitation JavaScript and or applets. In one embodiment the client side operations of the web browser include code embedded in the web pages of the application server along with scripting API libraries or applets that are made available by the content provider via the application server . In certain embodiments the application server and the web browser operate in combination to provide a user with a mashup based service referred to as a rich Internet application RIA .

In certain embodiments the application server and client include applications that employs asynchronous JavaScript XML Ajax and like technologies that use asynchronous loading and content presentation techniques. These techniques may include without limitation XHTML and CSS for style presentation document object model DOM API exposed by a web browser asynchronous data exchange of XML data and web browser side scripting e.g. JavaScript. Certain web based applications and services may utilize web protocols including without limitation the services orientated access protocol SOAP and representational state transfer REST . REST may utilize HTTP with XML.

The mass storage may include one or more magnetic disk or tape drives or optical disk drives for storing data and instructions for use by the CPU . At least one component of the mass storage system preferably in the form of a disk drive or tape drive stores the database used for processing the system of the invention. The mass storage system may also include one or more drives for various portable media such as a floppy disk a compact disc read only memory CD ROM or an integrated circuit non volatile memory adapter i.e. PC MCIA adapter to input and output data and code to and from the computer system . In one embodiment the mass storage includes a plurality of storage devices or media that are interconnected via a communications network. The plurality of storage media may interact such that the storage media function as a virtual mass storage system . One or more of the plurality of storage media may reside in separate locations while being interconnected electronically.

The computer system may also include one or more input output interfaces for communications shown by way of example as interface for data communications via the network . The data interface may be a modem an Ethernet card or any other suitable data communications device. To provide the functions of a computer according to the data interface may provide a relatively high speed link to a network such as an intranet internet or the Internet either directly or through an another external interface. The communication link to the network may be for example optical wired or wireless e.g. via satellite or 802.11 Wifi or cellular network . Alternatively the computer system may include a mainframe or other type of host computer system capable of Web based communications via the network .

The computer system also includes suitable input output ports or may use the interconnect bus for interconnection with a local display and keyboard or the like serving as a local user interface for programming and or data entry retrieval or manipulation purposes. Alternatively server operations personnel may interact with the system for controlling and or programming the system from remote terminal devices via the network .

The computer system may run a variety of application programs and store associated data in a database of mass storage system . One or more such applications may enable the system to function as a proxy server that monitors and controls access to certain API information being requested by remote development systems.

The components contained in the computer system are those typically found in general purpose computer systems used as servers workstations personal computers network terminals portable devices and the like. In fact these components are intended to represent a broad category of such computer components that are well known in the art. Certain aspects of the invention may relate to the software elements such as the executable code and database for the server functions of the proxy application .

As discussed above the general purpose computer system may include one or more applications that control and monitor access to APIs in accordance with embodiments of the invention. The system may include software and or hardware that implements a web server application. The web server application may include software such as HTML XML WML SGML PHP Hypertext Preprocessor CGI and like languages.

The foregoing embodiments of the invention may be realized as a software component operating in the system where the system is Unix workstation or other type of workstation. Other operation systems may be employed such as without limitation Windows and LINUX. In that embodiment the proxy software can optionally be implemented as a C language computer program or a computer program written in any high level language including without limitation C Fortran Java or Visual BASIC. Certain script based programs may be employed such as XML WML PHP and so on. Additionally general techniques for high level programming are known and set forth in for example Stephen G. Kochan Programming in C Hayden Publishing 1983 . Developing code for the DSP and microcontroller systems follows from principles well known in the art.

As stated previously the mass storage may include a database. The database may be any suitable database system including the commercially available Microsoft Access database and can be a local or distributed database system. The design and development of suitable database systems are described in McGovern et al. A Guide To Sybase and SQL Server Addison Wesley 1993 . The database can be supported by any suitable persistent data memory such as a hard disk drive RAID system tape drive system floppy diskette or any other suitable system. The system includes a database that is integrated with the system however it will be understood by those of ordinary skill in the art that in other embodiments the database and mass storage can be an external element.

In certain embodiments the present invention enables tracking and regulating of access to APIs web services web based APIs and data feeds. Currently most APIs are either openly accessible or include access control capabilities as part of an API. The present invention allows for a proxy to act as a communications intermediary between the program calling the API e.g. application and the API itself e.g. API and or . In one embodiment the proxy captures an access key contained in the API call and may use that key for several purposes including without limitation 1 Capturing and displaying data at for example owner systems on how the API is accessed including who is accessing it how they are accessing it and where they are accessing it from 2 Limiting the number of times per second the API can be called from a given developer system or IP address and 3 Counting down to a maximum number of calls per day week or month. Once the limit is reached access can be turned off or the user s developer s account can be charged for access or a notification can take place.

In one embodiment the proxy can operate either at a third party facility or in one or more appliances within the API provider s data center facility. In another embodiment Web pages that are produced using data pulled from the proxied API contain code that will alert a monitor system such as systems or that it has been called. This code can also sense what other web services are being used on that page. With this information web page calls can be matched to back end API calls in order to ensure that the back end calls match to particular web pages and in order to allow the API provider or owner to ensure that the use is consistent with their policies.

In another embodiment the proxy provides caching load balancing and other performance improvements. The proxy may also provide enhanced security and data encryption. Enhanced security may include access control cryptographic authentication message integrity checking encryption digital rights management services and other like security services. The security may include protocols such as IPSEC and IKE. The encryption may include without limitation DES AES RSA and any like public key or private key based schemes.

In one embodiment a particular API developer key is authorized to use certain API methods and or elements. The proxy may regulate access to the API by any combination of one or more of the following criteria 

In certain embodiments the proxy provides and or supports two tier authentication whereby a particular developer can access the private information of a particular user. For instance a developer may build and or create an application that accesses a particular API e.g. flickr API which may be an extension to a photo management application e.g. iPhoto running on a user s PC. The user may want the developer s application to access the user s personal photo account on the Flickr website. The proxy and or flickr website may include a table that indicates which accounts can be accessed by which third party and or developer applications.

The proxy may include one or more routines applications or units such as without limitation 1 a rate and usage limiting unit 2 a security and access control unit and 3 a caching and performance monitoring unit . The unit may be implemented as a software application or subroutine or other like code of the proxy . The unit may perform functions such as limiting the number of times per second the API can be called from a given developer system or IP address or maintain a count of the number of API calls per day week or month and comparing the count with a predefined limit setting. Once the limit is reached access can be turned off or the user s developer s account can be charged for additional access or a notification can take place. The unit may authenticate API call requests using any one or combination of known cryptographic or password based authentication schemes. For example unit may capture an access key contained in an API call and check that the access key is the proper access key associated with a particular developer system or . The unit may interface with a database containing a list of authorized developer systems and their associated access key information. If the access key is proper the unit may then authorized the access to an API or other services provided by the proxy . The unit may enable the capture and display of data regarding how the API is accessed including who is accessing it how they are accessing it and where they are accessing it from. The unit may also provide caching load balancing of access requests and other performance improvements

The monitor application may provide information via a GUI to a user of an API provider including without limitation to enable 1 API access and commerce management 2 key issuance and registration 3 usage metrics and reporting 4 terms and conditions management and 5 documentation and developer community information. The monitor application may interface with the proxy directly or indirectly to provide any one of the above services.

In certain embodiments the proxy provides real time access to elements routines functions code procedures etc. . . . of an API to a web based application operating as a run time application or a web based application that is formed made linked and or compiled at run time.

In certain embodiments the dashboard server enables an API provider owner distributor supervisor and or controller to monitor developer access statistics to one or more APIs. The server may include a reporting engine that presents certain access information in summaries or snapshots showing how a particular API is being used which developers are using the particular API when developers are using an API and how often or how much developers are using an API. The engine may also provide information regarding the size of a developer group and the reach of the API distribution channel. The server may include a web server application or engine that presents various API and developer related information via a web based interface or series of web pages.

In certain embodiments the proxy server supports at least two forms of rate limiting for access to an API. The first form is where the API provider specifies how many API calls per second that the API server will accept from a particular developer key to avoid a particular developer from overloading the API server from a burst of API calls. If the developer exceeds the limit the proxy server may send an HTTP 1.1 403 error Forbidden Over rate limit until the next second begins. The second form is where the API provider specifies how many calls each developer key can make over a predetermined period of time e.g. day week or month . If the developer exceeds the limit the proxy server may return a 403 error issue a notification but continue to allow access issue notification but allow access up to a certain high level of overage and or accept traffic up to a certain level for free but charge for additional access that exceeds the free limit.

In one embodiment the proxy server generates and issues API developer keys. Each API developer key may include a randomly or pseudo randomly generated characters. In one embodiment the API developer key includes 24 characters. In another embodiment the API developer key is generated based in part on microprocessor timing information and or randomly generated salts.

In certain embodiments the proxy server allows an API provider owner to build and control their API channels without burdening in house staff with the headaches of access control usage measurement and community management by providing security control scale and community support.

The proxy server may provide security services for API distribution including access control authentication and usage management. In one configuration the proxy server and or a dashboard server supports a real time view of who is using an API owner s web service and how the service is being used while guarding against misuse. In on embodiment the proxy is configured to issue API developer keys provision new web service customers in real time and grant additional privileges to trusted users. The proxy server may support without limitation 1 Customer provisioning developer registration and key issuance 2 Regulated web service access and authentication native and third party 3 a Proxy that blocks all but approved requests from reaching API server and 4 Security access reports metrics and audit logs

The proxy server may provide control services that include without limitation API call metering metrics and management. Control and transparency requirements may range from metering and enforcing access limits to a wide array of usage metrics. The proxy server and or dashboard server may support a set of metrics and reports See that give an API owner the tools to analyze how their service is being accessed and used across their customer base. Management features may include 1 Configurable web service usage and access limits 2 Uptime performance and availability monitoring 3 Rule based configurable web service charging and billing.

In certain embodiments the proxy server supports scalability including caching throttling and dynamic provisioning. The proxy server enables an API owner to improve their web service performance across an entire customer base resulting in enhanced performance for all your customers. In one embodiment the proxy server includes intelligent caching capabilities whereby the proxy server pushes the results of the most frequently accessed web service calls right to the edge of the network. Along with rate limiting functionality the proxy server can define and enforce rules to throttle an individual developer customer s web service usage. Key scaling features include without limitation 1 Intelligent caching 2 Usage throttling and limiting and 3 Dynamic rules based provisioning.

The proxy server enhances the API and or web service provider s ability to establish a robust developer community. In one embodiment the proxy server supports a comprehensive set of developer and community tools. Developers can annotate documentation with comments. The proxy server may support a developers blog forum and wiki that can be moderated and controlled by the API owner. The proxy server may present various developer tools and other information in the web service owner s look and feel with a single sign on for all tools. Key developer and community tool features may include without limitation 1 Fully integrated and hosted web service blog wiki annotated documentation and forum 2 Full control of site CSS for true custom skin and 3 Content management versioning and change control.

In certain embodiments the proxy may be distributed and or operate in a geographically distributed way. For example API calls from Boston Mass. may be routed to an east coast proxy while calls from Singapore may be routed through an Asian based proxy. In one embodiment rules may be applied and reports generated across all proxies instances and or elements of the proxy . The distributed proxy may include two or more proxy servers operation in conjunction with each other to perform the proxy functions.

In another embodiment the proxy sever provides regulation management and metrics without actually proxying an API call. Consider an API that provides access to a video stream from a widget on a web page. The widget can send the query to the proxy server whereupon the proxy server evaluates at least one of a developer key business rules an so on and then issues an allow deny to the widget or a one time access URL that the widget then uses to retrieve the video content.

In a further embodiment the proxy server supports a third party counting API. Because the proxy server can parse out any information from a REST or JSON call or other like protocol the proxy server can allow entities to ping the proxy server s with API and or application calls that are not expecting any response but which have information they want parsed out of them and counted so that the caller can receive reporting on the information. This may advantageous uses including without limitation 

In certain embodiments the proxy server perform pre and or post processing of requests and responses and can also perform traffic shaping and load balancing services. This can take several forms such as without limitation 

It will be apparent to those of ordinary skill in the art that methods involved in the present invention may be embodied in a computer program product that includes a computer usable and or readable medium. For example such a computer usable medium may consist of a read only memory device such as a CD ROM disk or conventional ROM devices or a random access memory such as a hard drive device or a computer diskette or flash memory device having a computer readable program code stored thereon. A program may include a complete software application a portion of an application a portion of software code or coding one or more lines of script or code or source code or executable code.

