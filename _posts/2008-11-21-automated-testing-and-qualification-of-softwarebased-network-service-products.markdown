---

title: Automated testing and qualification of software-based, network service products
abstract: A computer-based method for qualifying a software application such as a monitoring and/or management network-delivered product. The method includes operating a computer to run a software application with network-delivered services. A qualification computer system is provided with a code generator adapted for processing device qualification data and with a comparator module. The method includes generating a set of event messages with the code generator by processing a set of received or retrieved device qualification data. The event messages are processed with the services or serviceability features of the software application to generate a set of output. With the comparator module, the actual output is compared with expected output for the event messages. Based on the comparison, a qualification report is generated, and the expected output may be output from unit test cases. A code generator may be included that generates one or more native protocol event generators.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08191048&OS=08191048&RS=08191048
owner: Oracle America, Inc.
number: 08191048
owner_city: Redwood City
owner_country: US
publication_date: 20081121
---
The present invention relates in general to methods and systems for testing and qualifying software tools and applications such as those used to provide hardware and or software service products including network based monitoring applications and more particularly to methods automating the testing and qualification of applications tools routines and the like such as software programs or plug ins add ons developed to provide new hardware or software serviceability or other features to network monitoring tools applications that may be provided via a network delivery model.

Software testing is used to provide developers and purchasers of a new product or features being added to an existing software product with information about the quality and effectiveness of the product or service. The product is preferably tested or qualified for use in the context in which it is intended to operate such as within a similar computer system or network with similar operating conditions including similar running software applications similar hardware devices such as servers data storage devices and configurations and communications components or networking devices. Customers or users of new products want assurances that a new product or upgrades to an existing software service have been adequately tested and will not cause their system to crash or even result in degradations in the system or device operations.

Testing cannot completely establish the correctness of a new software product or added feature of an existing application but it instead typically provides a comparison of the state and behavior of the software product with standards such as comparable products prior versions of the product and customer or user expectations for the product. The primary purpose of testing is to detect software failures so that defects may be uncovered and corrected but this has become more difficult with the increasing complexity of software products and the systems or networks in which the software products are used. Testing or qualification of software products or added features is also used to determine whether the product or new features are compatible with other applications operating systems and hardware of the system running the product or using the new features.

Testing or qualifying software products is further complicated when the software product is adapted to provide services over or within a network e.g. services are provided based on the network delivery model . It is often difficult to replicate a typical customer s or user s data center or distributed computer network in a controlled or laboratory setting e.g. a test lab with identical computer devices similar storage configurations and networking devices linking these components including running applications and operating systems. The option of running the new software product on the customer s system for qualification is also generally not an option as the user wants the product to be tested or proven before loading onto their system.

The information technology industry has for example developed management software or suites of application that may be used to monitor and manage operation of a data center data storage array or system or other computer system. For example Sun Microsystems Inc. provides array management software including an Auto Service Request ASR feature or module that monitors the array system health and performance e.g. based on telemetry collected operating data from the customer s system components and automatically provides notifications when critical events occur e.g. generates an automatic Service Request case upon a critical alarm that is transmitted to a support or monitoring center . Such monitoring and management tools may be thought of as providing support services or serviceability features via a network or by a network delivery model and these tools have been very popular with owners of large computer systems such as data centers for monitoring operation of storage devices and even for monitoring and controlling power usage. A drawback of such network delivered services is the complexity and difficulty of testing new products or even adding new features or services to these management applications.

Providing product support services for servers storage software and so on requires a qualification process for each product or added feature prior to delivery. The new hardware or software serviceability features or service products may be provided across such attributes as power consumption component faults component or environment monitoring or even user specified operating parameters. Presently there is little or no automation around the network service delivery software that is written to facilitate testing of remote services or features such as automated case creation power analysis predictions and so on that may monitor using telemetry or the like. As a result existing testing and qualification is an expensive and time consuming process that may even produce incomplete results e.g. when a user s system is not adequately replicated in a lab setting .

There remains a need for methods for qualifying network delivered services and other similar software products. Preferably such a qualification method would address the need to test or qualify network delivered services that may include automated service request creation or other monitoring outputs alarms alerts such as those created upon observation of hardware component faults power monitoring event monitoring and other monitoring of storage servers and service offerings such as MySQL GlassFish and the like. For example it is desirable to provide a qualification method for speeding up the process of providing new hardware or software serviceability features for a network monitoring or similar application that reduces field costs and delays in delivery of support offerings to the marketplace .

Briefly the above and other issues with testing and or qualifying software applications especially those with network delivered features and services addressed with qualification methods of the present invention that may be labeled or thought of as service qualification processes. The qualification methods provide generic extensible and platform independent mechanisms of leveraging device qualification data to speed up qualification testing and delivery of web based remote service offerings. The use of device qualification data as described herein facilitates automated and exhaustive testing of product serviceability features of new software products or new features being added to existing software applications such as data center or data storage monitoring and management software applications tools or suites and these features may include fault management features power management features and other services such as device or software module availability monitoring. Use of the qualification processes of the invention facilitates delivery of cost optimized network service products in a timely manner with a higher level of assurance that these software based products have been fully tested to verify consistent and high quality features and operability.

More particularly a computer based method is provided for qualifying a software application such as a monitoring and or management product that provides monitoring and or management services over a communications network. The method includes operating a computer which is communicatively linked to a network such as the Internet a LAN a WAN or the like to run or provide a software application with a plurality of network delivered services. A qualification computer system is also linked to the network to be able to communicate with the software application being tested qualified and the qualification system includes a code generator adapted for processing device qualification data and also includes a comparator module. The method continues with generating a set of event messages with the code generator by processing a set of received or retrieved device qualification data e.g. data encoded in spreadsheets for use in injecting errors into a monitoring or management application by simulating telemetry or other data from servers storage and other devices typically monitored by the software application in normal use . The event messages are processed with the services or serviceability features of the software application to generate a set of output actual output . With the comparator module the set of actual output is compared with a set of expected output for the event messages. Then based on the comparison a qualification report which may include or be the actual output is generated and in some cases delivered to a testing monitor or GUI or an output device.

In some cases the set of expected output is output from a set of unit test cases which processed or used similar or the same event messages. A code generator may also be included that generates one or more native protocol event generators and the method may include generating a set of events in a protocol native to one or more of the services of the software application based on the device qualification data for example . The qualification system may also include a set of device simulators that operate to generate environment enrichment data simulating a number of devices such as servers storage devices and the like and the software application processes this environment enrichment data e.g. simulated device data as part of processing the event messages or separately to create the set of output that is compared with expected output from previously prepared test cases.

Briefly embodiments of the present invention are directed to methods and systems for providing service qualification with automated and manual steps. The service qualification methods and systems are adapted to allow a software product such as a monitoring application to be tested by validating and or simulating a list of supported hardware products such as servers storage devices such as arrays host devices running particular operating system and the like without the need for a hardware lab as was required with prior qualification processes e.g. simulation of a data center to test a monitoring application with service features for particular hardware required replication of the data center with identically operating hardware products . The qualification process is particularly well suited for network delivered services that are more difficult to test or qualify in a lab setting.

Each of the systems may be implemented a variety of computers or computing devices typically adapted with one or more processors managing operation of input output devices and memory and running software modules or programs that may be provided via computer readable medium adapted to cause a computer or the systems to perform the functions described herein. In this discussion computer and network devices such as systems are described in relation to their function rather than as being limited to particular electronic devices and computer architectures. To practice the invention the computer devices and network devices may be any devices useful for providing the described functions including well known data processing and communication devices and systems such as desktop computers and even personal digital assistants personal laptop and notebook computers with processing memory and input output components and server devices configured to maintain and then transmit digital data over a communications network. Data including device qualification data device simulation data event messages files simulating device operations in response to device qualification data and transmissions to and from systems is typically communicated in digital format following standard communication and transfer protocols such as TCP IP HTTP HTTPS and the like but this is not intended as a limitation of the invention.

The qualification system includes a processor managing operation of I O devices that allow an operator to enter data input such as to select a software application to test and to select retrieve device qualification data for use in service qualification processes see for example . The processor also manages operation of a monitor to provide or display output such as qualification reports based on a comparison of actual outputs and expected outputs of tested features services of the tested software and or to display or output the actual output of the tested service products and or such as by displaying device audits for a device monitoring application e.g. a service manager a power manager or the like . Other output devices may be included in the system such as printers or data storage devices such as disks or pluggable memory devices such as USB sticks or the output of the qualification method or process may be transferred over the network to other devices.

The qualification system includes one or more code generators that are adapted in some embodiments to process device qualification data for devices e.g. hardware and or software devices that are serviced or interacted with by the tested software application or its features services . The output or product of the generators may be event messages that are then stored in memory for use in testing the software or it may include generated programs or code . The generated code may be used by the CPU to provide native protocol event generators and or to provide device simulators . In other cases the event generators and or device simulators may be provided separately or as pluggable components that can generate events or simulate devices. For example device simulation data may be fed to or retrieved by the CPU for processing by the device simulator to create a more accurate operating environment for the tested software application which may also be run on the qualification system as one or more modules under qualification processes . Note also that one or more programs routines not shown may be run by processor to act as a qualification engine coordinating operation of the various components such as the code generators the event generators device simulators and output comparator reporting module s e.g. to control flow of the process as described with reference to .

The system also includes test cases such as JUnits or the like for providing expected output based on a set of event message files or other test input payload used in qualifying the software application e.g. event messages are shown in but other inputs or data may be used to test a particular software application and its services . The actual input stored in memory is generated by application specific processing by the running software application or modules when it processes or responds to generated test input and or based on operations outputs of device simulators e.g. a data storage monitoring application may receive an event or alarm and then operate to monitor manage a device simulated by one or more of the simulators . The qualification system includes an output comparator and reporting module that acts to compare the expected output from an event or test input with the actual output produced by the software application or its service products features . The reporting module may then output a qualification report such as via GUI or a printer or the like and or provide the actual output as is and or with notations indicating identified differences with expected output or results of the comparison .

Generated code and test artifacts are used for testing in both a service oriented architecture SOA and or web based environments as well s with native protocols germane to the specific type of service e.g. Simple Network Management Protocol SNMP such as for testing of the Sun Auto Service Request ASR service or the like Telnet such as for testing of Sun s Intelligent Power Monitoring IPM service or the like and so on . The qualification process output may be generated as an automated report that includes information that helps testing personnel and or designers of the software to verify the functional correctness of various network service products in a matter of hours instead of requiring days or weeks of testing. For example the process has been used with or for the software based ASR solution and the framework or process has been used to qualify more than 30 server products and a few storage systems covering over 3000 SNMP alarms in less than 3 months. The process may be used to qualify software for use with various hardware software devices such as servers and storage systems but may also be used networking hardware and software applications such as MySQL products GlassFish services and the like.

In the process device qualification information is processed to create a set of device qualification data that is configured for use as input to one or more code generators . The device qualification data may be arranged in comma separated value CSV files include representative time series data provide event replay data captured during manual testing qualification processes and or other data that is typically representative of normal and or abnormal operation of a set of devices e.g. data encoded in spreadsheets or the like that may be used to inject operating errors for which monitoring management software is intended to detect or monitor for . The idea or function of the device qualification data is to capture data pertaining to certain serviceability aspects or functions of the device s such as component faults power consumption profiles certain performance or resource metrics crossing a predefined threshold e.g. that should cause an event or alarm . Also such captured data from qualifications can be supplemented by human manual and or subjective data such as an experts determination of actions to be taken e.g. data value over a threshold should trigger notification certain data value should signal a critical fault or other data .

It may be useful at this point to provide one working example of device qualification data that may be used in the qualification process . The device qualification data may be presented according to a CSV schema for server or storage systems such as by using Sun s Fault Management Architecture FMA or other tool. The following is an example of such schema for data in which each column is separated by a character MSG ID HW PLATFORM COMPONENT TRANSLATED TEXT SUMMARY DESCRIPTION SEVERITY SOURCE OF INFO. This format would of course be different for other network or tested services. For example for Intelligent Power Monitoring IPM services the qualification data may include power characteristics profile data with time series for each hardware product type. The process is extensible or adaptable in part because the qualification will vary based on the input or utilized device qualification data that may be provided or modified by parsers that implement different formats.

In the process code generators such as an extensible code generator written in Perl or other language takes the device qualification data as input in various formats to produce native protocol event generators e.g. generators creating events in SNMP for SunMC and FMA or other protocols and or event messages . In one embodiment used to qualify services for use in server systems the code generator takes CSV files as part of the qualification data for fault detection agents. This allows pluggable components to be used for generators that can generate virtual device simulation programs . In some cases other device simulation data e.g. event enrichment information time series and the like is provided or generated by code generators for use by or as input to device simulators in the form of matching device response and or event data enrichment files . The generated artifact for ASR qualification may have the following format with separated columns OID Event UUID attributeName attributeValue . . . ProductType Component . To facilitate operation of the code generators template files may be used for creating the native protocol event generators . For example for ASR qualification this would facilitate simulating faults grouped by components within a server or storage system simulating faults grouped by product type and so on.

The messages generated by code generators from qualification data may be event messages and may take the form of common format eXtensible Markup Language XML files. For example a single XML schema file may be chosen or designed that accommodates a large set of fault telemetry i.e. fault telemetry to cover storage server or software system events or types of telemetry payload. The event messages may relate to one or more hardware and or software devices with an identification of such devices along with information on the error or event such as describing a particular error that has been detected e.g. a correctable error an uncorrectable error that is fatal or non fatal such as a trap with an event identifier type and or other information related to the event or device.

The programs that are generated by the code generators may be adapted to talk the native protocol such as SNMP e.g. when the application is an ASR service Telnet e.g. when the application is an IPM service or the like with the particular protocol used for communications by the event generators e.g. events are issued to the application in a protocol it understands being adjustable by use of templates . In general the event generators act to transmit events for one or more hardware and or software devices. The events may take many forms depending upon the application being qualified but may include traps major critical and so on or other event alarm triggers and are issued or communicated in a native protocol to the service manager or monitoring application based on the device qualification data e.g. the data may include information that is processed by the generators to determine whether or not to transmit an event and when to transmit such an event or the transmittal time may be determined by the generator such as sequentially transmitting events randomly sending the events over a particular qualification time period and so on .

As shown at a set of normalized events are produced from or as a subset of the event messages that can be used to qualify or test the service manager or monitoring application . For example the events may be XML formatted events that are amenable to HTTP as payload and are adapted for being directly injected over the Web or network into web hosted service points in manager application . As shown the events are XML synthetic or test event injectors e.g. custom event injectors or events created using conventional testing tools such as JMeter or the like as these may be useful for processing output of the code generators to create synthetic event messages and act as a load testing tool for analyzing and measuring the performance of a variety of services or features of the application e.g. may be used as a unit test for database connections or other connections such as FTP LDAP Web services JMS HTTP and generic TCP connections .

At the event messages provided by the code generators may be used in configuring a set of existing test cases such as unit test cases provided via the JUnit or other unit testing framework. The Unit test cases may be called or run to provide expected output e.g. with the use of a JUnit test one can ascertain the ability of the application code of service manager or monitoring application to properly achieve a desired end state requirement or output such as output .

Event generators provided by code generators based on device qualification data are configured to send native format events such as SNMP traps or the like to the tested software application such as Sun s Automated Service Manager SASM . Other device simulation data such as event enrichment time series data and the like is used by a set of device simulators e.g. FMA based server and or storage device simulators and so on which may be provided as script or other code mechanisms to simulate operating devices that are serviced or monitored by application to produce event enrichment for qualification process .

The events or event injectors are provided to queue and dispatcher service for delivery to service manager or monitoring application for processing at . For example a RESTful queue may be used at to provide a message queue for event messages to provide load balancing of event injection delivery to application running on a computer device linked to a network with the queue dispatcher service accessing the application via the Web or network . At the application being qualified tested processes one or more received events from dispatcher service and the application may generate a variety of output such as reports YES NO decisions time series graphs and the like based upon the processing of the event s . In some embodiments the application processes the received events from and provides the output via HTTP or other protocol to a general receiver service which in turn sends it to step for further application specific processing. In either case the application specific processing that produces the actual output may vary widely according to the invention such as based on the type of telemetry event receive via . For example when the application is SASM a rules engine may be used to perform the processing and create cases as output while for an application that include power management the output may include a power analysis e.g. application of a Continuous System Telemetry Harness or other algorithm .

Elements and represent expected and actual outputs of an application or services features within a tested application or software product based upon pre defined test cases . At the actual output from the application is compared with the expected output to determine if the application or this particular feature acceptably handled the event or test element portion. For example the outputs may be numerical and a tolerance may be provided to determine whether the actual output is accurate enough to qualify the application or service of the application . The comparison function is customizable in the process e.g. to vary based on the type of service being tested in qualification process such that the step includes the intelligence to determine which logic it should use to compare actual and expected outputs and say whether the output and functioning of the service is acceptable e.g. say YES or NO or the like . At step qualification reports may be provided that indicate whether the application or a feature function within the application has successfully past the testing provided by processing one or more events and or in a particular enriched simulated operating environment and or . The output or reports may include all or portion of the actual outputs such as device audits for a service manager or a power management application running on a computer device or host system e.g. as may be used implemented after installation at a customer s facilities .

At a set of code generators are operated to process the qualification data and based on this processing output event messages e.g. XML event message files . The code generators may also operate at to output one or more native protocol event generators which are typically code that pretends to be a particular device and acts to generate events in protocols of the simulated device e.g. SNMP may be a native protocol for many managed serviced devices . At a set of test cases is used to generate and or determine the expected output of the application or its services subroutines being tested in method . For example an alarm or alert may be expected when a particular event message is received from an operating system or simulated system in this case and at this alarm or alert is identified and or generated.

At the method includes operating the program software tool that is being tested to receive and process the event messages output in step . The program tool being tested may generate or determine output based on the events and such output may be affected by enriched environment data from device simulators e.g. an alert may be issued when an event message is received but only after a device is determined to be operating in a particular manner and so on . At the method continues with comparing the expected and actual output to determine if the actual output is acceptable and hence whether the program tool being tested can be qualified for use with a system or set of devices. For example the comparison may be used to determine if the program tool being tested accurately identified component failures and operating faults or provided proper power management or analysis results based on the set of event messages and the simulated operating environment data provided to the program tool as compared with test cases in which similar data was manually or otherwise processed to provide standards for qualifying the program tool.

The steps may be repeated to fully test a program tool by having it process large numbers of event messages and or simulated environmental data from device simulators. At the method continues with generating a qualification report that may or may not include actual output from the application being qualified. At the method is ended. The method as well as process may be implemented in system or other test systems and the method may generally be thought of as being implemented by code devices or software provided on or stored on computer readable medium that is configured to cause one or more computer devices to perform the described functions or steps shown and described.

For example the monitoring application may monitor operations of a server or a storage device. The device qualification data may provide data for injecting errors into a monitoring application on portions of the monitored hardware and or software of the monitored devices. For example event messages may be created relating to operation of one or more boards e.g. the CPU board an expansion board and so on a CPU disks fan operations I O devices memory managers and hardware such as hard drives tapes arrays and so on power supplies system controllers and numerous other monitored aspects of a system or devices within a system. Test cases for these messages are used to provide desirable or acceptable outputs which may be values within a range or tolerance particular text or yes no or true false type answers. The event messages are transmitted to the monitoring application and used to create output e.g. actual output may be an audit report for the monitored devices and the output may include information obtained by processing data from simulated devices and or from native protocol event generators in addition to the generated event messages. The actual output e.g. a device audit report may then be compared to the output of the test cases to determine if there are issues with the features functions of the monitoring application such as when discrepancies are noted in between the two outputs for a particular monitored device or for a particular event message for such a device. This comparison is then used as part of the qualification process for a new feature or service of the application and for correcting operating issues problems with the tested product.

Although the invention has been described and illustrated with a certain degree of particularity it is understood that the present disclosure has been made only by way of example and that numerous changes in the combination and arrangement of parts can be resorted to by those skilled in the art without departing from the spirit and scope of the invention as hereinafter claimed.

