---

title: Simultaneous remote and local control of computer desktop
abstract: A method for computing includes running a desktop sharing program on a local computer so as to permit a remote user to view, on a remote computer, which is connected to communicate with the local computer via a network, an image of an entire area of a display screen of the local computer and to operate the local computer by remote input via the remote computer. A local window is defined within the display screen of the local computer for running an application under control of a local user. Local inputs made via a local input device of the local computer by the local user are intercepted so that the local inputs do not interfere with operation of the local computer by the remote user. The intercepted inputs are directed to the local window so as to permit the local user to interact with the application independently of the operation of the local computer by the remote user.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09100383&OS=09100383&RS=09100383
owner: BBY Solutions, Inc.
number: 09100383
owner_city: Richfield
owner_country: US
publication_date: 20080624
---
The present invention relates generally to computer systems and software and specifically to remote desktop applications.

In typical operation a personal computer supports a single keyboard and a single pointing device. A number of software tools have been developed however to allow more than one pointing device to be used in computer applications particularly for multi player games. Examples include CPNMouse which is available at SourceForge.net and ManyMouse available at icculus.org.

Remote desktop programs enable the user of one computer to view the desktop of another computer and control the functions of that computer remotely via the Internet or other network . Some remote desktop tools permit a computer to be controlled simultaneously by a remote user and a local user. Such tools may for example permit both the local and remote users to move a cursor on the local user s computer screen by manipulating their respective pointing devices or to enter text via their respective keyboards.

Whereas many tools give the remote user full control over all computer operations methods have been proposed for limiting the scope of remote control. For example U.S. Pat. No. 5 758 110 whose disclosure is incorporated herein by reference describes a method for task based application sharing in which a host user designates an application to be shared with another user at a remote location referred to as the client user. The shared application runs and executes only on the host system. The client system renders an image of all windows of the shared application without also displaying unshared applications. Both the client and the host users continue to perform normal operations outside of the shared area and the host user defines the tasks which are to be shared.

In embodiments of the present invention a desktop sharing program running on a local computer enables a remote user to view an image of the entire area of the display screen of the local computer and to operate the local computer by remote input. To permit the local user to interact with the local computer while the remote user is working a local window is defined within the display screen of the local computer. The local window can be used to run an application under control of the local user independently of the operations performed by the remote user. For this purpose the local computer intercepts local inputs made by the local user and directs the intercepted inputs to the local window thus enabling the local user to interact with the application without interfering with the work of the remote user.

There is therefore provided in accordance with an embodiment of the present invention a method for computing including 

running a desktop sharing program on a local computer so as to permit a remote user to view on a remote computer which is connected to communicate with the local computer via a network an image of an entire area of a display screen of the local computer and to operate the local computer by remote input via the remote computer 

defining a local window within the display screen of the local computer for running an application under control of a local user 

intercepting local inputs made via a local input device of the local computer by the local user so that the local inputs do not interfere with operation of the local computer by the remote user and

directing the intercepted inputs to the local window so as to permit the local user to interact with the application independently of the operation of the local computer by the remote user.

In disclosed embodiments the local window is not reproduced in the image of the entire area of the display screen that is presented on the remote computer. Typically the local window is defined as an overlay window on the local computer. Additionally or alternatively defining the local window includes displaying the local window as a semi transparent overlay on the display screen that is presented on the local computer.

In some embodiments running the remote desktop program includes moving a first cursor on the display screen in response to manipulation of a remote pointing device of the remote computer by the remote user and directing the intercepted inputs includes moving a second cursor on the display screen independently of the first cursor under the control of the local user by means of a local pointing device of the local computer. The second cursor may be effective to select objects on the display screen only within the local window.

Additionally or alternatively intercepting the local inputs includes intercepting keystrokes made by the local user by means of a local keyboard of the local computer and directing the intercepted inputs includes displaying input text responsively to the intercepted keystrokes in the local window. In one embodiment running the application includes running a textual chat application in which the input text is transmitted over the network to the remote user and textual responses from the remote user are displayed in the local window. The desktop sharing program may be used by the remote user in providing service support to the local user.

There is also provided in accordance with an embodiment of the present invention a computer software product including a tangible computer readable medium in which program instructions are stored which instructions when read by a local computer cause the local computer to run a desktop sharing program so as to permit a remote user to view on a remote computer which is connected to communicate with the local computer via a network an image of an entire area of a display screen of the local computer and to operate the local computer by remote input via the remote computer 

wherein the instructions cause the local computer to define a local window within the display screen of the local computer for running an application under control of a local user to intercept local inputs made via a local input device of the local computer by the local user so that the local inputs do not interfere with operation of the local computer by the remote user and to direct the intercepted inputs to the local window so as to permit the local user to interact with the application independently of the operation of the local computer by the remote user.

There is additionally provided in accordance with an embodiment of the present invention a local computer including 

a processor which is configured to run a desktop sharing program so as to permit a remote user to view on a remote computer which is connected to communicate with the local computer via a network an image of an entire area of a display screen of the local computer and to operate the local computer by remote input via the remote computer and to define a local window within the display screen that is displayed on the display monitor of the local computer for running an application under control of a local user to intercept local inputs made via the local input device by the local user so that the local inputs do not interfere with operation of the local computer by the remote user and to direct the intercepted inputs to the local window so as to permit the local user to interact with the application independently of the operation of the local computer by the remote user.

The present invention will be more fully understood from the following detailed description of the embodiments thereof taken together with the drawings in which 

Although remote desktop programs commonly allow both the remote user and the local user to interact with the computer via their respective input devices this situation may lead to conflicts. For example the local and remote users may simultaneously try to move the on screen cursor using their respective pointing devices sometimes referred to as fighting over the mouse or to enter text input in an application window using their keyboards.

One sort of situation in which conflicts of this sort may arise is in remote support applications in which the remote user services the local user s computer and or instructs the local user in proper operation of the computer. In such situations it is often desirable for the local and remote users to conduct an on screen textual chat while the remote user is working on the local user s computer. If both the remote user and the local user attempt to enter text in the chat window at the same time however the result may be at best annoying and possibly unintelligible to both users. This is one reason why in current practice it is common for the remote user to keep a telephone connection open with the local user during such support sessions. Problems may similarly arise if both the remote user and the local user attempt to move the on screen cursor using their respective pointing devices.

The embodiments of the present invention that are described hereinbelow permit the remote user to exercise full control over the functions of the local computer and to view the entire area of the local computer display screen while still leaving a local window under the control of the local user. Typically the local window appears only on the local computer screen and is not reproduced in the image of the screen that is rendered on the remote computer. A desktop sharing engine on the local computer intercepts local inputs made by the local user via local input devices such as the keyboard and mouse and directs these inputs to the local window while permitting the remote user to control all other operations of the local computer by input from the remote computer.

The local window is particularly useful in supporting textual chat between the local and remote users in the sort of support applications that are described above for example but it can alternatively be used to run substantially any sort of application on the local computer for example a game of Solitaire to pass the time until the remote user has finished working . When the local window is active two cursors may appear on the local computer screen the system cursor controlled by the remote user s pointing device and a local cursor controlled by the local input that is intercepted by the desktop sharing engine. Both cursors may be used by their respective users simultaneously and independently to select objects on the screen including performing operations such as drag drop and cut paste.

Various implementations of the principles of the present invention are possible depending on user requirements and system constraints. In the embodiments described hereinbelow a single local window is used for textual chat in a remote support application and the local cursor may be limited to operating in this window. In other embodiments multiple local windows may be deployed with configurable properties and the local cursor may have extended capabilities. For example the local windows may be accessible only to the local user or may be shared with the remote user and the local user may be prompted to indicate upon opening a local window whether or not this window should be accessible to the remote user. The local user may be required to select applications to open in a local window from a private application list in order to avoid fighting over the mouse when attempting to open and control the application.

Local computer and remote computer are assumed to comprise personal computers with appropriate peripheral devices and software for carrying out the functions described herein. Alternatively one or both of the computers may comprise a server or any other suitable type of fixed or portable computing device with an appropriate communication link and software. In the present embodiment local computer comprises a processor with a display monitor and input devices such as a keyboard and a mouse . Remote computer comprises similar components a processor display monitor keyboard and mouse . Alternatively or additionally one or both of the computers may comprise other sorts of peripheral devices such as a joystick trackball or other type of pointing device in addition to or instead of the mouse Although certain features of system are described hereinbelow with specific reference to mouse and mouse these features are equally applicable to other types of pointing devices.

The embodiments that are described below rely on novel desktop sharing software that runs on processors and . This software may be downloaded to computers and in electronic form over a network for example or it may additionally or alternatively be provided on tangible storage media such as optical magnetic or electronic memory media. In the description that follows it is assumed that the desktop sharing software runs in the environment of a standard operating system such as a Microsoft Windows operating system and some features of the software are described by way of example with reference to features and components of Windows. The principles of the present invention however may likewise be applied mutatis mutandis in other sorts of operating environments such as UNIX Linux or Apple operating environments as well as in portable computing and communication devices such as personal digital assistants PDA s and smart phones.

In the example scenario illustrated in local user named Tom uses an Internet browser window to connect to a support Web site which offers expert services in fixing computer problems encountered by the local user. Alternatively Tom may connect to the support site using other types of applications and communication protocols. As shown in a window is displayed by the browser on the local computer showing entries offering support services by a number of experts. In this example the local user selects an expert named Joe on the Web site. This expert takes control of local computer after receiving approval from Tom as remote user of computer using desktop sharing software that is installed on both of the computers. As a results screens and are displayed on the local and remote computers respectively.

Screen commonly referred to as the desktop in the Windows paradigm as seen by local user includes application windows and as well as a system cursor which are defined and controlled by the operating system of computer . A local window with a local cursor is overlaid on screen with novel functionality as described hereinbelow. The background of window may be made semi transparent by appropriately setting the transparency attribute provided by the Windows operating system in order to enable local user to view the parts of screen that are below the local window. For clarity of illustration however this feature of window is not shown in . 

Screen as seen by remote user contains an image of the entire area of screen including windows and and cursor . The remote user is able to manipulate cursor using mouse as well as inputting text in windows and via keyboard in the manner that is known generally in the art of remote desktop computing. The remote user can thus interact with and control functions of the operating system and application software running on local computer . Local window and cursor however are typically not reproduced on screen since these elements are reserved for the use of local user .

While Joe is working on local computer a textual chat application runs on computer in local window . Tom inputs text to the chat in window using keyboard and may also select objects on screen and move them into or within window using cursor under the control of mouse . Text that Tom inputs into window appears in a corresponding chat window on screen . Joe may type his text responses into this window whereupon these responses are presented to Tom in window as illustrated in the figures.

As noted earlier this sort of textual chat is a particularly useful application of local window . In the absence of such a dedicated local window the local and remote users could take turns inputting text to the same window using their respective keyboards but this sort of shared control is prone to collision between the respective inputs and often results in confusion and frustration to the users. On the other hand the local window on computer may be used not only for textual chat but also for any other sort of application that the local user may wish to run though applications that could interfere with the work of the remote user are probably best avoided .

Remote engine receives information from local engine defining the windows on screen and their contents and uses this information in rendering image on the screen of computer . In the Microsoft Windows environment for example the information may be provided using the application programming interface API of the Windows Graphics Device Interface GDI subsystem. Engine also captures inputs made by remote user using keyboard and mouse and transmits these inputs via network to engine as well as displaying the result of the inputs in image . In response to the inputs sent from remote engine local engine drives cursor and controls functions of local computer as invoked by the remote user.

Before transmitting screen information to remote engine local engine may filter out the information relating to local window . As a result the remote engine will not reproduce window in image as illustrated in . Such filtering may be achieved if local engine uses UltraVNC simply by defining window as semi transparent because UltraVNC as currently configured does not capture GDI information regarding semi transparent overlay windows. The image screen capture feature of UltraVNC should also be turned off.

Another way to filter out the local window when the local window is defined as an overlay window is to use the BitBlt function of the GDI API to capture images of screen both with and without the CAPTUREBLT flag enabled. When CAPTUREBLT is enabled local engine captures an image of the screen that includes overlay windows such as window . When it is disabled the overlay windows are omitted from the capture. The local engine combines the images in order to generate an image of screen from which window has been excised while revealing any windows such as window in underneath window .

When computer is under remote control by computer as described above local desktop sharing engine receives mouse related events via network from remote engine and places these events directly in RIT queue . The remote events bypass driver and queue and thus permit remote user to manipulate cursor . This sort of remote cursor control is implemented for example as part of the standard UltraVNC software package described above. Keyboard events on computer are likewise transmitted to and inserted by local engine in the appropriate input queue.

While computer is under remote control a filter intercepts events from driver that correspond to local inputs by user using mouse . These local events are not permitted to pass to mouse class driver since otherwise they would be enqueued and passed to application threads thus competing with the remote input for control of cursor .

Instead filter passes the events to local desktop sharing engine which generates faked local cursor . The cursor is faked in the sense that it is not generated by the operating system of computer but is rather rendered on screen by engine in a manner that emulates the operation of real cursor . Typically the cursor emulation performed by engine enables local user to use cursor both to point to particular objects such as words blocks of text icons or other images and to select and even move objects on screen. Thus cursor may be used to copy and paste or to drag and drop a block of text or an image independently of and without interfering with similar operations performed by remote user using cursor even when the operations are carried out by both users simultaneously.

Since cursor is generated at the application level local engine may be configured to limit the range of objects on which the cursor is able to operate. For example cursor may be tied to the application running in window and may thus be limited to manipulating objects appearing in this window. Alternatively local engine may be configured to permit cursor to operate on objects outside window although in any case it is desirable to limit the functionality of cursor so as not to interfere with the operations carried out by remote user .

A similar sort of filtering arrangement not shown in the figures may be used to intercept keystroke input made by local user via keyboard and or inputs via other local input devices. Local engine processes the keystrokes so as to generate text for display in window .

Although the embodiments described hereinabove relate to a particular application context the principles of the present invention may similarly be applied in substantially any sort of desktop sharing scenario in which multiple users wish to view and operate on the same screen simultaneously. It will thus be appreciated that the embodiments described above are cited by way of example and that the present invention is not limited to what has been particularly shown and described hereinabove. Rather the scope of the present invention includes both combinations and subcombinations of the various features described hereinabove as well as variations and modifications thereof which would occur to persons skilled in the art upon reading the foregoing description and which are not disclosed in the prior art.

