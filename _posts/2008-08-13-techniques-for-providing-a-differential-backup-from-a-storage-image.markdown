---

title: Techniques for providing a differential backup from a storage image
abstract: Techniques for providing a differential backup from a storage image are disclosed. In one particular exemplary embodiment, the techniques may be realized as a method for providing a differential backup from a storage image comprising identifying one or more dirty blocks in a storage image, creating a differential backup data structure, and transmitting the one or more dirty blocks to a data management process utilizing the differential backup data structure to provide a differential backup.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08615495&OS=08615495&RS=08615495
owner: Symantec Corporation
number: 08615495
owner_city: Mountain View
owner_country: US
publication_date: 20080813
---
The present disclosure relates generally to creating an application backup and more particularly to techniques for providing a differential backup from a storage image.

Backups may be created utilizing several different methods. The different methods each may have their advantages but utilizing different backup methods for a common backup client may not be compatible. For example backups may be created at a file system block level. Backups may also be created at an application level which may ensure that the application has the data to ensure that the application is in a consistent state. Backups may be full backups meaning that they cover an entire set of data required to restore a system. Backups may also be partial or differential backups which may store only data since a previous backup. Application level backups and block level backups may be either full or differential backups. Maintaining a chronological order to backups may be important to ensure data integrity when restoring a system using the backups.

Different types of backups may have incompatibilities with each other. For example block level backups may have incompatibilities with application level backups. Specifically restoring a differential block based backup may prevent subsequent utilization of an application level backup. For example if a user has block level backups and database level backups the restoration of a differential block level backup may prevent the restoration of a database level backup. For example if a user has a full block level backup from a Sunday night a block level backup from Monday and a database level differential backup from Tuesday the user may be prevented from utilizing the database backup from Tuesday if the user relies on the block level backups.

Also a block level backup may restore a system to a state in which a database is not capable of applying application level backups created after the block level backup was created. For example if critical data is accidentally deleted from the database on Tuesday afternoon a user may want to use a database level differential backup from Tuesday to restore transactions up to a point in time prior to the accidental deletion of the data.

Other applications may have similar conditions which require application level backups. However block level backups may provide advantages over application level backups such as with the backup of data associated with multiple applications speed and other advantages. For example a storage image e.g. a block level backup such as a snapshot may be created when a database or another application is running. This may provide a block level full backup without disruption to a user.

Additionally many block level full backups may be sent to storage remote from a backup client. This may be done for safety storage concerns or other reasons. Sending a full backup from a remote location to a client for restoration may not be desirable if an application level differential backup would enable restoration of the client.

In view of the foregoing it may be understood that there are significant problems and shortcomings associated with current data backup technologies.

Techniques for providing a differential backup from a storage image are disclosed. In one particular exemplary embodiment the techniques may be realized as a method for providing a differential backup from a storage image comprising identifying one or more dirty blocks in the storage image creating a differential backup data structure and transmitting the one or more dirty blocks to a data management process utilizing the differential backup data structure to provide a differential backup.

In another particular exemplary embodiment the techniques may be realized as an article of manufacture for providing a differential backup from a storage image wherein the article of manufacture comprises at least one processor readable medium and instructions carried on the at least one medium wherein the instructions are configured to be readable from the at least one medium by at least one processor and thereby cause the at least one processor to operate so as to identify one or more dirty blocks in a storage image create a differential backup data structure and transmit the one or more dirty blocks to a data management process utilizing the differential backup data structure to provide a differential backup.

In yet another particular exemplary embodiment the techniques may be realized as a system providing a differential backup from a storage image comprising one or more processors communicatively coupled to a network wherein the one or more processors are configured to identify one or more dirty blocks in a storage image create a differential backup data structure and transmit the one or more dirty blocks to a data management process utilizing the differential backup data structure to provide a differential backup.

The present disclosure will now be described in more detail with reference to exemplary embodiments thereof as shown in the accompanying drawings. While the present disclosure is described below with reference to exemplary embodiments it should be understood that the present disclosure is not limited thereto. Those of ordinary skill in the art having access to the teachings herein will recognize additional implementations modifications and embodiments as well as other fields of use which are within the scope of the present disclosure as described herein and with respect to which the present disclosure may be of significant utility.

Referring to there is shown a system for providing a differential application level backup in accordance with an embodiment of the present disclosure. is a simplified view of system which may include additional elements that are not depicted. Network elements and may be communicatively coupled to network . Computer may be communicatively coupled to network . Data may be communicatively coupled to network element . Storage may be communicatively coupled to network element .

Network may be a local area network LAN a wide area network WAN the Internet a cellular network a satellite network or another network that permits communication between network elements and computer and other devices communicatively coupled to network .

Network elements and may be application servers backup servers network storage devices media servers or other devices communicatively coupled to network . Network elements and may utilize storage for the storage of application data backup data or other data.

Network elements and may be hosts such as an application server which may process data traveling between itself and a backup device a backup process and or storage.

Network element may be a backup server attached to storage . In one or more embodiments network element may be capable of processing data received from or transmitted to storage . In other embodiments network element may represent a network appliance connected to a storage area network.

Computer may be a desktop computer a laptop computer a server or other computer capable of performing private network backbone analysis. Computer may receive data from user input a database a file a web service and or an application programming interface. Computer may query other systems and or local or remote storage such as data network elements and and storage to obtain backup information. Computer may provide an interface to an administrator or other user of a backup management process. In one or more embodiments computer may enable a user to request a differential backup. Computer may enable a user to view edit search and or select data that may contain dirty blocks to be utilized for a differential backup. For example computer may enable a user to query a database a file system or other resources to locate data which may be utilized for a differential backup. A user may specify files to be contained in a storage image from which a differential backup may be generated. In some embodiments a process such as a backup management process may locate the files automatically by querying a database or other resource and may automatically generate the differential backup.

Data may be network accessible storage and may be local remote or a combination thereof to network elements and . Data may utilize a tape disk a storage area network SAN or other computer accessible storage. In one or more embodiments data may represent a database or another application instance.

In one or more embodiments data from storage may be images such as snapshots or other file system block level backups. Network element may be a backup server which may handle requests for backup data. For example network element may be an application server or a database server seeking to restore an application instance or a database instance. Network element may have access to a locally stored full block level backup which may not be recent enough to restore data to a desired status. For example network element may have a full block level backup from a Sunday night stored on data which may restore a database running on data to a status current as of Sunday night. Network element may also be configured to have periodic block level backups created and transferred to remote storage such as storage . For example periodic snapshots of data may be created using Microsoft s Volume Snapshot Service or another service and may be transferred to storage . On the following Tuesday afternoon a problem may be detected such as a transaction on that Tuesday morning which deleted critical database entries. Restoring to the Sunday backup and resuming service from that point would result in the loss of all data changes from Monday s transactions. This may mean a significant amount of lost sales data or other critical data. A block level full backup from Monday night such as a snapshot may exist on storage . Thus transferring a full backup from storage to network element for restoration on data may take a significant amount of time and or network bandwidth. Transferring a differential application level backup may be preferable.

Network element may utilize a block level backup to generate an application level backup. Network element may create an application level differential backup from a block level backup such as the snapshot created on Monday night. The block level backup may be a snapshot stored in storage and may contain data needed to restore transactions which occurred on Monday. Network element may create a data structure for the application level backup. For example network element may create a file structure corresponding to an application backup file such as a database backup file header an application backup file header an export file header a Microsoft Tape Format MTF file header a log file header or other backup export or archive data formats. Network element may identify one or more blocks which are dirty blocks corresponding to transactions which have not been committed to a database or application events which have not been fully reconciled or committed. Network element may query a database an application or search a file structure of a backup target in order to identify files or other information necessary to create an application level backup. In one or more embodiments network element may format the identified dirty blocks into a backup format. Network element may then stream or write the backup file structure and the identified dirty blocks in a format compatible with a database or an application. In some embodiments an application backup file may be created in memory from a created application backup file structure and the identified dirty blocks and may be streamed to a receiving process such as a recovery process running on a database. In some embodiments network element may write the application backup file structure and identified dirty blocks to a file to create a differential application level backup file. The created differential application level backup file may then be used by one or more recovery processes.

A differential application level backup may require less bandwidth to transfer than a full backup. A differential application level backup may also enable a recovering process to roll forward transactions to particular point in time. This may enable the recovering process to apply transactions chronologically until a point in time prior to an incident causing data loss or corruption. For example network element may stream an application level differential backup file such as a MTF file or one or more log files to a database recovery process running on network element . This may enable network element to apply Monday s transactions to the database stored on data .

Additionally if an application level backup is utilized for restoration or recovery subsequent application level backups may be utilized. In some embodiments an application level backup may maintain transaction integrity e.g. prevent the loss of transactions not yet committed to a database data contained in files not closed or other data in a transitional state . For example in addition to the full backup from Sunday night and the generated application level differential backup from Monday night as described above network element may have access to an application level differential backup from Tuesday night. Network element may utilize the application level differential backup from Tuesday night to apply transactions that occurred on Tuesday morning prior to a deletion or other events that may have caused a loss or corruption of data. This may effectively recover a database to a point in time prior to the data loss and or corruption. While utilization of a block level backup such as the block level backup from Monday night may not be compatible with a later created application level backup utilization of a generated application level backup may be compatible e.g. may maintain transaction integrity .

Referring to there is shown a backup management module for providing a differential application level backup in accordance with an embodiment of the present disclosure. As illustrated the backup management module may contain one or more components including block identification module backup formatting module backup I O module and error handling module .

Block identification module may identify one or more blocks necessary to restore a database an application or another system. Block identification module may query a backup target such as a database or another application in order to identify files or other data structures necessary to produce an application level differential backup. Block identification module may search file structures of backup targets. In one or more embodiments block identification module may utilize log files and or dirty block bit map files. In some embodiments block identification module may identify files and obtain a block level backup containing these files. For example block identification module may obtain a snapshot of a volume files or other storage configuration containing identified dirty blocks.

Backup formatting module may determine and create a data structure which may be utilized for an application level differential backup. Backup formatting module may create a file header or other data structure to accommodate dirty blocks identified by block identification module . Backup formatting module may format dirty blocks into an application backup format.

Backup I O module may retrieve receive and or transmit dirty blocks backup files and or other backup data structures. Backup I O module may stream a dynamically created backup file structure to a recovery or restoration process. Backup I O module may also write backup data structures such as differential application level backups to storage. In one or more embodiments backup I O module may compress encrypt or otherwise prepare backup data structures for transmission or storage.

Error handling module may handle errors associated with differential application level backup generation. Error handling module may log application level backup errors such as errors occurring during identification of dirty blocks during creation of backup data structures during transmission of backup data structures and other backup creation error related events.

Referring to there is depicted a method for providing a differential application level backup in accordance with an embodiment of the present disclosure. At block the method for providing a differential application level backup may begin.

At block the method may query an application instance such as a database to determine which files or other data structures may be utilized for creation of a differential application level backup.

At block the method may create an image of storage containing one or more files or data structures that have been identified at block . In some embodiments the image of storage may be a snapshot containing identified files for backup.

At block the method may create a differential application file structure. For example a tape file header or other file header may be created. The differential application file structure may conform to the requirements of a recovery or restoration process for an application or database instance to be recovered and or restored. In some embodiments control files log files or other data structures may be created.

At block the method may identify one or more dirty blocks in the image of storage. Log files bitmap files and other data structures contained in the image of storage may be utilized to identify blocks containing uncommitted transactions or other application events marked as dirty .

At block the method may stream application level differential backup data. In some embodiments the data may be streamed to a file. In one or more embodiments the data may be streamed to a backup or recovery process. In some embodiments the data may be formatted to comply with a backup data format expected by a recovery and or a restoration process which may utilize the data.

At block the method may close the backup stream. This may closing a file handle ending a stream of data to a receiving process or performing other actions to conclude the creation of a backup file.

At this point it should be noted that providing a differential backup in accordance with the present disclosure as described above typically involves the processing of input data and the generation of output data to some extent. This input data processing and output data generation may be implemented in hardware or software. For example specific electronic components may be employed in a module for backup management or similar or related circuitry for implementing the functions associated with providing a differential backup in accordance with the present disclosure as described above. Alternatively one or more processors operating in accordance with instructions may implement the functions associated with providing a differential backup in accordance with the present disclosure as described above. If such is the case it is within the scope of the present disclosure that such instructions may be stored on one or more processor readable media e.g. a magnetic disk or other storage medium or transmitted to one or more processors via one or more signals embodied in one or more carrier waves.

The present disclosure is not to be limited in scope by the specific embodiments described herein. Indeed other various embodiments of and modifications to the present disclosure in addition to those described herein will be apparent to those of ordinary skill in the art from the foregoing description and accompanying drawings. Thus such other embodiments and modifications are intended to fall within the scope of the present disclosure. Further although the present disclosure has been described herein in the context of a particular implementation in a particular environment for a particular purpose those of ordinary skill in the art will recognize that its usefulness is not limited thereto and that the present disclosure may be beneficially implemented in any number of environments for any number of purposes. Accordingly the claims set forth below should be construed in view of the full breadth and spirit of the present disclosure as described herein.

