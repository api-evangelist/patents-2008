---

title: Declarative programming model for authoring and execution control and data flow for resource oriented system
abstract: A data set may be managed by a host that provides access to clients through a protocol, such as a RESTful HTTP interface. A resource script may be expressed according to a script language featuring two types of instructions: data set instructions that correspond to the verbs of the protocol, and flow control instructions that alter the flow of execution of the resource script. At runtime, an execution context for the resource script may be selected as a local execution context (through a local script processor that issues protocol verbs to the host based on the data set operations) or a remote execution context (by sending the resource script to a script processor located on the host.) The runtime selection of data context may be executed without having to reconfigure the resource script, and with an equivalent effect on the data set.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08490052&OS=08490052&RS=08490052
owner: Microsoft Corporation
number: 08490052
owner_city: Redmond
owner_country: US
publication_date: 20081014
---
Many computing scenarios involve a data set such as a file system a database an object set etc. that managed by a host and that is to be updated based on a set of operations such as creating one or more items in the data set reading one or more items in the data set updating one or more items in the data set and or deleting one or more items in the data set together comprising a standard set of CRUD operations. Moreover the host may be accessible through a particular protocol such as HTTP and the operations may correspond to a set of verbs permitted in the protocol e.g. HTTP POST HTTP GET HTTP PUT and HTTP DELETE. An operations set may involve a series of such operations configured in a sequence to achieve a particular result e.g. bidirectionally synchronizing a portion of a filesystem on a remote server with a locally stored version of the same portion of the filesystem. This operations set may be performed on a device other than the host e.g. by issuing a first operation to the host and upon receiving notice of completion of the operation issuing a second operation etc. The operations set may also be performed on the device as part of an application e.g. a data driven application that exchanges data with the host as the source of the data featured in the application.

This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key factors or essential features of the claimed subject matter nor is it intended to be used to limit the scope of the claimed subject matter.

The execution of operations in an operations set upon a data set managed by a host may be achieved in many ways but some complications may arise due to the nature of the interaction. A sequential issuing and executing of operations may be very inefficient because each operation involves a network transport cost and some operations may be concurrently executable. An asynchronous issuing and executing of operations may alleviate some of the inefficiency but may be more complicated to design and debug e.g. the source code may specify an asynchronous issuing of an operation but may specify the receiving of an operation result or notification of completion elsewhere in an event handler function thereby interrupting the logical flow and readability of the source code. A batch of operations may be sent together to be concurrently or sequentially executed but an unavailability of flow control in batch programming may limit the scope of tasks that may be achieved. Finally a mobile agent may be compiled and delivered to the host but the mobile agent may have to be compiled in view of the architecture of the host e.g. targeted to a particular instruction set and or hardware architecture and may raise security risks for the host.

An alternative technique for performing an operations set against the data set managed by the host involves the use of a script language that includes data set instructions corresponding to the verbs of the protocol as well as flow control instructions that specify an altering of the execution flow of operations. A resource script expressed according to this script language may be executed by a script processor that can interpret the operations of the resource script to apply the corresponding protocol verbs to the data set and to alter the execution flow of the resource script based on the flow control operations. Moreover the resource script may be expressed at design time and when the resource script is selected promptly or at a later date for execution an execution context may then be selected such as local execution e.g. by issuing corresponding verbs of the protocol to the host or remote execution e.g. by delivering the script to the host. The execution context may therefore be selected at runtime without compromising the logical flow of operations specified therein.

To the accomplishment of the foregoing and related ends the following description and annexed drawings set forth certain illustrative aspects and implementations. These are indicative of but a few of the various ways in which one or more aspects may be employed. Other aspects advantages and novel features of the disclosure will become apparent from the following detailed description when considered in conjunction with the annexed drawings.

The claimed subject matter is now described with reference to the drawings wherein like reference numerals are used to refer to like elements throughout. In the following description for purposes of explanation numerous specific details are set forth in order to provide a thorough understanding of the claimed subject matter. It may be evident however that the claimed subject matter may be practiced without these specific details. In other instances structures and devices are shown in block diagram form in order to facilitate describing the claimed subject matter.

Many computing scenarios involve a data set managed by a host such as a filesystem hosted by a filesystem host a database hosted by a database server and an object set hosted by an object server. The data set may be exposed to various clients such as devices and users which may perform various operations on the data set. Many such scenarios include a basic set of operations for manipulating the data set such as create read update and delete operations together referred to as a CRUD model for manipulating data sets. Moreover these operations are often combined in a particular configuration to achieve a particular task such as synchronizing a remote filesystem on a server with a local version of the filesystem or inserting records into a database in a transactional manner.

The computing host may be configured to receive requests for performing such operations if specified according to a particular protocol. For example the host may be configured as an HTTP endpoint such as a webserver and may permit interaction with the data set through a standard set of HTTP verbs. The hypertext transfer protocol was originally devised for communicating with a webserver e.g. to request a page or resource stored on the webserver via HTTP GET and a set of applications provided therein such as HTTP gateway scripts which could be accessed with parameters via HTTP POST many servers translate HTTP requests to particular instructions for manipulating a data set e.g. HTTP POST corresponding to a read instruction HTTP GET corresponding to a create instruction HTTP PUT corresponding to an update instruction and HTTP DELETE corresponding to a delete instruction. This configuration sometimes referred to as a representational state transfer RESTful use of a protocol permits the server to extend access to the data set to a wide range of applications over a widely supported protocol.

While the simple design of HTTP and other protocols promotes the adoption of such protocols the simplicity may limit the scope of computing operations that may be performed. As a first example HTTP and many other protocols are stateless such that a first request may be unable to alter the operating environment in a manner that is detectable by a second request without actually altering the data set. As a second example HTTP and many other protocols offer limited or no support for executing multiple operations in a particular configuration. For example a webserver may receive several requests in a particular order but may validly choose to evaluate and perform such requests in an arbitrary order. While such asynchrony may be beneficial for serving webpages which are composed on the fly based on the receipt of constituent elements and which often produce the same resulting webpage regardless of the order of receipt it may be unacceptable for sequences of logical operations.

The task of executing operations on the host in a particular order or manner may be partially or wholly delegated to a user or device. illustrates a first scenario involving a client that wishes to perform an operations set on a data set managed by a host . The client may therefore send the operations of the operations set in sequence such that a first operation is issued to the host and a response such as an acknowledgment of having performed the operation or a result data set is received from the host before a second operation is issued. The client may therefore configure the execution of the operations of the operations set in a manner that achieves a particular logical sequence. However such designs may be problematic in many aspects. As a first example the issuing of each operation typically involves establishing a connection with the host over a network sending the operation over the network awaiting a result receiving the result from the host and shutting down the connection that together comprise a network transport cost of the operation . If many operations are to be performed in sequence the network transport costs may arise from each operation increasing the computational and network costs and reducing the performance of the operations set such as the duration of execution. 

In view of these techniques and the advantages difficulties and inefficiencies arising therefrom an alternative technique may be devised for performing an operations set on a data set accessible through a host according to a protocol. The alternative technique involves a scripting language featuring two types of instructions data set instructions corresponding to the verbs of the protocol and flow control instructions. Data set operations those that specify data set instructions may be processed by the host according to the corresponding verbs of the protocol e.g. an operation comprising a read instruction may be processed by the host as an HTTP GET operation whereas flow control operations those that specify flow control instructions may be evaluated and may alter the execution flow of the resource script e.g. by repeating the performing of particular operations by conditioning the performing of particular instructions on a predicate and or by jumping relocating the flow of execution to a target operation. By expressing an operations set in a resource script having at least one data set operation and at least one flow control operation the client may permit the host to evaluate the resource script in a comparatively lightweight script processor that processes operations pertaining to the data set according to the protocol e.g. by passing the operations through to the components of the host that handle requests through the protocol such as a webserver while the flow control instructions may be handled by the script processor. The script language may also permit instructions to be linked e.g. a conditional operation may be predicated on the success or failure of a preceding operation. In addition the resource script may be specified in a platform agnostic manner such that a choice may be made at execution time of an execution context in which the resource script may be executed. If a local execution context is selected a local script processor may run on the client and issue protocol operations to the server but if a host execution context is selected the resource script may be delivered to a script processor located on the host for remote execution. While the performance of the resource script and applications utilizing the resource script may differ based on the execution context the same logical sequence of operations is performed regardless of the location of the script processor.

In this manner the expression of the operations set as a resource script utilizes the protocol processing infrastructure of the host while extending the range of tasks that may be expressed and executed against the data set through the inclusion of flow control instructions. Moreover the technique reduces the network transport cost inefficiencies and delays illustrated in the first scenario of avoids the arbitrary execution of operations and the undesirably complex code illustrated in the second scenario of reduces the statelessness and isolation of batching illustrated in the third scenario of and reduces the host specific complexity security issues and limited robustness of selectable execution contexts arising from the mobile agent techniques illustrated in the fourth scenario of .

The techniques discussed herein may be devised with variations in many aspects and some variations may present additional advantages and or reduce disadvantages with respect to other variations of these and other techniques. Moreover some variations may be implemented in combination and some combinations may feature additional advantages and or reduced disadvantages through synergistic cooperation. The variations may be incorporated in various embodiments e.g. the exemplary method of and the exemplary method of to confer individual and or synergistic advantages upon such embodiments.

A first aspect that may vary among embodiments of these techniques relates to the scenario in which the techniques may be utilized. As a first example the data set may comprise many types of data such as a filesystem managed by a file server a database managed by a database manager or an object store managed by an object host. The client may also represent many types of clients such as an authorized user of the services of the host a guest or another server interoperating with the host e.g. the host may comprise a backup file server with which a main file server synchronizes through the delivery of a resource script. 

One scenario in which these techniques may be particular applicable involves a deployable computing environment. This scenario may be devised to address the increasingly large and diverse set of objects managed by a set of object systems. For example a computing environment may comprise a set of files managed by a file system one or more databases managed by a database system a set of executable binaries representing applications and managed by an assembly cache a set of user profiles managed by a user profile component of an operating system and various data caches managed by data caching components such as a set of copied items managed by a copy buffer of the operating system a set of undo actions managed by an undo component of the operating system and a set of most recently used items managed by an item usage tracking component of the operating system. Moreover such objects may be exchanged among a plurality of devices operated by one or more users and according to one or more operations e.g. an object synchronization operation that merges two object sets and an object mirroring operation that adjusts a target object set to match a source object set. In this manner the objects are loosely organized through a set of object systems and aggregated to represent the computing environment.

In order to reduce the complex variety and decentralization of the objects comprising a contemporary computing environment a deployable representation of the computing environment may be devised where the objects comprising the computing environment are organized in an object hierarchy which may be hosted by a computing environment host. If the objects are represented in a uniform manner and managed in a consistent way by an object system a set of services may be devised to apply to all of the objects of the computing environment. Moreover the object hierarchy may be delivered to various devices to represent the same computing environment including the same user profiles applications data files etc. and each device may render the computing environment in a consistent manner but customized based on the capabilities of the device e.g. a hard keyboard interface for receiving data entry from a keyboard device attached to a workstation and a touchscreen software keyboard interface for receiving data entry from a cellphone device. With relation to the concept of a deployable computing environment it may be advantageous to configure at least one server to manage one or more data objects within the representation and to accept operations sets to be applied to such data objects. A user of the deployable computing environment may therefore interact with the deployable computing environment in a platform and device independent manner while also achieving at least some of the advantages over alternative accessing techniques such as synchronous or asynchronous invoking batching of standard operations and mobile agents. However those of ordinary skill in the art may devise many such scenarios in which the techniques discussed herein may be applied.

A second aspect that may vary among embodiments of these techniques relates to the nature of the script language used to specify the operations set as a resource script. Many types of script languages may be used to specify an operations set according to at least one data set operation and at least one flow control operation according to a protocol. As a first example the script language may be specified declaratively i.e. as a series of elements that together describe the operations of the operation set. Declarative script languages may be advantageous for permitting a specifying of the script as a document e.g. as an XML document which may be more easily human readable than a partially or wholly compiled set of machine language instructions and which may be more easily scanned by an automated parser for errors or vulnerabilities. illustrates an exemplary resource script specified in a declarative manner comprising a set of operations such as Operation and ConditionalOperation that invoke instructions of the script language such as the Put data set instruction and the If flow control operation arranged in a nesting hierarchy that is human readable and parseable in an automated manner due to the regular structure of the resource script . However the script language may alternatively or additionally utilize other programming paradigms such as imperative procedural object oriented and aspect oriented programming. As a second example the script language in which the operations sets are specified may be devised to model many protocols. As one example where the host comprises an HTTP endpoint such as a webserver resource scripts specified in a script language that models the data set instructions on HTTP verbs such as HTTP POST HTTP GET HTTP PUT and HTTP DELETE may advantageously promote easier interfacing and wider compatibility with many types of hosts. However other protocols may be utilized e.g. where the host comprises an FTP server the script language may include data set instructions modeled after FTP verbs such as GET and PUT and where the host comprises a POP email server the script language may include data set instructions modeled after POP verbs such as LIST RETR and DELE.

As a third example of this second aspect the flow control instructions included in the script language may embody flow control constructs derived from many languages. presents some of the flow control instructions that might be included in such a script language an exemplary resource script . As a first example the script language may include a conditional instruction that specifies conditional executing of at least one operation. The exemplary resource script includes a conditional operation specifying an exemplary use of a conditional instruction an If instruction such that a block of operations is executed only if a preceding instruction fails. As a second example the script language may include a relocating instruction that specifies a relocating of flow control to a target operation. The exemplary resource script includes a relocating operation specifying an exemplary use of a relocating instruction a Goto instruction such that flow control is transferred to Operation. As a third example the script language may include an iterative instruction that specifies repetitive executing of at least one operation. The exemplary resource script includes an iterative operation specifying an exemplary use of an iterative instruction a Loop instruction such that a block of operations Operation and Operation are executed twice.

As a fourth example of flow control instructions that may be included in script languages the script language may include a concurrent executing instruction that specifies concurrent executing of at least two operations. The exemplary resource script of includes a concurrent executing operation specifying an exemplary use of a concurrent executing instruction a Concurrent instruction such that two operations Operation and Operation are issued and executed concurrently and such that execution of the resource script may be blocked until both operations complete. As a fifth example the script language may include an asynchronous executing instruction that specifies asynchronous executing of at least one operation. The exemplary resource script includes an asynchronous executing operation specifying an exemplary use of an asynchronous executing instruction AsynchronousBegin such that the execution of a contained operation Operation is initiated e.g. on a separate thread through a request issued to another process or device etc. but flow control through the resource script continues concurrently with the asynchronous operation and another operation e.g. ObjectPutHandler is automatically invoked when the asynchronously executed operations complete. These examples are but some of the flow control instructions that may be included in a script language and those of ordinary skill in the art may devise script languages featuring many types of flow control instructions that may be utilized in resource scripts such as disclosed herein.

A particular use of flow control instructions in resource scripts comprises a compensation mechanism which may be achievable through the use of resource scripts in a manner that is more difficult to achieve in other techniques for specifying resource scripts. It may be appreciated that operations on data sets occasionally fail and that failure handling techniques are available in many computing scenarios such as transactional operations in database programming that respond to a failed instruction by rolling back the effects of previous operations and reporting a failure or exception handling in imperative programming whereby a set of instructions in a catch block may be invoked if any instruction in a try block fails. However many protocols such as HTTP do not include sophisticated techniques for handling errors and a host may be unable to provide a transaction like mechanism for responding to failures in a prompt manner as part of the protocol. For example a synchronous configuration such as in the first scenario of may permit the host to notify a client of a failure of an operation in an operation result and the client may issue a follow up operation to handle the error such as by reversing the effects of preceding operations. However the follow up operations issued by the client may be delayed e.g. by the network transport costs and the delay in executing the follow up operations after the failure of a preceding operation may be prohibitively lengthy and may leave the data set in an inconsistent state for an unacceptably lengthy period. By contrast resource scripts expressed as discussed herein may include compensating operations that promptly handle failures of previous operations. For example in the exemplary resource script of the result of a write operation Operation may be promptly tested by a conditional operation and if a failure arises a set of compensating operations may be promptly performed e.g. the Goto relocating operation may alter the flow of execution to retry the failed write. In this manner flow control instructions of a script language may be used to confer compensation capabilities on a resource script that may not be acceptably available in other techniques.

As a third example of this third aspect the script language may permit various forms of data binding where an aspect of the resource script is unidirectionally or bidirectionally linked with a data source such that a change of data at one end of the data binding may be automatically propagated to the other end of the data binding. illustrates three examples of data binding in an exemplary resource script . As a first example an operation in the resource script may be configured to data bind with at least one aspect of the host and the script processor while executing the resource script may data bind the operation with the specified aspect of the host. For example a data host binding operation may specify a value provided by the host such as the path of objects in the data set. The value may then be propagated through to other parts of the resource script e.g. other instructions may be configured to use the value reported by the host. As a second example an operation in the resource script may be configured to data bind with at least one aspect of the client . For example the resource script may be executed on behalf of an application and a data binding operation may associate an aspect of the application such as a value in a control with a value in the resource script . In furtherance of this application the result of Operation i.e. the object path of objects on the host may be automatically synchronized with an aspect of the application such as a string displayed within a textbox or label. As a third example operations of the resource script may be configured to data bind with various aspects of the resource script such as the output of other operations. For example a data binding operation may configure one operation to use as input the output of a preceding instruction. In the exemplary resource script of this type of data binding is useful for copying an object where a first operation Operation gets an object from the host and provides it as output that is used as input by a second operation Operation that stores the same object on the host by a different name. This data binding among instructions of the operations set may permit the chaining of operations that reduces unnecessary trips back to the client e.g. the client does not actually need information about the contents of object but rather simply wishes the host to copy it to an object with a different name. Those of ordinary skill in the art may devise many data binding techniques that may be enabled in script languages used in the generation of operations sets such as discussed herein.

As a fourth example of this third aspect the script instruction may support the referencing within an resource script of a custom operation which may be specified in a custom module such as a library. The custom module may be provided to a script processor to permit the invocation of the custom operations contained therein e.g. a host may receive and store the custom module such as in an assembly cache. The script processor may later encounter a flow control operation in a resource script that specifies the custom operation and may alter the flow of the resource script to execute the custom operation. illustrates a host comprising a script processor that has been operatively coupled with a custom module that contains a custom operation . The script processor may be presented with a resource script that includes a flow control instruction referencing the custom operation . Upon identifying this flow control instruction in the resource script the script processor may alter the flow of execution of the operations set to invoke the custom operation in the custom module and may return flow of execution to a subsequent instruction e.g. Operation within the resource script . This capability of the script language confers a pluggable aspect to the host whereby domain specific operations may be exposed and performed within the context of the script language.

A fourth aspect that may vary among embodiments of these techniques relates to the manner of expressing the resource script. A user may author a resource script using a variety of text editing tools such as a text editor and a document schema validator. An automated tool may also generate a resource script to perform a particular task such as may be specified by a user through a higher level interface such as a tool. A third example involves a development environment that that is configured to express resource scripts according to the script language. For example the development environment may present to the user the available instructions of the script language and the user may interact with the development environment to select and configure particular instructions. Upon receiving from the user at least two interactions specifying at least two instructions the development environment may then express the resource script comprising the at least two operations associated with the instructions. Those of ordinary skill in the art may devise many development environments and many other ways of generating the resource scripts utilized in the techniques discussed herein.

A fifth aspect that may vary among embodiments of these techniques relates to a selectable execution context of the resource script. One advantage of devising a script language formatted according to a protocol that is executable on a host is that the resource script may be executed on the data set either by sending it to the host or by executing the resource script locally on the client and simply issuing operations to the host.

If the client or device is selected as the execution context a local script processor may be invoked to execute the resource script. Upon encountering a flow control operation the local script processor may alter the flow of execution through the resource script e.g. by changing an instruction pointer. Upon encountering a data set operation the script processor may select a verb of the protocol corresponding to the data set operation and may issue the verb to the host to achieve the data set operation.

Conversely if the host is selected as the execution context the executing may involve sending the resource script to the host for execution through a script processor located on the host. In particular sending the resource script to the host may involve may involve serializing the resource script according to a wire protocol that is supported by the host to express a serialized resource script and then sending the serialized resource script to the host. For example the host may support one or several of a set of wire protocols e.g. JSON Atom and RSS when a host is selected for an execution context the client may query the host for supported wire protocols and may then deliver the resource script to the host in a serialized format according to one of the supported wire protocols. In addition the host may interoperate with the client to present the results of the operations set to the client. For example if the executing of the resource script results in at least one resource script result the host may send the at least one resource script result to the client. The client may then act on the resource script results such as by storing the results by data binding the results to an aspect of the client such as an application or by displaying the resource script response on the device e.g. within an application. 

The runtime selectable execution context enabled by resource scripts devised in this manner may provide several advantages. As a first example by specifying the operations set in such an instruction set the selection of an execution context for a particular resource script may be deferred until runtime or on a just in time basis. These execution contexts may have different advantages e.g. executing on the host may reduce the network transport costs of respective operations and therefore may be faster if the resource script contains many data set operations however executing on the client may be helpful for debugging because the client may monitor the state of the resource script during execution and it may be advantageous to defer the selection of the execution context until runtime. Additionally a resource script may be executed in a selected execution context without having to reconfigure the resource script for the selected execution context and with equivalent results on the data set. Moreover the effect on the data set is equivalent regardless of the selected execution context either the host executes the resource script and locally applies appropriate data set operations to the data set or the client executes the resource script and simply issues appropriate data set operations based on the protocol to the host. Thus expressing the resource script according to the instruction set specified with respect to the protocol enables the generation of an execution context independent resource script while the selection of execution context may be deferred until runtime and then applied without resource script reconfiguration to achieve an equivalent effect on the data set. However those of ordinary skill in the art may devise many uses and implementations of a runtime selectable execution context for resource scripts utilized according to the techniques discussed herein.

Although the subject matter has been described in language specific to structural features and or methodological acts it is to be understood that the subject matter defined in the appended claims is not necessarily limited to the specific features or acts described above. Rather the specific features and acts described above are disclosed as example forms of implementing the claims.

As used in this application the terms component module system interface and the like are generally intended to refer to a computer related entity either hardware a combination of hardware and software software or software in execution. For example a component may be but is not limited to being a process running on a processor a processor an object an executable a thread of execution a program and or a computer. By way of illustration both an application running on a controller and the controller can be a component. One or more components may reside within a process and or thread of execution and a component may be localized on one computer and or distributed between two or more computers.

Furthermore the claimed subject matter may be implemented as a method apparatus or article of manufacture using standard programming and or engineering techniques to produce software firmware hardware or any combination thereof to control a computer to implement the disclosed subject matter. The term article of manufacture as used herein is intended to encompass a computer program accessible from any computer readable device carrier or media. Of course those skilled in the art will recognize many modifications may be made to this configuration without departing from the scope or spirit of the claimed subject matter.

Although not required embodiments are described in the general context of computer readable instructions being executed by one or more computing devices. Computer readable instructions may be distributed via computer readable media discussed below . Computer readable instructions may be implemented as program modules such as functions objects Application Programming Interfaces APIs data structures and the like that perform particular tasks or implement particular abstract data types. Typically the functionality of the computer readable instructions may be combined or distributed as desired in various environments.

In other embodiments device may include additional features and or functionality. For example device may also include additional storage e.g. removable and or non removable including but not limited to magnetic storage optical storage and the like. Such additional storage is illustrated in by storage . In one embodiment computer readable instructions to implement one or more embodiments provided herein may be in storage . Storage may also store other computer readable instructions to implement an operating system an application program and the like. Computer readable instructions may be loaded in memory for execution by processing unit for example.

The term computer readable media as used herein includes computer storage media. Computer storage media includes volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions or other data. Memory and storage are examples of computer storage media. Computer storage media includes but is not limited to RAM ROM EEPROM flash memory or other memory technology CD ROM Digital Versatile Disks DVDs or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can be accessed by device . Any such computer storage media may be part of device .

Device may also include communication connection s that allows device to communicate with other devices. Communication connection s may include but is not limited to a modem a Network Interface Card NIC an integrated network interface a radio frequency transmitter receiver an infrared port a USB connection or other interfaces for connecting computing device to other computing devices. Communication connection s may include a wired connection or a wireless connection. Communication connection s may transmit and or receive communication media.

The term computer readable media may include communication media. Communication media typically embodies computer readable instructions or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term modulated data signal may include a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal.

Device may include input device s such as keyboard mouse pen voice input device touch input device infrared cameras video input devices and or any other input device. Output device s such as one or more displays speakers printers and or any other output device may also be included in device . Input device s and output device s may be connected to device via a wired connection wireless connection or any combination thereof. In one embodiment an input device or an output device from another computing device may be used as input device s or output device s for computing device .

Components of computing device may be connected by various interconnects such as a bus. Such interconnects may include a Peripheral Component Interconnect PCI such as PCI Express a Universal Serial Bus USB firewire IEEE 1394 an optical bus structure and the like. In another embodiment components of computing device may be interconnected by a network. For example memory may be comprised of multiple physical memory units located in different physical locations interconnected by a network.

Those skilled in the art will realize that storage devices utilized to store computer readable instructions may be distributed across a network. For example a computing device accessible via network may store computer readable instructions to implement one or more embodiments provided herein. Computing device may access computing device and download a part or all of the computer readable instructions for execution. Alternatively computing device may download pieces of the computer readable instructions as needed or some instructions may be executed at computing device and some at computing device .

Various operations of embodiments are provided herein. In one embodiment one or more of the operations described may constitute computer readable instructions stored on one or more computer readable media which if executed by a computing device will cause the computing device to perform the operations described. The order in which some or all of the operations are described should not be construed as to imply that these operations are necessarily order dependent. Alternative ordering will be appreciated by one skilled in the art having the benefit of this description. Further it will be understood that not all operations are necessarily present in each embodiment provided herein.

Moreover the word exemplary is used herein to mean serving as an example instance or illustration. Any aspect or design described herein as exemplary is not necessarily to be construed as advantageous over other aspects or designs. Rather use of the word exemplary is intended to present concepts in a concrete fashion. As used in this application the term or is intended to mean an inclusive or rather than an exclusive or . That is unless specified otherwise or clear from context X employs A or B is intended to mean any of the natural inclusive permutations. That is if X employs A X employs B or X employs both A and B then X employs A or B is satisfied under any of the foregoing instances. In addition the articles a and an as used in this application and the appended claims may generally be construed to mean one or more unless specified otherwise or clear from context to be directed to a singular form.

Also although the disclosure has been shown and described with respect to one or more implementations equivalent alterations and modifications will occur to others skilled in the art based upon a reading and understanding of this specification and the annexed drawings. The disclosure includes all such modifications and alterations and is limited only by the scope of the following claims. In particular regard to the various functions performed by the above described components e.g. elements resources etc. the terms used to describe such components are intended to correspond unless otherwise indicated to any component which performs the specified function of the described component e.g. that is functionally equivalent even though not structurally equivalent to the disclosed structure which performs the function in the herein illustrated exemplary implementations of the disclosure. In addition while a particular feature of the disclosure may have been disclosed with respect to only one of several implementations such feature may be combined with one or more other features of the other implementations as may be desired and advantageous for any given or particular application. Furthermore to the extent that the terms includes having has with or variants thereof are used in either the detailed description or the claims such terms are intended to be inclusive in a manner similar to the term comprising. 

