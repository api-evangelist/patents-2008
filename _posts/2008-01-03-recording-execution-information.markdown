---

title: Recording execution information
abstract: A method for recording execution information for a software application executable in a computer system, the computer system including a message queue, the method comprising the steps of: generating the execution information by the software application; and recording the execution information to the message queue for subsequent retrieval, wherein the message queue is accessible by the software application and persistent with respect to the software application.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09146843&OS=09146843&RS=09146843
owner: International Business Machines Corporation
number: 09146843
owner_city: Armonk
owner_country: US
publication_date: 20080103
---
The present invention relates to recording execution information for a software application. In particular it relates to recording execution information in a message queue which is persistent with respect to the software application.

Software applications at runtime can generate and record execution information for a number of purposes. For example execution trace information execution logs data dumps and debug information can be generated to assist in problem determination in the event that a software application fails. However recording such execution information routinely during the execution of a software application is burdensome and imposes a further resource requirement over and above that of the software application itself manifesting as a requirement for further storage and processing throughput. In some environments the burden of generating and recording execution information at execution time can be so great that it exceeds the resource requirements of the software application itself. For this reason a decision to include facilities for the generation and recording of execution information in a software application will involve a compromise. The balance is between a resource efficient high performance software application and a rich set of execution information for use in for example problem determination. However this balance is struck for a particular software application one of performance and reliability may be compromised.

Execution information once generated by a software application can be recorded in a memory associated with the software application such as a high speed volatile memory device. Using such memory can alleviate the effect of generating and recording execution information since read and write operations to such memory can be made quickly. However the use of such fast volatile memory has the disadvantage that the execution information recorded in the memory is lost in the event that the software application fails. To overcome this disadvantage a software application can record execution information to a non volatile storage device such as a disk storage device. However read and write operations to such storage devices are generally much slower than those to a high speed memory and overall application performance can be impacted negatively.

It would therefore be advantageous to provide for the persistence of execution information generated by a software application without placing additional burdens on the software application to undertake the regular recording of such information to a non volatile storage medium. Further it would be advantageous to process execution information without placing additional burdens on the software application to undertake such processing.

The present invention accordingly provides in a first aspect a method for recording execution information for a software application executable in a computer system the computer system including a message queue the method comprising the steps of generating the execution information by the software application and recording the execution information to the message queue for subsequent retrieval wherein the message queue is accessible by the software application and persistent with respect to the software application.

Thus the execution information is stored in a message queue which is persistent with respect to the software application. In this way the execution information is stored such that it will persist beyond the end of execution of the software application. For example if the software application fails during execution the execution information will not be lost while it may not have been specifically recorded to a non volatile storage device such as a disk. Thus the relative persistence of the execution information in the message queue is achieved without placing additional burdens on the software application to undertake regular recording of the execution information to a non volatile storage medium.

Preferably the method further comprises the step of reading by the software application of the execution information from the message queue for processing.

Preferably the software application reads the execution information from the message queue for processing at startup of the software application.

Alternatively preferably the software application is executable as a software application process in the computer system.

Preferably the computer system further includes an executable execution information handler wherein the message queue is accessible by the execution information handler such that the execution information handler is operable to read the execution information from the message queue for processing.

Preferably the software application process is multithreaded and the execution information handler is executable as a thread of the software application such that the execution information handler is executable substantially in parallel with one or more other threads in the software application process.

Preferably the execution information handler is executable as a process in the computer system separate to the software application process such that the execution information handler is executable substantially in parallel with the software application process.

Thus in this way the execution information can be processed without placing additional burdens on the software application to undertake such processing.

Preferably the processing includes one or more of storing outputting or deleting the execution information in the message queue.

The present invention accordingly provides in a second aspect a recording system for recording execution information for a software application executable in a computer system the computer system including a message queue the recording system comprising a generator for the software application to generate the execution information and a recorder for recording the execution information in the message queue for subsequent retrieval wherein the message queue is accessible by the software application and persistent with respect to the software application.

The present invention accordingly provides in a third aspect an apparatus comprising a central processing unit a memory subsystem an input output subsystem and a bus subsystem interconnecting the central processing unit the memory subsystem the input output subsystem and the regression manager apparatus described above.

The present invention accordingly provides in a fourth aspect a computer program element comprising computer program code to when loaded into a computer system and executed thereon cause the computer to perform the steps of a method as described above.

The Software application records the execution information to a message queue . Message queue is a data structure independent of and accessible to the software application for recording message data items and is persistent with respect to the software application . The persistence of the message queue with respect to the software application provides that the message queue will persist intact beyond a cessation of the execution of the software application .

The message queue is logically separated from the software application such that the message queue does not form part of the software application and the software application does not form part of the message queue . For example the message queue is a message queue facility provided by an operating system with which the software application executes. Such message queues in operating systems are well known in the art and can include message queues in shared memory for providing inter process communication. To provide for access to the message queue by the software application the software application can include a reference to the message queue . An example of such a reference is a memory pointer or alternatively an access interface function such as an application programming interface API function. Further the message queue can be generated at the request of the software application such as by calling an operating system API function.

The method of is illustrative of a preferred embodiment of the present invention in use. Initially at step the software application commences execution. At step the software application accesses the message queue which is persistent with respect to the software application . Alternatively in the event that the message queue does not exist when the application starts the software application can request that a new message queue is created. Such a request can be made for example by way of an operating system API function. Subsequently at step the software application generates execution information such as trace or log information. At step the execution information is recorded in the message queue for subsequent retrieval. The recording of the execution information in the message queue can be achieved for example by using a operating system API which is operable to accept an argument for storage in the message queue . In one embodiment it is necessary to convert a format of the execution information to a predefined message format suitable for storage in the message queue . Such conversion may be facilitated by an operating system API function or alternatively by the software application itself.

Thus the execution information is stored in a message queue which is independent of and persistent with respect to the software application . In this way the execution information is stored such that it will persist beyond the end of execution of the software application . For example if the software application fails during execution the execution information will not be lost while it may not have been specifically recorded to a non volatile storage device such as a disk. Thus the relative persistence of the execution information in the message queue is achieved without placing additional burdens on the software application to undertake regular recording of the execution information to a non volatile storage medium.

Once recorded in the message queue the execution information can be retrieved for processing by an execution information handler. An execution information handler may be a software component operable to retrieve and process execution information . Such processing can include for example storing execution information to a non volatile storage device such as a disk storage device outputting execution information to a user such is during problem determination transmitting execution information to another entity such as an external computer system or a separate software application and deleting the recorded execution information from the message queue . The execution information handler can be included in the software application . However the recording of the execution information in the message queue provides that the execution information handler can alternatively be provided in a separate software application to which the message queue is accessible. In this way execution information can be processed without placing additional burdens on the software application to undertake such processing. Such an arrangement is illustrated below with respect to .

The software application process includes a main application thread and an execution information handler thread . The main application thread is a thread of execution of software instructions for a software application and is operable to generate execution information during execution and record the execution information in the message queue . The execution information is substantially the same as that described above with respect to . The execution information handler thread is a thread of execution of software instructions which is operable to retrieve execution information from the message queue and process the execution information . The particular processing undertaken by the execution information handler thread is immaterial to the present description and can include the examples described above with respect to . The main application thread and the execution information handler thread are executable substantially in parallel.

Thus the arrangement of provides for a software application embodied in the main application thread of the software application process to generate execution information for storage to the message queue which is persistent with respect to the software application process . The message queue is persistent in this respect since it is provided by the operating system and is independent of the software application process . In this way the execution information is stored such that it will persist beyond the end of execution of the software application .

Insofar as embodiments of the invention described are implementable at least in part using a software controlled programmable processing device such as a microprocessor digital signal processor or other processing device data processing apparatus or system it will be appreciated that a computer program for configuring a programmable device apparatus or system to implement the foregoing described methods is envisaged as an aspect of the present invention. The computer program may be embodied as source code or undergo compilation for implementation on a processing device apparatus or system or may be embodied as object code for example.

Suitably the computer program is stored on a carrier medium in machine or device readable form for example in solid state memory magnetic memory such as disk or tape optically or magneto optically readable memory such as compact disk or digital versatile disk etc. and the processing device utilizes the program or a part thereof to configure it for operation. The computer program may be supplied from a remote source embodied in a communications medium such as an electronic signal radio frequency carrier wave or optical carrier wave. Such carrier media are also envisaged as aspects of the present invention.

It will be understood by those skilled in the art that although the present invention has been described in relation to the above described example embodiments the invention is not limited thereto and that there are many possible variations and modifications which fall within the scope of the invention.

The scope of the present invention includes any novel features or combination of features disclosed herein. The applicant hereby gives notice that new claims may be formulated to such features or combination of features during prosecution of this application or of any such further applications derived therefrom. In particular with reference to the appended claims features from dependent claims may be combined with those of the independent claims and features from respective independent claims may be combined in any appropriate manner and not merely in the specific combinations enumerated in the claims.

