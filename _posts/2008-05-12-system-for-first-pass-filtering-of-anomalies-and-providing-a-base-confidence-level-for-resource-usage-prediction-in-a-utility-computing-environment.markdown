---

title: System for first pass filtering of anomalies and providing a base confidence level for resource usage prediction in a utility computing environment
abstract: Provided is a system for monitoring resources in a utility computing environment (UCE). Measurements are evaluated to determine whether or not a particular resource requires remedial or other type of action. A sliding measurement window is employed to assemble a number of measurements corresponding to a particular resource. The number of intervals in a sliding measurement window is based upon best practices corresponding to the resource being measured and analyzed. A first threshold-crossing event and subsequent events are stored until the window is full, or closed. When the window is closed, the threshold-crossing measurements are analyzed to determine whether or not there exists an issue with the resource that requires action. Once a window has been closed and analyzed, the first threshold-crossing event and each subsequent event up to a second threshold-crossing event are discarded and the window reopens.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07689382&OS=07689382&RS=07689382
owner: International Business Machines Corporation
number: 07689382
owner_city: Armonk
owner_country: US
publication_date: 20080512
---
The present application is a continuation and claims the benefit of the filing date of an application entitled Method for First Pass Filtering of Anomalies and Providing a Base Confidence Level for Resource Usage in a Utility Computing Environment Ser. No. 10 902 591 filed Jul. 29 2004 assigned to the assignee of the present application and herein incorporated by reference.

The present invention relates generally to management of a utility computing environment UCE and more specifically to a system for filtering anomalies that affect whether or not particular actions need to occur with respect to particular allocated resources.

International Business Machines Corp. IBM of Armonk N.Y. has frequently implemented new paradigms in business computing. Currently IBM is deploying products and services to support the On Demand Business. An On Demand Business is an enterprise whose business processes are integrated end to end across the company and with key partners suppliers and customers and which can respond with speed to any customer demand market opportunity or external threat. The information technology IT infrastructure necessary to support the On Demand Business must be flexible and variable i.e. able to meet fluctuating demand levels. One technique employed to provide a flexible and variable IT infrastructure is a utility computing service. Utility computing is information technology IT services based upon power by the hour in which a client pays only for the level of computing services actually used. In this paradigm a resource may be allocated or deallocated based upon a customer s actual need for the resource.

Customers of a utility computing infrastructure transform their IT environment into a variable resource and pay only for the actual computing services received. The utility management infrastructure UMI provides the tools and services to effectively manage the utility computing environment. Like electricity water and gas IT is treated as another utility. Thus by eliminating the responsibility of building and maintaining IT operations providing necessary education and training to administrators and having to comply with applicable regulations the customer can focus on their core business while enjoying variable pricing automated processes and the invaluable resilience and responsiveness of a shared infrastructure provided by the utility provider.

One issue that arises in a utility computing environment is how to determine when a particular event or condition indicates that remedial or other action needs to be initiated. For example if a particular resource e.g. memory is detected to be in short supply more of that particular resource might need to be made available or allocated. On the other hand a shortage of memory may be the result of a large but temporary data transfer. In other words some events or conditions are more appropriately treated as an anomaly rather than indication of a change in requirements that necessitates the taking of action.

There are programs that provide for the monitoring of a resource typically either by polling the resource or based on a periodic communication by the resource. However current systems do not provide a way to filter anomalous events such that such events are ignored or discarded and unwarranted and unnecessary actions are prevented.

Provided is a system for monitoring resources in a utility computing environment UCE in which events are evaluated to determine whether or not a particular event necessitates remedial or other type of action. A sliding measurement window is employed to assemble a number of measurements corresponding to a particular resource thus gaining a base confidence level with respect to the resource. The system filters usage spikes and other anomalies preventing the anomalies from initiating further more detailed analysis or action.

A number of intervals spanned by a sliding measurement window is based upon best practices corresponding to the resource being measured and analyzed. Events are monitored until a threshold crossing event is detected and then a window is opened with the threshold crossing event stored as the window s first element. Prior to the first threshold crossing events measurements are discarded i.e. not stored in a window. Events subsequent are stored until the window closes.

The window is closed when the number of intervals in the window equals the number of measurements. Once the window is closed the stored events are analyzed to determine whether or not there exists an issue with the resource that requires further action. In other words the analysis determines if there is a base confidence that a non anomalous event has occurred.

Once a window has been closed and analyzed measurements starting with the first threshold crossing event and ending with the event immediately prior to the second threshold crossing event are discarded and the number of intervals is incremented by the number of discarded measurements. If a window is fully opened i.e. there are no threshold crossing events subsequent to the first such event all events are discarded i.e. not stored in the window until another threshold crossing event is detected.

Thus the window slides along with threshold crossing events acting as a first pass for spike and other anomaly detection. This system reduces the need for unnecessary event analysis including perhaps human intervention. Once a window is closed the number of threshold crossing events is compared to the number of total events within the window and depending upon the percent of threshold crossing events the event within the window may be passed to another module for further analysis.

Inputs to a sliding measurement window can be used to create future resource usage predictions. The output of the system is an event or events that must be more extensively analyzed. Such analysis can be but is not limited to rules based analysis pattern matching or some other form of analysis.

Although described with particular reference to a utility computing environment UCE or utility management infrastructure UMI the claimed subject matter can be implemented in any information technology IT system in which the automatic monitoring and or management of resources is desirable. Those with skill in the computing arts will recognize that the disclosed embodiments have relevance to a wide variety of computing environments in addition to those described below. In addition the systems of the disclosed invention can be implemented in software hardware or a combination of software and hardware. The hardware portion can be implemented using specialized logic the software portion can be stored in a memory and executed by a suitable instruction execution system such as a microprocessor personal computer PC or mainframe.

In the context of this document a memory or recording medium can be any means that contains stores communicates propagates or transports the program and or data for use by or in conjunction with an instruction execution system apparatus or device. Memory and recording medium can be but are not limited to an electronic magnetic optical electromagnetic infrared or semiconductor system apparatus or device. Memory and recording medium also includes but is not limited to for example the following a portable computer diskette a random access memory RAM a read only memory ROM an erasable programmable read only memory EPROM or flash memory and a portable compact disk read only memory or another suitable medium upon which a program and or data may be stored.

Turning now to the figures is a block diagram of an exemplary Universal Management Infrastructure UMI architecture incorporating the claimed subject matter. An enterprise services a number of customers such as a customer  a customer  a customer  a customer  and a customer  . Enterprise also has relations with a number of suppliers a supplier  a supplier  and a supplier  . For the sake of this example the particular type of business engaged in by enterprise is not specified because UMI architecture as well as the claimed subject matter can be applied to practically any type of business that employs an information technology IT infrastructure. In fact UMI architecture can even apply to a hypothetical business that does not have customers and or suppliers.

In this example suppliers provide parts and services to enterprise and customers purchase products or offerings . Enterprise includes a business process  a business process  and a business process  to enable enterprise to convert parts and services into offerings . Examples of types of business processes include but are not limited to a manufacturing supply system an accounting system a billing system a customer management system and a payroll system. The specific number of customers suppliers and business processes are used for the sake of an example only the claimed subject matter applies equally well to small medium and large enterprises with any particular number of such relationships.

Enterprise incorporates a virtualized infrastructure or an On Demand services ODS Framework which in this example is an e business on demand EBOD environment designed by International Business Machines Corp. IBM of Armonk N.Y. The IBM EBOD environment is designed for business customers and delivers accounting human resource and customer relationship management applications over the Internet for a usage based charge.

Also included in is a business systems block which represent any or all particular business process that may be required to provide access to one or more of the various ODS services offered by enterprise . Business systems is coupled to ODS framework via an order enable block which can represent software hardware or human operators for communicating information from business systems to ODS framework .

ODS framework includes an integration hub for coordinating the interactions among business system ODS services and ODS framework . Integration hub includes a workflow component and an integration middleware component . Workflow component manages communication and requests from business systems and integration middleware component and communication and requests from ODS block . While workflow component communicates primarily with integration middleware component integration middleware component is responsible for handling communication and requests from workflow component ODS services block and a UMI Base Services to ODS block .

UMI base services include a portal which is a communications interface between UMI base services the rest of ODS framework and any entity such as software from another vendor that is external to ODS framework and requires a direct communication link to UMI base services . Those with skill in the computing arts will realize there are a number of methods of implementing portal including but not limited to APIs and secure sockets. Additional components of UMI base services include a help desk component a service level agreement SLA component a provisioning component a reporting component a monitoring and management M M component a billing component a metering component a test center component and a window analysis component .

Help desk component may be either an automated system such as a typical telephone response system or a fully or partially human staffed system in which help desk component serves to automate communication and data retrieval tasks for employees that work at a corresponding help desk department of enterprise .

Service level agreement SLA management component monitors and controls the interactions between ODS framework and who or whatever interacts with ODS framework such as customers and or suppliers . A SLA is typically a contractual agreement between the provider of ODS framework and a particular customer or supplier concerning the amount of resources of ODS framework to which the customer or supplier is entitled. In other words SLA management component determines whether or not a particular customer or supplier is meeting exceeding or otherwise complying with their specific SLA and then takes appropriate actions based upon that information. Data concerning SLAs is stored in a data store .

Provisioning engine provides for the automation of tasks and the distribution of resources related to the setup and modification of accounts within ODS framework . Specifically provisioning engine enables the creation and modification of resources such as servers data storage network resources and firewalls. In addition provisioning engine facilitates the distribution of software within the ODS framework .

Reporting component is responsible for the production of reports on any or all of enterprise business processes and a corresponding customer or supplier and ODS framework . Reports may include but are not limited to production reports billing reports inventory reports customer reports performance reports and SLA compliance reports. Pre defined report templates and generated reports are stored in data store .

M M component is responsible for the collection of information on and provides the interface for the management of ODS framework and the other UMI base services . Collected information is stored in data store and is made available either directly or through data store to help desk reporting component and a billing component explained below.

Billing component produces invoicing and billing information for customers and suppliers for their respective use of ODS framework based primarily on information from SLA management component and a metering component described below.

Metering component keeps track of customers and suppliers use of ODS framework as well as any necessary internal information relative to the operation of ODS framework . Information collected by metering component is stored in data store and available for use by help desk component reporting component M M component and billing component .

Test center component controls such activities as customer profiling test data generation and test storage and scheduling for ODS framework . Finally Window Analytics component with the help of various other components as described below implements the system of the claimed subject matter. Window analysis component is described in more detail below in conjunction with .

Metering component which as explained above in conjunction with keeps track of customers and suppliers use of ODS framework also measures information relating to the performance of monitored resources. Information relating to the monitoring of resources is primarily stored in a Resource Profile RP data of data store .

Window Analytics block which as explained above in conjunction with provides for the automatic monitoring of resources within ODS framework . Block determines whether or not a particular event or condition warrants further automated or human analysis or intervention. Examples of monitored resources include but are not limited to servers data storage network resources and firewalls. A Window Analysis process is explained in more detail below in conjunction with .

SLA Management component is included in Window Analysis Module because any analysis of a particular resource may be impacted by the parameters of a specific customer s service level agreement. For example even though a particular service is shown to be needed by a customer according to the disclosed system the customer s SLA may preclude the allocation of that resource.

In addition to containing RP data data store also includes Window Configuration WC data and SLA data . As explained above RP data includes information concerning clients resources allotments in ODS framework as well as any other available resources. Examples of allocated resources might include but are not limited to processing cycles number of required servers network bandwidth and data storage requirements. Each of the allocated resources have parameters associated with them such as a base source allotment a maximum resource allotment a resource cost and rules for dynamically reallocating the resources based upon the client s workload demand. An example of an available resource is the types of available processors.

Memory associated with WC data is explained in more detail below in conjunction with . SLA Data includes information concerning customers SLAs which is employed by SLA Management component for among other things to determine whether or not a particular resource can be allocated or de allocated.

Attribute section includes a weID attribute an eventName attribute a dataValue attribute a Timestamp attribute a thresholdCrossed attribute a durationExceeded attribute and a woID attribute . Instantiations of object are stored in WC data of data store .

WeID attribute is a variable of type WindowElementID that contains a reference to a particular instance of object . Each instance of object has a unique value for attribute that allows each instance to be uniquely identified. WeID attribute is employed to locate information concerning a particular element of a window object see in order to monitor and manage a resource associated with that window object. EventName attribute is a variable of type String that stores the name of a particular type of event associated with a particular instantiation of object .

DataValue attribute is a variable of type Integer that stores a value corresponding to a particular threshold associated with this particular incident of object . Threshold values are explained in more detail below in conjunction with . Timestamp attribute is a variable of type DateTime that stores a value corresponding to the date and time object was generated.

ThresholdCrossed attribute is a variable of type Boolean that stores a value indicating whether or not the value stored in attribute violates the acceptable threshold value of the corresponding resource. Of course any particular threshold may be a lower or upper limit for acceptable values. For example if the resource is a disk drive a threshold value might be set at five hundred 500 Kbytes of free space such that if a scan of the disk drive indicates there is less than 500 Kbytes of free space available then the threshold is considered violated.

DurationExceeded attribute is a variable of type Boolean that stores a value indicating whether or not the value stored in attribute represents a value that both violates the threshold and that represents a threshold measurement that sufficiently many attribute values of immediately previous instantiations of object have also violated. Threshold and duration values are explained in more detail below in conjunction with .

WoID attribute is a variable of type WindowObjectID that stores a value corresponding to a specific window object with which object is associated. Window event objects are described in more detail below in conjunction with .

Method section of object includes a getThreshold method a setTimestamp method a setThresholdCrossed method and a setDurationExceeded method .

GetThreshold method is called without parameters to determine a threshold value for the resource with which object is associated. Method returns an Integer variable corresponding to the threshold value stored in a threshold attribute see .

SetTimestamp method is called to set the value of timestamp attribute . Method is called with one 1 parameter newTime typically set to a value of NULL in which case attribute is set with the value of the current date and time. If a value is stored in the newTime parameter then attribute is set to the stored value.

SetThresholdCrossed method is called to set the value of thresholdCrossed attribute . A newValue parameter passes in a measured value that is compared to a threshold attribute returned by getThreshold method . If the newValue parameter violates the stored threshold then thresholdCrossed attribute is set to a value of 1 . Otherwise attribute is set to a value of 0 .

Finally setDurationExceeded method is called to set the value of DurationExceeded attribute . A newValue parameter passes in a measured value that is compared to a threshold attribute returned by getThreshold method . If the newValue parameter violates the stored threshold then method checks previous instantiations of object to determine whether or not thresholdCrossed attributes have been set for a period of intervals exceeding the value stored in a thresholdDuration attribute see . If the value of newThreshold both violates threshold attribute and has done so for a sufficient number of intervals then attribute is set to a value of 1 . Otherwise attribute is set to a value of 0 .

Attribute section includes a woID attribute a windowInit attribute a windowCurrent attribute a windowElements attribute and a roID attribute . Instantiations of object are stored in WC data of data store .

WoID attribute is a variable of type WindowObjectID that contains a reference to a particular instance of object . Each instance of object has a unique value for attribute that allows each instance to be uniquely identified.

WindowInit attribute is a variable of type Integer that stores a value corresponding to the initial size in terms of numbers of polling intervals see element for a particular instantiation of object . Any particular resource is assigned an initial window size as determined by best practices. Information about the initial window size of any particular resource is stored in RP data of data store . WindowCurrent attribute is a variable of type Integer that stores a value corresponding to the current size of the window of object . The value of attribute represents the size of the current window in terms of polling intervals defined for the corresponding resource. Typically the value stored in attribute would be equal the value stored in attribute but this value can be changed either programmatically or by a user in order to make the system either more or less sensitive.

WindowElements attribute is a variable of type Vector that stored a list of WE objects such as object . Attribute can be implemented by but is not limited to such means as a linked list or a database. RoID attribute is a variable of type ResourceObject which is described in more detail below in conjunction with . Simply stated attribute stores a variable that uniquely identifies a specific ResourceObject with which the current instantiation of object is associated.

Method section of object includes an initWindowElements method an addWindowElement method and a getWindowElement method .

InitWindowElements method is called when object is created and its tasks include initializing variables and . Method is called with one 1 parameter woID which is a window element object . If woID is set to the value NULL then attribute is created as an empty vector. Otherwise the window element object passed in to method is used as the first element in attribute .

AddWindowElement method is called to add a window element to attribute which as described above as a collection of window elements . In a polling system like that described in conjunction with method is called every time a poll of the associated resource is executed. AddWindowElement method is called with one 1 parameter weID which represents an appropriately initialized instantiation of object which is added to the list of elements stored in attribute .

Finally getWindowElement method is called to retrieve window elements objects from attribute . Method returns an object such as WE memory object and is called with one 1 parameter offset an Integer that represents a corresponding window element stored in attribute . For example if offset is set to a value of 0 1 or 2 then method returns the first second or third element of attribute respectively. If there is no corresponding element then method returns a value of NULL. In this manner a process such as process see is able to retrieve individual memory elements of attribute for processing.

Attribute section includes a roID attribute a resourceName attribute a threshold attribute a thresholdDirection attribute a thresholdDuration attribute a pollingInterval attribute an initialWindowSize attribute and an windowObjectID attribute . Instantiations of object are stored in RP data of data store .

RoID attribute is a variable of type ResourceObjectID that contains a reference to a particular instance of object . Each instance of object has a unique value for attribute that allows each instance to be uniquely identified. ResourceName attribute is a variable of type String that stores the name of a particular type of resource associated with a particular instantiation of object . Both roID attribute and resourceName attribute can be employed to locate information concerning a particular resource in order to monitor and manage the resource according to the claimed subject matter.

Threshold attribute is a variable of type Integer that stores a value corresponding to a limit of acceptable measurements of the corresponding resource. For example if the resource is a disk drive than the value five hundred 500 Kbytes might be a value for free space below which the disk drive is not desired to fall. In other words 500 Kbtes is the disk drive s threshold and if a measured value of four hundred 400 Kbytes is received the value crosses or violates threshold attribute . ThresholdDirection attribute is a variable of type Boolean that stores a value that indicates whether the value stored in attribute represents a minimum or a maximum threshold. In the disk drive example the value of attribute is set to 0 indicating that 500 Kbytes is a minimum. If the resource was CPU utilization and threshold is set to a value of 75 indicating that the CPU s should not exceed seventy five percent 75 utilization then the value of attribute is set to 1 indicating that 75 is a maximum.

ThresholdDuration attribute is a variable of type Integer that stores a value representing duration or a predetermined number of polling intervals that a threshold must be crossed before the resource is considered in a potentially interesting situation. For example the free space of a disk drive might occasionally drop below the 500 Kbyte minimum during the transfer of large data files but the disk drive is not considered to be in an anomalous condition unless free space remains low for a long enough interval e.g. three 3 or more intervals. In this case the value of attribute for this particular resource would be set to a value equal to 3 . In an alternative embodiment rather than consecutive threshold crossing events thresholdDuration attribute can store information representing an unacceptable percentage of threshold crossing events over a specified number of measurements. For example an anomalous condition may be defined as any time there are three 3 threshold crossing events within four consecutive polling intervals.

PollingInterval attribute is a variable of type Interval that stores a value representing how often the corresponding resource should be polled for example every one 1 or ten 10 second s . InitialWindowSize attribute is a variable of type Integer that stores a value corresponding to an appropriate window size for the corresponding resource or the number of intervals in the initial window. WindowObjectID attribute is a variable of type WindowObjectID that stores a unique identifier to a WO object corresponding to the current RO object .

Method section of object includes a getWindowCurrent method a setWindowCurrent method a updateWindowCurrent method a getEventCount method and an addWindowElement method .

GetWindowCurrent method is called during an Event Analysis process described below in conjunction with . GetWindowCurrent method is called without parameters and returns an Integer representing the value of windowCurrent attribute of the object pointed to windowObjectID attribute associated with the current RO object . SetWindowCurrent method is called during Event Analysis process to set the value of attribute of the object pointed to by windowObjectID attribute . SetWindowCurrent method is called with one 1 parameter newInt which is of type Integer and is used to update the value of attribute .

UpdateWindowCurrent method is called when threshold attribute is modified. Method is called with no parameters and updates window elements vector and the corresponding memory elements to reflect the new value for attribute .

GetEventCount method is called without a parameter and returns an Integer representing the number of window element objects currently stored in window elements vector .

AddWindowElement method is called by process to add a new window element object to window element vector . Method is called with one 1 parameter weID which represents an initialized instantiation of object . Typically method is called once per polling interval to store the corresponding resource s measured values.

It should be understood that WE object WO object and RO object are only examples of memory objects that may be used to implement the claimed subject matter. Other memory objects with fewer more and or different attributes and methods may be employed. One with skill in the computing arts should appreciate there are many ways to implement the functionality and data storage requirements of the claimed subject matter. For example the claimed subject matter may be implemented by means of a computer program in conjunction with a relational database.

During a Take Process Measurement block a query is directed to a target resource such as the disk drive used in this example. For example the query might check the amount of free memory space available on the disk drive From block control proceeds to a Violate Threshold block during which process determines whether or not the data received during block violates the value stored in threshold attribute of WE memory object corresponding to the target resource. As explained above this information is already stored in attribute of the corresponding WE memory object . As explained above in conjunction with whether the data violates threshold depends upon whether attribute represents a minimum or a maximum value as defined in thresholdDirection attribute . In this example process is configured so that block is executed at regular time intervals for example once per second.

If the data received during block does not cross threshold then control returns to block and processing continues as described above. If during block process determines that the measurement crosses the relevant threshold attribute then control proceeds to an Insert Measurement block during which process instantiates a WE memory object corresponding to data returned from the query and inserts the new WE memory object into window elements of WO memory object created in block .

At this point in this example the matrix would be 1 . The value of the returned data is stored in dataValue attribute timestamp attribute is set to the current date and time thresholdCrossed attribute is set based upon whether or not violate threshold . The concept of threshold crossing or violation is explained in detail above in conjunction with .

Following Insert Measurement block control proceeds to a Window Closed block during which process as described above determines whether or not the number of WE memory objects equals the value stored in windowCurrent attribute . If not then control proceeds to a Take Measurement block during which process takes another measurement of the targeted resource after waiting the appropriate period of time. Control then returns to Insert Measurement block and processing continues as described above. Of course thresholdCrossed attribute is either set to 0 or 1 depending upon whether or not the corresponding measurement crosses threshold . For example if threshold is not crossed then in the example started above the matrix becomes 1 0 .

If during block process determines that the window is closed i.e. the number of WE memory object equals the value stored in windowCurrent attribute then control proceeds to a Set Durations block during which process evaluates each WE memory object stored in windowElements vector in light of the other window elements in vector to determine the persistence of threshold crossing events. The resulting data is stored in corresponding durationExceeded attributes . For example after multiple iterations through blocks and the example matrix may look like 1 0 0 1 1 0 1 0 1 0 indicating that all memory locations allocated for WE memory objects have been filled.

Control the proceeds to an Analyze Events block during which process examines windowElements attribute with respect to the percent of stored WE memory objects that are marked as having violated threshold and thresholdExceeded attribute . Control then proceeds to a Percent Threshold block during which process determines whether of not the percent of anomalies calculated in block and the respective values of durationExceeded attribute justify further examination of the anomalous WE memory objects . If not process proceeds to Slide Window block . If so then control proceeds to a Transmit Report block during which process reports to Reporting module so that performance reports can be generated if necessary. In addition during block the data stored in WE memory object of WO memory object are transmitted to Window Analytics module for any necessary further analysis of the corresponding resource. Control then proceeds to Slide Window block .

During Slide Window block process deletes from windowElements vector WE memory objects from the first window element up to but not including the next WE memory object that is marked as being in violation of threshold as determined by checking the value of the corresponding thresholdCrossed attribute . The example matrix would thus become 1 1 0 1 0 1 0 . If there are no threshold crossing events past the first then all WE memory objects are deleted i.e. the matrix becomes .

Control then proceeds to a Window Open block during which process determines whether or not the window of WO memory object is completely open i.e. there are no threshold crossing events stored in vector i.e. the matrix is set to . If this is the case control returns to Initialize Window block and processing continues as described above. If the modified window from block includes threshold crossing events then control returns to Take Measurement block and processing continues as described above.

Of course the example above is only one example of numerous variations that may be implemented both with respect to the sliding of a window the events that open and close a window and the setting of the various parameters. Any specific configuration appropriate for a particular situation is determined by best practices in conjunction a determination of the desired results and sensitivity of the system.

Finally a block represents an asynchronous event that causes process to process to an End Event Analysis block in which process is complete. Examples of an asynchronous event include but are not limited to a signal from a control panel not shown or the discontinuation of power to a computing device that is executing process . Until such an asynchronous event occurs process is designed to operate continuously.

It should be understood that the description above represents only one particular implementation of the claimed subject matter. For example rather than a system based upon periodic polling of resources the claimed subject matter may be implemented in an event driven system in which the resources themselves initiate the transmittal of information to the system in a manner consistent with their functionality.

While the invention has been shown and described with reference to particular embodiments thereof it will be understood by those skilled in the art that the foregoing and other changes in form and detail may be made therein without departing from the spirit and scope of the invention including but not limited to additional less or modified elements and or additional less modified blocks performed in the same or a different order.

