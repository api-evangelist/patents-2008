---

title: Dynamic translator for requests for system resources
abstract: Techniques for selectively translating resource requests from a program running on a computer system are disclosed. The resource request may be a request to access a file, library file, API, etc. The resource request may be a system call or library call. The computer program may be non-native to the computer system. Translation of resource requests may occur within the operating system or outside it. A resource request containing a reference to a first path and file name may be selectively translated by altering the resource request to contain a reference to a second path and file name. After selectively translating a request, he request is caused to be serviced. A resource request may be serviced by forwarding it to an operating system, and a result may be sent back to the program.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08521760&OS=08521760&RS=08521760
owner: Oracle America, Inc.
number: 08521760
owner_city: Redwood City
owner_country: US
publication_date: 20081230
---
During the course of its operation a program running on a computer system may need to access certain system resources such as files or libraries. If a request for a particular resource is successful the program is thus able to gain access to the resource and continue execution. If on the other hand the requested resource is not present at the location expected by the request or the requested resource is incompatible with the requesting program an error may occur. Such an error may have an adverse effect on the operation of the program. The problem of unsuccessful resource requests is particularly acute although by no means limited to the situation where the program has been written or compiled for a first computing platform but is executing on a second different computing platform.

Various techniques for selectively translating requests for computer resource requests are disclosed.

In one embodiment a method is disclosed in which a resource request is received at a request translator from a program running on a computer system. The request translator makes a determination as to whether the resource request contains any references that require translation. If the resource request requires translation the resource request is altered and the request translator causes a version of the altered request to be serviced. If no alteration is performed the request translator causes an unaltered version of the request to be serviced.

In various embodiments the resource request may contain a reference to a file library file process device API or other resource. A resource may be an object. A resource may be external to the computer system. The resource request may be for example a system call or a library call and the reference may be one of the parameters to the system call or library call.

The program may be non native with respect to the computer system on which it is running. The program may also be under the control of a control application. In one embodiment the control application is capable of dynamically executing non native program binaries and the request translator is a component of the control application. Alternate sets of system and or library files for use with a non native program may be present on the computer system and resource requests by a non native program may be selectively translated such that the translated resource requests are directed toward the alternate set of files.

The techniques of the present disclosure are not limited however and the program may also be a native program. Both native and non native programs may be subjected to dynamic selective resource request translation with the effect that the programs executed in a different computing environment or system configuration than they would if resource request translation were not performed. Executing a program in a different computing environment may cause the program behavior to change and may even allow the program to be operative on a computer system where it may have been non operative before. The program may be any type of program including a compiled program a program being interpreted such as a script a program called from within another program etc.

In one embodiment a request translator receives an input resource request from a program and selectively determines whether the resource request is to be translated. The request translator may be a component of an operating system. The step of selective translation may be performed in part by accessing a data store which may contain translation tables and or translation rules. In the above embodiment if it is determined that the resource request is to be translated the resource translator outputs a translated resource request that may contain at least one translated reference. Multiple references within one resource request may be translated. If no translation is required the output resource request appears as an unaltered version of the input resource request. The request translator then causes the output resource request to be serviced. The request translator may cause the request to be serviced by sending the output resource request to an API of an operating system. The request translator may also cause the request to be serviced by sending it to another entity capable of servicing the request e.g. an object request broker a database an API not within the operating system or any other appropriate entity. After the request is serviced a result may be returned to the calling program. The result may return a particular value or allow the program to access a particular resource. For example the result of a system file open call may be a handle to a file file descriptor resulting from the file open call.

In a further embodiment a system is disclosed that includes one or more processors I O devices and a memory subsystem where the memory subsystem further includes program instructions executable by the one or more processors. The program instructions are executable by the one or more processors to dynamically translate resource requests and cause the requests to be serviced and otherwise implement the techniques described herein.

In still further embodiments tangible computer readable memory media for implementing various disclosed techniques are also contemplated.

This specification includes references to one embodiment or an embodiment. The appearances of the phrases in one embodiment or in an embodiment do not necessarily refer to the same embodiment. Particular features structures or characteristics may be combined in any suitable manner consistent with this disclosure.

Terminology. The following paragraphs provide definitions and or context for terms found in this disclosure including the appended claims 

 Comprising. This term is open ended. As used in the appended claims this term does not foreclose additional structure or steps. Consider a claim that recites An apparatus comprising one or more processor units . . . . Such a claim does not foreclose the apparatus from including additional components e.g. a network interface unit graphics circuitry etc. .

 Computer System. This term has its ordinary and accepted meaning in the art and includes one or more computing devices operating together and any software stored thereon. A computing device includes at least one or more processor units and a memory subsystem. A memory subsystem may store program instructions executable by the one or more processor units. An exemplary computer system is described in more detail with reference to .

 Processor unit. This term includes any circuitry that is configured to execute program instructions e.g. a central processing unit CPU . As used herein a processor unit may refer to a computer subsystem having one or more processors. A processor may have one or more processing cores on a single die. A processor unit may be distributed across multiple dies.

 Configured. As used herein this term means that a particular piece of hardware or software is arranged to perform a particular task or tasks when operated. Thus a computer system that is configured to perform task A means that the computer system includes a circuit program instructions stored in memory or other structure that during operation of the computer system performs or can be used to perform task A. As such a computer system can be configured to perform task A even if the computer system is not currently on. Similarly a computer program that is configured to perform task B includes instructions that if executed by a computer system perform task B.

 Software. This term has its ordinary and accepted meaning in the art which includes computer programs of any form programs include sets of instructions that when executed by a processor unit direct the operation of a computer system.

 Program. This term is to be interpreted according to its ordinary and accepted meaning in the art which includes executable files script files etc. . . . Executable files are generally compiled at least partially prior to run time. Script files are generally interpreted at run time.

 Operating System OS . This term is to be interpreted according to its ordinary and accepted meaning in the art which includes one or more programs designed to control the execution of other programs. Such control may include one or more of the following actions scheduling other programs debugging other programs controlling input and or output of other programs assigning storage to other programs managing data of other programs etc.

 Application. As used herein this term refers to a program that is distinct from an operating system of a computer system.

 Computer Platform. As used herein this term refers to a computer system having a particular configuration or properties e.g. a particular instruction set architecture associated with the processor unit of the computer system . A first computer platform may be incompatible with a second computer platform depending on the relative configuration or properties of the two platforms. For example the two platforms might have incompatible instruction set architectures.

 Native Software Non native Software. As used herein a particular program or piece of software is native to a particular computer platform if its executable code is in an instruction set architecture associated with the processor unit of the computer platform. As used herein a particular program or piece of software is non native or not native to a particular computer platform if its executable code includes at least one incompatibility with an instruction set architecture associated with the processor unit of the computer platform.

 System Call. As used herein a system call is a program request made to interpreted or handled by an operating system. A system call includes a program request made to an operating system library through a predefined Application Programming Interface API .

 Library Call. As used herein a library call is a program request made to interpreted or handled by program instructions that are not part of an operating system.

 Service. As used herein a request is said to be serviced when the request is completed either successfully or unsuccessfully with or without an associated error condition.

 Application Programming Interface API . This term is to be interpreted according to its ordinary and accepted meaning in the art which includes a formalized set of software calls and routines for accessing certain hardware or software features of a computer system.

 Resource. As used in the context of a computer system this term has its ordinary and accepted meaning in the art which includes any physical or virtual component of limited availability within a computer system.

 Reference. As used herein a reference is portion of a request that refers to a location where the location is either local or remote to a computer system.

 Translation. As used herein this term refers to the act of changing or altering. Consider a request to access the directory usr lib . A translated version of this request might be x86 usr lib .

Turning now to a block diagram of a computer system A Computer Platform A is depicted. As shown computer system A includes a program operating system A resources and network interface A which couples computer system A to external resources .

Program is running on operating system A. Program includes code that when executed causes a resource request to be sent to operating system A. In resource request is a system call. More particularly code is executable to invoke a system call to access the file lib ld.so.1 in a read only mode. The particular instantiation of code shown in is of course exemplary.

Operating system A is configured to provide program access to resources of system A. Operating system A may also be configured to provide via network interface A program access to resources that are external to system A. After receiving resource request operating system A causes the request to be serviced and returns a result A to the program . Result A may return a particular value or allow program access the resource indicated in resource request . For example with respect to code shown in result A may be a handle to a file resulting from the open system call.

Turning now to a block diagram of a computer system B Computer Platform B is depicted. Elements of also found in are numbered identically for convenience e.g. program code request . Elements of that correspond to those in are numbered accordingly. Reference Numeral for example refers to a set of system resources that is distinct from resources in at least one way.

As in code in program when executed makes a resource request to an operating system B. This request may be for resources or . Unlike in in which operating system returns a result A operating system B returns a result B which connotes an error. This error condition might occur for example because resource request contained a reference to a system file or library file that was incompatible with program . Resource request B sent to operating system B may also fail to be serviced for other reasons.

Turning now to a block diagram of one embodiment of a computer system is depicted. As shown computer system includes a program a request translator resources and data store .

As in code within program when executed makes an input resource request . Note that program can be any suitable type of program and may be compiled or interpreted. In one embodiment program is called from within a script or other program. Program may be a user application or a system application.

Input resource request is received by a request translator . As will be described in further detail below request translator selectively translates input resource request to an output resource request . In one embodiment request translator uses data store in determining whether to translate input resource request . Input and output resource requests and may be directed to one or more resources or of computer system . By conveying output resource request request translator causes output resource request to be serviced for example by causing a result to be sent to program via translator .

Resources can be any suitable resource of system and may include files A library files B devices C processes D etc. Files A and library files B may include user files and system files. Files A and library files B may also include logical representations of devices C and processes D.

Files A and library files B may also include all known paths and files that are originally installed by an operating system on a first computer platform e.g. that of computer system . In some embodiments files A and library files B also include replicated copies of all known paths and files that are originally installed by an operating system on a second computer platform e.g. one different from that of computer system . In this manner paths and files originally installed by an operating system on a first computer platform may coexist on the same computer system with paths and files of an operating system of a second computer platform.

As one example files A and library files B may include directories corresponding to a typical installation of UNIX having a SPARC instruction set e.g. lib usr etc as well as directories corresponding to a typical installation of UNIX having an x86 based instruction set e.g. x86 lib x86 usr x86 etc .

In one embodiment program may be able to access external resources via a network interface not depicted . External resources may comprise files library files devices and processes residing in a location that is separate and or remote from computer system . External resources may be any suitable type of resource. Resources or are either specific to a particular computer platform or are independent from a particular computer platform.

Input resource request received at request translator is a request to access a resource or . In one embodiment input resource request may be a system call such as in the particular embodiment shown in in which the input resource request is for opening the file lib ld.so.1 in read only mode .

In another embodiment input resource request may also be a library call for example to one of a plurality of libraries that are not provided as part of the original installation of an operating system. These libraries might be installed by various software and hardware vendors. Input resource request is in no way limited only to system and library calls however.

In one embodiment program making input resource request may be non native to computer system . For example in one embodiment computer system is a computer platform whose processor unit is compatible with the SPARC instruction set while program is a binary executable compiled for the x86 instruction set where program contains at least one incompatibility with the SPARC instruction set. In such an embodiment request translator might be used to selectively translate references within resource requests by program such that they are compatible with the environment of the platform of computer system . In another embodiment computer system is an IBM PC compatible laptop whose processor unit is associated with an x86 instruction set associated with its processor unit while program is a binary executable compiled for the PowerPC instruction set.

In still another embodiment program is specifically written or compiled for the platform associated with computer system e.g. program is native. In such an embodiment request translator can also be used to selectively translate resource requests e.g. by changing file names or path names in resource requests . For example certain resources of computer system may be associated with a first system configuration while other resources may be associated with a second system configuration. Executing a native program without translation of any resource requests may result in a certain program behavior corresponding with the first system configuration. By executing the same native program but selectively translating the resource requests that it makes the program behavior of native program may thus differ and correspond with the second system configuration.

One possible advantage to this approach is that a program running on a first computer platform but compiled for an instruction set associated with a different computer platform may access resources of the first computer platform without having to be recompiled. In many instances recompilation is undesirable as it takes too much time or computational resources. In other instances recompilation is simply not possible e.g. in the case of a program for which source code is not available . In executing a program running on a first computer platform but compiled for an instruction set associated with a different computer platform a dynamic binary translator may be used.

Another advantage that may be present in some embodiments is that by translating redirecting requests for known system files and services application behavior can be preserved. One example is the content of the directory usr include sys . In one embodiment the file content of this directory is platform specific. Another example is the linker ld which in one embodiment is tied to a target processor architecture. Selective translation of resource requests may allow the semantic behavior of an application to be maintained even when the application is run in a different computing environment.

By making entire multiple system environments e.g. a host system environment and a target system environment available to the request translator the translation environment is more flexible than a restricted translation environment where only the target environment is accessible. In some embodiments a casual user may observe that no special window shell or action needs to be used to translate a non native program. In some embodiments allowing the request translator to redirect requests for system files and services by predefined or user specified rules makes the translation process transparent to a user. In some embodiments without changing an original computer platform environment both native host applications and translated target applications can access common space data. In these embodiments execution may remain unchanged for the native host application while for the translated target application known system files and user defined files are redirected resulting in different program behavior.

In one embodiment when an input resource request e.g. is received at request translator translator determines whether input resource request includes a reference that is identified as requiring translation. In one embodiment a reference may be an argument or part of a system or library call e.g. a reference that identifies the location of a file to be opened . In general the reference may be any information within a resource request that refers to or identifies an object on or accessible to computer system . For example a reference may refer to a file or directory. A reference may also refer to a particular system call.

In one embodiment request translator selectively translates references in requests by making a determination as to whether a translation is to be performed. This process is described further with reference to . In one embodiment computer system includes or has access to a data store any suitable type of memory which may be accessible directly or via a software interface that stores information that provides an indication of whether a particular reference should be translated or not. Examples of information that might be stored in data store are described below with reference to . In such an embodiment request translator does not simply translate each received request instead a request is translated only if it is determined that translation is warranted. Accordingly requests for which it is determined no translation is warranted are not altered.

Upon request translator determining that input resource request includes a reference that requires translation request translator translates alters the reference within request producing output resource request . Translation may include changing a file name and or a path name within request . Other forms of translation are also possible such as altering a particular system or library call being performed by program .

For example consider a reference that includes first file name and a first path name e.g. usr lib bin test.exe where usr lib bin is the first path name and test.exe is the first file name. One form of translation that can be performed by request translator is to alter both the first path name and the first file name e.g. usr bin test1.exe . Alternately only the first path name e.g. usr bin test.exe or the first file name usr lib bin test1.exe might be altered. Further examples of translation that may be performed by request translator are described further below with reference to .

After altering input resource request request translator causes the altered request to be serviced. As one example request translator may send output resource request to an API E of an operating system of computer system . As described in more detail below output resource request may be handled by an operating system or other appropriate entity. Upon request being serviced a result of request may be received and returned to program via translator .

In one embodiment an operating system may require that all files and services in order to be opened and accessed must go through the open system call. In this embodiment at the time of the of the open system call the path of a file or service to be opened is examined by the request translator. The path of the file or service to be opened may then be translated or path mangled by the request translator if it is determined that path mangling is necessary. If path mangling is necessary all subsequent file manipulation uses the file descriptor that is passed back from the open system call which corresponds to the location of an alternate file referenced in the translated request.

Turning now to a block diagram of a computer system is depicted. As shown computer system includes program which as in previous Figures makes a request . In this embodiment code implementing request translator is located at least partially within operating system of computer system .

Upon receiving request translator selectively translates request as described above and causes request to be serviced. For example translator may access an API E of operating system receive one or more results and provide the results to program . Alternately translator may selectively translate the request and access other resources of computer system or external resources and provide one or more results to program .

Turning now to a block diagram of a computer system is depicted. As shown computer system includes program control application which includes request translator and operating system . In one embodiment control application is executable on operating system to control the execution of program . For example control application may be invoked with program identified to application e.g. by a command line parameter or via a user interface . In such an embodiment program runs under control of application which is distinct from operating system . The code implementing translator receives resource requests and handles them via selective translation as described above. For example request translator shown in may pass system calls to an API not shown of operating system . In one embodiment request translator intercepts all system calls into the OS and determines whether to translate any references in a system call before transferring execution control into the operating system kernel. Alternatively in another embodiment request translator intercepts a system call returning from the OS to a calling program and at that point determines whether to translate any references in the results of the system call. The exec class of system calls is one type of system call in which the path to the executable can be translated mangled to redirect execution as desired. The implementations of request translator in thus differ in the location of request translator relative to operating system . and their accompanying descriptions make clear that translator may be located as part of operating system or not.

In one embodiment request translator may be implemented as part of a program for performing translation including the programs described in U.S. application Ser. No. 12 264 943 entitled Handling Signals and Exceptions in a Dynamic Translation Environment filed Nov. 5 2008 which is incorporated by reference herein in its entirety.

Turning now to a flowchart of one embodiment of a method performed by request translator is depicted.

In step a request e.g. request for a resource request is received. As has been described above the request may be for any resource of or accessible to a computer system such as system . The request may be made by any type of program including a compiled program a program being interpreted a program called from within another program etc. As has been described the request may in some embodiments be a system call or a library call.

In step a determination is made as to whether the request needs translation. This determination may be made by any suitable algorithm. In one embodiment step may include accessing a data store to determine whether the request includes a reference that requires translation. In one embodiment the data store may include a list of file and or path names that require translation. Step may thus entail searching interrogating or otherwise accessing a data store to determine whether a particular request requires translation. In some embodiments the data store may be updated dynamically. If step does determine that translation is warranted method proceeds to step otherwise method proceeds to step .

In step the one or more references identified in the request as requiring translation are translated. Step may be performed for example by various known string manipulation techniques. As has been described step may include translation of various types of data including but not limited to path names file names system call names and library call names. Steps and may be said to perform selective translation of a request received in step . Upon completion of step method proceeds to step .

In step method causes the request received in step to be serviced. For example the method may cause the request to be serviced by forwarding the request to an operating system although the method is not limited in this respect. If in step it is determined that request does not in fact need to be translated then step will cause an untranslated version of the request to be serviced. Otherwise step will cause a translated version of the request to be serviced.

Method may be used for example to permit a program that is not native to a particular computer system to execute on that computer system in a manner that reduces or eliminates compatibility errors e.g. by translating requests to system resources that would result in errors if left untranslated . Method may also be used to cause a program that is native to a particular computer system to execute in a different fashion on that system. For example certain resources of computer system may be associated with a first system configuration while other resources may be associated with a second system configuration. Executing a native program without translation of any resource requests may result in a certain program behavior corresponding with the first system configuration. By executing the same native program but selectively translating the resource requests that it makes the program behavior of native program may thus differ correspondingly with the second system configuration in which the program is executed.

Turning now to an illustration of a translation table and an example of a translation operation are depicted. Translation table is an exemplary data structure that may be present in data store to store information usable to determine whether translation of a particular reference included in a request is needed. Other types of data structures besides translation table will be apparent to persons of skill in the relevant art.

Translation table includes source locations e.g. usr include sys and corresponding target locations to which these source locations are to be translated e.g. x86 usr include sys . In this example usr include sys and x86 usr include sys are directories. In one embodiment upon a resource request e.g. being received request translator e.g. in implementing method step interrogates translation table to determine if any references found in the request are present in table indicating a need for translation in one embodiment . Thus in one embodiment utilizing translation table a reference in the request to usr include sys and files and subdirectories contained therein will be translated by request translator to contain a reference to x86 usr include sys . For example in such an embodiment a reference to usr include sys file1 would be translated to x86 usr include sys file1. Translation table also includes various other entries each indicating a condition signifying a need for translation these entries may be thought of conceptually as translation rules .

Turning now to an example of translation of a code fragment is depicted. In example code fragment is shown as open lib ld.so.1 O RDONLY but this is merely exemplary. In one embodiment code fragment corresponds to a system call made by a program e.g. program to access the file lib ld.so.1 in a read only mode. The code fragment represents a sample translation of code fragment . In this particular example the open system call takes as a parameter the path name of the file sought to be opened. The parameter path name to the open system call is altered such that the code fragment if passed to an operating system API will cause the file translate lib ld.so.l to be opened in a read only mode and return a file descriptor corresponding to the file translate lib ld.so.l .

Turning now to a block diagram of one embodiment of a computer system is depicted. Computer system is representative of any of the computer systems described herein e.g. computer system as well as any computer system or computing device that may employ the techniques described herein. Computer system may be any suitable type of device including but not limited to a personal computer system desktop computer laptop or notebook computer mainframe computer system handheld computer workstation network computer a consumer device such as a mobile phone pager or personal data assistant PDA . Computer system may also be any type of networked peripheral device such as a storage device switch modem router etc. Although a single computer system is shown in for convenience system may also be implemented as two or more computer systems operating together.

As shown computer system includes a processor unit memory input output I O interface coupled via an interconnect e.g. a system bus . I O interface is coupled to one or more I O devices .

As described above processor unit includes one or more processors. In some embodiments processor unit includes one or more coprocessor units. In some embodiments multiple instances of processor unit may be coupled to interconnect . Processor unit or each processor within may contain a cache or other form of on board memory. In general computer system is not limited to any particular type of processor unit or processor subsystem.

Memory is usable by processor unit e.g. to store instructions executable by and data used by unit . Memory may be implemented by any suitable type of physical memory media including hard disk storage floppy disk storage removable disk storage flash memory random access memory RAM SRAM EDO RAM SDRAM DDR SDRAM Rambus RAM etc. ROM PROM EEPROM etc. and so on. Memory may consist solely of volatile memory in one embodiment.

Memory in computer system is not necessarily limited to memory . Rather computer system may be said to have a memory subsystem that includes various types locations of memory. For example the memory subsystem of computer system may in one embodiment include memory cache memory in processor unit storage on I O devices e.g. a hard drive storage array etc. and so on. Accordingly the phrase memory subsystem is representative of various types of possible memory media within computer system . The memory subsystem of computer may stores program instructions executable by processor unit including program instructions executable to implement the various techniques disclosed herein.

I O interface may represent one or more interfaces and may be any of various types of interfaces configured to couple to and communicate with other devices according to various embodiments. In one embodiment I O interface is a bridge chip from a front side to one or more back side buses. I O interface may be coupled to one or more I O devices via one or more corresponding buses or other interfaces. Examples of I O devices include storage devices hard disk e.g. E optical drive removable flash drive storage array SAN or an associated controller network interface devices e.g. A which may couple to a local or wide area network user interface devices e.g. mouse B keyboard C display monitor D or other devices e.g. graphics sound etc. . In one embodiment computer system is coupled to a network via a network interface device A. I O devices are not limited to the examples listed above.

Computer system may be used to implement the various techniques described herein. In one embodiment one or programs may be stored within the memory subsystem of system e.g. on hard disk E . Upon being invoked portions of the one or more programs may be loaded into memory random access memory in one embodiment and executed on processor unit to implement for example embodiments of request translator described herein. In one embodiment computer system is a server storing one or more programs executable to implement request translator and configured to download the one or more programs to requesting client computer systems.

Articles of manufacture that store instructions and optionally data executable by a computer system to implement various techniques disclosed herein are also contemplated. These articles of manufacture include tangible computer readable memory media. The contemplated tangible computer readable memory media include portions of the memory subsystem of computer system without limitation SDRAM DDR SDRAM RDRAM SRAM flash memory and of various types of ROM etc. as well as storage media or memory media such as magnetic e.g. disk or optical media e.g. CD DVD and related technologies etc. . The tangible computer readable memory media may be either volatile or nonvolatile memory.

Although specific embodiments have been described above these embodiments are not intended to limit the scope of the present disclosure even where only a single embodiment is described with respect to a particular feature. Examples of features provided in the disclosure are intended to be illustrative rather than restrictive unless stated otherwise. The above description is intended to cover such alternatives modifications and equivalents as would be apparent to a person skilled in the art having the benefit of this disclosure.

The scope of the present disclosure includes any feature or combination of features disclosed herein either explicitly or implicitly or any generalization thereof whether or not it mitigates any or all of the problems addressed herein. Accordingly new claims may be formulated during prosecution of this application or an application claiming priority thereto to any such combination of features. In particular with reference to the appended claims features from dependent claims may be combined with those of the independent claims and features from respective independent claims may be combined in any appropriate manner and not merely in the specific combinations enumerated in the appended claims.

