---

title: Rendering source content for display
abstract: A method for rendering source content for display in a destination figure is provided. The method may include receiving the source content of the file, replicating the source content in a region surrounding the source content, such that replicated source content is aligned with the source content, extracting an axis-aligned rectangular tile containing the source content from the region, and rendering the axis-aligned rectangular tile onto the destination figure.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08587610&OS=08587610&RS=08587610
owner: Microsoft Corporation
number: 08587610
owner_city: Redmond
owner_country: US
publication_date: 20081212
---
A fixed document file preserves document fidelity and appearance regardless of the type of device on which the document is presented. In order to preserve the fidelity of a document a fixed document file includes markup language or objects that define the layout and visual appearance of each page of the document as well as rules that describe the processing rendering and printing intent of the document. The manner in which these rules are implemented may allow for great flexibility in the manner in which a document is rendered to accommodate differences in functionality of different rendering engines. However differences in rendering engines may cause some rendering engines to render a fixed document file with sub optimal rendering fidelity rendering time memory usage and or output file size. This may result in decreased quality of output resulting in decreased user satisfaction.

A method for rendering source content for display in a destination figure is provided. The method may include receiving the source content replicating the source content in a region surrounding the source content such that replicated source content is aligned with the source content extracting an axis aligned rectangular tile containing the source content from the region and rendering the axis aligned rectangular tile onto the destination figure.

This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter nor is it intended to be used to limit the scope of the claimed subject matter. Furthermore the claimed subject matter is not limited to implementations that solve any or all disadvantages noted in any part of this disclosure.

The print path to render the source content begins by XPS application and WPF application calling spooler filter pipeline to read XPS container to identify source content to be rendered. XPS application may call XPS print application programming interface API to request print services to render the source content. XPS print API may call Open Packaging Conventions OPC services which may generate an XPS OM object that may be used by an XPS to GDI Conversion XGC light module to convert the XPS formatted source content and corresponding print instructions into a Graphics Device Interface GDI format for rendering. XGC light module may be alternately referred to as a source content conversion module since the module may convert XPS formatted source content into a GDI compatible format for rendering. XGC light module may send the converted source content to DirectWrite rendering engine and DIRECT2D rendering engine to be rendered for display. Further XGC light module may send the converted source content to GDI exporter to package the source content for rendering by GDI rendering engine . XGC light module may also use Print Ticket Services PRNTVPT module and Windows Imaging Component WIC to render source content

Continuing with spooler filter pipeline may host rasterization filter module which may use XPS OM object and OPC services to filter or identify XPS source content to be converted into raster image instructions by XPS rasterizer module for rendering by a rendering engine such as DIRECT2D rendering engine or DirectWrite rendering engine . XPS rasterizer module may be called by XPS serialization module and may receive XPS formatted parts that may be utilized to rasterize the source content. Further XPS serialization module may send XPS formatted parts or instructions to WIC to facilitate rendering of the XPS source content. By converting various parts and print instructions to XPS format the format of source content of an XPS document may be unchanged throughout the printing process and thus may retain the original quality and fidelity of the document all the way through the end of the print path. Further the XPS print path supports a modular filter based architecture that allows for print rendering functions to be moved out of the application and into the print path. As such rendering of XPS source content may be more efficiently leveraged by other applications.

Within the context of the system described above several methods for rendering source content may be practiced as described below with reference to . As one example illustrates a method of rendering source content for display in a destination figure. In particular method prescribes a way of generating GDI compatible rectangular tiles that include the source content which may be applied to a bitmap created by the GDI rendering engine during the print process. Method may be particularly applicable to source content that is not axis aligned or otherwise easily rasterized. Method may include at receiving source content. As discussed above in one embodiment the source content may be contained in an XPS container that may be read by spooler filter pipeline as called by XPS application of system . In some cases source content may be received from across a network or more particularly from a stream.

At the method may include replicating the source content in a region surrounding the source content such that replicated source content is aligned with the source content. In particular the source content may be replicated such that the replicated source content is aligned on all sides of the source content to form a surrounding region. In some cases the surrounding region is defined by an outer perimeter of the replicated source content. In some cases replication of the source content may be achieved by performing flipping operations of the source content. Flipping operations may be performed based on a tile mode of a brush for printing the source content. For example the tile mode may be set to one or more of a variety of flipping operations that may be performed when replicating the source content such as flipping about the X axis flipping about the Y axis and flipping about both the X axis and the Y axis.

At the method may include extracting an axis aligned rectangular tile containing the source content from the region. Since the replicated source content is aligned with the original source content as a result of the flipping operation there is no distortion and the axis aligned rectangular tile is an accurate representation of the source content. The axis aligned tile is GDI compatible for printing of the source content on a destination figure. Specifically the rectangular tile may be easily rasterized since the dimensions of the tile are axis aligned. At the method may include rendering the axis aligned rectangular tile onto the destination figure.

By replicating the source content a region that fully includes the source content may be created from which an axis aligned rectangular tile may be extracted. Since the axis aligned rectangular tile is GDI compatible the source content may be rendered utilizing GDI while avoiding resource intensive clipping operations. Accordingly rendering of source content using GDI may be performed in quicker and more resource efficient manner.

It will be appreciated that method may be implemented using the hardware and software of system described above or via other suitable hardware and software to render source content of a fixed document file such as an XPS file or from another source for display. In one example receiving extracting and replicating are performed by XPS to GDI conversion module of XPS rendering system and rendering the source content is performed by GDI rendering engine of system . It will be appreciated that method may be utilized in the rendering of source content by rendering engines other than a GDI rendering engine.

In previous operations utilizing a GDI rendering engine source content that was not axis aligned would have to be replicated and clipped to create source content that is axis aligned for rasterization. The clipping operations can be resource expensive consuming valuable processor time and resulting in slower rendering. Method provides an alternative to performing clipping operations which can result in quicker rendering of source content while freeing up resources for other computing tasks.

At the method may include identifying multiple drawing operations to print the source content. The drawing operations may include associated rendering primitives. For example the drawing operations may include stroking filling line segments and cubic Bezier segments as well as other curve segments e.g. quadratic Bezier segments .

At the method may include determining if all drawing operations of the source content have been identified. By delaying drawing of the drawing operation until all drawing operations of the source content have been identified the type and number of geometry figures and other drawing operations for printing the source content may be tracked and considered for combination into a predefined rendering call when possible. If all drawing operations have been identified the method moves to . Otherwise all drawing operations have not been identified and the method returns to to continue identifying drawing operations for printing the source content. It will be appreciated in other embodiments instead of determining if all drawing operations have been identified the method may include at determining if a threshold subset of drawings operations have been identified sufficient to enable selection of predefined rendering calls at .

At the method may include upon identifying all or a threshold subset of the drawing operations selecting predefined rendering calls for a specified rendering engine. At least some of the predefined rendering calls for the specified rendering engine may be selected to include a plurality of the identified drawing operations.

In some embodiments the predefined rendering calls are selected to include a plurality of the multiple drawing operations whenever possible. Thus the predefined rendering calls may be selected in order to minimize the number and or size of the associated rendering primitives generated by the specified rendering engine. In some cases the predefined rendering calls may include geometric figures e.g. Polydraw . For example a plurality of line segment type drawing primitives may be identified as being positioned to form a square geometry. A predefined rendering call to print the square may be selected in place of each individual line segment type drawing primitive. By replacing the four line segment drawing primitives with a predefined square geometry rendering call the length of the rendering output file may be reduced. Further in some cases the predefined rendering calls may include collections of geometric figures e.g. PolyPolygon .

The predefined rendering calls that are selected may vary depending on the rendering engine that is specified since different rendering engines may be capable of executing different predefined rendering calls. For example a GDI rendering engine may support rendering calls for drawing geometries comprised of line segments and cubic Bezier segments. The GDI rendering engine in particular also provides optimized code paths for common cases like polygons collections of polygons with no Beziers stroking without filling filling without stroking etc.

At the method may include rendering the source content utilizing the selected predefined rendering calls via the specified rendering engine. By delaying drawing of each of the drawing operations to identify the entire geometry of the source content appropriate rendering calls may be selected in which drawing operations may be combined in predefined rendering calls that are optimized for the specified rendering engine. Accordingly the code path optimization can result in quicker rendering times and reduced output file size for the source content.

It will be appreciated that method may be implemented using the hardware and software described above or via other suitable hardware and software to render source content of a fixed document file such as an XPS file or from another source for display. In one example receiving identifying and selecting are performed by XPS to GDI conversion module of XPS rendering system and rendering the source content is performed by GDI rendering engine of system . It will be appreciated that method may be utilized in the rendering of source content by rendering engines other than a GDI rendering engine.

It will be appreciated that the modules of system which may perform at least some part of the above described methods may be executed by a computing device. is a schematic diagram of an embodiment of a computing device on which system may be implemented. Computing device may be virtually any suitable computing device including a mainframe computer personal computer laptop computer portable data assistant PDA computer enabled wireless telephone networked computing device printing device or other suitable computing device. Computing device may be optionally connected to other computing devices via computer networks such as the Internet. Computing device may include a processing subsystem volatile and non volatile memory represented as data storage which may communicate via communication subsystem e.g. computer bus . Computing device may be configured to execute programs stored in data storage or a different remote storage device using processing subsystem .

In some embodiments computing device may include a display subsystem . When included display subsystem may be used to present a visual representation of data held by data storage . In some embodiments a printer device may be in communication with computing device via communication subsystem or otherwise incorporated with computing device . When included printer device may print a visual representation of data held by data storage for display on a tangible medium such as paper. The herein described methods and processes change the data held by the data storage and thus transform the state of the data storage . The state of display subsystem may likewise be transformed to visually represent changes in the underlying data. Further printer device may print visual representations of the transformations of the underlying data to paper or other tangible medium.

As used herein the term program refers to software or firmware components that may be executed by or utilized by one or more computing devices described herein and is meant to encompass individual or groups of executable files data files libraries drivers scripts database records etc. It will be appreciated that computer readable media may be provided having program instructions stored thereon which upon execution by a computing device cause the computing device to execute the methods described above and cause operation of the systems described above.

It should be understood that the embodiments herein are illustrative and not restrictive since the scope of the invention is defined by the appended claims rather than by the description preceding them and all changes that fall within metes and bounds of the claims or equivalence of such metes and bounds thereof are therefore intended to be embraced by the claims.

