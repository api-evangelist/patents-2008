---

title: Accessing external functionality from within a test executive toolkit
abstract: A system and method encapsulates selected functionality of a programming environment, defines an interface to the encapsulated functionality, and utilizes the encapsulated functionality from within an add-on toolbox to the programming environment through the interface. Objects may be constructed from the selected functionality of the programming environment. The functionality may be built-in or custom designed functionality. The objects are registered with the add-on test toolbox, and made available to a user of the add-on toolbox. The user may enter information into a user interface specifying selected functionality and its properties. An object manipulation engine receives the to information entered into the user interface, and uses it to issue calls through the interface to construct the objects and invoke one or more of the methods.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08307328&OS=08307328&RS=08307328
owner: The MathWorks, Inc.
number: 08307328
owner_city: Natick
owner_country: US
publication_date: 20080402
---
To create a program a user may employ a programming environment. Typically the programming environment which may run on a computer system includes textual and or graphical interfaces for use in creating the program. The programming environment may also have a number of tools for performing desired tasks. Exemplary programming environments include the MATLAB and Simulink systems both from The MathWorks Inc. of Natick Mass. the LabVIEW application development system from National Instruments Corp. of Austin Tex. and the Agilent VEE application development system from Agilent Technologies Inc. of Santa Clara Calif. among others.

Add on tools or toolboxes may be combined with the programming environment to extend its functionality. For example a number of add on products and or toolboxes are available for the above mentioned systems. One such add on product is the SystemTest test executive also from The MathWorks Inc. which allows a user to specify a test sequence that includes commands and models among other things to test a device under is test DUT or a system under test.

In some cases however a toolbox only provides a limited set of certain functionality such as plotting routines from an otherwise larger set of functionality available in the underlying programming environment. Furthermore a user sometimes creates and saves custom functionality in the programming environment.

Briefly the invention relates to a system and method for encapsulating selected functionality of a programming environment defining an interface to the encapsulated functionality and utilizing the encapsulated functionality from within another tool or component such as a test executive add on toolbox through the interface. In an embodiment information regarding the selected functionality is registered with the test executive thereby making the selected functionality available to a user of the test executive. More specifically a user interface may display the registered functionality to a user of the test executive add on toolbox for incorporation within the test executive add on toolbox. In response to the user designating and incorporating various functions within the test executive add on toolbox calls are issued through the interface to an object constructor. The object constructor in response to these calls constructs objects encapsulating the designated functions of the programming environment.

The objects which are constructed from one or more base classes have methods and properties or parameters. As the user works with the functionality from within the test executive add on toolkit such as through a graphical user interface GUI calls are issued through the interface to the encapsulated functionality that in turn result in methods of the objects being invoked and properties or parameters of the objects being retrieved or set. One or more of the methods moreover may result in information being received by the test executive e.g. to present or update a display. The invention thus provides a technique whereby functionality of the programming environment is made available to the user of the toolbox without having to incorporate the functionality into the toolbox itself.

The functionality selected for registration with the test executive may include both pre existing built in functionality of the programming environment as well as custom defined functionality created by the user. Specifically an object registration method may be exposed to a user of the programming environment. The user can employ the registration method to have one or more functions that the user custom defined within the programming environment registered with the test executive. Once registered the custom defined functions can be accessed from within the test executive. Specifically in response to the user designating and incorporating the custom defined functionality within the test executive calls may be issued through the interface that result in an object that encapsulates the custom defined functionality being constructed. Thereafter as the user works with the custom defined functionality from within the test executive calls are issued through the interface that result in methods being invoked on the object and properties being retrieved and set.

The main memory stores a plurality of libraries or modules such as an operating system and one or more applications running on top of the operating system including a programming environment .

The removable medium drive is configured to accept and read a computer readable medium such as a CD DVD floppy disk solid state drive tape flash memory or other medium. The removable medium drive may further be configured to write to the computer readable medium .

Suitable computational devices include personal computers PCs workstations laptops palm computers and other portable computing devices etc. The computer system of is meant for illustrative purposes only and different embodiments may be used with other processing systems or computation devices such as for example digital cameras smart phones etc.

Suitable operating systems include the Windows series of operating systems from Microsoft Corp. of Redmond Wash. the Linux operating system the MAC OS series of operating systems from Apple Inc. of Cupertino Calif. and the UNIX operating system among others.

An engineer scientist programmer or other person utilizes the keyboard the mouse and the computer display of the user I O to operate the programming environment .

Suitable programming environments for use with the present invention include the MATLAB and SIMULINK systems from The MathWorks Inc. of Natick Mass. the LabVIEW application development system from National Instruments Corp. of Austin Tex. the Visual Engineering Environment VEE from Agilent Technologies Inc. of Santa Clara Calif. and the Khoros development system from AccuSoft Corp. of Northborough Mass. among others. The programming environment may be used to create applications programs or scripts and or to run programs or scripts such as during algorithm development or design exploration. As described herein the programming environment may include certain built in e.g. predefined functionality. It may also include tools for creating custom defined functionality that may be integrated into or with the programming environment .

As indicated above each of the plotting probability distribution and signal validation functionality and may include certain pre existing built in functions that are included as part of the programming environment . In addition the programming environment further includes one or more tools not shown that can be used to create one or more custom defined functions such as plotting probability distribution or signal validation functions that may be specific to the user s needs. For example the user may utilize these tools to create a custom defined plot tailored to his or her particular needs. The custom defined plot may be given a title or handle Custom Plot and may be stored in memory such as memory and or on disk as part of the user s operation of the programming environment .

The programming environment further includes at least one add on product or toolbox such as a test executive add on toolbox . The test executive add on toolbox allows a user to define a test sequence for testing a system under test or a device under test DUT . A test sequence is made up of a series of test elements in a particular order. One or more of the test elements may be repeated multiple times as part of the test sequence e.g. with different variables or settings during each iteration. In one embodiment the test executive toolbox communicates with each of the plotting probability distribution and signal validation functionality and of the programming environment through a corresponding interface and respectively. In an alternative embodiment the test executive toolbox need not be an add on toolbox and may be part of the built in programming environment functionality or may be implemented as a script or a program running within the programming environment or as a stand alone application interfacing with the programming environment as deemed appropriate by one of skill in the art.

Those skilled in the art will understand that each interface and may to be a specially designed object oriented Application Programming Interface API . Those skilled in the art will understand that other inter process communication mechanisms besides or in addition to APIs may be used.

In the illustrative embodiment each of the plotting probability distribution and signal validation functionality and includes an object constructor and an object registration engine . The test executive toolbox moreover is configured with an object manipulation engine . Those skilled in the art will understand that a single object constructor and or a single object registration engine which are accessible by each of the plotting probability distribution and signal validation functionality and may be alternatively utilized.

The programming environment also may include a preferences directory that contains a user preferences file . The user preferences file is loaded when the programming environment starts and is overwritten when changes are made or when it is closed based on changes made during the user s operation of the programming environment. The user preferences file stores information about the desktop environment keyboard etc. As described herein it may also contain information about functionality that was custom defined and registered by the user.

A suitable test executive add on toolbox includes the SystemTest test executive also from The MathWorks Inc.

The test executive may be entirely or partially separate from the programming environment rather than being part of it as illustrated in . Also the object constructors and or the object registration engines may be configured as part of the test executive or they as well as the object manipulation engine may be configured as separate entities within the programming environment . A single interface may be provided to all of the functionality and rather than a separate interface for each functionality type.

One or more packages not shown may be created within the programming environment as indicated at block . As used herein the term package refers to a namespace or library that organizes a set of related object classes and interfaces. In one embodiment a separate package is created for each functionality type e.g. plotting probability distribution and signal validation. For the plotting functionality the respective package may be called for example mplotlib . For the probability distribution functionality the respective package may be called for example mprobdistriblib . For the signal validation functionality the respective package may be called for example msigvallib . In alternative embodiments other names or designations may be used for the packages.

As described above one or more interfaces such as interfaces and is provided between the test executive add on toolkit and the functionality of the programming environment that is to be made accessible from within the test executive add on toolkit as indicated at block .

Information regarding selected plotting probability distribution and signal validation functions may be registered using the respective object registration engine as indicated at block . More specifically a determination is made regarding which particular plotting probability distribution and signal validation functions are most likely to be of use from within the test executive toolbox . This determination may be made by the developer of the test executive toolbox . These particular plotting probability distribution and signal validation functions are encapsulated by object classes stored in an appropriate package and then identified e.g. flagged. On initialization or start up of the test executive toolbox it may use the object registration engines for each of the functionality types to register information regarding these particular identified functions. For example a PLOT command of the programming environment such as the PLOT command of the MATLAB system or LabVIEW MathScript may be registered as a plotting function option. The registration of the identified functions may take place automatically e.g. without any action of the part of the user of the test executive toolbox .

In one embodiment the information registered for the selected functions is added to the preferences file within the preferences directory . The information registered may include the object constructor name and a descriptive name of the option. For example when registering a line plot option that is instantiated with the object constructor of MPLOTLIB.LINE a string mplotlib.line and a descriptive name of Line Plot may be registered.

Registration may be performed by inserting a hard coded list of functions that are to be registered into the initialization sequence of the test executive toolbox . A suitable hard coded list for insertion into the test executive toolbox s initialization sequence may include the following as an example 

Alternatively one or more registration commands may be added to the initialization sequence of the test executive toolbox . A suitable syntax for a registration command may be for example 

NAME indicates a user visible name describing the option being registered which may be used to present the option to the user of the test executive toolbox and

CONSTRUCTOR indicates the string that needs to be evaluated to instantiate a class instance of this registered option which when evaluated may provide an object of the correct type that can be used to perform the registered option.

It should be understood that in addition to register an unregister may be used to indicate that the following option is to be unregistered.

When the test executive add on toolbox is launched or started it may check the user preferences file of the programming environment as part of its initialization sequence to determine which particular functions have been registered. As described herein the test executive add on toolbox can then utilize this information to present the selected functions to a user of the test executive add on toolbox as indicated at block . The user can then designate and incorporate this functionality from within the test executive add on toolbox .

In response to the user designating and configuring certain functionality calls are issued through the interfaces and that result in one or more objects being instantiated methods of the objects being invoked and properties or parameters of the objects being retrieved and set to the extent they are public as indicated at blocks and . Specifically for an object that encapsulates a plotting function the object may support a first method that creates a plot of the corresponding type e.g. a scatter plot using input data designated by the user and displays the created plot on the computer display . A second method may create a sample of the plot and display the sample plot on the computer display . The sample plot provides the user with an indication of what the particular plot looks like. It does not plot any actual user identified input data. A suitable syntax for invoking the first method is 

where OBJ is the plot object that was created with the OBJ command described herein. For example for a plot object representing a line plot the necessary input arguments may be the values for X and Y which are provided by properties of OBJ and used to plot on the x and y axes respectively. For a plot object representing a surface plot the variable input arguments may be X Y and Z which are plotted on the x y and z axes respectively. For a plot object representing a histogram plot the variable input arguments may be Y and NBins. For a plot object representing an image plot the variable input arguments may be the image data or file such as a JPEG file. For a plot object representing a time series plot the variable input arguments may be a time series object.

The second method does not need variable input arguments because as indicated above it only creates a sample of the plot type.

As described further herein the properties of the created plot object may include a name property a description property a mode property and an argument names property among others. Exemplary names include Line Plot 3 D Colored Surface Plot Histogram Plot Image Plot and Time Series Plot . The description may be help information for the plot object. Exemplary modes may include a create new figure mode an add to axes mode and a replace current axes mode. The argument names depend on the particular type of plot object. For example for a Line Plot object the argument names may be X Y . For a Surface Plot object the argument names may be X Y Z . For a Histogram Plot object the argument names may be Y Number of Bins . For an Image Plot object the argument names may be Image . For a Time Series object the argument names may be Time Series Object .

The encapsulated functions from the programming environment can be accessed from within the add on test executive toolbox without having to add this functionality to the toolbox itself . In this way improved operation and execution of the test executive add on toolbox may be obtained.

Those skilled in the art will understand that registration may be accomplished in other ways. For example the test executive add on toolbox may be configured to check the user preferences file for information regarding selected functionality. If the information has been logged to the user preferences file e.g. as explained above then no further action is taken by the test executive . If the information that the test executive expects to find in the user preferences file is not there the test executive may be further configured to log the missing information to the user s preferences file itself. In yet another embodiment information regarding the selected functionality may be registered directly with the test executive .

In one embodiment a user causes objects to be constructed and interacts with those instantiated objects through one or more user interfaces of the test executive add on toolbox as displayed on the computer display .

Suppose the user first selects the Model test element type and designates a particular model such as a Simulink model for example as the unit under test and then selects the Program File test element type and provides it a name called Calculate Peak Height which identifies a MATLAB file for example. Suppose further that the user then selects the Plot Element test element type .

The Plot Element configuration window includes a plot element list box which shows the both type and the mode of one or more plot elements that have been added to the test structure at the point represented by the Plot element test element . The type of plot element refers to its style such as scatter line vector etc. The mode of plot element refers to the manner in which it is displayed relative to other plots. In the illustrative embodiment there are several different modes of display for second or subsequent plots relative to a first plot. First a second or subsequent plot can be added e.g. overlaid onto the axes of the first plot with both sets of plots being displayed on the same axes. Second a second or subsequent plot can be displayed as its own new figure that is separate from the first and any other figure. Third a second or subsequent plot can be added onto the first plot but the axes of the first plot can be replaced with those of the second or subsequent plot. Fourth multiple subplots may be created within one figure window. That is multiple sets of axes each with its own plot may exist in a single figure window.

The plot element list box may be organized into two columns and to show both the type and the mode respectively of the particular plot element s that have been added to the test structure . As shown the test sequence currently includes a time series plot type a line plot type a surface plot type and a User Custom plot type . Because the Time Series plot type is the first plot it does not have a mode. The Line plot type has been configured with the add to axes mode. The Surface plot and User Custom plot types have both been configured with the create new figure mode.

The Plot Element configuration window further includes a series of tabbed windows including a General window and a Preview window that may overlay each other. As shown in the General window has a plurality of user interface widgets for selecting and configuring a new plot element to be added to the test structure . Specifically the General window includes a plot type drop down box a mode drop down box and an input argument area . The user may select a drop down button of the plot type drop down box to list the available plot types for selection. As shown in window plot types available for selection by the user may include a time series plot type a line plot type a surface plot type and a User Custom plot type among others. Those skilled in the art will understand that window may appear below the plot type drop down box upon selecting its down button . After selecting the desired plot type e.g. Line the user may select a drop down button of the mode drop down box to select a desired mode. As shown in window available modes may include Create New Figure Fig. Add to Current Axes and Replace Axes among others. Again those skilled in the art will understand that window may appear below the mode drop down box upon selecting its drop down button

The list of available plot types that is displayed to the user in the plot type drop down box is obtained from the information registered in the user preferences file by the object registration engine of the plotting functionality . As described above a particular set of plot functions were identified as being of interest to a user of the test executive add on toolbox . Information regarding these particular plotting functions was registered by object registration engine by adding the information regarding these particular plotting functions to the user preferences file . The test executive add on toolbox examines the user preferences file upon start up and upon selection of the plot type drop down box the test executive add on toolbox presents the available plot functions to the user for selection.

In response to the user selecting a particular plot type e.g. the scatter plot type from the plot type drop down box for execution by the test structure being created the object manipulation engine of the test executive issues a call through interface to the object constructor of the plotting functionality . In response to this call the object constructor constructs e.g. instantiates an object that encapsulates the functionality for this plot type e.g. scatter as indicated at block . A suitable syntax for creating such an object is 

where name specifies the particular type of object being created and OBJ represents the name selected for the object being created.

For example to create an object encapsulating scatter plot functionality of the programming environment the following syntax may be used 

As shown the constructor may be called with just the name of the type of object being created and no input arguments. In response an object whose property values have yet to be set or whose properties are set to default values is constructed.

The particular user interface widgets displayed in input argument area may depend on the type of plot selected from drop down box . If a line plot type is selected as shown then the input argument area may display drop down boxes and for the x and y values respectively of the line plot type being performed by the test structure . By selecting a drop down button of the x input box the user can choose a variable defined in the test structure to be the x value of this line plot type. Similarly by selecting a drop down button of the y input box the user can choose a variable defined in the test structure to be the y value of this line plot. As indicated above test variables may be displayed in test variable window which is shown in front of the test vector window in .

After the user has designated and configured the plot type as desired e.g. by selecting the desired plot type in drop down box the desired mode in drop down box and the input arguments in area the user may select an add command button of the configuration window . This causes a plot type to be added to the plot element list box . The Plot Element configuration window further includes an up command button and a down command button which can be manipulated by the user to change the order in which the plot types of window appear and thus the order in which they are run during execution of the test structure .

In one embodiment each type of plot object has a set of properties that are specific to it. Each object moreover may support a property information method such as PROPINFO OBJ that returns information on each object property. In the case of the MATLAB programming environment this method may return a MATLAB structure which may be an array with named data containers called fields that may contain any kind of data such as strings integers etc. In the case of other programming environments other structures may be returned. Each property moreover may have a flag associated with it that indicates whether the associated property is plot type specific or not. Accordingly only plot type properties can be selected and displayed. For example the method PROPINFO OBJ X where OBJ is a line plot type object and X is the property name for which information is being requested may return a structure consisting of the following fields 

Information entered by the user in the Plot Element configuration window is passed to the object manipulation engine which uses the received information to issue one or more calls through the interface that invoke one or more methods on the corresponding plot objects. Furthermore in response to the user specifying the values to be plotted e.g. the variables for X and Y in the input argument area the object manipulation engine issues one or more calls through the interface to set the corresponding properties of the respective plot object that was instantiated.

For example upon specifying a line type object in the General window and then selecting the tab for the Preview window the object manipulation unit may formulate and issue a call to invoke the create sample plot method discussed above. That is the object manipulation engine may issue a call through the interface that invokes the following method 

In response the line plot object that was created in step would cause a sample plot to be displayed in the Preview window . is an illustration of the Preview window . As shown the Preview window provides the user with a sample plot indicating how the plot selected in the General window will appear when portion of the Plot Element test element of the test structure is run. The plot displayed in the Preview window not only provides feedback to the user but may also include a plurality of plot editing tools supported by the programming environment .

In a further aspect the user can modify properties of a selected plot element such as the line plot type from within the test executive toolkit . Specifically from the preview window the user can select for example a Tools Edit Figure command from a menu bar . A first property edit window may be displayed to facilitate setting the plot element s first set of properties. In a preferred embodiment the user may work with the first set of properties without having to select an Edit Figure command. That is these properties always may be available to the user for manipulation.

In one embodiment first property edit window is generated by the plotting functionality of the programming environment . Thus in setting line color marker type etc. window may utilize core technology of the programming environment .

The first property edit window also may include a More Properties . . . command button . In response to the user selecting the More Properties . . . command button the object manipulation unit issues one or more calls through the API invoking a method that permits the user to get and set a second set of properties of the line plot type . In the preferred embodiment a second property edit window is displayed to facilitate setting the plot type s second set of properties.

The window may not include a More Properties . . . command button thereby simplifying the interface. In alternative embodiments the window may be represented using any number of graphical and or textual elements.

Returning to when the test structure is run the Run Model test element is executed. Then the calculate peak height test element is executed. Next the plot element test element is executed. In this case based on the user s configuration of the four different plots that make up the plot element four plots are created and displayed on display in response to the execution of the one plot element . Specifically a time series plot is generated. Next a line plot is created and it is added to the axes of the time series plot. Next a surface plot is created as its own figure separate from the combined time series line plot. Finally the user custom plot is created as its own separate figure.

To create each of these plots the object manipulation engine issues calls through the interface to invoke methods of the time series plot object the line plot object the surface plot object and the user custom plot object. Specifically for the time series plot object the object manipulation unit issues a call invoking the following method 

As the user already set the properties of this object when he or she configured the time series plot during the creation of the test structure this method need not include time series as an argument.

For the surface plot object the object manipulation engine issues a call invoking the following method 

The objects constructed during the creation of the test structure may be persistent. Accordingly when the user executes the test structure the objects already exist. Nonetheless in an alternative embodiment the objects may be destroyed and then re constructed based on the configuration chosen during the development of the test structure when the test sequence is run.

As shown the programming environment includes certain often extensive pre defined or pre established functionality upon installation on the user s computer workstation etc. In accordance with the invention the test executive add on toolkit may take selected ones of this functionality and wrap it in object classes and make it accessible to the user of the test executive add on toolkit. For example as described a line plot functionality such as the MATLAB line plot is accessible via the MPLOTLIB.LINE class.

In addition to registering selected ones of the pre defined functionality a generic functionality type such as a generic plot type may be registered by the test executive add on toolkit. A suitable command may be 

This plot type when selected by a user may take a single argument which may be called Data and make a choice as to which particular plot type to use depending on the form or type of value s for Data . For example if the Data specified by the user is a vector it may select a line plot type. If the Data specified by the user is an M N 3 matrix it may select an image plot type as this is a typical format for Red Blue Green RBG image data. If the Data is a time series object it may select a time series plot object and so on. In this way a user may specify the variable in the test executive add on toolkit and not have to change plot types even though the data the variable contains changes e.g. from a vector to a M N 3 matrix.

As indicated above in addition to making available to the test executive add on toolkit selected functionality that is built in e.g. predefined in the programming environment a user may also create custom defined functionality within the programming environment and make this custom defined functionality available to the test executive . Specifically the programming environment may include tools with which the user can create a custom defined plot or other custom defined functionality. These tools may include a workspace for receiving commands entered by the user and an execution engine for executing e.g. interpreting those commands and displaying the results. The tools may further include one or more memories for storing the custom defined functionality. The custom defined functionality thus may become integrated in the programming environment .

 My Plot Type describes the name of the plot type option that may be show in the list of available plot types within the test executive toolbox and

 myplotpackage.myspecialplot describes the constructor for instantiating a myspecialplot object that is managed in a class package called myplotpackage that the user created using the programming environment .

In response to the registration command the object registration engine may register or log information regarding the custom defined plot in the user preferences file . When the test executive is started it reads the user preferences file including the information regarding the custom defined plot as indicated at block . The test executive may also present the functionality of the custom defined plot to a user e.g. in the plot type drop down box as indicated at block . The test executive may utilize the same name assigned by the creator of the custom define plot functionality to facilitate the proper selection by the user.

In response to the user selecting the custom defined plot functionality from the plot type drop down box the object manipulation engine issues a call through interface to the object constructor of the plotting functionality . In response to this call the object constructor constructs e.g. instantiates an object that encapsulates the functionality of the custom defined plot type as indicated at block . As described above a suitable syntax for creating such an object is 

where name specifies the particular type of object being created and OBJ represents the name selected for the object being created.

The object that encapsulates the custom defined plot type may be constructed from the MySpecialPlotType class which is a child class of the AbsPlotType parent class . In this way the object inherits the methods and properties or parameters of the is parent class .

In response to the user configuring the custom defined plot functionality calls are issued through the interface that result in one or more methods of the object being invoked and one or more properties of the object being retrieved and set as indicated at blocks .

For example to cause a plot corresponding to the custom defined plot type to be displayed the object manipulation engine may issue a call invoking the following method 

As shown custom defined functionality created within the programming environment such as a custom defined plot type can be made accessible from the test executive without having to incorporate that functionality into the test executive itself.

In a similar manner the probability distribution functionality and the signal validation routines may be made accessible from within the add on test executive toolbox without having to add that functionality to the toolbox itself.

The foregoing description has been directed to specific embodiments of the present invention. It will be apparent however that other variations and modifications may be made to the described embodiments with the attainment of some or all of their advantages. For example the system and method of the present invention may be used with other add on products toolboxes or modules besides a test executive. Therefore it is the object of the appended claims to cover all such variations and modifications as come to within the true spirit and scope of the invention.

