---

title: Retrieving documents transitively linked to an initial document
abstract: A method for creating a distinguishing identifier of a collection of data including a primary document and one or more auxiliary documents digests each auxiliary document to create a respective auxiliary document digest, and creates a distinguishing identifier by digesting a concatenation of the primary document with all auxiliary document digests.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08005843&OS=08005843&RS=08005843
owner: Adobe Systems Incorporated
number: 08005843
owner_city: San Jose
owner_country: US
publication_date: 20080520
---
This application is a divisional of U.S. patent application Ser. No. 08 970 743 filed Nov. 14 1997 now U.S. Pat. No. 6 415 278 issued Jul. 2 2002 and is a continuation of and claims priority to U.S. patent application Ser. No. 10 933 902 filed Sep. 3 2004 which is a continuation of U.S. patent application Ser. No. 10 388 093 filed Mar. 13 2003 now U.S. Pat. No. 6 789 080 issued Sep. 7 2004 which is a continuation of U.S. patent application Ser. No. 10 071 762 filed Feb. 6 2002 now U.S. Pat. No. 6 567 799 issued May 20 2003 which is a divisional of U.S. patent application Ser. No. 08 970 743 filed Nov. 14 1997 now U.S. Pat. No. 6 415 278 issued Jul. 2 2002 the disclosures of which are incorporated herein by reference in their entirety.

The World Wide Web the web of the Internet has become in recent years a popular means of publishing documentary information. In particular it is now common for users with access to the web to browse through collections of linked documents through the use of hypertext browsers such as Netscape Navigator or Microsoft Internet Explorer whereby selection by the user of certain screen objects in a displayed document causes the contents of another document to be retrieved and displayed to the user.

Many of the documents on the web are encoded using a markup language known as the Hypertext Markup Language HTML . HTML Version 3.2 with Frame Extensions is described in Graham Third Edition published by Wiley Computer Publishing 1997. A markup language is a set of codes or tags that can be embedded within a document to describe how it should be displayed on a display device such as a video screen or a printer. HTML is what is known as a semantic markup language. This means that while it is possible to use HTML to dictate certain physical characteristics of a document such as line spacing or font size many HTML tags merely identify the logical features of the document such as titles paragraphs lists tables and the like. The precise manner in which these logical features are displayed is then left to the browser software to determine at the time the document is displayed.

Because HTML tags often do not specify a fixed physical size of a document or its components the precise appearance of a particular document displayed by a browser will often depend on the size of the browser window in which it is displayed. For example show two views of the home web page of the US Patent and Trademark Office specified by Uniform Resource Locator URL http www.uspto.gov in September of 1997 . In the web browser window is significantly smaller than that in and as can be seen the web page as seen through the two windows differs in its overall appearance for example with respect to the width of the title and list element .

One important feature of HTML is the ability within an HTML document to refer to external data resources. One way that such references are used within HTML is to identify auxiliary documents that are sources of content to be displayed as part of the display of the HTML document. For example the HTML tag IMG specifies that the contents of a specified image document should be displayed within a portion of the display of the HTML document in which the IMG tag is found. Similarly the tag FRAME within an HTML document specifies that the content of a specified document should be displayed within a particular frame of a frame set defined by the HTML document. The use of frames and frame sets within HTML is explained in more detail below.

HTML also features the ability to have a hypertext link within an HTML document. A hypertext link within an HTML document creates an association between a screen object e.g. a word or an image and an external resource. When the HTML document is displayed by a browser a user may select the screen object and the browser will respond by retrieving and displaying content from the external resource. A hypertext link may be specified within an HTML document with for example the HTML anchor tag with an HREF attribute.

The use of such external references within HTML facilitates distributed document storage on a wide area network WAN . A large document may be broken up and stored as a set of smaller documents logically associated by external references. For example it is common for the graphical images in an HTML document to be stored as separate documents e.g. in the GIF or JPEG format . It is also common to store sections of a large text as separate documents and to facilitate easy movement from one section to another through the use of hypertext links.

In addition a set of pre existing documents may be linked together with HTML tags to form a coherent whole. For example an HTML document may be created containing hypertext links to a set of pre existing documents relating to a common subject thus facilitating the systematic review of such documents by a user.

A characteristic of HTML documents is that they are not paginated. That is the displayed height of an HTML document is determined solely by the amount and arrangement of the screen objects defined within it as displayed by the browser used to view it and not by any fixed page size associated with the document. Here page size does not necessarily refer to physical pages printed on paper for example but is simply a characteristic of an electronic document in which the content of the document is divided into a sequence of regions with fixed dimensions. If the displayed document does not fit within the height of the browser window the browser permits scrolling of the web page to permit additional content to be viewed. shows the home web page of the US Patent and Trademark Office displayed within the same browser window as in except that the page has been scrolled somewhat to reveal additional material.

A recent extension to HTML permits multiple scrollable and resizable frames to be displayed within a single browser window. A frame is defined by a special type of HTML document known as a frame set . A frame set provides information giving the size and orientation of frames in a window and specifies the contents of each frame. The contents of a frame may be either the contents of an HTML document or a subsidiary frame set i.e. a frame set the entire contents of which appear within a single frame of the larger frame set . As with other HTML screen objects the height or width of a frame may be specified in absolute or relative terms.

In the above example frame is defined to have a fixed width of 115 pixels whereas the width of frame is defined relative to the width of frame its width is set equal to the browser window s width less the 115 pixels used by frame . As can be seen in when the browser window is made smaller frame shrinks accordingly while frame remains at a fixed width.

As explained above the ultimate appearance of an HTML document being displayed by a browser will usually depend on the size of the browser window or frame in which it is to be displayed. In general a web browser will extract from an HTML document a series of screen objects e.g. words images lists frames or tables and place them sequentially in rows on the screen. When a row has been filled the next object is placed in a successive row. This process continues until all screen objects within the HTML document have been placed.

This general principle however is limited by the constraint that the width of the displayed HTML document cannot be narrower than the minimum width of the widest screen object contained within it. Under this constraint if the minimum width of a screen object is wider than the width of the browser window parts of the document will remain off screen to the left or right when viewed through the browser window and a horizontal scroll bar will typically be displayed to permit the user to shift views of the document to the left or right.

HTML screen objects may have either a fixed or a variable width. For example the width of a single word of text in an HTML document is fixed given the font chosen by the browser in which to display it . Its width is determined by the characters in the word and the size font in which they will be displayed. Similarly the width of a cell in an HTML table may be made fixed by explicitly specifying its width as a certain number of pixels.

By contrast the width of a variable width screen object will vary depending on the width of the browser window in which it appears. However even a variable width screen object will have a minimum width. For example the width of a paragraph of text will generally vary according to the size of the browser window however it can be no narrower than the widest word contained within the paragraph. Similarly a table containing images may have cells whose widths are defined in relative terms but the table nonetheless cannot be narrower than the sum of the widths of the images within its widest row.

This constraint is illustrated in and . In each of and an identical HTML document is displayed in a browser window . An excerpt of the underlying HTML code is shown in . Referring to the document being displayed includes a table having two cells aligned to the top one cell containing a client side image map and the other cell containing the heading US Patent and Trademark Office a horizontal line and an unordered list with the heading New on the PTO site . In the window is narrower than in but wider than the minimum width of any object on the screen. Therefore each line of the document is adjusted to be as wide as the window and nothing is hidden from the user to the right of the browser window. By contrast in window is narrower than the minimum width of table since the fixed width of the image map in cell plus the width of the widest word in cell the word trademark is greater than the width of the browser window . Therefore the resulting display width of the document is wider than window resulting in the rightmost part of the document being hidden from view.

While collections of visual display data on the web are typically stored as sets of linked HTML documents it is also common and convenient for visual display data to be stored as a single document having a fixed page size using a physical markup language such as the portable document format PDF . PDF is described in the publication Adobe Systems Inc. Portable Document Format Reference Manual Addison Wesley Publishing Co. 1993.

In general in one aspect the invention features a method for converting a semantic markup representation of a document into a physical markup representation of the document. The method includes calculating a logical minimum width equal to the minimum width required to display all screen objects within the document at their normal size creating a physical markup representation of the document the physical markup representation having a width at least as wide as the logical minimum width and conforming the physical markup representation to a target size including a target width such that conforming the physical markup representation includes scaling the width of the physical markup representation by a scaling factor derived from the ratio of an element of the target size to the logical minimum width. Preferred embodiments of the invention include one or more of the following features. The physical markup representation is incorporated into a newly created document. The physical markup representation is incorporated into an existing document. The element of the target size is the target width. The physical markup representation is a paginated representation including pages each having a respective physical width and a respective physical height. The target size includes a target height. The target size is a standard paper size. The standard paper size is one of 8.5 11 inches 8.5 14 inches A4 A5 and 11 17 inches. The pages of the physical markup representation have the same aspect ratio as the target size. The height of the physical markup representation is scaled by the scaling factor. The page height of the physical markup representation is scaled by the scaling factor. The element of the target size is the target height. The pages of the physical markup representation are rotated by plus or minus 90 degrees. The ratio of the target width to the logical minimum width is tested whether it is less than a specified threshold. The document is a frame set specifying a plurality of frames. The document contains at least one hypertext link the physical markup representation is displayed in a viewer and an external document is accessed when a hypertext link is selected by a user from the displayed markup. The hypertext link is a server side image map. The semantic markup representation is HTML.

The physical markup representation is PDF. After the physical markup representation is conformed to the target size the physical markup representation is scaled by the inverse of scaling factor and the result is displayed in a viewer.

In general in another aspect the invention features a method for displaying hypertext data. The method includes displaying in a viewer a first document represented in a physical markup representation and containing at least one hypertext link accessing an external document when a hypertext link is selected by a user from the displayed first document converting the semantic markup representation of the external document into a physical markup representation and incorporating the physical markup representation of the external document into the first document. Preferred embodiments of the invention include one or more of the following features. A hypertext link is modified to point to the physical markup representation of the external document. The original state of the hypertext link is saved. In response to an action deleting a portion of the first document a hypertext link that pointed to the deleted portion is restored to its original state. The external document is digested to create a digest of the external document and the digest of the external document is tested to determine whether the physical markup representation of the external document has already been incorporated into the first document. The external document comprises a primary document and one or more auxiliary documents. Each auxiliary document is digested to create a respective auxiliary document digest and the digital digest of each auxiliary document is tested to determine whether the physical markup representation of the external document has already been incorporated into the first document. The digital digest is a compound digest.

In general in another aspect the invention features a method for creating a distinguishing identifier of a collection of data comprising a primary document and one or more auxiliary documents. The method includes digesting each auxiliary document to create a respective auxiliary document digest and creating a distinguishing identifier by digesting a concatenation of the primary document with all auxiliary document digests. Preferred embodiments of the invention include one or more of the following features. A digital digest algorithm is applied. The digital digest algorithm is the MD5 Message Digest Algorithm.

In general in another aspect the invention features a method for retrieving documents transitively linked to an initial document on a hierarchical file system. The method includes retrieving the initial document and retrieving only those other documents for which there is a transitive link from the initial document to the other document and for which the transitive link includes documents which are all within the same directory path as the initial document. Preferred embodiments of the invention include one or more of the following features. The hierarchical file system is distributed on a network. The hierarchical file system is distributed on an internet.

In general in another aspect the invention features a computer program residing on a computer readable medium for converting a semantic markup representation of a document into a physical markup representation of the document having instructions for causing a computer to calculate a logical minimum width equal to the minimum width required to display all screen objects within the document at their normal size create a physical markup representation of the document the physical markup representation having a width at least as wide as the logical minimum width and conform the physical markup representation to a target size including a target width the instructions for causing a computer to conform the physical markup representation including instructions for causing a computer to scale the width of the physical markup representation by a scaling factor derived from the ratio of an element of the target size to the logical minimum width. Preferred embodiments of the invention include one or more of the following features. The program includes instructions for causing a computer to incorporate the physical markup representation into a newly created document. The program includes instructions for causing a computer to incorporate the physical markup representation into an existing document. The element of the target size is the target width. The physical markup representation is a paginated representation including pages each having a respective physical width and a respective physical height. The target size includes a target height. The target size is a standard paper size. The standard paper size is one of 8.5 11 inches 8.5 14 inches A4 A5 and 11 17 inches. The pages of the physical markup representation have the same aspect ratio as the target size. The program includes instructions for causing a computer to scale the height of the physical markup representation by the scaling factor. The program includes instructions for causing a computer to scale the page height of the physical markup representation by the scaling factor. The element of the target size is the target height. The program includes instructions for causing a computer to rotate the pages of the physical markup representation by plus or minus 90 degrees. The program includes instructions for causing a computer to test whether the ratio of the target width to the logical minimum width is less than a specified threshold. The document is a frame set specifying a plurality of frames. The document contains at least one hypertext link and the program includes instructions for causing a computer to display the physical markup representation in a viewer and access an external document when a hypertext link is selected by a user from the displayed markup. The hypertext link is a server side image map. The semantic markup representation is HTML. The physical markup representation is PDF. The program includes instructions for causing a computer to after conforming the physical markup representation to the target size scale the physical markup representation by the inverse of scaling factor and display the result in a viewer. The program includes instructions for causing a computer to display in a viewer a first document represented in a physical markup representation and containing at least one hypertext link access an external document when a hypertext link is selected by a user from the displayed first document convert the semantic markup representation of the external document into a physical markup representation and incorporate the physical markup representation of the external document into the first document. The program includes instructions for causing a computer to modify a hypertext link to point to the physical markup representation of the external document. The program includes instructions for causing a computer to save the original state of the hypertext link. The program includes instructions for causing a computer to in response to an action deleting a portion of the first document restore a hypertext link that pointed to the deleted portion to its original state. The program includes instructions for causing a computer to digest the external document to create a digest of the external document and test the digest of the external document to determine whether the physical markup representation of the external document has already been incorporated into the first document. The external document comprises a primary document and one or more auxiliary documents. The program includes instructions for causing a computer to digest each auxiliary document to create a respective auxiliary document digest and test the digital digest of each auxiliary document to determine whether the physical markup representation of the external document has already been incorporated into the first document. The digital digest is a compound digest.

In general in another aspect the invention features a computer program residing on a computer readable medium for creating a distinguishing identifier of a collection of data comprising a primary document and one or more auxiliary documents having instructions for causing a computer to digest each auxiliary document to create a respective auxiliary document digest and create a distinguishing identifier by digesting a concatenation of the primary document with all auxiliary document digests. Preferred embodiments of the invention include one or more of the following features. The program includes instructions for causing a computer to apply a digital digest algorithm. The digital digest algorithm is the MD5 Message Digest Algorithm.

In general in another aspect the invention features a computer program residing on a computer readable medium for retrieving documents transitively linked to an initial document on a hierarchical file system having instructions for causing a computer to retrieve the initial document and retrieve only those other documents for which there is a transitive link from the initial document to the other document and for which the transitive link includes documents which are all within the same directory path as the initial document. Preferred embodiments of the invention include one or more of the following features. The hierarchical file system is distributed on a network. The hierarchical file system is distributed on an internet.

Among the advantages of the invention are one or more of the following. Web pages written in a semantic markup language such as HTML can be integrated into a single paginated document described in a physical markup language such as PDF. Web pages can be converted to a format having fixed page dimensions without losing information because of space constraints. A virtually unique single identifier can be created for a primary document and associated auxiliary documents. All of the documents that are linked to a document and also in the same directory path can be retrieved from a file system.

Other features and advantages of the invention will become apparent from the following description and from the claims.

Referring to a user computer running client software is connected over a communications link to web servers such as web server . Web servers are linked statically or dynamically to data stores such as data store containing web pages such as page . The client software which may include one or more separate programs as well as plug in modules and operating system extensions typically displays information on a display device such as a monitor and receives user input from a keyboard not shown and a cursor positioning device such as a mouse . The computer is generally programmed so that movement by a user of the mouse results in corresponding movement of a displayed cursor graphic on the display .

The programming of computer includes an interface that receives position information from the mouse and provides it to applications programs running on computer . Among such applications programs are a web browser and a PDF viewer . Also running on computer is a web page integrator which may be part of the PDF viewer . In response to a request from the user the PDF viewer may request the web page integrator to retrieve from one or more web servers such as web server an initial document specified by a URL supplied by the user and other documents which are linked directly or indirectly to the initial document. When the requested documents are retrieved the web page integrator integrates them into a single PDF document which is then displayed by the PDF viewer .

The PDF document which is displayed by the PDF viewer may have hypertext links to web pages as well as to internal pages within the PDF document. When the user selects a hypertext link in the PDF document e.g. with the mouse if the link is to a page within the PDF document that page is displayed by the PDF viewer. However if the hypertext link is to a web page that page is either displayed by the browser or integrated into the PDF document and displayed by the PDF viewer depending on a mode set by the user.

The pages of the target document are normally displayed in their target size i.e. the size of the pages as specified in their PDF encoding. Upon request of the user however the pages may be displayed in their natural size. By the natural size of a page we mean a size having the same aspect ratio as the target size but having a width equal to the greater of the target width and the minimum width required to display in a browser the web page from which the page was incorporated.

If the user selects a hypertext link step then and referring now to the link is examined to determine whether it points to a document which has already been incorporated into the target document step and if so the page of the target document corresponding to the previously incorporated document is displayed by the PDF viewer step . Otherwise the value of a user settable flag Incorporate is checked step and one of the following steps is taken.

If the Incorporate flag is FALSE the URL specified by the hypertext link is provided to a standard web browser program with instructions to display the document corresponding to the URL step .

If the Incorporate flag is TRUE FetchAndIncorporate is called with the URL and with web traversal criteria specifying that only the document associated with the URL be retrieved step . This results in the creation of one or more pages in the target document corresponding to the document specified by the URL. The first of these pages is then displayed by the PDF viewer step .

Referring again to if the user requests submission of a form contained within the target document step then and referring to the contents of the form are submitted to the appropriate server step . Any web document received from the server in response to the form submission is either displayed in the web browser step or incorporated into the target document by the procedure ConvertToPDF described in more detail below and displayed by the PDF viewer step according to the value of the Integrate flag step .

Referring again to the following steps are taken if the user selects a point on a server side image map within the target document step . It should be noted that a server side image map is an image displayed in a browser such that if the user selects any point within the image using a pointing device such as a mouse the coordinates of that point within the image are submitted to a specified server which responds by transmitting a document back to the browser. First and referring now to the coordinates selected by the user are divided by the value of a variable ScalingFactor associated with the currently displayed page step . ScalingFactor indicates the amount if any by which the dimensions of the original server side image map were reduced in order to fit it on a page within the target document. The resulting coordinate values are then transmitted to the server step and according to the value of the Incorporate flag step the document transmitted back by the server is either displayed by the web browser step or is incorporated into the target document and displayed by the PDF viewer step .

Referring again to if the user requests deletion of a page from the target document step then and referring now to the page is deleted step and all hypertext links within the document which had pointed to that page are reset to be external links step .

When the user request has been processed control returns to step where further requests from the user are awaited.

One web traversal criterion which may be specified by the user is a maximum depth criterion. This criterion limits the depth of recursive calls to FetchAndIncorporate and thus limits the link distance between the initially retrieved document and subsequently retrieved documents to be incorporated into the target document.

Another criterion that may be specified by the user is a stay on server criterion. When this criterion is set only documents with URLs indicating the same server as the initially retrieved document are retrieved.

Another criterion that may be set by the user is a same path criterion. When this criterion is set only documents with URLs indicating the same file system directory or subdirectories of that directory as the initially retrieved document are retrieved.

If there are valid URLs on the list the document identified by the first valid URL on this list is retrieved by calling the routine FetchDoc step . FetchDoc returns either a set of pages from the target document or a document retrieved from a web server with zero or more associated auxiliary documents. If FetchDoc returns pages from the target document step this indicates that the requested document has already been incorporated into the target document and the routine continues at step .

If FetchDoc returns a document containing PDF pages from a web server those pages are appended to the end of the target document step .

If FetchDoc returns a non PDF document possibly with associated auxiliary documents from a web server the routine ConvertToPDF is called step . ConvertToPDF takes as arguments a non PDF document and its auxiliary documents and creates corresponding PDF pages which are appended to the target document.

Next all of the URLs referenced by the hypertext links in the documents returned by FetchDoc are added to the list of pending URLs step and control returns to step .

In this manner all documents linked to the target documents and all documents linked to those documents and so forth are retrieved subject to the web traversal criteria specified by the user. We use the term transitively linked to describe two documents for which there is a series of one or more links connecting them.

If at any time the list of pending URLs contains no valid URLs hypertext links within the target document are modified so those hypertext links linking to documents which have been incorporated into the target document referred to here as internal links now point to the corresponding page in the target document rather than to the corresponding HTML document from the web step . The original link information i.e. the URL pointing to a web based data resource is however retained. In the event that the internal link becomes invalid e.g. if the page to which it points is deleted from the target document the original link information can be used to access data from the Web.

If not the requested document referred to here as the primary document is retrieved from the web server step . The primary document is scanned and the URLs of all auxiliary documents if any to be included in the display of the primary document are noted step . In the case of an HTML document that is not a frame set the auxiliary documents may include image documents. In the case of a frame set these auxiliary documents include documents that provide the content of frames.

For each URL referring to an auxiliary document if the auxiliary document is an image document it is determined whether the URL refers to a document that has already been retrieved into pages of the target document. This is done by comparing the URL to a list of URLs referencing image documents previously incorporated into the target document. A URL may appear on this list because it refers to an image document that was previously incorporated into the target document or because it was previously discovered to be equivalent as explained in more detail below to a URL which refers to an image document that was previously incorporated into the target document. If so indirect object references to the corresponding images are retrieved from the target document step . Otherwise the auxiliary document identified by the URL is retrieved from the web step . For each auxiliary document retrieved from the web a numerical digest is created using a non linear digesting algorithm such as the MD5 digest algorithm described in the document 1321 5 published by the Internet Engineering Task Force step . The digest created by applying MD5 to the document is a numerical value that is exceedingly unlikely to be produced by applying MD5 to a different document. It thus serves as a virtually unique identifying signature for the document.

For each auxiliary document which is an image document the digest value is compared to digest values for documents which have been previously incorporated into pages of the target document. If a match is found the retrieved image document is discarded an indirect object reference to the image is retrieved from the target document instead and the URL for the auxiliary document is placed in an equivalence class with the URL associated with the matched image step . Optionally the URLs in an equivalence class may be marked with expiration dates indicating that they are to be removed from the equivalence class after that date. This may be done so that URLs that refer to resources likely to change over time do not become stale .

It should be noted that it is common on the web for lexicographically distinct URLs to point to the same or identical content. By using numerical digests space is saved by avoiding the incorporation of duplicate pages and images into the target document.

Once all of the auxiliary documents have been retrieved either from the web or as indirect references to previously incorporated content in the target document a new digest is created by applying the digest algorithm to the concatenation of the digests of all of the auxiliary documents with the contents of the primary document step . The resulting composite digest is the digest of the primary document.

The use of a composite digest of the primary document rather than a simple digest i.e. a digest of the contents of the primary document only provides the advantage of distinguishing between primary documents which are textually identical but nonetheless result in the display of different content. For example an auxiliary document in an HTML document may be specified as a relative reference. That is the URL may specify a document name without specifying for instance a server name or a directory name. Such a relative reference is interpreted as a reference to a document in the same directory and on the same server as the document from which the reference is made. Thus two primary documents having identical relative references to auxiliary documents may actually reference different auxiliary documents if they are found on different hosts.

Primary documents that are textually identical may also appear differently to the viewer if they are retrieved at different times. This is because the contents of any auxiliary documents referenced by the document may have changed over time.

Use of a composite digest allows the content of both the primary document and its auxiliary documents to be efficiently compared with existing target document pages before the decision is made whether to treat the primary document as duplicative of those pages.

The compound digest of the primary document is then checked to see if it corresponds to the digest of any web document previously incorporated as a page or pages of the target document step . If so the primary document is discarded the pages of the target document corresponding to the previously incorporated web document are returned and the URL for the primary document is placed in an equivalence class with the URL associated with the matched previously incorporated document step . Otherwise the primary document is returned along with its associated auxiliary documents step .

If the primary document is an HTML document the primary document and auxiliary documents are parsed into a parse tree of screen objects e.g. document bodies tables lists images and paragraphs using standard parsing techniques step . Such techniques are described for example in Aho Ullman Addison Wesley 1977.

Next a LayoutRegion data structure is created. The LayoutRegion data structure represents a fixed width stripe through a specific PDF document. The LayoutRegion also includes a pointer curY which specifies the current vertical position within the document at which layout is to take place. The LayoutRegion also contains page size information indicating the width and height of PDF pages to which it refers. The LayoutRegion also contains a list of so called floating images that are defined to occupy a fixed vertical location at either the left or the right edge of the LayoutRegion and around which other screen objects flow. shows schematically a layout region that has been used to lay out several lines of text and to place four images in two successive PDF pages .

Referring again to the LayoutRegion is created so that curY points to the bottommost edge of the last existing page of the target document. By convention any PDF screen object placed at this location will appear at the very top of the following page. The left and right extents of the LayoutRegion are set equal to the desired width of pages within the target document. The page height and width information is set equal to the page dimensions of the target document step .

Next the routine LayoutElement is called. The routine LayoutElement takes as arguments an HTML screen object e.g. a frame set a table a document a paragraph or an image a LayoutRegion and a flag RenderPDF . LayoutElement returns the dimensions i.e. width and height actually required to layout the screen object. When RenderPDF is TRUE LayoutElement also attempts to create content within the target document corresponding to the HTML object. This process is explained in more detail below.

LayoutElement is initially called with the newly created parse tree of the primary HTML document and its auxiliary documents the newly created LayoutRegion and a RenderPDF value of FALSE as arguments step . When RenderPDF is FALSE LayoutElement calculates the minimum width and height required to completely display all of the screen objects specified within the parse tree at their normal size. We refer to the width as the logical minimum width of the HTML object represented by the parse tree.

The width value returned by LayoutElement is then compared to the target width of the target document step . If the returned width value is less than or equal to the width of the target PDF pages then the variable ScalingFactor is set equal to one step and the value of curY in the LayoutRegion is reset to equal the bottom edge of the last page of the target document step .

If the width value returned by LayoutElement is greater than the width of the target PDF pages the following steps are taken. ScalingFactor is computed by dividing the target width of the target document by the returned width value step . If ScalingFactor is greater than about 0.7 step a new LayoutRegion is created in which page height and width are defined to equal the page dimensions of the target PDF pages divided by ScalingFactor curY is set to point to the bottom edge of the last page of the target document and the width of the LayoutRegion is set equal to the newly defined page width step .

If ScalingFactor is less than about 0.7 a flag LandscapeView is set to TRUE. A new ScalingFactor is recomputed by dividing the target height of target document by the returned width value. If the resulting value is greater than one it is set equal to one. A new LayoutRegion is then created in which page height and width are defined equal to the complementary page dimension i.e. height for width and vice versa divided by ScalingFactor curY is set to point to the bottom edge of the last page of the target document and the width of the LayoutRegion is set to the newly defined page width step .

In another embodiment the user may specify the value of the threshold at which the LandscapeView flag is set to TRUE and may also specify that the LandscapeView flag is never set to TRUE.

Next LayoutElement is called again this time with the parse tree the newly created LayoutRegion and a RenderPDF value of TRUE. The PDF pages produced by the call to LayoutElement are then all scaled by the ScalingFactor to convert them to the size of pages in the target document. The ScalingFactor is stored with each page for future reference. For example if the user requests that the PDF page be displayed at its natural size the dimensions of the PDF page are divided by ScalingFactor to restore the page to its natural size. If LandscapeView is TRUE then each of the PDF pages produced by the call to LayoutElement is also rotated by 90 degrees step . ConvertToPDF then exits step .

If RenderPDF is TRUE then the object is placed into the target document at the position pointed to by curY. It should be noted that the object as displayed may take up multiple lines on the page. For example if the object is a paragraph of text the text will be placed so as to fill the current line and continue onto additional lines placing as many words as possible onto each line. If placing the object at the position pointed to by curY would place part of the object past the end of the current page then it is determined whether an additional PDF page exists in the target document below the position indicated by curY. If no such page exists it is created. If the object is small enough to be placed in its entirety on the additional page this is done. Otherwise the object is placed across the page boundary making sure not to place characters or images across the page boundary if possible. The pointer curY is then incremented to point to the location immediately below the placed object step .

Notwithstanding the value of RenderPDF the value of curY is then incremented by the height of the object step .

The value of MinWidth and the difference between curY and startY are then returned representing the actual dimensions of the screen object step .

If the object is a list or list like object e.g. a menu an ordered list or a directory list or the body of a simple document i.e. not a frame set step then the following steps are taken. For each element of the list or screen object within the body of the document the routine LayoutElement is called with the list element or document screen object the current LayoutRegion and the value of RenderPDF as arguments. For each such call if the returned width value is greater than MinWidth MinWidth is set to that value step . After all such elements or screen objects have been processed in this way the value of MinWidth and the difference between curY and startY are returned step .

If the object is a table step the following steps are taken. Referring now to the widths of the table columns are set so as to equal in total MinWidth step . The relative width of each column is determined according to HTML table configuration information provided with the HTML table markup. Then for each row in the table starting with the first row step each of the cells that start within the row are processed sequentially left to right as follows. A new LayoutRegion is created with the current value of curY and the current page size but with left and right borders determined by the leftmost and rightmost extents of the columns to be occupied by the cell. LayoutElement is then called with the contents of the cell the new LayoutRegion and the value of RenderPDF as arguments step .

After all of the cells in a row have been so processed the following steps are taken curY is set to the point below the tallest of the cells in the row including any cells with a rowspan greater than one which terminate in the current row . Then the width of the row defined as the sum of the width values returned by LayoutElement for all cells occupying the row is computed step and processing of the next row begins at step . After all rows have been processed in this way step the value of MinWidth is compared to the width of each row and if the width of the widest row is greater than MinWidth then MinWidth is set equal to the width of that row step . The value of MinWidth and the difference between curY and startY are returned step .

Referring again to if the object is a frame set the following steps are taken. Referring now to for each frame in the top level frameset a tentative width and position is determined based on the value of MinWidth and the frame width information specified in the frameset. For example if the top level frame set defines horizontal frames the tentative width of each frame would be MinWidth. If the top level frame set defines vertical frames then the tentative widths of each frame would be determined by dividing up the width specified by MinWidth according to the relative widths of the frames as specified in the frame set. Then for each frame in the top level frame set a new LayoutRegion is created having the existing page size and the tentative width and position of the frame with curY set to point to the top edge of the frame step .

Then if the top level frame set contains horizontal frames step the following steps are taken. For each top level frame in the frame set starting with the first such frame step LayoutElement is called with the contents of the frame the newly created LayoutRegion and RenderPDF as arguments step . After each such call the value of curY is incremented by the height value returned by LayoutElement step . If the width value returned by any call to LayoutElement is greater than MinWidth step then MinWidth is set to that value curY is reset to equal startY step and the process begins anew at step . After all frames in the top level frame set have been so processed step the value of MinWidth and the difference between curY and startY are returned step .

If the frames in the top level frame set are vertical frames step the following steps are taken. For each top level frame in the frame set LayoutElement is called with the contents of the frame the newly created LayoutRegion and the value of RenderPDF as arguments step . After each top level frame has been so processed the sum of the widths returned by each of these calls to LayoutElement is tested step . If this sum is greater than MinWidth then MinWidth is set equal to the sum of the widths step and the process begins anew at step . Otherwise curY is incremented by the greatest of the height values returned by the calls to LayoutElement step and the value of MinWidth and the difference between curY and startY are returned step .

Other embodiments are within the scope of the following claims. For example the order of steps of the invention may be changed. The user computer may be a single user or a multi user platform or it may be an embedded computer such as in a consumer television personal digital assistant Internet surfing or special purpose appliance product. The web pages may reside on a wide area network on a local area network or on a single file system. The target document may be an unpaginated document having a fixed width. The target document may be a paginated document with variable width pages. The web pages need not be coded in HTML but may be in any semantic markup language. The target document need not be coded in PDF but may be in any physical markup language.

While specific embodiments have been described herein for purposes of illustration various modifications may be made without departing from the spirit and scope of the invention. Accordingly the invention is not limited to the above described embodiments but instead is defined by the claims which follow along with their full scope of equivalents.

