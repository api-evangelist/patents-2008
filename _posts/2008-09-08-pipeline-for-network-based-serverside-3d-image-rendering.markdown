---

title: Pipeline for network based server-side 3D image rendering
abstract: The claimed subject matter provides a system and/or a method that facilitates rendering a portion of an image from a server on a client. A portion of an image can be hosted by a server. A client can utilize a device to interact with the portion of an image via a network. The client can established two or more TCP/IP connections with the server in order to interact with the portion of the image. A pipe component can enforce an isolated pipeline and a processing thread for each of a user manipulation of the portion of the image, a transmission of a user request to manipulate the portion of the image via the network, a rendering of the portion of the image on the server, a compression of the portion of the image on the server, a transmission of the compressed portion of the image via the network, a decompression of the portion of the image on the client, and a display of the portion of the image on the client.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08386560&OS=08386560&RS=08386560
owner: Microsoft Corporation
number: 08386560
owner_city: Redmond
owner_country: US
publication_date: 20080908
---
Advances in computer technologies e.g. microprocessor speed memory capacity data transfer bandwidth software functionality and the like have generally contributed to increased computer applications in various industries. Ever more powerful server systems which are often configured as a cluster of servers are commonly provided to service requests originating from external sources such as the World Wide Web for example.

In light of such advances the amount of available electronic data grows and it becomes more important to store such data in a manageable manner that facilitates user friendly and quick data searches and retrieval. Today a common approach is to store electronic data in one or more databases or data stores. In general a typical data store can be referred to as an organized collection of information with data structured such that a computer program can quickly search and select desired pieces of data for example. Commonly data within a data store is organized via one or more tables. Such tables are arranged as an array of data rows.

Such electronic data can be hosted by a server and accessed by a client. In particular there are techniques to render image data on the server side and transmit such data to the client for display. Yet the network bandwidth and latency can significantly reduce the rendering speed e.g. frames per second FPS etc. and increase the response time for data manipulation e.g. lag etc. . Such lag and latency in response time to data requests and or manipulations can deteriorate the experience of interacting with such data e.g. image data 3 dimensional image data etc. . In addition the network can become congested by requests in which the performance can be further hindered.

The following presents a simplified summary of the innovation in order to provide a basic understanding of some aspects described herein. This summary is not an extensive overview of the claimed subject matter. It is intended to neither identify the key or critical elements of the claimed subject matter nor delineate the scope of the subject innovation. Its sole purpose is to present some concepts of the claimed subject matter in a simplified form as a prelude to the more detailed description that is presented later.

The subject innovation relates to systems and or methods that facilitate pipelining stages associated with a client accessing a portion of an image hosted by a server. A pipe component can employ a pipelined system for image rendering transmission and display in order to hide network latency and improve overall rendering performance. The subject innovation can provide an adaptive mechanism for client request combination and or cancellation. Moreover the claimed subject matter can implement a pipelined architecture for image rendering between at least one client and the server wherein such architecture can hide latency for image rendering transmission and or display stages. The pipelined architecture can also reduce the intervals between sequential responses from the server. Furthermore the rendering pipe component can preprocess imagery and cache imagery on the server in order to accelerate the first time image rendering

Moreover the subject innovation can include a transmission component that can utilize a communication protocol which maintains the rendering state on client side and enhances the rendering process on the server to be stateless and scalable. In order to efficiently handle requests from at least one client the subject innovation can provide client side request queuing combination and or cancellation. Additionally the pipe component can provide dynamic adjustment of a combine interval based at least in part upon network status. In other aspects of the claimed subject matter methods are provided that facilitate utilizing multiple processing threads in order to render and compress imagery simultaneously.

The following description and the annexed drawings set forth in detail certain illustrative aspects of the claimed subject matter. These aspects are indicative however of but a few of the various ways in which the principles of the innovation may be employed and the claimed subject matter is intended to include all such aspects and their equivalents. Other advantages and novel features of the claimed subject matter will become apparent from the following detailed description of the innovation when considered in conjunction with the drawings.

The claimed subject matter is described with reference to the drawings wherein like reference numerals are used to refer to like elements throughout. In the following description for purposes of explanation numerous specific details are set forth in order to provide a thorough understanding of the subject innovation. It may be evident however that the claimed subject matter may be practiced without these specific details. In other instances well known structures and devices are shown in block diagram form in order to facilitate describing the subject innovation.

As utilized herein terms component system data store engine network thread processor generator server tuner proxy cache queue and the like are intended to refer to a computer related entity either hardware software e.g. in execution and or firmware. For example a component can be a process running on a processor a processor an object an executable a program a function a library a subroutine and or a computer or a combination of software and hardware. By way of illustration both an application running on a server and the server can be a component. One or more components can reside within a process and a component can be localized on one computer and or distributed between two or more computers.

Furthermore the claimed subject matter may be implemented as a method apparatus or article of manufacture using standard programming and or engineering techniques to produce software firmware hardware or any combination thereof to control a computer to implement the disclosed subject matter. The term article of manufacture as used herein is intended to encompass a computer program accessible from any computer readable device carrier or media. For example computer readable media can include but are not limited to magnetic storage devices e.g. hard disk floppy disk magnetic strips . . . optical disks e.g. compact disk CD digital versatile disk DVD . . . smart cards and flash memory devices e.g. card stick key drive . . . . Additionally it should be appreciated that a carrier wave can be employed to carry computer readable electronic data such as those used in transmitting and receiving electronic mail or in accessing a network such as the Internet or a local area network LAN . Of course those skilled in the art will recognize many modifications may be made to this configuration without departing from the scope or spirit of the claimed subject matter. Moreover the word exemplary is used herein to mean serving as an example instance or illustration. Any aspect or design described herein as exemplary is not necessarily to be construed as preferred or advantageous over other aspects or designs.

Now turning to the figures illustrates a system that facilitates pipelining stages associated with a client accessing a portion of an image hosted by a server. The system can include a client that can accept user manipulations in a pipe component and send requests for the manipulations in another pipe component. The system can include a server that can host a portion of imagery wherein a pipe component can enforce a pipelined process for efficient rendering performance of such imagery. In general the imagery on the server can include any suitable imagery of any suitable format. For instance the imagery can be 2 dimensional 2D imagery 3 dimensional 3D imagery medical imagery virtual reality system imagery video game imagery imagery having a large file or data size 3D medical image reconstruction 3D medical image reconstruction in Picture Archiving and Communication System PACS etc. In particular at least one client can manipulate a portion of an image hosted by the server via a network . For example a client can provide a user request to manipulate a particular portion of an image in which the communication of the user request and or the corresponding server response can be through the network . Moreover it is to be appreciated that the pipe component can reside on the server side the client side and or any suitable combination thereof.

The pipe component can employ a pipelined system for network transmission e.g. communications related to at least one of the server the pipe component server side pipe component client side etc. image rendering transmission and display in order to hide network latency and improve overall rendering performance. The system can provide an adaptive mechanism for client request combination and or cancellation. Moreover the system can implement a pipelined architecture for image rendering between at least one client and the server wherein such architecture can hide latency for image rendering transmission and or display stages. The pipe components on both server side and client side can further reduce intervals between sequential responses from the server . Furthermore the rendering pipe component can preprocess imagery and cache imagery on the server in order to accelerate the first time image rendering.

The system can utilize a communication protocol that can enhance rendering requests and or responses between at least one client and the server . In order to efficiently handle requests from at least one client the system can provide client side request queuing combination and or cancellation. Additionally the pipe component can provide dynamic adjustment of a combine interval based at least in part upon network status. It is to be appreciated that the pipe component can be a stand alone component incorporated into the server as depicted incorporated into the network incorporated into at least one client and or any suitable combination thereof. Moreover it is to be appreciated that there can be any suitable number of clients such as clientto client where N is a positive integer.

In addition the system can include any suitable and or necessary interface component which provides various adapters connectors channels communication paths etc. to integrate the pipe component into virtually any operating and or database system s and or with one another. In addition the interface component can provide various adapters connectors channels communication paths etc. that provide for interaction with the server the network at least one client and any other device and or component associated with the system .

The pipe component can isolate the rendering process between at least one client and the server e.g. client and server are pipelined etc. As discussed the pipeline stages can include network transmission user manipulation request transmitting rendering compression transmitting rendered image decompression and displaying the image. Based at least in part upon the separation of the stages within pipelines and processing threads the various stages can be processed simultaneously. For example a rendering request can be communicated in an asynchronous manner e.g. through multiple TCP IP connections in a different thread than the user interface UI thread etc. . Each pipeline stage can include a corresponding thread s to do processing and or respective work. This pipelined architecture can hide the latency of each stage and shorten the interval between responses. Thus manipulation speed can be increased and rendered images can be displayed more smoothly.

The pipelined process is designed for network based server side image rendering. On the client side clients and or users can manipulate a rendered object or image. For instance the manipulation can include rotation zoom pan window level edit and or any other suitable interaction with a portion of an image. For such manipulations a user and or client can send a user request. These user requests can be sent through a proxy. In the proxy requests can be queued sequentially and sent out periodically. In one example the sending interval can be adjusted by the response interval which can reflect a server s throughput. During this interval similar requests can be combined to alleviate the network s workload. The proxy can also abandon a stale request in order to shorten the response time for user s manipulation.

Requests can be transmitted through the network . In one example the request can be sent out by a web service e.g. a web service based on REST Representational State Transfer protocol etc. . It is to be appreciated that the request can be any other suitable communication protocol based on TCP IP. Furthermore for a pipelined transmission the client can be able to establish multiple TCP IP connections to the server . Thus in a network with high latency the requests can be sent out continuously without any stall.

On receiving the render request the server can put the request into a render engine. Requests can be queued in the render engine. Each render engine can correspond to one graphics card e.g. a graphics card associated with a device to interact with the portion of the image etc. . To increase the response speed for first time rendering images can be preprocessed into low resolution volume textures which can be stored on disk in advance. Additionally the full resolution textures can be cached in memory to shorten the rendering time for subsequent requests to the same image. Rendered images can be compressed in another thread than the rendering thread e.g. a rendering thread a compression thread etc. . In other words the separate threads for rendering and compressing the image can be handled simultaneously.

Compressed images can be sent out by the server . This can be done in a thread that receives a rendering request. Compressed images can be transmitted through the network wherein multiple connections can be employed in order to parallelize transmissions and shorten delay of the transmission pipeline stage. When the compressed image arrives at client the image can be decompressed on the client side. Images can be displayed in a UI thread on the client side. In one example an obsolete image e.g. timestamps of which are older than the current timestamp can be discarded in the UI thread on the client side.

The system can further include a protocol component that can be utilized to communicate with the server . The protocol component can get the image property by leveraging the image s identification ID . The protocol component can send rendering requests to the server with this property in addition to information of the user s manipulation. This protocol can enable the asynchronous communication between at least one client and the server . The protocol component can also transmit information of manipulation mode and rendering quality to support request combination and cancellation.

The requests can be sent through WebGet method of HTTP protocol HyperText Transfer Protocol to avoid separated transmission for header and body and reduce the redundant round trip communication. For example the request for getting image property can be defined with the following pseudo code 

The rendering requests can be sent through asynchronous web service call supported by for instance WCF Windows Communication Foundation . Rendering requests are defined with the following pseudo code 

Since WebGet can be also used to improve the performance parameters containing the manipulation information can be serialized to a string parameter which named as param in the above function declaration. The type of this parameter can be defined with the following pseudo code 

Request generation can be done in a UI thread . Rendering quality can be determined by a user s action e.g. user input . For instance if the user s action can produce an intermediate temporary view of the image request for image with low quality can be generated. If the user s action indicates the end of a manipulation a request for a standard quality image can be generated. For example in a rotate mode a user can drag the object with an input device e.g. a mouse touch screen etc. to rotate the object image. When the user is dragging the object image a low quality request can be communicated e.g. sent out . After the user stops dragging e.g. indicated by a mouse up event etc. a request for image with standard quality can be sent to the server.

The requests can be sent to a request proxy within a proxy thread . The proxy can be in two states idle or processing. If there is no request in the queue of proxy the proxy can be in the idle state otherwise the proxy can be in the processing state. If the proxy is in the idle state a new request can be queued directly. If the proxy is in the processing state request can be combined to the last request waiting in the queue if the following requirements are met 1 The new request is generated within a combine interval after the last request that is TimeStamp TimeStamp

In the processing state the proxy can send out the first request in the request queue every combine interval. The combine interval can determine whether two requests can be combined. It can also specify the interval between sending two consecutive requests. The combine interval can be adjusted by the response status e.g. discussed in more detail below . If user s input indicates an end of the manipulation such as the mouse up event after a drag the request proxy can cancel all the pending requests in the request queue and send the new request out. The request proxy can work in the proxy thread .

When the client receives a rendered image from the server the response time can be used to tune the combine interval via the combine interval tuner within a thread pool thread . The client can validate the response e.g. validation based at least in part upon the timestamp of the image. If the timestamp of the request corresponding to this response is later than the current timestamp the response is deemed valid and the images contained in this response can be decompressed e.g. decompression and displayed e.g. display on client. The current timestamp can be set to the timestamp of the corresponding request. Otherwise the response can be discarded. The tuning of combine interval validation and decompression can be executed in the thread pool thread which can be created by the asynchronous call of a web service. Display can be done in the UI thread .

Each render engine can run in a separate thread. For instance a DirectX device can be used in the thread which created it. If rendering is done by a graphics processing unit GPU the number of engine threads can be equal to the number of GPUs. If software rendering is adopted the number of engine threads can be determined by the number of central processing unit CPU cores. If the image requested does not exist in the cache the request can be queued into a request processor within a request processor thread . The request processor can process each request sequentially. It first loads the image requested and inserts it into the cache then the request is removed from the queue in the request processor and queued in a render engine.

A render engine can receive a request from a request queue . If the full resolution texture has not been generated the render engine can first load the preview texture from the disk and use it to do the rendering e.g. load preview texture and or render . For example the preview textures can be pre created from the DICOM files with scaled low resolution e.g. enabling to fit in limited dimensions with a short load time etc. . The render engine can also start a thread to compute and generate the data for full resolution texture e.g. the texture generator the texture generate thread . When this texture is generated subsequent requests can be rendered using it. After the image has been rendered the image can be compressed e.g. compress in a thread from the thread pool thread so that the compression and rendering can be performed simultaneously.

The intelligent component can employ value of information VOI computation in order to manage responses and requests between a client and a server. For instance by utilizing VOI computation the most ideal and or appropriate client requests can be identified in order to combine queue or cancel such requests appropriately. Moreover it is to be understood that the intelligent component can provide for reasoning about or infer states of the system environment and or user from a set of observations as captured via events and or data. Inference can be employed to identify a specific context or action or can generate a probability distribution over states for example. The inference can be probabilistic that is the computation of a probability distribution over states of interest based on a consideration of data and events. Inference can also refer to techniques employed for composing higher level events from a set of events and or data. Such inference results in the construction of new events or actions from a set of observed events and or stored event data whether or not the events are correlated in close temporal proximity and whether the events and data come from one or several event and data sources. Various classification explicitly and or implicitly trained schemes and or systems e.g. support vector machines neural networks expert systems Bayesian belief networks fuzzy logic data fusion engines . . . can be employed in connection with performing automatic and or inferred action in connection with the claimed subject matter.

A classifier is a function that maps an input attribute vector x x1 x2 x3 x4 xn to a confidence that the input belongs to a class that is f x confidence class . Such classification can employ a probabilistic and or statistical based analysis e.g. factoring into the analysis utilities and costs to prognose or infer an action that a user desires to be automatically performed. A support vector machine SVM is an example of a classifier that can be employed. The SVM operates by finding a hypersurface in the space of possible inputs which hypersurface attempts to split the triggering criteria from the non triggering events. Intuitively this makes the classification correct for testing data that is near but not identical to training data. Other directed and undirected model classification approaches include e.g. na ve Bayes Bayesian networks decision trees neural networks fuzzy logic models and probabilistic classification models providing different patterns of independence can be employed. Classification as used herein also is inclusive of statistical regression that is utilized to develop models of priority.

The pipe component can further utilize a presentation component that provides various types of user interfaces to facilitate interaction between a user and any component coupled to the pipe component . As depicted the presentation component is a separate entity that can be utilized with the pipe component . However it is to be appreciated that the presentation component and or similar view components can be incorporated into the pipe component and or a stand alone unit. The presentation component can provide one or more graphical user interfaces GUIs command line interfaces and the like. For example a GUI can be rendered that provides a user with a region or means to load import read etc. data and can include a region to present the results of such. These regions can comprise known text and or graphic regions comprising dialogue boxes static controls drop down menus list boxes pop up menus as edit controls combo boxes radio buttons check boxes push buttons and graphic boxes. In addition utilities to facilitate the presentation such as vertical and or horizontal scroll bars for navigation and toolbar buttons to determine whether a region will be viewable can be employed. For example the user can interact with one or more of the components coupled and or incorporated into the pipe component .

The user can also interact with the regions to select and provide information via various devices such as a mouse a roller ball a touchpad a keypad a keyboard a touch screen a pen and or voice activation a body motion detection for example. Typically a mechanism such as a push button or the enter key on the keyboard can be employed subsequent entering the information in order to initiate the search. However it is to be appreciated that the claimed subject matter is not so limited. For example merely highlighting a check box can initiate information conveyance. In another example a command line interface can be employed. For example the command line interface can prompt e.g. via a text message on a display and an audio tone the user for information via providing a text message. The user can then provide suitable information such as alpha numeric input corresponding to an option provided in the interface prompt or an answer to a question posed in the prompt. It is to be appreciated that the command line interface can be employed in connection with a GUI and or API. In addition the command line interface can be employed in connection with hardware e.g. video cards and or displays e.g. black and white EGA VGA SVGA etc. with limited graphic support and or low bandwidth communication channels.

At reference numeral a render engine in a rendering thread can be dedicated and utilized for each client request. In particular each client request targeted for an image on a server can be implemented with a respective processing thread. Moreover each render engine can correlate to one graphics card. At reference numeral a rendered image can be compressed in a separate thread in comparison to the rendering thread. In other words the rendering and the compressing of the image can be implemented simultaneously.

At reference numeral the compressed image can be communicated to the client with two or more TCP IP connections in order to maintain continuous communication of responses e.g. as well as continuous communications of requests . At reference numeral the image can be decompressed and displayed on the client in a user interface UI thread. It is to be appreciated that the above methodology maintains stages of image rendering image transmission and image display within separate and distinct processing threads and or pipelines.

If the interval between last two responses is shorter than or equal to that between the corresponding two requests the combine interval can be decreased by the minimum value of advance time and decrement step. The advance time can be calculated by subtracting the response interval from the request interval. Here the combine interval can be decreased conservatively so that the workload of the server may not be increased dramatically and the throughput of server can reach a steady state.

The adjusted combine interval can be further adjusted to be in the range of a minimum value and maximum value. Here the minimum combine interval equals to the longest processing time among all the pipeline stages. The maximum combine interval equals to the total processing time of the entire pipeline.

At reference numeral a response is received. The response can include a request time and a response time. At reference numeral the request interval and response interval can be calculated. At reference numeral a determination is made whether the request interval is less than the response interval. If the request interval is less than the response interval YES the methodology continues to reference numeral . At reference numeral the combine interval can be increased by the increment step . If the request interval is not less than the response time NO the methodology continues to reference numeral . At reference numeral the combine interval can be decreased by the Min decrement step advance time .

At reference numeral a determination is made whether the combine interval is greater than a maximum value. If the combine interval is greater than a maximum value YES the methodology continues to reference numeral where the combine interval can be set to maximum value. If the combine interval is not greater than a maximum value NO the methodology can continue to reference numeral .

At reference numeral a determination is made whether the combine interval is less than a minimum value. If the combine interval is less than the minimum value YES the methodology can continue to reference numeral in which the combine interval is set to a minimum value. If the combine interval is not less than the minimum value NO the methodology can continue to reference numeral . At reference numeral the combine interval can be returned.

In order to provide additional context for implementing various aspects of the claimed subject matter and the following discussion is intended to provide a brief general description of a suitable computing environment in which the various aspects of the subject innovation may be implemented. For example a pipe component that utilizes a separate pipeline and processing thread for various stages associated with manipulating an image hosted by a server as described in the previous figures can be implemented in such suitable computing environment. While the claimed subject matter has been described above in the general context of computer executable instructions of a computer program that runs on a local computer and or remote computer those skilled in the art will recognize that the subject innovation also may be implemented in combination with other program modules. Generally program modules include routines programs components data structures etc. that perform particular tasks and or implement particular abstract data types.

Moreover those skilled in the art will appreciate that the inventive methods may be practiced with other computer system configurations including single processor or multi processor computer systems minicomputers mainframe computers as well as personal computers hand held computing devices microprocessor based and or programmable consumer electronics and the like each of which may operatively communicate with one or more associated devices. The illustrated aspects of the claimed subject matter may also be practiced in distributed computing environments where certain tasks are performed by remote processing devices that are linked through a communications network. However some if not all aspects of the subject innovation may be practiced on stand alone computers. In a distributed computing environment program modules may be located in local and or remote memory storage devices.

One possible communication between a client and a server can be in the form of a data packet adapted to be transmitted between two or more computer processes. The system includes a communication framework that can be employed to facilitate communications between the client s and the server s . The client s are operably connected to one or more client data store s that can be employed to store information local to the client s . It is to be appreciated that the client data store s can maintain at least one of a manipulation state and or current transformation to an image. Similarly the server s are operably connected to one or more server data store s that can be employed to store information local to the servers .

With reference to an exemplary environment for implementing various aspects of the claimed subject matter includes a computer . The computer includes a processing unit a system memory and a system bus . The system bus couples system components including but not limited to the system memory to the processing unit . The processing unit can be any of various available processors. Dual microprocessors and other multiprocessor architectures also can be employed as the processing unit .

The system bus can be any of several types of bus structure s including the memory bus or memory controller a peripheral bus or external bus and or a local bus using any variety of available bus architectures including but not limited to Industrial Standard Architecture ISA Micro Channel Architecture MSA Extended ISA EISA Intelligent Drive Electronics IDE VESA Local Bus VLB Peripheral Component Interconnect PCI Card Bus Universal Serial Bus USB Advanced Graphics Port AGP Personal Computer Memory Card International Association bus PCMCIA Firewire IEEE 1394 and Small Computer Systems Interface SCSI .

The system memory includes volatile memory and nonvolatile memory . The basic input output system BIOS containing the basic routines to transfer information between elements within the computer such as during start up is stored in nonvolatile memory . By way of illustration and not limitation nonvolatile memory can include read only memory ROM programmable ROM PROM electrically programmable ROM EPROM electrically erasable programmable ROM EEPROM or flash memory. Volatile memory includes random access memory RAM which acts as external cache memory. By way of illustration and not limitation RAM is available in many forms such as static RAM SRAM dynamic RAM DRAM synchronous DRAM SDRAM double data rate SDRAM DDR SDRAM enhanced SDRAM ESDRAM Synchlink DRAM SLDRAM Rambus direct RAM RDRAM direct Rambus dynamic RAM DRDRAM and Rambus dynamic RAM RDRAM .

Computer also includes removable non removable volatile non volatile computer storage media. illustrates for example a disk storage . Disk storage includes but is not limited to devices like a magnetic disk drive floppy disk drive tape drive Jaz drive Zip drive LS 100 drive flash memory card or memory stick. In addition disk storage can include storage media separately or in combination with other storage media including but not limited to an optical disk drive such as a compact disk ROM device CD ROM CD recordable drive CD R Drive CD rewritable drive CD RW Drive or a digital versatile disk ROM drive DVD ROM . To facilitate connection of the disk storage devices to the system bus a removable or non removable interface is typically used such as interface .

It is to be appreciated that describes software that acts as an intermediary between users and the basic computer resources described in the suitable operating environment . Such software includes an operating system . Operating system which can be stored on disk storage acts to control and allocate resources of the computer system . System applications take advantage of the management of resources by operating system through program modules and program data stored either in system memory or on disk storage . It is to be appreciated that the claimed subject matter can be implemented with various operating systems or combinations of operating systems.

A user enters commands or information into the computer through input device s . Input devices include but are not limited to a pointing device such as a mouse trackball stylus touch pad keyboard microphone joystick game pad satellite dish scanner TV tuner card digital camera digital video camera web camera and the like. These and other input devices connect to the processing unit through the system bus via interface port s . Interface port s include for example a serial port a parallel port a game port and a universal serial bus USB . Output device s use some of the same type of ports as input device s . Thus for example a USB port may be used to provide input to computer and to output information from computer to an output device . Output adapter is provided to illustrate that there are some output devices like monitors speakers and printers among other output devices which require special adapters. The output adapters include by way of illustration and not limitation video and sound cards that provide a means of connection between the output device and the system bus . It should be noted that other devices and or systems of devices provide both input and output capabilities such as remote computer s .

Computer can operate in a networked environment using logical connections to one or more remote computers such as remote computer s . The remote computer s can be a personal computer a server a router a network PC a workstation a microprocessor based appliance a peer device or other common network node and the like and typically includes many or all of the elements described relative to computer . For purposes of brevity only a memory storage device is illustrated with remote computer s . Remote computer s is logically connected to computer through a network interface and then physically connected via communication connection . Network interface encompasses wire and or wireless communication networks such as local area networks LAN and wide area networks WAN . LAN technologies include Fiber Distributed Data Interface FDDI Copper Distributed Data Interface CDDI Ethernet Token Ring and the like. WAN technologies include but are not limited to point to point links circuit switching networks like Integrated Services Digital Networks ISDN and variations thereon packet switching networks and Digital Subscriber Lines DSL .

Communication connection s refers to the hardware software employed to connect the network interface to the bus . While communication connection is shown for illustrative clarity inside computer it can also be external to computer . The hardware software necessary for connection to the network interface includes for exemplary purposes only internal and external technologies such as modems including regular telephone grade modems cable modems and DSL modems ISDN adapters and Ethernet cards.

What has been described above includes examples of the subject innovation. It is of course not possible to describe every conceivable combination of components or methodologies for purposes of describing the claimed subject matter but one of ordinary skill in the art may recognize that many further combinations and permutations of the subject innovation are possible. Accordingly the claimed subject matter is intended to embrace all such alterations modifications and variations that fall within the spirit and scope of the appended claims.

In particular and in regard to the various functions performed by the above described components devices circuits systems and the like the terms including a reference to a means used to describe such components are intended to correspond unless otherwise indicated to any component which performs the specified function of the described component e.g. a functional equivalent even though not structurally equivalent to the disclosed structure which performs the function in the herein illustrated exemplary aspects of the claimed subject matter. In this regard it will also be recognized that the innovation includes a system as well as a computer readable medium having computer executable instructions for performing the acts and or events of the various methods of the claimed subject matter.

There are multiple ways of implementing the present innovation e.g. an appropriate API tool kit driver code operating system control standalone or downloadable software object etc. which enables applications and services to use the advertising techniques of the invention. The claimed subject matter contemplates the use from the standpoint of an API or other software object as well as from a software or hardware object that operates according to the advertising techniques in accordance with the invention. Thus various implementations of the innovation described herein may have aspects that are wholly in hardware partly in hardware and partly in software as well as in software.

The aforementioned systems have been described with respect to interaction between several components. It can be appreciated that such systems and components can include those components or specified sub components some of the specified components or sub components and or additional components and according to various permutations and combinations of the foregoing. Sub components can also be implemented as components communicatively coupled to other components rather than included within parent components hierarchical . Additionally it should be noted that one or more components may be combined into a single component providing aggregate functionality or divided into several separate sub components and any one or more middle layers such as a management layer may be provided to communicatively couple to such sub components in order to provide integrated functionality. Any components described herein may also interact with one or more other components not specifically described herein but generally known by those of skill in the art.

In addition while a particular feature of the subject innovation may have been disclosed with respect to only one of several implementations such feature may be combined with one or more other features of the other implementations as may be desired and advantageous for any given or particular application. Furthermore to the extent that the terms includes including has contains variants thereof and other similar words are used in either the detailed description or the claims these terms are intended to be inclusive in a manner similar to the term comprising as an open transition word without precluding any additional or other elements.

