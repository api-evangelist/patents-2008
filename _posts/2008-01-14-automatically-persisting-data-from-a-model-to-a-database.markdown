---

title: Automatically persisting data from a model to a database
abstract: Projects often involve multiple teams of developers in different locations. The different teams make updates to a central or shared database(s) that can store information about the project, such as progress. Each team or even different members of the different teams can check out instances of a representation of a model for the project. The different teams/members can independently modify their instance with data specific to that member and/or team. Database operations embedded in the individual instances are then executed on the database(s) to persist the data from their individual instances to the database(s). Database mechanisms can handle locking and/or conflicts that may arise from performance of the database operations. A manager can then request a report from the database(s), and the report with data from the different members and/or teams can be generated from the database(s).
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07970778&OS=07970778&RS=07970778
owner: International Business Machines Corporation
number: 07970778
owner_city: Armonk
owner_country: US
publication_date: 20080114
---
Embodiments of the inventive subject matter generally relate to the field of data persistence and modeling and more particularly to persisting data from an instance of a model to a database.

The Unified Modeling Language UML is the industry standard language for specifying visualizing constructing and documenting artifacts of software systems. One of the visual depictions of models created in accordance with UML is a class diagram. A class diagram represents classes attributes of the classes and relationships between classes.

Embodiments of the inventive subject matter include a method for automatically persisting data from an instance of a representation of a model to a database. The method comprises fetching an instance of a representation of a model. The instance of the model representation is comprised of a plurality of elements. A first element of the plurality of elements is annotated with a database operation for execution on a database and data to persist from the instance of the model representation to the database. The database has a schema defined to be congruous with the model. The first element is indicated as having data to persist to the database. The instance of the model representation is used to automatically persist the data from the instance of the model representation to the database.

The description that follows includes exemplary systems methods techniques instruction sequences and computer program products that embody techniques of the present inventive subject matter. However it is understood that the described embodiments may be practiced without these specific details. For instance although examples refer to annotation database operations and or data to be persisted to a database may be embedded as an attribute or tagged value in an element of an instance of a representation of a model. In other instances well known instruction instances protocols structures and techniques have not been shown in detail in order not to obfuscate the description.

A model can be used to persist data to a database. Using a mapping file or creating custom code however persists the data in a rigid manner. If using a mapping file whoever maintains the mapping file must be informed of any changes to the database schema. If custom code is used then whoever maintains the custom code must be informed of changes to the model by the topology architect. Embedding database operations in elements of an instance of a model representation allows data to persist from a model to a database with flexibility.

Projects often involve multiple teams of developers in different locations. The different teams make updates to a central or shared database s that can store information about the project such as progress. Each team or even different members of the different teams can check out instances of a representation of a model for the project. The different teams members can independently modify their instance with data specific to that member and or team. Database operations embedded in the individual instances are then executed on the database s to persist the data from their individual instances to the database s . Database mechanisms can handle locking and or conflicts that may arise from performance of the database operations. A manager can then request a report from the database s and the report with data from the different members and or teams can be generated from the database s .

The model representation instance includes a plurality of elements and for class objects. Each element and indicates a class one or more attributes for the class and one or more annotations. One or more database operations are embedded in each of the annotations. Data to persist to the database is also embedded in the annotations. The annotation can be made automatically or manually. Some or all of the annotations may exist in the instance as checked out from the model store . A user or process can then modify add and or remove annotations at the client . Although not depicted the instance may also have rules and or custom logic to be applied. As with the annotations a user and or process can modify add and or delete rules and or custom logic in the instance .

At a stage B a transform engine walks over the instance to determine any elements marked or indicated as having data to persist to the database. An element can be marked for example with a stereotype a flag etc. The transform engine determines the database operations embedded in the elements of the instance including the elements and .

The transform engine then causes the determined database operations to be performed on a database at a stage C. The schema of the database is congruous with the model. The transform engine can cause the database operations to be performed with different techniques. For instance the transform engine can execute the database operations directly. As another example the transform engine can pass the database operations to another process or make calls to an application programming interface. Performing the embedded database operations allows the data to persist from the instance to the database .

The stages A B and C are performed at the clients and as well as using instances of the model representation fetched from the model store . With the data persisted to the database from the client and reports can be generated with the data persisted from the various independent instances of the model representation. At a stage D a client requests a report based on the data in the database . At a stage E one or more reports are generated from the database .

It should be understood that the example depicted in is meant to aid in understanding embodiments and should not be used to limit embodiments. For instance embodiments are not limited to client devices. The functionality described in may be performed on server devices devices that operate as both client and server etc. As another example it is not necessary for different devices to automatically persist data from a model to a database and to request reports. Although not limited to a single device a single device can both automatically persist data from a model to a database and generate a report from the database.

At block the data is written into the annotation of the selected element. For instance the already embedded database operation is modified to write the determined data to the target database.

At block an annotation is created on the selected element. The annotation is created with a database operation and the determined data. Embodiments can use different techniques to annotate the selected element e.g. write the database operation with the data write the database operation and the data separately write the database operation with a reference to the data etc. . At block it is indicated that the selected element has data to persist. For example the selected element is marked with a flag. As another example a process or thread sets a tagged value in the selected element or defines a stereotype. The stereotype indicates the element has data to persist to a database.

At block it is determined if the traversal is complete. If the traversal is complete then control flows to block . If not then control flows to block .

The example operation in the depicted flowcharts are intended to aid in understanding embodiments and should not construed as limiting embodiments. Embodiments may perform additional operations fewer operations and or different operations. For instance referring to the embedded database operations may be executed as they are encountered. In another embodiment a process or thread scans the queue of database operations to optimize the database operations e.g. locate and eliminate redundant operations . In another embodiment a list of references can be maintained for each element with persistable data instead or in addition to marking the elements.

The described embodiments may be provided as a computer program product or software that may include a machine readable medium having stored thereon instructions which may be used to program a computer system or other electronic device s to perform a process according to embodiments whether presently described or not since every conceivable variation is not enumerated herein. A machine readable medium includes any mechanism for storing machine readable storage medium or transmitting machine readable signal medium information in a form e.g. software processing application readable by a machine e.g. a computer . The machine readable storage medium may include but is not limited to magnetic storage medium e.g. floppy diskette optical storage medium e.g. CD ROM magneto optical storage medium read only memory ROM random access memory RAM erasable programmable memory e.g. EPROM and EEPROM flash memory or other types of medium suitable for storing electronic instructions. In addition embodiments may be embodied in a machine readable signal medium examples of which include an electrical optical acoustical or other form of propagated signal e.g. carrier waves infrared signals digital signals etc. or wireline wireless or other communications medium.

While the embodiments are described with reference to various implementations and exploitations it will be understood that these embodiments are illustrative and that the scope of the inventive subject matter is not limited to them. In general techniques for automatically persisting data from a model representation instance to a database as described herein may be implemented with facilities consistent with any hardware system or hardware systems. Many variations modifications additions and improvements are possible.

Plural instances may be provided for components operations or structures described herein as a single instance. Finally boundaries between various components operations and data stores are somewhat arbitrary and particular operations are illustrated in the context of specific illustrative configurations. Other allocations of functionality are envisioned and may fall within the scope of the inventive subject matter. In general structures and functionality presented as separate components in the exemplary configurations may be implemented as a combined structure or component. Similarly structures and functionality presented as a single component may be implemented as separate components. These and other variations modifications additions and improvements may fall within the scope of the inventive subject matter.

