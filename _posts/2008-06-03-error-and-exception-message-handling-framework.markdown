---

title: Error and exception message handling framework
abstract: Described are systems and methods for counteracting attempts at unauthorized use of information systems. An error message generated in response to an error in the information system is received, where the error message includes a set of information describing the error. The received error message is then translated into an obfuscated message, where the obfuscated message replaces at least a portion of the set of information describing the error with a set of alternative information. The obfuscated message is then presented to a user via a user interface.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07966664&OS=07966664&RS=07966664
owner: Hewlett-Packard Development Company, L.P.
number: 07966664
owner_city: Houston
owner_country: US
publication_date: 20080603
---
This present disclosure relates to computer security and more particularly to computer security for counteracting and misleading attempts to subvert computer programs.

Computer security imposes requirements on computer programs that are different from most system requirements as the computer security requirements often take the form of constraints on what computer programs are not supposed to do. Generally these negative requirements make computer security particularly challenging. Because application developers and designers find it difficult enough to simply develop computer programs that perform their tasks and operations properly the negative requirements needed for computer security increase the already difficult task of application and system design. Furthermore negative requirements are deceptively complicated to satisfy and require exhaustive testing to verify an impractical request for most computer programs. Among the many negative requirements for computer security are programming strategies for making computer programs and applications both dependable and resistant to subversion. In low security operating environments applications must be relied upon to participate in their own protection. For many types of development various sets of best practice guidelines for secure coding are available in order to make an application more resistant to malicious subversion or attack.

One of the best practices for secure coding is the proper handling of a system s errors and exceptions. The system must not only handle any and all possible errors and exceptions in such a way that the system s functionality is not negatively impacted by a system or application error but the system must also provide sufficiently detailed information to developers designers and technicians that comprises adequate information to identify locate and correct the problem. In order to be useful error and exception messages should provide detailed information to users describing or identifying the origin of the error or exception e.g. an internal memory address a software component name a database table name etc. the type of error or exception e.g. buffer overflow memory error database access error etc. the context of the error or exception as well as any other relevant information describing the problem experienced. Detailed error and exception messages while useful in debugging the system during the development and sustain phases may be exploited by unauthorized and or malicious users to attack or subvert the associated system by using the detailed information provided by the error or exception messages to identify vulnerable applications or components of the system.

In order to limit attacks made possible by detailed error and exception information programmers and developers routinely perform additional work to hide critical or sensitive error and exception information by having the system or application return non technical or generic error and exception messages. In most cases developing non technical and generic error messages requires additional strategizing programming and development time while also increasing the costs for the development phase of the system. Moreover during the sustain phase developers programmers and technicians must trace back from the non technical or generic message to determine the meaning or relevance of the actual and far more useful technical error message. While protecting the sensitive information associated with the error or exception requiring additional translation of the non technical or generic message can severely delay the resolution of the problem while simultaneously incurring further costs.

In recent years the computer security community has employed honey pots as a preferred method of protection and intrusion detection. A honey pot is a trap set to detect deflect or in some manner counteract attempts at unauthorized use of information systems. Generally a honey pot consists of a computer application data or a network site that appears to be part of a network but which is actually isolated unprotected and monitored and which seems to contain information or a resource that would be of value to attackers. A honey pot is valuable as a surveillance and early warning tool. While often a computer a honey pot can take on other forms such as files or data records or even unused internet protocol IP address space. In general honey pots have no production value and thus should not see any legitimate traffic or activity. Whatever they capture and or monitor can be assumed to be either malicious unauthorized or both. Any material monitored detected or trapped by the honey pot can be categorized as illicit data or information and listed as such for future use.

During the development and production stages of information systems error and exception messages can be generated and used to provide information describing errors exceptions and other events that occur during the operation of a particular system. However the detailed and sensitive nature of the information provided in some error and exception messages can provide information sufficient to make the information system susceptible to malicious and unauthorized activity. Systems and methods can be implemented to counteract attempts at unauthorized usage of error and exception messages in information systems.

In one general aspect an error message generated in response to the occurrence of an error in the information system is received. The error message may comprise a set of information describing various details of the error. The received error message is translated into an obfuscated message where the obfuscated message replaces at least a portion of the set of information describing the error with a set of alternative information. The obfuscated message is then presented to a user via a user interface.

Implementations can include one or more of the following features. The replaced portion of the set of information describing the error can be a set of information that provides a detailed description of the error. Additionally the alternative information can describe a set of false error information. For instance the set of false error information can be information that appears to be meaningfully related to an error that differs from the error associated with the received error message.

The details of one or more embodiments of the invention are set forth in the accompanying drawings and the description below. Other features of the invention will be apparent from the description and drawings and from the claims.

The present disclosure provides methods and systems for presenting detailed error and exception messages to authorized users while simultaneously protecting the sensitive information associated with those messages from exploitation and misuse by unauthorized or malicious users. illustrates an environment for the implementation of an error and exception message handling framework in at least a portion of an enterprise or data processing environment. The error and exception message handling framework allows developers and programmers to provide detailed error and exception messages to users without concern of disclosing sensitive and or exploitable information to potential attackers and or unauthorized users.

In particular the methods and systems of the present disclosure address two challenges in the field of computer security. First the error and exception message handling framework allows developers and programmers to avoid the expense and effort involved in obfuscating and or limiting the details of error and exception messages generated by a particular system or application. Instead of providing generic or unclear messages that purposefully limit the amount of useful information displayed in response to an error in order to prevent misuse or exploitation of such information the framework allows developers and programmers to include detailed information in error and exception messages such that authorized users can quickly and efficiently identify locate and correct any problems within the system or application. Second while providing detailed information to authorized users the framework can supply unauthorized users with translated or obfuscated versions of the actual error and exception messages. These obfuscated error and exception messages can present false although authentic looking error and exception information that not only obfuscates the actual information included in the original error and exception messages but that can also mislead or direct the unauthorized user to perform actions allowing the system to trace or obtain information about the unauthorized user s identity purpose and or location. Information on the unauthorized user traced or obtained by the system can then be used for counter intelligence purposes such as reporting the unauthorized user to the appropriate authorities or preventing future attacks.

As shown in environment includes or is communicably coupled with a server one or more clients a honey pot system and a network . The server may include a memory as well as one or more processors and may be an electronic computing device operable to receive transmit process store or manage data associated with the environment . Generally this disclosure provides merely one example of computers that may be used. As used in this document the term computer is intended to encompass any suitable processing device. For example the environment may be implemented using computers other than servers as well as a server pool. Indeed the server may be adapted or operable to execute any operating system including Linux UNIX Windows Mac OS X or any other suitable operating system. The server may also include or be communicably coupled with a web server and or a mail server.

Memory may include any memory or database module and may take the form of volatile or non volatile memory including without limitation magnetic media optical media random access memory RAM read only memory ROM removable media or any other suitable local or remote memory component. For example memory may store classes frameworks applications backup data business objects jobs or other information that includes any parameters configuration values variables algorithms instructions rules constraints or references thereto. The memory may also include any other appropriate data such as virtual private network VPN applications firmware logs and policies firewall policies a security or access log print or other reporting files HTML files or templates and others.

Illustrated memory includes a set of configuration data associated with the error and exception handling framework . Although illustrated within memory in some or all of the set of configuration data may be located outside the memory and or the server in some implementations. As illustrated the set of configuration data includes a set of obfuscation rules and a set of configuration parameters . The set of obfuscation rules may include one or more rules providing the algorithms for how and when error and exception messages processed by the error and exception handling framework are translated into obfuscated or decoy messages. Some rules may translate a small portion of the original message such as a single word or numerical value while other rules may translate a significant portion or in some cases all of the original message. The complexity and scope of the obfuscation rules for each error and exception type may be based on a number of factors including but not limited to the severity of the consequences if information within a particular error or exception message is exploited the likelihood of an attempt to exploit the error or exception information in that particular message and the level of sophistication of potential users likely to receive the particular message among others. In some instances the set of obfuscation rules may specify that particular error and exception messages received by the framework are not to be translated regardless of whether the framework s obfuscation functionality is active or disabled. Those messages will be presented by the framework in their original format without translation. In most cases those messages will be generic error and exception messages that typically do not contain exploitable information.

In general the set of obfuscation rules are meant to protect any error and exception message information that possibly could be exploited by malicious users while providing unauthorized users with decoy messages that appear to be an authentic error or exception message. For instance although translated the decoy messages are meant to provide messages in the same or similar format as a normal error or exception message but with information that unbeknownst to an unauthorized user is false and misleading. Thus in most implementations the decoy messages are meant to present a message that appears to be a genuine error or exception message generated by the system or application. By doing so malicious users are kept unaware that any modification or translation of the original message has occurred and that the decoy message represents a valid error or exception message. The decoy message can cause the malicious user to invest time and effort in a futile attempt to exploit non existent or misleading errors. Further for implementations where the decoy message leads the malicious user to one of the countermeasure systems described above the framework allows developers to study the malicious users purposes or methods for future prevention and security while also collecting valuable and incriminating information on the users identities or locations.

In some implementations the set of obfuscation rules may be defined prior to integration of the error and exception handling framework with any particular application . These predefined rules may be used with a broad spectrum of systems and applications allowing for easy integration into a large number of environments . However the framework may also allow authorized users developers and programmers of a specific system or application to customize the set of obfuscation rules by amending the existing obfuscation rules or by adding new rules according to the particular implementation and intention of the framework . This allows different implementations of the framework to include locale or site specific sets of obfuscation rules . In other words the framework may be adapted for a specific locale or language e.g. English for the United States French for France German for Germany etc. as well as for a particular website or application allowing for the creation of specialized sets of obfuscation rules relevant and adapted to any particular implementation. This flexibility is useful when environment includes countermeasures against unwanted attacks such as honey pots honey nets or intrusion detection systems. For instance one or more obfuscation rules may be defined that translate some or all of the original messages into decoy messages that include particular names messages and or values designed to lead unauthorized users attempting to exploit the decoy messages to a particular countermeasure system such as honey pot system illustrated in . When the unauthorized user attempts to exploit the decoy message information such as by attacking a particular IP address or memory location provided in the decoy message the countermeasure systems can trace or identify relevant information associated with the unauthorized user including the user s identity purpose location and method of attack. The information retrieved by the countermeasure systems can be used to 1 better prepare for and prevent future attacks and misuse and or 2 notify the proper authorities or organizations of the unauthorized user s actions.

The set of obfuscation rules includes rules for translating messages associated with various types of errors and exceptions generated by the system or application into decoy messages the errors and exceptions including but not limited to buffer overflow errors formatting errors integer overflow errors memory errors application programming interface API function call errors database access errors database record read write update delete etc. errors logical errors and arithmetical errors among others. In some implementations different rules may be applied to different message types. For instance one rule may apply to buffer overflow error messages while another rule applies to integer overflow errors. In some implementations rules may translate the original message from one type of error or exception message to another. For instance a database error message associated with a referential integrity error may be translated into a parent child relationship error. Other rules may replace a portion of the information included within the original message with decoy information such as by replacing the actual names of database tables and columns in a database access exception with legitimate looking but incorrect and misleading names. Still another rule may apply a mathematical function to numerical data included within the error or exception message. For example a rule may cause the translation of a range of memory addresses in a memory error message to a range of non existent memory addresses in the decoy message by applying a predefined mathematical function adding subtracting multiplying or dividing the numerical values by a certain amount or factor. In other instances sets of numerical data for particular messages e.g. memory ranges IP addresses etc. may be substituted with a predefined set of numerical data corresponding to a countermeasure protected location. In some instances the rule may be associated with a complex mathematical formula to make attempts at translation difficult. In still other instances a particular rule may define the translation of certain words or values in each message regardless of the type of error represented. For example one rule may require that each instance of the word purchase be translated to sale regardless of context or message type. Other appropriate word translations may also be applied. For instance in order to protect a particular set of database tables or columns from unauthorized users common language or naming conventions used for the set may be identified such that a single rule could be defined to translate and protect each of the items that may be included in an error or exception message.

The set of obfuscation rules may also include a set of reverse rules for translating decoy messages back into their corresponding original error and exception messages. These reverse rules may be used by remote users who have received decoy messages but who are authorized to view the error or exception messages as originally generated. The reverse rules may define how to reverse or un obfuscate a particular decoy message into the corresponding original error or exception message. In some instances the reverse rules may be the same rules as the normal rules used to produce the decoy messages. In those instances the normal rule or the algorithm associated with the normal rule may be inverted or reversed in order to un obfuscate the decoy message.

As illustrated in the set of configuration data also includes the set of configuration parameters associated with the error and exception handling framework . The set of configuration parameters stores information on the particular implementation of the framework deployed in the environment . The configuration parameters may be set to certain default values upon integration into each particular implementation. In certain implementations of the framework the default values may be modified by authorized users or developers and designed at any time according to a particular need. For instance one parameter may define whether the obfuscation functionality of the error and exception handling framework is in an active disabled or hybrid state. When the obfuscation functionality of the framework is disabled the original messages generated in response to errors and exceptions are presented without translation to users both authorized and unauthorized. This state is best used during the development production and debugging stages or when the system is inaccessible to unauthorized users. Developers and programmers can review the non translated error and exception messages without fear of unauthorized users intercepting the messages during those times. When the functionality parameter is set to active however messages generated in response to errors and exceptions may be processed by the framework to translate the messages into the appropriate decoy messages. In the hybrid state both the originally generated and obfuscated versions of the error and exception messages are presented to the user. This option is valuable during development and debugging of the system especially when ensuring that particular messages are being translated correctly.

Other configuration parameters may include security or authorization levels for users. For instance passwords public key cryptography and other authentication devices may be integrated into the error and exception handling framework . The security or authorization parameter may define which passwords or cryptographic keys are required to allow users to view the original messages or translate the decoy messages back to their original state. The same security information may also define which users are able to modify the set of configuration data including modifying or adding to the set of obfuscation rules . Other relevant configuration parameters may also be stored or included in the set of configuration parameters . In some implementations the parameters may be robust and highly customizable while in other instances they may be limited in scope and flexibility.

In some implementations including illustrated the memory may include one or more logs storing information related to the operations of the error and exception handling framework . For instance the logs may store information describing each translation performed by the framework as well as any changes made to information in the set of configuration data such as modifications to any obfuscation rule or configuration parameter . The logs may also store any information provided by or derived from users accessing the application . In some instances the logs may be used to store information related to the error messages received by both authorized and unauthorized users from the error and exception handling framework .

Illustrated server also includes the processor . The processor executes instructions and manipulates data to perform the operations of the server such as for example a central processing unit CPU a blade an application specific integrated circuit ASIC or a field programmable gate array FPGA among others. Although illustrated as a single processor in the server multiple processors may be used in some implementations. In this particular illustration processor executes the application and the error and exception handling framework .

Application is any application program module process or other software that may execute change delete generate or otherwise manage information. Regardless of the particular implementation software may include software firmware wired or programmed hardware or any combination thereof as appropriate. The application may be written or described in any appropriate computer language including but not limited to C C Java Visual Basic assembler Perl Python or any proprietary computer language among others. The application may include any number of sub modules such as a business application and various modules but it may instead be a single multi tasked module that implements its various features and functionality through various objects methods and other processes. Further while described as internal to the server one or more processes associated with the application may be stored referenced or executed remotely. For example a portion of the application may be a local library or process while another portion of the application may be an object bundled for processing at a local or remote client . In another example the majority of processes or modules may reside or processing may take place on the client . Moreover the application may be a child or sub module of another software module or enterprise application not shown . In some implementations the application may be accessed remotely by one or more clients . In another example portions of the application may be used by a user working directly at server . The application while executing any of its methods processes or other operations can identify any or all errors and exceptions that occur during execution. Once identified messages describing those errors may be generated by either the application itself or the server on which the application is executing. The generated error and exception messages are then passed or transmitted to the error and exception handling framework for further processing. The application may also be created solely as a honey pot application associated with the framework .

As illustrated within server application is communicably coupled with the error and exception handling framework . The error and exception handling framework may be any application program module process or other software that can execute the obfuscation functions and processes. In some implementations the error and exception handling framework may be a stand alone application associated with the application while in other implementations the framework may be embedded within or integrated with the application . The error and exception framework may handle any all some or none of the error and exception messages generated during execution of the application . Additionally the framework may be associated with two or more applications simultaneously supporting each application with the functionality described herein. The framework may receive one or more error and exception messages from a particular application translate at least one of the messages into a decoy message using the set of obfuscation rules designed to obfuscate the actual error or exception information included in the original message and communicate the decoy message to one or more users interacting with or executing the application . In some instances the error and exception message handling framework can supply and be associated with one or more sets of class libraries with bindings for one or more software programming languages or environments including but not limited to C C Java .Net PERL and Python among others. By providing multiple sets of class libraries the error and exception message handling framework may be compatible with applications written in a plurality of programming languages.

The framework may also be implemented within an Enterprise Service Architecture ESA environment often termed a Service Oriented Architecture SOA . In certain implementations SOA can be considered a blueprint for an adaptable flexible and open IT architecture for developing services based enterprise scale business solutions. The respective enterprise service is typically a series of web services combined with business logic that can be accessed and used repeatedly to support a particular business process. Aggregating such web services into business level enterprise services may provide a more meaningful foundation for the task of automating enterprise scale business scenarios. The composite application framework comprises design tools methodologies services and processes an abstraction layer for objects and user interface and process pattern libraries. The framework may be bound to or a part of the composite application framework where the composite application framework supports model driven application composition allowing a user to build applications with as little programming as possible which often results in reduced development and deployment time for new modified applications and business pattern oriented integration. For instance the framework could be utilized by developers who create an application by compositing the web services associated with the SOA into an entirely new system.

In the implementation of the error and exception message handling framework includes several components including a configuration application programming interface API a rules engine an obfuscation engine and an obfuscation API . In some implementations the framework may be a single module performing the functions of each component. In other instances the framework may include any number of separate components that combine to perform the framework s operations. In still further implementations the error and exception message handling framework may perform only a portion of the operations described herein using external modules to perform some of the operations associated with the framework illustrated in . Each component may be embedded within or integrated with the error and exception message handling framework as shown in while in some instances some or all of the components may instead be communicably coupled to the framework within server . In still other instances each component may be a separate application located remote from the server yet tightly integrated with the framework through connections with the network .

The configuration API encapsulates and in some instances automates the functionality of the framework that is exposed to one or more users interacting with the framework and application . Among its other functions the configuration API generates and exposes a configuration user interface UI to authorized users at clients through each client s GUI . The configuration UI enables users to configure and set up the framework . For instance a user who has provided the appropriate authenticating credentials can access and modify information within the configuration data store using the operations encapsulated by the configuration API . For instance the user may access the set of configuration parameters through the configuration UI e.g. by using a web browser associated with the GUI to activate or disable the framework s obfuscation functionality. Using the configuration UI users can also review modify add rules to or delete rules from the set of obfuscation rules using the configuration UI. For example an authorized user can use the configuration UI to access and modify the default list of obfuscation rules to be a site or locale specific set of rules.

The configuration API may also allow the framework to dynamically modify its operations according to specific circumstances and or specific periods of time. In one example the configuration API may determine whether a user associated with a particular client is authorized to view the actual error and exception messages or whether the user should be provided translated decoy messages. The configuration API or another component of the framework may interact with the user associated with the client or other software associated with the client to determine whether a particular user possesses or can provide a particular set of authenticating information necessary to qualify the user as an authorized user and thus able to view the original error and exception messages. The authenticating information used to determine whether the user is authorized may include a private key password IP address user name or any other appropriate authentication technique. Further the configuration API may also determine whether the user or client is associated with the obfuscation software utility described below and as a result authorized. If the configuration API determines that the user is authorized then the configuration API may automatically modify the configuration parameters such as by deactivating the obfuscation functionality for error and exception messages generated by an instance of the application associated with the authorized user. If however the user cannot be authenticated the configuration API can set the configuration parameters of the framework such that any error or exception messages presented to the user are obfuscated decoy messages and not the originally generated error or exception messages.

Another component of the error and exception message handling framework is the rules engine . The rules engine accesses and interprets the set of configuration data specifically the set of obfuscation rules and the set of configuration parameters . When the framework receives an error or exception message from the application the rules engine analyzes the set of configuration parameters e.g. whether the obfuscation functionality of the framework is active and the set of obfuscation rules to determine which rules are to be used in obfuscating the particular error or exception message received. In some instances the rules engine may use the connections between the error and exception handling framework and memory to access the set of configuration data while in other instances the rules engine may use the functionality of one or more framework APIs to access the set of configuration data . If the obfuscation functionality is active the rules engine accesses the set of rules and retrieves the appropriate rule to be applied to the message. In some instances the rules engine may retrieve the rules to be used when un obfuscating a particular message. In those instances the rules engine may search for a reverse rule stored in the set of obfuscation rules or in other instances the rule used to generate the decoy message. The retrieved rules and other relevant information are then sent to the obfuscation engine .

The obfuscation engine receives one or more rules from the rules engine through the internal connections of the framework where each received rule is associated with one or more error and exception messages generated by or associated with the application . Using the received rules the obfuscation engine translates each of the one or more error and exception messages received by the framework into one or more decoy messages to be presented to the one or more clients . In certain instances where the client associated with the error or exception message is an authorized user or if the framework is in its disabled state the obfuscation engine will not translate the one or more messages into decoy messages. In those instances the framework may simply pass the non obfuscated message directly to the user for review. Similarly the obfuscation engine may also translate decoy messages into the original error and exception messages when the error and exception message handling framework performs its un obfuscation operations.

The obfuscation API provides a set of classes and methods that may be used to invoke the obfuscation features of the framework using various programming languages and operating environments. For instance the obfuscation API may provide bindings for several programming languages or environments including C C Java .Net Python and Perl as well as others. Using the bindings the framework may by integrated with or accessed by a wide range of applications and environments written in one or more of the several programming languages. The obfuscation API can provide standard interfaces to be used by the applications when accessing and harnessing the functionality of the framework . While described as having a plurality of programming language bindings some implementations of the obfuscation API and in turn the framework may only be compatible with a single programming language. Additionally the obfuscation API may include bindings for any appropriate programming language including languages others than those included above.

Additionally server includes interface for communicating with other computer systems over network such as one or more clients the honey pot system or other servers not shown in a client server or other distributed environment. Generally interface comprises logic encoded in software and or hardware in a suitable combination and operable to communicate with the network . More specifically interface may comprise software supporting one or more communication protocols such that the network or hardware is operable to communicate physical signals.

The network facilitates wireless or wireline communication between the server and any other local or remote computer such as the one or more clients or the honey pot system . Indeed while illustrated as a single network network may be a discontinuous network so long as at least a portion of the network may facilitate communications between senders and recipients. The network may be all or a portion of an enterprise or secured network. In some instances a portion of the network may be a virtual private network VPN merely between the server and the client across a wireline or wireless link. Such an example wireless link may be via 802.11a 802.11b 802.11g 802.20 WiMax or other types of wireless links. In other words the network encompasses any internal or external network networks sub network or combination thereof operable to facilitate communications between various computing components in and outside the environment . The network may communicate for example Internet Protocol IP packets Frame Relay frames Asynchronous Transfer Mode ATM cells voice video data and other suitable information between network addresses. The network may include one or more local area networks LANs radio access networks RANs metropolitan area networks MANs wide area networks WANs all or a portion of the Internet and or any other communication system or systems at one or more locations. In certain implementations the network may be a secure network associated with the enterprise and certain local or remote clients .

The clients may be any computer devices operable to connect or communicate with server or the network using a wireless or wireline connection. At a high level a client can include the GUI and in some instances a copy of the obfuscation software utility . The client comprises an electronic computing device operable to receive transmit process and or store any appropriate data associated with the application and the error and exception handling framework . There may be any number of clients communicably coupled to the server at any point in time. For example the environment may include two local clients as illustrated in a single client or any number of additional clients internal or external to the illustrated portion of the network . Further the client developer programmer and user sometimes referred to as an authorized user may be used interchangeably as appropriate without departing from the scope of this disclosure. For example the user may access a first instance of the application on a first client while a developer may use a second instance of the application on a second client . Moreover for ease of illustration each client is described in terms of being used by one user. More than one user may use one computer or one user may use multiple computers. The client can be a personal computer touch screen terminal workstation network computer kiosk wireless data port smart phone personal data assistant PDA one or more processors within these or other devices or any other suitable processing device. For example the client may be a computer that includes an input device such as a keypad touch screen mouse or other device that can accept information and an output device that conveys information associated with the operation of the server or the clients including digital data visual information or the GUI . Both the input device and the output device may include fixed or removable storage media such as a magnetic computer disk CD ROM or other suitable media to both receive input from and provide output to users of the clients through the display namely the GUI .

GUI is a graphical user interface operable to allow the user of the client to interface with at least a portion of environment for any suitable purpose such as to allow the client to interact with the application and or the error and exception handling framework . Generally the GUI provides the client with an efficient and user friendly presentation of data provided by or communicated within the system. In particular the GUI may provide users of the application with access to data stored within the memory . The GUI may include a plurality of user interface UI elements such as interactive fields pull down lists and buttons operable at the client . These UI elements may be related to a configuration UI associated with the error and exception handling framework as well as the functions of the application . In one implementation the GUI may provide a centralized and interactive display capable of presenting error and exception messages both original and decoy to users in response to one or more errors and exceptions occurring during execution of application or the configuration UI associated with the configuration API that allows authorized users to activate and or disable the framework as well as review add modify and delete the stored configuration data of the framework . In other implementations the GUI may provide a view displaying other relevant data and information associated with the error and exception handling framework and or the application . Moreover the term graphical user interface or GUI may be used in the singular or in the plural to describe one or more graphical user interfaces and each of the displays of a particular graphical user interface. Therefore the GUI can be any graphical user interface such as a generic web browser touch screen or command line interface CLI that processes information in the environment and efficiently presents the results to the user. The server can accept data from the clients via the web browser e.g. Microsoft Internet Explorer or Mozilla Firefox and return the appropriate HTML or XML responses using the network .

Further some or all of the clients may include an obfuscation software utility associated with the error and exception handling framework . In some instances and as illustrated in only some clients may include contain or be associated with the obfuscation software utility . Those may be limited to clients associated with authorized users such as developers programmers and technicians working on the development or maintenance of the application . For some clients including the obfuscation software utility and associated with two or more users each user of the client may have access to the obfuscation software utility . In other instances however only particular users of the client may have access to the utility . Such user access may require entry or association with the appropriate security or authorizing information such as the use or entry of authorized usemame password combinations or the possession of an appropriate private key.

In general the obfuscation software utility may be an agent daemon object service plug in or other software that allows the client to in some instances initially receive the original message from the framework and in other instances to translate decoy messages received from the error and exception handling framework . In some instances the utility may also be used to obfuscate original error and exception messages received at the client such as when the obfuscation functionality of the framework is inactive. By using the utility to obfuscate the original messages generated by the application or server users may test that the translations provided by the framework are accurate and sufficiently misleading and obfuscating. In particular instances the obfuscation software utility may perform similar functions to those performed by the error and exception handling framework . For instance the obfuscation software utility may independently access the set of obfuscation rules across network and perform at least a subset of the obfuscation functionality associated with the framework . Specifically the obfuscation software utility may allow users to translate one or more decoy messages that were previously obfuscated by the error and exception message handling framework back into their original message. The obfuscation software utility can be used when the framework is active and the client receives a decoy message through the GUI . The obfuscation software utility may be used for a plurality of purposes including examining the framework s output in response to a particular error or exception as well as other developmental and program debugging purposes. By studying the outputs developers may adjust the set of obfuscation rules to generate the appropriate decoy messages prior to deployment of the framework . Further the functionality and output of the framework can be reviewed and confirmed prior to deployment of the framework in new systems. In the particular implementation of the obfuscation software utility may be located only on clients associated with users authorized to interact with the framework such as developers programmers and technicians. Unless the framework is configured to display the original message only users with access to the obfuscation software utility are able to view the original error and exception messages generated by the application .

In some instances the obfuscation software utility may include components analogous to those described in the framework such as a rules engine for accessing and retrieving rules from the set of obfuscation rules and an obfuscation engine for obfuscating and un obfuscating error and exception messages. In those instances the obfuscation software utility may access the relevant information in memory using the network in a manner similar to the framework . In other instances the obfuscation software utility may access the framework through network using the components of the framework to obfuscate and un obfuscate messages received at GUI .

In alternative implementations the obfuscation software utility may be located in a component of or a portion of one or more of the previously described components of the error and exception handling framework . In those instances authorized users associated with a particular client can supply authorizing credentials i.e. a username and password a public key infrastructure PKI certificate use of a known IP address etc. to notify the error and exception message handling framework that the user associated with a particular instance of the application is authorized to view the original non translated error and exception messages. In those instances the authorizing credentials may be supplied to the error and exception handling framework which evaluates the credentials to determine whether the application s error and exception messages should be obfuscated for that particular user. This alternative may allow authorized users accessing the application from any location internal or external to environment to view or access the non obfuscated messages. In those instances each user may be considered unauthorized until the appropriate identifying credentials are presented to and verified by the error and exception handling framework .

Environment may further include a honey pot system . The honey pot system can be any resource such as a server or other computer with little or no production value. In other words the honey pot system is a system that should see minimal traffic as it is not associated with any legitimate activity. Any interaction with the honey pot system can thus be recognized as or assumed to be unauthorized or malicious activity. In particular instances the honey pot system may be either a low interaction or a high interaction honey pot system. Low interaction honey pot systems have limited interaction and normally work by emulating services and operating systems. High interaction honey pot systems are complex solutions involving real operating systems and applications. In general low interaction honey pot systems can capture limited information from attackers and unauthorized users while high interaction honey pot systems can capture detailed information. The honey pot system of may be used to capture information from unauthorized users attempting to exploit the information included within the decoy messages generated by the error and exception handling framework . For example the obfuscation rules may be defined such that the generated decoy messages include error information leading the unauthorized user to attempt to access information on the honey pot system when in fact the original error message describes information related to the server . When the unauthorized user accesses the honey pot system the functionality of the honey pot system can be used to trace and gather information on the unauthorized user s identity purpose and location. By combining the honey pot system with the error and exception handling framework the system of provides a system for securing error and exception messages generated by the application but also providing counter defenses against malicious users attempting to attack the application and its related system.

Once the message is analyzed at a set of obfuscation rules are accessed to determine the appropriate rules to be applied during the message s translation. In some instances the rules engine component illustrated in may access the obfuscation rules . While accessing the rules at it is determined whether a user defined obfuscation rule exists for the particular message received. In some examples the framework of accesses the set of obfuscation rules to determine if any users have overwritten or modified the default obfuscation rules for the type of error or exception message received. If no user defined rule exists for messages of the type received then process retrieves the default rule from the set of obfuscation rules at . Alternatively if a user defined rule does exist at the process retrieves the appropriate user defined rule to be used for translating the received message.

At the rule retrieved from the set of obfuscation rules is used to transform the original error or exception message into the obfuscated decoy message. The transformation operation may be performed by the obfuscation engine illustrated in using the appropriate rule received from the rules engine . At process determines the appropriate configuration for displaying the decoy message. For example the framework may access the set of configuration parameters to determine the display configuration of the framework . While operation of confirmed that the message should be obfuscated it is determined at whether the display configuration is set to display the obfuscated message alone i.e. the active state or whether the original message is to be displayed along with the obfuscated message i.e. the hybrid state . If at the process determines that the configuration is set to the active state then at only the obfuscated error or exception message is transmitted for display. On the other hand if configured to the hybrid state then at both the obfuscated message and the original message are transmitted for display. Once the process is complete processing continues at of .

If it is determined that the user is not authorized to view the original message then at the obfuscated error or exception message received at is presented to the user. The obfuscated message represents the decoy message meant to provide an authentic looking but misleading message to counter attempts to exploit information included in detailed error and exception messages. Once the obfuscated message has been presented process returns to to wait for a new error or exception message to be received. If the user is determined to be authorized to view the original message at process continues at where the set of relevant obfuscation rules are accessed to determine the rules used to transform the original message in the decoy or obfuscated message. For instance the obfuscation software utility may use its functionality to access the set of obfuscation rules located at the server . Similar to the rules engine described with regard to the obfuscation software utility accesses the rules and determines according to the obfuscated message received which rules were used to transform the original message into the current decoy message.

At the obfuscated message is transformed into the originally generated error or exception message using the appropriate rules identified during the accessing of the set of obfuscation rules. For example the obfuscation software utility based on the decoy message received at can identify the appropriate algorithm necessary to de obfuscate the decoy message at and then transform the obfuscated message into the originally generated message at . To transform the obfuscated message the obfuscation software utility may apply functionality similar to that described for the obfuscation engine of the error and exception handling framework . Once the decoy message has been transformed into the original message the original error message is presented to the user at . In some instances the obfuscation software utility may present the original error or exception message to the GUI of client for review by the user. After the original message has been presented process returns to and awaits receipt of the next obfuscated message.

In some alternative implementations of the obfuscated message may initially be presented to each user regardless of whether the user is authorized to view the original message. In those instances authorized users can but are not required to request the translation of the decoy message into the original message. Process may be initialized manually by a user wanting to view the original message. Further the obfuscation software utility may be used to enable a user to obfuscate messages at will for the purpose of investigating the outputs of the obfuscation process and for adjusting those messages before deployment of the framework in any system. In those instances the client may initially receive the original message at . Instead of determining whether the client is authorized to de obfuscate the message process determines whether the client is authorized to obfuscate the message. The rest of the steps may be similarly adapted such that the original message is translated by the obfuscation software utility into the appropriate decoy message allowing users to test the obfuscation functionality of the framework .

A number of embodiments of the present disclosure have been described. Nevertheless it will be understood that various modifications may be made without departing from the present disclosure. For example the present disclosure is not meant to be a server specific solution. Alternate and light weight versions of the error and exception message handling framework can be developed and deployed on various information systems and appliances such as kiosks cell phones mobile devices personal computers and so forth. While the delivery of the full server capability may not be achievable on certain platforms the delivery of the core functions for obfuscation can be adapted to alternative implementations. Further the internal algorithms for obfuscation and un obfuscation described with regard to the illustrated implementations may be modified or replaced. For example a modular set of obfuscation rules may be used to allow for enhanced portability of a particular set of obfuscation rules and functionality. Accordingly other embodiments are within the scope of the following claims.

