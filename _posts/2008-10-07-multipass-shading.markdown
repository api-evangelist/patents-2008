---

title: Multi-pass shading
abstract: An application binary interface includes a descriptor specifying a binary shader for each pass of a multi-pass shader. The application binary interface also includes a graphics state of a graphics object for each pass of the multi-pass shader. The graphics state for the first pass is an initial graphics state of the graphics object. The graphics state for each subsequent pass specifies a change from the graphics state of a previous pass. The application binary interface further includes parameters for the binary shaders. The application binary interface links the binary shaders together based on the parameters. Further, the parameters of the binary shaders may be modified at run time to configure the multi-pass shader. The binary shader of each pass is then executed based on the graphics state and parameters of the pass to render the graphics object.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08289325&OS=08289325&RS=08289325
owner: Sony Computer Entertainment America LLC
number: 08289325
owner_city: Foster City
owner_country: US
publication_date: 20081007
---
The present application is a continuation and claims the priority benefit of U.S. patent application Ser. No. 10 959 695 entitled Application Binary Interface for Multi Pass Shaders filed Oct. 6 2004 the disclosure of which is incorporated herein by reference.

The present invention relates generally to computer graphics. More particularly the present invention relates to systems and methods of controlling precompiled computer programs in computer graphics systems.

Prior art computer graphics systems typically execute an application program such as a computer video game program to generate graphics images for display on a computer screen. One type of prior art computer graphics system includes an on line compiler. In this type of computing system the computer graphics system compiles portions of the application program while executing other portions of the application program in real time. In this way a first portion of the application program executing in the computer graphics system can provide run time parameters for compiling a second portion of the application program.

In some situations a portion of the application program written specifically for graphics hardware in the computer graphics system can be simplified by using run time parameters during compilation. For instance a first portion of the application program may include a loop construct having a loop count parameter and the compiler can unroll the loop construct based on a value of the loop count parameter provided by a second portion of the application program at run time. Including a compiler in the computer graphics system however increases the cost and complexity of the graphics computer system.

Another type of prior art computer graphics system executes precompiled application programs. In this type of computer graphics system an application program is compiled into binary programs by using an off line compiler. The binary programs are then provided to the computer graphics system which executes the binary programs. Precompiling the application program avoids the need for an on line compiler but may complicate portions of the application program written specifically for graphics hardware in the computer graphics system. Specifically these portions of the application program may require fixed parameters at compile time.

One type of program typically found in an application program written for a computer graphics system is a shader. A shader generates visual effects for graphics objects. In many computer graphics systems the shader controls multiple texture units in the graphics hardware each of which can access samples from a texture. Moreover the shader generates colors for the graphics object based on the textures accessed from the texture units.

Some shaders require a greater number of textures for creating a visual effect than the number of texture units available in the graphics hardware of a computer graphics system. Consequently some compilers cannot compile these application programs for these computer graphics systems. Other compilers generate a multi pass shader by breaking up the task of creating a visual effect into passes such that each pass requires no more texture units than the number of texture units available in the computer graphics system. Each pass of the multi pass shader performs an operation on a graphics to generate a result. In this way a pass of the multi pass shader may perform an operation based on a result generated in a previous pass.

In those types of computer graphics systems that compile programs on line an application program can modify parameters of a shader to configure the shader at run time which may simplify the task of programming the shader. In contrast those computer graphics systems that rely on an off line compiler may need to fix some parameters of the shader at the time of compilation i.e. compile time . Consequently the shader i.e. the precompiled shader is not configurable at run time which may complicate the task of programming the shader.

In light of the above there exists a need to simplify the task of programming a multi pass shader. Additionally these exists a need for a precompiled multi pass shader that is configurable at run time.

An application binary interface addresses the need for simplifying the task of programming a multi pass shader. Further the application binary interface addresses the need for a precompiled multi pass shader that is configurable at run time. For each pass of a multi pass shader the application binary interface specifies a binary shader one or more parameters for the binary shader and a graphics state. The graphics state for a first pass specifies an initial graphics state of a graphics object and the graphics state of each subsequent pass specifies a change from the graphics state of a previous pass. The parameters link the binary shaders together so that a binary shader of a given pass can use a result generated by a binary shader of a previous pass. The binary application interface simplifies the task of programming the multi pass shader by specifying the binary shaders parameters for the binary shaders and graphics states for the multi pass shader in a binary file.

In one embodiment of the presently disclosed invention a method for rendering an image with a graphics processor driven by a multi pass shader program including a predetermined set of default steps is disclosed. Through the method the multi pass shader program is pre complied to generate binary execution code for execution by the graphics processor. A first parameter of the image is received. A first pass of the multi pass shader program is executed utilizing the binary execution code and the first parameter to obtain a first data value. At least one default step corresponding to a second pass of the multi pass shader program is modified based upon the first data value. A second pass of the multi pass shader is executed utilizing the binary execution code including the at least one default step as modified based upon the first data value to obtain a second data value. An operation is performed on the first data value and the second data value to obtain image rendering data. The image is then rendered a portion of the image based upon the image rendering data. The multi pass shader program effectuates a photorealistic effect in the portion of the image through the alteration of a color based on the angle and distance of an object with respect to a light source in the portion of the image.

In a second embodiment a further method for rendering an image with a graphics processor driven by a multi pass shader program including a predetermined set of default steps is provided. The method includes pre compiling the multi pass shader program to generate binary execution code for execution by the graphics processor receiving a first parameter of the image and executing a first pass of the multi pass shader program utilizing the binary execution code and the first parameter to obtain a first data value. A second parameter of the image is received and at least one default step of a second pass of the multi pass shader program is modified based upon the second parameter. A second pass of the multi pass shader program is executed utilizing the binary execution code including the at least one default step as modified based upon the second parameter to obtain a second data value and an operation is performed on the first data value and the second data value to obtain image rendering data. The image is rendered a portion of the image based upon the image rendering data. The multi pass shader program effectuates a photorealistic effect in the portion of the image through the alteration of a color based on the angle and distance of an object with respect to a light source in the portion of the image.

In a third claimed embodiment a graphics processor driven by a multi pass shader program including a predetermined set of default steps is disclosed. The graphics processor is configured to receive a first parameter of the image execute a first pass of the multi pass shader program utilizing binary execution code pre compiled by the multi pass shader and the first parameter to obtain a first data value. The processor is further configured to modify at least one default step of a second pass of the multi pass shader program based upon the first data value and execute a second pass of the multi pass shader program utilizing the binary execution code including the at least one default step as modified based upon the first data value to obtain a second data value. An image is rendered in response to execution of the graphics processor a portion of the image based upon the image rendering data. The multi pass shader program effectuates a photorealistic effect in the portion of the image through the alteration of a color based on the angle and distance of an object with respect to a light source in the portion of the image.

According to one embodiment of the present invention an application binary interface includes a descriptor for each pass of a multi pass shader specifying a binary shader for the pass. The application binary interface also includes one or more parameters for the binary shader of each pass. Further the application binary interface includes a graphics state of each pass. The graphics state of the first pass is an initial graphics state of a graphics object and the graphics state of each subsequent pass specifies a change from the graphics state of a previous pass. The parameters link the binary shaders together such that a binary shader of a given pass can use a result generated by a binary shader of a previous pass. The binary shader of each pass is then executed based on the graphics state and the parameters of the pass to render the graphics object.

In one embodiment the computer program is a video game program. In this embodiment the computer graphics system executes the binary program to render graphics images for the video game program. In another embodiment the computing system includes the computer graphics system .

In one embodiment the binary program includes computer program code stored on a compact disc read only memory CD ROM . In another embodiment the binary program includes computer program code stored on a digital versatile disc DVD . In still another embodiment the binary program includes computer program code stored on a portable memory device such as a flash memory device.

In one embodiment the graphics pipeline includes a plurality of texture units each of which can access one or more textures. In this embodiment each texture unit concurrently generates an intermediate value for each pixel based on the texture accessed by the texture unit and the raster unit combines the intermediate values of the pixel to generate the value of the pixel. In another embodiment the value of the pixel represents a color of the pixel.

In one embodiment the compiler compiles the shader to generate an expression for rendering a graphics object. Subsequently the compiler identifies subexpressions in the expression such that each subexpression can be executed by the graphics processor in a single pass. The compiler then generates the binary shader one or more parameters for the binary shader and the graphic state for each subexpression. In this embodiment the graphics states link the binary shaders together so that the graphics processor can execute the binary shaders to render the graphics object. For example a binary shader can store data in a location e.g. a texture unit or frame buffer in the graphics processor and a graphics state can specify that location. Another binary shader can then determine the location of the data based on the graphics state.

In another embodiment a graphics state can specify characteristics of the computer graphics system or a graphics image. For example the graphics state can specify a number of texture units available in the graphics processor . As another example the graphics state can specify a pixel size of the graphics image. In still another example the graphics state can specify a texture program to be executed by the graphics processor on the graphics object.

According to an exemplary embodiment the application includes computing instructions for invoking a shader via the application binary interface . In this embodiment the computing instructions include one or more variables each of which corresponds to a parameter in the application binary interface . Consequently the binary application can determine the value of a variable and bind the value of the variable to the corresponding parameter at run time. In this way the binary application configures a multi pass shader at run time based on the value of the variable.

In another embodiment the value of a variable is limited to a predetermined set of values in the application . In this embodiment the compiler generates a binary shader for each value in the predetermined set by setting the parameter to the value. In this way the parameter of each binary shader is fixed at compile time. The binary application then determines the value of the variable at run time to select the binary shader identified by the value of the variable. In this way the binary application configures a multi pass shader at run time based on the value of the variable.

A representation of a shader a multi pass shader and an exemplary application binary interface for the multi pass shader is depicted in Table 1. As depicted in Table 1 the shader is represented by the expression output cosine texture lookup x y in which x and y are input parameters and output represents an output value of the shader. The first pass of the multi pass shader is represented by the subexpression tmp texture lookup x y and the second pass is represented by the subexpression output cosine tmp . In the first pass x and y are input parameters and tmp represents an output value of the first pass. In the second pass tmp is an input parameter and output represents an output value of the second pass.

As is also depicted in table 1 the application binary interface specifies the first pass and the second pass of the multi pass shader. For the first pass a descriptor is represented by texture lookup which identifies a binary shader for the first pass. Further input parameters for the binary shader of the first pass are represented by x and y and an output parameter for the binary shader of the first pass is represented by tmp . The output parameter tmp represents an output value for the binary shader of the first pass. Further in this embodiment the output value for the binary shader of the first pass is a result for the first pass. Additionally an initial graphics state for a graphics object is represented by texture unit 1 which specifies that a first texture unit will access a texture for the binary shader of the first pass.

For the second pass a descriptor is represented by cosine which represents a binary shader for the second pass. Further an input parameter for the binary shader of the second pass is represented by tmp which is the output parameter of the first pass. Accordingly the input parameter tmp for the binary shader of the second pass represents the output value of the binary shader of the first pass. Additionally a graphics state of the second pass is represented by frame buffer which specifies that the result of the second pass will be stored in a frame buffer. In this way the graphics state of the second pass specifies a change from the graphics state of the first pass. Further the parameter tmp links the binary shader of the second pass to the binary shader of the first pass such that the result of the first pass is an input parameter for the binary shader of the second pass. The output parameter output represents an output value for the binary shader of the second pass. Further in this embodiment the output value for the binary shader of the second pass is a result for the second pass.

In step the compiler compiles the shader to generate the next binary shader and the next graphics state for the next pass of a multi pass shader. In one embodiment the compiler compiles the application together with the shader to generate the binary shader and the graphics state for this next pass. It is to be appreciated that step is optional in the present invention.

In another embodiment the compiler performs steps and concurrently to generate the binary shader and the graphics state for each pass of the multi pass shader. In a further embodiment the compiler also generates the binary application .

In step the compiler determines whether the multi pass shader includes additional passes. If the multi pass shader includes additional passes the method returns to step otherwise the method proceeds to step . It is to be appreciated that step is optional in the present invention.

In step the compiler generates a descriptor and one or more parameters for the first pass of the multi pass shader. The descriptor of the first pass specifies the first binary shader. In one embodiment the compiler binds at least one parameter of the first pass to the first binary shader at compile time. In another embodiment the binary application binds at least one parameter of the first pass to the first binary shader at run time. In still another embodiment the compiler binds some of the parameters of the first pass to the first binary shader at compile time and the binary application binds some of the parameters of the first pass to the first binary shader at run time.

In step the compiler generates a descriptor and one or more parameters for the next pass of the multi pass shader. The descriptor of this pass specifies the binary shader of this pass. In one embodiment the compiler binds at least one parameter of this pass to the binary shader of this pass at compile time. In another embodiment the binary application binds at least one parameter of this pass to the binary shader at run time. In still another embodiment the compiler binds some of the parameters of this pass to the binary shader at compile time and the binary application binds some of the parameters of this pass to the binary shader at run time.

In step the compiler determines whether the multi pass shader includes additional passes. If the multi pass shader includes additional passes the method returns to step otherwise the method ends. It is to be appreciated the application binary interface comprises the parameter s generated for each pass of the multi pass shader.

In one embodiment the compiler can perform steps concurrently to generate the parameters s for each pass of the multi pass shader. In another embodiment of the present invention the compiler can perform steps concurrently to generate the binary shader the graphics state and the parameter s for each pass of the multi pass shader. In a further embodiment the compiler can also generate the binary application . In still another embodiment the compiler can perform steps and concurrently. In yet another embodiment the compiler can perform steps and concurrently.

In step the binary application identifies the binary shader and the graphics state for a first pass of a multi pass shader based on the application binary interface . In one embodiment the descriptor of the first pass specifies the binary shader of the first pass. In this embodiment the binary application identifies the binary shader of the first pass based on the descriptor of the first pass. In another embodiment the descriptor specifies a plurality of binary shaders . In this embodiment the binary application selects the binary shader of the first pass from the plurality of binary shaders at run time based on one or more parameters for the binary shader of the first pass in the application binary interface .

In step the graphics processor executes the first pass of the multi pass shader by executing the first binary shader based on the first graphics state to generate a result for the first pass. In one embodiment the result for the first pass is a value of each pixel in the graphics object. In a further embodiment the graphics processor includes multiple texture units each of which can access a texture. In this further embodiment the graphics processor executes the first binary shader on the multiple texture units in the graphics processor to generate the value for each pixel based on the textures accessed by the texture units.

In step the binary application identifies the binary shader and the graphics state for the next pass of the multi pass shader based on the application binary interface . In one embodiment the descriptor of this pass specifies the binary shader of the pass. In this embodiment the binary application identifies the binary shader of this pass based on the descriptor of this pass. In another embodiment the descriptor specifies a plurality of binary shaders . In this embodiment the binary application selects the binary shader of this pass from the plurality of binary shaders at run time based on one or more parameters for the binary shader of this pass in the application binary interface . In a further embodiment some or all of the parameters for the binary shader of this pass may be a result of a previous pass.

In step the graphics processor executes this next pass of the multi pass shader by executing the binary shader based on the graphics state to generate a result for this pass. In one embodiment the result for this pass is a value of each pixel in the graphics object. In a further embodiment the graphics processor includes multiple texture units each of which can access a texture. In this further embodiment the graphics processor executes the binary shader on the multiple texture units in the graphics processor to generate the value for each pixel based on the textures accessed by the texture units.

In another embodiment the graphics processor generates the value of each pixel based on the value of the pixel generated in a previous pass. In this embodiment the graphics state of this pass specifies the texture unit storing the intermediate color of each pixel generated in the previous pass. Consequently the binary shader of the current pass can access the value of the pixel generated in the previous pass to generate the value of the pixel for this pass. In a further embodiment the value of the pixel generated for the last pass of the multi pass shader is a color of the pixel. In another further embodiment the graphics processor stores the value of each pixel for each pass into the frame buffer and then combines the values of each pixel to generate a color for the pixel in the frame buffer .

In step the binary application determines whether the multi pass shader includes an additional pass based on the application binary interface . If the multi pass shader includes an additional pass the method returns to step otherwise the method ends.

The embodiments discussed herein are illustrative of the present invention. As these embodiments of the present invention are described with reference to illustrations various modifications or adaptations of the methods and or specific structures described may become apparent to those skilled in the art. All such modifications adaptations or variations that rely upon the teachings of the present invention and through which these teachings have advanced the art are considered to be within the spirit and scope of the present invention. Hence these descriptions and drawings should not be considered in a limiting sense as it is understood that the present invention is in no way limited to only the embodiments illustrated.

