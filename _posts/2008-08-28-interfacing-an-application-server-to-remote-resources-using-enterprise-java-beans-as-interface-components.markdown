---

title: Interfacing an application server to remote resources using Enterprise Java Beans as interface components
abstract: A method for interfacing an application server with a resource can include the step of associating a plurality of Enterprise Java Beans (EJBs) to a plurality of resources, where a one-to-one correspondence exists between EJB and resource. An application server can receive an application request and can determine a resource for handling the request. An EJB associated with the determined resource can interface the application server to the determined resource. The request can be handled with the determined resource.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08112761&OS=08112761&RS=08112761
owner: International Business Machines Corporation
number: 08112761
owner_city: Armonk
owner_country: US
publication_date: 20080828
---
This application is a continuation of and accordingly claims the benefit of U.S. patent application Ser. No. 10 833 566 filed with the U.S. Patent and Trademark Office on Apr. 28 2004 now U.S. Pat. No. 7 448 041.

The present invention relates to the field of computer software and more particularly to telephony application servers accessing remote resources.

Speech engines can provide a multitude of different speech services like automatic speech recognition ASR services synthetic speech generation services transcription services language and idiom translation services and the like. Many of these speech engines are commonly written in a low level compiled language such as a C programming language for performance reasons. Services of a speech engine can often be accessed using a provided application programming interface API which can also be written in a low level compiled language. In a desktop environment where a speech engine is typically used by a single speech application the API serves as a simple and satisfactory interface to the speech engine.

In a distributed environment where multiple application servers can intermittently utilize services of a speech engine more robust interface mechanisms are needed. That is the management of one or more speech engines in a distributed server middleware environment can involve complex resource management issues. A few of these issues include life cycle management routing of requests to appropriate engines load balancing pooling and clustering of speech engines remote client server APIs and fail over strategies. Writing testing implementing and maintaining speech engine management routines can be excessively costly.

Worse often application server and or speech engine interfaces and related management software can be proprietary to the vender that provides the software. Accordingly each vender implements its own interface management routines. This is true for venders of application servers as well as venders of speech engines. Because of the different proprietary interfaces integrating speech engines and application servers to one another can be difficult and often inefficient. Further administrators often must have knowledge of and training using a wide gambit of different management interfaces.

What is needed is an interface technique for integrating an application server to a speech engine that standardizes and simplifies interface management functions. Better still if the interface technique functions in a platform independent fashion exploits infrastructure management capabilities of an application server and can be deployed across applications written in a multitude of programming languages.

The present invention provides a method a system and an apparatus for interfacing an application server to a resource using dedicated ENTERPRISE JAVA BEANS EJBs in accordance with the inventive arrangements disclosed here. More specifically EJBs can be established as interface components between the application server and the remotely located resources where the application server can be a JAVA 2 ENTERPRISE EDITION J2EE server and the remotely located resource can be a non J2EE resource. A one to one correspondence can be established between an EJB and a resource. Each resource can include a control interface that functions as an interface between the resource and the associated EJB. Communications with the control interface can utilize an application program interface API or other low level construct. For example when the resource is an Internal Business Machine IBM Automatic Speech Recognition Engine the control interface can use a Speech Manager API SMAPI . When the resource is an IBM TTS engine the control interface can use an Eloquence Command Interface ECI .

Interfacing an application server to resources using EJBs results in numerous advantages over conventional interfacing approaches. Many of these advantages result from functionality included within a J2EE platform. Advantages relating to lifecycle management include the creation of EJBs on demand discarding outdated EJBs and associated objects and the sharing of a pool of available EJBs among several clients. Interfacing using EJBs can also permit resource pooling such as connection pooling pooling of EJBs and pooling of threads. Further EJBs offers advantages in the areas of persistence security transaction management clustering concurrency scalability and the like. Using an interface solution that harnesses the core function of a remote resource while leveraging the management and infrastructure capabilities of a J2EE compliant application can result in enterprise solutions that are almost turnkey in nature.

One aspect of the present invention can include a method for interfacing an application server with a resource. The method can include the step of associating a plurality of Enterprise Java Beans EJBs to a plurality of resources where a one to one correspondence exists between EJBs and resources. An application server can receive an application request and can determine a resource for handling the request. An EJB associated with the determined resource can interface the application server to the determined resource. The request can then be handled with the determined resource.

It should be noted that the invention can be implemented as a program for controlling a computer to implement the functions described herein or a program for enabling a computer to perform the process corresponding to the steps disclosed herein. This program may be provided by storing the program in a magnetic disk an optical disk a semiconductor memory any other recording medium or distributed via a network.

Another aspect of the present invention can include a voice server system including a componentized telephone application server at least one speech engine and at least one interface EJB. The componentized telephone application server can include a J2EE voice server component. The speech engines can be located local from the componentized application server and or can be located in a location remote from the componentized application server. Each speech engine can perform at least one programmatic action for the voice server. The interface EJBs can each be configured to interface with the speech engines. Telephone application server requests can be conveyed to selected speech engines using EJBs as communication intermediaries between the server and the selected speech engines.

The J2EE application can include software representing a middleware solution. In one embodiment the J2EE application can systematically tie together two or more disparate applications in an enterprise one such application being the resource . For example the J2EE application server can include a WEBSPHERE APPLICATION SERVER WAS by IBM. It should be appreciated however that the J2EE application can include any J2EE compliant application and that the invention is not limited in this regard.

In one arrangement the J2EE application can be a distributed application containing of a multitude of dispersed yet communicatively linked components. For instance the J2EE application can include a component linked to a virtual machine through a gateway . A multitude of different communication mechanisms and protocols can be used by the component to communicate with the virtual machine . For example Internet Inter ORB Protocol IIOP ActiveX Remote Method Invocation RMI Common Object Request Broker Architecture CORBA Distributed Component Object Model DCOM and the like can be used to communicate between the component and the virtual machine .

The virtual machine can include a web container a Java Connector Architecture JCA container and an EJB container . The JCA container provides a java technology solution to the problem of connectivity between many application servers and enterprise information systems EISs . The JCA container can provide a well defined interface for components local to the J2EE Application . Accordingly the JCA container can function as an interface between component and beans within the EJB container .

The EJB container can include a plurality of interface beans . In one embodiment each interface bean can be a stateless session EJB. Each interface bean can be associated with a particular resource so that each type of resource has its own interface bean . Further a one to one correspondence can exist between instances of interface beans and processes handled by resources . That is for each process executed by a resource an instance of an interface bean is needed. Accordingly when N processes are being executed by a multitude of resources N instances of interface beans are needed.

The resource represents a software application that performs one or more programmatic actions for the virtual machine . For example the resource can include a speech engine like an automatic speech recognition ASR engine a text to speech TTS engine and the like. Additionally the resource can be written in a non J2EE language such as the C programming language. It should be appreciated however that the invention is not limited in this regard and that the resource can represent any software routine written in any language so long as that routine exposes at least one executable method to the J2EE Application .

The resource can include a control interface and interface . The control interface can include control code that interfaces the resource to an associated interface bean . For example the control interface can include a low level application program interface API such as an API written in the C programming language. In one embodiment when the resource is an IBM TTS engine the control interface can include the Eloquence Command Interface ECI . In another embodiment when the resource is an IBM ASR engine the control interface can include a Speech Manager API SMAPI .

Communications between the control interface and an associated interface bean across the network can occur using standard communication mechanisms such as Transmission Control Protocol Internet Protocol TCP IP Java Native Interface JNI media resource control protocol MRCP and the like.

The interface can be used as a gateway between resource and a remote component not directly linked to the J2EE application . The remote component can represent any software application library service data store and or routine remotely located from the resource . In one embodiment a task performed by the resource for the J2EE application can trigger a programmatic action within the component . For example the component can stream audio input to the resource responsive to an input request. In another embodiment the component can be a remote resource used by the resource . For example the component can provide a source for media output so that the resource can stream media output information to this media output source.

The telephone gateway can include hardware and or software that translates protocols and or routes calls between a telephone network such as a Public Switched Telephone Network PSTN and the application server . The telephone gateway can route calls using packet switched as well as circuit switched technologies. Further the telephone gateway can contain format converting components data verification components and the like. For example the telephone gateway can include a CISCO 2600 series router from Cisco Systems Inc. of San Jose Calif. a Cisco a CISCO 5300 series gateway a Digital Trunk eXtended Adapter DTXA an INTEL DIALOGIC R Adaptor from Intel Corporation of Santa Clara Calif. and the like.

The speech engines can include one or more automatic speech recognition engines one or more text to speech engines and other media resources. Particular ones of the speech engines can include one or more application program interfaces APIs for facilitating communications between the speech engine and external components. For example in one embodiment the ASR engine can include an IBM ASR engine with an API such as SMAPI. Selective ones of the speech engines can include a control interface for interfacing with the application server .

The application server can include an engine that functions as a reliable foundation for handling high volume secure transactions and Web services. In one embodiment the application server can be a WAS.

The application server can also include a multitude of component servers such as telephone server dialogue server and voice server communicatively linked via one or more Web servers . Each Web server can include one or more plug ins where each plug in can include routines for conveying data to particular component servers within the application server . Each of the component servers of the application server can be components implemented within a Virtual Machine such as virtual machines adhering to the J2EE specification or other similar and or derivative specification.

The telephone server can control the setup monitoring and tear down of phone calls. In one arrangement telephone server can include a web container and an EJB container . Moreover the telephone server can include a call control servlet servlet A a call control EJB Bean B and a call control interpreter EJB Bean C . The call control interpreter can interpret any call control markup such as call control ML Mark up Language call control eXtensible Mark up Language CCXML computer supported telephony application eXtensible Mark up Language CSTAXML and the like.

The dialogue server can manage tasks relating to call dialogue for the application server . In one arrangement the dialogue server can include web container and EJB container . Moreover the dialogue server can include a voice markup interpreter EJB Bean D which can interpret a markup such as VoiceXML. The dialogue server can also include a JCA container not shown that can function as an interface for the dialogue server .

The voice server can handle one or more speech services for the application server . In one arrangement the voice server can include web container and EJB container . Moreover the voice server can include a multitude of interface beans for interfacing with the speech engines . Each different type of speech engine can be associated with a different type of interface bean. For example an ASR interface bean Bean E can communicate with the ASR Engine . In another example a text to speech interface bean Bean F can interface with TTS engine .

It should be appreciated that the telephone server the dialogue server and the voice server can be arranged in a multitude of fashions and that the invention is not to be limited to the illustrative arrangement presented herein.

The system can also include a media converter and a resource connector . The media converter can be a communication intermediary for streaming speech data configured to resolve protocol issues between the telephone gateway and speech engines . Audio data can be streamed bi directionally between the telephone gateway and the speech engines as appropriate.

The resource connector can be a communication intermediary between the telephone gateway and the application server and or media converter that allocates resources for calls. In one embodiment the resource connector can normalize a telephony request into a request that is acceptable by the application server thereby providing a generic means for the telephone gateway to interface with the application server . For example if the application server communicates using HyperText Transfer Protocol HTTP messages the resource connector can convert a telephony request into an appropriate HTTP message. In another example if the application server utilizes a Session Initiation Protocol SIP the resource connector can convert a telephony request into an appropriate SIP message.

In operation a user can initiate a telephone call. The call can be conveyed through a telephone network and can be received by the telephone gateway . The telephone gateway can convey call information to the resource connector . The resource connector can initialize the media converter which can establish one or more media ports that can be used for the call. Identifiers which can be Uniform Resource Identifiers URI associated with the reserved media ports can be conveyed to the resource connector . The resource connector can convey call identifying information and media port identification information to the application server . Speech services can be triggered within the application server as appropriate. Speech services can require one or more speech engines to perform one or more tasks where a task is a response to a speech request. The type ASR or TTS of needed speech engine can be determined. Then a determination can be made that the needed type of speech engine is associated with interface bean E. Notably a one to one correspondence can exist between instances of interface beans and tasks handed by speech engines each speech engine interfacing with the application server via the bean instance.

The speech request can be conveyed to an interface bean E. If no instance of the bean E is available a new instance can be created. The create instance method can trigger the initialization of a control interface associated with bean E. Initialization of the control interface can include passing establishment parameters from bean E to the control interface . Once the control interface is initialized the request can be conveyed to the speech engine associated with bean E.

In one embodiment the request sent to the speech engine can require a media channel to be established between the speech engine and the media converter . In such an embodiment the request conveyed to the speech engine can include identifier s for one or more of the ports established by the media converter upon receiving the call. The speech engine can establish a connection with the media converter via the identified port. Thereafter audio signals can be conveyed along this connection without being routed through the application server that initiated the request. After the speech engine has executed the task a response message can be conveyed back to bean E from the speech engine . The response message can indicate the results of the request. Bean E can then convey the results to the appropriate components within the application server so that further actions can be taken as appropriate.

It should be appreciated that is just one illustrative embodiment in which the interface beans can be used. The subject matter disclosed herein can be utilized in conjunction with any system where a J2EE application interfaces with a remote resource. Accordingly the example of should not be construed as a limitation of the present invention.

It should also be appreciated that the arrangements shown in are for illustrative purposes only and that the invention is not limited in this regard. The functionality attributable to the components can be combined or separated in different manners than those illustrated herein. Further the components shown herein can reside within a different computing spaces than those illustrated in . For example the media converter if written in Java can reside within the application server . In such an example a specific location in which to dispose the media converter can be within a JCA container not shown of the voice server .

The method can begin in step by initializing the application and or the remote resources. Application initialization can include instantiating one or more EJBs such as stateless session EJBs that interface with the remote resources. Notably a remote resource associated with an instance of an EJB can be initialized at this step providing a one to one correspondence exists between each EJB instance and each process executed within a remote resource. In step the application can receive a request. For example when the application is a voice server the request can be a request for speech processing. In step the application can determine a type of resource required to handle the request. For example when a request is for a speech recognition task an ASR resource can be selected to handle the task. In another example when the request is for a text to speech conversion task a TTS resource can be selected. It should be noted that the application is not limited to a voice server application and that the resource is not limited to a speech engine. Indeed method can be used by any J2EE compliant application to connect to any remote resource.

In step the application can call an EJB associated with the determined resource. In step a determination can be made as to whether an instance of an EJB of the appropriate type is available within the EJB bean pool. If no suitable bean is available the method can proceed to step where an EJB instance can be created for interfacing with the resource. In step a control interface can be initialized for the resource. During initialization of the control interface parameters can be passed to the control interface by the associated EJB instance. In one embodiment an ejbCreate method can launch the control interface to the resource. Once step has completed the method can proceed from step to step . If a bean instance is available in step the method can proceed from step to step .

In step the EJB can pass the request to the control interface. In step the control interface can convey the request to the resource. In step the resource can execute appropriate actions responsive to the receipt of the request. In step the control interface can receive the results of the programmatic action. In step the control interface can return the results to the EJB. In step the EJB can convey the request results to the application. In one embodiment once the task is completed task specific variables within the EJB can be cleared and the EJB can be placed within a pool of available EJBs. The method can loop from step to step where additional requests can be received by the application which the application can process in turn.

The present invention can be realized in hardware software or a combination of hardware and software. The present invention can be realized in a centralized fashion in one computer system or in a distributed fashion where different elements are spread across several interconnected computer systems. Any kind of computer system or other apparatus adapted for carrying out the methods described herein is suited. A typical combination of hardware and software can be a general purpose computer system with a computer program that when being loaded and executed controls the computer system such that it carries out the methods described herein.

The present invention also can be embedded in a computer program product which comprises all the features enabling the implementation of the methods described herein and which when loaded in a computer system is able to carry out these methods. Computer program in the present context means any expression in any language code or notation of a set of instructions intended to cause a system having an information processing capability to perform a particular function either directly or after either or both of the following a conversion to another language code or notation b reproduction in a different material form.

This invention can be embodied in other forms without departing from the spirit or essential attributes thereof. Accordingly reference should be made to the following claims rather than to the foregoing specification as indicating the scope of the invention.

