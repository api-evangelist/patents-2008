---

title: Transparent integration of application components
abstract: Differing implementations associated with components of dissimilar execution environments are mediated to facilitate component integration. A host is provided to facilitate native interaction with foreign components by translating between native and foreign communications. Policies can be specified by either or both of a native and foreign component that control interaction.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09454410&OS=09454410&RS=09454410
owner: Microsoft Technology Licensing, LLC
number: 09454410
owner_city: Redmond
owner_country: US
publication_date: 20080304
---
Application software provides users with specific useful functionality. Computers and other processor based devices provide hardware that is harnessed by applications to effect such functionality. Accordingly application software converts computers into specialized machines that perform tasks prescribed by the application. Some applications have tight links to processing machines. Conventional client applications for instance are tied to particular computing platforms or hardware architectures. For example applications designed for platform X are not executable on platform Y and vice versa. Furthermore if it is desirous to employ an application on another machine even of the same platform the application needs to be installed thereon.

With the advent of the Internet and World Wide Web web informational access became much less platform dependent. The Internet provides a publically accessible interconnected network of computers. The web is a collection of documents that are available via the Internet. Web browsers are applications that provide a portal to the Internet and collections of accessible information in the form of websites. While browsers themselves are platform dependent the information and presentation thereof is platform independent. Accordingly individuals employing disparate machines can all view the same websites.

The web is continually evolving into a much richer computing environment. For the most part early versions of the web enabled users to do little more than retrieve published information. Today s version referred to by some as Web 2.0 provides a much more interactive experience. Among other things the network itself is now an application platform. Users are thus able to execute and interact with software applications entirely within web browsers replacing actual machine dependency with virtual machine dependency e.g. Java Virtual Machine JVM Common Language Runtime CLR . . . for instance.

Furthermore participation is encouraged in the evolving web. Rather than simply being a receiver of information of a particular form users are encouraged to contribute to network content and are able to control how information is provided to them. For example in addition to those provided by companies individuals author reusable application components or small programs such as widgets or gadgets that provide an interface for data interaction. Users can then select and employ one or more of these components e.g. stock ticker weather web feeds . . . for use on a desktop or within a browser e.g. my pages .

The following presents a simplified summary in order to provide a basic understanding of some aspects of the disclosed subject matter. This summary is not an extensive overview. It is not intended to identify key critical elements or to delineate the scope of the claimed subject matter. Its sole purpose is to present some concepts in a simplified form as a prelude to the more detailed description that is presented later.

Briefly described the subject disclosure pertains to transparent integration of application components. In accordance with one aspect of the disclosure a mechanism is provided to mediate differences between application communications and or protocols to facilitate interaction. According to another aspect of the disclosure this transformation translation mechanism is employed in conjunction with a marshalling mechanism to facilitate hosting of foreign application components that vary not only in execution context but also in implementation from native components. Among other things this enables arbitrary integration as well as nesting of application components with minimal developer effort.

To the accomplishment of the foregoing and related ends certain illustrative aspects of the claimed subject matter are described herein in connection with the following description and the annexed drawings. These aspects are indicative of various ways in which the subject matter may be practiced all of which are intended to be within the scope of the claimed subject matter. Other advantages and novel features may become apparent from the following detailed description when considered in conjunction with the drawings.

Systems and methods pertaining to integration of application components are described in detail hereinafter. Translation is performed to mediate differences between multiple application components associated with different execution environments or different versions of the same environment. This translation mechanism can be employed by a host to facilitate transparent integration of application components. For example foreign application interface calls can be exposed as native application calls and vice versa. In other words the host makes foreign calls look like native calls on both sides. Policies can also be set in place to control actions of application components in relation to one another.

Various aspects of the subject disclosure are now described with reference to the annexed drawings wherein like numerals refer to like or corresponding elements throughout. It should be understood however that the drawings and detailed description relating thereto are not intended to limit the claimed subject matter to the particular form disclosed. Rather the intention is to cover all modifications equivalents and alternatives falling within the spirit and scope of the claimed subject matter.

Referring initially to an application translation system is illustrated in accordance with an aspect of the disclosed subject matter. Interface component receives retrieves or otherwise acquires communications including calls messages events and the like from a first application component . The application component can be any software application that is executable by a first execution environment platform framework or context . For example the execution context can correspond to a particular machine an operating system or a virtual machine among other things. The communications of the first application component can be provided via a corresponding application programming interface API among other things. Upon acquisition the interface component can transmit the communications or calls to the translator component or otherwise make them available thereto.

The translator component translates or transforms communications from a first to a second protocol format or the like. For example it can map a call to an equivalent call in an alternate implementation. Here the translator component translates communications from the first application component to equivalent communications for a second application component . The second application component can be any application executable by a second execution environment platform framework or context similar the first application component . However the first and second application and respectively are different. Likewise the first and second environments and are different environments or different versions of the same environment. Stated differently the translator component mediates between different API level communications of the first application component and the second application component where the components are executable by different execution environments or different versions of the same environments.

Turning attention to an integrated application system is depicted in accordance with an aspect of the claimed subject matter. The system includes a native execution environment or context corresponding to an operating system or a virtual machine e.g. JVM CLR . . . amongst others. The native execution environment includes host component that facilitates hosting of a foreign application component within the environment and or an associated application not shown . In other words the host acts as an interface between the native execution environment and or supported applications and the foreign application component .

As illustrated the host component can employ a marshalling component to enable cross environment communication between the native execution environment and a foreign execution environment . For example the marshalling component can maintain caches between the two environments to ensure object identity and initiate or perform serialization. Further yet it is to be noted that since data types between the environments can be different the marshalling component can cast parameters to their correct data type when exchanging between execution environments. In this manner the marshalling component affords an execution environment bridge and the host component mediates specific communications such as events messages or API calls between the native execution environment and or a supported application and the foreign application component .

Consider web application components with a visual representation or controls for instance. The web offers many reusable web components to web developers. An example of this is a mapping control that comes with a full software development kit SDK that makes it easy for developers to reuse the mapping technology to display information relevant to their website. Further many companies release reusable web components in their field of expertise such as social bookmarking components e.g. Facebook and auction tracking components e.g. eBay among others. Since these components rely on web standards e.g. HTML JavaScript . . . whereas client applications usually employ higher level more structured languages e.g. C VB Java . . . there is a disconnect. Thus integration of such web components into rich client applications can be challenging.

To understand the difficulties further consider a specific client implementation such as the .NET framework. The current framework provides a mechanism through a WebBrowser class to host a browser window inside a rich client application. While the mechanism makes it easy to show a certain webpage inside a rich client application it does not make it easy for a developer to have the application code interact with a JavaScript API inside the webpage. The only way for a developer to communicate from a client application to the JavaScript API is by injecting JavaScript into the HTML page. This turns out to be difficult as it is not exposed in the class but only by peeking into the underlying COM interface as follows 

For people who figure out how to access this underlying call a number of additional hurdles are waiting for them. First the developer now requires knowledge of JavaScript. Second the developer needs to write complicated glue code in a client framework that generates JavaScript code to inject into a page which is quite complicated to test. Further this pattern only allows relatively simple JavaScript calls to be made. For example use of asynchronous patterns by application components where the component will execute a certain task possibly running on the remote server and then invoke a callback JavaScript function is not possible with such a browser call. Since this pattern only allows injection of JavaScript into the browser by passing a string there is no easy way to receive callbacks. More advanced techniques could be employed by developers such as by providing an ObjectForScripting but this burdens a developer even further as it requires knowledge of the COM programming model.

These and other hurdles make it extremely difficult for application developers to reuse web components. This issue is addressed by the subject disclosure by exposing web components to a client development framework in the same way as other native components. The host component can then manage interactions to ensure proper code injection and the like. As a result developer burden is substantially curtailed since developers need not learn JavaScript and write glue code.

Initialization component can be employed by the host component to spawn a foreign execution environment as well as initialize an application component to be hosted. Moreover the initialization component can establish a communication link between differing execution environments via a marshalling component for instance. Alert component can cooperate with initialization. In particular where asynchronous spawning of an execution environment is desired the component can provide an alert or notification when the environment has been loaded.

Interaction component controls interaction between a native execution environment and associated applications and a foreign application in both directions. In other words the interaction component can mediate protocol differences amongst the environment and a hosted application component.

The interaction component can also include a policy component that controls interactions as a function of one or more policies. In one instance a hosting environment or associated application can include polices that limit actions of hosted framework and or application. Consider for example an email application that employs a hosted mapping application such that contact locations can be displayed on a map. A policy can be specified by the application or environment as to what operations resources or the like are available to the hosted application and or what are not. The policy component can enforce such permissions and restrictions by monitoring and or controlling interactions. This provides a layer of security to ensure that hosting environments or applications are not compromised by hosted applications. Of course the hosted applications can also include policies that are enforced by the policy component .

The following exemplary code and description details one particular embodiment of a few aspects of the host component in accordance with the claimed subject matter. It is to be appreciated that the following is provided solely to facilitate clarity and understanding and is not meant to limit the scope of the claimed subject matter in any way. In one implementation the host component can be embodied as a set of application programming interfaces APIs defined as follows in the context of web controls or application components with visual representations.

A typical usage of this control can be as follows First a user defines or uses someone else s ComponentControl that describes a foreign web component 

As illustrated by the example integration of application components even web components into rich client applications is not only possible but also easy to do. The host component handles all the details behind the scenes so that the developer need not learn JavaScript or write complicated glue code. Further yet interaction is two ways between a native and foreign application.

It is to be noted that aspects of this disclosure are fully compositional as well as symmetrical. For example applications can be arbitrarily nested where a first application can host a second application that can host a third application which can host a forth application etc. Furthermore there are no limitations regarding direction of hosting. For example a Java application can be embedded within a .NET application or a .NET application can be embedded within a Java application.

Further yet an arbitrary number of controls can be hosted. For instance a client application can host two different web based mapping applications. Where an execution engine is common to more than one hosted application several possibilities exist. In particular the engine can be shared amongst a number of hosted applications and or applications can have their own instance of the engine. This can be one of the things specified by a policy or preference and enforced by a system.

Still further it is to be noted that aspects of the disclosure are applicable not only where different execution engines exist. Among other things there is applicability where there are different versions of the same execution engines. Suppose for instance there is a change to an engine such that an old version or portions of the old version do not run in the newest version. In this case such portions can be hosted by the new version utilizing the mechanisms described herein.

The aforementioned systems architectures and the like have been described with respect to interaction between several components. It should be appreciated that such systems and components can include those components or sub components specified therein some of the specified components or sub components and or additional components according to various permutations and combinations of the foregoing. Sub components could also be implemented as components communicatively coupled to other components rather than included within parent components. Further yet one or more components and or sub components may be combined into a single component to provide aggregate functionality. Communication between systems components and or sub components can be accomplished in accordance with either a push and or pull model. The components may also interact with one or more other components including those not specifically described herein for the sake of brevity but known by those of skill in the art.

Furthermore as will be appreciated various portions of the disclosed systems above and methods below can include or consist of artificial intelligence machine learning or knowledge or rule based components sub components processes means methodologies or mechanisms e.g. support vector machines neural networks expert systems Bayesian belief networks fuzzy logic data fusion engines classifiers . . . . Such components inter alia can automate certain mechanisms or processes performed thereby to make portions of the systems and methods more adaptive as well as efficient and intelligent. By way of example and not limitation the translator component can utilize such mechanisms to infer appropriate transformations given available contextual information.

In view of the exemplary systems described supra methodologies that may be implemented in accordance with the disclosed subject matter will be better appreciated with reference to the flow charts of . While for purposes of simplicity of explanation the methodologies are shown and described as a series of blocks it is to be understood and appreciated that the claimed subject matter is not limited by the order of the blocks as some blocks may occur in different orders and or concurrently with other blocks from what is depicted and described herein. Moreover not all illustrated blocks may be required to implement the methodologies described hereinafter.

Referring to a translation method is illustrated in accordance with an aspect of the claimed subject matter. At reference numeral a call message or event is received from an application programming interface API from a first framework environment or the like. At numeral communication from the first API is transformed or translated into an equivalent communication e.g. call message event . . . for a second API of a second framework environment or the like. While transformation can correspond to a direct translation more complicated transformations are also contemplated. By way of example if a first API and related framework supports events and event handlers and the second API does not recognize events the transformation can construct functions or the like that encapsulate events.

Referring to a method of application hosting is depicted in accordance with an aspect of the claimed subject matter. At reference numeral a foreign application component is defined. Alternatively a previously defined foreign application component can be reused. At numeral a host is instantiated. The host can correspond to a native application component that hosts the foreign application component. At reference the foreign component to be hosted is initialized. Initialization can comprise setting up communication between a native and foreign execution engine framework environment or the like initiating loading of the foreign execution engine and initiating execution of the foreign application component within its execution engine. At numeral a determination is made as to whether loading of the foreign application component has completed. If no more time is provided and the method continues to loop until loading is complete. Of course the method can time out and generate an error after a predetermined period of time indicating that the component could not be loaded. Once loading is complete the method continues at where the foreign application component is employed.

As used herein an execution environment engine framework or the like refers to a context in which instructions are executed interpreted to perform an action. Execution environments can include but are not limited to virtual machine environments such as a Java Virtual Machine JVM Parrot or the Common Language Runtime CLR native environments such as native machine instructions a component object model environment such as COM and XPCOM or a scripting environment such as JavaScript or VBScript. One will appreciate that the execution environments can be context dependent such as treating scripting environments differently depending on where the scripts are executed e.g. web browser vs. server side vs. specific application software .

Often an execution environment will have one or more programming languages associated with it e.g. Java with the Java Virtual Machine or C and Visual Basic on the Common Language Runtime although some programming languages can be compiled interpreted to result in code that operates in more than one execution environment e.g. C to COM and native computer instructions . It is to be appreciated that different execution environments can refer to dissimilar types of execution environments e.g. scripting and virtual machine environments or can include different versions of the same execution environment.

Each execution environment can have one or more application programming interfaces APIs associated with it. These APIs can be part of the execution environment itself e.g. named interfaces of a component object model or APIs of a programming language associated with the execution environment.

The word exemplary or various forms thereof are used herein to mean serving as an example instance or illustration. Any aspect or design described herein as exemplary is not necessarily to be construed as preferred or advantageous over other aspects or designs. Furthermore examples are provided solely for purposes of clarity and understanding and are not meant to limit or restrict the claimed subject matter or relevant portions of this disclosure in any manner. It is to be appreciated that a myriad of additional or alternate examples of varying scope could have been presented but have been omitted for purposes of brevity.

As used herein the term inference or infer refers generally to the process of reasoning about or inferring states of the system environment and or user from a set of observations as captured via events and or data. Inference can be employed to identify a specific context or action or can generate a probability distribution over states for example. The inference can be probabilistic that is the computation of a probability distribution over states of interest based on a consideration of data and events. Inference can also refer to techniques employed for composing higher level events from a set of events and or data. Such inference results in the construction of new events or actions from a set of observed events and or stored event data whether or not the events are correlated in close temporal proximity and whether the events and data come from one or several event and data sources. Various classification schemes and or systems e.g. support vector machines neural networks expert systems Bayesian belief networks fuzzy logic data fusion engines . . . can be employed in connection with performing automatic and or inferred action in connection with the subject innovation.

Furthermore all or portions of the subject innovation may be implemented as a method apparatus or article of manufacture using standard programming and or engineering techniques to produce software firmware hardware or any combination thereof to control a computer to implement the disclosed innovation. The term article of manufacture as used herein is intended to encompass a computer program accessible from any computer readable device or media. For example computer readable media can include but are not limited to magnetic storage devices e.g. hard disk floppy disk magnetic strips . . . optical disks e.g. compact disk CD digital versatile disk DVD . . . smart cards and flash memory devices e.g. card stick key drive . . . . Additionally it should be appreciated that a carrier wave can be employed to carry computer readable electronic data such as those used in transmitting and receiving electronic mail or in accessing a network such as the Internet or a local area network LAN . Of course those skilled in the art will recognize many modifications may be made to this configuration without departing from the scope or spirit of the claimed subject matter.

In order to provide a context for the various aspects of the disclosed subject matter as well as the following discussion are intended to provide a brief general description of a suitable environment in which the various aspects of the disclosed subject matter may be implemented. While the subject matter has been described above in the general context of computer executable instructions of a program that runs on one or more computers those skilled in the art will recognize that the subject innovation also may be implemented in combination with other program modules. Generally program modules include routines programs components data structures etc. that perform particular tasks and or implement particular abstract data types. Moreover those skilled in the art will appreciate that the systems methods may be practiced with other computer system configurations including single processor multiprocessor or multi core processor computer systems mini computing devices mainframe computers as well as personal computers hand held computing devices e.g. personal digital assistant PDA phone watch . . . microprocessor based or programmable consumer or industrial electronics and the like. The illustrated aspects may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. However some if not all aspects of the claimed subject matter can be practiced on stand alone computers. In a distributed computing environment program modules may be located in both local and remote memory storage devices.

With reference to an exemplary environment for implementing various aspects disclosed herein includes a computer e.g. desktop laptop server hand held programmable consumer or industrial electronics . . . . The computer includes a processing unit a system memory and a system bus . The system bus couples system components including but not limited to the system memory to the processing unit . The processing unit can be any of various available microprocessors. It is to be appreciated that dual microprocessors multi core and other multiprocessor architectures can be employed as the processing unit .

The system memory includes volatile and nonvolatile memory. The basic input output system BIOS containing the basic routines to transfer information between elements within the computer such as during start up is stored in nonvolatile memory. By way of illustration and not limitation nonvolatile memory can include read only memory ROM . Volatile memory includes random access memory RAM which can act as external cache memory to facilitate processing.

Computer also includes removable non removable volatile non volatile computer storage media. illustrates for example mass storage . Mass storage includes but is not limited to devices like a magnetic or optical disk drive floppy disk drive flash memory or memory stick. In addition mass storage can include storage media separately or in combination with other storage media.

The computer also includes one or more interface components that are communicatively coupled to the bus and facilitate interaction with the computer . By way of example the interface component can be a port e.g. serial parallel PCMCIA USB FireWire . . . or an interface card e.g. sound video network . . . or the like. The interface component can receive input and provide output wired or wirelessly . For instance input can be received from devices including but not limited to a pointing device such as a mouse trackball stylus touch pad keyboard microphone joystick game pad satellite dish scanner camera other computer and the like. Output can also be supplied by the computer to output device s via interface component . Output devices can include displays e.g. CRT LCD plasma . . . speakers printers and other computers among other things.

The system includes a communication framework that can be employed to facilitate communications between the client s and the server s . The client s are operatively connected to one or more client data store s that can be employed to store information local to the client s . Similarly the server s are operatively connected to one or more server data store s that can be employed to store information local to the servers .

Client server interactions can be utilized with respect with respect to various aspects of the claimed subject matter. For instance rich client applications can host web application components in one embodiment. Accordingly a client can communicate with a server or other client across framework to acquire and or interact with a remote web application such as a mapping application or weather widget for instance. Further yet web application components can host other web applications employing the framework .

What has been described above includes examples of aspects of the claimed subject matter. It is of course not possible to describe every conceivable combination of components or methodologies for purposes of describing the claimed subject matter but one of ordinary skill in the art may recognize that many further combinations and permutations of the disclosed subject matter are possible. Accordingly the disclosed subject matter is intended to embrace all such alterations modifications and variations that fall within the spirit and scope of the appended claims. Furthermore to the extent that the terms includes contains has having or variations in form thereof are used in either the detailed description or the claims such terms are intended to be inclusive in a manner similar to the term comprising as comprising is interpreted when employed as a transitional word in a claim.

