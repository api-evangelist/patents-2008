---

title: Floating point texture filtering using unsigned linear interpolators and block normalizations
abstract: Apparatus and systems utilizing fixed point filtering to perform floating point texture filtering. A texture pipe unit consisting of a texture addressing unit, texture cache unit, and texture filter unit accepts texture requests for a specified pixel from a resource and returns formatted bilinear filtered results based on the specific pixel's corresponding four texels. The texture filtering unit consists of a pre-formatter module, interpolator module, accumulator module and a format module. The pre-formatter module accepts texel data in a floating point or fixed point format. However, if the data is in a floating point format the pre-formatter module converts the floating point data into a normalized fixed point data format whereby the interpolator module may perform its bilinear interpolator functions using standardized fixed point systems and apparatus without necessitating the use of floating point arithmetic units. A method utilizing fixed point filtering to perform floating point texture filtering is also presented.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08502832&OS=08502832&RS=08502832
owner: Advanced Micro Devices, Inc.
number: 08502832
owner_city: Sunnyvale
owner_country: US
publication_date: 20080530
---
The present invention is generally directed to computing operations performed in computing systems and more particularly directed to graphics processing tasks performed in computing systems.

A graphics processing unit GPU is a complex integrated circuit that is specially designed to perform graphics processing tasks. A GPU may for example execute graphics processing tasks required by an end user application such as a video game application. In such an example there are several layers of software between the end user application and the GPU.

The end user application communicates with an application programming interface API . An API allows the end user application to output graphics data and commands in a standardized format rather than in a format that is dependent on the GPU. Several types of APIs are commercially available including Direct developed by Microsoft Corp. and OpenGL developed by Silicon Graphics Inc. The API communicates with a driver. The driver translates standard code received from the API into a native format of instructions understood by the GPU. The driver is typically written by the manufacturer of the GPU. The GPU then executes the instructions from the driver.

Typically GPUs also support a concept known as texture filtering. Texture filtering is a method used to determine the texture color for a texture mapped pixel through the use of the colors of nearby pixels of the texture or texels. The process is also referred to as texture smoothing or texture interpolation. However high image quality texture filtering requires a high degree of computational complexity.

As an aid to reduce the amount of data needed during texture filtering a concept of mip mapping is used whereby multiple bitmap versions of the image are stored each version being encoded and stored at a reduced level of detail. In this manner as the view of the image is minimized such as moving away from the image the displayed image is a version with a reduced level of detail. Because of this reduction in detail texture filtering can be calculated on a version of the image with a reduced level of detail thereby not increasing the required level of computation as an image is minimized.

The simplest form of texture filtering is referred to as nearest neighbor interpolation which simply returns the color of the texel closest to the center of the requested pixel. While this method requires minimal computation it also results in a large amounts of blockiness during magnification as well as aliasing and shimmering during any type of minification. Nearest neighbor interpolation can also be used with mip mapping using the nearest mip map level according to the distance from the image. This approach aids in the reduction of aliasing and shimmering but does not solve blockiness.

In order to solve some of these problems a bilinear filtering concept is employed whereby instead of relying upon a single texel the four nearest texels to the pixel in question are sampled and the colors of each texel are combined by a weighted average according to distance. This technique results in a smoothing gradient of color change from one texel to the next instead of a sudden change when a pixel center crosses a texel boundary.

However where the rendering of an image changes from one mip map level to another there tends to be a very noticeable change in the quality at the boundaries between the levels which is not solved using bilinear filtering. In this situation the concept of trilinear filtering is used which involves doing a texture lookup and bilinear filtering on the two closest mip map levels and then performing a linear interpolation of the results. This results in a smooth degradation of texture quality as distance from the viewer increases rather than a series of steps.

Anisotropic filtering is typically the highest quality filtering available in consumer based three dimensional graphics cards. Bilinear and trilinear filtering results are correct only when the viewer is looking at the texture perpendicularly. Under these techniques an object will appear blurry when the textured surface is at an oblique angle. Anisotropic filtering corrects this error by sampling in the correct trapezoid shape according to the viewing angle and then trilinearly filtering the results.

While the more sophisticated bilinear trilinear and anisotropic filtering techniques produce better results they require higher amounts of computation. In addition where the dynamic range of sampled texels is large the required computations typically are done using floating point arithmetic solutions in order to preserve data quality. Floating point calculations require the use of floating point arithmetic logic units within a GPU which increases the associated cost and area required in a circuit to implement.

What are needed therefore are systems and or methods to alleviate the aforementioned deficiencies. Particularly what is needed is a quality efficient and cost effective approach to perform bilinear trilinear and anisotropic filtering without the need for floating point arithmetic calculations and the associated floating point arithmetic units.

Consistent with the principles of the present invention as embodied and broadly described herein the present invention includes a texture filter system comprising a pre formatter module an interpolator module an accumulator module and a format module. The pre formatter module is configured to receive texel data and convert it to a normalized fixed point format. The interpolator module is configured to perform an interpolation on the normalized fixed point texel data from the pre formatter module and generate re normalized floating point texel data. The accumulator module is configured to accumulate floating point texel data from the interpolator module to achieve the desired level of bilinear trilinear and anisotropic filtering. The format module is configured to convert texel data from the accumulator module into a standard floating point representation.

In an embodiment of the invention the pre formatter module is configured to receive texel data in a floating point format. In this embodiment the pre formatter module analyzes the data for exponent deltas and performs a block normalization on the incoming floating point data in order to generate a set of fixed point texel data relative to a common largest exponent. The interpolator module is configured to perform one or more interpolations utilizing fixed point calculations from which the results are accumulated in the accumulator module. The format module is configured to convert the accumulated texel data in the accumulator module into a standard floating point representation.

In another embodiment the pre formatter module is configured to receive texel data in a fixed point format. The interpolator module is configured to perform one or more interpolations utilizing fixed point calculations from which the results are accumulated in the accumulator module. The format module is configured to convert the accumulated texel data in the accumulator module into a standard floating point representation.

In yet another embodiment the pre formatter module is configured to receive texel data in a signed or unsigned format.

Further embodiments features and advantages of the invention as well as the structure and operation of the various embodiments of the invention are described in detail below with reference to accompanying drawings.

The present invention relates to a texture filter with the ability to receive texel data in multiple formats including floating point and fixed point in a signed or unsigned format. In embodiments of this invention floating point texel data is converted and normalized into a fixed point format. Once the texel data is in a fixed point format then the interpolations can be preformed using fixed point data calculations. In this manner the implementation of the functionality within the interpolator module does not necessitate the use of floating point arithmetic logic. After the interpolations are accumulated in the accumulator module the format module converts the texel data into a standard floating point representation.

While specific configurations arrangements and steps are discussed it should be understood that this is done for illustrative purposes only. A person skilled in the pertinent art s will recognize that other configurations arrangements and steps may be used without departing from the spirit and scope of the present invention. It will be apparent to a person skilled in the pertinent art s that this invention may also be employed in a variety of other applications.

It is noted that references in the specification to one embodiment an embodiment an example embodiment etc. indicate that the embodiment described may include a particular feature structure or characteristic but every embodiment may not necessarily include the particular feature structure or characteristic. Moreover such phrases are not necessarily referring to the same embodiment. Further when a particular feature structure or characteristic is described in connection with an embodiment it would be within the knowledge of one skilled in the art to incorporate such a feature structure or characteristic in connection with other embodiments whether or not explicitly described.

While the present invention is described herein with reference to illustrative embodiments for particular applications it should be understood that the invention is not limited thereto. Those skilled in the art with access to the teachings provided herein will recognize additional modifications applications and embodiments within the scope thereof and additional fields in which the invention would be of significant utility.

The system of illustrates the components comprising the texture filter system according to an embodiment of the present invention. Texture filter system receives texel data from texture cache system and after the data is processed presents the texel data back to the requesting resource . Texture filter system comprises a pre formatter module an interpolator module an accumulator module and a format module . Pre formatter module is configured to receive texel data and performs a block normalization thereby generating normalized fixed point texel data. Interpolator module receives the normalized fixed point texel data and performs one or more interpolations each of which are accumulated in accumulator module to achieve the desired level of bilinear trilinear and anisotropic texture filtering. Format module converts the accumulated texel data from accumulator module to a standard floating point representation for the requesting resource .

In one embodiment pre formatter module receives a block of texel data which is comprised of floating point texel data representing four texels. In this case where pre formatter module receives a block of floating point texel data extractor module will extract the mantissas exponents and signs associated with each texel. The exponents of the floating point texels are received by maximum delta module . Maximum delta module provides two functions. First within the block of floating point texels received by pre formatter module the maximum delta module identifies the exponent of maximum value most positive . Secondly maximum delta module calculates the difference between this maximum exponent and the exponent for each floating point texel value. Then for each floating point texel mantissa mantissa shifter module normalizes the mantissa with respect to the exponent of maximum value. This normalization is accomplished by shifting the mantissa right by the number of bit positions equal to the respective for that texel exponent delta calculated by maximum delta module . In addition if a floating point texel mantissa is negative then two s compliment module will convert the shifted negative floating point texel mantissa into an unsigned two s compliment value. In summary pre formatter module in the case of receiving a block of floating point texel data will generate a block of unsigned normalized mantissa values along with the corresponding maximum block exponent value .

Pre formatter module of also identifies when an invalid texel value is encountered including an infinity undefined and negative zero. In addition pre formatter module will merge a hidden into the mantissa for normalized floating point texel data that does not explicitly represent the leading .

Interpolator module of is configured to perform multiple interpolations which may be necessary to achieve various levels of texture filtering including but not limited to bilinear trilinear and anisotropic. Accumulator module accumulates the results of multiple interpolations in order to produce the desired level of filtering.

Format module is configured to convert floating point texel data from the accumulator module into a desired standard floating point format such as the IEEE Float representation.

In step the interpolator module performs interpolation operations on the normalized block of fixed point texel data. In step the interpolator module generates re normalized floating point texel data based from the interpolation operations and the maximum exponent identified in the pre formatting process. In step the accumulating module accumulates re normalized data from the interpolator module with the ability to produce bilinear trilinear and anisotropic filter data. In step the format module formats the accumulated re normalized texel data into a standard floating point representation.

The functions processes systems and methods outlined in and can be implemented in software firmware or hardware or using any combination thereof. If programmable logic is used such logic can execute on a commercially available processing platform or a special purpose device.

As would be apparent to one skilled in the relevant art based on the description herein embodiments of the present invention can be designed in software using a hardware description language HDL such as for example Verilog or VHDL. The HDL design can model the behavior of an electronic system where the design can be synthesized and ultimately fabricated into a hardware device. In addition the HDL design can be stored in a computer product and loaded into a computer system prior to hardware manufacture.

It is to be appreciated that the Detailed Description section and not the Summary and Abstract sections is intended to be used to interpret the claims. The Summary and Abstract sections may set forth one or more but not all exemplary embodiments of the present invention as contemplated by the inventor s and thus are not intended to limit the present invention and the appended claims in any way.

The present invention has been described above with the aid of functional building blocks illustrating the implementation of specified functions and relationships thereof. The boundaries of these functional building blocks have been arbitrarily defined herein for the convenience of the description. Alternate boundaries can be defined so long as the specified functions and relationships thereof are appropriately performed.

The foregoing description of the specific embodiments will so fully reveal the general nature of the invention that others can by applying knowledge within the skill of the art readily modify and or adapt for various applications such specific embodiments without undue experimentation without departing from the general concept of the present invention. Therefore such adaptations and modifications are intended to be within the meaning and range of equivalents of the disclosed embodiments based on the teaching and guidance presented herein. It is to be understood that the phraseology or terminology herein is for the purpose of description and not of limitation such that the terminology or phraseology of the present specification is to be interpreted by the skilled artisan in light of the teachings and guidance.

While various embodiments of the present invention have been described above it should be understood that they have been presented by way of example only and not limitation. It will be apparent to persons skilled in the relevant art that various changes in form and detail can be made therein without departing from the spirit and scope of the invention. Thus the breadth and scope of the present invention should not be limited by any of the above described exemplary embodiments but should be defined only in accordance with the following claims and their equivalents.

