---

title: Automated microcode detected error index generation
abstract: A method, system and computer program product for logging and identifying microcode errors in a computing environment is provided. Each of a plurality of errors in the microcode is logged using a plurality of error logging commands. Each of the plurality of errors is indexed to generate a plurality of indexed errors. A plurality of unique keys is associated to each of the plurality of indexed errors. A master index of the plurality of unique keys is created.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07865783&OS=07865783&RS=07865783
owner: International Business Machines Corporation
number: 07865783
owner_city: Armonk
owner_country: US
publication_date: 20080522
---
The present invention relates in general to computers and more particularly to a method system and computer program product for logging and identifying microcode errors in a computing environment.

Computers and accompanying computer processing in various implementations are commonplace in today s society. Processing hardware such as central processing units CPUs are found in a variety of settings. Microprogramming i.e. writing microcode is a method that may be employed to implement machine instructions for hardware such as a CPU relatively easily often using less hardware than with other methods. Microcode provides a set of detailed and rudimentary lower level routines that control and sequence the actions needed to execute particular instructions. In addition the microcode may also control and sequence actions needed to decode the instructions.

CPU microcode is normally written by the CPU engineer during the design phase. It is generally not meant to be visible or changeable by a normal programmer one of the reasons being that microcode by design can be dramatically changed with a new microarchitecture generation. Machine code often retains backwards compatibility. Microcode has often been used to let one microarchitecture emulate another usually more powerful architecture. In some cases use of the term microcode may refer more generically to firmware closely associated with the control of other hardware devices such as hard disk drives HDDs .

In the development of microcode developers across many code components typically use a common function to log errors. When a failure occurs these Microcode Detected Errors MDE are intended to provide service people with an indication of what code component failed. In some computing environments however the number of registered errors in the common logging utility has not grown with the increase in code components. As a result there is wide spread duplication in errors being logged by different components. In short the error identifiers for an MDE no longer uniquely identify a code component much less a particular position in microcode.

In light of the foregoing a need exists for a mechanism by which developers can log errors that can later be uniquely identified without each developer having to coordinate individual identification elements within their code. Furthermore other desirable features and characteristics of the present invention will become apparent from the subsequent detailed description of the invention and the appended claims taken in conjunction with the accompanying drawings and this background of the invention.

Accordingly in one embodiment by way of example only a method for logging and identifying microcode errors in a computing environment is provided. Each of a plurality of errors in the microcode is logged using a plurality of error logging commands. Each of the plurality of errors is indexed to generate a plurality of indexed errors. A plurality of unique keys is associated to each of the plurality of indexed errors. A master index of the plurality of unique keys is created.

In an additional embodiment a system for logging and identifying microcode errors in a computing environment is provided. An Automated Microcode Detected Error MDE Index Generator AMIG is operable on the computing environment. The AMIG is adapted for indexing each of a plurality of errors in the microcode to generate a plurality of indexed errors associating a plurality of unique keys to each of the plurality of indexed errors and creating a master index of the plurality of unique keys.

In still another embodiment again by way of example only a computer program product for logging and identifying microcode errors in a computing environment is provided. The computer program product comprises a computer readable storage medium having computer readable program code portions stored therein. The computer readable program code portions comprise a first executable portion for logging each of a plurality of errors in the microcode using a plurality of error logging commands a second executable portion for indexing each of the plurality of errors to generate a plurality of indexed errors a third executable portion for associating a plurality of unique keys to each of the plurality of indexed errors and a fourth executable portion for creating a master index of the plurality of unique keys.

With reference now to the figures and in particular with reference to exemplary diagrams of data processing computing environments are provided in which illustrative embodiments may be implemented. It should be appreciated that are only exemplary and are not intended to assert or imply any limitation with regard to the environments in which different embodiments may be implemented. Many modifications to the depicted environments may be made.

With reference now to the figures depicts a pictorial representation of a network of data processing systems in which illustrative embodiments may be implemented. Network data processing system is a network of computers in which embodiments may be implemented. Network data processing system contains network which is the medium used to provide communications links between various devices and computers connected together within network data processing system . Network may include connections such as wire wireless communication links or fiber optic cables.

In the depicted example server and server connect to network along with storage unit . In addition clients and connect to network . These clients and may be for example personal computers or network computers. In the depicted example server provides data such as boot files operating system images and applications to clients and . Clients and are clients to server in this example. Network data processing system may include additional servers clients and other devices not shown.

In the depicted example network data processing system is the Internet with network representing a worldwide collection of networks and gateways that use the Transmission Control Protocol Internet Protocol TCP IP suite of protocols to communicate with one another. At the heart of the Internet is a backbone of high speed data communication lines between major nodes or host computers consisting of thousands of commercial governmental educational and other computer systems that route data and messages. Of course network data processing system also may be implemented as a number of different types of networks such as for example an intranet a local area network LAN or a wide area network WAN . is intended as an example and not as an architectural limitation for different embodiments.

With reference now to a block diagram of a data processing system is shown in which illustrative embodiments may be implemented. Data processing system is an example of a computer such as server or client in in which computer usable code or instructions implementing the processes may be located for the illustrative embodiments.

In the depicted example data processing system employs a hub architecture including a north bridge and memory controller hub MCH and a south bridge and input output I O controller hub ICH . Processing unit memory and graphics processor are coupled to north bridge and memory controller hub . Processing unit may contain one or more processors and even may be implemented using one or more heterogeneous processor systems. Graphics processor may be coupled to the MCH through an accelerated graphics port AGP for example.

In the depicted example local area network LAN adapter is coupled to south bridge and I O controller hub and audio adapter keyboard and mouse adapter modem read only memory ROM universal serial bus USB ports and other communications ports and PCI PCIe devices are coupled to south bridge and I O controller hub through bus and hard disk drive HDD and CD ROM drive are coupled to south bridge and I O controller hub through bus . PCI PCIe devices may include for example Ethernet adapters add in cards and PC cards for notebook computers. PCI uses a card bus controller while PCIe does not. ROM may be for example a flash binary input output system BIOS . Hard disk drive and CD ROM drive may use for example an integrated drive electronics IDE or serial advanced technology attachment SATA interface. A super I O SIO device may be coupled to south bridge and I O controller hub .

An operating system runs on processing unit and coordinates and provides control of various components within data processing system in . The operating system may be a commercially available operating system such as Microsoft Windows XP Microsoft and Windows are trademarks of Microsoft Corporation in the United States other countries or both . An object oriented programming system such as the Java programming system may run in conjunction with the operating system and provides calls to the operating system from Java programs or applications executing on data processing system . Java and all Java based trademarks are trademarks of Sun Microsystems Inc. in the United States other countries or both.

Instructions for the operating system the object oriented programming system and applications or programs are located on storage devices such as hard disk drive and may be loaded into memory for execution by processing unit . The processes of the illustrative embodiments may be performed by processing unit using computer implemented instructions which may be located in a memory such as for example memory such as microcode read only memory or in one or more peripheral devices.

Memory includes an Automated Microcode Detected Error Index Generator AMIG module operational in conjunction with microcode . To further illustrate various computer implemented instructions an Application Programming Interface API is also shown in connection with the microcode . The functionality of both AMIG and API will be further described following. As one skilled in the art will anticipate the microcode AMIG API and other components to further the illustrated embodiments may be physically or logically placed in various locations and associated with various hardware components of the system and elsewhere.

The hardware in may vary depending on the implementation. Other internal hardware or peripheral devices such as flash memory equivalent non volatile memory or optical disk drives and the like may be used in addition to or in place of the hardware depicted in . Also the processes of the illustrative embodiments may be applied to a multiprocessor data processing system.

In some illustrative examples data processing system may be a personal digital assistant PDA which is generally configured with flash memory to provide non volatile memory for storing operating system files and or user generated data. A bus system may be comprised of one or more buses such as a system bus an I O bus and a PCI bus. Of course the bus system may be implemented using any type of communications fabric or architecture that provides for a transfer of data between different components or devices attached to the fabric or architecture. A communications unit may include one or more devices used to transmit and receive data such as a modem or a network adapter. A memory may be for example main memory or a cache such as found in north bridge and memory controller hub . A processing unit may include one or more processors or CPUs. The depicted examples in and above described examples are not meant to imply architectural limitations. For example data processing system also may be a tablet computer laptop computer or telephone device in addition to taking the form of a PDA.

The illustrated embodiments incorporating the aforementioned AMIG module provide a mechanism for developers to ignore the need for unique identifiers when logging errors from their code components and for service people to have precise component and line number identifiers in MDEs that occur in the field. Once a code level is locked for testing and possible shipment the AMIG module is adapted to generate a unique index of every point in the code that a developer used the error logging utility inserting the unique index numbers into the code as it creates index entries. The result is a system that eliminates the need to identify all possible error conditions before code development can begin.

As a developer writes code for his her code component they may log errors using specific error logging commands that would contain at most a description of the error being logged. These error logging commands may be facilitated in some embodiments by the API Once the code is locked the AMIG module is adapted to crawl the entire body of code indexing each instance of an error being logged and inserting the index key value into the code. The result provides unique keys for each instance an error is logged and a master index of keys that contains the components and line numbers within the code corresponding to each error logged. The master key index facilitates the creation of a human readable error log on a remote machine given only the key values logged on a local machine or local system.

The illustrated embodiments provide a more secure error logging mechanism. Any information intercepted e.g. between local and remote machine requires a code key index to be decrypted. In addition because the byte size of error logs are small due to keys transmitted between local and remote machine in lieu of errors a local machine may send all errors of a particular log without the excessive use of computing resources or bandwidth.

As the skilled artisan will appreciate various functionality associated with the illustrated embodiments may be implemented in various ways. For example in one embodiment a first machine such as a machine may be executing the microcode and hitting the various errors. The first machine may communicate with a second machine such as a machine or elsewhere . The second machine may contain the aforementioned AMIG module and generate keys which are provided to the first machine. Finally a third machine such as remote machine in the illustrated embodiment may contain the master key index. In this implementation the third machine may receive a record of error keys from the first machine generated and provided from the second machine and generate the error for support personnel. Any number of machines nodes modules and the like may be utilized in various topologies to perform the error logging indexing and regeneration functionality.

Turning to exemplary methods for logging indexing and generating microcode errors in a computing environment are shown. As one skilled in the art will appreciate various steps in the method may be implemented in differing ways to suit a particular application. In addition the described methods may be implemented by various means such as hardware software firmware or a combination thereof operational on or otherwise associated with the storage environment. For example the methods may be implemented partially or wholly as a computer program product including a computer readable storage medium having computer readable program code portions stored therein. The computer readable storage medium may include disk drives flash memory digital versatile disks DVDs compact disks CDs and other types of storage mediums.

As a next step the developer locks the microcode for testing shipment step . The AMIG module indexes each instance of a Microcode Detected Error MDE step by crawling the entire body of microcode. The AMIG module associates each MDE with a unique index key value key which is inserted into the code at each error location step . The AMIG module then creates a master key index which registers such attributes as key value component line number location and description information step . Method then ends step .

Some of the functional units described in this specification have been labeled as modules in order to more particularly emphasize their implementation independence. For example a module may be implemented as a hardware circuit comprising custom VLSI circuits or gate arrays off the shelf semiconductors such as logic chips transistors or other discrete components. A module may also be implemented in programmable hardware devices such as field programmable gate arrays programmable array logic programmable logic devices or the like.

Modules may also be implemented in software for execution by various types of processors. An identified module of executable code may for instance comprise one or more physical or logical blocks of computer instructions which may for instance be organized as an object procedure or function. Nevertheless the executables of an identified module need not be physically located together but may comprise disparate instructions stored in different locations which when joined logically together comprise the module and achieve the stated purpose for the module.

Indeed a module of executable code may be a single instruction or many instructions and may even be distributed over several different code segments among different programs and across several memory devices. Similarly operational data may be identified and illustrated herein within modules and may be embodied in any suitable form and organized within any suitable type of data structure. The operational data may be collected as a single data set or may be distributed over different locations including over different storage devices and may exist at least partially merely as electronic signals on a system or network.

While one or more embodiments of the present invention have been illustrated in detail the skilled artisan will appreciate that modifications and adaptations to those embodiments may be made without departing from the scope of the present invention as set forth in the following claims.

