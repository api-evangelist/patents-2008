---

title: Shadow copy-based malware scanning
abstract: Scanning of the shadow copy instead of the hard disk of a computer (using an accessing interface instead of the file system interface or an API of the operating system) enables the scanning software to access any files that might have been locked by the malware on the hard disk and avoids root kits. Files cannot be locked because a disk parser is used instead of the operating system or normal file system interface. It is possible for malware to change or reinfect files during the scanning and cleaning process. Files on the hard disk in existence at the time a manual scan is begun are scanned and backed up to the cache if changed during scanning. Dropped malware is removed by reverting the hard disk to the shadow copy once scanning and cleaning has been performed. Even if a watchdog drops a file during the scanning and cleaning process (because it detects that other malware components are being affected) these dropped files will be removed.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08220053&OS=08220053&RS=08220053
owner: Trend Micro, Inc.
number: 08220053
owner_city: Tokyo
owner_country: JP
publication_date: 20080626
---
The present invention relates generally to detection of computer viruses. More specifically the present invention relates to scanning for malware using a shadow copy.

Currently computer viruses and other types of malware continue to plague computers and computer networks. While continual efforts are made to prevent detect and eliminate malware from computers the malware itself also continues to evolve and evade detection.

As known in the art scanning provides users the capability to detect and clean computers infected by known malware. When malware is first reported an antivirus software company typically analyzes the malware produces a or updates the pattern file that identifies the malware and releases that pattern to the public for use in detecting the malware. Typically a pattern file may be downloaded by a user immediately upon its availability perhaps in a pre release version and a compilation of pattern files are available periodically in an official release. The pattern file and a virus scan engine work hand in hand to enable a variety of software products to detect the latest malware whether embodied in a file application software or other.

One previous technique used to combat malware involves an antivirus software product that uses the application programming interface API of an operating system in order to manually scan a file suspected of containing malware. An enhanced API may also be used to provide more powerful file enumeration.

Unfortunately a manual scan or scheduled scan of software files on disk using the API of the computer operating system has drawbacks. Scanning of a file using an API is not effective in all cases if malware locks the file such that it may not be scanned. For example malware may utilize the existing operating system to lock any of its component files or other files to prevent them from being scanned for viruses. Secondly prior art techniques may not be able to identify all types of root kit malware this type of malware is sophisticated enough to be able to hide from detection and cleaning. And because root kit malware technology also changes rapidly in order to avoid detection many infected files may avoid detection during scanning. Thirdly such prior art techniques may be ineffective if the disk being scanned is modified during the scan a file consistency problem.

Finally a prior art scan cannot deal effectively with recursively dropped files due to a watchdog. A watchdog is a component of malware that monitors the other various components of the malware malicious files registry keys etc. detects when any of these components have been scanned or removed by virus cleaning software and then recursively drops these components back into place in order to recover from the cleaning action. A normal scanning and cleaning cannot deal effectively with this type of malware because the malware can recover and replace itself even after the cleaning. In particular if cleaning software fails to find and remove the watchdog component first the watchdog will recursively drop files as the other components are removed.

For all these reasons it would be desirable to improve upon current malware scanning techniques in order to provide better detection and cleaning of malware.

To achieve the foregoing and in accordance with the purpose of the present invention a malware scanning technique is disclosed that utilizes shadow copy technology in order to more effectively detect and clean malware. The invention enhances the consistency of scanning increases the ability to detect root kit based malware handles locked files and dropped files and generally improves cleaning of infected computers.

The shadow disk concept includes unchanged sectors on the hard disk along with original sectors stored in the shadow disk cache. Because the scan of a shadow disk actually means a scan at a particular point in time of the hard disk this scan will include the unchanged sectors on the hard disk and original sectors in the cache. A modified sector of the hard disk that was modified after the particular point in time would not be scanned the original unmodified sector would be scanned from the shadow copy cache.

The present invention detects root kit based malware better than previous techniques. Because most root kits hide malware files by filtering content accessed using an operating system component e.g. the file system interface or a Microsoft operating system API the present invention use a separate accessing interface and shadow copy which does not allow a root kit to hide files.

In one embodiment the present invention provides more effective scanning technology. For example scanning of the shadow copy instead of the hard disk of a computer using an accessing interface instead of the file system interface or an API of the operating system enables the scanning software to access any files that might have been locked by the malware on the hard disk. Files cannot be locked by the malware because an accessing interface such as a disk parser is used instead of the operating system or normal file system interface. Malware is only able to lock a file when the operating system API or file system interface is used.

Malware does not know of the existence of a shadow disk and its accessing interface. Malware simply locks a particular file on the hard disk in order to prevent the normal operating system API from accessing the file. But use of a separate accessing interface to access the shadow disk will not be blocked by malware. A disk parser is one way to implement the accessing interface. Other methods to access the shadow disk in order to implement the accessing interface include an embedded hardware component that understands the format of disk. Alternatively the file system interface or traditional operating system API may be used to perform scanning and cleaning locked files may occur but files dropped by watchdog malware would still be prevented by virtue of use of the shadow copy as described below.

In another embodiment the present invention effectively deals with the file consistency problem. It is possible for malware to change or reinfect files during the scanning and cleaning process. Through use of shadow copy technology the present invention effectively deals with this problem and ensures that the files on the hard disk in existence at the time a manual scan is begun are scanned. Changes to the disk during the scanning and cleaning process are handled by reverting the hard disk to the shadow copy once scanning and cleaning has been performed.

Prior art techniques were ineffective at removing watchdog malware primarily because these techniques were unable to find the watchdog malware and disable it. Once cleaning was performed the watchdog simply dropped the infected files again. Advantageously use of the shadow copy technology in conjunction with the present invention prevents watchdog malware from operating. Even if a watchdog drops a file during the scanning and cleaning process because it detects that other malware components are being affected these dropped files will be removed. In other words use of the present invention avoids the need to detect the watchdog malware in the first place because even if the watchdog is not detected and removed the files it drops during scanning and cleaning will be removed as described below.

The original sectors on disk at the start of the scanning and cleaning are included in the shadow copy snapshot at that point in time. If changed the original sectors will be backed up to the cache and then these original sectors will be rewritten back to the hard disk at the end of the scanning and cleaning. Thus any sectors modified on the hard disk during scanning and cleaning by malware such as a watchdog will be overwritten by the original sectors that were present at the start of the scanning and cleaning. Even if these original sectors have been infected by malware since the previous scan the sectors will be cleaned in the shadow copy cache before they are reverted to the hard disk. After the entire cleaning process any malware components including any watchdog components will have been cleaned from the shadow copy so the invention may securely revert the physical hard disk to the cleaned shadow copy.

The present invention is applicable to all malicious software or malware that generally causes harm to a computer system provides an effect that is not expected by the user is undesirable illegal or otherwise causes the user to want to restore their computer system from a time prior to when it was infected by the malware. Malware can be classified based upon how it executes how it spreads or what it does. Malware generally includes a computer virus worm Trojan horse backdoor exploit key logger etc.

Grayware refers to software that causes annoying and possibly undesirable or unforeseen behavior in the way a program runs. Grayware is not necessarily detrimental to basic system operations but it harbors the risk of opening computer vulnerabilities. Some applications classified as grayware are misused for malicious activity while others transmit information about a computer user s behavior. Grayware includes spyware adware dialers hacking tools joke programs data miners tracking cookies password cracking applications and remote access tools.

The below descriptions are provided as guidelines for the types of malware currently existing these classifications are not exact in that many groups overlap. For example commercially available so called anti virus software is designed to scan a computer for viruses and worms as well as for other malicious software. Of course later developed software not currently known may also fall within the definition of malware. As used herein the term malware is used to describe both the examples of malware and grayware described herein.

A root kit is software inserted into a computer system after an attacker has gained control of the system. Root kits often include functions to hide the traces of the attack as by deleting logged entries or by cloaking the attacker s processes. Root kits might include backdoors allowing the attacker to easily regain access later or to exploit software to attack other systems. Because they often hook into the operating system at the kernel level to hide their presence root kits can be very hard to detect.

A Trojan horse program is a harmful piece of software that is often disguised as legitimate software. Trojan horses cannot replicate themselves unlike viruses or worms. A Trojan horse can be deliberately attached to otherwise useful software by a programmer or can be spread by tricking users into believing that it is useful. Some Trojan horses can spread or activate other malware such as viruses a dropper .

An existing technology from Microsoft Corporation termed the Volume Shadow Copy Service provides backup capability as well as point in time copies of data known as shadow copies. This technology is used by Microsoft operating systems to perform snapshot and restore actions as well as system restore actions. There are two methods for creating shadow copies making either a complete copy a clone or copying only the changes to the volume a differential copy or copy on write . Each method results in two data images the original volume and the shadow copy volume. The functional difference between the two is that the original volume maintains full read write capabilities whereas the shadow copy volume is read only. Preferably the present invention makes use of the copy on write method. Of course this shadow copy technology may be used in other operating systems using the same general principles but with different implementations.

The copy on write method creates shadow copies that are differential rather than full copies of the original data. The copy on write method can produce shadow copies using either software or hardware techniques. This method makes a copy of the original data before it is overwritten with new changes. When a change to the original volume occurs but before it is written to disk the block about to be modified is read and then written to a cache which preserves a copy of the data block before it is overwritten with the change. Using the blocks in the cache and unchanged blocks in the original volume a shadow copy can be logically constructed that represents the shadow copy at the point in time in which it was created.

The advantage of the copy on write method is that it creates shadow copies very rapidly because it is only writing the changes to disk. The disadvantage is that in order to fully restore the data the original data must still be available. Another disadvantage is that the performance of copy on write implementations can affect the performance of the original volume.

The present invention recognizes that shadow copy technology may be used to logically create a snapshot of existing file or files once the snapshot exists then the present invention detects any malware and cleans the malware from the files in the snapshot. A point in time snapshot of a computer system disk is created using the shadow copy service described above or using other suitable shadow copy technology.

A shadow copy cache is created in virtual memory or in another suitable memory location a shadow copy filter is used to filter all sector modifications of the system disk during scanning and cleaning. If a particular sector is modified the original sector is cached in the shadow copy cache using the disk filter. This approach keeps a point in time view of the shadow copy current. A time index of when a sector is modified is also associated with each original sector. The time index indicates when the modified sector was placed on disk thus a snapshot at any point in time of the hard disk may be obtained by reference to a particular time index. For example if a snapshot is desired before a particular time index then sectors modified at or after that time index would not be retrieved.

Once a manual scan of the actual computer system disk is requested a shadow copy snapshot is created for that particular point in time when the manual scan is requested and filtering begins. The snapshot indicates the contents of the hard disk at that particular point in time through use of the shadow copy. A shadow copy logically exists because the shadow copy filter is continuously backing up changed sectors to the shadow disk cache. A virus scan of the shadow copy is then initiated. A scan of the shadow copy includes unchanged sectors on the hard disk and any backed up sectors in the cache.

During the scan of the shadow copy if any malware is detected it is cleaned directly from the shadow copy. Such a scan and cleaning will be successful because the shadow copy is accessed using any suitable accessing interface such as a disk parser rather than the file system interface or the API of the operating system. Any malware present will not be able to lock any files in the shadow copy. Any files that are dropped during the scanning and cleaning will also have no effect because the hard disk is reverted to the shadow copy once scanning and cleaning has finished.

After the scanning and cleaning of the shadow copy if any modifications have been made to the shadow copy then the scan engine will replace the actual disk with the contents of the shadow copy. This replacement may take place at the file level or sector level and may require a rebooting of the system. If no modifications were made on the shadow copy then the scan engine can simply discard the shadow copy cache.

Disk parser is a parsing program that is able to read and parse raw file information stored on the shadow copy. For example the shadow copy will be written in the same format as the actual hard disk using a file system such as NTFS FAT EXT or an Apple file system. The parser will understand the disk contents in a particular file system format and be able to read that raw data. For example if NTFS is used the disk parser will read and parse its partition table in order to understand the files on the shadow copy. Of course a disk parser is one example of a suitable accessing interface or scanning the shadow copy .

Step initiates a manual scan user initiated or scheduled of the hard drive using scanner . Preferably the operating system of a computer is used to initiate the manual scan typically the user initiates a scan by clicking a button on a graphical user interface causing the scanner to be executed and calling the disk parser s for example interface. The operating system and file system interface are bypassed when the actual files on disk are accessed.

In step a shadow copy is initiated for the hard drive of the computer when the manual scan is initiated. The shadow copy technology used will maintain the shadow copy during the duration of the scanning and cleaning. During this period the shadow copy technology will continuously backup any changed the sectors of the hard drive to the shadow copy cache in real time. Initially the shadow copy is essentially all the sectors on the hard disk as no changes have occurred yet. But if the sector is modified after initiation of the scan then the original sector will be written to the cache will be part of the shadow copy and will be scanned in the cache.

This shadow copy snapshot represents the view of the hard disk at the beginning of the manual scan and conceptually includes all contents of the disk at that time. Typically the shadow copy service keeps track of the shadow copy snapshot at this particular point in time through use of a unique identifier such as a shadow copy identifier a shadow copy name or a shadow copy time.

As described above a shadow copy may be implemented using the Microsoft Volume Shadow Copy Service or any other suitable shadow copy technology. Preferably the shadow copy is implemented as copy on write such that only changed sectors are backed up to the shadow copy cache. Accordingly the shadow copy keeps track of changes to sectors to the hard disk and will back up any sectors that are changed during the scanning. Accordingly if any sector is changed by malware during scanning the original sector will be backed up to the cache. Thus if a request is made for a particular sector as it existed at the initiation of the manual scan and if the sector has been unchanged then the request is directed to the actual hard disk whereas if the sector had been changed then the request is directed to the shadow copy cache.

In step a scan of the shadow copy is performed. This scan results in sectors of the hard disk being scanned and perhaps backed up sectors in the cache also being scanned. This scanning makes use of scanner and disk parser . Preferably the disk parser accesses the shadow copy without using a file system interface and without using any API of the operating system. It is also possible for the disk parser to access the disk or cache using hardware instructions and to bypass the operating system entirely. One skilled in the art will be able to design a suitable implementation for disk access. Advantageously avoiding use of any API of the operating system means that malware cannot monitor progress of the scanning and will not be able to lock files.

In one specific embodiment the parser reads sectors or writes to sectors using pure hardware technology e.g. I O instructions or relies on an operating system bus driver or on an operating system disk driver to perform reads and writes. In this fashion the accessing interface implemented by the parser bypasses the file system interface and any operating system API interface.

If malware has modified a sector on the hard disk before the manual scan is initiated then the malware exists in that sector on the hard disk and not in the cache. The modified sector on the hard disk would then be scanned. In this scenario the scanner would detect the malware in the modified sector on the hard disk and this sector would eventually be cleaned directly on the hard disk. Even if malware attempts to reinfect this sector on the hard disk after it has been cleaned such as a watchdog component recursively dropping a file the present invention addresses this problem. Once the malware attempts to write to this sector the original cleaned sector will be backed up to the shadow disk cache. The sector on disk will be reinfected with malware but this situation is remedied in step below.

By contrast if the original sector is clean and malware modifies that sector on the hard disk after the manual scan has begun but before that particular sector is scanned then the original sector will be backed up to the cache and that original sector will be scanned from the cache because it existed at the point in time when the manual scan was initiated. This original sector will not be cleaned because no malware will be found. The modified sector on the hard disk would not be scanned because the modified sector did not exist at the time the scan was initiated.

Alternatively if the original sector is clean and malware modifies that sector on the hard disk after the manual scan has begun but after that particular sector is scanned then the original sector will be backed up to the cache. The original sector will be scanned on the hard disk and no cleaning would be performed because the original sector was clean. Once malware modifies the sector after scanning the original sector is backed up to the cache and malware then exists on the sector on the hard disk. The modified sector on the hard disk would not be scanned because that modified sector did not exist at the time the scan was initiated.

In either of the above two scenarios original sector is clean malware modifies a sector after the manual scan is begun one embodiment of the invention contemplates that the modified sector on the hard disk will contain malware and no cleaning will be performed because the original sector is clean. In these scenarios under a first embodiment no action is taken in step below because no cleaning was detected in step below. The malware present in the modified sector will exist until the time that the next manual scan is performed. This embodiment may not be the most secure approach but will take less time to complete because not all sectors will be reverted. This embodiment acknowledges that scanning is periodical and that an infection may occur after a scan has begun.

In a second embodiment for the above two scenarios the present invention contemplates that all sectors on the hard disk will be reverted to original sectors backed up in the cache. This embodiment would be the most secure approach but will take more time to complete as all sectors present in the shadow copy cache must be reverted even if no cleaning was performed upon them.

In step malware is cleaned from the sectors of the shadow copy that include malware. Because the shadow copy at the beginning of the scan is only the hard disk itself cleaning of a sector from the shadow copy cache only occurs if that sector is modified by malware after scanning of the hard disk has begun but before that particular is scanned. Any such sector of the cache that had also been infected by malware before the beginning of the scan would also have that malware removed by the cleaning.

Any suitable antivirus cleaning software may be used for this purpose. Conceptually the shadow copy includes two parts the contents of the hard disk itself and the contents of the shadow copy cache. When a particular sector is requested from the shadow copy at the point in time of the beginning of the scan or if access to the entire disk is requested the shadow copy service performs a merge as described above thus delivering to the requester those sectors of the disk that existed at that particular time. Together selected contents of the hard disk and of the cache provide a user with a view of the hard disk at a particular point in time.

If the malware exists on the hard disk itself then it will be cleaned from the hard disk. But if the malware exists in a sector or sectors of the shadow copy cache then the malware will be cleaned from the sectors in the cache. The actual process of cleaning a sector which may involve removing malware code changing code adding information etc. does not trigger the shadow copy technology to backup any sector into the cache.

Advantageously because the cleaning is being performed upon the shadow copy via the shadow copy service any malware will not be able to lock a file or drop a new file onto the shadow copy. Watchdog malware for example will not be able to drop any new files because the malware is removed during the reversion process and the malware cannot lock files during scanning because the accessing interface is used instead of the operating system API .

Any normal operating system API operation that causes a sector on disk to be changed will cause that sector to be backed up by shadow copy service. Any malware present will be unable to detect that cleaning is being performed because cleaning is also performed using the accessing interface. As pointed out above even if malware reinfects a sector or file after that sector of file has been cleaned the original cleaned sector or file will be backed up to the shadow copy cache and will reinstated below as described in step .

In step the invention checks whether any cleaning has been performed on the shadow copy. If so then control moves to step . If not then no action need be performed in step . Alternatively according to the two scenarios discussed above original sector is clean malware modifies a sector after the manual scan is begun step may elect to transfer control to step in order to revert all sectors present in the shadow copy cache back to the hard disk. This alternative embodiment is a more secure approach takes more time but addresses the scenarios where malware modifies a sector after the scan has begun when that sector was initially clean. The default control control moves to step only if cleaning were performed upon a sector is arguably slightly less secure but takes less time to complete.

In step the current hard disk is reverted to the cleaned shadow copy view. For example if any sector on the hard disk had not been changed since the scan was initiated then of course that sector would not be written to the cache and that sector will be cleaned in place on the hard disk. This cleaning takes care of any malware that had infected the disk since the previous scan. No copying of a sector from the cache to the hard disk is needed. For these sectors reversion to the shadow copy simply means using that sector as it exists on the hard disk after scanning and cleaning.

By contrast if a sector on the hard disk had been modified after the beginning of the scan then that original sector will be written to the cache and it will be scanned in the cache. If any malware is found because that original sector had been infected since the previous scan then that sector will be cleaned in the cache. In this step that sector from the cache will be copied and used to overwrite the corresponding sector on the hard disk because the original sector on hard disk was changed by malware after the beginning of the scan .

Other techniques may be used to revert the hard disk to the shadow copy aside from copying. In addition reversion of the hard disk to the shadow copy may be performed on a sector by sector basis that is only reverting a sector if that sector was cleaned in the shadow copy or a file basis that is reverting a file if any of the sectors of that file were cleaned in the shadow copy .

In step the shadow copy is terminated. In one embodiment any contents of the shadow disk cache pointers and shadow copy identifiers are discarded. In other words the shadow copy only exists from the beginning of the manual scan to a point in time when scanning and cleaning is done and the hard disk has been reverted to its original cleaned contents.

As described above the present invention effectively handles infection of malware during scanning and cleaning. The following example illustrates how the present invention solves the problem of files being modified during a scan the so called file consistency problem. Assume that at time 1 a hard disk exists with all original sectors no malware is present and there is nothing in the shadow copy cache. At the time 2 a scan is begun and a shadow copy at this time is initiated. During the scan but before a sector A is scanned malware modifies sector A to create sector A on the hard disk. Using the shadow copy technology sector A the original is saved into the cache because it was modified. During scanning this sector A is scanned as it exists in the cache because it did exist at time 2 the beginning of the scan . The modified sector A on the hard disk is not scanned because it did not exist at time 2. Once the scanning and cleaning is completed if no malware is found in sector A in the cache then the hard disk is not reverted to this sector. The modified sector A will be scanned the next time the manual scan is performed. This approach corresponds to the first embodiment discussed above that takes less time to complete.

On the other hand if original sector A in the cache does contain malware because it was modified by malware before the scan was begun then this sector will be cleaned in the cache and it will be copied back to overwrite the sector on the hard disk thus a erasing modified sector A .

It is possible that legitimate changes may be made to the hard disk during scanning and cleaning that are not caused by malware but are caused by normal user actions. Preferably the user will be prompted to stop current work save data and terminate running processes before scanning occurs.

CPU is also coupled to a variety of input output devices such as display keyboard mouse and speakers . In general an input output device may be any of video displays track balls mice keyboards microphones touch sensitive displays transducer card readers magnetic or paper tape readers tablets styluses voice or handwriting recognizers biometrics readers or other computers. CPU optionally may be coupled to another computer or telecommunications network using network interface . With such a network interface it is contemplated that the CPU might receive information from the network or might output information to the network in the course of performing the above described method steps. Furthermore method embodiments of the present invention may execute solely upon CPU or may execute over a network such as the Internet in conjunction with a remote CPU that shares a portion of the processing.

In addition embodiments of the present invention further relate to computer storage products with a computer readable medium that have computer code thereon for performing various computer implemented operations. The media and computer code may be those specially designed and constructed for the purposes of the present invention or they may be of the kind well known and available to those having skill in the computer software arts. Examples of computer readable media include but are not limited to magnetic media such as hard disks floppy disks and magnetic tape optical media such as CD ROMs and holographic devices magneto optical media such as floptical disks and hardware devices that are specially configured to store and execute program code such as application specific integrated circuits ASICs programmable logic devices PLDs and ROM and RAM devices. Examples of computer code include machine code such as produced by a compiler and files containing higher level code that are executed by a computer using an interpreter.

Although the foregoing invention has been described in some detail for purposes of clarity of understanding it will be apparent that certain changes and modifications may be practiced within the scope of the appended claims. Therefore the described embodiments should be taken as illustrative and not restrictive and the invention should not be limited to the details given herein but should be defined by the following claims and their full scope of equivalents.

