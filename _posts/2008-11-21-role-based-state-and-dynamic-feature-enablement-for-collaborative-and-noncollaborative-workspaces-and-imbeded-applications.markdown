---

title: Role based state and dynamic feature enablement for collaborative and non-collaborative workspaces and imbeded applications
abstract: In general, one aspect of the subject matter described in this specification includes a workspace definition which includes a workspace identifier referring to a workspace where an application container having a user interface can instantiate the workspace based on the workspace definition; a plurality of application identifiers each referring to an application provider for an application, and where each application is configured to execute in the application container for the instantiated workspace and where each application has a visual representation in the user interface; and a one or more participants where each participant refers to one or more workspace participants.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08214747&OS=08214747&RS=08214747
owner: Adobe Systems Incorporated
number: 08214747
owner_city: San Jose
owner_country: US
publication_date: 20081121
---
This application claims priority to pending U.S. Provisional Application Ser. No. 61 104 679 filed Oct. 10 2008 the entire contents of which are hereby incorporated by reference.

In general one aspect of the subject matter described in this specification can be embodied in computer readable medium comprising a workspace definition the workspace definition including a workspace identifier referring to a workspace where an application container having a user interface can instantiate the workspace based on the workspace definition a plurality of application identifiers each referring to an application provider for an application and where each application is configured to execute in the application container for the instantiated workspace and where each application has a visual representation in the user interface and a one or more participants where each participant refers to one or more workspace participants.

These and other embodiments can optionally include one or more of the following features. The workspace participant is associated with a respective role associated with one or more privileges. The workspace participants are stored on a server. The workspace participants are stored in the workspace definition. The workspace further comprises one or more documents and where each of the one or more documents are accessible through the user interface. A document in the one or more documents is a preview of a first document. A document in the one or more documents is a version of a first document and where the document can be rendered without an application that created the first document. The workspace definition further comprises state information for the plurality of applications that describes the state of each application in the workspace. The state information describes one or more aspects of each application s respective visual representation.

In general one aspect of the subject matter described in this specification can be embodied in a method that includes receiving a workspace definition comprising a plurality of application identifiers application state information and a one or more participants each referring to a respective workspace participant. In response to the receiving 1 for each application identifier executing within an application container a respective application referred to by the application identifier the application container having a user interface and where execution of the respective application within the application container creates a respective visual representation in the user interface 2 arranging the respective visual representations together in the user interface according to the application state information and 3 selecting a workspace participant as the current participant and determining the current participant s privileges based on a respective role associated with the selected workspace participant. Other embodiments of this aspect include corresponding systems apparatus and computer program products.

These and other embodiments can optionally include one or more of the following features. For one or more of the plurality of application identifiers obtaining the respective application referred to by the application identifier from an application provider referred to by the application identifier. The application container comprises a virtual machine which is configured to execute the applications referred to by the plurality of application identifiers. The role allows the current participant to modify the workspace definition. The current participant can prevent other participants from modifying one or more portions of the workspace definition. The modifications are propagated to workspace definitions associated with one or more other participants. The method of claim where the propagating is performed by one or more servers. A second role prevents the current participant from modifying the plurality of application identifiers and the one or more participants. The user interface comprises a plurality of panels and where each application s respective visual representation is created in one of the plurality of panels.

In general one aspect of the subject matter described in this specification can be embodied in a method that includes receiving a workspace definition comprising a plurality of application identifiers and a one or more participants each referring to a respective workspace participant for each application identifier executing within an application container a respective application referred to by the application identifier the application container having a user interface and where execution of the respective application in the application container creates a respective visual representation in the user interface and determining by a first respective application executing within the application container a role for a current participant and selecting a set of application features to enable for the first application based on the role. Other embodiments of this aspect include corresponding systems apparatus and computer program products.

These and other embodiments can optionally include one or more of the following features. The set of application features to enable is all application features. The set of application features to enable is a subset of all application features. Input directed to a user interface is accepted to enable additional application features. A service associated with an owner is communicated with to enable additional application features.

In general one aspect of the subject matter described in this specification can be embodied in a method that includes receiving a command to create a new workspace and creating a workspace identifier for the workspace where an application container having a user interface can instantiate the workspace and receiving one or more applications to execute in the workspace and creating an application identifier for each application that refers to an application provider for the application and where each application is configured to execute in the application container and where each executing application has a visual representation in the user interface. Other embodiments of this aspect include corresponding systems apparatus and methods.

These and other embodiments can optionally include one or more of the following features. Receiving one or more documents for the workspace where each of the one or more documents is accessible through the user interface. Receiving one or more workspace participants for the workspace. Publishing the workspace to a server for access by authorized participants. Obtaining each identified application from the application provider referred to by the application s application identifier.

Particular embodiments of the subject matter described in this specification can be implemented to realize one or more of the following advantages. Workspaces unite relevant information from documents enterprise applications and the world wide web. A workspace will retrieve the latest version of an application since workspace definitions contain application provider information. Workspaces enable collaboration among workspace participants

The details of one or more embodiments of the invention are set forth in the accompanying drawings and the description below. Other features aspects and advantages of the invention will become apparent from the description the drawings and the claims.

In various implementations the state of one or more of a workspace s applications documents the workspace itself or combinations of these is automatically saved at various times or when a user closes a workspace. This allows users to take their workspace and current context with them as they change computing devices. In some implementations an application s state describes the application s user interface location size and appearance of the application s user interface in the GUI the context of application or combinations of these. Other application state information is possible. For example application state information includes an identity of the web browser application a set of coordinates that initially place the application s user interface in the upper right corner of the GUI a uniform resource locator URL of web page that the application is displaying the scrolled position and magnification of the web page in the application s user interface and or other information that can be used to describe the state of the application . A history button can be selected by users to open a history recall interface that provides the user with an ability to recall and display previous application and workspace states. The history recall interface is discussed in reference to . Application state and other information that comprise a workspace definition are discussed further in reference to below.

Workspace applications execute within or their execution is coordinated by an application container which in some implementations manages the GUI . Workspace applications expose their respective user interfaces if any in the GUI . By way of illustration the workspace includes the web browser application a charting application and a search engine application . Each application s respective user interface occupies a portion of the GUI . In some implementations the GUI can extend beyond the window borders of the workspace so that an application s user interface may be partially visible or may not be visible in the GUI until the workspace s view is changed to include that portion of the GUI which includes the application s user interface.

In some implementations application user interfaces can be arranged in the GUI by one or more panels. A panel is a visible or invisible organization element in the GUI used to spatially arrange application user interfaces. For example a panel could specify a grid layout in the GUI where the grid s cells serve as locations for applications to display their user interfaces. By way of further example panels can be composed in logical layers so different application user interfaces are presented in the GUI depending on what layer is being viewed. Other techniques for organizing application user interfaces in the GUI are possible.

In some implementations the applications the documents and the application container can share information to perform interrelated tasks. For example the user can type the name of a job application into the search engine application and the search engine application can search a contact database for the named applicant to retrieve the applicant s address desired job position and company and salary requirements and share that information with the other applications . The web browser application can use the applicant s address to display a map of the applicant s location and or the address of the desired job position. The charting application can use the address desired position and salary requirements information to query an employment demographics database to present a visual representation of comparative salary statistics for similar job positions in nearby geographical regions. In some implementations the workspace can use the applicant s identity to dynamically present relevant ones of the electronic documents such as to load the applicant s picture as the image document the applicant s resume as the PDF document and or a job description as the word processing document .

In various implementations the GUI provides various interactive controls. The user can maximize minimize and resize the application container with a collection of window controls . The user can also select a full screen button to cause the application to occupy substantially the entire screen. The application container also includes a collection of user identity information for the current user or participant of the workspace such as the participant s name workspace role picture and or other identifying information. Workspace roles and associated privileges are discussed further with reference to below. A button when selected shows a participant their workspaces both private and shared. A private workspace is used by only one participant usually the person who created the workspace but a private workspace can be shared with other workspace participants by selecting button and inviting others to join. Shared workspaces are discussed further below.

A button when selected presents a catalog user interface that provides a participant with an ability to obtain additional applications or workspace templates. The catalog is discussed further in reference to and . The application container also includes a distribution button . In some implementations the distribution button can be activated to send copies of the workspace to others. In some implementations the distribution button can be activated to publish the current version of the workspace to a distribution server so that other participants can obtain the updated version of the workspace.

In some implementations a workspace can include documents in addition to applications. By way of illustration the workspace includes the following documents an image a portable document format PDF document and a word processing document . Examples of other types of documents that can be included in the workspace are audio files video files spreadsheets presentations Hypertext Markup Language HTML documents eXtensible Markup Language XML documents binary files e.g. executables text files compressed files other file types and combinations of these.

By way of illustration the document is dragged to the GUI as indicated by mouse cursor . When a document is imported into a workspace the workspace s definition is updated to reflect that the document is now part of the workspace. In addition the workspace state information is updated to retain the location of the visual representation of the document e.g. an icon in the GUI . In some implementations the document is copied into the workspace definition or to local or remote storage that is accessible to the application container.

In various implementations when a document is imported into a workspace the application container associates an external application or a workspace application with the document. The associated application is invoked when a user wishes to view or edit the document. Generally speaking a table of associations between document types and applications can guide this process. For example if a spreadsheet document created outside of the workspace is imported into the workspace the associated application would be the external spreadsheet application. Alternatively if there is a workspace application that can be used to view and or modify the document the workspace application is associated with the document. In the former case when a user selects the document for viewing or editing in the workspace e.g. by performing a mouse double click on the document s icon the associated application is invoked with the document. If the application is external to the workspace the document can first be copied into a file system or other storage location where the external application can access the document.

When a workspace is shared there exists the possibility that a workspace participant may add a document to the workspace associated with an external application that is not available on each participant s computing device. To enable participants without access to the application to view such documents such as by using a commonly available workspace application or external application document viewer a portable version of the document is created and copied into the shared workspace definition or stored on a document repository server in some implementations. In some implementations the portable version of a document has the same fidelity of the original document. The portable version does not require the application used to create the document in order for the document to be viewed in the shared workspace. For this reason and in some implementations the portable version of a document is not capable of being edited or modified to the extent that the original version of the document is. In some implementations the portable version is a PDF document and is produced by causing the document s creating application to export the document as a PDF document. Other types of portable documents are possible.

In some implementations the application for viewing portable documents allows users to annotate such documents with markups notes and marginalia that can be saved along with the portable version of the document. A given participant s view e.g. current scroll position and magnification of a portable document in an application for viewing portable documents including annotations if any can be shared with other participants. In some implementations a viewer application for portable documents allows participants to fetch the original version of the document from a document repository for editing for example.

In further implementations a preview or thumbnail image of the document is stored in the workspace definition and the full version of the document is stored on a document repository. When a user accesses a document through the GUI if the document is not present in the workspace definition or in local storage such as may be the case when using a shared workspace the application container downloads the document from a document server. Document downloading is deferred until a participant attempts to view more than a document s preview or thumbnail image document.

When a workspace application is imported into a workspace workspace s definition is updated to reflect that the workspace application is now part of the workspace. In some implementations the workspace application is copied into local cache of workspace applications the workspace definition is updated to indicate the storage location of the application and the workspace application is then executed by the application container.

In some implementations the workspace includes a file repository workspace application . The file repository application allows users to add and remove documents and workspace applications to from a global document repository simply by dragging the document and workspace application icons between the application s user interface and the GUI . This allows users to share information without having to share their workspace.

The document repository workspace application provides users with interactive access to a document repository for the storage and distribution of shared documents. For example The documents can be moved among the host the workspace and the shared file repository interface . In some implementations the shared file repository can be a central file server that multiple users can access through separate instances of the workspace and shared file repository interface .

When a document or workspace application is exported or otherwise removed from a workspace information pertaining to the workspace application or document is removed from the workspace definition and in some implementations any cached versions of the workspace application or document are removed.

In some implementations participants can create their own private i.e. custom views of a shared workspace by changing the size and location of application user interfaces hiding application user interfaces and customizing workspace applications for example. Other ways to customize a workspace view are possible. In further implementations the extent to which a participant s private view can depart from the public view is based on one or more workspace roles associated with the participant. Roles are discussed further below. In some implementations a shared workspace s private view is stored in a workspace definition s workspace state information.

Workspace participants can switch back and forth between the public view and their private view. By way of illustration GUI presents a public view of the shared workspace which includes a charting application a web browser application an image document word processing document and a search engine application . GUI presents a private view of shared workspace in which the size and location of applications and has changed.

A workspace can be used in online mode or offline mode. When a workspace is in online mode the application container is able to synchronize changes to the local workspace definition at various times with a workspace definition maintained by a server e.g. . Moreover collaboration services and workspace applications which utilize network services will not have their functionality impaired. However a workspace can be instantiated and used offline to the extent that network communication is not required by the workspace s applications and assuming there is a copy of the workspace definition on the computing device or accessible to the computing device. When a workspace is in online mode the workspace is able to synchronize changes made to the workspace definition while the workspace was in offline mode with the workspace definition maintained by a server. By way of illustration participant Jim is using workspace definition offline for instance. If Jim adds workspace applications or otherwise changes the workspace definition these changes will be propagated to the corresponding definition on server when Jim s workspace is back online.

Workspaces can be shared with others when a user creates or obtains a workspace e.g. from a workspace template and then publishes the workspace to server which in some implementations causes a copy of the published workspace s definition to be placed on the server where it can be accessed by others. Next the user invites others to join the workspace as participants. Initially the user who published the workspace is the only participant. If others elect to join the shared workspace they will receive a local copy of the shared workspace definition which depending on roles and privileges they may be allowed to customize to some extent.

Unlike non shared workspaces shared workspaces allow one or more participant s changes to their local copy of the shared workspace definition to be propagated to all copies of that workspace definition maintained by other participants. For example assuming that Susan owns or has control over a shared workspace she can modify the workspace definition e.g. add remove applications add remove documents etc. and the modifications will be propagated to each participant s local copy of the workspace definition if she elects to publish the changes. In some implementations if Susan closes her workspace without publishing the changes she will prompted if she wants to discard publish or save the changes. For example published changes to the workspace definition will be synchronized with the copy of on the server and then propagated to Bob and Jim s respective local workspace definitions when they are next synchronized with the server . In further implementations if an updated public view of a shared workspace is not compatible with a participant s private view e.g. the public view no longer contains a workspace application that is in a private view the private view can be removed from the workspace or modified to remove portions that are in conflict with the public view.

An owner or controller of a shared workspace can apply changes to the workspace definition but may not be ready to share the changes with other participants. To accommodate this the application container has the ability to save the changes without publishing them to the server . If a shared workspace has more then one participant who can make changes e.g. an owner or contributor the workspace space is automatically locked by the participant currently changing the workspace. The lock excludes others from modifying the shared workspace definition. The lock is removed once the user publishes the workspace definition changes. In some implementations there a user can manually obtain the lock .

For example the Business Corp company can provide a collection of applications that can be obtained from a Business Corp application distribution server. The user can browse the collection of applications by selecting a collection control to open an applications collection control . The applications collection includes a collection of interactive tabs and that the user can select to move among available categories of applications. The applications collection includes a search control that provides the user with an ability to search for applications e.g. by name keyword category . For example the user can enter the word weather to browse a collection of applications that can include applications that provide weather forecasts satellite imagery and or current conditions.

The applications collection control includes a subcategory control . The subcategory control can be used to browser among subcategories of available applications. In the illustrated example the user has selected to view applications within the Business Corp collection e.g. by selecting the control in the template and tiles area of sales related applications e.g. by selecting the sales tab . The sales collection can be further subdivided into subcategories that are grouped by job function department or other subgrouping. In the illustrated example the user has activated the subcategory control to group the available applications by job function. The catalog responds to the selection by displaying a collection of job function controls . The user can also activate an all products control to browse all the applications that have been made available by the application provider.

The applications collection control also includes a new releases collection control and a top downloads collection control . The new releases collection control displays a collection of applications that the application provider has recently made available for download. The top downloads collection control displays a collection of applications that have been downloaded most frequently by other users.

The catalog includes a collection of controls that provide the user with links to workspaces that the user can created and or workspaces that have been shared with the user. The controls provide the user with links to the user s private workspaces to workspaces that the user has made available to be shared with other users to workspaces that have been shared with the user and or to a collection of all the workspaces that the user can access. A new workspace control is included to provide the user with the option to create a new substantially empty workspace. An example process for creating a new workspace is discussed in the description of .

In some implementations the enterprise server can distribute applications privately. For example the enterprise server can be an intranet server that distributes applications only within an organization s network. Users within the organization s network can browse the organization s privately distributed applications through the catalog whereas users outside of the organization s network cannot. In some implementations the enterprise server can distribute applications publicly. For example the organization can be in the business of creating commercial applications such as the applications and the enterprise server can make the organization s commercial applications available through the catalog .

Through the catalog the user can select one or more of the applications for inclusion in the workspace . In some implementations the applications can be added to the workspace in one or more a drag and drop operations. For example the applications can be selected in the catalog and dragged to a position within the workspace . In some implementations applications can be added to the workspace by selecting the applications within the catalog . For example the user can add the applications to a list and when the list is complete the user can activate a control that closes the catalog and populates the workspace with the applications data.

In various implementations the workspace definition includes a workspace identifier one or more application identifiers and one or more workspace participants . The workspace identifier can be used to uniquely identify a workspace . In various implementations a workspace identifier is data representing a sequence of one or more letters numbers symbols codes special characters or combinations of these. In further implementations the workspace identifier is a data structure. By way of illustration the workspace identifier can be a file name a URL a record number in a database or other identifiers that can be used to identify the workspace . In some implementations the workspace identifier is unique within a namespace. For example the workspace identifier can be a unique filename within a collection of electronic files included in the folders of a file repository that define a namespace such as server folder subfolder workspacefile . In another example the workspace identifier can be a unique server and file address such as http www.company.com intranet department jobfunction workspace.xml . Other workspace identifiers are possible.

The one or more application identifiers identify one or more applications e.g. the applications in the workspace . In various implementations an application identifier is data representing a sequence of one or more letters numbers symbols codes special characters or combinations of these. In further implementations an application identifier is a data structure. In some implementations an application identifier is unique within a namespace. In yet further implementations an application identifier can be used to identify an application and an application provider from which the application can be obtained. For example the application identifier can be a file path wherein the application is uniquely identified by an application provider a department a class and a file name such as AcmeIncorporated customerservice warrany spareparts.swf. In another example the application can be an URL that references an application provider and an application such as http www.realestate.com applications propertysearch.swf where http www.realestate.com applications is the application provider and propertysearch.swf is the application. Other application identifiers are possible.

The one or more participants each identify a workspace participant that corresponds to a user a software process a group of users or combinations of these. In some implementations a workspace participant can create workspaces and optionally elect to share one or more of the workspaces with other participants. In further implementations a participant is associated with participant information that is stored in the workspace definition in a local cache or storage on the computing device upon which the workspace definition resides or on a different computing device such as a server for instance. In some implementations participant information can include but is not limited to some or all of the information listed in TABLE 1.

In further implementations the workspace definition includes one or more of the following workspace state application state roles permissions and one or more documents . The workspace state describes the state of the workspace at one or more points in time or a time period. In some implementations the workspace state can include but is not limited to some or all of the information listed in TABLE 2. Other workspace state information is possible.

In various implementations the application state describes the state of one or more applications referred to by an application identifiers in the workspace. In some implementations the application state can include for each workspace application but is not limited to some or all of the information listed in TABLE 3. Other application state information is possible.

In various implementations the one or more roles privileges a role is a job function assigned to a workspace participant that sets forth privileges the participant has with respect to the workspace. Roles and associated privileges can reside on a computing device instead of in the workspace definition . A participant can be associated with more than one role. Roles and privileges are discussed further in reference to .

In various implementations the one or more documents includes one or more of the following for each document in the workspace a document preview or thumbnail the document a portable version of the document the identity of a server file system or other resource from which the document or portable version can be obtained e.g. by the application container . Documents can be stored in their original form compressed or encrypted.

The client system also provides persistent or non persistent data storage in the form of memory or other computer readable media or devices which can used by the application container to create a local cache of downloaded applications documents and other information. In some implementations the local cache is used to store a so called local catalog that includes applications that a user has downloaded into workspaces instantiated by the application container . Optionally the local catalog indicates which tiles are currently used in a workspace. Applications can be imported to or exported from the local catalog to the file system .

The application container receives a workspace definition from local storage e.g. or from a server see by way of the one or more networks or from a process executing on the client system . Application identifier s are then read from the workspace definition . Each application identifier refers to an application provider server see from which the application container obtains a corresponding application e.g. and . For example the applications can be transferred to the application container by using a data communication protocol such as HTTP FTP or TCP IP for example. In some implementations the applications are loaded into the execution environment where they execute. Alternatively the application container causes the applications to execute as processes or threads in the operating system .

In various implementations the execution environment includes one or more virtual machines e.g. Java Virtual Machine ActionScript Virtual Machine Common Language Runtime . Applications can be written in applications coded in ActionScript ECMAScript JavaScript or the Java programming languages for example are executed by a virtual machine. Other virtual machines and programming languages are possible. Moreover applications can access services using Internet or other data communication protocols. In further implementations the execution environment manages the executing of workspace applications executing as processes or threads in the operating system . The workspace applications can execute in a parallel fashion e.g. assuming the availability of multiple microprocessor execution cores a preemptive multitasking fashion a cooperative fashion or in other multitasking scenarios.

The workspace applications e.g. can take advantage of services which in some implementations are available as software libraries whose functions or methods can be invoked by the workspace applications. Authentication services allow workspace applications to perform authentication and authorization operations for workspace participants. Inter application communication services allow workspace applications to find each other and exchange information with each other during execution. Collaboration services enable workspace applications to become aware of participants using a shared workspace and to communicate with the participants e.g. through instant messaging email etc. . User interface services provide services for workspace applications to create and expose their user interfaces in the application container user interface.

The application container also includes support processes. A synchronization process provides workspace definition synchronization services to the application container by communicating with a workspace server to obtain and synchronize workspace definitions by communicating with a document repository to obtain and synchronize workspace documents by communicating with an authentication server to authenticate the workspace participant and by communicating with one or more application providers to obtain workspace applications called for in workspace definitions. By way of illustration when a participant logs into a workspace the synchronization process will request login information unless the participant has the login stored locally and verify the credentials with the authentication server if the workspace is in online mode or use locally cached credentials if the workspace is offline. Next the synchronization process obtains a default or selected workspace definition from the workspace server and once received obtains any needed applications from the application providers and documents from the document repository . The applications are then executed by the application container.

A catalog process is responsible for assembling a catalog and presenting it in the GUI . A search engine process can be used by the application container or workplace applications to search the workspace definition for desired information.

A collaboration process provides presence information regarding participants who are online. The collaboration process can query the collaboration server to determine which participants are logged into which non shared and shared workspaces. Application containers and optionally workspace applications can register the presence information of participants with the collaboration server and notify the server when participants login and logout of a workspace. Workspace applications and the application container GUI can surface presence information to allow participants to collaborate with each other using instant messaging electronic mail voice over IP or video conferencing for example. Moreover presence information allows users to invite each other to be participants in shared workspaces.

A snapshot process captures the state of one or more of a workspace s applications documents the workspace itself or combinations of these automatically at various times and sends the information to a snapshot server for archiving. Snapshots can be used to return an application or a workspace to a previous state. A graphical user interface is provided in some implementations for moving an application or a workspace through states is discussed in reference to .

Although the client system was described in terms of logical service and process software components there may be fewer or more components. Moreover components can be combined or divided and distributed over two or more computing devices.

In various implementations there are three basic roles however other roles are possible. A participant in the Observer role can open and interact with the workspace but is not allowed to change the public view of the workspace or share the workspace with additional participants. Observers are also not allowed to modify remove or add documents or applications to the workspace. A participant in the Contributor role can add modify or delete documents in the workspace. A contributor can also change the public view of the workspace. Contributors are not allowed to add or remove applications or to share the workspace with additional participants. A contributor cannot change privileges. An Owner has full privileges and can add modify and delete applications documents and workspaces and bestow on workspace participants roles. Owners can share a workspace with additional participants and assign privileges to roles or to participants. In some implementations each workspace has at least one owner which by default is the user who created the workspace.

In various implementations a role is defined as a hierarchy tree that has been decorated with privileges. For example the role Owner is associated with a hierarchy tree representing a specific workspace template or a generic workspace template where each node has been assigned one or more privileges although not all nodes not have to be assigned privileges. By way of example the root node representing a workspace template is decorated with read r write w and execute x privileges . The read privilege allows the workspace participant in the role to have read only access to data associated with the workspace template. The write privilege gives the workspace participant in the role to the ability modify data associated with the template. Finally the execute privilege allows the workspace participant in the role to perform template operations requiring the execute privilege. Other privileges are possible. Individual documents and applications in a workspace can also be assigned privileges for a given role as illustrated by . The Contributor and Observer roles are similarly defined.

In some implementations roles themselves can be composed in hierarchies whereby privileges associated with descendent roles are inherited by ancestor roles. By way of illustration a role hierarchy illustrates that the Contributor role inherits privileges of the Observer role . Likewise the root Owner node inherits the privileges of the Contributor role and the Observer role

A workspace participant is selected as the current participant. In some implementations the workspace participant can be selected to be the user that is currently logged on to the application container s host. In some implementations the application container can prompt the user for identification information that can be used select the workspace participant. In some implementations the application container can infer an identity to select as the workspace participant. For example the application container can use the application container s host s location network address identity or other information to infer that a particular workspace participant should be selected as the current participant. For example a public kiosk can present the application container and any user of that kiosk can be with a common workspace participant identity to select a public identity as the current participant.

The current participant s permissions are then determined based on a role associated with the current participant e.g. a workspace role . In some implementations the roles associated with the current participant can include roles for workspace authors readers editors reviewers distributors and or other roles that have differing permissions for reading creating deleting editing sharing and or other operations that can be performed to a workspace and or its content.

Each application identified in the workspace definition is executed within the application container . The application container determines a role for a current workspace participant. Based on the determined role a set of application features are enabled .

In some implementations the set of enabled features can exclude features such as the abilities to save print update retain the application s state and or other features. In some implementations the subset of features can include a restriction on the amount of time the application will execute before shutting down the size data sets and or query results the accuracy of data or other aspects of the application that can be adjusted to make its operation less valuable than that of a fully enabled application.

In some implementations the authorization of the participant can be performed to confirm that the user has purchased subscribed or has otherwise been given permission to fully utilize an application. For example non authorized users may be given limited access to a program s features to let them try the application in a limited manner before paying for it. In some implementations applications that can present non authorized users with a subset of features can be called trial ware cripple ware demo ware or other such names to denote an ability for users to try an application before purchasing or otherwise becoming authorized to use the application s full feature set.

The application container and or the application can accept input to enable additional application features. For example the user can enter a credit card a user name or other form identification into the application to start a software subscription that authorizes the user to take advantage of all the application s features. In another example the user can enter a license key serial number PIN password or other form of unlock code enable additional application features. In some implementations the application container and or the application can communicate with a service associated with the owner of the application to enable the additional application features. For example payment information can be sent to a commerce server and in response the commerce serve can provide payment to the application s owner and an unlock code to the user.

One or more applications are received to execute in the workspace. For example the user can select applications from the catalog for inclusion in the workspace. An application identifier is created for each of the applications. For example an application can be added to the workspace by creating an application identifier entry in the workspace s definition wherein the application identifier can refer to the selected application.

One or more documents e.g. electronic files are received for inclusion in the workspace. For example the user can select documents from a local or shared file repository for inclusion in the workspace. An document identifier is created for each of the documents. For example a document can be added to the workspace by creating a document identifier entry in the workspace s definition wherein the document identifier can refer to the selected document.

One or more participants are received to identify users of the workspace. A workspace participant identifier is created for each of the workspace participants. For example a workspace participant can be added to the workspace by creating a participant identifier entry in the workspace s definition wherein the participant identifier can refer to the selected participant.

In the illustrated example the calendar control includes a collection state change indicators and . The state change indicators visually indicate the dates and or times at which the history record indicates that the workspace had been previously changed. For example by selecting the state change indicator the user can cause the workspace to appear as it did on Apr. 17 2008.

The slider control also includes a thumb . The thumb is an element of the slider control that the user can manipulate along the length of the slider control . By moving the thumb the user can indicate a date and or time in the range between the starting date and the ending date .

In the illustrated example the thumb is positioned to indicate that the user wishes to have the visual representation of the workspace to appear as it did on Apr. 24 2008. By positioning the thumb at the Apr. 24 2008 position the user can cause the application container to determine the state of the workspace from the history record. As is indicated by the state change indicator the workspace s state on Apr. 24 2008 was the state saved on Apr. 20 2008.

For example by pressing the history button a history user interface that presents a calendar control can appear and by selecting a date the user can cause the workspace to appear as it did on that date. In another example the history user interface may present a slider control that represents a history timeline of the workspace and by sliding the control back and forth the user can cause the workspace to revert back to various older versions of itself.

In some implementations the history record can be saved as a file separate from the workspace definition. In some implementations the history record can be saved as part of the workspace definition. For example by saving the history record as part of the workspace definition the history of the workspace can be distributed along with the workspace definition. In another example by saving the history record separately from the workspace definition the history record can be unique to an individual user and or permit the history record to span among multiple versions of the workspace .

Embodiments of the invention and all of the functional operations described in this specification can be implemented in digital electronic circuitry or in computer software firmware or hardware including the structures disclosed in this specification and their structural equivalents or in combinations of one or more of them. Embodiments of the invention can be implemented as one or more computer program products i.e. one or more modules of computer program instructions encoded on a computer readable medium for execution by or to control the operation of computing device. The computer readable medium can be a machine readable storage device a machine readable storage substrate a memory device or a combination of one or more of them. The term computing device encompasses all apparatus devices and machines for processing data including by way of example a programmable processor a computer a digital media player an electronic game a mobile phone or multiple processors or computers or combinations of these. The computing device can include in addition to hardware code that creates an execution environment for the computer program in question e.g. code that constitutes processor firmware a protocol stack a database management system an operating system or a combination of one or more of them.

A computer program also known as a program software software application script or code can be written in any form of programming language including compiled or interpreted languages and it can be deployed in any form including as a stand alone program or as a module component subroutine or other unit suitable for use in a computing environment. A computer program does not necessarily correspond to a file in a file system. A program can be stored in a portion of a file that holds other programs or data e.g. one or more scripts stored in a markup language document in a single file dedicated to the program in question or in multiple coordinated files e.g. files that store one or more modules sub programs or portions of code . A computer program can be deployed to be executed on one computer or on multiple computers that are located at one site or distributed across multiple sites and interconnected by a communication network.

The processes and logic flows described in this specification can be performed by one or more programmable processors executing one or more computer programs to perform functions by operating on input data and generating output. The processes and logic flows can also be performed by and apparatus can also be implemented as special purpose logic circuitry e.g. an FPGA field programmable gate array or an ASIC application specific integrated circuit .

Processors suitable for the execution of a computer program include by way of example both general and special purpose microprocessors and any one or more processors of any kind of digital computer. Generally a processor will receive instructions and data from a read only memory or a random access memory or both. The essential elements of a computer are a processor for performing instructions and one or more memory devices for storing instructions and data. Generally a computer will also include or be operatively coupled to receive data from or transfer data to or both one or more mass storage devices for storing data e.g. magnetic magneto optical disks or optical disks. However a computer need not have such devices. Moreover a computer can be embedded in another device e.g. a mobile telephone a personal digital assistant PDA a mobile audio player a Global Positioning System GPS receiver to name just a few. Computer readable media suitable for storing computer program instructions and data include all forms of non volatile memory media and memory devices including by way of example semiconductor memory devices e.g. EPROM EEPROM and flash memory devices magnetic disks e.g. internal hard disks or removable disks magneto optical disks and CD ROM and DVD ROM disks. The processor and the memory can be supplemented by or incorporated in special purpose logic circuitry.

To provide for interaction with a user embodiments of the invention can be implemented on a computer having a display device e.g. a CRT cathode ray tube or LCD liquid crystal display monitor for displaying information to the user and a keyboard and a pointing device e.g. a mouse or a trackball by which the user can provide input to the computer. Other kinds of devices can be used to provide for interaction with a user as well for example feedback provided to the user can be any form of sensory feedback e.g. visual feedback auditory feedback or tactile feedback and input from the user can be received in any form including acoustic speech or tactile input.

Embodiments of the invention can be implemented in a computing system that includes a back end component e.g. as a data server or that includes a middleware component e.g. an application server or that includes a front end component e.g. a client computer having a graphical user interface or a Web browser through which a user can interact with an implementation of the invention or any combination of one or more such back end middleware or front end components. The components of the system can be interconnected by any form or medium of digital data communication e.g. a communication network. Examples of communication networks include a local area network LAN and a wide area network WAN e.g. the Internet.

The computing system can include clients and servers. A client and server are generally remote from each other and typically interact through a communication network. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client server relationship to each other.

While this specification contains many specifics these should not be construed as limitations on the scope of the invention or of what may be claimed but rather as descriptions of features specific to particular embodiments of the invention. Certain features that are described in this specification in the context of separate embodiments can also be implemented in combination in a single embodiment. Conversely various features that are described in the context of a single embodiment can also be implemented in multiple embodiments separately or in any suitable subcombination. Moreover although features may be described above as acting in certain combinations and even initially claimed as such one or more features from a claimed combination can in some cases be excised from the combination and the claimed combination may be directed to a subcombination or variation of a subcombination.

Similarly while operations are depicted in the drawings in a particular order this should not be understood as requiring that such operations be performed in the particular order shown or in sequential order or that all illustrated operations be performed to achieve desirable results. In certain circumstances multitasking and parallel processing may be advantageous. Moreover the separation of various system components in the embodiments described above should not be understood as requiring such separation in all embodiments and it should be understood that the described program components and systems can generally be integrated together in a single software product or packaged into multiple software products.

Thus particular embodiments of the invention have been described. Other embodiments are within the scope of the following claims. For example the actions recited in the claims can be performed in a different order and still achieve desirable results.

