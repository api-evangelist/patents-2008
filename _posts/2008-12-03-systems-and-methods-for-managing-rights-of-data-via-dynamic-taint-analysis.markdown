---

title: Systems and methods for managing rights of data via dynamic taint analysis
abstract: A method for managing rights associated with data is described. A request to access encrypted data is intercepted. Credentials associated with the request are verified. The data is decrypted if the credentials are verified. The decrypted data is marked with an identifier. Predetermined operations directed to the decrypted data are monitored.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08260711&OS=08260711&RS=08260711
owner: Symantec Corporation
number: 08260711
owner_city: Mountain View
owner_country: US
publication_date: 20081203
---
The use of computer systems and computer related technologies continues to increase at a rapid pace. This increased use of computer systems has influenced the advances made to computer related technologies. Indeed computer systems have increasingly become an integral part of the business world and the activities of individual consumers. Computer systems are used to carry out several business industry and academic endeavors. For example computer systems are used to complete transactions store data provide information etc.

Data used by a computer system may be organized into a computer file. The data may be represented as a collection of binary digits that represent integer values text characters etc. A computer program or application may access a computer file interpret the contents of the file and present the contents to a user as more meaningful information text images sounds etc. .

Often times data may be transferred from one location to another. For example data may be transferred from one computer system to another. A user that controls the data on a first computer system may desire that access to the transferred data on a second computer system be restricted to other users that possess certain credentials. If a user does not possess the required credentials the transferred data may not be accessed.

Application plug ins have been developed to integrate with specific computer applications in order to control the access to data. However developing and maintaining application specific plug ins is an inefficient use of time and other resources. For example each time an application is updated the plug ins that control access to data associated with the application must also be updated. In addition plug ins may not be developed for newly developed applications. As a result managing the control to data associated with these newly developed applications may not be possible. As such benefits may be realized by providing improved systems and methods for managing rights of data. In particular benefits may be realized by providing improved systems and methods for managing rights of data via dynamic taint analysis.

In one embodiment a method for managing rights associated with data is described. A request to access encrypted data may be intercepted. Credentials associated with the request may be verified. The data may be decrypted if the credentials are verified. The decrypted data may be marked with an identifier. Predetermined operations directed to the decrypted data may be monitored.

In one embodiment a monitored operation is allowed to be executed on the decrypted data. Data resulting from the execution of the allowed operation may be analyzed to determine if the resulting data should be marked with the identifier. The resulting data may be marked with the identifier based on the analysis of the resulting data. In one configuration a monitored operation may be prevented from being executed on the decrypted data.

The monitored operations may include an instruction to print transfer or copy the decrypted data to another location. In one embodiment marking the decrypted data with an identifier may include recording a location in memory corresponding to the decrypted data. Data manipulation operations may be monitored prior to the decryption of the data. Operation locations identifying the occurrence of one or more data manipulation operations may be recorded. Operations directed to manipulating decrypted data that are located in the recoded operation locations may be monitored.

A computer system that is configured to manage rights associated with data is also described. The computer system may include a processor and memory in electronic communication with the processor. The computer system may also include a rights management module. The module may be configured to intercept a request to access encrypted data and verify credentials associated with the request. In addition the module may be configured to decrypt the data if the credentials are verified and mark the decrypted data with an identifier. The module may be further configured to monitor predetermined operations directed to the decrypted data.

A computer program product for managing rights associated with data is also described. The computer program product may include a computer readable medium having instructions thereon. The instructions may include code programmed to intercept a request to access encrypted data and code programmed to verify credentials associated with the request. The instructions may also include code programmed to decrypt the data if the credentials are verified code programmed to mark the decrypted data with an identifier and code programmed to monitor predetermined operations directed to the decrypted data.

Features from any of the above mentioned embodiments may be used in combination with one another in accordance with the general principles described herein. These and other embodiments features and advantages will be more fully understood upon reading the following detailed description in conjunction with the accompanying drawings and claims.

Throughout the drawings identical reference characters and descriptions indicate similar but not necessarily identical elements. While the exemplary embodiments described herein are susceptible to various modifications and alternative forms specific embodiments have been shown by way of example in the drawings and will be described in detail herein. However the exemplary embodiments described herein are not intended to be limited to the particular forms disclosed. Rather the instant disclosure covers all modifications equivalents and alternatives falling within the scope of the appended claims.

Existing Enterprise Digital Right Management eDRM products provide access to protected data through application and file specific plug ins. These eDRM products are implemented as follows. First a recipient receives protected data through an email application file share application or some other means. The protected data may be encrypted and access to the data may be restricted to specific users which may be specified by the creator owner of the protected data. In addition the owner of the protected data may also specify certain restrictions on the data. For example the owner may allow the data to be accessed and viewed by a user that has the proper credentials but the owner may not allow the data to be printed or copied to a clipboard application.

In one embodiment existing eDRM products may be plug ins that integrate with specific applications. When an application attempts to access protected data the eDRM plug in may be accessed. The plug in may verify the credentials of the user that is using the application decrypts the data if the credentials are verified and applies any further restrictions to the data by interfacing with the application. For example the plug in may disable the copy to clipboard function the print function etc.

Current eDRM products only support applications or file types that have some type of built in eDRM functionality. In addition eDRM products must be developed and maintained to constantly support new applications and updates to existing applications. As such benefits may be realized by providing a generic solution to managing data rights that may be implemented regardless of the application or file type.

In one embodiment the first client may include a transmitting application that transmits encrypted data to the second client over a network . The network may include the Internet a wide area network WAN a local area network LAN a wireless network a wired network or any other type of network. In one configuration the transmitting application may be an email application a file sharing application etc.

A receiving application on the second client may receive the encrypted data transmitted from the first client . The receiving application may be an email application a file sharing application etc. An application on the second client may access the encrypted data from the receiving application . In one embodiment the second client may include a rights management module . For example the rights management module may implement Enterprise Digital Rights Management eDRM functions. The rights management module may determine whether the encrypted data should be decrypted into decrypted data A. In addition the rights management module may include a data marking module and a monitoring module . The data marking module may mark the decrypted data A and the monitoring module may monitor instructions directed to the decrypted data A. More details concerning the rights management module as described below.

In one embodiment the rights management module may include a request intercepting module that intercepts the data request . When a data request is intercepted a credential verification module may verify the credentials associated with a user of the client . For example the credentials may include the username and password associated with the user of the client .

If the credentials are verified a data decrypting module may access the encrypted data in order to decrypt the data . Before decrypted data A is returned to the application a data marking module may mark the decrypted data A. In one embodiment the data marking module may mark the data A by indicating the memory location of the decrypted data A. The application may manipulate the decrypted data A through one or more data instructions . In one embodiment a monitoring module may monitor some or all of the data instructions addressed to the decrypted data A that has been marked by the data marking module . The monitoring module may determine whether or not the data instructions should be executed on the decrypted data A.

In one embodiment data instructions may be applied to the decrypted data A. Examples of data instructions may include transferring instructions copying instructions etc. A transferring instruction may include an instruction to print the decrypted data A transfer the data A to another application etc. Copying instructions may includes instructions to copy the data A to a clipboard paste the data A within another application etc.

A monitoring module may monitor some or all of the data instructions communicated to the decrypted data A. An analyzer may analyze the instructions and determine whether the instructions should be allowed on the decrypted data A. The analyzer determine the instructions are allowed or not allowed based on the identifier associated with the decrypted data A. If the analyzer determines that the data instructions are not allowed to be executed on the decrypted data A a blocking module may prevent the communication of the non allowed data instructions . For example the analyzer may determine that copying the decrypted data A to a clipboard is a non allowed instruction. The blocking module may detect a hook for a clipboard application programming interface API and prevent the decrypted data A from being copied to a clipboard by disabling the hook. In one embodiment the above mentioned functions of the monitoring module may be applied on a per data file basis. In other words restrictions placed on a data file may only affect a single data file and not each and every data file in use by an application.

In some embodiments a data file may be opened by an application but in another process. In other words protected data may be opened in different instances of the application. Because each protected data file is opened in a separate process restrictions may be applied by the management module on a per process basis.

In one embodiment the monitoring module may monitor the data instructions before a user accesses the decrypted data A via the application . The monitoring module may record locations within the application where data manipulating instructions may occur. For example the monitoring module may record the locations of the various hooks in the application that allow the data A to be copied to a clipboard printed or any other form of manipulation. When a user accesses the decrypted data A via the application the monitoring module may only monitor the instructions associated with the recorded locations previously recorded. Reducing the number of instructions monitored by the monitoring module may increase the processing and run time of the application .

In one configuration a request to access encrypted data may be intercepted . In one embodiment the request intercepting module of may intercept the request to access encrypted data. For example a user of a first application such as the application may request encrypted data from a second application such as the receiving application . When the request is intercepted credentials of the requestor may be verified . In one embodiment the credentials may be associated with a user that desires to access the encrypted data. The credentials may include a username password IP address name etc. associated with the user.

In one embodiment a determination may be made as to whether the credentials are verified. In one example the credential verification module of may determine whether the credentials are verified or authenticated. If it is determined that the credentials are not verified the method may remain idle until another request to access encrypted data is intercepted . However if it is determined that the credentials are verified the data may be decrypted . For example the data decrypting module of may decrypt the data. In addition the data may be marked with an identifier. In one embodiment the data marking module of or . The decrypted data may then be returned to the application that originally requested the data. As previously mentioned the data may be marked by identifying the location in memory where the data is stored. In one example the data marking module may of or may mark the data. In one configuration propagations of the marked data may be tracked as the application executes. For example the original marked data may be copied and stored in another location in memory. These copies of the original marked data may be tracked as propagations of the marked data.

Operations and or instructions to manipulate the decrypted data as well as any tracked propagations of the marked data may be monitored . In one embodiment only instructions that pertain to certain hook APIs are monitored printing instructions copying instructions etc. As previously explained the location of the hook APIs may be previously determined and recorded in order to reduce the amount of instructions monitored . The monitoring module of or may record the location of the hook APIs to monitor.

A determination may be made as to whether the monitored operations and or instructions are allowed. For example the monitoring module may detect an instruction to print the data. The monitoring module may determine if the printing instruction is allowed for the decrypted data or any propagations of the decrypted data. If the operation or instruction is not allowed the instruction to manipulate i.e. print copy paste etc. the data is prevented . In one embodiment the blocking module may prevent the instruction from manipulating the data. In one example the blocking module may intercept the non allowed instructions before they are applied to the decrypted data. However if it is determined that the instruction is allowed the instructions may be applied and the data may be manipulated according to the allowed instructions.

The data that results from the execution of the instructions may be analyzed . For example the instructions may be to copy the original data to a clipboard application. The copy of the data on the clipboard may be analyzed . A determination may be made as to whether the data results should be maintained as marked or tainted data. The determination may be based on the analysis of the data results. If the pre instruction data is tainted the post instruction data may also maintain the taint. In other words if the original decrypted data is tainted and then copied to a clipboard application the copied data on the clipboard may also be marked with an identifier in order to be tainted.

The method may be repeated each time certain data manipulation instructions are allowed and executed on data. Continuing with the example provided above a printing instruction may be executed on the tainted data previously copied on the clipboard application. The printed data may be analyzed to determine if the printed data should also be maintained as tainted data.

Processor generally represents any type or form of processing unit capable of processing data or interpreting and executing instructions. In certain embodiments processor may receive instructions from a software application or module. These instructions may cause processor to perform the functions of one or more of the exemplary embodiments described and or illustrated herein. For example processor may perform and or be a means for performing either alone or in combination with other elements one or more of the intercepting verifying decrypting marking and monitoring steps described herein. Processor may also perform and or be a means for performing any other steps methods or processes described and or illustrated herein.

System memory generally represents any type or form of volatile or non volatile storage device or medium capable of storing data and or other computer readable instructions. Examples of system memory include without limitation random access memory RAM read only memory ROM flash memory or any other suitable memory device. Although not required in certain embodiments computing system may comprise both a volatile memory unit such as for example system memory and a non volatile storage device such as for example primary storage device as described in detail below .

In certain embodiments exemplary computing system may also comprise one or more components or elements in addition to processor and system memory . For example as illustrated in computing system may comprise a memory controller an I O controller and a communication interface each of which may be interconnected via a communication infrastructure . Communication infrastructure generally represents any type or form of infrastructure capable of facilitating communication between one or more components of a computing device. Examples of communication infrastructure include without limitation a communication bus such as an ISA PCI PCIe or similar bus and a network.

Memory controller generally represents any type or form of device capable of handling memory or data or controlling communication between one or more components of computing system . For example in certain embodiments memory controller may control communication between processor system memory and I O controller via communication infrastructure . In certain embodiments memory controller may perform and or be a means for performing either alone or in combination with other elements one or more of the steps or features described and or illustrated herein such as intercepting verifying decrypting marking and monitoring.

I O controller generally represents any type or form of module capable of coordinating and or controlling the input and output functions of a computing device. For example in certain embodiments I O controller may control or facilitate transfer of data between one or more elements of computing system such as processor system memory communication interface display adapter input interface and storage interface . I O controller may be used for example to perform and or be a means for intercepting verifying decrypting marking and monitoring steps described herein. I O controller may also be used to perform and or be a means for performing other steps and features set forth in the instant disclosure.

Communication interface broadly represents any type or form of communication device or adapter capable of facilitating communication between exemplary computing system and one or more additional devices. For example in certain embodiments communication interface may facilitate communication between computing system and a private or public network comprising additional computing systems. Examples of communication interface include without limitation a wired network interface such as a network interface card a wireless network interface such as a wireless network interface card a modem and any other suitable interface. In at least one embodiment communication interface may provide a direct connection to a remote server via a direct link to a network such as the Internet. Communication interface may also indirectly provide such a connection through for example a local area network such as an Ethernet network or a wireless IEEE 802.11 network a personal area network such as a BLUETOOTH or IEEE Standard 802.15.1 2002 network a telephone or cable network a cellular telephone connection a satellite data connection or any other suitable connection.

In certain embodiments communication interface may also represent a host adapter configured to facilitate communication between computing system and one or more additional network or storage devices via an external bus or communications channel. Examples of host adapters include without limitation SCSI host adapters USB host adapters IEEE 1394 host adapters SATA and eSATA host adapters ATA and PATA host adapters Fibre Channel interface adapters Ethernet adapters or the like. Communication interface may also allow computing system to engage in distributed or remote computing. For example communication interface may receive instructions from a remote device or send instructions to a remote device for execution. In certain embodiments communication interface may perform and or be a means for performing either alone or in combination with other elements one or more of the intercepting verifying decrypting marking and monitoring steps disclosed herein. Communication interface may also be used to perform and or be a means for performing other steps and features set forth in the instant disclosure.

As illustrated in computing system may also comprise at least one display device coupled to communication infrastructure via a display adapter . Display device generally represents any type or form of device capable of visually displaying information forwarded by display adapter . Similarly display adapter generally represents any type or form of device configured to forward graphics text and other data from communication infrastructure or from a frame buffer as known in the art for display on display device .

As illustrated in exemplary computing system may also comprise at least one input device coupled to communication infrastructure via an input interface . Input device generally represents any type or form of input device capable of providing input either computer or human generated to exemplary computing system . Examples of input device include without limitation a keyboard a pointing device a speech recognition device or any other input device. In at least one embodiment input device may perform and or be a means for performing either alone or in combination with other elements one or more of the intercepting verifying decrypting marking and monitoring steps disclosed herein. Input device may also be used to perform and or be a means for performing other steps and features set forth in the instant disclosure.

As illustrated in exemplary computing system may also comprise a primary storage device and a backup storage device coupled to communication infrastructure via a storage interface . Storage devices and generally represent any type or form of storage device or medium capable of storing data and or other computer readable instructions. For example storage devices and may be a magnetic disk drive e.g. a so called hard drive a floppy disk drive a magnetic tape drive an optical disk drive a flash drive or the like. Storage interface generally represents any type or form of interface or device for transferring data between storage devices and and other components of computing system .

In certain embodiments storage devices and may be configured to read from and or write to a removable storage unit configured to store computer software data or other computer readable information. Examples of suitable removable storage units include without limitation a floppy disk a magnetic tape an optical disk a flash memory device or the like. Storage devices and may also comprise other similar structures or devices for allowing computer software data or other computer readable instructions to be loaded into computing system . For example storage devices and may be configured to read and write software data or other computer readable information. Storage devices and may also be a part of computing system or may be a separate device accessed through other interface systems.

Storage devices and may also be used for example to perform and or be a means for performing either alone or in combination with other elements one or more of the intercepting verifying decrypting marking and monitoring steps disclosed herein. Storage devices and may also be used to perform and or be a means for performing other steps and features set forth in the instant disclosure.

Many other devices or subsystems may be connected to computing system . Conversely all of the components and devices illustrated in need not be present to practice the embodiments described and or illustrated herein. The devices and subsystems referenced above may also be interconnected in different ways from that shown in . Computing system may also employ any number of software firmware and or hardware configurations. For example one or more of the exemplary embodiments disclosed herein may be encoded as a computer program also referred to as computer software software applications computer readable instructions or computer control logic on a computer readable medium. The phrase computer readable medium generally refers to any form of device carrier or medium capable of storing or carrying computer readable instructions. Examples of computer readable media include without limitation transmission type media such as carrier waves and physical media such as magnetic storage media e.g. hard disk drives and floppy disks optical storage media e.g. CD or DVD ROMs electronic storage media e.g. solid state drives and flash media and other distribution systems.

The computer readable medium containing the computer program may be loaded into computing system . All or a portion of the computer program stored on the computer readable medium may then be stored in system memory and or various portions of storage devices and . When executed by processor a computer program loaded into computing system may cause processor to perform and or be a means for performing the functions of one or more of the exemplary embodiments described and or illustrated herein. Additionally or alternatively one or more of the exemplary embodiments described and or illustrated herein may be implemented in firmware and or hardware. For example computing system may be configured as an application specific integrated circuit ASIC adapted to implement one or more of the exemplary embodiments disclosed herein.

As illustrated in one or more storage devices N may be directly attached to server . Similarly one or more storage devices N may be directly attached to server . Storage devices N and storage devices N generally represent any type or form of storage device or medium capable of storing data and or other computer readable instructions. In certain embodiments storage devices N and storage devices N may represent network attached storage NAS devices configured to communicate with servers and using various protocols such as NFS SMB or CIFS.

Servers and may also be connected to a storage area network SAN fabric . SAN fabric generally represents any type or form of computer network or architecture capable of facilitating communication between a plurality of storage devices. SAN fabric may facilitate communication between servers and and a plurality of storage devices N and or an intelligent storage array . SAN fabric may also facilitate via network and servers and communication between client systems and and storage devices N and or intelligent storage array in such a manner that devices N and array appear as locally attached devices to client systems and . As with storage devices N and storage devices N storage devices N and intelligent storage array generally represent any type or form of storage device or medium capable of storing data and or other computer readable instructions.

In certain embodiments and with reference to exemplary computing system of a communication interface such as communication interface in may be used to provide connectivity between each client system and and network . Client systems and may be able to access information on server or using for example a web browser or other client software. Such software may allow client systems and to access data hosted by server server storage devices N storage devices N storage devices N or intelligent storage array . Although depicts the use of a network such as the Internet for exchanging data the embodiments described and or illustrated herein are not limited to the Internet or any particular network based environment.

In at least one embodiment all or a portion of one or more of the exemplary embodiments disclosed herein may be encoded as a computer program and loaded onto and executed by server server storage devices N storage devices N storage devices N intelligent storage array or any combination thereof. All or a portion of one or more of the exemplary embodiments disclosed herein may also be encoded as a computer program stored in server run by server and distributed to client systems and over network . Accordingly network architecture may perform and or be a means for performing either alone or in combination with other elements one or more of the intercepting verifying decrypting marking and monitoring steps disclosed herein. Network architecture may also be used to perform and or be a means for performing other steps and features set forth in the instant disclosure.

As detailed above computing system and or one or more of the components of network architecture may perform and or be a means for performing either alone or in combination with other elements one or more steps of the exemplary methods described and or illustrated herein. For example computing system and or one or more of the components of network architecture may perform and or be a means for performing a computer implemented method for managing rights associated with data that may comprise 1 intercepting a request to access encrypted data 2 verifying credentials associated with the request 3 decrypting the data if the credentials are verified 4 marking the decrypted data with an identifier and 5 monitoring predetermined instructions directed to the decrypted data.

While the foregoing disclosure sets forth various embodiments using specific block diagrams flowcharts and examples each block diagram component flowchart step operation and or component described and or illustrated herein may be implemented individually and or collectively using a wide range of hardware software or firmware or any combination thereof configurations. In addition any disclosure of components contained within other components should be considered exemplary in nature since many other architectures can be implemented to achieve the same functionality.

The process parameters and sequence of steps described and or illustrated herein are given by way of example only and can be varied as desired. For example while the steps illustrated and or described herein may be shown or discussed in a particular order these steps do not necessarily need to be performed in the order illustrated or discussed. The various exemplary methods described and or illustrated herein may also omit one or more of the steps described or illustrated herein or include additional steps in addition to those disclosed.

Furthermore while various embodiments have been described and or illustrated herein in the context of fully functional computing systems one or more of these exemplary embodiments may be distributed as a program product in a variety of forms regardless of the particular type of computer readable media used to actually carry out the distribution. The embodiments disclosed herein may also be implemented using software modules that perform certain tasks. These software modules may include script batch or other executable files that may be stored on a computer readable storage medium or in a computing system. In some embodiments these software modules may configure a computing system to perform one or more of the exemplary embodiments disclosed herein.

The preceding description has been provided to enable others skilled in the art to best utilize various aspects of the exemplary embodiments disclosed herein. This exemplary description is not intended to be exhaustive or to be limited to any precise form disclosed. Many modifications and variations are possible without departing from the spirit and scope of the instant disclosure. The embodiments disclosed herein should be considered in all respects illustrative and not restrictive. Reference should be made to the appended claims and their equivalents in determining the scope of the instant disclosure.

Unless otherwise noted the terms a or an as used in the specification and claims are to be construed as meaning at least one of In addition for ease of use the words including and having as used in the specification and claims are interchangeable with and have the same meaning as the word comprising. 

