---

title: Tunneling IPv6 packets
abstract: Methods, systems, and products are provided for tunneling IPv6 packets. Embodiments include receiving, by an origin IPv6 border router from an origin IPv6 host, an IPv6 packet having an IPv6 destination address; receiving, by an origin IPv6 border router from an origin IPv6 host, an IPv4 address for a destination IPv6 border router retrieved from a data structure associating IPv6 destination addresses with IPv4 addresses for destination IPv6 border routers; encapsulating, by the origin IPv6 border router, the IPv6 packet in an IPv4 packet; and sending the encapsulated packet to a destination IPv6 border router at the IPv4 address. In many embodiments, encapsulating, by the origin IPv6 border router, the IPv6 packet in an IPv4 packet is carried out by adding an IPv4 header to the IPv6 packet.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07769878&OS=07769878&RS=07769878
owner: International Business Machines Corporation
number: 07769878
owner_city: Armonk
owner_country: US
publication_date: 20080731
---
The field of the invention is data processing or more specifically methods systems and products for tunneling IPv6 packets.

The Internet Protocol version 6 IPv6 is a version of Internet Protocol IP designed to be an evolutionary step from the widely used version Internet Protocol version 4 IPv4 . IPv6 provides increased address space a simplified header format support for authentication and privacy autoconfiguration of address assignments and new quality of service capabilities.

Despite the growing use of IPv6 IPv4 is still the dominant protocol of the Internet and therefore transition mechanisms have been provided to use the IPv4 routing infrastructure to send IPv6 packets. Tunneling allows an IPv6 compatible host or router to transmit IPv6 packets across existing IPv4 networks. Tunneling an IPv6 packet across an IPv4 network is typically carried out by encapsulating the IPv6 packet in an IPv4 packet and sending the packet to an IPv4 compatible router. Encapsulating an IPv6 packet in an IPv4 packet is carried out by adding an IPv4 header to the packet making the packet transmittable across an IPv4 network. Conventional techniques for tunneling IPv6 packets across IPv4 networks typically require a particular IPv6 compatible origin router to be manually configured with an IPv4 destination address of another IPv6 compatible router that receives the encapsulated packet. Manually configuring routers with such destination IPv4 addresses is time consuming and cumbersome for system administrators. Such manual configuration also makes routing encapsulated packets inflexible because only a limited number of such the destination addresses are manually configured onto an IPv6 compatible router. There is therefore an ongoing need for improved methods systems and products for tunneling IPv6 packets.

Methods systems and products are provided for tunneling IPv6 packets. Embodiments include receiving by an origin IPv6 border router from an origin IPv6 host an IPv6 packet having an IPv6 destination address receiving by an origin IPv6 border router from an origin IPv6 host an IPv4 address for a destination IPv6 border router retrieved from a data structure associating IPv6 destination addresses with IPv4 addresses for destination IPv6 border routers encapsulating by the origin IPv6 border router the IPv6 packet in an IPv4 packet and sending the encapsulated packet to a destination IPv6 border router at the IPv4 address. In many embodiments encapsulating by the origin IPv6 border router the IPv6 packet in an IPv4 packet is carried out by adding an IPv4 header to the IPv6 packet.

Typical embodiments also include decapsulating by the destination IPv6 border router the encapsulated packet and forwarding by the destination IPv6 border router the decapsulated packet to a destination host having the destination IPv6 address. In many embodiments decapsulating by the destination IPv6 border router the encapsulated packet is carried out by removing an IPv4 header added by the origin border router from the encapsulated packet.

Typical embodiments also include identifying by the IPv6 host an IPv6 destination address for the packet retrieving from a data structure associating IPv6 destination addresses with IPv4 addresses for destination IPv6 border routers an IPv4 address for a destination IPv6 border router sending an IPv6 packet having the IPv6 destination address to the origin IPv6 border router and providing to an origin IPv6 border router an IPv4 address for an associated destination IPv6 border router for the IPv6 packet. In many embodiments the data structure associating IPv6 destination addresses with IPv4 addresses for destination IPv6 border routers includes a DNS resource record.

The foregoing and other objects features and advantages of the invention will be apparent from the following more particular descriptions of exemplary embodiments of the invention as illustrated in the accompanying drawings wherein like reference numbers generally represent like parts of exemplary embodiments of the invention.

The present invention is described to a large extent in this specification in terms of methods for tunneling IPv6 packets. Persons skilled in the art however will recognize that any computer system that includes suitable programming means for operating in accordance with the disclosed methods also falls well within the scope of the present invention. Suitable programming means include any means for directing a computer system to execute the steps of the method of the invention including for example systems comprised of processing units and arithmetic logic circuits coupled to computer memory which systems have the capability of storing in computer memory which computer memory includes electronic circuits configured to store data and program instructions programmed steps of the method of the invention for execution by a processing unit.

The invention also may be embodied in a computer program product such as a diskette or other recording medium for use with any suitable data processing system. Embodiments of a computer program product may be implemented by use of any recording medium for machine readable information including magnetic media optical media or other suitable media. Persons skilled in the art will immediately recognize that any computer system having suitable programming means will be capable of executing the steps of the method of the invention as embodied in a program product. Persons skilled in the art will recognize immediately that although most of the exemplary embodiments described in this specification are oriented to software installed and executed on computer hardware nevertheless alternative embodiments implemented as firmware or as hardware are well within the scope of the present invention.

Methods systems and products for tunneling IPv6 packets are described with reference to the accompanying drawings beginning with reference to . depicts an exemplary data processing system capable of tunneling IPv6 packets according to embodiments of the present invention. The system of includes a number of computers connected for data communications in three networks and . In the example of several exemplary devices including a PDA a computer workstation a mobile phone and personal computer are connected to an IPv6 network . In the example of the network enabled mobile phone connects to the IPv6 network through a wireless connection . The workstation connects to the IPv6 network through a wireline connection . The PDA connects to the IPv6 network through a wireless connection . And the personal computer connects to the IPv6 network through a wireline connection .

The example of also includes another IPv6 network . Several exemplary devices including a laptop a network enabled mobile phone and a personal computer are connected to the IPv6 network . In the example of the laptop connects to the IPv6 network through a wireless connection . The mobile phone connects to the IPv6 network through a wireless connection . And the personal computer connects to the IPv6 network through a wireline connection .

In the example of each IPv6 network and have border router and capable of tunneling IPv6 packets according to embodiments of the present invention. The border router is connected to the IPv6 network through a wireline connection and the border router is connected to the other IPv6 network through a wireline connection . The exemplary border routers are is so called because they are capable of routing IPv6 packets from devices within their respective IPv6 network to other devices outside of their IPv6 network. These routers therefore reside on the border of their respective IPv6 network.

To route IPv6 packets from one IPv6 network to another IPv6 network the exemplary border routers of coupled for data communications to one another through an IPv4 network . In the example of IPv6 packets are tunneled across the IPv4 network from one border router to another border router for transmission from one IPv6 network to another IPv6 network .

In the example of to send an IPv6 packet from an origin IPv6 host in an origin IPv6 network to an IPv6 destination host in a destination IPv6 network an origin host identifies an IPv6 destination address for a host receiving the packet. Identifying an IPv6 destination address for the packet is carried in the system of by resolving a domain name for the destination host. Resolving a domain name for the destination host is carried out by retrieving from a DNS server a DNS resource record an IP address.

The Domain Name System DNS is a name service typically associated with the Internet. The DNS translates domain names in network addresses. The domain names are names of computer hosts providing network services such as web servers email servers and others. In the example of the network addresses are IPv6 addresses. Domain names are typically expressed in alphabetic text easier for humans to work with than numeric network addresses. Networks however operate on numeric network addresses. Every time a user requests a resource by use of a domain name therefore a DNS service somewhere translates the domain name into a corresponding network address. The domain name ibm.com for example might translate into the IP network address 129.42.19.99. The goal of domain names is to provide a mechanism for naming resources in such a way that the names are usable in different hosts networks protocol families internets and administrative organizations. From the user s point of view domain names are useful as arguments to a function called a resolver which retrieves information associated with the domain name. Thus a user might ask for the host address or mail information associated with a particular domain name. To enable the user to request a particular type of information an appropriate query type is passed to the resolver with the domain name. To the user the domain tree is a single information space the resolver is responsible for hiding the distribution of data among name servers from the user.

Resolvers are programs that extract information from DNS name servers in response to client requests. Resolvers must be able to access at least one name server and use that name server s information to answer a query directly or pursue the query using referrals to other name servers. A resolver will typically be a system routine that is directly accessible to user programs so that no protocol usually is needed between the resolver and the user program. Both the name server and resolver are software processes executing on one or more computers. Essentially the resolver submits a query to a name server about a domain name. The name server resolves the mapping of the domain name to a machine address and sends the machine address back to the resolver as the answer to the query.

In many network hosts a resolver is part of the operating system. More particularly in the case of TCP IP the resolver is often part of the TCP IP client accessible from the application level through a C or C call through an Application Programming Interface API such as the sockets API. The Microsoft Windows Sockets API for example provides functions named gethostbyname and WSAAsyncGetHostByName that respectively work synchronously and asynchronously to obtain network addresses for network hosts given the hosts domain names as inputs. Similarly the Java method InetAddress.getByName string host is a static Java method that instantiates an object of class InetAddress representing the internet protocol address of a network host.

DNS includes a request response data communications protocol with standard message types. Gethostbyname and InetAddress.getByName are examples of API calls to a TCP IP client in an operating system such as Unix or Windows. Such a TCP IP client typically bears one or more predesignated DNS server addresses designations of a primary DNS server for a computer and possibly one or more secondary DNS servers. In response to a call to a resolver function such as gethostbyname and InetAddress.getByName a TCP IP client sends a DNS request message containing the domain name in a standard format to a predesignated primary DNS server requesting a corresponding network address and upon receiving a response message provides the network address in return to the calling program. When a calling application receives the network address from the operating system it can use the network address to access resources on the network host identified by the domain name associated with the network address.

DNS resource records may advantageously be modified in accordance with the present invention to include in addition to the requested IPv6 destination address an associated IPv4 address for a destination border router capable of delivering a packet to the IPv6 destination address. That is the DNS resource record also includes an IPv4 address capable of receiving encapsulated IPv6 packets intended for the associated IPv6 destination address.

In the system of therefore a host sends an IPv6 packet having the IPv6 destination address to the origin IPv6 border router and also provides to the border router an IPv4 address identified in the DNS record for an associated destination border router. In some embodiments the origin host embeds the IPv4 address for the destination border router into an extension header of the IPv6 packet.

In the system of the border router is capable of receiving the IPv6 packet from the host receiving the IPv4 address for a destination IPv6 border router encapsulating the IPv6 packet in an IPv4 packet and sending the encapsulated packet to a destination IPv6 border router at the IPv4 address. The border router of is capable of decapsulating the encapsulated packet and forwarding the decapsulated packet to a destination host having the destination IPv6 address.

The network connection aspect of the architecture of is only for explanation not for limitation. In fact systems for displaying a computer resource through a preferred browser according to embodiments of the present invention may be connected as LANs WANs intranets internets the Internet webs the World Wide Web itself or other connections as will occur to those of skill in the art. Such networks are media that may be used to provide data communications connections between various devices and computers connected together within an overall data processing system.

The arrangement of hosts border routers and devices making up the exemplary system illustrated in are for explanation not for limitation. Data processing systems useful according to various embodiments of the present invention may include additional servers routers other devices and peer to peer architectures not shown in as will occur to those of skill in the art. Networks in such data processing systems may support many data communications protocols including for example TCP IP HTTP WAP HDTP and others as will occur to those of skill in the art. Various embodiments of the present invention may be implemented on a variety of hardware platforms in addition to those illustrated in .

As mentioned above tunneling IPv6 packets in accordance with the present invention is generally implemented with computers that is with automated computing machinery. For further explanation sets forth a block diagram of automated computing machinery comprising a border router useful in tunneling IPv6 packets according to embodiments of the present invention. The border router of includes at least one computer processor or CPU as well as random access memory RAM . Stored in RAM is an operating system . Operating systems useful in border routers according to embodiments of the present invention include Unix AIX Linux Microsoft NT and many others as will occur to those of skill in the art. Operating system in the example of is shown in RAM but many components of an operating system typically are stored in non volatile memory also.

Also stored in RAM is a Tunnel Broker capable of tunneling packets according to the present invention. The tunnel broker is software capable of receiving from an origin IPv6 host an IPv6 packet having an IPv6 destination address receiving from an origin IPv6 host an IPv4 address for a destination IPv6 border router encapsulating the IPv6 packet in an IPv4 packet and sending the encapsulated packet to a destination IPv6 border router at the IPv4 address. Tunnel brokers such as the one depicted in are typically installed on border routers and advantageously tunnel IPv6 packets according to embodiments of the present invention.

The border router of includes non volatile computer memory coupled through a system bus to processor and to other components of the border router. Non volatile computer memory may be implemented as a hard disk drive optical disk drive electrically erasable programmable read only memory space so called EEPROM or Flash memory RAM drives not shown or as any other kind of computer memory as will occur to those of skill in the art.

The exemplary border router of includes a communications adapter for implementing connections for data communications including connections through networks to other computers including servers clients and others as will occur to those of skill in the art. Communications adapters implement the hardware level of connections for data communications through which local devices and remote devices or servers send data communications directly to one another and through networks. Examples of communications adapters useful for tunneling IPv6 packets according to embodiments of the present invention include modems for wired dial up connections Ethernet IEEE 802.3 adapters for wired LAN connections and 802.11b adapters for wireless LAN connections.

The example border router of includes one or more input output interface adapters . Input output interface adapters in computers implement user oriented input output through for example software drivers and computer hardware for controlling output to display devices such as computer display screens as well as user input from user input devices such as keyboards and mice.

For further explanation sets forth a flow chart illustrating an exemplary method for tunneling IPv6 packets. The method of includes identifying by the IPv6 host an IPv6 destination address for the packet. In the method of identifying by the IPv6 host an IPv6 destination address for the packet typically includes resolving a domain name for the destination host by use of the DNS service. As discussed above the Domain Name System DNS is a name service typically associated with the Internet that that translates domain names into network addresses.

The method of includes retrieving from a DNS record an IPv4 address for a destination IPv6 border router . The DNS resource record of also includes not only the IPv6 destination address for a domain name but also an IPv4 address for a border router capable of receiving an encapsulated IPv6 packet intended for the IPv6 destination address and also capable of decapsulating the packet and forwarding the decapsulated packet to the destination address. Such a DNS resource record modified in accordance with the present invention advantageously provides a vehicle to associate IPv6 network addresses with a preferred border router to receive IPv6 packets intended for the host at the IPv6 network address.

For further explanation sets forth an exemplary data structure useful in tunneling IPv6 packets in accordance with the present invention. The example of includes a DNS resource record modified in accordance with the present invention. The DNS resource record of includes a domain name field including the domain name of a destination host. The DNS resource record of also includes a IPv6 network address for the destination host. The DNS resource record of further includes an IPv4 network address identifying a border router capable of decapsulating an encapsulated IPv6 message and forwarding the decapsulated message to the intended destination IPv6 network address. While the exemplary DNS resource record includes the IPv4 border router address as a field within the record in alternative embodiments the IPv4 border router address may be provided in a separate record of type BR designed to contain IPv4 border router addresses. The exemplary DNS resource record of is presented for explanation and not for limitation. In fact IPv6 destination addresses and addresses for border routers may be associated in any data structure as will occur to those of skill in the art. Furthermore the DNS resource record of is simplified for clarity of explanation. Typical DNS records modified in accordance with the present invention will include more fields than those presented in the example of such as for example record type time to live data for the record and so on as will occur to those of skill in the art.

Again with reference to The method of also includes sending an IPv6 packet having the IPv6 destination address to the origin IPv6 border router and providing to an origin IPv6 border router an IPv4 address for an associated destination IPv6 border router for the IPv6 packet. One way of providing to an origin IPv6 border router an IPv4 address for an associated destination IPv6 border router for the IPv6 packet is carried out by embedding the IPv4 address of the destination border router in an extension header of the IPv6 packet. IPv6 provides extension headers to provide a practical means to implement additional routing options. The extension headers are placed between the transport layer header and the IPv6 header. Several types of extension headers are defined for IPv6 and a value in a next header field identifies that another extension header follows. The extension headers are placed in order so that a router can stop reading the next header field once it reaches the last value or extension header that may pertain to the router. All of the extension options do not have to be processed by each router that the packet traverses along its way to the destination. In fact many IPv6 extension headers are not processed until they arrive at the destination. Many options have already been defined for use in IPv6 Extension Headers. Examples of already defined extension headers include 

Providing to an origin IPv6 border router an IPv4 address for an associated destination IPv6 border router by embedding the IPv4 address of the destination border router in an extension header of the IPv6 packet may be carried out through the use of a new extension header containing the IPv4 address of the destination border router for the IPv6 packet according to embodiments of the present invention. Providing the IPv4 address of the destination border router in the packet itself advantageously removes the need to manually configure the origin border router with addresses of other border routers. Instead the origin border router is provided with the routing information needed to tunnel the IPv6 packet to a destination border router on a packet by packet basis.

The method of also includes receiving by an origin IPv6 border router from an origin IPv6 host an IPv6 packet having an IPv6 destination address and receiving by an origin IPv6 border router from an origin IPv6 host an IPv4 address for a destination IPv6 border router . In the method of the IPv4 address for a destination IPv6 border router is received embedded in an extension header of the IPv6 packet itself.

The method of also includes encapsulating by the origin IPv6 border router the IPv6 packet in an IPv4 packet . In the method of encapsulating by the origin IPv6 border router the IPv6 packet in an IPv4 packet is carried out by adding an IPv4 header to the IPv6 packet. Adding an IPv4 header to the IPv6 packet allows the origin border router to transmit the embedded packet across an IPv4 network. For further explanation sets forth a block diagram illustrating an embedded packet in accordance with the present invention. In the example of an IPv6 packet containing an IPv6 header followed by extension headers identifying to the origin border router the IPv4 address to send the encapsulated packet and containing data to be transmitted to the designation host is encapsulated in an IPv4 packet . In the example of the encapsulated IPv4 packet has an IPv4 header added to IPv6 header the extension headers and the data. The encapsulated IPv4 packet having the added IPv4 header is transmittable across an IPv4 network.

Again with reference to The method of also includes sending the encapsulated packet to a destination IPv6 border router at the IPv4 address . In the example of the encapsulated packet is sent to an IPv4 address identified by the origin host and embedded in extension headers within the IPv6 packet encapsulated within the IPv4 packet.

The method of also includes decapsulating by the destination IPv6 border router the encapsulated packet and forwarding by the destination IPv6 border router the decapsulated packet to a destination host having the destination IPv6 address. In the method of decapsulating by the destination IPv6 border router the encapsulated packet is carried out by removing an IPv4 header added by the origin border router from the encapsulated packet.

It will be understood from the foregoing description that modifications and changes may be made in various embodiments of the present invention without departing from its true spirit. The descriptions in this specification are for purposes of illustration only and are not to be construed in a limiting sense. The scope of the present invention is limited only by the language of the following claims.

