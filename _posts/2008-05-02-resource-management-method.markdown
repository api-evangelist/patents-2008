---

title: Resource management method
abstract: There is provided a method of managing a resource within a computer system using a configuration wrapper, the method comprising: providing a configuration file comprising configuration data for the resource; generating metadata related to the configuration data; and automatically processing the metadata to produce a configuration wrapper for the resource. The configuration wrapper may be a java object with management attributes and methods.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08695006&OS=08695006&RS=08695006
owner: Oracle International Corporation
number: 08695006
owner_city: Redwood Shores
owner_country: US
publication_date: 20080502
---
The present invention is in the field of resource management for resources within a computer system. In particular the present invention provides a method of generating an object oriented resource wrapper for use in managing a resource.

To complete a given task on a modern computer system the computer system will typically employ a myriad of hardware and software resources. These resources may comprise local software applications hardware devices data or implementations of a remote software service. As the complexity of these systems has grown so has the need to efficiently manage and configure the resources available.

Many resources within modern computer systems can be configured using so called configuration files. illustrates the management of a resource according to these prior art methods. Resource is typically associated with computer system and an accompanying configuration file . Configuration file comprises one or more configurable parameters relating to resource . When the computer system interacts with or runs resource it makes use of configuration file to appropriately set the configurable aspects of the resource . For example if resource comprises a software application then configuration file may comprise a parameter setting the default path for file access. In real world implementations a modern software application may have over ten different configuration files that expose over five hundred different attributes. Each of these attributes may be modified by a user to affect the behaviour of the software application. Using configuration files to manage the resources of a computer system provides a workable solution to the problem of resource complexity. However in itself this solution also introduces a number of further problems of its own.

A first problem is that often the configuration file contains attribute fields that can only be understood by the developer of the resource. For example a configuration file for a peripheral hardware device will be typically produced and only understood by the engineer or team of engineers responsible for the creation of the device and a configuration file for a software application will be typically produced and only understood by the programmer or team of programmers responsible for coding the application. In the latter case the form and syntax of the configuration file may be intricately linked with the form and syntax of the software application. A user unfamiliar with the form and syntax of the software application will thus not be able to alter the configuration of the resource by directly altering the configuration file even if they are familiar with the language in which the configuration file is written. If a user unfamiliar with the intricate workings of the resource attempts to set configuration parameters and incorrectly edits the configuration file then the accompanying resource will not be configured correctly increasing the likelihood of errors. Incorrect parameters set for a hardware device may cause the device to fail and incorrect parameters for a software application may cause the application to crash.

To increase the usability of configuration files and to overcome the problem above some technical developers began to provide user friendly applications for configuring the parameters of the resource in the configuration file . For example a software application may provide a specially designed graphical interface for viewing and setting resource parameters. Such interfaces could also be adapted to provide advance features such as error checking and automatic updates typically the user would alter the parameters in a graphical user interface and the configuration file would be updated behind the scenes when the user pressed a SAVE button.

While the provision of configuration applications facilitated the updating of configuration files it also generated another problem in that the user now had to be familiar with the specific configuration applications for a particular resource. Moreover each configuration application typically provided a different user interface and a different method of updating configuration files. Therefore to further facilitate the process of updating configuration files a number of resource management standards were agreed upon. These standards were typically accompanied by a standard set of application programming interfaces APIs that enabled a number of heterogeneous resources to be managed in a common manner. Different standards were typically developed for different programming languages and the Java standard is referred to as Java Management eXtensions JMX . show prior art methods of resource management using standardised interfaces.

In order to allow the management application to interact with a number of configuration files of different types and form a configuration wrapper is provided. For example in an object oriented programming environment the configuration wrapper may comprise a software object that models the resource . The JMX standard requires that developers wrap their configuration files in Java software objects called MBeans Management Beans . The process of wrapping a resource typically comprises modelling the resource using one or more software objects. This MBean may encapsulate other lower level software objects and provides standardised methods for accessing and writing configuration information to a configuration file . For example the software objects may provide GET methods to retrieve configuration parameter values associated with the resource and SET methods to save configuration parameter values associated with the resource . The configuration wrapper thus provides an interface between the management application and the actual configuration file . The JMX standard then allows developers to use management applications that can read data associated with MBeans and provide a management user interface to edit values associated with the resource .

However the use of standards such as JMX comes at a price to developers. In order to wrap a resource using a software object the variables and methods of the software object must be defined by the developer based on the properties of the resource and the resource s configuration file i.e. an MBean must be manually generated by the developer of the resource based on the form and syntax of the configuration file . For example if configuration file comprises a parameter such as file path then the configuration wrapper would need to contain an internal property such as file path and a method for accessing and setting this property for example a GET.file path method. The methods of the MBean are set out in program code within the class definitions for the MBean and are written by the developer of the resource using their knowledge of the resource and configuration file . While the development of software objects many be tractable when dealing with a small number of resources generating software objects to manage a large number of resources and configuration files can take an exceedingly long amount of time especially if each file has a large number of configuration attributes and there are a large number of resources or configuration files. For example when using the JMX standard a developer will need to generate the class files to implement the MBean and will need to set the attributes and methods of the MBean within these class files based on the format of the configuration file.

A further problem also arises when attempting to maintain software objects relating to the resource and the resource s configuration files. When a resource is altered or updated for example patching a software application or implementing a firmware update for a piece of hardware the associated software object will also need to be updated to reflect the changes made to the resource and any related configuration files. This can be cumbersome if a resource is continually being updated for example when updating a given software application to fix bugs reported by users. If the software object such as the MBean is not up to date with the format of the configuration files then inconsistencies will be introduced and the resource may be configured incorrectly. For example if an MBean has not been updated by the developer based on a software update the JMX management applications may throw an error when they interact with the MBean to try to retrieve configuration values that no longer exist in the configuration file.

Hence it is an object of the present invention to provide a simple method for managing a resource. Such a method should preferably facilitate the writing and maintaining of software objects used to manage a resource within a particular software standard.

According to a first aspect of the present invention there is provided a method of managing a resource within a computer system using a configuration wrapper the method comprising 

The method of the first aspect of the invention enables configuration wrappers to be generated quickly and easily without manual intervention this not only decreases the time required to initially set up a resource management system but also facilitates the process of updating configuration wrappers after changes are made to the resource.

Preferably the resource comprises one of an application an implementation of a software service a device a database or a user however this list is non exhaustive and configuration wrappers generated by the present invention may be used to manage any resource known in the art.

In a preferred embodiment the configuration wrapper comprises a Java object with associated attributes and operations for example an MBean object. However configuration wrappers in other formats may also be generated using the methods of the present invention for example C objects or XML Schema files. In certain embodiments the configuration wrapper may be implemented using a plurality of Java objects.

In certain embodiments the metadata is stored in a metadata file and step b comprises generating a CSV or XML metadata file associated with the configuration data. This generation of the metadata file may be performed automatically using an appropriately configured algorithm or manually based on a original configuration file.

In this case the reference may be a mapping file which may contain a reference to one or more metadata files and or configuration files.

Typically management of the resource comprises viewing properties of the resource by calling methods associated with the configuration wrapper wherein the methods of the configuration wrapper may retrieve data from the configuration file or they may modify properties of the resource for example by modifying data within the configuration file.

Additionally in certain management routines any time after step c the method may further comprise the steps of 

In particular embodiments the management agent may comprise a JMX management application in other embodiments the agent may comprise a C or XSD based application

automatically processing the metadata a further time to produce an updated configuration wrapper for the resource.

According to a second aspect of the present invention there is provided a data structure for use in managing a resource within a computer system the data structure comprising 

According to a third aspect of the present invention there is provided a management system for managing a resource within a computer system the management system comprising 

wherein the means for managing the resource was generated automatically based on the means for storing meta data.

In a preferred embodiment the means for managing the resource is adapted to read and or modify configuration data for the resource associated with the means for storing configuration data.

According to a fourth aspect of the present invention there is provided a system for generating a configuration wrapper for use in managing a resource the resource having a configuration file the system comprising 

a metadata module adapted to generate one or more metadata objects in memory based on data within the metadata file 

a builder module adapted to generate one or more configuration wrapper objects in memory based on the metadata objects and

a writer module adapted to write one or more implementation files based on the one or more configuration wrapper objects generated by the builder module 

wherein the one or more implementation files are used to implement a configuration wrapper for the resource.

In a preferred embodiment the builder module and the writer module are adapted to produce configuration wrapper objects and implementation files in one or more of the following formats Java C and XML Schema XSD . In particular cases the system may also further comprise one or more additional builder and writer modules wherein the system is adapted to output implementation files for two or more formats e.g. Java and C or C and XSD.

Preferably the input module is adapted to receive a mapping file comprising one or more mappings between one or more configuration files and one or more respective metadata files wherein in certain cases the input module is also adapted to receive a mapping file comprising a plurality of mappings and the system is then further adapted to generate implementation files for a plurality of configuration wrappers which may or may not be used for managing a plurality of resources.

According to a fifth aspect of the present invention there is provided a computer readable medium comprising program code configured to process metadata associated with configuration data for a resource within a computer system to generate a configuration wrapper for use in managing the resource.

Hence a method of managing a resource is provided in which a software object or wrapper used to manage the resource is generated automatically based on metadata related to a configuration file.

In a preferred embodiment of the present invention the configuration file has a file extension of .ini and .xml representing respectively a system configuration file and an XML file although the systems and methods herein may also be adapted to process other file types if required. A simple example of an .ini file is shown below wherein attribute fields are defined using the syntax NAME PROPERTY 

XML .xml files define an attribute field using one or more XML tags as can be seen in the simple example file shown below 

The wrapper generator may also be adapted to process other types of configuration file including configuration information stored in one or more database tables. An exemplary method of generating the configuration wrapper is shown in . The method begins at step in wherein a configuration file is input into a wrapper generation routine. At step the configuration file is parsed and processed in order to generate metadata based on the file. Such metadata is typically saved as a separate metadata file . Alternatively a metadata file may be generated manually by a software engineer based on the configuration file . The metadata file lists all of the attributes that can appear in the configuration file along with any extra required metadata such as data type description default value etc. Steps and thus form the generation of the metadata file and may be performed at any time before the generation of a configuration wrapper .

When a configuration wrapper is required the metadata file is input into a wrapper generator at step . The wrapper generator reads the metadata and creates all of the necessary software objects that are required to manage the configuration file. The metadata file is processed by the wrapper generator at step and based on the metadata values a wrapper is generated at . This wrapper can then be used to manage the configuration file using a management application . For example the configuration wrapper may comprise an MBean that can be used to manage the configuration file using JMX technology.

The wrapper generator may also generate more than one configuration wrapper if needed. Such a process is shown in . Here the wrapper generator generates a first configuration wrapper A and a second configuration wrapper B based on metadata file . For example if the configuration wrapper comprises a software object such as an MBean then the wrapper generator may produce two software objects or two MBeans in order to manage the resource via configuration file .

Once the metadata file has been generated the file may be used as input into a plurality of different wrapper generators wherein each wrapper generator is configured to produce a configuration wrapper of a specific form and or software technology. For example a first wrapper generator may be configured to generate one or more MBeans for the JMX standard. A second wrapper generator may be adapted to produce a C software object for use in a separate management standard.

An exemplary method of managing data using the automatically generated configuration wrapper is shown in . At step a computer system such as system B will load a management application . At step the automatically generated configuration wrapper is registered with the management application . For example if the management application comprises an application based on the JMX standard then standard methods exist to register a generated MBean with an MBean server. After the configuration wrapper has been registered with the management application then the management application is able to display data associated with the resource at step . This data is accessed using the configuration wrapper as an interface between the management application and the configuration file . Whilst managing the resource a user may wish to alter the resource configuration as shown by step . This may be achieved by requesting that the management application display a particular parameter using a standard graphical user interface wherein the user is able to manually edit the parameter. Predefined methods set by the standard that is used to generate the management application can then be used to parse verify and or validate the entered configuration and check for errors. If the configuration is seen to be acceptable then the configuration file can be updated at step using the configuration wrapper . This is performed by calling predefined APIs forming part of the MBean and MBean code that forms part of the MBean definition. The MBean code produced by the wrapper generator as part of the wrapper generation process is used to implement the API methods and read write data forming part of the configuration file in a suitable manner. For example the MBean code may call upon specific libraries of functions to read write to .XML and .ini files. The exemplary method of may be used with configuration wrappers generated using the system and methods of any embodiment of the present invention.

The present invention also allows MBeans to be maintained in the light of changes to a resource. For example if a resource comprises a software application then the present invention can be used to update the configuration wrapper after an update has been applied to correct a bug in said software application. The method of begins at step wherein a developer will update the resource for example to correct a bug in a software application. At step they will also update the configuration file to reflect the new form of the resource. For example the update may mean that a parameter previously referred to as temp dir is now known as cache location . At step the metadata is updated in correspondence with the update to the configuration file. Once the metadata file has been updated at step then steps to of are performed. These steps implement the wrapper generator and generate a new version of the configuration wrapper . This alleviates the need for a software engineer to manually regenerate or update the MBean. Again this also applies when using a configuration wrapper generated according to any embodiment of the present invention.

The present invention allows configuration wrappers such as MBeans to be generated in seconds rather than days or weeks. Hence the present invention saves time in creating and maintaining configuration wrappers. The present invention also reduces the risk of error when generating configuration wrappers as the automated methods will always produce a functioning MBean which reduces the chance of human error.

A second embodiment of the present invention will now be described with reference to . shows an exemplary system comprising an extended version of the first embodiment shown in . The wrapper generator of comprises four separate components A to D wherein each component is adapted to implement a different stage of wrapper generation. In the example shown in wrapper generator comprises Mapping Component A Metadata Component B MBean Builder Component C and MBean Writer Component D.

Wrapper generator is adapted to receive a mapping file . The mapping file is provided as an optional enhancement to the method of the first embodiment wherein the mapping file defines the relationship between a particular configuration file such as and a particular metadata file such as . Typically the mapping file will be provided in XML format and a simplified example of a segment of a mapping file is provided below 

The mapping file simplifies the wrapper generation process when multiple metadata files are used to manage a resource or set of resources as only one file need be fed into the wrapper generator i.e. instead of having to input each metadata file individually. The use of a mapping file also allows wrapper generation for a number for a number of related resources to become an automated batch process and enables a developer to control which configuration files will have configuration wrappers created for them. For example if there are ten configuration files but configuration wrappers are only required for five of these files then only the selected five configuration files are listed in the mapping file along with their respective metadata files. The use of a mapping file also enables the same wrapper generator to be used for different projects wherein each project uses a different mapping file as an input. Hence the configuration wrappers to be generated in a particular run can be easily specified.

In the present example the metadata file comprises a comma separated values CSV file as this file is easily editable in standard spreadsheet applications such as Microsoft Excel . The CSV format is preferred as it makes the metadata files easy to edit and enables a team of developers to easily review and update metadata files. However depending on circumstances and personal preference the metadata file may any other file known in the art e.g. an XML or custom file .

If the configuration file contains values for all available attributes even if these values are null or default then the metadata file can typically be generated automatically using algorithms adapted to parse and extract data from configuration files. However in certain cases the resource or application using a configuration file may be adapted to use a default attribute value when an expected configuration attribute is not detected. As this information is typically external to the configuration file it may not be possible to distinguish between the case wherein an attribute exists but has no value and the case wherein no attribute exists. Hence in these circumstances the metadata file may need to be generated manually.

Turning to an exemplary method of generating a configuration wrapper for example an MBean java object using the components shown in will now be described. At step a mapping file is inputted into the wrapper generator . At this stage the wrapper generator reads the mapping file using Mapping Component A and at step the Mapping Component A generates one or more mapping objects in memory for each mapping between a configuration file and a metadata file found in the mapping file . Mapping component A may be a set of logic or a series of lines of program code configured to perform a mapping object generation method similar to that shown in .

The exemplary mapping object generation method of begins at step wherein a new mapping object list is generated in memory. At step the input mapping file is read by Mapping Component A and at step the first mapping in the mapping file is retrieved. At step a new mapping object is generated based on the retrieved mapping and at step the mapping object is added to the mapping object list generated in step . At step a check is made to determine whether there are any more unprocessed mappings within mapping file . If there are then the method loops around to step the next mapping in the mapping file is retrieved and steps to are repeated. If there are no more mappings then the method proceeds to step in .

Mapping objects are generated in memory by mapping component A in order that the other components B to D need not repeatedly access the mapping file . This is because file access is slow compared to memory access and thus constant access of the mapping file would detrimentally affect the time required for wrapper generation. This becomes more important when a large number of configuration wrappers are required for example as part of an automated batch generation process.

At step a set of metadata objects are generated based on the mapping objects by Metadata Component B. Metadata Component B performs the method steps shown in . The Metadata Component B is generally adapted to cycle through each mapping object and to generate a generic metadata object in memory.

At step the mapping objects list previously generated by Mapping Component A is input into the Metadata Component B. At step a new metadata objects list is generated. This list will be empty at this point in the method. At step the first mapping object in the mapping object list is retrieved and then at step a new metadata object is generated based on the mapping object. In particular the Metadata Component B will use the mapping object to retrieve the location of the metadata file associated with the current mapping and then the data within the metadata file would be read into the wrapper generator in order to generate the metadata object. Typically a metadata object comprises a name and a list of attributes wherein this data is based on that contained in a metadata file.

In certain embodiments each configuration file may have many metadata objects and or files. As configuration files are typically grouped into different sections a metadata object may be generated based on each section for example a configuration file may have a group of database properties a group of server properties and a group of user properties wherein a group of metadata objects may be generated for the database properties a single metadata object may be generated for the server properties and a single metadata object may be generated for the user properties. The mapping between the sections of the configuration file and the metadata objects that are generated will typically be determined by data within the metadata file. For simplicity the groups are normally based on the groups within the configuration file but this need not be the case in all situations.

After the metadata object has been generated at step this object is added to the metadata object lists at step and then at step a check is made to see whether there are any more unprocessed mapping objects in the mapping objects list. If there are more mapping objects then steps to are repeated with the next mapping object in the mapping object list if there are no more mapping objects in the mapping object list then the method proceeds to step in .

At step one or more java objects are generated based on the list of metadata objects generated in the previous step. In the example shown in this is performed by the MBean Builder Component C which implements the method of .

At step the metadata objects list previously generated in step is input into the MBean Builder Component C. At step one or more java object lists are generated based upon the different object groups required. In the present example three lists are generated one for class objects one for interface objects and one for message file objects. At step the first metadata object in the metadata object list is retrieved and then at step one or more java objects are generated based on the metadata object. For example in the present case a class object an interface object and a message file object will be generated in memory based on the metadata object.

In certain embodiments this step may be performed using code templates that may be stored as part of the java package implementing the MBean Builder Component C. This is possible as a lot of the program code that allows the generation of an MBean object is repeatable. As each metadata object is processed by the MBean Builder Component C the various properties and or metadata information associated with the object is extracted and inserted into appropriate sections within one or more of these code templates. For example if the metadata object were to have two properties such as NAME and AGE then the MBean Builder Component C may take a GET method template and generate two appropriate get methods based on these properties such as getNAME and getAGE . The different types of java objects created at this stage represent the different components that are required to implement a java object.

After step the one or more java objects are added to a corresponding java object list at step i.e. in this example the class object is added to the class object list the interface object is added to the interface object list and the message file object is added to the message file list.

When using different programming languages or different configuration wrapper standards the MBean Builder Component can be adapted and or extended to produce different types of output. For example if instead of a java object a C object was used then at this stage the metadata object would be converted into one or more C objects e.g. C class objects and C header objects by a C Builder Component. Alternatively if a developer needed to generate an XML Schema definition XSD configuration wrapper based on XML files then a XSD Builder Component may be provided that is adapted to convert metadata files into XSD objects. It is also possible to have one or more Builder Components operating in parallel e.g. it is possible to generate both java and C objects from the same metadata information.

Returning to at step a check is made to determine whether there are more unprocessed metadata objects within the metadata objects list. If there are then steps to are repeated until all metadata objects in the metadata object list have been processed. If no more unprocessed metadata objects exist in the metadata objects list then the method proceeds to step . At step an MBean Writing Component D is used to write java objects as files within a file system. The process of generating configuration wrapper objects in memory and writing the files required to implement said objects is separated in the present embodiment as it allows all objects in memory to be written to the respective files in one go which speeds up the process. In the present example as MBean configuration wrappers are required three different file outputs are provided one or more java class files A one or more java interface files B and one or more java message files C wherein all these file have a java extension and are used to implement a configuration wrapper such as .

The one or more java message files C contain all the message strings associated with the java wrapper object. The message strings are optional and typically provide descriptions of functions and or interfaces associated with an configuration wrapper such as an MBean wrapper. The java message files typically comprise one or more message strings that are indexed using an associated message identifier. The message identifier may then be cited within the one or more java interface and or class files together with data identifying the parent message file containing the associated message string. When interpreting and or implementing the files that comprise the configuration wrapper the message identifier and message file data may then be used to retrieve and return the associated description text. The use of message strings simplifies translation of description text from a native language into a foreign language for example from English to Russian wherein the message strings need only be translated just before production.

In the present example the MBean Writing Component D is designed to generate the files required to implement a java object however this Component may be replaced and or extended with other Components adapted to write files of different output types for example C files or XSD files in a similar manner to that discussed with relation to the MBean Builder Component C.

The output of the wrapper generator may now be used to implement one or more configuration wrappers for one or more resources allowing the one or more resources to be managed and or updated as described with reference to .

It is important to note that while the present invention has been described in a context of a fully functioning data processing system those of ordinary skill in the art will appreciate that the processes of the present invention are capable of being distributed in the form of a computer readable medium of instructions and a variety of forms and that the present invention applies equally regardless of a particular type of signal bearing media actually used to carry out distribution. Examples of computer readable media include recordable type media such as floppy disks a hard disk drive RAM and CD ROMs as well as transmission type media such as digital and analogue communications links.

