---

title: Full virtualization of resources across an IP interconnect
abstract: An addressing model is provided where all resources, including memory and devices, are addressed with internet protocol (IP) addresses. A task, such as an application, may be assigned a range of IP addresses rather than an effective address range. Thus, a processing element, such as an I/O adapter or even a printer, for example, may also be addressed using IP addresses without the need for library calls, device drivers, pinning memory, and so forth. This addressing model also provides full virtualization of resources across an IP interconnect, allowing a process to access an I/O device across a network.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07900016&OS=07900016&RS=07900016
owner: International Business Machines Corporation
number: 07900016
owner_city: Armonk
owner_country: US
publication_date: 20080201
---
This invention was made with United States Government support under Agreement No. HR001 07 9 0002 awarded by DARPA. THE GOVERNMENT HAS CERTAIN RIGHTS IN THE INVENTION.

The present application relates generally to an improved data processing system and method. More specifically the present application is directed to heterogeneous processing elements.

Input output or I O refers to the transfer of data between a processor and a peripheral device in a data processing system. Every transfer is an output from one device and an input to another device. is a block diagram illustrating a typical multiple processor data processing system. In the depicted example data processing system has a plurality of processors connected via a symmetric multiprocessing SMP bus . Memory controller MC and input output channel controller IOCC also connect to SMP bus

In the example shown in IOCC connects to a plurality of expansion slots such as peripheral component interconnect express PCI Express or PCIe slots . One or more I O adapter may connect to PCI Express slots .

Each time a task such as task attempts to access an I O device such as I O adapter in task must make a call to one of libraries . There are three main categories of I O including classic I O storage and network I O. Thus these libraries may include a classic I O library a storage library and a network library for example. For instance task may access or touch an I O adapter by making a call to library . Each library may include sub calls. For example the network I O library such as library may include transmission control protocol Internet protocol TCP IP calls user datagram protocol Internet protocol UDP IP calls etc.

This typical process is based on a model that has existed for a very long time. Processes running on processors are at the top of the hierarchy while I O devices are at the bottom of the hierarchy. Manufacturers of I O devices accept that I O devices are second class citizens and that a process must go through the conventional process of setting up an I O device through an O S library and a device driver to perform I O reads and writes.

As current trends continue network I O and storage I O in particular are becoming more important than the processing elements. Yet the model for setting up an I O device and performing I O reads and writes remains the same. The existing model is the pervasive world and manufacturers are left to accept their lot in life.

In one illustrative embodiment a method in a data processing system for virtualization of resources comprises assigning a range of Internet protocol addresses as an address space of an application. The method comprises receiving from the application a request to access data. The request to access data specifies a target Internet protocol address in the address space of the application. The method further comprises translating the target Internet protocol address to a real address. The method further comprises performing a data access operation based on the real address.

In another illustrative embodiment a data processing system comprises a processor and a memory coupled to the processor. The memory comprises instructions which when executed by the processor cause the processor to assign a range of Internet protocol addresses as an address space of an application. The instructions cause the processor to receive from the application a request to access data. The request to access data specifies a target Internet protocol address in the address space of the application. The instructions further cause the processor to translate the target Internet protocol address to a real address. The instructions further cause the processor to perform a data access operation based on the real address.

In another illustrative embodiment a computer program product comprises a computer useable medium having a computer readable program. The computer readable program when executed on a computing device causes the computing device to assign a range of Internet protocol addresses as an address space of an application. The computer readable program causes the computing device to receive from the application a request to access data. The request to access data specifies a target Internet protocol address in the address space of the application. The computer readable program further causes the computing device to translate the target Internet protocol address to a real address. The computer readable program further causes the computing device to perform a data access operation based on the real address.

These and other features and advantages of the present invention will be described in or will become apparent to those of ordinary skill in the art in view of the following detailed description of the exemplary embodiments of the present invention.

With reference now to the figures and in particular with reference to an exemplary diagram of data processing environments is provided in which illustrative embodiments of the present invention may be implemented. It should be appreciated that is only exemplary and is not intended to assert or imply any limitation with regard to the environments in which aspects or embodiments of the present invention may be implemented. Many modifications to the depicted environments may be made without departing from the spirit and scope of the present invention.

With reference now to a block diagram of an exemplary data processing system is shown in which aspects of the illustrative embodiments may be implemented. Data processing system is an example of a computer. In the depicted example data processing system has a plurality of processors connected via a symmetric multiprocessing SMP bus . Memory controller MC and input output channel controller IOCC also connect to SMP bus .

An operating system may run on processing units . The operating system coordinates and provides control of various components within the data processing system in . As a client the operating system may be a commercially available operating system such as Microsoft Windows XP Microsoft and Windows are trademarks of Microsoft Corporation in the United States other countries or both . An object oriented programming system such as the Java programming system may run in conjunction with the operating system and provides calls to the operating system from Java programs or applications executing on data processing system Java is a trademark of Sun Microsystems Inc. in the United States other countries or both .

As a server data processing system may be for example an IBM eServer pSeries computer system running the Advanced Interactive Executive AIX operating system or the LINUX operating system eServer pSeries and AIX are trademarks of International Business Machines Corporation in the United States other countries or both while LINUX is a trademark of Linus Torvalds in the United States other countries or both . Data processing system may be a symmetric multiprocessor SMP system including a plurality of processors in processing units . Alternatively a single processor system may be employed.

Instructions for the operating system the object oriented programming system and applications or programs are located on storage devices such as a hard disk drive and may be loaded into main memory through memory controller for execution by processing units . The processes for illustrative embodiments of the present invention may be performed by processing units using computer usable program code which may be located in a memory such as main memory not shown or in one or more peripheral devices for example.

A bus system such as SMP bus as shown in may be comprised of one or more buses. Of course the bus system may be implemented using any type of communication fabric or architecture that provides for a transfer of data between different components or devices attached to the fabric or architecture. Those of ordinary skill in the art will appreciate that the hardware in may vary depending on the implementation. Other internal hardware or peripheral devices such as flash memory equivalent non volatile memory or optical disk drives and the like may be used in addition to or in place of the hardware depicted in .

Moreover the data processing system may take the form of any of a number of different data processing systems including client computing devices server computing devices a tablet computer laptop computer telephone or other communication device a personal digital assistant PDA or the like. In some illustrative examples data processing system may be a portable computing device which is configured with flash memory to provide non volatile memory for storing operating system files and or user generated data for example. Essentially data processing system may be any known or later developed data processing system without architectural limitation.

In a typical software environment a plurality of tasks runs under control of an operating system. A task may be a process running on a processor such as a user level thread for example. Each task has an assigned address space. Each task has an address space or address spaces from which and to which it may read and write. The operating system translates the effective addresses to real addresses which may exist in memory or may be expanded to persistent storage using a virtual memory manager. A user level thread communicates with another user level thread by making an access request to an effective address.

Each time a task attempts to access an I O device the task must make a call to a library which accesses the device driver for the target I O device. The device driver then performs I O reads and writes to set up the device. Then the device driver requests an amount of memory such as 8 kB from the operating system to be pinned so the device can read and write into physical memory. This typical process is based on a model that has existed for a very long time. Processes running on processors are at the top of the hierarchy while I O devices are at the bottom of the hierarchy. Manufacturers of I O devices accept that I O devices are second class citizens and that a process must go through the conventional process of setting up an I O device through an O S library and a device driver to perform I O reads and writes. As current trends continue network I O and storage I O in particular are becoming more important than the processing elements. Yet the model for setting up an I O device and performing I O reads and writes remains the same. The existing model is the pervasive world and manufacturers are left to accept their lot in life.

In accordance with an illustrative embodiment a heterogeneous processing element model is provided where I O devices look and act like processors. In order to be treated like a processor an I O processing element or other special purpose processing element must follow some rules and have some characteristics of a processor such as address translation security interrupt handling and exception processing for example. The heterogeneous processing element model puts special purpose processing elements on the same playing field as processors from a programming perspective operating system perspective power perspective as the processors. The operating system can get work to a security engine for example in the same way it does to a processor.

In the illustrative embodiment IOCC connects to a plurality of expansion slots such as peripheral component interconnect express PCI Express or PCIe slots . One or more special purpose processors may connect to PCI Express slots . In the depicted example special purpose processor may be for example an I O device such as a local area network LAN adapter a storage controller a security engine or the like. Thus a heterogeneous processing element model is provided where I O devices and other special purpose processing elements look and act like processors. In order to be treated like a processor a special purpose processing element must follow some rules and have some characteristics of a processor such as address translation security interrupt handling and exception processing for example.

Alternatively in accordance with the illustrative embodiment a special purpose processing element may connect to SMP bus via a processor slot not shown . Thus I O device and security engine for example may look and act like a processor to the operating system as long as I O device and security engine obey the rules of a processor. The heterogeneous processing element model puts special purpose processing elements such as I O device security engine and special purpose processor on the same playing field as processors from a programming perspective operating system perspective power perspective as the processors. The operating system can get work to a security engine for example in the same way it does to a processor.

This heterogeneous processing element model eliminates the need for a device driver for I O devices for instance. Each processing element is assigned an address space from which and to which it may read and write. The operating system may then bind a process to a processing element whether the processing element is a conventional single core processor a multiple core processor an I O adapter a security engine or some other type of processing element. Some processing elements will be better at certain types of work than others. For example a security engine will be better at a cryptography task than a conventional processor.

In one exemplary embodiment address translator may be an effective to real address translation ERAT table. Known processor architectures specify a translation lookaside buffer TLB and a segment lookaside buffer SLB to translate from the effective address EA used by software and the real address RA used by hardware to locate instructions and data in storage. Since these translation mechanisms take several cycles once translated the EA RA pair is stored in a two way set associative array called the effective to real address translation ERAT table. For example the POWER4 architecture from IBM Corporation implements separate ERATs for instruction cache IERAT and data cache DERAT accesses. Both ERATs are indexed using the effective address. A common 1024 entry four way set associative TLB is implemented for each processor. Thus in the exemplary embodiment address translator of processing element may be a similar ERAT table to allow the processing element to easily translate between the effective address used by software and the real address used by hardware.

Processing element also includes an interrupt handler . An interrupt is a signal that gets the attention of a processor and is usually generated when I O is required. For example hardware interrupts are generated when a key is pressed or when the mouse is moved. Software interrupts are generated by a program requiring disk input or output. As another example an internal timer may continually interrupt the computer several times per second to keep the time of day current or for timesharing purposes. When an interrupt occurs processing element transfers control to the operating system which determines the action to be taken. Thus in order to be treated like a processor a special purpose processing element such as processing element must have an interrupt handler to take appropriate action when hardware or software requires the attention of processing element .

Processing element also includes exception handler . Exception handling is a programming language construct or computer hardware mechanism designed to handle the occurrence of some condition that changes the normal flow of execution. The condition is called an exception. Exceptions are normally recommended to be used only for signaling error exceptional conditions. In general current state will be saved in a predefined location and execution will switch to a predefined handler. Depending on the situation the handler may later resume the execution at the original location using the saved information to restore the original state. For example an exception that will usually be resumed is a page fault while a division by zero usually cannot be resolved transparently. From the processing point of view hardware interrupts are similar to resumable exceptions although they are usually not related to the current program flow. Thus processing element includes exception handler to manage exception conditions that may change the normal flow of execution.

Thus processing element includes the necessary characteristics in order to be treated by a processor with respect to the operating environment of the data processing system. Whether processing element exists in an expansion slot such as PCI Express slots in or a processor slot processing element is treated like a processor by the operating system. In addition processing element must obey certain rules that processors must obey particularly rules about security for example. The operating system may then assign an address space from which and to which processing element may read and write. The operating system may bind a process to processing element . Furthermore other tasks may touch I O for instance without the need for libraries and device drivers.

In the depicted example 32 way bus fabric may be connected to up to 1800 such 32 way bus fabrics such as 32 way bus fabric . The 32 way bus fabric connects up to 32 processing elements and memory . Operating system runs on processing elements assigns effective address ranges to processing elements and may bind processes to processing elements . Thus in the multi tiered interconnect in the illustrative embodiment there may be as many as 57 600 processing elements. The multi tiered interconnect depicted in is meant to illustrate an example and is not meant to imply architectural limitation. More or fewer tiers or processing elements may be permitted depending upon the implementation.

Each one of processing elements and may be a conventional processor or a special purpose processing element. For example processing element may be a conventional processor while processing element may be an I O device. Thus in accordance with an illustrative embodiment an I O device such as processing element for example may be abstracted from the physical proximity of processing element for example. That is an I O device may simply be addressed even over a distance rather than having to make a call to a library call a device driver pin memory and so forth.

In accordance with an illustrative embodiment the heterogeneous processing element model abstracts an I O device such that communication intended for the I O device may be packetized and sent over a network. A packet is a formatted block of data carried by a packet mode computer network. Computer communications links that do not support packets such as traditional point to point telecommunications links simply transmit data as a series of bytes characters or bits alone. When data is formatted into a packet the network can transmit long messages more efficiently and reliably. As an example transmission control protocol Internet protocol TCP IP is a suite of network transmission protocol that uses packets.

In accordance with an illustrative embodiment an addressing model is provided where all resources including memory and devices are addressed with internet protocol IP addresses. A task such as an application may be assigned a range of IP addresses rather than an effective address range. Thus a processing element such as an I O adapter or even a printer for example may also be addressed using IP addresses without the need for library calls device drivers pinning memory and so forth. This addressing model also provides full virtualization of resources across an IP interconnect allowing a process to access an I O device across a network.

Application may also make calls to application programming interfaces APIs . Application may also access a shared portion of memory which is shared between application and application using a shared effective address.

For addresses that refer to a physical device outside the physical memory space which may be pages stored in persistent storage or in memory outside the physical domain of the data processing system as with a BladeCenter system for example real to physical address table translates real address to physical address PA . Thus each effective address may be translated to a real address or to a physical address of a physical device.

In accordance with an illustrative embodiment the operating system gives an application a range of Internet protocol IP addresses rather than effective addresses. Thus when an application makes a load or store and gives an address it is an IP address . IP to EA table translates IP address to the effective address . All loads and stores from all applications will provide IP addresses for all accesses outside of the local user level state. The range of IP addresses assigned to an application must be bound to the application.

Turning to an effective to real address translation ERAT table translates effective address EA to real address RA . The use of an ERAT table greatly simplifies address translation. Thus when an application does a load or store the operation gives an IP address . IP to EA table translates IP address to EA . ERAT table then translates EA to real address RA . For addresses that refer to a physical device outside the physical memory space real to physical address table translates real address to physical address PA .

Application may also make calls to application programming interfaces APIs . Application may also access a shared portion of memory which is shared between application and application using an IP address that corresponds to a shared effective address. Operating system may receive the IP address for a load or store and translate the IP address to an effective address of shared memory. Alternatively operating system may receive the IP address for a load or store that is translated to a physical address of a physical device outside the physical domain of the data processing system.

Furthermore application may perform a load or store to an IP address that corresponds to a processing element such as an I O controller. The addressing model of the illustrative embodiment fully virtualizes resources thus abstracting the processing elements. To application it does not matter if an IP address corresponds to IP address range a shared address space within memory or a special purpose processing element located remotely across an IP interconnect.

Accordingly blocks of the flowchart illustration support combinations of means for performing the specified functions combinations of steps for performing the specified functions and program instruction means for performing the specified functions. It will also be understood that each block of the flowchart illustration and combinations of blocks in the flowchart illustration can be implemented by special purpose hardware based computer systems which perform the specified functions or steps or by combinations of special purpose hardware and computer instructions.

Furthermore the flowchart is provided to demonstrate the operations performed within the illustrative embodiments. The flowchart is not meant to state or imply limitations with regard to the specific operations or more particularly the order of the operations. The operations of the flowchart may be modified to suit a particular implementation without departing from the spirit and scope of the present invention.

With reference now to operation begins and the operating system receives a request from an application to access data at a target IP address block . A request to access data may be a load or store operation an API call or the like. The operating system translates the IP address to an effective address block and translates the effective address to a real address block .

Next the operating system determines whether the IP address is within the private address range for the application block . This private range may be an IP address range or effective address range assigned to the application by the operating system. If the IP address corresponds to the private address range of the application the application performs the access operation to the private address space by real address block and operation ends.

If the IP address does not correspond to the private address range of the application in block the operating system determines whether the IP address corresponds to a portion of shared memory block . If the IP address does correspond to a portion of memory that is shared between two or more applications then the application performs the access operation to the shared memory by real address block and operation ends.

If the IP address does not correspond to the private address range of the application in block and does not correspond to a portion of shared memory to which the application may read or write in block then the IP address may correspond to an address outside the physical memory domain of the data processing system. That is the data processing system may have to pull some memory from another blade or the IP address may correspond to a physical device such as an I O device. The IP address may correspond to a processing element such as an I O adapter that is located remotely. Thus the operating system translates the real address to a physical address block and performs the access operation to the physical device block . Thereafter operation ends.

Thus the illustrative embodiments solve the disadvantages of the prior art by providing a heterogeneous processing element model where I O devices look and act like processors. In order to be treated like a processor an I O processing element or other special purpose processing element must follow some rules and have some characteristics of a processor such as address translation security interrupt handling and exception processing for example. The heterogeneous processing element model puts special purpose processing elements on the same playing field as processors from a programming perspective operating system perspective power perspective as the processors. The operating system can get work to a security engine for example in the same way it does to a processor. The heterogeneous processing element model abstracts an I O device such that communication intended for the I O device may be packetized and sent over a network. Thus communication intended for a remotely located I O device may be packetized and transmitted over a distance rather than having to make a call to a library call a device driver pin memory and so forth.

An addressing model is provided where all resources including memory and devices are addressed with internet protocol IP addresses. A task such as an application may be assigned a range of IP addresses rather than an effective address range. Thus a processing element such as an I O adapter or even a printer for example may also be addressed using IP addresses without the need for library calls device drivers pinning memory and so forth. This addressing model also provides full virtualization of resources across an IP interconnect allowing a process to access an I O device across a network.

It should be appreciated that the illustrative embodiments may take the form of an entirely hardware embodiment an entirely software embodiment or an embodiment containing both hardware and software elements. In one exemplary embodiment the mechanisms of the illustrative embodiments are implemented in software which includes but is not limited to firmware resident software microcode etc.

Furthermore the illustrative embodiments may take the form of a computer program product accessible from a computer usable or computer readable medium providing program code for use by or in connection with a computer or any instruction execution system. For the purposes of this description a computer usable or computer readable medium can be any apparatus that can contain store communicate propagate or transport the program for use by or in connection with the instruction execution system apparatus or device.

The medium may be an electronic magnetic optical electromagnetic infrared or semiconductor system or apparatus or device or a propagation medium. Examples of a computer readable medium include a semiconductor or solid state memory magnetic tape a removable computer diskette a random access memory RAM a read only memory ROM a rigid magnetic disk and an optical disk. Current examples of optical disks include compact disk read only memory CD ROM compact disk read write CD R W and DVD.

A data processing system suitable for storing and or executing program code will include at least one processor coupled directly or indirectly to memory elements through a system bus. The memory elements can include local memory employed during actual execution of the program code bulk storage and cache memories which provide temporary storage of at least some program code in order to reduce the number of times code must be retrieved from bulk storage during execution.

Input output or I O devices including but not limited to keyboards displays pointing devices etc. can be coupled to the system either directly or through intervening I O controllers. Network adapters may also be coupled to the system to enable the data processing system to become coupled to other data processing systems or remote printers or storage devices through intervening private or public networks. Modems cable modem and Ethernet cards are just a few of the currently available types of network adapters.

The description of the present invention has been presented for purposes of illustration and description and is not intended to be exhaustive or limited to the invention in the form disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art. The embodiment was chosen and described in order to best explain the principles of the invention the practical application and to enable others of ordinary skill in the art to understand the invention for various embodiments with various modifications as are suited to the particular use contemplated.

