---

title: Selectively authorizing software functionality after installation of the software
abstract: Controlling access to functionality within an installed software product. The invention includes an authorization module that dynamically references authorization information when specific functionality is requested by a requesting entity such as a user or an application program to determine if the requested functionality is authorized to be executed. Further, the invention dynamically provides an opportunity to the requesting entity to purchase unauthorized functionality. In this manner, functionality within the software product may be enabled or disabled at any time (e.g., during installation, post-installation, and re-installation).
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07716476&OS=07716476&RS=07716476
owner: Microsoft Corporation
number: 07716476
owner_city: Redmond
owner_country: US
publication_date: 20081218
---
Embodiments of the present invention relate to the field of software products. In particular embodiments of this invention relate to selectively providing functionality in a software product based on authorization after installation of the software product.

Some existing systems provide access to data via an access control list ACL associated with each file or directory. Typically access control rights for a particular directory are inherited by any descendent directories or files unless expressly overwritten by an access control list at the descendent directory or file. The request for access to data is processed based on the access control permissions corresponding to the target file or directory. However such existing systems only provide access control at the granularity of a file or directory and fail to explicitly provide access control for functionality within executable software components.

Similarly existing operating systems lack a simple model to control access to functionality in binary files when the binary files are present in the operating system. For example if the functionality to perform a particular task exists in a library and the library is available to the operating system e.g. on the local hard drive the operating system will perform the task on request. With the advent of low cost easily accessible broadband networking computer users interested in pirating operating systems have easy access to the binary files needed to pirate the operating system. As such separate versions of the operating system with differing functionality are created and distributed to limit the functionality available to the end user. For example some systems provide multiple versions of a software product on an installation disk. During installation the user enters a license key that installs the version associated with the entered license key. However there is a need for a single version of a software product e.g. a single set of binary files that dynamically provides a subset of its functionality when executed to the user based on authorization e.g. a license associated with the user and with the software product. That is existing operating systems fail to provide an authorization process for utilizing resources available within the operating system.

Accordingly an authorization module that dynamically controls run time access to functionality within a software product is desired to address one or more of these and other disadvantages.

Embodiments of the invention include an authorization module e.g. a licensing component enabling functionality within a software product having one or more components after installation of the software product on a computing device. In an embodiment the invention includes a method for controlling access to functionality within an operating system. That is the invention manages operating system resources utilizing authorization rules. The invention maintains resource rules e.g. licensing information such as a set of licensing rules specifying the binary files and functionality therein authorized for installation and execution on the computing device. The authorization module of the invention dynamically references the licensing information when specific functionality is requested by a requesting entity such as a user or an application program executing on the computing device to determine if the requested functionality is authorized. The invention dynamically provides an opportunity to the requesting entity to purchase unauthorized functionality. In this manner functionality may be enabled or disabled at any time e.g. during installation post installation and re installation . Further the invention enables delivery of upgraded functionality to the user along with the reduced functionality version of a software product while preventing unauthorized access to the upgraded functionality via the authorization module. The invention also stores a definition for the software product that lists all features of the software product and their status e.g. enabled or disabled .

In accordance with one aspect of the invention a method enables functionality within a software product having at least one component after installation of the software product on a computing device of a user. The method includes receiving authorization information associated with the software product. The software product executes in accordance with the received authorization information. The method also includes receiving a request for functionality associated with the component during execution of the software product. The method also includes determining access rights for the requested functionality based on the received authorization information. The method further includes providing the requested functionality in accordance with the determined access rights.

In accordance with another aspect of the invention one or more computer readable media have computer executable modules for enabling functionality within a software product after installation of the software product on a computing device of a user. The software product has at least one component. The modules include an interface module and an authorization module. The interface module receives authorization information associated with the software product. The software product executes in accordance with the received authorization information. The authorization module receives a request for functionality associated with the component during execution of the software product. The authorization module further determines access rights for the requested functionality based on the authorization information received via the interface module. The authorization module further provides the requested functionality in accordance with the determined access rights.

In accordance with still another aspect of the invention a method dynamically provides a purchase opportunity to a user to enable functionality within a software product installed on a computing device of a user. The software product has at least one component. The method includes receiving authorization information associated with the software product. The software product executes in accordance with the received authorization information. The method also includes receiving a request for functionality associated with the component during execution of the software product. The method also includes determining access rights for the requested functionality based on the received authorization information. If the determined access rights deny access to the requested functionality the method also includes providing a purchase offer to the user. Acceptance of the provided purchase offer enables the requested functionality.

In accordance with yet another aspect of the invention a computer readable medium stores at least two data structures each representing an authorization rule. The authorization rule provides access to functionality within a software product after installation of the software product on a computing device. The computer readable medium includes a first authorization rule providing access to first functionality within the software product. The medium also includes a second authorization rule providing access to second functionality within the software product. The second functionality differs from the first functionality.

In accordance with still another aspect of the invention an operating system has computer executable modules including an authorization module and an upgrade module. The operating system includes authorization information associated with a software product. The software product is installed on a computing device and executes in accordance with the authorization information. The authorization module receives a request for functionality associated with the software product during execution of the software product. The authorization module further determines access rights for the requested functionality based on the authorization information. The authorization module further provides the requested functionality in accordance with the determined access rights. The upgrade module provides a purchase offer to the user to enable the requested functionality if the access rights determined by the authorization module deny access to the requested functionality. The upgrade module further receives an acceptance of the purchase offer from the user. The authorization module provides the requested functionality responsive to the acceptance received by the upgrade module.

In an embodiment the invention includes an authorization module such as a licensing component for enabling functionality within a software product during and after installation of the software product on a computing device. The functionality within the software product may be provided by various components or other subparts of the software product. In one example the software product is componentized as next described.

Referring first to a block diagram illustrates an exemplary computing device in accordance with certain embodiments of the invention. The computing device is illustrated as having a software product such as operating system and one or more application programs .

Operating system is the fundamental software control program for computing device performing various functions including providing a user interface managing the execution of one or more applications and controlling the input of data from and output of data to various input output I O devices. Application programs represent one or more of a wide variety of software application programs that may be executed on computing device . Examples of such application programs include educational programs reference programs productivity programs e.g. word processors spreadsheets and databases recreational programs utility programs e.g. communications programs etc. Application programs may be installed on computing device by the user or alternatively pre installed by the manufacturer and or distributor of computing device .

Operating system separates its functionality into multiple components such as component through component N. Each component has a corresponding manifest such as manifest through manifest N respectively. The components include a collection of one or more files or file identifiers . The files may include software instructions such as an executable file a dynamic link library DLL or a component object module COM . The files may also include data for use by one or more of the components . In one implementation the files e.g. data and or instructions corresponding to particular functionality of the operating system are grouped together in the same component . For example there may be a games component a communications component and a file system component. The grouping of files that result in the componentization may be static or alternatively may change over time. In one example updates to operating system may result in selected files from certain components being removed and added to other components .

Each manifest includes information describing the corresponding component . Any of a wide variety of metadata regarding the corresponding component may be included in each manifest . In one implementation the manifest identifies the version of the corresponding component as well as which other components if any the corresponding component is dependent on. By way of example in order for one or more files in component to properly execute one or more other files e.g. a DLL file from another component may need to be installed on computing device . In this example manifest would indicate that component depends on the other component.

Those skilled in the art will appreciate that the invention is not limited to a componentized software product as described herein but is operable with other software product designs e.g. non componentized .

In one form computing device has one or more computer readable media such as computer readable medium associated therewith. Medium has computer executable modules for enabling functionality within the software product after installation of the software product on computing device . In a componentized embodiment the software product includes at least two components such as dynamic link libraries where a second component represents a different version of a first component. For example the second component represents an upgraded version of the first component. The software product comprises an operating system and or an application program that is fully installed on computing device .

The computer executable modules include an interface module an authorization module and an upgrade module . The interface module receives authorization information e.g. licensing information associated with the software product. The software product executes in accordance with the received authorization information. The authorization module receives a request for functionality associated with the component during execution of the software product. The authorization module further determines access rights for the requested functionality based on the authorization information received via the interface module . The access rights represent granted or authorized user rights. The authorization module further provides the requested functionality in accordance with the determined access rights. The upgrade module provides a purchase offer to the user to enable the requested functionality if the access rights determined by the authorization module deny access to the requested functionality. The upgrade module further receives an acceptance of the purchase offer from the user while the authorization module provides the requested functionality responsive to the acceptance received by the upgrade module .

In another embodiment the operating system includes one or more of the interface module the authorization module and the upgrade module . Operating system also has access to the authorization information.

The invention also operates to authorize installation of the components of the software product. Referring next to an exemplary block diagram illustrates installation of software components responsive to a licensing component. One embodiment includes the sequence of operations indicated by the circled numbers in . The user system administrator or other entity creates authorization information e.g. a product definition for each version of the software product. The product definition includes licensing rules license keys or other licensing data identifying functionality or features within the software product. An exemplary product definition is shown below.

During installation or upgrading of the software product the invention receives e.g. via a network and stores the product definition in memory e.g. in a secure store accessible to the licensing component and installs or pre installs e.g. makes available for subsequent installation the licensed components in the software product by referencing the stored product definition. In particular a component installer communicates with the licensing component e.g. via an application programming interface function call to determine if a particular component of the software product is authorized for installation. The component installer consults the product definition stored in the secure store relating to the particular component. The product definition indicates the access rights e.g. a specific numeric value associated with the particular component. The licensing component communicates the access rights for the particular component to the component installer . The component installer proceeds to install the component in accordance with the access rights for the component at . In this manner the licensing component effectively blocks installation of components that are not authorized per the stored product definition.

Referring next to an exemplary block diagram illustrates operation of the authorization module to selectively provide access to software product functionality after installation of the software product. One embodiment includes the sequence of operations indicated by the circled numbers in . One or more computer readable media have computer executable instructions for performing the method illustrated in .

The authorization module e.g. the licensing component receives a request from a process or from a user for access to a feature the component or functionality within the component. The received request includes but is not limited to a component identifier function identifier component name and any number of arguments. In one example the process or the user are provided with a function call such as is function available . In another example the invention software intercepts application programming interface API calls to a library such as a dynamic link library DLL . In this example the invention software is associated with the operating system to intercept the DLL loads and validate the DLL load or a specific function within the DLL based on the licensing information. The received request for functionality or the intercepted API function call includes but is not limited to at least one of a component identifier a function identifier a component name and an argument.

In response to the intercepted API call or received request the licensing component consults the product definition e.g. licensing information stored in the secure store and determines access rights for the component. The access rights specify whether or not the component is authorized to execute or to provide some other level of intermediate functionality. In one embodiment the licensing component searches a secure storage area such as secure store storing the licensing rules e.g. numerical values from the product definition. The search is performed based on the requested component and or the requested functionality. In an embodiment in which the received authorization information is digitally signed the licensing component validates the signed authorization information. The licensing component retrieves the value in storage associated with the requested component as the access rights. In one embodiment the licensing component sends the access rights e.g. the numerical value to the requesting entity for further processing. The licensing component or the process requesting the functionality analyzes the access rights to determine whether or not to allow the component to provide the requested functionality. If the functionality is authorized the associated component or process provides the functionality e.g. the intercepted function call accesses the component . If the functionality is not authorized the requesting entity is presented with an error message.

In one example the user requests functionality from an installed component e.g. to start a web service . The installed component checks with the licensing component to determine if the stored product definition authorizes execution of the functionality. The installed component either provides the requested functionality or returns an error message based on the determination from the licensing component . If the functionality is not authorized the licensing component presents the user with an offer e.g. an upgrade to purchase the requested functionality as next described.

Referring next to a flow chart illustrates the authorization module e.g. the licensing component providing the user with an opportunity to purchase additional functionality. The licensing component receives authorization information associated with the software product at stores the received information in memory accessible to the licensing component at and receives a request for functionality associated with the component during execution of the software product at . The licensing component determines access rights for the requested functionality based on the received authorization information at . If the determined access rights deny access to the requested functionality the licensing component provides a purchase offer to the user at . For example the licensing component directs the user to a network address of an electronic commerce web site adapted to selling the requested functionality. If the licensing component receives an acceptance from the user of the provided purchase opportunity at the licensing component provides or otherwise enables the requested functionality at . Additionally the licensing component receives updated authorization information e.g. an updated product definition in response to the received acceptance and stores the received updated authorization information on a computer readable medium e.g. in the secure store accessible by the licensing component. If the purchase offer is not accepted access to the requested functionality is denied.

In one embodiment the licensing component interacts with the user in a secure manner so that user rights are elevated only with the permission of the user. For example any known public private key encryption technique or other digital rights management solution may provide security for the interaction.

One or more computer readable media have computer executable instructions for performing the method illustrated in .

The licensing information or rules are explicitly defined e.g. during operating system creation but may be securely modified e.g. at install time responsive to a product or license key or some other input code . As described herein the licensing information may be secured using a secure storage area or by signing the definition file and validating the signature dynamically at process load time e.g. when the functionality is requested . The licensing information includes any form of resource rules such as licensing criteria and upgrade availability. For example the licensing information may authorize access or deny access to all functionality within a particular component.

Referring next to an exemplary block diagram illustrates a data structure storing authorization information e.g. licensing information according to the invention. A computer readable medium accessible by the licensing component stores authorization information in at least two of the data structures. Each of the data structures represents an authorization rule or other authorization information such authorization rule through authorization rule M. Each authorization rule provides access to functionality within the software product after installation of the software product on a computing device. In an example a first authorization rule provides access to first functionality within the software product. A second authorization rule provides access to second functionality within the software product. The second functionality differs from the first functionality.

In one embodiment the authorization rules identify at least one of the following the components available to a process executing on the computing device functionality within the components available to a process executing on the computing device the components unavailable to a process executing on the computing device and functionality within the components unavailable to a process executing on the computing device.

In the following example files available to the operating system are all described to be members of a component.

To allow additional functionality the licensing component prompts the user to purchase the additional functionality such as by directing the user to a web site see . In the example above the user may desire the ability to connect multiple users to the terminal server. The licensing definition is updated as a result of the purchase without needing to modify or distribute different binary files. The updated licensing definition in this example is shown below.

The computer typically has at least some form of computer readable media. Computer readable media which include both volatile and nonvolatile media removable and non removable media may be any available medium that can be accessed by computer . By way of example and not limitation computer readable media comprise computer storage media and communication media. Computer storage media include volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. For example computer storage media include RAM ROM EEPROM flash memory or other memory technology CD ROM digital versatile disks DVD or other optical disk storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium that can be used to store the desired information and that can be accessed by computer . Communication media typically embody computer readable instructions data structures program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and include any information delivery media. Those skilled in the art are familiar with the modulated data signal which has one or more of its characteristics set or changed in such a manner as to encode information in the signal. Wired media such as a wired network or direct wired connection and wireless media such as acoustic RF infrared and other wireless media are examples of communication media. Combinations of the any of the above are also included within the scope of computer readable media.

The system memory includes computer storage media in the form of removable and or non removable volatile and or nonvolatile memory. In the illustrated embodiment system memory includes read only memory ROM and random access memory RAM . A basic input output system BIOS containing the basic routines that help to transfer information between elements within computer such as during start up is typically stored in ROM . RAM typically contains data and or program modules that are immediately accessible to and or presently being operated on by processing unit . By way of example and not limitation illustrates operating system application programs other program modules and program data .

The computer may also include other removable non removable volatile nonvolatile computer storage media. For example illustrates a hard disk drive that reads from or writes to non removable nonvolatile magnetic media. also shows a magnetic disk drive that reads from or writes to a removable nonvolatile magnetic disk and an optical disk drive that reads from or writes to a removable nonvolatile optical disk such as a CD ROM or other optical media. Other removable non removable volatile nonvolatile computer storage media that can be used in the exemplary operating environment include but are not limited to magnetic tape cassettes flash memory cards digital versatile disks digital video tape solid state RAM solid state ROM and the like. The hard disk drive and magnetic disk drive and optical disk drive are typically connected to the system bus by a non volatile memory interface such as interface .

The drives or other mass storage devices and their associated computer storage media discussed above and illustrated in provide storage of computer readable instructions data structures program modules and other data for the computer . In for example hard disk drive is illustrated as storing operating system application programs other program modules and program data . Note that these components can either be the same as or different from operating system application programs other program modules and program data . Operating system application programs other program modules and program data are given different numbers here to illustrate that at a minimum they are different copies.

A user may enter commands and information into computer through input devices or user interface selection devices such as a keyboard and a pointing device e.g. a mouse trackball pen or touch pad . Other input devices not shown may include a microphone joystick game pad satellite dish scanner or the like. These and other input devices are connected to processing unit through a user input interface that is coupled to system bus but may be connected by other interface and bus structures such as a parallel port game port or a Universal Serial Bus USB . A monitor or other type of display device is also connected to system bus via an interface such as a video interface . In addition to the monitor computers often include other peripheral output devices not shown such as a printer and speakers which may be connected through an output peripheral interface not shown .

The computer may operate in a networked environment using logical connections to one or more remote computers such as a remote computer . The remote computer may be a personal computer a server a router a network PC a peer device or other common network node and typically includes many or all of the elements described above relative to computer . The logical connections depicted in include a local area network LAN and a wide area network WAN but may also include other networks. LAN and or WAN can be a wired network a wireless network a combination thereof and so on. Such networking environments are commonplace in offices enterprise wide computer networks intranets and global computer networks e.g. the Internet .

When used in a local area networking environment computer is connected to the LAN through a network interface or adapter . When used in a wide area networking environment computer typically includes a modem or other means for establishing communications over the WAN such as the Internet. The modem which may be internal or external is connected to system bus via the user input interface or other appropriate mechanism. In a networked environment program modules depicted relative to computer or portions thereof may be stored in a remote memory storage device not shown . By way of example and not limitation illustrates remote application programs as residing on the memory device. It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.

Generally the data processors of computer are programmed by means of instructions stored at different times in the various computer readable storage media of the computer. Programs and operating systems are typically distributed for example on floppy disks or CD ROMs. From there they are installed or loaded into the secondary memory of a computer. At execution they are loaded at least partially into the computer s primary electronic memory. The invention described herein includes these and other various types of computer readable storage media when such media contain instructions or programs for implementing the steps described below in conjunction with a microprocessor or other data processor. The invention also includes the computer itself when programmed according to the methods and techniques described herein.

For purposes of illustration programs and other executable program components such as the operating system are illustrated herein as discrete blocks. It is recognized however that such programs and components reside at various times in different storage components of the computer and are executed by the data processor s of the computer.

Although described in connection with an exemplary computing system environment including computer the invention is operational with numerous other general purpose or special purpose computing system environments or configurations. The computing system environment is not intended to suggest any limitation as to the scope of use or functionality of the invention. Moreover the computing system environment should not be interpreted as having any dependency or requirement relating to any one or combination of components illustrated in the exemplary operating environment. Examples of well known computing systems environments and or configurations that may be suitable for use with the invention include but are not limited to personal computers server computers hand held or laptop devices multiprocessor systems microprocessor based systems set top boxes programmable consumer electronics mobile telephones network PCs minicomputers mainframe computers distributed computing environments that include any of the above systems or devices and the like.

The invention may be described in the general context of computer executable instructions such as program modules executed by one or more computers or other devices. Generally program modules include but are not limited to routines programs objects components and data structures that perform particular tasks or implement particular abstract data types. The invention may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment program modules may be located in both local and remote computer storage media including memory storage devices.

In operation computer executes computer executable instructions such as those illustrated in to enable functionality within the software product after installation of the software product on a computing device.

Those skilled in the art will note that the order of execution or performance of the methods illustrated and described herein is not essential unless otherwise specified. That is it is contemplated by the inventors that elements of the methods may be performed in any order unless otherwise specified and that the methods may include more or less elements than those disclosed herein.

When introducing elements of the present invention or the embodiment s thereof the articles a an the and said are intended to mean that there are one or more of the elements. The terms comprising including and having are intended to be inclusive and mean that there may be additional elements other than the listed elements.

In view of the above it will be seen that the several objects of the invention are achieved and other advantageous results attained.

As various changes could be made in the above constructions products and methods without departing from the scope of the invention it is intended that all matter contained in the above description and shown in the accompanying drawings shall be interpreted as illustrative and not in a limiting sense.

