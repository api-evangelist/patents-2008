---

title: On-demand monitoring of memory usage
abstract: A method, system, and computer usable program product for on-demand monitoring of memory usage are provided in the illustrative embodiments. An indication of a memory leak in an application is detected where the application is operating in a data processing system and using a memory associated with the data processing system. An instruction to begin monitoring a memory usage of the application is received responsive to the detection. Responsive to receiving the instruction to begin, the memory usage of the application is monitored. An instruction to dump a data related to the monitoring is received and the data is dumped. An instruction to end the monitoring is received and the monitoring is ended. The detecting, the beginning, the dumping, and the ending may occur while the application remains in operation and while the application uses the memory. The memory leak is confirmed using the data.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08904359&OS=08904359&RS=08904359
owner: International Business Machines Corporation
number: 08904359
owner_city: Armonk
owner_country: US
publication_date: 20080306
---
The present invention relates generally to an improved data processing system and in particular to a computer implemented method for managing data processing systems. Still more particularly the present invention relates to a computer implemented method system and computer usable program code for on demand monitoring of memory usage by an application in a data processing system.

Software applications executing in a data processing system use memory associated with that data processing system. For example an application uses the memory for storing instructions needed to execute the application s intended functions data needed by those instructions results of computations and temporary information relevant to the execution of the application.

Generally applications do not reserve all the memory space at once the application anticipates using over the course of the application s execution. Applications request and reserve an amount of memory when they have a need for the memory space. This process of requesting and reserving an amount of memory space is called memory allocation. Generally a memory management system in the data processing system allocates memory space to a requesting application. The memory management system is generally a memory management functional unit of the operating system operating the data processing system.

Once an application does not need an allocated memory space the application frees the memory space. The memory management system then deallocates the freed memory space for use by other applications. The process of deallocating memory in this manner is called memory deallocation.

Ideally an application should eventually free all the memory that was allocated to the application. However many applications fail to free some segments of memory spaces that are allocated to the application at some time in their execution. Failing to free memory that was allocated to an application and that the application does not need anymore is called a memory leak. Memory leak is an undesirable characteristic in an application and software designers take great pains to ensure that the application does not have a memory leak problem.

Memory leak in an application executing on a data processing system can deteriorate the overall performance of the data processing system over time. In such cases the memory management system allocates an amount of memory space to the application and the application frees only a part of that memory. Over a period of time this cycle of allocating memory and freeing less than the amount that was allocated causes a net reduction in memory resources that are available for allocating to other applications in the data processing system. The reduction in memory resources causes applications to perform slower degrading the overall performance of the data processing system.

The illustrative embodiments provide a method system and computer usable program product for on demand monitoring of memory usage. An indication of a memory leak in an application is detected where the application is operating in a data processing system and using a memory associated with the data processing system. An instruction to begin monitoring a memory usage of the application is received responsive to the detection. Responsive to receiving the instruction to begin the memory usage of the application is monitored. An instruction to dump a data related to the monitoring is received. The data is dumped responsive to receiving the instruction to dump. An instruction to end the monitoring is received. The monitoring is ended responsive to receiving the instruction to end. The detecting the beginning the dumping and the ending may occur while the application remains in operation and while the application uses the memory. The memory leak is confirmed using the data.

Presently when a user suspects that an application has a memory leak the user can use a variety of commercial debugging tools that may help locate the cause of the memory leak. The illustrative embodiments recognize that even with the debugging tools locating the cause of the memory leak is a cumbersome and sometimes unacceptable process. For example some debugging tools require that the suspect application be shutdown and restarted in conjunction with the debugging tool. In a business critical data processing environment shutting down an application or a data processing system may be an unacceptable step in the debugging process.

As another example some debugging tools require that the suspect application be re linked or some time even recompiled in conjunction with the debugging tool s libraries so that the debugging tool may detect the source of the memory leak. Again the illustrative embodiments recognize in a high traffic or business critical data processing environment re linking the tool library or recompiling the source code may be unacceptable. Furthermore for commercially procured applications that may be suspected of having a memory leak the debugging tool s library or the application source code may simply be unavailable to the user without extensive licensing agreement ruling out the recompilation or re linking option in most cases.

Additionally most debugging tools are intrusive by their very nature. The illustrative embodiments recognize that even if a debugging tool is not as disruptive as in the above examples a user may not allow debugging tools to be installed on their data processing systems especially in production environments where only business purposed software may be installed and run.

Because of these and other similar problems debugging a suspect application for a memory leak is not a desirable solution to memory leaks. In many cases therefore technical support providers and software designers attempt to recreate the memory leak problem in their labs by carefully collect as much circumstantial information from the data processing environment where the suspect application may be executing and replicating those circumstances in a laboratory setup.

The illustrative embodiments recognize that replicating a tricky problem like a memory leak is labor intensive and is often inconclusive. Even when a team is able to replicate the problem and locate the source of the memory leak the exercise often takes a long time resulting in unacceptable disruption in the user s business.

To address these and other problems related to memory leaks the illustrative embodiments provide a method system and computer usable program product for on demand monitoring of memory usage by an application in a data processing system. The illustrative embodiments may be used in conjunction with any application that may have a potential for a memory leak in the present or future version of the application.

For example the illustrative embodiments may be implemented with a directory server a name server a user location service server ULS server an application server a web server a proxy server a mail server a feed server or any other type of data server. The illustrative embodiments may also be implemented with any business application such as for example a word processing application a graphics application a spreadsheet application accounting software a gaming application or any other type of business application. The illustrative embodiments may also be implemented in conjunction with enterprise software such as a manufacturing application a planning application a relationship management application and a middleware application or platform. Additionally the illustrative embodiments may be implemented in conjunction with a hardware component such as in a firmware as embedded software in a hardware device or in any other suitable hardware or software form.

Any advantages listed herein are only exemplary and are not intended to be limiting on the illustrative embodiments. Additional advantages may be realized by specific illustrative embodiments. Furthermore a particular illustrative embodiment may have some all or none of the advantages listed above.

With reference to the figures and in particular with reference to these figures are exemplary diagrams of data processing environments in which illustrative embodiments may be implemented. are only exemplary and are not intended to assert or imply any limitation with regard to the environments in which different embodiments may be implemented. A particular implementation may make many modifications to the depicted environments based on the following description.

Software applications may execute on any computer in data processing environment . Server and server couple to network along with storage unit . In the depicted example server includes directory which may be an exemplary software application executing on server in conjunction with which the illustrative embodiments may be implemented. In addition clients and couple to network . Servers and storage units and clients and may couple to network using wired connections wireless communication protocols or other suitable data connectivity. Clients and may be for example personal computers or network computers.

In the depicted example server provides data such as boot files operating system images and applications to clients and . Clients and are clients to server in this example. Data processing environment may include additional servers clients and other devices that are not shown.

In the depicted example data processing environment may be the Internet. Network may represent a collection of networks and gateways that use the Transmission Control Protocol Internet Protocol TCP IP and other protocols to communicate with one another. At the heart of the Internet is a backbone of data communication links between major nodes or host computers including thousands of commercial governmental educational and other computer systems that route data and messages. Of course data processing environment also may be implemented as a number of different types of networks such as for example an intranet a local area network LAN or a wide area network WAN . is intended as an example and not as an architectural limitation for the different illustrative embodiments.

Among other uses data processing environment may be used for implementing a client server environment in which the illustrative embodiments may be implemented. A client server environment enables software applications and data to be distributed across a network such that an application functions by using the interactivity between a client data processing system and a server data processing system.

With reference to this figure depicts a block diagram of a data processing system in which illustrative embodiments may be implemented. Data processing system is an example of a computer such as server or client in in which computer usable program code or instructions implementing the processes may be located for the illustrative embodiments.

In the depicted example data processing system employs a hub architecture including north bridge and memory controller hub NB MCH and south bridge and input output I O controller hub SB ICH . Processing unit main memory and graphics processor are coupled to north bridge and memory controller hub NB MCH . Processing unit may contain one or more processors and may be implemented using one or more heterogeneous processor systems. Graphics processor may be coupled to the NB MCH through an accelerated graphics port AGP in certain implementations.

In the depicted example local area network LAN adapter is coupled to south bridge and I O controller hub SB ICH . Audio adapter keyboard and mouse adapter modem read only memory ROM universal serial bus USB and other ports and PCI PCIe devices are coupled to south bridge and I O controller hub through bus . Hard disk drive HDD and CD ROM are coupled to south bridge and I O controller hub through bus . PCI PCIe devices may include for example Ethernet adapters add in cards and PC cards for notebook computers. PCI uses a card bus controller while PCIe does not. ROM may be for example a flash binary input output system BIOS . Hard disk drive and CD ROM may use for example an integrated drive electronics IDE or serial advanced technology attachment SATA interface. A super I O SIO device may be coupled to south bridge and I O controller hub SB ICH .

An operating system runs on processing unit . The operating system coordinates and provides control of various components within data processing system in . The operating system may be a commercially available operating system such as Microsoft Windows XP Microsoft and Windows are trademarks of Microsoft Corporation in the United States and other countries . An object oriented programming system such as the Java programming system may run in conjunction with the operating system and provides calls to the operating system from Java programs or applications executing on data processing system Java is a trademark of Sun Microsystems Inc. in the United States and other countries .

Instructions for the operating system the object oriented programming system and applications or programs are located on storage devices such as hard disk drive and may be loaded into main memory for execution by processing unit . The processes of the illustrative embodiments may be performed by processing unit using computer implemented instructions which may be located in a memory such as for example main memory read only memory or in one or more peripheral devices.

The hardware in may vary depending on the implementation. Other internal hardware or peripheral devices such as flash memory equivalent non volatile memory or optical disk drives and the like may be used in addition to or in place of the hardware depicted in . In addition the processes of the illustrative embodiments may be applied to a multiprocessor data processing system.

In some illustrative examples data processing system may be a personal digital assistant PDA which is generally configured with flash memory to provide non volatile memory for storing operating system files and or user generated data. A bus system may comprise one or more buses such as a system bus an I O bus and a PCI bus. Of course the bus system may be implemented using any type of communications fabric or architecture that provides for a transfer of data between different components or devices attached to the fabric or architecture.

A communications unit may include one or more devices used to transmit and receive data such as a modem or a network adapter. A memory may be for example main memory or a cache such as the cache found in north bridge and memory controller hub . A processing unit may include one or more processors or CPUs.

The depicted examples in and above described examples are not meant to imply architectural limitations. For example data processing system also may be a tablet computer laptop computer or telephone device in addition to taking the form of a PDA.

With reference to this figure depicts a block diagram of an application using memory in accordance with an illustrative embodiment. Application is an exemplary application executing in data processing system . Directory in is an example of application . Data processing system may be implemented using server in .

Application may include component which may include application programming interface API tools toolkits functions and other features of application that a user may use for interacting with application . For example application may include a set of APIs that may allow a user to extend the functionality of application by adding code to the code of application . For example if application were a directory server component of the directory server may be used to create an extended operation that may perform certain custom functions with respect to the directory server.

Application may also include graphical user interface GUI component that may allow a user to interact with application using a graphical user interface such as with a web browser.

Memory may be associated with data processing system . Memory may be implemented using main memory in . Application may use memory for performing the functions of application as well as any functions that may be added to application using component . A memory management system associated with data processing system may allocate memory space from memory to application and application may free an allocated memory space in memory when not using such memory space. If application has a memory leak application may not free a portion of the memory space in memory that may be allocated to application .

Application may also have access to data storage . Data storage may be another data storage such as a hard disk a flash drive additional random access memory RAM RAM elsewhere in the data processing system a network storage tape medium CD ROM CD RAM or any other form of data storage suitable for a particular implementation. Application may use space in data storage to save data such as user information log files and code.

With reference to this figure depicts a block diagram of on demand monitoring of memory usage in accordance with an illustrative embodiment. Application is an exemplary application executing in data processing system . Application may be analogous to application in . Data processing system may be implemented using data processing system in .

Component including APIs tools and functions for application and graphical user interface component correspond to component and graphical user interface component in . Application interacts with memory and data storage in a manner analogous to application s interaction with memory and data storage in .

Memory monitoring program according to the illustrative embodiment includes a function that monitors the memory being allocated to application and being freed by application . In one embodiment memory monitoring program may be implemented as a software application that may be associated with application using APIs in component . For example if application were a directory server memory monitoring program may be an extended operation associated with the directory server. A user may trigger the extended operation on demand during the execution of the directory server. On demand triggering is the turning on turning off or otherwise controlling a function such as memory monitoring program as and when a user or a system desires.

In another embodiment memory monitoring program may include code that may be separate from but may be executed on demand with respect to application . For example memory monitoring program may be a software application that application may be able to trigger during the execution of application as determined by logic within application memory monitoring program or both. In such an embodiment memory monitoring program as software application may be integrated with or separate from application .

As an example a user may trigger memory monitoring program into operation such as by sending a command to memory monitoring program to turn on memory usage monitoring when the user suspects a memory leak. As another example application may itself trigger memory monitoring program when certain logic in application detects a memory leak in application . As another example data processing system may trigger memory monitoring program when certain logic executing in data processing system suspects a memory leak. As another example logic within memory monitoring program may identify an indicator of a memory leak and trigger the on demand monitoring.

For example a logic executing in a data processing system may determine that an amount of memory allocated to an application is increasing over time triggering the suspicion of a memory leak. As another example a logic in a data processing system may determine that the overall performance of the data processing system deteriorates over a period of time when an application executes over that period of time. As another example a logic in an application may determine that the performance of the application deteriorates over a period of time when the application executes over that period of time. As another example a logic in the memory monitoring program may determine that an associated application has an amount of memory allocated to the application that the application has not used for a preset period of time.

As another example a logic in a data processing system an application or a memory monitoring program according to the illustrative embodiments may measure a rate of the growth of the allocated memory and suspect a memory leak if the rate exceeds a certain threshold value. As another example a similarly situated logic may trigger a mechanism for freeing allocated but unused memory called garbage collection in conjunction with measuring a rate of growth of allocated memory and measure a drop in the amount of allocated memory after garbage collection. Such a logic may determine that a memory leak may exist if the amount of unused allocated memory freed after garbage collection is above a threshold value.

The methods and considerations for determining or indicating a memory leak as described above are only exemplary and not limiting on the illustrative embodiments. Many other considerations and logic configurations for determining identifying indicating or suspecting a memory leak in specific implementations will be apparent from this disclosure and the same are contemplated within the scope of the illustrative embodiments. Furthermore any logic for determining identifying indicating or suspecting a memory leak may be included in a data processing system an application or a memory monitoring program according to the illustrative embodiments to operate as described with respect to memory monitoring program .

Once the user or a system determines that sufficient monitoring of memory usage has occurred they may trigger memory monitoring program to stop. The user or a system may also trigger memory monitoring program to perform another operation such as dump the monitoring data to a file. Dumping the data is the process of recording the data such as for example recording in a file on hard disk tape drive in database or in any other form.

Some more examples of the operations that a user or a system may trigger may be transmitting the monitoring data to another data processing system scheduling another monitoring at a different time or adjusting the parameters of monitoring. For example the user or system may trigger memory monitoring program to adjust the duration or frequency of monitoring the memory usage or adjust the address space of the memory to be monitored.

In operation memory monitoring program may itself use a portion of memory such as memory space for maintaining the monitoring data. For example memory monitoring program may maintain a list of memory addresses allocated to application in memory space . Memory monitoring program may remove memory addresses of freed memory from such a list as application frees allocated memory space. When memory monitoring program is instructed to stop the monitoring the list of memory addresses remaining in memory space may indicate the memory space that application failed to free during the course of monitoring.

In operation memory monitoring program may also use a portion of data storage such as storage space . For example memory monitoring program may periodically dump the monitoring data from memory space to storage space so that memory monitoring program may continue monitoring. As another example a user or system may trigger memory monitoring program to dump the monitoring data to storage space which may include a log file. As another example if memory monitoring program determines that an event during the monitoring may be of particular interest to a user or system memory monitoring program may write that information in storage space so that another application such as a notification application may pick up the information and deliver to the user or system.

The operations and functions described with respect to memory monitoring program are only exemplary and described here for the clarity of the illustrative embodiments. Many other operations and functions may be configured and triggered in memory monitoring program without departing from the scope of the illustrative embodiments.

With reference to this figure depicts a block diagram of triggering a memory monitoring program in accordance with an illustrative embodiment. Memory monitoring program may execute in association with application in a data processing system such as server . Memory monitoring program may be similar to memory monitoring program in . Server and server may be similar to server and server in . Client and client may each be similar to any of client or in . Server server client and client may be data processing systems distributed across a data processing environment and interconnected using network in the manner of .

Any of server server client and client or a user thereon may trigger an operation of memory monitoring program by sending a command to memory monitoring program . For example administration application may be a network administration application that may monitor the performance of the various data processing systems communicating over network . Administration application may detect a degradation of the performance of server and may suspect application of having a memory leak. Administration application may trigger an operation on memory monitoring program by sending command to memory monitoring program over network . In implementing the illustrative embodiments applications similar to administration application may be made aware of the existence of a capability for on demand monitoring of memory usage existing in memory monitoring program .

Alternatively a user using client application on client may trigger an operation such as on demand monitoring of memory usage by application by sending command to memory monitoring program . The user may also send command which may be a command to stop the monitoring started by command or vice versa. Alternatively a user on client may use command prompt to issue command to trigger an operation of memory monitoring program .

The various commands and the methods of sending those commands to memory monitoring program are described here only as exemplary. A particular implementation of the illustrative embodiments may implement these and other commands in the form described or other forms without departing from the scope of the illustrative embodiments. For example in one embodiment only the issuer of the command to start a memory monitoring may be allowed to stop the monitoring. In another embodiment any authorized system application or user may start stop pause or modify a memory monitoring operation of memory monitoring program .

In another embodiment the various commands to trigger operations on memory monitoring program may be issued using a command prompt a graphical user interface a function call a message or a combination thereof. Furthermore such commands may be communicated to memory monitoring program that may be located within the command issuing data processing system or across a data network.

With reference to this figure depicts a block diagram of an exemplary manner of sending commands to a memory monitoring program in accordance with an illustrative embodiment. A user may use command prompt to issue one or more commands to memory monitoring program . Commands may be for example to begin or end memory usage monitoring or to dump the data from a monitoring session to a file such as file . Memory monitoring program may be associated with application whose memory usage is to be monitored. For example memory monitoring program may be an extended operation of a lightweight directory access protocol LDAP server which may be an exemplary application whose memory usage a user wishes to monitor without disrupting the operation of the directory.

With reference to this figure depicts a block diagram of another exemplary manner of sending commands to a memory monitoring program in accordance with an illustrative embodiment. A user may use graphical user interface to issue one or more graphical inputs that graphical user interface component associated with application may receive. Application may be an application whose memory usage the user wishes to monitor. Graphical user interface may translate graphical inputs into commands and send commands to memory monitoring program . Commands may be for example commands to begin or end memory usage monitoring or commands to dump the data from a monitoring session such as to file or other form of storing or communicating data. For example a user may click a uniform resource locator URL link on a web page using a web browser to send graphical inputs which memory monitoring program receives as commands .

With reference to this figure depicts a flowchart of a process of instructing a memory monitoring program in accordance with an illustrative embodiment. Process may be implemented in a memory monitoring program such as memory monitoring program in or in or in .

Process begins by receiving a command step . Process may authenticate the user system or application that issued the command step . Process determines whether the issuer of the command is authenticated step . If the issuer of the command is authenticated and authorized to issue the command Yes path of step process executes the command step . If the issuer of the command is not authenticated or not authorized to execute the command No path of step process rejects the command received in step step . For example a user may be authenticated as being a valid user on a system but the user may not be authorized to issue a particular command.

A particular implementation may omit steps and without departing from the scope of the illustrative embodiments. When omitting authentication and authorization steps and the implementation may proceed from step to step accepting all commands that process receives in step .

Process may notify about executing or rejecting a command step . For example process may send an email to a system administrator if an unauthorized user or application attempted to start memory monitoring. As another example process may make an entry in a log file for a command that process executes. Many other ways of notifying users and systems will become apparent from this disclosure. Process ends thereafter.

With reference to this figure depicts a flowchart of a process of on demand monitoring of memory usage in accordance with an illustrative embodiment. Process may be implemented using a memory monitoring program such as memory monitoring program in or in or in . Process may be used in conjunction with an application when the application is suspected of having a memory leak.

Process begins by receiving a command to begin monitoring the memory usage of an associated application step . In one embodiment process may perform a step of determining identifying indicating or suspecting a memory leak in the associated application as exemplarily described with respect to . In such an embodiment process may perform step upon making such a determination identification indication or suspicion.

Process begins monitoring the memory usage of the application step . A command to begin monitoring the memory usage may include a set of other parameters such as for example a time at which the monitoring should begin or an address range that is to be monitored or processes or threads whose memory usage is to be monitored. A set of parameters is zero or more parameters. Many other parameters may be included with the command to begin the monitoring without departing from the scope of the illustrative embodiment.

Monitoring the memory usage may include monitoring the calling stack. A command for monitoring the memory usage may include commands or parameters for monitoring the calling stack. A calling stack is a record of which functions subroutines or set of instructions of an application are active at a given time. An active function subroutine or a set of instruction is a function subroutine or a set of instruction that has started executing but has not finished executing. The calling stack provides information about where the program control should return when the active function subroutine or the set of instruction finishes executing. The memory usage monitored in this manner may give additional information about the memory that is still allocated to the application and has not been freed.

Process receives a command to dump the monitoring data for example into a file step . Process dumps the monitoring data according to the command received in step step . A command to dump the monitoring data may include a set of additional parameters such as for example when to dump the data how much data to dump which process or thread s data to dump and whether to erase the dumped data from memory. Many other parameters may be included with the command to dump the monitoring data without departing from the scope of the illustrative embodiment.

Process receives a command to end monitoring the memory usage of an associated application step . Process ends monitoring the memory usage of the application step . Process ends thereafter. A command to end monitoring the memory usage may include a set of other parameters such as for example a time at which the monitoring should end or an address range for which the monitoring is to end or processes or threads whose memory usage monitoring is to end. Many other parameters may be included with the command to end the monitoring without departing from the scope of the illustrative embodiment.

The components in the block diagrams and the steps in the flowcharts described above are described only as exemplary. The components and the steps have been selected for the clarity of the description and are not limiting on the illustrative embodiments. For example a particular implementation may combine omit further subdivide modify augment reduce or implement alternatively any of the components or steps without departing from the scope of the illustrative embodiments. Furthermore the steps of the processes described above may be performed in a different order within the scope of the illustrative embodiments.

Thus a computer implemented method apparatus and computer program product are provided in the illustrative embodiments for on demand monitoring of memory usage. By implementing the illustrative embodiments a user may be able to monitor the memory usage of an application or a part thereof that the user suspects of having a memory leak. The user may monitor the memory usage for memory leaks using the illustrative embodiments without having to shutdown the all or part of the application. Users may also not need to recompile the code of the application in order to determine a cause of the memory leak.

Using the illustrative embodiments may allow the user to investigate a memory leak in running applications without interrupting business critical operations such as in production environments. The illustrative embodiments also allow the user to start stop or modify the monitoring on demand to with as needed in the actual environment in which the user suspects a memory leak. Thus the user may not have to replicate the circumstances in a lab environment in an attempt to recreate the memory leak.

Furthermore using the memory usage data collected by the illustrative embodiments a user may be able to identify precisely which function subroutine instruction command operation or step in an application s code may include the memory leak. For example illustrative embodiments may collect the data such that the data includes an identifier of an instruction requesting memory allocation and the address of the memory allocated in response. If that allocated memory is not freed when no longer in use the data resulting from the illustrative embodiments will provide the information that may assist a user in locating the cause of the memory leak to wit the instruction in this example. Used in this manner the illustrative embodiments may provide an address of the memory not freed a size of the memory not freed and an identification of an instruction in the application that had allocated that memory. Thus the illustrative embodiments may assist the user in locating or even pinpointing the cause of a memory leak in an application without having to debug the application or recreate the memory leak circumstances.

The invention can take the form of an entirely hardware embodiment an entirely software embodiment or an embodiment containing both hardware and software elements. In a preferred embodiment the invention is implemented in software which includes but is not limited to firmware resident software and microcode.

Furthermore the invention can take the form of a computer program product accessible from a computer usable or computer readable storage device providing program code for use by or in connection with a computer or any instruction execution system. For the purposes of this description a computer usable or computer readable storage device can be any tangible apparatus that can contain or store the program for use by or in connection with the instruction execution system apparatus or device.

The storage device can be an electronic magnetic optical electromagnetic or semiconductor system or apparatus or device or a propagation medium. Examples of a computer readable storage device include a semiconductor or solid state memory magnetic tape a removable computer diskette a random access memory RAM a read only memory ROM a rigid magnetic disk and an optical disk. Current examples of optical disks include compact disk read only memory CD ROM compact disk read write CD R W and DVD. The terms computer usable storage device and storage device do not encompass a signal propagation medium or a transmission medium any description in this disclosure to the contrary notwithstanding.

Further a computer storage medium may contain or store a computer readable program code such that when the computer readable program code is executed on a computer the execution of this computer readable program code causes the computer to transmit another computer readable program code over a communications link. This communications link may use a medium that is for example without limitation physical or wireless.

A data processing system suitable for storing and or executing program code will include at least one processor coupled directly or indirectly to memory elements through a system bus. The memory elements can include local memory employed during actual execution of the program code bulk storage and cache memories which provide temporary storage of at least some program code in order to reduce the number of times code must be retrieved from bulk storage during execution.

A data processing system may act as a server data processing system or a client data processing system. Server and client data processing systems may include data storage media that are computer usable such as being computer readable. A data storage medium associated with a server data processing system may contain computer usable code. A client data processing system may download that computer usable code such as for storing on a data storage medium associated with the client data processing system or for using in the client data processing system. The server data processing system may similarly upload computer usable code from the client data processing system. The computer usable code resulting from a computer usable program product embodiment of the illustrative embodiments may be uploaded or downloaded using server and client data processing systems in this manner.

Input output or I O devices including but not limited to keyboards displays pointing devices etc. can be coupled to the system either directly or through intervening I O controllers.

Network adapters may also be coupled to the system to enable the data processing system to become coupled to other data processing systems or remote printers or storage devices through intervening private or public networks. Modems cable modem and Ethernet cards are just a few of the currently available types of network adapters.

The description of the present invention has been presented for purposes of illustration and description and is not intended to be exhaustive or limited to the invention in the form disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art. The embodiment was chosen and described in order to explain the principles of the invention the practical application and to enable others of ordinary skill in the art to understand the invention for various embodiments with various modifications as are suited to the particular use contemplated.

