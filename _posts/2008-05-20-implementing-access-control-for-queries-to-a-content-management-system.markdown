---

title: Implementing access control for queries to a content management system
abstract: A system to generate an SQL sub-expression that implement access control rules stored in a library server. The SQL sub-expression is then merged with the SQL passed from an application program interface (API). The access control checking mechanism is implemented on the server side of the content management system. In this client/server environment, the query SQL statement is built in two layers: the API (client) layer and the server layer. The API sends the query string to the underlying stored procedure. The stored procedure then generates the access control logic based on the configuration parameters of the library server. This access control logic is dynamically added to the query string sent by the API. The stored procedure prepares, builds and executes this new query string as a dynamic SQL statement.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07761443&OS=07761443&RS=07761443
owner: International Business Machines Corporation
number: 07761443
owner_city: Armonk
owner_country: US
publication_date: 20080520
---
This is a continuation application to U.S. patent application Ser. No. 10 367 086 entitled Method for Implementing Access Control for Queries to a Content Management System filed on Feb. 14 2003. This application is related to U.S. patent application Ser. No. 10 128 306 entitled Content Management System and Methodology Featuring Query Conversion Capability for Efficient Searching filed on Apr. 23 2002 the contents of which is incorporated herein by reference.

The present invention generally relates to databases and more particularly to a method and apparatus for storing and accessing information in content management systems. More specifically this invention pertains to a method for maintaining security rules for document and folder access within the query process of the content management system.

Conventional content management systems typically include a library server LS one or more resource managers RMs and a client access application program interface API . A client is coupled by a network to the API and seeks information stored in the resource manager. The library server stores metadata relating to the objects or data stored in the resource manager. The library server also controls the particular objects that a particular client user can access. Client users can submit requests known as queries through the API to search or retrieve metadata stored in the library server or objects stored in the resource manager.

Content management systems typically store three types of information namely primary content data user metadata and system metadata. Primary content is stored in the resource manager and includes both structured and semi structured data such as text files images web pages video clips for example. Descriptions of and information about the primary content stored in the resource manager which are normally provided by client users are referred to as user metadata and are stored in the library server.

In contrast to user metadata system metadata is the information created by the content management system itself for access control storage management and content tracking and reference. Both user metadata and system metadata reside in the library server that acts as a repository for the metadata in database form.

As compared to primary content both user and system metadata are well structured. In general content management systems provide a set of functions for content data and metadata creation content search and retrieval and content distribution that enable user to manage data system metadata and user metadata. As mentioned earlier one approach is to store the metadata in the library server and to store the primary content data in a separate component designated the resource manager. Another approach is to store both metadata and primary content in a common database.

In most content management systems both system metadata and user metadata are searchable using SQL generated by a client side API. For security purposes the search methodology should allow only authorized personnel to view specific documents and folders. Skilled users can modify the SQL produced by the API to bypass security rules.

Current search mechanisms in content management systems can in response to such a query return to an unauthorized user a folder that matches a query. The folder does not include the sensitive information but the existence of the folder gives information to the user that should not be released. Consequently a skilled user can probe for the existence of classified or sensitive information through the query mechanism. By obtaining a response advising the user that a document matching the search request exists within the folder a skilled user can search for other types of documents within the folder even though they are not actually authorized to view the documents potentially creating a serious security exposure.

What is therefore needed is a system and method for enforcing security rules during a search for specific data stored in the content management system while maintaining the performance advantages of client side query generation. The need for such a system and method has heretofore remained unsatisfied.

The present invention satisfies this need and presents a system a computer program product and associated method collectively referred to herein as the system or the present system for implementing access control for queries to a content management system. The present system installed on the content management server generates the SQL sub expression to implement the access control rules and merge with the SQL passed from the API.

The content management system query API provides capabilities to search within an item type hierarchy across item types across linked items multi value attributes versions and references as described for example in patent application Ser. No. 10 128 306 supra. In addition a built in access control checking mechanism is implemented on the server side of the content management system.

In this client server environment the query SQL statement is built in two layers the API client layer and the server layer. The API sends the query string to the underlying stored procedure. The stored procedure then generates the access control logic based on the configuration parameters of the library server.

This access control logic is dynamically added to the query string sent by the API. The stored procedure prepares builds and executes this new query string as a dynamic SQL statement. The present system allows the content management system query to have the performance advantages of client side query generation while maintaining the full security model enforced by the server.

In a client server system either the client or the database server could enforce the security by ensuring that the calls made to the server are legal. However if the access control logic were included in the SQL generated by the API a security exposure would exist because someone with skill could modify the SQL expression passed to the stored procedure and bypass security.

The present system circumvents this security risk by including the access control logic on the server side of the content management system. The server generates the SQL sub expression that implements the access control rules. The SQL sub expression is then merged with the SQL passed from the API.

The present system provides a stored procedure interface for clients to pass query information using SQL. Any user with the appropriate technical skills can use the relatively simple interface of the present system with ease. One feature of the stored procedure interface is that the SQL passed is updated dynamically with the access control privilege information of the user obtained from the library server. In addition the access control logic is applied to all the intermediate steps of the query. This adds a new level of security to the content management system. The present system maintains security rules even if SQL sent to the server is modified by users with impressive SQL skills.

The present system utilizes SQL within the API and stored procedures. The concept of the present system could be applied to other query languages and other client server systems that include query processing.

The present system can be protected by viewing the CLI call level interface trace and the event monitor or equivalent tool . The CLI trace provides information on all parameters passed to the stored procedure including the SQL string sent by the API but without the SQL to implement the access control logic. The event monitor would have the completed SQL statement in addition to the access control logic.

The following definitions and explanations provide background information pertaining to the technical field of the present invention and are intended to facilitate the understanding of the present invention without limiting its scope 

API Application Program Interface a language and message format used by an application program to communicate with the operating system or some other control program such as a database management system DBMS or communications protocol.

Item The basic information entities managed by the library server. Items as used herein come in two types simple items and resource items. An item can be for example a folder or a document.

Metadata data about data. Metadata is definitional data that provides documentation of or information about other data managed within an environment or by an application. Metadata may document data about data elements or attributes such as name size or data type. It may also log data about data structures including length fields and columns. Other data included in Metadata encompass the association storage location and ownership of data. Metadata may additionally include descriptive information about the context quality and condition and or characteristics of data.

SQL Structured Query Language a standardized query language for requesting information from a database.

A client computer including a client application is coupled to content management system via the application program interface API . Library server LS is coupled to application program interface and receives queries from client application . These queries seek information that is stored in library server and or resource manager . Library server includes a query processor that receives queries in a first format from client computer and translates the queries into a second format usable by library server .

Library server is coupled to resource manager and contains user and system metadata concerning the primary content data or objects that are stored in resource manager . Many types of data can be stored in resource manager for example business information applications text audio video and streaming data to name a few.

Content management system employs a rich data model wherein data including metadata is stored in a tree based hierarchical data structure including multiple database tables. Traditionally search on the metadata is through either a specific API or via SQL language on some systems. Since content management systems in general provide a much richer data model than their underlying database systems writing search queries based on a specific API or SQL can be both tedious and inefficient in content management systems without query processor . The content management system with its query processor advantageously insulates the client user from these high levels of query complexity.

The access control logic generator restricts which items will be included in the query. Method of content manager utilizing access control logic generator is illustrated by the block diagram of . At block the client application sends a query request to content management system . The application program interface converts the query to SQL at block .

At block the query processor parses the SQL string. The access control logic generator then inserts access control logic with every portion of the SQL string parsed in block . The access control logic is created according to access control privilege information of the user obtained from the library server . The library server then executes the resulting SQL statement at block .

The first portion of the query Find folders where criteria requests access to a folder matching some user specified criteria. If the user does not have access to the folder the query is not resumed by the content management system. This level of security is already implemented by content management systems.

The second portion of this query containing documents where criteria requests documents matching the user s specified criteria. If the user does not have access to the document previously the document portion of the query would not be resumed but the folder request might be returned to the user. To eliminate this potential breach of security the access control logic generator inserts access control in both portions of the sample query preventing either document or folder information returning to the user in the absence of proper authorization.

A sample query string sent by the application program interface to the query processor is shown below 

The access control logic generator generates the following SQL string to verify access authorization of the user.

The access control logic generator then includes the access control logic string with the query string as shown below 

It is to be understood that the specific embodiments of the invention that have been described are merely illustrative of certain application of the principle of the present invention. Numerous modifications may be made to the system and method for implementing access control for queries to a content management system invention described herein without departing from the spirit and scope of the present invention.

