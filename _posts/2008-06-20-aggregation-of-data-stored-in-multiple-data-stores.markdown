---

title: Aggregation of data stored in multiple data stores
abstract: A data aggregation system is described herein for accessing and viewing information about an entity stored in multiple data stores. The data aggregation system identifies an entry in a primary data store that contains information about an entity. The system receives a request to associate an entry in a secondary data store with the identified entry in the primary data store. Then, the system identifies information in the secondary data store that identifies the entry in the secondary data store and associates the identified information with the entry in the primary data store. When a user requests to view the entry in the primary data store, the system retrieves the information about the entry in the primary data store and uses the stored entry identifier to also retrieve the information about the entry from the secondary data store. Thus, the information remains in the data store in which it originated, but the data aggregation system provides a unified view.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08762420&OS=08762420&RS=08762420
owner: Microsoft Corporation
number: 08762420
owner_city: Redmond
owner_country: US
publication_date: 20080620
---
Users of computer systems often store many types of information that relates to the same entity in various data stores. Each data store is typically well suited for storing a particular type of data and is often associated with an application that allows the user to view and manipulate the data. For example a user may store information about people the user has met as contacts using Microsoft Outlook. The information often contains each contact s telephone number street address email address and so forth. Other data stores such as an employee database for a company may contain information related to the same people. For example the employee database may contain information about the date a person was hired what office the person works in the benefits that the company provides to the person and so forth. The number of data stores increase as application developers find different uses for information about people or other entities e.g. companies offices and so forth . A user today often uses many data stores with information about related entities and the user often has to look in many different places e.g. applications or data stores to find all of the information related to a particular entity.

There are several common strategies for viewing information associated with a particular entity. The first strategy is to create custom applications for viewing the data in each data store. For example a user may use Microsoft Outlook or another Personal Information Management PIM application to view contact information and use a separate application for viewing sales orders related to his her business. Another strategy is to use the extensibility provided by an application to extend that application to view multiple types of data. For example Microsoft Outlook provides an Application Programming Interface API for extending the user interface to view many different types of data. While this strategy allows the user to view related information in the same application the user can still only view one type of information at a time. For example the user typically would select a folder containing contact information and view that information and then subsequently select a folder containing sales orders and separately view that information. This strategy does not allow the user to view all of the related data about an entity at the same time.

Another common strategy for viewing information associated with a particular entity is to copy all of the information about that entity from multiple data stores into one data store. A SQL JOIN clause is one way of combining information from two tables within a single data store. However a JOIN does not work across separate data stores and copies the data into a single temporary table. The copying performed by a JOIN can be time consuming and often makes a JOIN one of the worst performing database operations. As another example Microsoft Outlook allows applications to add custom fields for contacts that can be displayed with the contacts and applications can copy information from another data store into Microsoft Outlook s data store as custom fields.

While this strategy allows all of the information to be viewed at the same time it is not suitable for data that changes over time. This strategy leads to a new problem of keeping the data that is now stored in multiple data stores synchronized. For example suppose the information from a sales record associated with a person is copied into the contact data store as custom fields associated with that person s contact information. When information about the person changes both data stores need to be updated. For example if the person changes his her address a user may remember to update one data store but not the other. Keeping the two data stores synchronized can be a more difficult problem than the original problem of viewing related data about an entity at the same time. Another problem with this strategy is that the data types of the two data stores may not be the same making it is difficult to determine into which data type to copy the information.

A data aggregation system is described herein for accessing and viewing information about an entity stored in multiple data stores. The data aggregation system identifies an entry in a primary data store that contains information about an entity. Next the data aggregation system receives a request to associate an entry in a secondary data store with the identified entry in the primary data store. Then the data aggregation system identifies information in the secondary data store that identifies the entry in the secondary data store and associates the identified information with the entry in the primary data store so that the entries from the primary and secondary data store can be viewed together without modifying the secondary data store. When a user requests to view the entry in the primary data store the data aggregation system retrieves the information about the entry in the primary data store and uses the stored entry identifier to also retrieve the information about the entry from the secondary data store. Thus the information remains in the data store in which it originated avoiding the need for synchronization but the data aggregation system provides a unified view so that applications can access the information as if it were stored in one place.

This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter nor is it intended to be used to limit the scope of the claimed subject matter.

A data aggregation system is described herein for accessing and viewing information about an entity stored in multiple data stores. The data aggregation system identifies an entry in a primary data store that contains information about an entity. For example a user may select a contact in his her contact database with which the user wants to associate additional information stored in another data store. The data aggregation system receives a request to associate an entry in a secondary data store with the identified entry in the primary data store. For example the user may provide information that identifies the location of line of business data related to the user s contacts. The data aggregation system identifies information in the secondary data store that identifies the entry in the secondary data store. For example the secondary data store may contain an entry identifier for each entry or the data aggregation system may choose other identifying information such as a person s social security number or first name and last name to identify each entry.

The data aggregation system associates the identified information with the entry in the primary data store so that the entries from the primary and secondary data store can be viewed together without modifying the secondary data store. For example the system may store the entry identifier from the secondary data store in a field in the primary data store. When a user requests to view the entry in the primary data store the data aggregation system retrieves the information about the entry in the primary data store and uses the stored entry identifier to also retrieve the information about the entry from the secondary data store. Thus the information remains in the data store in which it originated avoiding the need for synchronization but the data aggregation system provides a unified view so that applications can access the information as if it were stored in one place. The data aggregation system uses memory for aggregating the information that would already be used by other solutions e.g. SQL JOINs or copying all of the data into one data store . For example a solution that copies all of the data to the primary data store uses the amount of space that is adequate to hold all of the data. By doing the aggregation at load time the data aggregation system uses a similar amount of space without many of the disadvantages e.g. data synchronization .

The primary data store contains rows of data that contain fields or columns of information. Each row represents a collection of the information stored in the primary data store about a particular entity. For example if the primary data store contains contact information then each row represents a particular contact and each column represents a field of information about that contact. As an example the primary data store may be a database of contacts for a PIM application and contain fields for the contact s first name last name street address telephone number email address and other contact information. The primary data store may be stored as a local data file e.g. a Microsoft Outlook PST file or may be provided by a server e.g. Microsoft Exchange Server . The primary data store may contain an entry identifier that differentiates entries in the primary data store . Similarly the primary data store may contain references to one or more secondary data stores that identify entries in the secondary data stores related to the entries in the primary data store.

The secondary data store or additional related data stores contains additional information about various entities. The secondary data store may contain line of business data related to a particular type of transaction or business need. For example the secondary data store may contain sales leads of a salesperson or insurance customers of an insurance agent. The secondary data store may contain additional information for an entity that is not available in the primary data store such as the last date a sales lead was contacted or the types of insurance in which an insurance customer is interested. The secondary data store may also contain information that duplicates the information in the primary data store such as a person s first and last name called shared fields . The data aggregation system may use such duplicate information to determine that an entry in the primary data store and an entry in the secondary data store relate to the same entity.

The data in the primary data store and secondary data store s may be stored in a variety of formats and may be accessed according to many protocols. For example a PIM application may store data using the Messaging Application Programming Interface MAPI whereas a line of business application may store data using Structure Query Language SQL . Those of ordinary skill in the art will recognize the many available formats and protocols according to which the data may be stored and accessed.

The data aggregation component associates entries in the primary data store with entries in the secondary data store and provides a unified view of information about each entity from each data store. The data aggregation component keeps the data store in which particular information is stored transparent to consumers of the information. The information may be consumed by an application designed for viewing information about a particular type of entity or may be exposed through an API accessible by third party applications . The third party applications may provide additional views or processing of the information. For example a backup application could access the API provided by the data aggregation component to create a redundant copy of all of the information associated with a particular entity without having to separately identify and access multiple data stores that contain information about the entity.

In some embodiments the data aggregation component operates at a low level so that layers above the data aggregation component do not perform special steps to access information about an entity regardless of where the information is stored. The data aggregation component aggregates all of the information about an entity into a single row of data by adding fields to the row from each of the available data stores containing information about the entity. In this way an application that previously could consume information from a single data store can be used to consume additional information from other data stores using the data aggregation system without modifying the application.

The view component accesses the data aggregation component to provide a unified view of the aggregated information. For example the view component may display each entity as a row in a table and each field of information as a column in the table. The view component does not necessarily know which data store each field of information came from because the data aggregation component handles accessing the appropriate data store to retrieve the available information for each entity. The view component may provide a read only view or may allow the user to edit the data in place such as by selecting a particular row and column. The view component provides the user s edits to the data aggregation component to update the data store from which the edited fields originated.

The object model component provides a unified view of the aggregated information programmatically such as to third party applications . Like the view component the object model component accesses the data aggregation component to obtain information from multiple data stores transparently to the calling application. The object model component may provide the information as part of a larger API exposed by an application. For example Microsoft Outlook exposes an object model with various APIs through which an application can access much of the same functionality available through the Microsoft Outlook user interface.

The following example code illustrates how the Microsoft Outlook Object Model is used to retrieve custom properties stored for a contact. The UserProperties method can be extended internally to return fields from one or more secondary data stores described above without the calling application being aware of where the data originates.

The computing device on which the system is implemented may include a central processing unit memory input devices e.g. keyboard and pointing devices output devices e.g. display devices and storage devices e.g. disk drives . The memory and storage devices are computer readable media that may be encoded with computer executable instructions that implement the system which means a computer readable medium that contains the instructions. In addition the data structures and message structures may be stored or transmitted via a data transmission medium such as a signal on a communication link. Various communication links may be used such as the Internet a local area network a wide area network a point to point dial up connection a cell phone network and so on.

Embodiments of the system may be implemented in various operating environments that include personal computers server computers handheld or laptop devices multiprocessor systems microprocessor based systems programmable consumer electronics digital cameras network PCs minicomputers mainframe computers distributed computing environments that include any of the above systems or devices and so on. The computer systems may be cell phones personal digital assistants smart phones personal computers programmable consumer electronics digital cameras and so on.

The system may be described in the general context of computer executable instructions such as program modules executed by one or more computers or other devices. Generally program modules include routines programs objects components data structures and so on that perform particular tasks or implement particular abstract data types. Typically the functionality of the program modules may be combined or distributed as desired in various embodiments.

For those entries that do match the data aggregation system provides a unified view so that it appears to applications that the data is available from a single data store. The unified view contains all of the entries and fields from the primary data store and fields from the secondary data store when related entries are available. For example there is no hire date in the unified view for Jane Doe because Jane Doe is not an employee with information stored in the secondary data store . The unified view is a logical concept that illustrates how the data aggregation system presents information to applications and does not represent a new data store into which the data aggregation system copies information from the primary data store and secondary data store . Rather the information from each data store remains stored in the data store in which it originated but applications can access the information as if it were in one data store.

In some embodiments the data aggregation system stores detailed information about the secondary data store entry in the associated primary data store entry. For example the data aggregation system may form a packet of information that contains the currently available secondary data store fields the values of the fields and a version stamp e.g. a globally unique identifier GUID . This information allows the data aggregation system to determine when the secondary data store has changed and as discussed further below can help with updating fields that exist in both the primary and secondary data stores. The entire packet of information may be stored in a single hidden field of the primary data store that is not displayed to users. In some embodiments the data aggregation system caches information from the secondary data store and uses the packet of information to determine when to refresh the cache by retrieving updated information from the secondary data store.

In block the component updates the edited field in the primary data store and continues at block . For example if the field is first name then the component updates the first name field in the primary data store. In decision block if the edited field is only stored in the secondary data store then the component continues at block else the component continues at block . In block the component updates the field in the secondary data store and completes. For example if the field is first name then after updating the field in the primary data store the component updates the field in the secondary data store. As another example if a field maccount number is only stored in the secondary data store then the component updates the field in the secondary data store. In block the component updates the field in the primary data store and completes. The component reaches block for those fields that are only stored in the primary data store. After block these steps conclude.

In some embodiments the data aggregation system allows the user to select a field for sorting and or filtering that comes from a secondary data store. When sorting based on a field in the primary data store the system sorts the information in the primary data store and then retrieves the related information from the secondary data store. However when the user selects a field on which to perform a sort from the secondary data store the system has two options. First the data aggregation system may perform the sort by retrieving the values of all of the entries from the secondary data store aggregating them with the primary store information and then sorting the unified view. Second the system may provide the secondary data store with a back reference to each related entry in the primary data store and request that the secondary data store sort the entries. When the secondary store has sorted the entries the data aggregation system retrieves the related entries in the primary data store using the back reference and presents a unified view.

From the foregoing it will be appreciated that specific embodiments of the data aggregation system have been described herein for purposes of illustration but that various modifications may be made without deviating from the spirit and scope of the invention. For example although contact data has been described as primary data the primary and secondary data stores could contain many types of related information. Accordingly the invention is not limited except as by the appended claims.

