---

title: Systems and methods for folder redirection
abstract: A method for redirecting, to a second machine, without user intervention, a request for access to a folder on a first machine, the request made by a resource executing within a remote access session on the first machine, includes receiving, by a component on a first machine, folder mapping information associated with a folder provided by a shell namespace on a second machine. The component intercepts a request by a resource executing on the first machine for access to file system data on the first machine. The component redirects the request to the second machine responsive to the received folder mapping information.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08782021&OS=08782021&RS=08782021
owner: Citrix Systems, Inc.
number: 08782021
owner_city: Fort Lauderdale
owner_country: US
publication_date: 20081020
---
The present application claims priority to U.S. Provisional Patent Application Ser. No. 60 981 485 entitled Systems and Methods for Folder Redirection filed Oct. 20 2007 which is incorporated herein by reference.

This disclosure generally relates to remote access to computing resources. In particular this disclosure relates to systems and methods for redirecting access to one or more folders in a remote access session.

In typical systems for providing clients with remote access to network resources issues may arise relating to which versions of resources are provided to the clients. One such problem arises in situations where a remote machine provides access to folders files or other data which have names or identifiers that are substantially similar to those of folders files or other data provided by a local machine. For example both machines may provide access to special folders maintained by an operating system e.g. My Documents in a WINDOWS operating system environment . Typically the remote application displays remotely located folders to a user of a client machine by default. In some circumstances therefore the user receives access to a remote folder but may believe that the application is displaying the user s local folder which may cause the user confusion. For example the user may intend to save a document to the local machine yet may inadvertently save the document on a remote machine.

In one aspect a method for redirecting to a second machine without user intervention a request for access to a folder on a first machine the request made by a resource executing within a remote access session on the first machine includes receiving by a component on a first machine folder mapping information associated with a folder provided by a shell namespace on a second machine. The method includes intercepting by the component a request by a resource executing on the first machine for access to file system data on the first machine. The method includes redirecting by the component the request to the second machine responsive to the received folder mapping information.

In another embodiment the method includes identifying in the intercepted request an address associated with a folder located on the first machine. In another embodiment the method includes remapping the identified address to an address of the folder provided by the shell namespace on the second machine. In still another embodiment the method includes transmitting to the second machine the intercepted request and the remapped address.

In another aspect a system for redirecting to a second machine without user intervention a request for access to a folder on a first machine the request made by a resource executing within a remote access session on the first machine includes a first component and a second component. In one embodiment the first component on the first machine i receives folder mapping information associated with a folder provided by a shell namespace on a second machine ii intercepts a request by a resource executing on the first machine to access file system data on the first machine and iii redirects the request to the second machine responsive to the received folder mapping information. The second component on the second machine receives the redirected request and modifies file system information on the second machine responsive to the received request.

Referring now to an embodiment of a network environment is depicted. In brief overview the network environment comprises one or more clients also generally referred to as local machine s client s client node s client computer s or endpoint s in communication with one or more servers also generally referred to as server s or remote machine s via one or more networks .

Although shows a network between the clients and the servers the clients and the servers may be on the same network . The network can be a local area network LAN such as a company Intranet a metropolitan area network MAN or a wide area network WAN such as the Internet or the World Wide Web. In some embodiments there are multiple networks between the clients and the servers . In one of these embodiments a network may be a private network and a network may be a public network. In another of these embodiments a network may be a private network and a network a public network. In still another embodiment networks and may both be private networks.

The network may be any type and or form of network and may include any of the following a point to point network a broadcast network a wide area network a local area network a telecommunications network a data communication network a computer network an ATM Asynchronous Transfer Mode network a SONET Synchronous Optical Network network a SDH Synchronous Digital Hierarchy network a wireless network and a wireline network. In some embodiments the network may comprise a wireless link such as an infrared channel or satellite band. The topology of the network may be a bus star or ring network topology. The network and network topology may be of any such network or network topology as known to those ordinarily skilled in the art capable of supporting the operations described herein. The network may comprise mobile telephone networks utilizing any protocol or protocols used to communicate among mobile devices including AMPS TDMA CDMA GSM GPRS or UMTS. In some embodiments different types of data may be transmitted via different protocols. In other embodiments the same types of data may be transmitted via different protocols.

In one embodiment the system may include multiple logically grouped servers . In these embodiments the logical group of servers may be referred to as a server farm . In some of these embodiments the servers may be geographically dispersed. In some cases a farm may be administered as a single entity. In other embodiments the server farm comprises a plurality of server farms . In one embodiment the server farm executes one or more applications on behalf of one or more clients .

The servers within each farm can be heterogeneous. One or more of the servers can operate according to one type of operating system platform e.g. WINDOWS NT manufactured by Microsoft Corp. of Redmond Wash. while one or more of the other servers can operate on according to another type of operating system platform e.g. Unix or Linux . In some embodiments a server executes an application on behalf of a user or a client . In other embodiments a server executes a virtual machine which provides an execution session within which applications execute on behalf of a user or a client . In one of these embodiments the execution session is a hosted desktop session. In another of these embodiments the server executes a terminal services session. The terminal services session may provide a hosted desktop environment. In still another of these embodiments the execution session provides access to a computing environment which may comprise one or more of an application a plurality of applications a desktop application and a desktop session in which one or more applications may execute.

The servers of each farm may not need to be physically proximate to another server in the same farm . Thus the group of servers logically grouped as a farm may be interconnected using a wide area network WAN connection or a metropolitan area network MAN connection. For example a farm may include servers physically located in different continents or different regions of a continent country state city campus or room. Data transmission speeds between servers in the farm can be increased if the servers are connected using a local area network LAN connection or some form of direct connection.

A server may be a file server application server web server proxy server appliance network appliance gateway application gateway gateway server virtualization server deployment server SSL VPN server or firewall. In some embodiments a server provides a remote authentication dial in user service and is referred to as a RADIUS server. In other embodiments a server may have the capacity to function as either an application server or as a master application server. In still other embodiments a server is a blade server. In yet other embodiments a server executes a virtual machine providing to a user or client computer access to a computing environment.

In one embodiment a server may include an Active Directory. The server may be an application acceleration appliance. For embodiments in which the server is an application acceleration appliance the server may provide functionality including firewall functionality application firewall functionality or load balancing functionality. In some embodiments the server comprises an appliance such as one of the line of appliances manufactured by the Citrix Application Networking Group of San Jose Calif. or Silver Peak Systems Inc. of Mountain View Calif. or of Riverbed Technology Inc. of San Francisco Calif. or of F5 Networks Inc. of Seattle Wash. or of Juniper Networks Inc. of Sunnyvale Calif.

The clients may also be referred to as client nodes client machines endpoint nodes or endpoints. In some embodiments a client has the capacity to function as both a client node seeking access to resources provided by a server and as a server providing access to hosted resources for other clients 

In some embodiments a client communicates with a server . In one embodiment the client communicates with one of the servers in a farm . Over the network the client can for example request execution of various applications hosted by the servers in the farm and receive output data of the results of the application execution for display. In one embodiment the client executes a program neighborhood application to communicate with a server in a farm .

A client may execute operate or otherwise provide an application which can be any type and or form of software program or executable instructions such as any type and or form of web browser web based client client server application a thin client computing client an ActiveX control or a Java applet or any other type and or form of executable instructions capable of executing on client . In some embodiments the application may be a server based or a remote based application executed on behalf of the client on a server . In one embodiment the server may display output data to the client using any thin client or remote display protocol such as the Independent Computing Architecture ICA protocol manufactured by Citrix Systems Inc. of Ft. Lauderdale Fla. the Remote Desktop Protocol RDP manufactured by the Microsoft Corporation of Redmond Wash. the X11 protocol the Virtual Network Computing VNC protocol manufactured by AT T Bell Labs the SPICE protocol manufactured by Qumranet Inc. of Sunnyvale Calif. USA and of Raanana Israel the Net2Display protocol manufactured by VESA of Milpitas Calif. the PC over IP protocol manufactured by Teradici Corporation of Burnaby B.C. the TCX protocol manufactured by Wyse Technology Inc. of San Jose Calif. the THINC protocol developed by Columbia University in the City of New York of New York N.Y. or the Virtual D protocols manufactured by Desktone Inc. of Chelmsford Mass. The application can use any type of protocol and it can be for example an HTTP client an FTP client an Oscar client or a Telnet client. In other embodiments the application comprises any type of software related to voice over internet protocol VoIP communications such as a soft IP telephone. In further embodiments the application comprises any application related to real time data communications such as applications for streaming video and or audio.

The client and server may be deployed as and or executed on any type and form of computing device such as a computer network device or appliance capable of communicating on any type and form of network and performing the operations described herein. depict block diagrams of a computing device useful for practicing an embodiment of the client or a server . As shown in each computing device includes a central processing unit and a main memory unit . As shown in a computing device may include a visual display device a keyboard and or a pointing device such as a mouse. As shown in each computing device may also include additional optional elements such as one or more input output devices generally referred to using reference numeral and a cache memory in communication with the central processing unit .

The central processing unit is any logic circuitry that responds to and processes instructions fetched from the main memory unit . In many embodiments the central processing unit is provided by a microprocessor unit such as those manufactured by Intel Corporation of Mountain View Calif. those manufactured by Motorola Corporation of Schaumburg Ill. those manufactured by Transmeta Corporation of Santa Clara Calif. the RS 6000 processor those manufactured by International Business Machines of White Plains N.Y. or those manufactured by Advanced Micro Devices of Sunnyvale Calif. The computing device may be based on any of these processors or any other processor capable of operating as described herein.

Main memory unit may be one or more memory chips capable of storing data and allowing any storage location to be directly accessed by the microprocessor such as Static random access memory SRAM Burst SRAM or SynchBurst SRAM BSRAM Dynamic random access memory DRAM Fast Page Mode DRAM FPM DRAM Enhanced DRAM EDRAM Extended Data Output RAM EDO RAM Extended Data Output DRAM EDO DRAM Burst Extended Data Output DRAM BEDO DRAM Enhanced DRAM EDRAM synchronous DRAM SDRAM JEDEC SRAM PC100 SDRAM Double Data Rate SDRAM DDR SDRAM Enhanced SDRAM ESDRAM SyncLink DRAM SLDRAM Direct Rambus DRAM DRDRAM or Ferroelectric RAM FRAM . The main memory may be based on any of the above described memory chips or any other available memory chips capable of operating as described herein. In the embodiment shown in the processor communicates with main memory via a system bus described in more detail below . depicts an embodiment of a computing device in which the processor communicates directly with main memory via a memory port . For example in the main memory may be DRDRAM.

The computing device may support any suitable installation device such as a floppy disk drive for receiving floppy disks such as 3.5 inch 5.25 inch disks or ZIP disks a CD ROM drive a CD R RW drive a DVD ROM drive tape drives of various formats USB device hard drive or any other device suitable for installing software and programs such as any client agent or portion thereof. The computing device may further comprise a storage device such as one or more hard disk drives or redundant arrays of independent disks Flash memory or EEPROMs for storing an operating system and other related software and for storing application software programs such as any program related to the client agent . Optionally any of the installation devices could also be used as the storage device. Additionally the operating system and the software can be run from a bootable medium for example a bootable CD such as KNOPPIX a bootable CD for GNU Linux that is available as a GNU Linux distribution from knoppix.net.

Furthermore the computing device may include a network interface to interface to a Local Area Network LAN Wide Area Network WAN or the Internet through a variety of connections including but not limited to standard telephone lines LAN or WAN links e.g. 802.11 T1 T3 56 kb X.25 SNA DECNET broadband connections e.g. ISDN Frame Relay ATM Gigabit Ethernet Ethernet over SONET ADSL SDSL wireless connections or some combination of any or all of the above. Connections can be established using a variety of communication protocols e.g. TCP IP IPX SPX NetBIOS Ethernet ARCNET SONET SDH Fiber Distributed Data Interface FDDI RS232 IEEE 802.11 IEEE 802.11a IEEE 802.11b IEEE 802.11g CDMA GSM WiMax and direct asynchronous connections . In one embodiment the computing device communicates with other computing devices via any type and or form of gateway or tunneling protocol such as Secure Socket Layer SSL or Transport Layer Security TLS or the Citrix Gateway Protocol manufactured by Citrix Systems Inc. of Ft. Lauderdale Fla. The network interface may comprise a built in network adapter network interface card PCMCIA network card card bus network adapter wireless network adapter USB network adapter modem or any other device suitable for interfacing the computing device to any type of network capable of communication and performing the operations described herein.

A wide variety of I O devices may be present in the computing device . Input devices include keyboards mice trackpads trackballs microphones and drawing tablets. Output devices include video displays speakers inkjet printers laser printers and dye sublimation printers. The I O devices may be controlled by an I O controller as shown in . The I O controller may control one or more I O devices such as a keyboard and a pointing device e.g. a mouse or optical pen. Furthermore an I O device may also provide storage and or an installation medium for the computing device . In still other embodiments the computing device may provide USB connections to receive handheld USB storage devices such as the USB Flash Drive line of devices manufactured by Twintech Industry Inc. of Los Alamitos Calif.

In some embodiments the computing device may comprise or be connected to multiple display devices which each may be of the same or different type and or form. As such any of the I O devices and or the I O controller may comprise any type and or form of suitable hardware software or combination of hardware and software to support enable or provide for the connection and use of multiple display devices by the computing device . For example the computing device may include any type and or form of video adapter video card driver and or library to interface communicate connect or otherwise use the display devices . In one embodiment a video adapter may comprise multiple connectors to interface to multiple display devices . In other embodiments the computing device may include multiple video adapters with each video adapter connected to one or more of the display devices . In some embodiments any portion of the operating system of the computing device may be configured for using multiple displays . In other embodiments one or more of the display devices may be provided by one or more other computing devices such as computing devices and connected to the computing device for example via a network. These embodiments may include any type of software designed and constructed to use another computer s display device as a second display device for the computing device . One ordinarily skilled in the art will recognize and appreciate the various ways and embodiments that a computing device may be configured to have multiple display devices 

In further embodiments an I O device may be a bridge between the system bus and an external communication bus such as a USB bus an Apple Desktop Bus an RS 232 serial connection a SCSI bus a FireWire bus a FireWire 800 bus an Ethernet bus an AppleTalk bus a Gigabit Ethernet bus an Asynchronous Transfer Mode bus a HIPPI bus a Super HIPPI bus a SerialPlus bus a SCI LAMP bus a FibreChannel bus or a Serial Attached small computer system interface bus.

A computing device of the sort depicted in typically operates under the control of operating systems which control scheduling of tasks and access to system resources. The computing device can be running any operating system such as any of the versions of the MICROSOFT WINDOWS operating systems the different releases of the Unix and Linux operating systems any version of the MAC OS for Macintosh computers any embedded operating system any real time operating system any open source operating system any proprietary operating system any operating systems for mobile computing devices or any other operating system capable of running on the computing device and performing the operations described herein. Typical operating systems include WINDOWS 3.x WINDOWS 95 WINDOWS 98 WINDOWS 2000 WINDOWS NT 3.51 WINDOWS NT 4.0 WINDOWS CE WINDOWS XP and WINDOWS VISTA all of which are manufactured by Microsoft Corporation of Redmond Wash. MAC OS manufactured by Apple Computer of Cupertino Calif. OS 2 manufactured by International Business Machines of Armonk N.Y. and Linux a freely available operating system distributed by Caldera Corp. of Salt Lake City Utah or any type and or form of a Unix operating system among others.

The computer system can be any workstation desktop computer laptop or notebook computer server handheld computer mobile telephone or other portable telecommunication device media playing device a gaming system mobile computing device or any other type and or form of computing telecommunications or media device that is capable of communication and that has sufficient processor power and memory capacity to perform the operations described herein. For example the computer system may comprise a device of the IPOD family of devices manufactured by Apple Computer of Cupertino Calif. a PLAYSTATION 2 PLAYSTATION 3 or PERSONAL PLAYSTATION PORTABLE PSP device manufactured by the Sony Corporation of Tokyo Japan a NINTENDO DS NINTENDO GAMEBOY NINTENDO GAMEBOY ADVANCED or NINTENDO REVOLUTION device manufactured by Nintendo Co. Ltd. of Kyoto Japan or an XBOX or XBOX 360 device manufactured by the Microsoft Corporation of Redmond Wash.

In some embodiments the computing device may have different processors operating systems and input devices consistent with the device. For example in one embodiment the computing device is a TREO 180 270 600 650 680 700p 700w or 750 smart phone manufactured by Palm Inc. In some of these embodiments the TREO smart phone is operated under the control of the PALM operating system and includes a stylus input device as well as a five way navigator device.

In other embodiments the computing device is a mobile device such as a JAVA enabled cellular telephone or personal digital assistant PDA such as the i55sr i58sr i85s i88s i90c i95cl or the im1100 all of which are manufactured by Motorola Corp. of Schaumburg Ill. the 6035 or the 7135 manufactured by Kyocera of Kyoto Japan or the i300 or i330 manufactured by Samsung Electronics Co. Ltd. of Seoul Korea.

In still other embodiments the computing device is a Blackberry handheld or smart phone such as the devices manufactured by Research In Motion Limited including the Blackberry 7100 series 8700 series 7700 series 7200 series the Blackberry 7520 or the Blackberry PEARL 8100. In yet other embodiments the computing device is a smart phone Pocket PC Pocket PC Phone or other handheld mobile device supporting Microsoft Windows Mobile Software. Moreover the computing device can be any workstation desktop computer laptop or notebook computer server handheld computer mobile telephone any other computer or other form of computing or telecommunications device that is capable of communication and that has sufficient processor power and memory capacity to perform the operations described herein.

In one embodiment the server includes a policy engine for controlling and managing the access to a resource selection of an execution method for accessing the resource and the delivery of resources. In another embodiment the server communicates with a policy engine. In some embodiments the policy engine determines the one or more resources a user or client may access. In other embodiments the policy engine determines how the resource should be delivered to the user or client e.g. the method of execution. In still other embodiments the server provides a plurality of delivery techniques from which to select a method of execution such as a server based computing application streaming or delivering the application locally to the client for local execution. In other embodiments the policy engine can apply a policy configured by an administrator or the end user to redirect read and or write access to one or more file systems folders. For example the policy engine can apply a policy that results in redirection of requests for access to the My Documents folder associated with a server machine to the My Documents folder of the client machine .

Referring now to a block diagram depicts an embodiment of a system for redirecting to a second machine a request for access to a folder on a first machine the request being made by a resource executing within a remote access session on the first machine . In brief overview the system includes a first machine a first component a resource executing on the first machine a second machine and a second component . The first component on the first machine i receives folder mapping information associated with a folder provided by a shell namespace on the second machine ii intercepts a request by a resource executing on the first machine to access file system data on the first machine and iii redirects the request to the second machine responsive to the received folder mapping information. The second component on the second machine receives the redirected request and modifies file system information on the second machine responsive to the received request.

Referring now to and in greater detail a shell is software providing a user interface to the user. In one embodiment a shell may be supplemented or replaced with a third party shell. In MICROSOFT WINDOWS the default shell is EXPLORER which determines the configuration of the desktop e.g. the task bar notification area start menu etc. . In one embodiment a shell namespace maintained by the shell provides a graphical display of a tree structured hierarchy of files and folders in a file system managed by a shell on a computer. In another embodiment folders objects are nodes of the tree. In another embodiment folder objects are containers for file objects other folders in the file system or links to files stored on other file systems. In still another embodiment file objects are leaves of the tree. In yet another embodiment file objects may include normal disk files or virtual objects such as printer links. In still yet another embodiment folders that are not part of the file system may be referred to as virtual folders. In another embodiment objects within the shell namespace may be identified by a unique pathname. In yet another embodiment a virtual folder may organize files independently of their physical location. Unlike a regular folder files in a virtual folder are not limited to any to any single physical location on one machine but may include links to files in any location on a plurality of networked machines and or databases. In this way a virtual folder may be a collection of shortcuts to actual files and folders according to embodiments of the invention.

Some special folders provide access to user folders while the user accesses a resource that accesses user specific data. For example a user can launch a word processing application and interact with the user interface to request access to data for example a user may click on a File Open option that launches an Open dialog box. The dialog box typically provides a list of files and folders the user typically interacts with on a regular basis. In some embodiments the dialog box displays a special folder examples of such special folders provided in a MICROSOFT WINDOWS environment can include a My Documents folder or My Desktop folder. Special folders may provide access to both regular and virtual folders located either on a local machine or on one or more remote machines.

In some embodiments the first component includes a file system redirector that receives the intercepted request and transmits the intercepted request to the second component . In one embodiment the file system redirector is a file system filter driver. In another embodiment the file system redirector is a mini filter driver. In yet another embodiment the file system redirector is a hooking mechanism. In each of these embodiments the file system redirector may have been modified to integrate the functionality described herein.

In other embodiments the first component includes a receiver receiving folder mapping information associated with a special folder or a virtual folder provided by the shell namespace on the second machine . In some embodiments the folder mapping information may include without limitation the pathname the item ID the actual address and or the type e.g. special or virtual of the folder provided by the shell namespace on the second machine .

In one embodiment the first component is part of a presentation layer protocol agent. In another embodiment the first component is in communication with a presentation layer protocol agent.

In one embodiment the resource includes without limitation a program an application a document a file a plurality of applications a plurality of files an executable program file a desktop environment a computing environment or other resource made available to a user of the second machine .

In one embodiment the second component on the second machine identifies folder mapping information associated with the folder provided by the shell namespace on the second machine . In another embodiment the second component may be in communication with another agent on the second machine wherein the agent is identifying the folder mapping information associated with the folder . In still another embodiment the second component transmits the identified folder mapping information to the first machine . In some embodiments the second component receives from the first machine a request for modification of the folder associated with the folder mapping information. For example the second component may receive a request to read or write to a file stored in a directory represented by the folder mapping information.

In one embodiment the second component is provided as a component of a presentation layer protocol agent. In another embodiment the second component is in communication with a presentation layer protocol agent.

Referring now to a flow diagram depicts an embodiment of a method for redirecting to a second machine without user intervention a request for access to a folder on a first machine the request made by a resource executing within a remote access session on a first machine . In brief overview the method includes receiving by a component on a first machine folder mapping information associated with a folder provided by a shell namespace on a second machine block . The component intercepts a request by a resource executing on the first machine for access to file system data on the first machine block . The component redirects the request to the second machine responsive to the received folder mapping information block .

A component on a first machine receives folder mapping information associated with a folder provided by a shell namespace on a second machine block . In one embodiment the component on the first machine receives an address of the folder provided by the shell namespace on the second machine . In another embodiment the component on the first machine receives an instruction to redirect to the second machine a request for access to file system data on the first machine responsive to the received folder mapping information associated with the folder provided by the shell namespace on the second machine . In other embodiments component maps to the first machine a folder on the second machine for access by a resource executing on the second machine .

In one embodiment an agent on the second machine identifies folder mapping information associated with the folder provided by the shell namespace on the second machine . In another embodiment the agent transmits the identified folder mapping information to the first machine . In some of these embodiments the agent receives from the first machine a request for modification of the folder associated with the folder mapping information. In some of these embodiments the agent modifies file system information on the second machine responsive to the received request.

The component intercepts a request by a resource executing on the first machine for access to file system data on the first machine block . In some embodiments the component intercepts a request by the resource executing on the first machine to modify file system information associated with the first machine . In other embodiments the component intercepts a request by the resource executing on the first machine to read a file in a folder provided by a shell namespace on the first machine . In other embodiments the component intercepts a request by the resource executing on the first machine to modify a file in a folder provided by a shell namespace on the first machine . In one embodiment the component intercepts a request by the resource executing on the first machine to read a file in a special folder provided by a shell namespace on the first machine . In another embodiment the component intercepts a request by the resource executing on the first machine to modify a file in a special folder provided by a shell namespace on the first machine .

The component redirects the request to the second machine responsive to the received folder mapping information block . In some embodiments the component transmits the intercepted request to a file system redirector. In one of these embodiments the file system redirector transmits the intercepted request to the second machine .

In one embodiments a second component on the second machine receives the redirected request. In another embodiment the second component identifies the request as a request to enumerate at least one file or object in a directory represented by a special folder. In yet another embodiment the second component transmits to the first machine an enumeration of the requested at least one file or object for display by the resource executing on the first machine. In some embodiments the second component identifies the request as a request to enumerate at least one file or object in a directory represented by a special folder. In one embodiment the second component enumerates at least one file or object in a directory by a special folder in response to a received request. In other embodiments the second component identifies the request as a request to open a file contained in a special folder. In one embodiment the second component opens a file contained in a special folder displaying any output data on the first machine . In still other embodiments the second component identifies the request as a request to modify e.g. delete or write to a file an object or data on the file system. In one embodiment the second component modifies e.g. deletes or writes to a file an object or data on the file system.

In one embodiment the component determines that the request by the resource executing on the first machine is a request for access to a folder provided by a shell namespace on the first machine . In one embodiment the component identifies in the intercepted request an address associated with a folder located on the first machine . In another embodiment the component identifies the address as one for which the component has received folder mapping information from the second machine. In another embodiment the identified address is remapped to an address of the folder provided by the shell namespace on the second machine at substantially the same time as the request interception. In still another embodiment at least one of the intercepted request and the remapped address are then transmitted to the second machine .

In other embodiments the first machine provides to the resource access to file system data associated with the second machine . In one of these embodiments the first machine provides to the resource access to a special folder located on the second machine . In another embodiment the first machine provides to the resource access to a virtual folder located on the second machine .

In one embodiment the second machine responds by modifying a file on the second machine . In another embodiment the second machine responds by transmitting a file to the first machine .

Referring now to a flow diagram depicts an embodiment of a method of actions performed by a client . The method includes collecting client file system information block transmitting that collected information to the server block and receiving a response from the server block .

In one embodiment a component collects file system information about the client block . In another embodiment component collects special folder information e.g. My Documents folder information from the client . In another embodiment a client agent collects file system information about the client . In still another embodiment a redirector module collects file system information about the client . In some embodiments component collects file system information including folder mapping information.

In one embodiment the client transmits the collected information to the server block . The transmission can occur using one of the methods and protocols described above in connection with .

In one embodiment the client receives commands from the server block . In one embodiment the component receives requests from a server side agent to access a file. In another embodiment a client agent receives requests from a server side agent to access a file. In still another embodiment a redirector module receives requests from a server side agent to access a file. In some embodiments requests such as a read request or a write request are remapped from client to server or vice versa. In other embodiments the client responds to the requests and provides access to the file. In one of these embodiments the client transmits to the server file system data stored on the client . In another of these embodiments the server integrates a display of the received file system data into a display of output data generated by at least one resource executing on the server . In still another of these embodiments the client responds to the intercepted request by displaying to a user of the client the requested file.

Referring now to a flow diagram depicts one embodiment of a method performed by a server . The method includes receiving client folder information block intercepting an application call block remapping the intercepted application call block and redirecting the remapped application call to the client block .

In one embodiment the server receives client side folder information block . In another embodiment a server agent receives client side folder information.

In one embodiment an interceptor component or hooking component intercepts a request from a resource block . The interceptor can be in one embodiment a file system filter driver modified to provide the functionality described herein. A resource may include an application program module or any such suitable resource. Requests by a resource may include application calls. Application calls may include but are not limited to reads writes opens and closes.

In one embodiment the server agent remaps the intercepted application call block . The remapping can in one embodiment include remapping from a pathname on a server to a pathname on a client. In another embodiment the remapping can include remapping from a pathname on a client to a pathname on a server. In other embodiments various combinations of client and server remapping occur.

In one embodiment the server redirects the remapped application calls to the client block . The redirection can occur using any of the methods discussed above in connection with .

Referring now to a block diagram depicts one embodiment of a method for redirecting a request for access to a folder on a first machine the request being made by a resource executing within a remote access session on the first machine. The method includes configuring a remote access session for file system redirection block transmitting to the server client file system information block receiving a read and or write request during a remote access session block and redirecting the read and or write request block .

Referring now to and in greater detail a remote access session is configured for file system redirection block . In one embodiment an administrator configures the server to allow or disallow redirection. In another embodiment the administrator configures the policy engine executing on the server to configure the redirection. In some embodiments the configuration can include asking a user of the client whether redirection is desired for a session. In other embodiments redirection is automatically allowed for certain clients and not allowed for other clients . In some other embodiments redirection can be allowed for part of a session and not allowed for other portions of a session. In one of these embodiments redirection is dynamically changeable during a session. In further embodiments redirection occurs from either the server to the client from the client to the server or both.

The client agent gathers and transmits client side file system information to the remote machine block . In one embodiment the client agent collects at least a portion of folder mapping information using a client context and transmits that information to the server using the remote access protocol. The transmitted information in one embodiment includes the location of a special folder e.g. c users user1 Desktop for the Desktop folder .

In one embodiment a client connects to a server that is executing an application on behalf of the client . In another embodiment the application receives a request from the user of the client in the form of file access requests such as File Open Save and in some embodiments displays a dialogue box to the end user block . In still another embodiment the application makes a request or system call similar to a FileOpen or FileCreate. In yet another embodiment the request may include an identification of the location of the special folder path e.g. FileOpen c users user1 Desktop . In some embodiments an interceptor component e.g. a hooking component either on the client or the server intercepts such a system call and determines whether the request is targeted to access a special folder location on server.

In one embodiment a File Open Create call might be targeted to any file system where interception can be done in user mode kernel mode or using a file system filter driver. In another embodiment a File Open Create call might be targeted to a higher level application. In still another embodiment redirection can be performed per user per terminal server session per application and even when saving files per file type. For example TXT files may be redirected to the client s My Documents folder while presentation files for example files generated using a presentation program such as MICROSOFT POWERPOINT are not. In some embodiments application programming interface API calls are intercepted and redirected. In other embodiments calls are made to the shell namespace. In one of these embodiments an interaction with the shell namespace involves different components of an operating system and may operate at a different layer than the components involved in a call to the file system.

In one embodiment if redirection is enabled the server redirects a request such as a read request or a write request to a destination block . In one embodiment a request to access a file on a client file system is mapped to a location on a server. In another embodiment a request for access to a file on a server file system is mapped to a pathname identifying a related file on a client file system location. In another embodiment once the call is validated to a server side special folder the server agent in some embodiments remaps the folder name to a different folder location. The server agent maps the client file system that can be accessed as a regular drive folder path by the server application. For example in an embodiment in which the client file system stores a client special folder within a directory on a drive that is mapped as the X drive to a server a server side component receives client side folder mapping information and translates the client side special folder pathname to x users user1 desktop from c users user1 desktop which was the client side desktop folder pathname.

In one embodiment when a server application attempts to access a special folder e.g. a server desktop folder c users user1 desktop on the server the hooking component intercepts the system calls and remaps the identified pathname using the folder mapping information received from the client. In response the server agent receives and transfers these remapped calls to the client agent. Then the client side agent completes the request. This process is transparent to the application and to the user. Therefore in some embodiments the user runs the application remotely and automatically accesses his or her own local special folder from the application without taking any additional actions or manually requesting access to the local special folder.

In another embodiment using the methods and systems described herein a user may access a client machine wherein a first server provides access to a resource and a second server provides access to a special folder. In such an embodiment requests made by the resource on the first server for folder access on the client machine may be redirected to the second server which may store a profile e.g. a roaming profile for the user.

In one embodiment and by way of illustration a first component on the server receives folder mapping information associated with a My Documents folder on a user s laptop. In another embodiment the first component intercepts the request from a word processing application to save a document to a default location in this example to a My Documents folder on the server. The first component redirects the request to the My Documents folder on the laptop as indicated by the received folder mapping information. In still another embodiment the user may then utilize the locally saved document even when disconnected from the server.

Having described certain embodiments of methods and systems for redirecting to a second machine without user intervention a request for access to a folder on a first machine the request being made by a resource executing within a remote access session on the first machine it will now become apparent to one of skill in the art that other embodiments incorporating the concepts of the disclosure may be used. Therefore the disclosure should not be limited to certain embodiments but rather should be limited only by the spirit and scope of the following claims.

