---

title: Method and system for modifying and rendering scenes via display lists
abstract: Various embodiments of a method and system for modifying and rendering scenes via display lists are described. Various embodiments may include a graphical application for generating a display list including display list nodes each corresponding to a respective scene element. To generate a given display list node, the graphical application may determine a scene graph node of a scene graph, allocate a portion of memory dedicated to the display list node, and store in that portion of memory, at least one of the attributes of the respective scene element determined from the particular scene graph node. The graphical application may modify a particular display list node corresponding to the particular scene element by modifying a respective attribute stored in the portion of memory allocated to the particular display list node, and render an image of a scene that includes the particular scene element modified according to the notification.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08441496&OS=08441496&RS=08441496
owner: Adobe Systems Incorporated
number: 08441496
owner_city: San Jose
owner_country: US
publication_date: 20080930
---
The present invention is directed to computer systems. More particularly it is directed to modifying and rendering three dimensional scenes in computing environments.

Computer systems can be used to generate representations of three dimensional scenes. Three dimensional scenes or worlds may include various objects arranged at specified positions within the scene. Examples of such objects include geometry objects light objects camera objects or other objects that may be represented in a three dimensional space. In many cases objects may include properties such as position orientation color texture intensity e.g. for light objects and or other properties that may be represented as part of a three dimensional scene. Three dimensional scenes may be created in a variety of computing applications such as computer aided design CAD applications and three dimensional animation applications. Such application can be utilized for a wide variety of purposes such as generating a three dimensional representation of architectural plans or generating an animated motion picture. To represent three dimensional scenes in two dimensional form e.g. on an electronic display such scenes may be rendered from a particular viewing or view frustum which specifies the point of view from which the scene is rendered.

Various embodiments of a method and system for modifying and rendering scenes via display lists are described. Various embodiments may include a scene graph that includes multiple scene graph nodes. Various embodiments may also include the generation of a display list. In some embodiments a display list may be an optimized version of a corresponding scene graph. Such display list may be represented by a tree data structure including one or more parent nodes and corresponding child nodes. In various embodiments memory space for a display list may be allocated at load time e.g. when a source graphics file is loaded by a graphical application . In various embodiments a separate portion of memory may be dedicated to each display list node of the display list.

Whereas conventional systems might link display list nodes as part of a rendering process the graphical application described herein may in various embodiments link display list nodes e.g. in a linked list or other linking data structure independently with respect to the rendering process. For instance in some cases the display list nodes of the display list may be linked at load time and one or more images may be subsequently rendered from such linked display list. Furthermore conventional systems may perform a scene modification e.g. a modification to any element of the scene e.g. a color change applied to an object by modifying the corresponding scene graph generating a new display list linking the new display list and rendering from the new display list an image of the scene including the scene modification.

Various embodiments described herein may include performing a scene modification by directly modifying the original display list e.g. without modifying the corresponding scene graph and rendering from the display list an image of the scene including the scene modification. In various embodiments directly modifying the original display list may include modifying one or more attributes of a display list node. As described above a particular portion of memory may be dedicated to a particular display list node. To perform a modification to a scene element to which that particular display list node corresponds various embodiments may include replacing the value of an attribute stored in the display list node s dedicated portion of memory with a new value for the attribute. An image of the modified scene including the modified scene element may be rendered from the modified display list. Such rendering may be performed without allocating additional memory for the display list and or without modifying the scene graph. In various embodiments the scene graph may be modified to reflect such a scene modification however such modification to the scene graph may be performed asynchronously with respect to the rendering process.

While the method and system for modifying and rendering scenes via display lists is described herein by way of example for several embodiments and illustrative drawings those skilled in the art will recognize that the method and system for modifying and rendering scenes via display lists is not limited to the embodiments or drawings described. It should be understood that the drawings and detailed description thereto are not intended to limit embodiments to the particular form disclosed. Rather the intention is to cover all modifications equivalents and alternatives falling within the spirit and scope of the method and system for modifying and rendering scenes via display lists as defined by the appended claims. Any headings used herein are for organizational purposes only and are not meant to limit the scope of the description or the claims. As used herein the word may is used in a permissive sense i.e. meaning having the potential to rather than the mandatory sense i.e. meaning must . Similarly the words include including and includes mean including but not limited to.

Various embodiments of a method and system for modifying and rendering scenes via display lists are described. Various embodiments may include a scene graph that includes multiple scene graph nodes. In some cases such scene graph may be represented by a tree data structure including one or more parent nodes and corresponding child nodes. Each of such nodes may represent an element or object of a three dimensional scene. For example a given node in the scene graph may represent a geometry object a light object a camera object or another object that may be represented in a three dimensional space. In many cases objects may include attributes such as position orientation color texture intensity e.g. for light objects and or other attributes that may be represented as part of a three dimensional scene. While the description presented herein may largely describe various embodiments in terms of tree data structures any data structure suitable for representing a three dimensional scene may be utilized in various embodiments. In some embodiments a scene graph may be generated from a data file representing a three dimensional scene such as a data file generated from a three dimensional CAD application. In various embodiments scene graphs may be generated by a graphical application and stored in memory such as random access memory RAM . In general a graphical application may include any application configured to render an image or other two dimensional representation of a three dimensional scene. In various embodiments graphical applications may include a rendering component to perform a portion or all of the rendering duties of the application. To perform rendering duties such graphical application may in some cases utilize a graphics application programming interface API and or graphics hardware e.g. a graphics processing unit GPU . In various embodiments rendering may include real time rendering or offline rendering.

Various embodiments may also include the generation of a display list. In some embodiments a display list may be an optimized version of a corresponding scene graph. Accordingly such display list may also be represented by a tree data structure including one or more parent nodes and corresponding child nodes. In various embodiments a three dimensional scene may be rendered from the viewpoint of a camera object which defines a point of view or view frustum for a given three dimensional scene. Accordingly the display list may in various embodiments be optimized by excluding nodes that are positioned outside of the view frustum. Additionally the display list may in various embodiments be optimized by excluding hidden nodes i.e. nodes positioned within the view frustum that are not visible due to a viewing obstruction such as a larger element in the scene . Display lists may also be optimized by sorting faces of geometrical objects to minimize switching between different materials at render time which may conserve processing time power . As is the case with scene graphs display lists may be generated by the aforementioned graphical application and stored in memory such as RAM. In various embodiments memory space for a display list may be allocated at load time i.e. when the source graphics file is loaded by the graphical application . In various embodiments a separate portion of memory may be dedicated to each display list node of the display list.

Whereas conventional systems might link display list nodes as part of a rendering process the graphical application described herein may in various embodiments link display list nodes e.g. in a linked list or other linking data structure independently with respect to the rendering process. For instance in some cases the display list nodes of the display list may be linked at load time and one or more images may be subsequently rendered from such linked display list. Furthermore conventional systems may perform a scene modification e.g. a modification to any element of the scene e.g. a color change applied to an object by modifying the corresponding scene graph generating a new display list linking the new display list and rendering from the new display list an image of the scene including the scene modification. Various embodiments described herein may perform a scene modification by directly modifying the original display list e.g. without modifying the corresponding scene graph and rendering from the display list an image of the scene including the scene modification. In various embodiments directly modifying the original display list may include modifying one or more attributes of a display list node. As described above a particular portion of memory may be dedicated to a particular display list node. To perform a modification to a scene element to which that particular display list node corresponds various embodiments may include replacing the value of an attribute stored in the display list node s dedicated portion of memory with a new value for the attribute. For example to change a color of a particular scene element a color code of a color attribute stored in the corresponding display list node s dedicated portion of memory may be replaced with a new color code. An image of the modified scene including the scene element colored according to its new color code may be rendered from the modified display list. Such rendering may be performed without allocating additional memory for the display list and or without modifying the scene graph. In various embodiments the scene graph may be modified to reflect such a scene modification however such modification to the scene graph may be performed asynchronously with respect to the rendering process.

In various embodiments an object manager may manage multiple history states of a scene. The various history states may specify the state of a scene at a given point in time. In various embodiments each history state may correspond to a respective scene modification. For example a particular scene modification might include changing the color of a light element from red to green. The corresponding history state for this scene modification may specify such color change. For instance the history state may be a record indicating a particular change in a particular attribute of a scene element. For the example of a color change to a particular scene element the corresponding history state may include an identifier of the scene element e.g. a pointer to the memory space in which the corresponding display list node resides an identifier of a particular attribute that was changed e.g. a color attribute the value from which the attribute was changed e.g. the original color code and or the value to which the attribute was changed e.g. the new color code . The object manager described herein may be a component of the aforementioned graphics application in various embodiments. In various cases the object manager may be responsive to requests to load a particular history state from its records of history states. In some embodiments such requests may correspond to undo commands e.g. a command to transition to a previous state or redo commands e.g. a request to transition to a future state .

While scene graph as well as display list is described with respect to a tree data structure any data structure suitable for representing a three dimensional scene may be utilized in various embodiments. In some embodiments scene graph may be generated from a data file representing a three dimensional scene such as a data file generated from a three dimensional CAD application. In various embodiments scene graph may be generated by graphical application and stored in memory such as RAM such as memory described below with respect to . In general graphical application may in various embodiments include any application configured to render image or an other two dimensional representation of the three dimensional scene or world defined by scene graph . In various embodiments graphical application may include rendering component which may be configured to perform a portion or all of the rendering duties of application . To perform rendering duties graphical application may in some cases utilize a graphics API and or graphics hardware e.g. a GPU . In various embodiments such rendering may include real time rendering or offline rendering.

The illustrated embodiment of also includes display list which may be an optimized version of a scene graph . Accordingly display list may also be represented by a tree data structure including one or more parent nodes e.g. display list node and corresponding child nodes e.g. display list node . In various embodiments graphical application may perform rendering from the viewpoint of a camera object which defines a point of view or view frustum for a given three dimensional scene. Such camera object may be defined by a scene graph node and or a display list node of . Display list may in various embodiments be optimized by excluding nodes that are positioned outside of the view frustum. For instance while display list includes nodes corresponding respectively to nodes of the scene graph display list does not include a node that corresponds to scene graph node . In one example scene graph node may be a node that corresponds to a scene element that is positioned outside of the aforementioned view frustum. Additionally display list may in various embodiments be optimized by the exclusion of hidden nodes i.e. nodes positioned within the view frustum that are not visible due to a viewing obstruction such as a larger element in the scene such exclusion may be performed by graphical application . For example scene graph node may correspond to a scene element that is hidden by another object in the view frustum such as a scene element corresponding to one of display list nodes . Display list may also be optimized via the sorting of faces of geometrical objects in order to minimize switching between different materials at render time which may conserve processing cycles and or power such sorting may be performed by graphical application . As is the case with scene graph display list may be generated by the aforementioned graphical application and stored in memory such as RAM such as memory described below with respect to . In various embodiments memory space for a display list may be allocated at load time i.e. when the source graphics file from which the scene graph is generated is loaded by the graphical application . In various embodiments a separate portion of memory may be dedicated to each display list node of the display list.

Whereas conventional graphical applications might link display list nodes as part of a rendering process graphical application may in various embodiments link display list nodes e.g. in a linked list or other linking data structure independently with respect to the rendering process. For instance in some cases the display list nodes of the display list may be linked at load time and image may at some later time be rendered from such linked display list. Graphical application may also include a history object manager which is described in more detail below with respect to .

Application may in some embodiments perform a scene modification by directly modifying the original display list e.g. without modifying the corresponding scene graph and or generating a new display list in a new memory space and rendering from the display list image of the scene including the scene modification. In various embodiments directly modifying the original display list may include modifying one or more attributes of a display list node. As described above a particular portion of memory e.g. memory described below with respect to may be dedicated to a particular display list node. To perform a modification to the scene element to which display list node corresponds application may be configured to replace the value of an attribute stored in the display list node s dedicated portion of memory with a new value for the attribute.

Returning to the illustrated embodiment also includes an object manager that may be notified of operation as demonstrated by the illustrated change notification. For each change notification received likewise for each operation performed object manager may be configured to create a corresponding stored record of a history state such as history states . In various embodiments history states may each specify the state of a scene at a given point in time. For example in various embodiments each history state may correspond to a respective scene modification. For instance a particular scene modification might include changing the color of a light element from red to green. The corresponding history state for such a scene modification may specify such color change.

In the illustrated example object manager may generate history state in response to being notified of operation . For instance history state may be a record indicating a particular change in a particular attribute of a sphere . For the example of a color change to a sphere the corresponding history state may include an identifier of the scene element e.g. a pointer to the memory space in which display list node resides an identifier of a particular attribute that was changed e.g. a color attribute the value from which the attribute was changed e.g. a color code corresponding to light grey and or the value to which the attribute was changed e.g. a color code corresponding to black .

The method and system for modifying and rendering scenes via display lists may include a variety of methods some of which are described in more detail below. illustrates a flowchart of one example of such methods according to some embodiments. In various embodiments the method described herein may be performed by graphical application described above. As illustrated by block the method may include generating a display list that includes one or more display list nodes each corresponding to a respective scene element. As described above a display list may be an optimized version of a corresponding scene graph. Accordingly such display list may also be represented by a tree data structure including one or more parent nodes and corresponding child nodes. In various embodiments the method described herein may include generating a display list by excluding nodes for scene elements that are positioned outside of the view frustum e.g. a view frustum defined by a camera object . In some embodiments the method described herein may include generating a display list by excluding hidden nodes i.e. nodes positioned within the view frustum that are not visible due to a viewing obstruction such as a larger element in the scene . Generating a display list may in some embodiments include optimizing such display list by sorting faces of geometrical objects to minimize switching between different materials at render time in order to conserve processing time power. In various embodiments generating a display list may also include storing such display list in memory such as RAM.

To generate a given display list node of the display list the method may include determining a particular scene graph node of a scene graph that specifies one or more attributes e.g. color position orientation or any other attribute described herein of the respective scene element to which the given display list node corresponds. The method may further include allocating a portion of memory e.g. a portion of memory as illustrated in dedicated to the given display list node. The method may also include storing in that portion of memory at least one of the one or more attributes of the respective scene element e.g. as specified by the determined scene graph node .

As illustrated by block the method may include in response to a notification to modify a particular scene element modifying a particular display list node that corresponds to the particular scene element by modifying a respective attribute stored in the portion of memory allocated to the particular display list node. To perform a modification to a scene element to which that particular display list node corresponds the method may include replacing the value of an attribute stored in the display list node s dedicated portion of memory with a new value for the attribute. For example to change a color of a particular scene element a color code of a color attribute stored in the corresponding display list node s dedicated portion of memory may be replaced with a new color code. In other example the method may include modifying a value associated with other attributes such as values associated with position orientation color hue saturation contrast white levels texture intensity e.g. for light objects light type light position light target light color hotspot angle falloff angle camera type banking angle lens type aspect ratio e.g. ratio of viewing frustum defined by camera zoom factor shadow attributes texture attributes mesh attributes and or values associated with other attributes that may be represented as part of a three dimensional scene.

As illustrated by block the method may further include rendering from the display list including the modified display list node an image of a scene that includes the particular scene element modified according to the notification to modify the particular scene element. One example of such rendering is described above with respect to image . In various embodiments the method may include performing the rendering without allocating additional memory for the display list and or without modifying the scene graph. In various embodiments the scene graph may be modified to reflect such a scene modification e.g. by modifying one or more attributes specified by said scene graph however such modification to the scene graph may be performed asynchronously with respect to the rendering process.

As illustrated by block the method may further include modifying an attribute of a display list node according to the determined state. For example the determined state may specify a particular value of a particular attribute of a display list node. The method may include replacing the current value stored in the portion of memory dedicated to that display list node with a value of the determined history state. One example of such a change is described above with respect to attribute modification . For instance in the case of a color change the method may include replacing a current color code stored in the portion of memory dedicated to a display list node with a color code specified by the determined history state. In various other embodiments other attributes may be modified including but not limited to position orientation color hue saturation contrast white levels texture intensity e.g. for light objects light type light position light target light color hotspot angle falloff angle camera type banking angle lens type aspect ratio e.g. ratio of viewing frustum defined by camera zoom factor shadow attributes texture attributes mesh attributes and or values associated with other attributes that may be specified by a history state. As illustrated by block the method may further include rendering an image of the updated scene according to the various rendering methods described above. For example the method may include rendering the updated scene without allocating additional memory for the display list and or without modifying the scene graph.

Various embodiments of a method and system for modifying and rendering scenes via display lists as described herein may be executed on one or more computer systems which may interact with various other devices. One such computer system is computer system illustrated by . Computer system may be capable of implementing a graphical application such as graphical application . In the illustrated embodiment computer system includes one or more processors coupled to a system memory via an input output I O interface . Computer system further includes a network interface coupled to I O interface and one or more input output devices such as cursor control device keyboard and display s for displaying images rendered according to the various techniques described above e.g. image which may represent any one of images . In some cases it is contemplated that embodiments may be implemented using a single instance of computer system while in other embodiments multiple such systems or multiple nodes making up computer system may be configured to host different portions or instances of embodiments. For example in one embodiment some elements may be implemented via one or more nodes of computer system that are distinct from those nodes implementing other elements.

In various embodiments computer system may be a uniprocessor system including one processor or a multiprocessor system including several processors e.g. two four eight or another suitable number . Processors may be any suitable processor capable of executing instructions. For example in various embodiments processors may be general purpose or embedded processors implementing any of a variety of instruction set architectures ISAs such as the x86 PowerPC SPARC or MIPS ISAs or any other suitable ISA. In multiprocessor systems each of processors may commonly but not necessarily implement the same ISA.

System memory may be configured to store program instructions and or data accessible by processor . In various embodiments system memory may be implemented using any suitable memory technology such as static random access memory SRAM synchronous dynamic RAM SDRAM nonvolatile Flash type memory or any other type of memory. In the illustrated embodiment program instructions and data implementing a graphical application are shown stored within system memory as graphical application . Additionally data representing one or more scene graphs and one or more display lists are shown illustrated as scene graph and display list . In various embodiments program instructions and or data may be stored upon different types of computer readable storage media or on similar media separate from system memory or computer system .

In one embodiment I O interface may be configured to coordinate I O traffic between processor system memory and any peripheral devices in the device including network interface or other peripheral interfaces such as input output devices . In some embodiments I O interface may perform any necessary protocol timing or other data transformations to convert data signals from one component e.g. system memory into a format suitable for use by another component e.g. processor . In some embodiments I O interface may include support for devices attached through various types of peripheral buses such as a variant of the Peripheral Component Interconnect PCI bus standard or the Universal Serial Bus USB standard for example. In some embodiments the function of I O interface may be split into two or more separate components such as a north bridge and a south bridge for example. Also in some embodiments some or all of the functionality of I O interface such as an interface to system memory may be incorporated directly into processor .

Network interface may be configured to allow data to be exchanged between computer system and other devices attached to a network such as other computer systems e.g. server or between nodes of computer system . In various embodiments network interface may support communication via wired or wireless general data networks such as any suitable type of Ethernet network for example via telecommunications telephony networks such as analog voice networks or digital fiber communications networks via storage area networks such as Fibre Channel SANs or via any other suitable type of network and or protocol.

Input output devices may in some embodiments include one or more display terminals keyboards keypads touchpads scanning devices voice or optical recognition devices or any other devices suitable for entering or accessing data by one or more computer systems . Multiple input output devices may be present in computer system or may be distributed on various nodes of computer system . In some embodiments similar input output devices may be separate from computer system and may interact with one or more nodes of computer system through a wired or wireless connection such as over network interface .

As shown in memory may include program instructions configured to implement a graphical application such as graphical application and data including one or more scene graphs such as scene graph and one or more display lists such as display list . In one embodiment graphical application may implement the methods described above such as the methods illustrated by . In other embodiments different elements and data may be included.

Those skilled in the art will appreciate that computer system is merely illustrative and is not intended to limit the scope of embodiments. In particular the computer system and devices may include any combination of hardware or software that can perform the indicated functions including computers network devices Internet appliances PDAs wireless phones pagers etc. Computer system may also be connected to other devices that are not illustrated or instead may operate as a stand alone system. In addition the functionality provided by the illustrated components may in some embodiments be combined in fewer components or distributed in additional components. Similarly in some embodiments the functionality of some of the illustrated components may not be provided and or other additional functionality may be available.

Those skilled in the art will also appreciate that while various items are illustrated as being stored in memory or on storage while being used these items or portions of them may be transferred between memory and other storage devices for purposes of memory management and data integrity. Alternatively in other embodiments some or all of the software components may execute in memory on another device and communicate with the illustrated computer system via inter computer communication. Some or all of the system components or data structures may also be stored e.g. as instructions or structured data on computer readable storage media or a portable article to be read by an appropriate drive various examples of said portable articles are described above. In some embodiments instructions stored on a computer readable storage media separate from computer system may be transmitted to computer system via transmission media or signals such as electrical electromagnetic or digital signals conveyed via a communication medium such as a network and or a wireless link. Various embodiments may further include receiving or sending or storing instructions and or data implemented in accordance with the foregoing description upon a transmission medium. Accordingly various embodiments may be practiced with other computer system configurations.

Various embodiments may further include storing instructions and or data implemented in accordance with the foregoing description upon a computer readable storage media. Generally speaking a computer readable storage media may include storage media or memory media such as magnetic or optical media e.g. disk or DVD CD ROM volatile or non volatile media such as RAM e.g. SDRAM DDR RDRAM SRAM etc. ROM etc.

The methods described herein may be implemented in software hardware or a combination thereof in different embodiments. In addition the order of methods may be changed and various elements may be added reordered combined omitted modified etc. Various modifications and changes may be made as would be obvious to a person skilled in the art having the benefit of this disclosure.

Realizations in accordance with various embodiments have been described in the context of particular embodiments. These embodiments are meant to be illustrative and not limiting. Many variations modifications additions and improvements are possible. Accordingly plural instances may be provided for components described herein as a single instance. Boundaries between various components operations and data stores are somewhat arbitrary and particular operations are illustrated in the context of specific illustrative configurations. Other allocations of functionality are envisioned and may fall within the scope of claims that follow. Finally structures and functionality presented as discrete components in the exemplary configurations may be implemented as a combined structure or component. These and other variations modifications additions and improvements may fall within the scope of various embodiments as defined in the claims that follow.

