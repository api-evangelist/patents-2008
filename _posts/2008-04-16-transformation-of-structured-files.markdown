---

title: Transformation of structured files
abstract: A method of transforming a structured file is provided. A transformation instruction is loaded in a memory and the transformation instruction defines an event. The structured file is parsed into a parsing event and this parsing event is compared with the event defined by a transformation instruction. Based on the parsing event matching the event defined by the transformation instruction, the transformation instruction associated with the event is selected from the memory and the transformation instruction is executed to transform the structured file.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08281235&OS=08281235&RS=08281235
owner: Adobe Systems Incorporated
number: 08281235
owner_city: San Jose
owner_country: US
publication_date: 20080416
---
The present disclosure relates generally to data transformation. In an example embodiment the disclosure relates to the transformation of structured files.

A structured file e.g. an eXtensible Markup Language XML document may be transformed or manipulated to satisfy a variety of objectives. For example a structured file may be transformed into a different format. Currently many transformation engines load a complete structured file into memory and map the structured file into an internal tree structure which may be embodied within a Document Object Model DOM . A transformation engine needs to navigate through the tree structure to transform the structured file.

A tree structure is typically larger in size and than information for source or subset needed for the transformation and may therefore occupy a large amount of memory than necessary. Therefore the processing and storage of a tree structure may exert a great strain on system resources especially when the structured file is large. Furthermore many applications need to build their own custom tree structures rather than using a generic tree structure. Here a generic tree structure is initially built and then mapped to a different custom tree structure. The generic tree may then be discarded. The operations of building the entire tree structure and then discarding it after mapping waste system resources and slow the transformation process.

The description that follows includes illustrative systems methods techniques instruction sequences and computing machine program products that embody the present invention. In the following description for purposes of explanation numerous specific details are set forth in order to provide an understanding of various embodiments of the inventive subject matter. It will be evident however to one skilled in the art that embodiments of the inventive subject matter may be practiced without these specific details. In general well known instruction instances protocols structures and techniques have not been shown in detail.

The example embodiments described herein provide various techniques for transforming structured files. Generally as will be explained in more detail below a small set of transformation instructions are stored or held in memory. A structured file is parsed into a series of parsing events and each parsing event is compared with events defined by the transformation instructions stored in memory. If no match of an incoming parsing event with the events is identified then this parsing event is quickly dropped from the memory thereby reducing the memory footprint at an early stage in the transformation process.

The source structured file may be transformed for a variety of different purposes. For example source structured file may be transformed into a different format. In this example source structured file may be in XML format and may be transformed into target structured file that is in HTML format. In another example source structured file may be transformed to convert data between different schemas such as between various XML schemas. In yet another example a transformation operation may include querying particular data included in source structured file .

As depicted in transformation engine is configured to transform source structured file into target structured file based on transformation instructions . The source structured file is a structured file before transformation and parsing which is explained in more detail below. On the other hand target structured file is a structured file after transformation. In the example of source structured file is not modified. Instead transformation engine creates a new target structured file based on source structured file and transformation instructions . The transformation instructions describe rules for transforming structured files. Such transformation instructions provide the syntax to transform source structured file to target structured file . For example transformation instructions may be a set of keys to transform source structured file into target structured file . Examples of transformation languages include eXtensible Stylesheet Language Transformations XSLT XQuery Turing eXtender Language TXL Streaming Transformations for XML STX Functional XML Transformation Tool FXT Scala Scalable Language XStream and other transformation languages.

The parser module is configured to parse a structured file into events or parsing events. As will be explained in more detail below parsing may be the interpretation of a one dimensional stream of data into events. The parser module may be a streaming interface that is configured to parse a portion of a structured file at a time. In effect parser module may be a serial or stream parser. For example parser module receives or is provided with a structured file in a continuous stream and parses the portion of the structured file included in the continuous stream. As such parser module may not load the entire structured file into a memory. An example of parser module is a Simple Application Programming Interface for XML SAX parser. As will be explained in more detail below parser module may dynamically create event handler to intercept and to filter parsed events.

Transformation engine module is configured to transform one or more structured files. As explained in more detail below transformation engine module may create a representation of the transformation instructions in memory. The transformation engine module is in communication with parser module and may execute particular transformation instructions that are associated with incoming events or signaled events from the parser module. Examples of transformation engine module include XSLT engines sequential eXtensible markup language processing and transformation engines and other transformation engines.

It should be appreciated that in other example embodiments computing device may include fewer or more modules apart from those shown in . For example event handler may be separated from parser module to form two modules. In another example parser module may be integrated into transformation engine module .

A structured file is then parsed at into events or parsing events. A parsing event may refer to an event resulting from a parsing operation. As used herein it should be noted that the terms parsing events and events may be used interchangeably. As noted briefly above parsing may be the interpretation of a one dimensional stream of data into events. Events are the resultant output of a parsing operation. Examples of events may include nodes e.g. text nodes element nodes and other nodes instructions comments and other events. A Simple Application Programming Interface for XML SAX event is an example of a type of event. In an example embodiment the complete structured file may be loaded in memory and parsed. In another example embodiment the structured file may be parsed serially or sequentially. In serial parsing instead of loading the complete or entire structured file into the memory for parsing a portion of the structured file is loaded into memory and parsed into one or more parsing events. Therefore in effect a portion of the structured file is read and parsed at a time. The following Table A is an example of an XML file parsed into multiple parsing events.

In an example embodiment the transformation instructions are configured to define associated parsing events. For example a transformation instruction may define or specify a particular parsing event that is associated with itself. The respective parsing event may be included within the transformation instruction. When the transformation instructions are loaded in the memory their respective events are also retrieved from the transformation instructions. With the events extracted from the transformation instructions each parsing event resulting from a parsing operation is compared with each event defined by the transformation instructions at . For example each parsing event may be compared with a list or an array of events defined by the transformation instructions. Thereafter each transformation instruction associated with an event that matches a parsing event is selected from the memory at and executed at . The transformation instruction is executed to perform a transformation operation that transforms a portion of or an entire structured file. As will be explained in more detail below parsing events that do not match or is distinct from any events defined by the transformation instructions are removed or dropped from memory.

The transformation instructions also define associated events that may trigger the execution of the transformation instructions. The transformation engine module reads the events from transformation instructions and provides the defined events to parser module . It should be appreciated the events defined by transformation instructions may not all be actionable or warrant execution of their respective transformation instructions. The timing of the execution of each transformation instruction may be variable. Accordingly transformation engine module is configured to continuously update and provide a list of active events where the associated transformation instructions are ready for immediate execution to parser module . As used herein it should be noted that the terms active events and events may be used interchangeably.

In turn parser module may create event handler to handle the receipt of the events. The event handler is created based on the events provided by transformation engine module . Parser module creates event hander when events are provided. Without events parser module removes or does not create event handler . Accordingly the creation of event handler may be dynamic. Here parser module initially reads a portion of source structured file and parses this portion into one or more parsing events. In general event handler is an application that is configured to filter the parsing events. For example event handler may intercept the parsing events destined for transformation engine module and may compare each parsing event with a list or an array of actionable events provided by the transformation engine module.

The event handler may use a variety of comparison techniques to identify a match of a parsing event with an actionable event defined by transformation instructions . If event handler cannot find a match then the event handler removes or drops the parsing event from memory. The removal of the parsing event from the memory reduces the memory footprint thereby resulting in less memory being used to store the events. On the other hand if event handler identifies a parsing event to match an event in the list of actionable events then the event handler signals transformation engine module that an actionable event is received. Event handler may signal transformation engine module using a variety of signaling techniques such as transmitting the parsing event to the transformation engine module. In another example event handler may signal transformation engine module by transmitting an event identifier which identifies the event to the transformation engine module. Alternatively signaling may also include transformation engine module reading or pulling the parsing event from parser module . It should be appreciated that event handler compares and identifies events before the parsing event is signaled to transformation engine module .

Transformation engine module detects receipt of a particular actionable event from parser module . In effect transformation engine module receives or pulls signals from event handler or parser module that a particular actionable event is parsed from source structured file . As a result transformation engine module selects or retrieves a transformation instruction that is associated with the particular actionable event. This transformation instruction is selected from representation in memory and is thereafter provided to execution engine for execution. The output of execution engine is a transformation operation that transforms a portion of or the entire source structured file into target structured file .

The structured file is then parsed at into parsing events. The parsing events are provided to the event handler and the event handler compares each parsing event with actionable events defined by the transformation instructions. For example each parsing event is compared with a list of events at provided by a transformation engine module. Referring to starting at a determination is made as to whether each parsing event matches an actionable event from the list at . If a parsing event is distinct or does not match any actionable events then event handler removes the parsing event from memory at . Accordingly the size of memory reserved to store events may be reduced.

On the other hand if a parsing event matches an actionable event from the list then the event handler signals this parsing event to the transformation engine module at . The transformation engine module detects the receipt of the parsing event from the parser module and selects a transformation instruction associated with the parsing or actionable event at from memory. The transformation instruction is then executed at to transform the entire or a portion of the structured file. Once the structured file is completely parsed and filtered the transformation engine module may remove the representation of the transformation instructions from the memory.

The example computer system includes processor e.g. a central processing unit CPU a graphics processing unit GPU or both main memory and static memory which communicate with each other via bus . Computer system may further include video display unit e.g. a plasma display a liquid crystal display LCD or a cathode ray tube CRT . Computer system also includes alphanumeric input device e.g. a keyboard user interface UI navigation device e.g. a mouse disk drive unit signal generation device e.g. a speaker and network interface device .

Disk drive unit includes machine readable medium on which is stored one or more sets of instructions and data structures e.g. software embodying or utilized by any one or more of the methodologies or functions described herein. Software may also reside completely or at least partially within main memory and or within processor during execution thereof by computer system main memory and processor also constituting machine readable tangible media.

Software may further be transmitted or received over network via network interface device utilizing any one of a number of well known transfer protocols e.g. HTTP .

While machine readable medium is shown in an example embodiment to be a single medium the term machine readable medium should be taken to include a single medium or multiple media e.g. a centralized or distributed database and or associated caches and servers that store the one or more sets of instructions. The term machine readable medium shall also be taken to include any medium that is capable of storing encoding or carrying a set of instructions for execution by the machine and that cause the machine to perform any one or more of the methodologies of the present application or that is capable of storing encoding or carrying data structures utilized by or associated with such a set of instructions. The term machine readable medium shall accordingly be taken to include but not be limited to solid state memories optical and magnetic media and carrier wave signals.

While the invention s is are described with reference to various implementations and exploitations it will be understood that these embodiments are illustrative and that the scope of the invention s is not limited to them. In general techniques for transforming structured files may be implemented with facilities consistent with any hardware system or hardware systems defined herein. Many variations modifications additions and improvements are possible.

Plural instances may be provided for components operations or structures described herein as a single instance. Finally boundaries between various components operations and data stores are somewhat arbitrary and particular operations are illustrated in the context of specific illustrative configurations. Other allocations of functionality are envisioned and may fall within the scope of the invention s . In general structures and functionality presented as separate components in the exemplary configurations may be implemented as a combined structure or component. Similarly structures and functionality presented as a single component may be implemented as separate components. These and other variations modifications additions and improvements fall within the scope of the invention s .

