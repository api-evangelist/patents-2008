---

title: Development of networked applications
abstract: Mashup creation, through the reuse and combination of existing networking or Web applications, are presented. For example, a method for forming a networked software application on a first computer resource coupled by a network to a client computer of a user includes accessing, within a repository that is part of the first computer resource, a first networked software application part, forming, within the first computer resource, a second networked software application part, and providing the second networked software application part to the repository. The second networked software application part comprises a first element of the first networked software application part. The steps of accessing, forming and providing are performed using the first computer resource comprising the repository. The first and the second networked software application parts remain on the first computer resource, and separate from the client computer, during the forming of the second networked software application part.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08595696&OS=08595696&RS=08595696
owner: International Business Machines Corporation
number: 08595696
owner_city: Armonk
owner_country: US
publication_date: 20080930
---
The present application is related to the U.S. patent application identified as Attorney Docket No. ARC920080050US1 entitled Declarative Representation of Networked Applications filed concurrently herewith the disclosure of which is incorporated by reference herein.

The present invention relates generally to the creation of networked or Web applications and more particularly the invention relates to reusing and combining existing networked and Web applications to efficiently forming new networked and Web applications.

The Web is now programmable. The availability of Web data in the form of structured extensible markup language XML feeds e.g. really simple syndication RSS 2.0 resource description framework site summary RSS 1.0 and RSS 0.90 rich site summary RSS 0.91 and atom syndication format Atom as well as the externalization of Web application interactions in the form of application programming interface APIs has facilitated and accelerated programmable aspects of the Web. Most new Web sites and applications either expose data feeds or expose more advanced APIs such as representational state transfer REST services or atom publishing protocol APP .

There are two paradigm shifts occurring on the Web that are changing the way software is developed. The first is the increasing availability of Web APIs or Web services in the form of REST APP and simple object access protocol SOAP services as well as RSS and Atom data services. The proliferation of Web APIs has resulted in various composed services with user interfaces UIs or mashups which provide solutions to problems sometimes specific or relatively narrow problems. The second paradigm shift is a movement to Web applications using dynamic programming languages and frameworks e.g. JavaScript with asynchronous JavaScript and XML AJAX Ruby with Ruby on Rails RoR and Smalltalk with Seaside.

Principles of the invention provide for example an environment for mashup creation through the reuse and combination of existing networking or Web applications and a repository of networking or Web applications that may be reused combined and deployed on a computing cloud resource. New applications created by mashup of existing applications may be deposited in the repository for further reuse and mashup creation. Principles of the invention further provide a domain specific language DSL providing mashups with a mostly declarative common structure and design and facilitating sharing and reuse of mashup and mashup parts.

For example in accordance with one aspect of the invention a method is provided for forming a networked software application on a first computer resource coupled by a network to a client computer of a user. The method comprises the steps of accessing within a repository that is part of the first computer resource a first networked software application part forming within the first computer resource a second networked software application part and providing the second networked software application part to the repository. The second networked software application part comprises a first element of the first networked software application part. The steps of accessing forming and providing are performed using the first computer resource comprising the repository. The first and the second networked software application parts remain on the first computer resource and separate from the client computer during the forming of the second networked software application part.

Aspects of the invention include for example facilitating Web 2.0 mashups enabling a project to be deployed as a complete RoR Web application with all necessary service proxies models and initial views for each mashup providing an efficient and principled approach to designing mashups and for sharing mashups and mashup parts. Aspects also include for example facilitating mashup management to a computing cloud user servers or downloaded within one or more files to a computer resource for future deployments.

These and other features objects and aspects of the present invention will become apparent from the following detailed description of illustrative embodiments thereof which is to be read in connection with the accompanying drawings.

An application programming interface API is a set of declarations of the functions or procedures that an operating system library service or other entity provides to support requests made by computer programs and to support data exchange between API users and the API itself.

Asynchronous JavaScript and XML AJAX is a group of inter related Web development techniques used for creating interactive Web applications. A primary characteristic is the increased responsiveness of Web pages achieved by exchanging small amounts of data with the server behind the scenes so that entire Web pages do not have to be reloaded each time there is a need to fetch data from the server. For example AJAX is intended to increase Web page s interactivity speed functionality and usability.

Atom Publishing Protocol APP AtomPub is an HTTP based protocol for creating and updating Web resources. The Atom Publishing Protocol exchanges data elements such that a list of elements is maintained on the server. Elements can be retrieved added modified and deleted from the list.

Cloud or compute cloud as used herein is a computing resource. Cloud refers for example to computing resources that are accessed by consumers and which are typically owned and operated by a third party provider on a consolidated basis in one or more data center locations. Consumers of cloud computing services use computing capacity on demand and are typically not concerned with the underlying technologies used to achieve increases in server capability. Services delivered from the cloud in addition to Web applications include for example storage raw computing and access to any number of specialized services. Examples of clouds include Amazon Elastic Compute Cloud Amazon EC2 Google File System GFS Google App Engine and other computing resources accessible through networked software applications for example Web applications. Consumers of cloud computing may or may not have to pay for use of the cloud computer resources.

Domain specific language DSL is a language built on top of a hosting language. The DSL provides common syntax and semantics to represent concepts and behaviors in a particular domain. The term DSL indicates a programming language or specification language dedicated to a particular problem domain a particular problem representation technique and or a particular solution technique. The term DSL is sometimes used in conjunction with domain specific modeling. Domain specific languages are considered for example fourth generation programming languages.

The Extensible Markup Language XML is a general purpose specification for creating custom markup languages. It is classified as an extensible language because it allows its users to define their own elements. The primary purpose of XML is to facilitate the sharing of structured data across different information systems particularly via the Internet and XML is used both to encode documents and to serialize data.

Gem is a packaging file format and mechanism for Ruby and RoR applications. Gem files can contain all the necessary files and resources for a RoR Web application as well as dependencies listed in a manifest file. When a Gem file is installed the gem tool can fetch the dependencies over the Web thereby making a gem packaging of a RoR application self contained.

JavaScript is a scripting language. JavaScript is used for example for client side Web development. Although best known for use in Web sites as client side JavaScript JavaScript is also used to enable scripting access to objects embedded in other applications.

JavaScript Object Notation JSON is a data interchange format. JSON is intended to be easy for people to read and write and for machines to parse and generate. JSON is based on a subset of the JavaScript Programming Language standard ECMA 262 . JSON is a text format that is substantially language independent but uses conventions that are familiar to programmers of the C family of languages. JSON is built on two structures a collection of name value pairs and an ordered list of values. In various languages the collection of name value pairs is realized as an object record struct dictionary hash table keyed list or associative array. In most languages the ordered list of values is realized as an array vector list or sequence.

A mashup is a composition of multiple services REST APP SOAP RSS or Atom that contains information on how to represent the service API and data and how to combine the services and present a user interface. A mashup comprises a collection of mediates and wirings. A mashup can be further explained as a Web application that combines data from more than one source into a single integrated new Web application. An example of a mashup is the use of cartographic data from a map Web site to add location information to real estate data obtained from a real estate Web site thereby creating a new and distinct Web service that was not originally provided by either Web source.

Mediate invokes a mediation declaration with instances of the data elements to mediate and to transform into one or more data elements.

Metaprogramming is the writing of computer programs that writes or manipulates other programs or themselves as their data. Metaprogramming often exposes the internals of the run time engine to the programming code through APIs. The language in which the metaprogram is written is called the metalanguage. The language of the programs that are manipulated is called the object language. The ability of a programming language to be its own metalanguage is called reflection or reflexivity.

MySQL is a relational database management system which is widely used. The program typically runs as a server providing multi user access to a number of databases.

Representational State Transfer REST is a style of software architecture for distributed hypermedia systems for example the Web. REST refers to for example a collection of network architecture principles which outline how resources are defined and addressed. REST is often used to describe an interface which transmits domain specific data over hypertext transfer protocol HTTP without an additional messaging layer such as SOAP.

RSS is a family of Web feed formats used to publish frequently updated content such as blog entries news headlines and podcasts in a standardized format. An RSS document which is called for example a feed or Web feed contains either a summary of content from an associated Web site or the full text. RSS makes it possible for people to keep up with Web sites in an automated manner which can be piped into special programs or filtered displays. The initials RSS are used to refer to the following formats really Simple Syndication RSS 2.0 Resource Description Framework RDF Site Summary RSS 1.0 and RSS 0.90 and Rich Site Summary RSS 0.91 .

Ruby is a dynamic reflective general purpose object oriented programming language. Ruby supports multiple programming paradigms including functional object oriented imperative and reflection. Ruby also has a dynamic type system and automatic memory management. In an official implementation written in C Ruby is a single pass interpreted language.

Ruby JavaScript RJS is JavaScript generated from RJS templates written in Ruby. RJS templates are a type of template added to Rails 1.1. RJS templates generate JavaScript code that is executed when it is returned to the browser. RJS JavaScript generation allows for example multiple page updates in place without a page reload using Ajax.

Ruby on Rails is Web application framework designed to make Web development faster simpler and more efficient. Often shortened to Rails or RoR Ruby on Rails is written in the Ruby programming language.

Semantics with respect to programming reflects the meaning of programs or functions. Semantics for example permits programs to be separated into a syntactical part and a semantic part.

Simple Object Access Protocol SOAP is a protocol for exchanging extensible markup language XML based messages over computer networks using for example HTTP and hypertext transfer protocol over secure socket layer HTTPS . SOAP forms the foundation layer of the Web services protocol stack providing a basic messaging framework upon which abstract layers can be built.

Squeak is a programming language that is an implementation of Smalltalk. Squeak is derived directly from Smalltalk 80. Squeak is object oriented class based and reflective. Squeak is available for many platforms. Squeak programs produced on one platform typically run bit identical on all other platforms. The Squeak system includes for example code for generating a new version of the virtual machine VM on which it runs. Squeak also typically includes a VM simulator written in Squeak. For this reason it is typically easily ported.

A social network service is a service focused on building an online community of people who share interests or activities or who are interested in exploring the interests and activities of others. Many social network services are Web based and provide a variety of ways for users to interact such as email and instant messaging services. Examples of social networking services are Facebook MySpace Linkedin and Plaxo . A social network service is offered and accessed through for example a social network service platform.

A Protocol mediation step constitutes one atomic step in protocol mediation. A protocol mediation step can be invoked multiple times as part of a protocol wiring. A protocol mediation step is invoked for example by the name of the protocol mediation step as a method call.

Syntax of a programming language is but is not limited to the set of rules that a sequence of characters in a source code file must follow to be considered as a syntactically conforming program in that language.

Unified Universal Modeling Language UML is a standardized visual specification language for object modeling. UML is a general purpose modeling language that includes a graphical notation used to create an abstract model of a system referred to as a UML model.

The term Web as used herein has the same meaning as and is also known as the World Wide Web and the Internet. Web applications are networked software applications.

Web 2.0 is a term used to describe the trend in the use of Web technology and Web design that aims to enhance creativity information sharing and most notably collaboration among users. The concepts of the Web have led to the development and evolution of Web based communities and hosted services such as for example social networking sites and blogs. Web 2.0 is also known as the social Web.

Wiring or service protocol mediations include two levels of granularities for connecting the services that are part of a mashup. The first level is protocol. Protocol is a top level structure of a mashup. Protocol represents one or multiple operation wirings and protocol mediation steps invocations. The second level is operation. Operation is the wiring of one or multiple service operations. Operation wiring includes the ability to invoke service operations in a synchronous and or an asynchronous fashion by automatically setting up callbacks.

Distributed computing and distributed programming has shifted from private networks to the Internet Web using heterogeneous Web application programming interfaces API . The shift in distributed computing to the Web enables the creation of situational applications of composed services exposing user interfaces i.e. mashups.

One of the consequences and manifestations of the programmable Web is the creation of new Web applications known as mashups which combines views data and logic from existing Web sites or applications to create a new application. Using the various available Web APIs mashups exist that solve many types of problems some are esoteric mashups such as mashups knowing locations and availability of hard to find gaming consoles some are narrowly focused mashup such as mashups creating a Sudoku game from online photo service photos and some are more generally useful mashups such as mashups providing weather information and online mapping services.

While the many available mashups indicate a flourishing and innovative Web the many available mashups also raise various new problems challenges and opportunities. One of the key issues related to mashups is that mashups are typically point solutions lacking principled approaches to architecture and design. Many similar mashups use the same APIs but share nothing else in common. Additionally to accelerate innovation in the mashups space just as the social features of Web 2.0 have fostered collaborative content creation mashups could be built collaboratively or at least parts of mashups could be shared fostering additional mashup constructions.

Two cases illustrate the shift to a programmable Web. The first case is in the realm of Web 2.0 the social Web where end users are collaborating to create content and value. The second case is within the emerging move of Web 2.0 concepts into enterprise space or what is called Enterprise 2.0. In both cases the services involved in the mashups and the various components needed to create the mashup are described at a conceptual level.

In the first case the Web 2.0 case users contribute comment on tag rank and aggregate content which is often exposed in the form of RSS or Atom feeds. Additionally many current Web applications are making their business functions available as REST and SOAP services. Consider mashups between the following three Web 2.0 style services 

2. A photo sharing Web site comprising an application with a REST API to access photos contributed by users of the photo sharing Web site as well as finding the tags that its community of users added for each photo.

3. An event database Web site with a collection of event information e.g. theater shows sporting events and so on and a REST API to search find add and manage events. Additionally each event can be tagged by the users.

A variety of mashups are possible. Consider the simple one that gives an interface to the end user to find events based on location and keywords input e.g. Silicon Valley location and book signings keywords. Using the events data returned from the Web site as well as the tags and title information for each event the end user can find news items from the Atom feed of the news Web site being tagged with same keywords as well as the top photos from the photo sharing Web site also tagged with the same keywords. In other words the mashup gives a simple integrated and automated view for the information of three different Web 2.0 services. Since the data and APIs are live the information displayed is constantly updated.

In the second case the enterprise case mashups are also possible. For example mashups are an efficient way to address idiosyncratic needs of employees and to help them innovate by creating Web based solutions to problems that might not warrant the expenditure of time and investment from the information technology division. Mashups typically provide solutions to repetitive tasks as well as solutions to unforeseen tasks and needs.

Consider a first enterprise case. Enterprise information technology is often slow to integrate and to migrate to newer technologies. Mashups with their easy and purposeful Web interfaces give an excellent venue to create applications that can support day to day activities for some specific recurring tasks. For instance a common task at a large and multi location Research lab is to update calendars with internal talks at various locations around the world as well as from public external talks at local universities and organizations. A simple mashup could aggregate Atom feeds from various talk sources and give a common location to easily update a calendar of a researcher. This mashup could be integrated with other services to allow ranking of talks and presenters which would give some community feedback on attended talks.

For a second enterprise case consider a company with a complex set of legacy Web services for order management and customer relationship management. While the company has been able to integrate with partners that have adopted its services and have participated in its partner program the company has not attained other partners for instance a new partner that submits purchase orders using a new or different order purchasing system. To address the new order purchasing system of this new partner the company could create a mashup that would mediate between the order purchasing system of the new partner and the legacy Web services. The mashup would transform messages of the order purchasing system of the new partner into a format that the legacy Web services could comprehend would resolve the necessary choreographic conflicts between the order purchasing system of the new partner and the legacy Web services and would provide the necessary order purchasing system of the new partner confirmation messages. A different mashup could be created for each new partner who comes with a different new order purchase system having different messaging vocabularies or proprietary formats.

The Web as a programmable communications media lacks unified models to facilitate mashup creation reuse and deployment. Mashup creation reuse and deployment can be facilitated for example by an online service platform for developing and sharing situational Web 2.0 applications and mashups.

An embodiment of the invention is an online mashup platform providing a principled approach to designing mashups and for sharing mashup parts as well as facilitating mashup management. For example the platform motivates mashups as solutions to Web integration and service composition problems.

Another embodiment of the invention is a DSL and platform for services mashups. The DSL of the invention allows for a common interface representation among service types gives a uniform model for service data and interactions of service operations and provides a common high level language for mashups. The DSL streamlines and structures the development of applications comprising Web APIs and exposes the Web APIs. Mashup creation and reuse is enhanced by sharing and reuse of at least parts of the DSL of associated applications. The DSL and platform s implementation of the invention is demonstrated in an embodiment using Ruby and the RoR framework.

Embodiments of the invention extend the RoR architecture with a new DSL supporting libraries as well as associated platform models services and end user applications. Using tools of the invention application developers can create edit and deploy mashup projects containing the necessary information for describing the services to be combined or mashed as well as the mashup information. Deployments can be done to user computing servers or on a compute cloud e.g. Amazon s EC2 . Application developers can also share these mashups for reuse and extensions. Aspects of the invention enable a project to be deployed as a complete RoR Web application with all necessary service proxies models and initial views for each mashup. An application developer typically uses tools of the invention to iterate over the mashups and to refine and customize the UI components enabling Web applications and mashups creation sharing deployment and management.

A mashup is a new Web application that for example aggregates multiple Web APIs or Web content to achieve a new purpose. Typically a mashup interfaces and interacts with users or people using the mashup. A mashup is used for repurposing existing Web resources for example content and APIs. A well structured mashup includes for example at least three aspects of a well designed Web application models views and controllers. The well structured mashup may have additional functionalities and variations. Because the different Web APIs used in a mashup typically comes from heterogeneous providers there is usually a need to mediate between the different APIs in order to form the mashup. Therefore for embodiments of the invention forming a mashup from different Web APIs typically involves the following activities 

1. Data mediation Data mediation involves converting transforming and combining the data elements from one API to meet the needs of the operations of another API. An example is determining the correct address data fields to invoke a mapping service and API.

2. Process or protocol mediation Process or protocol mediation is the choreographing between the different APIs in order to create a new process or to present the necessary interactions to an end user.

3. User interface customization User interface customization provide an interface that is used to elicit user information as well as to display intermittent process information to the user. This interface can be relatively simple Web forms and static pages with dynamically generated content or the interfaces can be richer AJAX interfaces that refresh content or dynamically generate new pages based on current user interactions.

An embodiment of the invention provides a language and a set of Web based tools to facilitate the construction of well structured mashups.

Other embodiments of the invention are implemented using the RoR framework for example a collection of RoR Web applications and Web APIs. While the DSL has a well defined grammar and could be implemented using a language other than the RoR framework or implemented with its own parser compiler and code generation engine the flexible syntax and dynamic features of Ruby and RoR are used to completely implement the DSL in Ruby and RoR.

The platform currently comprises three RoR applications. A core that implements the DSL engine is the centerpiece. The core contains facilities to take a complete mashup described in the DSL and generate necessary code for a complete mashup RoR Web application. The engine is exposed as Web APIs. The rest of the platform comprises of a creator application for creating the mashup and a community application for sharing the mashup.

Users i.e. application developers create projects which can contain multiple mashups. The mashups follow the structure of the DSL of the invention. Tools and methods of the invention provides for example basic facilities to browse the DSLs to create new DSL constructs via wizards and to search and reuse DSL parts from other projects of current users or other users. After creating and testing a mashup users can deploy mashups as packaged RoR Web applications that is as a gem which can be downloaded and installed on servers belonging to the users or on a remote server. A requirement is that the server needs to have the RoR framework installed as well as a relational database e.g. MySQL or DB2 an IBM relational database management system .

All other dependencies are either included in the application gem or are downloaded upon install from the Web.

An aspect of the invention is a mashup community. The mashup community has access to existing mashups and networked applications through for example a community application. The community application is for example a RoR Web application used to share already deployed mashups. An objective of the RoR Web application is to build a community of mashup developers or users and to create a catalog of mashups. Members of the community can discuss and rate the mashups. Mashups can be automatically added or deployed to an application deployment platform to become available to the community or mashups can be added manually by community members. shows a Web page view of a community application. The Web page view of the community application comprises a link block comprising links to various other Web pages associated with the community application for example home news frequently asked questions FAQs feedback administrator and logout pages as well as various mashup pages. The Web page view of the community application further comprises a mashup block comprising a first sub block and a second sub block . The first sub block comprises mashup numbers for mashups listed and thumbs up thumbs down voting link buttons . The voting link buttons allow users to vote on the quality or other attribute of the mashup. The second sub block comprises the mashup name contributor information mashup description and associated links for example tags associated with the mashup.

As previously stated a DSL is a language typically built on top of a hosting language. The DSL provides a common syntax and semantics to represent concepts and behaviors in a particular domain. Typically using or designing a DSL helps achieve one or more of the following goals abstraction terse code simple and natural syntax ease of programming and code generation

Abstraction is achieved by enabling programming at a level higher than what is available with the host programming language constructs or libraries. A DSL allows the domain concepts actions and behaviors to be represented directly in the new syntax.

Terse code is a result of programming in a higher level of abstraction. DSL programs are typically smaller than their equivalent in general purpose programming languages.

Ease of programming is usually achieved because a DSL enables the expression of constructs that map directly to a domain. DSL generally makes programming easier for applications in the domain than when using the underlying language directly.

Code generation is an aspect of how DSL typically functions. The DSL statements are translated at runtime into code that uses the underlying language and its libraries. This can be either using meta programming techniques or actual generation of program files.

The features of the DSL language map to the various top level constructs from the conceptual definition and the conceptual model for mashup presented above. A mashup is typically a composition of services REST APP SOAP RSS or Atom containing information on how to represent the service API and data how to combine the services and data and how to present a user interface. Because a mashup represents new data or functionality not originally intended by the service provider the invention explicitly represents in the DSL language some of the activities that a mashup designer needs to do. The primary constructs of the DSL language of the invention along with examples are presented in the tables A and B shown in and . The tables A and B comprise the names of the primary constructs listed in construct column the description of the primary construct listed in the description column and examples of use of the primary constructs in example column .

UML or UML 2 class diagrams static structure models can be used to represent the DSL language including the constructs of the DSL language. In such a UML or UML 2 model the UML boxes do not have to translate to classes in the underlying language although they could.

1. Defining the data and API of the service and enabling a uniform model and representation of various types of services.

2. Data mediation which represents data manipulations for example conversions transformations and combinations.

The mashup DSL directly represents in the syntax necessary to cover the three main components of the conceptual models for mashups 1 data and mediation 2 service APIs service API protocols and service API choreography and 3 a means to create customized UIs for the resulting mashups. Views are added by generating and tailoring RoR RHTML templates. In one embodiment the DSL language of the invention comprises 

The DSL of the invention enables mashup programming at a higher level of abstraction than frameworks supporting Web application programming. With the DSL of the invention the main activities that a mashup programmer needs to address as specified in conceptual model of the invention can be explicitly represented. Uniform design for mashups and integration into RoR is supported thus enabling adding rich Web views including AJAX views.

Aspects of the invention have been evaluated by analyzing the code generated from the invention for three simple mashups of different Web API types. The three types of mashups are a REST AtomPub mashup a RSS Atom mashup and a REST REST mashup. Using the invention programmers are able to not only create a common reusable representation for mashups but also to shorten development time.

An embodiment of the invention is a platform providing Web based tools. A mashup creator tool is an example. The mashup creator tool contains various wizards to facilitate the generation of the various DSL constructs. Using the mashup creator tool the various DSL constructs including api data and service can be generated for an Atom feed by simply loading the feed and selecting Atom entry data fields that are needed in the data declaration.

Mashups of the invention are more than data feeds combination and provide solutions that include process choreography as well as user interfaces.

Aspects of the invention expose the language for a mashup and have the ability to export the resulting mashup in a packaged form that can be deployed to other servers or deployed to cloud computing resources and services. Aspects of the invention address the service mashup construction but not necessarily the entire model view controller MVC stack. RoR is used to enable the MVC stack. Aspects of the invention use metaprogramming to compile language constructs into RoR code which makes this aspect dynamic. Support of views is achieved using RoR views which is done using HTML and JavaScript templating languages e.g. RHTML and RJS.

Although RoR is the Web application framework used in many embodiments of the invention embodiments of the invention can be supported by alternate Web application frameworks for example the invention can be supported by the Smalltalk Seaside 7 platform language and framework and by the Seaside related Squeak programming language. Like RoR Seaside provides a complete framework for creating Web applications. The framework also contains tooling to allow users to browse edit and modify the code directly within a Web browser for resulting Web applications.

Additional features of the invention are RoR generators and plug ins to facilitate command line generation of the DSL recipe and its different components. These features facilitate RoR programmers to adopt the DSL of the invention into applications and also to contribute back to the RoR community.

Management of mashups is also provided. A few of the reasons for creating mashups are to provide innovative solutions to business problems and to enable solutions to be present in various places on the Web. Thus it is useful to facilitate mashups to grow into full blown Web applications. Aspects of the invention that provide tooling to facilitate scalable deployments of resulting mashups as well as automatic caching of the data components facilitate making solutions of the invention ready for wide scale availability for example allowing mashups to be automatically deployed to compute clouds such as Amazon s EC2 and Google App Engine . Furthermore using cloud computing intermediaries such as MorphExchange and Hekoku can automate the cloud deployment process and facilitate mashups to automatically scale as more users access them.

The invention allows mashups to be deployed in social utility platforms or social networking service platforms such as Facebook and OpenSocial . These platforms allow Web applications to integrate and blend into social networking sites. Allowing mashups of the invention to be deployed as social applications gives a rich platform and user community for resulting mashups and allow their usages to become widespread. Additionally such social platforms provide various facilities that mashup designers could be allowed through aspects of the invention to include in mashups. An example is member information provided by the Facebook platform which includes social graphs of the members where the social graphs represent for example social interrelationships of the members. Another example is the facility in the Facebook platform that allows easy means to invite friends of the user to partake in social activities and allows easy notification of these activities and actions.

A system illustrated in and a method shown in are embodiments of the invention enabling for example streamlined and efficient mashup creation reuse and deployment.

The system further comprises an application deployment platform . The application deployment platform is an application computing resource that runs networked applications. An example of an application deployment platform is a deployment platform associated with a social network service such as Facebook MySpace Linkedin and Plaxo .

The system further comprises clients of users for example a first application developer client a second application developer client and an application user client . A client is a computing resource associated with a user for example the computing resource that a user utilizes to interface with a network such as the Web.

Lastly the system further comprises a network for interconnecting for example clients and the cloud computer resource and the application deployment platform .

The first step is to form a first networked application part. Examples of a first networked application parts are a first networked application a portion of the first networked application and a first application programming interface. An example of the first networked application is a first Web application such as Google maps. The first networked application part may be developed for example by a first application developer associated with the first application developer client .

The second step is to provide the first networked application part to the repository which stores the first networked application part. The repository also provides typically through the cloud server the first networked application part to other application developers for example the second application developer associated with the second application developer client . The repository may also provide typically through the cloud server the first networked application part to application users for example the application user associated with the user client . Alternately application users may obtain the networked application parts from the application deployment platform .

The third step is to access the first networked application part. The first networked application part is accessed or obtained from the repository . In an embodiment of the invention the second application developer through the second application developer client accesses the first networked application part. In this embodiment during the formation of the second networked application part the second application developer does not download the first or the second networked application part to the second application developer client . The second application developer accesses the first networked application part modifies the first networked application part forms the second networked application part and provides to the repository the second networked application part using the cloud computer resource and with the first and second networked application parts residing within the cloud computer resource . The second application developer client is an interface between the second application developer and the cloud computer resource . In other embodiments the second application developer does download the first networked application part.

Some aspects of forming the second application part on the cloud computer resource are for example eliminating download time for downloading the first application part from the cloud computer resource to the second application developer client eliminating upload time for uploading the second networked application part from the second application developer client to the cloud computer resource providing the domain specific language and access to the domain specific language to the second application developer and client in a controlled secure and regulated manor maintaining security and control of software and information that may be for example proprietary for example the domain specific language certain APIs and certain data and enabling business transactions for example fees for creating mashups on the cloud computer resource . Furthermore mashup creation through a community resource for a community of mashup developers is enabled and fostered.

The fourth step is to examine the log and the fifth step is to determine an attribute of a networked application part for example the first networked application part. The fourth step and the fifth step are optional steps. An application developer may examine entries within the log for example to determine or ascertain attributes of networked application parts to sort networked application parts to search networked application parts and to help find networked application parts. For example the second application developer may examine the log to find an appropriate networked application part to modify to form the second networked application part. The attributes may be for example an activity entry a tag or a comment.

Using the log developers and users can for example replay different activities of their peers to see for example how a networked application part has evolved or when a problem was fixed with a networked application part. Using the log developers users or teams of developers or users can for example perform peer review of networked application parts. A developer accessing or replaying a log of his her own is a means to achieve self review of the networked application parts that the developer has created. Self review and peer review by submitting entries into and or accessing the log improve the quality of networked application parts or Web application development activities.

The sixth step is to form a second networked application part. Examples of a second networked application parts are a second networked application a portion of the second networked application and a second application programming interface. An example of the second networked application is a second Web application such as a Web based real estate listing display that includes real estate listings and Google maps with directions to real estate listings. The second networked application part may be developed by the second application developer associated with the second application developer client . The second networked application part comprises a first aspect of the first networked application part. The second networked application part may be formed for example by editing the first networked application part. The first aspect comprises for example views data logic or services of the first networked application part. As previously mentioned the second application developer does not need to download the first networked application part to the second application developer client but is able to form the second networked application part as the first networked application part is residing within the cloud computer resource . The second networked application part may be formed in part by programming in a domain specific language. The domain addressed by the domain specific language comprises forming a networked services mashup.

The seventh step is to provide the second networked application part to the repository which stores the second networked application part. The repository also provides typically through the cloud server networked application parts for example the second networked application part to other application developers for example a third application developer who may form a third networked application part based upon or using aspects of the second networked application part.

The eighth and last step is to form an entry into the log . The eighth step is an optional step. For example the second application developer may form an entry into the log to describe attributes of the first or second networked application part. As another example a user may form an entry into the log descriptive of the first or second networked application part or any other networked application part. For an additional example the log may be automatically updated to indicate the number of accesses to a networked application part. The cloud server may be adapted to automatically update the log . The log entry may comprise for example an activity entry a tag or a comment.

The method for forming a networked application is most useful when employed many times to build up a library of networked applications in repository . In an embodiment of the invention method is used in a first cycle to form a second networked application part using a first networked application part. In this embodiment method is reused in a second cycle to form a third networked application part form the second networked application part wherein in the second cycle the first networked application part is the second networked application part of the first cycle. In other embodiments method is repeated in additional cycles to form more derivative networked application parts. Furthermore there may be a plurality of distinct first networked application parts leading to families of derivative networked application parts.

The computer system may generally include a processor unit memory input output I O devices and network interface coupled via a computer bus or alternate connection arrangement.

It is to be appreciated that the term processor unit as used herein is intended to include any processing device such as for example one that includes a central processing unit CPU and or other processing circuitry. It is also to be understood that the term processor unit may refer to more than one processing device and that various elements associated with a processing device may be shared by other processing devices.

The term memory as used herein is intended to include memory associated with a processor or CPU such as for example random access memory RAM read only memory ROM a fixed memory device e.g. hard disk drive a removable memory device e.g. diskette compact disk digital video disk or flash memory module flash memory non volatile memory etc. The memory may be considered a computer readable storage medium.

In addition the phrase input output devices or I O devices as used herein is intended to include for example one or more input devices e.g. keyboard mouse camera etc. for entering data to the processing unit and or one or more output devices e.g. display etc. for presenting results associated with the processing unit.

Still further the phrase network interface as used herein is intended to include for example one or more transceivers to permit the computer system to communicate with another computer system via an appropriate communications protocol.

Accordingly application components including instructions or code for performing the methodologies described herein may be stored in one or more of the associated memory devices e.g. ROM fixed or removable memory and when ready to be utilized loaded in part or in whole e.g. into RAM and executed by a CPU.

In any case it is to be appreciated that the techniques of the invention described herein and shown in the appended figures may be implemented in various forms of hardware application or combinations thereof e.g. one or more operatively programmed general purpose digital computers with associated memory implementation specific integrated circuit s functional circuitry etc. Given the techniques of the invention provided herein one of ordinary skill in the art will be able to contemplate other implementations of the techniques of the invention.

Although illustrative embodiments of the invention have been described herein with reference to the accompanying drawings it is to be understood that the invention is not limited to those precise embodiments and that various other changes and modifications may be made therein by one skilled in the art without departing from the scope of the appended claims.

