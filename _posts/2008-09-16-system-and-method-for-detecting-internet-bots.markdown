---

title: System and method for detecting internet bots
abstract: Apparatuses, methods, and systems directed to detect Internet bots in communication networks. Some embodiments of the present invention allow an agent of a server to periodically record interaction events on a client system. The recorded interaction events are sent to a server and validated by a statistical test. Some embodiments of the present invention may be used to detect bots using server logs. In other embodiments, an agent of a server is able to detect and validate interaction events on a client system and the server periodically polls the agent to determine whether bots are detected on the client system.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08433785&OS=08433785&RS=08433785
owner: Yahoo! Inc.
number: 08433785
owner_city: Sunnyvale
owner_country: US
publication_date: 20080916
---
Internet bots are software applications that perform automated tasks over the Internet. They are also known as web robots or bots and have been used in a variety of Internet applications. Web crawlers use bots to automatically fetch and index web pages from various web sites so that search engines can perform queries on the indexed web pages. Bots have been used in online auction sites to discover bargains. In online gaming sites bots have been used where a response speed faster than that of a human is desirable. In instant messenger applications bots have been used to answer routine questions such as questions related to weather conditions sporting event scores and currency conversions.

Bots however may be used for malicious purposes. Bots have been used in automated operations to attack networked computers. For example in a denial of service attack a large number of bots which may be geographically distributed may saturate the target server with external communication requests so that the target server cannot respond to legitimate requests. Bots may also be used to influence ranking of search engine results. Search engines may use click data on search results to improve search results ranking. Bots may be used to repeatedly access certain search results from a large number of web sites to influence the ranking of the accessed search results.

Malicious bots may also be created in order to repeatedly access advertising supported links to intentionally create the false appearance of many web site visits by human viewers. Advertising supported links are generally short segments of text that are linked to an advertiser s web site. When a human viewer clicks on an advertising supported link the viewer clicks through the text link to visit the advertiser s web site. Many advertising supported web sites have offered to sell advertising on a pay per click basis wherein the advertising supported web site is only paid when a viewer clicks through on an advertising supported link. When malicious bots are used to repeatedly click on advertising supported links on a web site web site advertisers are erroneously charged. Such attempts to create fictitious clicks on advertising supported links are known as click fraud .

In these and other contexts a key factor to combat malicious bots is the ability to detect whether a communication request to a web site comes from an Internet bot or a human viewer. However since a large number of requests from bots may not be malicious and the volume of communication requests to a web site may be extremely high it is a challenging task to find a scalable method to detect malicious bots.

The present invention provides apparatuses methods and systems directed to detecting Internet bots in network communication. Some embodiments of the present invention allow an agent of a server to periodically record interaction events generated by interactions with an input device attached to a client system the agent sends the recorded interaction events to the server to validate that the interaction events are a result of human interaction with the input device attached to the client system. Some embodiments of the present invention may be used to detect bots using server logs. In other embodiments an agent of a server is able to detect and validate interaction events on a client system and the server periodically polls the agent to determine whether bots are detected on the client system.

In one embodiment of the present invention the apparatuses and methods are directed to validating interaction events recorded on a client system by an agent wherein the agent is operative within an executable environment of the client system. The agent collects data associated with the detected interaction events and sends the collected data to the server. In some embodiments the agent sends an HTTP request to the server wherein the collected data is encoded in the parameters of the HTTP request.

In other embodiments of the present invention the apparatuses methods and systems involve processing data which may be embodied in a server log to identify and validate interaction events. In some embodiments one or more IP addresses and user sessions are identified from the server log and interaction events are identified for each IP address and each user session.

In some other embodiments of the present invention a server sends an agent to a client system to detect interaction events on the client system. The agent is able to detect and validate interaction events on the client system. The server periodically polls the agent to determine whether bots are detected on the client system.

The following detailed description together with the accompanying drawings will provide a better understanding of the nature and advantages of various embodiments of the present invention.

The following example embodiments and their aspects are described and illustrated in conjunction with apparatuses methods and systems which are meant to be illustrative examples not limiting in scope.

As illustrates particular embodiments may operate in a network environment including a plurality of hosts and other distributed systems. For example client system could include a desktop personal computer workstation laptop personal digital assistant PDA cell phone or any WAP Wireless Application Protocol enabled device or any other computing device capable of interfacing directly or indirectly to the Internet. Client system typically runs a browsing program such as Microsoft s Internet Explorer browser Netscape Navigator browser Mozilla Firefox browser Opera browser or a WAP enabled browser in the case of a cell phone PDA or other wireless device or the like allowing a user of client system to process and view information and web pages available to it from content servers to over Internet .

Client system also typically includes one or more user interface devices that are usually manipulated or controlled by a human such as a keyboard a mouse touch screen pen or the like for interacting with a graphical user interface GUI provided by the browser on a display e.g. monitor screen LCD display etc. in conjunction with pages forms and other information provided by servers to or other servers. Sometimes however a bot may simulate human interaction with the user interface devices to defeat bot detection techniques such as those described in U.S. patent application Ser. No 11 867 096. The present invention is suitable for use with the Internet which refers to a specific global network of networks. However it should be understood that other networks can be used instead of or in addition to the Internet such as an intranet an extranet a virtual private network VPN a non TCP IP based network any LAN or WAN or the like.

According to one embodiment client system and all of its components are configurable and made operative using an application including computer code run using a central processing unit such as an Intel x86 compatible microprocessor an AMD x86 compatible microprocessor or the like or multiple microprocessors. Computer code for configuring and operating client system to communicate process and display data and media content as described herein is preferably downloaded and or stored on a hard disk but the entire program code or portions thereof may also be stored in any other volatile or non volatile memory medium or device such as a ROM or RAM or provided on any media capable of storing program code such as a compact disk CD medium a digital video disk DVD medium a floppy disk and the like. Additionally the entire program code or portions thereof may be transmitted and downloaded from a software source e.g. from one of content servers to to client system over the Internet or transmitted over any other network connection e.g. extranet VPN LAN or other conventional networks using any communication medium and protocol e.g. TCP IP HTTP HTTPS Ethernet or other conventional media and protocol .

It should be appreciated that computer code for implementing embodiments of the present invention can be C C HTML XML Java etc. or any suitable scripting language e.g. VBScript JavaScript or any other suitable programming language that can be executed on client system or compiled to execute on client system . In some embodiments needed code is embedded in a web page and sent to client system and executed or code already present at client system is executed.

The elements of hardware system are described in greater detail below. In particular network interface provides communication between hardware system and any of a wide range of networks such as an Ethernet e.g. IEEE 802.3 network etc. Mass storage provides permanent storage for the data and programming instructions to perform the above described functions whereas system memory e.g. DRAM provides temporary storage for the data and programming instructions when executed by processor . I O ports are one or more serial and or parallel communication ports that provide communication between additional peripheral devices which may be coupled to hardware system .

Hardware system may include a variety of system architectures and various components of hardware system may be rearranged. For example cache may be on chip with processor . Alternatively cache and processor may be packed together as a processor module with processor being referred to as the processor core. Furthermore certain embodiments of the present invention may not require nor include all of the above components. For example the peripheral devices shown coupled to standard I O bus may couple to high performance I O bus . In addition in some embodiments only a single bus may exist with the components of hardware system being coupled to the single bus. Furthermore hardware system may include additional components such as additional processors storage devices I O devices or memories.

In one embodiment the detection processes described herein are implemented as a series of software routines run by hardware system . These software routines comprise a plurality or series of instructions to be executed by a processor in a hardware system such as processor . Initially the series of instructions may be stored on a storage device such as mass storage and or downloaded from a remote host. However the series of instructions can be stored on any suitable storage medium such as a diskette CD ROM ROM EEPROM etc. Furthermore the series of instructions need not be stored locally and could be received from a remote storage device such as a server on a network via network communication interface . The instructions are copied from the storage device such as mass storage into memory and then accessed and executed by processor .

An operating system manages and controls the operation of hardware system including the input and output of data to and from software applications not shown . The operating system provides an interface between the software applications being executed on the system and the hardware components of the system. According to one embodiment of the present invention the operating system is the LINUX operating system. However the present invention may be used with other suitable operating systems such as the Windows 95 98 NT XP Vista operating system available from Microsoft Corporation of Redmond Wash. the Apple Macintosh Operating System available from Apple Computer Inc. of Cupertino Calif. UNIX operating systems and the like.

One of the I O devices may be a computer mouse or other pointer device connected to an interface such as a serial port or a Universal Serial Bus USB port. When the computer mouse is moved it generally transmits data characterizing the movement to the interface which typically issues an interrupt. Some computer mice stream data packets that include information characterizing the state of the buttons and movement of the mouse in the x and y directions. A mouse driver handles the interrupt processes the data and updates internal values that show the mouse position on the display screen. In addition the operating system implemented on the computing system architecture typically supports facilities that allow application programs or objects to register as listeners to mouse related events such as mouse movements and clicks. When an event is generated the mouse event data is returned to event handlers registered as listeners.

The agent may be a program written in a variety of programming or scripting languages such as C C Java Visual Basic Perl PHP JavaScript or ActionScript of Macromedia Flash. The agent may be running as a background process on the client system. For example the agent may be running as a daemon on a UNIX or a Mac OS X system or as a service on a Windows system. In some embodiments the agent may be downloaded from the server and operate within the context of a user agent such as a browser client. For example the agent may comprise Javascript code embedded in a web page and executable within the context of the user agent that monitors interaction events with one or more input devices attached to the client system. In other embodiments the agent may be a Java Applet or program that operates in connection with a Java Virtual Machine which itself can be a plug in to a user agent such as a browser client.

The initialization step is typically triggered when one of the running applications on the client system gets focus. The focus indicates the component of the graphical user interface which is currently selected to receive input. Text entered at the keyboard or pasted from a clipboard is sent to the component which currently has the focus. Focus may be moved to an application through a mouse click or by pressing a keyboard combination such as the combination of the ALT and the TAB keys. Typically an embodiment of the present invention is initialized on at least one running application on the client system. For example there may be multiple Internet browser applications running on the client system. An embodiment of the present invention may be a JavaScript program embedded in a web page and executed when a browser application gets focus. An embodiment of the present invention may also be a Macromedia Flash component such as an ActionScript which may execute when a browser application gets focus.

Upon initialization the agent registers as a listener for mouse movement or other interaction events. After initialization the agent waits for a period of time in step before it checks for any interaction events in step . In some embodiments the waiting period in step is a fixed time interval such as 128 milliseconds or 256 milliseconds. In other embodiments the waiting period may be a randomly chosen time interval.

In step the agent checks for interaction events. In some embodiments interaction with an input device attached to a client system results in data being accumulated in a buffer which is then processed by the operating system. Application programming interfaces allow the agent to register as a subscriber or consumer of the interaction events passed to the browser or other user application. For example the agent may register as a subscriber to the packetized data stream transmitted by a mouse that characterizes its movements and button state. In other implementations the agent registers as a listener for interaction events using application programming interfaces provided by the operating system that provide interaction event data such as the screen coordinates of the mouse. The agent periodically wakes up and waits for subscribed events such as a mouse movement notification event passed to it. If the agent receives any subscribed events while it is in step checking for interaction events the agent records the event data such as the last mouse coordinates or the last key stroke. If there are no subscribed events passed to the agent while the agent is awake the agent goes to sleep and waits for another time period in step before waking up again to check for interaction events.

If the agent detects an interaction event in step the agent records one or more parameters of the interaction event in step . In some embodiments coordinates of mouse pointers on a display screen may be recorded. In other embodiments letters or symbols entered on a keyboard a touch screen a pen input device or a speech recognition device may be recorded. In some other embodiments types of motion such as a swipe or a shaking motion directions of motion and length or magnitude of motion may be recorded. In some embodiments the parameters of the interaction event may be recorded in a cache file controlled by the agent. In other embodiments the parameters may be recorded in an in memory buffer controlled by the agent.

In step the agent counts the number of recorded interaction events and checks whether the number reaches a threshold. In some embodiments three mouse movement events are collected before data is transmitted to a remote system. illustrates an example of three recorded mouse coordinates. Coordinate P T is the first mouse coordinate recorded at time T where Pis the coordinate on a display screen which typically consists of an x axis value and a y axis value. Similarly coordinate P T t is the second mouse coordinate recorded at time T t where t is a time interval and coordinate P T 2 t is the third mouse coordinate recorded at time T 2 t. In some embodiments the time interval t may be set as a fixed value such as 128 milliseconds or 256 milliseconds. In other embodiments t may be set as an arbitrary value by the agent. The three mouse coordinates may form a triangle as illustrated in . In some embodiments the height of the triangle X may be derived for multiple mouse coordinate sets and used as a signature to detect bots. When the interaction events are generated by bots the distribution of X may be different from the distribution when the interaction events are generated by human. In other embodiments other values may be derived and used as signatures to detect bots. For example the distribution of the area of the triangle formed by the three mouse coordinates in may be used as a signature to detect bots. In other embodiments various bot types may be profiled by using a variety of signature values. The various types of profiles may be used to detect the various types of bots.

If the number of recorded interaction events exceeds the threshold value in step the agent encodes and sends the recorded data to a bot detection server in step . In some embodiments the agent encodes the recorded data in one of the parameters of an HTTP request sent to the bot detection server. In some embodiments the bot detection server is a process running on a server system. In other embodiments the bot detection server may be a process running on the client system. In some embodiments the recorded data is encoded as a file name and embedded in an HTTP request sent to the bot detection server. The HTTP request may result in an error message logged in a server log on the bot detection server because the HTTP request essentially asks for a file that does not exist. In such an implementation the HTTP server of the server may log the 404 File Not Found error in association with the request and possibly an IP address and or a browser cookie along with the encoded data appended to the request. As one skilled in the art will appreciate in the above described embodiment if the agent does not detect any interaction events the logs of the server will not contain such error data.

In some other embodiments the recorded data received by the server may be validated and analyzed by the server. The validation and analysis may occur in real time i.e. may occur as soon as the data is received by the server or offline i.e. may occur when analyzing the server log. The server therefore may ultimately determine whether the events are indeed generated by a human interacting with an application running on the client system. In other embodiments however an agent may make a determination on the client system whether the interaction events are a result of human interaction with the client system. The agent may make such determinations either in real time or periodically. The server may periodically poll the agent and fetch the determinations made by the agent on the client system.

In some embodiments the server may adjust a communication policy with the client system. For example if the bot detection server determines that one or more bots are running on a client system the server may ignore clicks on the advertisements from the client system or discontinue serving advertisements to the client system.

In some embodiments after sending the recorded data to the server the agent terminates. In other embodiments the agent may go back to step and wait for another period of time before waking up to check for interaction events.

The threshold value may be determined by historical data i.e. by analyzing distributions of the height of the triangle when it is known that the mouse coordinates are generated by bots and by human. For example bot and human interaction models i.e. probability distribution function for X in may be a heuristic process of developing the profiles against which the agent gathered data is compared. There may be several profiles for different types of bots. A normal distribution may be assumed for the distribution of X and histograms of X may be obtained over a period of time. When X is from a known bot either through simulation or through an identification process such as a human editorial review a probability distribution function may be established for X. Multiple Xs may be analyzed to develop a score that may be used as a signature to detect bots. Other attributes of the triangle geometry may also be analyzed in combination to establish a signature. For example a weighted sum of attributes of the triangle may be used as a signature for bots.

In another embodiment the identifier for an agent may be encoded in one of the parameters of an HTTP request. Typically a server log entry for an HTTP request includes one or more bytes comprising encoded values of an IP address from which the request is sent a request end time a request duration a number of bytes sent an HTTP host an HTTP method a response status one or more cookies a user agent a referrer one or more advertisement IDs and one or more user defined values. The identifier of an agent may be encoded in the user defined values in the request and is logged in the server log. Data related to the interaction event may also be encoded in the user defined values in the request. The identifier may be an arbitrary value that serves as a unique identifier for the agent to address situations where multiple instances of the agent may be running on the same client host for example when multiple browser window are open .

After an identifier of an agent is selected in step the embodiment in step identifies the log entries in the server log which contain the selected agent identifier. For each log entry that contains the selected agent identifier the embodiment decodes the values encoded in the log entry in step . The decoded values may entail an IP address a user agent an HTTP cookie and data associated with the interaction events detected by the selected agent.

In step the embodiment applies a statistical test to the decoded data to determine whether the identified log entries are generated by bots running on the client system. An example process is illustrated in described above.

In step the embodiment determines whether one or more log entries in the server log was generated by requests resulting from human interaction on the client system. The embodiment may make such determinations by identifying user sessions in the server log or by identifying web page views.

In one embodiment one or more user sessions may be identified based on the identified IP addresses the user agents or the HTTP cookies. HTTP cookies are used by Web servers to differentiate users and to maintain user session data related to the same user during multiple HTTP requests. If one or more user sessions can be identified from the server log the embodiment may identify a first group of user sessions in which HTTP requests were received from the agent with the selected identifier and a second group of user sessions in which no such requests were received. Since the agent on the client system typically sends an HTTP request when interaction events are detected on the client system lack of HTTP requests in a user session typically indicates that the HTTP requests in the user session are generated by bots. Therefore the embodiment may determine that each log entry from any of the second group of user sessions in which no HTTP requests were received from the selected agent is generated by one or more bots. On the other hand the embodiment may apply a statistical test to the interaction event data encoded in each log entry from any of the first group of user sessions to determine whether the interaction events are a result of human interaction with the client system. If the embodiment determines that the interaction events are indeed generated by a human viewer the embodiment may validate the corresponding user sessions. Otherwise the embodiment may determine that bots may have been used in the corresponding user sessions.

In another embodiment a web page may be identified in the server log based on the HTTP cookies. The embodiment may identify whether there are any interaction events logged in the server log that are sufficiently close in time when the web page was accessed. For the identified interaction events the embodiment may apply a statistical test to validate whether the interaction events are generated by human interaction with the client system. As a result the embodiment may infer whether actions taken relative to the web page were generated by bots based on the existence of any validated interaction events in close proximity of the time when the web page was accessed.

The present invention has been explained with reference to specific embodiments. For example while embodiments of the present invention have been described with reference to specific hardware and software components those skilled in the art will appreciate that different combinations of hardware and or software components may also be used and that particular operations described as being implemented in hardware might also be implemented in software or vice versa. For example Asynchronous Javascript and XML Ajax can be used to transmit detected interaction data to the server. In yet other implementations the agent may be configured to embed the interaction data in browser cookies appended to HTTP requests transmitted by browsers to a remote server. Other embodiments will be evident to those of ordinary skill in the art. It is therefore not intended that the present invention be limited except as indicated by the appended claims.

