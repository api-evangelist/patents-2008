---

title: Information processing device, disc, information processing method, and program
abstract: An information processing device that uses contents recorded in a disc includes: an application execution unit that executes an application, which is a program for utilizing the contents recorded in the disc; and a BCA driver execution unit that executes a BCA driver, which is a program for instructing a drive device to execute a process of reading a media ID recorded in a BCA (Burst Cutting Area) area of the disc, wherein the BCA driver execution unit, in response to a first API (Application Programming Interface) call from the application execution unit, executes a process of providing the application execution unit with a pointer to a second API for executing a process of reading a media ID.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08270275&OS=08270275&RS=08270275
owner: Sony Corporation
number: 08270275
owner_city: Tokyo
owner_country: JP
publication_date: 20081114
---
The present invention contains subject matter related to Japanese Patent Application JP 2007 323510 filed in the Japanese Patent Office on Dec. 14 2007 the entire contents of which are incorporated herein by reference.

The present invention relates to an information processing device a disc an information processing method and a program. More specifically the invention relates to an information processing device a disc an information processing method and a program that control access to the contents stored in an information recording medium.

Discs such as a DVD Digital Versatile Disc and a Blu ray Disc registered trademark are used as contents recording media. For example movie contents and the like are recorded in discs for example ROM discs and provided for users. These disc recorded contents are mostly the contents whose copyright distribution right and the like are owned by the creators or distributors. These contents are subjected to access control for preventing for example unauthorized copy replication and the like.

One of standards for contents copyright protection is AACS Advanced Access Content System . AACS defines a copyright protection technology based on an advanced common key cryptography AES cryptography . In the definition of the AACS when a contents access process such as reproduction of contents from a disc or a contents copy recording process is executed it may be necessary to read identification information recorded in the disc for example PMSN Pre recorded Media Serial Number which is disc unique identification information media ID and execute a process such as authentication process or cryptography process in accordance with a sequence defined in the AACS. For a contents storage disc according to the AACS definition PMSN which is disc unique identification information is recorded in a BCA Burst Cutting Area of the disc.

The BCA area is different from a normal data recording area and data are recorded by mechanical cutting which is different from a normal data recording mode. Thus it is difficult to rewrite recording data in the BCA area. In the reproducing process as well a special reading process different from the normal data reproducing process may be necessary.

The disc includes the data recording area in which contents or the like are recorded and a BCA area burst cutting area in which a media ID for example PMSN Pre recorded Media Serial Number which is disc unique identification information is recorded.

For example the following data are recorded in the data recording area of the disc . The recorded data for example include contents such as a movie an application which is a program applied to execute contents access control such as a process of reproducing or copying the contents and a BCA driver which is a program for executing a process of reading a media ID from the BCA area . Note that the BCA driver executes an authentication process with a drive device that reads data from the disc to thereby verify the validity of the drive device and only when the validity of the drive device is verified instructs the drive device to read the media ID PMSN . The BCA driver contains a secret key that is utilized in the authentication process.

A media ID PMSN which is disc unique identification information is recorded in the BCA area of the disc . As described above the BCA area is different from the normal data recording area and data are recorded by mechanical cutting which is different from a normal data recording mode. Thus it is difficult to rewrite recording data in the BCA area. In the reproducing process as well a special reading process different from the normal data reproducing process may be necessary.

According to one definition of the AACS when the contents recorded in the disc recording area are copied to another media such as a hard disk or a portable device it may be necessary to acquire copy permission information from an external management server. To acquire the copy permission information it may be necessary to transmit the media ID to the management server.

However the process of reaching the media ID from the BCA area may be executed only by the BCA driver that complies with the AACS definition. The BCA driver executes mutual authentication with the drive device loaded with the disc in accordance with the AACS definition verifies the validity of both the drive device and the BCA driver reads the media ID and then provides the acquired media ID to the application.

An example of this process sequence will be described with reference to . shows the application and the BCA driver . An information processing device such as a PC or a reproducing device that reproduces a disc reads and executes the application and the BCA driver from the disc .

Note that the BCA driver is a program that is generated in accordance with the AACS definition and executes an authentication process according to the AACS definition and reading of a media ID from the BCA area. On the other hand the application is a program that may be created by a third party at will. Thus the application may possibly be a malicious program such as a program that is generated to fraudulently acquire media ID information.

The application calls an API Application Programming Interface from the BCA driver . The API includes functions for requesting the BCA driver to acquire a media ID. The API is public and is available to a third party.

The BCA driver in step S in response to the API call from the application initiates a series of processes for the process of providing a media ID. First in step S the BCA driver executes an authentication process with the drive device that reads data from the disc to check the validity of both the drive device and the BCA driver. The authentication process is executed in accordance with the AACS definition.

In step S when it is not authenticated and the validity of both is not verified an error notification is transmitted to the application and the process ends without reading a media ID.

On the other hand in step S when it is authenticated and the validity of both is verified in step S the drive device is instructed to read a media ID from the BCA area and the read media ID is provided to the application .

After that the application transmits the media ID acquired from the BCA driver to the management server and then receives contents copy permission information or other service information.

In the above series of processes there is a problem that the application is a program that may be created by a third party at will and it may possibly be a malicious program such as a program that is generated to fraudulently acquire media ID information. In the sequence shown in even when a malicious application is used it is easy to acquire a media ID from the BCA driver using the public API. Thus there is a possibility that a media ID may be fraudulently acquired or contents may be fraudulently used using the fraudulently acquired media ID.

There is a need for providing an information processing device a disc an information processing method and a program that prevent a media ID of a disc from being fraudulently acquired and that implement strict access control to contents.

According to a first embodiment of the invention an information processing device that uses contents recorded in a disc includes an application execution unit that executes an application which is a program for utilizing the contents recorded in the disc and a BCA driver execution unit that executes a BCA driver which is a program for instructing a drive device to execute a process of reading a media ID recorded in a BCA Burst Cutting Area area of the disc wherein the BCA driver execution unit in response to a first API Application Programming Interface call from the application execution unit executes a tampering check process on the BCA driver and when it is verified that there is no tampering in the BCA driver executes a process of providing the application execution unit with a pointer to a second API for executing a process of reading a media ID.

In the information processing device according to one embodiment of the invention the first API is a public API that is public to a third party and the second API is a private API that is not public to the third party.

In the information processing device according to one embodiment of the invention the BCA driver execution unit in response to a second API call from the application executes an authentication process with the drive device and when it is verified that the mutual validity of the BCA driver and the drive device instructs the drive device to read the media ID.

In the information processing device according to one embodiment of the invention the BCA driver execution unit in response to a second API call from the application executes a tampering check process on the BCA driver and when it is verified that there is no tampering in the BCA driver executes an authentication process with the drive device.

In the information processing device according to one embodiment of the invention the BCA driver execution unit executes a tampering check process on the BCA driver each time the BCA driver executes a step.

In the information processing device according to one embodiment of the invention the BCA driver execution unit executes a process of providing the application execution unit with data mixing a pointer to the second API and a dummy pointer.

In the information processing device according to one embodiment of the invention the application and the BCA driver are recorded in the disc and the application execution unit and the BCA driver execution unit respectively read and execute the application and the BCA driver recorded in the disc.

According to a second embodiment of the invention an information processing device that utilizes contents recorded in a disc includes an application execution unit that executes an application which is a program for utilizing the contents recorded in the disc and a BCA driver execution unit that executes a BCA driver which is a program for instructing a drive device to execute a process of reading a media ID recorded in a BCA Burst Cutting Area area of the disc wherein the BCA driver includes tampering check data wherein the BCA driver execution unit in response to a first API Application Programming Interface call from the application execution unit executes a tampering check process on the BCA driver by applying the tampering check data and when it is verified that there is no tampering in the BCA driver executes a process of providing the application execution unit with a pointer to a second API for executing a process of reading a media ID.

According to a third embodiment of the invention an information processing device that utilizes contents recorded in a disc includes an application execution unit that executes an application which is a program for utilizing the contents recorded in the disc and a BCA driver execution unit that executes a BCA driver which is a program for instructing a drive device to execute a process of reading a media ID recorded in a BCA Burst Cutting Area area of the disc wherein the BCA driver includes checksum data as tampering check data that are obtained by adding numeric values of data that constitute the BCA driver in predetermined units of data wherein the BCA driver execution unit in response to a first API Application Programming Interface call from the application execution unit executes a tampering check process on the BCA driver by applying the checksum data and when it is verified that there is no tampering in the BCA driver executes a process of providing the application execution unit with a pointer to a second API for executing a process of reading a media ID.

According to a fourth embodiment of the invention an information processing device that utilizes contents recorded in a disc includes an application execution unit that executes an application which is a program for utilizing the contents recorded in the disc and a BCA driver execution unit that executes a BCA driver which is a program for instructing a drive device to execute a process of reading a media ID recorded in a BCA Burst Cutting Area area of the disc wherein the BCA driver includes tampering check data and a hash value for the tampering check data wherein the BCA driver execution unit in response to a first API Application Programming Interface call from the application execution unit executes a tampering check process on the BCA driver by applying the tampering check data and executes a tampering check process on the tampering check data by applying the hash value and when it is verified that there is no tampering in the BCA driver and that there is no tampering in the tampering check data executes a process of providing the application execution unit with a pointer to a second API for executing a process of reading a media ID.

According to a fifth embodiment of the invention an information processing device that uses contents recorded in a disc includes an application execution unit that executes an application which is a program for utilizing the contents recorded in the disc and a BCA driver execution unit that executes a BCA driver which is a program for instructing a drive device to execute a process of reading a media ID recorded in a BCA Burst Cutting Area area of the disc wherein the BCA driver execution unit in response to a first API Application Programming Interface call from the application execution unit executes a process of providing the application execution unit with a pointer to a second API for executing a process of reading a media ID.

According to a sixth embodiment of the invention a disc contains contents an application which is a program for utilizing the contents a media ID recorded in a BCA Burst Cutting Area area provided in the disc and a BCA driver that includes a program for instructing a drive device to execute a process of reading the media ID tampering check data for the program and an API to which the application is accessible wherein in an information processing device that utilizes the contents the BCA driver in response to a first API Application Programming Interface call from the application executes tampering check on the BCA driver to which the tampering check data are applied and when it is verified that there is no tampering executes a process of providing the application with a pointer to a second API for executing reading of the media ID.

In the disc according to one embodiment of the invention the first API is a public API that is public to a third party and the second API is a private API that is not public to the third party.

According to a seventh embodiment of the invention an information processing method executed in an information processing device that utilizes contents recorded in a disc includes the steps of executing an application which is a program for utilizing the contents recorded in the disc by an application execution unit and executing a BCA driver which is a program for instructing a drive device to execute a process of reading a media ID recorded in a BCA Burst Cutting Area area provided in the disc by an BCA driver execution unit wherein when the BCA driver is executed in response to a first API Application Programming Interface call from the application execution unit a tampering check process is executed on the BCA driver and wherein when it is verified that there is no tampering in the BCA driver a process of providing the application execution unit with a pointer to a second API for executing a process of reading the media ID is executed.

In the information processing method according to one embodiment of the invention the first API is a public API that is public to a third party and the second API is a private API that is not public to the third party.

In the information processing method according to one embodiment of the invention when the BCA driver is executed in response to a second API call from the application an authentication process is executed with the drive device and when it is verified that the mutual validity of the BCA driver and the drive device the drive device is instructed to read the media ID.

In the information processing method according to one embodiment of the invention when the BCA driver is executed in response to a second API call from the application a tampering check process is executed on the BCA driver and when it is verified that there is no tampering in the BCA driver an authentication process is executed with the drive device.

In the information processing method according to one embodiment of the invention when the BCA driver is executed a tampering check process is executed on the BCA driver each time the BCA driver executes a step.

In the information processing method according to one embodiment of the invention when the BCA driver is executed a process of providing the application execution unit with data mixing a pointer to the second API and a dummy pointer is executed.

According to an eighth embodiment of the invention an information processing method that is executed in an information processing device that utilizes contents recorded in a disc includes the steps of executing an application which is a program for utilizing the contents recorded in the disc by an application execution unit and executing a BCA driver which is a program for instructing a drive device to execute a process of reading a media ID recorded in a BCA Burst Cutting Area area of the disc by a BCA driver execution unit wherein the BCA driver includes tampering check data wherein when the BCA driver is executed in response to a first API Application Programming Interface call from the application execution unit a tampering check process is executed on the BCA driver by applying the tampering check data and when it is verified that there is no tampering in the BCA driver a process of providing the application execution unit with a pointer to a second API for executing a process of reading a media ID is executed.

According to a ninth embodiment of the invention an information processing method that is executed in an information processing device that utilizes contents recorded in a disc includes the steps of executing an application which is a program for utilizing the contents recorded in the disc by an application execution unit and executing a BCA driver which is a program for instructing a drive device to execute a process of reading a media ID recorded in a BCA Burst Cutting Area area of the disc by a BCA driver execution unit wherein the BCA driver includes checksum data as tampering check data that are obtained by adding numeric values of data that constitute the BCA driver in predetermined units of data wherein when the BCA driver is executed in response to a first API Application Programming Interface call from the application execution unit a tampering check process is executed on the BCA driver by applying the checksum data and when it is verified that there is no tampering in the BCA driver a process of providing the application execution unit with a pointer to a second API for executing a process of reading a media ID is executed.

According to a tenth embodiment of the invention an information processing method that is executed in an information processing device that utilizes contents recorded in a disc includes the steps of executing an application which is a program for utilizing the contents recorded in the disc by an application execution unit and executing a BCA driver which is a program for instructing a drive device to execute a process of reading a media ID recorded in a BCA Burst Cutting Area area of the disc by a BCA driver execution unit wherein the BCA driver includes tampering check data and a hash value for the tampering check data wherein when the BCA driver is executed in response to a first API Application Programming Interface call from the application execution unit a tampering check process is executed on the BCA driver by applying the tampering check data and a tampering check process is executed on the tampering check data by applying the hash value and when it is verified that there is no tampering in the BCA driver and that there is no tampering in the tampering check data a process of providing the application execution unit with a pointer to a second API for executing a process of reading a media ID is executed.

According to an eleventh embodiment of the invention an information processing method that is executed in an information processing device that uses contents recorded in a disc includes the steps of executing an application which is a program for utilizing the contents recorded in the disc by an application execution unit and executing a BCA driver which is a program for instructing a drive device to execute a process of reading a media ID recorded in a BCA Burst Cutting Area area of the disc by a BCA driver execution unit wherein when the BCA driver is executed in response to a first API Application Programming Interface call from the application execution unit a process of providing the application execution unit with a pointer to a second API for executing a process of reading a media ID is executed.

According to a twelfth embodiment of the invention a program for executing information processing in an information processing device that utilizes contents recorded in a disc includes the steps of executing an application which is a program for utilizing the contents recorded in the disc by an application execution unit and executing a BCA driver which is a program for instructing a drive device to execute a process of reading a media ID recorded in a BCA Burst Cutting Area area provided in the disc by an BCA driver execution unit wherein when the BCA driver is executed in response to a first API Application Programming Interface call from the application execution unit a tampering check process is executed on the BCA driver and when it is verified that there is no tampering in the BCA driver a process of providing the application execution unit with a pointer to a second API for executing a process of reading the media ID is executed.

Note that the program according to the embodiments of the invention may be for example provided to a general purpose system that is able to execute various program codes in a computer readable format through a recording medium or a communication medium. By providing the above programs in a computer readable format processes in accordance with the programs may be implemented on a computer system.

Further aspects features and advantages of the invention will become apparent from further detailed description based on embodiments of the invention and the accompanying drawings. Note that the system in the present specification is a logically integrated configuration of a plurality of devices and is not limited to the one that a device of each configuration is placed in the same casing.

Hereinafter an information processing device a disc an information processing method and a program according to an embodiment of the invention will be described in greater detail with reference to the accompanying drawings.

First an overview of manufacturing of a disc in which a media ID PMSN Pre recorded Media Serial Number which is a disc unique identification information is recorded and access processing will be described with reference to .

Contents such as a movie to be recorded in a disc are initially created as authoring contents for disc recording in an authoring studio . After that in a disc plant a pre mastering process S which is a process of generating data for disc recording such as a contents cryptography process according to the AACS definition is executed. Then a mastering process S which is a master producing process based on data recorded in a disc is performed and a large number of discs are produced using the produced master that is a replication process S is executed.

When discs are produced through the replication process identification information that is unique to each disc that is a media ID PMSN is recorded in the BCA area of each disc. For example a media ID formed of 16 bytes 4 blocks that is 64 byte data is recorded in the BCA area of each disc.

As described above the BCA area is different from the normal data recording area and data are recorded by mechanical cutting which is different from a normal data recording mode. Thus it is difficult to rewrite recording data in the BCA area. In the reproducing process as well a special reading process different from the normal data reproducing process may be necessary.

The disc produced as in the above manner is purchased by the user set in an information processing device such as user s PC or reproducing device and subjected to contents access processing such as reproducing contents or copying contents. For copying contents it may be necessary that the media ID recorded in the disc is transmitted to a management server S and access permission information such as copy permission information is acquired from the management server S . In addition when another service is received from the management server as well it may be requested to transmit the media ID to the management server .

An example of a configuration of the disc according to the embodiment of the invention will be described with reference to . is a view that illustrates data recorded in the disc information recording medium in which contents are recorded. The disc is for example a DVD Digital Versatile Disc a Blu ray Disc registered trademark or the like and contents such as a movie are recorded in a data recording area.

The disc includes the data recording area in which contents or the like are recorded and a BCA area burst cutting area in which a media ID for example PMSN Pre recorded Media Serial Number which is disc unique identification information is recorded.

For example the following data are recorded in the data recording area of the disc . The recorded data for example include contents such as a movie an application which is a program applied to execute contents access control such as a process of reproducing or copying the contents and a BCA driver which is a program for executing a process of reading a media ID from the BCA area . Note that the BCA driver executes an authentication process with a drive device that reads data from the disc to thereby check the validity of the drive device and only when the validity of the drive device is verified instructs the drive device to read the media ID PMSN . The BCA driver contains a secret key that is utilized in the authentication process. Note that tampering check data are added to the BCA driver recorded in the disc according to the embodiment of the invention. The process of accessing the data will be described later.

Furthermore a media ID PMSN which is disc unique identification information is recorded in the BCA area of the disc .

Next a processing sequence in which contents recorded in the disc are copied to another device such as a hard disk of the information processing device or an external portable device will be described with reference to .

The user in step S starts up the information processing device such as a PC or a reproducing device in which the disc is set and runs the application that executes a process of reproducing contents or a process of copying contents. After that as the user inputs a copy request to the application the application requests the BCA driver to acquire a media ID.

The BCA driver that has received the request for acquiring a media ID from the application executes an authentication process with the drive device in step S. Note that the drive device may be formed integrally with the information processing device or may be formed separately and connected to the information processing device via a USB cable or the like. The authentication process in step S is executed in accordance with the AACS definition. The authentication process utilizes a secret key included in the BCA driver and a secret key included in the drive device . The detail of the process will be described later.

As the validity of both the BCA driver and the drive device is verified through the authentication according to the AACS definition the BCA driver instructs the drive device to read a media ID from the BCA area to thereby acquire the media ID. The BCA driver in step S provides the media ID to the application .

The application in step S transmits the media ID received from the BCA driver to the management server . The management server in step S in response to the reception of the media ID transmits access permission information such as copy permission information to the information processing device .

The application in step S may copy the contents stored in the disc to an external device conditionally on the reception of the copy permission information from the management server .

When a series of processes in which the application acquires a media ID from the BCA driver are simply described in the sequence shown in . shows 1 application 2 BCA driver and 3 drive device . The application and the BCA driver are executed on the information processing device such as a PC or a reproducing device. The BCA driver includes an AACS authentication module that executes an authentication process according to the AACS definition and further includes the secret key used in the authentication process. The drive device also includes the secret key used in the authentication process.

In step S the application requests the BCA driver for a media ID. Next in step S the BCA driver executes the authentication process with the drive device using the AACS authentication module. The above authentication process is executed in the sequence according to the AACS definition.

When it is not authenticated the process is interrupted at this point. When it is authenticated and the validity of both the BCA driver and the drive device is verified next in step S the drive device reads a media ID from the BCA area of the disc and in step S provides the read media ID to the BCA driver . The BCA driver in step S provides the media ID to the application .

Next a process sequence between the application and the BCA driver according to the embodiment of the invention that is a sequence in which in response to the request from the application the BCA driver acquires a media ID and provides the media ID to the application will be described with reference to .

That is the application and the BCA driver are executed on an information processing device that includes a drive device in which a disc is loaded or on an information processing device connected to a drive device via for example a USB cable. Specifically the application is executed in an application executing unit of the information processing device and the BCA driver is executed in a BCA executing unit of the information processing device.

As described above the process of reading the media ID PMSN from the BCA area of the disc is executable by the BCA driver according to the AACS definition. The BCA driver executes mutual authentication with the drive device loaded with the disc in accordance with the AACS definition checks the validity of both the drive device and the BCA driver reads the media ID and then provides the media ID to the application.

Note that the BCA driver is a program that is generated in accordance with the AACS definition and executes an authentication process according to the AACS definition and reading of a media ID from the BCA area. On the other hand the application is a program that may be created by a third party at will. Thus the application may possibly be a malicious program such as a program that is generated to fraudulently acquire media ID information.

The application calls an API Application Programming Interface to the BCA driver . The API is public and is available to a third party.

The public API does not include functions for requesting the BCA driver to acquire a media ID but includes functions for requesting the BCA driver to acquire a pointer to a private API. In the configuration of the embodiment of the invention the API that instructs the BCA driver to acquire a media ID is set as a private API.

That is in the configuration of the embodiment of the invention only the API for acquiring a pointer is public and this public API is available to a third party that creates the application however the API that instructs the BCA driver to acquire a media ID is set as a private API. Thus a third party is not able to create an application that calls a private API.

As the application executes a process of calling a public API the BCA driver in step S in response to the API call from the application initiates a series of processes in accordance with the public API.

First in step S a process of verifying the BCA driver itself is executed using the verification data set in the BCA driver.

In step S in the flow shown in the verification data for example tampering check data checksum shown in set in the BCA driver are used to execute a verification process for the BCA driver itself. The detailed sequence of the verification process will be described with reference to the flowchart shown in .

The process shown in the flowchart of is a sequence in which the BCA driver executes tampering check on the BCA driver itself. First in step S the checksum of all the configuration of the BCA driver is calculated. For example a total value that is obtained by adding up data byte by byte as numeric values from the starting address of an image of the BCA driver is calculated.

Next in step S the calculated checksum is checked against the verification data. The verification data are the tampering check data checksum shown in . In step S it is determined whether it is satisfied that the calculated result is equal to the verification data fixed value . If it is satisfied verification has been done that is it is determined that there is no tampering and the process proceeds to step S after which the process continues. On the other hand if it is not satisfied that the calculated result is equal to the verification data fixed value verification ends in failure that is it is determined that there is tampering and the process proceeds to step S after which the process is interrupted and an error notice is provided to the application.

Referring back to description of the processing sequence between the application and the BCA driver will be continued. In step S the tampering check described with reference to is executed on the BCA driver and if it is determined that there is tampering the process is interrupted and an error notice is provided to the application. If it is determined that there is no tampering the process proceeds to step S.

In step S a private API pointer that is an API pointer that specifies a function for executing a process of reading a media ID from the BCA area of the disc is stored in a buffer to which the application is accessible request source buffer . Furthermore in step S the BCA driver executes tampering check on the BCA driver that is the process similar to step S and described with reference to . In the present embodiment the BCA driver is configured to execute tampering check on the BCA driver described with reference to each time a process is executed. In this way by sequentially determining continuation or interruption of the process by executing tampering check it is possible to protect against various attacks from the outside.

In the verification process in step S if it is determined that there is tampering the process is interrupted and an error notice is provided to the application. If it is determined that there is no tampering the private API pointer is provided to the application through the buffer.

The application uses the private API pointer received from the BCA driver through the buffer to call the private API. The BCA driver in step S initiates a process according to the private API. The private API is applied to the process of acquiring a media ID.

Furthermore the BCA driver in step S executes tampering check on the BCA driver that is the process similar to step S and described with reference to . In the verification process in step S if it is determined that there is tampering the process is interrupted and an error notice is provided to the application. If it is determined that there is no tampering the process proceeds to step S and an authentication process with the drive device that reads data from the disc is executed to thereby check the validity of both the drive device and the BCA driver. The authentication process is executed for example in accordance with the AACS definition.

If authentication ends in failure in step S that is if the validity of at least any one of the drive device and the BCA driver is not verified an error notice is provided to the application after which the process ends without reading a media ID.

On the other hand if authentication is done in step S and the validity of both the drive device and the BCA driver is verified the BCA driver in step S further executes tampering check on the BCA driver that is a process similar to step S and described with reference to . In the verification process in step S if it is determined that there is tampering the process is interrupted and an error notice is provided to the application. If it is determined that there is no tampering the process proceeds to step S and instructs the drive device to read a media ID from the BCA area and then the read media ID is provided to the application .

After that the application transmits the media ID acquired from the BCA driver to the management server and then receives contents copy permission information or other service information.

As shown in the BCA driver executes tampering check on the BCA driver described with reference to each time a process is executed. In this way by sequentially determining continuation or interruption of the process by executing tampering check it is possible to protect against various attacks from the outside. As shown in tampering check data checksum for all data of the BCA driver are set in advance in the BCA driver . The BCA driver sequentially executes tampering check using the above data.

By repeatedly executing the tampering check it is possible to for example check a patching attack or modification of a code and it is also possible to check soft break Int which is a hacking program used by many hackers. In addition it is possible to effectively protect against injection malicious code injection or the like.

Note that as shown in the verification data are recorded with the BCA driver as attached data and in order to avoid modification of the checksum portion it is desirable to embed a checksum with an exclusive tool for generating the BCA driver. In addition the verification data checksum are not limited to the configuration that the data are set as a total value that is obtained by adding up data byte by byte as numeric values from the starting address of an image of the BCA driver. For example the verification data may be set on the basis of core data not on the basis of the entire BCA driver.

Furthermore it may be configured to set a hash value for detecting tampering of the verification data itself. For example as shown in a verification data hash value based on the verification data is generated and recorded as data attached to the BCA driver .

With the above configuration in the process of verifying the BCA driver such as step S of tampering verification of the verification data itself is executed using the verification data hash value in addition to tampering check of the BCA driver using the verification data .

Note that as described with reference to in the configuration of the embodiment of the invention the application uses a public API to make it possible to execute a process of acquiring a pointer to a private API and the application uses the acquired private API pointer to instruct the BCA driver to acquire a media ID. Furthermore for the private API pointer it may be configured not to provide only one pointer to the application but to provide data mixing one right pointer and dummy pointers to the application.

An example of a configuration of the pointer data is shown in . For example as shown in previously generated data mixing dummy pointers and a right pointer is provided to the application. That is PVOID Dummy and PVOID Dummy are dummy pointers and PVOID pGetBCAID is a right pointer. n and n in the dummy pointers are numeric data. The private API has a structure such that a right pointer is sandwiched between dummy pointers as shown in and the sandwich structure is also private. Thus it is possible to further protect against various attacks to the BCA driver.

The application may be necessary to select a right pointer from among these plurality of pointers. For example pointer selection information or a pointer selection tool is provided to only a previously authorized application creator. Thus it is possible to effectively exclude pointer acquisition that uses a malicious application.

First in step S the application calls a public API function. The public API is an API for acquiring a pointer to the private API. Next in step S a tampering check process is executed on the BCA driver. Specifically the checksum of the entire DLL Dynamic Linking Library corresponding to the BCA driver is calculated. That is the verification data for example tampering check data checksum shown in set in the BCA driver are used to execute a verification process on the BCA driver itself.

That is the checksum of the entire configuration of the BCA driver is calculated. For example a total value that is obtained by adding up data byte by byte as numeric values from the starting address of an image of the BCA driver is calculated and in step S the calculated checksum is checked against the verification data. The verification data are the tampering check data checksum shown in . In step S if it is satisfied that the calculated result is equal to the verification data fixed value verification is done that is it is determined that there is no tampering and the process proceeds to step S after which the process continues. On the other hand if it is not satisfied that the calculated result is equal to the verification data fixed value verification ends in failure that is it is determined that there is tampering and the process proceeds to step S after which the process is interrupted and an error notice is provided to the application.

In step S a private API pointer that is an API pointer that specifies a function for executing a process of reading a media ID from the BCA area of the disc is stored in a buffer to which the application is accessible request source buffer . Furthermore in step S the BCA driver calculates the checksum of the entire DLL corresponding to the BCA driver. That is the verification data for example tampering check data checksum shown in set in the BCA driver are used to execute a verification process on the BCA driver itself.

In step S if it is determined that there is tampering in the BCA driver the process proceeds to step S and is interrupted after which an error notice is provided to the application. If it is determined that there is no tampering the process proceeds to step S. In step S the private API pointer is provided to the application through the buffer.

The application uses the private API pointer received from the BCA driver through the buffer to call the private API. The following process will be the process following step S of .

As described above in the configuration of the embodiment of the invention an API for executing a process of acquiring a media ID is set as a private API and a public API to which the application is accessible is set as a pointer to the private API for executing the process of acquiring the media ID and when the public API is called the BCA driver execute tampering check on the BCA driver prior to the steps of executing the processes.

With the above configuration for example if a malicious application calls a public API to intend to acquire a media ID from the BCA driver when the malicious application variously attacks the BCA driver that is tampers the BCA driver before a private API is acquired the BCA driver is able to detect tampering in the tampering check immediately interrupt the process and stop providing the private API to the malicious application. Thus it is possible to prevent the malicious application from fraudulently acquiring a media ID.

As described above the embodiment of the invention is described in greater detail with reference to the specific example embodiment. It is obvious that a person skilled in the art may modify or replace the example embodiment without departing from the scope of the invention. That is the invention described above is illustrative and should not be construed as restrictive. The scope of the invention should be determined with reference to the appended claims.

In addition the series of processes described in the specification may be executed through hardware software or composite configuration of them. When the process is executed through software it is possible to execute a program that contains the process sequence which is installed or copied into a memory inside a computer assembled to exclusive hardware or to execute the program which is installed or copied into a general purpose computer that is able to execute various processes. For example the program may be recorded in a recording medium in advance. The program may be not only installed or copied from a recording medium to the computer but also received through a network such as a LAN Local Area Network or the Internet and then installed or copied into a recording medium such as an internal hard disk. Note that the file format of the BCA driver described in the above embodiment is not limited to a DLL file it may be a format such as an EXE file.

Note that various processes described in the specification are not limited to that they are executed in time sequence in accordance with the description they may be executed parallel or separately depending on the performance of a device that executes the processes or where necessary. In addition the system in the present specification is a logically integrated configuration of a plurality of devices and is not limited to the one that a device of each configuration is placed in the same casing.

