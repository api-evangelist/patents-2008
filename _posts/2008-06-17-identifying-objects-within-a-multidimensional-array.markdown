---

title: Identifying objects within a multidimensional array
abstract: Data is commonly stored in multidimensional arrays. Users and computer applications may request or interact with the data objects. As larger amounts of data are stored, the resources used to maintain and manipulate the data increase. An effective way to manage resources is to operate on an index of ranges that identify selected data within a multidimensional array. The index of ranges is associated with only a subset of data objects, instead of the entire multidimensional array. A range may comprise multiple dimensions (e.g. row and column) that are indexed by start and end indexes. Using the index of ranges to access data is efficient because the index of ranges is kept in sorted order, allowing for a binary search for locating and accessing specified data within the multidimensional array. The index of ranges is updated to reflect operations within the multidimensional array, such as, selecting new data or removing data, for example.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09164978&OS=09164978&RS=09164978
owner: Microsoft Technology Licensing, LLC
number: 09164978
owner_city: Redmond
owner_country: US
publication_date: 20080617
---
Computer systems often represent data as multidimensional data. For example spreadsheets tables data grids data bases and other computer structures manage data in multidimensional arrays. Managing data in a multidimensional array often involves storing each object of the multidimensional array. This allows users or computer applications to locate and access the objects within the multidimensional array. An example is a spreadsheet comprising cells. A computer application may search each stored cell to find a specific cell. Another example is when a user or computer application applies various actions to the objects such as rendering the objects inserting new objects determine if an object exists within the stored array or enumerating the objects of the multidimensional array. These actions require locating and accessing the objects. As the amount of multidimensional data increase the resources needed to store locate and perform actions on the data increase. This scenario does not scale well as the number of dimensions increase.

This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key factors or essential features of the claimed subject matter nor is it intended to be used to limit the scope of the claimed subject matter.

This disclosure relates to identifying a set of selected objects within a multidimensional array. The set of selected objects may be cells within a spreadsheet having a red background user selected cells currently visible cells or any other designation of a set of selected objects. Users or computer applications many times request objects or perform operations on objects within a multidimensional array. These requests are efficiently performed by managing a sorted index of ranges representing a subset of the entire multidimensional array data. The index of ranges identifies e.g. addresses coordinates etc. a set of selected objects within the multidimensional array. One possible format for specifying the index of ranges is to designate a start index and an end index of a dimension e.g. a row range comprising a start row index and an end row index . This format may be extrapolated to any number of dimensions e.g. row range comprising a column range .

The index of ranges is maintained in a sorted order thus allowing a binary search to be performed to efficiently locate and access objects. For example a computer application may check to see if a specific cell within a spreadsheet is selected e.g. highlighted . A binary search is performed to determine whether the selected cell is within the index of ranges the cell is specified . This provides an efficient manner of locating and accessing objects because only a subset of an entire multidimensional array is searched and the index of ranges are sorted allowing for a binary search. The index of ranges is associated with the multidimensional array and is updated depending on operation performed on the array e.g. selecting new cells deselecting cells inserting cells etc. .

To the accomplishment of the foregoing and related ends the following description and annexed drawings set forth certain illustrative aspects and implementations. These are indicative of but a few of the various ways in which one or more aspects may be employed. Other aspects advantages and novel features of the disclosure will become apparent from the following detailed description when considered in conjunction with the annexed drawings.

The claimed subject matter is now described with reference to the drawings wherein like reference numerals are used to refer to like elements throughout. In the following description for purposes of explanation numerous specific details are set forth in order to provide a thorough understanding of the claimed subject matter. It may be evident however that the claimed subject matter may be practiced without these specific details. In other instances structures and devices are shown in block diagram form in order to facilitate describing the claimed subject matter.

Data is often stored and managed within multidimensional arrays e.g. tables spreadsheets arrays databases etc. . Multidimensional arrays may comprise of one dimension two dimensions or any number of dimensions. When the amount of data that is associated within a multidimensional array increases the resources needed to store the data increase and the time needed to manipulate the data becomes increasingly slower. The performance issues become more significant when data is associated in a greater number of dimensions. For example performance issues may be acceptable for one dimensional data e.g. ListBox but performance issues increase when scaling to two dimensional data e.g. DataGrid .

These performance issues such as increased memory storage may occur when every object including empty cells within a multidimensional array is maintained. A user or a computer application that interacts e.g. insert cells remove cells select cells locate cells enumerate cells etc. with objects in a multidimensional array may experience decreased performance because the entire set of objects may be searched to locate and provide access to the objects. For example when a website renders a table e.g. a DataGrid the table may determine what cells a user selected. The table searches the entire collection of cells within the table to determine if a cell is selected. The table is rendered with the selected cells shaded grey. As more cells are associated with the table the time to render the table is increased because the table searches and interacts with more cells.

Data within a multidimensional array may be represented as a set of objects or cells. One method to mitigate performance issues when interacting with a large amount of multidimensional data is to store references e.g. addresses indexed rows indexed columns etc. of a subset of selected objects within the multidimensional array. Examples of a subset of selected cells within a spreadsheet are cells that have the property of a red background user selected cells cells currently rendered within the spreadsheet and cells that comprise a numerical value.

One implementation of a method for storing references to a subset of selected objects within a multidimensional array is a data structure that stores the address of the subset of selected objects in indexed ranges sorted by row and then by column. Performance may increase by keeping the indexed ranges sorted. Objects can be located and accessed using fewer resources because a binary search may be performed on the sorted indexed ranges. A binary search may mitigate the time needed to locate an object by searching first by the row index and then by column index. Performance may also increase because the search comprises the subset of selected objects not the entire multidimensional array .

The data structure also adds removes or modifies indexed ranges to reflect a change of selected objects within the multidimensional array. For example if a user performs an operation that adds selected objects to the multidimensional array the data structure updates the indexed ranges to store a set of ranges in sorted order corresponding to the new select objects. The data structure may merge overlapping ranges split ranges perform intersection operations or perform compliment operations to the indexed ranges to optimize and maintain a sorted order of the indexed ranges.

An example of a merge operation is a data structure that stores selected objects within in a two dimensional array this example may be extrapolated to any number of dimensions as row ranges and column ranges. The data structure may contain 2 ranges Rowand Row. The merge is performed when the value of end plus 1 is equal to end and column ranges is equal to column ranges. The resulting range is Row Row replaces Row and Row . The range Row is sorted.

Another feature of the data structure is the ability to efficiently query or enumerate the selected objects within the indexed ranges because the indexed ranges are sorted. An example of the data structure enumeration is when selected objects are copied into a clipboard storage space for copied data . The data structure enumerates the selected objects by column ranges left to right and then by row ranges top to bottom . Because the data structure maintains ranges e.g. column range row range a third dimension range etc. in sorted order the enumeration does not need additional operations such as search or sort.

One embodiment of indentifying a set of selected objects in a multidimensional array is illustrated by an exemplary method in . At the method begins. At at least one selection specifier specifying at least one range of selected objects within the multidimensional array is created. The range of selected objects may comprise at least one dimensional interval e.g. row column axis etc. with a start index and an end index of the dimension. An example of specifying at least one range of selected objects within a two dimensional array is a selection specifier comprising a first dimension range object row range . The first dimension range object comprises a first dimension start index row start index a first dimension end index row end index and at least one second dimension range object column range . The second dimension range object may comprise a second dimension start index column start index and a second dimension end index column end index . An example format for the range is Row start index end index . At the at least one selection specifier is associated with the multidimensional array. The selection specifier may be associated with the multidimensional array by responding to operations insert cells remove cells render cells enumerate cells etc. within the multidimensional array. The selection specifier may add remove merge split update or sort the range of selected objects to correspond a set of selected objects after the operation changes the set of selected objects within the multidimensional array. The method ends at .

A first selection specifier comprises a first black cells range and a second black cells range . The first black cells range and the second black cells range identifies the set of selected black cells selected objects . The first black cells range indentifies the black cells starting at row and ending at row which start at column and end at column start row index of 8 end row index of 9 start column index of 2 and end column index of 6 . The second black cells range identifies the black cells starting at row and ending at row which start at column and end at column The second black cells range also identifies black cells starting at row and ending at row which start at column and end at column . The second black cells range comprises a start row index of 9 and end row index of 10 a start column index of 2 and end column index of 3 a second start column index of 6 and a second end column index of 6.

A second selection specifier comprises a stripped cells range . The stripped cells range identifies the set of stripped cells selected objects . The stripped cells range indentifies the stripped cells starting at row and ending at row which start at column and end at column start row index of 3 end row index of 3 start column index of 1 and end column index of 3 . The first selection specifier and the second selection specifier maintain the ranges in sorted order by a sort criterion e.g. ascending order by starting row index then within each row ascending order by start column index .

A selection specifier original specifies an original range of the original set of selected cells within the spreadsheet . The original range comprises references e.g. addresses indexed by row and column to the original set of selected cells . The selection specifier comprises an updating component configured to detect operations e.g. scrolling inserting cells removing cells rendering cells etc. within the spreadsheet . An updating component may be configured to receive an operation identify a set of new selected objects within a multidimensional array and update a selection specifier with at least one range of the set of new selected objects. The updating component comprises a range removing interface and a range adding interface . A range removing interface removes ranges from a selection specifier when objects are deselected removed from a multidimensional array. A range adding interface adds ranges to a selection specifier when new objects are selected inserted within a multidimensional array.

In the example of system the updating component detects and receives the scrolling operation within the spreadsheet by the user . The updating component detects that the set of new selected cells is selected. The updating component updates the selection specifier after operation by means of the range removing interface and the range adding interface . The original set selected cells are not rendered within the spreadsheet therefore are deselected within the spreadsheet after the scrolling operation occurs. The range removing interface removes from the selection specifier the original set of selected cells . The range adding interface adds the set of new ranges corresponding to the set of new selected cells into the selection specifier . The set of new selected cells are rendered selected within the spreadsheet after the scrolling operation occurs. The selection specifier after operation now comprises a set of new ranges that indentify the set of new selected cells within the spreadsheet .

A selection specifier original specifies an original range of the original set of selected cells within the multidimensional array . The original range comprises references e.g. addresses indexed by row and column to the original set of selected cells . The selection specifier comprises an updating component configured to receive an operation identify a set of new selected objects within a multidimensional array and update a selection specifier with at least one range of the set of new selected objects. The updating component comprises a range removing interface and a range adding interface . A range removing interface removes ranges from a selection specifier when objects are deselected removed from a multidimensional array. A range adding interface adds ranges to a selection specifier when new objects are selected inserted within a multidimensional array.

In the example of system the updating component detects and receives an insert selected cells operation . The updating component identifies that a set of operated on cells has been inserted into the multidimensional array . The set of operated on cells has an operated on cell range . The updating component updates the selection specifier after operation by means of the range adding interface . The range adding interface receives the operated on cell range and adds the operated on cell range to the selection specifier after operation . The selection specifier after operation now comprises a set of new ranges that identifies the set of new selected cells within the multidimensional array .

A selection specifier original specifies an original range of the original set of selected cells within the multidimensional array . The selection specifier comprises an updating component configured to receive an operation identify a set of new selected objects within a multidimensional array and update a selection specifier with at least one range of the set of new selected objects. The updating component comprises a range removing interface and a range adding interface . A range removing interface removes ranges from a selection specifier when objects are deselected removed from a multidimensional array. A range adding interface adds ranges to a selection specifier when new objects are selected inserted within a multidimensional array.

In the example of system the updating component detects and receives an insert selected cells operation . The updating component identifies that the set of operated on cells has been inserted selected into the multidimensional array . The set of operated on cells has an operated on cell range . The operated on cell range overlaps the original range of the original set of selected cells . The range adding interface merges the appropriate ranges of the original range with the operated on cell range there is an overlap of row column that creates a Row so that a set of new ranges remains in sorted order. The range removing interface splits the appropriate ranges of the original range and the operated on cell range row and row now have separate column designations than row and therefore two subselection ranges are created Row and Row . The selection specifier after operation now comprises the set of new ranges in sorted order that identifies the set of new selected cells within the multidimensional array .

A selection specifier original specifies an original range of selected cells within the multidimensional array . The selection specifier comprises an updating component . The updating component comprises a range removing interface and a range adding interface .

In the example of system the updating component detects and receives a deselected cells operation e.g. removing cells from the multidimensional array . The updating component identifies an operated on cell range of the deselected cells. The range removing interface receives the operated on cell range of the deselected cells and removes the corresponding operated on cell range from the selection specifier . The updating component may merge ranges split ranges perform intersect operations and or perform compliment operations to maintain a set of new ranges in sorted order. The selection specifier after operation now comprises the set of new ranges that identifies the set of new selected cells within the multidimensional array .

A multidimensional array store e.g. a data structure memory addresses array of cells collection of cells etc. stores objects comprised within each cell of the multidimensional array . A selection specifier specifies a range of selected cells within the multidimensional array . The selection specifier comprises an enumerator component configured to receive an enumeration request and produce an enumeration over the range of the set of selected cells . The enumeration may return the address of each cell within the range . The enumeration may also return the object of each cell within the range .

In the example of system the enumerator component detects and receives an enumeration request . The enumerator component retrieves the objects F G H J contained within the range addresses from the multidimensional array store . The enumerator component returns an enumeration of the objects and addresses of the selected cells in sorted order by row then column.

A multidimensional array store e.g. a data structure memory addresses array of cells collection of cells etc. stores objects comprised within each cell of the multidimensional array . A selection specifier specifies a range of selected cells within the multidimensional array . The selection specifier comprises a query component configured to receive a query request e.g. contains x y and determine whether the query cell is contained within the range of selected cells . The query component may return a value or any other identification e.g. Boolean value indicating if the query cell is contained within the range of selected cells .

In the example of system the query component detects and receives a query request from a computer application . The query component determines whether the cell address is contained within the range of selected cells . The query component determines is within the range and returns True to the computer application . One method the selection specifier can perform to make the query determination is by performing a binary search for 8 x coordinate by row ranges within the range . If 8 x coordinate is found within the row ranges then the selection specifier performs a binary search for 3 y coordinate by column ranges within the range . This method illustrates a two dimensional query determination but can be extrapolated to any set of dimensions such as illustrated in the three dimensional illustration of .

Still another embodiment involves a computer readable medium comprising processor executable instructions configured to implement one or more of the techniques presented herein. An exemplary computer readable medium that may be devised in these ways is illustrated in wherein the implementation comprises a computer readable medium e.g. a CD R DVD R or a platter of a hard disk drive on which is encoded computer readable data . This computer readable data in turn comprises a set of computer instructions configured to operate according to one or more of the principles set forth herein. In one such embodiment the processor executable instructions may be configured to perform a method such as the exemplary method of for example. In another such embodiment the processor executable instructions may be configured to implement a system such as the exemplary system of for example. Many such computer readable media may be devised by those of ordinary skill in the art that are configured to operate in accordance with the techniques presented herein.

Although the subject matter has been described in language specific to structural features and or methodological acts it is to be understood that the subject matter defined in the appended claims is not necessarily limited to the specific features or acts described above. Rather the specific features and acts described above are disclosed as example forms of implementing the claims.

As used in this application the terms component module system interface and the like are generally intended to refer to a computer related entity either hardware a combination of hardware and software software or software in execution. For example a component may be but is not limited to being a process running on a processor a processor an object an executable a thread of execution a program and or a computer. By way of illustration both an application running on a controller and the controller can be a component. One or more components may reside within a process and or thread of execution and a component may be localized on one computer and or distributed between two or more computers.

Furthermore the claimed subject matter may be implemented as a method apparatus or article of manufacture using standard programming and or engineering techniques to produce software firmware hardware or any combination thereof to control a computer to implement the disclosed subject matter. The term article of manufacture as used herein is intended to encompass a computer program accessible from any computer readable device carrier or media. Of course those skilled in the art will recognize many modifications may be made to this configuration without departing from the scope or spirit of the claimed subject matter.

Although not required embodiments are described in the general context of computer readable instructions being executed by one or more computing devices. Computer readable instructions may be distributed via computer readable media discussed below . Computer readable instructions may be implemented as program modules such as functions objects Application Programming Interfaces APIs data structures and the like that perform particular tasks or implement particular abstract data types. Typically the functionality of the computer readable instructions may be combined or distributed as desired in various environments.

In other embodiments device may include additional features and or functionality. For example device may also include additional storage e.g. removable and or non removable including but not limited to magnetic storage optical storage and the like. Such additional storage is illustrated in by storage . In one embodiment computer readable instructions to implement one or more embodiments provided herein may be in storage . Storage may also store other computer readable instructions to implement an operating system an application program and the like. Computer readable instructions may be loaded in memory for execution by processing unit for example.

The term computer readable media as used herein includes computer storage media. Computer storage media includes volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions or other data. Memory and storage are examples of computer storage media. Computer storage media includes but is not limited to RAM ROM EEPROM flash memory or other memory technology CD ROM Digital Versatile Disks DVDs or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can be accessed by device . Any such computer storage media may be part of device .

Device may also include communication connection s that allows device to communicate with other devices. Communication connection s may include but is not limited to a modem a Network Interface Card NIC an integrated network interface a radio frequency transmitter receiver an infrared port a USB connection or other interfaces for connecting computing device to other computing devices. Communication connection s may include a wired connection or a wireless connection. Communication connection s may transmit and or receive communication media.

The term computer readable media may include communication media. Communication media typically embodies computer readable instructions or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term modulated data signal may include a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal.

Device may include input device s such as keyboard mouse pen voice input device touch input device infrared cameras video input devices and or any other input device. Output device s such as one or more displays speakers printers and or any other output device may also be included in device . Input device s and output device s may be connected to device via a wired connection wireless connection or any combination thereof. In one embodiment an input device or an output device from another computing device may be used as input device s or output device s for computing device .

Components of computing device may be connected by various interconnects such as a bus. Such interconnects may include a Peripheral Component Interconnect PCI such as PCI Express a Universal Serial Bus USB firewire IEEE 1394 an optical bus structure and the like. In another embodiment components of computing device may be interconnected by a network. For example memory may be comprised of multiple physical memory units located in different physical locations interconnected by a network.

Those skilled in the art will realize that storage devices utilized to store computer readable instructions may be distributed across a network. For example a computing device accessible via network may store computer readable instructions to implement one or more embodiments provided herein. Computing device may access computing device and download a part or all of the computer readable instructions for execution. Alternatively computing device may download pieces of the computer readable instructions as needed or some instructions may be executed at computing device and some at computing device .

Various operations of embodiments are provided herein. In one embodiment one or more of the operations described may constitute computer readable instructions stored on one or more computer readable media which if executed by a computing device will cause the computing device to perform the operations described. The order in which some or all of the operations are described should not be construed as to imply that these operations are necessarily order dependent. Alternative ordering will be appreciated by one skilled in the art having the benefit of this description. Further it will be understood that not all operations are necessarily present in each embodiment provided herein.

Moreover the word exemplary is used herein to mean serving as an example instance or illustration. Any aspect or design described herein as exemplary is not necessarily to be construed as advantageous over other aspects or designs. Rather use of the word exemplary is intended to present concepts in a concrete fashion. As used in this application the term or is intended to mean an inclusive or rather than an exclusive or . That is unless specified otherwise or clear from context X employs A or B is intended to mean any of the natural inclusive permutations. That is if X employs A X employs B or X employs both A and B then X employs A or B is satisfied under any of the foregoing instances. In addition the articles a and an as used in this application and the appended claims may generally be construed to mean one or more unless specified otherwise or clear from context to be directed to a singular form.

Also although the disclosure has been shown and described with respect to one or more implementations equivalent alterations and modifications will occur to others skilled in the art based upon a reading and understanding of this specification and the annexed drawings. The disclosure includes all such modifications and alterations and is limited only by the scope of the following claims. In particular regard to the various functions performed by the above described components e.g. elements resources etc. the terms used to describe such components are intended to correspond unless otherwise indicated to any component which performs the specified function of the described component e.g. that is functionally equivalent even though not structurally equivalent to the disclosed structure which performs the function in the herein illustrated exemplary implementations of the disclosure. In addition while a particular feature of the disclosure may have been disclosed with respect to only one of several implementations such feature may be combined with one or more other features of the other implementations as may be desired and advantageous for any given or particular application. Furthermore to the extent that the terms includes having has with or variants thereof are used in either the detailed description or the claims such terms are intended to be inclusive in a manner similar to the term comprising. 

