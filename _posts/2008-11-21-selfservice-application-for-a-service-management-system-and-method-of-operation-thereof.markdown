---

title: Self-service application for a service management system and method of operation thereof
abstract: A service management system and method. In one embodiment, the service management system includes: (1) a service description repository configured to contain service descriptions that define services in terms of a set of end points that assume roles in the services and (2) a self-service application configured to collect ones of the end points mapped into roles pertaining to one of the services from a corresponding one of the service descriptions, collect key/value pairs on the ones of the end points pertaining to an issue with respect to the one of the services, evaluate the key/value pairs using optimal values and, if a predefined condition regarding the issue is met, attempt to employ the key/value pairs to address the issue.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08949393&OS=08949393&RS=08949393
owner: Alcatel Lucent
number: 08949393
owner_city: Boulogne-Billancourt
owner_country: FR
publication_date: 20081121
---
This application claims the benefit of U.S. Provisional Application Ser. No. 60 989 730 filed by Dholakia et al. on Nov. 21 2007 entitled Method and System for Remote Device Management commonly assigned with this application and incorporated herein by reference. This application is also related to the following U.S. patent applications which are filed on even date herewith commonly assigned with this application and incorporated herein by reference 

This application relates to remote management of fixed line and mobile devices and more particularly to activation provisioning support management and assurance of consumer and business services spanning one or more fixed line devices and one or more mobile devices.

Network service providers are called upon to support a large variety of networked devices including devices coupled to home networks e.g. residential gateways set top boxes and voice over IP or VoIP adapters and cellular networks e.g. smart phones and pocket computers . Given the proliferation of such devices and the distributed nature of the networks involved remote management of such devices is highly desirable.

For example demand for smart phones and other advanced handsets is growing faster than anticipated as users look for new ways to increase their personal and professional productivity. In 2005 year over year growth in the smart phone market exceeded 70 and the industry experts expect that trend to continue for the next several years. In fact by 2009 it is estimated that smart phones will represent almost 30 of all new handsets sold up from less than three percent in 2004.

As smart phones and services for smart phones boom so do the challenges. Today the complexity often associated with smart phones is driving customer service costs up and serves as a potential inhibitor as mobile network operators strive to achieve mass market adoption with these sophisticated devices. In fact consumers are finding mobile services increasingly confusing and issues around ease of use are holding them back from buying and using third generation 3G handsets and services.

Wireless service providers who sell and support smart phones and their associated data services face the prospect of rising customer support costs due to the complexity associated with these devices and services. In 2007 the support costs for smart phones will surpass that of feature phones. The following are few of the top reasons for this support cost.

Similarly network providers that are coupled to home networks e.g. Digital Subscriber Link or DSL and cable find those networks coupled to a variety of customer premises equipment CPE within the homes that are gradually becoming more and more sophisticated. Customer issues with such devices are no less taxing upon support staff and support infrastructure.

The Open Mobile Alliance OMA is currently defining a number of standards for managing functionality on mobile devices. These include protocols for device management OMA DM client provisioning OMA CP firmware updates data synchronization OMA DS and the like. Devices that support at least some of these protocols are becoming prevalent. A support solution that utilizes these protocols and provides a usable console for customer support is the only way network providers and mobile carriers can handle support for the increasing number of devices in the market.

It is therefore desirable to provide a support solution that allows centralized management and control of remotely networked devices such as smart phones and CPE using protocols established for device management updates data synchronization and the like.

Various embodiments of a method and system for providing customer support with centralized management and control of mobile phones and customer premises equipment in order to aid users of such equipment with problems related to that equipment. In one embodiment a user interface driven mechanism is provided to allow customer support representatives to manipulate remote devices in for example the following manners access information about the remote devices and the users thereof including history of issues with a particular device device provisioning access to diagnostics of a device ability to upgrade firmware software of a device synchronization of data enablement of security features remote control of devices service and application provisioning defining and following policies related to service management for a variety of devices and resetting devices. Such functionality can be provided for example through the use of a device management server that uses a variety of appropriate protocols to communicate with the remote devices.

Another aspect provides a service management system. In one embodiment the service management system includes 1 a service description repository configured to contain service descriptions that define services in terms of a set of end points that assume roles in the services and 2 a self service application configured to collect ones of the end points mapped into roles pertaining to one of the services from a corresponding one of the service descriptions collect key value pairs on the ones of the end points pertaining to an issue with respect to the one of the services evaluate the key value pairs using optimal values and if a predefined condition regarding the issue is met attempt to employ the key value pairs to address the issue.

Yet another aspect provides a method of providing self service. In one embodiment the method includes 1 collecting end points mapped into roles pertaining to a service from a corresponding service description 2 collecting key value pairs on the end points pertaining to an issue with respect to the service 3 evaluating the key value pairs using optimal values 4 if a predefined condition regarding the issue is met attempting to employ the key value pairs to address the issue and 5 testing to determine whether the issue is addressed.

The following is intended to provide a detailed description of an example of the invention and should not be taken to be limiting of the invention itself. Rather any number of variations may fall within the scope of the invention which is defined in the claims following the description. The use of the same reference symbols in different drawings indicates similar or identical items.

Described herein are various embodiments of a management system that allows users to create define and maintain services by defining the roles of its constituent devices and systems. Certain embodiments have the ability to map a given set of device and systems into roles. The roles may then be used to select key value pairs alerts and management function from each device. Certain embodiments allow relationships to be specified between roles and between other services. Service wide key value pairs alerts and management functions may be created using the roles and relationships.

In various embodiments to be described and illustrated herein a method apparatus and process are disclosed that allow for activation provisioning support by call center functions or self management by call center functions or self and assurance of consumer and business services spanning one or more fixed line devices and one or more mobile devices such as PCs AAA servers email servers web servers and devices of every kind. Before describing the embodiments an example computing and network environment within which the embodiments may operate will be described.

Communication between the client computers N and the servers N typically occurs over a publicly accessible network such as a public switched telephone network PSTN a DSL connection a cable modem connection or large bandwidth trunks e.g. communications channels providing T1 or OC3 service . The client computers N access the servers N through for example a service provider. This might be for example an Internet Service Provider ISP such as America On Line Prodigy CompuServe or the like. Access is typically had by executing application specific software e.g. network connection software and a browser on the given one of the client computers N .

One or more of the client computers N and or one or more of the servers N may be for example a computer system of any appropriate design in general including a mainframe a mini computer or a personal computer system. Such a computer system typically includes a system unit having a system processor and associated volatile and non volatile memory one or more display monitors and keyboards one or more diskette drives one or more fixed disk storage devices and one or more printers. These computer systems are typically information handling systems which are designed to provide computing power to one or more users either locally or remotely. Such a computer system may also include one or a plurality of I O devices i.e. peripheral devices which are coupled to the system processor and which perform specialized functions. Examples of I O devices include modems sound and video devices and specialized communication devices. Mass storage devices such as hard disks CD ROM drives and magneto optical drives may also be provided either as an integrated or peripheral device. One such example computer system discussed in terms of the client computers N is shown in detail in .

It will be noted that the variable identifier N is used in several instances in to more simply designate the final element e.g. the servers N and the client computers N of a series of related or similar elements e.g. servers and client computers . The repeated use of such variable identifiers is not meant to imply a correlation between the sizes of such series of elements although such correlation may exist. The use of such variable identifiers does not require that each series of elements has the same number of elements as another series delimited by the same variable identifier. Rather in each instance of use the variable identified by N may hold the same or a different value than other instances of the same variable identifier.

The bus allows data communication between a central processor and a system memory which may include RAM ROM or flash memory as previously noted. The RAM is generally the main memory into which the operating system and application programs are loaded and typically affords at least megabytes of memory space. The ROM or flash memory may contain among other code the Basic Input Output system BIOS which controls basic hardware operation such as the interaction with peripheral components. Applications resident with the computer system are generally stored on and accessed via a computer readable medium such as a hard disk drive e.g. fixed disk an optical drive e.g. CD ROM drive a floppy disk unit or other storage medium. Additionally applications may be in the form of electronic signals modulated in accordance with the application and data communication technology when accessed via a network modem or an interface .

The storage interface as with the other storage interfaces of the computer system may connect to a standard computer readable medium for storage and or retrieval of information such as a fixed disk drive . The fixed disk drive may be a part of computer system or may be separate and accessed through other interface systems. Many other devices can be connected such as a mouse connected to the bus via serial port a modem connected to the bus via serial port and a network interface connected directly to the bus . The modem may provide a direct connection to a remote server via a telephone link or to the Internet via an internet service provider ISP . The network interface may provide a direct connection to a remote server via a direct network link to the Internet via a POP point of presence . The network interface may provide such connection using wireless techniques including digital cellular telephone connection Cellular Digital Packet Data CDPD connection digital satellite data connection or the like.

Many other devices or subsystems not shown may be connected in a similar manner e.g. bar code readers document scanners digital cameras and so on .

Conversely it is not necessary for all of the devices shown in to be present to practice the invention. The devices and subsystems may be interconnected in different ways from that shown in . The operation of a computer system such as that shown in is readily known in the art and is not discussed in detail in this application. Code to implement the invention may be stored in computer readable storage media such as one or more of the system memory the fixed disk the CD ROM or the floppy disk . Additionally the computer system may be any kind of computing device and so includes personal data assistants PDAs network appliance X window terminal or other such computing device. The operating system provided on the computer system may be MS DOS MS Windows OS 2 UNIX Linux or other known operating system. The computer system may also support a number of Internet access tools including for example a Hypertext Transfer Protocol HTTP compliant web browser having a JavaScript interpreter such as Netscape Navigator 3.0 Microsoft Explorer 3.0 and the like.

The foregoing described embodiment wherein the different components are contained within different other components e.g. the various elements shown as components of the computer system . It is to be understood that such depicted architectures are merely examples and that in fact many other architectures can be implemented which achieve the same functionality. In an abstract but still definite sense any arrangement of components to achieve the same functionality is effectively associated such that the desired functionality is achieved. Hence any two components herein combined to achieve a particular functionality can be seen as associated with each other such that the desired functionality is achieved irrespective of architectures or intermediate components. Likewise any two components so associated can also be viewed as being operably connected or operably coupled to each other to achieve the desired functionality.

Referring to and a browser running on the computer system employs a TCP IP connection to pass a request to the server which can run an HTTP service e.g. under the WINDOWS operating system or a daemon e.g. under the UNIX operating system for example. Such a request can be processed for example by contacting an HTTP server employing a protocol that can be used to communicate between the HTTP server and the client computer. The HTTP server then responds to the protocol typically by sending a web page formatted as an HTML file. The browser interprets the HTML file and may form a visual representation of the same using local resources e.g. fonts and colors .

The functions referred to herein may be modules or portions of modules e.g. software firmware or hardware modules . For example although the described embodiment includes software modules and or includes manually entered user commands the various example modules may be application specific hardware modules. The software modules discussed herein may include script batch or other executable files or combinations and or portions of such files. The software modules may include a computer program or subroutines thereof encoded on computer readable media.

Additionally those skilled in the art will recognize that the boundaries between modules are merely illustrative and alternative embodiments may merge modules or impose an alternative decomposition of functionality of modules. For example the modules discussed herein may be decomposed into sub modules to be executed as multiple computer processes and optionally on multiple computers. Moreover alternative embodiments may combine multiple instances of a particular module or sub module. Furthermore those skilled in the art will recognize that the functions described in example embodiment are for illustration only. Operations may be combined or the functionality of the functions may be distributed in additional functions in accordance with the invention.

Alternatively such actions may be embodied in the structure of circuitry that implements such functionality such as the micro code of a complex instruction set computer CISC firmware programmed into programmable or erasable programmable devices the configuration of a field programmable gate array FPGA the design of a gate array or full custom application specific integrated circuit ASIC or the like.

Each of the blocks of the flow diagram may be executed by a module e.g. a software module or a portion of a module or a computer system user using for example a computer system such as the computer system . Thus the above described method the functions thereof and modules therefore may be executed on a computer system configured to execute the functions of the method and or may be executed from computer readable media. The method may be embodied in a machine readable and or computer readable medium for configuring a computer system to execute the method. Thus the software modules may be stored within and or transmitted to a computer system memory to configure the computer system to perform the functions of the module.

Such a computer system normally processes information according to a program a list of internally stored instructions such as a particular application program and or an operating system and produces resultant output information via I O devices. A computer process typically includes an executing running program or portion of a program current program values and state information and the resources used by the operating system to manage the execution of the process. A parent process may spawn other child processes to help perform the overall functionality of the parent process. Because the parent process specifically spawns the child processes to perform a portion of the overall functionality of the parent process the functions performed by child processes and grandchild processes etc. may sometimes be described as being performed by the parent process.

Such a computer system typically includes multiple computer processes executing concurrently. Often a computer system includes a single processing unit which is capable of supporting many active processes alternately. Although multiple processes may appear to be executing concurrently at any given point in time only one process is actually executed by the single processing unit. By rapidly changing the process executing a computer system gives the appearance of concurrent process execution. The ability of a computer system to multiplex the computer system s resources among multiple processes in various stages of execution is called multitasking. Systems with multiple processing units which by definition can support true concurrent processing are called multiprocessing systems. Active processes are often referred to as executing concurrently when such processes are executed in a multitasking and or a multiprocessing environment.

The software modules described herein may be received by such a computer system for example from computer readable media. The computer readable media may be permanently removably or remotely coupled to the computer system. The computer readable media may non exclusively include for example any number of the following magnetic storage media including disk and tape storage media. optical storage media such as compact disk media e.g. CD ROM CD R etc. and digital video disk storage media nonvolatile memory storage memory including semiconductor based memory units such as flash memory EEPROM EPROM ROM or application specific integrated circuits ASICs volatile storage media including registers buffers or caches main memory RAM and the like and data transmission media including computer network point to point telecommunication and carrier wave transmission media. In a UNIX based embodiment the software modules may be embodied in a file which may be a device a terminal a local or remote file a socket a network connection a signal or other expedient of communication or state change. Other new and various types of computer readable media may be used to store and or transmit the software modules discussed herein.

Before describing various embodiments of management systems constructed according to the principles of the invention some use cases or interactions will be described that provide a framework for understanding the management systems. Various of the embodiments of the management systems are directed to addressing the following categories of use cases or interactions service activation service management service interruption and resumption and service offering. Service activation refers to all the use cases that involve creating provisioning and deleting unprovisioning a new service instance or subscription. Service management refers to day to day management tasks involving a given service or subscription. Service interruption and resumption may be thought of as special types of service management that involve the loss and restoration of service. Service offering refers to new services that may be offered to a subscriber.

The categories of use cases that set forth above may be illustrated with reference to . is a diagram illustrating relationships that may exist among a subscriber a service and various devices and systems . A service provider such as a cellular phone company an Internet service provider a cable television company or a combination of these offers one or more services to subscribers that involve devices and systems such as cell phones set top boxes routers cell towers email servers DSLAMs landline phones and other mobile and customer premises equipment and network infrastructure. In the context of the subscriber takes out a subscription to a service offered by a service provider. The subscription contains state and other information that is both relative to the subscriber and the service . The subscription calls for one or more associations to be made between the subscriber and various devices and systems . The subscriber may own or lease one or more devices . The subscriber may also be associated with one or more systems . Once the associations are made the devices and systems assume roles in delivering the service to the subscriber . The roles describe to the service management system how the device should be managed.

To activate a device one of the devices and systems for a subscriber the following steps may be taken. First for a given device the subscriber associated with that device is found. This is done by employing the associations . Once the associated subscriber has been identified a corresponding subscription may then be used to determine the service or services that should be provisioned on the device . For each service that needs to be activated on the device two alternative actions may be taken. Based upon the role the device plays with respect to the service settings on the device may be set to provision the device. Alternatively or additionally based on the roles of other devices and systems relative to the service settings on the other devices and systems may be set to provision them for the new device s presence.

Managing and provisioning a subscription involves either adding a new service to a subscriber or managing an existing service. To manage and provision a subscription for a subscriber the following steps may be taken. First a service is added to a subscriber or an existing service is modified. Devices and systems associated with the subscriber are collected. Then each device associated with the service is mapped into the different roles in the targeted service. This reveals what actions should be taken with respect to each device or system to provision the service .

Another use case that is a variant on the one above is a bulk change to an existing service for all subscribers. In this use case existing subscriptions are retrieved to obtain a list of subscribers. Then a list of devices and systems is assembled for each subscriber. Using roles changes are then applied to the devices and systems to enable the bulk change.

Having described various use cases one manner in which interaction may occur among roles devices and systems and the service level management interfaces will now be described. is a diagram of one embodiment of a service description . shows that the service description includes service alerts functions and key value pairs . Roles are associated with the service alerts the functions and the key value pairs . The roles designated Role A Role B and Role C are associated as shown with the service alerts the functions and the key value pairs as various arrows show. Meta data is also associated with the key value pairs . Devices or systems are associated with the roles as various arrows show.

To make a role useful the role is matched with a device. is a diagram illustrating relationships that may exist among management functions i.e. values alerts and functions roles e.g. capabilities and attributes and devices and systems e.g. . In the embodiment of the mechanism for doing this is twofold. First a role may be matched to a device or a system based on the known attributes of the device or system. Second a role may be matched to a device or a system based upon the known capabilities of the device or system.

Device attributes are known aspects of the device e.g. the type serial number MAC address manufacture date make model service tags device ID or operating system of the device or system. Other attributes may include the firmware version hardware version embedded device locale language and physical location. Device attributes in the simplest form could be a list of known key value pairs associated to the device.

Capabilities are similar to device attributes. In this case instead of a list of key value pairs these are a list of values without the key of known capabilities about the device e.g. generic email client Microsoft Outlook email client phone router or IPTV device. Other examples include network attached storage media server media renderer camera MMS client SMS client wireless access provider wireless access client printer GPS vibrate Bluetooth USB Wi Fi clock browser QVGA flight mode caller ID touchscreen or fax.

Both the capabilities and the attributes can be provided to or retrieved from an external system deduced or derived from known attributes and capabilities queried directly from the device or system or a combination of these. For example prior knowledge may exist that any device that has a serial number from a given manufacture starting with the letter W has built in Wi Fi capabilities or that Windows Mobile phone supports OMA DM.

It can be determined whether a given device or system matches a role by matching its attributes and capabilities derived discovered or known against the required attributes and capabilities of a given role. Each role defines a set of key value pairs alerts and functions that are relevant for devices of that role in the service description.

It should be noted that roles do not imply device type model or brand. Direct mappings between devices and roles may occur in practice but the mappings are flexible such that they may change as device attributes or capabilities change. For example newer devices may support more roles than do older devices. One example of a role is a phone capable of functioning as an email client may play an EmailClient role in a service description associated with an email service. Other roles in an email service may include SMTPServer POPServer and IMAPServer. Roles in a data connectivity service may include Host Router Wireless Access Point Head End Border Gateway and Authentication Authorization Account Server. 

The service normalization block employs an application programming interface API allowing it to exchange information with an interactive voice response IVR system a console for a customer service representative CSR a Self Service Management SSM application module and other applications as may be found advantageous in a particular environment.

The optimal settings block is a repository of predefined known good values used for the purposes of comparing key value pairs to determine diagnostic and state information. The key value pairs are also used during provisioning to set up a system or a device. The optimal settings block may be regarded as a configuration repository that contains meta data about the configuration so that applications and other systems can look up known good values for the purpose of configuring provisioning diagnostic and repair. The illustrated embodiment of the optimal settings block is configured to define optimal values for any given key value pair based on the context of the device subscriber customer or any other segmentation scheme that could be use to define different values for the same attribute key . These values may be used by both the script engine and directly by the service management engine to determine whether or not a given key value pair is optimal. Optimal values may fall into three categories 1 values predefined in the context of the service as being correct 2 values defined based by a call to an extrinsic system or by subscriber input as being correct and 3 absolute values which is often built into the logic of the script or service description logic and not stored externally . An example of a predefined optimal value is a POP server. The subscriber is aware of its identity and it is the same for all subscribers. An example of an absolute value is connectivity good. An example of a value defined by a subscriber as being correct is a password something that the subscriber chooses and is not defined before the subscriber chooses it.

The device normalization block is configured to map normalized key value pairs to device specific or system specific key value pairs. Mapping may be performed by transformation executing a script or undertaking any other appropriate normalization mechanism.

The diagnostic engine is configured to contain diagnostic rules and cause diagnostic rules to be executed in order to identify characterize and present potential solutions to problems that may exist with devices or systems. The content repository is configured to provide a channel independent mechanism for associating bearer e.g. IVR voice flows self service portal web content and customer service articles to diagnose a problem.

The segmentation block and knowledge base likewise employ a data sources abstraction layer allowing it to communicate with systems and provisioning servers and device managers .

Different subscribers subscribe to different levels of service and live in different locations and under different circumstances. The segmentation block is configured to enable other portions of the service management system to tailor responses to a subscriber based on his level of service location and or circumstance.

The knowledge base is configured to contain articles associated with known device system and or service problems. When the diagnostic engine identifies a problem area or a specified problem it may provide articles from the knowledge based to an application to allow the application to provide the article in turn to a subscriber or other user for informational purposes.

The data sources abstraction layer is configured to operate as a protocol implementation and adaptation layer allowing generic logic to interact with specific devices and systems without having to employ a device specific or system specific protocol.

The systems are typically added by a particular service provider and interact with the service management system as needed. The provisioning servers and device managers support various devices intended for use by subscribers. In the illustrated embodiment the provisioning servers and device managers are management systems that manage large groups of devices that typically share the same protocol e.g. a mobile device manager that manages million phones using the OMA DM protocol . The devices are just CPE such as phones and routers.

A service management engine enables a service provider to implement and manage services by means of the service normalization block according to the various use cases described above. The illustrated embodiment of the service management engine functions in two primary ways. First the service management engine manages functions defined by service descriptions. Second the service management engine provides a dynamic view of a given service.

The management of functions allows service descriptions to define named functions that can be called with contextual data derived from analyzing constituent devices and systems in their associated roles of a service.

The provision of a dynamic view of a given service enables a service description to associate key value pairs data with different roles and dynamically to gather data from the devices and systems so that data can be presented without the need for intrinsic knowledge of the data that is being collected. For example a service view dashboard capable of creating a map of devices with their associated data of interest each categorized by their role in the service may employ dynamic views of services. In the illustrated embodiment the data itself is self describing and typically presented in tabular form.

In an alternative embodiment the service management engine is also capable of providing a view of a given service in which case the application does have prior intrinsic knowledge regarding the data that is being collected.

The first step in managing the service is to collect a list of the devices and systems that are associated to the subscriber of the service. A device repository serves this purpose. In the illustrated embodiment the device repository is external to the service normalization block .

The service management engine employs a capabilities repository to obtain an expanded view on the capabilities of a device so that it may map it into a role. Often the only pieces of information obtained from extrinsic systems are the unique identifier of the device e.g. its make and model. A device may be viewed as a list of attributes e.g. further key value pairs . From those attributes the capabilities of the device may be extrapolated. Extrapolation may involve expanding the known attributes of a device by deriving new attributes of a device based on the original attributes. For example once the make and model of a system or device is obtained by means of a query built in rules may then be able to determine whether or not it has Wi Fi capability.

A service description repository contains service descriptions. As described above a service description includes at least some of functions key value pairs alerts roles along with their associated key value pairs alerts and actions and relationships. Functions at the service description level can be actions exposed by a device a script that can be executed or a process a series of scripts executed in a state engine .

A script engine is configured to execute service level functions. As described previously a service level function could be a script a process or action a series of scripts or any other type of computer program. In the illustrated embodiment the service management engine retrieves a named script from a service description based on an event or request from a consumer of the service and passes it along with a set of parameters to the script engine for execution. In the illustrated embodiment the set of parameters includes references to the constituent devices categorized by role and the service description. The script once started has access to the optimal values the devices and systems abstracted by device normalization or directly and the service management system in general.

The service normalization block has access to a capabilities repository . The capabilities repository is configured to derive new attributes and capabilities through rules based on existing known attributes. For example it is known that Windows Mobile cell phones have Internet browsers.

The service normalization block employs the device normalization engine configured to create an abstraction that provides a normal view of extrinsic device and systems. This allows the service description to be defined generically for devices and systems of the same class without having to include logic and cases for each device. For example if one device is managed by OMA DM and has an email client while another device that also has an email client is managed by Digital Subscriber Line DSL Forum standard TR both devices will have a Simple Mail Transfer Protocol SMTP server. However the manner in which values are obtained can differ by protocol OMA DM versus TR and by key the name for the value .

At least some of the systems and devices have the capability to generate alerts or events. The alert event engine is configured to receive these alerts or events and apply them against each service description to determine whether the alert applies to that service description. If a particular alert or event does apply to a particular service the service management system is configured to obtain a corresponding action script or process from the service description that may be executed to respond to the alert or event.

Described hereinafter are various embodiments of self service applications for a service management system and methods of operation thereof. In general the embodiments enable a subscriber to manage diagnose and repair devices and systems they possess e.g. cellphones set top boxes and PCs using the service management system as a powerful resource for analyzing issues and presenting possible solutions. Alternative embodiments are configured to serve content locally i.e. the application is installed on a computer located proximate a subscriber or other user or remotely e.g. a web server . Overall various of the embodiments guide the subscriber or user which may be an entity of any kind to develop a fundamental understanding of an issue that may be structured such that the application presents the subscriber or user a logical set of steps required to diagnose and resolve an issue.

Conventional self service applications either mine backend systems or a local computer system to collect data about a specific issue area present a structured set of steps that takes a user through the repair sequence and then either confirm the issue has been resolved or escalate the issue to a customer service representative. In contrast various embodiments of the self service application described herein employ the resources of a service management system containing associations subscriptions and roles that interrelate subscribers services and the devices and systems that play roles to bring the services to the subscribers. These resources significantly enhance the self service application allowing it to respond to issues more comprehensively and accurately.

It can be seen in the example method of that the self service application uses the service management system to 1 map a service s constituent devices and systems into roles 2 collect functions for the constituent devices and systems based on the service description and the roles that they have been assigned and 3 determine the relevant key value pairs for a given device or system in the service based upon its role.

Two alternative embodiments are therefore possible depending upon whether or not the self service application has been coded to provide self service for a particular service description or has been coded to provide self service for more than one service description.

According to a first alternative embodiment in which the self service application has been coded to provide self service for a particular service description the self service application may for example employ the service description for which it has been coded to impress order upon the dynamic set of devices and systems that compose the service. Through the service description the self service application is aware of the roles the key value pairs and one or more functions exposed by each device or system and can use those to perform management diagnostic provisioning and repair operations on the service. In this embodiment the application has a fundamental understanding of the key value pairs presented and may also include business logic to perform complex functions where the relationships between the key value pairs and function is known.

For example an ordered set of operations needed to perform an action may exist for a particular service. The ordering of the set constitutes the intrinsic knowledge with which the application is coded. A specific example of an ordered set of operations may be found in email provisioning in which email service is activated for a particular subscriber. Upon being invoked the self service application employs the email service description to inspect devices and systems pertaining to the email service to determine what steps need to be performed with respect to each device or system to provision the service for the subscriber. For devices that fit the email client role the self service application sets up an email account to reference the appropriate email server. For the email server role the self service application creates an account on the email server and causes the server to allocate the appropriate resources to support the created account. After the self service application sets up the email client and email server it then causes a final test to be run to verify the correct provisioning of the email service for the subscriber. The final test cannot be run before the email client and one or more email servers are properly configured. Thus provisioning an email service is an operation that should occur in a specific order.

According to the second alternative embodiment the self service application has not been coded to provide self service for a particular service description and instead is operable with respect to multiple service descriptions. The self service application then proceeds in a non service specific way using data in the service definition to perform management operations and or diagnostics.

An example of a self service application that has been coded to provide self service for more than one service description is an application that provides a backup and restore function where every constituent device and system that performs a role with respect to a service has its key value pairs backed up or restored to a previous checkpoint. The subscriber or other user directs the self service backup restore application to perform its function with respect to a particular service. The self service application then employs the corresponding service description to identify the key value pairs in the devices and systems for which the backup restore function is to be carried out and carries the function out as directed. The service description with its roles identifies the specific key value pairs that are of interest for that service.

In various embodiments the self service application and method are configured to compare key value pairs identified by a service management system against optimal values established by dynamically computing predefined definitions or user input for the purposes of activating diagnosing collecting status on and repairing a service. Other embodiments are configured to use key value pairs and functions identified by the service management system to perform configuration tasks on a given service s constituent devices and systems for the purposes of activating diagnosing collecting status on and repairing a service. Still other embodiments are configured to take a snapshot of i.e. checkpoint key value pairs identified by a service management system for the purposes of creating a backup of a services configuration. Yet other embodiments are configured to take a snapshot of key value pairs identified by a service management system for the purposes of establishing a baseline set of values for future comparisons to determine what is changed.

Some embodiments are configured to use the key value pairs and functions exposed by the service management system to create business logic that is both intrinsically and or dynamically aware of the service definition for the purposes of activating diagnosing collecting status on and repairing a service. Other embodiments are configured to use the key value pairs and functions exposed by the service management system to create tests for the purposes of diagnostic and state determination. Still other embodiments are configured to present the functions collected from the service management system directly or indirectly as tasks to a service subscriber for the purposes of allowing the scriber to manage activate diagnose collect status on and repair a service.

In various other embodiments the self service application and method are configured to provide service monitoring capabilities to a subscriber for their subscription by creating business logic that inspect the key value pairs and functions exposed by the service management system for the purposes of proactively identifying potential errors mis configuration and or a state of which the service subscriber wishes to be notified. Still other embodiments are configured to make branching decisions in both logic steps and user interface elements for the purposes of affecting the behavior of the application based upon the functions and key value pairs exposed by the service management service for the purposes of allowing the scriber to manage activate diagnose collect status on and or repair a service.

Yet further embodiments are configured to present the subscriber with a visual representation of the state of service and its constituent devices and systems for the purposes of allowing the scriber to manage activate diagnose collect status on and repair a service.

Many of these and other embodiments are capable of presenting a user interface. As part of that function the embodiments are configured to determine dynamic resolutions steps based on data coming from the service management system dynamically determine what data is shown to a subscriber based on data coming from the service management system and present management actions to a subscriber in the context of a self service action using data coming from the service management system.

Those skilled in the art to which this application relates will appreciate that other and further additions deletions substitutions and modifications may be made to the described embodiments.

