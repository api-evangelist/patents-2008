---

title: Decision service for applications
abstract: A decision service is described that provides a decision making process for an application. The decision service includes a runtime interface, a resolver interface, and an inference engine. The runtime interface is configured to receive a request from an application to generate a decision. The resolver interface is configured to invoke one or more fact resolver modules to determine corresponding fact values. The inference engine is configured to communicate with the resolver interface to determine a plurality of fact values, and to compare the determined plurality of fact values to one or more rows of a decision table to determine a matched row. The decision provided by the decision service is a conclusion corresponding with the matched row of the decision table.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08165984&OS=08165984&RS=08165984
owner: Microsoft Corporation
number: 08165984
owner_city: Redmond
owner_country: US
publication_date: 20080328
---
Many types of applications exist that run on computer systems. System software and application software are two types of computer based applications. System software manages and controls computer hardware so that application software can perform tasks. Examples of system software include operating systems and device drivers. Application software applies the capabilities of computer systems to tasks. Examples of application software include media players word processors and spreadsheets.

Some applications incorporate complex logic that handles many conditions and exceptions. For example an application or group of applications may manage a cluster of servers that host a website. Such applications may include complex logic to manage the serving of content requested from the websites to perform the pushing of software updates to user computers to handle error conditions and or to perform other functions for the websites. In some cases application complexity has grown large enough to make the applications challenging to maintain.

The growing complexity of applications has led to the inclusion of computer code in applications that is difficult to read to understand to modify and to enhance. Such applications may be difficult to fully test due to many variables and conditional outcomes. Furthermore this complexity has resulted in processing that is hard to audit for correctness. For example when evaluating application performance it may difficult to determine why a particular function was performed to determine what is supposed to happen when a particular combination of events occur and to determine further logical outcomes of processing performed by the application. Ways of reducing the complexity of applications are desired so that the resulting problems may be reduced or eliminated entirely.

This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter nor is it intended to be used to limit the scope of the claimed subject matter.

A decision service is described herein that is configured to perform a decision making process. The decision service may enable a reduction in the complexity of the design and or construction of an application by performing one or more decision making processes for the application. In some example aspects the decision service may be configured to perform one or more functions for an application to test one or more functions of an application and or to otherwise assist with and or take over decision making processes related to an application.

In accordance with one implementation a decision service includes a runtime interface a resolver interface and an inference engine. The runtime interface is configured to receive a request from an application to generate a decision. The resolver interface is configured to invoke one or more fact resolver modules to determine corresponding fact values for the inference engine. The inference engine is configured to determine a plurality of fact values to communicate with the resolver interface to determine at least one fact value of the plurality of fact values and to compare the determined plurality of fact values to one or more rows of a decision table to determine a matched row. The decision table includes columns that list required fact values for the determined plurality of fact values. Each row of the decision table has a corresponding conclusion. The inference engine is configured to set a decision to the conclusion corresponding with the matched row of the decision table. The runtime interface is configured to transmit the decision to the requesting application.

The decision service may further include a configuration interface. The configuration interface enables a user to configure a decision tree having a plurality of nodes and branches to model a decision making process. The configuration interface is configured to generate the decision table from the decision tree such that each column of the decision table corresponds to a node of the decision tree. Furthermore the configuration interface may be configured to enable the user to provide the fact resolver modules to the decision service.

The decision service may further include a client assembly generator. The client assembly generator is configured to generate a client assembly that performs a decision making process in a stand alone configuration. For instance the client assembly generator may generate the client assembly to include a copy of the inference engine of the resolver interface of the runtime interface of the decision table and of the fact resolver modules.

Methods for performing a decision making process are also described. In one method a request is received from an application to generate a decision. A plurality of fact values is determined in response to the request. The determined plurality of fact values is compared to one or more rows of a decision table to determine a matched row. The decision is set to a conclusion corresponding to the matched row of the decision table. The decision is transmitted to the requesting application.

In one implementation fact values may be determined and compared to rows of the decision table on a column by column basis.

For example a comparison may be performed in a column by column basis as follows. A first row of the decision table may be set to a current row. A first column of the decision table may be set to a current column. Whether a first determined fact value matches the required fact value in the current column and current row of the decision table is determined. If the determined fact value does not match the required fact value in the current column and current row a next row of the decision table is set to the current row and the matching is repeated. If the determined fact value does match the required fact value in the current column and current row whether a next column is present in the decision table is determined. If a next column is not present in the decision table the comparison is complete and the conclusion corresponding to the current row is selected. If a next column is present in the decision table the next column of the decision table is set to the current column. Whether a non null fact value is required for the current column is determined. If a fact value is required for the current column a fact value corresponding to the current column is determined and the matching is repeated using this determined fact value. If a fact value is not required for the current column the determination is repeated of whether a next column is present in the decision table.

A computer program product is also described herein that enables performance of decision making processes.

Further features and advantages of the invention as well as the structure and operation of various embodiments of the invention are described in detail below with reference to the accompanying drawings. It is noted that the invention is not limited to the specific embodiments described herein. Such embodiments are presented herein for illustrative purposes only. Additional embodiments will be apparent to persons skilled in the relevant art s based on the teachings contained herein.

The features and advantages of the present invention will become more apparent from the detailed description set forth below when taken in conjunction with the drawings in which like reference characters identify corresponding elements throughout. In the drawings like reference numbers generally indicate identical functionally similar and or structurally similar elements. The drawing in which an element first appears is indicated by the leftmost digit s in the corresponding reference number.

The present specification discloses one or more embodiments that incorporate the features of the invention. The disclosed embodiment s merely exemplify the invention. The scope of the invention is not limited to the disclosed embodiment s . The invention is defined by the claims appended hereto.

References in the specification to one embodiment an embodiment an example embodiment etc. indicate that the embodiment described may include a particular feature structure or characteristic but every embodiment may not necessarily include the particular feature structure or characteristic. Moreover such phrases are not necessarily referring to the same embodiment. Further when a particular feature structure or characteristic is described in connection with an embodiment it is submitted that it is within the knowledge of one skilled in the art to effect such feature structure or characteristic in connection with other embodiments whether or not explicitly described.

Embodiments of a decision service are described herein. The decision service enables a reduction in the complexity of the design and or construction of applications. A user may configure the decision service to perform one or more decision making processes for an application. In an embodiment the user provides a decision sequence in the form of a decision tree that includes nodes and branches. The decision tree represents a flow of the decision making process. The user further provides one or more fact resolvers for making decisions at nodes of the decision tree. The decision service converts the decision tree into the form of a decision table and uses the decision table and fact resolvers to perform a decision making process.

Application may communicate with decision service to cause decision service to perform one or more decision making processes for application by transmitting a first communication signal to decision service . First communication signal may include one or more signals configured to set up and initiate the functionality of decision service . First communication signal may optionally include values for one or more variables to be used by decision service when performing its functions.

In response decision service may communicate with application by transmitting a second communication signal to application . Second communication signal may include one or more decision results generated by decision service . Second communication signal may further optionally include one or more intermediate decision results and or variable values.

Application may be any type of application such as system software or application software. For example in a system software embodiment application may be an operating system a component of an operating system a control system a device driver a web service a website server or any other application that controls computer hardware and or software and or performs other system task. In an application software embodiment application may be a media player a word processor a spreadsheet or any other type of computer application.

Decision service may be configured to perform a decision making process for any type of application including performing a decision making process related to system software or application software. Example decision making processes for decision service include performing decision making processes for an operating system e.g. processor load balancing network load balancing for a device driver for a web service for a website server e.g. managing software update patch delivery bandwidth for a media player application for a word processor application for a spreadsheet application and for any other type of application. Decision service may be configured to perform diagnostic determinations to implement a wizard style user interface to implement online questionnaires to perform control system functions etc. Decision service may be implemented in hardware software firmware or any combination thereof. For example in an embodiment decision service may be implemented as computer code that is executed by one or more processors in one or more computer systems.

Decision service and application may communicate with each other in a variety of ways. For example shows a decision service system that is an example embodiment of system shown in . In the embodiment of decision service and application communicate with each other through a network. As shown in system includes a first computer system a network and a second computer system . First computer system includes a network interface and decision service . Second computer system includes a network interface and application .

Decision service is coupled to network interface in computer system and application is coupled to network interface in computer system . Network interface enables decision service to communicate over network and network interface enables application to communicate over network . For example network interface may transmit first communication signal through network for application . Network interface receives first communication signal and provides information contained in first communication signal to decision service . Network interface transmits second communication signal through network for decision service . Network interface receives second communication signal and provides information contained in second communication signal to application .

Each of computer systems and may be any type of computer system including being a server a personal computer a mobile computer etc. Examples of computer systems and are further described elsewhere herein. Network may include any type of network such as a local area network LAN or a wide area network WAN or a combination networks such as the Internet. Network interfaces and may be any type of network interface including an Ethernet network card e.g. a network interface controller card NIC a wireless network interface e.g. an 802.11 wireless LAN card etc.

Decision service may be configured in a variety of ways to perform its functions. For instance shows a block diagram of a decision service according to an example embodiment. Decision service is an example of decision service shown in . As shown in decision service includes a configuration interface storage a runtime interface an inference engine and a resolver interface . These elements of decision service are described in detail in the following subsections.

Configuration interface is an interface that enables users to configure decision service to perform decision making processes for applications such as application shown in . For example in an embodiment configuration interface may enable a user to configure a decision making process in the form of a decision tree. By enabling a user to configure a decision making process as a decision tree configuration interface provides an intuitive design interface as decision trees are well known.

In step a decision tree is enabled to be configured that has a plurality of nodes and branches. For example in an embodiment configuration interface enables a user to configure a decision tree to model a decision making process to be performed for application . Configuration interface may include a user interface such as a graphical user interface GUI which provides tree modeler capability. The user interface may enable the user to view create and or modify decision tree in order to configure decision processing. Configuration interface may be implemented in hardware software firmware or any combination thereof to enable a user to configure a decision tree. For example configuration interface may provide a Web based application a website or other network interface or an application such as a Microsoft Windows desktop application that enables the user to configure decision tree .

Decision tree may be represented as a hierarchical diagram by interface . For instance shows an example embodiment of a decision tree . In decision tree is shown including first fifth decision nodes . Decision tree may include any number of decision nodes in embodiments. Each decision node of decision tree represents a fact to be determined if the particular node is reached. Decision nodes are interconnected by radiating branches in decision tree which terminate at conclusions . For instance in the example of first sixth conclusions are present. Decision tree may include any number of conclusions in embodiments. Conclusions are the results of the decision making process provided by decision tree . A single conclusion is reached in decision tree during a particular decision making process and a value of the reached conclusion is returned as a decision making result. A first path and a second path both project from each decision node . The first and second paths and each project to a respective next decision node or to a conclusion .

The configuration of decision tree shown in is described as follows for illustrative purposes. In the example of decision node is a root decision node at which a decision making process related to decision tree begins. With regard to first decision node first path projects to second decision node and second path projects to third decision node . With regard to second decision node first path projects to fourth decision node and second path projects to conclusion . With regard to third decision node first path projects to conclusion and second path projects to conclusion . With regard to fourth decision node first path projects to conclusion and second path projects to fifth decision node . With regard to fifth decision node first path projects to conclusion and second path projects to conclusion

In embodiments decision tree may be configured using configuration interface to model many types of decision making processes. Configurations for decision tree to model a particular decision making process will be known to persons skilled in the relevant art s .

In step one or more fact resolver modules configured to perform fact resolving functions are enabled to be provided. For example in an embodiment configuration interface enables the user to load a fact resolver library . Fact resolver library includes one or more fact resolvers modules that are configured to perform decisions at decision nodes of the decision tree configured in step . Whether first path or second path is chosen from a particular decision node in decision tree depends on the fact resolution performed by a fact resolver module corresponding to the decision node . Fact resolver library is stored in storage .

At each decision node in decision tree a decision is made which determines whether the corresponding first or second path or is traversed from the decision node . The decision is made by resolving a fact corresponding to the decision node . The value of the fact may already be known or the fact value may be determined by accessing a fact resolver module that corresponds to the decision node . In an embodiment fact resolver module may resolve a fact value for a decision node as being true or false or the fact value may remain unknown null. Branch is traversed from the decision node in decision tree if the fact is resolved as being true. Branch is traversed from the decision node in decision tree if the fact is resolved as being false.

Note that in further embodiments a fact resolver module may be capable of resolving a fact value having values other than true or false including having a numerical value a string value etc. In such an embodiment branches may be traversed based on the resulting numerical value string value etc. Furthermore any number of branches may project from a decision node depending on the number of possible resulting numerical values string values etc. for the resolved fact value.

Referring back to in step a decision table is generated from the decision tree such that each column of the decision table corresponds to a node of the plurality of nodes. For example as shown in decision table may be generated by configuration interface from decision tree . shows an example embodiment of a decision table generated from decision tree shown in . In the example of decision table has five columns conclusions and six rows . Although represented in in table form decision table may be stored in storage in any suitable data structure configuration. Configuration interface generates decision table such that each column corresponds to a node of decision tree and each row corresponds to a distinct complete path through decision tree from the source node that leads to a conclusion. A decision table may have any number of columns and rows depending on a number of nodes and conclusions present in the corresponding decision tree.

For instance in decision table has five columns corresponding to the five decision nodes of decision tree . Each of columns lists required fact values e.g. true or false or a null value for a resolution of the fact of the corresponding one of decision node . Each of rows of decision table corresponds to a respective one of conclusions of decision tree . For instance as shown in with regard to row of decision table if the fact with regard to node is resolved to be true the fact with regard to node is resolved to be true the fact with regard to node is resolved to be true then conclusion is reached. Likewise with regard to row of decision table if the fact with regard to node is resolved to be false the fact with regard to node is resolved to be true then conclusion is reached.

Referring back to decision table and fact resolver library are referenced by inference engine to make a decision. Inference engine uses decision table as a representation of the decision making process provided by a user as decision tree . Decision table may be easier to be processed by inference engine relative to decision tree and thus decision table is generated by configuration interface to be processed by inference engine . However in an alternative embodiment inference engine may use decision tree to control the decision making process.

Flowchart begins with step . In step a request is received from an application for a decision. For example in an embodiment application shown in may communicate with decision service according to first communication signal to request that a decision be made by decision service . In an embodiment runtime interface shown in may handle communications with application for decision service .

In an embodiment runtime interface is configured to perform bi directional communications with application for decision service . Runtime interface may be implemented in hardware software firmware or any combination thereof. For example in an embodiment runtime interface may be configured as an application programming interface API such as a Web service e.g. if decision service is accessed over the Internet . Runtime interface may be configured to enable communications according to any suitable data format or communication protocol. For instance runtime interface may enable an SQL structured query language connection according to standard SQL a T SQL Transact SQL extension or other SQL language. In another embodiment runtime interface may enable HTTP hypertext transfer protocol communications including .NET HTTP communications and or XML extensible markup language HTTP communications. In still another embodiment runtime interface may enable ADO.NET components to be used for communications.

Furthermore runtime interface may receive data values from application to be used during the decision making process performed by decision service . For example as shown in runtime interface may receive a set data values signal from application . Runtime interface may transmit set data values signal to inference engine which may store data values received in signal in storage as state variables . Furthermore runtime interface may receive a get data values signal from application . Get data values signal may include a request for values of one or more of state variables . Runtime interface may transmit get data values signal to inference engine . Inference engine may access state variables in storage for the data values and may transmit the data values to runtime interface in a retrieved data values signal . Runtime interface may transmit retrieved data values signal to application to provide the requested data values.

Furthermore as shown in runtime interface may receive a decision request signal from application . Runtime interface transmits decision request signal to inference engine . Decision request signal causes inference engine to perform a decision making process.

Referring back to flowchart in in step a plurality of fact values is determined in response to the request. In an embodiment inference engine determines a plurality of fact values in response to receiving decision request signal . The determined plurality of fact values are used in the decision making process to determine a decision to be transmitted to application . The decision making process performed by inference engine is controlled by decision table in storage . Inference engine accesses decision table to determine which fact values need to be determined and a sequence for determining the fact values. For instance referring to decision table shown in each column corresponds to a fact value that may need to be determined to generate a decision.

In an embodiment inference engine may determine a fact value for a particular column based on fact values already known to inference engine and thus may directly determine the fact value. In another embodiment inference engine may determine a fact value for a particular column by communicating with resolver interface . Resolver interface may be configured to invoke fact resolver modules of fact resolver library to determine fact values which may be returned to inference engine .

For instance shows a flowchart for determining a fact value according to an example embodiment. For instance flowchart may be performed by inference engine and resolver interface shown in . Further structural and operational embodiments will be apparent to persons skilled in the relevant art s based on the discussion regarding flowchart . Flowchart is described as follows.

Flowchart begins with step . In step a request is transmitted to a resolver interface for determination of a fact value that corresponds to a node of the decision tree. For example as shown in inference engine may transmit a fact value determination request to resolver interface . The fact value determination request may be a request to determine a fact value corresponding to a particular column of decision table .

In step the determined fact value is received from the resolver interface. In an embodiment resolver interface interacts with a fact resolver module of fact resolver library configured to determine the fact value. For example resolver interface may receive a name of the fact resolver module configured to determine the fact value in signal in step and may invoke the named fact resolver module in fact resolver library . Resolver interface receives the determined fact value from the fact resolver module and transmits the determined fact value to inference engine in fact value determination response .

In step the received fact value is stored as a state variable of the decision state. In embodiments inference engine and or the fact resolver module may store the determined fact value in state variables in storage .

A fact resolver module may be configured to resolve a fact value in a variety of ways. For instance shows a flowchart for resolving a fact value according to an example embodiment. Flowchart may be performed by a fact resolver module in an embodiment. Further structural and operational embodiments will be apparent to persons skilled in the relevant art s based on the discussion regarding flowchart . Flowchart is described as follows.

Flowchart begins with step . In step whether the fact value is known is determined and if so the known fact value is returned. In embodiments if fact resolver module determines that the fact value has already been determined such as by fact resolver module the already determined fact value may be transmitted by fact resolver module to resolver interface . For instance the fact value may have already been determined and stored in state variables .

In step any required data values are retrieved. In an embodiment a fact resolver module may require data to perform its fact resolving function. Such data may be retrieved from state variables by fact resolver module . Examples of such data include data received from application in set data values signal and interim data values stored by other fact resolver modules or by inference engine . In another embodiment a fact resolver module may be configured to access data stored in a database or a file located externally to decision service to access data at a Web service and or to access data from other external sources.

In step the fact value is determined according to a fact resolver function. In an embodiment a fact resolver module may be configured to determine a fact value by performing any number of calculations comparisons and or any further type of operation e.g. arithmetic string binary etc. .

In step the determined fact value is stored as a state variable. In an embodiment a fact resolver module may generate true or false values and may further generate numerical values string values and or other types of data which may be stored in state variables .

In step the determined fact value is returned. In an embodiment a fact resolver module returns a true or false value as the determined fact value to resolver interface . Resolver interface transmits the determined fact value to inference engine . In an embodiment when a fact resolver module is unable to determine a fact value a null may be returned.

Resolver interface may be implemented in hardware software firmware or any combination thereof. For example in an embodiment resolver interface may be implemented as computer code that is executed by one or more processors in one or more computer systems. In an embodiment resolver interface provides an interface between fact resolver library and inference engine enabling inference engine to make relatively simple calls for fact values e.g. by name or label such as by particular node or column .

Referring back to flowchart in in step the determined plurality of fact values is compared to one or more rows of a decision table to determine a matched row. In an embodiment step is performed by inference engine . Inference engine may be configured to compare the plurality of fact values determined in step with the contents of the rows of decision table to determine a decision. Referring to a decision table may include a plurality of columns that each list required fact values such as true or false or null if a fact value is not determined for a corresponding determined fact value determined in step . In an embodiment inference engine may be configured to compare the fact values determined in step with the required fact values in the rows of decision table to determine a matched row.

The comparison performed by inference engine in step may be performed in a variety of ways including by a backward chaining process such as by comparing the determined plurality of data values with an entire row of decision table at one time or by a forward chaining process such as by comparing determined data values with the contents of a single column in decision table at a time. For instance inference engine may be configured to process decision table from top to bottom left to right comparing fact values for each column. When all assessed fact values match in a decision table row that row becomes a conclusion.

For example shows a flowchart for processing a decision table according to an example embodiment. According to flowchart a decision table is processed in a column by column basis to determine a matched row. For illustrative purposes flowchart is described with respect to decision table shown in . Further structural and operational embodiments will be apparent to persons skilled in the relevant art s based on the discussion regarding flowchart . Flowchart is described as follows.

Flowchart begins with step . In step a first row of the decision table is set to a current row. For example referring to decision table shown in row may be set to the current row. Operation proceeds to step .

In step a first column of the decision table is set to a current column. In the current example referring to decision table column may be set to the current column. Operation proceeds to step .

In step a first fact value is determined step . In step described above a plurality of fact values are determined. Step includes a determination of a first fact value in step . In the current example the first fact value may be the fact value corresponding to column . As described above a fact resolver module may be used to determine a fact value. For example fact resolver module may correspond to column and may be invoked by resolver interface to determine the fact value corresponding to column . In the current example the fact value corresponding to column may be determined to be true. Operation proceeds to step .

In step whether the determined fact value matches a required fact value in the current column and current row is determined. If the determined fact value does not match the required fact value in the current column and current row operation proceeds to step . If the determined fact value matches the required fact value in the current column and current row operation proceeds to step . For instance in the current example the fact value determined in step for column is true. The determined fact value of true matches the required fact value of true in current column and current row . Thus in the current example operation proceeds to step .

In step a next row of the decision table is set to the current row. Operation proceeds from step back to step .

In step whether a next column is present in the decision table is determined. If a next column is not present in the decision table operation proceeds to step of flowchart in flowchart is complete . If a next column is present in the decision table operation proceeds to step . In the current example current column is not the last column in decision table . Thus a next column is present in decision table column and operation proceeds to step .

In step the next column of the decision table is set to the current column. In the current example column is the next column after current column and thus is set to the new current column. Operation proceeds to step .

In step whether a fact value is required for the current column is determined. If a fact value not including a null value is not listed in the current column and current row operation proceeds back to step . If a fact value not including a null value is listed for the current column and current row operation proceeds to step . In the current example a required fact values of true is listed in current column for current row . Thus a fact value is required and operation proceeds to step .

In step a next fact value is determined step . Step includes a determination of a next fact value performed in step described above. In the current example the next fact value may be the fact value corresponding to column . For example fact resolver module may correspond to column and may be invoked by resolver interface to determine the fact value corresponding to column . In the current example the fact value corresponding to column may be determined to be true. Operation proceeds back to step .

The current example is continued as follows with reference to flowchart . In step the fact value of true determined in step matches the required fact value of true in current column and current row . Thus operation proceeds to step from step . In step a next column column is determined to be present in decision table . Thus operation proceeds to step from step . In step column is the next column after the current column and thus is set to the new current column. Operation proceeds to step . In step a null is present in current column and current row and thus a fact value is not required. Operation therefore proceeds to step .

In step a next column column is determined to be present in decision table . Thus operation proceeds to step from step . In step column is the next column after the current column and thus is set to the new current column. Operation proceeds to step . In step a true data value is present in current column and current row and thus a fact value is required. Operation therefore proceeds to step . In step the next fact value determined is the fact value corresponding to column . Fact resolver module may correspond to column and may be invoked by resolver interface to determine the fact value corresponding to column . For instance the fact value corresponding to column may be determined to be false. Operation proceeds back to step .

In step the determined fact value of false does not match the required fact value of true in current column and current row . Thus operation proceeds to step from step . In step the next row of decision table after current row row is set to be the current row. Operation proceeds back to step .

In step the determined fact value of false does match the required fact value of false in current column and current row . Thus operation proceeds to step from step . In step a next column column is determined to be present in decision table . Thus operation proceeds to step from step . In step column is the next column after the current column and thus is set to the new current column. Operation proceeds to step . In step true is the required fact value present in current column and current row and thus a fact value is required. Operation therefore proceeds to step . In step the next fact value determined is the fact value corresponding to column . Fact resolver module may correspond to column and may be invoked by resolver interface to determine the fact value corresponding to column . For instance the fact value corresponding to column may be determined to be false. Operation proceeds back to step .

In step the determined fact value of false does not match the required fact value of true in current column and current row . Thus operation proceeds to step from step . In step the next row of decision table after current row row is set to be the current row. Operation proceeds back to step .

In step the determined fact value of false does match the required fact value of false in current column and current row . Thus operation proceeds to step from step . In step a next column is determined to not be present in decision table after column . Thus operation proceeds from step to step of flowchart and flowchart is complete. In this example because operation of flowchart is complete when the current row is row row is the matched row of step . The determined data values of true for column true for column false for column and false for column match the required data values in row . Matched row corresponds to a branch of decision tree shown in from decision node to conclusion . Conclusion is indicated in decision table as the conclusion for row

In step the decision is set to a conclusion corresponding to the matched row. In an embodiment inference engine sets the decision to the conclusion of the matched row of the decision table. In the current example the matched row is row As shown in conclusion is the conclusion of row . Thus in the current example inference engine sets the decision to conclusion

In step the decision is transmitted to the requesting application. As shown in inference engine provides a decision response signal to runtime interface that includes the decision of step . Runtime interface transmits decision response signal to application .

It is noted that in some cases a row of decision table may not be matched. For instance such a case may occur when an attempt to determine a fact value in step and or step of flowchart fails such that a null or unknown value is returned rather than a fact value such as true or false. In such a case a row of decision table may not be matched. Thus an unknown conclusion may be produced by flowchart rather a particular conclusion corresponding to a row of decision table . In such a case inference engine may return an unknown conclusion to application and or may perform additional iterations of the decision making process to make a decision. New data may be provided for each iteration until a final conclusion is reached if needed.

Furthermore in embodiments inference engine may perform nested decision making processes. For example nested decision making processes may be formed by generating nested decision trees using configuration interface which in turn may generate nested decision tables. In a nested decision making process a first decision tree table may reference a second decision tree table etc.

Inference engine may be implemented in hardware software firmware or any combination thereof. For example in an embodiment inference engine may be implemented as computer code that is executed by one or more processors in one or more computer systems. Storage may be implemented as any type of storage medium or mechanism including real and virtual storage. For example storage may include one or more memory devices e.g. RAM and or ROM devices hard disc drives e.g. magnetic drives optical disc drives or further types of storage or any combination thereof.

As shown in in an embodiment client assembly generator may generate client decision service assembly to include copies of portions of decision service shown in including a runtime interface an inference engine a resolver interface a fact resolver library and a decision table

Client assembly generator may be implemented in hardware software firmware or any combination thereof. For example in an embodiment client assembly generator may be implemented as computer code that is executed by one or more processors in one or more computer systems. In an embodiment client assembly generator may be configured to generate client decision service assembly as a .NET Assembly to be included as a component of application . Such an implementation enables client decision service assembly to be used locally reducing network communications and eliminating a need to communicate with a central database.

As shown in computer includes a processing unit a system memory and a bus that couples various system components including system memory to processing unit . Bus represents one or more of any of several types of bus structures including a memory bus or memory controller a peripheral bus an accelerated graphics port and a processor or local bus using any of a variety of bus architectures. System memory includes read only memory ROM and random access memory RAM . A basic input output system BIOS is stored in ROM .

Computer also has one or more of the following drives a hard disk drive for reading from and writing to a hard disk a magnetic disk drive for reading from or writing to a removable magnetic disk and an optical disk drive for reading from or writing to a removable optical disk such as a CD ROM DVD ROM or other optical media. Hard disk drive magnetic disk drive and optical disk drive are connected to bus by a hard disk drive interface a magnetic disk drive interface and an optical drive interface respectively. The drives and their associated computer readable media provide nonvolatile storage of computer readable instructions data structures program modules and other data for the computer. Although a hard disk a removable magnetic disk and a removable optical disk are described other types of computer readable media can be used to store data such as flash memory cards digital video disks random access memories RAMs read only memories ROM and the like.

A number of program modules may be stored on the hard disk magnetic disk optical disk ROM or RAM. These programs include an operating system one or more application programs other program modules and program data . Application programs or program modules may include for example logic for implementing decision service e.g. decision service as described above.

A user may enter commands and information into the computer through input devices such as keyboard and pointing device . Other input devices not shown may include a microphone joystick game pad satellite dish scanner or the like. These and other input devices are often connected to the processing unit through a serial port interface that is coupled to bus but may be connected by other interfaces such as a parallel port game port or a universal serial bus USB .

A monitor or other type of display device is also connected to bus via an interface such as a video adapter . Monitor is used to present a graphical user interface that assists a user operator in interacting with add in development tool or application for example. In addition to the monitor computer may include other peripheral output devices not shown such as speakers and printers.

Computer is connected to a network e.g. the Internet through a network interface or adapter a modem or other means for establishing communications over the network. Modem which may be internal or external is connected to bus via serial port interface .

As used herein the terms computer program medium and computer readable medium are used to generally refer to media such as the hard disk associated with hard disk drive removable magnetic disk removable optical disk as well as other media such as flash memory cards digital video disks random access memories RAMs read only memories ROM and the like.

As noted above computer programs and modules including application programs and other program modules may be stored on the hard disk magnetic disk optical disk ROM or RAM. Such computer programs may also be received via network interface or serial port interface . Such computer programs when executed or loaded by an application enable computer to implement features of embodiments of the present invention discussed herein. Accordingly such computer programs represent controllers of the computer .

The invention is also directed to computer program products comprising software stored on any computer usable medium. Such software when executed in one or more data processing devices causes a data processing device s to operate as described herein. Embodiments of the present invention employ any computer usable or computer readable medium known now or in the future. Examples of computer readable mediums include but are not limited to storage devices such as RAM hard drives floppy disks CD ROMs DVD ROMs zip disks tapes magnetic storage devices optical storage devices MEMs nanotechnology based storage devices and the like.

While various embodiments of the present invention have been described above it should be understood that they have been presented by way of example only and not limitation. It will be understood by those skilled in the relevant art s that various changes in form and details may be made therein without departing from the spirit and scope of the invention as defined in the appended claims. For example the description of fact value data arranged in a decision table in columns and rows is provided for illustrative purposes. Persons skilled in the relevant art s will understand that columns and rows of a table may be interchanged and thus the terms columns and rows as referenced in the appended claims are intended to cover all possible orientations of the fact values in a decision table.

Accordingly the breadth and scope of the present invention should not be limited by any of the above described exemplary embodiments but should be defined only in accordance with the following claims and their equivalents

