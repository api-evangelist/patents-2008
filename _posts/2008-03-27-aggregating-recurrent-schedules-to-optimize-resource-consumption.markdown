---

title: Aggregating recurrent schedules to optimize resource consumption
abstract: Coalescing schedules that use a resource to extend battery life. Each of the schedules is defined to execute at a recurrent activation time within a defined tolerance. After receiving notification of an event, the schedules are accessed to identify the schedules that may be executed early based on their activation time and tolerance. The identified schedules are aggregated for execution.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08230436&OS=08230436&RS=08230436
owner: Microsoft Corporation
number: 08230436
owner_city: Redmond
owner_country: US
publication_date: 20080327
---
This application is a continuation in part of commonly owned co pending U.S. patent application Ser. No. 11 971 909 filed Jan. 10 2008 the entire disclosure of which is hereby incorporated by reference herein for all purposes.

Mobile computing devices such as mobile phones and personal digital assistants PDA have become increasingly popular in recent years. As the devices continue to get smaller there are increasing limitations in resources such as memory storage bandwidth and battery. Additionally more applications now require increasing levels of such resources. For example many applications execute recurring tasks such as synchronization with a server and real time content updates that require frequent radio usage to persist connections. After the radio powers on to send data the radio takes several seconds to power off e.g. about 3 seconds on 2.5G networks and about 20 seconds on 3G networks . This radio tail absorbs power and diminishes device battery life.

Embodiments of the invention adjust activation times of recurrent schedules to take opportunistic advantage of resources such as constrained resources. Each schedule is defined to activate at a recurrent activation time but can be executed early within a tolerance factor. After a notification of an event such as resource availability is received schedules are identified based on the received notification the activation time and the tolerance factor. For example some schedules will be identified for early activation based on the tolerance factor to make use of the available resource. The identified schedules are aggregated and activated.

This summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter nor is it intended to be used as an aid in determining the scope of the claimed subject matter.

Referring to the figures embodiments of the invention provide a scheduler service executing on a computing device that controls activation of recurrent schedules . The schedules are defined to occur periodically by a user or by one or more application programs such as application program through application program M.

Activation of the schedules includes performing or executing one or more actions associated with the schedules at a defined activation time within a predefined tolerance. Exemplary operation of the scheduler service is shown in . At an event notification is received. For example the notification indicates that a constrained resource is available. The plurality of schedules is accessed at . Each of the plurality of schedules has the defined activation time and a tolerance factor among other properties e.g. rules for schedule expiration maximum schedule run count whether the schedule requires use of the constrained resource etc. . The tolerance factor generally indicates the tolerance of the schedule to run early when the constrained resource becomes available. The tolerance factor includes any means for indicating the availability of the schedule to execute at a time that differs from its predefined activation time . For example the tolerance factor includes but is not limited to a constant value e.g. in minutes or seconds a percentage e.g. a percentage of an interval duration such as 10 and a rolling average of the minutes between resource availability.

At one or more of the accessed schedules are identified as a function of the event notification a current time the defined activation time and the tolerance factor of each of the accessed schedules. For example the scheduler service identifies the schedules for which the event is a defined condition for activation of the schedules or otherwise identifies the schedules to which the event applies. The scheduler service further selects from the identified schedules those schedules that may be activated early based on the tolerance factor for each of the schedules. For example the scheduler service calculates a difference between the current time and the defined activation time for each of the schedules and compares the calculated difference to the tolerance factor for the schedules . For all differences that are within tolerance the corresponding schedules are selected for activation.

In an example of element the schedules that require the constrained resource are evaluated for eligibility to run at the time the notification is generated or received. In some embodiments eligibility is determined based on whether the current time falls between the scheduled time and the scheduled time less the tolerance to run early.

The identified schedules are activated at . Activation of the identified schedules includes executing one or more of the actions associated with the schedules. The actions include for example a software configuration action such as software installation configuration and or update. The action may also include accessing an executable file or library on the computing device . The action may also include modification of a synchronization event on computing device that would then result in any of the previous actions occurring.

For a mobile computing device one of the most constrained resources is the battery and the usage of the cellular radio is the most power draining activity on the mobile computing device .

In an embodiment in which the scheduler service executes on or otherwise controls the mobile computing device operation of the scheduler service extends battery life by coalescing combining or otherwise aggregating recurrent schedules to optimize use of the available resources. The recurrent schedules are selected based on the event. The event includes any condition such as a particular time or a device condition. For example if the event indicates that a resource is available e.g. a network or network type identifying the schedules includes identifying the schedules that use the resource. In another example schedules that require the cellular radio will be identified for early activation based on the tolerance factor to make use of the radio while it is already powered up for another task. Appendix A lists further exemplary schedules that are within the scope of embodiments of the invention.

By varying the activation time of each schedule within the tolerance the scheduler service operates to extend battery life by taking advantage of resources while the resources are available and by minimizing overhead. For example when there is an asynchronous cellular wireless fidelity Wi Fi or other radio transmitter or receiver event e.g. a server sends the device data or the user initiates a web browsing session the scheduler service scans a database and determines schedules that can piggyback or leverage the radio usage. Aggregating schedules in this manner minimizes radio spin ups. In other embodiments the scheduler service operates to minimize the frequency of bringing the device out of an idle state. In another example the scheduler service operates to conserve power consuming resources such as the following components of a mobile computing device a backlight a processor an audio amplifier a global positioning system a digital memory ready a short range wireless network adapter e.g. for a BLUETOOTH brand network an auxiliary processor a vibration motor a ringer a camera an accelerometer and an ambient light sensor.

Alternatively or in addition if the scheduler service determines that a resource will not be placed into a high consumption state during separate execution of the schedules the scheduler service will execute the schedules separately.

While described in some embodiments with reference to the mobile computing device aspects of the invention are applicable other devices. Further while described in some embodiments with reference to the scheduler service aspects of the invention are applicable to any component performing the functionality illustrated and described herein.

In an example in which Schedules A B and C all require a network connection Schedules B C can be batched or aggregated with Schedule A based on the tolerance factor . If the execution of Schedule A spins up a radio event that event will be published and then Schedules B C are executed to take advantage of the radio event. If it turns out that Schedule A never needed a network then Schedules B and C will execute at their original scheduled time.

After execution of the schedules the scheduler service defines the next activation time for each of the schedules at . Each of the schedules has the interval duration corresponding to the time between recurrent activations of each of the schedules . The interval duration is set by the application program or user when creating the schedule. In an embodiment the next activation time for each of the schedules is determined by adding the interval duration to the last activation time. As such the actual time periods between schedule executions may be shorter than the interval duration but will never be longer than the interval duration .

Alternatively the next activation time for each of the schedules is set based on the originally defined activation time. As such the actual periods between schedule executions may be either shorter or longer than the interval duration but the long term average interval duration converges to the specified interval. In an embodiment the application program or user creating the schedules determines which method of setting the next activation time should be used.

In some embodiments many of the application programs have schedules to regularly send small data packets to servers to keep a connection open. Open connections allow servers to push data to the mobile computing devices in real time. The scheduler service allows the application programs to call an application programming interface API and simulate that the schedule was run. As a result the next scheduled time is calculated based on the simulated run. In such an example the recurrent schedules are known as heartbeats and ensure that data is sent between the computing device and the server under the network timeout. For example if the network timeout is 15 minutes the connection requires that some data is exchanged between the device and server every 15 minutes or the connection will close. That is the device must send some small data packets to the server every 15 minutes. However if the server sends the device data e.g. at the 8 minute mark the application program calls the API call at the 8 minute mark. The next activation time for the schedule is calculated to be at the 23 minute mark e.g. 8 15 instead of the 15 minute mark.

Referring to an exemplary block diagram illustrates the scheduler service executing on the computing device . The computing device includes for example a mobile device such as a personal digital assistant PDA or a mobile telephone. A processor is configured to execute computer executable instructions for receiving the activation time the tolerance factor and the interval duration for each of the schedules from the user the application program executing on the computing device the application program executing remotely from the computing device or another source. The received schedule data is stored in the database or other memory area. Appendix C lists exemplary properties and definitions involved in defining the schedules .

The interval duration determines the time period between executions or activations of the schedules . Successive interval durations may be the same or be related linearly exponentially or the like. For example some of the schedules have progressively increasing intervals between activations. In an embodiment the application program or the user specifies one or more of an initial interval value a type of progression e.g. linear or exponential and a maximum interval value. When the schedules execute the interval starts from the initial value and then increases appropriately after each execution. If the maximum interval value is specified the interval duration never increases above the maximum interval value but remains at its highest value.

One or more computer readable media have computer executable components for implementing embodiments of the scheduler service . For example the components are stored on a memory area and include an interface component a condition component an aggregation component a conservation component a throttle component and a rules component . The interface component receives notification of an event e.g. notice of availability of a power consuming resource on the computing device . For example the event may be a time event such as the occurrence of a relative time interval e.g. 5 minutes after boot up or an absolute time e.g. 12 00 00 am . The event may also be a state event such as boot up detecting a predetermined connection type such as a Wi Fi connection or a cellular connection and or reestablishing network connection after initially losing network connectivity or other state of the computing device . Further the event notifications are received from a notification broker or any other eventing notification or state system. While the notification broker in is shown as executing on the computing device the notification broker alternatively or in addition executes on another computing device e.g. communicating with the computing device via a network .

In an example there are several ways for the interface component to receive notification that a cellular radio is transmitting data on the mobile computing device . One way involves the radio manufacturer informing the software layer above the radio that the radio is transmitting data. Another way is to monitor the internet protocol IP stack for data that is sent or received. When data is transmitted or received the time is recorded and an event state is set e.g. to true . After a defined time period e.g. ten seconds the event state is changed e.g. to false if no other data has been transmitted. The scheduler service coalesces schedules upon detecting that the state of the event goes from false to true in this example indicating that the radio is transmitting data.

Based on the event information received by the interface component the condition component identifies at least one of the schedules stored in the database . In an example in which the received event indicates availability of a resource the condition component identifies the schedules that consume the resource during execution. The aggregation component selects one or more of the schedules identified by the condition component for execution based on the activation time and the tolerance factor for the schedules. For example the aggregation component selects those schedules for which a difference between the next activation time and the time of receipt of the notification by the interface component is within the tolerance factor for the schedule. In an embodiment the time of receipt of the notification corresponds to a current time. The conservation component executes the schedules selected by the aggregation component . For example the conservation component executes the actions associated with each of the aggregated schedules. As an example the criteria for selecting the schedules by the aggregation component are represented by the following Boolean expression Current Time NEXT RUN TIME RUN EARLY TIME and Current Time

The throttle component limits the quantity of schedules executed by the conservation component as a function of a predefined throttle limit value. In an embodiment the throttling limit is defined as a function of a consumption state of a resource on the computing device . For example before the conservation component executes the schedules selected by the aggregation component the conservation component determines via the throttle component whether the throttle limit threshold has been reached. For example a large number of schedules or actions triggered in close temporal proximity may result in acute resource starvation. To mitigate this condition the throttle component launches only a defined quantity of schedules or actions during any given time window. Each time a schedule or action is successfully launched a counter increments. If the counter value reaches the throttle limit further launches of schedules or actions are delayed until the counter resets to zero or otherwise decreases. For example the counter resets to zero by a thread executing at regular predefined intervals. Alternatively or in addition the counter decrements when a schedule or action using the resource releases the resource.

The rules component applies schedule specific properties to each of the schedules . For example the rules component determines how the next scheduled time is calculated e.g. maximum or average when to start the schedule when to end the schedule how many times to repeat the schedule and what entities may modify the schedule .

Some of schedules are defined to execute only when the computing device boots. If these schedules share a common resource e.g. the radio the scheduler service aligns the activation of these schedules to a common activation time to take advantage of the availability of the resource.

Similarly the scheduler service aligns schedules with similar intervals or multiples of intervals to a base time zero e.g. an artificial time zero . As an example two application programs have five minute heartbeat intervals each with a 20 tolerance factor e.g. which corresponds to one minute of tolerance for running early . The first application performs heartbeat operations at time T e.g. startup T e.g. five minutes after startup and T e.g. ten minutes after startup . The second application starts up and performs a heartbeat operation at time T e.g. two minutes after the first application started up and T e.g. five minutes after startup . Because the difference between the heartbeat operations for the applications is either two or three minutes the heartbeats operations are not coalesced by the scheduler service . Rather the scheduler service aligns the second application to startup at time T so that the heartbeat operations for both applications occur at the same time.

Referring to an exemplary block diagram illustrates control of the mobile computing device by a device management server . In the scheduler service from acts as a client scheduler module executing within a device management client communicating with a server scheduler module executing on the device management server or other computing device e.g. connected via a network . In such embodiments the server scheduler module instructs the client scheduler module to activate the scheduled and to perform the execution of the actions associated with each of the aggregated schedules as in .

Referring to an exemplary block diagram illustrates a data structure representing the schedules . The schedules are stored in a data structure that may be encoded in an extensible markup language XML format. Each of the schedules include a list of predefined events and the associated actions along with the interval duration the activation time and the tolerance factor . The predefined events include time events and state events. The associated actions include operations to be performed when the predefined events occur. The actions specify for example an executable file path and command line parameters or named synchronization event.

A computing device or computer such as described herein has one or more processors or processing units and a system memory. The computer typically has at least some form of computer readable media comprising computer storage media and communication media. Computer storage media include volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. Communication media typically embody computer readable instructions data structures program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and include any information delivery media.

Although described in connection with an exemplary computing system environment embodiments of the invention are operational with numerous other general purpose or special purpose computing system environments or configurations.

Embodiments of the invention may be described in the general context of computer executable instructions such as program modules executed by one or more computers or other devices. Aspects of the invention may be implemented with any number and organization of such components or modules. For example aspects of the invention are not limited to the specific computer executable instructions or the specific components or modules illustrated in the figures and described herein. Other embodiments of the invention may include different computer executable instructions or components having more or less functionality than illustrated and described herein.

The embodiments illustrated and described herein as well as embodiments not specifically described herein but within the scope of aspects of the invention constitute exemplary means for aggregating the recurrent schedules for activation exemplary means for aligning activation of the recurrent schedules and exemplary means for identifying one or more of the plurality of recurrent schedules as a function of the received notification the notification time the defined activation time and the tolerance factor of each of the plurality of recurrent schedules.

The order of execution or performance of the operations in embodiments of the invention illustrated and described herein is not essential unless otherwise specified. That is the operations may be performed in any order unless otherwise specified and embodiments of the invention may include additional or fewer operations than those disclosed herein. For example it is contemplated that executing or performing a particular operation before contemporaneously with or after another operation is within the scope of aspects of the invention.

When introducing elements of aspects of the invention or the embodiments thereof the articles a an the and said are intended to mean that there are one or more of the elements. The terms comprising including and having are intended to be inclusive and mean that there may be additional elements other than the listed elements.

Having described aspects of the invention in detail it will be apparent that modifications and variations are possible without departing from the scope of aspects of the invention as defined in the appended claims. As various changes could be made in the above constructions products and methods without departing from the scope of aspects of the invention it is intended that all matter contained in the above description and shown in the accompanying drawings shall be interpreted as illustrative and not in a limiting sense.

In another example an application has a schedule that executes at noon and uses the radio in a mobile device. Another application has a schedule with a defined activation time of 12 05 pm along with a tolerance of five minutes. This schedule also requires use of the radio. The scheduler service then aggregates the two schedules to activate at the same time thereby allowing the radio to spin up only once. The result is battery savings by avoiding the power absorption required for the radio to power down e.g. the radio powers down once instead of twice . In variations of this example after running early the schedule s next execution time is recalculated so that it never exceeds the interval duration value or the next execution time is never recalculated.

In another example an application monitors an on line data source such as an auction which has a predefined end time. The desired schedule update rate is variable and the desire is to update more frequently as the end time approaches.

In another example an application on the device must send data to the server every x minutes in order to keep the connection open between the device and the server. If the server sends data before the next scheduled time the device application does not need to send data at that scheduled time it only needs to recalculate the next scheduled time to equal the time data is received from server x.

Listed below are exemplary properties and states for a scheduler according to embodiments of the invention.

Listed below in Table C1 are exemplary properties and definitions involved in defining a recurrent schedule.

