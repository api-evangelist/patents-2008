---

title: TLS key and CGI session ID pairing
abstract: The prevention of impersonation attacks based on hijacked common gateway interface (CGI) session IDs is disclosed. In accordance with one embodiment, a secured communication channel is formed between a server and a client using an initial transport layer security (TLS) key. Additionally, an authenticated CGI session is formed over the secured communication channel based on an initial CGI session identifier (ID). Further, the initial CGI session ID and the initial TLS key are combined into a pair. Next, incoming data that includes an incoming CGI session ID is received via a secured communication channel. An incoming TLS key of the secured communication channel that carries the incoming CGI session ID is then retrieved. Based on the retrieved incoming TLS key, the incoming data is permitted to execute on the server when the incoming TLS key matches the initial TLS key of the pair.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08275984&OS=08275984&RS=08275984
owner: Microsoft Corporation
number: 08275984
owner_city: Redmond
owner_country: US
publication_date: 20081215
---
A threat to the security of many web applications today is imposed by a software exploitation technique commonly known as cross site scripting. Generally speaking cross site scripting is a process through which a malevolent individual may compromise the security of a web application by posting malicious web script code onto a web site via the web application s own user interface. The intent of a cross site scripting attempt is to upload the malicious web script onto the web site in the hope that this malicious payload will be delivered to the web browsers of unsuspecting users that happen to browse to locations where the malicious payload has been placed.

In the event that an attacker has successfully executed a cross site scripting attack to deliver a malicious payload to an unsuspecting user s web browser the attacker may use the malicious payload to retrieve and hijack the user s common gateway interface CGI session identifier ID . Generally speaking a CGI session ID is an identifier that enables the user to engage in a secured web session with a web site and or web application. When the attacker has hijacked the user s CGI session ID the attacker may connect to the web site and or web application and submit the compromised CGI session ID in an attempt to impersonate the unsuspecting user.

This Summary is provided to introduce a selection of concepts in a simplified form that is further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter nor is it intended to be used to limit the scope of the claimed subject matter.

Described herein are embodiments of various technologies for preventing the hijacking of common gateway interface CGI session IDs for impersonation attacks. In various embodiments the prevention of impersonation attacks may include the use of a transport layer security TLS session key and a CGI session identifier ID pair. In at least one embodiment a secured communication channel is formed between a server and a client using an initial transport layer security TLS key. Additionally an authenticated common gateway interface CGI session is formed over the secured communication channel based on an initial CGI session identifier ID . Further the initial CGI session ID and the initial TLS key are combined into a pair. Next incoming data that includes an incoming CGI session ID is received via a secured communication channel. An incoming TLS key of the secured communication channel that carries the incoming CGI session ID is then retrieved. Based on the retrieved incoming TLS key the incoming data is permitted to execute on the server when the incoming TLS key matches the initial TLS key of the pair. Other embodiments will become more apparent from the following detailed description when taken in conjunction with the accompanying drawings.

This disclosure is directed to embodiments for preventing impersonation attacks that are based on the use of cross site scripting. Specifically the embodiments described herein are directed to using a pairing of a transport layer security TLS session key and a common gateway interface CGI session ID to prevent impersonation attacks based on hijacked CGI session IDs where the hijacked CGI session IDS may be obtained by malicious attackers through cross site scripting attacks or other forms of attacks. In various embodiments the combination of a TLS key and CGI session ID may be used as an authentication mechanism during access to a web server. The use of the TLS key and CGI session ID combination pair as an authentication mechanism may deprive a malicious attacker the ability to impersonate a legitimate user even if the attacker is able to hijack the legitimate user s CGI session ID. In this way the legitimate user s data as stored on the web server may be further protected from unauthorized access. Various examples of using TLS key and CGI session ID pairing to prevent impersonation attacks are described below with reference to .

As shown in the network environment may include a client and a web server . The client may be any computer that has network access capabilities e.g. a desktop computer a laptop computer a tablet computer etc. The web server may be any computer that is capable of accepting data requests from the client and return data such as web pages and other content to the client . The client and the web server may communicate over one or more communication networks .

The client may include a web browser and a Transport Layer Security TLS client component . The web browser may be any software application that enables a user to display text images videos and other information located at a website on the World Wide Web WWW or local area network. As further described below the TLS client component may work in conjunction with a counterpart TLS server component on the web server to implement encrypted data exchange secured communication channel . The one or more communication networks may include at least one of a wide area network WAN component a local area network LAN component and the like.

A secured communication channel may be established between the client and the web server via the communication network . The secured communication channel may provide a web user at the client with a tamper resistant channel for access to one or more web sites and or web applications stored on the web server .

In various embodiments the secured communication channel may be established using Secure Socket Layer SSL also known as Transport Layer Security TLS . It will be appreciated that TLS is an open standard that is used to provide privacy and authentication services to software communication that take place across unsecured networks. TLS may provide server authentication through the use of a certificate e.g. X.509 certificate . The use of certificates for web server authentication may enable web users that wish to interact with web sites to verify that such web sites are not substituted with imposter sites.

TLS also provides privacy to communications between the client and the web server by enabling the client and the web server to share a TLS session encryption key which is shown as TLS key in

It will be appreciated that the establishment of a secure TLS communication channel and the sharing of the TLS key may include the following steps. In various embodiments the client initiated steps may be performed by the TLS client component while the web server initiated steps may be performed by the TLS server component .

First the client may send a Client hello message that is a contact initiation message to the web server along with a random value and supported cipher suites. Second the web server may respond by sending a Server hello message that is a contact reply message to the client along with the web server s random value. Third the client and the web server may exchange certificates e.g. X.509 certificates so that client may verify the identity of the web server and vice versa. Next the client may create a random Pre Master Secret and encrypts it with the public key from the web server s certificate. The client may then send the encrypted Pre Master Secret to the server. Subsequently when the web server receives the Pre Master Secret the web server and the client may each generate and store a Master Secret and identical duplicate copies of the TLS key based on the Pre Master Secret. In various embodiments the client may store the TLS key in a cache of the TLS client component . Likewise the web server may store the TLS key in a cache of the TLS server component .

When the client and the TLS client component have stored the TLS key the client and the web server may switch to exchanging data that are encrypted by the TLS key over the secured communication channel . In other words each of the client and the web server may use the TLS key to encrypt and decrypt data transmitted between the client and the web server .

Accordingly once the client and the web server have established the secured communication channel and implemented TLS key the web user at the client may use the web browser to access web sites and or web applications stored on the web server .

In some instances the web server may include a common gateway interface CGI framework that enables the user to access one or more web sites and or web applications on the web server via an authenticated session. An authenticated session generally requires a web user to correctly enter some form of user authentication e.g. user name and or password . In exchange the authentication session may make use of a randomly generated CGI session ID that is issued to the client by the CGI framework . Subsequently any data exchanged between the client and the web server such as data may be tagged with the CGI session ID . Thus the CGI session ID may help to ensure that the client is receiving legitimate data from the web server and vice versa. Moreover since the data is being exchanged over the secured communication channel the data is also encrypted such as by the TLS key .

For example the web user at the client may wish to access his her financial information at a financial institution web site that requires user authentication e.g. user name and password . Once the web user has inputted the correct user authentication the CGI framework may grant the client a CGI session ID such as the CGI Session ID . The CGI session ID helps to ensure that any data received at the financial institution web site is in fact from the web user and that any data the web user receives is in fact data that is appropriate for that user as from the financial institution web site.

It will be appreciated that since secure communication channel and the CGI authenticated sessions are implemented independently of each other the protection afforded by one of these mechanisms is not dependent on the integrity of the other mechanism. This fact is the basis for the formation of a CGI session ID and TLS Key pair to thwart impersonation attacks based on a hijacked CGI session ID.

As shown in the CGI session ID and the TLS key may be paired as pairing . In other words the CGI Framework may be provided access to the TLS key so that the pairing may be formed. The pairing may be stored on the web server .

As described with respect to the pairing may prevent a malicious attacker from impersonating the web user by infiltrating an authenticated session between the client and the web server using a hijacked CGI session ID.

As further shown in the network environment may also include a client . The client may be used by a malicious attacker. The client and the web server may communicate over one or more communication networks . The client may include a web browser and a Transport Layer Security TLS client component . The TLS client component may work in conjunction with a counterpart TLS component on the web server to implement encrypted data exchange using secured communication channel . The one or more communication networks may include at least one of a wide area network WAN component a local area network LAN component and the like.

Moreover in some embodiments the client may share at least one of a WAN or a LAN component with the one or more networks .

The malicious attacker may have obtained the CGI session ID of the web user through a cross site scripting attack. Accordingly the malicious attacker may initiate an impersonation attack by forming a secured communication channel with the web server . In various embodiments the secured communication channel may be also established using TLS. Thus the formation of the secured communication channel may result in the generation of duplicate copies of the TLS key with one copy being stored in the TLS client component and the other copy of the TLS key stored in the TLS server component of the web server .

Following the establishment of the secured communication channel the malicious attacker may attempt to impersonate the web user and transmit malicious data to the web server by associating the data with the hijacked CGI session ID . In various embodiments the malicious attacker may send the malicious data and the hijacked CGI session ID using the web browser . Moreover the malicious data may be intended to manipulate the web user s data stored on the web server return the web user s data to the client or otherwise perform activities that are harmful to the integrity of the web user s data.

However upon receiving the malicious data and the falsely associated CGI Session ID the CGI framework of the web server may retrieve the TLS key from the TLS server component . The TLS key may be retrieved by the CGI framework because the malicious data was sent to the web server via the corresponding secured communication channel . Subsequently the web server may look up the TLS key that is supposed to be paired with the CGI session ID . In various embodiments the web server may determine that the TLS key that is supposed to be paired with the CGI session ID is the TLS key of the pairing .

Since the TLS key is not the same key as the TLS key the web server may determine that the malicious data did not come from the legitimate web user at client . Accordingly in some embodiments the web server may terminate one or more communication channels and sessions associated with the compromised CGI session ID . In some embodiments the web server may terminate the session being carried over the secured communication channel as well as the secured communication channel . The web server may also terminate the session being carried over the secured communication channel as well as the secured communication channel along with terminating secured communication channel .

However in other embodiments the web server may only terminate the secured communication channel the carrier channel of the compromised CGI session ID while leaving the secured communication channel and the session carried by the channel intact.

The web server may include computer program instructions being executed by a computing device such as those in the computing device described in . The web server may include one or more processors and memory . The memory may include volatile and nonvolatile memory removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. Such memory may include but is not limited to RAM ROM EEPROM flash memory or other memory technology CD ROM digital versatile disks DVD or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices RAID storage systems or any other medium which can be used to store the desired information and is accessible by a computer system.

The web server may store program instructions in the memory . The program instructions or modules may include routines programs objects components and data structures that perform particular tasks or implement particular abstract data types. The modules may be implemented as software or computer executable instructions that are executed by one or more processors . As shown in the web server may include a web server platform a CGI Platform the transport layer security TLS server component that further includes a TLS application program interface API a data cache a retrieval module a pairing module a comparison module and a data storage module . However it will be appreciated that the web server may also include other modules that perform other functions.

The web server platform may include web service components that provide web pages and web applications to clients such as client . In various embodiments the web server platform may include the Internet Information Services IIS produced by the Microsoft Corporation of Redmond Wash. In other embodiments the web server platform may include Apache HTTP server components and the like.

The CGI Platform may include a web application framework that supports dynamic websites and web applications. For example but not as a limitation the CGI platform may include the ASP.NET framework developed by the Microsoft Corporation of Redmond Wash. Web applications are applications that are accessed via web browsers over networks such as the one or more networks e.g. web based mail multi player online games etc. . The CGI Platform may perform services such as web caching or the caching of certain web pages for later retrieval to reduce bandwidth usage. Moreover the CGI Platform may also include authentication and authorization frameworks. These frameworks may enable the web server to identify users as well as to restrict access to data and applications stored on the web server based on user identity. In various embodiments the CGI Platform may enable one or more web users to communicate with the web server through secured sessions by issuing CGI sessions IDs such as the CGI session ID .

The TLS server component may be configured to established secured communication channels with various clients such as the secured communication channel with the client as previously described in relation to

In various embodiments the TLS server component may include a TLS application program interface API module . The TLS API module may be configured to enable the CGI Platform to extract TLS session encryption keys of secured communication channels from the TLS server component based on inputted CGI session IDs. In various embodiments the CGI Platform may activate the retrieval module to send a TLS key retrieval request to the TLS API module . The retrieval request may include a CGI session ID. Upon receiving the retrieval request that includes the CGI session ID the TLS API module may identity the TLS key stored in the TLS server component that corresponds to the CGI session ID. In other words the TLS API module may identify the secured communication channel that is carrying the CGI authenticated session that is implemented using CGI session IDs. The TLS API module may then extract the TLS key that corresponds to the identified secured communication channel from a data storage in the TLS server component . This data cache is depicted as data cache in . The retrieval module may then return the TLS key to the CGI Platform .

The retrieval module may be configured to enable the CGI Platform to interface with the TLS API module for the purpose of providing TLS keys to the CGI Platform . In various embodiments the CGI Platform may use the retrieval module to provide CGI session IDs to the TLS API module .

In exchange the retrieval module may pass the CGI Session IDs to the TLS API module and return corresponding TLS keys to the CGI Platform . In some embodiments the retrieval module may be an integral part of the CGI Platform .

The pairing module may be configured to pair each retrieved TLS key as obtained via the retrieval module with a corresponding CGI session ID stored in the CGI Platform . For example the pairing module may associate the CGI session ID with the TLS key to form pairing . The pairing module may be further configured to store the pairings of the CGI session IDs and TLS keys in the data storage module . Moreover the pairing module may be configured to form a pairing when a CGI authenticated session is initially established to implement a particular CGI session ID. In some embodiments the retrieval module may be an integral part of the CGI Platform .

The comparison module may be implemented to use the TLS API module to retrieve a TLS key that is associated with the CGI session ID of every piece of data received at the web server . In various embodiments the comparison module may provide the TLS API module with the CGI session ID e.g. Session ID of the incoming data e.g. data and obtain the TLS key e.g. TLS key of the secured communication channel that carried the incoming data to the web server . Upon obtaining the TLS key of the incoming data the comparison module may retrieve a pairing of CGI session ID and TLS key e.g. pairing that corresponds to the CGI session ID e.g. Session ID . Subsequently the comparison module may compare the TLS key of the incoming data e.g. TLS key with the TLS key e.g. TLS key of the retrieved pair. If the two TLS keys match the comparison module may permit the incoming data to execute on the web server . Otherwise the comparison module may cause one or more secured communication channels that are associated with CGI session ID of the incoming data to terminate. In some embodiments the comparison module may be an integral part of the CGI Platform .

The data storage module may be configured to store data in a portion of memory e.g. a database . In various embodiments the data storage module may be configured to store one or more pairs of CGI session IDs and TLS keys such as the pairing .

Furthermore the order in which the operations are described is not intended to be construed as a limitation and any number of the described blocks can be combined in any order and or in parallel to implement the process. For discussion purposes the process is described with reference to the exemplary network environment of and although they may be implemented in other system architectures.

At block the web server may establish a network connection with a client such as the client . In various embodiments the network connection may be established over one or more networks the one or more networks may include at least one of a WAN component and a LAN component.

At block the web server and the client may establish a secured communication channel by negotiating a common TLS encryption key. The TLS encryption key may be used to encrypt and decrypt the data exchanged between the client and the server .

At block the client may enable a web user to authenticate to a CGI framework such as CGI framework to carry out an authenticated CGI session with a CGI session ID. The CGI session ID may be generated after the web user has correctly authenticated to the client from the client .

At block the CGI framework of the web server may query a TLS service component of the web server such as TLS service component for the TLS key that corresponds to the CGI session ID. In other words the CGI framework may obtain the TLS key of the secured communication channel over which data associated with the CGI session ID is carried.

At block the web server may pair the obtained TLS key with its corresponding CGI Session ID. The CGI framework of the web server may further store the pair of the TLS key and corresponding CGI session ID.

At block the web server may establish an additional network connection with another client such as the client . In various embodiments the additional network connection may be established over one or more networks the one or more networks may include at least one of a WAN component and a LAN component.

At block the web server may establish a subsequent secured communication channel by negotiating another common TLS encryption key. The TLS encryption key may be used to encrypt and decrypt the data exchanged between the client and the sever .

At block the web server may receive incoming data that is marked with a CGI session ID. In some instances the incoming data may be from the client . However in other instances the incoming data may be malicious data that is marked with a hijacked CGI session ID.

At block the CGI framework of the web server may again query a TLS service component of the web server such as TLS service component for the TLS key that corresponds to the CGI session ID of the incoming data. In other words the CGI framework may obtain the TLS key of the subsequent secured communication channel over which the incoming data associated with the CGI session ID is carried.

At decision block the web server may determine whether the obtained TLS key of the subsequent channel matches the TLS key that is supposed to be paired with the CGI session ID of the incoming data. If the web server determines that the two TLS keys do not match no at decision block the process may proceed to block . At block the web server may terminate one or more user sessions having the CGI session ID that corresponds to the obtained TLS key. In various embodiments the web server may only terminate the secured communication channel with the non matching TLS key as well as the CGI session carried by the secured communication with the non matching TLS key. However in other embodiments the web server may terminate all user sessions having the CGI session ID that corresponds to the obtained TLS key. Subsequently the process may loop back to block where the web user may use a client to re establish a connection with the web server .

However if the web server determines that the two TLS key do match yes at decision block the process may proceed to block . At block the incoming data that is which may include a user requested action may be executed on the web server . Subsequently the process may return to block .

In a very basic configuration computing device typically includes at least one processing unit and system memory . Depending on the exact configuration and type of computing device system memory may be volatile such as RAM non volatile such as ROM flash memory etc. or some combination of the two. System memory typically includes an operating system one or more program modules and may include program data . The operating system include a component based framework that supports components including properties and events objects inheritance polymorphism reflection and provides an object oriented component based application programming interface API such as but by no means limited to that of the .NET Framework manufactured by Microsoft Corporation Redmond Wash. The device is of a very basic configuration demarcated by a dashed line . Again a terminal may have fewer components but will interact with a computing device that may have such a basic configuration.

Computing device may have additional features or functionality. For example computing device may also include additional data storage devices removable and or non removable such as for example magnetic disks optical disks or tape. Such additional storage is illustrated in by removable storage and non removable storage . Computer storage media may include volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. System memory removable storage and non removable storage are all examples of computer storage media. Computer storage media includes but is not limited to RAM ROM EEPROM flash memory or other memory technology CD ROM digital versatile disks DVD or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can be accessed by computing device . Any such computer storage media may be part of device . Computing device may also have input device s such as keyboard mouse pen voice input device touch input device etc. Output device s such as a display speakers printer etc. may also be included. These devices are well known in the art and are not discussed at length here.

Computing device may also contain communication connections that allow the device to communicate with other computing devices such as over a network. These networks may include wired networks as well as wireless networks. Communication connections are one example of communication media. Communication media may typically be embodied by computer readable instructions data structures program modules etc.

It is appreciated that the illustrated computing device is only one example of a suitable device and is not intended to suggest any limitation as to the scope of use or functionality of the various embodiments described. Other well known computing devices systems environments and or configurations that may be suitable for use with the embodiments include but are not limited to personal computers server computers hand held or laptop devices multiprocessor systems microprocessor base systems set top boxes game consoles programmable consumer electronics network PCs minicomputers mainframe computers distributed computing environments that include any of the above systems or devices and or the like.

The pairing of a transport layer security TLS session key and a common gateway interface CGI session ID may be used to prevent impersonation attacks based on hijacked CGI session IDs where the hijacked CGI session IDS may be obtained by malicious attackers through cross site scripting attacks or other forms of attacks. The pairing of a TLS key and CGI session ID may be used as an authentication mechanism during access to a web server. The use of the TLS key and CGI session ID combination pair as an authentication mechanism may deprive a malicious attacker the ability to impersonate a legitimate user even if the attacker is able to hijack the legitimate user s CGI session ID. In this way the legitimate user s data as stored on the web server may be further protected from unauthorized access.

In closing although the various embodiments have been described in language specific to structural features and or methodological acts it is to be understood that the subject matter defined in the appended representations is not necessarily limited to the specific features or acts described. Rather the specific features and acts are disclosed as exemplary forms of implementing the claimed subject matter.

