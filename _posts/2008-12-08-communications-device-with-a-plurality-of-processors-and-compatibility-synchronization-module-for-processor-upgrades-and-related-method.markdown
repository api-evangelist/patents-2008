---

title: Communications device with a plurality of processors and compatibility synchronization module for processor upgrades and related method
abstract: A multiprocessor device includes a plurality of device subsystems each having a processor dependent on a respective other processor in another device subsystem for device operation. Each processor has at least one independent channel for updating a respective software version within the respective processor. A compatibility synchronization module has a database storing a table of compatible software versions for each processor. It is updated when a new software version for a processor is created. This table is independent of software images for the software versions. The compatibility synchronization module is operative for verifying if the software version for a processor is compatible with other software versions at other processors and instructs a respective device subsystem to revert back to a compatible software version within a respective processor or prevent any incompatible software updates within the processor.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08561052&OS=08561052&RS=08561052
owner: Harris Corporation
number: 08561052
owner_city: Melbourne
owner_country: US
publication_date: 20081208
---
The present invention relates to synchronizing multiple processors including FPGA s server farms PC clusters microclusters and similar processors and more particularly the present invention relates to a communications device with field upgrade capabilities in a plurality of independent processors that are dependent on each other and verifying software versions for the processors

Many communications devices such as software defined radios or similar electronic devices include at least two processors each with their own binaries that are dependent on each other. These multiple processors exchange data and communicate with each other and depend on each other to operate the device. Each processor typically has its own independent channels to update the software to a specific or desired software version. For example in a software defined radio SDR analog signals are converted into the digital domain where the different functions of frequency generation modulation bandwidth security and waveform requirements are performed by software modules or components in the software defined radio. Analog signals are converted into the digital domain where these functions are performed using digital signal processing.

One class of software defined radio that takes advantage of these above described advantages and features is the Joint Tactical Radio JTR . This type of radio system usually has at least two processors that are used for red and black side radio subsystems. Independent channels are operative at each processor for each subsystem and used to update the software to a specific software version. For example the radio can be upgraded to a new software version in the field such as using over the air OTA updates. Updating the software independently within each processor with new software versions however can make the software in one of the processors incompatible with another software version contained in the other processor. In this situation the red subsystem processor in a software defined radio would be incompatible with the black subsystem processor that is to be upgraded or has already been updated and this incompatibility could create problems during radio operation.

Because of these possible errors in upgrading the software versions in different processors as part of different device or radio subsystems for example if there is accidental upgrade to incompatible versions forced procedures for upgrade techniques and trained personnel are typically required to upgrade the software versions. When incompatible software versions exist these trained personnel must repair the radio as necessary making any software version upgrade expensive and time consuming Upgrading software versions may even require a trained technician taking the radio apart to perform the software upgrade. It is desirable if the programming of the two or more processors with an independent binary or software solution such as in a software defined radio or similar electronic device with multiple processors in subsystems could be linked for example linking red and black processors in a Joint Tactical Radio that conforms with the Software Communications Architecture SCA of the Joint Tactical Radio System JTRS such that software version upgrades leading the incompatible versions could be avoided.

A multiprocessor device includes a plurality of device subsystems each having a processor dependent on a respective other processor in another device subsystem for device operation. Each processor has at least one independent channel for updating a respective software version within the respective processor. A compatibility synchronization module has a database storing a table of compatible software versions for each processor. It is updated when a new software version for a processor is created. This table is independent of software images for the software versions. The compatibility synchronization module is operative for verifying if the software version for a processor is compatible with other software versions at other processors and instructs a respective device subsystem to revert back to a compatible software version within a respective processor or prevent any incompatible software updates within the processor.

The compatibility synchronization module in one aspect is located within one of the processors and in another aspect is located external to the processor. A user interface can be provided through which a user interfaces with the device subsystems. The compatibility synchronization module is operative for determining when a new software version within the processor is incompatible. In response it can send a warning message to the user interface indicating that the software version in the respective processor is incompatible. In response to the warning message software containing the new software version is disregarded or allowed to update based on user action through the user interface.

Each processor is also operative for reverting back to a previous software version that is compatible upon device shutdown after the compatibility synchronization module determines that a processor has a software version that is incompatible. Each processor can revert back to a previous software version by signaling a processor to revert. A data storage can be operative with the respective processor in which previous software versions that are compatible are stored to which a respective processor can revert back to when the synchronization compatibility module determines that a software version of a processor is compatible.

The multiprocessor device in one aspect could be a software defined radio having a radio circuit with multiple radio subsystems each having a processor that is dependent on a respective other processor in another radio subsystem for radio circuit operation. Each processor has at least one independent channel for updating a respective software version within the processor. An executable radio software system is operable with the radio circuit and multiple radio subsystems and conforms to the software communications architecture SCA specification and defines an operating environment that allows a waveform application to operate with a radio circuit for transmitting and receiving voice and data.

Different embodiments will now be described more fully hereinafter with reference to the accompanying drawings in which preferred embodiments are shown. Many different forms can be set forth and described embodiments should not be construed as limited to the embodiments set forth herein. Rather these embodiments are provided so that this disclosure will be thorough and complete and will fully convey the scope to those skilled in the art. Like numbers refer to like elements throughout.

Thus as shown in the interconnected communication system has the first and second processors and each having field upgrade capabilities for updating each processor with a respective software version upgrade. The two or more independent processors as shown in have separate resources and independent programming capabilities. One of the processors could contain the compatibility synchronization module or the module could be separate from the processors as illustrated in and noted before.

The compatibility synchronization module has configurable information about a compatible software version for each interconnected processor . When one of the processor s software version is updated the compatibility synchronization module checks if the software version is compatible and in one non limiting example either rolls back the software version upgrade to a previous software version or prevents any software version upgrades.

The system is operable with different use cases and could operate with different FPGA s server farms PC clusters microclusters and different processors. One use case is checking at software version upgrade. When a new software version is received that version is checked in the compatibility synchronization module. If the new software version is incompatible with the current software version on the other processor or multiple other processors a warning message will be sent to the user interface such as part of the display on the software defined radio or an audible alarm can sound. Depending on the user action the system can proceed with the software version upgrade programming or disregard the received a file of that particular software version upgrade. This could be advantageous in some situations when over the air programming is used for upgrading the software version for example.

In another use case software version checking can occur at boot up. The radio does not conduct any checks on the received files. It programs the software images and when the radio is re powered it checks if both processors have software versions that are compatible and reverts to back up copies if the versions are not compatible.

In yet another use case the device system can check software versions at shut down. If some programs with software versions are not compatible the processor can revert to a previous software version stored as a back up. These different use cases as described can be mixed and matched.

When the compatibility synchronization module is upgraded or loaded with new software versions it maintains the old database information and knows at any time the compatible software versions and what software versions are and are not compatible.

The use of the compatibility synchronization module in this operating environment has several advantages. It prevents radio malfunctioning after programming and prevents operator mistakes during programming. It reduces the cost of reprogramming the radio which otherwise without the compatibility synchronization module might need to be disassembled to program each processor with a new software version independently. The process allows a graceful platform recovery.

Programming for the compatibility synchronization module and multiple processors can occur in different circuits corresponding to a processor such as Field Programmable Gate Array FPGA or digital signal processor DSP as non limiting examples. VHDL VHSIC hardware description language can be used for the different processors or Field Programmable Gate Arrays and Application Specific Integrated Circuits. VHDL is typically used as a design entry language and programming accomplished in the C language or similar languages . Different entities could be used as a design to describe an interface in the architecture with different configurations. Mux templates latch templates different types of flip flops counters and different constructs can be used with different register transfer levels.

Referring now to a process or flow sequence is shown that occurs when the system such as part of a radio device looks for the compatibility synchronization module such as at power up or boot up. It should be understood that the compatibility synchronization module can be located in any of the processors as indicated for processor processor or processor or the module could be separately located external to the processors within the radio and not part of those processors such as a software module programmed in a FPGA as the processor.

At initial power up the system checks for the compatibility synchronization module to determine if it is located in processor . If it is not present the system checks in the second processor and if not present the boot process continues and the system checks for the compatibility synchronization module in processor . In this particular example processor contains the compatibility synchronization module. If processor did not contain the compatibility synchronization module the boot or power up would continue until the compatibility synchronization module was located as a separate software component on another processor or within the radio or other device at part of another component or stand alone module with appropriate programming.

It should be understood that this multiprocessor system typically has a software controlled shutdown. In a first aspect shown at the top portion of the diagram the compatibility synchronization module sends a power down command to each processor. For example a power down command could occur by the user of the radio pushing the off button on the radio user interface. The compatibility synchronization module would check for compatible software versions within the synchronization module and check processor to determine if it is compatible and if it is the synchronization module would send a signal instructing to power that processor down. The compatibility synchronization module then checks processor to determine if it is compatible and if it is not it would tell processor through appropriate instructions to revert back to its compatible version such as from version 1.7 to version 1.5 back up and then power down. Processor X may be compatible when the compatibility synchronization module checks and verifies and processor X is then shut down by command from the compatibility synchronization module in this example.

In a second aspect shown at the lower portion of each independent processor can power down on its own. Each processor already knows whether it is compatible or is not compatible. For example a specific processor may have been informed of its software version compatibility state upon initial software version upgrade in one example and whether it was compatible with version 1.5 or version 1.7 for example . That processor stores that information. On power down the compatibility synchronization module shuts itself down. Processor would know whether it is compatible and as illustrated it is compatible and powers down. Processor for example may not be compatible and it reverts to a back up software version such as version 1.5 and powers down. The process continues with each of the processors up to processor X.

It should be understood that there are a number of ways to shut down the radio or device system. When the compatibility synchronization module receives the shut down command it can send a message to each processor to let that respective processor know if its software version is compatible or not and therefore that processor is required to reverse and back up a software version. Another possible scenario is when each processor keeps the power up response as received from the compatibility synchronization module and decides what to do when it receives the shutdown command.

A piece of software will have a given interface as represented by the different interfaces for the read interface compatibility interface and write interface . These are used to resolve software versions and also allow for upgrades in the compatibility synchronization module. For example if at an initial upgrade software version 1.5 is upgraded to version 1.7 the software may be uploaded and the compatibility synchronization module upgrades by the system writing to the write interface .

As a non limiting example data can be written into the write access block . The authentication block or module is first checked and the software upgrade for the compatibility synchronization module is authenticated and a determination made whether that is a go or no go yes or no as indicated. The upgraded version will be pushed into the version database and communication occurs between the write access block and the authentication block or module to make sure that version is acceptable to be pushed. This can occur when one of the processors is booting and it states for example write version 1.7 to be pushed into the version database. The system can also determine if a processor is valid before software versions are pushed and used to ensure the processor and software version is authentic. The processor would read its software version into the software version database and in association with the compatibility synchronization module determine the compatibility result and output data to the compatibility block through the compatibility interface stating whether it is compatible or not compatible. This process could be used with any number of processors. Compatibility information is typically pushed out of the compatibility interface.

With advances in processing capabilities and programming technologies software defined mobile wireless communications devices e.g. software defined radios continue to increase in popularity. Rather than relying upon hardware and circuitry components to perform tasks such as frequency modulation bandwidth security functions and waveform requirements these functions are performed by software modules or components in the software defined radio. In this type of radio analog signals are converted into the digital domain where these functions are performed using digital signal processing

Because most of the functions of the radio are controlled by software software defined radios may be implemented with relatively standard processor and hardware components reducing device hardware costs providing greater flexibility in upgrading the device since new communications waveform modules can be uploaded to the device relatively easily without interchanging new hardware components.

One particular class of software defined radio which takes advantage of the above described advantages features is the Joint Tactical Radio JTR . The JTR radio includes relatively standard radio and processing hardware and appropriate waveform software modules to implement the communication waveforms the radio will use. JTR radios use operating system software that conforms with the Software Communications Architecture SCA Specification which is hereby incorporated by reference in its entirety. The SCA is an open architecture framework that specifies how hardware and software components interoperate so that different manufacturers and developers can integrate their respective components into a single device with little difficulty.

Still another class of mobile wireless communications devices that increasingly use software components for communicating with different waveforms or protocols are cellular communication devices. That is many cellular devices are now designed to operate with more than one of the numerous cellular standards that are used throughout the world such as the Global System for Mobile Communications GSM and Personal Communications Services PCS for example. Some have multiprocessor systems with different but interrelated processors.

The Joint Tactical Radio System JTRS Software Component Architecture SCA defines a set of interfaces and protocols often based on the Common Object Request Broker Architecture CORBA for implementing a Software defined Radio SDR . In part JTRS and its SCA are used with a family of software re programmable radios. As such the SCA is a specific set of rules methods and design criteria for implementing software re programmable digital radios.

The JTRS SCA specification is published by the JTRS Joint Program Office JPO . The JTRS SCA has been structured to provide for portability of applications software between different JTRS SCA implementations leverage commercial standards to reduce development cost reduce development time of new waveforms through the ability to reuse design modules and build on evolving commercial frameworks and architectures.

The JTRS SCA is not a system specification as it is intended to be implementation independent but a set of rules that constrain the design of systems to achieve desired JTRS objectives. The software framework of the JTRS SCA defines the Operating Environment OE and specifies the services and interfaces that applications use from that environment. The SCA OE comprises a Core Framework CF a COREA middleware and an Operating System OS based on the Portable Operating System Interface POSIX with associated board support packages. The JTRS SCA also provides a building block structure defined in the API Supplement for defining application programming interfaces APIs between application software components.

The JTRS SCA Core Framework CF is an architectural concept defining the essential core set of open software interfaces and profiles that provide for the deployment management interconnection and intercommunication of software application components in embedded distributed computing communication systems. Interfaces may be defined in the JTRS SCA Specification. However developers may implement some of them some may be implemented by non core applications i.e. waveforms etc. or and some may be implemented by hardware device providers.

The specifications for the JTRS radio and SCA typically require an interface for command and data red and black processing systems and use separate processors and switch fabrics. A radio platform typically includes multiple multiprocessor embedded systems including Field Programmable Gate Arrays FPGA s and Digital Signal Processors DSP s each as separate systems and processors.

Many of the current radio platforms have a high degree of vertical integration between the hardware and software. This has proven to be a difficulty when upgrading the platforms with different software versions and has been a driving factor behind the definition and realization of this Joint Tactical Radio System JTRS Software Communication Architecture SCA . The compatibility synchronization module solves many of the issues confronted when upgrading separate processors with new software versions.

The SCA standard calls for a certain hardware and software complement. shows a SCA compliant hardware architecture for a radio indicated by the dashed lines at .

Input and Output I O occurs for a dedicated general purpose red processors GPP s which are provided on either side of a programmable cryptographic processor PCP . These GPPs are typically Reduced Instruction Set Computers RISC that have sufficient memory and processing resources to handle necessary functions in the SCA architecture allocated to unencrypted data red processing and encrypted data black processing in one non limiting example. For military applications the PCP is typically a government endorsed module that supports the Cryptographic Equipment Applications that are required by the radio. Closer to the antenna and mapped into the address space of the black GPP are usually programmable hardware such as a Field Programmable Gate Array FPGA as a switch fabric and a digital signal processor DSP and associated assets that are required to perform application specific modem and protocol functions. The radio RF hardware is provided for the distinct frequency bands channel bandwidths and power levels needed by the target applications of the radio. A switch fabric is shown operable on the red side. In this example the compatibility synchronization module is part of the red GPP and programmed therein as a separate programmable code but it could be part of other components instead.

The GPPs typically have a low level layer of software called a board support package BSP that contains the hardware specific drivers and software functions that are required to run a Portable Operating System Interface POSIX compliant Real Time Operating System RTOS The SCA Application Environment Profile AEP dictates the use of CORBA middleware for intra component communications and the POSIX compliant operating system on the GPP. The middleware includes the CORBA ORB and a hardware abstraction as part of a component power management service definition. SCA application include the core framework operating environment . The synchronization module is illustrated generally at .

It is also typical to include a low level layer of software in the radio on the GPP that abstracts the platform specific features into a generic set of hardware based functions that can be used by the SCA devices and services. The DSP and FPGA resources of the radio have also recently become the focus of SCA Version 3.0 in a specialized hardware supplement the disclosure which is hereby incorporated by reference in its entirety. This supplement extends the definition of the SCA AEP to include a definition of the platform environment on the DSP and FPGA resources. The JTRS SCA compliant application software is developed to this set of standards. This is the basis of application portability and the environment for which a set of power management capabilities are defined in accordance with one non limiting example of the present invention.

There are no established sets of features or Application Programming Interfaces APIs in the software environment that can be used to pull this highly layered software architecture together and as a result the kind of vertical coordination between the layers of software that is necessary is defined on a platform by platform basis. The facilities that are available on a given platform are highly dependent on the hardware architecture.

It should be understood that the compatibility synchronization module can be located on the red GPP as illustrated the black GPP DSP FPGA switch fabric or separate in some other part of the radio circuitry

Another view of a software defined radio is shown in again showing the different possible locations for the compatibility synchronization module. It is shown as possibly located on the red FPGA black FPGA the voice DSP VDSP on the red processing side the DSP on the black processing side or part of the common components .

In accordance with non limiting examples of the present invention multiprocessor embedded systems and related methods can be used with the radio software communications architecture as described including mainframe computers or small computers including laptops with an added transceiver such as used by military and civilian applications or portable wireless communications device as shown in at . The portable wireless communications device is illustrated as a radio that can include a transceiver as described above as an internal component and handheld housing with an antenna and control knobs . A Liquid Crystal Display LCD or similar display can be positioned on the housing in an appropriate location for display. The various internal components including dual processor systems for red and black subsystems and software that is conforming with SCA is operative with the illustrated radio. Although a portable or handheld radio is disclosed the architecture as described can be used with any processor system operative with the transceiver using SCA. An example of a communications device in accordance with non limiting examples of the present invention is the Falcon III manpack or tactical radio platform manufactured by Harris Corporation of Melbourne Fla.

A basic radio circuit such as used in a software defined radio as described above is shown generally by the block diagram at and includes common radio components indicated generally at and red processing components and black processing components operable with a modem . Each of the red and black processing components include a field programmable gate array digital signal processor with the red being a Voice DSP VDSP and other circuit components known to those skilled in the art. A cryptographic module is operable with both red and black side components. The compatibility synchronization module is shown in dashed lines because it can be in different locations and shown at the numerical references 

Many modifications and other embodiments of the invention will come to the mind of one skilled in the art having the benefit of the teachings presented in the foregoing descriptions and the associated drawings. Therefore it is understood that the invention is not to be limited to the specific embodiments disclosed and that modifications and embodiments are intended to be included within the scope of the appended claims.

