---

title: Managing thread affinity on multi-core processors
abstract: Embodiments of the invention intelligently associate processes with core processors in a multi-core processor. The core processors are asymmetrical in that the core processors support different features or provide different resources. The features or resources are published by the core processors or otherwise identified (e.g., via a query). Responsive to a request to execute an instruction associated with a thread, one of the core processors is selected based on the resource or feature supporting execution of the instruction. The thread is assigned to the selected core processor such that the selected core processor executes the instruction and subsequent instructions from the assigned thread. In some embodiments, the resource or feature is emulated until an activity limit is reached upon which the thread assignment occurs.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08561073&OS=08561073&RS=08561073
owner: Microsoft Corporation
number: 08561073
owner_city: Redmond
owner_country: US
publication_date: 20080919
---
Multi core processors have multiple processing units on a single integrated circuit. In some existing systems the processing units or cores are symmetrical in that all the cores have identical configurations or support identical features. In other existing systems the cores are slightly asymmetrical in that each core may have a different configuration. For example one core may have a floating point co processor while another core does not have such a co processor. The asymmetrical design enables manufacturers to reduce the cost and size of the multi core processors.

Developers of existing multi core processing systems assign processes to particular cores in a static hardcoded way. For systems with slightly asymmetrical cores the existing methods of assigning processes to cores result in unbalanced task loading of the cores varying power consumption of the cores and irregular responsiveness of the cores among other inefficiencies.

Embodiments of the invention manage thread execution on multi core processors having slightly asymmetrical cores. Resources or features of the core processors are identified. A request to execute an instruction associated with a thread is received. The instruction corresponds to at least one of the identified resources. One of the core processors is selected based on the corresponding resource to execute the instruction. The thread is assigned to the selected core processor such that the selected core processor executes the instruction and subsequent instructions from the assigned thread.

This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter nor is it intended to be used as an aid in determining the scope of the claimed subject matter.

Embodiments of the invention provide a computing device having a multi core processor such as shown in . The multi core processor includes a plurality of core processors such as core processor through core processor N where N is a positive integer. The computing device optimizes execution of the threads by aligning assigning or otherwise associating each of the threads with one of the core processors . Each of the core processors supports resources or features and each might have a configuration that differs from one or more of the other core processors . For example one of the core processors may support floating point operations while another core processor lacks such support. In another example one of the core processors may have a different processor frequency or clock speed from another one of the core processors . In yet another example the core processors have different power consumption or available caches such as caches in . As such aspects of the invention are operable with core processors that are considered asymmetrical or slightly asymmetrical. For example the core processors share the same instruction set but are tuned or configured differently.

The computing device also has access to a memory area . The memory area may be internal to the computing device as shown in or external to the computing device not shown . The memory area stores a list of the resources associated with each of the core processors . The list may be generated by querying each of the core processors individually. Alternatively or in addition the list may be generated by receiving a publication of the resources features or configuration of each of the core processors from each of the core processors . The memory area or other computer readable medium also stores computer executable components for implementing aspects of the invention. The components include an affinity component a threshold component a performance component a maintenance component and a publication component . These components are described in detail below with reference to .

The computing device includes any device with one or more processing units. While some embodiments of the invention are applicable to a mobile device aspects of the invention are operable with other computing devices. For example these other computing devices include but are not limited to personal computers server computers digital cameras portable music players gaming consoles hand held or laptop devices multiprocessor systems microprocessor based systems set top boxes programmable consumer electronics network computers minicomputers mainframe computers and distributed computing environments that include any of the above systems or devices and the like.

In an embodiment the multi core processor is transformed into a special purpose microprocessor by executing computer executable instructions or by otherwise being programmed. For example the multi core processor executes computer executable instructions for performing the operations illustrated and described below with reference to and .

Referring next to an exemplary block diagram illustrates the core processor and resources supported by the core processor. The resources include for example co processors such as floating point units or digital signal processors caches such as an L1 cache or configuration data such as a processor frequency or clock speed. The co processors are directed to but not limited to special purpose operations such as for graphics rendering image processing encryption and floating point operations.

Referring next to an exemplary block diagram illustrates a quad core processor in which only two core processors include a floating point co processor. In the example of the quad core processor has four core processors. Only two of the core processors have floating point units while only one of the core processors has single instruction multiple data support.

Referring next to an exemplary flow chart illustrates the assignment of threads to the core processors based on the resources supported by the core processors . At the resources associated with each of a plurality of the core processors on the multi core processor are identified. For example the core processors may publish the supported resources . Alternatively or in addition the resources may be identified by querying each of the core processors individually to obtain the list of the resources features configuration data or the like. In an embodiment a hardware abstraction layer HAL application programming interface API for an operating system at the kernel level enables the querying. The granularity of the querying is at the core level as shown in the example API function call GetProcessorCoreInformation Core Infotype Coreinfo wherein Core represents the core number being queried Infotype represents the type of information being requested and Coreinfo represents the information being requested about the core. Examples of the Infotype argument include co processors caches and processor frequency. Examples of the Coreinfo argument for Infotype co processor include the particular brand of co processor.

Alternatively or in addition an application program executing on the computing device queries the underlying multi core processor to determine whether there is support for some of the instructions coming from the application program. For example an API function call such as IsProcessorFeaturePresent Feature is called by the application program. The function call returns a True or False value. In some embodiments the function call returns a bit mask of the core processors that support the feature.

Alternatively or in addition the application program informs the operating system kernel that a thread from the application program will utilized a particular feature. The kernel uses the information to appropriately schedule the thread on the core with the feature. An example API enabling this functionality includes RequestCoreFeature ThreadId Feature where ThreadId is the thread identifier and Feature is the feature requested by the application program for the thread.

If a request to execute an instruction from a thread is received at one of the core processors is selected at . The core processor is selected based on the resource corresponding to the instruction. For example if the instruction includes a floating point operation the selected core processor is a core processor having a floating point co processor. In some embodiments the request to execute the instruction is detected by trapping the request via the operating system of the computing device .

At the thread is assigned or otherwise associated with the selected core processor. For example an affinity is created between the thread and the selected core processor. Accordingly the selected core processor executes the instruction and subsequent instructions from the assigned thread. In an embodiment not shown the memory area stores the assignment between the thread and the selected core processor.

Referring next to an exemplary flow chart illustrates the assignment of threads to the core processors of the multi core processor after an activity limit has been reached. The activity limit for each of the core processors is defined by a user developer or other means. The activity limit is chosen for example to maintain a proper load balance among the core processors . Alternatively or in addition the activity limit may be defined at other granularities such as individual activity limits for each of the co processors associated with each of the core processors . A request to execute an instruction that uses a particular co processor resource is detected at . For example an operating system on the computing device traps the request from the thread to execute the instruction. The core processor having the co processor resource is selected and emulation of the co processor occurs at . That is after detecting the instruction that uses the resources of a particular core processor the operating system emulates the instruction and subsequent instructions from the thread until the usage of the core processor exceeds a set limit as shown in operations and .

During execution of the thread the operating system monitors an activity level or a usage level of the selected core processor. The monitored activity level is compared to the activity limit defined previously. Emulation of the selected core processor continues at so long as the usage of the co processor does not exceed the activity limit at . If the usage of the selected core processor exceeds the defined activity limit at emulation ends and the thread is assigned to the selected core processor having the co processor resource at . The selected core processor executes subsequent instructions from the assigned thread based on the assignment.

Referring next to an exemplary flow chart illustrates the termination of a thread assignment based on inactivity. If hardware or other means is not available to detect co processor utilization at the existing thread assignment or affinity is terminated removed deleted or otherwise undone at such that subsequent instructions from the thread are executed by any of the available core processors in the multi core processor . If the means for detecting co processor utilization are available at the co processor activity is monitored or detected at . For example performance counters are used for the monitoring or detection. If the monitored co processor activity exceeds set limits e.g. the activity limit at the thread assignment is maintained at . If the monitored co processor activity does not exceed the activity limit at the thread assignment is terminated at .

The operations illustrated in may be implemented in hardware of the computing device or in the operating system of the computing device by for example the components illustrated in . In such an embodiment the affinity component accesses a defined relationship between each of a plurality of threads and a plurality of the core processors on the multi core processor . The defined relationship is based on resources associated with the plurality of core processors . The plurality of threads publishes the resources associated with the instructions by for example the publication component . Via the defined relationship the plurality of core processors executes instructions from the plurality of threads based on the defined relationship. The threshold component defines an activity limit for each relationship accessed by the affinity component . The performance component e.g. a co processor performance counter monitors usage of the plurality of core processors by the plurality of threads. The maintenance component compares the usage monitored by the performance component to the activity limit for each relationship defined by the threshold component . The maintenance component terminates the relationship for one or more of the threads based on the comparison such that any of the plurality of core processors executes subsequent instructions from the threads responsive to the termination. In some embodiments the threshold component adjusts the defined activity limit for a terminated relationship responsive to the termination. For example the activity limit may be set to zero or null.

A computer or computing device such as described herein has one or more processors or processing units system memory and some form of computer readable media. By way of example and not limitation computer readable media comprise computer storage media and communication media. Computer storage media include volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. Communication media typically embody computer readable instructions data structures program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and include any information delivery media. Combinations of any of the above are also included within the scope of computer readable media.

Although described in connection with an exemplary computing system environment embodiments of the invention are operational with numerous other general purpose or special purpose computing system environments or configurations. The computing system environment is not intended to suggest any limitation as to the scope of use or functionality of any aspect of the invention.

Embodiments of the invention may be described in the general context of computer executable instructions such as program modules executed by one or more computers or other devices. The computer executable instructions may be organized into one or more computer executable components or modules. Generally program modules include but are not limited to routines programs objects components and data structures that perform particular tasks or implement particular abstract data types. Aspects of the invention may be implemented with any number and organization of such components or modules. For example aspects of the invention are not limited to the specific computer executable instructions or the specific components or modules illustrated in the figures and described herein. Other embodiments of the invention may include different computer executable instructions or components having more or less functionality than illustrated and described herein.

The embodiments illustrated and described herein as well as embodiments not specifically described herein but within the scope of aspects of the invention constitute exemplary means for assigning the thread during execution of the thread to one of the plurality of core processors based on the resources associated with the core processors and exemplary means for managing assignment of the thread to one of the plurality of core processors based on an activity level of said one of the plurality of core processors .

The order of execution or performance of the operations in embodiments of the invention illustrated and described herein is not essential unless otherwise specified. That is the operations may be performed in any order unless otherwise specified and embodiments of the invention may include additional or fewer operations than those disclosed herein. For example it is contemplated that executing or performing a particular operation before contemporaneously with or after another operation is within the scope of aspects of the invention.

When introducing elements of aspects of the invention or the embodiments thereof the articles a an the and said are intended to mean that there are one or more of the elements. The terms comprising including and having are intended to be inclusive and mean that there may be additional elements other than the listed elements.

Having described aspects of the invention in detail it will be apparent that modifications and variations are possible without departing from the scope of aspects of the invention as defined in the appended claims. As various changes could be made in the above constructions products and methods without departing from the scope of aspects of the invention it is intended that all matter contained in the above description and shown in the accompanying drawings shall be interpreted as illustrative and not in a limiting sense.

