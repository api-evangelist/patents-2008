---

title: Test environment for accumulating cumulative metric data
abstract: A method for testing a system under test includes defining a test having a number of test elements where at least one of the test elements corresponds to a simulation model with a metric setting. A test vector is defined for the test, and it is used to determine a number of test iterations. The metric setting of the simulation model is mapped to a test variable, and when the test is run metric data is generated from the simulation model during each test iteration. The metric data generated for each test iteration is accumulated and displayed.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08265916&OS=08265916&RS=08265916
owner: The MathWorks, Inc.
number: 08265916
owner_city: Natick
owner_country: US
publication_date: 20080110
---
This application is a continuation of copending U.S. patent application Ser. No. 11 647 595 which was filed on Dec. 29 2006 by Christian Portal and Michael Thomas entitled Test Environment for Accumulating Cumulative Metric Data.

In developing a test for a simulation model of a system under test a test engineer may desire to understand how well the test covers the simulation model. The test engineer may validate the simulation model by exercising the simulation model for various test conditions specified by the test. Model coverage may determine the extent to which the test exercises simulation pathways through the simulation model and may offer a measure of how thoroughly the test tests the simulation model. Hence model coverage helps a test engineer validate the test being developed for the simulation model. Existing test environments for developing a test do not provide a convenient way for incorporating model coverage into a design cycle for the test. In addition existing test environments for developing a test may require intensive manual input by the test engineer to validate the test.

In one embodiment the invention may be a computer implemented method to generate cumulative metric data for a test in a test environment. The method includes generating at least one temporary test variable for a test having one or more test conditions associated therewith the one or more test conditions for determining a plurality of iterations associated with a simulation model generating at least one mapping between a metric setting for the simulation model and the at least one temporary test variable generating metric data for the simulation model based on the at least one mapping and one or more iterations of the test wherein the generating is based on running the test according to the one or more test conditions and producing cumulative metric data for the simulation model for the at least one mapping and the one or more iterations of the test based on the generated metric data.

In another embodiment the invention may be a computer readable medium having software which when executed by a computer system causes the computer system to perform operations in a computing environment to generate a test in a test environment. The operations include generating at least one temporary test variable for a test having one or more test conditions associated therewith the one or more test conditions for determining a plurality of iterations associated with a simulation model generating at least one mapping between a metric setting for the simulation model and the at least one temporary test variable generating metric data for the simulation model based on the at least one mapping and one or more iterations of the test wherein the generating is based on running the test according to the one or more test conditions and producing cumulative metric data for the simulation model for the at least one mapping and the one or more iterations of the test based on the generated metric data.

A system to generate a test in a test environment including means for generating at least one temporary test variable for a test having one or more test conditions associated therewith the one or more test conditions for determining a plurality of iterations associated with a simulation model means for generating at least one mapping between a metric setting for the simulation model and the at least one temporary test variable means for generating metric data for the simulation model based on the at least one mapping and one or more iterations of the test wherein the generating is based on running the test according to the one or more test conditions and means for producing cumulative metric data for the simulation model for the at least one mapping and the one or more iterations of the test based on the generated metric data.

Further features of the invention as well as the structure and operation of various embodiments of the invention are described in detail below with reference to the accompanying drawings.

A computer may refer to one or more apparatus and or one or more systems that are capable of accepting a structured input processing the structured input according to prescribed rules and producing results of the processing as output. Examples of a computer may include a computer a stationary and or portable computer a computer having a single processor multiple processors or multi core processors which may operate in parallel and or not in parallel a general purpose computer a supercomputer a mainframe a super mini computer a mini computer a workstation a micro computer a server a client an interactive television a web appliance a telecommunications device with internet access a hybrid combination of a computer and an interactive television a portable computer a tablet personal computer PC a personal digital assistant PDA a portable telephone application specific hardware to emulate a computer and or software such as for example a digital signal processor DSP a field programmable gate array FPGA an application specific integrated circuit ASIC an application specific instruction set processor ASIP a chip chips or a chip set a system on chip SoC or a multiprocessor system on chip MPSoC an optical computer a quantum computer a biological computer and an apparatus that may accept data may process data in accordance with one or more stored software programs may generate results and typically may include input output storage arithmetic logic and control units.

 Software may refer to prescribed rules to operate a computer. Examples of software may include software code segments instructions applets pre compiled code compiled code computer programs and programmed logic.

A computer readable medium may refer to any storage device used for storing data accessible by a computer. Examples of a computer readable medium may include a magnetic hard disk a floppy disk an optical disk such as a CD ROM and a DVD a magnetic tape a memory chip and or other types of media that can store machine readable instructions thereon.

A computer system may refer to a system having one or more computers where each computer may include a computer readable medium embodying software to operate the computer. Examples of a computer system may include a distributed computer system for processing information via computer systems linked by a network two or more computer systems connected together via a network for transmitting and or receiving information between the computer systems and one or more apparatuses and or one or more systems that may accept data may process data in accordance with one or more stored software programs may generate results and typically may include input output storage arithmetic logic and control units.

A network may refer to a number of computers and associated devices that may be connected by communication facilities. A network may involve permanent connections such as cables or temporary connections such as those that may be made through telephone or other communication links. A network may further include hard wired connections e.g. coaxial cable twisted pair optical fiber waveguides etc. and or wireless connections e.g. radio frequency waveforms free space optical waveforms acoustic waveforms etc. . Examples of a network may include an internet such as the Internet an intranet a local area network LAN a wide area network WAN and a combination of networks such as an internet and an intranet. Exemplary networks may operate with any of a number of protocols such as Internet protocol IP asynchronous transfer mode ATM and or synchronous optical network SONET user datagram protocol UDP IEEE 802.x etc.

Exemplary embodiments of the invention are discussed in detail below. While specific exemplary embodiments are discussed it should be understood that this is done for illustration purposes only. In describing and illustrating the exemplary embodiments specific terminology is employed for the sake of clarity. However the invention is not intended to be limited to the specific terminology so selected. A person skilled in the relevant art will recognize that other components and configurations may be used without parting from the spirit and scope of the invention. It is to be understood that each specific element includes all technical equivalents that operate in a similar manner to accomplish a similar purpose. Each reference cited herein is incorporated by reference. The examples and embodiments described herein are non limiting examples.

In block a test environment may be initiated on a computer a computer system or the like. The test environment may be used to develop and validate a test for a simulation model of a system under test. The test environment may be based on for example SystemTest by The MathWorks Inc. of Natick Mass. The system under test may be for example a software algorithm a hardware device a unit under test or a system model.

The simulation model may be for example code generated or created with an array based mathematical programming language such as for example MATLAB by The MathWorks Inc. or others including any other language that may include at least some commands that are executable in the MATLAB computing environment such as for example Octave Python and Comsol Script. The simulation model may also be for example a graphical model generated with a graphical modeling environment for modeling systems e.g. Simulink by The MathWorks Inc. Stateflow by The MathWorks Inc. or VisSim by Visual Solutions a graphical model generated with a graphical language e.g. LabView by National Instruments a model generated with a text based language or a model generated with a text based modeling language. The simulation model may be for example code or model generated or created with other programming languages whether industry standard or custom designed.

In block the test may be generated. The test may be generated by creating the test in the test environment and or by loading a previously created test into the test environment . The test may include multiple sections and parts such as for example a pre test section an iterations part a main test section a save results part and a post test section. Test elements may be added to the various test sections the test e.g. to the pre test section the main test section and the post test section . The test may include a number of test elements. Test elements may be added deleted and changed in the test environment. One of the test elements of the test may designate the simulation model . To include additional simulation models in the test a test element may be used to designate each simulation model.

Referring to the exemplary graphical user interface for the exemplary test environment of in a test browser window a test may be generated. Here the test is titled SignalBuilderDemo. The test may include a pre test section an iterations part a main test section a save results part and a post test section . A test may be added to the test browser and test elements may be added deleted and changed to the test via a toolbar and or a menu . Here the main test section of the test includes two test elements namely test elements and . The test element is for a simulation model labeled Model A which is a graphical model modeled with Simulink . Further the test element labeled Scalar Plot is for plotting data generated by the simulation model.

In block test conditions may be generated for the test . Test conditions may specify the values of variables in the test that vary during each iteration of the test or section of the test . The test conditions may be added deleted or changed in the test environment . Each test condition may identify a variable in the test and may include values for the variable for the test to iterate. In an exemplary embodiment the test conditions may be known as test vectors where the values for the variable for the test to iterate may be provided in vector notation e.g. such as the vector notation of MATLAB or C .

Referring to the exemplary graphical user interface of the exemplary embodiment of in a test vectors window of the test environment test vectors may be added deleted or changed for running the test via a menu . For each test vector the user may designate the name of the variable in the test and a vector identifying values for the variable. The test environment may automatically identify the values that the variable will take during the test and the number of iterations that the test or section of the test will be run based on the test vector.

In one test vector is generated for use when running the test . The test vector is for the variable named Height and identifies a vector of values starting at 1 and going to 10 in steps of 1. The test environment determined that the values for the test vector are 1 2 3 4 5 6 7 8 9 10 and that the iterations for the test vector are 10. Referring back to the iterations part for the test include the designation A of 10 which the test environment automatically includes based on the iterations from generated test vector . Additional test vectors may be added to the test via the test vectors window . As test vectors are added deleted and changed the designation A of the iterations part may be updated accordingly.

Referring back to in block temporary test variables may be generated for the test . Each temporary test variable may store data during the running of the test regarding the test . The temporary test variables are not actually part of the test . The temporary test variables may be temporary and may not be saved after the test is completed unless specifically indicated to be saved. The test variables may be added deleted or changed in the test environment . Each test variable may include an initial value and an indication of what portion of the test that the test variable should be initialized in.

Referring to in a test variables window temporary test variables may be added deleted or changed via a menu . For each temporary test variable the user may designate a name for the temporary test variable an initial value for the temporary test variable and a designation of which portion of the test the temporary test variable applies. The designation may designate a portion or all of the simulation model for which metric data is to be generated. Here one temporary test variable is generated for use by the test . The name of the temporary test variable is coverage and the temporary test variable has an initial value of 25 and has a designation of being initialized in the main test section . Additional temporary test variable may be added to the test via the test variables window .

Referring back to in block metric settings may be specified for the simulation model of the test . The metric settings may be used to perform measurements and or calculate metrics regarding how well the test exercised the simulation model . The metric settings may be based on for example metrics provided by the test environment metrics provided by the simulation model and or metrics provided by a user s . The metric settings may be specified based on selections from a menu of possible metrics. In an exemplary embodiment a metric generation module may be included with the test environment or may be a separately installed module for the test environment . The metric generation module may be used to generate metrics for the test . Block may be implemented using the flow chart depicted in .

In an exemplary embodiment for metric settings based on metrics provided by the simulation model an application program interface API may be provided for the test environment to incorporate the metrics provided by the simulation model into the test environment . To have the metrics provided by the simulation model incorporated into the test environment the simulation model may need to comply with the requirements of the API. The API may allow the test environment to interact with the metrics provided by the simulation model such as for example directing the metrics to display in a graphical user interface in a particular form or to provide the test environment with information as to the metrics dimension s data type s name etc. As an option the simulation model may be provided by a third party and the simulation model may generate metrics and provide the generated metrics to the test environment by using the API.

Examples of the metric settings that may be specified may include model coverage which may determine how well the test simulates the simulation model code coverage which may determine how well the test simulates the simulation model when the simulation model is code memory usage which may determine how memory of the computer is used during the test parameter statistics which may determine statistics of parameters in the test and or simulation model decision coverage which may determine the percentage of simulation paths in the simulation model covered by the test e.g. decision coverage may examine items that represent decision points in a model such as for example Simulink switch blocks or Stateflow states condition coverage which may determine the percentage of logical elements of the simulation model covered by the test e.g. condition coverage may examine blocks that output the logical combination of their inputs such as for example Simulink logic blocks or Stateflow transitions modified condition decision coverage MC DC which may determine whether each input of each logical element changed the output of the respective logical element during the test while the other inputs to the respective logical element were held constant e.g. MC DC may analyze safety critical software and may determine whether the logical inputs have independently changed the output look up table coverage which may determine what percentage of each look up table of the simulation model is covered by the test e.g. lookup table coverage may record the frequency of usage for each interpolation interval where a test may achieve full coverage if the test executes each interpolation and extrapolation interval at least once signal range coverage which may determine the minimum and maximum values generated by the simulation model during by the test e.g. signal range coverage may indicate the minimum and maximum values generated during the simulation of each for example Simulink block output or Stateflow data object cyclomatic complexity coverage which determines the structural complexity of the simulation model covered by the test e.g. cyclomatic complexity may measure the structural complexity of a simulation model by approximating the McCabe complexity measure for code generated from the model and the like. Other test elements may have other metric settings.

In block the metric settings for the simulation model are accepted. The simulation model may include previously identified metric settings which may be configured within the simulation model .

In block the metric settings for the simulation model are not accepted and a selection of coverage for the simulation model may be received. The coverage may designate which portions of the simulation model that the metric settings should be used for. Referring to the coverage may be determined by selection of the button . depicts an exemplary graphical user interface for selecting a coverage path with the button . Upon selection of the button a system selector window may be opened and the simulation model or one of its nested subsystem models may be selected as the coverage path. Here the selected simulation model labeled systemtestsfcar is selected for coverage.

In block a selection of metric settings for the selected coverage of block may be received. The test environment may present a number of metric settings to select and some or all of the metric settings may be selected. Referring to an area of the properties window may provide for the receipt of a selection of one or more metric settings such as for example decision coverage condition coverage MCDC coverage look up table coverage and signal range coverage . Here all of the possible metric settings are selected.

Returning to block in mappings may be generated between the specified metric settings and the temporary test variables . For the simulation model the metric settings may be mapped to the temporary test variables . The mappings may be added deleted or changed via the test environment . Referring to in an area of the properties window the metric settings for the simulation model may be mapped to the test variables. Via menu mappings may be added deleted or changed. Block may be implemented using the flow chart depicted in .

In block a selection for the mapping of one metric setting may be received. The single metric setting may be selected from the metric settings specified in block . In a metric setting may be selected. The possible metric settings choices may be the same or different than those available in area of the properties window in . Here the selected metric setting is look up table coverage .

In block a selection for the mapping of a temporary test variable may be received. The temporary test variable may be selected from the temporary test variables generated in block . In the test variable may be selected via a menu. Here the selected test variable is the coverage variable which was created in the test variables window and listed as the test variable named coverage .

Blocks may be performed in any order. Mappings may be added deleted or changed via the test environment .

Returning to block in the test may be run and metric data may be accumulated for the simulation model based on the metric settings and assigned to temporary test variables based on the mappings . For each iteration of the test or section of the test values for the test variables in the test may be changed according to the test conditions generated in block values may be determined for the temporary test variables generated in block and metric data may be calculated and assigned to test variables based on the mappings generated in block . After each iteration the temporary test variables are re set to their initial values. For example referring to after each iteration the temporary test variable designated as a main test section variable is re set to its initial value which was specified through the test variables window . depicts an exemplary graphical user interface for a status window . While the test is being run the status window may include status information on the test .

In block cumulative metric data may be generated based on the metric data accumulated over all iterations of the simulation model by the mappings in block . Further the cumulative metric data may be provided. For example the cumulative metric data may be provided via an output device of the computer e.g. displayed or printed by storing the cumulative metric data on a computer readable medium of the computer by being sent by the computer to a destination via a network and or by being made available for further use within the test environment. A model coverage report may be generated based on the cumulative metric data . Referring to the status window may include a link to launch a coverage report. Further depicts an exemplary graphical user interface for displaying an exemplary cumulative coverage report. In a coverage report window in the cumulative coverage report may be presented. The cumulative coverage report may include a summary section and a details section .

Exemplary embodiments of the invention may be embodied in many different ways as a software component. For example it may be a stand alone software package or it may be a software package incorporated as a tool in a larger software product such as for example a mathematical analysis product or a test generation product. It may be downloadable from a network for example a website as a stand alone product or as an add in package for installation in an existing software application. It may also be available as a client server software application or as a web enabled software application.

Bus may include one or more interconnects that permit communication among the components of computer . Processor may include any type of processor microprocessor or processing logic that may interpret and execute instructions e.g. a field programmable gate array FPGA . Processor may include a single device e.g. a single core and or a group of devices e.g. multi core . Memory may include a random access memory RAM or another type of dynamic storage device that may store information and instructions for execution by processor . Memory may also be used to store temporary variables or other intermediate information during execution of instructions by processor .

ROM may include a ROM device and or another type of static storage device that may store static information and instructions for processor . Storage device may include a magnetic disk and or optical disk and its corresponding drive for storing information and or instructions. Storage device may include a single storage device or multiple storage devices such as multiple storage devices operating in parallel. Moreover storage device may reside locally on computer and or may be remote with respect to computer and connected thereto via a network and or another type of connection such as a dedicated link or channel.

Input device may include any mechanism or combination of mechanisms that permit an operator to input information to computer such as a keyboard a mouse a touch sensitive display device a microphone a pen based pointing device and or a biometric input device such as a voice recognition device and or a finger print scanning device. Output device may include any mechanism or combination of mechanisms that outputs information to the operator including a display a printer a speaker etc.

Communication interface may include any transceiver like mechanism that enables computer to communicate with other devices and or systems such as a client a server a license manager a vendor etc. For example communication interface may include one or more interfaces such as a first interface coupled to a network and or a second interface coupled to a license manager. Alternatively communication interface may include other mechanisms e.g. a wireless interface for communicating via a network such as a wireless network. In one implementation communication interface may include logic to send code to a destination device such as a target device that can include general purpose hardware e.g. a personal computer form factor dedicated hardware e.g. a digital signal processing DSP device adapted to execute a compiled version of a model or a part of a model etc.

Computer may perform certain functions in response to processor executing software instructions contained in a computer readable medium such as memory . In alternative embodiments hardwired circuitry may be used in place of or in combination with software instructions to implement features consistent with principles of the invention. Thus implementations consistent with principles of the invention are not limited to any specific combination of hardware circuitry and software.

While various exemplary embodiments have been described above it should be understood that they have been presented by way of example only and not limitation. Thus the breadth and scope of the present invention should not be limited by any of the above described exemplary embodiments but should instead be defined only in accordance with the following claims and their equivalents.

