---

title: Method, system and apparatus for presenting forms and publishing form data
abstract: A method for presenting forms and publishing form data are provided. A software component determines if a request for a network resource containing a form has been received. The software component then determines whether a previously compiled class file should be utilized to respond to the form request. If a previously compiled class file cannot be utilized, the software component compiles a class file capable of generating the fields of the requested form. When the class file is compiled, a field engine table is consulted and field names for the fields to be placed on the requested form are retrieved. A field name specified in the field engine table is associated with the correspondence fields in a form. When a submission containing response data for the fields in the form is received, the software component saves the response data in an output table having fields named identically to the fields in the form.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07877434&OS=07877434&RS=07877434
owner: AT&T Intellectual I, L.P.
number: 07877434
owner_city: Reno
owner_country: US
publication_date: 20081030
---
The present invention relates to the field of computer forms. More particularly but not by way of limitation the present invention relates to the field of dynamically generating forms and publishing form data to a database.

In order to effectively market products and services to consumers both on and off the World Wide Web the Web or WWW it is necessary to collect accurate and relevant information from Web users. One way that Web sites have traditionally collected such information is through the use of Web forms. Web forms are markup language documents containing input fields that a user may fill in with data. For instance a Web form may include text input boxes in which a user may type text data radio buttons or check boxes that a user may select to identify a particular item or drop down menus that provide a list of items that a user may select from. Once the user has made their entries on the Web form the user may submit the data contained in the completed fields to a host computer for storage and processing. Web forms provide a convenient interface for computer users to provide all kinds of data and are therefore utilized frequently by Web programmers.

Although Web forms are often easy to use from a user perspective Web forms can be difficult for Web programmers to deploy and maintain. In particular it is often difficult and time consuming to deploy a new Web form or to add additional fields to an existing Web form. This is generally the result of the software architecture utilized in prior art systems for implementing Web forms. In these systems the field names utilized to identify the fields within a Web form are hard coded into the application that handles the forms. Similarly the names of the database tables and database fields for storing form data are also hard wired into the application. Because the form field names and database field names are hard coded into the application the application code must be modified each time a new form is added or an existing form is modified. This process can be time consuming for an experienced Web programmer and virtually impossible for a non programmer Web designer.

Therefore in light of the above there is a need for a method system and apparatus for presenting forms and publishing form data that does not require application code to be rewritten or modified in order to add fields to an existing form. There is a further need for a method system and apparatus for presenting forms and publishing form data that does not require application code to be written in order to add a new form to an existing Web application.

The present invention solves the above described problems by providing a method computer system and computer readable medium for presenting forms and publishing form data that does not require application code to be rewritten or modified to add fields to an existing form. The present invention also provides a method system and apparatus for presenting forms and publishing form data that does not require application code to be written to add a new form to an existing Web application.

Generally described the present invention comprises a computer system for presenting forms and publishing form data. In one embodiment of the present invention the computer system maintains a field engine table that contains data describing the fields to be utilized on a form. This data may include data identifying the form name with which the field is to be utilized the version number of the form with which the field is utilized the type of input field to be utilized and other types of data.

The field engine table also contains field names for each of the fields. The field names are associated with the corresponding response data when a user submits the completed form. The computer system also maintains an output table for storing form response data. The output table has the same name as the corresponding form and has fields that have names identical to the form fields contained in the form.

The computer system provided herein also comprises a software component for receiving and responding to requests for network resources such as Web pages that contain forms. According to one embodiment of the present invention the software component is operative to determine if a request for a network resource containing a form has been received. If such a request has been received the software component determines whether a previously compiled class file should be utilized to respond to the form request. If a previously compiled class file cannot be utilized the software component compiles a class file capable of generating the fields of the requested form.

When the class file is compiled the field engine table is consulted and the field names of the fields to be placed on the requested form are retrieved. The field names specified in the field engine table are then associated with corresponding fields in the form. In this manner the markup language for displaying the form is constructed so the field names will be returned with the corresponding form response data when the completed form is submitted to the software component.

The software component provided herein can also receive the submission of response data associated with each of the field names. This occurs in response to the submission of the completed form by a user. When the software component receives the response data the software component saves the response data in the output table having the same name as the completed form. The software component also saves the response data for each field in the field of the output table having the same name as the field name of the field. Because the field names of the form fields are the same as the names of the data fields in the output database the software component does not have to be hard coded with the field names. Therefore the software component also does not have to be modified if a form is added to an application or if a field on an existing form is modified.

The present invention also provides an apparatus and computer readable medium for presenting forms and publishing form data. Additional details regarding the present invention will be provided in the detailed description that follows.

The present invention is directed to a method computer system and computer readable medium for presenting forms and publishing form data. Aspects of the present invention may be embodied in an executable software component for providing the functionality described herein. Additionally aspects of the present invention may be embodied in software components utilized in conjunction with a Web server application program such as the IPLANET WEB SERVER provided by IPLANET E COMMERCE SOLUTIONS A SUN NETSCAPE ALLIANCE of Palo Alto Calif.

Referring now to the figures in which like numerals represent like elements an actual embodiment of the present invention will be described. Although aspects of the invention will be described in the general context of an application program that executes on an operating system in conjunction with a server computer those skilled in the art will recognize that the invention also may be implemented in combination with other program modules. Generally program modules include routines programs components data structures and the like that perform particular tasks or implement particular abstract data types. Moreover those skilled in the art will appreciate that the invention may be practiced with other computer system configurations including hand held devices multiprocessor systems microprocessor based or programmable consumer electronics minicomputers mainframe computers and the like. Although the invention is also described as being practiced in distributed computing environment where tasks are performed by remote processing devices that are linked through a communications network other possible implementations should be apparent to those skilled in the art.

Referring now to an illustrative operating environment for an embodiment of the present invention will be described. Aspects of the present invention are implemented as an executable software component executing on a server computer such as Web server computers A N accessible via a distributed computing network such as the Internet . As is well known to those skilled in the art the Internet comprises a collection of networks and routers that use the Transmission Control Protocol Internet Protocol TCP IP to communicate with one another. The Internet typically includes a plurality of local area networks LANs and wide area networks WANs that are interconnected by routers. Routers are special purpose computers used to interface one LAN or WAN to another. Communication links within the LANs may be twisted wire pair or coaxial cable while communication links between networks may utilize 56 Kbps analog telephone lines 1 Mbps digital T 1 lines 45 Mbps T 3 lines or other communications links known to those skilled in the art. Furthermore computers such as client computer and other related electronic devices can be remotely connected to either the LANs or the WANs via a permanent network connection or via a modem and temporary telephone link. It will be appreciated that the Internet comprises a vast number of such interconnected networks computers and routers.

A client computer capable of executing a Web browser application program not shown such as Microsoft Internet Explorer may be utilized to transmit a request for a Web page or other type of network resource to one of the Web server computers A N. As is well known to those skilled in the art the Web is a vast collection of interconnected network resources including hypertext documents written in Hypertext Markup Language HTML or other markup languages that are available from Web sites accessible through the Internet . A Web site is provided by a Web server computer like Web server computers A N connected to the Internet that has mass storage facilities for storing such network resources and that executes administrative software for handling requests for the network resources.

Large scale Web sites are typically implemented utilizing a two tier computer systems architecture as shown in . The first tier typically comprises one or more front end Web server computers like Web server computers A N that receive and process live requests for network resources from client computers connected to the Internet . As is well known to those skilled in the art the first tier Web servers are frequently connected to the Internet through a load balancing device such as the Local Director from Cisco Systems . The load balancing device intercepts requests intended for one of the Web server computers A N and forwards each request to a Web server computer that has computing resources available to respond to the request. In addition to the Web server computers A N a large scale Web site may also include a back end server computer not shown that stores network resources that may be served to client computer by one of the Web server computers A N. Additional details regarding the operation of the Web server computers A N will be provided below with respect to .

Turning now to an illustrative software architecture for operating a Web server computer A will be described. As shown in a three tier software architecture is utilized. The three tier architecture separates the data and logic for generating data from the presentation of the data. By separating data and logic in this manner the presentation of the data may be easily modified without modification of the underlying business logic.

The three tier software architecture shown in includes a presentation layer . The function of the presentation layer is to provided the presentation of data to a requesting device. According to the actual embodiment of the present invention described herein the presentation layer comprises JAVA SERVER PAGE JSP technology provided by SUN MICROSYSTEMS. As is known to those skilled in the art JSP pages provide a simplified way to create Web pages that display dynamically generated content. Additional details regarding the JSP technology utilized in the actual embodiment described herein will be discussed in greater detail below with respect to . Those skilled in the art should appreciate that other types of presentation layer technologies such as the ACTIVE SERVER PAGE technology from MICROSOFT CORPORATION may also be utilized to implements aspects of the present invention.

The second tier of the three tier software architecture shown in comprises an interface layer to databases and legacy systems. The interface layer comprises executable software code for providing an interface to business logic databases and other types of legacy systems. In the actual embodiment of the present invention described this layer comprises JAVA BEANS or ENTERPRISE JAVA BEANS for interfacing with the database layer but other types of code platforms may be utilized. The database layer comprises an interface to databases and other types of legacy computer systems. Other types of executables may also be utilized. Additional details regarding the software architecture for the Web server computer A will be described below with reference to .

Referring now to a hardware architecture for an illustrative Web server computer A will be described. The Web server computer A comprises a general purpose server computer for receiving and responding to Hypertext Transfer Protocol HTTP requests as known to those skilled in the art. The Web server computer A comprises a conventional server computer including a central processing unit a system memory and a system bus that couples the system memory to the processing unit . The Web server computer A also typically includes at least some form of computer readable media.

Computer readable media can be any available media that can be accessed by the Web server computer A. By way of example and not limitation computer readable media may comprise computer storage media and communication media. Computer storage media includes volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. Computer storage media includes but is not limited to random access memory RAM read only memory ROM EPROM EEPROM flash memory or other solid state memory technology CD ROM digital versatile disks DVD or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can be accessed by the Web server computer A.

According to an embodiment of the present invention the system memory includes a ROM and a RAM . A basic input output system BIOS not shown containing the basic routines that help to transfer information between elements within the Web server computer A such as during start up is stored in the ROM . The Web server computer A further includes a mass storage device such as a hard disk drive a magnetic disk drive e.g. to read from or write to a removable disk or an optical disk drive e.g. for reading a CD ROM disk or to read from or write to other optical media such as a DVD. The Web server computer A may include a combination of such mass storage devices. The mass storage device is connected to the system bus through a mass storage device interface not shown .

As described above with respect to the Web server computer A operates in a networked environment. According to an embodiment of the invention the Web server computer A communicates with the client computer over the Internet . The Web server computer A connects to the Internet through a network interface unit . It should be appreciated that the network connections shown are illustrative and other means of establishing a communications link between the Web server computer A and the Internet may be utilized.

A user may control the operation of the Web server computer A through traditional input devices such as a keyboard or a mouse. These and other input devices may be connected to the central processing unit through an input output controller that is coupled to the system bus . A monitor not shown or other type of display device may also be connected to the system bus via a video display interface not shown . Additionally the Web server computer A may include other peripheral output devices such as a printer.

A number of program modules may be stored in the mass storage device and RAM including an operating system suitable for controlling the operation of a server computer such as the SOLARIS operating system from SUN MICROSYSTEMS of Palo Alto Calif. Additionally a Web server application program may be stored in the mass storage device and the RAM such as the IPLANET WEB SERVER provided by IPLANET E COMMERCE SOLUTIONS A SUN NETSCAPE ALLIANCE of Palo Alto Calif. As known to those skilled in the art the Web server application program is operative to receive HTTP requests through the network interface and to respond to those requests. Typically an HTTP request will take the form of a request for a network resource such as a JSP page a page encoded in HTML a graphics file or another application program stored at or accessible to the Web server computer A.

In conjunction with the Web server application the Web server computer A may also maintain a JAVA runtime extension package that supports the use of JAVA servlets and JSP pages on the Web server computer A. The JAVA runtime extension package comprises a JAVA virtual machine which includes a servlet engine and a JSP engine . As known to those skilled in the art JAVA servlets are programs written in the JAVA programming language from SUN MICROSYSTEMS that execute on a server computer as opposed to a client computer. The JAVA virtual machine interprets JAVA programs that have been compiled into byte code and stored in a class file.

JSP pages provide a simplified way to create Web pages that display dynamically generated content. JSP pages utilize extensible markup language XML tags and scriptlets written in JAVA to encapsulate the logic that generates the content for the page. JSP passes any formatting tags directly back to the response page. In this way JSP pages separate the page logic from the design and display of the page. More specifically JSP pages are created to include JSP technology specific tags declarations and possibly scriptlets in combination with other static HTML or XML tags. The JSP engine interprets the tags and scriptlets contained in a JSP page and generates a class file which when interpreted by the servlet engine generates and returns the desired content. A JSP page may include calls to external components such as the database access class JAVABEANS components the JAVA Database Connectivity JDBC application programming interface or other types of components. A JSP page may also include a file. A JSP page has the extension .jsp which signals to the Web server application that the JSP engine will process elements on the page. Additional details regarding the operation of the database access class will be described below with reference to .

The Web server computer A also maintains a form JSP page on the mass storage device . Using the above described process for executing JSP the form JSP page generates the content for a Web page that includes a form. As mentioned above a form comprises a page that contains input fields that a user may fill in with data. As will be described in greater detail below with respect to the form JSP page utilizes the database access class which in turn utilizes the field engine table to generate the content for displaying the form. The form JSP page also utilizes the database access class to save the posted form data to the output table . Additional details regarding the format and structure of the field engine table and the output table are described below with reference to . Additional details regarding the operation of the database access class will be provided below with respect to .

Turning now to the format and contents of the field engine table and the output table will be described. As discussed briefly above the field engine table is utilized by the database access class to generate the markup language for displaying a form. The database access class is called from the form JSP page . In particular the field engine table defines the field names for each of the fields in a form and the data type for each field. To accomplish this the field engine table contains a form name field A a field name field B a version number field C and a data type field N.

The form name field A identifies a particular Web form associated with a particular field. The field name field B specifies the name that should be utilized to identify the field and the response data submitted for the field. The data type field N comprises data indicating what type of input field should be displayed. For instance the data type field N may indicate that a text field for entering numbers words or other small pieces of text a text area field for free form multi line text entries a radio button for picking one item in a list or other type of input field should be displayed. The version number field C identifies a version number corresponding to the field. Through the use of these fields the database access class may create markup language comprising a displayable form that has fields A N having field names as specified by the field name field B.

As shown in the output table has data fields A N that are named identically to the fields of the displayable form . For instance the output table shown in has data fields named FIRSTNAME LASTNAME CITYNAME and ZIPCODE. The output table also has a name that is identical to the name of the displayable form . In the example shown in the name of the form is ORDER and the name of the output table is ORDER. By creating the output table in such a manner that its data field names are identical to the fields of the form the database access class does not need to be hard coded with the field names. Additional details regarding the use and operation of the field engine table and the output table will be described below with respect to .

Referring now to an illustrative routine will be described for initializing software components utilized to generate a displayable form from the contents of the field engine table . The routine begins at block where the form JSP page is created. As described briefly above the form JSP page includes embedded tags for formatting and displaying the Web page content. The form JSP page also includes calls to the database access class for generating the form fields contained on the page.

From block the routine continues to block where the field engine table is created. The field engine table defines the fields that should be utilized in the form. As described above with respect to the field engine table includes field names a form name a version number and a data type for each field contained in the form JSP page . From block the routine continues to block where the generic database access class is validated. The routine then continues to block where the database access class the field engine table and the form JSP page are deployed on the Web server computer A. The Web server application is then initialized. Once the Web server application has been initialized it is operative to receive and process requests for the form JSP page . This includes requests to generate the displayable form or to publish data in a completed form. The operation of the Web server application in this regard is described in detail below with respect to . From block the routine continues to block where it ends.

Referring now to an illustrative routine will be described for processing requests to present the form JSP page or to publish the completed fields of the form. The routine begins at block where a request is received by the Web server application for the form JSP page . As described above the file extension of the form JSP page will indicate to the Web server application that the response to the request for the file should be handled by the JAVA runtime extension .

From block the routine continues to block where the JAVA runtime extension determines whether the current request for the form JSP page is the first request for the page since the last server restart. If the current request is the first request for the form JSP page the routine branches to block . If the current request is not the first request the routine continues to block .

At block an executable class file is created from the form JSP page by the JSP engine . An illustrative routine for compiling the form JSP page is described below with respect to . From block the routine continues to block where the compiled form JSP page is executed. The execution of the compiled file results in the displayable form being returned to the client computer that initially requested the form JSP page . The routine then continues from block to block .

At block a determination is made as to whether the current request for the form JSP page is not the first request for the page. If the current request is not the first request the routine branches from block to block where a previously compiled class file is executed. The previously compiled class file is utilized to respond to the request for the form JSP page . If at block a determination is made that the current request for the form JSP page is not a subsequent request the routine branches from block to block .

At block a determination is made as to whether a request has been received at the Web server application to submit completed fields of the form JSP page . Such a request is typically initiated by a user after the user has completed the fields of the form JSP page with response data. If such a request is received the routine continues from block to block where the field names associated with the response data are extracted from the submission. The routine then continues to block where the response data is written to the fields of the output table matching the field names of the form JSP page . In this manner response data is written to fields of the output table corresponding to the identically named fields. The routine returns from block to block where a subsequent request for the form JSP page is processed.

Turning now to an illustrative routine will be described for compiling an executable class file from the form JSP page . As discussed briefly above the JSP engine compiles the form JSP page into byte code that is executable by the servlet engine . In particular the routine begins at block where the field names for the appropriate form are retrieved from the field engine table . The routine then continues to block where an executable code is created for generating mark up language to display the forms including field names as specified in the field engine table . The routine then continues to block where the compiled class file is saved. The routine then continues to block where it returns to block and the compiled class file is executed. When the compiled class file is executed it prepares and returns a response to the client computer for the form JSP page .

Those skilled in the art should appreciate that although the present invention is described herein as being implemented using JSP pages other technologies for dynamically generating content may be utilized to implement the present invention. For instance Active Server Pages ASP from MICROSOFT CORPORATION of Redmond Wash. could be utilized to implement the present invention. Those skilled in the art should also appreciate that although the present invention is described in the context of a Web server application an application server may also be utilized to provide the functionality described herein.

Based upon the foregoing it should be appreciated that the present invention provides a method computer system and computer readable medium for presenting forms and publishing form response data. Moreover the above specification examples and data provide a complete description of the manufacture and use of the composition of the invention. Since many embodiments of the invention can be made without departing from the spirit and scope of the invention the invention resides in the claims hereinafter appended.

