---

title: Systems and methods for storage allocation in provisioning of virtual machines
abstract: Embodiments relate to systems and methods for storage allocation in the provisioning of virtual machines. A provisioning (or “cobbler”) server can interact with a local virtual machine installation client to initiate software provisioning to a set of virtual machines. The provisioning process can entail, for example, the selection and delivery of an operating system to the target set of virtual machines, as well as the installation of applications or other software. In conjunction with the provisioning process, the virtual machine installation client can identify and access a set of storage resources, such as hard disk or other storage, to be associated with the set of virtual machines, which themselves contain no local storage. That client can determine an allocation of the set of storage resources to each virtual machine in the set of virtual machines, for instance on a pro-rata basis or based on processing consumption or other factors.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08103776&OS=08103776&RS=08103776
owner: Red Hat, Inc.
number: 08103776
owner_city: Raleigh
owner_country: US
publication_date: 20080829
---
The present teachings relate to systems and methods for storage allocation in the provisioning of virtual machines and more particularly to platforms and techniques for identifying and allocating disk and other storage capacity to a set of virtual machines via a remote virtual machine installation client over a network.

Provisioning platforms are known which allow a systems administrator to select configure and push a set of software to new machines on a network. It is a shortcoming in existing provisioning platforms that the systems administrator may have to make manual selections and perform other tasks manually in order to carry out that installation process. In the case of software provisioning to sets of virtualized machines the installation difficulties can be compounded since the virtual machines may not have pre configured storage and other resources that the administrator may similarly have to identify and manually allocate to each machine deployed on the network.

It may be desirable to provide methods and systems for storage allocation in the provisioning of virtual machines in which the allocation of storage assets to newly instantiated or existing virtual machines can be guided by various metadata such as that stored on a centralized provisioning server.

Embodiments of the present teachings relate to systems and methods for storage allocation in the provisioning of virtual machines in a network. More particularly embodiments relate to platforms and techniques for the identification and allocation of storage resources that will be available to a set of virtual machines and the automatic allocation or distribution of storage resources to individual virtual machines. In embodiments a remote virtual machine installation client can host a storage management engine which detects the configurations and software provisioning settings for virtual machines in a set of virtual machines. The storage management engine can determine an assignment of storage resources to each virtual machine on one or more different bases. In embodiments the storage management engine can determine a total amount of assembled storage available in a combined storage pool and allocate each virtual machine an equal share of those resources. In embodiments the storage management engine can allocate different amounts or types of storage to different virtual machines for instance based on the intended use processing load or other characteristics of individual machines. The storage management engine can store the allocated storage resources to a storage allocation table. In embodiments the storage management engine can monitor and or update the allocations to the set of virtual machines based on changed conditions in the set of virtual machines. These and other embodiments described herein address the various noted shortcomings in known virtual machine management technology and provide a network operator or other user with enhanced flexibility and convenience to set up and configure networks of virtual machines without a need to manually inspect and assign storage assets to individual virtual machines.

Reference will now be made in detail to exemplary embodiments of the present teachings which are illustrated in the accompanying drawings. Where possible the same reference numbers will be used throughout the drawings to refer to the same or like parts.

In particular the provisioning environment can manage software provisioning using a hierarchy of commands. In exemplary embodiments the hierarchy can include at least four levels of commands. The lowest level in the hierarchy can comprise distribution commands which primarily handle base operating system specific tasks of provisioning. The second level can comprise profile commands which associate a configuration file such as a kickstart file for Linux or other operating system with a distribution and optionally allow for customization. The third level comprises system commands which associate remote systems that are involved with the provisioning of the software. The fourth level comprises repository commands which address configurations and tasks related to updating the software remote installation procedures and optionally customizing the software.

The provisioning environment provides several capabilities and advantages over the known provisioning solutions. For example the present invention is capable of handling a variety of forms of installations such as preboot execution environment PXE virtualization re installations and image installations.

In exemplary aspects the provisioning environment enables integrating virtualization into a PXE provisioning infrastructure and provides several options to reinstall running machines as well. The provisioning environment can integrate mirroring of package repositories with the provisioning process so that a provisioning server may serve as a central mirror point of contract for all of an organization s software needs. In aspects a set of remote mirrored repositories can automatically be used by provisioned systems without additional setup.

Reference will now be made in detail to the exemplary aspects the provisioning environment . The provisioning environment can be applied to provisioning any form of software such as Windows systems UNIX systems and Linux systems. In the exemplary description that follows is presented to explain the provisioning environment for provisioning software such as Linux and Linux based software such as Fedora and Red Hat Enterprise Linux by Red Hat Inc.

In provisioning of software such as Linux many system administrators use what is known as the kickstart installation method. Kickstart files are files that specify the intended configuration of the software being provisioned. Kickstart files can be kept on a server and can be read by individual computers during the installation. This installation method allows the use a single or relatively few standard kickstart files to install Linux on multiple machines making it ideal for network and system administrators.

The kickstart file can be a simple text file containing a list of items each identified by a keyword. In general a kickstart file can be edited with any text editor or word processor that can save files as ASCII text. One skilled in the art will recognize that the present invention may be applied to non kickstart files in software provisioning. For example configuration files such as AutoYAST Answer files used in Novell SuSe Linux and Sun Solaris Jumpstart files may also be used by the provisioning environment .

Typically a kickstart file can be copied to the boot disk or made available on the network. The network based approach is most commonly used as most kickstart installations for software provisioning such as Linux systems tend to be performed via a network using NFS FTP or HTTP on networked computers. Administrators also find it desirable that kickstart installations can be performed using a local CD ROM or a local hard drive.

Using kickstart files a system administrator can create a single file containing the parameters that are needed to complete a typical software installation. For example kickstart files specify parameters related to language selection mouse configuration keyboard selection boot loader installation disk partitioning network configuration NIS LDAP Kerberos Hesiod and Samba authentication firewall configuration and package selection.

According to exemplary aspects illustrated in the provisioning environment can include a provisioning server a code repository which provides access to distributions and a set of installation templates a set of exception plugins a helper client running on target machines in a network a provisioning database which comprises a distribution tree list and template list . Each of these components will now be further described.

The provisioning server from herein referred to as a cobbler is responsible for serving as a extensible markup language remote procedure call XMLRPC handler linking to or mirroring install distribution trees and a configuration database hosting kickstart templates hosting plugins generating installation images and the like. The cobbler server can be implemented as software such as Python code installed on a boot server machine and provides a command line interface for configuration of the boot server. In addition the cobbler server can make itself available as a Python application programming interface API for use by higher level management software not shown . The cobbler server supports provisioning via PXE image ISO installation virtualization re provisioning. As will be described later the last two modes are performed with the assistance of a helper client .

The code repository is responsible for hosting distributions and . The code repository may be implemented using well known components of hardware and software. Additionally the code repository can be or include one or more repositories hosting distributions. The distributions and can include bundles of software that is already compiled and configured. The distributions and may be in the form of either rpm deb tgz msi exe formats and the like. For example as Linux distributions the distributions and are bundles of software that comprise the Linux kernel the non kernel parts of the operating system and assorted other software. The distributions and can take a variety of forms from fully featured desktop and server operating systems to minimal environments.

In exemplary aspects the installation templates are any data structure or processing element that can be combined with a set of installation configurations and processed to produce a resulting configuration file such as a kickstart file.

In exemplary aspects exception plugins is software that interacts with cobbler server to customize the provisioning of software. In general the exceptions plugins are intended to address infrequent customization needs.

In exemplary aspects the helper client known as koan which stands for kickstart over a network can assist the cobbler server during the provisioning processes. The koan can allow for both network provisioning of new virtualized guests and destructive provisioning of any existing system. When invoked the koan can request profile information from a remote boot server that has been configured with the cobbler server . In some aspects what the koan does with the profile data depends on whether it was invoked with virt or replace self.

In exemplary aspects the koan can enable replacing running systems as well as installing virtualized profiles. The koan can also be pushed out to systems automatically from the boot server. In some aspects the koan client is also written in Python code to accommodate a variety of operating systems machine architectures etc.

In exemplary aspects the network can include a number of the target machines . The target machines can represent the particular machines to which software provisioning is directed. The target machines may represent a wide variety of computing devices such as personal computers servers laptop computers personal mobile devices and the like. In some aspects the target machines can represent distributed computing environments such as cloud computing environments. Although shows several of the target machines the provisioning environment can be capable of managing a wide range of environments such as datacenters with thousands of machines or server pools with just a few machines. Additionally the cobbler server can be connected to multiple networks .

In exemplary aspects the provisioning database can serve as a data storage location for holding data used by the cobbler server . For example as shown the provisioning database can comprise the distribution tree list and the template list . The distribution tree list can provide an inventory of the distributions and that are hosted or mirrored by the cobbler server . The template list can provide an inventory of the templates that are hosted by the cobbler server .

As noted above the cobbler server can manage provisioning using a hierarchical concept of distribution commands profile commands system commands and repository commands. This framework enables the cobbler server to abstract the differences between multiple provisioning types installation reinstallation and virtualization and allows installation of all three from a common platform. This hierarchy of commands also permits the cobbler server to integrate software repositories with the provisioning process thus allowing systems to be configured as a mirror for software updates and third party content as well as distribution content.

Distributions can contain information about base operating system tasks such as what kernel and initial ramdisk initrd are used in the provisioning along with other information such as required kernel parameters. Profiles associate one of the distributions and with a kickstart file and optionally customize it further for example using plugins . Systems commands associate a hostname IP or MAC with a distribution and optionally customize the profile further. Repositories contain update information such as yum mirror information that the cobbler server uses to mirror repository . The cobbler server can also manage generate DHCP configuration files using the templates .

In exemplary aspects the cobbler server can use a provisioning environment that is fully templated allowing for kickstarts and PXE files to be customized by the user. The cobbler server uses the concept of profiles as an intermediate step between the operating system and the installed system. A profile is a description of what a system does rather than the software to be installed. For instance a profile might describe a virtual web server with X amount of RAM Y amounts of disk space running a Linux distribution Z and with an answer file W.

In exemplary aspects the cobbler server can provide a command line interface to configure a boot server in which it is installed. For example the format of the cobbler server commands can be generally in the format of cobbler command subcommand arg1 arg2 . Thus a user can specify various aspects of software provisioning via a single interface such as a command line interface or other known interface. Examples of exemplary cobbler commands can be found in U.S. patent application Ser. No. 11 763 315 U.S. Patent Application Publication No. US 2008 0288938 A1 and U.S patent application Ser. No. 11 763 333 U.S. Patent Publication No. US 2008 288939 A1 the disclosures of which are incorporated herein in their entirety by reference.

According to exemplary aspects a user can use various commands of the provisioning environment to specify distributions and install trees hosted by the code repository such as a distribution from the distributions or . A user can add or import a distribution or import it from installation media or an external network location.

According to exemplary aspects in order to import a distribution the cobbler server can auto add distributions and profiles from remote sources whether this is an installation media such as a DVD an NFS path or an rsync mirror. When importing a rsync mirror the cobbler server can try to detect the distribution type and automatically assign kickstarts. By default in some embodiments the cobbler server can provision by erasing the hard drive setting up eth0 for DHCP and using a default password. If this is undesirable an administrator may edit the kickstart files in etc cobbler to do something else or change the kickstart setting after the cobbler server creates the profile.

According to exemplary aspects a user may map profiles to the distributions and map systems to the profiles using profile commands and systems commands of the provisioning environment . A profile associates a distribution to additional specialized options such as a kickstart automation file. In the cobbler server profiles are the unit of provisioning and at least one profile exists for every distribution to be provisioned. A profile might represent for instance a web server or desktop configuration.

According to exemplary aspects a user can map systems to profiles using system commands. Systems commands can assign a piece of hardware with cobbler server to a profile. Systems can be defined by hostname Internet Protocol IP address or MAC address. When available use of the MAC address to assign systems can be preferred.

According to exemplary aspects the user can map repositories and profiles using repository commands. Repository commands can address configurations and tasks related to updating the software remote installation procedures and optionally customizing the software. These repository commands can also specify mirroring of the provisioned software to remote servers. Repository mirroring can allow the cobbler server to not only mirror install the trees and but also optional packages third party content and updates. Mirroring can be useful for faster more up to date installations and faster updates or providing software on restricted networks. The cobbler server can also include other administrative features such as allowing the user to view their provisioning configuration or information tracking the status of a requested software installation.

According to exemplary aspects a user can utilize commands to create a provisioning infrastructure from a distribution mirror. Then a default PXE configuration is created so that by default systems will PXE boot into a fully automated install process for that distribution. The distribution mirror can be a network rsync mirror or a mounted DVD location.

According to exemplary aspects the administrator uses a local kernel and initrd file already downloaded and shows how profiles would be created using two different kickstarts one for a web server configuration and one for a database server. Then a machine can be assigned to each profile.

According to exemplary aspects a repo mirror can be set up for two repositories and create a profile that will auto install those repository configurations on provisioned systems using that profile.

According to exemplary aspects in addition to normal provisioning the cobbler server can support yet another option called enchant . Enchant takes a configuration that has already been defined and applies it to a remote system that might not have the remote helper program installed. Users might want to use this command to replace a server that is being repurposed or when no PXE environment can be created. Thus the enchant option allows the koan client to be executed remotely from the cobbler server .

According to aspects if the cobbler server is configured to mirror certain repositories the cobbler server can then be used to associate profiles with those repositories. Systems installed under those profiles can be auto configured to use these repository mirrors in commands and if supported these repositories can be leveraged. This can be useful for a large install base fast installation and upgrades for systems are desired or software not in a standard repository exists and provisioned systems are desired to know about that repository.

According to exemplary aspects the cobbler server may also keep track of the status of kickstarting machines. For example the cobbler status will show when the cobbler server thinks a machine started kickstarting and when it last requested a file. This can be a desirable way to track machines that may have gone inactive during kickstarts. The cobbler server can also make a special request in the post section of the kickstart to signal when a machine is finished kickstarting.

According to exemplary aspects for certain commands the cobbler server will create new virtualized guests on a machine in accordance to the orders from the cobbler server . Once finished an administrator may use additional commands on the guest or other operations. The cobbler server can automatically name domains based on their MAC addresses. For re kickstarting the cobbler server can reprovision the system deleting any current data and replacing it with the results of a network install.

According to exemplary aspects the cobbler server can configure boot methods for the provisioning requested by the user. For example the cobbler server can configure a PXE environment such as a network card BIOS. Alternatively the cobbler server can compile and configure information for koan client . The cobbler server can also optionally configured DHCP and DNS configuration information.

According to exemplary aspects the cobbler server can serve the request of the koan client . The koan client can acknowledge the service of information of the cobbler server and then can initiate installation of the software being provisioned. Additionally the koan client can either install the requested software e.g. replace the existing operating system or install a virtual machine.

Before during or after the provisioning of software to set of virtual machines as described herein the storage management engine of remote virtual machine installation client can identify a baseline or initial set of storage to be assigned to each virtual machine. For example storage management engine can allocate an equal share of the available set of storage resources to each instantiated machine in set of virtual machines . In embodiments storage management engine can initially allocate storage to virtual machines using a temporary baseline or minimal configuration such as 10 gigabytes of disk storage to each virtual machine. In embodiments storage management engine can register or store an allocation to the set of virtual machines to a storage allocation table or other record.

In embodiments the remote virtual machine installation client and storage management engine can cause the provisioning of a operating system or other software generated by cobbler server directly to the allocated portion of set of storage resources for each virtual machine. In embodiments the storage management engine can dynamically or periodically adjust or re allocate storage resources dedicated to each virtual machine based on operating conditions in set of virtual machines . For example in embodiments storage management engine can increase the storage allocated to a virtual machine which generates a greater amount of stored data such as a transaction server recording a comparatively high number of online transactions. Virtual machines which are consuming a comparatively greater amount of communications bandwidth processing throughput or other operating metrics can similarly have their storage allocations increased. Less active virtual machines can have their storage allocations decreased. In the case of a virtual machine which is terminated the storage allocated to that virtual machine can be released back into the common pool of storage in set of storage resources which can be re allocated to remaining machines. Other criteria and schemes for storage allocation and updated allocations can be used. In embodiments as described the storage management engine can generate storage allocations to set of virtual machines using preconfigured or user selected criteria or rules. A systems administrator therefore need not manually detect and or assign storage to individual virtual machines as they are instantiated or provisioned.

Processor further communicates with network interface such as an Ethernet or wireless data connection which in turn communicates with one or more networks such as the Internet or other public or private networks. Processor can also communicate with the provisioning database the storage management engine and other resources to execute control logic and perform the storage allocation and provisioning processes described herein. Other configurations of the cobbler server associated network connections and other hardware and software resources are possible.

While illustrates the cobbler server as a standalone system comprising a combination of hardware and software the cobbler server can also be implemented as a software application or program capable of being executed by a conventional computer platform. Likewise the cobbler server can also be implemented as a software module or program module capable of being incorporated in other software applications and programs. In either case the cobbler server can be implemented in any type of conventional proprietary or open source computer language.

In a set of storage resources can be identified and or accessed by remote virtual machine installation client as storage resources to be associated with set of virtual machines . In embodiments set of storage resources can be or include storage servers storage arrays hard disk optical or solid state drives or other drives or storage. In remote virtual machine installation client can generate an allocation of set of storage resources to the constituent machines in set of virtual machines . The allocation can in embodiments for example consist of an equal share or portion of the total storage space available in set of storage resources to each virtual machine. In embodiments the allocation to each virtual machine can instead be determined based on the processing demands of a given virtual machine on the applications or other software installed on each virtual machine or be otherwise be made dynamic. In the remote virtual machine installation client can initiate the transmission installation and or storage of one or more pieces of software provisioned to each virtual machine to the allocated storage of that virtual machine as appropriate. For example an operating system distribution can be stored to the respective hard disk allocation of each virtual machine in set of virtual machines .

In the allocation of the set of storage resources can be stored or registered by remote virtual machine installation client to a storage allocation table maintained by remote virtual machine installation client or to another record or store. In processing can repeat return to a prior processing point jump to a further processing point or end.

The foregoing description is illustrative and variations in configuration and implementation may occur to persons skilled in the art. For example while embodiments have been described in which remote virtual machine installation client accesses and manages the allocation of a storage resources from a single set of storage resources in embodiments multiple sets or clusters or storage resources can be used to provide storage to set of virtual machines . For further example while embodiments have been described in which each virtual machine in set of virtual machines is allocated a discrete or separate set of storage resources in embodiments two or more virtual machines can share storage elements from the pool of common set of storage resources . Yet further while embodiments have been described in which each virtual machine can be associated with one virtual disk or other storage resource in embodiments any virtual machine in set of virtual machine can have multiple associated virtual disks or other storage resources. Other resources described as singular or integrated can in embodiments be plural or distributed and resources described as multiple or distributed can in embodiments be combined. The scope of the present teachings is accordingly intended to be limited only by the following claims.

