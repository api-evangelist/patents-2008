---

title: System and method for a mobile cross-platform software system
abstract: The present invention is a system and method for creating, developing and testing cross-platform software for mobile communications devices. The invention enables mobile device software that must be highly-integrated with the operating system on which it runs to be implemented in a cross-platform manner. Security software for mobile devices is a prime beneficiary of the present invention, as a substantial proportion of its functionality is identical between different platforms yet integrated very specifically into each platform it supports. The cross-platform system includes a core platform-independent component, a platform-specific component, and an abstraction layer component, each of which may communicate with each other using a common defined API. The present invention enables the platform-independent component to be completely re-used between platforms and allows the platform-specific and abstraction components to contain minimal amounts of code on each platform.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08099472&OS=08099472&RS=08099472
owner: Lookout, Inc.
number: 08099472
owner_city: San Francisco
owner_country: US
publication_date: 20081021
---
The present application is related to the following co pending U.S. patent applications U.S. patent application Ser. No. 12 255 635 entitled SECURITY STATUS AND INFORMATION DISPLAY SYSTEM U.S. patent application Ser. No. 12 255 632 entitled SECURE MOBILE PLATFORM SYSTEM U.S. patent application Ser. No. 12 255 621 entitled SYSTEM AND METHOD FOR ATTACK AND MALWARE PREVENTION and U.S. patent application Ser. No. 12 255 614 entitled SYSTEM AND METHOD FOR MONITORING AND ANALYZING MULTIPLE INTERFACES AND MULTIPLE PROTOCOLS all of which are hereby incorporated by reference.

The present invention relates generally to mobile software and specifically to creating a cross platform system for mobile communication devices.

The mobile market has grown significantly in the last few years. As new mobile communications devices come to market each offers new sets of hardware features that are attractive and useful to consumers. Unfortunately software development for mobile communications devices has not kept pace with hardware development. This is because each mobile communications device will often use a different operating system software platform or set of application program interfaces APIs even if each mobile communications device is made from the same manufacturer. Additionally each mobile communications service provider or carrier will often customize the performance configuration and interface for each device that it services. As a result there is wide divergence between the software platforms and software development for mobile communications devices.

In order to unify the different software platforms available for mobile communications devices in a market where there are numerous manufacturers and providers there has been some effort to develop cross platform solutions. Cross platform refers to operating systems or software applications that are designed to work on multiple platforms without requiring significant changes to the underlying software code. In general cross platform architecture is more common and more easily implemented on desktop computing platforms due to the availability of memory and processing resources and the standardization of interfaces on each type of platform. Desktop cross platform systems do not transfer well to mobile devices that lack these resources. Instead cross platform developers will sacrifice or adopt different methodologies in order to provide a system that is powerful enough to handle different applications across as many platforms as possible while maintaining a low memory footprint.

The typical cross platform system will comprise a component or module that is platform independent a component or module that is platform specific and an abstraction layer that may be utilized by either of the other components. These components or modules are generally software based but are designed to incorporate the commonalities and unique differences of the hardware upon which they are installed. Each component will communicate with others using its own API. This presents a problem in not having a uniform API for developers to use. In order to provide compatibility on as many devices as possible developers will abstract the underlying platform such that the various differences are not apparent. For example the abstraction layer s API is often designed to be general and non specific to the platform upon which it operates or the functionality it is being used to implement. Additionally or alternatively the cross platform system may incorporate a powerful all inclusive abstraction layer that provides some functionality that is duplicated between platforms thereby implementing a general multi purpose layer. As such the powerful abstraction layer is designed to account for all of the different features and desired functionalities implemented by utilizing that layer. While in theory this provides some cross platform features for arbitrary types of software in reality low level features that require full integration with a device s operating system are ignored since this type of abstraction layer design tends to isolate platform specific and platform independent components. Further building such an all inclusive abstraction layer requires a large body of software code which can be difficult to manage when maintaining platform abstraction layers for different platforms. What is therefore needed is a way to develop and build a cross platform system that provides both high and low level mobile device integration without taxing mobile device resources. What is further needed is a cross platform system that may be implemented on any mobile communications device regardless of manufacturer or service provider. What is also needed is a more lightweight abstraction layer that does not compromise power or functionality.

Because of the design of previous cross platform systems and methods the testing or quality assurance QA of these systems is tedious and difficult. Each platform specific component must be tested. Changes to the code for the different components require writing new testing code to evaluate these new changes. What is therefore needed is a more efficient way to test the cross platform system.

Currently there are multiple mobile device operating systems that each cannot run software built for other operating systems. As such developers must build software specifically for a mobile device operating system and therefore the mobile software market is said to be fragmented. Recently there has been some effort to create common operating system environments for emerging mobile communications devices. For example Google and the Mobile Handset Alliance have developed a mobile communications device platform and operating system called Android . Other common operating systems such as Windows Mobile Apple iPhone Research in Motion s Blackberry and Symbian also exist. While using a common operating system is an effective solution to reduce fragmentation it is unlikely to eliminate the problem. As long as there are multiple platforms that have significant market share software applications will need to run on the multiple platforms in order to achieve market penetration.

Some developers endorse virtualization as a possible solution. For example Java ME has been proposed as a viable cross platform for mobile communications devices. However it is well known that running a virtual machine on a mobile communications device will typically tax its resources to the point of significant performance degradation. Further virtual machine architecture is designed to be generic and therefore offers little to no access to the particular device running the virtual machine software. As such running a virtual machine on a mobile communications device is not a desirable solution for highly integrated software such as security software drivers and other software that significantly interfaces with the device s operating system.

Another cross platform solution for mobile communications devices is the adoption of a common binary runtime environment such as Qualcomm s BREW . However BREW is proprietary and limited to devices built upon or approved by Qualcomm . As such there are significant limitations as to the type scope and breadth of applications allowable on BREW. Additionally developers are restricted from accessing the low level operating system features of the mobile communications device which limits the amount of customization and integration available.

While these early efforts provide some cross platform functionality they are not adequate for highly integrated software. What is therefore needed is a more efficient way for creating developing and testing a cross platform system for mobile communications devices that is easy to manage implement and update.

The present invention is a system and method for creating testing and providing a cross platform software system for a mobile communications device. The present invention comprises a platform independent or core component a platform specific component and a lightweight abstraction layer component that may or may not be interdependent to the platform independent core. The abstraction layer component may depend on the platform independent component in order to access the functionalities of the platform independent component. As will be explained further below this architecture provides a cross platform system on the mobile communications device platform without sacrificing functionality or power. Additionally each component may communicate with the other using a common API as opposed to different APIs as is common in the prior art. As will be also discussed further below this architecture also streamlines the QA process since it allows for the re use of testing code and systems.

As used herein the term mobile communications device refers to mobile phones PDAs and smartphones but excludes laptop computers notebook computers or sub notebook computers. Specifically mobile communications devices include devices for which voice communications are a primary function but may offer data or other wireless Internet access capabilities. As used herein a mobile communications device may also be referred to as a mobile device mobile client or handset. However a person having skill in the art will appreciate that while the present invention is disclosed herein as being used on mobile communications devices the present invention may also be used on other computing platforms including desktop laptop notebook or server computers.

It should be appreciated that the present invention can be implemented in numerous ways including as a process an apparatus a system a device a method or a computer readable medium such as a computer readable storage medium containing computer readable instructions or computer program code or a computer network wherein computer readable instructions or computer program code are sent over optical or electronic communication links. Applications software programs or computer readable instructions may be referred to as components or modules. Applications may take the form of software executing on a general purpose computer or be hardwired or hard coded in hardware. Applications may also be downloaded in whole or in part through the use of a software development kit or toolkit that enables the creation and implementation of the present invention. In this specification these implementations or any other form that the invention may take may be referred to as techniques. In general the order of the steps of disclosed processes may be altered within the scope of the invention.

By way of example illustrates the interconnectedness between the different components of . Platform independent component may be comprised of platform independent software source code that communicates and interfaces with the other components by exposing the common API. As shown platform independent component may communicate with abstraction layer component using the common API. In turn abstraction layer component may communicate with platform independent component using the common API.

Platform independent component may also communicate with platform specific component through the use of one or more dynamic extensions. For example dynamic extensions may be registered with platform independent component that may call platform specific component when necessary or desirable. Dynamic extensions are discussed in more detail below. Platform specific component may communicate with platform independent component and or abstraction layer component using the common API.

The platform specific component may provide for functionalities that are not common to all mobile communications device platforms. For example as shown in these may include data protection providers anti spam sources attack prevention sources anti virus sources IPC GUI sync providers hook management and driver loading. The abstraction layer component that integrates with platform independent component and communicates with and between platform independent component and platform specific component may provide or access other functionalities such as missing ANSI C functions network interfaces file system access phone or device information secure storage an updater threading processes inter process communication user interface or callbacks or other actions .

Other examples of how an application built for use on the cross platform system are discussed further below. One will appreciate that the above lists are merely exemplary and are not intended to limit the present invention to any one embodiment.

Using the system architecture illustrated in and the messaging pathways illustrated in the present invention achieves efficient cross platform functionality by utilizing the specific features of each device platform and or provider while at the same time utilizing a powerful platform independent component library and API as a common code base for all devices. In an embodiment the cross platform system relies upon a more specific abstraction layer component than prior art systems. As such even though abstraction layer component exposes the same API on all mobile communications device platforms the underlying implementation of the applications running on the cross platform system differs.

As shown in the figures the platform independent component is designed to call and be called by abstraction layer component . As previously discussed prior art systems lack this type of cross communication. Specifically prior art cross platform systems include the capability to call an abstraction layer but the abstraction layer does not necessarily depend upon or integrate with the calling component. In the present invention platform independent code may be incorporated in platform independent component such that the applications executed on the cross platform system are minimally implemented in the abstraction layer component and instead rely more on platform independent component libraries. As such in the present invention abstraction layer component allows most application functionalities to execute using platform independent code. However the figures also illustrate that platform independent component may be called by platform specific component thereby enabling those functionalities that require platform specific code. The various platform independent component and platform specific component code libraries may reside on the device itself may be accessible on a server or a combination of both.

This architecture encourages application development that is more efficient and provides better integration with minimal code duplication on the mobile device platform that eventually runs the application. In addition it allows for the easy creation and maintenance of a software application across multiple handset platforms minimizing the amount of code that needs to be ported re written or conditionally compiled executed. The architecture is designed to isolate the various components that may differ on each device platform from those components that do not differ while still allowing platform specific functionality to take advantage of the platform independent and abstraction components. The development of a software application for this architecture is discussed further in the next section. Implementation of such an application is discussed below.

Accessing the directories and underlying files system of a mobile communications device is typically abstracted to a separate interface to avoid direct interaction with the data. As such platform abstraction layer component may enable the function of locating the files in the directory identified for scanning step . A list of these files may be created by platform independent component since it will eventually perform the scan step . The steps of identifying files and building a list of those files will be jointly performed or enabled by abstraction layer component and platform independent component steps . Once complete the platform independent component may enable a scan of the identified files step . Results may then be outputted to a display specific to the mobile communications device step . As such this final step may be performed or enabled by the platform specific component . An example of how such information might be displayed is discussed in co pending U.S. patent application Ser. No. 12 255 635 entitled SECURITY STATUS AND INFORMATION DISPLAY SYSTEM incorporated in full herein.

However if a vulnerability or security threat is identified by the platform independent component then the platform independent component may create and store a log entry or otherwise record the security event step . The function of appending the log entry to a log file may be performed by the abstraction layer component step since this may be considered a file system or data file interaction not suited for the platform independent component . Treatment of the infected data such as rejection from further processing deletion or quarantine may be handled by the platform specific component since the process of implementing treatment may differ between mobile communications devices step .

The above examples illustrate some benefits of the present invention. One will appreciate that when applied to mobile device security software the present invention helps combat criminal and cyber terrorist attacks by enabling rapid response to emerging threats. Mobile communications devices are already recognize as an integral part of society s infrastructure supporting data and voice communications for commerce government and security. As such it is of extreme importance to the functioning of both government and commerce that such devices remain functional and not compromised. As discussed previously and throughout the present invention allows security functionality to be written in platform independent code even though this functionality needs to be tightly integrated with the operating system on which it runs. Cyber attacks can thereby be stopped on all supported platforms by adding security and protection functionality to the platform independent component and deploying an updated version of the security software. By requiring only one version of the protection functionality for these cyber attacks the present invention enables a substantial increase in the ability to respond quickly to vulnerabilities affecting multiple mobile device platforms.

In prior art cross platform systems and methods the abstraction layer in addition to including abstracted functionalities also includes platform specific and platform independent functionalities. In the present invention the abstraction layer does not include these different functionalities. Instead the abstraction layer component is kept lightweight and is designed to rely on abstracted functionalities provided by the platform independent component . Conversely platform independent component may call abstraction component as needed thereby ensuring a two way interdependency when optimal between platform independent component and abstraction component . As a result during software development for the present invention s cross platform system a greater proportion of software code may be cross platform.

The present invention therefore functions by virtue of the tightly integrated and non general abstraction layer component . Because of the specific design of the abstraction layer component the present invention provides cross platform functionality for low level functions such as security or other features that require communication with a device s operating system. Additionally the present invention does not require much code duplication between platforms. A greater proportion of code may be written to the platform independent component thereby lightening the abstraction layer and enabling more devices to be cross platform.

As previously discussed application development for the cross platform system of the present invention may require that software engineers and programmers determine initially which features of the application can depend upon platform independent functionalities and which features can depend upon platform specific functionalities. Development may involve compiling programs and code using portions of the cross platform system library that may stored on a remote server or may involve using a toolkit or similar software development kit that contains portions of the cross platform library stored locally. Developers may upload finished or partially finished applications to a server or servers for distribution to mobile communications device users thereby ensuring distribution and verification on different devices. These applications may then be downloaded or otherwise transferred to a mobile communications device regardless of the hardware or software platform so long as the device or the software being downloaded contains the cross platform system.

By way of example illustrates a possible software development method for creating or adding a new feature to a mobile communications device that may rely upon some platform specific functionality. In step the platform independent feature may initially be developed. The software engineer may then determine if any new abstracted platform specific functionality is required for the platform independent feature step . If so then in step platform independent code for any common functionality in new platform specific abstraction code may be added. This new platform specific abstraction code may then be added to all required platforms step . Cross platform tests must then be performed to verify the new platform specific abstraction API step . Alternatively tests may be performed to verify compatibility with the common API. If the tests are successful and the platform specific code performs as expected then the new platform specific code may be added to all required platforms thereby integrating the new feature step .

In some instances the software engineer or programmer may need to integrate a new mobile communications device with the present invention s cross platform system. This may require an evaluation of the device s configuration and features and a determination of which aspects of the device may rely upon the platform independent component already adopted and implemented across all other previously integrated mobile communications devices as well as a determination of the platform specific features that can be integrated into a new platform specific component for the new device. Further this may necessarily require development of an abstraction layer component to implement and interface with the platform independent component and the platform specific component that will be installed for the new device.

In the previous example the software engineer or programmer may need to consider developing dynamic extensions for and on the mobile communications device. One will appreciate that service providers for these devices may request that certain device functions be disabled or removed. Similarly one will appreciate that even though two devices may use the same operating system they perform functions differently. Dynamic extensions offer a way to take advantage of the individual features of a mobile communications device that may not be present on other mobile communications device even if those devices are from the same manufacturer or use the same operating system. By adding dynamic extensions for the mobile communications device during development step the cross platform system of the present invention may recognize and determine the unique functionalities of the device at run time.

For example software may be developed for an entire mobile device platform or operating system such as Android or Windows Mobile . However specific mobile communications devices that run the Android platform may differ from other devices running the Android platform. Specifically some devices may possess functionalities that do not exist on others such as a SIM card contact list storage . By developing and adding dynamic extensions to the cross platform system of the present invention the system may determine which dynamic extensions it may wish to register with the platform independent component on the device thereby allowing a single executable to support a variety of individual device configurations on the platform.

One will appreciate that the above examples describe a few exemplary methods for developing and adding to the cross platform system of the present invention. The above examples are not intended to limit the invention in any way and one will appreciate that other development methods are possible without departing from this disclosure or the scope of the present invention.

As previously discussed the system architecture of the present invention streamlines the testing and verification of applications for the cross platform system. An embodiment of the present invention contemplates a common platform independent component for all mobile communications device platforms that communicates with the platform abstraction layer component . In other words the abstraction layer component exposes the same platform independent component API on all mobile communications device platforms but each platform implements the system differently depending upon its configuration. In any event because the same platform independent component API exists on all mobile communications devices testing to ensure that the abstraction layer component integrates with this platform independent component is more easily and efficiently performed than on cross platform systems that do not implement the present invention s system architecture. As a result testing systems and algorithms may be refined and re used repeatedly in order to verify that the abstraction layer component performs as expected. The present invention does not require different testing systems and algorithms for every instance of the abstraction layer as is required in the prior art. Similarly any dynamic extensions developed for a platform are easily tested and verified. Even though dynamic extensions may differ between mobile devices because of different configurations the dynamic extensions for a particular platform will still possess a common API specification. As such the common API specification may be verified with a common test. By allowing for the use of common and re usable testing algorithms the QA portion of the development cycle is shortened. Developers and QA engineers do not need to create new tests thereby saving time and expediting launch of new applications and devices using the cross platform system of the present invention.

One will appreciate that in the description above and throughout numerous specific details are set forth in order to provide a thorough understanding of the present invention. It will be evident however to one of ordinary skill in the art that the present invention may be practiced without these specific details. In other instances well known structures and devices are shown in block diagram form to facilitate explanation. The description of the preferred embodiments is not intended to limit the scope of the claims appended hereto.

