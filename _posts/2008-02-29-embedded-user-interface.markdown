---

title: Embedded user interface
abstract: A system to provide embedded user interface (UI) may comprise a request collector to receive a request directed at a host application from a user interface (UI), a response collector to receive a response from the host application, and a response dispatcher to dispatch the response to the UI via the asynchronous communication channel. The request and the response may be communicated via an asynchronous communication channel.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09400661&OS=09400661&RS=09400661
owner: ADOBE SYSTEMS INCORPORATED
number: 09400661
owner_city: San Jose
owner_country: US
publication_date: 20080229
---
The approaches described in this section could be pursued but are not necessarily approaches that have been previously conceived or pursued. Therefore unless otherwise indicated herein the approaches described in this section are not prior art to the claims in this application and are not admitted to be prior art by inclusion in this section.

A user interface may include graphical textual or auditory information that an application or operating system presents to a user so as to permit the user to provide input to the application or operating system User Interface UI . A UI of a desktop application is typically tightly bound to data coming from the relevant desktop application.

An embedded user interface UI is typically constructed with internal knowledge of whether it is to interact with a host software application in which it is embedded or with remotely located application software. An embedded UI may be configured such that communications are limited to a particular host application software. In order to permit a UI to be reusable in one example embodiment a UI may be decoupled from the desktop application that uses the UI by permitting asynchronous communication between the application and its UI. Asynchronous communication may be described as communication that does not require that all parties involved in the communication need to be present and available at the same time. Asynchronous communication may be accomplished e.g. by queuing requests and generating and dispatching a response whenever a required resource becomes available.

Asynchronous communications channel may be implemented by providing a UI communications handler with the desktop application and by providing a UI module with a host communications module. A desktop application configured with a UI communications handler may be used as a host application with respect to the UI. The UI in turn may be now capable of communicating with any host application using a host communications module. Thus a UI may now be agnostic to its own location with respect to the host application that uses it such that one UI module may be embedded in a desktop application and may also be used by a desktop application that is located on the same machine but is part of a different process or by a desktop application that is located remotely e.g. on a different machine by virtue of the asynchronous communications channel.

This approach may be visualized by imagining running a mini web application inside a desktop application which permits the desktop application to act as a remote host with respect to the associated UI module.

According to one example embodiment a UI communications handler may be implemented utilizing Application Programming Interfaces APIs and protocols typically used by web applications. The UI communications handler may have different example implementations. One implementation for example may be to accommodate communication with a UI that is provided locally with respect to the host application. This implementation of the UI communications handler may be configured to utilize an external API to a media player e.g. the ExternalInterface mechanism supported by FLASH Player in which a UI can communicate with the scripting environment of its host . Another example implementation of the UI communications handler may be to accommodate communication with a UI that is provided remotely with respect to the host application. This implementation of a UI communications handler may be configured to utilize a socket communication mechanism. A host application may be a desktop application or a web application. For example the techniques described herein may be used when the host application is an instance of ADOBE ACROBAT software a remotely hosted service or any web application.

According to one example embodiment a UI communications handler may be implemented utilizing Application Programming Interfaces APIs and protocols typically used by web applications. The term web application refers to an application that may be accessed over a network such as the Internet or an intranet utilizing a web browser. The UI communications handler may have different example implementations. One implementation for example may be to accommodate communication with a UI that is provided locally with respect to the host application. This implementation of the UI communications handler may be configured to utilize an external API to a media player e.g. the ExternalInterface mechanism supported by FLASH Player in which a UI can communicate with the scripting environment of its host . Another example implementation of the UI communications handler may be to accommodate communication with a UI that is provided remotely with respect to the host application. This implementation of a UI communications handler may be configured to utilize a socket communication mechanism. A host application may be a desktop application or a web application. For example the techniques described herein may be used when the host application is an instance of ADOBE ACROBAT software a remotely hosted service or any web application.

An example user interface may be implemented as a script that defines various UI elements such as a file with a swf extension an acronym for SHOCKWAVE FLASH file . Files with a swf extension will be referred to as SWF files or merely SWF. When a script that defines a UI is first invoked in one example embodiment a call is made to a UI communications handler provided with the host application to detect e.g. based on the value of an associated environmental variable whether the host application software is local or remote with respect to the UI. If the host application software is local then the implementation of the communications handler based on the external API e.g. ExternalInterface is loaded. If it is determined that the host application software is remote with respect to the UI then the implementation of the communications handler based on sockets is loaded. In this case the communications handler opens a socket to the host using a predefined port. It will be noted that the host application may reside on a local or on a remote machine with respect to the UI. Subsequent communication between the UI and the host application utilizes the communications channel established on the first invocation of the UI.

In some example embodiments the techniques described herein may be utilized beneficially to construct products that operate seamlessly when connected to or disconnected from the Internet. The techniques described herein may also be utilized as a code re use mechanism. For example code modules may be developed in a way that in some cases they may be embedded directly into a desktop application and in other cases deployed as part of a web application. For example a tool may be developed that extracts and displays document properties. This tool may reside in a desktop application displaying properties of a document that is being opened locally in the application and also may reside on a search engine web page for providing document properties from search results.

The described methods and systems may in an example embodiment to be used to provide an embedded UI to test a UI of a content viewing application where the content viewing application is using a UI script that is running inside another application. In some example embodiments when no Internet connection is available the UI may use a local instance of the application software until an Internet connection becomes available. Upon connecting to the Internet the embedded UI may switch to communicating with a remote instance of the application. This approach may also be utilized in collaboration projects. The method may be implemented as a peer to peer P2P collaboration project where the participants UIs engage in communication with their own locally available applications as well as other participant s host applications.

As shown in a UI of the desktop application is provided locally with respect to the desktop application . In some example embodiments the UI exists as a resource to the desktop application . For example when a document generated by the desktop application is displayed the UI may interact with the data model of the desktop application . The desktop application is configured to communicate with the UI via a UI communications handler . The communications handler thus provides an abstraction layer between the desktop application and the UI .

As a result of decoupling of a UI from an application that uses the UI as mentioned above the UI may be configured to be agnostic with respect to the location e.g. host computer system of the application that uses it. For example the desktop application may use the UI embedded in the desktop application utilizing the communications handler . In another scenario a UI residing at the test environment may be tested utilizing the remotely located desktop application . In each of these scenarios the binary for the UI and for the UI may identical. In another example not shown a UI that is identical to the UI and the UI may reside on any remote server system and communicate with e.g. the desktop application . The UI therefore may be without regards as to whether it was embedded as a resource in a desktop application running on the same machine but in a different process from the desktop application running on a separate machine from the desktop application or connected to application logic other than a desktop application for example to a web application backend .

Thus example systems and methods are described to develop and provide a UI that is reusable in various software applications. For example the UI may be configured to provide some functionality e.g. document search while it is embedded in the desktop application . The UI may also be used to provide the same functionality to the desktop application . In some embodiments the UI may be utilized as part of a web application running in a browser and communicating with the desktop application via the network . As already mentioned above the communications between a UI and a host application may occur using an asynchronous communication channel as described herein with reference to .

As mentioned above the desktop application is capable of communicating with the UI via the asynchronous communication channel using the UI communication handler . The UI communication handler may be implemented in accordance with a particular protocol used with respect to the asynchronous communications channel . For example where the UI is provided as a resource to the desktop application the communications channel may use the ExternalInterface mechanism provided by the FLASH Player and supported by its embedded equivalent a dynamic link library named authplay.dll. Authplay.dll is a component of FLASH . FLASH allows designers and developers to integrate video text audio and graphics in creating rich experiences for interactive marketing and presentations e learning and application user interfaces. Where the communications channel between the UI and the desktop application uses ExternalInterface mechanism the UI communication handler may be implemented to use the ExternalInterface mechanism . The UI includes a host communications module that permits the UI to be agnostic to the location of the host application and permit communications with the host application regardless of the flavor of the asynchronous communications protocol utilized by the host application. The UI communication handler on the other hand may have different implementations depending on the asynchronous communications mechanism available to the host application.

In operation according to one example embodiment the UI e.g. implemented using ActionScript code requests data from the desktop application e.g. from ADOBE ACROBAT so it can display certain graphical elements. The entire request is first serialized into an XML message and then transmitted via the asynchronous communication channel to the desktop application . The XML message is then queued by the UI communications handler and then processed by the desktop application in an idle loop. Specifically the XML message is parsed by the desktop application to identify any associated commands. The commands are executed and if a command in the XML message indicates that a response is required e.g. the command is requesting a specific property a response is generated and encoded as an XML string. The UI communications handler dispatches the response via the asynchronous communications channel to the UI where the response is decoded and routed appropriately. An example UI communication handler may be described with reference to .

In one example embodiment the request collector may be configured to receive requests from the UI directed at the host application. The request queue may be configured to monitor the requests coming from the UI and the request dispatcher may be configured to dispatch the request to the host application. The response collector may be configured to receive responses from the host application the response queue may be configured to monitor the responses coming from the UI and response dispatcher may be configured to send responses received from the host application to the UI. Example operations performed by the UI communications handler may be described with reference to .

As shown in the method commences at operation with the request collector of the UI communications handler receiving a request from a UI e.g. the UI of directed at a host application e.g. the desktop application of .

In the example above the number identifies a particular object and the string modDate names the property that the UI needs to display. In response to this request the host application e.g. the desktop application of mayl locate object determine the value of the modDate property and return it to the UI.

At operation the request is queued in the request queue . The request is dispatched to the host application at operation .

The request is processed by the host application to generate a response. At operation the response collector receives the response from the host application. At operation the response is queued in the response queue . The response dispatcher dispatches the response to the UI via the asynchronous communications channel at operation . As explained above a UI communications handler may be implemented to work with a particular asynchronous communications protocol. In some embodiments two or more implementations of a UI communications handler may be provided with a host application such that the host application may utilize UIs that are accessible via different asynchronous communication channels. An example of selection an appropriate UI communications handler by the host application may be described with reference to .

As shown in at operation a host application e.g. the desktop application illustrated in receives a request from a UI e.g. from the UI illustrated in . At operation the host application determines whether the UI is local or remote with respect to the host application and loads an appropriate implementation of the UI communications handler at operation . As discussed above with reference to a UI communication handler provided with a host desktop application may be implemented in accordance with a particular protocol used with respect to the asynchronous communications channel e.g. one implementation of a UI communication handler may be provided to use ExternalInterface while another implementation of a UI communication handler may provided to use sockets.

In one example embodiment a UI may be started in different ways depending on the associated environment. Where the UI is embedded in a desktop application the desktop application directly loads and launches the UI. For example the UI may consist of ActionScript code compiled into a SWF file and stored as a resource. The desktop application loads the SWF resource instantiates an instance of the Flash Player and passes the SWF to it. In another example where a UI is servicing a remote web application the web application serves up an HTML file which in turn contains a reference to the UI code. Using the same SWF as in the first example the HTML code may include an tag that refers to the SWF file on the server. A web browser may load the HTML page and then load the SWF file that in turn is provided to and executed by the Flash Player browser plug in.

Upon start up the host communications handler provided with the SWF obtains information describing the execution environment associated with the host application. Based on the environment the host communications handler causes one of several available communication mechanisms to be instantiated. In the case where the UI e.g. in the form of a SWF is embedded in a desktop application the communication mechanism may be the FLASH Player ExternalInterface API. In the case where the UI is servicing a remote web application the communication mechanism may be based on sockets. A UI communications handler configured to cooperate with the host communications module residing in the UI in one example embodiment provides an abstract asynchronous API for communication between the UI executable and the host application. A UI therefore is agnostic to whether the asynchronous API for communication is built on top of EternalInterface sockets or some other binding. But being asynchronous the API may be used in a manner similar to a web services API. Programming techniques used to build the client side of a web application could be used successfully with this API.

It will be noted that while the embodiments of the method and system to provide embedded UI have been described with reference to a desktop application and to a UI implemented using ActiveScript other embodiments of the method and system to provide embedded UI may be provided. For example a host application may be a web application and a UI may be implemented utilizing various other scripting and programming languages.

The example computer system includes a processor e.g. a central processing unit CPU a graphics processing unit GPU or both a main memory and a static memory which communicate with each other via a bus . The computer system may further include a video display unit e.g. a liquid crystal display LCD or a cathode ray tube CRT . The computer system also includes an alphanumeric input device e.g. a keyboard a user interface UI navigation device e.g. a mouse a disk drive unit a signal generation device e.g. a speaker and a network interface device .

The disk drive unit includes a machine readable medium on which is stored one or more sets of instructions and data structures e.g. software embodying or utilized by any one or more of the methodologies or functions described herein. The software may also reside completely or at least partially within the main memory and or within the processor during execution thereof by the computer system the main memory and the processor also constituting machine readable media.

The software may further be transmitted or received over a network via the network interface device utilizing any one of a number of well known transfer protocols e.g. Hyper Text Transfer Protocol HTTP .

While the machine readable medium is shown in an example embodiment to be a single medium the term machine readable medium should be taken to include a single medium or multiple media e.g. a centralized or distributed database and or associated caches and servers that store the one or more sets of instructions. The term machine readable medium shall also be taken to include any medium that is capable of storing encoding or carrying a set of instructions for execution by the machine and that cause the machine to perform any one or more of the methodologies of the present invention or that is capable of storing encoding or carrying data structures utilized by or associated with such a set of instructions. The term machine readable medium shall accordingly be taken to include but not be limited to solid state memories optical and magnetic media. Such medium may also include without limitation hard disks floppy disks flash memory cards digital video disks random access memory RAMs read only memory ROMs and the like.

The embodiments described herein may be implemented in an operating environment comprising software installed on a computer in hardware or in a combination of software and hardware.

Although embodiments have been described with reference to specific example embodiments it will be evident that various modifications and changes may be made to these embodiments without departing from the broader spirit and scope of the invention. Accordingly the specification and drawings are to be regarded in an illustrative rather than a restrictive sense.

The Abstract of the Disclosure is provided to comply with 37 C.F.R. 1.72 b requiring an abstract that will allow the reader to quickly ascertain the nature of the technical disclosure. It is submitted with the understanding that it will not be used to interpret or limit the scope or meaning of the claims. In addition in the foregoing Detailed Description it can be seen that various features are grouped together in a single embodiment for the purpose of streamlining the disclosure. This method of disclosure is not to be interpreted as reflecting an intention that the claimed embodiments require more features than are expressly recited in each claim. Rather as the following claims reflect inventive subject matter lies in less than all features of a single disclosed embodiment. Thus the following claims are hereby incorporated into the Detailed Description with each claim standing on its own as a separate embodiment.

