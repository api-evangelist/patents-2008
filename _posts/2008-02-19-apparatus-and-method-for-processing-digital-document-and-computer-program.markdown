---

title: Apparatus and method for processing digital document and computer program
abstract: A digital document processing apparatus stores a digital document, an application program used for editing the digital document, where the application program runs on an application platform, and a filter program used for restricting a function executed by the application program. The digital document processing apparatus includes a function determination unit configured to determine whether a function executed by the application program is restricted by the filter program, and a function restricting unit configured to restrict the function executed by the application program using the filter program if the function determination unit determines that the function executed by the application program is restricted by the filter program.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08024812&OS=08024812&RS=08024812
owner: Canon Kabushiki Kaisha
number: 08024812
owner_city: Tokyo
owner_country: JP
publication_date: 20080219
---
The present invention relates to an apparatus and a method for processing a digital document and a computer program and in particular to an apparatus and a method for processing a digital document and a computer program that are suitable for processing a digital document stored in the apparatus.

In recent years multi function printers MFPs have been able to store documents therein in a digital form in addition to copying documents and printing data written in page description language PDL . Examples of such stored digital documents include documents scanned by a scanner and documents transmitted from a host computer in a PDL format. In addition some MFPs can analyze the page description language so as to separate page data into image components. By storing the digital document on an image component basis MFPs can allow users to edit the digital document on an image component basis and reuse the document refer to for example Japanese Patent Laid Open No. 10 208020 .

Furthermore some MFPs allow users to download a functional program in order to replace an old one with the new one. A software development kit SDK for developing a program that uses a function of an MFP is provided to users. Manufacturers sales companies and third parties can develop their own application programs using the SDK. Users can purchase these application programs to download the application programs into MFPs. In this way the users can use functions that are not offered originally or that have improved operability refer to for example Japanese Patent Laid Open No. 2003 256216 .

By using such a technology users can develop an application program for editing and manipulating digital documents stored in MFPs. The users who use MFPs having such a function purchase a preferred edit application program and download the purchased edit application program into the MFPs so as to use the application program.

On the other hand documents and images fall into two categories those that can be freely edited and used and those that cannot be freely used due to copyright restrictions. Accordingly documents that do not allow free use need to have a security setting in order not to be edited. For this purpose a technology has been developed in which a function relating to an edit operation is automatically restricted so that users do not need to examine a security setting on an image basis when the users try to edit the document. Thus the users are prevented from unintentionally editing the document and the images. In addition a technology has been developed in which more precise control is performed by attaching edit function level information that indicates an edit security level to each of the images refer to for example Japanese Patent Laid Open No. 2001 117687 .

According to an embodiment of the present invention a digital document processing apparatus includes a digital document storage unit to store a digital document an application program storage unit to store an application program used for editing the digital document where the application program runs on an application platform a filter program storage unit to store a filter program used for restricting a function executed by the application program a function determination unit configured to determine whether a function executed by the application program is restricted by the filter program and a function restricting unit configured to restrict the function executed by the application program using the filter program if the function determination unit determines that the function executed by the application program is restricted by the filter program.

Further features of the present invention will become apparent from the following description of exemplary embodiments with reference to the attached drawings.

A first embodiment of the present invention is described with reference to the accompanying drawings. is a schematic illustration of an example configuration of a printing system. In a user operates an MFP to store a document in the MFP . A user edits a digital document stored in the MFP . A paper document is scanned by a scanner of the MFP in response to an operation of a user interface performed by the user . Subsequently the scanned document is stored in the MFP as the digital document . In addition a paper document is printed by a printing unit of the MFP in response to an operation of the user interface performed by the user .

A personal computer PC is connected to the MFP via a network. The PC transmits image data in a PDL format. A PC is connected to the MFP via the network and manipulates the digital document stored in the MFP . A user can edit and manipulate the digital document using the user interface or the PC .

An I O controls the user interface . A scanner control unit controls the operation of a scanner engine that provides a scanner function. A printer control unit controls the operation of a printer engine that provides a printer function. These units to in the controller are connected to each other via a bus .

As illustrated in an application program group includes a reprint application program reprint and an application framework that allows an application program to be downloaded from the outside. Edit application programs applications A to D to are executed on the application framework . According to the present embodiment the edit application programs to are executed on the application framework . In addition according to an embodiment application program storage means also referred to herein as application program storage unit is achieved using the application framework .

A network module controls communication with apparatuses connected to the MFP via a network e.g. the PC . A user authentication module authenticates a user who uses the application program group on the basis of information input through the user interface . In addition the user authentication module authenticates a user who uses the function provided by the controller on the basis of information input from the PC via the network module .

A document management module stores the digital document . The digital document includes a plurality of components to . In an embodiment digital document storage means also referred to herein as digital document storage unit is achieved using the document management module .

A plug in filter control module connects one of filters to to a filter plug in i.e. the plug in filter control module performs setting of the filter plug in when the application program group or the network module starts. A user filter information module stores information used for the plug in filter control module to select one of the filters to to be set for a user who uses the application program group .

In one of the following filters is set the general edit filter the operation log attached general edit filter the original information retention filter an original information retention filter A the original information retention filter an original information retention filter B and the partial edit filter . According to the present embodiment the plurality of filters to are installed in the controller . Thus the controller can use the plurality of filters to . Each of the plurality of filters to includes a program and a mapping table described below . As noted above according to the present embodiment a filter program is achieved using for example the filters to . The filters to are stored in a storage medium such as the HDD provided in the controller . In an embodiment for example filter program storage means also referred to herein as filter program storage unit is achieved using the storage medium such as the HDD that stores the filters to .

A document manipulation application program interface API is an interface for providing a document manipulation function to the application program group . A document edit API is an interface for providing a document edit function to the application program group . According to the present embodiment for example an edit and manipulation function interface is achieved using the document manipulation API and the document edit API . The filter plug in selects one of the filters to and plugs in the selected filter.

A document manipulation library can manipulate a digital document stored in the document management module . A document edit library can edit a digital document stored in the document management module . According to the present embodiment for example an edit and manipulation function library is achieved using the document manipulation library and the document edit library . In addition by using functions contained in the document manipulation library and the document edit library edit and manipulation means also referred to herein as edit and manipulation functions or edit and manipulation unit is achieved.

The above described blocks software are stored in one of the HDD and the ROM . The CPU reads in and executes the blocks so as to perform overall control of the MFP .

More specifically according to the present embodiment as illustrated in the platform of the controller includes an interpreter running as a Java trademark virtual machine a service manager and a device control class library.

The service manager controls the operations of the edit application programs to such as addition deletion starting and stopping of these edit application programs. The interpreter serving as a virtual machine is software that interprets and executes byte code of Java trademark for the application programs and the libraries. According to the present embodiment an example of the application platform is the application framework managed by the service manager.

The device control class library includes device control APIs serving as native methods of Java classes. The device control class library allows device dependent code to be transparent to application programs. By calling an API group in a Java layer which includes the device control APIs and non device control APIs an application program can perform a copy operation a scan operation and a document storing operation in a storage region. The document manipulation API and the document edit API illustrated in are included in the API group in the Java layer. Note that in addition to the application platform a device control platform is provided.

However if any error has not occurred the edit application program waits for a further input from the user interface step S . Upon receiving an input from the user interface the edit application program determines whether the user input is related to document editing or document manipulation step S .

If the user input is related to document editing the edit application program performs editing on a document using the document edit API step S . Thereafter the processing returns to step S where the edit application program waits for the next input.

In contrast if the user input is related to document manipulation the edit application program determines whether the input is an instruction to complete the processing step S . If the user input is an instruction to complete the processing the edit application program displays on for example the user interface a message indicating that the processing is being completed step S . Thereafter the edit application program completes the processing.

However if the user input is not an instruction to complete the processing the edit application program determines whether the input is an instruction to save the document step S . If the user input is an instruction to save the document the edit application program writes the name of the user in an editor property field of the document step S .

Subsequently the edit application program writes the current date and time in an update date and time property field step S . The edit application program then saves the document step S . Thereafter the processing returns to step S.

If at step S the edit application program determines that the user input is not an instruction to save the document the edit application program then determines whether the input is an instruction to edit the property step S . If the input is an instruction to edit the property the edit application program determines whether one of an author an editor creation date and time and update date and time is to be edited step S . If one of an author an editor creation date and time and update date and time is to be edited the edit application program displays a message indicating the editing is not allowed on for example the user interface step S . Thereafter the processing returns to step S.

If at step S the user input is not an instruction to edit the property or if at step S none of an author an editor creation date and time and update date and time is to be edited the processing proceeds to step S. Subsequently the edit application program manipulates the digital document to be edited in accordance with the received instruction using the document manipulation API step S . Thereafter the processing returns to step S.

As illustrated in the edit application program waits until the user operates the user interface and instructs to start editing the digital document using the edit application program step S . Upon receiving a user instruction to start editing the digital document using the edit application program the edit application program opens the digital document to be edited using the document manipulation API step S .

Subsequently the edit application program determines whether an error such as an open error of the digital document due to the absence of the digital document occurs or not step S . If an error has occurred the edit application program displays a message indicating that information on for example the user interface step S and completes the processing.

However if any error has not occurred the edit application program examines all of the components to of the digital document to be edited. That is the edit application program retrieves the components to using the document edit API step S . Subsequently the edit application program determines whether all of the components to of the digital document are processed by determining whether one of the components can be retrieved step S .

If one of the components to of the digital document to be edited can be retrieved i.e. if all of the components to have not been processed the processing proceeds to step S. Thereafter the edit application program determines whether one of the components is specified to be replaced step S . If the retrieved component is specified to be replaced the edit application program performs a replacement operation of the component using the function of the document edit library obtained using the document edit API step S .

Subsequently the edit application program adds a specified color to the replaced component using a function of the document edit library obtained using the document edit API step S . Thereafter the processing returns to step S from which similar operations are repeated for the next component.

If at step S the retrieved component is not specified to be replaced steps S and S are skipped. The processing then returns to step S from which similar operations are repeated for the next component.

If at step S it is determined that all of the components to of the digital document have been processed the processing proceeds to step S. Subsequently the edit application program saves the digital document using the document manipulation API step S . The edit application program then determines whether an error has occurred step S .

If an error has occurred the edit application program discards the digital document to be edited step S and displays a message indicating that information on for example the user interface step S . Thereafter the processing is completed.

However if an error has not occurred the edit application program determines that editing has been completed normally and the edit application program closes the digital document step S . Thereafter the edit application program displays a message indicating that the digital document is edited normally on for example the user interface step S . Thereafter the processing is completed.

As illustrated in the edit application program waits until the user operates the user interface of the MFP and instructs to start editing the digital document using the edit application program step S . When an editing operation of the digital document using the edit application program is started the edit application program opens the digital document to be edited using the document manipulation API step S .

Subsequently the edit application program determines whether an error such as an open error of the digital document due to the absence of the digital document occurs or not step S . If an error has occurred the edit application program displays a message indicating that information on for example the user interface step S and completes the processing.

However if any error has not occurred the edit application program attempts to change the author name in a property field of the digital document to be edited to a specified name using the document manipulation API step S . In addition the edit application program attempts to change the update date and time of the document to a specified date and time using the document manipulation API again step S .

Subsequently the edit application program saves the digital document using the document manipulation API step S . The edit application program then determines whether an error has occurred step S . If an error has occurred the edit application program discards the digital document to be edited step S and displays a message indicating that information on for example the user interface step S . Thereafter the processing is completed.

However if an error has not occurred the edit application program determines that editing has been completed normally. The edit application program then closes the digital document step S . Thereafter the edit application program displays a message indicating that the digital document is edited normally on for example the user interface step S . Thereafter the processing is completed.

As illustrated in the edit application program waits until the user operates the user interface of the MFP and instructs to start editing the digital document using the edit application program step S . When an editing operation of the digital document using the edit application program is started the edit application program opens the digital document to be edited using the document manipulation API step S .

Subsequently the edit application program determines whether an error such as an open error of the digital document due to the absence of the digital document occurs or not step S . If an error has occurred the edit application program displays a message indicating that information on for example the user interface step S and completes the processing.

However if any error has not occurred the edit application program waits for a further input from the user interface step S . Upon receiving an input from the user interface the edit application program determines whether the input is related to document editing or a document manipulation step S .

If the input is related to document editing the edit application program performs editing on the digital document using the document edit API step S . Thereafter the processing returns to step S where the edit application program waits for the next input.

However if the input is related to document manipulation the edit application program manipulates the digital document using the document manipulation API step S . Subsequently the edit application program determines whether an error has occurred or not step S . If an error has occurred the edit application program displays a message indicating that information on for example the user interface step S and completes the processing.

However if any error has not occurred the edit application program determines whether the operation is completed step S . If the operation has not been completed the processing returns to step S from which the processing continues. In contrast if the operation has been completed the edit application program displays a message indicating that the operation is completed normally on for example the user interface step S . Thereafter the processing is completed.

When the user instructs one of the applications in the application program group to start or when the user processes the digital document via a network the user authentication module performs a user authentication process so as to identify the user . In this way according to the present embodiment for example user authentication means is achieved by the process performed by the user authentication module .

As illustrated in the plug in filter control module acquires authentication information about a user who uses the MFP via an application program used by the user or the network module step S .

Subsequently the plug in filter control module delivers the user authentication information acquired in step S to the user filter information module and requests the user filter information module to acquire filter information about the user step S . As described above the user filter information module prestores information as to which filter is used for which user.

Subsequently the plug in filter control module determines whether filter information about the user is found or not step S . If the filter information about the user is not found the plug in filter control module selects a default filter and connects the default filter to the filter plug in step S . However if the filter information about the user is found the plug in filter control module determines whether a filter corresponding to the filter information is installed in the MFP step S . If a filter corresponding to the filter information is not installed in the MFP the plug in filter control module selects the default filter and connects the default filter to the filter plug in step S .

However if a filter corresponding to the filter information is installed in the MFP the plug in filter control module selects that filter and connects the selected filter to the filter plug in step S and completes the processing.

As described above according to the present embodiment for example filter program selection means is achieved by executing the process in step S or S.

According to the present embodiment the application program and the document edit process are independent from those in another user session. Therefore even when a plurality of users use different application programs at the same time different filters are set and processing operations are performed. Accordingly the operations of the application programs are not influenced by each other.

When the document manipulation API or the document edit API is called by one of the applications of the application program group or the network module the filter plug in acquires information as to which one of the functions of the APIS is called step S .

Subsequently the filter plug in refers to a mapping table of the filter connected thereto so as to determine whether a function is defined in the pre processing field for the called function step S . If a function is defined in the pre processing field for the called function the filter plug in executes that function step S . In addition the filter plug in generates information indicating that the pre processing is executed. The generated information is used for generating a copy forgery inhibited pattern to be printed on a page obtained through the processing performed by the edit application programs to . Thus the user can recognize that a filter control i.e. pre processing has been executed. Then the processing proceeds to step S. However if any function is not defined in the pre processing field step S is skipped and the processing proceeds to step S.

Subsequently the filter plug in refers to the mapping table of the filter connected thereto so as to determine whether a function is defined in a main processing field of the called function step S . If a function is defined in the main processing field of the called function the filter plug in executes that main function step S . In addition the filter plug in generates information indicating that the main processing is executed. The generated information is used for generating a copy forgery inhibited pattern to be printed on a page obtained through the processing performed by the edit application programs to . Thus the user can recognize that a filter control i.e. main processing has been executed. Then the processing proceeds to step S. However if any function is not defined in the main processing field step S is skipped and the processing proceeds to step S.

Subsequently the filter plug in refers to the mapping table of the filter connected thereto so as to determine whether a function is defined in the post processing field of the called function step S . If a function is defined in the post processing field of the called function the filter plug in executes that function step S . In addition the filter plug in generates information indicating that the post processing is executed. The generated information is used for generating a copy forgery inhibited pattern to be printed on a page obtained through the processing performed by the edit application programs to . Thus the user can recognize that a filter control i.e. post processing has been executed. Then the processing is completed. However if any function is not defined in the post processing field the processing is completed without executing the process in step S.

As described above according to the present embodiment for example function determination means is achieved by executing steps S S and S. In addition function limiting means is achieved by selectively executing steps S S and S.

In the case where the general edit filter is connected to the filter plug in since nothing is defined in the pre processing fields as illustrated in the process in step S is not performed even when either the document manipulation API or the document edit API is called.

In contrast since functions of the document manipulation library and the document edit library are defined in the main processing fields the corresponding main process is performed in step S when either the document manipulation API or the document edit API is called. In addition since nothing is defined in the post processing fields the process in step S is not performed even when either the document manipulation API or the document edit API is called.

In the case where the operation log attached general edit filter is connected to the filter plug in since nothing is defined in the pre processing fields as illustrated in the process in step S is not performed even when either the document manipulation API or the document edit API is called.

In contrast since functions of the document manipulation library and the document edit library are defined in the main processing fields the corresponding main process in step S is performed when either the document manipulation API or the document edit API is called. In addition since a function X Log is defined in the post processing field the function X Log is called at a post processing time. Thus log information including all of the executed process logs is stored in the storage area.

In the case where the original information retention filter is connected to the filter plug in when a function OpenDocument is called as illustrated in a tentative copy document is generated in the pre processing. In the main processing the tentative copy document is opened. Subsequently in the post processing a function X CallBackMessage is called. The function X CallBackMessage informs the application program of the generation of the tentative copy document and the opening of the tentative copy document instead of the original document.

In addition when a function SaveDocument is called the function X CallBackMessage is called so that the application program is informed that the tentative copy document is stored in place of the original document. Thereafter a function X SaveDocument is called in the main processing so that the tentative copy document is stored.

In the case where the original information retention filter is connected to the filter plug in when a function OpenDocument is called as illustrated in a function X Duplicate is called in the pre processing so that the target document is copied as a backup document using an alias. In the main processing a function OpenDocument is called so that the target document is opened. Thereafter processing is performed on the target document.

When a function CloseDocument is called a function X CloseDocument is called in the main processing so that the target document is closed. Thereafter a function X CheckMod is called in the post processing so that it is determined examined whether the target document is updated from the backup document. If the target document is not updated the copy document generated as a backup document is deleted. However if the target document is updated the copy document generated as a backup document is not deleted.

In the case where the partial edit filter is connected to the filter plug in when a function addObject is called as illustrated in a function X CallBackMessage is called in the pre processing so that the application program is informed that the call is invalid. In the main processing no operation is performed.

Similarly when a function deleteObject is called a function X CallBackMessage is called in the pre processing so that the application program is informed that the call is invalid. In the main processing no operation is performed.

Note that the other calls are processed in the same manner as illustrated in the mapping table contained in the operation log attached general edit filter refer to .

The effects of the above described plug in filter control module filter plug in and filters to are described in detail next.

Two MFPs MFP A and MFP B are installed in an office. Users freely installed edit applications in the two MFPs so as to use the edit applications. From some point of time a digital document stored in the MFP A is not allowed to be modified. A digital document stored in MFP B is allowed to be freely edited. However usage of the digital document stored in the MFP B needs to be studied.

In such a situation the administrator of the MFPs can install only the original information retention filter in the MFP A as a default filter and install only the operation log attached general edit filter in the MFP B as a default filter.

Here assume that a general user unintentionally executes an edit application program that can update the author name and the update date and time of a document. The operation performed in such a case is described next.

As illustrated in step S of when the user attempts to open the digital document for editing a function OpenDocument is acquired in step S of . Subsequently since pre processing is defined for the function OpenDocument in a mapping table of the original information retention filter illustrated in a function X Duplicate which is a function of the document manipulation library is called in step S. Accordingly the document manipulation library makes a copy of the original document using an alias.

In addition since main processing is defined for the function OpenDocument a function X OpenDocument which is a function of the document manipulation library is called in step S. Accordingly the document manipulation library opens the copy document with the alias. Furthermore since post processing is defined for the function OpenDocument a function X CallBackMessage which is a function of the document manipulation library is called in step S. Accordingly the document manipulation library displays the message Editing is not allowed. The document has been opened as another document. for the general user via the edit application program .

Referring back to in step S it is determined that no error has occurred. Thus the processing proceeds to step S. In step S a function WriteAuthorName illustrated in is called so that a process based on X WriteAuthorName i.e. update of the author name is performed on the copy document with the alias.

Similarly in step S a function WriteModifiedDate illustrated in is called so that a process based on X WriteModifiedDate i.e. update of the update date and time is performed on the copy document with the alias.

When a function SaveDocument is called in step S a function X CallBackMessage is called in pre processing so that a message The document is saved using an alias is displayed for the user. Thereafter a function X SaveDocument is called in main processing so that the copy document with an alias is saved. Like the above described process no error has occurred in this processing. Accordingly in step S the document with an alias is closed. In step S a message indicating that the process is normally completed is displayed.

In comparison with the above described operation the operation performed when the MFP B executes the edit application program that can update the author name and the update date and time of a document is described next.

As illustrated in step S of when the user attempts to open the digital document for editing a function OpenDocument is acquired in step S of . Subsequently since no pre processing is defined for the function OpenDocument in a mapping table of the original information retention filter illustrated in a process in step S is not executed. In addition since main processing is defined for the function OpenDocument a function X OpenDocument which is a function of the document manipulation library is called in step S. Accordingly the document manipulation library opens the document to be edited. Furthermore since post processing is defined for the function OpenDocument a function X Log is called in step S. Accordingly the processing is logged saved .

Referring back to again in step S it is determined that no error has occurred. Thus the processing proceeds to step S. In step S a function WriteAuthorName illustrated in is called so that a process based on X WriteAuthorName i.e. update of the author name is performed on the document to be edited. Thereafter a function X Log is called in post processing. Accordingly the update of the author name is logged saved .

Similarly in step S a function WriteModifiedDate illustrated in is called so that a process based on X WriteModifiedDate i.e. update of the update date and time is performed on the document to be edited. Thereafter a function X Log is called in post processing. Accordingly the update of the author name is logged saved .

When a function SaveDocument is called in step S a function X SaveDocument is called in main processing so that the document to be edited is saved. Thereafter a function X Log is called in post processing so that the save operation of the document is logged. Like the above described process no error has occurred in this processing. Accordingly in step S the document to be edited is closed. In step S a message indicating that the process is normally completed is displayed. For these operations a function X Log is called in the post processing and is logged.

As described above according to the present embodiment the filters to optimal for an intended purpose are set for each of the MFPs . Accordingly the functions of the edit application programs to can be limited in accordance with the intended purpose for each of the MFPs whatever functions the edit application programs to have.

An MFP MFP C is installed in an office. A user C is an administrator who manages all documents in the office. In some cases the user C edits the author name and the update date and time of a document stored in the MFP C. A user D modifies the format of a document stored in the MFP C e.g. a color change in part of the document and prints the document. However the user D is not accustomed to that operation and therefore may mistakenly operate the MFP C.

In such a situation the administrator of the MFP C can install the general edit filter and the partial edit filter in the MFP C. In addition the administrator can set the following information in the user filter information module information instructing that the general edit filter is connected when the user C uses the MFP C and information instructing that the partial edit filter is connected when the user D uses the MFP C.

Here assume that the user D unintentionally executes an edit application program on the MFP C and deletes or adds a component in addition to modifying the format of a digital document stored in the MFP C. The operation performed in such a case is described next.

When the user D logs in in order to use the edit application program of the MFP C the controller performs a user authentication process using the user authentication module .

After the edit application program starts the plug in filter control module in step S of acquires authentication information about the user D via the edit application program . In step S the plug in filter control module supplies the authentication information about the user D to the user filter information module . The user filter information module returns the partial edit filter which is filter information to the plug in filter control module . Since the partial edit filter is installed in the MFP C the processing proceeds to step S. In step S the plug in filter control module connects the partial edit filter to the filter plug in .

Subsequently in step S of the user D instructs the MFP C to open the digital document using the edit application program . Accordingly an API OpenDocument in a mapping table in the partial edit filter illustrated in is called. Thereafter a function X OpenDocument is called in main processing so that the document to be edited is opened. When the user D attempts to change the color of a component e.g. a logo of the document a function PathFillColor of the document edit API is called. Thus a function X PathFillColor is called in main processing. In this way the user D can change the color of the logo.

If the user D attempts to delete the logo a function deleteObject of the document edit API is called in step S. At that time a function X CallBackMessage is called in pre processing so that a message indicating that deletion of the component is not allowed is sent to the user D via the edit application program . In such a case no operation is performed in the main processing.

Similarly if the user D attempts to add a new logo a function addObject of the document edit API is called in step S. At that time a function X CallBackMessage is called in pre processing so that a message indicating that addition of the component is not allowed is sent to the user D via the edit application program . The save operation of the document and termination processing are performed even in this case.

The operation performed when the user C uses the edit application program in the MFP C is described next.

When the user C logs in in order to use the edit application program of the MFP C the controller performs a user authentication process using the user authentication module .

After the edit application program starts the plug in filter control module in step S of acquires authentication information about the user C via the edit application program . In step S the plug in filter control module supplies the authentication information about the user C to the user filter information module . The user filter information module returns the general edit filter which is filter information to the plug in filter control module . Since the general edit filter is installed in the MFP C the processing proceeds to step S. In step S the plug in filter control module connects the general edit filter to the filter plug in . Subsequently the general edit filter directly performs document editing and document manipulation in response to an instruction from the user C.

As described above according to the present embodiment a plurality of filters are installed in one MFP and one of the filters is set in accordance with an intended purpose of a user. Accordingly the functions of the edit application programs to can be limited for each user whatever functions the edit application programs to have.

While the present embodiment has been described with reference to the case where a predetermined processing logic is provided to the filter plug in and each of the filters to includes a mapping table each of the filters to may include a processing logic and a mapping table and therefore the filters to may have different logics.

In addition while the present embodiment has been described with reference to the filters to having three stage processing pre processing main processing and post processing the number of stages may be decreased or increased. Furthermore a plurality of functions may be called in each processing.

Still furthermore the type of filter is not limited to those illustrated in . Any filter optimal for the purpose can be added installed and deleted uninstalled in and from the MFP .

While the present embodiment has been described with reference to the case where a copy forgery inhibited pattern is formed on a paper sheet in order to indicate that some processing is performed any other information on the sheet that can indicate that the processing is performed may be used in place of the copy forgery inhibited pattern.

In addition the application framework the application platform may determine whether the function executed by the edit application programs to can be restricted by the filters. In such a case the filters are applied selected in response to an instruction from the application framework .

A second embodiment of the present invention is described below. In the first embodiment the APIs and for providing functions of manipulating and editing the digital document to users are structurally and clearly separated from the libraries and that provide actual functions. The general edit filters to are plugged in between the two types of function. When the platform of the controller of the MFP is developed from scratch this design can be easily applied. However in practice it is difficult to develop the platform from scratch. Accordingly the case where this concept is applied to existing platforms is described next. According to the second embodiment the function of the controller is partially different from that of the first embodiment. Therefore similar numbering will be used in describing the present embodiment as was utilized above in describing the first embodiment illustrated in and the descriptions are not repeated.

A document manipulation and edit function module is used by each of the applications of the application program group or the network module when a digital document is manipulated and edited. In for ease of understanding the document manipulation and edit function module is composed of only one module. However the document manipulation and edit function module may include a plurality of sub modules. In such a case the functions may be distributed to these sub modules.

A hook function table includes a definition of functions that are controlled by the filters among all of the document manipulation functions and document edit functions provided by the document manipulation and edit function module . All of operations performed by the application program group and the network module for the document manipulation and edit function module are linked to the hook function table . The hook function table is stored in a storage medium such as the HDD of the controller . Thus according to the present embodiment for example table storage means is achieved using the storage medium such as the HDD that stores the hook function table .

When the document manipulation and edit function module is accessed a hook control module hooks the document manipulation and edit function module using the hook function table . Thus the hook control module provides a function in accordance with a filter connected thereto. That is when the document manipulation and edit function module is accessed the hook control module extracts a desired function using a filter and controls the extracted function in accordance with a filter connected thereto.

As illustrated in the hook filter control module acquires authentication information about the user who uses the MFP via an application program used by the user or the network module step S .

Subsequently the hook filter control module delivers the user authentication information acquired in step S to the user filter information module and requests the user filter information module to acquire filter information about the user step S .

Subsequently the hook filter control module determines whether filter information about the user is found or not step S . If the filter information about the user is not found the hook filter control module selects a default filter and connects the default filter to the hook control module step S . However if the filter information about the user is found the hook filter control module determines whether a filter corresponding to the filter information is installed in the MFP step S . If a filter corresponding to the filter information is not installed in the MFP the hook filter control module selects the default filter and connects the default filter to the hook control module step S .

However if a filter corresponding to the filter information is installed in the MFP the hook filter control module selects that filter and connects the selected filter to the hook control module step S and completes the processing.

The application program group or the network module calls a function of the document manipulation and edit function module in order to use the document manipulation and edit function module . At that time the function is transferred to the hook control module via the hook function table . Thus the processing is started.

The hook control module acquires the called function step S . Thereafter the hook control module determines whether the called function is defined in the hook function table as a function to be hooked step S . If the called function is not defined in the hook function table as a function to be hooked the hook control module causes the document manipulation and edit function module to execute the called function step S and completes the processing.

However if the called function is defined in the hook function table as a function to be hooked the processing proceeds to step S. In step S the hook control module refers to a mapping table connected thereto so as to determine whether a function is defined in the pre processing field of the called function step S . If a function is defined in the pre processing field of the called function the hook control module causes the document manipulation and edit function module to execute that function in pre processing step S . In addition the hook control module generates information indicating that the pre processing is executed. The generated information is used for generating a copy forgery inhibited pattern to be printed on a page obtained through the processing performed by the edit application programs to . Thus the user can recognize that a filter control i.e. pre processing has been executed. Then the processing proceeds to step S. However if any function is not defined in the pre processing field step S is skipped and the processing proceeds to step S.

Subsequently the hook control module refers to the mapping table of the filter connected thereto so as to determine whether a function is defined in a main processing field of the called function step S . If a function is defined in the main processing field of the called function the hook control module causes the document manipulation and edit function module to execute that main function in main processing step S . In addition the hook control module generates information indicating that the main processing is executed. The generated information is used for generating a copy forgery inhibited pattern to be printed on a page obtained through the processing performed by the edit application programs to . Thus the user can recognize that a filter control i.e. main processing has been executed. Then the processing proceeds to step S. However if any function is not defined in the main processing field step S is skipped and the processing proceeds to step S.

Subsequently the hook control module refers to the mapping table of the filter connected thereto so as to determine whether a function is defined in the post processing field of the called function step S . If a function is defined in the post processing field of the called function the hook control module causes the document manipulation and edit function module to execute that function step S . In addition the hook control module generates information indicating that the post processing is executed. The generated information is used for generating a copy forgery inhibited pattern to be printed on a page obtained through the processing performed by the edit application programs to . Thus the user can recognize that a filter control i.e. post processing has been executed. The processing is then completed. However if any function is not defined in the post processing field the processing is completed without executing the process in step S.

As described above according to the present embodiment for example document edit and manipulation means is achieved by the document manipulation and edit function module . In addition access control means is achieved by executing step S and steps S to S.

The operation performed when each of the general edit filters to is connected to the hook control module is similar to that performed when each of the general edit filters to is connected to the filter plug in in the first embodiment. Therefore the description is not repeated.

As described above according to the present embodiment like the first embodiment a filter optimal for the user s purpose is set in each MFP. Accordingly the functions of the edit application programs to can be limited in accordance with the intended purpose for each MFP whatever functions the edit application programs to have.

In addition a plurality of filters are installed in one MFP and an optimal filter for the user s purpose is preset. Accordingly the functions of the edit application programs to can be limited in accordance with the intended purpose for each user whatever functions the edit application programs to have.

Furthermore according to the present embodiment the hook function table is extracted from a document manipulation and edit function and a function call is hooked. Accordingly even when the document manipulation and edit function has a controller platform having a structure in which interfaces APIs are not separated from the libraries the present invention can provide an advantage the same as that of the first embodiment.

A third embodiment of the present invention is described below. In the first embodiment if a filter to be used is predetermined calls to the document manipulation library and the document edit library corresponding to calls to the document manipulation API and the document edit API are uniquely determined. In contrast according to the third embodiment after a specific API is called mappings of subsequent calls to APIs to the libraries can be dynamically changed. Thus according to the present embodiment the function of the controller is partially different from that of the first embodiment. Therefore similar numbering will be used in describing the present embodiment as was utilized above in describing the first embodiment illustrated in and the detailed descriptions are not repeated.

In a filter corresponds to the filters to described in the first embodiment. In an example illustrated in the filter includes three mapping tables and in three different levels. illustrates an example of the mapping table in level . illustrates an example of the mapping table in level . illustrates an example of the mapping table in level .

As illustrated in the plug in filter control module acquires authentication information about a user who uses the MFP via an application program used by the user or the network module step S .

Subsequently the plug in filter control module delivers the user authentication information acquired in step S to the user filter information module and requests the user filter information module to acquire filter information about the user step S . The user filter information module prestores information as to which filter is used for which user and information as to from which level the process starts. This information is input by an administrator in advance.

Subsequently the plug in filter control module determines whether filter information about the user is found or not step S . If the filter information about the user is not found the plug in filter control module selects a default filter and connects the default filter to the filter plug in step S . Thereafter the plug in filter control module delivers a default level value e.g. 1 to the filter plug in step S . The level value indicates which mapping table of the filter connected to the filter plug in is used. The processing is then completed.

However if in step S the filter information about the user is found the plug in filter control module determines whether a filter corresponding to the filter information is installed in the MFP step S . If a filter corresponding to the filter information is not installed in the MFP the processing proceeds to step S where the plug in filter control module connects a default filter to the filter plug in step S .

However if a filter corresponding to the filter information is installed in the MFP the plug in filter control module connects that filter to the filter plug in step S . In addition the plug in filter control module delivers the level value that has been acquired by requesting acquisition of filter information about the user in step S to the filter plug in step S . The processing is then completed.

When the document manipulation API or the document edit API is called by the application program group or the network module the filter plug in acquires information as to which function of the API is called step S .

Subsequently the filter plug in refers to a mapping table corresponding to the current level value among mapping tables of the filter connected thereto. Thus the filter plug in determines whether a function is defined in the pre processing field of the called function in the referred mapping table step S . For example if the current level value is 1 the filter plug in refers to the mapping table in the level . Note that in first processing the current level value is not set. Therefore the filter plug in considers the level value delivered from the plug in filter control module in step S or S of to be the current level value.

If a function is defined in the pre processing field the filter plug in executes that function as pre processing of the current level step S . In addition the filter plug in generates information indicating that the pre processing is executed. The generated information is used for generating a copy forgery inhibited pattern to be printed on a page obtained through the processing performed by the edit application programs to . Thus the user can recognize that a filter control i.e. pre processing has been executed. Then the processing proceeds to step S. However if any function is not defined in the pre processing field step S is skipped and the processing proceeds to step S.

Subsequently the filter plug in refers to the mapping table so as to determine whether a function is defined in a main processing field of the called function step S . If a function is defined in the main processing field the filter plug in considers the function to be a main function in the current level and executes that main function step S . In addition the filter plug in generates information indicating that the main processing is executed. The generated information is used for generating a copy forgery inhibited pattern to be printed on a page obtained through the processing performed by the edit application programs to . Thus the user can recognize that a filter control i.e. main processing has been executed. The processing then proceeds to step S. However if any function is not defined in the main processing field step S is skipped and the processing proceeds to step S.

Subsequently the filter plug in refers to the mapping table so as to determine whether a function is defined in the post processing field of the called function step S . If a function is defined in the post processing field of the called function the filter plug in considers the function to be a post processing function in the current level and executes that function step S . In addition the filter plug in generates information indicating that the post processing is executed. The generated information is used for generating a copy forgery inhibited pattern to be printed on a page obtained through the processing performed by the edit application programs to . Thus the user can recognize that a filter control i.e. post processing has been executed. Then the processing proceeds to step S. However if any function is not defined in the post processing field step S is skipped and the processing proceeds to step S.

The filter plug in determines whether information indicating a level value is defined in a switching level field of the called function step S . According to the present embodiment examples of the information indicating a level value include a level value itself and a level value determined at a start time. If some information indicating a level value is defined in the switching level field of the called function the filter plug in stores the level value based on that information as the current level value step S . The processing is then completed. However if nothing is defined in the switching level field the current level remains unchanged. If no information indicating a level value is defined in the switching level field step S is skipped. The processing is then completed.

After processing is started in the level and the function OpenDocument is called only the function X OpenDocument that is defined in the main processing field of the mapping table for the level illustrated in is executed. Subsequently when the function WriteModifiedDate is called for modifying the update date and time the function X WriteModifiedDate that is defined in the main processing field of the function WriteModifiedDate is directly called. However the function X CallBackMessage that is defined in the post processing field displays a message This process is not allowed to run twice. Thereafter the current level is changed from 1 to 2 .

In the level as illustrated by the level mapping table in the function X Log is called for all of the pre processing of the called function and a log is recorded. Thereafter if the function WriteModifiedDate is called nothing is executed in the main processing. In the post processing the function X CallBackMessage is called so as to display for example a message The process is invalid. All of the subsequent processes are stopped. Thereafter the current level is changed from 2 to 3 .

In the level as illustrated by the level mapping table in if a function other than CloseDocument is called nothing is executed in the main processing and only a message can be displayed. In contrast if the function CloseDocument is called the function X CloseDocument is then called so that the document is closed. Thereafter the current level is changed from 3 to 1 which is a level at a processing start time.

As described above according to the present embodiment the filter includes three mapping tables and for three levels. In addition even when one filter is used the mapping table is switched if a specific API is called. Accordingly mapping to a function library the document manipulation library or the document edit library can be dynamically changed for the subsequent API call. Furthermore since the level at a processing start time can be changed on a user to user basis a more flexible control can be provided.

It should be noted that the number of mapping tables levels contained in a filter is not limited to three.

According to the present embodiment a filter program that restricts the function executed by an application program running on the application platform is prestored. If a function executed by the application program is a restricted function of the filter program that function is restricted on the basis of the filter program. Accordingly an edit or manipulation operation on a stored digital document can be adaptively restricted in accordance with an intended purpose. For example an edit or manipulation operation on a stored digital document can be restricted on an apparatus to apparatus basis or a user to user basis.

The units of the digital document processing apparatus and steps of the digital document processing method according to the above described embodiments of the present invention can be achieved by the operation of a program stored in a RAM or ROM of a computer. In such a case the program and a computer readable storage medium that stores the program are encompassed by the present invention.

In addition the embodiments of the present invention can be achieved as a system an apparatus a method a program or a storage medium. More specifically the present invention may be applied to a system including a plurality of devices or an apparatus including a single device.

According to the present invention the software programs corresponding to the programs described in the embodiments using the flow charts in and are directly or remotely supplied to the system or the apparatus. Subsequently the system or the apparatus reads out and executes the code of the supplied program. In this way the present invention can be also achieved.

In such a case the program code itself read out of the storage medium realizes the functions of the above described embodiments. Therefore the storage medium storing the program code can also realize the present invention.

Accordingly any form of the program can be applied to the present invention. For example the program may be a program executed using an object code or an interpreter or script data supplied to the OS.

Examples of the storage medium for supplying the program code include a floppy trademark disk a hard disk an optical disk an MO magnetooptical disk a CD ROM a CD R CD recordable a CD RW CD rewritable a magnetic tape a nonvolatile memory card a ROM and a DVD digital versatile disc including a DVD ROM and a DVD R.

Alternatively the program code may be supplied by accessing a Web page on the Internet using a browser in a client computer and downloading the computer program of the present invention or an archive file including an auto install function from the Web page to a storage medium such as a hard disk.

In addition the program code of the program of the present invention may be divided into a plurality of files which may be downloaded from different Web pages. In other words a WWW world wide web server and an FTP file transfer protocol server that allow a plurality of users to download a program file that achieves the functions of the present invention are also included in the present invention.

Additionally the program according to the present invention can be encrypted and stored into a storage medium such as a CD ROM to deliver it to users. A user who satisfies a predetermined criterion can download key information for decrypting the encryption from a Web page on the Internet. By using the key information the user can install the encrypted program in a computer and can execute the program to achieve the present invention.

The functions of the above described embodiments can be realized by another method in addition to executing the program code read out by the computer. For example the functions of the above described embodiments can be realized by a process in which an operating system OS running on the computer executes some of or all of the functions in the above described embodiments under the control of the program code.

The present invention can also be achieved by writing the program code read out of the storage medium to a memory of an add on expansion board of a computer or a memory of an add on expansion unit connected to a computer. The functions of the above described embodiments can be realized by a process in which after the program code is written a CPU in the add on expansion board or in the add on expansion unit executes some of or all of the functions in the above described embodiments under the control of the program code.

While the present invention has been described with reference to exemplary embodiments it is to be understood that the invention is not limited to the disclosed exemplary embodiments. The scope of the following claims is to be accorded the broadest interpretation so as to encompass all modifications and equivalent structures and functions.

This application claims the benefit of Japanese Application No. 2007 042434 filed Feb. 22 2007 which is hereby incorporated by reference herein in its entirety.

