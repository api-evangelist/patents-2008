---

title: Architecture for online communal and connected experiences
abstract: Various aspects are disclosed herein for an architecture for online communal and connected experiences. This architecture can be embodied in an application running a host computing device, where the application provides functionalities such as finding modules on local devices or hosted on online services, launching such modules, switching between a plurality of such concurrently running modules, and providing many-to-many text, voice, and video functionality. This application can also interface with managed runtime code on the host computing device, thereby providing inputting, outputting, and network communication means among a plurality of computing devices having different platforms.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07904537&OS=07904537&RS=07904537
owner: Microsoft Corporation
number: 07904537
owner_city: Redmond
owner_country: US
publication_date: 20080111
---
A portion of the disclosure of this document may contain material that is subject to copyright protection. The copyright owner has no objection to the facsimile reproduction by anyone of the patent document or the patent disclosure as it appears in the Patent and Trademark Office patent files or records but otherwise reserves all copyright rights whatsoever. The following notice shall apply to this document Copyright 2007 Microsoft Corp.

The presently disclosed subject matter relates to the field of computing and more particularly to fields such media content although this is merely an exemplary and non limiting field.

Entertainment devices such as gaming consoles gaming handhelds music players personal computers PCs and so on have no structured well defined means for users to communicate with each others for instance via video and or voice. Moreover such devices have no means to share data such as photos music video and so on in a consistent robust and rich manner. Thus what is needed is an architecture that can provide a framework for cross platform communication and sharing of data.

Various aspects are disclosed herein for an architecture for online communal and connected experiences. This architecture can be embodied in an application running a host computing device where the application provides functionalities such as finding modules on local devices or hosted on online services launching such modules switching between a plurality of such concurrently running modules and providing many to many text voice and video functionality. This application can also interface with managed runtime code on the host computing device thereby providing inputting outputting and network communication means among a plurality of computing devices having different platforms.

It should be noted that this Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter nor is it intended to be used as an aid in determining the scope of the claimed subject matter.

By way of contrast devices of different types may not be able to communicate with one another in a structured manner because of a lack of a common communication and sharing mechanism. In entertainment device A may be of type namely a PC and entertainment device C may be of type for example a music player. These two devices a PC and a music player may not be able to communicate in a rich and extensive manner. Of course basic interaction between devices of different types may exists such as basic text or other straightforward data sharing however the contents of one device for the most part may be unintelligible to the other device and vice versa .

Such lack of structured cross platform communication and sharing of data may be applicable to a plurality of devices. illustrates that entertainment device A of type may also not be able to communicate in a structured manner with entertainment device D that is of type . Type devices gaming handhelds for instance may not be able to communicate with type devices music players and so on.

In contrast to illustrates provided there is a structured cross platform mechanism various devices of various types and of the same type can easily communicate with each other and share data. Thus per computing device A of type can interact with computing device C of type it can interact with computing device D of type and it can interact with computing device B that is of the same type type as itself.

Such interaction which may include communication and or sharing of data among other functionalities may include but is not limited to voice text and or video communication sharing of photos music including audio files video and so on. In short the interaction may involve any kind of digital content. Such interaction may be performed in real time or not depending on the need. Moreover it does not have to be limited to 1 1 interaction instead it may involve a plurality of users and or computing systems. In this setup communal experiences can be sustained by communicating and sharing content across multiple platforms whether these platforms run on PCs gaming consoles music players cell phones personal digital assistants PDAs and so on.

Next illustrates how cross platform interaction can be accomplished using an application and or plug in architecture. In computing device A of type interacts with computing device C of type . In one aspect of the presently disclosed subject matter such communication and or sharing of data can be accomplished using a cross platform application . This application can support a plurality of users on different and remote computing devices. These devices may be of different types as discussed above including PCs gaming consoles and so on. Using the cross platform application users can conference using voice text video and other communication means.

Furthermore the cross platform application can support a plug in architecture. Thus various plug in modules can be developed and used to interact with the core application . Such plug in modules can include various computing solutions whether to added to or enhance voice text and or video communication and or photo music and or video sharing and the like. One way this can be accomplished by the plug in architecture is by exposing core interfaces which can be used to design the appropriate interfaces built in the aforementioned plug in modules. The core interfaces can mediate control of various functionalities such as 1 graphics devices so that plug ins can draw 2 input so that plug ins can take and handle certain inputs 3 networking so that plug ins can synchronize data across various users and so on.

In a further aspect of the presently disclosed subject matter the cross platform application can be platform agnostic. By way of example and not limitation the application can interact with a managed code framework such as .NET. This may allow for the leveraging of managed code for the aforementioned interaction and it may also allow for different types of codes to interact via an intermediate language provided by the managed code framework. It will be well understood by those skilled in the art that various cross platform runtimes can be used to accomplish this goal not just .NET and that in some other aspects of the disclosed subject matter such managed code frameworks do not have to be used.

Where managed runtimes are used they can provide a basic model or namespace for process control input control networking including notification of users entering or leaving a session and the ability to address and send packets to any users graphics rendering access to local storage and the like. Native applications interacting with such runtimes can provide the basic functionality for finding modules on local devices or hosted on online services they can also provide for the launching of such modules switching between concurrently running modules many to many text voice video chat and so on.

Some of the other exemplary and non limiting features of native applications include hosting managed runtimes that actually run the modules providing input to the modules including text voice video controller storage and so on providing output from the modules including text voice video graphics storage and so on providing means of rendering output from the gadgets providing means of inviting other parties to join an experience maintaining persistent text voice video chat across all users. These are just some of the plurality of features of the native application as it is manifested variously in other parts of this application whether as a cross platform application in or a native application in .

Turning now to it illustrates an exemplary scenario of a basic media content sharing module interacting with a native application. It should be noted at the outset that media content includes any content discussed throughout herein and storable on any tangible medium thus this term is inclusive rather than exclusive. Furthermore the term content herein includes any data and or code as these terms are understood by those of skill in the art. In a module which may be a photo sharing and or editing plug in or some other applet provides some media content for instance a picture although the notion of media content is not limited to pictures text and such data but rather also can include gaming content video and or audio content and so on . This media content can be conveyed to a native application via a graphics interface . The native application can provide a content framework for instance some kind of applet or program such as voice chat or text chat. Thus the net result can be that the media content can be embedded in the content framework just as a picture might be embedded or pasted into a chatting program. And moreover in other aspects of the presently disclosed subject matter the media content and the content framework might be one and the same e.g. a console game . Finally this media content can then be shared with other users via the native networking functionalities of the native application .

The native application can provide various functionalities such as maintenance of state and exposure of interfaces to allow for interaction with other remote hosts and clients. In the former case the application can maintain a consistent state across a plurality of computing devices such as those separated across a network. By way of example and not limitation the application can answer inquires regarding various connections between various modules e.g. socket state . In the latter case again by way of example and not limitation a networking interface can help in sharing the aforementioned media content with various users across various platforms the control interface can allow for manipulation of the content in various ways the graphics interface can allow for obtaining graphics content the input interface can allow for input that can have an effect on media content and the storage interface can allow for control of various storage schemes. These interfaces and exposed by the native application are merely exemplary and non limiting. Other interfaces are contemplated herein also as is apparent in reading the surrounding context disclosed in the present disclosure.

The application itself can reside on various computing devices whether stationary or mobile PCs or laptops PDAs and cell phones and so on. The application may be embodied as a full program or as an applet. It can function in a peer to peer network architecture or in a client server architecture. As will be apparent in the discussion associated with the application can reside in various software hardware or firmware settings and interact with other computing devices and or modules over various types of networks.

In short the native application which may be embodied as a standard application or a program and or an applet can reside on any computing device wanting to communicate and or share data with even more broadly speaking interact with another computing device where such devices may have the same or different platforms. One way to accomplish this task is for any application native to a given computing device such as application to provide some core interfaces shown in as exemplified by such interfaces as the networking interface control interface graphics interface input interface and or storage interface .

Such interfaces can also be extensible beyond the disclosed herein set of interfaces. For instance as is shown in a customizable interface can be provided where this interface can expose access to various functionalities such as GPS data camera data and so on. Thus the customizable interface can stand in for any type of interface that allows any module to communicate with the host computing device special purpose functionality or devices such as GPS Bluetooth camera or motion detector devices. Moreover the native application can be associated with a managed runtime code such as .NET. so that various modules or plug ins can be used to interact with the native application .

Thus in another aspect of the presently disclosed subject matter the functionality of the native application can manifest itself in at least three different architectures 1 a native application running on device e.g. a console but not limited thereto as any computing device is contemplated herein can host sessions among various other applications running on other devices 2 modules that communicate with other modules on different devices can do so via dynamically linked libraries DLLs instead of a native application where a DLL can be present on each device communicating with another device and it can be downloaded from on online source either for a first time install or to resolve versioning issues with other DLLs it should be noted moreover that specialized operating system support may be required to ensure service continuity across module reboots e.g. maintaining video chats across module loads and 3 an operating system OS can manage native applications i.e. it can oversee the communication traffic discussed above with reference to and . Anyone of these three setups is consistent with the subject matter disclosed herein and it can be employed in the desired form depending on the need.

The application or in the alternative the DLLs or an OS supervised application can be responsible for maintaining connections between modules. It can specify the properties of such modules e.g. module and how modules are connected with each other. As is indicated below such connection can be in a peer to peer context or a server client context. Moreover in the native application architecture for example host migration can occur when a session host migrates from one console to another console e.g. in the scenario where the former console withdraws from a session . Thus one advantage of the presently disclosed subject matter is that developers can save time in managing connections between various modules on various consoles since native applications running on each such consoles can guarantee connectivity.

Lastly illustrates an exemplary block diagram flow chart of making using providing and the like the cross platform application mechanisms. At block the aforementioned application for instance application can be downloaded onto a computing device from a remote source. It should be noted however that it can be preloaded onto the computing device. Next at block one the application is downloaded it can be installed to interact with native host computing resources such as runtime managed code. Once installed it can be used to perform a variety of function as mentioned above and additional functions such as data synchronization real time updating and the like.

The installing of this application allows for computing devices with different platforms to communicate and or share data with each other whether those platforms include standard PC operating system mobile operating systems closed operating systems where the notion of closed system includes a non general purpose computer such as a gaming console that allows only certain type of code to run such as signed code and so on.

At block the application is configured to receive media content from remote devices and share such content with the native or host computing device. Such media content can then be manipulated by the host computing system and any changes in the media content can be reflected back to the remote system as is shown in block . Still furthermore the application discussed above can interact with modules such as plug in programs application or applets that are local to the application or that are remote to the application that is residing on a different computing device whether physically or logically such as in a virtual machine scenario . Lastly at block the application can keep open communications between the host and remote devices running different platforms while for example sharing data in blocks . As mentioned such communications can include text voice video audio and may further include any other kind of electronic communication.

In should be noted that in another aspect of the present disclosure having the application in place whenever users press any controller buttons as shown in this signal can be intercepted by the application and manipulated thereby before passing on any command to the intended recipient. In this manner the application can manage control flow of any console such as having the ability to select different modules whether locally or over a network . The net effect is that the application provides for computing system that allows for easy sharing of data between closed computing systems.

In one exemplary and non limiting aspect of the presently disclosed subject matter video and or chat threads can be maintained as to provide the appearance that video and or chat are always available even when an application reboot occurs . Other aspects of communicated data such as voice data can appear seamless across any data loads whether these loads include video pictures games and so on .

The above discussed computing devices whether native e.g. hosts or remote can be embodied as gaming consoles music players PCs and other such devices having different similar or the same platforms. Contemplated herein are also hand held devices laptops cell phones and so on. Referring to a block diagram shows an exemplary multimedia console that can be used in conjunction with the various aspects of cross platform applications discussed above. This console which includes a game oriented console or a PC may comprise for example digital audio processing functionality. Specifically in a multimedia console is shown with a central processing unit CPU having a level 1 L1 cache a level 2 L2 cache and a flash ROM Read only Memory . The level 1 cache and level 2 cache can temporarily store data and hence reduce the number of memory access cycles thereby improving processing speed and throughput. The flash ROM may store executable code that is loaded during an initial phase of a boot process when the multimedia console is powered. Alternatively the executable code that is loaded during the initial boot phase can be stored in a flash memory device not shown . Further ROM can be located separately from the CPU . These memory devices can cache parts or the entirety of the above mentioned applications programs applets managed code and so on.

A graphics processing unit GPU and a video encoder video codec coder decoder can form a video processing pipeline for high speed and high resolution graphics processing. Data can be carried from the graphics processing unit to the video encoder video codec via a bus. The video processing pipeline can output data to an A V audio video port for transmission to a television or other display. A memory controller can be connected to the GPU and CPU to facilitate processor access to various types of memory such as but not limited to a RAM Random Access Memory .

The multimedia console can include an I O controller a system management controller an audio processing unit a network interface controller a first USB host controller a second USB controller and a front panel I O subassembly that can be preferably implemented on a module . The USB controllers and can serve as hosts for peripheral controllers a wireless adapter and an external memory unit e.g. flash memory external CD DVD ROM drive removable media etc. . The network interface and or wireless adapter can provide access to a network e.g. the Internet home network etc. and may be any of a wide variety of various wired or wireless interface components including an Ethernet card a modem a Bluetooth module a cable modem and the like.

System memory can be provided to store application data that is loaded during the boot process. A media drive can be provided and can comprise a DVD CD drive hard drive or other removable media drive etc. The media drive can be internal or external to the multimedia console . Application data can be accessed via the media drive for execution playback etc. by the multimedia console . The media drive can be connected to the I O controller via a bus such as a Serial ATA bus or other high speed connection e.g. IEEE 1394 .

The system management controller can provide a variety of service functions related to assure the availability of the multimedia console . The audio processing unit and an audio codec can form a corresponding audio processing pipeline with high fidelity 3D surround and stereo audio processing according to aspects of the presently disclosed subject matter above. Audio data can be carried between the audio processing unit and the audio codec via a communication link. The audio processing pipeline can output data to the A V port for reproduction by an external audio player or device having audio capabilities.

The front panel I O subassembly can support the functionality of the power button and the eject button as well as any LEDs light emitting diodes or other indicators exposed on the outer surface of the multimedia console . A system power supply module can provide power to the components of the multimedia console . A fan can cool the circuitry within the multimedia console .

The CPU GPU memory controller and various other components within the multimedia console can be interconnected via one or more buses including serial and parallel buses a memory bus a peripheral bus and a processor or local bus using any of a variety of bus architectures.

When the multimedia console is powered on or rebooted application data can be loaded from the system memory into memory and or caches and executed on the CPU . Such application data can include some of the online derived data. The application may also present a graphical user interface that provides a consistent user experience when navigating to different media types available on the multimedia console . In operation applications and or other media contained within the media drive can be launched or played from the media drive to provide additional functionalities to the multimedia console .

The multimedia console may be operated as a standalone system by simply connecting the system to a television or other display. In this standalone mode the multimedia console may allow one or more users to interact with the system watch movies listen to music and the like. However with the integration of broadband connectivity made available through the network interface or the wireless adapter the multimedia console may further be operated as a participant in a larger network community. As such a participant it may interact with computing devices whether PCs or servers and receive information that may be eventually stored.

Next illustrates an exemplary networking environment for subject matter discussed with reference to . The above discussed gaming console can correspond to any one of the computing devices or it can be distributed over such devices . It can interact with various other objects and storage devices via a communications network bus where such objects and devices can correspond to other computing devices whether hardware firmware or software . The cross platform applications can communicate in peer to peer networks or client server based networks depending on the implementation.

Finally it should also be noted that the various techniques described herein may be implemented in connection with hardware or software or where appropriate with a combination of both. Thus the methods and apparatus of the presently disclosed subject matter or certain aspects or portions thereof can take the form of program code i.e. instructions embodied in tangible storage media such as floppy diskettes CD ROMs hard drives or any other machine readable storage medium where when the program code is loaded into and executed by a machine such as a computer the machine becomes an apparatus for practicing the subject matter.

In the case of program code execution on programmable computers the computing device may generally include a processor a storage medium readable by the processor including volatile and non volatile memory and or storage elements at least one input device and at least one output device. One or more programs that may utilize the creation and or implementation of domain specific programming models aspects of the present invention e.g. through the use of a data processing application programming interface API or the like are preferably implemented in a high level procedural or object oriented programming language to communicate with a computer system. However the program s can be implemented in assembly or machine language if desired. In any case the language may be a compiled or interpreted language and combined.

Any language used by the presently disclosed aspects can contain instructions to perform a variety of tasks. Thus for example a native runtime can maintain connections required to maintain for instance voice video chat across module loads a native application can expose to the modules knowledge about the users attached to a current session in this way modules can be always aware the moment they start up of who is currently connected as is shown in for example a native application can be the actual content framework in this case the application could run private modules that display information and a user interface UI related to a current session e.g. having the ability to visualize who else is in the session and having the UI to actually manipulate data e.g. invite people kick people off emote start a new module and make everyone in the session start the new module as well etc. it could also provide personal services unrelated to the session e.g. stock ticker news email etc. and the native application can also provide other rich services to the modules e.g. special abilities like GPS information from a cell phone or other attached hardware rich profile data from users attached to the session and so on.

And yet while the present disclosure has been described in connection with a plurality of exemplary aspects as illustrated in the various figures and discussed above it is understood that other similar aspects may be used or modifications and additions may be made to the described aspects for performing the same function of the present disclosure without deviating therefrom. For example in various aspects of the disclosure processes and methods were described for the interaction between and or among cross platform computing devices. However other equivalent mechanisms to these described aspects are also contemplated by the teachings herein. Therefore the present disclosure should not be limited to any single aspect but rather construed in breadth and scope in accordance with the appended claims.

