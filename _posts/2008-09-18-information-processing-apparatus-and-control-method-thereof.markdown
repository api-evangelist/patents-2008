---

title: Information processing apparatus and control method thereof
abstract: An information processing apparatus having multiple operating systems is disclosed. Among the multiple operating systems, a first operating system, the startup time of which is short, controls a particular device, and a second operating system, the startup time of which is longer than that of the first operating system, controls the emulated particular device.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08373870&OS=08373870&RS=08373870
owner: Canon Kabushiki Kaisha
number: 08373870
owner_city: Tokyo
owner_country: JP
publication_date: 20080918
---
The present invention relates to an information processing apparatus and its control method for execution of processing under the control of an operating system.

An operating system OS installed in an information processing apparatus such as a personal computer PC provides general functions to application programs independently of the hardware configuration of the information processing apparatus. Especially advanced operating systems which can perform a part of the processing performed by application programs and can facilitate development of application program are widely used.

On the other hand since an operating system is independent of hardware configuration it often performs redundant processing from the viewpoint of an information processing apparatus having a particular hardware configuration. Accordingly it takes time for activation of the operating system.

For an information processing apparatus having a particular hardware configuration a method for acceleration of operating system startup by optimization of operating system startup processing has been proposed.

Further Japanese Patent Application Laid Open No. 10 207588 discloses a so called hibernation system in which a memory image immediately after operating system startup is stored in a memory device and upon power on the memory image is restored thereby the startup is accelerated.

Further Japanese Patent Application Laid Open No. 2002 366504 discloses a system with a mode for high speed operating system startup. In the high speed OS startup mode processing such as diagnosis of various hardware devices incorporated in the information processing apparatus are omitted.

However the above described conventional techniques have problems. The method of optimizing operating system startup processing in a particular information processing apparatus is applicable only to an information processing apparatus having a fixed hardware configuration. Otherwise when the hardware configuration is changed it is necessary to optimize the operating system startup processing in accordance with the changed hardware configuration.

Further in the above described hibernation system it is necessary to store the memory image in the memory device. Especially in an information processing apparatus used by an unspecified number of users some user may turn the power off or inadvertently pull the power plug without consideration of other users. Accordingly at power on the memory image immediately after the previous startup is not always stored in the memory device. When the memory device holds no memory image the information processing apparatus cannot be started quickly. Further even when a memory image is stored in the memory device only the restoration of memory image is performed but processing such as diagnosis of various hardware devices and a file system which are performed upon activating operating system is not performed. Accordingly the system has a reliability problem.

Further in the system with the high speed OS startup mode as in the case of the above described hibernation system processing such as diagnosis of various hardware devices and a file system which are performed at activation of operating system is not performed. Accordingly the system also has a reliability problem.

An aspect of the present invention is to eliminate the above mentioned problems of the conventional technology.

According to another aspect of the present invention it is to improve user friendliness by optimization of control of a particular device incorporated in an information processing apparatus by an operating system.

According to an aspect of the present invention there is provided an information processing apparatus having first and second operating systems and a plurality of devices comprising 

emulation means for emulating a particular device controlled by the first and second operating systems among the plurality of devices 

startup means for launching the first operating system and the second operating system startup time of which is longer than that of the first operating system and

management means for performing management such that the first operating system launch of which by the startup means has been completed controls the particular device until launch of the second operating system by the startup means is completed and then the second operating system controls the particular device emulated by the emulation means.

According to an aspect of the present invention there is provided a control method of controlling an information processing apparatus having first and second operating systems and a plurality of devices the method comprising 

an emulation step of emulating a particular device controlled by the first and second operating systems among the plurality of devices 

a startup step of launching the first operating system and the second operating system startup time of which is longer than that of the first operating system and

a management step of performing such that the first operating system launch of which has been completed controls the particular device until launch of the second operating system is completed and then the second operating system controls the particular device emulated in the emulation step.

Further features of the present invention will become apparent from the following description of exemplary embodiments with reference to the attached drawings.

Preferred exemplary embodiments of the present invention will now be described hereinafter in detail with reference to the accompanying drawings. It is to be understood that the following embodiments are not intended to limit the claims of the present invention and that not all of the combinations of the aspects that are described according to the following embodiments are necessarily required with respect to the means to solve the problems according to the present invention. Note that an information processing apparatus according to the embodiments is a multifunction apparatus having various functions such as a copy function a facsimile FAX function and a printer function. However the present invention is not limited to the multifunction apparatus but is applicable to a general information processing apparatus including a PC.

A CPU connected to a memory controller executes various programs stored in a DRAM connected to the memory controller . The DRAM holds various data such as operation data other than the programs. The memory controller is further connected to an LCD controller and a bus controller . The bus controller is connected to an SIO which is a serial communication controller and a ROM . Further the bus controller has a connector IDE PHY for connection to a hard disk and a connector Network PHY for connection to a network cable. Further the bus controller also operates as a hard disk controller and a network controller. The LCD controller and the SIO are connected to a panel PHY to be connected to an operation panel having an LCD panel touch panel for a user to operate the information processing apparatus. Note that the operation panel will be described later. The ROM holds set values for operation of the information processing apparatus and a boot program necessary for startup of the information processing apparatus and the like.

The information processing apparatus further has another CPU . The CPU is connected to a DRAM and various hardware units PHYs to via a bus . The DRAM holds various programs executed by the CPU and various data. The bus is connected to the bus controller via a bus bridge . The various data stored in the DRAM can be transferred to the DRAM via the bus controller the bus bridge and the bus and can also be transferred in the opposite direction. Further the CPU and the CPU can mutually communicate with each other via the bus bridge . In this arrangement the CPU communicates with the CPU thereby controls hardware devices connected to the various hardware units PHYs to . Further the CPU can write a program executed by the CPU from the hard disk connected to the connector IDE PHY into the DRAM .

Reference numeral denotes ten keys for the user of the information processing apparatus to input numerical information telephone numbers and the like. A reset key is used clearing information set with the operation panel . A soft power key is used for instructing the apparatus to turn ON OFF in software. A start key is used by the user for instructing the apparatus to start various functions such as FAX transfer and copying. A stop key is used by the user for instructing the apparatus to stop execution of already started various functions. An LED indicates the power status of the information processing apparatus. An LED indicates the status of a job executed in the information processing apparatus. Further an LED indicates an error status occurred in the information processing apparatus. These LEDs can be respectively set to no light status green light status green flash status or orange light status by serial communication using the SIO . A guide key displays various instruction screens about the information processing apparatus. A user mode key is used for setting of the information processing apparatus to a user mode. A touch panel has a liquid crystal display. When the user operates the various keys on the operation panel or the touch panel the operation information is notified via the panel PHY and the SIO to the CPU . The CPU controls the LCD controller to produce or updates a display on the screen of the touch panel in accordance with a program stored in the DRAM . Further the CPU controls the SIO to turn on off the various LEDs.

Next the various functions of the information processing apparatus according to the present embodiment will be described by function.

The user sets an original on a scanner unit not shown connected to the scanner PHY then operates the operation panel to perform setting regarding copying. The setting regarding copying includes setting of the number of copies an output sorting method a reading magnification and the like. These set values are stored in the DRAM . Thereafter the user depresses the start key . Then the CPU detects the depression of the start key and requests the CPU to drive the scanner unit. At this time information on the set value regarding the magnification and the destination of obtained image data is notified with the request for driving to the CPU . As the destination of image data from the scanner unit one of the DRAM and the DRAM is selected. The CPU drives the scanner unit via the scanner PHY in accordance with the information received from the CPU .

At this time the scanner unit forms image data by optically scanning the original set by the user. The image data read by the scanner unit is first stored in the DRAM then subjected to predetermined image processing then sent to the destination of image data designated by the CPU the DRAM or the DRAM and stored there. At this time the CPU may store the image data into the hard disk connected to the IDE PHY . Then the CPU instructs the CPU to print the obtained image data with a printer engine not shown connected to the printer PHY . The CPU controls the printer engine via the printer PHY to print the image data. The printer engine prints the image data on paper in accordance with the instruction from the CPU . Note that the print instruction to the printer engine is made on a per page basis. When documents having multiple pages are set on the scanner unit the CPU instructs the CPU to print image data multiple times. Further when the user has designated a sorting method using the operation panel the CPU designates image data to be printed in accordance with the designated sorting method thereby the sorting function is performed.

Next the facsimile FAX transmission will be described. The user sets an original on the scanner unit connected to the scanner PHY . Then the user operates the operation panel to input a destination telephone number settings upon reading and the like. When the user depresses the start key the CPU detects the depression of the start key and requests the CPU to read the original as in the case of the above described copy function. Also in this case the read image data is stored in the DRAM the hard disk or the DRAM . Next the CPU instructs the CPU to send the stored image data by facsimile transmission to the designated telephone number using a facsimile unit not shown connected to the FAX PHY . The CPU facsimile transmits the image data designated by the CPU to the designated telephone number by controlling the facsimile unit via the FAX PHY .

Next the operation of facsimile reception will be described. The facsimile unit notifies the CPU of facsimile reception and transfers image data transmitted from the party on the other end to the DRAM and stores the image data there. The CPU notifies the CPU with information on the received image data of the facsimile reception. Thereafter as in the case of the above described copy function the CPU instructs the CPU to output the received image data with the printer engine. Then the image data received with the facsimile unit is printed with the printer engine.

Document data generated by the user is transmitted via a network connected to the connector to the information processing apparatus. The document data transmitted in this manner is for example PDL data. The document data received via the connector is temporarily stored in the DRAM . The CPU interprets the document data held in the DRAM and converts the document data into image data and stores the image data in the DRAM . Then the CPU instructs the CPU to output the image data with the printer engine as in the case of the above described copy function. The CPU controls the printer engine through the printer PHY to print the image data.

All the image data printed with the above described copy function the FAX function and the printer function may be stored in the hard disk connected to the IDE PHY . In this case image data which has been once printed can be re used. Further when a plurality of items of image data are handled image data held in the DRAM is transferred to the hard disk and in the DRAM the image data transferred to the hard disk is deleted in the DRAM . In this arrangement while image data is processed other image data can be read or generated accordingly high speed processing can be realized.

Numeral denotes a first operating system OS hereinbelow . A first copy controller to control the above described copy operation operates on the first OS . The first copy controller controls the operation panel the scanner unit connected to the scanner PHY and the printer engine connected to the printer PHY . These devices are controlled through device drivers to included in the first OS . The device drivers and are an LCD serial driver a scanner driver and a printer driver.

A job controller to control a job operates on a second OS . Further a UI controller a print controller a second copy controller a PDL controller and a FAX controller operate on the second OS . The UI controller controls the operation panel . The print controller controls the printer engine connected to the printer PHY . Further the second copy controller controls the above described copy operation and the PDL controller controls the above described printer function. Further the FAX controller controls the above described FAX function. Note that the startup activation time of the first OS is shorter than that of the second OS .

Further the second OS supports various file systems such as FAT and EXT . The file system is a system for storage or acquisition of files into from a hard disk with high efficiency. A second application operating on the second OS operates an API Application Programming Interface presented by the second OS to utilize the file system. For example the second copy controller can efficiently store image data obtained from the scanner into the hard disk by operating the API. In this manner by obtaining image data stored in the hard disk in an arbitrary order printing on paper can be performed in various layouts e.g. printing in reverse order and N up printing . Further the FAX controller can store image data obtained by facsimile reception into the hard disk by operating the API. Then the facsimile received image can be re used. Further the PDL controller can efficiently store image data obtained by interpretation of received image data into the hard disk by operating the API. Generally image data generated in this manner cannot be deleted until it is outputted to the printer engine. Accordingly when image data for a predetermined number of images has been generated the PDL controller interrupts interpretation processing until the image data is printed by the printer engine. However as the number of images simultaneously stored in the hard disk is increased by storage of image data in the hard disk the frequency of interruption of interpretation processing by the PDL controller can be reduced. A file system operates a hard disk driver to control a hard disk controller included in the bus controller to control the hard disk connected to the IDE PHY . Thus data transmission reception to from the hard disk HDD can be performed.

Further the second OS supports various network protocols such as TCP IP and UDP. Generally a network protocol supported by an OS is within the network layer in the OSI basic reference model. A protocol stack presents an interface to applications operating on the second OS . These applications can communicate with an external information processing apparatus by various protocols by operating the interface. For example the PDL controller utilizes the interface to receive document data transmitted from the outside. Further the job controller utilizes the interface to communicate with the external information processing apparatus by SNMP Simple Network Management Protocol . The protocol stack performs communication with the external information processing apparatus connected via the connector by operating the network driver to control the network controller included in the bus controller . Further the UI controller displays an image on the touch panel by operating a driver to control the LCD controller and the SIO . Further the UI controller receives a command inputted by the user s operation performed with respect to the operation panel and performs screen update or instructs the job controller to execute an operation desired by the user in accordance with the user s instructions. Further the print controller prints various image data on paper by operating the printer driver to control the printer engine connected to the printer PHY . Note that image data to be printed is designated by the job controller .

The second copy controller operates a scanner driver to control the scanner unit connected to the scanner PHY in accordance with an instruction from the UI controller to read an original set on the scanner unit and generate image data. Further the second copy controller writes the image data obtained in this manner into the hard disk by operating the file system . Further the second copy controller transmits the image data to the external information processing apparatus by operating the protocol stack . Further the second copy controller instructs the job controller to print the image data. At this time the job controller designates the image data and instructs the print controller to print the designated image data. Note that since the second copy controller has stored the image data obtained by reading the original in the hard disk printing can be performed in a sorting order according to an instruction from the UI controller by controlling the order of the image data to be printed.

The PDL controller interprets various received document data such as PDL data with the protocol stack and converts the data into image data then instructs the job controller to print the image data. At this time the job controller designates the image data and instructs the print controller to print the designated image data.

The FAX controller operates in accordance with an instruction from the UI controller or an incoming event issued from a FAX driver to control the facsimile unit connected to the FAX PHY . When facsimile transmission has been instructed from the UI controller the FAX controller operates the scanner driver to control the scanner unit connected to the scanner PHY to read an original set on the scanner unit. Then the FAX controller facsimile transmits the read image data to a telephone number designated by the UI controller by operating the FAX driver to control the facsimile unit connected to the FAX PHY .

On the other hand when an incoming event has been notified from the FAX driver the FAX controller reads the image data and instructs the job controller to print the image data. At this time the job controller designates the image data designated from the FAX controller and instructs the print controller to print the designated image data.

Note that the activation and execution of the first OS and the second OS are controlled by a hyper visor . The hyper visor launches the first OS and the second OS in accordance with a method to be described later. Then the hyper visor executes the first OS and the second OS in accordance with predetermined scheduling. The hyper visor includes an I O controller emulators to to emulate at least a part of operations of the various devices a virtual memory controller and an HDD controller .

The device drivers to of the first OS and the device drivers to of the second OS access predetermined I O space and receive interrupt events which occur in the respective devices. The device drivers control the various devices in this manner. The access to I O space or interrupt event from the devices is delivered to the respective OS s and the respective devices via the hyper visor . The I O controller of the hyper visor conducts arbitration among the above described accesses to I O space and interrupts from the various devices and records controls performed on the devices by the respective OS s.

When the power of the information processing apparatus is turned on first in step S a program called a BIOS stored in the ROM is executed by the CPU . The BIOS initializes the memory controller such that the CPU can perform reading writing from into the DRAM . Next the BIOS initializes the hard disk controller not shown included in the bus controller . Then the BIOS reads a bootstrap loader from a master boot record MBR of the hard disk connected to the IDE PHY and develops it in the DRAM . Then in step S the BIOS executes the bootstrap loader loaded in the DRAM . The bootstrap loader inspects a partition table described in the MBR and searches for a bootable partition. When a bootable partition is found the bootstrap loader notifies the BIOS of the position of the partition to be booted and loads the partition to the DRAM . In the present embodiment the hyper visor is stored in the bootable partition. Next in step S the bootstrap loader boots the hyper visor .

First in step S the hyper visor initializes a virtual memory. Next in step S the hyper visor loads the first OS with the program of the first copy controller from the hard disk to the DRAM . At this time the hyper visor defines a virtual memory space for the first OS . Note that the virtual memory space will be described later.

Next in step S the hyper visor launches the first OS the startup time of which is short. Note that to launch the first OS the hyper visor controls the virtual memory controller in accordance with the virtual memory space for the first OS and thereafter controls various registers of the CPU to execute the program from the entry point of the first OS . Next in step S the hyper visor executes the first OS until the information processing apparatus becomes user operable with the first OS . The hyper visor monitors an access to a device from the first OS thereby determines whether or not the information processing apparatus has become user operable. At this time the I O controller performs control such that the access to the I O space by the first OS is performed on an actual device and an event from the actual device is transmitted to the first OS . That is the I O controller accesses the I O space which the first OS has tried to access. Further the I O controller calls a subroutine described in an interrupt vector prepared by the first OS corresponding to the interrupt event received from the device.

When the information processing apparatus has become user operable with the first OS the process proceeds to step S at which the hyper visor loads the second OS the startup time of which is longer than that of the first OS from the hard disk to the DRAM . At this time as in the case of the above described first OS the hyper visor defines virtual memory space for the second OS . Next in step S the hyper visor executes the second OS . To execute the second OS the hyper visor makes the first OS and the second OS executable in parallel by a predetermined scheduling method. At this time the I O controller performs control such that device control by the first OS is performed on an actual device by a method to be described later. Further the I O controller performs control such that device control by the second OS on a device controlled by the first OS is performed via the respective device emulators to . Further the I O controller performs control such that an event from the actual device is transmitted to the first OS and an event issued by the various device emulators to is transmitted to the second OS . That is when the device driver of the second OS tries to access the I O space the various device emulators to are notified of the address to be accessed and the access method reading or writing . Upon writing the various device emulators to corresponding to the address to be accessed are notified of the data to be written and the bit length of the data. The device emulators to emulate the respective devices. For example a device emulator which emulates a device in which its open register value is changed in accordance with an access has a memory to emulate the register. The device emulator rewrites the memory to emulate the register in accordance with notified information. Thereafter when the device emulator is notified of access to read the register value the device emulator notifies the I O controller of the content of the memory. The I O controller notifies the second OS of the notified memory content. Further regarding a device emulator which emulates a device in which an interrupt occurs in accordance with the above described access the hyper visor calls a subroutine described in an interrupt vector prepared by the second OS . Then the device emulator emulates an interrupt event issued by the device.

Next in step S the hyper visor monitors device control executed by the second OS thereby determines whether or not the information processing apparatus has become logically user operable with the second OS . When it is determined that the information processing apparatus is not operable the process proceeds to step S in which it is determined whether or not OS switchover is to be performed. When it is determined that the OS switchover is not to be performed the process proceeds to step S at which the hyper visor continuously executes the previously executed OS. On the other hand when it is determined in step S that the OS switchover is to be performed the process proceeds to step S in which the hyper visor controls the virtual memory controller in accordance with the virtual memory spaces for the respective OS s then controls the various registers of the CPU and changes the OS to another OS to be executed.

On the other hand when it is determined in step S that the startup of the second OS has been completed and the information processing apparatus has become user operable the process proceeds to step S in which the hyper visor performs shutdown processing on the first OS . The details of this processing will be described later. When the shutdown processing of the first OS has been completed the process proceeds to step S in which the hyper visor changes the scheduling method such that only the second OS is executed. At this time the I O controller performs control such that access to the I O space by the second OS is performed on an actual device and an event from the actual device is transmitted to the second OS . For example the I O controller performs control such that after the completion of shutdown processing of the first OS the I O controller accesses the I O space to which the second OS has attempted access. Further the I O controller calls a subroutine described in an interrupt vector prepared by the second OS corresponding to the interrupt event received from the device.

The virtual memory space has logically accessible addresses defined by an application to which the virtual memory space is allocated. Numerals and denote virtual memory spaces. In the virtual memory space the I O space is allocated to predetermined addresses in correspondence with the information processing apparatus. Numerals and denote page tables describing allocation of the logical addresses of the respective virtual memory spaces to actual memory areas. The page tables and respectively have flags each indicating whether or not each memory address is valid. Numeral denotes physical address space of the information processing apparatus. Note that as the I O space is not allocated to the actual memory area it is not described in the page tables and .

During access to each virtual memory space if the accessed address is not described in the page tables and or the described actual memory is not valid an interrupt called an exception occurs in the CPU . The exception occurring in the CPU is transferred to the hyper visor and page swapping and or I O processing to be described later is performed.

When the respective device drivers of the respective OS s access predetermined I O space an exception interrupt occurs in the CPU . The hyper visor is notified of the exception interrupt occurring in the CPU . In step S the hyper visor inspects an address to which the device driver has attempted access and determines whether or not the access is to control the device. When it is determined that the address is not allocated to the I O space the hyper visor performs processing with the device as an out of control event. On the other hand when it is determined in step S that the accessed address is allocated to the I O space the process proceeds to step S in which it is determined whether the OS executed by the hyper visor is the first OS or the second OS. When it is determined that the OS accessed the I O space is the first OS the I O controller accesses the designated I O space. Note that when the hyper visor accesses the I O space as a privilege mode of the CPU is set before the access an exception interrupt will not occur.

On the other hand when it is determined that the OS that accessed the I O space is the second OS the process proceeds to step S. Then the accessed address and if the access is a write the value itself are stored in the memory. Then in step S emulation software for an appropriate device is executed in accordance with the stored address.

Note that as in the case of an actual device the emulation software rewrites an emulated register and emulates an interrupt. Accordingly the second OS can perform initialization processing even while an actual device is operated by the first OS .

This processing is started by activation of the OS. First in step S the first OS initializes the OS itself. Next in step S the first OS starts the first copy controller .

This processing is started by activation of the application. First in step S the first copy controller operates the various device drivers to perform initialization processing. In this example the scanner unit connected to the scanner PHY the printer engine connected to the printer PHY and the operation panel connected to the panel PHY are initialized. At this time the first copy controller controls the LED on the operation panel to the green flash status. Further it may be arranged such that a message indicating that the information processing apparatus is being initialized is displayed on the touch panel . When the device initialization has been completed and the copy operation has become possible the process proceeds to step S in which the first copy controller updates the screen of the touch panel and controls the LED to enter the green light status. At this time the information processing apparatus may accept user operations. When the user operates the touch panel the process proceeds to step S in which the first copy controller updates the screen of the touch panel in accordance with the operation. Then when the user depresses the start key the first copy controller starts the copy operation in accordance with the values set by that time.

Numerals to and to denote grayed out software keys. Even when the user depresses one of these grayed out keys the operation is ignored. Further the instruction to a copy key is also ignored no reaction occurs in response to the operation of the touch panel . These keys are used only for design compatibility with the user interface displayed by the UI controller operating on the second OS to be described later.

Numeral denotes a character string indicating the percentage of an output image to the original read by the scanner unit. In this example 100 indicating non scaled output is displayed. Numeral denotes a character string indicating the type of paper on which printing is performed. In this example auto paper to determine a paper size in correspondence with the size of the original is set. Note that in the user interface displayed by the first copy controller the contents of the percentage display and the paper type cannot be changed. Numeral denotes a character string indicating the set number of copies. The user can change the number of copies by operating the ten keys on the operation panel .

When any of the ten keys on the operation panel have been depressed the first copy controller updates the screen drawn on the touch panel in accordance with the depressed key. Numeral denotes a display indicating a current sorting method when output of multiple copies is set. In the user interface displayed by the first copy controller as the setting of the sorting cannot be made group sort is always selected. Note that the sorting is prohibited by the first copy controller since the hard disk cannot be used in the first OS . That is to perform sorting by copy upon output it is necessary to scan all the document data and store image data for all the document data in the hard disk by the completion of printing. However the storage in the hard disk is disabled in the first OS .

Under the above described settings when the user depresses the start key on the operation panel the first copy controller operates the scanner driver and instructs the scanner unit to start reading of a set original. At this time the first copy controller instructs to transfer image data for 1 page read by the scanner unit to the DRAM and store the data there since it is not necessary for the first copy controller to store the data read by the scanner unit in the HDD and only group sorting is performed. At the same time the first copy controller operates the LCD serial driver to set the execution LED on the operation panel to the green flash status.

When the image data for 1 page read by the scanner unit has been stored in the DRAM the first copy controller operates the printer driver to print the image data stored in the DRAM . These operations are repeated by the set number of copies. When the printing for the necessary number of copies has been completed the first copy controller deletes the image data stored in the DRAM and controls the scanner unit to start reading of the next page. The above described processing is repeated and when all the printing has been completed the first copy controller turns the execution LED off. Note that it may be arranged such that as long as there is an available capacity in the DRAM the first copy controller continuously controls the scanner unit to perform original reading.

Next the shutdown processing of the first OS at step S in the flowchart of will be described in detail with reference to the flowchart of .

First in step S the hyper visor determines whether or not an application on the first OS is executing a job. As the I O controller can store inputs from the operation panel by the user and operations of the LEDs and the like on the operation panel by the first OS the hyper visor determines whether or not a job is executed on the first OS by utilizing the stored contents. When it is determined that a job is executed on the first OS the process proceeds to step S in which point the hyper visor awaits completion of the job executed on the first OS .

When it is determined in step S that no job is processed by the first OS or when the job is not executed in step S the process proceeds to step S in which the hyper visor performs control to shutdown the first OS . For example an event upon depression of the power key on the operation panel may be emulated by the I O controller and transferred to the first OS . When the shutdown processing of the first OS has been competed the process proceeds to step S in which the hyper visor performs control to change the setting of the scheduler not to execute the first OS . Next in step S the hyper visor releases the memory area ensured for the first OS thereby completes shutdown processing of the first OS . The memory area ensured for the first OS is the page table of the virtual memory space for the first OS defined in step S in and the memory in which the first OS itself is loaded. Note that it may be arranged such that in step S as shown in the first OS displays a message indicating that the information processing apparatus is not user operable on the touch panel .

In a user is notified of the inoperable status of the information processing apparatus by display of a message please wait .

Next the operation of the second OS will be described using the flowchart of . is a flowchart showing an example of activation processing of the second OS in the information processing apparatus according the present embodiment.

First in step S the second OS initializes the OS itself. Next in step S the second OS performs mount processing on the file system utilized by the second OS . By the mount processing management information on the file system is read in the memory and initialization of a file management table and the like are performed such that the OS can use the file system. At this time the second OS may execute a program to check the mounted file system. Next in step S the second OS performs network initialization. At this time the second OS may perform negotiation processing and the like necessary for communication with an external server by DHCP or the like. Next in step S the second OS starts the various applications operating on the second OS . Note that after the completion of startup of the applications the shutdown processing of the fist OS described in is started.

Returning to when the paper selection key is depressed a screen for output paper selection is displayed. The user can select the size of paper on which printing is performed. A sorter key is used for designation of sorting method when printing for multiple copies. In this arrangement the group sort for printing by page or sorting for printing by copy can be selected. Further a double sided key is used for designating whether the original is double sided or printing is to be performed on only one side.

In in the first OS the double sided print function the FAX function the printer function and the other functions are disabled. Regarding scaling setting paper setting and sort setting only a part of functions thereof are enabled. On the other hand in the second OS the double sided print function the FAX function the printer function and the other functions are enabled. Further the scaling setting is enabled in the range of 25 to 800 . Regarding the paper setting auto paper setting and manual paper selection are enabled. Regarding the sort setting the group sort by page and the sort by copy are enabled.

Further it may be arranged such that the hyper visor launches a third OS not shown having other functions in place of the first OS so as to control the information processing apparatus until the second OS is launched. For example in a case where an application only for use of FAX transmission is installed in the third OS when the user turns on the power of the information processing apparatus the information processing apparatus can be started in a status where the FAX function is immediately available by the user s designation using for example the operation panel . Thus user friendliness can be improved. In this case software to emulate the facsimile unit is required.

In step S the user turns on the power of the information processing apparatus while depressing a predetermined key on the operation panel . The process proceeds to step S in which point the hyper visor selects an OS to be first launched in correspondence with the key depression status on the operation panel . Next in step S the hyper visor launches the selected OS as described above.

Further in step S in when the OS booted by the bootstrap loader is the second OS the time before the information processing apparatus becomes controllable by the second OS can be the same as that in conventional techniques. Further when there is no processing desired by the user upon power on this startup may be selected.

Further the CPU may have two execution cores. In this case the first OS and the second OS can be executed in parallel. In the flowchart of it is not necessary to wait for the completion of the startup of the first OS in step S before loading and launching of the second OS . That is the loading and launch of the second OS can be performed in parallel almost without influence on the startup time of the first OS . Since the time from the power on to the control of the information processing apparatus by the second OS can be reduced the user friendliness can be further improved.

The embodiment of the present invention has been described as above. Note that the present invention can be applied to an apparatus comprising a single device or to a system constituted by a plurality of devices.

Further the invention can be implemented by supplying a software program which implements the functions of the foregoing embodiment directly or indirectly to a system or apparatus reading the supplied program with a computer of the system or apparatus and then executing the program code. In this case so long as the system or apparatus has the functions of the program the mode of implementation need not rely upon a program.

Accordingly since the functional processing of the present invention are implemented by computer the program code installed in the computer also implements the present invention. In other words the claims of the present invention also cover a computer program for the purpose of implementing the functional processings of the present invention. In this case so long as the system or apparatus has the functions of the program the program may be executed in any form such as an object code a program executed by an interpreter or script data supplied to an operating system.

Example of storage media that can be used for supplying the program are a floppy registered trademark disk a hard disk an optical disk a magneto optical disk an MO a CD ROM a CD R a CD RW a magnetic tape a non volatile type memory card a ROM and a DVD a DVD ROM and a DVD R .

As for the method of supplying the program a client computer can be connected to a website on the Internet using a browser of the client computer and the computer program of the present invention or an automatically installable compressed file of the program can be downloaded to a recording medium such as a hard disk. Further the program of the present invention can be supplied by dividing the program code constituting the program into a plurality of files and downloading the files from different websites. In other words a WWW World Wide Web server that downloads to multiple users the program files that implement the functions of the present invention by computer is also covered by the claims of the present invention.

It is also possible to encrypt and store the program of the present invention on a storage medium such as a CD ROM distribute the storage medium to users allow users who meet certain requirements to download decryption key information from a website via the Internet and allow these users to decrypt the encrypted program by using the key information whereby the program is installed in the user computer.

Besides the cases where the aforementioned functions according to the embodiment are implemented by executing the read program by the computer an operating system or the like running on the computer may perform all or a part of the actual processing so that the functions of the foregoing embodiment can be implemented by this processing.

Furthermore after the program read from the storage medium is written to a function expansion board inserted into the computer or to a memory provided in a function expansion unit connected to the computer a CPU or the like mounted on the function expansion board or function expansion unit performs all or a part of the actual processing so that the functions of the foregoing embodiment can be implemented by this processing.

 1 As various devices incorporated in the information processing apparatus can be controlled by a first operating system the startup time of which is short user friendliness can be improved.

 2 When an operating system other than the first operating system is launched the startup time of the first being short the various devices incorporated in the information processing apparatus can be controlled by the started operating system other than the first.

 3 As the resources such as a memory incorporated in the information processing apparatus utilized by the first operating system the startup time of the first being short can be released upon startup of the other operating system resources can be efficiently utilized.

 4 As the number of devices controlled by the first operating system the startup time of which is short can be reduced a first application operating on the first operating system the startup time of which is short can be quickly activated.

The status of the device upon startup of a second operating system other than the first operating system the startup time of the first being short can be the same as that when the operating system is activated independently. Accordingly upon startup of the second operating system initialization of the device is unnecessary.

 6 A user operation and its result and the like performed in the operating system the startup time of which is short are stored in a memory device and the stored information can be referred to in the other operating system.

 7 When an application in the operating system the startup time of which is short is not utilized the operating system the startup time of which is short can be stopped.

While the present invention has been described with reference to exemplary embodiments it is to be understood that the invention is not limited to the disclosed exemplary embodiments. The scope of the following claims is to be accorded the broadest interpretation so as to encompass all such modifications and equivalent structures and functions.

This application claims the benefit of Japanese Patent Application No. 2007 263822 filed Oct. 9 2007 which is hereby incorporated by reference herein in its entirety.

