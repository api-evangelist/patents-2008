---

title: Efficient identity mapping with self-correction for cascaded server systems
abstract: A computer-implemented method, computer program product, and apparatus for identity mapping with self-correction for cascaded server systems is provided. A request to perform a business transaction is received. Responsive to performing a first server process of the business transaction, the servers necessary to perform the business transaction are identified, forming a set of identified servers. A user identity is retrieved for each server in the set of identified servers, wherein the user identity for each server in the set of identified servers is linked to a user registry of a server, forming a set of linked user identities. A data structure comprising the set of linked user identities is created. A user identity for a next server in the set of identified servers is retrieved from the data structure. In addition, the data structure is forwarded to a next server in the set of identified servers.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09104776&OS=09104776&RS=09104776
owner: International Business Machines Corporation
number: 09104776
owner_city: Armonk
owner_country: US
publication_date: 20080715
---
The present invention relates generally to data processing systems and more specifically to efficient identity mapping and self correction for cascaded server systems.

With a wide use of the Web Services technology and a trend of on line business operations getting more complex a business organization often needs to connect and integrate a number of internal special purposed servers to accomplish the full functionality of various business transactions that the business delivers to its customers partners or employees. In a typical situation all these servers form a cascaded client server relationship i.e. one server serving a specific function to its client acts as a client to another server. The term server encompasses a software application server process running on a server hardware. However these servers may have existed before the establishment of the client server cascading relationship and each server may have its own user registry that resides locally or on a remote server.

For a business transaction to proceed end to end along the client server chain a different user identity may need to be used on each server for authentication authorization auditing or other purposes. Therefore an identity mapping mechanism is usually employed to map a user identity recognized by one server to a different one recognized by another server.

In current identity mapping solutions the identity mapping information is defined and stored in a common registry like the Lightweight Directory Access Protocol LDAP server and an application programming interface API is provided to the server to map a user identity for one server to a user identity for another server. An application programming interface is any interface that enables one program to use facilities provided by another program whether by calling that program or by being called by the other program. An application programming interface may consist of classes function calls subroutine calls descriptive tags and so forth.

According to one embodiment of the present invention a request to perform a business transaction is received. Responsive to performing a first server process of the business transaction the servers necessary to perform the business transaction are identified forming a set of identified servers. A user identity is retrieved for each server in the set of identified servers wherein the user identity for each server in the set of identified servers is linked to a user registry of a server forming a set of linked user identities. A data structure comprising the set of linked user identities is created. A user identity for a next server in the set of identified servers is retrieved from the data structure. In addition the data structure is forwarded to a next server in the set of identified servers.

As will be appreciated by one skilled in the art the present invention may be embodied as a system method or computer program product. Accordingly the present invention may take the form of an entirely hardware embodiment an entirely software embodiment including firmware resident software micro code etc. or an embodiment combining software and hardware aspects that may all generally be referred to herein as a circuit module or system. Furthermore the present invention may take the form of a computer program product embodied in any tangible medium of expression having computer usable program code embodied in the medium.

Any combination of one or more computer usable or computer readable medium s may be utilized. The computer usable or computer readable medium may be for example but not limited to an electronic magnetic optical electromagnetic infrared or semiconductor system apparatus device or propagation medium. More specific examples a non exhaustive list of the computer readable medium would include the following an electrical connection having one or more wires a portable computer diskette a hard disk a random access memory RAM a read only memory ROM an erasable programmable read only memory EPROM or Flash memory an optical fiber a portable compact disc read only memory CDROM an optical storage device a transmission media such as those supporting the Internet or an intranet or a magnetic storage device. Note that the computer usable or computer readable medium could even be paper or another suitable medium upon which the program is printed as the program can be electronically captured via for instance optical scanning of the paper or other medium then compiled interpreted or otherwise processed in a suitable manner if necessary and then stored in a computer memory. In the context of this document a computer usable or computer readable medium may be any medium that can contain store communicate propagate or transport the program for use by or in connection with the instruction execution system apparatus or device. The computer usable medium may include a propagated data signal with the computer usable program code embodied therewith either in baseband or as part of a carrier wave. The computer usable program code may be transmitted using any appropriate medium including but not limited to wireless wireline optical fiber cable RF etc.

Computer program code for carrying out operations of the present invention may be written in any combination of one or more programming languages including an object oriented programming language such as Java Smalltalk C or the like and conventional procedural programming languages such as the C programming language or similar programming languages. The program code may execute entirely on the user s computer partly on the user s computer as a stand alone software package partly on the user s computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario the remote computer may be connected to the user s computer through any type of network including a local area network LAN or a wide area network WAN or the connection may be made to an external computer for example through the Internet using an Internet Service Provider .

The present invention is described below with reference to flowchart illustrations and or block diagrams of methods apparatus systems and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and or block diagrams and combinations of blocks in the flowchart illustrations and or block diagrams can be implemented by computer program instructions.

These computer program instructions may be provided to a processor of a general purpose computer special purpose computer or other programmable data processing apparatus to produce a machine such that the instructions which execute via the processor of the computer or other programmable data processing apparatus create means for implementing the functions acts specified in the flowchart and or block diagram block or blocks. These computer program instructions may also be stored in a computer readable medium that can direct a computer or other programmable data processing apparatus to function in a particular manner such that the instructions stored in the computer readable medium produce an article of manufacture including instruction means which implement the function act specified in the flowchart and or block diagram block or blocks.

The computer program instructions may also be loaded onto a computer or other programmable data processing apparatus to cause a series of operational steps to be performed on the computer or other programmable apparatus to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide processes for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

With reference now to the figures and in particular with reference to exemplary diagrams of data processing environments are provided in which illustrative embodiments may be implemented. It should be appreciated that are only exemplary and are not intended to assert or imply any limitation with regard to the environments in which different embodiments may be implemented. Many modifications to the depicted environments may be made.

In the depicted example server and server connect to network along with storage unit . In addition clients and connect to network . Clients and may be for example personal computers or network computers. In the depicted example server provides data such as boot files operating system images and applications to clients and . Clients and are clients to server in this example. Network data processing system may include additional servers clients and other devices not shown.

In the depicted example network data processing system is the Internet with network representing a worldwide collection of networks and gateways that use the Transmission Control Protocol Internet Protocol TCP IP suite of protocols to communicate with one another. At the heart of the Internet is a backbone of high speed data communication lines between major nodes or host computers consisting of thousands of commercial governmental educational and other computer systems that route data and messages. Of course network data processing system also may be implemented as a number of different types of networks such as for example an intranet a local area network LAN or a wide area network WAN . is intended as an example and not as an architectural limitation for the different illustrative embodiments.

With reference now to a block diagram of a data processing system is shown in which illustrative embodiments may be implemented. Data processing system is an example of a computer such as server or client in in which computer usable program code or instructions implementing the processes may be located for the illustrative embodiments. In this illustrative example data processing system includes communications fabric which provides communications between processor unit memory persistent storage communications unit input output I O unit and display .

Processor unit serves to execute instructions for software that may be loaded into memory . Processor unit may be a set of one or more processors or may be a multi processor core depending on the particular implementation. Further processor unit may be implemented using one or more heterogeneous processor systems in which a main processor is present with secondary processors on a single chip. As another illustrative example processor unit may be a symmetric multi processor system containing multiple processors of the same type.

Memory in these examples may be for example a random access memory or any other suitable volatile or non volatile storage device. Persistent storage may take various forms depending on the particular implementation. For example persistent storage may contain one or more components or devices. For example persistent storage may be a hard drive a flash memory a rewritable optical disk a rewritable magnetic tape or some combination of the above. The media used by persistent storage also may be removable. For example a removable hard drive may be used for persistent storage .

Communications unit in these examples provides for communications with other data processing systems or devices. In these examples communications unit is a network interface card. Communications unit may provide communications through the use of either or both physical and wireless communications links.

Input output unit allows for input and output of data with other devices that may be connected to data processing system . For example input output unit may provide a connection for user input through a keyboard and mouse. Further input output unit may send output to a printer. Display provides a mechanism to display information to a user.

Instructions for the operating system and applications or programs are located on persistent storage . These instructions may be loaded into memory for execution by processor unit . The processes of the different embodiments may be performed by processor unit using computer implemented instructions which may be located in a memory such as memory . These instructions are referred to as program code computer usable program code or computer readable program code that may be read and executed by a processor in processor unit . The program code in the different embodiments may be embodied on different physical or tangible computer readable media such as memory or persistent storage .

Program code is located in a functional form on computer readable media that is selectively removable and may be loaded onto or transferred to data processing system for execution by processor unit . Program code and computer readable media form computer program product in these examples. In one example computer readable media may be in a tangible form such as for example an optical or magnetic disc that is inserted or placed into a drive or other device that is part of persistent storage for transfer onto a storage device such as a hard drive that is part of persistent storage . In a tangible form computer readable media also may take the form of a persistent storage such as a hard drive a thumb drive or a flash memory that is connected to data processing system . The tangible form of computer readable media is also referred to as computer recordable storage media. In some instances computer recordable media may not be removable.

Alternatively program code may be transferred to data processing system from computer readable media through a communications link to communications unit and or through a connection to input output unit . The communications link and or the connection may be physical or wireless in the illustrative examples. The computer readable media also may take the form of non tangible media such as communications links or wireless transmissions containing the program code.

The different components illustrated for data processing system are not meant to provide architectural limitations to the manner in which different embodiments may be implemented. The different illustrative embodiments may be implemented in a data processing system including components in addition to or in place of those illustrated for data processing system . Other components shown in can be varied from the illustrative examples shown.

As one example a storage device in data processing system is any hardware apparatus that may store data. Memory persistent storage and computer readable media are examples of storage devices in a tangible form.

In another example a bus system may be used to implement communications fabric and may be comprised of one or more buses such as a system bus or an input output bus. Of course the bus system may be implemented using any suitable type of architecture that provides for a transfer of data between different components or devices attached to the bus system. Additionally a communications unit may include one or more devices used to transmit and receive data such as a modem or a network adapter. Further a memory may be for example memory or a cache such as found in an interface and memory controller hub that may be present in communications fabric .

A problem with current identity mapping solutions is that the identity mapping function is performed by each server locally and only when the identity mapping function is needed not in a global and proactive manner. Each server independently calls the identity mapping API that usually wraps an LDAP API call to the LDAP server to retrieve the mapped identity that can be used in the call for the next server as part of the business transaction. If there are n servers to achieve the entire business transaction and each server needs to make a separate identity mapping call there will be n 1 calls in total to the identity mapping server to retrieve all the mapped identities. Performing identity mapping by each server locally may have a significant adverse impact on the performance of the business transaction and the entire system network considering the enormous number of business transactions a business needs to perform daily.

Identity mapping is a security overhead associated with cascading multiple servers that do not share the same user registry. Identity mapping does not directly contribute value to accomplishing a business transaction. Therefore a new identity mapping approach that reduces the overhead is desirable.

Exemplary embodiments provide for efficient identity mapping and self correction for cascaded server systems. Exemplary embodiments significantly increase the efficiency of identity mapping by performing the identity mapping function for an entire business transaction in a global and more proactive manner. Exemplary embodiments retrieve and map all the user identities that are needed during a business transaction at the same time when the first server in the chain makes an identity mapping request. All the user identities are placed in a data structure referred to as an identity mapping information data block. This data structure is made available to each subsequent server in the chain of servers. Each mapped user identity is linked to the user registry used by the particular server that uses that particular user identity. Thus each server knows which mapped identity to use from the data structure.

The identity mapping information data block can be re used when the same user initiates the same transaction later. The data structure can be cached for later use in the local memory or file of the server that first makes an identity mapping call or in the identity mapping server. The identity mapping API may be modified to check the local cache to locate the data structure before connecting to the remote identity mapping server making it possible to reduce more overhead across multiple business transactions. The mapping API can tell whether the data structure exists locally.

Identity mapping server comprises user identity database and business transaction database . User identity database comprises the user identities for each user for each server in system . Further the user identities in user identity database are linked to the user registry used by the specific server that uses the specific user identity. Business transaction database comprises a set of transactions and the list of servers used in processing or carrying out a business transaction. This list of servers is then used to retrieve all the necessary user identities from user identity database of identity mapping server and build the data structure comprised of the user identities linked to the user registry for each server in the business transaction.

There are different possibilities about where the business transaction database can resides in the system architecture. Thus in the present exemplary embodiment the entry for the business transaction in business transaction database comprises a list of servers and . In an alternate exemplary embodiment business transaction database is located on a server other than identity mapping server . In another exemplary embodiment each server in a system such as servers and each comprise a business transaction database. The business transaction database on each server is comprised of only those transactions for which the server is the first server in the business transaction.

Servers and in system are configured to pass the data structure comprising the identity mapping information data block data structure between two adjacent servers in the chain of servers. Exemplary embodiments provide for two methods for achieving this goal.

The first option is to pass data structure along with the function call from one server to the next server in the chain. Many client server protocols used today allow protocol applications to carry extra application data with a protocol call. The identity mapping API will need to be modified to associate the data structure with the protocol call and retrieve the user identity data from the data structure assuming that the identity mapping module and the module handling the protocol can share an address space on the server.

The second option is to initiate an inter process communication between the two adjacent servers for passing on the data structure. This communication channel is maintained at the server level so multiple business transactions can use the same channel to pass on identity mapping information. This operation can be performed independently from the normal business function call but the data structure needs to be available when the identity mapping API is called.

User initiates a business transaction that begins with server . User may initiate the business transaction with server through use of the Internet intranet or some other internal communication. Server invokes identity mapping API which sends identity mapping request to identity mapping server . The list of servers used in the business transaction is obtained from business transaction database . The user identities for each server in the business transaction are then obtained from user identity database . This information is returned to server . Identity mapping API then builds data structure which is the identity mapping information data block comprising the user identities linked to the user registry for each server in the business transaction.

Before a server such as server makes a function call as part of the business transaction to the next server such as server the server first calls the identity mapping API to find out what user identity should be used in the function call. At that time the identity mapping API connects to the identity mapping server to construct the data structure that contains all the mapped identities to be used by subsequent servers involved in the business transaction. The identity mapping API also returns the user identity that the server server should be using for the function call to the next server server . The next server server then performs the portions of the business transaction for which the server is responsible. After server completes server s portion of the business transaction server calls the identity mapping API to retrieve the user identity that should be used for the function call to the next server server . Since the data structure has been passed on to server the identity mapping API can just retrieve the requested information from the data structure resident locally. Using this approach each identity mapping API will be able to provide the mapped identity to the mapping API s server based on the local data structure without the need to retrieve the identity from the remote identity mapping server. However whether a mapped identity is obtained from the local data structure or the remote identity mapping server is totally transparent to the identity mapping caller.

At any point during the business transaction if a server determines that that the user identity information stored in data structure is incorrect the server is able to perform self correction by invoking the identity mapping API to send an identity mapping request to identity mapping server to obtain new user identity information. Identity mapping requests and for servers and respectively represent the identity mapping requests issued for self correcting. The dotted lines indicate that these identity mapping requests are not normally part of performing the business transaction and are only issued in the case of an error occurring. Whenever an error correction request occurs it means all the user identities mapped earlier in the data structure from the current server to the last server may not be valid any more. When a server issues an identity mapping request for the purpose of self correction the request determines the servers that have not performed their portions of the business transaction starting with the issuing server and gathers the user identities for these remaining servers.

Responsive to a determination that the data structure does not exist a no output to step the identity mapping API issues an identity mapping request to an identity mapping server and retrieves all the user identities for the servers need to perform the business transaction from the identity mapping server step . The identity mapping API constructs a data structure comprised of the user identities linked to the user registry for each server in the business transaction step . The process then proceeds to step .

Responsive to a determination that the newly retrieved user identities match the user identities currently in the data structure a yes output to step the identity mapping API does not update the data structure and retrieves the user identity used by the current server for the function call to the next server from the data structure step . The retrieved user identity is returned to the process that requested the user identity step and the process ends. In the present example the data structure was not updated. This means that the user mapping information in the data structure is already correct. Thus the error was caused by another reason and needs to be handled by the server which is beyond the scope of the present disclosure.

The user identities for each server in the set of identified servers are retrieved wherein each user identity is linked to the user registry for the server the identity corresponds to forming a set of linked identities step . A data structure comprising the linked identities is created step and returned to the first server step . The identity mapping server retrieves the user identities creates the data structure and returns the data structure to the mapping API of the first server. The first server receives the user identity to be used in the function call to the next server in the set of identified servers step . The first server receives the user identity to be used in the function call to the next server in the business transaction from the identity mapping API. The first server passes the data structure to the next server in the set of identified servers step .

Then for each server in the set of identified servers the server retrieves the user identity for the current server from the data structure performs the server process that is part of the business transaction and passes the data structure to the next server in the set of identified servers until the business transaction is completed step and the process ends. If an error in the user identity for any server is detected by a server when performing the server operation that is part of the business transaction a self correction process such as the process detailed in is invoked to update the set of user identities. The data structure is updated if any new user identity information is found.

The flowchart and block diagrams in the figures illustrate the architecture functionality and operation of possible implementations of systems methods and computer program products according to various embodiments of the present invention. In this regard each block in the flowchart or block diagrams may represent a module segment or portion of code which comprises one or more executable instructions for implementing the specified logical function s . It should also be noted that in some alternative implementations the functions noted in the block may occur out of the order noted in the figures. For example two blocks shown in succession may in fact be executed substantially concurrently or the blocks may sometimes be executed in the reverse order depending upon the functionality involved. It will also be noted that each block of the block diagrams and or flowchart illustration and combinations of blocks in the block diagrams and or flowchart illustration can be implemented by special purpose hardware based systems that perform the specified functions or acts or combinations of special purpose hardware and computer instructions.

The terminology used herein is for the purpose of describing particular embodiments only and is not intended to be limiting of the invention. As used herein the singular forms a an and the are intended to include the plural forms as well unless the context clearly indicates otherwise. It will be further understood that the terms comprises and or comprising when used in this specification specify the presence of stated features integers steps operations elements and or components but do not preclude the presence or addition of one or more other features integers steps operations elements components and or groups thereof.

The corresponding structures materials acts and equivalents of all means or step plus function elements in the claims below are intended to include any structure material or act for performing the function in combination with other claimed elements as specifically claimed. The description of the present invention has been presented for purposes of illustration and description but is not intended to be exhaustive or limited to the invention in the form disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art without departing from the scope and spirit of the invention. The embodiment was chosen and described in order to best explain the principles of the invention and the practical application and to enable others of ordinary skill in the art to understand the invention for various embodiments with various modifications as are suited to the particular use contemplated.

The invention can take the form of an entirely hardware embodiment an entirely software embodiment or an embodiment containing both hardware and software elements. In a preferred embodiment the invention is implemented in software which includes but is not limited to firmware resident software microcode etc.

Furthermore the invention can take the form of a computer program product accessible from a computer usable or computer readable medium providing program code for use by or in connection with a computer or any instruction execution system. For the purposes of this description a computer usable or computer readable medium can be any tangible apparatus that can contain store communicate propagate or transport the program for use by or in connection with the instruction execution system apparatus or device.

The medium can be an electronic magnetic optical electromagnetic infrared or semiconductor system or apparatus or device or a propagation medium. Examples of a computer readable medium include a semiconductor or solid state memory magnetic tape a removable computer diskette a random access memory RAM a read only memory ROM a rigid magnetic disk and an optical disk. Current examples of optical disks include compact disk read only memory CD ROM compact disk read write CD R W and DVD.

A data processing system suitable for storing and or executing program code will include at least one processor coupled directly or indirectly to memory elements through a system bus. The memory elements can include local memory employed during actual execution of the program code bulk storage and cache memories which provide temporary storage of at least some program code in order to reduce the number of times code must be retrieved from bulk storage during execution.

Input output or I O devices including but not limited to keyboards displays pointing devices etc. can be coupled to the system either directly or through intervening I O controllers.

Network adapters may also be coupled to the system to enable the data processing system to become coupled to other data processing systems or remote printers or storage devices through intervening private or public networks. Modems cable modem and Ethernet cards are just a few of the currently available types of network adapters.

The description of the present invention has been presented for purposes of illustration and description and is not intended to be exhaustive or limited to the invention in the form disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art. The embodiment was chosen and described in order to best explain the principles of the invention the practical application and to enable others of ordinary skill in the art to understand the invention for various embodiments with various modifications as are suited to the particular use contemplated.

