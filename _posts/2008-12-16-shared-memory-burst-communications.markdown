---

title: Shared memory burst communications
abstract: A method and apparatus are provided for sharing multipath-accessible memory between a plurality of processors, the method including connecting the plurality of processors in read/write communication to a same shared memory region; connecting the plurality of processors in read communication to a same semaphore area; selectably connecting one of the plurality of processors in write communication to the same semaphore area; exchanging shared memory access command messages between two processors for negotiating access to the same shared memory region; and storing protected variables indicative of the currently negotiated access to the same shared memory region in the same semaphore area, wherein the shared memory region has a channel relative to each processor, each channel having at least one buffer disposed for transferring a plurality of data packets in a burst mode.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08230180&OS=08230180&RS=08230180
owner: Samsung Electronics Co., Ltd.
number: 08230180
owner_city: Suwon-Si, Gyeonggi-Do
owner_country: KR
publication_date: 20081216
---
This application claims foreign priority under 35 U.S.C. 119 to Korean Patent Application No. P2008 0054432 filed on Jun. 11 2008 in the Korean Intellectual Property Office the disclosure of which is incorporated by reference herein in its entirety and to Korean Patent Application No. P2008 0076129 filed on Aug. 4 2008 in the Korean Intellectual Property Office the disclosure of which is incorporated by reference herein in its entirety.

The present disclosure generally relates to semiconductor memory devices. More particularly the present disclosure relates to a method of driving a multipath accessible shared bank memory device for low level burst communications.

A semiconductor memory device having more than one access port may be called a multiport memory. In particular a memory device having two access ports may be called a dual port memory. A conventional dual port memory is known in the art. For example a conventional dual port memory may be used as an image processing video memory. The conventional dual port memory has one random access memory RAM port accessible in a random sequence and one serial access memory SAM port accessible only in a serial sequence and is commonly known as dual port RAM DPRAM .

Another type of multiport memory includes an array of memory cells such as dynamic random access memory DRAM cells which can be accessed randomly through two or more ports. This type of device is called a multipath accessible memory. A multipath accessible memory is distinguishable from a conventional multiport memory in which only one of the two or more ports supported random access.

These and other issues are addressed by a method and apparatus for driving a multipath accessible shared bank memory device for low level burst communications. Exemplary embodiments are provided.

An exemplary embodiment provides a multipath accessible memory device comprising a plurality of input output ports each disposed for connection to one of a plurality of processors a shared memory region connected in read write communication to each of the plurality of ports a plurality of mailboxes each connected in read communication to one of the plurality of ports for receiving shared memory access command messages from other processors a semaphore area connected in read communication to each of the plurality of ports and connected in selectable write communication to one of the plurality of ports for storing protected variables indicative of the currently negotiated access to the shared memory region wherein the shared memory region has at least one channel relative to each processor the at least one channel having at least one buffer disposed for transferring a plurality of data packets in a burst mode.

Another exemplary embodiment provides a method of sharing multipath accessible memory between a plurality of processors the method comprising connecting the plurality of processors in read write communication to a same shared memory region connecting the plurality of processors in read communication to a same semaphore area selectably connecting one of the plurality of processors in write communication to the same semaphore area exchanging shared memory access command messages between two processors for negotiating access to the same shared memory region and storing protected variables indicative of the currently negotiated access to the same shared memory region in the same semaphore area wherein the shared memory region has a channel relative to each processor each channel having at least one buffer disposed for transferring a plurality of data packets in a burst mode.

Yet another exemplary embodiment provides a mobile communications device comprising a plurality of processors a plurality of input output ports each disposed for connection to one of the plurality of processors a shared memory region connected in read write communication to each of the plurality of ports a plurality of mailboxes each connected in read communication to one of the plurality of ports for receiving shared memory access command messages from other processors a semaphore area connected in read communication to each of the plurality of ports and connected in selectable write communication to one of the plurality of ports for storing protected variables indicative of the currently negotiated access to the shared memory region wherein the shared memory region has at least one channel relative to each processor the at least one channel having at least one buffer disposed for transferring a plurality of data packets in a burst mode.

A further exemplary embodiment provides a mobile communications apparatus comprising a first processor at least one second processor and a multipath accessible memory configured to transfer a plurality of data packets between the first and at least one second processors wherein the multipath accessible memory is configured to be selectively accessed by the first or at least one second processors and to store command and data transit information for transferring the plurality of data packets between the processors.

The present disclosure will be further understood from the following description of exemplary embodiments which is to be read in connection with the accompanying drawings.

The present disclosure provides a method of driving a multipath accessible shared bank memory device for low level burst communications. Exemplary embodiments will be described. A multipath accessible shared bank memory device is disclosed in co pending U.S. patent application Ser. No. 11 829 859 entitled MULTIPATH ACCESSIBLE SEMICONDUCTOR MEMORY DEVICE WITH HOST INTERFACE BETWEEN PROCESSORS filed Jul. 27 2007 which is incorporated herein by reference in its entirety. A multipath accessible shared bank memory device may comprise a OneDRAM for example which is a fusion DRAM manufactured by Samsung Electronics Co. Ltd.

An exemplary multipath accessible shared bank memory device includes at least one mailbox. The multipath accessible shared bank memory device with mailbox may be disposed between a modem and a processor executing an application process AP to facilitate low level burst communications. A device driver for the multipath accessible shared bank memory device supports communications between the processor and the modem which may be further connected to another modem or external communications device. The device driver supports a bi directional burst mode with burst control between the processor and the modem.

Alternatively the multipath accessible shared bank memory device may be disposed between two or more processors in a multiprocessor system to facilitate smooth access to at least one shared bank of the memory device by the multiple processors. A device driver for the multipath accessible memory device supports inter processor communications. The device driver supports a multi directional burst mode with burst control between the multiple processors.

As shown in a multiprocessor system is generally indicated by the reference numeral . The system includes a first processor in signal communication with an inter processor communications IPC device . The IPC device comprises a multipath accessible shared bank memory device. The system further includes a second processor in signal communication with the IPC device . The IPC device has a first outgoing interrupt port and a first bi directional data port each in signal communication with the first processor . In addition the IPC device has a second outgoing interrupt port and a bi directional data port each in signal communication with the second processor .

Turning to a computer readable memory device is indicated generally by the reference numeral . The device includes an application module in signal communication with a kernel . The kernel includes an inter processor communications IPC driver in signal communication with the application module and a device driver . The drivers and and the application are executable by the processor of .

Turning now to another computer readable memory device is indicated generally by the reference numeral . The device includes a first multi threaded application module and a second multi threaded application module each in signal communication with a kernel . The kernel includes an inter processor communications IPC driver in signal communication with the application modules and and further in signal communication with a device driver . The drivers and and the applications and are executable by the processor of .

As shown in an application programming interface API is indicated generally by the reference numeral . The API comprises the device drivers and of respectively and a device API .

Turning to application programming interface API functions are generally indicated by the reference numeral . The API functions include command functions data functions and miscellaneous functions. The command functions include a WriteCommand function to write a command or message to a mailbox and a ReadCommand function to read a command or message from a mailbox. The data functions include a WriteData function to write data to a shared bank and a ReadData function to read data from a shared bank. The miscellaneous functions include an Init function to initialize a device driver a CheckOwnership function to check the current ownership of a shared bank a GetLastError function to retrieve the last error code and a GetChaAddr to retrieve an address of a channel. These functions are each supported by the device drivers and of respectively.

Turning now to a driver with application programming interface API is generally indicated by the reference numeral . The driver comprises the IPC driver of . Here the IPC driver includes an IPC API a plurality N of IPC channels in signal communication with the IPC API and an IPC thread in signal communication with the IPC channels. Thus the IPC API is supported by the IPC drivers and of respectively. While one IPC channel may be sufficient for exemplary applications multiple channels may be provided for the convenience of user applications since they may help to keep data in context Thus the data packets include a channel number in embodiments having more than one channel.

As shown in application programming interface API functions are generally indicated by the reference numeral . These API functions are supported by the inter processor communications I PC drivers and of respectively. The IPC API commands include data functions and miscellaneous functions. The data functions include an IPCSend function to send a data packet and an IPCReceive function to receive a data packet. The miscellaneous functions include an IPCOpen function to open an IPC channel handle an IPCClose function to close an IPC channel handle and an IPCIOCntl function to control settings of the IPC driver. For example when an IPC channel status is closed no more reads or writes are permitted.

Turning to an exemplary inter processor communications IPC channel is indicated generally by the reference numeral . The IPC channel is supported by the IPC driver of and and comprises one of the plurality of channels of . The IPC channel includes a transmit side and a receive side . The transmit side includes a plurality M of transmit packets . . . . Each transmit packet includes a transmit packet pointer TX PTR and a transmit packet length TX LEN. The receive side includes a plurality N of receive packets . . . . Each receive packet includes a receive packet pointer RX PTR and a receive packet length RX LEN.

Turning now to an inter processor communications IPC device of is indicated generally in greater detail by the reference numeral . The IPC device includes a plurality of ports in signal communication with at least one bank and a semaphore mailbox area . Here a first bi directional data port and a second bi directional data port are both in bi directional signal communication with at least one dual port bank . Optional banks and are in bi directional signal communication with one or more of the ports. In this example the bank is connected to the first port while the banks and are connected to the second port . The banks and may be implemented in dynamic random access memory DRAM cells for example.

The semaphore mailbox area is in bi directional signal communication with each of the ports and includes a semaphore area a MailboxAtoB area for messages from a processor connected to the first port to a processor connected to the second port and a MailboxBtoA area for messages from the processor connected to the second port to the processor connected to the first port. The MailboxAtoB area includes a first interrupt INT from the processor connected to the first port to the processor connected to the second port and the MailboxBtoA area includes a second interrupt INT from the processor connected to the second port to the processor connected to the first port. The semaphore area defines the current ownership of the shared bank. For embodiments with two ports the semaphore may be just one bit for example. Only the processor that is the current owner can write or change the semaphore.

For ease of explanation the IPC device includes just one dual port bank one semaphore bit two RAM ports and and two mailboxes and but alternate embodiments having a greater number of RAM ports dual port banks semaphore bits and or mailboxes are contemplated. For example an alternate embodiment with N ports may have up to N N 1 2 dual port banks up to N N 1 2 semaphore bits and up to N N 1 mailboxes. Thus a fully versatile three port embodiment might have three dual port port banks three semaphore bits and six mailboxes while a fully versatile four port embodiment might have six dual port banks six semaphore bits and twelve mailboxes.

On the other hand reduced versatility embodiments where all processors need not communicate in burst mode with every other processor are also contemplated. For example an eight port embodiment for which four pairs of processors need to communicate within the pair but not with processors of the other three pairs might include four dual port banks four semaphore bits the four RAM ports and eight mailboxes.

As shown in a shared storage region or bank is indicated generally by the reference numeral . The bank or shared storage region may be any dual port bank such as the dual port bank of . The bank includes a plurality N of channels CH CHN each channel including a plurality L of transmit buffers TX BUF and a plurality M of receive buffers RX BUF.

Turning to another shared memory or bank is indicated generally by the reference numeral . The bank supports a modem embodiment of the present disclosure by providing one IPC channel for a voice mail service VMS one IPC channel for a modem database in non volatile random access memory NVRAM four IPC channels for network data service packets NDIS and three IPC channels for modem commands AT . Here each channel has ten transmit buffers and ten receive buffers and uses a memory area of 2 KB 4 B 10 10 bytes In alternate embodiments the number of transmit and receive buffers is user selectable.

Turning now to a shared bank channel which may hold the actual data corresponding to the pointers of the IPC channel of is indicated generally by the reference numeral . User or application data is stored in buffers of the channel of a shared bank such as the bank of . The buffers may include a plurality L of transmit buffers TX BUF and a plurality M of receive buffers RX BUF. It shall be understood that the designation of transmit and receive buffers for the shared buffers are different with respect to each of the processors. That is a shared buffer known as a transmit buffer to one processor may be known as a receive buffer to the other processor.

Each buffer includes a PCK SZ packet size field which may be four bytes for example and a PCK DATA packet data field which may have a maximum size of 2 Kbytes for example. A table further describes the user data buffers for this exemplary embodiment. According to the table the PCK SZ field is four bytes long and contains the size of the data packet and the PCK DATA field is up to 2 Kbytes long and contains the data to be transferred.

As shown in message data for a mailbox of is indicated generally by the reference numeral . Here the message data may be formatted into four fields . The fields may include an eight bit command field an eight bit channel number field an eight bit packet count field and an eight bit reserved field. For example the message data may be formatted into at least three fields including a command CMD region a channel index CH IDX region and a packet number storage region PCK CNT .

Command values are further described. The eight bit CMD field may hold any value between 0x01 and 0xFF. Here the command value 0x01 is an ownership request command the command value 0x02 is an ownership release command the command value 0x03 is a transmit suspension command the command value 0x04 is a transmit resumption command the command value 0x05 is a transmit completion command the command value 0x06 is an IPC channel status command the command value 0x07 is a transmit completion and ownership request command the command value 0xF0 is a reset request command and the command value 0xFF is an error command.

Turning to a method of communication between two processors through a mailbox is indicated generally by the reference numeral . The method includes a start block S that passes control to function block S where a first processor writes a command to a first mailbox. The first processor passes control to a function block S where an IPC device generates a first interrupt signal. The IPC device passes control to a function block S where a second processor receives a first interrupt signal. The second processor in turn passes control to a function block S where it reads a command from its mailbox and then passes control to an end block S.

Turning now to a method to change ownership of the shared region from a second processor to a first processor is indicated generally by the reference numeral . The method includes a start block S that passes control to function block S where a first processor checks ownership by accessing a semaphore. The block S passes control to a decision block S which determines from the semaphore whether the first processor has ownership of the shared bank. If so control is passed to an end block S. If not control is passed to a function block S where the first processor writes an ownership request to the first mailbox and passes control to a function block S.

At function block S an IPC device generates a first interrupt signal and passes control to a function block S. At S a second processor receives the first interrupt signal and passes control to a function block S. At block S the second processor reads the ownership request command from the first mailbox and passes control to a function block S. At block S the second processor writes an ownership release command to a second mailbox and passes control to a function block S.

At block S the IPC device generates a second interrupt signal and passes control to a function block S. At block S in turn the first processor receives the ownership release command and passes control to a function block S. At the block S the first processor reads the ownership release command from the second mailbox and passes control to an end block S.

As shown in a method to exchange data through a shared region is indicated generally by the reference numeral . The method includes a start block S that passes control to function block S where a first processor acquires ownership of a shared bank and passes control to a function block S. At block S the first processor writes a data packet to the shared bank and passes control to a function block S. At block S the first processor writes a transmit completion command and information about the stored data packet to a first mailbox and passes control to a function block S.

At block S in turn an IPC device generates a first interrupt signal and passes control to a function block S. At block S a second processor receives the first interrupt signal and passes control to a function block S. At block S the second processor reads the transmit completion and information about the stored data packet from the first mailbox and passes control to a function block S. At block S the second processor reads a data packet from the shared bank based on the information about the stored data packet and passes control to an end block S.

Turning to a processor and IPC device interconnected to minimize memory copy operations in the processor are generally indicated by the reference numeral . The processor may be the first or second processor or of for example and the IPC device may be the IPC device of .

The processor includes the application module the IPC driver and the device driver all of . Here the application module includes a transmit buffer and a receive buffer pointer . The IPC driver includes a transmit buffer pointer and a receive buffer . The IPC device includes a transmit buffer and a receive buffer .

The application module is disposed to send a call by pointer for its transmit buffer to the transmit buffer pointer of the IPC driver . The device driver is disposed to perform a copy of the application module transmit buffer indicated by the IPC driver transmit buffer pointer to the IPC device transmit buffer .

The device driver is disposed to perform a copy from the receive buffer of the IPC device to the receive buffer of the IPC driver . The IPC driver is disposed to return a pointer for its receive buffer to the receive buffer pointer of the application module .

Turning now to a method for ownership acquisition data transfer and data suspension is indicated generally by the reference numeral . At a step S a first processor of has an active device driver and an active IPC driver both of . The IPC driver has an IPC transmit channel of presently containing packets PCK PCK and PCK. An IPC device of is disposed between the first processor and a second processor of which has an active device driver and an active IPC driver both of . The IPC driver has an IPC receive channel of presently containing packets PCK and PCK.

At a subsequent step S ownership acquisition is performed. Here the first processor uses the IPC driver to send an ownership request command through the device driver which writes to the IPC device of the ownership request command value 0x01 as set forth in table of to the highest order byte of the mailbox of according to the format of where the two lower order bytes are not needed for this particular command.

In the second processor the IPC driver reads the ownership request command through the device driver which copies the value 0x01 from the mailbox . The IPC driver then writes to the IPC device an ownership release command through the device driver which writes the ownership release value of 0x02 to the second mailbox of . Back in the first processor the IPC driver reads the ownership release command through the device driver which copies the value 0x02 from the mailbox .

At a subsequent step S data transfer is performed. Here the first processor uses its IPC driver to write data packets PCK PCK and PCK through its device driver to the data packet buffers of a first processor transmit side channel of a shared bank of the IPC device . The first processor then writes a transmit completion command with arguments to the mailbox where the value of the transmit completion command is 0x05 the value of the channel index is 0x01 and the value of the packet count is 0x03.

In the second processor the IPC driver reads the transmit completion command through the device driver which copies the transmit completion command value 0x05 the channel index value 0x01 and the packet count value 0x03 from the mailbox . Next the IPC driver reads the data packets PCK PCK and PCK through the device driver from the buffers of the shared bank and appends them to the receive side IPC channel . Here the receive side IPC channel has a total of five packets which exceeds its suspend threshold of four packets in this particular example.

Thus at a step S transmission suspension is performed. Here the second processor writes a transmission suspension command having a value of 0x03 through the device driver to the second mailbox of the IPC device . The first processor uses its IPC driver to read the transmission suspension command through its device driver from the mailbox . Therefore the first processor does not yet try to send two more packets PCK and PCK that are present in its IPC channel .

As shown in an IPC channel is indicated generally by the reference numeral The IPC channel may be any pointer type IPC channel of for example as used by the IPC drivers or of or respectively. The channel includes a transmit side channel and a receive side channel both with respect to one of the processors. The transmit side channel includes N transmit side buffers . . . . Here unlike the IPC channel of the receive side channel has a different number M of receive side buffers . . . but alternate embodiments may have any number of buffers where the number of receive side buffers need not be the same as the number of transmit side buffers. Each packet includes a packet pointer PTR and a packet length LEN.

Turning to a method for transmission resumption and data transfer is indicated generally by the reference numeral . At a step S the first processor of has an active device driver and an active IPC driver both of . The first processors IPC driver has an IPC channel that presently contains packets PCK and PCK. An IPC device of is disposed between the first processor and the second processor of which has an active device driver and an active IPC driver both of The IPC driver has an IPC channel of presently containing two packets PCK and PCK where two packets is the resumption threshold. Here the second processor uses its IPC driver to write a transmit resumption command through its device driver to the IPC device mailbox of where the transmit resumption command has a value of 0x04 in accordance with table of . The first processor in turn uses its IPC driver to read the transmit resumption command through its device driver from the mailbox on the IPC device.

At a subsequent step S the first processor s IPC driver empties its IPC channel by writing data packets PCK and PCK through its device driver to the first processor s transmit side channel of a shared bank of the IPC device . The first processor then writes a transmit completion command with arguments to the mailbox where the value of the transmit completion command is 0x05 the value of the channel index is 0x01 and the value of the packet count is 0x02.

In the second processor the IPC driver reads the transmit completion command through the device driver which copies the transmit completion command value 0x05 the channel index value 0x01 and the packet count value 0x02 from the mailbox . Next the IPC driver reads the data packets PCK and PCK through the device driver from the second processor s receive side channel of the shared bank and appends them to the receive side IPC channel . Here the receive side IPC channel has a total of four packets which does not yet exceed its suspend threshold of four packets in this particular example.

Turning now to a method for data transfer in single packet mode is indicated generally by the reference numeral . At a step S the first processor has a transmit side IPC channel containing packets PCK PCK and PCK. The second processor has a receive side IPC channel that is empty.

At a step S the first processor writes an ownership request command of 0x01 to the first mailbox on the IPC device. The second processor in turn reads the ownership request command from the first mailbox and writes an ownership release command of 0x02 to the second mailbox . The first processor reads the ownership release command from the mailbox .

At a step S the first processor writes one data packet PCK to the first processor s transmit side channel of a shared bank of the IPC device and then writes a transmit complete command of 0x05 with arguments for channel index of 0x01 and packet count of 0x01 to the mailbox . The second processor reads the transmit completion command with arguments from the mailbox and then reads the data packet PCK from the second processor s receive side channel to the second processor s receive side IPC channel . Thus the first processor has a transmit side IPC channel containing packets PCK and PCK while the second processor has a receive side IPC channel containing packet PCK.

At a step S the first processor writes an ownership request command of 0x01 to the first mailbox on the IPC device. The second processor in turn reads the ownership request command from the first mailbox and writes an ownership release command of 0x02 to the second mailbox . The first processor reads the ownership release command from the mailbox .

At a step S the first processor writes one data packet PCK to the first processors transmit side channel of a shared bank of the IPC device and then writes a transmit complete command of 0x05 with arguments for channel index of 0x01 and packet count of 0x01 to the mailbox . The second processor reads the transmit completion command with arguments from the mailbox and then reads the data packet PCK from the second processor s receive side channel to the second processors receive side IPC channel . Thus the first processor has a transmit side IPC channel containing packet PCK while the second processor has a receive side IPC channel containing packets PCK and PCK.

At a step S the first processor writes an ownership request command of 0x01 to the first mailbox on the IPC device. The second processor in turn reads the ownership request command from the first mailbox and writes an ownership release command of 0x02 to the second mailbox . The first processor reads the ownership release command from the mailbox .

At a step S the first processor writes one data packet PCK to the first processor s transmit side channel of a shared bank of the IPC device and then writes a transmit complete command of 0x05 with arguments for channel index of 0x01 and packet count of 0x01 to the mailbox . The second processor reads the transmit completion command with arguments from the mailbox and then reads the data packet PCK from the second processors receive side channel to the second processors receive side IPC channel . Thus the first processor has a transmit side IPC channel that is empty while the second processor has a receive side IPC channel containing packets PCK PCK and PCK.

Turning now to a method of transferring data in a burst mode is indicated generally by the reference numeral . At a step S the first processor has a transmit side IPC channel containing packets PCK PCK and PCK. The second processor has a receive side IPC channel that is empty.

At a step S the first processor writes an ownership request command of 0x01 to the first mailbox on the IPC device. The second processor in turn reads the ownership request command from the first mailbox and writes an ownership release command of 0x02 to the second mailbox . The first processor reads the ownership release command from the mailbox .

At a step S the first processor writes data packet PCK PCK and PCK to the first processor s transmit side channel of a shared bank of the IPC device and then writes a transmit complete command of 0x05 with arguments for channel index of 0x01 and packet count of 0x01 to the mailbox . The second processor reads the transmit completion command with arguments from the mailbox and then reads the data packets PCK PCK and PCK from the second processor s receive side channel to the second processor s receive side IPC channel . Thus the first processor has a transmit side IPC channel that is empty while the second processor has a receive side IPC channel containing packets PCK PCK and PCK.

As shown in a comparative plot of single packet mode versus burst modes with different burst lengths is indicated generally by the reference numeral . Here burst lengths of 10 packets and of 20 packets are compared to single packet mode. The burst length may be implemented by setting the suspend threshold of the receiving processor s IPC driver to the desired length. Alternatively the burst length may be implemented by setting the number of buffers in the transmit side IPC channel to the desired length. The plot puts transfer speed in MBPS on the vertical axis against packet size in bytes on the horizontal axis. The plot includes a first curve for single packet mode a second curve for a burst mode of length and a third curve for a burst mode of length . As indicated the burst mode of length is about 10 times faster than single packet mode.

Turning now to another embodiment multiprocessor system is generally indicated by the reference numeral . The system includes a an external communications link in signal communication with a first processor or modem the modem in signal communication with an inter processor communications IPC device . The IPC device comprises a multipath accessible shared bank memory device. The system further includes a second processor comprising an application and or media in signal communication with the IPC device .

The system includes a flash memory in signal communication with the application processor and a system bus in signal communication with the application processor . The system further includes an LCD display an audio speaker and an input device each in signal communication with the system bus . In an alternate embodiment the LCD display and the input device may be combined in a touch screen device.

As shown in device specifications for an exemplary IPC device of are indicated generally by the reference numeral . The device includes 64 MB of DRAM cells organized into four banks including one bank dedicated to a first port two banks dedicated to a second port and one shared bank. The access control is per bank the I O width is not necessarily the same for each port and the ports operate independently of each other. Such a device may comprise a OneDRAM for example.

Turning to a driver comparison is indicated generally by the reference numeral . A universal asynchronous receiver transmitter UART driver with multiplexer MUX includes a serial channel application in signal communication with a serial MUX driver The MUX driver is in signal communication with a UART driver which in turn is in signal communication with a UART . The speed of the UART driver with MUX is on the order of about 1 Mbps.

A multipath accessible shared bank memory device may be embodied in a OneDRAM device. A OneDRAM with MUX includes a serial channel application in signal communication with a serial MUX driver . The MUX driver is in signal communication with a OneDRAM driver which in turn is in signal communication with a OneDRAM . The speed of the OneDRAM with MUX is on the order of about 10 Mbps.

IPC and device drivers may be adapted to a OneDRAM multipath accessible shared bank memory device. A OneDRAM with IPC driver includes a serial channel application in signal communication with a OneDRAM IPC driver such as the IPC driver of . The OneDRAM IPC driver is in signal communication with a OneDRAM device driver such as device driver of which in turn is in signal communication with a OneDRAM . The speed of the OneDRAM with IPC driver is on the order of about 100 Mbps.

Thus the OneDRAM with IPC driver may more fully utilize a high speed IPC between a modem such as the modem of and an AP processor such as the processor of . Serial devices include UART SPI USB and the like. Shared memory devices include DPRAM OneDRAM and the like.

While a MUX driver may be adequate for a serial device it is not fast enough for a multipath accessible shared bank memory device such as a OneDRAM for example. Here a OneDRAM IPC Driver with multiple channels and high speed capabilities is significantly more efficient.

Turning now to a memory copy method comparison for a MUX driver versus a OneDRAM IPC driver is indicated generally by the reference numeral . A memory copy method uses a OneDRAM IPC driver to communicate between a an IPC application on a processor and an IPC device here a OneDRAM . The processor may be the first or second processor or of for example and the IPC device may be the IPC device of .

Here an IPC application module communicates with a OneDRAM IPC driver both of . The application module includes a transmit buffer and a receive buffer pointer . The IPC driver includes a transmit buffer pointer and a receive buffer . The IPC device includes a transmit buffer and a receive buffer .

The application module is disposed to send a call by pointer for its transmit buffer to the transmit buffer pointer of the IPC driver . A copy of the application module transmit buffer indicated by the IPC driver transmit buffer pointer is performed to the IPC device transmit buffer .

On the receive side copy is performed from the receive buffer of the IPC device to the receive buffer of the IPC driver . The IPC driver is disposed to return a pointer for its receive buffer to the receive buffer pointer of the application module .

In contrast a memory copy method uses a MUX driver to communicate between a an IPC application on a processor and a physical device. Here an IPC application module communicates with a MUX driver . The application module includes a transmit buffer and a receive buffer pointer . The MUX driver includes a transmit buffer and a receive buffer . A physical device includes a transmit buffer and a receive buffer .

The application module is disposed to perform an actual copy from its transmit buffer to the transmit buffer pointer of the MUX driver . Another copy of the MUX driver transmit buffer is performed to the physical device transmit buffer .

On the receive side copy is performed from the receive buffer of the physical device to the receive buffer of the MUX driver . The MUX driver then performs another actual copy from its receive buffer to the receive buffer pointer of the application module .

Thus while the data is actually copied only two times in the method using the IPC driver the data is actually copied four times in the method using the MUX driver . Therefore the method using the IPC driver is more efficient and should be applied to minimize the number of memory copy operations.

As shown in a comparative plot of performance test results for single mode versus burst mode is indicated generally by the reference numeral . A table sets forth the test environment in which a modem has an ARM clock of 282 MHz and a memory clock of 69 MHz and an application processor AP has an ARM clock of 533 MHz and a memory clock of 133 MHz.

The plot puts transfer speed in Mbps on the vertical axis against decreasing packet size in bytes on the horizontal axis. The plot includes a first curve for single packet mode a second curve for a burst mode having a length of 10 packets and a third curve for a burst mode having a length of 20 packets.

A table sets forth the test results. As indicated in the table a packet size of 2048 bytes produced speeds of 3.0 Mbps 36.70 Mbps and 26.67 Mbps for single burst of length and burst of length modes respectively. A packet size of 1500 bytes produced speeds of 2.3 Mbps 28.67 Mbps and 21.74 Mbps for the single burst of length and burst of length modes respectively. A packet size of 1024 bytes produced speeds of 1.4 Mbps 19.95 Mbps and 13.72 Mbps for the single burst of length and burst of length modes respectively. Thus the burst mode of length is greater than 10 times faster than single packet mode for all of the tested packet sizes.

Turning to comparative methods for single mode versus burst mode are indicated generally by the reference numeral . Here a single packet mode method is compared to a burst mode method .

In the single packet mode method a modem has a transmit side IPC channel or queue containing three packets. An application processor has a receive side IPC channel or queue that is empty. The modem writes an ownership request command to the first mailbox on the IPC device and the IPC device sends a mailbox interrupt to the application processor. The application processor in turn reads the ownership request command from the first mailbox and writes an ownership release command to the second mailbox. The IPC device sends a mailbox interrupt to the modem. The modem reads the ownership release command from the second mailbox.

Next the modem writes one data packet to a channel of a shared bank on the IPC device and then writes a transmit complete command to the first mailbox. The IPC device sends a mailbox interrupt to the application processor. The application processor reads the transmit complete command from the first mailbox and then reads the data packet from the channel on the IPC device to the second processor s receive side IPC channel or queue . Thus the modem now has a transmit side IPC channel containing two packets while the application processor has a receive side IPC channel or queue containing the transferred packet.

To transfer the second packet the modem writes an ownership request command to the first mailbox on the IPC device and the IPC device sends a mailbox interrupt to the application processor. The application processor in turn reads the ownership request command from the first mailbox and writes an ownership release command to the second mailbox. The IPC device sends a mailbox interrupt to the modem. The modem reads the ownership release command from the second mailbox.

Next the modem writes one more data packet to the channel of the shared bank on the IPC device and then writes a transmit complete command to the first mailbox. The IPC device sends a mailbox interrupt to the application processor. The application processor reads the transmit complete command from the first mailbox and then reads the data packet from the channel on the IPC device to the second processor s receive side IPC channel or queue . Thus the modem now has a transmit side IPC channel with one packet remaining while the application processor has a receive side IPC channel or queue containing a total of two transferred packets.

To transfer the third packet the modem writes another ownership request command to the first mailbox on the IPC device and the IPC device sends a mailbox interrupt to the application processor. The application processor in turn reads the ownership request command from the first mailbox and writes an ownership release command to the second mailbox. The IPC device sends a mailbox interrupt to the modem. The modem reads the ownership release command from the second mailbox.

Next the modem writes the third and final data packet to a channel of a shared bank on the IPC device and then writes a transmit complete command to the first mailbox. The IPC device sends a mailbox interrupt to the application processor. The application processor reads the transmit complete command from the first mailbox and then reads the data packet from the channel on the IPC device to the second processor s receive side IPC channel or queue Thus the modem has now emptied its transmit side IPC channel while the application processor has a receive side IPC channel or queue containing all three transferred packets.

In the burst mode method the modem begins with a transmit side IPC channel or queue containing three packets and the application processor begins with a receive side IPC channel or queue that is empty. These are the same starting conditions as for the single mode .

The modem writes an ownership request command to the first mailbox on the IPC device and the IPC device sends a mailbox interrupt to the application processor. The application processor in turn reads the ownership request command from the first mailbox and writes an ownership release command to the second mailbox. The IPC device sends a mailbox interrupt to the modem. The modem reads the ownership release command from the second mailbox.

Next the modem performs a burst write of all three packets to a channel of a shared bank on the IPC device and then writes a transmit complete command to the first mailbox. The IPC device sends a mailbox interrupt to the application processor. The application processor reads the transmit complete command from the first mailbox and then reads all three data packets from the channel on the IPC device to the second processors receive side IPC channel or queue . Thus the modem has now emptied its transmit side IPC channel while the application processor has a receive side IPC channel or queue containing all three packets transferred in the burst mode.

Thus only one data packet can be transferred at a time in the single mode while multiple data packets can be transferred at once in the burst mode . Further the single mode generates more interrupts than the burst mode which creates additional overhead for the processor. In addition the use of the burst mode can save the time spent on additional ownership requests in single mode.

Turning now to a system comparison of a MUX driver versus an IPC driver is indicated generally by the reference numeral . A MUX driver system includes a serial channel application for receiving data from a MUX driver . The MUX driver is in signal communication with a UART driver which in turn is in signal communication with a UART . The MUX driver includes a plurality of MUX units each in signal communication with a plurality of MUX channels . The MUX channels in turn are all in signal communication with a MUX process which is in signal communication with MUX driver MUXD control unit .

An IPC driver system includes a serial channel application for receiving data from an IPC driver both introduced in . The IPC driver is in signal communication with a device driver which in turn is in signal communication with an IPC device . Here the IPC device may be an exemplary OneDRAM for example. The IPC driver includes an IPC interface API in signal communication with a plurality of IPC channels all as introduced in . The plurality of channels in turn are all in signal communication with an IPC thread .

The IPC driver supports multiple channels and its IPC interface API is used in the upper layer to control the IPC channels. As introduced in the table of functions supported by the IPC interface API include ipcOpen ipcClose ipcSend ipcRecv ipcloctl and the like. Thus each IPC channel is configurable and has a TX RX message queue for buffering data. The IPC channel handles the data as packets. Just one IPC thread manages all of the IPC channels. The IPC thread operations include sending messages receiving messages and interpreting IPC control commands. The OneDRAM device driver provides interface functions to manage and control a OneDRAM IPC device .

As shown in a method of flow control using receive buffer thresholds is indicated generally by the reference numeral . In flow control for a send suspend operation a receive RX queue contains a number of data packets that exceeds its suspend threshold . Thus in a function block the IPC driver performs an enqueues the data and transfers control to another function block . In the function block the IPC driver sends a transmission suspend command to the transmit TX side.

In flow control for a send resume operation the receive queue contains a number of data packets that is less than a resume threshold . Thus in a function block the IPC driver dequeues the data and passes control to another function block . In the function block the IPC driver sends a transmission resume command to the transmit side. The TX side may now transmit a new data packet to be received by the RX side.

Thus the receive buffer queue threshold is used for flow control in the receive side s IPC driver which suspends the sending operation if the number of received packet buffers is greater than the RX queue suspend threshold and sends the TX Suspend command to IPC driver on transmit side to make sure that the TX side does not send any more packets.

The RX side s IPC driver orders resumption of the sending operation if the number of received buffers is less than the RX queue resume threshold by sending the TX Resume command to TX side to permit the TX side to send more packets.

Turning to a method for flow control example with send suspend is indicated generally by the reference numeral . In the method the receive RX queue size is 6 the transmit TX queue size is 3 the RX suspend threshold is 3 and the RX resume threshold is 2. A semaphore value of 0x01 means that the application processor AP has ownership of the shared bank while a semaphore value of 0x00 means that the modem has ownership of the shared bank. The mailbox format and commands are those of .

Here the modem begins with a transmit side IPC channel or queue containing three packets and the application processor begins with a receive side IPC channel or queue containing two packets. The initial semaphore bit value of 0x01 means that the AP currently has ownership.

The modem writes an ownership request command to the first mailbox on the IPC device. The IPC device sends a mailbox interrupt to the application processor. The AP in turn reads the ownership request command from the first mailbox. Next the AP writes an ownership release command to the second mailbox and writes a value of 0x00 to the semaphore bit giving ownership to the modem.

The modem reads the ownership release command from the second mailbox. Next the modem performs a burst write of all three packets to a channel of a shared bank on the IPC device writes a transmit complete command to the first mailbox and writes a value of 0x01 to the semaphore bit giving ownership to the AP. The IPC device sends a mailbox interrupt to the application processor The application processor reads the transmit complete command from the first mailbox and then reads all three data packets from the channel on the IPC device to the second processors receive side IPC channel or queue . Thus the modem has transferred the three packets from its TX side IPC channel or queue while the AP has received the additional three packets into its RX side IPC channel or queue and has a total of five packets in the RX queue.

In the meantime the modem has generated two new packets in its TX queue . However the five packets in the AP s RX queue exceeds its suspend threshold of three packets. Thus the AP issues a transmit suspend command to the second mailbox maintains ownership of the shared block and does not change the semaphore bit . The IPC device sends a mailbox interrupt to the modem and the modem reads the TX suspend command from the IPC device.

Turning now to a method of flow control with send resume is indicated generally by the reference numeral . The method picks up where the method of ends. Here the modem has two new data packets in its TX queue . The application processor has reduced the number of packets in its RX queue to one packet which is less than its resume threshold of two packets.

Thus the AP writes a TX resume command to the second mailbox of the IPC device and a value of 0x00 to the semaphore bit of the IPC device transferring ownership to the modem. The IPC device in turn issues a mailboxinterrupt to the modem. The modem reads the TX resume command from the second mailbox sends its two data packets to the shared bank channel writes a TX complete command to the first mailbox and writes a value of 0x01 to the semaphore bit transferring ownership back to the AP. The IPC device issues a mailbox interrupt to the AP. The AP in turn receives the TX complete command from the first mailbox and receives the two new message packets from the shared bank channel increasing the number of packets in its RX queue to three.

Thus embodiments of the present disclosure feature multiple channels efficient flow control a minimized number of memory copy operations and burst send and receive operations. A plurality of channels may be provided for two or more processors and support multiple processes per processor. IPC drivers of the present disclosure use pointer operations rather than copy operations and fully support burst transfer modes. For example HSDPA requirements may be easily satisfied by embodiments using burst modes with a length of 20 packets.

Alternate embodiments are contemplated. For example mailboxes and or semaphores may be implemented in software rather than hardware. Ownership of individual channels may be accomplished with additional semaphores and or an increased number of bits per semaphore. In addition parallel channel communications for transmit and receive channels with different ownerships can be implemented.

Although illustrative embodiments have been described herein with reference to the accompanying drawings it is to be understood that the present disclosure is not limited to those precise embodiments and that various other changes and modifications may be effected therein by those of ordinary skill in the pertinent art without departing from the scope or spirit of the present disclosure. All such changes and modifications are intended to be included within the scope of the present disclosure as set forth in the appended claims.

