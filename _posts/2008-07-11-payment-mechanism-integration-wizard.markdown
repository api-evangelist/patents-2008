---

title: Payment mechanism integration wizard
abstract: The wizard steps the merchant through creating an account to obtain credentials and educates the merchant on the page flows of the payment mechanism that the merchant wishes to integrate. Then, the wizard generates code snippets and files to be downloaded by the merchant and to be easily inserted into key pages of the merchant's online commercial website. The merchant can then test the completely integrated code in a developer's sandbox or go live with the completely integrated code.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08249950&OS=08249950&RS=08249950
owner: Ebay Inc.
number: 08249950
owner_city: San Jose
owner_country: US
publication_date: 20080711
---
The present invention relates to online internet based financial transaction programs and commercial systems and more particularly to a method and system where merchants are able to integrate financial transaction payment mechanism code seamlessly into their own commercial websites.

With the advent of the internet and online electronic commerce e commerce financial transaction programs that allow users to seamlessly purchase products transfer and receive funds over an internet connection have been in high demand.

Traditional methods of executing financial transactions have been limited to a user providing his or her credit card debit card or checking account number on a commercial website or using checks money orders and other forms of paper based payments. However these means of executing financial transactions are often cumbersome slow and inconvenient requiring a user to remember a multitude of account numbers login data and passwords. This often results in significant time delays for payment processing. Furthermore security and fraud concerns are prevalent. For instance a user is often reluctant to provide sensitive credit card or debit card information over an internet connection regardless of how secure an internet connection claims to be.

Recent financial transaction programs have emerged as a means for a user to pay for purchases transfer money receive money if the user is a merchant store shipping addresses and set up multiple financial accounts e.g. checking or savings credit card debit card all with one single login and password. Security and fraud concerns are also mitigated by means of online financial security precautions encryption methods and anti phising programs that are inherent in online internet based financial transaction systems.

Merchants may decide to use such a financial transaction program in order to receive funds from customers who purchase products from their commercial websites. There are several payment mechanisms that enable merchants to receive funds from customers. For instance certain mechanisms enable customers to enter their credit card debit card or go to an external login site to enter their account information pay for the product and then proceed to checkout.

However it is difficult for merchants to integrate these payment mechanisms without significant experience with the associated application programming interface API or knowledge of computer code. Merchants or vendors have to understand the API have to know how to code in the specific provided language i.e. ASP ASP.NET JSP Java PHP and have to know how to develop complicated code that interfaces with a plurality of servers and databases during an online financial transaction between a customer and a merchant.

Currently there are no user friendly programs that present a simple contextual page flow and that also simultaneously generate the necessary code to integrate into a merchant s commercial website.

Therefore there is a need in the art for a simple user friendly and customizable method and system that allows a merchant to seamlessly integrate payment mechanisms inherent to financial transaction programs into their commercial websites without having to know an API library or the details of a particular code i.e. ASP JSP PHP .Net Java .

According to one embodiment a method is provided to integrate payment mechanisms and a web site integration system that offers online merchants a flexible user friendly and customizable way to integrate payment mechanisms into their online commercial websites without having to understand the detailed intricacies of an API or other computer code.

First a merchant creates an API based account to obtain API Credentials or create a non API based account to obtain non API Credentials e.g. such as Payflow Credentials with a PayPal Merchant Account Then the merchant selects a payment mechanism from an integration wizard to integrate into his or her commercial website. The merchant should understand the payment mechanism such as by understanding the page flows of that particular payment mechanism which may be accomplished by presenting the merchant with page flows associated with the payment mechanism.

This allows the merchant to understand a common terminology for the different pages of the payment mechanism such as a shopping cart site e.g. Shopping Cart Page Shipping Address Page Billing Page Order Review Page and finally the Order Confirmation Page. Then the merchant provides API Credentials and other parameters such as a Shopping Cart Programming Language an Environment a Return URL a Cancel URL Payment Type and Currency Code as inputs to the wizard.

After the developer or merchant submits the requested data the integration wizard generates a plurality of code snippets and a plurality of files. The code snippets can be cut and pasted into the respective sections Shopping Cart Page Billing Page etc. of the merchant s commercial website. Also the key files produced by the integration wizard that wrap all the API functionality in them are placed in the shopping cart web directory of the merchant s commercial website. Afterwards the payment mechanism code will be successfully integrated into the merchant s commercial website.

Thus the wizard presents contextual page flow and also generates code at the same time to enable the user to easily integrate an API based payment mechanism.

Further limitations and disadvantages of conventional and traditional approaches will become apparent to one of skill in the art through comparison of such systems with the present invention as set forth in the remainder of the present application and drawings.

To allow cross referencing among the figures like elements in the figures are provided like reference numerals.

The following description is presented to enable any person skilled in the art to make and use the invention and is provided in the context of particular applications of the invention and their requirements. Various modifications to the disclosed embodiments will be apparent to those skilled in the art and the general principles defined herein may be applied to other embodiments and applications without departing from the spirit and scope of the present invention.

According to one embodiment of the invention a method is provided that enables an online merchant to seamlessly integrate payment mechanism code into their commercial website without having to understand the intricacies of an API or other code.

In step a merchant creates either a sandbox account in order to acquire API credentials such as an API username API password and a signature or digital signature which will be further explained in the description for . Also in step a merchant can create a merchant or Payflow account to acquire Payflow credentials such as name password user or partner. Payflow credentials are simply examples of credentials that are not API credentials and are not limited to just Payflow credentials.

In step a merchant selects a payment mechanism to integrate into his or her commercial website. A plurality of different payment mechanisms exist. One type of payment mechanism can for instance allows a customer to leave the merchant s commercial website and log in to an external financial transaction website such as but not limited to a PayPal login page and send the payment back from the financial transaction program to the merchant s commercial website. Examples of these types of payment mechanisms include PayPal s Express Checkout with a Developer Sandbox Account product and PayPal s Express Checkout PayFlow edition with a PayPal Merchant Account product. Another type of payment mechanism allows a customer to make a payment to the merchant all without leaving the merchant s commercial website. An example of this type of payment mechanism includes PayPal s Credit Card PayFlow product with a PayPal Merchant Account .

In step once a payment mechanism is selected in step the page flows of that respective selected payment mechanism are presented in order to educate the merchant on how a user proceeds from placing items in a shopping cart to checking out. This is done to establish a context with the merchant and to establish a common terminology for referring to different pages of the shopping cart site. For instance there is a Shopping Cart Page a Shipping Address Page a Billing Page an Order Review Page and finally an Order Confirmation Page . For a payment mechanism that requires a customer to leave a merchant s commercial website there are two primary page flows that can be shown.

First a page flow can be shown that details how a customer can proceed directly from the Shopping Cart Page of the merchant s commercial website to an external website of a financial transaction program such as a PayPal login page to provide their login data and pay for the purchased item through the financial transaction program e.g. using PayPal funds for instance . Then the customer reviews the payment they made through their financial transaction program. Afterwards the customer is brought back to an Order Review Page of the merchant s commercial website and then is taken to the Order Confirmation Page of the merchant s commercial website.

Second another page flow can be shown that details how a customer can proceed from the Shopping Cart Page of the merchant s commercial website to the Billing Page of the merchant s commercial website and then to the an external website of a financial transaction program such as a PayPal login page to provide their login data and pay for the purchased item through the financial transaction program e.g. using PayPal funds for instance . Then the customer reviews the payment they made through their financial transaction program. Afterwards the customer is brought back to an Order Review Page of the merchant s commercial website and then is taken to the Order Confirmation Page of the merchant s commercial website.

Third the merchant is shown that both of the above two page flows can be implemented for a payment mechanism that requires a customer to leave a merchant s commercial website to an external financial transaction program website.

Fourth for a payment mechanism that enables a customer to stay at a merchant s commercial website the entire time a simple direct page flow is presented that shows how a customer can proceed from the Shopping Cart Page of the merchant s commercial website to the Shipping Address Page then to the Billing Page then the Order Review Page and then finally to the Order Confirmation Page all on the merchant s commercial website.

In step a merchant provides API Credentials e.g. API Username API Password Digital Signature if the merchant signed up for an API Developer Account or the merchant provides Payflow Credentials e.g. Name Password User Partner if the merchant signed up for a non API based account such as for example a PayPal Merchant Account or another similar type of account not affiliated with an API. The merchant also specifies additional parameters. The end result of step is that code snippets and file s get generated by the wizard from the API or Payflow Credentials and other parameter information that the merchant specifies.

In step a merchant will have the downloaded code snippets and file s which were generated from step .

In step a merchant follows the detailed instructions provided by the Integration Wizard that details how to integrate the downloaded code snippets and file s into the specific pages e.g. the Shopping Cart Page the Billing Page the Order Review Page and the Order Confirmation Page of the merchant s commercial website. The end result of step is that after following the instructions a merchant will have the option of testing the integrated code in a sandbox or going live with the integrated code.

In step a merchant then decides to test the integrated code in a developer s sandbox if the merchant has already set up a Developer Sandbox account with API Credentials . Afterwards in step a merchant may also decide to go live with the code which basically means that the integrated code will be placed on the merchant s commercial website to be used by customers and the rest of the public.

In step the merchant asks whether he or she wishes to integrate any additional payment mechanisms with the Integration Wizard. If there are still more payment mechanisms to integrate the merchant proceeds back to step and selects another payment mechanism to integrate into his or her commercial website. If the merchant does not want to integrate any more payment mechanisms and the going live of the last payment mechanism the merchant integrated into his or her commercial website was successful the merchant is done with the process and therefore the merchant goes to step to finish the entire integration process.

Step asks whether the merchant has set up a Developer Sandbox Account and therefore has API Credentials or if the merchant has set up a non API Account such as a Payflow Account and has Payflow Credentials.

In step if the merchant has a Developer Sandbox Account then the merchant has API Credentials such as an API Username an API Password and a Signature or Digital Signature . Therefore in step a merchant inputs his or her API Credentials API Username API Password Signature into the Integration Wizard.

In step if the merchant has a non API based Account or a Payflow Account then the merchant has Payflow Credentials such as ID data for Vendor Password User and Partner. The Vendor ID is the login name created when the merchant registered for the Account. The Password is the password for the account. The User ID should be the same as the Vendor ID unless a separate user was created. For instance if the merchant is using PayPal a separate user can be created for the PayFlow Pro product from within the merchant s PayPal Manager Account. Finally the Partner ID is applicable if the merchant is using PayPal. The Partner ID for PayPal is the ID provided to the merchant by the authorized PayPal Reseller who registered the merchant for the PayFlow Pro service. If the merchant purchased the PayPal Merchant Account directly from PayPal then PayPal is input as the Partner ID. The Partner ID value is case sensitive.

In step and step the merchant selects the Shopping Cart Programming Language that the merchant wishes to code the Shopping Cart files in. This code is usually what the rest of the merchant s commercial website is coded in. The Shopping Cart Programming Language can comprise but is not limited to Active Server Pages ASP ASP.NET ASPX Java Server Pages JSP Java or Java SDK or PHP.

In step if the merchant has a non API based Account or a Payflow Account then the merchant can select the Environment of the integrated code which usually comprises either Pilot for testing purposes or Live which means that the integrated code will automatically be integrated into the actual live version of the merchant s commercial website available on the internet.

In step the merchant provides a Return URL . A Return URL is usually the Order Review Page of the merchant s commercial website and is the website that a customer returns to after visiting an external financial transaction website such as PayPal. For instance if the merchant s commercial website is coded in HTML the Return URL may be http www.yourstore.com OrderConfirmPage.htm.

In step the merchant provides a Cancel URL . A Cancel URL is usually the Main Page of the merchant s commercial website and is the website that a customer is brought to after cancelling an order. For instance if the merchant s commercial website is coded in HTML the Cancel URL may be http www.yourstore.com MainPage.htm.

In step the merchant selects a Payment Type . If the merchant is using PayPal the Payment Type is an input to the Payflow Gateway that allows a merchant to determine when to actually charge the customer or purchaser s PayPal or credit card account. PayPal currently supports two different Payment Types.

The first Payment Type is Sale which means that the funds are credited to the merchant s account immediately at the end of the checkout flow or right after the customer or purchaser finishes the checkout process of web pages. The second Payment Type is Authorization which means that the merchant obtains an authorization or a hold for the transaction amount and the merchant then captures the funds against this authorization at a later date. Authorizations are valid for specific amounts of time such as up to three days. The fund capture can be done either from the PayPal account or by using a function in the API called DoCapture .

In step the merchant selects a Currency Code . The Currency Code can comprise but is not limited to U.S. Dollar USD Australian Dollar AUD Canadian Dollar CAD Swiss Franc CHF Czech Koruna CZK Danish Krone DKK Euro EUR Pound Sterling GBP Hong Kong Dollar HKD Hungarian Forint HUF Japanese Yen JPY Norwegian Krone NOK New Zealand Dollar NZD Polish Zloty PLN Swedish Krona SEK and the Singapore Dollar SGD . This is the currency that the customer or purchaser will use to pay the merchant for the product or the currency that the merchant has decided to accept on his or her commercial website.

Finally in step all the inputted parameters from steps to are taken and placed into a code generator. In step the code generator in turn generates code snippets and file s tailored to the parameters input in steps to . For instance code snippets are generated that swap in the Return URL and Cancel URL in the appropriate locations. Also in the code snippets the Payment Type and Currency Code information is properly reflected. Finally the file s that a merchant usually places in the shopping cart web directory are generated in the Shopping Cart Programming Language that the merchant selected in steps and e.g. either ASP ASPX JSP Java PHP or another language . After the code snippets and file s have been generated the merchant then proceeds to step in .

Assuming the answer to the question posed in step is YES step involves the instructions to be followed for integrating code into the Shopping Cart Page of a merchant s commercial website. In step A the merchant takes the downloaded code snippet generated according to the parameters specified in step of and places that code snippet into the Shopping Cart Page of the merchant s commercial website code. Then in step B the merchant downloads the respective file s and places the file s into the shopping cart web directory of his or her commercial website. What language these files show up in depends on what language was specified as the Shopping Cart Programming Language in steps and of . If ASP JSP Java or PHP were selected then there will usually be two ASP JSP Java or PHP files respectively that will be generated and that will need to be placed in the shopping cart web directory of the merchant s commercial website. If ASPX was selected there will be five files two .aspx files and three .aspx.cs files. A different number of files will be generated if a different type of language not specified above is selected. Finally in step C the merchant saves the total payment amount in a session variable named Payment Amount . The code in the generated file s is designed to read from this session variable and pass this variable as input to an API function call.

In step instructions are outlined for integrating code into the Billing Page of a merchant s commercial website. In step A the merchant inserts the downloaded code snippet into the Billing Page section of the merchant s commercial website or the section of the merchant s commercial website that handles billing. In step B the code snippet has a variety of shipping address placeholders e.g. etc. The merchant replaces these placeholders with variables representing the shipping address which are usually provided in the API library. Finally in step C the merchant saves the total payment amount a numerical amount in a session variable named Payment Amount . The code inside the files described in step is designed to read from this session variable and pass this value as input to an API function call.

In step instructions are outlined for integrating code into the Order Review Page of a merchant s commercial website. In step A the merchant inserts the downloaded code snippet into the Order Review page of the merchant s commercial website. In step B the merchant displays the shipping address returned by the code variables directly on the Order Review page for the customer to review. In step C the merchant saves the total payment amount a numerical value in a session variable named Payment Amount . The code inside the files described in step is designed to read from this session variable and pass this value as input to an API function call.

In step instructions are outlined for integrating code into the Order Confirmation Page of a merchant s commercial website if the selected payment mechanism at issue requires a customer to leave the merchant s commercial website for payment e.g. a YES to the question posed in step . In step A the merchant inserts the downloaded code snippet into the Order Confirmation Page of the merchant s commercial website. Then in step B the merchant saves the total payment amount a numerical value in a session variable named Payment Amount . The code inside the files described in step are designed to read from this session variable and pass this value as input to an API function call. Finally in step C the merchant processes the information returned by the code snippet of step A and completes order backend processing.

In step instructions are outlined that are to be followed for integrating code into the Order Confirmation Page of a merchant s commercial website if the selected payment mechanism at issue does not require a customer to leave the merchant s commercial website for payment e.g. a NO to the question posed in step . In step A the merchant inserts the downloaded code snippet into the Order Confirmation Page of the merchant s commercial website. Then in step B because the merchant has not downloaded any file s yet because a merchant only downloads file s in step B if he answers YES to the question in step and then goes to step the merchant will have to download the generated files from the parameters specified in . Then in step C the merchant passes the data collected from the Billing Page of the merchant s commercial website to the DirectPayment function in one of the downloaded files if PayPal is used. Finally in step D the merchant processes the information returned by the code snippet in step A and completes order backend processing.

Finally in step the merchant is finished with integrating the code into all relevant pages or sections of his or her commercial website.

Also in step a completion page will appear that will tell the merchant instructions on how to test the integrated code and how to go live by executing the integrated code on the actual live version of the merchant s commercial website. After step the process goes to step in .

According to another embodiment of the invention a website integration system is provided that enables a merchant to seamlessly integrate payment mechanism code into their commercial website without having to understand an intricate API or other code.

Sandbox and Payflow Credentials Notice informs the merchant on how to create a sandbox test account and obtain Payflow Credentials. If the merchant clicks the text Payflow credentials and a Sandbox account activated for testing Express Checkout a help box appears which will be detailed in . Programming Language Notice informs the merchant that he or she has to know the programming language used in the shopping cart on the merchant s commercial website e.g. usually ASP ASPX JSP Java PHP or another language as described above .

Order Review Page is where the customer reviews his or her order. Order Confirmation Page is where the order has been finalized and submitted and a confirmation page is generated for the customer s records. Usually a confirmation number of some sort is provided to the customer at the Order Confirmation Page .

Shopping Cart Programming Language Dropdown Menu allows a merchant to select a programming language from a plurality of programming languages. Currently Dropdown Menu allows the user to select from either Active Server Pages ASP ASP.Net C ASPX Java Server Pages JSP Java or Java SDK or PHP. However this list is merely exemplary and not exhaustive.

Return URL Field enables a merchant to enter a Return URL . A Return URL is usually the Order Review Page of the merchant s commercial website and is the website that a customer returns to after visiting an external financial transaction website such as PayPal. For instance if the merchant s commercial website is coded in HTML the Return URL is http www.yourstore.com OrderConfirmPage.htm. Cancel URL Field enables a merchant to enter a Cancel URL . A Cancel URL is usually the Main Page of the merchant s commercial website and is the website that a customer is brought to after cancelling an order. For instance a potential Cancel URL may be http www.yourstore.com MainPage.htm.

Payment Type Dropdown Menu allows a merchant to select a Payment Type . If the merchant is using PayPal the Payment Type is an input to the Payflow Gateway that allows a merchant to determine when to actually charge the customer or purchaser s PayPal or credit card account. PayPal currently supports two different Payment Types that can be currently selected from Dropdown Menu .

The first Payment Type is Sale which means that the funds are credited to the merchant s account immediately at the end of the checkout flow or right after the customer or purchaser finishes the checkout process of web pages. The second Payment Type is Authorization which means that the merchant obtains an authorization or a hold for the transaction amount and the merchant then captures the funds against this authorization at a later date. Authorizations are valid for up to three days. The fund capture can be done either from the PayPal account or by using a function in the API called DoCapture . The Payment Types are not limited to only these two and additional Payment Types may be added to Dropdown Menu .

Currency Code Dropdown Menu enables a merchant to select a Currency Code . The Currency Code that can be currently selected from Dropdown Menu can comprise but is not limited to the following U.S. Dollar USD Australian Dollar AUD Canadian Dollar CAD Swiss Franc CHF Czech Koruna CZK Danish Krone DKK Euro EUR Pound Sterling GBP Hong Kong Dollar HKD Hungarian Forint HUF Japanese Yen JPY Norwegian Krone NOK New Zealand Dollar NZD Polish Zloty PLN Swedish Krona SEK and the Singapore Dollar SGD . This is the currency that the customer or purchaser will use to pay the merchant for the product or the currency that the merchant has decided to accept on his or her commercial website. This list is not exhaustive and additional currencies can be used.

Finally Payment Amount Variable Instruction instructs the merchant to save the total payment amount a numerical value in a session variable named Payment Amount . The code inside the ExpressCheckout file e.g. expresscheckout.asp is designed to read from this session variable and pass it as input to an API function call.

Payflow Credential Go Live Instructions instruct the merchant how to go live with the finally integrated code. In the paypalfunctions.xxx file xxx being asp aspx cs jsp java php etc. the merchant makes sure to set the Sandbox variable to false to cause the code to use the Payflow live site API endpoints. This is identical to the API Credential Go Live Instructions in except that there is no need to Replace the Sandbox API credentials with the live API credentials .

The above described embodiments of the present invention are merely meant to be illustrative and not limiting. For example on line financial transaction services and products other than PayPal are also suitable for the present invention. Various methods have been described however not all steps may be required for certain applications and steps may also be modified to meet specific needs. It will thus be obvious to those skilled in the art that various changes and modifications may be made without departing from this invention in its broader aspects. Therefore the appended claims encompass all such changes and modifications as they fall within the true spirit and scope of this invention.

