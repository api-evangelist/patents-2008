---

title: Representational state transfer (REST) service import editor
abstract: In an embodiment of the invention, a method for REST service importation in a distributed application development data processing system can be provided. The method can include the specifying a sample uniform resource locator (URL) in a graphical user interface to a REST service importation editor and invoking the REST service at the sample URL in order to receive a response object from the REST service. The method further can include parsing both the sample URL and the response object to identify different request fields and field types of a request object for the REST service and also response fields and field types of the response object. Finally, the method can include displaying a description of the request fields and field types of the request object and also a description of the response fields and field types of the response object in the graphical user interface to the REST service importation editor.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08073887&OS=08073887&RS=08073887
owner: International Business Machines Corporation
number: 08073887
owner_city: Armonk
owner_country: US
publication_date: 20081009
---
The present invention relates to the field of remote service utilization for distributed computing and more particularly to the remote service invocation of a REST service.

Distributed computing refers to the disposition of programmatic elements for a computing application across multiple different computing sources in a computer communications network. Often embodied as part of a Web distributed application a user interface to the application can be served from one network location while different portions of program code for an application can be sourced from different locations in the network. Distributed applications enjoy an important advantage of code reuse such that to deploy a robust application one need not develop the entire application from scratch. Rather already proven application components can be combined from different sources through a common user interface to deliver the robust application. In this regard at its extreme form a distributed application can be nothing more than an aggregation of existing logical components.

Historically Web services have driven the advancement of distributed computing. A Web service strictly speaking is a server side application exposing a well defined application programming interface API to access the logic of the server side application. The Web service and its corresponding API can be published in a network accessible directory such that an interested calling application can recognize a proper format for both invoking the logic of the Web service and also for receiving a result from the invocation of the logic of the Web service. In Web services the format for the request and the response must conform to a defined schema as published in the network accessible directory.

While Web services have proven helpful in the enterprise and have been all the rage for nearly a decade the utilization of Web services is not without its challenges. For one interactions with Web services are not cacheable resulting in performance disadvantages and the inability of Web services oriented applications to scale on demand. Further communication state must be maintained when accessing remotely disposed Web services. Even further additional protocol handling logic must be layered to enjoy the benefit of Web services including support for the simple object access protocol SOAP . Finally Web services are entirely dependent on a separate and independent resource discovery system namely the directory.

Realizing the inherent programs in the use of Web services information technologists have begun to gravitate towards REST services which do not suffer the disadvantages noted herein. As is understood by those skilled in the art REST refers to a collection of network architecture principles intended to expose access to resources in a stateless manner. The resources are exposed such that clients can access the resources uniformly without requiring knowledge of the whole resource set. In REST resources are accessed stateless through commonly understood hypertext transfer protocol HTTP PUT and GET directives.

The culture associated with developers utilizing REST services shuns learning a complex service description language such as the Web Service Definition Language WSDL identified with Web services in order to code proper access to a Web service. In fact at present there is no widely used REST service definition standard though in the past developers have produced proprietary service definitions for REST. Rather the culture of the REST technology largely relates to a trial and error approach to using a REST service. This trial and error approach involves the developer keying a uniform resource locator URL into the address field of a Web browser in order to examine the resulting document in the browser.

Based upon the examination of the returned results the developer can determine the required code in the proper format utilizing proper semantics in order to utilize the REST service from the target application. In addition in order to import use the REST service within an application the developer may be required to describe the REST service using a language required by the runtime environment of the application. For example the runtime environment supporting the target application may require that all REST services be described in accordance with a WSDL document.

Embodiments of the present invention address deficiencies of the art in respect to the trial and error approach to utilizing a REST service and provide a novel and non obvious method system and computer program product for a REST service import editor. In an embodiment of the invention a method for REST service importation in a distributed application development data processing system can be provided. The method can include the specifying a sample URL in a graphical user interface to a REST service importation editor and invoking the REST service at the sample URL in order to receive a response object from the REST service.

The method further can include parsing both the sample URL and the response object to identify different request fields and field types of a request object for the REST service and also response fields and field types of the response object. Finally the method can include displaying a description of the request fields and field types of the request object and also a description of the response fields and field types of the response object in the graphical user interface to the REST service importation editor. In one aspect of the embodiment the method also can include generating a schema for the response object for rendering in the graphical user interface to the REST service importation editor. In this way a REST service can be called through the use of an editor to analyze the call and to produce a WSDL definition of the REST service without recourse to a defining a proprietary service definition for REST services.

In another embodiment of the invention a distributed application development data processing system can be provided. The system can include a development environment executing in a host computing platform and configured for communicative coupling to a host server serving responses from a REST service when the REST service is invoked. The system also can include a REST service editor tool coupled to the development environment. The tool can include a graphical user interface and sample URL generator logic. The logic can include program code enabled to create a REST service definition for the REST service at a sample URL for the REST service and to invoke the REST service at the sample URL in order to receive a response object. The program code also can be enabled to parse the response object to identify fields and field types of the response object. Finally the program code can be enabled to display the sample URL and the field and field types of the response object in the graphical user interface.

Additional aspects of the invention will be set forth in part in the description which follows and in part will be obvious from the description or may be learned by practice of the invention. The aspects of the invention will be realized and attained by means of the elements and combinations particularly pointed out in the appended claims. It is to be understood that both the foregoing general description and the following detailed description are exemplary and explanatory only and are not restrictive of the invention as claimed.

Embodiments of the present invention provide a method system and computer program product for REST service import editor. In accordance with an embodiment of the present invention a user interface to a distributed application development tool can be rendered to include a field for specifying a sample URL to a REST service. In response to receiving a specified sample URL in the field a request can be issued by the user interface to a REST service at the sample URL and a response object can be received from the REST service. The response object can be programmatically parsed through the user interface and a sample usage of the REST service can be deduced from the parsed response object. Finally the sample usage can be rendered in the user interface. Optionally an object diagram of both a request object for the sample URL and a response object can be generated from the parsed sample URL and the response object and concurrently rendered in the user interface.

In further illustration pictorially shows an exemplary REST service import editor consistently arranged according to the inventive embodiments. As shown in a REST service import editor can include a graphical user interface providing text entry fields into which each of a name for a REST service to be imported can be specified a path for the REST service and a sample URL to invoke the REST service can be specified. In response to entering the sample URL for the REST service coupled logic can issue a request to the REST service at the path and the coupled logic can parse a response object received from the REST service identifying fields and corresponding types of the response object and also generating a schema for the REST service based upon the response object.

The response object when parsed can indicate the fields and corresponding types to be returned when invoking the REST service. Accordingly the schema fields and correponding types can be used to construct a sample URL for invoking the REST service. Optionally the sample URL of the request can be parsed in order to construct a description for invoking the REST service and also to deduce a response schema definition for the REST service definition. Specifically an object diagram of the request object A for the sample URL and an object diagram of the response object B can be generated from the parsed sample URL and the response object and concurrently rendered in the graphical user interface .

The graphical user interface of the REST service import editor of can be driven by a distributed application development data processing system. In yet further illustration schematically shows a distributed application development data processing system configured with a REST service import editor. The system can include a host computing platform supporting the operation of a development environment through which distributed applications are developed. A REST service editor tool can be coupled to the development environment . In this regard the REST service editor tool can provide a graphical user interface providing end user to the REST service editor tool . Further sample URL generator logic can be coupled to the REST service editor tool and can include program code enabled to issue a request through the graphical user interface to access the REST service at a specified sample URL in order to receive a response object from the REST service .

More particularly in operation an end user can specify through the graphical user interface a sample URL for the REST service executing in a host server . The REST service editor tool in response can access a REST service at the sample URL in the host server resulting in the REST service responding with a response object . The program code of the sample URL generator logic when executed in the host computing platform can parse the response object in order to identify the requisite field and field types resulting when invoking the REST service . Further the program code of the sample URL generator logic when executed in the host computing platform can create a schema B for the response object produced by the REST service in response to the invocation of the REST service . Finally the program code of the sample URL generator logic when executed in the host computing platform can assemble the identified field and field types of the response object and can insert the field and field types into the graphical user interface for viewing by an end user.

In even yet further illustration of the operation of the REST service editor tool is a flow chart illustrating a process for REST service importation in a distributed application development data processing system. Beginning in block a path to a REST service can be specified in the tool and in block a sample exemplary request in the form of a URL to invoke the REST service can be issued. In block a response object can be received in response to the sample request and in block the response object can be parsed to identify field and field values returned when invoking the REST service.

In block a schema for the response object provided by the REST service can be generated for the REST service. In consequence in block A not only can a visual diagram be generated for a request object for the REST service based upon identified field and field types in the sample request but also in block B a visual diagram can be generated for the response object based upon the identified field and field types. Subsequently in block the graphical user interface can be refreshed to display the request and response object diagrams.

Embodiments of the invention can take the form of an entirely hardware embodiment an entirely software embodiment or an embodiment containing both hardware and software elements. In a preferred embodiment the invention is implemented in software which includes but is not limited to firmware resident software microcode and the like. Furthermore the invention can take the form of a computer program product accessible from a computer usable or computer readable medium providing program code for use by or in connection with a computer or any instruction execution system.

For the purposes of this description a computer usable or computer readable medium can be any apparatus that can contain store communicate propagate or transport the program for use by or in connection with the instruction execution system apparatus or device. The medium can be an electronic magnetic optical electromagnetic infrared or semiconductor system or apparatus or device . Examples of a computer readable medium include a semiconductor or solid state memory magnetic tape a removable computer diskette a random access memory RAM a read only memory ROM a rigid magnetic disk and an optical disk. Current examples of optical disks include compact disk read only memory CD ROM compact disk read write CD R W and DVD.

A data processing system suitable for storing and or executing program code will include at least one processor coupled directly or indirectly to memory elements through a system bus. The memory elements can include local memory employed during actual execution of the program code bulk storage and cache memories which provide temporary storage of at least some program code in order to reduce the number of times code must be retrieved from bulk storage during execution. Input output or I O devices including but not limited to keyboards displays pointing devices etc. can be coupled to the system either directly or through intervening I O controllers. Network adapters may also be coupled to the system to enable the data processing system to become coupled to other data processing systems or remote printers or storage devices through intervening private or public networks. Modems cable modem and Ethernet cards are just a few of the currently available types of network adapters.

