---

title: Modular flexible software architecture for TV
abstract: Rather than have a unique code set per TV product, a common code base is provided to service multiple products and even multiple product lines. Embedded systems can be upgraded through a network connection. The software architecture provides a flexible approach to supporting multiple product offerings through a plug-in modular middle-ware and to providing standardized hardware acceleration for both 2D and 3D graphics. The plug-in capability provides for feature additions and upgrades after sale.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08339514&OS=08339514&RS=08339514
owner: Sony Electronics Inc.
number: 08339514
owner_city: Park Ridge
owner_country: US
publication_date: 20081120
---
Existing TV architectures are based on a model of fixed functionality that does not change over the lifetime of the product. The set of features and applications are fixed at the time of product definition and do not change. This type of architecture was not originally designed to accommodate updating individual product features after the product has been delivered to the customer.

As understood herein a flexible means to upgrade the TV after delivery is desirable. Furthermore as understood herein the need for flexibility extends beyond upgrading after delivery to the customer and more particularly a more modular and flexible means to develop and then configure product offerings as they are introduced would be advantageous.

Accordingly a TV system architecture embodied on a tangible computer readable storage medium includes an application logic coordination unit ALCU and plural plug in modules PIM communicating with the ALCU. Each PIM represents a desired TV system feature. PIM to PIM interactions are defined at the PIM level to be product specific for supporting product differentiation. That is a particular combination of PIMs may be tailored differently in different models to provide further product differentiation. Additionally upon adding a new PIM the new PIM may be programmed to check for other specific PIMs and tailor its behavior accordingly based on the other PIMs and e.g. the TV model ID which may be read by the new PIM.

In another aspect a method includes providing in first and second TV system model lines an application logic coordination unit ALCU common to both model lines. The method also includes providing plural plug in modules PIM configured for communicating with the ALCU with each PIM representing a desired TV system feature and with the ALCU routing information between the PIMs. A set of PIMs in the first model line may be different from a set of PIMs in the second model line. The set of PIMs may be established to establish desired features intended for the particular TV model. Combinations of PIMs may include modified PIM versions to add further product differentiation.

In another aspect a display system includes a video display and processor circuitry implementing a TV feature architecture embodied in software. The architecture includes an application logic coordination unit ALCU and plural plug in modules PIM communicating with the ALCU. Each PIM represents a desired TV system feature. The ALCU routes information between the PIMs and new PIMs may be added to the ALCU to cooperate with PIMs communicating with the ALCU.

In some example embodiments a PIM providing a first feature embodies a first application launch judgement in a first model line and a PIM providing the first feature embodies a second application launch judgement in a second model line. The second application launch judgement is different than the first application launch judgement. In some implementations a PIM providing a first feature registers for a first event in a first model line and a PIM providing the first feature registers for a second event in a second model line. The second event is different than the first event. PIM to PIM interactions may be defined at the PIM level to be product specific.

In non limiting examples each PIM includes an interface code unique to a particular model line and a feature code common across all model lines in which the PIM is sought to be used. The interface code translates calls from other PIMs received through the ALCU into calls understood by the feature code. The ALCU may include a public interface a utilities interface and a PIM interface.

The details of the present invention both as to its structure and operation can best be understood in reference to the accompanying drawings in which like reference numerals refer to like parts and in which 

Referring initially to a system is shown that includes a visual display . In the example embodiment shown the visual display is a TV video display such as but not limited to a flat panel matrix type display.

The system includes a TV chassis holding the display and a TV tuner receiving signals from a source of TV programming such as a cable head end set top box satellite receiver terrestrial antenna etc. The tuner typically is mounted in the chassis although in some embodiments the tuner may be part of the set box described farther below.

The chassis also typically holds a TV processor that can access information including a software implementation of present logic on a tangible computer readable storage medium such as one or more disk storages solid state storages etc. User commands may be received from a remote control .

It is to be understood that while disclosure below focuses on software implemented PIMs that may be stored on the medium inside the TV chassis in some embodiments a PIM may connect to a software driver for communicating to an external device such as a set box. In nay case PIMs may be transmitted for storage to the medium through a network connection to the TV or a universal serial bus USB thumb drive or other method. In still other implementations if a PIM is implemented by an external plug in card the card to justify its added cost may contain specialized hardware for performing computationally intensive tasks to off load those tasks from the TV processor . For example complex associative searches for recognizing and identifying a persons face within the current video being presented may be off loaded to a plug in card in the event that the card is to be used to provide a PIM or PIMs. The PIM for such a feature might for example execute PIM to PIM communication to obtain a video capture of the screen image and send it to the external processor on the card. The return data request might then be sent to the below described ALCU to route the results to a display PIM to report the results. Thus in described below an item such as Feature C might be an interface to an external processor or other external device such as a USB thumb drive controller.

As shown in the system may also include a set box such as a set top box or set back box that can be mechanically fastened to the TV chassis and electrically connected to the internal components thereof. Among other components the set box may include a box processor accessing one or more computer readable storage media to implement the present architecture. It is to be understood that present principles may be implemented by the TV processor acting in concert with the box processor or that the set box may be omitted in which case present principles are implemented by the TV processor .

The system may also preferably include a wide area computer network interface in this case contained in the set box and controlled by the box processor for accessing a wide area network such as the Internet to receive the below described modules therefrom. Without limitation the interface may be embodied by a wired or wireless modem.

Present principles include building a foundation for supporting a range of upgradeable products from a single code base. The example non limiting architecture described further below expands the concept of plug in applications to provide plug in middle ware . This means that more than just a user interface UI can be added as a downloadable plug in . New capabilities and features can be added to the system in a standardized and consistent manner. The example non limiting architecture described further below provides a mechanism for various features to be added or removed across a product line from within a single source code base both during development and after product delivery as downloadable plug in modules. The example non limiting architecture described further below also allows for more efficient product development and faster time to market.

The example non limiting architecture described farther below provides a standardized yet expandable event delivery while minimizing the overall number of events grouped module sets that define product offerings the ability to freeze changes on one product set while allowing development to continue on others and a standard mechanism to allow middle ware components to connect into the overall system.

Thus each TV product is not simply a selected set of generic software modules. Common code that can remain the same across products is separated from the code that needs to be unique to each product.

Each unique module is called a PIM Plug In Module . Each PIM represents a respective TV system feature so that features can plug into the architecture through PIMs that employ a common interface to the Application Logic Coordination Unit ALCU . The ALCU routes calls and events between PIMs. The PIM interface includes a common set of application programming interfaces API entries for all PIMs that allow them to initialize load react to system events and initiate events and actions.

Each PIM acts a proxy between the module it represents such as input from the remote commander to the generalized system interface used by the ALCU. Each PIM also acts as the repository of the product unique code. Each software module connecting through the PIM to the ALCU is kept product neutral with product specific elements kept within the PIM. This allows the features to be shared among products while allowing for feature differentiation within each product.

Accordingly while the overall system behavior is defined in the central logical control unit the individual behaviors for each module can be added on a plug in basis as well. Each individual system module is transparent to each other and can be changed or replaced without affecting any other module. The modified or replaced module only needs to define its system behavior in its PIM which couples this module into the whole system through the ALCU.

Now referring to a base software module referred to herein as an Application Logic Coordination Unit ALCU provides the mechanism to route application action and system events among software implemented feature PIMs and synchronizes behaviors between feature PIMs which may be provided in different PIM combinations to provide different TV system product ranges and vended as different product packages and or which may be individually downloaded from the Internet to the TV system after home installation to e.g. upgrade an existing module in the package or add a new module to the package to add a new feature to the TV system in exchange for e.g. payment for the new feature.

As shown in each PIM contains a feature definition and execution code sub module which is unique to the particular PIM. Also each PIM contains a common code module that is the same for all PIMs for reasons to be shortly disclosed. Each PIM also includes an ALCU interface that communicates with an interface of the ALCU with the interfaces defining a common interface scheme to facilitate adding and removing PIMs from the ALCU with ease.

Each PIM in addition to providing software to establish a respective feature for the TV system can add callbacks into the ALCU to define module product specific behaviors as needed as more fully described below. Accordingly the ALCU which may be implemented in one embodiment as a singleton C class is a routing mechanism to distribute system and action events between the PIMs. Each PIM can add an event onto an ALCU event queue through an ALCU interface as set forth further below.

In addition to routing information between PIMs the ALCU also keeps track of current active applications as well as parent child relationships in a stack of list data structure in which the list data structures represent relationship of sibling applications.

Actions and events are defined as requests to perform and action or the delivery of some information regarding an event. An example action is the request to launch an application by one PIM and an example event is a keyboard key event being routed to an application associated with another PIM that was launched.

In addition to the interface needed for the PIMs as shown in the example ALCU has a public API for controlling PIM installation and removal. In addition the ALCU includes an internal API for the ALCU utilities that provide common routines to service the routing operations.

The ALCU base architecture thus provides a common means to connect the PIMs an interface to control the PIM connections and a common utility interface that can be used by both the ALCU and the PIMs. Each PIM can issue an action that is routed through the ALCU to another PIM. The ALCU receives events from a PIM and adds it to the event queue. Each item on the event queue is processed serially and dispatched to a target PIM. Rather than process a message for every function call in the system the message passing advantageously may be done on a per PIM basis to keep the overhead of the routing system low. Broadcast events to many PIMs call be handled by having each PIM register a callback handler to receive each type of event in which it is interested.

An ALCU event queue is the core data structure for ALCU to process all system events. The event queue can be implemented as simple as a FIFO queue providing First Come First Serve or as a Priority Queue in which events of highest priority get processed first to meet a time deadline. The complexity of the routing mechanism can be tailored to the product offering.

The ALCU event format may be specified through a bit packed unsigned integer. The integer may include a module ID an event type a subevent type and one or more event flags. The module ID indicates the source PIM of the event while the event type specifies what is being sent. The sub event type and event flags allow parameters and qualifiers to be added to the event.

While the overall events are defined system wide the combination of event and subevent gives ALCU the flexibilities to tailor the routing granularity according to requests. To receive events each PIM registers event handlers for events and sub events it would like to receive. The ALCU then routes events to those registered event handlers or further to those registered sub event handlers to avoid unnecessary broad casting or multi casting messages.

Each PIM is derived from a base PIM interface which may be a C abstract class that has a number of pure virtual methods that are implemented by the derived class. Each PIM can support installation removal initialization and shut down of itself. Each PIM has entry points for receiving an application launch system event or key event.

A PIM depending on its function may not process all event types. For example a PIM that provides the feature of receiving a key input from the remote control might issue a warning or error if it received an application launch request.

The ALCU public interface may be a C interface for system modules to access the ALCU internals. The public interface provides for overall control of the ALCU event queue installing and removing PIMs and for instantiating ALCU obtaining system state status and obtaining application parent child and sibling relations.

The ALCU utility interface interfaces with utilities that can be used by both the ALCU and the PIMs. These utilities are helper functions that return the active application ID query the system state or add remove the callbacks needed to specify the PIM behavior. The ALCU utilities interface also provides an ALCU base unit an abstraction layer to access the system platform so that the details of the system platform may be abstracted from the ALCU base unit part which is a mechanism of event routing.

As an example of how the above architecture functions refer to and suppose a key event is generated by a user manipulating a key on the remote control . The key event is detected by the TV processor and passed into the ALCU through a PIM whose sole function might be to alert the ALCU of command receipt key events . The key event is added onto an event queue in the ALCU . The event queue may be in first come first order. Events in the queue are removed and routed to the other PIMs that have registered a callback for key events. Focus handling may be arbitrated through the structure of the architecture.

For instance in addition to a key event PIM a PIM may include a product specific browser PIM part that defines the interactions of that PIM with other PIMs for the particular model line it is being used in and a browser functionality part that is common across all model lines to provide Web browser functionality. Such a PIM might register to receive key events from the key event PIM in some product lines but not in others depending on the design of the particular product line and the mix of features it is intended to provide.

In the case where another PIM such as a browser PIM registers to receive key events triggered by the remote control the key event may be filtered through the ALCU utilities which can determine which application in which framework currently has focus on the TV. This allows a PIM to see the key input and further allows for hot key support isolating the system behavior within the PIM modules. The ALCU keeps track of active applications as well as parent to child relationships between applications. A parent application may have multiple child applications.

It may now be appreciated that while a single browser PIM advantageously may be provided for multiple TV model lines the browser module may be tailored to a desired higher or lower capability for a particular model line because each PIM can be programmed to define its system behavior model line by model line by registering an event handler for some events in one in model line and for other or fewer events in another model line. Once PIMs receive events routed from the ALCU events are further translated in the PIM to the associated module operation function calls.

To further promote easily adding or removing a feature PIM within a single code base for different products the above architecture renders the PIMs pluggable using the interfaces and functionalities described above. For example a browser PIM can be replaced without impacting the overall system architecture. To this end the web browser PIM has a public interface which defines the PIM s public functions which can be called from the browser PIM. Each time the ALCU calls the browser PIM the browser PIM translates the call and then invokes the PIM s public functions. In this way the browser PIM can be added removed and replaced with different browser PIMs without affecting the system architecture.

Thus the browser PIM transforms the raw key inputs which are received from the ALCU to the key format required by the browser. The browser PIM also translates the network events to a specific browser event. Using a different browser means creating a new PIM that handles the translations needed for the new browser s call set. Together both the browser PIM and browser API shown in may be regarded as a single PIM that provides the functionality of the particular browser for which the API is configured.

A modular graphics PIM may also be provided denoted X in . IT essence both the browser and a graphics renderer associated with the graphics PIM are graphics rendering agents and each can render graphics for presentation on the display independently of the other as indicated in . A graphics manager PIM may be provided to coordinate compositing the respective outputs of the graphics renderer and browser API into final screen display. The graphics renderer may be a 2D or 3D renderer and may support OpenGL.

It may now be appreciated that with the present plug in architecture with each PIM potentially being expediently tailored for different model lines as disclosed above essentially by being able to define interactions at the PIM level including application to application launch judgment to be product specific system integration time is significantly reduced compared to existing systems. A number of individual PIMs can be built into a new system in a short time period. By enhancing the software reusability the stability of final software is incremented the required manpower for software maintenance is reduced as well. Because the PIMs can be downloaded from the Internet TVs incorporating present principles can add new features over time.

In addition to the PIMs mention above by way of non limiting example PIMs may also be provided for the follow features Internet Search Internet Video Location based services Maps Telephony Communication Community Photo service up download e.g. Flickr Payments Information overlay e.g. My Page Sync to broadcast overlay computer Games Diagnostics EPG DVR. Home networking PIMs may also be provided including photo music video sharing PIMs DLNA PIM a push PIM to push data from a phone to the TV via e.g. Bluetooth etc.

Recall that each PIM registers for certain calls depending on the model line so that when an application launch is received the PIM calls a method to make an application launch judgment. If the value returned is false the PIM does not launch its associated application. Further an application in a modal line may block other applications from launching until the user makes a selection while in other model lines the application may not block other applications.

Because each PIM can be tailored for its particular model line by programming the PIM to register for appropriate calls for that model line and by programming that PIM to make application launch judgments that are desired for a particular line the same PIM can be used in multiple model lines with a different respective behavior for each line.

For example a high end model line may desire to provide the features of a user interface that is native to that product networking and a browser user interface in which case PIMs representing the native UI one or more networking PIMs representing features such as HD World digital video recorder digital living network alliance DLNA etc. may be plugged into the ALCU.

On the other hand a next lower model line may be designed to provide networking and A WEB Browser UI E.G. A local page for setup in which case PIMs providing DLNA EPG and home security features may be plugged into the ALCU. A next lower model may be designed to provide a native UI and networking and PIM providing DVR Bluetooth telephony and remote control capability may be plugged into the ALCU. A next lower model may be designed to provide a native UI without networking support in which case a BluRay DVD PIM and a Bluetooth telephony PIM may be plugged into the ALCU. A lowest end model may be designed to provide TV connection only without any extended UI in which case

While the particular MODULAR FLEXIBLE SOFTWARE Example non limiting architecture described further below FOR TV is herein shown and described in detail it is to be understood that the subject matter which is encompassed by the present invention is limited only by the claims.

