---

title: Color-coded visual comparison of decision logic
abstract: A request to compare strategies is received. The first strategy can be graphically represented by a first set of linked nodes arranged in a first form of decision logic. The second strategy can be graphically represented by a second set of linked nodes arranged in a second form of decision logic. The first set of linked nodes can be converted to a first modified set of linked nodes arranged in a third form of decision logic. The second set of linked nodes can be converted to a second modified set of linked nodes arranged in the third form of decision logic. A color-coded visual representation of the first modified set of linked nodes and the second modified set of linked nodes can be provided to a user. Related apparatus, techniques, and articles are also described.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08266090&OS=08266090&RS=08266090
owner: Fair Isaac Corporation
number: 08266090
owner_city: Minneapolis
owner_country: US
publication_date: 20080829
---
This application claims priority under 35 USC 119 to Indian Patent Application No. 1847 DEL 2007 filed on Aug. 31 2007 entitled Logical Comparison of Decision Trees the contents of which are hereby incorporated by reference.

The subject matter described herein relates to the construction of decision logic with graphs and related user interfaces.

Strategies composed of nodes and links can represent various decision logic. Strategies can represent a series of decisions that divide a population into subsets. The decisions can be made on the basis of the values of one or more variables. Strategies can be used to assign a single course of action which could be to take no action at all to each population subset. One example of decision logic is described in the U.S. Pat. No. 7 000 199 incorporated by reference hereto in its entirety.

Strategies can be represented by decision tree directed acyclic graph DAG and exception based directed acyclic graph EDAG structures. Representations of strategies can have leaf nodes sometimes referred to as action nodes a root node sometimes referred to as a start node and nodes that appear between the end nodes and the root nodes sometimes referred to as condition nodes or intermediate nodes or split nodes . Depending on the type of a structure representing the decision logic the root nodes leaf nodes and intermediate nodes can be treated differently. For example a root node can represent the beginning of an evaluation process the intermediate nodes can represent evaluation conditions tested on one or more variables and the leaf nodes can represent actions that should be taken if all of the evaluation steps corresponding to the condition nodes leading to these action nodes have been successfully resolved.

Decision trees can represent each of the decisions of the decision logic in a form of a branch. Decision trees can have one and only one root or start node. The decisions can be represented by two or more links also referred to as arcs coming out of a single node. Each branch can correspond to a set of conditions or checks that can be configured such that only one condition is true in all cases. If a condition resolves to true a link associated with this condition can be followed further. That link can lead to either an action node i.e. leaf node or to another condition node. All nodes within a decision tree can have one and only one parent node.

Condition nodes of some decision trees have either a single arc to an action node or two or more arcs to condition nodes. Some decision trees can have two arcs coming out of a single condition node and leading to two action nodes. For example two arcs coming out of a single condition node can be used to assign two actions to the two subpopulations represented by those two conditions. In some decision trees the start node can be directly connected to a single action node. In this case there are no branches or condition nodes at all.

Decision trees can be used for the graphical representation of complex decision logic involving evaluations of hundreds of variables leading to hundreds of possible outcomes. Such decision trees can require a large number of nodes that can be difficult to display and analyze.

Strategies can also be represented by a Directed Acyclic Graph or DAG. A DAG structure has a set of nodes connected by links. The decision process starts at a single root node also referred to as a start node . Some DAGs can have nodes that either have a single link to an action node or two or more links to condition nodes. Each link can go towards a node that has links coming in from other nodes. Consequently a node within a DAG structure can have more than one parent node. DAG structures do not allow links that introduce cycles in the graph. In some DAG structures a condition node can have a single link to another condition node.

Generally there are two kinds of DAG s non backtracking and backtracking. In non backtracking DAG s all nodes link to a single action node or they link to 2 or more condition nodes where the conditions of those nodes are set up so that one of them must evaluate to true. In this way every member of the population will eventually get assigned a single action without having to revisit an earlier node to explore additional possible paths to an action.

In a backtracking DAG it is possible for condition nodes to link to a single condition node or to link to multiple condition nodes where more than one of those conditions can evaluate to true. Backtracking DAGs allow backtracking to earlier nodes to explore other possible paths if a certain condition node does not evaluate to true. However the conditions of the nodes must be set up so that there is a path to an action node for every possible case from the population.

For example a DAG can be used to represent decision logic by associating each condition node to one of the decisions in the decision logic. If the condition at that node resolves to true then the decision process can proceed down one of its arcs. The decision process will eventually reach an action node that identifies the action assigned to that subpopulation or another condition node that represents the next decision. If the condition at a node is false then the decision process backs up to one of the unexplored links coming out of a node that was previously visited. The node conditions and arcs of the DAG can be set up so that it is guaranteed that exactly one action node is reached in all circumstances. Some forms of DAG structures just have a start node with a link directly to an action node without any condition nodes in between.

Strategies can also be represented by an Exception Directed Acyclic Graph EDAG . An EDAG structure is a set of nodes connected by links. In EDAG structures the decision process starts at a single root node called an Exception node. The Exception node represents the action to assign unless it is possible to assign some other action by following links to one of the action nodes. In some EDAG structures each node can have only one link going out to an action node one link going to another exception node or one or more links going to condition nodes.

EDAG structures allow each link to go towards a node that has links coming in from other nodes. In other words EDAG nodes can have more than one parent node. EDAG structures just like DAG structures do not support links that introduce cycles in the graph.

An EDAG can represent decision logic for example by associating each condition node to one of the decisions in the decision logic. If the condition at that node resolves to true then the decision process can proceed down one of its arcs. The decision process can either reach an action node that identifies the action assigned to that subpopulation or it can reach another condition node that represents the next decision. If the condition at a node resolves to false then the decision process follows one of the unexplored arcs coming out of a node that was previously visited. In some EDAG structures the decision process may never reach an action node. In other words EDAG structures can support subpopulations that are not expressly assigned to any particular action node. In that case the action represented by the most recently visited exception node can be assigned to these subpopulations. One form of an EDAG structure can be represented by a single exception node.

Decision tree DAG and EDAG structures can be leveled. A leveled decision tree can represent a structure in which all condition nodes aligned along a single column or row correspond to decisions checking the value of a single identical variable. Similarly a leveled DAG is a DAG and a leveled EDAG is an EDAG where all condition nodes correspond to decisions using the value of a single variable and all the condition nodes corresponding to the same variable are aligned along a single column or row. In addition the conditions on nodes and links between nodes can be set up so that no link goes between nodes in the same level nor does a link go from a node in a lower level to a node in a higher level. In some DAG structures the root node can appear in its own column or row and all the action nodes can appear in their own column or row. In some EDAG structures the Exception node can appear in its own column or row and all the action nodes can appear in their own column or row.

The analysis and review of strategies can involve comparisons between two or more strategies representing various decision logic. Decision logic comparison can be useful in a variety of situations including but not limited to understanding how two candidate strategies in development are different understanding how a challenger strategy i.e. a proposed strategy is different from a champion strategy i.e. an accepted strategy understanding the revisions made to a strategy over time understanding the differences between two strategies that use different leveling of variables.

Techniques are described for logically comparing strategies. In one aspect the strategies can be compared by receiving a request to compare a first strategy to a second strategy the first strategy graphically represented by a first set of linked nodes arranged in a first form of decision logic the second strategy graphically represented by a second set of linked nodes arranged in a second form of decision logic. The first set of linked nodes can be converted to a logically equivalent first modified set of linked nodes arranged in a third form of decision logic. The second set of linked nodes can be converted to a logically equivalent second modified set of linked nodes arranged in the third form of decision logic. A visual representation of the first modified set of linked nodes and the second modified set of linked nodes can be displayed to a user.

In one variation the third form of decision logic can be selected from the group consisting of a decision tree directed acyclic graph and an exception based directed acyclic graph. The third form of decision logic can be leveled. It can also be read once. The visual representation can be color coded to indicate the differences and similarities between the first modified set of linked nodes and the second modified set of linked nodes.

In another interrelated aspect comparison of strategies can be implemented by receiving a request to compare a first strategy to a second strategy from a user a first action graph can be generated corresponding to a first action node within the first strategy a second action graph can be generated corresponding to a second action node within the second strategy. A visual representation of the first action graph and the second action graph can be simultaneously displayed.

For example the first action node and the second action node can be selected by the user. The first action node and the second action node can correspond to the same action. The visual representation can be color coded to indicate the differences and similarities between the compared action graphs. In some variations the first action graph and the second action graph can be leveled action graphs. The first action graph and the second action graph can be read once action graphs.

In another interrelated aspect comparison of strategies can be implemented by identifying a first segment corresponding to a first action selected from the first strategy and a second segment corresponding to a second action selected from the second strategy. An intersection segment corresponding to the intersection of the first segment and the second segment can be generated. Using the intersection segment a cross pair graph can be generated and rendered for example to the user.

In some variations the cross pair graph can be leveled. The cross pair graph can also be read once. The first action and the second action can be selected from a crosstabulation table. The cross pair graph can be generated for each combination of the first action and the second action selected from the crosstabulation table.

In another interrelated aspect comparison of decision trees can be implemented by receiving a first tree and a second tree each tree comprising at least one leaf node the at least one leaf node assigning a population subset to an action. For each leaf node of the first tree and its corresponding population subset a sub tree can be generated representing a logical treatment of the corresponding population subset by the second tree. A diff tree can be constructed by attaching a corresponding sub tree to each leaf node of the first tree. The rendering of the diff tree can be initiated. In some variations the diff tree can be color coded.

Articles are also described that comprise a machine readable medium embodying instructions that when performed by one or more machines result in operations described herein. Similarly computer systems are also described that may include a processor and a memory coupled to the processor. The memory may encode one or more programs that cause the processor to perform one or more of the operations described herein.

The details of one or more variations of the subject matter described herein are set forth in the accompanying drawings and the description below. Other features and advantages of the subject matter described herein will be apparent from the description and drawings and from the claims.

The strategies can be compared in response to a request received from a user. The first strategy can be graphically represented by a first set of linked nodes arranged in a first form of decision logic. The second strategy can be graphically represented by a second set of linked nodes arranged in a second form of decision logic. The first set of linked nodes can be converted to a first modified set of linked nodes arranged in a third form of decision logic. The second set of linked nodes can be converted to a second modified set of linked nodes arranged in the third form of decision logic. A visual representation of the first modified set of linked nodes and the second modified set of linked nodes can be provided to a user. Related apparatus techniques and articles are also described.

At the second strategy can also be converted into the same form of decision logic selected for the conversion of the first strategy. At the resulted converted strategies can simultaneously be displayed to a user for example for visual comparison purposes. The user can be a human being or another application that can initiate a request for comparing of the strategies with the help of application programming interfaces.

Each one of the condition nodes represents a condition that can be tested on one or more variables. For example the condition node can be associated with evaluation of an RiskScr variable. In one implementation the condition node can test if the value of the RiskScr variable is less than 700. If this condition is true the decision process can evaluate conditions associated with condition nodes and . If the RiskScr variable is greater than or equal to 700 then the condition node will evaluate to true and the progress will be made to the three condition nodes . Some conditions can consist of a set of logical conditions one of which must be true at any time along with a mapping of each logical condition to one of the node s children links.

Similarly condition nodes test the value of the BehS.cor variable. For example if the BehScor variable is less than 680 the condition associated with the node will evaluate to true. As a result a decision process will proceed to the action node . In one implementation the action node can be associated with a No Action command.

Each one of the five action nodes can represent one or more actions that should be taken according to the decision tree . In some variations an action can also represent a logical conclusion. In other variations an action can represent a command to perform with one or more instructions. For example an action node may request execution of another decision tree.

The root node can be associated with the No Action conclusion. The EDAG can resolve to the No Action conclusion if the intermediate condition nodes prevent the EDAG from resolving to any other conclusion. The action node can be associated with the Monitor Report conclusion. The Monitor Report conclusion can be reached if condition nodes resolve to TRUE. The Monitor Report conclusion can also be reached if condition nodes and resolve to TRUE. Similarly the Monitor Queue conclusion can be reached if the condition nodes and resolve to TRUE. The Monitor Queue conclusion can also be reached if the condition nodes and resolve to TRUE.

The condition nodes can be resolved either to TRUE or to FALSE. Each condition node can be resolved to true if the condition associated with the node is satisfied. For example the condition node is associated with the condition 2

The EDAG can test the values of six different variables. Specifically the nodes and can test the value of the CycDInq variable. The node can test the value of the CashUtl variable. The nodes and can test the value of the Utiliz variable. The node can test the value of the Delinq variable. The node can test the value of the OnBooks variable. The nodes and can test the value of the BehScor variable.

Strategies can be compared behaviorally and or structurally. The behavioral comparison of strategies can involve determining how the strategies treat segments of a population differently. In some implementations a behavioral comparison can describe the similarities and differences in actions assigned to different population segments. For example one segment might receive Action according to the champion strategy but Action according to the challenger strategy.

When two strategies are represented with decision trees the structural comparison can describe the differences in levels branches and leaves. For example two strategies can be structurally different but behaviorally equivalent. In some implementations just changing the leveling of variables used in a strategy while keeping the strategy logically equivalent can lead to a tree that appears to be very different in its set of branches yet still assigns the exact same actions to all subpopulations as does the original strategy.

The behavioral and structural comparisons can be useful in different contexts. The behavioral comparison can be useful in a context of structurally different but behaviorally similar strategies. The structural comparisons can be useful for determining the differences in the context of a particular structure. For example the behavioral comparison can provide a useful insight that customers with high credit limits get action in decision tree and action in decision tree . The structural comparison can be used to identify the differences in structure i.e. levels branches and leaves that lead different customers to different actions. In some implementations the structural comparison can also be helpful for incorporating some aspects of one decision tree into another.

Behavioral comparison of strategies can be done by converting the compared strategies into leveled read once DAG Directed Acyclic Graph or EDAG Exception based Directed Acyclic Graph structures. EDAG structures generally have smaller number of nodes than regular decision trees. Consequently it may be beneficial to transform a decision tree into an EDAG structure for visualization purposes.

The mechanics of DAG and EDAG structures as Well as the conversion techniques are described in the U.S. Pat. No. Ser. No. 11 845 291 filed Aug. 27 2007 the contents of which are hereby fully incorporated by reference.

In some implementations the strategies can be transformed into leveled EDAG structures. Leveled strategies e.g. leveled DAGs or leveled EDAGs can be structures where the variables appearing on each level remain the same. In other words each node appearing on a specific level can use the same variables as any other node appearing on that level. illustrates one implementation of the leveled EDAG structure . This structure can be leveled because the variables on each level remain the same. For example the second level of the EDAG illustrates the condition nodes and . Both of these nodes can test the values of the CycDlnq variable. Similarly on the fourth level both condition nodes and test values of the same Utiliz variable.

In this implementation each condition node in the leveled EDAG structure can test the value of only one variable. Other implementations are possible in which condition nodes can test the values of several variables. In that case the decision tree can be leveled if each node appearing on the same level can test the values of the same collection of variables.

Read once strategies e.g. read once DAGs or read once EDAGs can be structures where variables that do not appear more than once within a single path. For example illustrates a read once EDAG structure . This structure can be read once because the variables along each path do not repeat. Specifically the left most path of the EDAG contains nodes and . The action nodes and are associated with actions each of which appear exactly once along this path. The condition nodes and are each associated with variables that also appear exactly once along this path.

In some aspects converting the strategies into logically equivalent leveled read once DAG or EDAG structures can be helpful for removing the structural differences while leaving the behavioral differences intact. Two strategies can be behaviorally identical but structurally different for example when they use a different leveling of the variables. Transforming these strategies into logically equivalent DAG structures with the same level ordering puts them on a common ground and simplifies identification of the behavioral differences between the compared strategies.

For example illustrates two structurally different decision trees and . The decision tree illustrates the root node connected to four condition nodes and . The decision tree illustrates the root node connected to three condition nodes and . Since the number of condition nodes connected to the root nodes and are different it can be inferred that the decision trees and are not structurally the same.

Converting the decision trees and to the leveled read once EDAG structures can help determining whether the decision trees are behaviorally different. It can further be helpful to display the converted structures next to each other. For example can illustrate the EDAG structure that is logically equivalent to the decision tree . also illustrates the EDAG structure that is logically equivalent to the decision tree . The EDAG structures and can be displayed side by side to simplify the identification of the behavioral differences. In this example it is apparent that the two strategies are behaviorally equivalent because DAG is equal to DAG .

In some implementations to simplify the comparison process the compared decision trees and or EDAGs can be presented side by side. In other implementations the levels of the compared decision trees can also be aligned to simplify the comparison of conditions used by the level s nodes. Further the condition nodes that are considered similar can be rendered in the same color. In some implementations the condition nodes that are considered different can be rendered in different colors.

Some implementations can use the visualization techniques discussed in a co pending patent application entitled Visualization of Decision Trees the contents of which is hereby fully incorporated by reference to highlight the logical paths that differ between the two graphs. For example all nodes that are in a path that differs between the two graphs could be rendered in full with a label while all other nodes can be rendered in a shrunken form.

In another implementation the strategies can be compared by comparing corresponding action graphs derived from these strategies. An action graph can be a set of nodes connected by links. An action graph can visually describe the population subset that is assigned a particular action by the strategy. In some implementations an action graph can have a single root node or start node and a single action node. Each node of the action graph can have either a single link going towards the action node or one or more links going towards condition nodes. Each link can go towards a node that has links coming in from other nodes. In other words nodes can have more than one parent node. Generally action graphs may not support links that introduces cycles in the graph.

An action graph can represent a decision process to determine whether to assign the action represented by the action graph or not. For example each condition node can correspond to one of the decisions in the decision logic. Beginning at the start node each link can be followed to either an action node or a condition node. If a condition node is reached and the condition at that node is true then one of the arcs associated with the condition node can be followed further down the hierarchy. If a condition node is reached and the condition at the node is false then other links from previously visited nodes can be followed. If the action node is reached then the action represented by this action graph can be assigned. If an action graph does not provide any paths to the action node such that all conditions associated with the condition nodes on that path are true the action represented by this action graph is not assigned.

In one implementation action graphs and can be leveled to simplify their comparison. In another implementation the action graphs can use any leveling that simplifies the comparison process. In some implementations the algorithm that determines the simplest leveling of the two Action graphs being compared can arrange the leveling of these graphs to match each other. In other implementations the leveling of the compared graphs may not be necessary. In some implementations the user can choose a custom ordering of levels used by both action graphs or choose an optimally determined ordering of levels that minimizes the number of nodes in one of the action graphs or in both action graphs.

In yet another implementation strategies can be compared by generating multiple cross pair graphs. Each cross pair graph can describe the subpopulation receiving an ordered pair of actions from the two strategies being compared where the first element of the ordered pair is an action assigned by the first strategy and the second element of the ordered pair is an action assigned by the second strategy. For example a cross pair graph can display the logic getting assigned action in the first decision tree and action in the second decision tree.

In some aspects each pair of actions from the two strategies can be compared to determine the intersection of those segments that get the first action of the pair in the first strategy but would get the second action of the pair in the second strategy. The intersection which is a logical expression can further be rendered as a single cross pair graph.

For example a champion strategy can be compared to a challenger strategy. If both strategies assign actions Action A Action B and Action C then comparing these two strategies can generate nine cross pair graphs as presented in the crosstabulation table below 

For example can illustrate the action graph generated for action depicted by action node for a challenger strategy. can also illustrate the action graph generated for action depicted by action node for a champion strategy. In some implementations the actions and can be identical. In other implementations the actions and can be associated with different physical acts.

The challenger strategy can be compared to the champion strategy for example by identifying the similarities within the segments that lead to the action node in the action graph and the action node in the action graph . The similarities between the action graphs and can be visualized as the cross pair graph illustrated in the . In some implementations the cross pair graph can provide a graphical representation of all logic assigned action by both the champion and challenger strategies. In other words cross pair graph represents all decision paths that lead to action node in the champion strategy and to action node in the challenger strategy.

The cross pair graph can be represented as a leveled read once directed acyclic graph. In some implementations the cross pair graph can follow an electric circuit analogy in which the root node and the terminal node can be replaced by horizontal lines similar to the ground lines in electric circuits. In this example a logical path can be represented as a complete connection from one ground line rendered at the top of the graph to another ground line at the bottom of the graph. In this representation root nodes and terminal nodes can be removed from the graph.

Generally any condition node of a leveled structure tests identical variables as any other condition node appearing on the same level. Because the condition variable in every node within a level can be the same this variable can be used to label the whole level rather than each node. As illustrated in the variables can be displayed in a single column . In that representation labeling each condition node with just the range of the condition can allow the nodes to be rendered in a more compact way.

In some implementations the intersection of segments represented by the two compared action graphs can be represented as an empty set. For example if the champion strategy assigns everyone with creditscore600 to action then the intersection of the segments of these two strategies leading to action can be represented as an empty set.

In some implementations the empty set in a crosstabulation cell can be rendered to a user by a control within a graphical user interface. For example this control can display a special notation e.g. a graphical icon associated with an empty set. In another interrelated aspect this control can display a cross pair graph if the intersection of segments corresponding to a crosstabulation cell is not empty.

The crosstabulation methodology can provide a visual representation of the behavioral similarities and or differences between the compared strategies. For example it can answer questions like 

At all logic paths leading from the root of the cross pair graph to the terminal node can be identified. In one implementation the paths can be identified by a software component designed to accept an action graph as an input and generate a collection of paths resulted from that action graph as an output.

At the collection of the identified paths can be iterated through to determine a list of the repeated variables within each path. Further a set of overlapping ranges for each repeated variable can be identified. For example a single path can have condition variables that test the value of the variable age. Within the same path one condition can test if age

At a determination can be made whether a given path contains any repeated variables without overlapping ranges. In that case at the entire path can be disregarded because the test for a repeated variable without an overlapping range can never resolve to true. For example a given path can never resolve to true if it requires that the value of the age variable be 35 simultaneously. As a result the path that contains repeated variables without an overlapping range should not be used in the computed cross pair graph.

In some implementations if it can be determined that the entire path does not have repeated variables or every repeated variable can have an overlapping range that can satisfy every test then at the path can be added to the final computed cross pair graph. In some aspects the final computed cross pair graph can be optimized by a level simplification algorithm to determine the ordering of the levels that minimizes the number of nodes in the graph.

In another implementation the strategies can be compared based on structural rather then behavioral differences. In one aspect two strategies can be compared with a diff tree display. In a diff tree display the structure of one of the compared strategies can be maintained as a baseline. The structural differences of another tree can be overlaid on top of the baseline structure.

For example each leaf in the base tree can represent a subpopulation defined by the conditions leading to that leaf node. The base tree can assign a single action to each of these subpopulations. In a diff tree display each leaf node in the base tree can serve as a position to place the root node of a sub tree. Each sub tree can represent the conditional logic describing the comparison tree s treatment of the subpopulation represented by the base tree s leaf node to which it is attached.

In one implementation the diff tree display can be useful to keep the context of one of the compared trees while understanding its differences with another compared tree. This information can be helpful to incorporate some aspects of one tree into another. In some implementations it can become easier to determine which sets of editing steps should be incorporated if the context of the original tree is maintained.

For example illustrates two strategies and . Each leaf node in these strategies can represent a segment of the population. In one configuration the decision tree can be treated as a base tree while the decision tree can be treated as the comparison tree. Each leaf of the base tree can be examined to determine how the segment it represents is treated in the comparison decision tree finding either 

In some implementations equally treated segments can be represented in the diff tree as the original leaf corresponding to the setosa leaf of the base tree drawn next to the secondary leaf corresponding to the setosa leaf of the comparison tree . In some variations the secondary leaf can be pointing to the opposite direction from the first leaf . In other variations the secondary leaf can be rendered in the same color as the original leaf to indicate that the original segment is treated equally in the comparison segment .

With continued reference to and the second from the top leaf virginica of the base tree is corresponding to the petal width

For some diff trees all leaves within the same branch that correspond to the leaves in the comparison tree can be rendered in the same color. For example the secondary leaves and correspond to the comparison tree and are rendered in the same color. The similarity in color can indicate that the base tree has a split that is not present in the comparison decision tree . In some implementations the internal node for that branch and any nodes for branches below it not shown here can be colored with the same hue as the actions in all the secondary leaves and .

The bottommost leaf virginica of the base tree represents the segment petal width 8 and petal length 50 . While everything in this segment gets the same action in the base tree the comparison tree has an additional branch that further subdivides the treatment of the petal width 8 and petal length 50 segment into those subjects that have sepal width

In one implementation the additional branch in the comparison tree can be represented in the diff tree as an additional branch rendered to the right of the leaf corresponding to the base tree leaf . In some variations the leaves of the additional branch can be rendered as secondary leaves and pointing to the opposite direction from the leaf corresponding to the base tree .

In some implementations the branches of the base tree and the comparison tree can use different split variables and or different split thresholds. For example if branches closer to the root use different split variables or different split thresholds then the additional segmentation in the diff tree might require sequences of branches that do not appear in either the base tree or the comparison tree.

Various implementations of the subject matter described herein may be realized in digital electronic circuitry integrated circuitry specially designed ASICs application specific integrated circuits computer hardware firmware software and or combinations thereof. These various implementations may include implementation in one or more computer programs that are executable and or interpretable on a programmable system including at least one programmable processor which may be special or general purpose coupled to receive data and instructions from and to transmit data and instructions to a storage system at least one input device and at least one output device.

These computer programs also known as programs software software applications or code include machine instructions for a programmable processor and may be implemented in a high level procedural and or object oriented programming language and or in assembly machine language. As used herein the term machine readable medium refers to any computer program product apparatus and or device e.g. magnetic discs optical disks memory Programmable Logic Devices PLDs used to provide machine instructions and or data to a programmable processor including a machine readable medium that receives machine instructions as a machine readable signal. The term machine readable signal refers to any signal used to provide machine instructions and or data to a programmable processor.

To provide for interaction with a user the subject matter described herein may be implemented on a computer having a display device e.g. a CRT cathode ray tube or LCD liquid crystal display monitor for displaying information to the user and a keyboard and a pointing device e.g. a mouse or a trackball by which the user may provide input to the computer. Other kinds of devices may be used to provide for interaction with a user as well for example feedback provided to the user may be any form of sensory feedback e.g. visual feedback auditory feedback or tactile feedback and input from the user may be received in any form including acoustic speech or tactile input.

The subject matter described herein may be implemented in a computing system that includes a back end component e.g. as a data server or that includes a middleware component e.g. an application server or that includes a front end component e.g. a client computer having a graphical user interface or a Web browser through which a user may interact with an implementation of the subject matter described herein or any combination of such back end middleware or front end components. The components of the system may be interconnected by any form or medium of digital data communication e.g. a communication network . Examples of communication networks include a local area network LAN a wide area network WAN and the Internet.

The computing system may include clients and servers. A client and server are generally remote from each other and typically interact through a communication network. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client server relationship to each other.

Although a few variations have been described in detail above other modifications are possible. For example the logic flow depicted in the accompanying figures and described herein do not require the particular order shown or sequential order to achieve desirable results. Other embodiments may be within the scope of the following claims.

