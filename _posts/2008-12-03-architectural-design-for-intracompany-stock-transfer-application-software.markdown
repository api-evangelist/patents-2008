---

title: Architectural design for intra-company stock transfer application software
abstract: Methods, systems, and apparatus, including computer program products, for implementing a software architecture design for a software application implementing intra-company stock transfer of physical inventory. The application is structured as multiple process components interacting with each other through service operations, each implemented for a respective process component. The process components include a Supply and Demand Matching process, a Customer Requirement Processing process component, a Logistics Execution Control process component, a Site Logistics Processing process component, an Outbound Delivery Processing process component, an Inbound Delivery Processing process component, an Inventory Processing process component, a Production and Site Logistics Auxiliaries process component and a Freight Documents Processing process component.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08311904&OS=08311904&RS=08311904
owner: SAP AG
number: 08311904
owner_city: Walldorf
owner_country: DE
publication_date: 20081203
---
The subject matter of this patent application relates to computer software architecture and more particularly to the architecture of application software for intra company stock transfer of physical inventory.

Enterprise software systems are generally large and complex. Such systems can require many different components distributed across many different hardware platforms possibly in several different geographical locations. Thus the architecture of a large software application i.e. what its components are and how they fit together is an important aspect of its design for a successful implementation.

This specification presents a software architecture design for an intra company stock transfer software application.

In various aspects the invention can be implemented as methods systems and apparatus including computer program products for implementing a software architecture design for a software application implementing intra company stock transfer. The application is structured as multiple process components interacting with each other through service operations each implemented for a respective process component. The process components include a Supply and Demand Matching process a Customer Requirement Processing process component a Logistics Execution Control process component a Site Logistics Processing process component an Outbound Delivery Processing process component an Inbound Delivery Processing process component an Inventory Processing process component a Production and Site Logistics Auxiliaries process component and a Freight Documents Processing process component.

The subject matter described in this specification can be implemented to realize one or more of the following advantages. Effective use is made of process components as units of software reuse to provide a design that can be implemented reliably in a cost effective way. Effective use is made of deployment units each of which is deployable on a separate computer hardware platform independent of every other deployment unit to provide a scalable design. Service interfaces of the process components define a pair wise interaction between pairs of process components that are in different deployment units in a scalable way.

Details of one or more implementations of the subject matter described in this specification are set forth in the accompanying drawings and in the description below. Further features aspects and advantages of the subject matter will become apparent from the description the drawings and the claims.

The Financials deployment unit manages the recording and valuation of business transactions and the estimation of costs and profits. In general the Financials deployment unit is responsible for both financial and management accounting.

The Production and Site Logistics Execution deployment unit manages the production assembly packing movement and storage of goods including the execution of logistic processes from the receiving of raw materials through to the shipment of a sales item. The Production and Site Logistics Execution deployment unit can manage inbound and outbound deliveries production material inspection site logistics processing inventory and physical inventory processing.

The Supply Chain Control deployment unit includes a Supply and Demand Matching process component a Customer Requirement Processing process component and a Logistics Execution Control process component . The Supply and Demand Matching process component manages tasks to ensure that sufficient material receipt elements exist to cover material demand while taking available capacity into account. The Customer Requirement Processing process component controls the customer requirements in the supply chain. For example this can involve checking material availability receiving preparing and passing customer requirements on to supply planning and logistics and providing feedback on fulfillment. The Logistics Execution Control process component creates controls and monitors the supply chain execution activities that are necessary for the fulfillment of an order on a macro logistics level. For example the Logistics Execution Control process component can use delivery requests to trigger the necessary site logistics activities and receive information about the supply chain execution progress.

The Financials deployment unit includes an Accounting process component . The Accounting process component handles the representation of relevant business transactions for valuation and profitability analysis.

The Production and Site Logistics Execution deployment unit includes a Site Logistics Processing process component an Outbound Delivery Processing process component an Inbound Delivery Processing process component an Inventory Processing process component a Production and Site Logistics Auxiliaries Processing process component and a Freight Documents Processing process component . The Site Logistics Processing process component prepares physically executes and confirms the logistics processes within a site. The logistics processes which are based on site logistics process models generally include picking shipping and receiving. The Outbound Delivery Processing process component manages and processes the outbound delivery requirements for shipping goods to a product recipient. For example the process component combines document based tasks for the outbound delivery process and enables communication with the originating document e.g. fulfillment the product recipient and invoicing. The Inbound Delivery Processing process component manages and processes the inbound delivery requirements for received goods from a vendor. For example the process component combines document based tasks for the inbound delivery process and enables communication with the originating document e.g. fulfillment the vendor and invoicing. The Inventory Processing process component manages the inventory and recording of inventory changes. For example the process component provides services to maintain current stock content and structure of logistic units and allocations. The Production and Site Logistics Auxiliaries Processing process component supports the functionality valid for multiple process components in the DU Production and Site Logistics Execution. The Freight Documents Processing process component processes the freight related documents for shipping purposes.

A Transportation Management at Freight Forwarder external process component will be used to describe the architectural design. The Transportation Management at Freight Forwarder process component handles processing external freight in a forwarder system.

The architectural design also includes a Goods Tag Processing process component for processing activities related to goods tags such as the printing of labels. The Goods Tag Processing process component is included in the Foundation layer .

Not explicitly represented in the figures is a foundation layer that contains all fundamental entities that are used in multiple deployment units. These entities can be process components business objects and reuse service components. A reuse service component is a piece of software that is reused in different transactions. A reuse service component is used by its defined interfaces which can be e.g. local APIs Application Programming Interfaces or service interfaces.

In contrast to a deployment unit the foundation layer does not define a limit for application defined transactions. Deployment units communicate directly with entities in the foundation layer which communication is typically not message based. The foundation layer is active in every system instance on which the application is deployed. Business objects in the foundation layer will generally be master data objects. In addition the foundation layer will include some business process objects that are used by multiple deployment units. Master data objects and business process objects that should be specific to a deployment unit are assigned to their respective deployment unit.

A process component of an external system is drawn as a dashed line process component drawn as icon . Such a process component is used to represent the external system in describing interactions with the external system however this should be understood to require no more of the external system that it be able to produce and receive messages as required by the process component that interacts with the external system.

Interactions between process component pairs involving their respective business objects process agents operations interfaces and messages are described as process component interactions which determine the interactions of a pair of process components across a deployment unit boundary i.e. from one deployment unit to another deployment unit. Interactions between process components are indicated in by directed lines arrows . Interactions between process components within a deployment unit need not be described except to note that they exist as these interactions are not constrained by the architectural design and can be implemented in any convenient fashion. Interactions between process components that cross a deployment unit boundary will be illustrated by the figures of this patent application these figures will show the relevant elements associated with potential interaction between two process components but interfaces process agents and business objects that are not relevant to the potential interaction will not be shown.

The architectural design is a specification of a computer software application and elements of the architectural design can be implemented to realize a software application that implements the end to end process mentioned earlier. The elements of the architecture are at times described in this specification as being contained or included in other elements for example a process component is described as being contained in a deployment unit. It should be understood however that such operational inclusion can be realized in a variety of ways and is not limited to a physical inclusion of the entirety of one element in another.

The architectural elements include the business object. A business object is a representation of a type of a uniquely identifiable business entity an object instance described by a structural model. Processes operate on business objects.

A business object represents a specific view on some well defined business content. A business object represents content which a typical business user would expect and understand with little explanation. Business objects are further categorized as business process objects and master data objects. A master data object is an object that encapsulates master data i.e. data that is valid for a period of time . A business process object which is the kind of business object generally found in a process component is an object that encapsulates transactional data i.e. data that is valid for a point in time . The term business object will be used generically to refer to a business process object and a master data object unless the context requires otherwise. Properly implemented business objects are implemented free of redundancies.

The architectural elements also include the process component. A process component is a software package that realizes a business process and generally exposes its functionality as services. The functionality includes the ability to perform all or parts of particular kinds of business transactions. A process component contains one or more semantically related business objects. Any business object belongs to no more than one process component.

Process components are modular and context independent. That they are context independent means that a process component is not specific to any specific application and is reusable. The process component is the smallest most granular element of reuse in the architecture.

The architectural elements also include the operation. An operation belongs to exactly one process component. A process component generally has multiple operations. Operations can be synchronous or asynchronous corresponding to synchronous or asynchronous process agents which will be described below. An operation is the smallest separately callable function described by a set of data types used as input output and fault parameters serving as a signature.

The architectural elements also include the service interface referred to simply as the interface. An interface is a named group of operations. Each operation belongs to exactly one interface. An interface belongs to exactly one process component. A process component might contain multiple interfaces. In some implementations an interface contains only inbound or outbound operations but not a mixture of both. One interface can contain both synchronous and asynchronous operations. All operations of the same type either inbound or outbound which belong to the same message choreography will belong to the same interface. Thus generally all outbound operations to the same other process component are in one interface.

The architectural elements also include the message. Operations transmit and receive messages. Any convenient messaging infrastructure can be used. A message is information conveyed from one process component instance to another with the expectation that activity will ensue. An operation can use multiple message types for inbound outbound or error messages. When two process components are in different deployment units invocation of an operation of one process component by the other process component is accomplished by an operation on the other process component sending a message to the first process component.

The architectural elements also include the process agent. Process agents do business processing that involves the sending or receiving of messages. Each operation will generally have at least one associated process agent. A process agent can be associated with one or more operations. Process agents can be either inbound or outbound and either synchronous or asynchronous.

Asynchronous outbound process agents are called after a business object changes e.g. after a create update or delete of a business object instance.

An outbound process agent will generally perform some processing of the data of the business object instance whose change triggered the event. An outbound agent triggers subsequent business process steps by sending messages using well defined outbound services to another process component which generally will be in another deployment unit or to an external system. An outbound process agent is linked to the one business object that triggers the agent but it is sent not to another business object but rather to another process component. Thus the outbound process agent can be implemented without knowledge of the exact business object design of the recipient process component.

Inbound process agents are called after a message has been received. Inbound process agents are used for the inbound part of a message based communication. An inbound process agent starts the execution of the business process step requested in a message by creating or updating one or multiple business object instances. An inbound process agent is not the agent of a business object but of its process component. An inbound process agent can act on multiple business objects in a process component.

Synchronous agents are used when a process component requires a more or less immediate response from another process component and is waiting for that response to continue its work.

Operations and process components are described in this specification in terms of process agents. However in alternative implementations process components and operations can be implemented without use of agents using other conventional techniques to perform the functions described in this specification.

The architectural elements also include the deployment unit. A deployment unit includes one or more process components that are deployed together on a single computer system platform. Conversely separate deployment units can be deployed on separate physical computing systems. For this reason a deployment unit boundary defines the limits of an application defined transaction i.e. a set of actions that have the ACID properties of atomicity consistency isolation and durability. To make use of database manager facilities the architecture requires that all operations of such a transaction be performed on one physical database as a consequence the processes of such a transaction must be performed by the process components of one instance of one deployment unit.

The process components of one deployment unit interact with those of another deployment unit using messages passed through one or more data communication networks or other suitable communication channels. Thus a deployment unit deployed on a platform belonging one business can interact with a deployment unit software entity deployed on a separate platform belonging to a different and unrelated business allowing for business to business communication. More than one instance of a given deployment unit can execute at the same time on the same computing system or on separate physical computing systems. This arrangement allows the functionality offered by a deployment unit to be scaled to meet demand by creating as many instances as needed.

Since interaction between deployment units is through service operations a deployment unit can be replaced by other another deployment unit as long as the new deployment unit supports the operations depended upon by other deployment units. Thus while deployment units can depend on the external interfaces of process components in other deployment units deployment units are not dependent on process component interaction within other deployment units. Similarly process components that interact with other process components or external systems only through messages e.g. as sent and received by operations can also be replaced as long as the replacement supports the operations of the original.

As shown in the Inventory Processing process component includes an Inventory business object . The Inventory business object represents the quantity of all the materials in a certain location including the material reservations at this location. In some implementations quantities of materials can be physically grouped using identified logistic units.

The Inventory business object uses a Notify of Inventory Reconciliation from Inventory to Supply and Demand Matching outbound process agent to invoke a Notify Planning of Inventory Reconciliation operation . The operation notifies the Supply and Demand Matching process component about the reconciliation of aggregated inventory quantities aggregated on a material and supply planning area level. The Notify Planning of Inventory Reconciliation operation is included in an Inventory Reconciliation Out interface . The Notify Planning of Inventory Reconciliation operation sends a Planning View of Inventory Reconciliation Notification message to the Supply and Demand Matching process component .

A Maintain Planning View of Inventory based on Inventory Reconciliation operation receives the Planning View of Inventory Reconciliation Notification message . The operation is included in an Inventory Reconciliation In interface . For example the Maintain Planning View of Inventory based on Inventory Reconciliation operation maintains total inventory quantities in supply planning.

The Maintain Planning View of Inventory based on Inventory Reconciliation operation uses a Maintain Planning View of Inventory based on Inventory Reconciliation inbound process agent to update a Planning View of Inventory business object . The Planning View of Inventory business object represents a view of a material stock aggregated at the level of the supply planning area or at the level of the supply planning area and product requirement specification.

The Site Logistics Processing process component includes a Site Logistics Confirmation business object . The Site Logistics Confirmation business object represents a record of confirmed logistic process changes which result from the execution of a site logistics process at a specific time e.g. inventory changes plan adjustments resource utilizations and progress status changes .

The Site Logistics Confirmation business object uses a Notify of Inventory Change from Site Logistics Confirmation to Accounting outbound process agent to invoke a Notify of Inventory Change and Activity Conformation operation . For example the operation notifies the Accounting process component about inventory changes for physical goods and activity confirmations and to trigger a valuation of the relevant inventory changes and activities. The process agent can also invoke a Notify of Inventory Change and Activity Confirmation Cancellation operation . For example the operation notifies the Accounting process component about a cancellation of inventory changes and activity confirmations sent earlier. The operations are included in an Inventory and Activity Accounting Out interface .

If the Notify of Inventory Change and Activity Confirmation operation is invoked an Inventory Change and Activity Confirmation Accounting Notification message is sent to the Accounting process component . If the Notify of Inventory Change and Activity Confirmation Cancellation operation is invoked an Inventory Change and Activity Confirmation Cancellation Accounting Notification message is sent to the Accounting process component .

If the Inventory Change and Activity Confirmation Accounting Notification message is received then a Create Accounting Document operation is invoked. The operation can create an accounting document based on inventory data received from the Inventory Processing Site Logistics Processing or Production process components. The received data is first converted into an accounting notification from which one of more accounting documents are created according to the relevant sets of books.

If the Inventory Change and Activity Confirmation Cancellation Accounting Notification message is received then Cancel Accounting Document operation is invoked. The operation can cancel an existing accounting document based on cancellation data received from the Inventory Processing Site Logistics Processing or Production process components. The received data is converted into an accounting notification from which one or more reversal accounting documents are created according to the relevant sets of books. The operations and are included in an Inventory and Activity Accounting In interface .

The Create Accounting Document operation and the Cancel Accounting Document operation use a Maintain Accounting Document based on Inventory and Activity inbound process agent to update an Accounting Notification business object . The Accounting Notification business object represents a notification sent to Financial Accounting by an operational component regarding a business transaction. For example it represents the operational business transaction in a standardized form for business transaction documents and contains data for valuating the business transaction.

Interactions Between Process Components Logistics Execution Control and Outbound Delivery Processing 

As shown in the Logistics Execution Control process component includes a Logistics Execution Requisition business object . The Logistics Execution Requisition business object represents a requisition to Logistics Execution Control to control trigger and monitor the execution of a logistics process on a macro logistics level to fulfill an order.

The Logistics Execution Requisition business object uses a Request Fulfillment from Logistics Execution request to Outbound Delivery Processing outbound process agent to invoke a Request Delivery Fulfillment operation . The Request Delivery Fulfillment operation can create or update an inbound or outbound delivery request. The operation is included in a Fulfillment Out interface .

The Request Delivery Fulfillment operation sends a Delivery Request Fulfillment Request message to the Outbound Delivery Processing process component . If the Delivery Request Fulfillment Request message is received then a Maintain Outbound Delivery Request operation is invoked. The operation can receive an outbound delivery fulfillment request. The operation is included in a Fulfillment In interface .

The Maintain Outbound Delivery Request operation uses a Maintain Outbound Delivery Request inbound process agent to update an Outbound Delivery Request business object . The Outbound Delivery Request business object represents a request to a vendor to compose goods for shipping. The Outbound Delivery Request business object uses a Confirm Fulfillment of Outbound Delivery Request to Logistics Execution Control outbound process agent to invoke a Confirm Fulfillment operation . For example the operation can confirm and fulfill an outbound delivery request. The process agent can also invoke the Notify Planning of Delivery Request Confirmation Reconciliation operation . For example the operation can notify the Logistics Execution Control process component of a delivery request fulfillment confirmation for reconciliation purposes. The operations and are included in a Fulfillment Out interface .

If the Confirm Fulfillment operation is invoked a Delivery Request Fulfillment Confirmation message is sent to the Logistics Execution Control process component . If the Notify Planning of Delivery Request Confirmation Reconciliation operation is invoked a Delivery Request Fulfillment Confirmation Reconciliation Notification message is sent to the Logistics Execution Control process component .

If the Delivery Request Fulfillment Confirmation message is received then a Change Logistics Execution Requisition based on Delivery Fulfillment Confirmation operation is invoked. The operation can update a logistics execution requisition with fulfillment confirmation data from an inbound or outbound delivery request and update supply and demand matching with any planning relevant inventory changes.

If the Delivery Request Fulfillment Confirmation Reconciliation Notification message is received then a Change Based on Delivery Fulfillment Confirmation Reconciliation Notification operation is invoked. The operation can reconcile a logistics execution requisition with its related outbound or inbound delivery request. The operations and are included in a Fulfillment In interface .

The Change Logistics Execution Requisition based on Delivery Fulfillment Confirmation operation and the Change Based on Delivery Fulfillment Confirmation Reconciliation Notification operation use a Change Logistics Execution Requisition based on Delivery Fulfillment Confirmation inbound process agent to update the Logistics Execution Requisition business object .

Interactions Between Process Components Outbound Delivery Processing and Inbound Delivery Processing 

As shown in the Outbound Delivery Processing process component includes an Outbound Delivery business object . The Outbound Delivery business object represents a composition of the goods that is provided for shipping by a vendor.

The Outbound Delivery business object uses a Notify of Outbound Delivery to Inbound Delivery Processing at Customer outbound process agent to invoke a Notify of Outbound Delivery operation . The operation requests to send a delivery dispatch advice notification. The operation is included in a Delivery Notification Out interface . The Notify of Outbound Delivery operation sends a Delivery Dispatch Advice Notification message to the Inbound Delivery Processing process component .

The Maintain Inbound Delivery operation receives the Delivery Dispatch Advice Notification message . For example the Maintain Inbound Delivery operation receives a delivery dispatch advice notification from a supplier. The operation is included in a Delivery Notification In interface .

The Maintain Inbound Delivery operation uses a Maintain Inbound Delivery inbound process agent to update an Inbound Delivery business object . The Inbound Delivery business object represents a composition of the goods that are received by a product recipient.

As shown in the Logistics Execution Control process component includes a Logistics Execution Requisition business object . The Logistics Execution Requisition business object represents a requisition to Logistics Execution Control to control trigger and monitor the execution of a logistics process on a macro logistics level to fulfill an order.

The business object uses a Request Fulfillment from Logistics Execution Request to Inbound Delivery Processing outbound process agent to invoke a Request Delivery Fulfillment operation . The Request Delivery Fulfillment operation can create or update an inbound or outbound delivery request. The operation is included in a Fulfillment Out interface .

The Request Delivery Fulfillment operation sends a Delivery Request Fulfillment Request message to the Inbound Delivery Processing process component . A Maintain Inbound Delivery Request operation receives the Delivery Request Fulfillment Request message . The message can include an inbound delivery fulfillment request. The operation is included in a Fulfillment In interface .

The Maintain Inbound Delivery Request operation uses Maintain Inbound Delivery Request inbound process agent to update an Inbound Delivery Request business object . The Inbound Delivery Request business object represents a request to a production recipient to receive a composition of goods.

The Inbound Delivery Request business object uses a Confirm Fulfillment of Inbound Delivery Request to Logistics Execution Control outbound process agent to invoke a Confirm Fulfillment operation . The operation can confirm the fulfillment of an outbound delivery request. The process agent can also invoke a Notify Planning of Delivery Request Confirmation Reconciliation operation The operation can notify the Logistics Execution Control process component of a delivery request fulfillment confirmation for reconciliation purposes. The operations and are included in a Fulfillment Out interface .

The Confirm Fulfillment operation sends a Delivery Request Fulfillment Confirmation message to the Logistics Execution Control process component . The Change Logistics Execution Requisition based on Delivery Fulfillment Confirmation operation receives the message . For example the operation updates a logistic executing requisition with fulfillment confirmation data from an inbound or outbound delivery request and updates supply and demand matching with any planning relevant inventory changes.

The Notify Planning of Delivery Request Confirmation Reconciliation operation sends a Delivery Request Fulfillment Confirmation Reconciliation Notification message to the Logistics Execution Control process component . The Change Based on Delivery Fulfillment Confirmation Reconciliation Notification operation receives the message . The operation can reconcile a logistics execution requisition with its related outbound or inbound delivery request. The operations and are included in a Fulfillment In interface .

The operations and use a Change Logistics Execution Requisition based on Delivery Fulfillment Confirmation inbound process agent to update the Logistics Execution Requisition business object .

As shown in the Goods Tag Processing process component includes a Goods Tag business object . The Goods Tag business object represents an electronic device a small piece or part or a label that is attached to a product or package and that contains selected information about this product or package. Its purpose is to present this information to a reader.

The Goods Tag business object uses a Notify of Goods Tag for Output outbound process agent to invoke a Notify of Unspecified Content Package Tag operation . For example the operation can request the output of goods tags of the type unspecified content package tag. The outbound process agent can also invoke a Notify of Uniform Content Package Tag operation . For example the operation can request the output of goods tags of the type uniform content package tag. The outbound process agent can also invoke a Notify of Serialized Material Tag operation . For example the operation can request the output of goods tags of the type serialized material tag. The operations and are included in a Goods Tag Output Out interface .

The Notify of Unspecified Content Package Tag operation generates a Form Unspecified Content Package Tag notification message . The Notify of Uniform Content Package Tag operation generates a Form Uniform Content Package Tag Notification message . The Notify of Serialized Material Tag operation generates a Form Serialized Material Tag Notification message .

As shown in the Site Logistics Processing process component includes a Site Logistics Task business object . The Site Logistics Task business object represents a task for executing a logistics operation or activity within a site. It represents a piece of work to be performed by a person or an automated system.

The Site Logistics Task business component uses Request Site Logistics Task Execution for Output outbound process agent to invoke a Request Site Logistics Task Execution operation . For example the operation requests the printing of site logistics task instructions. The operation is included in a Site Logistics Task Output Out interface . The Request Site Logistics Task Execution operation generates a Form Site Logistics Task Execution Request message .

Interactions Between Process Component Freight Documents Processing and Transportation Management at Freight Forwarder 

As shown in the Freight Documents Processing process component includes a Freight List business object . The Freight List business object represents a document detailing a list of shipped goods that are to be transported the business partners and the mode of transportation.

The Freight List business object uses a Notify of Freight List for Output to Transportation Management at Freight Forwarder outbound process agent to invoke a Output Waybill operation . The operation requests the printing of a waybill. The operation is included in a Waybill Notification Out interface . The Output Waybill operation sends a Form Waybill Notification message to the Transportation Management at Freight Forwarder external process component .

The subject matter described in this specification and all of the functional operations described in this specification can be implemented in digital electronic circuitry or in computer software firmware or hardware including the structural means disclosed in this specification and structural equivalents thereof or in combinations of them. The subject matter described in this specification can be implemented as one or more computer program products i.e. one or more computer programs tangibly embodied in an information carrier e.g. in a machine readable storage device or in a propagated signal for execution by or to control the operation of data processing apparatus e.g. a programmable processor a computer or multiple computers. A computer program also known as a program software software application or code can be written in any form of programming language including compiled or interpreted languages and it can be deployed in any form including as a stand alone program or as a module component subroutine or other unit suitable for use in a computing environment. A computer program does not necessarily correspond to a file. A program can be stored in a portion of a file that holds other programs or data in a single file dedicated to the program in question or in multiple coordinated files e.g. files that store one or more modules sub programs or portions of code . A computer program can be deployed to be executed on one computer or on multiple computers at one site or distributed across multiple sites and interconnected by a communication network.

The processes and logic flows described in this specification can be performed by one or more programmable processors executing one or more computer programs to perform functions by operating on input data and generating output. The processes and logic flows can also be performed by and apparatus can also be implemented as special purpose logic circuitry e.g. an FPGA field programmable gate array or an ASIC application specific integrated circuit .

Processors suitable for the execution of a computer program include by way of example both general and special purpose microprocessors and any one or more processors of any kind of digital computer. Generally a processor will receive instructions and data from a read only memory or a random access memory or both. The essential elements of a computer are a processor for executing instructions and one or more memory devices for storing instructions and data. Generally a computer will also include or be operatively coupled to receive data from or transfer data to or both one or more mass storage devices for storing data e.g. magnetic magneto optical disks or optical disks. Information carriers suitable for embodying computer program instructions and data include all forms of non volatile memory including by way of example semiconductor memory devices e.g. EPROM EEPROM and flash memory devices magnetic disks e.g. internal hard disks or removable disks magneto optical disks and CD ROM and DVD ROM disks. The processor and the memory can be supplemented by or incorporated in special purpose logic circuitry.

To provide for interaction with a user the subject matter described in this specification can be implemented on a computer having a display device e.g. a CRT cathode ray tube or LCD liquid crystal display monitor for displaying information to the user and a keyboard and a pointing device e.g. a mouse or a trackball by which the user can provide input to the computer. Other kinds of devices can be used to provide for interaction with a user as well for example feedback provided to the user can be any form of sensory feedback e.g. visual feedback auditory feedback or tactile feedback and input from the user can be received in any form including acoustic speech or tactile input.

The subject matter described in this specification can be implemented in a computing system that includes a back end component e.g. a data server a middleware component e.g. an application server or a front end component e.g. a client computer having a graphical user interface or a Web browser through which a user can interact with an implementation of the subject matter described herein or any combination of such back end middleware and front end components. The components of the system can be interconnected by any form or medium of digital data communication e.g. a communication network. Examples of communication networks include a local area network LAN and a wide area network WAN e.g. the Internet.

The computing system can include clients and servers. A client and server are generally remote from each other and typically interact through a communication network. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client server relationship to each other.

While this specification contains many specifics these should not be construed as limitations on the scope of the invention or of what may be claimed but rather as an exemplification of preferred embodiments of the invention. Certain features that are described in this specification in the context of separate embodiments may also be provided in combination in a single embodiment. Conversely various features that are described in the context of a single embodiment may also be provided in multiple embodiments separately or in any suitable subcombination. Moreover although features may be described above as acting in certain combinations and even initially claimed as such one or more features from a claimed combination can in some cases be excised from the combination and the claimed combination may be directed to a subcombination or variation of a subcombination.

The subject matter has been described in terms of particular variations but other variations can be implemented and are within the scope of the following claims. For example the actions recited in the claims can be performed in a different order and still achieve desirable results. As one example the processes depicted in the accompanying figures do not necessarily require the particular order shown or sequential order to achieve desirable results. In certain implementations multitasking and parallel processing may be advantageous. Other variations are within the scope of the following claims.

