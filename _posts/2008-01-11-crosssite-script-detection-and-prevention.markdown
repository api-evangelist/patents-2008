---

title: Cross-site script detection and prevention
abstract: A Web site uses a behavior monitor that operates as a gatekeeper for a browser. The attack injects Web content with malicious executable code that executes on an end user device when the code executes in a browser on the device. A message is received at the monitor from a browser for retrieving Web content; the browser executes on a computing device having sensitive information. The Web content is retrieved from a target Web server and analyzed for XSS. If found, the destination to which some or all of the sensitive information will be sent if the XSS executes is determined. A message is displayed in the browser regarding whether the Web content that was requested should be viewed in the browser. In this manner, execution of the XSS in the browser is prevented. The analyzing and determining steps are performed before the Web content is received by the browser.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08578482&OS=08578482&RS=08578482
owner: Trend Micro Inc.
number: 08578482
owner_city: Tokyo
owner_country: JP
publication_date: 20080111
---
The present invention generally relates to computer and end user device security from malicious software transmitted by entities over the Internet. More specifically it relates to detecting and preventing Cross site scripting attacks on such devices.

Cross site scripting XSS is a type of computer and IP enabled device security vulnerability typically found in Web applications and content which allows malicious attackers to inject code such as HTML code or client side script code e.g. JavaScript into the source code of Web pages viewed and downloaded by users. For example by incorporating JavaScript code into a Web page s source code a Web server is able to send executable code to a browser. Such script code may be manipulated e.g. altered or replaced by malicious attackers to cause harm to or invade a user s computing device for example stealing the user s private or sensitive information when the script code is executed in the user s browser.

Downloading content from Web sites into browsers running on end user devices such as PCs and cell phones is becoming increasingly popular. This content may have holes or vulnerabilities that allow malicious parties to inject executable code into the content without the owner or operator of the content knowing that it is being done. When a user downloads this content into his or her browser the executable code runs on the user s device and transmits data about the user such as cookie data to the attacker s Web server. In this manner a wealth of information about the user such as personal preferences account numbers contact information and the like may be obtained by unauthorized parties. The term Cross site scripting derives its name from the fact that a user obtains content from one Web site typically a legitimate known site and by downloading the content into the user s browser sends sensitive private information to another unknown site thus the user is unwittingly cross communicating with two different sites.

Techniques for dealing with XSS attacks include using a Web Reputation System WRS which uses a Web site reputation mechanism that users can use to prevent visiting harmful Web sites or sites that have experiences XSS attacks and other malicious interference. However WRS does not prevent Web sites with good reputations from being infected with malicious script. Furthermore it is not granular in that it gives an entire Web site a poor rating even if a majority of the pages at the site is not harmful nor has been and only a few pages have been infected with XSS attacks. In these cases all the content is given a poor rating.

Another tool used is URL filtering engines such as the TMUFE product from Trend Micro Inc. of Cupertino Calif. Such URL filtering engines block malicious domains and URLs but are not effective in detecting XSS vulnerabilities in Web sites nor are they able to detect data leakage from a user s device resulting from executing script code unexpectedly inserted in downloaded Web content. Another method that has been used to detect and prevent XSS attacks is filtering that enable applications to filter out invalid input or encode special characters such as encoding all user supplied HTML special characters thereby preventing these special characters from being interpreted as HTML. However filtering has also fallen short of detecting various types of injected script code and preventing sensitive information from a user s device from being transmitted to unauthorized Web sites.

One embodiment of the present invention is a method of detecting and preventing a Cross site script attack at a Web site in which Web content or a Web page is injected with malicious executable code that executes on an end user device when the code executes in a browser on the device. A message is received from a browser for retrieving Web content where the browser executes on a computing device having sensitive information. The Web content is retrieved from a target Web server and analyzed for Cross site scripting XSS . If XSS is found the destination to which some or all of the sensitive information will be sent if the XSS executes is determined. A message is displayed in the browser relating to whether the Web content that was requested should be viewed in the browser. In this manner execution of the XSS in the browser may be prevented. In one embodiment the analyzing and determining steps are performed before the Web content is received by the browser.

Another embodiment is a client device having a browser and capable of detecting and preventing the execution of XSS on the device. The device includes at least one processor a network interface and a memory for storing Web content that has been requested by the browser. The device also includes a cross site script detection monitor having a browser interface a Web interface and a Web content analysis module. The analysis module may include or operate in conjunction with a URL determination component and a URL validation component. The cross site script detection monitor detects malicious XSS that enables transmission of sensitive data relating to the client device to an unauthorized Web site.

Other embodiments of the invention pertain to computer program products including tangible machine readable medium including various forms and implementations of volatile and non volatile memory on which are stored program instructions for implementing any of the methods described herein. Any of the methods processes sub processes threads formulas calculations and the like of this invention may be represented as program instructions and or databases data structures data tables and so on that can be provided on such computer readable media.

These and other features and advantages of the present invention are described below with reference to the drawings.

Methods and systems for detecting a Cross site script XSS injected into Web content downloaded from a third party Web site into a browser in a client or end user computer or other IP enabled computing device are described in the various figures. As described in greater detail below there are various types of XSS that may be used to obtain personal and sensitive information from any IP enabled computing device capable of downloading content from the Internet and executing that content. XSS is inserted by a malicious party into a third party Web page which will be viewed or downloaded by a user. In a typical scenario it is the intent of the malicious party to obtain personal and private information from the target user s device often a wired or wireless PC but may also include cell phones and other increasingly widespread portable computing devices. The malicious party is able to insert the XSS code into the third party Web page or Web site using what is referred to as an XSS vulnerability or hole. Once the XSS is in the Web content the malicious party simply has to wait for a target user to download the content at which stage the script may execute on the target user s end device thereby obtaining private information and transmitting the information to the malicious party Web site or a designated . illustrate this scenario and the context in which various embodiments of the present invention may be implemented.

In an intruder script is transmitted from intruder Web site over a network represented by arrow for ease of illustration into the HTML code of page via point of entry . Techniques for finding points of entry or vulnerabilities in Web applications are known in the art of Internet programming and are beyond the scope of the present invention.

However the common factor in all these scenarios is that the insertion of the XSS or intruder code into the Web page or Web application is unbeknownst to the operator creator owner of the page or application and typically lays dormant until a user downloads the page or application to his or her computing device for viewing or execution via a browser on the device. It is typically a goal of the Web application developer to write code regardless of which mark up or scripting language is being used so that unauthorized parties are not able to insert any content into the application or tamper with the application code in any manner. However sometimes holes or vulnerabilities are overlooked and XSS code such as intruder script can be inserted into an application by a malicious party. In other examples intruder script may also be inserted as visible content in the form of a message or posting at a Web site such as a social networking site or in a blog. That is XSS code or any malicious code may be inserted in areas where the public can leave messages post a comment make an entry e.g. in a blog among many other examples. In these scenarios the intruder is not taking advantage of a hole in the code but rather using an invitation or offer to leave content to leave malicious code.

Also shown in is a client computing device such as a PC or cell phone that is connected to the same network as third party Web site and intruder Web site not shown in . A connection represents an Internet connection between client device and Web site and is used to transmit Web page from the site to device typically at the request of the device user. In one embodiment it is a bi directional communication connection that enables device to communicate with third party Web site or with other sites for example potentially malicious Web sites. Further details on communications between device and third party site are described below. Client device has a behavior monitor and a Web browser . Client device may be any device that is capable of receiving and transmitting data over the Internet and has a browser or similar software component for viewing Web content and applications which may require executing the content applications. As noted another increasingly popular type of computing device is the cell phone which is becoming more of a multimedia portable handset for viewing online content.

In one embodiment Web page is downloaded onto client device after first being received by monitor before being executed by browser . In other embodiments monitor may be a component operating within browser . Operations and further details on behavior monitor are described in . As described below one of the functions of behavior monitor is to prevent information relating to client device from being transmitted to intruder Web site or other to a URL as directed by a malicious user not shown in . Normally if monitor were not present private and sensitive data about client device and its user such as cookie information would be sent to intruder Web site or other site. However with various embodiments of the present invention this is harmful transmission is prevented an example of an intruder Web site is shown in . Also not shown in but shown in figures below are other components in client device such a one or more processors a network interface memory a bus for communication among these components and the like. show examples of such components.

In other embodiments monitor may be a component within browser or may be a plug in or widget to the browser. As described below one of the functions of monitor is to act as a type of broker or gatekeeper for browser . This function may be accomplished if the monitor operates within browser for example at the browser s network or client interface level where it may be in a position to screen or relay messages leaving the browser and to receive and analyze content from external Web sites before the content is executed within browser . Thus an end user may download behavior monitor component from a computer virus service provider such as Trend Micro Inc. of Cupertino Calif. or from other suitable service providers. In another embodiment monitor or a software bundle performing the same or similar functions as monitor may be included in a browser such as Internet Explorer that is pre loaded on a new PC or cell phone. Such a browser may be referred to as being XSS Blocking Cross Site Script Block Enabled or by some other descriptive marketing term to inform users or new purchasers that the browser is already equipped to prevent theft of personal information by malicious entities using XSS attacks. Thus the configuration shown in is a logical representation intended to show one implementation between monitor and browser .

At step the message or query is transmitted to the third party site from the monitor. For example the user may be making a query at a social networking Web site about another member s profile which by virtue of making the query will be downloaded into the user s browser in order to be viewed. In one embodiment the message goes through the monitor which performs as a broker or gatekeeper for the browser. This gatekeeper type function is explained in greater detail below.

At step monitor receives the requested content from the third party Web site for example via an HTTP RESPONSE from the Web server. This content may be in one or more various forms and may have executable code within it. In many cases the content will be HTML content providing text and graphics for viewing in the user s browser. Of course there may be other media types such as sound video Flash content and so on. For the purposes of describing specific embodiments of the present invention it is assumed that the downloaded content contains at least one XSS which as described above was previously inserted into the content by a malicious party unbeknownst to the Web site operator or to the user downloading the content.

At step the Web page received by monitor is analyzed. More specifically the page is examined for the presence of one or more XSS attacks. XSS code may be written in a variety of different languages and formats. Examples of a few include JavaScript VBScript ActiveX HTML and Flash. Some such as JavaScript VB Script have application programming interfaces or APIs. Thus in one embodiment it is first determined by monitor whether there is a JavaScript or VBScript API in the Web page which may attempt to read sensitive data from browser such as a cookie e.g. document.cookie . At step behavior monitor determines whether there is any potential malicious function or API in the Web page. For example it may determine specifically whether there is XSS code present in the Web page. As noted one way this may be done is by looking for script APIs. Other techniques may also be used some of which may be specific or customized for a particular type of script. In one embodiment monitor may run such routines when checking for scripts. If it is determined that there is no malicious function or API present in the Web page the page is considered safe at least with respect to Cross site scripting and is passed to browser at step . Browser may then display it for viewing or execute the Web page depending on the type of content and the process is completed.

If at step it is determined that there is a malicious function or API in the Web page such as XSS code control goes to step where monitor determines in one embodiment the URL to which sensitive information in the browser or client device will be sent if allowed to execute. In one embodiment the information is taken all or in part from one or more cookies in the browser which typically stores personal preferences of a user and other sensitive and confidential information. Confidential and personal information may also be obtained from other sources within browser and may be accessed by the malicious function API such as XSS code. An example of analyzing script logic to determine a malicious URL where sensitive data may be sent is provided below.

By analysis of this script a person of ordinary skill in the art may learn that the user s cookie will be sent to the URL http www.abc.com.

At step monitor determines in one embodiment whether the URL learned of in step is an authorized or safe URL or Web site to which cookie data or other sensitive data may be sent. One way to do this is to check the domain property within the cookie itself as described above in . Cookie file may contain a list of domain in its domain property that domains are considered safe and thus information contained in the cookie may be sent to those domains. Typically domain property data may be set by the user i.e. the cookie owner as Web sites and URLs to which the user wants his or her information e.g. personal preferences sent for the convenience of the user and so that the user does not have to always provide preferences to a frequently visited online site such as a retailer ticket purchasing site and the like. Another way to determine whether the URL is safe is by looking at which URLs the user has sent cookie information to in the past. There may a pattern of URLs that the user has accessed and very often wants his or her confidential information or personal preferences to be sent to but is not listed in the cookie s domain property. This type of white list or safe list pattern may also be used to reduce false negatives by the monitor. If it is determined that the URL is safe by either of these techniques or by others control goes to step where the Web page is passed to browser for display and or execution.

If it is determined at step that the URL is not safe control goes to step where monitor causes one or more warning messages to be displayed to the user. For example in one embodiment a dialog box to warn the user containing a warning message may allow the user to block the HTTP transaction that is not allow the Web page that was requested to be executed and displayed by the browser and informing the user that the reason is because the page was infected with XSS. Another option may be to allow the user to disable the script within the requested Web page. By disabling the script much if not all of the danger from Cross site scripting may be eliminated. Another option may be to inform the user that there is XSS code in the Web page and allow the user to perform a certain action on his or her own which may be the preferred course for more technically sophisticated users e.g. ignore warning and proceed disable script abort the request examine the script etc. . At step monitor waits for a response from the user regarding the warning message and proceeds accordingly. In this embodiment some type of response to the warning message is required from the user even if it is minimal such as pressing OK or Continue. At this stage the process is completed.

In one embodiment monitor includes a browser interface and a Web interface . These components contain code and data that may be needed for monitor to communicate with external components. For example in the case of Web interface a Web server on the Internet such as third party Web site and generally with other servers and components on the Internet. In one embodiment monitor is acting as a broker for browser and thus the monitor s interface and communication with the outside world is a key aspect to its functionality. Browser interface enables communication with browser for example for receiving GET and POST messages or for sending safe Web pages or warning dialog boxes. In another embodiment browser interface may not be necessary if monitor operates within browser which may negate the need for separate browser interface . For example interface components and may be used to facilitate step receiving messages from the browser steps and transmitting request to a Web site and receiving Web content and steps and communicating with the browser .

Monitor may also contain a Web page analysis module which contains code and other software and data for performing the analysis functions of monitor such as those described at step in . Related to analysis module in one embodiment are URL determination component and URL validation component . Determination component may contain logic for performing step above. URL validation component may have code for specifically checking a cookie s domain property for allowed URLs to which cookie information may be sent or for checking frequent URL patterns. In other embodiments components and may be inherent in Web page analysis module or intertwined with the analysis code contained in module and not logically separable. In any case the components and modules shown in represent a functional and logical description and are used to illustrate one embodiment of monitor . In other embodiments some of these modules and components may be needed or may be merged with other components or there may be more modules and components such that the granularity of the overall functionality of monitor is reflected in more specific and detailed modules each having a narrow role or function. The modules storage areas and components shown in may also be connected for communicating data among them via a bus or other appropriate means which are not shown in but is understood to enable all necessary transmission of data within the components storage areas and modules and with external entities via interfaces and such as browser and Web servers.

CPU is also coupled to a variety of input output devices such as display keyboard mouse and speakers . In general an input output device may be any of video displays track balls mice keyboards microphones touch sensitive displays transducer card readers magnetic or paper tape readers tablets styluses voice or handwriting recognizers biometrics readers or other computers. CPU optionally may be coupled to another computer or telecommunications network using network interface . With such a network interface it is contemplated that the CPU might receive information from the network or might output information to the network in the course of performing the above described method steps. Furthermore method embodiments of the present invention may execute solely upon CPU or may execute over a network such as the Internet in conjunction with a remote CPU that shares a portion of the processing.

In addition embodiments of the present invention further relate to computer storage products with a computer readable medium that have computer code thereon for performing various computer implemented operations. The media and computer code may be those specially designed and constructed for the purposes of the present invention or they may be of the kind well known and available to those having skill in the computer software arts. Examples of computer readable media include but are not limited to magnetic media such as hard disks floppy disks and magnetic tape optical media such as CD ROMs and holographic devices magneto optical media such as floptical disks and hardware devices that are specially configured to store and execute program code such as application specific integrated circuits ASICs programmable logic devices PLDs and ROM and RAM devices. Examples of computer code include machine code such as produced by a compiler and files containing higher level code that are executed by a computer using an interpreter.

Although illustrative embodiments and applications of this invention are shown and described herein many variations and modifications are possible which remain within the concept scope and spirit of the invention and these variations would become clear to those of ordinary skill in the art after perusal of this application. For example although the embodiments are described using HTML as the primary scripting language XSS may be written using any appropriate scripting language. In another example although cookie data is used to describe the personal information that make leak from a client device other types of data from the device may also be taken. Accordingly the embodiments described are to be considered as illustrative and not restrictive and the invention is not to be limited to the details given herein but may be modified within the scope and equivalents of the appended claims.

