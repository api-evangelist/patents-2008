---

title: Adaptive buffering of database server response data
abstract: Aspects of the subject matter described herein relate to buffering database server response data. In aspects, a database driver receives a request for data from a requester such as an application. Based on the request and information associated with a query, the database driver determines whether the requester is allowed to obtain data that has been previously buffered. If the database driver determines that the requester is not allowed to obtain data that has been previously buffered, the database driver indicates that blocks corresponding to the data may be freed. The database driver obtains new blocks from the database when they are needed. The database driver may determine whether to free blocks depending on a mode in which the blocks are accessed. When blocks are requested in a stream mode, they may be discarded once provided to a requester unless a bookmark has been set.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08019831&OS=08019831&RS=08019831
owner: Microsoft Corporation
number: 08019831
owner_city: Redmond
owner_country: US
publication_date: 20080417
---
A database may have a table that has millions of rows. These millions of rows may not fit into the main memory of a standard personal computer. Furthermore a single row may include a large data field that by itself cannot fit into main memory of a standard personal computer. Some database drivers attempt to buffer all of the data for a particular request before providing a requester with the data. A database driver that attempts to service a request in this manner may run out of memory and not be able to provide the data.

The subject matter claimed herein is not limited to embodiments that solve any disadvantages or that operate only in environments such as those described above. Rather this background is only provided to illustrate one exemplary technology area where some embodiments described herein may be practiced.

Briefly aspects of the subject matter described herein relate to buffering database server response data. In aspects a database driver receives a request for data from a requester such as an application. Based on the request and information associated with a query the database driver determines whether the requester is allowed to obtain data that has been previously buffered. If the database driver determines that the requester is not allowed to obtain data that has been previously buffered the database driver indicates that blocks corresponding to the data may be freed. The database driver obtains new blocks from the database when they are needed. The database driver may determine whether to free blocks depending on a mode in which the blocks are accessed. When blocks are requested in a stream mode they may be discarded once provided to a requester unless a bookmark has been set.

This Summary is provided to briefly identify some aspects of the subject matter that is further described below in the Detailed Description. This Summary is not intended to identify key or essential features of the claimed subject matter nor is it intended to be used to limit the scope of the claimed subject matter.

The phrase subject matter described herein refers to subject matter described in the Detailed Description unless the context clearly indicates otherwise. The term aspects is to be read as at least one aspect. Identifying aspects of the subject matter described in the Detailed Description is not intended to identify key or essential features of the claimed subject matter.

The aspects described above and other aspects of the subject matter described herein are illustrated by way of example and not limited in the accompanying figures in which like reference numerals indicate similar elements and in which 

Aspects of the subject matter described herein are operational with numerous other general purpose or special purpose computing system environments or configurations. Examples of well known computing systems environments and or configurations that may be suitable for use with aspects of the subject matter described herein include but are not limited to personal computers server computers hand held or laptop devices multiprocessor systems microcontroller based systems set top boxes programmable consumer electronics network PCs minicomputers mainframe computers distributed computing environments that include any of the above systems or devices and the like.

Aspects of the subject matter described herein may be described in the general context of computer executable instructions such as program modules being executed by a computer. Generally program modules include routines programs objects components data structures and so forth which perform particular tasks or implement particular abstract data types. Aspects of the subject matter described herein may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment program modules may be located in both local and remote computer storage media including memory storage devices.

With reference to an exemplary system for implementing aspects of the subject matter described herein includes a general purpose computing device in the form of a computer . Components of the computer may include but are not limited to a processing unit a system memory and a system bus that couples various system components including the system memory to the processing unit . The system bus may be any of several types of bus structures including a memory bus or memory controller a peripheral bus and a local bus using any of a variety of bus architectures. By way of example and not limitation such architectures include Industry Standard Architecture ISA bus Micro Channel Architecture MCA bus Enhanced ISA EISA bus Video Electronics Standards Association VESA local bus Peripheral Component Interconnect PCI bus also known as Mezzanine bus Peripheral Component Interconnect Extended PCI X bus Advanced Graphics Port AGP and PCI express PCIe .

Computer typically includes a variety of computer readable media. Computer readable media can be any available media that can be accessed by the computer and includes both volatile and nonvolatile media and removable and non removable media. By way of example and not limitation computer readable media may comprise computer storage media and communication media. Computer storage media includes both volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. Computer storage media includes but is not limited to RAM ROM EEPROM flash memory or other memory technology CD ROM digital versatile discs DVDs or other optical disk storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can be accessed by the computer . Communication media typically embodies computer readable instructions data structures program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term modulated data signal means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example and not limitation communication media includes wired media such as a wired network or direct wired connection and wireless media such as acoustic RF infrared and other wireless media. Combinations of any of the above should also be included within the scope of computer readable media.

The system memory includes computer storage media in the form of volatile and or nonvolatile memory such as read only memory ROM and random access memory RAM . A basic input output system BIOS containing the basic routines that help to transfer information between elements within computer such as during start up is typically stored in ROM . RAM typically contains data and or program modules that are immediately accessible to and or presently being operated on by processing unit . By way of example and not limitation illustrates operating system application programs other program modules and program data .

The computer may also include other removable non removable volatile nonvolatile computer storage media. By way of example only illustrates a hard disk drive that reads from or writes to non removable nonvolatile magnetic media a magnetic disk drive that reads from or writes to a removable nonvolatile magnetic disk and an optical disc drive that reads from or writes to a removable nonvolatile optical disc such as a CD ROM or other optical media. Other removable non removable volatile nonvolatile computer storage media that can be used in the exemplary operating environment include but are not limited to magnetic tape cassettes flash memory cards digital versatile discs digital video tape solid state RAM solid state ROM and the like. The hard disk drive is typically connected to the system bus through a non removable memory interface such as interface and magnetic disk drive and optical disc drive are typically connected to the system bus by a removable memory interface such as interface .

The drives and their associated computer storage media discussed above and illustrated in provide storage of computer readable instructions data structures program modules and other data for the computer . In for example hard disk drive is illustrated as storing operating system application programs other program modules and program data . Note that these components can either be the same as or different from operating system application programs other program modules and program data . Operating system application programs other program modules and program data are given different numbers herein to illustrate that at a minimum they are different copies. A user may enter commands and information into the computer through input devices such as a keyboard and pointing device commonly referred to as a mouse trackball or touch pad. Other input devices not shown may include a microphone joystick game pad satellite dish scanner a touch sensitive screen of a handheld PC or other writing tablet or the like. These and other input devices are often connected to the processing unit through a user input interface that is coupled to the system bus but may be connected by other interface and bus structures such as a parallel port game port or a universal serial bus USB . A monitor or other type of display device is also connected to the system bus via an interface such as a video interface . In addition to the monitor computers may also include other peripheral output devices such as speakers and printer which may be connected through an output peripheral interface .

The computer may operate in a networked environment using logical connections to one or more remote computers such as a remote computer . The remote computer may be a personal computer a server a router a network PC a peer device or other common network node and typically includes many or all of the elements described above relative to the computer although only a memory storage device has been illustrated in . The logical connections depicted in include a local area network LAN and a wide area network WAN but may also include other networks. Such networking environments are commonplace in offices enterprise wide computer networks intranets and the Internet.

When used in a LAN networking environment the computer is connected to the LAN through a network interface or adapter . When used in a WAN networking environment the computer typically includes a modem or other means for establishing communications over the WAN such as the Internet. The modem which may be internal or external may be connected to the system bus via the user input interface or other appropriate mechanism. In a networked environment program modules depicted relative to the computer or portions thereof may be stored in the remote memory storage device. By way of example and not limitation illustrates remote application programs as residing on memory device . It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.

As mentioned previously databases may have large data sets that are available for querying. A database driver that issues a query for a large data set may not have enough memory to hold the large data set. A data set may include any data available from a database. For example a data set may include such things as one or more rows update counts OUT parameters from stored procedure calls a combination of two or more of the above and the like.

The various entities may be located relatively close to each other or may be distributed across the world. For example the application and the database driver may be located on the same machine while the database may be located on a different machine. In another example the application may be located on a first machine while the database driver may be located on an application server that provides application services. In yet another example the three entities may be located on the same machine. The examples above are not intended to be all inclusive or exhaustive. Indeed based on the teachings herein those skilled in the art may recognize other configuration that fall within the spirit and scope of aspects of the subject matter described herein.

Where a line connects one entity to another it is to be understood that the two entities may be connected e.g. logically physically virtual or otherwise via any type of network including a direct connection a local network a non local network the Internet some combination of the above and the like.

The application comprises any software that seeks access to the database. Such software may execute in user mode kernel mode or some combination thereof. In some embodiments such software may be distributed across two or more machines.

The database driver comprises a software component that provides a set of APIs to the application . The APIs allow the application to request data from the database and to access the data once it is received. In one embodiment the APIs may conform to the Java Database Connectivity JDBC standard. In another embodiment the APIs may conform to the Open Database Connectivity ODBC standard. In yet other embodiments the APIs may conform to another standard or may provide a propriety interface.

The database comprises a data source that is capable of storing data in a structure format. The database is able to respond to requests for data by sending data to the requester e.g. the database driver . The database may provide data in a tabular data stream TDS packets in which data from the database is placed and sent to the requester.

TDS packets may be fixed in size for a particular interaction with the database. For example a database driver and a database may support 32 kilobyte TDS packets or some other arbitrary or requested sized packets. When requesting data from the database the database driver and the database may negotiate the size of the TDS packets to use for sending data.

When sending data in TDS packets a value may not fit in a single packet. Such values may be split across multiple TDS packets. In addition two or more values or portions thereof may fit in one TDS packet. The stream of TDS packets sent from the database to the database driver may be thought of as a sequence of packets of data corresponding to the data set requested by the database driver with columns rows and values spanning packets as needed.

Among other things the database driver is responsible for obtaining data from the database and providing this data to the application . The database driver may be constrained to support the APIs of previous versions of the database driver such that an application structured for a previous version of the API cannot tell the difference when interfacing with the database driver .

In accordance with aspects of the subject matter described herein the database driver may receive an optional parameter that instructs the database driver how the application seeks to access the data. In one embodiment the parameter may indicate that the application seeks to access the data re readable manner or as a stream.

Unless clear from the context otherwise the term array is used herein to indicate that the application seeks to access the data in a re readable manner. The term array does not necessarily mean that the data is to be provided as an array or in an array data structure

In one embodiment data may be requested for access in a re readable manner using a connection property. In one example using a connection property e.g. responseBuffering a requester may indicate that data is re readable by default by setting responseBuffering full. In another example a requester may indicate that data is not re readable by default by setting responseBuffering adaptive. The above examples are not intended to be all inclusive or exhaustive. Based on the teachings herein those skilled in the art may recognize other mechanisms for indicating that data is re readable or not re readable. Such other mechanisms may also be used without departing from the spirit or scope of aspects of the subject matter described herein.

When the database driver is instructed to provide data as an array the database driver may buffer the data requested until the entire data is available to send to the application . The database driver may do this in part so that it can return any portion of the data to the application .

The application may request a portion of a data set to be available as an array and a portion of a data set to be available as a stream. For example the application may request that certain columns of a row be made available as an array while other columns of the row be made available as a stream.

When the database driver is instructed to provide data as a stream the database driver may provide data to the application as requested and may wait to retrieve more data from the database until that data is requested by the application . After the application has requested a particular piece of data and the database driver has provided the data the database driver may free the memory associated with that data with an exception indicated below .

To conform with prior versions of the database driver for example the database driver may provide the data as an array by default. If the application does not specify how the data is to be accessed the database driver may assume that the application is going to access the data as an array and may buffer the data before providing it to the application as has been described previously.

Each of the blocks corresponds to a chunk of data e.g. a TDS packet returned by a database to a database driver in response to a query sent by a database driver.

When a block includes an S this indicates that the block is associated with a stream. Although each of the rows are illustrated as having four streaming blocks per row in other data sources the rows may have less than or more than four streaming blocks per row and may even have a different number of streaming blocks from row to row. In one embodiment the S s illustrated in are for convenience only in illustrating that some blocks may include streaming data while other blocks include non streaming data. In this embodiment the database driver may not store an actual indicator that indicates whether blocks include streaming or non streaming data.

In operation an application may request that data be returned in a forward only read only result set. This means that when the application requests a next row of data from the database driver that the application is not able to go back to the previous row without issuing a new query. For example if the application is currently on the row and requests the next row e.g. row of data the application cannot go back to row and request more data.

When the application requests data in this manner the database driver may retain a row of data until the application requests the next row. After the application has requested the next row the database driver may free the memory of the current row.

In one embodiment this may be done by linking together blocks with pointers with each block of the row pointing to the block of the row that comes next. The database driver may also reference the first block of a row with a pointer. When the database driver stops referencing the first block of the row it may no longer be referenced by any pointers. In some environments when an item is no longer referenced it may be freed and returned to memory by a garbage collection mechanism.

In a forward only result set when the first item in a row is freed and returned to memory the next item in the row is no longer referenced so it can be freed and returned to memory and so forth. Thus by moving a pointer from the head of one row to the head of another row the database driver may cause the memory associated with a row to be freed.

In addition the database driver may fetch data from the database as needed. For example the database driver may refrain from fetching another block of data from the database unless and until the application requests data included in that block. When the application requests the data then the database driver may obtain it from the database.

Furthermore in one embodiment when the application indicates that data is streaming data the database driver may use a variable to remember that it is in streaming mode. When an application is streaming a value the value data may be retrieved from the database at the same rate it is returned to the application effectively reducing buffering to as little as a single block.

In an embodiment the driver does not mark blocks as streaming blocks. Instead the driver marks re readable blocks in such a way as to lock them into memory. This may be done for example by referencing the blocks with a pointer or otherwise. Marks may be set at a variety of places including for example 

1. At the first block containing data for a row in a result set. This keeps the row in memory except for streamed values as described below 

2. At the first block of a re readable data value to keep that value in memory. The value may be a column value e.g. from a result set row an OUT parameter value e.g. from a stored procedure call or the like and

3. For scrollable result sets at the start of the fetch buffer. The fetch buffer is a window of the N most recently fetched rows within which the application may scroll without causing another request to the database to fetch additional rows.

In each block referencing the next block in the ordered set of blocks effectively creating a singly linked list. When a data value is accessed as a stream with responseBuffering adaptive the blocks containing the value may be unlinked from the linked list as they are consumed by the application and all references to them dropped so that a garbage collector may eventually free them.

In reading stream data an application may place a bookmark within the stream data. This bookmark indicates that the application may want to go back to the bookmark and reread the stream from that point. To accommodate this the database driver may mark a bookmarked block and may hold a reference to the block. As long as the application does not release the bookmark the database driver maintains the reference. This causes the block and all blocks that it refers to indirectly or directly to be maintained in memory even though they may include streaming blocks.

Once the application releases the bookmark the database driver may release its reference to the bookmarked block. This may cause the streaming block it referenced if any to not have a reference which may cause it to be removed from the linked list and freed and so forth until a block is reached that has a reference other than one from the linked list. Such other reference may comprise a current location reference a reference to block that is re readable or another reference indicating a block that needs to be retained in memory. This allows the database driver to seamlessly retain blocks that have been requested as arrays and to seamlessly free blocks that have been requested as streams when they are no longer needed.

For example referring to if a bookmark was placed on block and the application read data to block and then released the bookmark the database driver would remove blocks and then cause the reference of block to refer to block .

An application may request data in a different order than it is returned by the database. For example an application may request the data corresponding to block followed by the data corresponding to block followed by the data corresponding to block and so forth. In this case when the application requests the data corresponding to the block the database driver requests and obtains the streaming data corresponding to blocks . This streaming data is retained until the database driver is sure that the application can no longer request the data in the same query.

For example if the application has requested data in a forward only result set and requests blocks as indicated above and then requests data from the next row e.g. row the database driver may then free the data associated with the current row e.g. row . As another example if after the requests above the application requests data from the streaming blocks by starting at block and reading forward the database driver may free each read streaming block after the application driver is sure that the application can no longer request the data in the particular block e.g. if the application has not set a bookmark before or in the block and has requested data in the next block .

An application may request a scrollable result set. In making this request in one embodiment the application may request that it be given access to a certain number of rows at a time such that it can access any data value within the rows. In another embodiment the database driver may provide a certain number of rows at a time as a default. After the application has requested a next row in one embodiment a row drops out of the scrollable set of rows such that the application is unable to scroll to e.g. retrieve data from the row that was dropped out. In another embodiment after the application has requested data past the end of a fetch buffer of N rows the database driver may free blocks associated with the current fetch buffer and fetch the next N rows from the result set and place them in the fetch buffer. A row may include one or more values that are requested in array format and one or more values that are requested in a stream fashion.

In this case a database driver may obtain data in rows upon demand as requested by the application. For example if the number of scrollable rows is four the database driver maintains references to the rows that are in the scrollable data. When the application requests the next row and the scrollable area is full the database driver drops the reference to the first block of the first row in the scrollable data e.g. block thus allowing the blocks associated with the first row to be freed and returned to memory. As the application requests data in the next row the database driver requests data from the database and allocates blocks to hold this data. This allows the application to request any data within a scrollable window.

In addition in one embodiment while working within a scrollable window if the application begins reading a data value that is streamed the database driver may free blocks corresponding to the stream as described previously. In another embodiment while working within a scrollable window if the application begins reading a data value that is streamed the database driver may refrain from freeing blocks corresponding to the stream until those blocks pass out of the scrollable window.

Turning to the apparatus may include a database driver a store and a communications mechanism . The database driver may include a request processor a block deallocator a garbage collector a block requester a block allocator and an application programming interface API . The database driver corresponds to the database driver of while components of the database driver correspond to the block manager of .

The communications mechanism allows the apparatus to communicate with the database as shown in . The communications mechanism may also allow the apparatus to communicate with the application if it is on a different device for example. The communications mechanism may be a network interface or adapter modem or any other mechanism for establishing communications as described in conjunction with .

The store is any storage media capable of storing buffered blocks of data corresponding to portions or all of a data set. The store may comprise a file system database volatile memory such as RAM other storage some combination of the above and the like and may be distributed across multiple devices. The store may be external or internal to the apparatus .

The request processor is operable to receive a request for data from the API and to locate and to locate where data corresponding to the request is located. The data may be located on the store or may need to be requested from a database e.g. the database of .

The block deallocator is operable to indicate blocks in the store corresponding to data that the requester is no longer allowed to obtain during the query. In one embodiment this is performed by removing references to the block. The block deallocator may also include logic to determine whether the requester is no longer allowed to obtain certain data. For example if the requester has moved to the next row in a read forward only data set the block deallocator may determine that the requester is no longer allowed to obtain data from the current row.

The phrase allowed to obtain as used herein does not mean that the requester cannot request the data. Rather it means that based on the way the data has been accessed the driver will no longer provide the data as it has been discarded. If a requester requests data that the requester is not allowed to obtain the driver may throw an exception. In some cases the exception may indicate that the operation is not supported e.g. if the application attempts to request previously requested data in a forward only result set . In other cases the exception may indicate that the data is no longer accessible. This may happen for example if the requester attempts to obtain stream data multiple times.

The garbage collector is operable to return blocks to the free memory pool. The garbage collector may use one or more garbage collection techniques as are known to those skilled in the art. In some embodiments in non managed environments the garbage collector is optional as information regarding whether blocks may be freed may be explicitly tracked e.g. through reference counting or some other mechanism and explicitly freed when no longer referenced.

The block requester is operable to obtain data from the database and to store the data in blocks allocated by the block allocator . After determining that a block is not available in the store the request processor may request that the block requester obtain data from a database to obtain the block. The block requester may store skipped data that has not been requested by the requester in the store . Skipped data is data in a data set between two portions of the data that have been requested by the requester.

The block allocator is operable to allocate blocks in the store . The block allocator may link related blocks e.g. blocks of the same row together in a linked list. The block allocator may use one or more memory allocation techniques as understood by those skilled in the art.

The API is operable to receive a query and one or more requests associated with the query. A query defines a data set that is available from a database and may be specified in any of a number of formats without departing from the spirit or scope of aspects of the subject matter described herein. The interface provides a facility by which a requester is able to indicate under what one or more circumstances a requester is allowed to obtain previously obtained data during the query. This facility may comprise a method call a parameter to a method call a shared memory location in which a flag is stored some other mechanism and the like. The facility may allow the requester to indicate whether the requested data is to be provided at least as a stream or as an array.

For simplicity of explanation the methodology described in conjunction with is depicted and described as a series of acts. It is to be understood and appreciated that aspects of the subject matter described herein are not limited by the acts illustrated and or by the order of acts. In one embodiment the acts occur in an order as described below. In other embodiments however the acts may occur in parallel in another order and or with other acts not presented and described herein. Furthermore not all illustrated acts may be required to implement the methodology in accordance with aspects of the subject matter described herein. In addition those skilled in the art will understand and appreciate that the methodology could alternatively be represented as a series of interrelated states via a state diagram or as events.

Turning to at block the actions begin. At block a query is received. For example referring to the database driver receives a query from the application . The query defines a data set that is available from the database . For example the query may indicate certain rows and values e.g. columns to be returned from the database and may indicate an order in which results are to be returned.

The query may also indicate whether a requester is allowed to obtain previously obtained data from the database driver during the query. For example the query may indicate that data is to be returned in a forward only read only result set as described previously. As another example the requester may indicate that the data is to be returned in a scrollable result set as described previously.

At block a request for a data value from the query is received. For example referring to the database driver may receive a request for a third data value of a particular row of a result set. In one embodiment a data value represents whatever is contained in a field e.g. column of a row of the result set. A data value may include simple data types such as integers currency other numeric formats strings and the like arbitrary binary data that may comprise a sequence of one or more bytes other data and the like.

At block a determination is made as to whether any blocks in the buffer may be freed. For example referring to the block deallocator may determine blocks in the store which the requester is no longer allowed to obtain during the query. Such blocks may correspond for example to rows or other data that the requester is no longer able to access. For example after a requester requests a next row of data the requester may no longer be allowed to obtain data in a row before the new row. As another example in a stream a requester may not be able to read previous portions of the stream unless the requester has set a bookmark in the stream.

At block blocks if any are marked for deletion. For example referring to the block deallocator may remove a reference e.g. a current row reference to the block . In doing so the block deallocator may be marking this block and indirectly marking blocks it refers to directly and indirectly e.g. blocks for deletion.

At block memory associated with the blocks if any is freed. For example referring to the garbage collector may return the blocks to a free pool of memory as they are no longer referenced.

At block data if any in the data set that occurs before the requested data value is retrieved. For example referring to if data value included in block is requested the data in blocks may be obtained from the database before obtaining the data in block .

At block obtainable blocks of the data if any are stored in a buffer. Obtainable in this sense indicates blocks that a requester is still allowed to obtain during the query. For example referring to as long as the requester is examining data in the row the requester may be able to obtain data associated with any of the blocks of the row. When the requester requests data in the row the requester may no longer have an option of obtaining data in the row .

At block non obtainable blocks of the data are discarded. For example referring to if the requester was currently on row and requested data in the data block of row the database driver may read the rest of the blocks of the row and discard these blocks as they are no longer obtainable by the requester during the query.

At block data corresponding to the data value is retrieved from the database. For example referring to if the data value is included in the block this block is retrieved from the database.

At block one or more blocks corresponding to this data are stored in the buffer. For example referring to the block requester may store one or more blocks corresponding to the data value in the store .

At block the requested data is provided to the requester. For example referring to the database driver provides the requested data value to the application . If a requester sends another request for data during the query the actions may continue at block otherwise the actions may continue at block .

Note that as has been indicated previously the actions described above may be performed in many different orders. For example a garbage collector may free unused blocks according to its own schedule with the result being that the actions associated with block may occur any time after the actions associated with block . As another example the actions associated with blocks may be performed in parallel with or after the actions associated with blocks .

Turning to at block the actions begin. At block a request for data from a data set is received at a database driver. For example referring to the database driver may receive a request for a data value of a result set or a request that indicates that the application seeks to initiate a new query.

At block a determination is made as to whether the request is part of a new query. If so the actions continue at block otherwise the actions continue at block . A requester may be allowed to perform a second query during a first query. For example referring to if the database driver receives a second query from the application while the database driver is servicing a first query from the application the actions continue at block .

At block any remaining portion of the data set of the current query is buffered before obtaining data from the next query. For example referring to a block requester obtains the rest of a data set from a current query and stores blocks corresponding to the data so obtained in the store .

At block a determination is made as to whether there are any previously buffered blocks that the requester is no longer allowed to obtain. If so the actions continue at block otherwise the actions continue at block . For example referring to the block deallocator may determine whether there are any previously buffered blocks corresponding to data that the requester is no longer allowed to obtain during the query.

At block blocks that the requester is no longer allowed to obtain are freed. For example referring to the block deallocator may indicate that the previously buffered blocks determined at block can be returned to a free memory pool.

At block a determination is made as to whether the data requested is already buffered. If so the actions continue at block otherwise the actions continue at block . For example referring to the request processor may determine whether blocks including the data requested are included in the store or not.

At block data corresponding to the request is obtained from the database. For example referring to the database driver may obtain one or more blocks corresponding to the data requested from the database . These blocks may be stored in the buffer .

At block the data is provided to the requester. For example referring to the database driver may respond to a request for data by providing the data to the application . If another request is received the actions continue at block otherwise the actions continue at block .

As can be seen from the foregoing detailed description aspects have been described related to buffering database server response data. While aspects of the subject matter described herein are susceptible to various modifications and alternative constructions certain illustrated embodiments thereof are shown in the drawings and have been described above in detail. It should be understood however that there is no intention to limit aspects of the claimed subject matter to the specific forms disclosed but on the contrary the intention is to cover all modifications alternative constructions and equivalents falling within the spirit and scope of various aspects of the subject matter described herein.

