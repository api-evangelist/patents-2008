---

title: Reliable datagram via independent source destination resources
abstract: A method includes producing units of work with at least one source application instance (AI) at a source device and consuming units of work with at least one destination AI at a destination device. A first reliable datagram service is established, with a first source and destination resource (SDR), between the source device and the destination device. A second reliable datagram service is established, with a second SDR independent of the first SDR, between the source device and the destination device. A first unit of work stream is transmitted over a communication services/fabric with the first reliable datagram service, which guarantees strong ordering of the first unit of work stream received at the destination device. A second unit of work stream is transmitted over the communication services/fabric with the second reliable datagram service, which guarantees strong ordering of the second unit of work stream received at the destination device.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07904576&OS=07904576&RS=07904576
owner: Hewlett-Packard Development Company, L.P.
number: 07904576
owner_city: Houston
owner_country: US
publication_date: 20080107
---
This Utility Patent Application is a Continuation of U.S. application Ser. No. 09 578 155 filed on May 23 2000 now U.S. Pat. No. 7 318 102 which claims the benefit of the filing date of U.S. Provisional Applications Ser. No. 60 135 664 filed May 24 1999 and U.S. Ser. No. 60 154 150 filed Sep. 15 1999 all of which are herein incorporated by reference.

The present invention generally relates to data processing and more particularly to communication between distributed application instances via a reliable datagram service.

In conventional data processing systems distributed application instances typically employ transport services such as a reliable connection service or an unreliable datagram service to communicate. An application instance is herein defined to be a producer or a consumer of data in the data processing system. An application instance can be implemented in software hardware or firmware or in any combination of these. A unit of work is herein defined to be data which is transmitted between a source application instance and a destination application instance. Accordingly a source application instance is the producer of the unit of work sent to the destination application instance. The destination application instance is the consumer of the unit of work sent from the source application instance.

A portion of a conventional data processing system employing a reliable connection service to communicate between distributed application instances is illustrated generally at in . Conventional data processing system includes an application instance A indicated at an application instance B indicated at and an application instance C indicated at . The reliable connection service of data processing system creates at least one non sharable resource connection between each connected pair of communicating application instances. For example a first non sharable resource connection and a second non sharable resource connection are created between application instance A indicated at and application instance B indicated at . A third non sharable resource connection is created between application instance A indicated at and application instance C indicated at . Each non sharable resource connection includes a unique set of non sharable resources. The reliable connection service transmits units of work between application instances by identifying a source connection handle and by issuing appropriate instructions to control data transmission. Reliable connection services provide reliable communication between application instances but at the cost of scalability of the data processing system. In reliable connection services communication at any one time is restricted to one to one application instance relationships via corresponding non sharable resource connections.

A portion of a conventional data processing system employing an unreliable datagram service to communicate between application instances is illustrated generally at in . Conventional data processing system includes an application instance A indicated at an application instance B indicated at and an application instance C indicated at and an application instance D indicated at . The unreliable datagram service employed by data processing system creates a shared resource datagram . Shared resource datagram can be employed to transmit units of work between multiple application instances. Shared resource datagram couples application instance A indicated at to application instance B indicated at to application instance C indicated at and to application instance D indicated at . Unreliable datagram services provide for highly scalable data processing systems but at the cost of reliability. In an unreliable datagram service the application instance relationships can be one to one one to many or many to one but communication between application instances is not reliable. In particular traditional unreliable datagrams do not provide guaranteed ordering of units of work transmitted between application instances.

For reasons stated above and for other reasons presented in greater detail in the Description of the Preferred Embodiments section of the present specification there is a need for an improved transport service for communicating between distributed application instances in data processing systems. The improved transport service should provide reliable communication between application instances including guaranteed ordering of units of work transmitted between application instances. In addition the improved transport service should provide for highly scalable data processing systems.

One embodiment provides a method of processing data including producing units of work with at least one source application instance AI at a source device and consuming units of work with at least one destination AI at a destination device. The method includes establishing a first reliable datagram service with a first source and destination resource SDR between the source device and the destination device and establishing a second reliable datagram service with a second SDR independent of the first SDR between the source device and the destination device. The method includes transmitting a first unit of work stream over a communication services fabric with the first reliable datagram service and guaranteeing strong ordering of the first unit of work stream received at the destination device with the first reliable datagram service. The method includes transmitting a second unit of work stream over the communication services fabric with the second reliable datagram service and guaranteeing strong ordering of the second unit of work stream received at the destination device with the second reliable datagram service.

In the following detailed description of the preferred embodiments reference is made to the accompanying drawings which form a part hereof and in which is shown by way of illustration specific embodiments in which the invention may be practiced. It is to be understood that other embodiments may be utilized and structural or logical changes may be made without departing from the scope of the present invention. The following detailed description therefore is not to be taken in a limiting sense and the scope of the present invention is defined by the appended claims.

A portion of a data processing system according to the present invention is illustrated generally at in . Data processing system includes a reliable datagram service according to the present invention for providing reliable communication between distributed application instances AIs . The reliable datagram service according to the present invention also provides for a highly scalable data processing system .

Data processing system includes a source and destination resource SDR for implementing a reliable datagram service between a device and a device . SDR comprises SDR resources at device and SDR resources at device . SDR resources communicate with SDR resources via a communication services fabric . Device and device can each be a source or a destination device depending on the direction of communication. Device includes an AI an AI and an AI . Device includes an AI an AI and an AI . AIs produce or consume data. AIs can be implemented in software hardware or firmware or in any combination of these.

A first step in implementing a reliable datagram service between source and destination devices such as devices and is to create a SDR according to the present invention such as SDR upon which reliable communication can be implemented in a scalable data processing system. A variety of suitable techniques can be used to create a SDR according to the present invention. One such suitable technique employs an unreliable datagram service between middleware AIs on the source and destination devices such as middleware AI on device and middleware AI on device . The middleware AIs exchange sufficient data to uniquely identify the SDR which will be employed to exchange reliable datagrams. Middleware AIs facilitate communication between AIs either directly such as by providing a communication application programming interface API and library or indirectly such as by providing transparent error recovery and other management services. Middleware AIs can be implemented in hardware via a state machine in firmware or in software within a given device such as devices and . One embodiment of a middleware AI e.g. middleware AIs and operates local to the AIs within the same device. One embodiment of a middleware AI such as middleware AI executes remotely and is accessed via the underlying communication services fabric.

Once a SDR according to the present invention is established any number of source AIs can employ the established SDR such as SDR to communicate to any number of destination AIs because the established SDR functions as a point of multiplexing at the source device and as a point of demultiplixing at the destination device.

In an example operation of SDR device is a source device and device is a destination device. In this example operation AIs and of source device are source AIs which produce units of work transmitted to the destination device . In this example operation AIs and are destination AIs which consume the units of work transmitted from corresponding source AIs and . In this example operation SDR resources at source device multiplex units of work produced by source AIs and into a serial unit of work stream provided on communication services fabric . The serial unit of work stream is demultiplexed by SDR resources at destination device into units of work consumed by AIs and . In this example operation SDR resources validate the delivery of units of work generate positive acknowledgements ACKs and negative acknowledgments NAKs and perform resynchronization operations based on any detected errors.

The reliable datagram service implemented with a SDR such as SDR provides for distributed AI communication using one to one one to many or many to one AI relationships. In addition AIs can operate within the same device via a device backplane fabric e.g. a form of shared memory within a device or between disparate devices which are connected via an intermediate communication fabric. Therefore the communications between AIs is independent of the physical locality of the AIs and is connectionless from the perspective of the AIs.

A unit of work is data transmitted between a source AI and a destination AI. In one embodiment the units of work are treated as opaque objects by the underlying communication services fabric. In one embodiment however the underlying communication services fabric performs optional filtering services on the units of work based on the capability of the underlying communication services fabric and the requirements of the middleware AIs and AIs.

The reliable datagram service according to the present invention includes the following mechanisms to assure reliable transmission of the units of work between the source AIs and the destination AIs. A strong ordering mechanism in the SDR guarantees that the destination AIs receive the units of work in the same order that the corresponding source AIs sent the unit of work. Units of work sent by other source AIs to the same destination AI using separate SDRs may be interleaved. Strong ordering is only guaranteed on a one to one source AI to destination AI resource basis.

A second mechanism for assuring reliable transmission of the units of work between the source AIs and the destination AIs is that a given unit of work is received by the destination SDR resources exactly once. In other words duplicate copies of units of work which may be generated during an error event or a recovery operation are detected and not delivered to the destination AI.

A third mechanism for assuring reliable transmission of the units of work between the source AIs and the destination AIs is an acknowledgement mechanism. The source AI and or the communication services fabric are informed of a unit of work transmission completion either via a positive acknowledgement ACK which indicates a unit of work was successively transmitted and received or a negative acknowledgement NAK which indicates an unrecoverable error was detected either within the unit of work or in its transmission. In one embodiment a source AI is notified of an error through out of band communication such as an alarm generated by the underlying communication services fabric when a hardware failure is detected.

In one embodiment AIs use the same sender based or receiver based communication and memory management protection techniques as traditionally used by reliable connections services. In addition AIs can implement other reliable operations and additional reliable techniques utilizing reliable datagrams which are not normally implemented using reliable connections.

Logical unit of work transmission size is limited only by the size of the memory window exported sender based communication or posted receiver based communication by the destination AI. Receiver based AIs can support one or multiple memory buffers as transmission targets. The receiver communication services fabric are responsible for selecting the optimal memory buffer to target for a given unit of work based on unit of work attributes or AI input.

Memory is protected using techniques such as Hamlyn protection mechanisms to ensure correct access rights e.g. no access read access write access read write access memory address range verification and the like are verified before access is granted to an AI.

A portion of a data processing system according to the present invention having multiple SDRs is illustrated generally at in . Data processing system includes a device A indicated at a device B indicated at a device C indicated at and a device D indicated at . A SDR including SDR resources at device and SDR resources at device implements a reliable datagram service between device and device . A SDR including SDR resources at device and SDR resources at device implements a reliable datagram service between device and . A SDR including SDR resources at device and SDR resources at device implements a reliable datagram service between device and . A SDR including SDR resources at device and SDR resources at device implements a reliable datagram service between device and device . The source and destination ends of each of the SDRs and communicate via a communication services fabric . Devices and can each be a source or a destination device depending on the direction of communication.

Device includes an AI coupled to SDR resources and SDR resources and an AI coupled to SDR resources . Device includes an AI coupled to SDR resources and an AI coupled to SDR resources and SDR resources . Device includes an AI coupled to SDR resources and an AI coupled to SDR resources Device includes an AI coupled to SDR resources and an AI coupled to SDR resources and SDR resources

Thus for each device tuple one or more SDRs are established e.g. SDR is established for the device device tuple . The AIs on each device can communicate to any AI on another device to which they are coupled through an associated SDR. One or more SDRs can be associated with a given physical fabric device allowing traffic segregation and multiple topologies to be supported.

The above described strong ordering mechanism the mechanism providing that a given unit of work is received by the destination SDR resources exactly once and the acknowledge mechanism which together assure reliable transmission of the units of work between the source AIs and the destination AIs can be implemented according to the following example reliable communication protocol.

The example reliable communication protocol includes serializing all units of work which are transmitted between a source AI and a corresponding destination AI into a unit of work stream. The serialization of the units of work into a unit of stream is accomplished as follows. In one embodiment each unit of work is treated as an opaque object which is encapsulated within a protocol header for transmission. A protocol header contains the fields employed by the underlying communication services fabric to target the destination AI.

One example embodiment of a protocol header is illustrated generally at in . Protocol header includes target fields which are employed by the underlying communication services fabric to target the destination AI. A SDR identifier field uniquely identifies the SDR employed to send and receive the units of work. All communication requiring strong ordering must flow through the same SDR. Strong ordering is not guaranteed across SDRs within the same device.

A SDR sequence number field provides a unique logical time stamp representing a defined order of the units of work in the unit of work stream transmitted from the source SDR resources and is employed by the destination SDR resources for verifying that units of work are arriving in order and for detecting if any units of work are missing. The successive protocol headers in a given serial unit of work stream contain monotonically increasing number values in their respective SDR sequence number fields which are assigned per SDR.

If the SDR sequence number field value matches the expected sequence number valve stored in the destination SDR resources then other protocol header fields are verified by the destination SDR resources. The destination SDR resources provide an ACK if the current unit of work is determined to be valid from the destination device s perspective. The destination SDR resources provide a NAK if the current unit of work is determined to be invalid from the destination device s perspective.

The SDR sequence number field value being less than an expected next sequence number value stored in the destination SDR resources indicates that the unit of work is a duplicate unit of work and the unit of work is dropped by the destination SDR resources. In one embodiment the duplicate unit of work is silently dropped by the destination SDR resources. In one embodiment the destination SDR resources drop the duplicate unit of work and provide an ACK indicating to the source SDR resources that the last unit of work was received to avoid the source SDR resources from again transmitting the duplicate unit of work in case the previous ACK corresponding the firstly received unit of work with the same SDR sequence number was dropped.

The SDR sequence number field value being greater than the expected next sequence number value stored in the destination SDR resources indicates that the current unit of work is received ahead of its defined order and thus an intermediate unit of work is missing. A first option for responding to the indication that an intermediate unit of work is missing is for the destination SDR resources to silently drop the current unit of work and await the source SDR resources to retransmit the missing unit of work based for example on a timer expiring.

A second option for responding to the indication that an intermediate unit of work is missing is for the destination SDR resources to provide a NAK which contains the expected next sequence number value in the SDR sequence number field of the protocol header of the NAK indicating to the source SDR resources that an intermediate of work is missing. In one embodiment implementing the second option the unit of work is dropped and the NAK indicates to the source SDR resources the sequence number of the missing intermediate unit of work. The source SDR resources respond to the NAK and retransmit all units of work having an assigned SDR sequence number value equal to or greater than the SDR sequence number value corresponding to the missing intermediate unit of work.

In another embodiment implementing the second option for responding to the indication that an intermediate unit of work is missing the destination SDR resources verify other protocol header fields. If all other verification checks pass the destination SDR resources temporarily store the current unit of work while the middleware AIs perform a resynchronization operation to recover the missing intermediate unit of work.

Resynchronization is herein defined to be the process employed to synchronize the SDR associated with a given tuple. In other words resynchronization aligns the SDR contents to determine what units of work have been posted for transmission what units of work have been reliably completed and what units of work need to be retransmitted. The resynchronization process is primarily controlled by the SDR sequence number values associated with a given SDR to retransmit and or clean up the non completed units of work. While resynchronization is performed strictly on an implementation dependent basis the resynchronization process can also employ a barrier control message containing SDR state and control values such as SDR sequence numbers and acknowledgment numbers where the barrier control message is transmitted between the source and destination devices.

Error recovery for a given tuple typically involves performing a resynchronization event between the resources associated with the source AI and the destination AI. The resources associated with the source AI and the destination AI contain sufficient state information to recover all operations which have not been completed i.e. neither an ACK nor a NAK has been received by the source Al to complete the unit of work transmission . The resource and the unit of work state information can be maintained at any location within the source and destination devices.

The example protocol header illustrated in also includes source AI and destination AI identifier fields . The source AI and destination identifier fields are employed to perform completion events identify the source Al to the destination AI for subsequent application specific exchanges and the like.

If the AIs are employing sender based communication example protocol header contains additional protection fields . Example protection fields includes Hamlyn style protection key memory buffer address and offsets and the like. Protection fields are validated by the destination SDR resources before memory access is granted.

According to the example reliable communication protocol each unit of work must be acknowledged using either an ACK a NAK or a communication services fabric error notification. Acknowledgments are used to indicate whether a unit of work has reached the destination SDR resources and some form of action has been performed in response thereto.

In one embodiment the acknowledgments e.g. ACK NAK and communication services fabric error notification are implemented as stand alone unit of work exchanges which are separate and well defined. In one embodiment the acknowledgments are encapsulated in the unit of work within a protocol header. In one embodiment the acknowledgments are formed as a component within a protocol header which is either transmitted separately or piggy backed within another unit of work being transmitted in the other direction.

In one embodiment ACKs are on a per unit of work basis. In this embodiment a separate ACK is transmitted for each unit of work which is successfully received and processed by the destination SDR resources. In another embodiment the ACKs are cumulative. In the cumulative ACK embodiment for a given set of units of work a single ACK is transmitted with the embedded SDR sequence number indicating that all units of work in the set of units of work up to and including the unit of work assigned the current SDR sequence number have been successfully received and processed by the destination SDR resources. An AI can have multiple units of work in flight at any given time depending upon the underlying communication services fabrics capabilities. The number of units of work that a given AI can have in flight at a given time is not limited by the possible scope of the reliable datagram service according to the present invention but can possibly be limited by specific implementation details of the SDRs and the underlying communication services fabric capabilities.

In one embodiment NAKs are generated on a per unit of work basis for each unit of work which is incorrectly received at the destination SDR resources. Example reasons for a unit of work to be incorrectly received at the destination SDR resources include cyclic redundancy check CRC error protection violation resource shortage unrecognized destination AI and the like. For each unit of work which is incorrectly received a NAK is transmitted from the destination SDR resources and the NAK includes appropriate information to allow the source AI or the underlying communication services fabric to determine the recovery action to perform in response to the NAK. If the NAK does not require a resynchronization event the NAK serves as an acknowledgment for the unit of work to allow subsequent units of work flowing through the same destination SDR resources to be processed as through no error had occurred.

Acknowledgments e.g. ACK NAK and communication services fabric error notification act as synchronization events between the source and destination ends of a SDR coupling the two devices of a device tuple to ensure that all units of work transmitted from the source device independent of the AIs involved are reliably delivered to the destination device. In one embodiment acknowledgments also act as acknowledgments at the AI level allowing a source AI to be assured that the units of work transmitted from the source AI are reliably delivered to a corresponding destination AI. In this embodiment unit of work retirement is automatically processed based on ACKs.

Thus there is a distinction between units of work delivered to a destination device and units of work delivered to a destination AI on the destination device. Delivery location and acknowledgement semantics determines what responding action the source AI should perform. For example if a unit of work is delivered to the destination device but not to the destination AI the source AI cannot assume that the unit of work has actually been consumed by the destination AI and thus the source AI must be careful as to whether subsequent actions should be performed.

An illustrative example is as follows if a source AI is moving a disk block from a first device to a first destination AI on a second device and then transferring ownership of the disk block to a second destination AI on a third device the source AI needs to be assured that the disk block was actually received by the first destination AI and was acted upon by the first destination AI before the source AI transfers ownership to the second destination AI. If the disk block was not actually received by the first destination AI or was not acted upon by the first destination AI before the source AI transfers ownership to the second destination AI a subsequent failure within the first destination AI could result in the second destination AI disk block owner reading stale data.

An example transmission operation between source device A indicated at and destination device C indicated at for data processing system is illustrated in diagram form in . As indicated in SDR resources at source device include a queue holding transmitted but not ACKed units of work and a queue holding units of work not yet transmitted. At the time indicated in queue includes the following units of work UW UW UW UW and UW. The units of work held in queue have been processed and transmitted by SDR resources of source device . At the time indicated in queue includes the following units of work UW UW UW and UW. SDR resources also store an expected next sequence number value which is equal to 6 at the time indicated in . SDR resources also store an ACK value which is equal to 0 at the time indicated in .

As illustrated in destination device C indicated at includes a queue holding received units of work. The received units of work held in queue at the time illustrated in include UW UW and UW. As indicated respectively at and the units of work UW and UW which have been transmitted from SDR resources are on the communication services fabric at the time indicated in . At the time indicated in SDR resources include an expected next sequence number value which is equal to 4 and an ACK value which is equal to 3. SDR resources have transmitted a stand alone ACK indicated at for the received unit of work UW and a cumulative ACK indicated at for the received units of work UW and UW. Again the decision to transmit ACKs as stand alone ACKs or cumulative ACKs is implementation dependent. In one embodiment a piggy back ACK on a unit of work flowing from destination device to source device can be employed to carry the ACK back to source device . As units of work are transmitted source device and destination device track what units of work have been acknowledged via ACK value for device and ACK value for device . As units of work are transmitted devices and via SDRs and also track the expected next sequence numbers via expected next sequence number value for device and expected next sequence number value for device to ensure reliability is maintained.

Another example transmission operation between source device A indicated at and destination device C indicated at to for data processing system is illustrated in diagram form in . In the transmission operation of the state of SDR resources of device are substantially similar to the state of SDR resources in the transmission operation of . Thus at the time indicated in queue of device includes UW UW UW UW and UW. Queue includes UW UW UW and UW. The expected next sequence number value is equal to 6 and the ACK value is equal to 0. In addition at the time indicated in device has received UW UW and UW into queue . Also similar to the transmission operation illustrated in SDR resources include the expected next sequence number value equal to 4 and the ACK value equal to 3. Additionally UW and UW are on the communication services fabric as indicated at and respectively.

However in the transmission operation of SDR resources of device have issued a cumulative ACK for UW and UW as indicated at . In addition SDR resources of device have issued a NAK for UW as indicated at . In one embodiment the NAK for UW indicated at also contains an error code to indicate the type of error detected to facilitate the resynchronization process. For example if a CRC error is detected UW can be transparently retransmitted without involving the source AI. If however the detected error is that the destination AI is not operational the source AI needs to be informed that UW and any other units of work which target the destination AI have failed. Once the source AI has been informed that UW and any other units of work which target the destination AI have failed the source AI determines the necessary recovery technique to be used. For such a non operational destination AI error devices and increment the ACK value indicated respectively at and and the expected next sequence number value respectively indicated at and because a resynchronization operation is not required and subsequent units of work in flight or to be transmitted can be processed as though the error did not occur assuming that the units of work target different destination AIs.

Another example transmission operation between source device A indicated at and destination device C indicated at for data processing system is illustrated in diagram form in . The example transmission operation of illustrates that the reliable datagram service according to the present invention guarantees strong ordering of the received units of work at destination device when the units of work flow through the same SDR e.g. SDR .

In the transmission operation of the state of SDR resources of device are substantially similar to the state of SDR resources in the transmission operations of . Thus at the time indicated in queue of device includes UW UW UW UW and UW. Queue includes UW UW UW and UW. The expected next sequence number value is equal to 6 and the ACK value is equal to 0.

However in the example transmission operation of the expected next sequence number value of SDR resources of destination device is equal to 3 indicating that SDR resources are expecting UW as the next unit of work in the serial unit of work stream from SDR resources of source device . However queue of device has received UW UW and UW. In addition as indicated at UW is still on the communication services fabric behind the already received UW and just ahead of UW indicated at in the serial unit of work stream from SDR resources of source device . Although the transmission operation of has UW out of its defined order in the unit of work stream by one unit of work position to more clearly illustrate a strong ordering violation typically a strong ordering violation occurs when a unit of work is completely missing from the unit of work stream. SDR resources have issued a cumulative ACK for UW and UW as indicated at . SDR resources have also issued a NAK for UW as indicated at which indicates a sequence number violation i.e. a strong ordering protocol violation . In this example the SDR sequence number of the protocol header of UW is equal to 4 which is larger than the expected next sequence number value which is equal to 3. This strong ordering protocol violation in this example transmission operation indicates that UW is missing. Thus SDRs and are resynchronized as the result of the NAK of UW indicated at .

Error detection and processing with the reliable datagram service according to the present invention is a function of the underlying communication services fabric and the type of communication e.g. sender based or receiver based communication being employed. The underlying communication services fabric and the type of communication being employed each provide error detection services which are generally independent of whether a given data processing system employs a reliable datagram service to communicate. Therefore the following description is restricted to a description of the detection and processing of the type of errors which directly impact the reliable datagram service operation according to the present invention.

A first type of error which directly impacts the reliable datagram service operation is a protocol violation. A first type of protocol violation is a protection related violation. Examples of protection violations include the unit of work protocol header containing invalid protection keys invalid access right request e.g. the request is to write to memory window but the destination AI has designated the memory window as read only memory address and bounds check violation and the like. The protection errors are detected and a NAK is generated indicating the protection error so that the source AI can take appropriate corrective actions. The NAK in response to the protection error acts as a SDR acknowledgment and does not require a resynchronization event to be initialized.

A second type of protocol violation error is a sequence number error. A sequence number error occurs when the SDR sequence number field of the protocol header is either smaller or larger than the expected sequence number of the destination SDR resources. The SDR sequence number field value being less than the expected next sequence number value stored in the destination SDR resources indicates that the unit of work is a duplicate unit of work. The SDR sequence number field value being greater than the expected SDR sequence number value stored in the destination SDR resources indicates that the current unit of work is received ahead of its defined order and thus an intermediate unit of work corresponding to the expected next sequence number value is missing.

In one implementation the sequence number check is actually a valid sequence number window check. In this implementation sequence numbers are implemented using a fixed range e.g. a 32 bit range yields 4 billion values . Within this range a valid window is used to determine whether a unit of work is valid or not valid. This is a sliding window to account for the eventual sequence number roll over. In one embodiment sequence number check is implemented as representing half of the entire range e.g. 2 billion if using a 32 bit sequence number . If the unit of work is within this range and less than what is expected then it is a duplicate. If it is greater than the value then either it is outside the window or it indicates that an intermediate unit of work was lost within the fabric. This will result in the unit of work being dropped silently accepted but not completed or a NAK can be generated indicating unit of work was dropped. Thus in this implementation the sequence number validation is a window validation check and the window is a sliding window.

The SDRs are resynchronized as a result of a sequence number error. In one embodiment if the unit of work is determined to be a duplicate the unit of work is silently dropped by the destination SDR resources. In one embodiment the destination SDR resources drop the duplicate unit of work and provide an ACK indicating to the source SDR resources that the last unit of work was received to avoid the source SDR resources from again transmitting the duplicate unit of work in case the previous ACK corresponding the firstly received unit of work with the same SDR sequence number was dropped.

If the current unit of work is received ahead of its defined order indicating that an intermediate unit of work is missing as a result of the SDR sequence number field value being greater than the expected SDR sequence number the destination SDR resources can take one of several actions. In one embodiment the destination SDR resources silently drop the unit of work and await the source SDR resources to retransmit the missing unit of work based for example on a timer expiring. In one embodiment the destination SDR resources generate a NAK in response to the indication that the unit of work is received ahead of its defined order and optionally drop the unit of work or temporarily store the unit of work into a received but unacknowledged queue. The NAK generated by the destination SDR resources informs the source SDR resources of the sequence number error and the expected next sequence number value. In one embodiment the source SDR resources selectively retransmit unacknowledged units of work in response to the NAK indicating that a unit of work was received ahead of its defined order. In one embodiment the source SDR resources retransmit all unacknowledged units of work in response to the NAK indicating that a unit of work was received ahead of its defined order.

Another type of error that directly impacts the reliable datagram service operation is the receipt of a corrupt unit of work. In this type of error the unit of work or the attached protocol header is corrupted such as by a CRC violation. In some situations the destination device is not capable of trusting any portion of the unit of work when the receipt of a corrupt unit of work error occurs. In these situations the destination device drops the unit of work and generates a NAK indicating the unit of work was corrupted. The next expected sequence number is included in the NAK so that the source device can determine which units of work are possibly lost and retransmit the unacknowledged units of work. The SDRs are resynchronized as a result of the receipt of a corrupt unit of work error.

Another type of error that directly impacts the reliable datagram service operation is a source AI or a destination AI abort error. No matter where the source AI or destination AI abort error occurs the units of work which are in flight either need to be flushed or completed so that all resources can be recovered. In one embodiment if the source AI is aborted the source device invalidates the unacknowledged units of work employs a small control structure to account for all in flight units of work so that the units of work can be completed even though the units of work are no longer valid and shuts down communications. The source AI and destination AI abort error does not require a resynchronization event and the flush operation is treated as a series of acknowledgements to insure all units of work on both sides of the device tuple have been acknowledged and all resources have been recovered.

Another type of error that directly impacts the reliable datagram service operation is the invalid destination AI error. The invalid destination AI error occurs when a source AI sends a unit of work to a destination AI which never was valid or is no longer valid. The destination device generates a NAK indicating the invalid DAI error for each unit of work targeting the invalid destination AI. The source device completes the units of work as normal and no resynchronization event is required with the invalid destination AI error.

In one embodiment quality of service QoS is implemented with the reliable datagram service according to the present invention by segregating the source AI traffic across a set of replicated SDRs. QoS relates to the scheduling of resources and AIs via service policies. QoS also relates to the employment of the service policies to effect the throughput and response times of a given AI unit of work stream.

Each SDR coupled between a tuple can be scheduled independently by the source device the destination device and the underlying communication services fabric. This type of independent scheduling allows an application independent QoS policy to be implemented by middleware AIs. In one embodiment each SDR is assigned a unique QoS. In one embodiment SDRs are grouped into QoS levels where each QoS level is assigned a unique QoS.

Replicating SDRs creates the following generalized application benefits. First AI communication resource contention is reduced because the communication resource contention can be spread across the multiple SDRs. Secondly the number of AIs impacted by a given AI s behavior is reduced. As an illustrative example strong ordering is preserved in part because a given unit of work transmission must be completed before subsequent unit of work transmissions can be acknowledged and completed. Therefore if two source AIs are sharing the same SDR the order that the source AIs issue requests is maintained by the SDR.

A third benefit to replicating SDRs is that when an error occurs only the AIs employing the impacted SDR s are effected. Thus all other AIs can continue to operate depending upon the error type. Transient errors such as a CRC error are recoverable. Hard errors such as an error occurring because a physical link between AIs has failed are recoverable if an alternative path physical link exists between the AIs and sufficient state information is available to successfully perform the replacement of the failed physical link with the alternative path physical link.

A portion of a data processing system having multiple SDRs established between device pairs according to the present invention is illustrated generally at in . Data processing system includes a reliable datagram service according to the present invention which has improved application performance and scalability because middleware AIs in data processing system establish multiple SDRs between a device A indicated at and a device B indicated at . An example middleware AI for device is indicated at . An example middleware AI for device is indicated at .

A SDR including SDR resources at device and SDR resources at device implements a reliable datagram service between device and device . A SDR including SDR resources at device and SDR resources at device implements a reliable datagram service between device and device . A SDR including SDR resources at device and SDR resources at device implements a reliable datagram service between device and device . A SDR including SDR resources at device and SDR resources at device implements a reliable datagram service between device and device . The source and destination ends of each of the SDRs and communicate via a communication services fabric . Device and device can each be a source or a destination device depending on the direction of communication.

Thus device A indicated at and device B indicated at communicate together via reliable datagram service provided by four established SDRs and . The example configuration illustrated in is for illustrative purposes only and similar configurations can be established between an arbitrary number of devices. As illustrated in a set of AIs are bound to each SDR restricting the impact any AI has on another AI to generally only occur if the AIs share the same SDR.

In the example embodiment illustrated in device includes an AI coupled to SDR resources and AI coupled to SDR resources and SDR resources AIs and each coupled to SDR resources and AIs and each coupled to SDR resources . Device includes an AI coupled to SDR resources an AI coupled to SDR resources and SDR resources AIs and each coupled to SDR resources and AIs and each coupled to SDR resources

SDR resources and are serviced based on the scheduling heuristics maintained at SDR schedule heuristics in device . Similarly SDR resources and are serviced based on the scheduling heuristics maintained at SDR schedule heuristics in device . In this way SDR schedule heuristics are used to adjust the scheduling rate to create different QoS for the AIs bound to the SDRs.

In the embodiment illustrated in AI and AI are exclusively assigned to SDR . When and if two AIs such as AIs and are exclusively assigned to one SDR is determined by a middleware AI local to a device such as middleware AI of device and middleware AI of device a middleware AI executing remotely and acting as a central manager such as middleware AI which is accessed via the underlining communication services fabric and or an application policy heuristics such as stored at SDR schedule heuristics of device and SDR schedule heuristics of device . Normally such a decision is based on the application or device service level objectives.

A given AI such as AI and AI can be bound to multiple SDRs if the given AI establishes multiple reliable datagram endpoints to communicate through. In such a case each endpoint is serviced based on SDR scheduling heuristics such as stored at SDR schedule heuristics in device and at SDR schedule heuristics in device .

Establishing multiple SDRs between any two devices in data processing system over which multiple AIs may operate provides the following benefits. Since each SDR is generally mutually independent from other SDRs the behavior of the AIs bound to one SDR does not generally impact the behavior of AIs bound to another SDR. For example an AI which processes large units of work can be bound to a different SDR so that it does not impact the performance of an AI which processes small units of work.

Another benefit of establishing multiple SDRs between two devices in data processing system is that errors which occur on one SDR generally do not impact the behavior of AIs bound to another SDR. In addition error recovery may be shorter or simplified depending upon the number of SDRs between any two devices and the type of error detected e.g. transient protcol communication services failure and the like .

Another benefit of establishing multiple SDRs between two devices in data processing system is that a middleware AI such as middleware AI of device may modify the SDR scheduling heuristics such as SDR schedule heuristics of device to transparently adjust the service rate a given AI receives relative to other AIs. For example an AI which is primarily processing high priority units of work can be bound to a SDR which is scheduled ahead of SDRs which are processing lower priority units of work. This modification of the SDR scheduling heuristics permits the middleware AI to create QoS policies based on the service level objectives associated with a given AI.

Another benefit of establishing multiple SDRs between two devices in data processing system is that within a given priority band multiple AIs may be segregated across multiple SDRs with the SDRs within the priority band being serviced using simple scheduling policies such as round robin or weighted round robin. The objective of the priority band being serviced using the simple scheduling policies is to reduce the potential contention on a given SDR to further limit the number of AIs impacted by a given AI s behavior when the SDR is shared among multiple AIs. The priority band being serviced using these simple scheduling policies improves AI scalability and overall performance of the applications. However any type of arbitrary scheduling policies can be created for QoS.

In the reliable datagram service according to the present invention striping refers to the technique of transmitting units of work over multiple SDRs from one source AI to one destination AI. If strong ordering is required when transmitting units of work from a source AI to a destination AI the source AI needs to transmit the units of work on one SDR. But if weak ordering is possible when transmitting units of work from a source AI to a destination AI the source AI can transmit the units of work on multiple SDRs i.e. the source AI can employ striping with some priority scheme but with the potential that strong ordering is not maintained. For example most multi media applications can be transmitted with striping so that resolution at the receiving end improves over time but without the pixels arriving in a strongly ordered manner.

As to establishing multiple SDRs for a given device pair the reliable datagram service according to the present invention provides no limit on the number of SDRs which can be established between the given device pair. There are however practical design considerations to limit the number of SDRs established between a given device pair. For example each added SDR includes corresponding added physical resources. Moreover additional resources are required to schedule the unit of work traffic between the given device pair across multiple SDRs and the scheduling becomes more complex as the number of SDRs are increased. In addition the number of priority levels assigned to the multiple SDRs is preferably kept at a practical design number. Thus the number of the SDRs to establish between a given device pair and the priority levels to be assigned to the multiple SDRs is limited only by implementation design considerations.

As discussed in the Background of the Invention section of the present specification AIs employing a reliable connection service must create one dedicated resource set per destination AI. By contrast AIs employing the reliable datagram service according to the present invention can re use the same resource set per multiple destination AIs. Thus the reliable datagram service according to the present invention reduces the number of resource sets to create and manage which accordingly reduces AI implementation cost and design complexity. In this way the reliable datagram service according to the present invention provides for highly scalable data processing systems.

Even though the reliable datagram service according to the present invention provides for highly scalable data processing systems the reliable datagram service provides reliable communication between AIs including guaranteed ordering of units of work transmitted between AIs. The reliable datagram service according to the present invention provides the reliability of the reliable connection service described in the Background of the Invention section of the present specification by guaranteeing that the unit of work transmission is reliable so that AIs employing the reliable datagram service can rely on the underlying communication services fabric to correctly deliver the units of work or on error notification in the event of an unrecoverable error. In this way the reliable datagram service according to the present invention permits an AI to effectively off load unit of work delivery to the reliable datagram service which reduces AI development costs.

Moreover in one embodiment of a data processing system according to the present invention unreliable datagram service is simultaneously supported on a communication services fabric which supports reliable datagram service. In one embodiment unreliable datagram service is simultaneously supported along with reliable datagram service by tagging a unit of work as unreliable and avoiding acknowledgment error processing actions. In one embodiment an unreliable datagram service is simultaneously supported along with a reliable datagram service by treating all data as reliable and as a result never entering an application unit of work recovery algorithm.

Although specific embodiments have been illustrated and described herein for purposes of description of the preferred embodiment it will be appreciated by those of ordinary skill in the art that a wide variety of alternate and or equivalent implementations calculated to achieve the same purposes may be substituted for the specific embodiments shown and described without departing from the scope of the present invention. Those with skill in the chemical mechanical electromechanical electrical and computer arts will readily appreciate that the present invention may be implemented in a very wide variety of embodiments. This application is intended to cover any adaptations or variations of the preferred embodiments discussed herein. Therefore it is manifestly intended that this invention be limited only by the claims and the equivalents thereof.

