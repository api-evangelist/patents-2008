---

title: Research rapidity and efficiency improvement by analysis of research artifact similarity
abstract: Methods for comparing query-related objects are provided. In one embodiment, a first plurality of query-related objects for a first user is compared to a second plurality of query-related objects for a second user to determine a degree of similarity between the first and second plurality of query-related objects. A notification of the degree of similarity is issued.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08583624&OS=08583624&RS=08583624
owner: International Business Machines Corporation
number: 08583624
owner_city: Armonk
owner_country: US
publication_date: 20081105
---
This application is a continuation of co pending U.S. patent application Ser. No. 11 005 435 filed Dec. 6 2004 now U.S. Pat. No. 7 480 648 which is herein incorporated by reference in its entirety.

The present invention generally relates to a method of examining queries in a database management system and notifying users based on the results of the examination.

Databases are computerized information storage and retrieval systems. A relational database management system is a computer database management system DBMS that uses relational techniques for storing and retrieving data. The most prevalent type of database is the relational database a tabular database in which data is defined so that it can be reorganized and accessed in a number of different ways.

Regardless of the particular architecture in a DBMS a requesting entity e.g. an application operating system or end user demands access to a specified database by issuing a database access request. Such requests may include for instance simple catalog lookup requests or transactions and combinations of transactions that read change and add specified records in the database. These requests are made using high level query languages such as Structured Query Language SQL . Illustratively SQL is used to construct a query that retrieves information from and updates information in a database. Known databases include International Business Machines IBM DB2 Microsoft s SQL Server and database products from Oracle Sybase and Computer Associates . The term query referrers to a set of commands composed to retrieve data from a stored database. Queries take the form of a command language that lets programmers and programs select insert update determine the location of data and the like.

One area where databases are extensively used is in the area of research. Modern research is a daunting task for researchers. Research may require expensive lab equipment long hours of testing theories and time spent analyzing results. Researchers may be presented with a variety of computational resources and research methods with which they may conduct their research. In conducting research the researcher may narrow the possibilities for research methods and resource use to a selected few resources and methods. Each of the methods and resources selected by the researcher may be particular to the research being conducted.

Modern research may also be extremely expensive both in terms of the cost of the research equipment and the cost of the time spent by the research in conducting research. Due to the expense of modern research researchers are constantly looking for ways to reduce the costs of research. The institutions and corporations that conduct major research projects may also wish to reduce the costs associated with research. One of the ways to reduce the costs of research may be for researchers to share the equipment and analytical tools being used for research. Thus if two researchers need to use the same device and if neither researcher needs to monopolize the use of the device the researchers may split the cost of purchasing and using the device and share the device for use in their research.

Another way to reduce the costs of research may be to avoid duplicative research efforts by researchers. For instance if two researchers are studying similar problems a portion or all of their research efforts being used to study the problems may overlap. By sharing data regarding the areas of overlap or by combining their common knowledge the researchers may eliminate all or a portion of the duplicative research and split the cost of the common research. By sharing information regarding the non duplicative aspects of their research the researchers may discover new problems and new solutions which each researcher may not have discovered while working alone. Indeed where researchers studying two different problems use the same research tools and generate the same research data if the researchers were informed of each other s research they may discover that the two different problems are in fact related. For instance where two researchers are studying two diseases believed to be distinct and both researchers use the same research tools and generate similar research data the researchers upon being informed of each other s research may discover that the diseases they are studying are related either because one diseases causes the other because the diseases are spread in the same manner or because the two diseases are both caused by a common but undiscovered disease.

Despite the advantages which may be gained by sharing resources and eliminating duplicative research efforts researches may still face the task of discovering other researchers with whom they may share resources and discovering and avoiding duplicative research efforts. Discovering other researchers conducting similar research may be difficult because research on new subjects may last several years with the results remaining unpublished until the research has concluded. In addition researchers may guard their research to avoid the risk of having others take their ideas.

One way of identifying researchers conducting similar research may be to analyze each researcher s use of a database for conducting research. The database used by a researcher may provide a centralized point for collecting and analyzing information about the research being conducted by a researcher. In both research and fields other than research comparing database searches may help searchers avoid duplicative efforts and share resources as well. Therefore what is needed is a method for identifying related database search efforts and a mechanism for notifying independent searchers of the similarity of their respective searches.

The present invention generally provides methods for comparing query related objects. One embodiment provides for receiving a first plurality of query related objects for a first user receiving a second plurality of query related objects for a second user wherein both the first and second plurality of query related objects include objects of different object types. The first plurality of query related objects of a given type are compared with the second plurality of query related object of the same type to determine a degree of similarity between the first and second plurality of query related objects and issuing a notification of the degree of similarity.

Another embodiment provides a method for comparing query related objects. The method generally includes providing a data abstraction layer which defines one or more logical fields wherein a definition for each logical field specifies i a name and ii an access method that maps the logical field to data in an underlying data repository. The method further generally includes receiving from a first user a first abstract query composed from the one or more logical fields defined in the data abstraction layer receiving from a second user a second abstract query composed from the one or more logical fields defined in the data abstraction layer comparing the first abstract query and the second abstract query to determine a degree of similarity and issuing a notification of the degree of similarity.

Yet another embodiment provides a method for comparing query related objects. The method provides for receiving a plurality of query related objects of two or more object types each query related object having a different owner sorting the plurality of query related objects according to the two or more object types calculating a degree of similarity of the sorted query related objects of each of the two or more object types determining if the calculated degree of similarity of the sorted query related objects is above a threshold for similarity. For those sorted query related objects having the calculated degree of similarity above the threshold for similarity the method further generally provides for selecting pairs of query related objects with different owners having a predetermined degree of association grouping the selected pairs of query related objects by the owners of the query related objects and ranking the grouped pairs of query related objects based upon the number of selected pairs of query related objects within the group.

The present invention is generally directed to a method comparing query related objects. In general a first plurality of query related objects is received for a first user and a second plurality of query related objects is received for a second user. The first plurality of query related objects is compared with the second plurality of query related object to determine a degree of similarity between the first and second plurality of query related objects and a notification of the degree of similarity is issued. Accordingly users conducting similar research in a database environment may be notified of the similarity of their research.

While embodiments of the present invention are described with reference to the comparison of the research of two or more researchers embodiments of the invention may be used to compare any queries including queries unrelated to any specific research. According to other embodiments of the invention the queries being compared may be generated by a regular user by an application by an administrator or by any method known to those skilled in the art. While embodiments of the invention may be described with reference to comparison of two queries from two researchers other embodiments of the invention may provide for the comparison of multiple queries from multiple researchers. Furthermore while embodiments of the invention are described below with reference to a database system utilizing an abstract query framework embodiments of the invention may also be used in systems which do not utilize an abstract query framework.

One embodiment of the invention is implemented as a program product for use with a computer system such as for example the computer system shown in and described below. The program s of the program product defines functions of the embodiments including the methods described herein and can be contained on a variety of signal bearing media. Illustrative signal bearing media include but are not limited to i information permanently stored on non writable storage media e.g. read only memory devices within a computer such as CD ROM disks readable by a CD ROM drive ii alterable information stored on writable storage media e.g. floppy disks within a diskette drive or hard disk drive or iii information conveyed to a computer by a communications medium such as through a computer or telephone network including wireless communications. The latter embodiment specifically includes information downloaded from the Internet and other networks. Such signal bearing media when carrying computer readable instructions that direct the functions of the present invention represent embodiments of the present invention.

In general the routines executed to implement the embodiments of the invention may be part of an operating system or a specific application component program module object or sequence of instructions. The software of the present invention typically is comprised of a multitude of instructions that will be translated by the native computer into a machine readable format and hence executable instructions. Also programs are comprised of variables and data structures that either reside locally to the program or are found in memory or on storage devices. In addition various programs described hereinafter may be identified based upon the application for which they are implemented in a specific embodiment of the invention. However it should be appreciated that any particular nomenclature that follows is used merely for convenience and thus the invention should not be limited to use solely in any specific application identified and or implied by such nomenclature.

The client computer includes a Central Processing Unit CPU connected via a bus to a memory storage an input device an output device and a network interface device . The input device can be any device to give input to the client computer . For example a keyboard keypad light pen touch screen track ball or speech recognition unit audio video player and the like could be used. The output device can be any device to give output to the user e.g. any conventional display screen. Although shown separately from the input device the output device and input device could be combined. For example a display screen with an integrated touch screen a display with an integrated keyboard or a speech recognition unit combined with a text speech converter could be used.

The network interface device may be any entry exit device configured to allow network communications between the client computer and the server computer via the network . For example the network interface device may be a network adapter or other network interface card NIC .

Storage is preferably a Direct Access Storage Device DASD . Although it is shown as a single unit it could be a combination of fixed and or removable storage devices such as fixed disc drives floppy disc drives tape drives removable memory cards or optical storage. The memory and storage could be part of one virtual address space spanning multiple primary and secondary storage devices.

The memory is preferably a random access memory sufficiently large to hold the necessary programming and data structures of the invention. While the memory is shown as a single entity it should be understood that the memory may in fact comprise a plurality of modules and that the memory may exist at multiple levels from high speed registers and caches to lower speed but larger DRAM chips.

Illustratively the memory contains an operating system . Illustrative operating systems which may be used to advantage include Linux and Microsoft s Windows . More generally any operating system supporting the functions disclosed herein may be used.

The memory is also shown containing a browser program that when executed on CPU provides support for navigating between the various servers and locating network addresses at one or more of the servers . In one embodiment the browser program includes a web based Graphical User Interface GUI which allows the user to display Hyper Text Markup Language HTML information. More generally however the browser program may be any GUI based program capable of rendering the information transmitted from the server computer .

The server computer may be physically arranged in a manner similar to the client computer . Accordingly the server computer is shown generally comprising a CPU a memory and a storage device coupled to one another by a bus . Memory may be a random access memory sufficiently large to hold the necessary programming and data structures that are located on the server computer .

The server computer is generally under the control of an operating system shown residing in memory . Examples of the operating system include IBM OS 400 UNIX Microsoft Windows and the like. More generally any operating system capable of supporting the functions described herein may be used.

The memory further includes one or more applications an abstract query interface and a rule application manager . The applications the abstract query interface and the rule application manager are software products having a plurality of instructions that are resident at various times in various memory and storage devices in the computer system . When read and executed by one or more processors in the server the applications the abstract query interface and the rule application manager cause the computer system to perform the steps necessary to execute steps or elements embodying the various aspects of the invention. The applications and more generally any requesting entity including the operating system and at the highest level users issue queries against a database e.g. databases . . . collectively referred to as database s . Illustratively the databases are shown as part of a database management system DBMS in storage . The databases are representative of any collection of data regardless of the particular physical representation. By way of illustration the databases may be organized according to a relational schema accessible by SQL queries or according to an XML schema accessible by XML queries . However the invention is not limited to a particular schema and contemplates extension to schemas presently unknown. As used herein the term schema generically refers to a particular arrangement of data.

The memory may also include a query comparator according to one embodiment of the invention. The query comparator may be used to compare two or more abstract queries received by the server computer . The query comparator is described below in greater detail with reference to .

In one embodiment the queries issued by the applications are defined according to an application query specification included with each application . The queries issued by the applications may be predefined i.e. hard coded as part of the applications or may be generated in response to input e.g. user input . In either case the queries referred to herein as abstract queries are composed using logical fields defined by the abstract query interface . In particular the logical fields used in the abstract queries are defined by a data repository abstraction component of the abstract query interface . The abstract queries are executed by a runtime component which first transforms the abstract queries into a form consistent with the physical representation of the data contained in the DBMS e.g. by translating abstract queries into concrete queries. The rule application manager implements a rule application mechanism for restricting queryable data to a subset of all available data contained in the DBMS . In one embodiment the rule application manager restricts the queryable data by redefining a query that is executed against the database in order to execute the redefined query against the queryable data. Alternatively the rule application manager restricts the queryable data using a condition retrieved from storage when executing a received query. Still alternatively the rule application manager restricts the queryable data by modifying the data repository abstraction component. The application query specification the abstract query interface and the rule application manager are further described with reference to .

In one embodiment elements of a query are specified by a user through a graphical user interface GUI . The content of the GUIs is generated by the application s . In a particular embodiment the GUI content is hypertext markup language HTML content which may be rendered on the client computer systems with the browser program . Accordingly the memory includes a Hypertext Transfer Protocol HTTP server process e.g. a web server adapted to service requests from the client computer . For example the process may respond to requests to access a database s which illustratively resides on the server . Incoming client requests for data from a database invoke an application . When executed by the processor the application causes the server computer to perform the steps or elements embodying the various aspects of the invention including accessing the database s . In one embodiment the application comprises a plurality of servlets configured to build GUI elements which are then rendered by the browser program .

The logical fields specified by the application query specification and used to compose the abstract query are defined by the data repository abstraction component . In general the data repository abstraction component exposes information as a set of logical fields that may be used within a query e.g. the abstract query issued by the application to specify criteria for data selection and specify the form of result data returned from a query operation. The logical fields are defined independently of the underlying data representation being used in the DBMS thereby allowing queries to be formed that are loosely coupled to the underlying data representation.

In general the data repository abstraction component exposes information as a set of logical fields that may be used within a query e.g. the abstract query issued by the application to specify criteria for data selection and specify the form of result data returned from a query operation. The logical fields are defined independently of the underlying data representation being used in the database thereby allowing queries to be formed that are loosely coupled to the underlying data representation.

In one embodiment the data repository abstraction component comprises a plurality of field specifications and five shown by way of example collectively referred to as the field specifications . Specifically a field specification is provided for each logical field available for composition of an abstract query. Each field specification contains a logical field name collectively field name and an associated access method collectively access method . The access methods associate i.e. map the logical field names to a particular physical data representation . . . in the database e.g. database . By way of illustration two data representations are shown an XML data representation and a relational data representation . However the physical data representation indicates that any other data representation known or unknown is contemplated. In one embodiment a single data repository abstraction component contains field specifications with associated access methods for two or more physical data representations . In an alternative embodiment a different single data repository abstraction component is provided for each separate physical data representation .

Any number of access methods is contemplated depending upon the number of different types of logical fields to be supported. In one embodiment access methods for simple fields filtered fields and composed fields are provided. The field specifications and exemplify simple field access methods and respectively. Simple fields are mapped directly to a particular entity in the underlying physical data representation e.g. a field mapped to a given database table and column . By way of illustration the simple field access method shown in maps the logical field name FirstName to a column named f name in a table named contact . The field specification exemplifies a filtered field access method . Filtered fields identify an associated physical entity and provide filters used to define a particular subset of items within the physical data representation. An example is provided in in which the filtered field access method maps the logical field name AnyTownLastName to a physical entity in a column named I name in a table named contact and defines a filter for individuals in the city of Anytown . Another example of a filtered field is a New York ZIP code field that maps to the physical representation of ZIP codes and restricts the data only to those ZIP codes defined for the state of New York. The field specification exemplifies a composed field access method . Composed access methods compute a logical field from one or more physical fields using an expression supplied as part of the access method definition. In this way information which does not exist in the underlying data representation may be computed. In the example illustrated in the composed field access method maps the logical field name AgelnDecades to AgeInYears 10 . Another example is a sales tax field that is composed by multiplying a sales price field by a sales tax rate.

It is contemplated that the formats for any given data type e.g. dates decimal numbers etc. of the underlying data may vary. Accordingly in one embodiment the field specifications include a type attribute which reflects the format of the underlying data. However in another embodiment the data format of the field specifications is different from the associated underlying physical data in which case a conversion of the underlying physical data into the format of the logical field is required.

By way of example the field specifications of the data repository abstraction component shown in are representative of logical fields mapped to data represented in the relational data representation . However other instances of the data repository abstraction component map logical fields to other physical data representations such as XML.

An illustrative abstract query corresponding to the abstract query shown in is shown in Table I below. By way of illustration the illustrative abstract query is defined using XML. However any other language may be used to advantage.

Illustratively the abstract query shown in Table I includes a selection specification lines 005 014 containing selection criteria and a results specification lines 015 019 . In one embodiment a selection criterion consists of a field name for a logical field a comparison operator 

An illustrative Data Repository Abstraction is shown in Table II below. By way of illustration the illustrative Data Repository Abstraction is defined using XML. However any other language may be used to advantage.

After building the data selection portion of the concrete query the runtime component identifies the information to be returned as a result of query execution. As described above in one embodiment the abstract query defines a list of abstract fields that are to be returned as a result of query execution referred to herein as a result specification. A result specification in the abstract query may consist of a field name and sort criteria. Accordingly the method enters a loop at step defined by steps and to add result field definitions to the concrete query being generated. At step the runtime component looks up a result field name from the result specification of the abstract query in the data repository abstraction and then retrieves a Result Field Definition from the data repository abstraction to identify the physical location of data to be returned for the current logical result field. The runtime component then builds as step a Concrete Query Contribution of the concrete query that identifies physical location of data to be returned for the logical result field. At step Concrete Query Contribution is then added to the Concrete Query Statement. Once each of the result specifications in the abstract query has been processed the query is executed at step .

One embodiment of a method for building a Concrete Query Contribution for a logical field according to steps and is described with reference to . At step the method queries whether the access method associated with the current logical field is a simple access method. If so the Concrete Query Contribution is built step based on physical data location information and processing then continues according to method described above. Otherwise processing continues to step to query whether the access method associated with the current logical field is a filtered access method. If so the Concrete Query Contribution is built step based on physical data location information for some physical data entity. At step the Concrete Query Contribution is extended with additional logic filter selection used to subset data associated with the physical data entity. Processing then continues according to method described above.

If the access method is not a filtered access method processing proceeds from step to step where the method queries whether the access method is a composed access method. If the access method is a composed access method the physical data location for each sub field reference in the composed field expression is located and retrieved at step . At step the physical field location information of the composed field expression is substituted for the logical field references of the composed field expression whereby the Concrete Query Contribution is generated. Processing then continues according to method described above.

If the access method is not a composed access method processing proceeds from step to step . Step is representative of any other access methods types contemplated as embodiments of the present invention. However it should be understood that embodiments are contemplated in which less then all the available access methods are implemented. For example in a particular embodiment only simple access methods are used. In another embodiment only simple access methods and filtered access methods are used.

As described above it may be necessary to perform a data conversion if a logical field specifies a data format different from the underlying physical data. In one embodiment an initial conversion is performed for each respective access method when building a Concrete Query Contribution for a logical field according to the method . For example the conversion may be performed as part of or immediately following the steps and . A subsequent conversion from the format of the physical data to the format of the logical field is performed after the query is executed at step . Of course if the format of the logical field definition is the same as the underlying physical data no conversion is necessary.

According to one embodiment of the invention each user may submit abstract queries which are transformed into concrete queries using different database repository abstractions. illustrates such an environment. The environment shown in generally comprises an application layer defined by the application a data abstraction layer and a physical data layer . The environment shows two users accessing the physical data layer via the application layer using e.g. application of e.g. by issuing abstract query of . Accordingly the application layer may comprise a data query builder component adapted to enable the users to build abstract queries.

The users access the same physical data layer through a common application layer . However the data being exposed to the respective users is not the same. Rather each user is exposed to selected portions of the physical data layer according to the definition of the data abstraction layer . More particularly the data abstraction layer illustratively includes two data repository abstraction components DRA and DRA which define the data that will be exposed to the users respectively via the application layer . The data abstraction layer may comprise a data query abstraction component which services logical data access of the data query builder component to the physical data in physical data layer .

In the present example the first data repository abstraction DRA exposes all of a first database and TABLE 1 of a second database while the second data repository abstraction DRA exposes the entire second database and TABLE 2 of the first database . It should be noted that the particular data exposed by the respective data repository abstraction components is merely illustrative. More generally any portion of the databases may be exposed as well as any other databases of the physical data layer . By way of illustration the environment of shows two users . However more generally any number of users may be accessing the data of the physical data layer .

Referring now to an embodiment in which multiple instances of a single data repository abstraction component e.g. data repository abstraction component coexist in a single application space is illustrated. According to a group of users USER A USER B USER C USER D . . . USER N accesses as illustrated by arrow a single data repository abstraction independent of whether only one or a plurality of data repository abstractions exist. In the present illustration all users of the group of users access data repository abstraction DRA.

For each user . . . accessing the data repository abstraction DRA an instance of the data repository abstraction is generated as indicated by arrow thereby generating a group of data repository abstraction instances. Accordingly instances DRA A DRA B DRA C DRA D . . . DRA N are generated for the users . . . respectively as indicated by arrows and . Providing an instance of the data repository abstraction for each user allows adapting a corresponding instance to the needs and specific requirements of the user without globally changing the data repository abstraction for all users in the group .

Users may have different database repository abstractions for several reasons. For instance a user may have a customized DRA which only exposes limited relevant portions of an underlying database to the user. Each user may also have different DRAs because the underlying database being used by each user may be stored using a different physical data representation or in a different format. For instance the underlying data for each database may be stored in different tables with different column names. In another instance the information accessed by one user may be stored in an XML schema whereas the information accessed by another user may be stored in a relation schema accessible by SQL queries . Also each DRA may be used to access a completely different database. In general each different database being accessed by the user may also be located on different computers owned by the same company or may be located at different places and owned by different companies.

Data repository abstractions may also be used in conjunction with views. A view may be used as a filter which resides above a DRA to expose a selected portion of the DRA to a user or to modify or redefine the logical fields in a DRA according to the user s preferences. For instance where a DRA contains a logical field named gender a view may be used to redefine the logical field and allow the user to access that field through a new field named sex . A view may be implemented in any way known to those skilled in the art.

According to one embodiment of the invention queries query results and result analysis routines from two or more different researchers may be compared to determine if the researchers are conducting similar research. The queries being compared may either be concrete queries abstract queries or any other type of query known to those skilled in the art. The comparison of queries results and analyses may be performed on data in the form of query related objects. The term object as used herein may refer to a file an entry in a data file an entry in a log file a data structure a stream of status messages or any other means used to store or transmit information known to those skilled in the art. Each query related object may be of a certain type according to the information conveyed in the object. Thus object types may include query objects result objects and analysis objects.

At step pairs of objects with owners that do not have a close association may be selected. The owner of an object may be the researcher or user which is executing the query obtaining the results and performing analyses on the results. Information about the owner of an object may be contained in the object in a message accompanying the object or may be transmitted in any way known to those skilled in the art. Pairs of objects with owners that do have a close association may be ignored because those owners having a close association may be aware of each other s research and may not need to be notified of the similarity of their respective research. For instance such a situation may arise where researchers work in the same laboratory or report to the same authority. Information about whether owners of the objects have a close association may be stored in the comparison criteria may be entered using the administrator interface may be provided with the objects or may be provided by any other means known to those skilled in the art.

At step similar pairs of objects may be grouped according to their connection with the owning individuals and a rank may be assigned to the group. Thus if two researchers have two similar pairs of objects in common those two pairs of four objects would be grouped together. The number of similar pairs of objects grouped together may be used to assign a rank to the group. For instance if two pairs of objects are similar for a first group of researchers the group of two pairs may be ranked higher than a singular pair of similar objects for a second group of researchers.

As an example of how a rank may be assigned to pairs of objects for a group of researchers consider the following exemplary query related object groupings.

Table IV contains rankings for three groupings of researcher queries. The highest ranked group Joe Morgan Bill Meyers has the largest number of similar object pairs in common with six total similar pairs two query pairs three results pairs and one analysis pair . The lower ranked groups Jane Caruthers Jack Johnson and Janet Brady Charles Mahoney have fewer similar pairs in common four similar pairs for Jane Caruthers Jack Johnson and two similar pairs for Janet Brady Charles Mahoney . According to another embodiment of the invention the rank may also incorporate the degree of similarity of the objects. For instance a higher degree of similarity of a pair of objects may contribute more to the rank than a lower degree of similarity.

At step a determination may be made of whether there is a new similarity i.e. a previously undiscovered similarity between object pairs and if so the rank of the group containing the pair may be increased. Thus if a new similarity between the research being performed by the researchers is discovered the increased rank may be used to display the new similarity to the researchers first in a ranked list of the results and older similarities that the researcher may already have reviewed may be placed lower in a ranked list of the results. In one embodiment information regarding whether a similarity is new or old may be stored in the comparison criteria using the objects or in any other manner known to those skilled in the art. At step the results of the comparisons may then be recorded. The results of the comparisons may be recorded for future analysis of the results to determine which pairs of similar objects are new in future runs and for later retrieval by an administrator or user. Then at step the process may finish.

The comparison of queries performed according to one embodiment of the invention by the process may be performed at different times according to different embodiments of the invention. According to one embodiment of the invention the comparison may be performed as each abstract query is received. According to another embodiment of the invention the comparison may be performed at off peak times when the system is not being utilized by other processes. For instance the comparison may be performed late at night after the researchers have left work and when no queries are being submitted. According to yet another embodiment of the invention the comparison may be performed upon receiving a request from a user or administrator.

The similarity between the two query related objects may be determined in different ways according to different embodiments of the invention. In one embodiment the similarity between two query related objects may be measured by comparing two query related objects to each other. In another embodiment the similarity between the query related objects may alternatively be measured by comparing the objects with respect to how they deviate from other query related objects in the database system.

Where two query related objects are compared with respect to how they differ from other query related objects the other query related objects being compared may be collectively represented by objects which are typical for query conditions query results and analyses in a system. A query related object may be typical in a system because it occurs frequently within the system. These objects may be selected by statistically analyzing of all of the queries results and analyses in a system to determine common queries results and analyses used in the system. Use of these objects in comparison of the abstract queries is described in greater detail below. The query related objects may also be compared with respect to how they deviate from a query related object drawn at random from the system.

If the objects being compared are similar the degree of similarity may be incremented at step . If however the similar objects match an object which is typically contained in queries in the system the degree of similarity may be decremented at step . The degree of similarity may be decremented when the objects are similar to another object typically appearing in the system because the match may not be considered very unique or significant where the object is expected to appear frequently. For example consider a research environment in which 90 of all queries contain a patient identifier. In this case the patient identifier is common to almost all queries and not a good indication that any two given queries may be similar. On the other hand queries in the same environment not including the patient identifier may be considered to have possible similarity in which case the degree of similarity is incremented at step and not decremented at step . At step any weights associated with the objects being compared may be applied to the degree of similarity. For instance if the two objects are highly unique in the system a higher weight may be assigned to the objects and the degree of similarity may be increased because of the probability of such objects being contained in other queries in the system assigning weights to objects is described below in greater detail . At step the process may finish.

As an example of how objects relating to two abstract queries results and analyses may be compared consider the following exemplary query related objects and exemplary objects representing the typical abstract query in a system.

The information in Table IV is divided into three sets columns. The first set and second set contain exemplary abstract queries run by two different researchers along with the results of the abstract queries and the analysis performed by the researchers on the abstract query results.

The final column contains objects which represent a statistical average of all of the abstract queries query results and results analyses which have been run on the system. For instance the average abstract query run on the system may contain a query condition which requests the ID field and the average abstract query may have query results which include ID number 23. Thus while not all abstract queries executed by researchers may request that the ID field be returned in the results many researchers may use the ID field for further analysis and thus request the ID field. Accordingly a statistical analysis of all of the queries in the system may show that the ID field is requested by the average abstract query being executed by the system. However the statistical analysis of the queries in the system may not give a statistically meaningful result with respect to each category of object and thus for example there may be no statistical convergence with respect to the average analysis run by a researcher executing abstract queries in the system. This may be due to the fact that the analyses used by each researcher are very specialized and thus may not be executed by the average query being executed in the system.

Where a set of objects representing two abstract queries results and analyses are compared directly with each other the overall similarity may be calculated in the following manner according to one embodiment of the invention. Because the first abstract query and the second abstract query contain 3 components in common both request ID and Weight where Age 40 the initial degree of similarity is 3. In addition the similarity between the abstract query results may be 2 because both sets of results contain ID numbers 23 and 48. Finally both the first and second abstract queries request a linear regression analysis on weight yielding a similarity of 1. The overall similarity may then be calculated as the sum of the similarity of the abstract queries the results and the analyses resulting in an overall similarity of 6.

In another embodiment the overall degree of similarity of two abstract queries results and analyses may be calculated with respect to the objects representing the average abstract query result and analysis in the following manner. Because the first abstract query and the second abstract query contain 3 components in common both request ID and Weight where Age 40 the initial degree of similarity is 3. However the average abstract query in the system contains a request for the ID so ID is common to most abstract queries and may be discounted resulting in a degree of similarity of 2. The degree of similarity may be adjusted downward based on the similarity of the common query related objects both contain ID fields to the average query related object which also contains an ID field because where an object is common to most of the queries in a system the fact that two queries happen to contain that object is not a significant reason for finding that the queries are similar. In other words any researcher viewing the results of the comparison may not find it significant that both have requested that ID results be returned while each researcher may find it significant that both have requested the weight field where the age was greater than 40. Thus the similarity between the abstract query results may be 2 because both sets of results contain ID numbers 23 and 48 but because the average abstract query result contains ID number 23 the adjusted similarity is 1. As for the similarity of the results analyses both the first and second set request a linear regression analysis on weight yielding a similarity of 1 and because there may be no typical abstract results analysis which is run in the system the similarity of 1 remains unchanged. As above the similarity of the abstract queries as a whole may be the sum of the similarity of the query conditions the results and the analyses resulting in an overall similarity of 4.

Similarity may also be calculated in more complicated manners according to other embodiments of the invention. For instance as described above different comparisons being performed may be assigned different weights. This may be accomplished by assigning certain query objects result objects or analysis objects different weights. The weights may be assigned by information gathered from an administrator or by looking statistically at the history of the queries in a system. The weights assigned to each object may be stored in a field in a data repository abstract in the comparison criteria or in any way known to those skilled in the art. Thus in one embodiment of the invention each field represented in a query object may have an assigned weight. If for instance name fields are being compared the comparison may be given a low weight because of the statistical insignificance of the field. If however heart pathway information fields are being compared the comparison may be given a high weight because of the specificity of the request and thus the greater statistical significance of the field. According to another embodiment of the invention different analyses may be given different weights. For instance a standard results analysis routine represented by an analysis object may have a low weight whereas a complex statistical analysis of electrocardiogram regularity may have a high weight. On a more specific level parameter settings within each analysis routine may be compared. Thus in one embodiment of the invention the setting of a parameter for an enzyme to analyze may have a high weight whereas the report title may have a low weight.

According to another embodiment of the invention the comparison may be performed with respect to metadata associated with each user or with each abstract query. For instance metadata may be stored for each saved query which indicates that the query is saved. If the metadata shows that both being executed queries are saved queries the queries may be found to be more similar than if they were both unsaved. Metadata may also be stored which indicates whether both queries are used often. If the metadata shows that both queries are executed frequently the queries may be found to be more similar than if they were both used rarely. The comparison may also be performed with respect to a group within which each condition result or analysis falls. For instance if a first analysis about blood type falls into the same category as a second analysis about platelet count the analyses may be found to be similar because they are in the same group even though the actual analysis being performed with each query may be different. Such information regarding the group within which an object falls may be stored within the object or within the comparison criteria . According to another embodiment of the invention the comparison may be performed with respect to when an object occurs in a workflow. For instance if analysis routines X Y and Z were the 8th 12th and 15th steps in otherwise different step workflows each workflow may be similar to the other and thus the research being performed may be similar.

In another embodiment the comparison may be made with respect to objects representing event profiles which may be used in each abstract query being compared. Event profiles are conditions about conditions with a temporal context in the database. For example while a condition finds people that had Test x and are over 40 years old an event profile finds people that had text x when they were over 40 years old. Event profiles are described in detail in the commonly owned co pending U.S. patent application Ser. No. 10 094 531 entitled GRAPHICAL USER INTERFACE TO BUILD EVENT BASED DYNAMIC SEARCHES OR QUERIES USING EVENT PROFILES filed Mar. 8 2002 which is incorporated by reference in its entirety.

The determination of whether two queries are similar may also be made in a selective manner. For instance the determination could be made only with respect to queries exhibiting certain characteristics or with respect to certain researchers conducting certain research. The determination may be made selectively because of the overhead costs necessary to calculate the similarity between research information such as the queries the results and the analyses being run. For instance if a query returns a larger number of results the determination of whether the query is similar to any other query may not be made because of the large number of comparisons necessary to determine if all of the results are similar. Alternatively the determination of similarity in this case may only be made with respect to the queries and the analyses while ignoring the similarity between the results.

According to another embodiment of the invention the similarity of the research information may be made only with respect to certain researchers. For instance if two researchers are conducting research in completely unrelated fields the research information for those two researchers may not be compared because no similarity may be expected between the research information of the two researchers. The determination of whether the researchers are researching in unrelated fields may be made according to the specific databases being accessed by each researcher by an administrator who oversees all of the research being conducted in the system or by any other method known to those skilled in the art. Similarly if two researchers are conducting research in closely related fields this fact may trigger the comparison to determine if the research information for the two researchers is similar.

According to another embodiment of the invention the comparison may be made only with respect to researchers that are conducting very complicated or expensive research. Thus if similarities are found between the complicated or expensive research and other research the costs of the complicated or expensive research may be reduced by allowing the researchers conducting both sets of research to share resources and avoid duplicative research. An administrator or some other overseeing party may determine whether the research is complicated or expensive. The administrator may record the information relating to the type of research being performed by each researcher in a user profile which is unique to the researcher and this profile may be accessed by the component performing the comparison of abstract queries to determine whether or not to perform the comparison.

In another embodiment of the invention comparisons may be made with respect to a grouping assigned to each researcher. In one embodiment of the invention researchers working on the same research project or in the same lab may be placed in a group. For purposes of performing the comparison queries by researchers within the same group may be ignored because researchers working on the same project or in the same lab may already be sharing the same information and resources for a common project. Thus the comparison may only be performed with respect to queries from researchers in different groups where members of each group are less likely to be aware of each other. In addition if two groups are performing wholly unrelated research the comparison of queries from each group may not be performed because of the unrelated nature of the research being performed by each group. According to other embodiments of the invention each group may be further contained in one or more subgroups and so on such that the comparison may or may be made with respect to certain aggregations of groups and may not be made with respect to other aggregations of groups. User IDs and group IDs as well as other methods known to those skilled in the art may be used to determine which group a researcher is in for purposes of the comparison. The user IDs or group IDs may be recorded within each query related object being compared according to one embodiment of the invention but the IDs may also be stored in other ways according to other embodiments of the invention.

According to another embodiment of the invention a running score of the similarity of queries between groups may be kept. For instance similarity across a single query from two different groups may not be found statistically significant. If multiple queries from two groups are found to be similar the aggregate scores of similarity may indicate that both of the groups are working on similar research and that each group should be notified about the similarity of the research being conducted.

According to one embodiment of the present invention if a determination is made that two sets of query related objects are similar a notification may be displayed or delivered to the researchers or research groups. This notification may be in the form of a pop up an email or extra text on a results page. The notification may also be in the form of a text message a sound played by the computer or any other type of notification known to those skilled in the art. A determination may also be made prior to sending the notification of whether to notify either of the researchers or whether to notify a central authority to which the researchers report. The determination of whether to notify a user or administrator may be made based upon whether the similarity between the two sets of research information is greater than a given threshold. For instance the threshold for similarity may be set by a central authority as 3. In the example given with regards to Table IV where the similarity may be calculated as 4 the similarity of the two sets is above the threshold of 3 and thus the notification that the two sets are similar may be displayed to the two researchers the central authority or both.

According to another embodiment of the invention each party involved may set a personal threshold for similarity. For instance the first researcher may set the personal threshold for similarity as 2 the second researcher may set the personal threshold for similarity as 5 and the central authority may set the personal threshold for similarity as 3. Thus with a similarity of 4 both the first researcher and the central authority may be notified of the similarity while no notification may be given to the second researcher.

In another embodiment of the invention the notification may contain varying amounts of information about the similarity of the sets of research information. For instance the notification may only alert each party that another set of research information is similar. According to another embodiment of the invention the notification may contain more information about the similarity of the research information such as the reasons for the similarity and exact value calculated for the similarity.

According to another embodiment of the invention after a determination has been made that one set of research information is similar to another set of research information other actions may be taken or other information may be provided in addition to displaying a notification of the similarity. For instance the notification may contain an option which allows the researchers involved to place a phone call to each other or send each other a message such as an email message a text message a voicemail message or any other message known to those skilled in the art. As an alternative the notification may merely contain contact information for the other researcher. The researchers may be provided with the option of contacting each other so the researchers may determine if they could benefit from sharing research data sharing research equipment or discussing research problems and ideas. Thus allowing the researchers to contact each other may allow both researchers to benefit from each other s experience.

In yet another embodiment of the invention the notification may be displayed to the user as a ranked list of comparison results in a user interface. depicts a graphical user interface GUI for displaying a list of comparison results according to one embodiment of the invention. The results list may contain a column 1002 showing the result rank a column 1004 showing the researcher being compared as well as the researcher s location column showing the degree of similarity of the objects being compared referred to in the figure as a Similarity Score and a column 1008 showing an analysis of the comparison results. The results and may be listed in order according to their rank. For instance the first result may have a similarity score of 7 because 3 query conditions 2 query results and 1 analysis routine were found to be similar between the researchers 3 2 1 6 and the similarity score may have been incremented an additional time because one of the query results found to be similar may have been new and may thus warrant extra attention from the researcher. Other lower ranked results such as the result may be ranked lower because fewer objects were found to be similar than in the other results and . In some cases there may be no similarity in certain categories of object types. Thus result may show that the researchers only had 2 similar query objects and no other type of object was found to be similar.

Comparison of the abstract queries may be performed by different components according to different embodiments of the invention. According to one embodiment of the invention the comparison may be performed by the query comparator . According to another embodiment of the invention the comparison may be performed by the component which processes the abstract queries such as the runtime component . Thus the functionality for performing the comparison may be built into the runtime component without the need for any external programs. According to yet another embodiment of the invention the functionality for performing the comparison may be added in a separate application such as the application . Thus in addition to processing incoming requests the application may also initiate and perform the abstract query comparisons. According to other embodiments of the invention the comparison may be performed by any component or group of components working together or in any other manner known to those skilled in the art. In addition the components may be located on a server computer such as the server on a client computer such as the client computer or on another computer.

The component performing the comparison may obtain information about the condition objects result objects and analysis objects being compared in different ways according to different embodiments of the invention. According to one embodiment of the invention the component performing the comparison may obtain the information through an auditing plug in. The plug in may hook into the component which processes the abstract queries and retrieve the information about the query conditions results and analyses as objects. The component performing the comparison may then compare the queries using the objects retrieved from the plug in as described above . According to other embodiments of the invention the information used to perform the comparison may be obtained using an Application Programming Interface API provided by the designer of the component. The information may also be obtained by analyzing a log created by the component which processes the abstract queries. The information used for comparison of the abstract queries may also be obtained in other ways known to those skilled in the art.

Embodiments of the invention may be adapted for use with different database configurations. According to one embodiment of the invention the abstract queries may be executed against a database operating in standalone mode. For instance each user may directly access the computer on which the database system is operating and may directly request that abstract queries be executed. Thus each incoming abstract query may be recorded and compared to other queries being executed on the standalone system. According to another embodiment of the invention the abstract queries may be submitted directly by multiple users accessing the database system through terminals on a client system such as the client computer .

As described above the incoming abstract queries may also be submitted indirectly using different types of requests. For instance the user may use an HTML form downloaded from the server computer to select and submit the abstract query. The form may be used to select saved queries to be executed to manually enter an abstract query or to select query conditions results and analyses using different features provided for by HTML forms. Upon submitting the HTML form the user s browser program may encode the form contents into an HTTP request and the request may then be sent by the network interface device across the network .

Each user may also use a series of forms to compose an abstract query before the query is submitted. The series of forms used by each user may be different yet the final abstract queries for each user may be similar to each other. For instance one user may use a series of forms which walks the user through the selection of query conditions result fields and analyses to be performed whereas another user may enter an abstract query into a form manually. Despite the different methods used to format and submit the abstract queries the final abstract queries may be found to be similar thus meriting notification of one or more of the users.

According to other embodiments of the invention the request may be made without HTML forms and may be encoded in formats other than the HTTP format such as a custom request format. In addition the request may also be submitted using an application other than the browser program . For instance the requests may be submitted by a web application which may be downloaded and executed by the browser program . The requests may also be submitted by a standalone program other than the browser program or in any other method known to those skilled in the art.

Each request being made may be submitted in different manners according to other embodiments of the invention. For instance different forms which may be written in different languages may also be used to submit abstract queries to the same database system. Thus while each user may submit requests in different languages using forms which look different each request may be received and decoded into an abstract query by the server computer . A comparison of two abstract query objects may be made after the requests have been decoded into abstract queries. Despite the different forms and different languages used to compose the abstract query the final queries submitted by each user may be similar. Comparing the abstract queries after they have been received and decoded may also allow the queries to be compared without regard to different security settings or preference settings on the user s client computer which may otherwise interfere with the comparison of the abstract queries.

In another embodiment a user may select a saved abstract query to be executed whereas another user may compose a specific abstract query manually. Thus while the first request may be for saved query1 the second query may contain a query string manually selected by a user. When compared the objects from the saved abstract query and the objects from the manually composed abstract query may be similar allowing each user to be notified of their similar research despite the different method of requesting the abstract queries.

Users may also customize environments by selecting different DRAs or different views of DRAs. According to one embodiment of the invention each user may submit abstract queries which are composed and subsequently transformed into concrete queries using different DRAs or views. A description of the use of different DRAs and different views is included above with reference to B and .

As mentioned above DRAs define the logical fields used to compose abstract queries. The logical field definitions contained in the each DRA may be used to build a concrete query based on the logical fields used in the abstract query. While different DRAs or different views of DRAs may use the same name for a logical field the logical field may be defined differently in each DRA or view. As a result the concrete queries created using different DRAs or views may be different. Thus a comparison of concrete queries created using different DRA components may be difficult because each concrete query may be made in different formats XML SQL etc. or each concrete query may request information stored using different table or column names. However because each DRA may use the same logical field names to transform abstract queries into concrete queries comparison of query related objects containing the logical field names used by each abstract query may still yield useful results about the similarity of the information being requested by each user despite the wide variety of resulting concrete queries. Further because each user may be using a different DRA the similarity of each user s request may also be determined by comparing objects containing information about each user s DRA. If the DRAs are the same or similar the query related objects may be found to be more similar. If the DRAs are different the query related objects may be found to be less similar. In this regard it is contemplated that fields of one DRA may be mapped to appropriate fields of one or more other DRAs. For example Field1 of DRA can be mapped to Field2 of DRA. This kind of mapping may be appropriate for example to relate common fields and facilitate identification of similar query objects. The mapped fields may or may not be identical fields. As an example Field1 of DRA may be named Gender while Field2 of DRA may be named Sex . Although the field names are different the data to which the respective fields relate is the same i.e. gender. Note that the columns and tables to which the respective fields are mapped in the logical field specifications need not be the same. For example Field1 of DRA may be mapped to Column 2 of Table 1 in Database 1 and Field2 of DRA may be mapped to Column 9 of Table 3 in Database 2 .

While the foregoing is directed to embodiments of the present invention other and further embodiments of the invention may be devised without departing from the basic scope thereof and the scope thereof is determined by the claims that follow.

