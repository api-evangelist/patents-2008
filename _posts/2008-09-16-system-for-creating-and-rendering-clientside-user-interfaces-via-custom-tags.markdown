---

title: System for creating and rendering client-side user interfaces via custom tags
abstract: A system for creating, rendering and controlling a user interface is provided. A server generates a mark-up language document containing custom tags and conventional tags. The custom tags are associated with machine-executable instructions operating on a client device. When the client device receives the markup language document containing custom tags, the client device processes the custom tags and inserts the machine-executable code into the document at the location of the custom tags. A browser operating on the client device then executes the code and renders the document on a display device.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08010890&OS=08010890&RS=08010890
owner: International Business Machines Corporation
number: 08010890
owner_city: Armonk
owner_country: US
publication_date: 20080916
---
The present application is a continuation under 35 U.S.C. 120 of commonly assigned prior U.S. application Ser. No. 10 761 139 filed Jan. 20 2004 in the names of Thomas Gumz and Wolfgang Schramm now U.S. Pat. No. 7 458 019.

Proliferation of computer networks along with wide spread use of personal computers has facilitated the emergence of numerous applications and services utilizing these data networks such as the Internet. Often these applications and services must exchange data over the network. Typically these data exchanges take place between a server and a client. A server is a computer or device on a network that manages network resources or that provides data services and functionality to multiple users. For example a server may run a web server interface for sending data for example web pages to a plurality of users and for receiving requests for data over the network. Web server equipped devices are often referred to as web sites and are accessed using a universal resource locator URL sent from a client. Since servers must handle a plurality of tasks simultaneously they are often expensive and complex. In contrast a client device or client is a computer or device on the network that is used to access a server. Typically a client is used by a user or customer and is comprised of a personal computer therefore it does not have to run several tasks or serve multiple users simultaneously.

In many Internet applications servers send data to clients for display to a user. At the client received data is displayed to the user using a browser and a display device such as a monitor. A browser is a software program executing on a client device for processing and displaying information received from web sites. Browsers have processing power that is under utilized in many prior art client server Internet transactions. Browser processing is under utilized because servers incur the processing load for creating rendering and controlling content displayed on clients. This requires that servers run applications such as Java server pages JSP or Java server faces JSF in order to render data on client browsers via static pages i.e. pages that do not change and that do not require client side processing. Executing applications such as JSP and JSF make server side programming complex because not all client computers are of the same type or operating system. This raises the cost associated with operating servers on the Internet or other networks.

There exists a need for a method on the client side for creating and rendering network content utilizing the processing capabilities of the browser thus reducing the complexity of software executable instructions on servers. Furthermore there is a need for allowing the use of active hypertext markup language HTML pages without placing an undue burden on the server.

The preferred embodiments of the present invention are directed to creating rendering and or controlling user interfaces over a data communications network and more particularly to rendering client side user interfaces through the use of a browser and custom tags contained within a data stream.

In accordance with a preferred embodiment of the invention a method operating on a client computer for loading a markup language document is provided. The method includes receiving the document which contains a plurality of tags with at least one of the tags being a custom tag. The method parses the document to determine if certain of the plurality of tags are custom tags. Executable instructions are associated with the custom tag if it is present in the document. The instructions are executed and the document is rendered on a display device.

In accordance with another embodiment of the invention a method for creating and providing a markup language document to a network is provided. A document is loaded into memory where the document contains conventional tags and at least one custom tag which is associated with machine executable instructions resident on a receiving computer in communication with the network. The receiving computer is capable of identifying the custom tag and inserting the machine executable instructions into the document at a location associated with the custom tag. Then the document is provided to the receiving computer over the network.

In accordance with still another embodiment of the invention an apparatus for receiving a markup language document containing a plurality of tags over a network is provided. The document includes a plurality of tags made up of a first subset of tags which is comprised of custom tags associated with function executable instructions and a second subset which is comprised of conventional tags. The apparatus includes a display device for presenting information to a user. A browser is operatively connected to the display device for parsing the document and detecting the custom tags and the conventional tags. The apparatus further includes a memory storing a first set of instructions for operating the browser and further storing a second set of instructions for implementing the function executable instructions. The apparatus also includes a processor communicatively associated with the memory and the display device which is capable of executing the first and second set of machine readable instructions.

The foregoing and other features and advantages of the system and method for creating rendering and controlling user interfaces will be apparent from the following more particular description of preferred embodiments of the system and method as illustrated in the accompanying drawings in which like reference characters refer to the same parts throughout the different views.

The foregoing and other objects features and advantages of the invention will be apparent from the following more particular description of preferred embodiments of the invention as illustrated in the accompanying drawings in which like reference characters refer to the same parts throughout the different views. The drawings are not necessarily to scale emphasis instead being placed upon illustrating the principles of the invention.

The following detailed description of the invention refers to the accompanying drawings. The same reference numbers in different drawings may identify the same or similar elements. Also the following detailed description does not limit the invention. Reference will be made in detail to exemplary embodiments of the present invention examples of which are illustrated in the accompanying drawings. While exemplary embodiments are provided other embodiments are possible in light of the specification. Therefore unless otherwise specified the illustrated embodiments can be understood as providing exemplary features of varying detail of certain embodiments and therefore unless otherwise specified features components modules and or aspects of the illustrations can be otherwise combined separated interchanged and or rearranged without departing from the disclosed systems and methods. Additionally the shapes and sizes of components are also exemplary and unless otherwise specified can be altered without affecting the disclosed systems and methods and without departing from the spirit and scope of the invention.

In current internet protocol IP networks interactions between a server for example a web server and a client may involve a markup language page such as a hypertext markup language HTML page. An HTML page is a structured document containing formatting information and content. Formatting information provides the browser with information such as the location of the content and instructions of how to display it. In HTML formatting is accomplished through the use of mark up more commonly referred to as tags.

Tags are additional text in a document that is not part of the content but rather is used to enhance the document in some way. For example in HTML tags are normally denoted with brackets . More specifically content is contained between a start tag and an end tag. For example content comprising the title of an HTML page might be An HTML Page . In the HTML document the title might look like.

where is the start tag for title and is the end tag. Use of tags provides an HTML document with a specific structure which can be used to facilitate processing. In addition structured documents make it possible to use software constructs such as document object models DOMs to further facilitate processing and utilization of markup language content.

A DOM is a standard application programming interface API to the structure of a document which allows programmers to write applications that work properly on all compliant platforms. A programmer may need to use a different programming language for executing instructions on particular processors or operating systems however the DOM does not need to be changed. Use of DOMs greatly facilitates processing markup language pages across numerous platforms. By way of example use of markup language pages for example HTML pages over a network may occur as follows a client side browser issues a hypertext transfer protocol HTTP request to a server over a network. The server receives and processes the request and generates the appropriate content with the aid of a java server page JSP Engine. The server then sends the results to the browser as a hypertext markup language HTML page. The browser receives and interprets the HTML page and then displays it to a user. As seen from the example the browser does very little in the way of processing when rendering the HTML page for display.

An exemplary embodiment of the invention is used to place more processing demand on the browser while removing it from the server thus lowering the complexity and cost associated with the server.

Server may include a general purpose computer executing machine readable instructions for facilitating communication of data across network . Server may further include HTML page server . HTML page server is comprised of executable instructions for making HTML pages available to client A B and may operate as part of or in conjunction with a server interface. HTML page server is further configured to insert customized tags into HTML pages before transferring them over network . Customized tags as used herein refer to custom HTML tags inserted by the server which are used by the browser to process received HTML pages in accordance with embodiments of the invention. Customized tags are discussed in more detail in conjunction with the description of browser hereinafter. Conventional tags refer to tags or markup other than customized tags.

Network may be any type of data network such as a local area network LAN a metropolitan area network MAN or a wide area network WAN . Furthermore network may utilize any network protocol or combination of protocols such as frame relay packet switched Internet protocol IP synchronous optical network Sonet asynchronous transfer mode ATM and the like without limitation. Communication links are used to convey data across network and may be comprised of twisted pair cable coaxial cable optical fiber free space optical links radio frequency RF links or the like.

Client A and B herein generally referred to as client may be comprised of a general purpose computer such as for example a personal computer personal digital assistant PDA and a web enabled cell phone. Client may have a plurality of executable applications provided on computer readable media with at least one of the applications being browser . Client may further include an active core which is comprised of executable instructions and is used by browser when processing custom tags. More specifically when browser interprets a custom tag in a markup language document active core is used to process the tag by modifying the in memory DOM of an incoming document by inserting executable instructions in place of the custom tag. The use of the active core allows a user interface or other self contained software application such as an agent to be launched on client . The active core is further described with respect to the description of .

The use of custom tags in preferred embodiments of the present invention offloads processing from the server and places it on the client. In addition custom tags make it possible to more easily implement dynamic HTML pages because processing associated therewith occurs on the client device. Use of dynamic HTML pages makes it possible to provide for example but not limited to motion and interactive input output in connection with displayed HTML pages. In addition custom tags and the associated functional instructions facilitate the use of display trees in HTML without requiring any programming knowledge on the part of the client side user.

Next a check may be made to determine if client has access to executable instructions referenced by any custom tags contained in the document per step . If client does not have access to executable instructions necessary to accommodate the custom tags the necessary instructions can be sent using network per step . If client does have the necessary executable instruction a server containing the HTML document can await an HTTP request form client per step .

User interface may further include an address window for displaying a URL associated with the server providing the date picker application in accordance with a preferred embodiment. User interface can also include a month field for indicating the month displayed to the user. The right and left facing arrows to either side of month field may provide interactive functionality to a user by causing the displayed month to scroll to the immediately subsequent or prior month respectively when clicked on. Date field displays all days in the displayed month. When the user scrolls over a particular date with a user interface device a box may appear as shown by selected date . Clicking on selected date may open a pop up window allowing the user to enter information such as for example but not limited to meetings doctors appointments anniversaries.

For an incoming HTML page the date picker function illustrated in may be referenced by one or more custom tags. For example the content of date picker display may be rendered to a user by way of the following exemplary syntax within an HTML page received from server 

is the command that causes date picker display to be rendered. In particular DOM foundation classes dfc dfc is the tag used to instruct the HTML parser to invoke methods described herein namely instructing active core to insert executable instructions required for rendering date picker display directly into the loading HTML page at the location associated with the dfc tag. In this manner the processing associated with rendering that date picker display is performed without help from server and without requiring that additional data be sent over network to client .

Tree control display is rendered on a user display using browser to process an incoming HTML page in accordance with the method described in . Tree control display may include tree tool bar for facilitating access to common functionalities. Tree tool bar may be essentially the same as tool bar or it may incorporate additional or different functionalities depending on user needs and preferences. Tree address window may contain the URL for the server providing the tree control HTML page. Depending on user preferences tree address window may contain other URLs or aliases to URLs.

Page tabs are provided for organizing information displayed to a user. By way of example a Files tab may be clicked on using a user interface device to provide a user with a display showing node sub nodes and lower level nodes . Node may be used to represent data as part of a hierarchical display. Node typically represents the highest or topmost level and it may be referred to using many conventional nomenclatures such as for example but not limited to tree parent root directory etc. In tree control display node represents a directory associated with a hard drive which is denoted as d . Sub nodes may be used to represent data associated with a level lower than that of node . Sub nodes may also be referred to using other conventional nomenclatures such as for example but not limited to branch child sub directory etc. In sub nodes are used to represent sub directories of node . Lower level nodes may be used to show progressively lower level data groupings. Any number of lower level nodes may be used with embodiments of the invention however only a single lower level node is shown for simplicity in . Lower level nodes may be referred to using other conventional nomenclatures such as for example leaves grandchildren etc.

Tree identifiers provide text and or graphical representations of trees being displayed to a user. Tree identifiers may represent directories hard drives servers or any other type item data location etc. Access list may include a window for allowing a user to specify or select access information related to tree identifiers . For example access list may specify an individual or group having permission to display access or utilize data and information associated with tree identifiers . Attribute window allows a user to associate attributes with data referenced by tree identifiers . Attributes associatable with tree identifiers may include but are not limited to read write privileges display formats software agents etc. Information window provides a user with additional information about tree identifiers or information associated therewith. Additionally information window may also provide a user with instructions on how to use or access information and data associated with tree identifiers . User control buttons allow the user to make selections and or decisions about information contained in display . For example user control buttons may allow the user to accept information displayed on display or to reject it.

Tree control display may be implemented using the following HTML executable instructions. In the example below a user need only define parameters such as the tree nodes and icons to render tree control display on a display device.

In a manner consistent with the example discussed in connection with the dfc tag is used by the HTML parser to instruct active core to substitute the executable instructions required for rendering tree control display into the incoming HTML page at the specified location s .

Display device may be a cathode ray tube CRT liquid crystal display LCD or the like for displaying information to a user. Keyboard and cursor control allow the user to interact with computer . Cursor control may be for example a mouse. In an alternative configuration keyboard and cursor control can be replaced with a microphone and voice recognition means to enable the user to interact with computer .

Communication interface enables computer to communicate with other devices systems via any communications medium. For example communication interface may be a modem an Ethernet interface to an IP network or a printer interface. Alternatively communication interface can be any other interface that enables communication between computer and other devices or systems.

By way of example a computer consistent with the present invention provides a server with the ability to communicate markup language pages over network to a client . Computer performs operations necessary to complete desired actions such as generating a markup language page containing custom tags in response to processor executing sequences of instructions contained in for example memory . Such instructions may be read into memory from another computer readable medium such as a data storage device or from another device not shown via communication interface . Execution of the sequences of instructions contained in memory may cause processor to perform a method for placing the markup language page on a network for transmission to client in response to an HTTP request received therefrom. Alternatively hard wired circuitry may be used in place of or in combination with software instructions to implement the present invention. Thus the present invention is not limited to any specific combination of hardware circuitry and software.

The foregoing description of exemplary embodiments of the present invention provides illustration and description but is not intended to be exhaustive or to limit the invention to the precise form disclosed. Modifications and variations are possible in light of the above teachings or may be acquired from practice of the invention. For example while the above description focused on processing an HTML page implementations consistent with the principles of the invention are equally applicable to other markup languages such as eXtensible markup language XML business rules markup language BRML and the like. And while a series of method steps have been described with regard to the order of the steps may be varied in other implementations consistent with the present invention. Moreover non dependent steps may be implemented in parallel if desired.

No element step or instruction used in the description of the present application should be construed as critical or essential to the invention unless explicitly described as such. Also as used herein the article a is intended to include one or more items or elements. Where only one item is intended the term one or similar language is used.

Many alternative embodiments of the present invention are possible in light of the teachings hereinbefore. For example in a first alternative embodiment client may be practiced in a distributed architecture. In a distributed architecture active core browser display device and processor may be at a first location proximate to a user thereof while ROM or similar memory device containing machine executable functional instructions associated with one or more custom tags is at a second location. In this arrangement ROM may be coupled to processor and browser by a fixed or wireless link .

In a second alternative embodiment a first portion of the machine executable instructions associated with custom tags may be resident on client while a second portion of machine executable instructions is resident on server . By way of example the second portion of machine executable instructions may comprise an authorization means such as a password which is required by client before the first portion of machine executable instructions can be used with active core and browser .

The claims should not be read as limited to the described order or elements unless stated to that effect. Therefore all embodiments that come within the scope and spirit of the following claims and equivalents thereto are claimed as the invention.

