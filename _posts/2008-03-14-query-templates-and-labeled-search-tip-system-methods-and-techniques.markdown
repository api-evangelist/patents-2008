---

title: Query templates and labeled search tip system, methods, and techniques
abstract: Methods, systems, and techniques for creating, managing, and using query templates to facilitate the execution of relationship queries are provided. Example embodiments provide a Query Template System “QTS”, which enables users, a system, program code, or other people or code to define search tips (i.e., predefined searches) through the generation of query templates that can be used by other users or code, to perform relationship searches using IQL. In one embodiment, the QTS includes a QT editor, a QT dispatcher, a QT creation and index management system, and one or more QT data repositories and indexes. These components cooperate to create and maintain query templates and to search for and retrieve matching query templates.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08954469&OS=08954469&RS=08954469
owner: VCVCIII LLC
number: 08954469
owner_city: Seattle
owner_country: US
publication_date: 20080314
---
The present disclosure relates to methods systems and techniques for generating and using relationship queries and in particular to methods systems and techniques for generating and using query templates to facilitate in the formulation and processing of relationship queries.

A relationship query language such as In Fact Query Language IQL which supports queries that express relationships between entities such as persons places or things using actions or events is often difficult for many users to learn. One reason is that the syntax for such queries may be unfamiliar and users may be accustomed to keyword matching based search systems. Even when relationship queries are supported it has been found that often user queries are simple keywords rather than complex relationship expressions. This trend is not expected to change in the near term.

In addition many third party applications exist which leverage more advanced users abilities to tag or label items such as web pages images etc. that users have discovered by browsing web pages using keyword search engines or through other discovery means. In some of these applications the tags or labeled items may form a focus for a community that uses the application. For example social networking sites typically allow users to create or use existing tags or labels e.g. words that are used as keys for finding or relocating information and to assign them to various electronic data such as url locatable e.g. web pages. Other users of the same social networking site can then locate related information such as other url pages by specifying one or more of the defined tags or labels.

Embodiments described herein provide enhanced computer and network based methods systems and techniques for generating and using query templates for specifying triggering and or facilitating the processing of relationship queries such as those formed using Infact Query Language IQL alternatively referred to as Insightful Query Language in some documentation . Example embodiments provide a Query Template System QTS which enables users a system program code or other people or code that understands a relationship query language such as IQL to define search tips i.e. predefined searches through the generation of query templates that can be used by other users or code for example that may not understand IQL to perform relationship searches using IQL. For example a user who doesn t know IQL can select a description of a query e.g. a link to a query template using some type of user interface thereby causing one or more query templates to be invoked or triggered which in turn causes the associated relationship search specification to be executed by an appropriate relationship search engine. Query templates may also be invoked or triggered by users and or code that understands the underlying query language for example to provide an easier or alternative interface to executing relationship queries.

Other interfaces for triggering query templates are also possible including those that automatically present results without requiring any interaction from a user. For example interfaces can be programmed to automatically present the search results of various query templates that are related to the entities topics or concepts being perused by a user by triggering related query templates in the background and displaying the results of their associated relationship searches automatically.

Relationship queries typically entail searches for how one or more specified entities entity types ontology paths topics concepts actions action types or events relate to other such entities entity types topics concepts ontology paths actions action types or events. Thus relationship searches often result in more meaningful information about how what is found relates to what was entered in a query by attempting to better understand what was intended by the query and to obtain more relevant results. In contrast keyword searches simply perform exact or partial substring matches of words or phrases in a document and typically cannot determine grammatical clause based related information. For example a relationship search on the entity Hillary Clinton in relation to activities she s been doing in Chicago e.g. expressed as attack Hillary Clinton Chicago using IQL may result in matching document segments that show how the document segment relates. For example the document segment 

Relationship searching is an integral part of the examples used herein. Accordingly this description presumes some familiarity with InFact the InFact Query Language IQL and the InFact query processing architecture as an example architecture for processing relationship queries. Additional information on relationship searches generally and on the InFact system IQL and example components that can be implemented and integrated to process IQL is provided in U.S. Patent Publication No. 2005 0267871A1 published on Dec. 1 2005 herein incorporated by reference in its entirety. Although this description refers primarily to IQL it is to be understood that the concepts and techniques described herein are applicable to other relationship query languages as they are or become available.

In some embodiments of the QTS various query template editors can be provided to create delete and or edit query templates. Some embodiments of the QTS also enable a system or code that is capable of processing query language expressions such as IQL to automatically tag or otherwise label queries and to automatically generate and store query templates. Query templates can be automatically generated for example as part of a navigation tip system when the query tip is invoked executed displayed or at some other time. Additional information on the InFact navigation tip system is found in U.S. Patent Publication No. 2007 0156669 published on Jul. 5 2007 which is herein incorporated by reference in its entirety.

Once one or more query templates are defined they can be stored in a data repository so that keyword search engines third party applications and or code for example even code that does not understand IQL can automatically retrieve desired matching relationship query templates and present them for example as search tips to aid users or to augment or enhance information that the keyword search engine third party application and or code is presenting. For example a news reporting tool such as a client side portal or widget can integrate tagged or labeled relationship queries e.g. by presenting links to query templates directly or indirectly to automatically enhance or augment with the results of the relationship queries information that is being presented to users. For example links to query templates such as represented by urls pathnames question or icons etc. that represent related information can be presented so that the user who read the article can find other pertinent information by selecting the link representation.

In addition query templates can be incorporated into code that understands the relationship search language or that has the ability to pass relationship search language expressions such as IQL to an IQL system for processing. Also users may run relationship searches produced by the QTS by triggering query templates and can incorporate the results of such searches into other applications. Also users or code may subscribe to query templates associated with particular tags or to streamed downloading of query templates such as through an RSS feed. Other incorporation or embedding scenarios are also contemplated.

Query templates have one or more associated attributes that indicate the associated relationship query and typically one or more attributes related to defining input or how the query template is triggered e.g. keys or triggers and defining output or how the query template returns query results. is an abstraction of example attributes defined by a query template. Example query template comprises attributes although other attributes could be similarly supported. QT ID is an identifier used to identify and or track the query template. The description attribute may be used in applications that wish to present some information regarding the query. For example in the field reflects the corresponding description attribute of the associated query template. Query attribute is the query itself. Using IQL this query may include expressions that identify particulars about the input and output specifications as described further with respect to . For example the query may include the expression user city to cause the input form of to include the explanation and input field . Trigger tags attribute may be used to match keys to find and retrieve appropriate query templates. Similarly trigger types attribute may be used to associate the instant query template when the indicated types are encountered. Other attributes may be used to store priority popularity and other information that may be used for example to retrieve one query template over another or to list them in a particular order etc.

Example embodiments described herein provide applications tools data structures and other support to implement a Query Template System to be used for query templates associated with relationship queries. As discussed relationship query is used generally as an example of search queries where query templates are particular useful. Other uses of query templates such as to define better input and output specifications for complex keyword searching are also possible. Also although the examples described herein often refer to IQL the techniques described herein can also be used with other query languages. In addition the concepts and techniques described are applicable to other forms of applications code and interfaces including other types of client side applications other web clients plug ins etc. and generally other code whether a standalone executable or module. Also although certain terms are used primarily herein other terms could be used interchangeably to yield equivalent embodiments and examples. Although the techniques of query templates and the QTS are generally applicable to any type of interface the phrase user interface or interface is used generally to imply any type of method technique or object used to trigger behavior in a computing system. In addition terms may have alternate spellings which may or may not be explicitly mentioned and all such variations of terms are intended to be included.

In the following description numerous specific details are set forth such as data formats and code sequences etc. in order to provide a thorough understanding of the described techniques. The embodiments described also can be practiced without some of the specific details described herein or with other specific details such as changes with respect to the ordering of the code flow different code flows etc. Thus the scope of the techniques and or functions described are not limited by the particular order selection or decomposition of steps described with reference to any particular block or routine.

As mentioned there are several methods for creating query templates including some performed typically by more advanced users and some performed automatically. In some embodiments a query template editor such as QT editor of may be provided to create delete and edit query templates. For example in some embodiments an advanced user may run an IQL query and then when satisfied with the results invoke a minimally disruptive editor for example by selecting a function such as through an Add to Library button not shown from a display of the relationship results to define a query template to add to a library of query templates. The QTS may accomplish this by prompting the advanced user to enter various parameters that correspond to the attributes of the query template such as those shown in FIGS. and A D.

For example suppose the user executes the query company buy company to find information about all entities that are companies and that have bought other entities that are also considered companies and decides it is a good query. The user may then click on a button Add to Library from the results window. The user is then prompted to enter a description of the query and tags for the query template. The user then enters Corporate Acquisitions by Company for the Description field and enters the tags corporate acquisitions company acquisitions and company buyouts . In addition the user may be prompted to modify the associated IQL to account for input and output. For example the user may change the IQL to express input and output specifications such as user company buy display company .

As described above the function user indicates to the IQL processing system that user input is desired that meets the form of any requirements specified within the parentheses of the function and that this input is to be used in the associated relationship query. In this example the user input is valid if it specifies a company which is an entity tag defined by the IQL processing system. The function display indicates to the IQL processing system that the results of running the associated query will display all matching results that are companies bought by one of the companies specified by the user. Thus the associated IQL is company buy company where the first entity the buyer s is specified by the user and the bought entities are displayed as a result. The user may then submit the query template which is then added to the query template library.

In other embodiments users third parties etc. may utilize one or more separate editors for creating deleting and editing query templates. B and C are example screen displays from a query template editor client interface for explicitly creating and editing query templates managed by a Query Template System. In a client side query template editor is being displayed in a standard web browser. Initially the editor is shown displaying a list of existing query templates. For example in the query template indicated by list item may correspond to a query used to produce the results demonstrated in with regard to relationships between directors and movies. To create edit or delete an existing query template the user selects one of the query template list items shown in the list of query templates and in . For example if the user selects the query template indicated by list item the screen display shown in is presented for editing the corresponding query template. In some embodiments the description attribute of the query template is used as the description of the list item. In other embodiments a separate attribute may be supplied. Of note after each list item such as there appears a link to edit and a link to destroy the associate query template. Also although a separate create link could be included in the interface in the example shown one can create new templates by saving an existing template to a new query template. Other permutations are possible.

In addition to creating deleting and editing query templates by means of a query template editor the QTS may in some embodiments be capable of automatically creating query templates. For example using the navigation tip system described in U.S. Patent Publication No. 2007 0156669 published on Jul. 5 2007 the user may select a presented tip thereby causing the QTS to automatically generate and store a related query template.

In the sub process starts in block with setting the input portion of the IQL to more broadly encompass what the user had entered in the initial e.g. keyword query or what corresponds to the parameterized portion of the search tip. For example for interfaces that wish to present interactive query template forms such as that shown in the sub process may enter user person name if the IQL for the corresponding search tip searched for is based upon a user search for Jimmy Carter. Next in block the sub process enters the rest of the IQL expression from the remainder of the IQL expression in the search tip. Thus the process builds up the IQL for the query template to include an input specification when desired. In embodiments that do not present interactive input for query templates block and may copy the search tip IQL into a query template query. In block the sub process sets the query template description from the search tip description. In block the sub process sets tags for the query template for example based upon the entity type of the e.g. keyword query that triggered the search tip. The sub process then concludes.

For example using the process of and the sub process of suppose a user searches for Ronald Reagan. A tip which reads Ronald Reagan related to Any Person appears. The user then clicks on this tip. A query template with the attributes 

may then be entered into the query template library index. In some embodiments the system maintains mappings between actual OntologyPaths e.g. a person name or organization and their more colloquial counterparts which may be used as tags. For example in this example people is a tag for the OntologyPath person name. 

As another example suppose a user searches for Ronald Reagan. A tip which reads Ronald Reagan related to Jimmy Carter appears. The user then clicks on this tip. A query template with the attributes 

Once defined query templates may be stored for later retrieval in a data repository such as the QT Data Repositories in . In some embodiments the query templates are stored as documents which are then indexed in a reverse index sometimes referred to as an inverted index in the same way other documents may be stored and indexed in an InFact IQL processing system. For example each attribute and its value may be stored as terms of a document in a similar manner to the indexing of clauses with semantic and syntactic information. In some such embodiments each attribute may be used as a key into the query template to allow greater flexibility. Note that other embodiments that use other data structures that store the same or similar information can be substituted. The inverted index is searchable by a query template searcher which can be implemented and integrated into the system as remote or distributed InFact components similar to an Ontology Searcher or Tip Searcher. See for example U.S. Patent Publication No. 2005 0267871A1 published on Dec. 1 2005. When a tip searcher such as that described in the preceding patent publication is used to implement the query template searcher it can obtain a set of searches to execute as search tips by determining matching query templates from the inverted index instead of according to configured rules. In addition multiple query template searches can be executed against one of many query template searchers to handle significant load. These inverted indexes may be searched using a search application programming interface API or a web interface.

Query templates may be retrieved in a variety of manners. For example if stored as above a user may enter keywords into a standard search engine which are matched against the description and tag attributes of the indexed query templates. A list of query templates that match the keywords may then be returned by the system. The user may then select any of the query templates to execute their corresponding queries. In some embodiments the corresponding queries are executed and results returned in conjunction with or instead of the list of query attributes.

Query templates may also be presented to a user automatically when they browse material on a web page through a portal widget application etc. For example the user may navigate to a social network site that ranks tags not only by popularity but perhaps also by the number of query templates that include that tag. When a tag is selected by the user e.g. using the ordinary interface the user is presented with a list of query template descriptions ranked in part by usage popularity that are associated with the selected tag.

For example the tags Corporate Entertainment and Crime might be displayed on a site where Corporate is associated with 5200 query templates Entertainment is associated with 3000 query templates and Crime is associated with 159 query templates. Once the user clicks on a given tag the user is presented with a list of query templates ranked in part by popularity. For example when the user clicks on the Corporate tag the user may be presented with the following list 

In this case Corporate Acquisitions by City may have been used by users a total of 100 239 times Corporate Acquisitions by Company may have been used by users a total of 52 103 times and Corporate Layoffs by Industry a total of 10 234 times. In one embodiment the query templates are presented in a ranked order based upon their popularity of use.

Query Templates may also be presented automatically when a user browses to a specific location including for example reading a news article which contains one or more entities or ontology path specifications. When query templates have attributes such as those stored in they contain trigger types which are used to automatically trigger the presentation of one or more query templates that are associated with those entity types or ontology path specifications. A list of possible query templates may be ranked e.g. because the list is too large to present based upon characteristics such as popularity proximity etc. A user wanting to discover additional related information can then select the link representation to the query template in order to execute the associated query. In some embodiments one or more of the query templates returned may be displayed with their associated query results.

Referring back to retrieval in these manners is shown as the various client interfaces sending a request for query templates direct or indirect to the QT dispatcher which uses the indexing system and to return identification of one or more matching query templates and in some embodiments to actually execute the associated queries to return results with the one or more matching query templates.

The computing system may comprise one or more server and or client computing systems and may span distributed locations. In addition each block shown may represent one or more such blocks as appropriate to a specific embodiment or may be combined with other blocks. Moreover the various blocks of the Query Template System may physically reside on one or more machines which use standard e.g. TCP IP or proprietary interprocess communication mechanisms to communicate with each other.

In the embodiment shown computer system comprises a computer memory memory a display one or more Central Processing Units CPU Input Output devices e.g. keyboard mouse CRT or LCD display etc. other computer readable media and one or more network connections . The QTS is shown residing in memory . In other embodiments some portion of the contents some of or all of the components of the QTS may be stored on or transmitted over the other computer readable media . The components of the Query Template System preferably execute on one or more CPUs and manage the generation and use of query templates as described herein. Other code or programs and potentially other data repositories such as data repository also reside in the memory and preferably execute on one or more CPUs . Of note one or more of the components in may not be present in any specific implementation. For example some embodiments embedded in other software many not provide means for user input or display.

In a typical embodiment the QTS includes one or more user interfaces such as a QT Editor one or more QT dispatchers for request processing one or more QT creation and index managers one or more query template searcher or tip searchers and other components. In at least some embodiments the query template processing executing the queries associated with the query templates is provided external to the QTS and is available potentially over one or more networks . Other and or different modules may be implemented. In addition the QTS may interact via a network with application or client code on client computing systems to search for query templates one or more query template editor computing systems or client code and or one or more third party information provider systems such as to provide additional query templates from external systems e.g. through import functions . Also of note the QT data repositories and indexes may be provided external to the QTS as well for example in a Lucene index accessible over one or more networks . Other data repositories may also be used by the QTS.

In an example embodiment components modules of the QTS are implemented using standard programming techniques. However a range of programming languages known in the art may be employed for implementing such example embodiments including representative implementations of various programming language paradigms including but not limited to object oriented e.g. Java C C Smalltalk etc. functional e.g. ML Lisp Scheme etc. procedural e.g. C Pascal Ada Modula etc. scripting e.g. Perl Ruby Python JavaScript VBScript etc. declarative e.g. SQL Prolog etc. etc.

The embodiments described above use well known or proprietary synchronous or asynchronous client server computing techniques. However the various components may be implemented using more monolithic programming techniques as well for example as an executable running on a single CPU computer system or alternately decomposed using a variety of structuring techniques known in the art including but not limited to multiprogramming multithreading client server or peer to peer running on one or more computer systems each having one or more CPUs. Some embodiments are illustrated as executing concurrently and asynchronously and communicating using message passing techniques. Equivalent synchronous embodiments are also supported by a QTS implementation.

In addition programming interfaces to the data stored as part of the QTS e.g. in the data repositories and and to the query template retrieval functions and processing functions available through the other QTS components can be available by standard means such as through C C C and Java APIs libraries for accessing files databases or other data repositories through scripting languages such as XML or through Web servers FTP servers or other types of servers providing access to stored data. The data repositories and may be implemented as one or more database systems file systems or any other method known in the art for storing such information or any combination of the above including implementation using distributed computing techniques.

Also the example QTS may be implemented in a distributed environment comprising multiple even heterogeneous computer systems and networks. For example in one embodiment the QT editor the QT dispatcher and the QT data repository are all located in physically different computer systems. In another embodiment various modules of the QTS are hosted each on a separate server machine and may be remotely located from the tables which are stored in the data repositories and . Also one or more of the modules may themselves be distributed pooled or otherwise grouped such as for load balancing reliability or security reasons. Different configurations and locations of programs and data are contemplated for use with techniques described herein. A variety of distributed computing techniques are appropriate for implementing the components of the illustrated embodiments in a distributed manner including but not limited to TCP IP sockets RPC RMI HTTP Web Services XML RPC JAX RPC SOAP etc. etc. Other variations are possible. Also other functionality could be provided by each component module or existing functionality could be distributed amongst the components modules in different ways yet still achieve the functions of a QTS.

Furthermore in some embodiments some or all of the components of the QTS may be implemented or provided in other manners such as at least partially in firmware and or hardware including but not limited to one or more application specific integrated circuits ASICs standard integrated circuits controllers e.g. by executing appropriate instructions and including microcontrollers and or embedded controllers field programmable gate arrays FPGAs complex programmable logic devices CPLDs etc. Some or all of the system components and or data structures may also be stored e.g. as software instructions or structured data on a computer readable medium such as a hard disk a memory a network or a portable media article to be read by an appropriate drive or via an appropriate connection. The system components and data structures may also be transmitted via generated data signals e.g. as part of a carrier wave or other analog or digital propagated signal on a variety of computer readable transmission mediums such as media including wireless based and wired cable based mediums and may take a variety of forms e.g. as part of a single or multiplexed analog signal or as multiple discrete digital packets or frames . Such computer program products may also take other forms in other embodiments. Accordingly embodiments of this disclosure may be practiced with other computer system configurations.

All of the above U.S. patents U.S. patent application publications U.S. patent applications foreign patents foreign patent applications and non patent publications referred to in this specification and or listed in the Application Data Sheet including but not limited to U.S. Provisional Patent Application No. 60 894 876 entitled QUERY TEMPLATE AND LABELED NAVIGATION TIP SYSTEM AND METHODS filed Mar. 14 2007 U.S. patent application Ser. No. 11 012 089 entitled METHOD AND SYSTEM FOR EXTENDING KEYWORD SEARCHING TO SYNTACTICALLY AND SEMANTICALLY ANNOTATED DATA filed Dec. 13 2004 and U.S. patent application Ser. No. 11 601 612 entitled EXTENDING KEYWORD SEARCHING TO SYNTACTICALLY AND SEMANTICALLY ANNOTATED DATA filed Nov. 16 2006 are incorporated herein by reference in their entirety.

From the foregoing it will be appreciated that although specific embodiments have been described herein for purposes of illustration various modifications may be made without deviating from the spirit and scope of the present disclosure. For example the methods systems and techniques for creating and using query templates discussed herein are applicable to other architectures other than a client server architecture. Also the methods and systems discussed herein are applicable to differing protocols communication media optical wireless cable etc. and devices such as wireless handsets electronic organizers personal digital assistants portable email machines game machines pagers navigation devices such as GPS receivers etc. .

