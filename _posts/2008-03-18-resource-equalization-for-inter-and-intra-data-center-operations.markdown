---

title: Resource equalization for inter- and intra- data center operations
abstract: An exemplary component for managing requests for resources in a data center includes a service request module for receiving requests for resources from a plurality of services and a resource module to monitor resources in a data center and to match received requests to resources. Such a component optionally includes an application programming interface (API) that provides for sending information in response to an API call made by a service. Other methods, devices and systems are also disclosed.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08171115&OS=08171115&RS=08171115
owner: Microsoft Corporation
number: 08171115
owner_city: Redmond
owner_country: US
publication_date: 20080318
---
Large scale data centers are increasingly used for a wide variety of tasks associated with applications such as electronic mail and Web browsing. For example software as a service SaaS includes Web based e mail services e.g. the MICROSOFT HOTMAIL e mail service where a vendor typically hosts all of the program logic and data and provides end users with access to this data over the public Internet. Such a service may rely on a distributed application and a large amount of data which may be stored in more than one data center. A single data center can house thousands of individual storage devices usually in the form of rack mounted computers which may be servers. Many now refer to large data centers as server farms . Resource management is an important aspect of data center operation. Various exemplary techniques are described herein for data center management and operation.

An exemplary component for managing requests for resources in a data center includes a service request module for receiving requests for resources from a plurality of services and a resource module to monitor resources in a data center and to match received requests to resources. Such a component optionally includes an application programming interface API that provides for sending information in response to an API call made by a service. Other methods devices and systems are also disclosed.

Various exemplary methods devices and system described herein pertain to monitoring resources in one or more data centers. An exemplary monitoring system is configured to monitor resources associated with one or more data centers and to receive requests for resources. Such a system can utilize resources better for an existing data center or can allow for more effective data center design.

With respect to resource usage a plot of traffic versus time shows that traffic in requests per second can vary greatly for example by a factor of two or more. In this example the traffic may be for a single service multiple services defined resources etc. Other measures of resource utilization include megabits per second. A selected measure or measures for resource utilization for purposes of management may depend on type of service or services operating in a server farm. Often for particular services a data center will experience a somewhat regular usage cycle with a maximum usage falling within a maximum usage band see e.g. dashed lines and a minimum usage falling within a minimum usage band see e.g. dashed lines .

A plot shows service specific resource utilization versus time e.g. cycle time which may be a day or other time for the service S and the service S which have utilization or demand peaks Uand U respectively. The conventional server farm may be provisioned based on the sum of the utilization peaks. For example where the server farm handles services S and S the capacity of server farm is typically based on Uplus Uor U design . However where these two peaks occur at different times the server farm is unlikely to ever experience utilization of Uplus U. Instead as indicated in the plot an actual utilization peak U actual is considerably less than U design .

As described herein an exemplary monitoring system can utilize resources better for an existing data center or can allow for more effective data center design especially where the data center serves multiple services that have different resource utilization patterns with respect to time.

The resource monitoring layer includes a service request module for receiving requests from services and a resource module for managing resource information for example from a set of monitored resources e.g. processor memory bandwidth disk I O etc. resources .

In the example of the server farm includes a resource communication module that communicates with the resource monitoring layer . The resource communication module can be configured to provide information about resources. For example each resource block e.g. RB i to RB m can include a resource block address. In such a configuration the communication module allows the monitoring layer to access one or more individual resource blocks. Once a connection is established information about one or more resource blocks can be communicated to the monitoring layer . Information may be provided as to resources resource utilization and resource availability. Table 1 below illustrates addresses and information for resources in a server farm.

Table 1 includes information organized according to utilization and resource block. Information may be organized in a block specific manner and or in a server by server manner. For example for a server in RB 1 information may be acquired for CPU memory I O disk etc. utilization. In general available information allows a monitoring layer to manage requests for resources.

The exemplary system can handle requests for resources based in part on resource information. Requests for resources can be processed according to any of a variety of schemes. For example a first in first out FIFO scheme the service request module can maintain a queue that matches resources with requests based on time of receipt of a request. In another example a requester e.g. a service has an associated priority and the service request module can order requests based in part on priority. In such an example an anti starvation mechanism may be implemented to ensure that lower priority requests are handled adequately.

For many data centers resource consumption is cyclical. This has led some operators to bill users on a peak or near peak consumption basis. According to such a billing scheme a user pays for near peak consumption even though the user is frequently consuming far below a peak value for the data center. For example network egress is typically charged at the 95th percentile of peak consumption over a month and yet the real consumption is highly sinusoidal and frequently far below this charged for rate. As described herein substantial savings can be realized by smoothing resource utilization or resource consumption. For example the exemplary system can shape resource utilization as indicated in a plot of traffic versus time which shows an unshaped utilization pattern and a shaped utilization pattern where peak demand is clipped and shifted to fill valleys.

As indicated in a plot of utilization versus time the exemplary system can provide savings with respect to design and or manage resources more effectively than the conventional system of .

According to the example of price may be used as a tool to shape resource utilization. A plot indicates how price per unit may be graded with respect to traffic e.g. requests per second to shape traffic with respect to time. A particular price per unit grading is given for purposes of explanation where a non linear relationship exists between pricing and traffic. Such a grading of price per unit can pressure users into scheduling requests off of peak hours and rescheduling requests into lower priced valleys.

While the plot focuses on traffic one or more monitored resources may be priced. For example a plot of memory utilization versus time indicates how memory may be charged on a price per unit utilization basis to shape memory usage in a data center. Such a resource based approach can allow users to schedule or adjust requests to minimize cost which in turn can help shape how resources are utilized.

According to the pricing in the traffic plot a data center operator may charge less for trough bandwidth and more for peak bandwidth. Such a model can be applied to external users and or internal users i.e. where a service provider is the data center operator or owner of the data center . With respect to internal users such an approach encourages engineering a service s to knock off resource utilization peaks and fill valleys for example by deferring non urgent network load. The same principle applies to external service providers.

In the example of the pricing billing module can optionally assess resource utilization for one or more resources over an extended period of time e.g. 24 hours and determine a pricing scale that depends on resource utilization and or that depends on time e.g. cycle time such as time of day .

As explained with respect to and cost is a factor in design and operation of a data center. In a conventional design approach the number of servers installed is often based on the highest load requirements e.g. U U of the plots and . By knocking off peaks and filling valleys less servers are needed. As described herein such an approach applies also to internal networking. Resource shaping as a technique applies to all resources across the data center. An exemplary resource monitoring layer can account for any varying complexity of scheduling consumption of different resources in a data center or data centers.

As mentioned egress may be charged at the 95th percentile i.e. near peak usage . However ingress and egress for a data center or data centers are often purchased symmetrically. Hence if a user needs to buy N units of egress then that user will end up buying N units of ingress as well whether the user needs the ingress or not. Depending on the type of service these N units of ingress can largely go unused.

An exemplary module for resource management allows for decoupling of ingress and egress purchases. Such an approach can define ingress and egress as two separate resources optionally with two different billing pricing arrangements where each may be shaped accordingly. This approach to cross dimensional resource shaping can trade off consumption of a cheap or free resource to save on an expensive one. Where ingress is essentially free a technique that trades off ingress to save egress can be economical.

An exemplary module for resource management allows for remote differential compression RDC to reduce egress at the expense of a small amount of ingress. Other techniques that waste more ingress in return for egress savings may be implemented to make operation more economical. For example negotiating and transferring data compression token lookup tables adds a small amount of additional latency in order to spend less egress. Such an approach can be economical and if the transfers are large the overall latency might actually improve rather than lengthen.

A cross dimensional resource shaping approach can be applied across other dimensions as well. For example an exemplary method can determine when to add memory to a system to reduce disk and or network I O or an exemplary method can determine when it makes sense to use more memory resources to save disk and or networking resources.

With respect to disk drives various multi resource trade off possibilities exist. When a disk is purchased the operator is buying both a fixed I O capability and a fixed disk capacity in a single package. For example when an operator buys a commodity 750 GB disk the operator gets a bit less than 750 GB of capacity and the capability of somewhat more than 70 random I Os per second IOPS . If a user requests a workload that needs more than 70 I Os per second capacity is wasted. If the workload consumes the disk capacity but not the full IOPS capability then the capacity will be used up but the I O capability will be wasted. This scenario presents a possibility of variable charging along the lines described above to encourage engineers to consume less of the most valuable resources. For example a materialized view can be used to trade off disk capacity for a reduction in the random I O rate driven by a given workload.

An exemplary method can mix workloads from different services to absorb the available resources. Such an approach can account for utilization with respect to time and types of resources utilized by the different services which may also vary with respect to time. For example some workloads are I O bound while others are storage bound i.e. not I O bound . An approach can mix these two workloads types to more fully utilize underlying resources. According to a mathematical limit a management module could call for running a mixed set of workloads with the disk requirements of a workload partitioned configuration. While most workloads are not close to such an extreme limit savings of around 20 to 30 may be attainable.

Another exemplary approach to managing resources includes sharing excess capacity. Such an approach can pool excess capacity and dynamically assign the excess capacity. Such an approach can safely increase utilization levels on the assumption that not all workloads will peak at the same time. As shown in the plot of workloads are often not highly correlated in their resource consumption. Consequently depending on circumstances this technique can offer even larger savings than achieved through mixing I O and capacity bound workloads.

Various approaches described herein can adjust the cost of resources and make services aware of the real second to second value of a resource. An exemplary method provides information to a service that in turn allows the service to break its resource consumption into defined classes for example urgent expensive less urgent somewhat cheaper and bulk near free .

The resource monitoring layer also includes a resource module a listing of monitored resources and a billing pricing module . Other components of the system include a server farm with a resource communication module .

The resource monitoring layer also includes a resource module a listing of monitored resources and a pricing billing module . Other components of the system include a server farm with a resource communication module .

A resource monitoring layer includes a service request module with an application programming interface and a priority module . The API can provide generic APIs reporting billing APIs search application related APIs electronic mail related APIs and other APIs. The API may include features for any of a variety of applications. Hence if the service S is a search service then the API calls can call search related APIs of the API for example to make a request for resources to inquire about resource availability etc.

The resource monitoring layer also includes a resource module a listing of monitored resources and a pricing billing module . Other components of the system include a server farm with a resource communication module .

The priority management module includes a queue and an anti starvation mechanism . Hence if the assigned priority of service S is a low priority service compared to other services then the priority module places requests from service S below those from higher priority services and registers requests from service S with the anti starvation mechanism which may be a timer e.g. to require service of a request within 24 hours .

In contrast to a centralized system shows a decentralized system . In the decentralized system each of a plurality of server farms and has an associated resource monitoring layer and . In the example of communication links may exist between two or more of the monitoring layers and . In such an example a monitoring layer may refer a request for resources to a monitoring layer associated with a different server farm. In such an example a service may request resources from a first server farm via a first monitoring layer receive a response from the first monitoring layer and then decide based in part on the response whether to request resources from a different monitoring layer associated with a different server farm.

In the system one of the services may send requests for resources to two or more of the monitoring layers and and then receive responses as to availability and or cost of resources e.g. server farm and . In turn the service may decide which resources to utilize. Such an approach may be implemented in the centralized system of where a decision may be made by the monitoring layer and or by one of the services .

According to the method based in part on the determination by determination block a decision block decides if the requested resources are available. If the resources are not available then the method continues in a notification block that notifies the service as to lack of availability. Otherwise the method continues in a match block that matches the service request to available resources. The method may also provide feedback to a monitoring layer to indicate that the matched resources are not available for example until the work responsive to the request has been performed.

In the instance that the decision block decides that the request is not the highest priority then the method continues in a decision block that decides if the request is aged in the queue. Such a decision may be part of an anti starvation mechanism. If the request is aged then the method matches the request to resources per the match block . Otherwise the decision block enters a match block that matches the highest priority request to the available resources and the method continues at the determination block .

In the method a status indicator may be selected from various exemplary status indicators . For example a resource monitoring layer may return a request filled indicator a request queued indicator an estimated wait time indicator a cost indicator a request routing indicator and or a resources unavailable indicator . The cost indicator may be based on pricing billing information determined by a pricing billing module such as the module of .

An exemplary method can manage bandwidth associated with a data center. For example a data center may have depending on workload egress ingress bandwidth asymmetry. An exemplary method can monitor resources including bandwidth receiving requests and match requests with resources in a manner that balances egress ingress to reduce asymmetry. An exemplary system can include a monitoring layer with a resource module that acts to balance egress ingress for one or more data centers.

In a very basic configuration computing device typically includes at least one processing unit and system memory . Depending on the exact configuration and type of computing device system memory may be volatile such as RAM non volatile such as ROM flash memory etc. or some combination of the two. System memory typically includes an operating system one or more program modules and may include program data . The operating system include a component based framework that supports components including properties and events objects inheritance polymorphism reflection and provides an object oriented component based application programming interface API such as that of the .NET Framework available from Microsoft Corporation Redmond Wash. The device is of a very basic configuration demarcated by a dashed line . Again a terminal may have fewer components but will interact with a computing device that may have such a basic configuration.

Computing device may have additional features or functionality. For example computing device may also include additional data storage devices removable and or non removable such as for example magnetic disks optical disks or tape. Such additional storage is illustrated in by removable storage and non removable storage . Computer storage media may include volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. System memory removable storage and non removable storage are all examples of computer storage media. Computer storage media includes but is not limited to RAM ROM EEPROM flash memory or other memory technology CD ROM digital versatile disks DVD or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can be accessed by computing device . Any such computer storage media may be part of device . Computing device may also have input device s such as keyboard mouse pen voice input device touch input device etc. Output device s such as a display speakers printer etc. may also be included. These devices are well known in the art and need not be discussed at length here.

Computing device may also contain communication connections that allow the device to communicate with other computing devices such as over a network. Communication connections are one example of communication media. Communication media may typically be embodied by computer readable instructions data structures program modules or other data forms. By way of example and not limitation communication media includes wired media such as a wired network or direct wired connection and wireless media such as acoustic RF infrared and other wireless media. The term computer readable media as used herein includes both storage media and communication media.

Although the subject matter has been described in language specific to structural features and or methodological acts it is to be understood that the subject matter defined in the appended claims is not necessarily limited to the specific features or acts described above. Rather the specific features and acts described above are disclosed as example forms of implementing the claims.

