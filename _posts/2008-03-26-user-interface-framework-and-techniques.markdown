---

title: User interface framework and techniques
abstract: A set of declarative language instructions (“DEIs”) defines three hierarchically-related data structures (“DSs”) to provide a naming taxonomy for use with a user interface (“UT”) framework. A first DS stores references to user-selectable objects (“USOs”) that are presentable via a UI of a software application. The USOs provide access to other USOs or to resources. A second DS stores references to actions to be taken upon user selection of particular USOs. A third DS stores information for indirectly accessing resources or USO configuration data during runtime of the software application. Another set of DEIs defines sets of computer-executable instructions (“CEIs”) corresponding to actions referred to via the second DS, which are triggered for execution upon user selection of particular USOs. Information from the third DS associated with a selected USO is passed to a particular set of CEIs. Runtime indirection and decoupling of content/functionality from UI components is achieved.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08234586&OS=08234586&RS=08234586
owner: Microsoft Corporation
number: 08234586
owner_city: Redmond
owner_country: US
publication_date: 20080326
---
Many types of software applications allow users to perform tasks such as taking actions viewing content related to a particular activity and or utilizing functionality of the software applications. A software application generally provides a user interface such as a graphical user interface to facilitate users ability to perform such tasks. A user interface often includes one or more menus of objects for example graphics images text audio clips video clips and the like that are navigable and selectable by users to perform various tasks.

A user interface framework specifies the way that user interface navigation is handled for a particular software application. Some common user interface frameworks supply unique strings methods corresponding to each known item of functionality or content accessible via the user interface and wrap such strings methods into components. Then a fixed flat global function list is used to refer to the entire set of available components. A programmer may call into any component from any other component to specify handling for user interface navigation. Generally such global function lists are hardcoded at programming time result in tight couplings between components and do not support runtime indirection.

Techniques for using a declarative programming language to define aspects of a user interface framework are discussed herein. One set of declarative language instructions which includes at least three hierarchically related data structures defines a naming taxonomy usable to present a user interface to a user of a particular software application. In an exemplary scenario the set of declarative language instructions includes one or more markup documents that have markup elements or attributes defined by nested tags.

A first data structure for example a markup element or an attribute thereof is populated with items of first data representing user selectable objects presentable via the user interface of the software application. The user selectable objects themselves are selectable by the user of the software application to either access one or more other user selectable objects of the user interface or to access resources accessible via the software application. Resources include but are not limited to content such as files directories and metadata and computer programs that implement functionality of the software application or external functionality such as Web browsers or Internet based services. A second data structure is populated with items of second data representing actions to be taken upon user selection of a particular user selectable object via the user interface such as navigation to a particular resource or re direction to other user selectable objects. A third data structure is populated with items of third data for example pointers vectors or URLs that are usable to indirectly access resources or configuration information associated with user selectable objects or both.

Another set of declarative language instructions defines a number of sets of computer executable instructions and or defines a manner for accessing sets of computer executable instructions. The computer executable instructions themselves may be written in any known or later developed programming language such as an imperative programming language script for example . A particular set of computer executable instructions corresponds to a particular action for example re direction to other user selectable objects or navigation to resources including invoking of functionality represented by a particular item of second data and is configured to accept one or more items of third data as arguments. In an exemplary scenario one or more XML documents are identified which include event handlers that are triggered by user selection of a particular user selectable object.

At runtime of the software application the sets of declarative language instructions are processed dynamically to implement aspects of the user interface associated with the software application. An initial selection of one or more user selectable objects represented by one or more items of first data is presented to the user. Upon user selection of a particular object the selected object is identified as the currently selected object and the following items are identified the associated action to be taken upon object selection which is represented by a particular item of second data the particular set of computer executable instructions responsible for performing the action and one or more items of third data associated with the currently selected object. The one or more items of third data are passed as arguments to the particular set of computer executable instructions which are triggered for execution. Upon execution of the particular set of computer executable instructions the identified items of third data are used to indirectly access configuration data associated with one or more different user selectable objects and or to indirectly access one or more resources. Based on such indirect access a subsequent selection of user selectable objects is presented to the user via the user interface and or resource access occurs which may not result in further user interface .

In this manner a hierarchical declarative language naming taxonomy is used to create flexible to change efficient user interfaces and can be used to trigger both functionality and visualizations of content. Generically named elements such as the currently selected object and argument placeholders which are not directly coupled with particular functionality enable runtime indirection to dynamic targets.

This Summary is provided to introduce a selection of concepts in a simplified form. The concepts are further described in the Detailed Description section. Elements or steps other than those described in this Summary are possible and no element or step is necessarily required. This Summary is not intended to identify key features or essential features of the claimed subject matter nor is it intended for use as an aid in determining the scope of the claimed subject matter. The claimed subject matter is not limited to implementations that solve any or all disadvantages noted in any part of this disclosure.

Aspects of the user interface framework discussed herein are based on a declarative language naming taxonomy that is usable to create user interfaces that can be used by users to access various resources via a software application including both internal functionality of a software application external functionality such as access to the World Wide Web and or Internet based services and content resources such as files directories associated metadata and the like. For purposes of example instance or illustration and not limitation the use of extensible markup language XML which is a declarative programming language to define a taxonomy for accessing resources associated with a media organizing application is discussed herein. It will be understood however that other declarative programming languages and other software applications may be substituted without departing from the spirit or scope of the appended claims.

Turning now to the drawings where like numerals designate like components is a simplified functional block diagram of an exemplary operating environment with which aspects of a user interface framework that is based on a declarative language naming taxonomy and usable to create user interfaces for user may be implemented or used. Operating environment is indicative of a wide variety of general purpose special purpose client or server based stand alone or networked computing environments. Operating environment may be for example a type of computer such as a personal computer a workstation a server a portable communication device a personal digital assistant an in vehicle device a laptop a tablet or any other type of stand alone or networked computing device or component thereof now known or later developed. Operating environment may also be a distributed computing network or Internet based service for example.

One or more components shown in may be packaged together or separately to implement functions of operating environment in whole or in part in a variety of ways. As shown a bus carries data addresses control signals and other information within to or from computing environment or components thereof.

Network interface s are one or more physical or logical elements that enhance the ability of operating environment to receive information from or transmit information to another operating environment not shown via a communication medium. Examples of communication media include but are not limited to wireless or wired signals computer readable media such as computer readable media discussed further below computer executable instructions such as computer executable instructions discussed further below communication hardware or firmware and communication protocols or techniques.

Specialized hardware firmware represents any hardware or firmware that implements functions of operating environment . Examples of specialized hardware firmware include encoder decoders CODECs decrypters application specific integrated circuits secure clocks and the like.

A processor which may be one or more real or virtual processors controls functions of operating environment by executing computer executable instructions discussed further below .

Computer readable media represent any number and combination of local or remote components in any form now known or later developed capable of recording storing or transmitting computer readable data such as instructions discussed further below executable by processor configuration data discussed further below and resources also discussed further below . In particular computer readable media may be or may include a semiconductor memory such as a read only memory ROM any type of programmable ROM PROM a random access memory RAM or a flash memory for example a magnetic storage device such as a floppy disk drive a hard disk drive a magnetic drum a magnetic tape or a magneto optical disk an optical storage device such as any type of compact disk or digital versatile disk a bubble memory a cache memory a core memory a holographic memory a memory stick a paper tape a punch card or any combination thereof. Computer readable media may also include transmission media and data associated therewith. Examples of transmission media data include but are not limited to data embodied in any form of wireline or wireless transmission such as packetized or non packetized data carried by a modulated carrier signal.

Resources represent the various types of resources accessible via operating environment or components thereof including but not limited to content such as files directories metadata and the like and computer programs that implement access internal or external functionality. Resources may also have configuration data discussed below associated therewith. As shown resources may be stored in temporary or persistent memory locations of computing system or external devices.

Configuration data represents one or more items of information used to present or access user selectable objects discussed further below in connection with user interface s and or resources such as selection status state size shape color memory storage usage images associated metadata and the like. In one possible implementation configuration data is stored in temporary or persistent memory locations of computing system and is accessible to components of operating environment .

Computer executable instructions represent any signal processing methods or stored instructions that electronically control predetermined operations on data. In general computer executable instructions are implemented as software programs according to well known practices for component based software development and encoded in computer readable media such as one or more types of computer readable media . Software programs may be combined or distributed in various ways.

Software applications and operating system are examples of software programs. Examples of software applications include but are not limited to operating system and end user software programs such as media organizing applications media player applications email applications anti malware applications and the like. In one possible implementation operating system includes a component based framework that supports components including properties and events objects inheritance polymorphism and reflection and provides an object oriented component based application programming interface API such as that of the Microsoft .NET framework.

A user interface framework supports the use and development of user interface s that can be used by users of software applications . In one possible implementation user interface framework comprises an aspect of operating system . As shown aspects of user interface framework use include or implement certain computer executable instructions CEIs discussed further below in connection with and declarative language instructions also discussed in connection with .

User interface s represent a combination of presentation tools and controls implemented in whole or in part by user interface framework that define the way user interacts with a particular application or device. One type of user interface is a graphical user interface GUI although any known or later developed type of user interface is possible. Presentation tools are used to receive input from or provide output to a user. An example of a physical presentation tool is a display such as a monitor device. An example of a logical presentation tool is a data organization technique for example a window a menu or a layout thereof . Controls facilitate the receipt of input from a user. An example of a physical control is an input device such as a remote control a display a mouse a pen a stylus a trackball a keyboard a microphone or a scanning device. An example of a logical control is a data organization technique for example a window a menu or a layout thereof via which a user may issue commands. It will be appreciated that the same physical device or logical construct may function as an interface for both inputs to and outputs from a user.

User selectable objects USOs represent physical or logical presentation tools or controls in the form of items or elements presentable via user interface such as graphics images text audio clips video clips and the like. USOs are selectable by a user to navigate to other USOs within user interface and or access resources such as content for example files directories metadata and the like or internal or external functionality with respect to operating environment or individual components thereof.

With continued reference to illustrates an exemplary logical flow diagram for various USOs presentable to user via an exemplary user interface which for discussion purposes is a user interface for a software application such as a media organizing application. As shown USOs are in block diagram form although it will be appreciated that USOs may be implemented using any desired media or combination thereof including but not limited to images text graphics audio clips video clips and the like. It will also be appreciated that the logical flow diagram of is but one of many possible logical flow diagrams and that any desired logical flow between any number and type of USOs may be created using the techniques discussed herein.

Referring to when USOs labeled with reference number are selected by the user the action taken is re direction to one or more other USOs. When USOs labeled with reference number are selected by the user the action taken is navigation to certain content resources such as files directories associated metadata and the like. When USOs labeled with reference number are selected by the user the resulting action is execution of another action such as invocation of certain internal or external resources in the form of functionality computer programs.

Regarding USOs labeled with reference number initially the USO labeled start which may be for example a USO presented to user via a user interface associated with another software program such as operating system is selectable to instantiate a first selection of USOs associated with the software application which in the exemplary scenario is a media organizing application including the USOs labeled collection marketplace management page and web. User selection of USOs labeled collection and marketplace result in second selections of USOs being presented to the user. If the user selects collection the second selection of USOs includes the USOs labeled music pictures videos and podcasts. If the user selects marketplace the second selection includes music which is further selectable to result in a third selection of USOs including the USOs labeled podcasts which is in turn further selectable to result in another selection of USOs including home and series and the USOs labeled home artist genre and playlist. 

Regarding USOs labeled with reference number when the USOs labeled home series music pictures videos podcasts artist genre or playlist are selected by the user certain content resources are presented to the user such as files directories associated metadata and the like.

Regarding USOs labeled with reference number when the USOs labeled page or web are selected by the user certain internal or external functionality is invoked such as a Web browser or Web page.

With continuing reference to is a flowchart of a method for presenting a user interface to a user of a software application such as user . For exemplary purposes the user interface for the media organizing application implemented via the logical flow diagram of is discussed although it will be appreciated that virtually any user interface for any software program may be implemented using the described method which is useful to reduce the need for hardcoded global function lists and eliminate tight couplings between computer programs that are used to present various USOs and perform actions associated therewith.

The method illustrated in may be implemented by computer executable instructions such as computer executable instructions associated with user interface framework which are stored in a computer readable medium and executed by one or more general multi purpose or single purpose processors such as processor . Unless specifically stated the methods are not constrained to a particular order or sequence. In addition some of the methods or steps thereof can occur or be performed concurrently and or repeatedly.

The method illustrated in is initially described in general terms. The specifics of computer executable instructions and declarative language instructions as well as their use to implement the exemplary USOs and the logical flow diagram of are subsequently described in more detail with reference to .

Referring to the method begins at block and continues at block where a first set of declarative language instructions such as a set of instructions within declarative language instructions is identified. A declarative programming language is a high level language whose instructions specify relationships between data in source material which relationships are used to perform computation instead of computation being performed pursuant to a series of commands. Exemplary source material includes an API specification for a user interface source code and the like although many types of source material are possible. One exemplary declarative programming language is extensible markup language XML .

The declarative language instructions define at least three hierarchically related data structures. Exemplary data structures include markup for example XML elements attributes database fields spreadsheet fields and the like. A first data structure stores references to user selectable objects such as references for example strings or numeric values to USOs depicted in . A second data structure stores references to actions associated with particular USOs such as actions taken when USOs referenced in the first data structure are selected by the user including but not limited to references to the re direction action taken when USOs labeled with reference number are selected by the user the navigation to content resources taken when USOs labeled with reference number are selected by the user and the execution of another action such as invocation of certain internal or external functionality computer programs taken when USOs labeled with reference number are selected by the user. A third data structure stores information such as pointers URLs or vectors used to indirectly access configuration data such as configuration data or resources such as resources associated with USOs.

Next at block a second set of declarative language instructions such as a set of instructions within declarative language instructions is identified. The second set of declarative language instructions defines a number of sets of computer executable instructions CEIs such as CEIs . A particular set of CEIs corresponds to a particular action stored via the second data structure. In one possible implementation the second set of declarative language instructions includes one or more XML documents elements or attributes to which a particular action stored via the second data structure along with one or more arguments such as arguments shown and discussed in connection with is passed upon user selection of a particular USO resulting in the resolution of the action to an executable command for example the identification and or creation of an event . The executable commands are not necessarily declarative language instructions. In one exemplary scenario the executable commands that form particular sets of CEIs are generally comprised of imperative language instructions such as script commands event handlers . An imperative programming language describes a sequence of commands representing computations to be performed by a processor.

The sets of declarative language instructions referred to in blocks and are processed dynamically to implement aspects of the user interface associated with the software application. At block based on the dynamic processing a first selection of USOs is presented to the user. Generally an initial selection of one or more user selectable objects such as USOs labeled collection marketplace management page and web which objects are represented by one or more items of first data stored in the first data structure is presented to the user.

Upon user selection of a particular USO as indicated at block the selected USO becomes the current USO CSO at block . At block the action associated with the current USO which is represented by an item of second data stored in the second data structure is identified and is used to identify a particular set of computer executable instructions that is executable to perform the action. At block information associated with the CSO that is stored by the third data structure in the form of one or more items of third data is identified. Exemplary items of third data include but are not limited to pointers URLs or vectors used to indirectly access configuration data or resources associated with the CSO. The items of third data identified at block are passed as arguments to the set of CEIs identified at block as indicated at block . At block the CEIs are executed to identify and indirectly access a second selection of user selectable items either USOs or resources or both which are presented to the user as indicated at block . It will be understood however that such further user interface is not necessary upon user selection of a particular USO at block the identified action may not result in any visible feedback for example the save action may not result in navigation or other visible changes to the user interface .

In an exemplary scenario referring to the logic diagram of if the CSO is collection or marketplace the identified action is the re direction action. In the case of collection re direction is to a second group of USOs including music pictures videos and podcasts in the case of marketplace re direction is to the music USO. If the CSO is management the identified action is navigation to content resources. If the CSO is page or web the identified action is the execution of another action such as loading a particular Web page or launching an Internet browser application . The re direction navigation to content and execution of another action actions are accomplished via particular sets of CEIs configured to perform such actions with respect to targets passed as arguments thereto in the form of items of third data associated with the CSO. For example items of third data such as pointers URLs or vectors are usable to indirectly access configuration information associated with one or more other USOs and or specific resources such as files directories metadata or computer programs that perform internal or external functionality.

In this manner a hierarchical declarative language naming taxonomy is used to create flexible to change efficient user interfaces and can be used to trigger both functionality and visualizations of content. Generically named elements such as the currently selected object and argument placeholders which are not directly coupled with particular functionality enable runtime indirection to dynamic targets.

With continuing reference to is a simplified functional block diagram illustrating aspects of an architecture including declarative language instructions which may implement or use aspects of operating environment and or method to present a user interface for a software application such as software application .

As shown processor is operative to process one or more sets of declarative language instructions a first set and a second set in accordance with a set of rules such as the logic flow diagram illustrated in defined for a particular software application such as a media organizing application to implement a particular user interface for the software application. First set of declarative language instructions may be represented by a structured representation such as a document object model DOM . USOs are presented to a user not shown via the user interface and the user makes user selections of USOs to navigate to other USOs within user interface and or access resources such as content for example files directories metadata and the like or internal or external functionality with respect to software application . Generally configuration data associated with USOs and resources accessible via USOs are stored in computer readable media such as local or remote temporary or persistent memory or storage locations.

In one possible implementation declarative language instructions include one or more XML documents that are comprised of XML elements. There is generally one root element in a declarative language document no part of which appears in the content of any other element. For all other elements element start tags and end tags are within the content of other elements nested within each other to define hierarchical relationships.

The elements and attributes that comprise the data structures of a particular XML document are instructions conforming to an XML schema. At a high level an XML schema includes 1 a global element declaration which associates an element name with an element type and 2 a type definition which defines attributes sub elements and character data for elements of that type. Attributes of an element specify particular properties of the element using a name value pair with one attribute specifying a single element property.

Referring again to in an exemplary scenario first set of declarative language instructions is an XML document which includes a number of hierarchically associated elements and attributes thereof including a first data structure a second data structure and a third data structure . Hierarchical associations between first second and third data structures and may be specified by nesting of various elements and attributes.

Items of first data that populate first data structure are references such as strings identification numbers or other values to USOs . Configuration data associated with USOs may be stored accessed together with or separate from items of first data . Separate declarative language documents may be used to define references to individual USOs or references to multiple USOs may be included within the same document using particular properties attribute values for example . Items of second data that populate second data structure are references such as strings identification numbers other XML objects or other references to particular actions that are taken when a user selects particular USOs referred to in the first data structure. Items of third data that populate third data structure are values such as pointers URLs vectors and the like that are used to indirectly access configuration data or resources . Items of third data may be custom attributes that serve as pointers to memory or storage locations.

Generally the specific XML schema to which data structures and of declarative language document conform may be created based on the desired data representation of the particular source material. In the exemplary scenario a specific XML schema can be defined based on the API specifications for the user interface for software application .

During processing of the first set of declarative language instructions at runtime of software application it may be desirable to create a structured representation such as structured representation of one or more XML documents being processed. In one possible implementation structured representation is a document object model DOM . A DOM may include nodes of several types including a document node which may be the root node element nodes attribute nodes and text nodes. Any element may have attributes or text including attributes themselves. During execution of software application such as user selection of USOs via user interface that affects DOM nodes properties of any affected elements are recorded in the DOM and may be used to trigger behaviors.

As shown structured representation includes nodes corresponding to unique permutations of elements and attributes of the XML document. In one exemplary scenario structured representation is based on the logic flow diagram illustrated in . In the exemplary scenario a portion of the structured representation would include nodes based on unique permutations of USOs and actions populating the first and second data structures and respectively. Sub nodes may correspond to pointers vectors URLs association with configuration data and or resources associated with particular nodes . Processing the structured representation generally entails evaluating expressions such as XPATH expressions queries usable to retrieve values such as particular nodes of structured representation . Essentially an XPATH expression lists all the elements and or attributes that lead to the nodes that are of interest and a list of nodes that match the XPATH is returned from an XPATH query.

Referring again to in an exemplary scenario second set of declarative language instructions may be part of or linked to first set of declarative language instructions . The second set of declarative language instructions includes a number of sets of computer executable instructions CEIs . Generally the CEIs themselves are imperative language instructions for example script commands. With respect to the exemplary scenario a particular set of CEIs corresponds to a particular action such as re direction to other USOs navigation to particular resources or performing other actions and accepts one or more arguments in the form of items of third data for example pointers vectors or URLs associated with locations in local or remote computer readable media which arguments are used to indirectly access configuration data and or resources associated with the action to be taken. A separate helper function not shown may be used to create requests for access to and or manipulation of configuration data or resources .

At runtime of software application values of arguments may be ascertained based on the currently selected USO by iterating through elements and attributes of the first set of declarative language instructions and or nodes of structured representation to create XPATH value pairs. The XPATH value pairs point to backend locations where configuration data and or resources are stored. An array of XPATH value pairs may be submitted to a helper function which accesses and or manipulates configuration data or resources in accordance with the action for example navigation re direction or performing an action performed by the particular set of CEIs . This allows for a highly generic implementation. Flexible to change user interfaces can be defined without the use of inefficient hardcoded global function lists. High flexibility in configuration data resource storage is also enabled.

Exemplary pseudo code for implementing an exemplary first set of declarative language instructions is shown below. With reference to the logic flow diagram of the code below is used to specify the USOs music and podcasts which are items of first data attributes associated with the XML element DictionaryCommandHandlerName to which a user is re directed after selecting the marketplace USO. Upon selection of the music USO for example the user is re directed to other USOs home artist genre and playlist that can be used to navigate to various music related resources upon selection of the podcasts USO for example the user is re directed to other USOs home and series that can be used to navigate to various podcast related resources. For each of the USOs that can be used to navigate to particular resources items of third data in the form of directory paths are usable to indirectly access information associated with such resources.

Exemplary pseudo code for implementing an exemplary second set of declarative language instructions is shown below. The second set of declarative language instructions is operative to resolve a command string into an action re direction to other USOs or navigation to resources in the illustrated cases and arrange for execution of the action based on the currently selected USO.

Various aspects of an operating environment and an architecture techniques that are used to implement aspects of a user interface framework and or user interfaces for software applications associated therewith have been described. It will be understood however that all of the described components elements need not be used nor must the components elements when used be present concurrently. Elements components described as being computer programs are not limited to implementation by any specific embodiments of computer programs and rather are processes that convey or transform data and may generally be implemented by or executed in hardware software firmware or any combination thereof.

Although the subject matter herein has been described in language specific to structural features and or methodological acts it is also to be understood that the subject matter defined in the claims is not necessarily limited to the specific features or acts described above. Rather the specific features and acts described above are disclosed as example forms of implementing the claims.

It will further be understood that when one element is indicated as being responsive to another element the elements may be directly or indirectly coupled. Connections depicted herein may be logical or physical in practice to achieve a coupling or communicative interface between elements. Connections may be implemented among other ways as inter process communications among software processes or inter machine communications among networked computers.

The word exemplary is used herein to mean serving as an example instance or illustration. Any implementation or aspect thereof described herein as exemplary is not necessarily to be constructed as preferred or advantageous over other implementations or aspects thereof.

As it is understood that embodiments other than the specific embodiments described above may be devised without departing from the spirit and scope of the appended claims it is intended that the scope of the subject matter herein will be governed by the following claims.

