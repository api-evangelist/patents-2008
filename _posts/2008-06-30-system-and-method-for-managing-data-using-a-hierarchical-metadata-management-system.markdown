---

title: System and method for managing data using a hierarchical metadata management system
abstract: A system and associated method for managing data. Each pointer of at least one pointer is stored in a metadata object. The pointer resides in a first repository, each unique file resides in a second repository, and the metadata object resides in third repository. Each pointer is deleted from the first repository. Upon receipt from the first repository of an event indicating both a unique file and a pointer no longer resides in the first repository, the pointer is searched for in each metadata object residing in the third repository pertaining to a hierarchical metadata management system (HMMS). After searching and locating the pointer in a metadata object in the third repository, the pointer is restored to the first repository. A hierarchical storage management system (HSM) is notified that the pointer currently resides in the first repository thus allowing the HSM to retrieve the unique file from the second repository.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08024354&OS=08024354&RS=08024354
owner: International Business Machines Corporation
number: 08024354
owner_city: Armonk
owner_country: US
publication_date: 20080630
---
The present invention relates generally to hierarchical management systems and more particularly to reducing the overhead associated with maintaining hierarchical management systems.

Conventional hierarchical storage management HSM systems manage objects residing in an online accessible repository as well as an offline repository. Reasons for moving objects from the online accessible repository to the offline repository may be inter alia the object is out of date the object is currently of limited value there is a finite amount of space in the online accessible repository etc. However there usually is a chance the moved object will be requested at least once in the future. Therefore a pointer is placed in the online accessible repository pointing to the moved object residing in the offline repository. The pointer allows for access to the object without storing said object in the finite space of the online accessible repository.

Due to the ever increasing production of data the number of objects stored in an online accessible repository such as a file systems also grows. While one million files were rarely seen on file systems merely ten 10 years ago today HSM systems manage tens of millions of files with a trend towards billions of files. As a result current HSM systems require an ever increasing number of pointers to accommodate the influx of data.

In view of the foregoing and other exemplary problems drawbacks and disadvantages of the conventional systems and methods the present invention provides a method for managing data using a hierarchical metadata management system HMMS the method comprising 

storing each pointer of at least one pointer in a metadata object wherein said metadata object corresponds to an attribute being exhibited by a unique file to which each said pointer corresponds each said pointer residing in a first repository each said unique file residing in a second repository each said metadata object residing in third repository said storing being performed by said HMMS 

after said storing deleting each said pointer from said first repository said deleting being performed by said HMMS 

receiving from said first repository an event indicating both a unique file and a pointer corresponding to said unique file no longer resides in said first repository said event being generated by said first repository in response to a request for said unique file said event being received by said HMMS 

after said receiving searching for said pointer in each said metadata object residing in said third repository said searching being performed by said HMMS 

after said searching and having located said pointer in a metadata object residing in said third repository restoring said pointer to said first repository said restoring being performed by said HMMS and

after said restoring notifying a hierarchical storage management system HSM that said pointer currently resides in said first repository thus allowing said HSM to retrieve said unique file corresponding to said pointer from said second repository.

Although certain embodiments of the present invention are described herein it is understood modifications may be made to the present invention without departing from its course and scope. Scope of the present invention is not limited to the number of constituting components the materials thereof the shapes thereof the relative arrangement thereof etc. Furthermore while the accompanying drawings illustrate certain embodiments of the present invention such drawings are not necessarily depicted to scale.

The application may add delete and or modify the files residing in the online repository . Due to the finite space of the online repository the HSM must move files from the online repository to the offline repository and vice versa. When the HSM moves a file from the online repository to the offline repository it leaves a pointer to the file on the online repository . Similarly when the HSM restores a file from the offline repository to the online repository it removes the pointer from the online repository and replaces it by said restored file.

Unfortunately as the number of files the application creates increases so too does the number of pointers located in the online repository . For large file systems there is a need to more efficiently manage online and offline data storage.

The application reads and writes files e.g. file to online repository via a file system interface such as NFS CIFS or JFS. In one embodiment of the present invention the HSM contains policies to migrate files from the online repository to the offline repository . The HSM thereby leaves a pointer in the online repository . Pointer may point to file residing in the offline repository . Whenever the HSM migrates a file to the offline repository it informs the HMMS about the new pointer .

In one embodiment of the present invention the HMMS groups pointer and other pointers in a metadata object residing in the HMMS repository . Thereby the HMMS adds the pointer information for pointer to the metadata object . Subsequently the HMMS deletes pointer from online repository . This decreases the number of pointers in the online repository because now multiple pointers such as are grouped in metadata object and deleted from the online repository.

Conventionally pointers include the file name and meta information such as owner name access control list date and time of creation and modification required for the HSM to recall the correct file from the offline repository . This pointer information becomes part of the metadata object residing in the HMMS repository . Thus the file which has pointer is now referenced by metadata object stored in the HMMS repository . Additionally HMMS intercepts file system actions and errors to act upon access attempts of an application to pointer .

Grouping pointers into a single metadata object is based on policies established by the HMMS . In one embodiment of the present invention all pointers in a given directory are grouped in one metadata object periodically the directory name and period length being customizable.

In another embodiment of the present invention grouping pointers residing in the online repository is based on capacity of said online repository . For example an end user can establish a maximum number of pointers allowed in the online repository . If the number of pointers residing in the online repository exceeds said maximum number a subset of all pointers is grouped into a metadata object and subsequently deleted from the online repository until the total number of pointers is lower than the maximum number. Pointers which have not been used for the longest time are grouped first.

In yet another embodiment of the present invention the grouping of pointers residing in the online repository is based on Information Lifecycle Management ILM policies. Thereby pointers for certain file types are grouped together into a single metadata object .

When the application opens file which had pointer and which is now grouped in HMMS metadata object the file open request file system function call is intercepted by the HMMS . The interception is triggered by a file system error when trying to open file which does not exist because the associated pointer is grouped and it is based on DMAPI functions according to prior art allowing to inform the HMMS about this error. The error information includes the name of the file which the application wanted to open. Subsequently the HMMS executes a method see infra to restore the pointer to the online repository .

Step receives an event such as a file system error indicating that a file see supra or pointer see supra no longer resides in the online repository see supra . In response to receiving the event the method continues with step which extracts the filename.

Step extracts the filename from the request submitted by the application and received by the HMMS . After completion of step the method continues with step which searches the HMMS repository see supra for the file.

Step searches the HMMS repository for the file associated with the filename extracted in step . More specifically the he search performed in step searches all metadata objects located in the HMMS repository in order to obtain the pointer see supra . After completion of step the method continues with step which determines if the file pointer was found in the HMMS repository .

Step determines whether the file pointer was found in the HMMS repository . If step locates the file pointer in a metadata object located in the HMMS repository the method continues with step which restores the pointer to the online repository . However if the file pointer is not found in the metadata objects located in the HMMS repository the method continues with step which submits an error message to the application .

If method continues with step which restores the pointer to the online repository the file pointer matching the file name requested by the application is read from the metadata object and written to the online repository by the HMMS . After restoring the pointer in step the method continues with step which notifies the HSM of the restored pointer .

Step informs the HSM that the pointer was restored to and currently resides in the online repository . The HSM therein utilizes the pointer to retrieve the file located in the offline repository said pointer points to utilizing methods according to prior art. After completion of step the method returns to the beginning of the method and awaits a subsequent event .

If method continues with step which produces an error message the application is notified by said error message that the file requested does not exist in the online repository or the offline repository . After completion of step the method returns to the beginning of the method and awaits a subsequent event .

The computer system comprises a processor an input device coupled to the processor an output device coupled to the processor and memory devices and each coupled to the processor .

The input device may be inter alia a keyboard a mouse a keypad a touchscreen a voice recognition device a sensor a network interface card NIC a Voice video over Internet Protocol VOIP adapter a wireless adapter a telephone adapter a dedicated circuit adapter etc.

The output device may be inter alia a printer a plotter a computer screen a magnetic tape a removable hard disk a floppy disk a NIC a VOIP adapter a wireless adapter a telephone adapter a dedicated circuit adapter an audio and or visual signal generator a light emitting diode LED etc.

The memory devices and may be inter alia a cache a dynamic random access memory DRAM a read only memory ROM a hard disk a floppy disk a magnetic tape an optical storage such as a compact disc CD or a digital video disc DVD etc. The memory device includes a computer code which is a computer program that comprises computer executable instructions.

The computer code includes inter alia an algorithm used for managing data using a hierarchical metadata management system according to the present invention. The processor executes the computer code . The memory device includes input data . The input data includes input required by the computer code . The output device displays output from the computer code . Either or both memory devices and or one or more additional memory devices not shown in may be used as a computer usable medium or a computer readable medium or a program storage device having a computer readable program embodied therein and or having other data stored therein wherein the computer readable program comprises the computer code . Generally a computer program product or alternatively an article of manufacture of the computer system may comprise said computer usable medium or said program storage device .

Any of the components of the present invention can be deployed managed serviced etc. by a service provider that offers to deploy or integrate computing infrastructure with respect to a process for managing data using a hierarchical metadata management system. Thus the present invention discloses a process for supporting computer infrastructure comprising integrating hosting maintaining and deploying computer readable code into a computing system e.g. computing system wherein the code in combination with the computing system is capable of performing a method for managing data using a hierarchical metadata management system.

In another embodiment the invention provides a business method that performs the process steps of the invention on a subscription advertising and or fee basis. That is a service provider such as a Solution Integrator can offer to create maintain support etc. a process for managing data using a hierarchical metadata management system. In this case the service provider can create maintain support etc. a computer infrastructure that performs the process steps of the invention for one or more customers. In return the service provider can receive payment from the customer s under a subscription and or fee agreement and or the service provider can receive payment from the sale of advertising content to one or more third parties.

While shows the computer system as a particular configuration of hardware and software any configuration of hardware and software as would be known to a person of ordinary skill in the art may be utilized for the purposes stated supra in conjunction with the particular computer system of . For example the memory devices and may be portions of a single memory device rather than separate memory devices.

While particular embodiments of the present invention have been described herein for purposes of illustration many modifications and changes will become apparent to those skilled in the art. Accordingly the appended claims are intended to encompass all such modifications and changes as fall within the true spirit and scope of this invention.

