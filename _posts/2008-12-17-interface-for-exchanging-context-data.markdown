---

title: Interface for exchanging context data
abstract: A facility for exchanging context attributes is described. A characterization module receives an invocation request to provide an attribute value that was generated by a requesting attribute consumer. The received invocation request identifies the attribute whose value is to be provided. In response to receiving the invocation request, the characterization module provides a value for the identified attribute to the requesting attribute consumer.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07945859&OS=07945859&RS=07945859
owner: Microsoft Corporation
number: 07945859
owner_city: Redmond
owner_country: US
publication_date: 20081217
---
This application is a continuation of U.S. patent application Ser. No. 11 075 529 filed Mar. 8 2005 entitled INTERFACE FOR EXCHANGING CONTEXT DATA now U.S. Pat. No. 7 478 331 which is a continuation of U.S. patent application Ser. No. 09 692 507 filed Oct. 19 2000 entitled INTERFACE FOR EXCHANGING CONTEXT DATA now U.S. Pat. No. 6 920 616 which is a continuation in part of U.S. patent application Ser. No. 09 541 328 filed Apr. 2 2000 entitled INTERFACE FOR EXCHANGING CONTEXT DATA now abandoned and of U.S. patent application Ser. No. 09 541 326 filed Apr. 2 2000 entitled LOGGING AND ANALYZING COMPUTER USER S CONTEXT DATA now abandoned and of U.S. patent application Ser. No. 09 216 193 filed Dec. 18 1998 entitled METHOD AND SYSTEM FOR CONTROLLING PRESENTATION OF INFORMATION TO A USER BASED ON THE USER S CONDITION now U.S. Pat. No. 6 466 232 all of which are hereby incorporated by reference in their entirety.

The present invention is directed to the field of context modeling and more particularly to the field of data exchange for context modeling.

Wearable computers are devices that commonly serve as electronic companions and intelligent assistants to their users. A wearable computer is typically strapped to its user s body or carried by its user in a holster and can contain a variety of both input and output devices. A wearable computer can output information to its user using for example display eyeglasses audio speakers or a tactile output device. A wearable computer can receive instructions and other input from its user via input devices such as a keyboard various pointing devices or an audio microphone. A wearable computer can receive information about its surroundings using sensors such as barometric pressure and temperature sensors global positioning system devices or a heart rate monitor for determining the heart rate of its user and can receive additional information via communication devices such as various types of network connections. A wearable computer can exchange information with other devices using communication schemes such as infrared communication radio communication or cellular modems.

Many applications for wearable computers utilize data received by the wearable computer from sensors. For example a position mapping application for a wearable computer may utilize data received from a global positioning system device to plot its user s physical location and determine whether that position is within a special region. In this example the global positioning system device produces data that is consumed by the position mapping application.

In conventional wearable computer systems the position mapping application would be designed to interact directly with the global positioning system device to obtain the needed data. For example the application may be required to instruct the device to obtain position information retrieve the information obtained by the device convert it to conventional latitude and longitude representation and determine whether the represented location is within the special region.

Such direct interaction between applications and sensors to obtain and process data has significant disadvantages. First developing an application to interact directly with a particular sensor can introduce into the application dependencies on that sensor. Accordingly the application may need to be subsequently modified to interact successfully with alternatives to that sensor provided by other manufacturers or even to interact successfully with future versions of the sensor from the same manufacturer.

Second direct interaction between the application and the sensor can give rise to conflicts between multiple applications that consume the same data. For example if the position mapping application was executing on the same wearable computer as a second application for determining the user s distance from home that also used the global positioning system device the two applications interactions with the device could interfere with one another.

Third direct interaction between the application and the sensor can give rise to conflicts between multiple sensors that produce the same data. For example if the position mapping application was executing on a wearable computer that had access to both the global positioning system device and an indoor positioning system the application might well have trouble determining which device to use to determine the user s current position and or have trouble reconciling data produced by both devices.

Fourth performing the derivation of abstract information from data observable by sensors in each application that requires the derived abstract information necessitates redundant functionality in each such application and precludes the development of multiple competing algorithms to derive the same abstract information rather than having to themselves process data from the sensor to derive more abstract information from data observable by sensors it would be advantageous for applications to be able to rely on a separate programmatic entity to derive such abstract information. For example it would be more convenient for the position mapping application to be able rely on a separate programmatic entity to determine whether the user is in a special region based upon the user s location. It would further be advantageous for such applications to share a single separate programmatic entity rather each implementing the same derivation functionality.

Accordingly a facility for exchanging information between sensors and applications in a wearable computer system would have significant utility.

A software facility for exchanging information between sources of context data and consumers of context data the facility is provided. In a preferred embodiment a characterization module operating in a wearable computer system receives context information in the form of individual attributes each modeling an aspect of the wearable computer system its user or the surrounding environment from one or more context servers and provides it to one or more context clients. The facility reduces dependencies of context client applications on specific sensors and other input devices reduces conflicts between context client applications that consume the same context data resolves conflicts between multiple sensors or other input devices that produce the same data isolates the derivation of derived attributes from context client applications and therefore obviates the redundant effort of implementing the derivation of derived attributes in each context server and facilitates the development and use of competing algorithms to derive derived attributes.

Attributes represent measures of specific context elements such as ambient temperature location and current user task. Each attribute preferably has the following properties a name a value an uncertainty level units and a time stamp. Attributes provided through the characterization module by a context server may either be measured in that they are directly received from an input device or derived in that they are the result of performing processing on values directly obtained from input devices other attributes. Indeed a derived attribute may be produced by performing additional processing on other derived attributes. Context servers in addition to providing attributes through the characterization module may also provide other functions. For example an application such as an electronic mail application could serve as a context server by providing attributes through the characterization module. In addition to the source of attributes described above such an expanded context server may provide attributes relating to the other functions of the expanded context server. For example an electronic mail application context server could provide an attribute indicating other new messages are waiting. Indeed the same program module may operate both as a context client and a context server.

Two or more different context servers may preferably supply to the characterization module their own values for a single attribute. For example a first context server can supply a value for a user.location attribute based on data received from a global positioning system device while a second context server can supply a value for the user.location attribute based on data received from an indoor positioning device. These separate values for the same attribute are referred to as separate instances of the attribute. The characterization module preferably provides a variety of different approaches called mediators for determining when an attribute requested by a context client has more than one instance what attribute value to provide in response to the attribute request.

When the characterization module obtains an attribute value from a context server it preferably caches it for responding to future requests for the attribute from context clients. Such attribute requests may specify a specific instance of the attribute that is a specific context server from which the attribute is to be obtained or may specify that the attribute is to be obtained by applying a particular mediator to whatever instances of the attribute are available or may utilize a default mediator to mediate between available instances of the attribute. When the characterization module receives an attribute request from a context client it identifies the attribute instances available to satisfy the request and for each determines whether the value for the attribute instance cached by the characterization module was obtained sufficiently recently from the corresponding context server. If not the characterization module requests an updated value for the attribute instance from the corresponding context server before performing any necessary mediation and returning a value to the context client.

Context servers and context clients preferably interact with the characterization module by calling functions provided by the characterization module. These functions are said to collectively comprise an application programming interface or API to the characterization module.

A context client that seeks to request a particular attribute or attribute instance may call a LaunchContextServer function to launch a particular context server that is not executing. Each executing context server preferably registers with the characterization module by calling a RegisterContextServer function identifying itself. The context server goes on to make an instance of an attribute available to context clients via the characterization module by following a CreateAttributeInstance function. A particular context server may preferably provide a number of different attributes by calling the CreateAttributeInstance function multiple times. Before seeking to consume an attribute a context client calls a RegisterContextClient function identifying itself. In order to consume an attribute a context client calls a RegisterToConsumeAttributeOrInstance function identifying itself and an attribute that it seeks to consume. To help determine which attributes to consume a context client may call a EnumerateAttributes function to obtain a list of the attributes available from the characterization module. In order to actually retrieve an attribute value a context client calls a GetAttribute function identifying the attribute and any attribute processing that should be applied such as a specific type of mediation between different instances of the attribute obtained from different context servers. For attributes that have multiple instances in the characterization module a context client may call a GetAllAttributeInstances function to obtain a value of the attribute for each attribute instance. To force a particular context server to reevaluate all of its attribute instances a context client may call a CompleteContextServerEvaluation function. Also to retrieve attributes reflecting aspects of the configuration of the characterization module a context client or other program may call a GetCharacterizationModuleAttribute function. A context client that consumes a particular attribute may create a condition in the characterization module that tests that attribute by calling a CreateCondition function. Once a context client has created a condition it can evaluate the condition by calling an EvaluateCondition function identifying the condition. Once a context client has created a condition it may go on to call a CreateConditionMonitor function to create a condition monitor that monitors the condition and notifies the context server when the condition is satisfied. To suspend operation of a created condition monitor a context server may call a StopConditionMonitor function and to resume its operation may call a StartConditionMonitor function. The context server may remove a condition monitor that it created by calling a RemoveConditionMonitor function and correspondingly may remove a condition that it created by calling a RemoveCondition function. A context client may unregister to consume a particular attribute by calling an UnregisterToConsumeAttributeOrInstance function. A context client may unregister itself with the characterization module by calling an UnregisterContextClient function. A context server may though need not remove attribute instances that it has registered by calling a RemoveAttributeInstance function. Before it does however it may though need not first call a CheckAttributeInstanceDependencies function to determine whether any context clients currently depend upon that attribute instance. Once it has removed its attribute instances a context server may unregister with the characterization module by calling an UnregisterContextServer function. These API functions are discussed in greater detail below in conjunction with an example.

In the current environment computer is accessible to a computer e.g. by being in line of sight wireless proximity or by being reachable via a long distance communication device such as a cellular phone which also has a variety of input and output devices. In the illustrated embodiment the computer is non portable although the body mounted computer of the user can similarly communicate with a variety of other types of computers including body mounted computers of other users. The devices from which the non portable computer can directly receive information include various user input devices and various user sensor input devices . The non portable computer can output information directly to a display a speaker an olfactory device and a printer . In the illustrated embodiment the body mounted computer can communicate with the non portable computer via a wireless transmission medium. In this manner the characterization module can receive information from the user input devices and the user sensor devices after the information has been transmitted to the non portable computer and then to the body mounted computer. Alternately the body mounted computer may be able to directly communicate with the user input devices and the user sensor devices as well as with other various remote environment sensor input devices without the intervention of the non portable computer . Similarly the body mounted computer may be able to supply output information to the display the speaker the olfactory device and the printer either directly or via the non portable computer and directly to the telephone . As the user moves out of range of the remote input and output devices the characterization module will be updated to reflect that the remote devices are not currently available.

The various input devices allow the characterization module or an application such as a context server not shown executing on the computer system to monitor the user and the environment and to model their current condition. Such a model can be used by various applications such as context clients for various purposes. A model of the current conditions can include a variety of condition variables that represent information about the user the computer and the user s environment at varying levels of abstraction. For example information about the user at a low level of abstraction can include raw physiological data e.g. heart rate and EKG and geographic information e.g. location and speed while higher levels of abstraction may attempt to characterize or predict the user s physical activity e.g. jogging or talking on a phone emotional state e.g. angry or puzzled desired output behavior for different types of information e.g. to present private family information so that it is perceivable only to myself and my family members and cognitive load i.e. the amount of attention required for the user s current activities . Background information which changes rarely or not at all can also be included such as the user s age gender and visual acuity. The model can similarly hold environment information at a low level of abstraction such as air temperature or raw data from a motion sensor or at higher levels of abstraction such as the number and identities of nearby people objects and locations. The model of the current conditions can additionally include information added explicitly from other sources e.g. application programs as well as user specified or system learned defaults and preference information.

Those skilled in the art will appreciate that computer systems and as well as their various input and output devices are merely illustrative and are not intended to limit the scope of the present invention. The computer systems may contain additional components or may lack some illustrated components. For example it is possible that the characterization module can be implemented on the non portable computer with the body mounted computer replaced by a thin context client such as a transmitter receiver for relaying information between the body mounted input and output devices and the non portable computer. Alternately the user may not wear any devices or computers.

In addition the body mounted computer may be connected to one or more networks of other devices through wired or wireless communication means e.g. wireless RF a cellular phone or modem infrared physical cable a docking station etc. either with or without support from other computers such as the computer . For example the body mounted computer of a user can make use of output devices in a smart room such as a television and stereo when the user is at home if the body mounted computer can transmit information to those devices via a wireless medium or if a cabled or docking mechanism is available. Alternately kiosks or other information devices can be installed at various locations e.g. in airports or at tourist spots to transmit relevant information to body mounted computers within the range of the information device.

Those skilled in the art will also appreciate that specialized versions of the body mounted computer and characterization module can be created for a variety of purposes.

The facility preferably utilizes a plain language hierarchical taxonometric attribute nomenclature to name attributes. The attribute names within the nomenclature are preferably specific so that there is no ambiguity as to what they represent. The facility preferably supports the extension of the nomenclature by adding new attribute names that conform to the hierarchical taxonomy of the nomenclature. The nomenclature preferably has attribute names relating to the user such as user.position user.speed and user.direction providing information about the user s position speed and direction respectively. The nomenclature preferably contains attribute names for various user moods such as user.mood.happiness user.mood.anger and user.mood.confusion. The nomenclature preferably includes attribute names for user activities such as user.activity.driving user.activity.eating and user.activity.sleeping. The nomenclature preferably includes attribute names for user physiology values such as user.physiology.pulse user.physiology.body temperature and user.physiology.blood pressure. The nomenclature preferably includes attribute names for similar attributes of people other than the user such as person.John Smith.mood.happiness. The nomenclature preferably includes attribute names for aspects of the computer system or platform. For example the nomenclature preferably includes attribute names for aspects of the platform s user interface such as platform.user interface.oral input device availability and platform.user interface.visual output device availability. The nomenclature preferably includes attribute names for attributes relating to the central processing unit or CPU of the platform such as platform.cpu load and platform.clock speed. The nomenclature preferably also provides attribute names for aspects of the local environment such as environment.local.time environment.local.temperature and environment.local.ambient noise level. The nomenclature preferably also includes attribute names for remote environments such as environment.place.chicago.time and environment.place.san diego.temperature. The nomenclature preferably further provides attribute names relating to specific applications. For example the nomenclature preferably provides attribute names for aspects of an electronic mail application such as application.mail.available application.mail.new messages waiting and application.mail.messages waiting to be sent. In this manner the attribute nomenclature used by the facility provides effective names for attributes relating to the user the computer system and the environment. Additional detail on the attribute nomenclature utilized by the facility is provided in U.S. patent application Ser. No. 09 724 893 entitled Supplying User Context Data With Dynamically Specified Suppliers and Consumers which is hereby incorporated by reference in its entirety.

Software modules and are said to be context clients because they consume attributes. For example context client consumes user.location attribute . It can be seen that certain software modules may act both as a context server and as a context client. For example software module is both a context server and a context client as it provides the user.in region attribute as well as consuming a user.location attribute . It can also be seen that a context client consumes more than one attribute. For example context client consumes both user.in region attribute and user.elevation attribute . To determine which attributes are currently available any of the context clients may request that the characterization module enumerate the available attributes. In response to such a request the characterization module would enumerate the user.location attribute the user.location attribute and the user.in region attribute. Additional preferred embodiments permit context clients to otherwise limit attribute enumeration requests. For example a context client may request enumeration of all user interface attributes by specifying the wildcard expanded attribute name platform.user interface. .

The characterization module preferably implements the API functions described in detail below in order to obtain attribute values from context servers and provide them to context clients. While these functions are preferably exposed via Microsoft Component Object Module COM interfaces those skilled in the art will appreciate that they could be made available to context servers and context clients through a variety of other mechanisms including a number of different function calling and message passing invocation schemes.

Any application can launch a context server that is not already running by calling this function passing the following parameter 

This function returns an error if the requested context server is not found and returns an error if the requested context server is already running.

Each context server has an associated startup behavior which specifies whether or not the context server is automatically launched when the characterization module launches. Context servers installation application or the characterization module s control panel applet may be used to change the startup behavior.

When a context server launches it calls this function to notify the characterization module of its intent to provide attribute instances passing the following parameters 

If the registration request includes a context server name that is already in use the characterization module returns an error and does not register the context server.

Context servers may create an attribute instance at any time by calling this function passing the following parameters 

This function returns an error if the name matches that of an attribute that the context server has already created. If another instance of the attribute already exists and has the same format version this function returns an error if the data type does not match that of the existing attribute.

The first time a context client registers it provides a non null message handler. Subsequent calls by that context client may provide a new message handler that replaces the previous one.

Context clients call this function to request a listing of attributes that meet certain criteria passing the following parameter 

If a source is specified and not found the characterization module returns an error to the context client. In additional preferred embodiments other parameters may be included to limit the set of attributes that are enumerated.

A context server calls this function for each attribute or attribute instance that it will be requesting passing the following parameters 

Context clients may register for attributes at any time. Requests for nonexistent attributes produce an error. Requests are not persistent so the context client must register again to consume the attribute or attribute instance when it becomes available.

If the request timeout is exceeded and the characterization module subsequently responds to the request the returned value replaces the current most recent value cached in the characterization module. If an error is returned after the timeout period it is ignored. The characterization module preferably does not send additional information to the context client that initiated the request.

This function returns an error to the calling context client if the requested attribute requested source or the requested mediator does not exist or if its value is unavailable. Attributes whose values are unavailable are ignored if other instances of the attribute satisfy the request made by the context client.

In step where a single attribute instance was not requested if any registered instances of the attribute satisfy the age criterion then the facility continues in step else the facility continues in step . In step the facility freshens all registered instances of the requested attribute. In step if any of the attributes freshened in step satisfy the age criterion then the facility continues in step else the facility continues in step . In step the facility applies the requested attribute mediator to select one instance or otherwise derive a value from the registered instances. In step the facility returns the instance with an age not satisfied error.

In step where one or more instances satisfy the age criterion if more than one instance satisfies the age criterion then the facility continues in step else the facility continues in step to return the attribute instance that satisfies the age criterion. In step the facility applies the requested attribute mediator to select one instance from among the instances that satisfy the age criterion or to otherwise derive a value from the instances that satisfy the age criterion. After step the facility continues in step to return the value produced by the mediator.

The characterization module requests attributes from a context server by calling the request handler registered by the context server passing the following parameters 

The context server is expected to satisfy the request within the timeout period with the following information 

If the context server is able to determine that the request cannot be answered it returns an error to the characterization module. For instance the context server may be asking a physical sensor for data and the physical sensor is not responding.

If the context server cannot provide an attribute because it received an error message from an attribute that it queries it returns the error message that it received.

When a call to this function necessitates the reevaluation of an attribute instance the characterization module preferably substitutes that value in the corresponding row of the attribute instance table thereby caching the attribute instance for possible future use. is a data structure diagram showing updated contents of the attribute instance table. It can be seen in attribute instance table that upon reevaluation by the ips context server of its instance of the user.elevation attribute the characterization module replaced the former contents of the value uncertainty and timestamp field of row shown in with the values resulting from the reevaluation shown in .

Context clients call this function to request all instances of a particular attribute. This function uses the same parameters as GetAttribute except that the attribute source is omitted. This function returns the same information for each attribute instance.

In one embodiment this function is separate from the GetAttribute function. In an alternative embodiment this function is omitted and the GetAttribute function is called without specifying the attribute source parameter in order to request all instances of a particular attribute.

To force a context server to calculate all of its output attributes at the same time a context client calls this function passing the following parameters 

When this function is called it in turn calls the request handler for the identified context server requesting complete evaluation of the context server s attributes by specifying a special value for the AttributeName parameter. In response the context server evaluates all of its attributes and provides them to the characterization module delaying other requests until it has finished. If the context server uses other attributes to evaluate its own it requests fresh versions of these attributes but it is neither required to or prohibited from requesting complete evaluation.

This function returns an error if the request either timed out or there was no context server with the specified name.

The characterization module possesses several attributes of its own that may be of interest to context clients and context servers. Read only parameters are surfaced as attributes identical to those created by other context servers except that the owner of these attributes is the characterization module itself. Several adjustable items require two way information flow and thus have their own interfaces. In an alternative embodiment adjustable items are exposed as attributes.

Context clients call this function to request attributes containing information about the characterization module passing a parameter identifying the requested attribute. The available items are attributes for which the characterization module is the creator and owner otherwise they behave identically to all other attributes. characterization module attributes are visible to all context clients. The following read only characterization module attributes may be requested 

In one embodiment this function is separate from the GetAttribute function. In an alternative embodiment this function is omitted and the GetAttribute function is called in order to request a characterization module attribute.

Context clients call this function to create a condition to check a relationship between an attribute and a value or between two attributes passing the following 

Conditions may compare an attribute with another attribute and attribute with a value or a condition with another condition. These combinations are listed below in Table 2.

This function returns an error if the requested name is already in use by another condition that was created by the calling context client. An error is returned if the referred to attributes or conditions do not exist. An error is returned if an attribute is requested along with a condition or vice versa.

A context client calls this function to query conditions that it has created passing the following parameters 

This function returns an error if the condition requests a non existent attribute the requested condition does not exist or the timeout is exceeded.

When this function is called for a particular condition the facility preferably uses the information in the corresponding row of the condition table to evaluate the condition. For example when this function is called for the in region true condition the facility preferably uses information row of condition table shown in to evaluate this condition.

A context client calls this function to create a condition monitor to monitor for a change in a condition and be notified when it occurs passing the following parameters 

An error is returned if the name is already in use by another condition monitor from the calling context client.

A context client calls this function to temporarily suspend the operation of a condition monitor passing the following parameter 

This function returns an error to the calling context client if the name does not correspond to an existing condition monitor created by that context client.

A context client calls this function to resume operation of a stopped condition monitor passing the following parameter 

This function returns an error to the calling context client if the name does not correspond to an existing condition monitor created by that context client.

When the StartConditionMonitor function is called the facility preferably changes the contents of the stopped field from yes as shown in to no as shown in so that the characterization module resumes operation of the condition monitor.

Context clients call this function to remove a condition monitor that it has created passing the following parameter 

This function returns an error to the calling context client if the name does not correspond to an existing condition monitor created by the calling context client. If the condition monitor is active when this function is called this function automatically stops the condition monitor prior to removing it.

When this function is called the characterization module preferably deletes the row of the condition monitor table corresponding to the condition monitor. For example if this function is called for the region boundary crossed condition monitor the characterization module preferably deletes row of condition monitor table shown in .

A context client calls this function to remove a condition that it owns passing the following parameter 

An error is returned if the name does not correspond to an existing condition created by the calling context client. The characterization module returns an error if other conditions or condition monitors rely upon the condition and the condition is not removed.

When this function is called for a particular condition the characterization module preferably deletes the corresponding row from the condition table. For example when this function is called for in region true condition the facility preferably deletes row from condition table shown in .

In the foregoing a preferred embodiment is described in which conditions and condition monitors are created separately. In an alternative preferred embodiment conditions and condition monitors are created together as a single entity with a single API function call.

A context server calls this function to unregister to consume an attribute or attribute instance that it is registered to consume passing the following parameters 

This function removes the row corresponding to the specified attribute or instance registration from the attribute or instance registration table.

This function returns an error if the attribute or instance registration table does not contain a row corresponding to the specified registration.

Context clients may unregister themselves at any time. Before calling this function context clients are expected to first remove all conditions condition monitors and attributes that pertain to the registration they are ending parsing the following 

Unregistration of a context client results in the removal of all remaining conditions condition monitors and attribute consumption registrations that it owns.

The characterization module may ask the context client to unregister. Such requests require no parameters. The context client responds to such a request by calling this function within a reasonable period of time. If such acknowledgement is not made the characterization module preferably removes the context client registration and all of its conditions and condition monitors automatically.

When this function is called for a particular context client the characterization module preferably deletes the corresponding row from the context client table. For example when this function is called for the region analysis context client the facility preferably deletes row from context client table shown in .

To determine whether there are context clients using one of its attribute instances a context server calls this function passing the following parameter 

When this function is called it preferably first refers to the attribute or instance registration table to count how many context clients have registered specifically for the calling context server s instance of the attribute. The function further identifies any registrations for this attribute from any context server i.e. rows of the attribute or instance registration table containing the attribute name of this attribute instance and no context server name. For these identified rows the function consults the attribute instance table to determine whether instances of this attribute other than the one provided by the calling context server are present in the table. If not the function also counts the number of context clients registered to consume the attribute from any context server.

Context servers call this function to remove the instances of attributes that they have created passing the following parameter 

This function returns an error if the requested name does not correspond to an attribute that the context server may remove.

This function notifies context clients registered for this attribute instance that it is no longer available. Context clients that register for any one of multiple instances of an attribute are only notified when the last instance of the attribute is removed. If conditions or condition monitors rely upon the attributes that are being removed their owners are notified and the conditions and rules are removed.

When this function is called for a particular attribute instance the characterization module preferably removes the corresponding row from the attribute instance table. For example when the location region analysis context server calls this function for its instance of the user.in region attribute the characterization module preferably deletes row from attribute instance table shown in .

A context server may unregister at any time by calling this function. Calling this function requires no additional parameters.

Unregistration causes the characterization module to remove any remaining attribute instances belonging to that context server thereby requiring the characterization module to notify any registered context clients prior to actually releasing the context server.

The characterization module may ask the context server to unregister in which case the context server is expected to acknowledge the request by requesting unregistration. Failure of the context server to acknowledge the request within a reasonable period of time causes the context server and its attributes to be removed automatically.

The user is preferably able to control several values that affect characterization module function using a windows control panel applet dedicated to the characterization module. The parameters under user control include the following 

When UnregisterContextServer function is called by a particular context server the characterization module preferably removes the corresponding row from the context server table. For example when this function is called for the location region analysis context server the characterization module preferably removes row from context server table shown in .

In the foregoing the facility is described as being implemented using a characterization module that is called by context servers and context clients caches attribute values and maintains status information about the operation of context servers and context clients. In an alternative preferred embodiment however the facility operates without the use of such as characterization module. In this embodiment context servers communicate directly with context clients.

Additional embodiments of the facility support supplemental properties for attribute instances that are supplied by the context server supplying an attribute instance maintained by the characterization module and in some cases returned to context clients requesting a value of the corresponding attribute.

In additional preferred embodiments the facility may operate with a partial characterization module. Such a partial characterization module may include various combinations of the functionalities of routing communication between context servers and the context clients that consume their attributes caching attribute values enumerating available attributes and providing attribute mediation. In further preferred embodiments the facility utilizes a characterization module that constitutes a passive data store that is shared between context servers and context clients. Context servers access the data store to write attribute values and context clients access the data store to read attribute values.

In additional preferred embodiments the facility may provide a characterization module that implements a push information flow model in which each time an attribute value provided by a context server changes the new value is automatically provided to context clients. In some cases context servers may push selected attribute values. For example context servers may push attributes whose values are constant attributes whose values change infrequently or attributes whose values are expensive to obtain. In further preferred embodiments the facility provides a characterization module that implements a pull information flow model in which attribute values are only obtained by the characterization module from the context servers when they are requested by a context client. In additional preferred embodiments characterization modules are provided that support a variety of other information flow models.

It will be understood by those skilled in the art that the above described facility could be adapted or extended in various ways. For example the characterization module may be implemented in computing devices other than wearable computers including other types of mobile computing devices such as personal digital assistants. The characterization module may further be implemented on various types of stationary and or distributed computing devices as well as non traditional computing devices such as smart appliances. Further rather than the attribute context server context client condition and condition monitor names discussed above the facility may use other types of identifiers such as handles. While the foregoing description makes reference to preferred embodiments the scope of the invention is defined solely by the claims that follow and the elements recited therein.

