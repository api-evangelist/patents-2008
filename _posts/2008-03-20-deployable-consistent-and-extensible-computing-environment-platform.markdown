---

title: Deployable, consistent, and extensible computing environment platform
abstract: The diverse objects comprising a computing environment may be represented together as a deployable object hierarchy, which may facilitate the deployment, as well as the consistency, of a computing environment rendered by a plurality of devices. The processes within the computing environment often operate on the objects of the object hierarchy in a variety of ways, including simple operations (creation, reading, updating, and deleting) and more sophisticated operations (synchronizing, paginating, and caching), as well as with the object hierarchy in general. A platform may be devised to facilitate the various operations of the processes on the object hierarchy. The platform may be embodied, such as in an application runtime, and deployed to a variety of platforms to facilitate an equivalent execution of the processes on any type of device and consistent interactions with the object hierarchy.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09298747&OS=09298747&RS=09298747
owner: Microsoft Technology Licensing, LLC
number: 09298747
owner_city: Redmond
owner_country: US
publication_date: 20080320
---
Many computing environments comprise a large and diverse set of objects managed by a set of object systems. For example a computing environment may comprise a set of files managed by a file system one or more databases managed by a database system a set of executable binaries representing applications and managed by an assembly cache a set of user profiles managed by a user profile component of an operating system and various data caches managed by data caching components such as a set of copied items managed by a copy buffer of the operating system a set of undo actions managed by an undo component of the operating system and a set of most recently used items managed by an item usage tracking component of the operating system. Moreover such objects may be exchanged among a plurality of devices operated by one or more users and according to one or more operations e.g. an object synchronization operation that merges two object sets and an object mirroring operation that adjusts a target object set to match a source object set. In this manner the objects are loosely organized through a set of object systems and aggregated to represent the computing environment.

This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key factors or essential features of the claimed subject matter nor is it intended to be used to limit the scope of the claimed subject matter.

The organization of objects within a computing system as a disjointed loosely aggregated set of object systems may create several problems. For example it may be difficult to present a consistent computing environment to the user through various devices especially if the devices vary in capabilities e.g. a high performance personal workstation a browser based public terminal and a low performance cellphone device. As another example applying services to the objects such as synchronization and backup may involve interfacing with each object system to affect the objects managed thereby and such interfacing may vary among object systems. As a third example relating a diverse set of objects such as all of the objects comprising an application may be difficult due to the incomplete cooperation of the managing object systems.

An alternative technique for representing the objects comprising the computing environment involves organizing the objects in an object hierarchy which may be hosted by a computing environment host. If the objects are represented in a uniform manner and managed in a consistent way by an object system a set of services may be devised to apply to all of the objects of the computing environment. Moreover the object hierarchy may be delivered to various devices to represent the same computing environment including the same user profiles applications data files etc. and each device may render the computing environment in a consistent manner but customized based on the capabilities of the device e.g. a hard keyboard interface for receiving data entry from a keyboard device attached to a workstation and a touchscreen software keyboard interface for receiving data entry from a cellphone device. The object hierarchy may therefore be deployed to a device such as a computer or cellphone to render the computing environment. Alternatively a server may deliver to a device a representation of the computing environment e.g. by presenting at least some aspects of the computing environment to the device and accepting input from the device as a user interaction with the computing environment.

Within the computing environment processes may be executed such as application processes user interfaces and services and maintenance tasks of the operating system encompassing the computing environment. These processes perform a variety of operations on the objects of the object hierarchy including basic object generic operations e.g. creating reading modifying and deleting more sophisticated object generic operations e.g. querying for objects with specific properties locating a particular object among the distributed object hierarchy synchronizing two representations of an object and representing an object according to a data interchange format and object specific operations e.g. operations pertaining to a particular type of object such as a login process applied to an object representing a user profile in order to process a login request. These processes may also perform a variety of operations applicable to the computing environment e.g. logging events arising within the computing environment and scheduling processes to be executed within the computing environment. 

In furtherance of the operations of the computing environment processes a platform may be devised for managing interactions of at least one process with a computing environment hosting the process comprising various services designed to perform the many types of tasks on behalf of the processes. The platform may be devised e.g. as a redeployable application runtime which may reside on a device and mediate interactions between the processes of the rendered computing environment and the object hierarchy representing the computing environment. This runtime may then be deployed in various contexts e.g. on a computer system for natively executing applications or within another platform such as a web browser on a mobile device and on a remote server that may deliver a representation of the computing environment to another device e.g. to a web browser on a device. The platform may also be devised to interact with the object hierarchy and the computing environment host according to a representation state transfer interface such that the interaction of the platform and the object hierarchy may occur over a standard stateless connection in a content independent manner such as an HTTP connection utilizing standard HTTP verbs e.g. PUT GET POST and DELETE corresponding respectively to object creating reading updating and removing. The platform may also include an extensible aspect to permit developers to provide new techniques for accessing certain types of objects such as by accepting custom services and exposing the custom services to the processes of the computing environment.

To the accomplishment of the foregoing and related ends the following description and annexed drawings set forth certain illustrative aspects and implementations. These are indicative of but a few of the various ways in which one or more aspects may be employed. Other aspects advantages and novel features of the disclosure will become apparent from the following detailed description when considered in conjunction with the annexed drawings.

The claimed subject matter is now described with reference to the drawings wherein like reference numerals are used to refer to like elements throughout. In the following description for purposes of explanation numerous specific details are set forth in order to provide a thorough understanding of the claimed subject matter. It may be evident however that the claimed subject matter may be practiced without these specific details. In other instances well known structures and devices are shown in block diagram form in order to facilitate describing the claimed subject matter.

Modern computer systems comprise a large number and variety of objects. Many computer systems feature a file store containing both the files for configuring the computer system including executables class libraries configuration information sets and resources and user files generated or received by one or more users. Many computer systems also comprise a wide range of configuration information comprising the computer system hardware and software including the hardware and devices of the computer system the operating system the shell user interface and the configuration of the applications available within the shell user interface. Various user profiles and accounts may also exist the former comprising information describing a particular user or user class name shell user interface preferences home directory etc. and the latter comprising information describing the privileges of the user or class file ownership read write privileges access to various devices etc. Protected security information such as passwords certificates public private key pairs and access control lists may be stored in a security object over which the operating system may exert regulated access. One or more data caches may exist such as browser caches and histories recent entries in application or browser textboxes and recently used file and object lists. Various applications may create application or task specific archives such as an email archive containing various folders and messages and a shared address book containing contact information received from various sources by various system users and organized in user defined groups. Finally the computer system may be configured to exchange particular sets of information with other computers users and devices such as objects to be synchronized and object sets to which access may be granted with various conditions read write privileges ownership quotas etc. Such object types are typically managed by various management systems e.g. a file system a system registry store a user account management system and an email system within the computer system in an ad hoc manner with little consistency or standardization of access methods or object organization.

The organization of objects within a computing system as a disjointed loosely aggregated set of object systems may create several problems. As a first example rendering and maintaining a consistent computing environment comprising a consistent set of objects such as files applications user profiles application configuration data caches etc. may be very difficult especially among devices of varying capabilities such as a personal workstation a public terminal and a cellphone device. As a second example applying services to the objects may be complicated by the storage of diverse objects in multiple object systems. For instance locating objects matching a particular description such as objects last modified within a particular time span may involve querying for matching files through one or more file systems matching database records through a database system matching registry keys through a system registry matching applications through an assembly cache matching data cache items through various data caches etc. Because such object systems often store the associated objects in non standard ways such as with parameters specific to the nature of the objects e.g. examining file records through a file system journal and examining database records through a data specific timestamp applying an operation to each the various object systems may be difficult. As a third example because each object system is configured to manage a particular kind of object relating and mixing the types of objects may be difficult. For instance an application may comprise an executable binary stored in an assembly cache some configuration information stored in a system registry supplemental files such as dictionaries for various languages stored in a file system and events such as recently edited documents stored in data caches. It may be difficult to represent an association of these object types in various systems and to manipulate all such objects together e.g. deleting all such objects in order to uninstall the application. As a fourth example the object set of the computer system may be distributed across several devices and providing consistent access to the object sets may be complicated by the various configurations of the devices the network capabilities of each device and incompatibilities in the wire formats used by each device for exchanging data e.g. a first device may be configured to exchange data according to an XML schema and a second device may be configured to exchange data according to JSON. 

An alternative approach may be devised wherein the computing environment is represented in a manner that may be delivered to devices for rendering according to the capabilities of the device. The representation comprises a set of objects organized according to an object hierarchy and represented according to a common grammar. The objects include the data objects of the computer system such as the user files and data created by the user. The objects also include the executable binaries and class libraries comprising the operating system components such as the shell and the applications offered therein. The object also include the information specifying the user interface of a computing environment including shell preferences e.g. visual themes application launch menu and double click threshold user accounts and privileges security information e.g. passwords security tokens and certificates application binaries and configuration information user data and metadata e.g. file sharing information and data caches e.g. most recently used file lists and browser history. Despite the various nature and uses of these objects the objects are represented in a common manner in the object hierarchy and may be arbitrarily organized in the hierarchy. Thus in contrast with former systems comprising a set of isolated data stores each containing one type of object e.g. a file system containing files a registry containing configuration information and a data cache containing the browser history the object hierarchy in this approach organizes all such objects in a common manner in the object hierarchy.

A computing environment represented in this manner may be delivered to any device and rendered in a manner suitable for the capabilities of the device. For instance a workstation may render the information as a robust and general purpose computing environment while a public workstation may render a different computing environment experience through a web browser e.g. as a virtual machine that may be discarded at the end of the user s session and a cellphone may provide a leaner interface with quicker access to cellphone related information e.g. contacts calendar and navigation data. Moreover updates to the information set e.g. preference changes and updates to data files contained therein may be applied to the canonical source of the information set and thereby propagated to all other devices to which the information set is delivered. Also the devices sharing the computing environment may be integrated through the shared information set such that one device may interact with others that are identified in the information set e.g. data stored on a first device may be accessed by a second device and a first device may be controlled by a second device through a communications conduit. The information set may therefore identify the collection of devices that share the computing environment along with the roles capabilities and resources of each device to provide an integrated computing experience across a potentially large number and variety of devices.

The computing environment rendered on such devices typically comprises one or more processes representing discrete tasks within the computing environment. As one example an operating system may be rendered as an encompassing framework for the computing environment and the operating system may utilize a variety of processes for achieving various computing environment tasks such as managing memory and data items communicating with devices such as printers and optical discs and presenting a computing environment user interface to a user. The operating system may also host a variety of applications such as a word processor application and a web browser and each application may comprise one or more processes relating to the performance of the application. Each process typically comprises one or more threads of execution applied respectively to sets of instructions and a set of resources such as segments of memory and reservations for access to devices such as a display adapter.

If the computing environment is represented as a diverse set of objects the processes often interact with the objects in furtherance of the tasks of the processes. For instance an operating system process involving memory management may generate relocate compress and remove objects in the object hierarchy in order to organize the memory block containing the objects and a web browser application may interact with objects representing website bookmarks cookies and entries in a history cache during a typical web browsing session. The interactions may be comparatively simple such as requesting the object hierarchy to store a new object read an object for a process and modify or remove the object or may be comparatively sophisticated such as synchronizing the data contents of two objects or identifying the location of an object among the set of data stores comprising the object hierarchy or may be object specific e.g. attempting to process a login function on a user profile object type when a user initiates an attempt to login to the computing environment through the user profile. The processes may also interact more generally with the computing environment such as by accessing an event log containing a record of various events arising in the computing environment or by scheduling another process to be executed if a particular set of conditions are satisfied e.g. if the time is midnight and no users are logged into the computing environment run an archival backup process. 

Thus the processes of the computing environment may request various types of access to the objects of the object hierarchy in a variety of locations and often in concurrence or conflict with access requests by other objects e.g. a first process may request to read an object while a second process requests to delete the object. Moreover the performance of these processes may be device and context specific. For example a request to play a movie object may be differently handled if performed on a native application on a computer system which may play the movie unfettered on a mobile device such as a cellphone which may prefer to have the movie downsampled for display on a small screen within a web browser which may display the video as part of a web page and on a computing environment host or remote server which may not directly play the movie on a local display but may deliver a version of the device for rendering.

In order to facilitate the many types of access requested by processes to the objects of an object hierarchy along with the multiple contexts within which such request may arise a platform may be devised for managing interactions of at least one process with a computing environment hosting the process comprising various services designed to perform the many types of tasks on behalf of the processes. For example the platform may expose to the processes of the computing environment an object synchronizing service which processes may utilize to unify the contents of various objects and an object querying service which processes may utilize to identify objects matching certain criteria e.g. objects comprising entries in a web browser history cache that are no more than one week old thereby generating a set of recently visited websites. Such services may be basic and type generic e.g. object creating reading modifying and deleting services may be more sophisticated but still type generic e.g. an object synchronizing service that queries for objects with specific properties and an object locating service that locates a particular object among the distributed object hierarchy and may be type specific e.g. a login service applied to a user profile object type in order to process a request by the represented user to login to the computing environment. These services may also apply to various aspects of the computing environment e.g. an event logging service that records and describes significant events arising under various conditions within the operating system.

A platform of this nature may be included within various aspects of the computing environment. For instance the platform may be devised as a redeployable application runtime which may reside on a device and mediate interactions between the processes of the rendered computing environment and the object hierarchy representing the computing environment. The application runtime may also be deployed in various contexts e.g. on a computer system for natively executing applications or within another platform such as a web browser on a mobile device and on a remote server that may deliver a representation of the computing environment to another device e.g. to a web browser on a device. The deployment of the application runtime to a compatible device may therefore permit applications of the computing environment to interact with the object hierarchy in a content independent manner. Additional features may be provided to exhibit additional properties of the computing environment that may be advantageously utilized by some processes.

The techniques described herein may be implemented with variations in many aspects and some variations may present additional advantages and or reduce disadvantages with respect to other variations of these and other techniques. These variations may be included in various embodiments such as the exemplary method of and the exemplary system of and may be compatible with other such variations to present several such additional advantages and or reduced disadvantages. Those of ordinary skill in the art may therefore devise many such embodiments in accordance with the techniques discussed herein.

A first aspect that may vary among implementations of these techniques relates to the organization of the platform through which the service providers are organized which may be modeled according to various architectures and embedded in various components of a computer system or device. As one example the platform may be formulated as an application runtime which may be deployed to a computer system or device that is capable of rendering the computing environment and executing the processes thereof. Alternatively the platform may be embedded in another application such as a web browser that is configured to host a representation of the computing environment. For instance the platform may be configured to provide the services of the service providers set to at least one of a computer system a mobile device and a web browser rendered on a device. Those of ordinary skill in the art may devise many locations in a computer system or device where the platform may be formulated to facilitate the computing environment processes while implementing the techniques discussed herein.

A second aspect that may vary among implementations of these techniques relates to the object hierarchy service providers included in the platform which may offer many types of services with respect to the object hierarchy as a whole or a portion thereof. illustrates an exemplary object hierarchy service providers set comprising three such object hierarchy service providers. It may be appreciated that these object hierarchy service providers may be differently factored omitted superseded and or supplemented with additional object hierarchy service providers and that the exemplary object hierarchy service providers set is presented only as one suitable set of services that may be exposed to processes of the computing environment with respect to operations on the object hierarchy as a whole.

The exemplary object hierarchy service provider set includes a connection management service which may be configured to secure and manage a communications channel between the processes and the computing environment host storing the object hierarchy. The connection may be achieved through many physical communications channels such as an Ethernet physical connection a coaxial connection an optical fiber connection etc. and or using many forms of data link layers such as Ethernet various forms of 802.11 wireless data links EVDO etc. The connection may also be made over various transport protocols such as TCP and UDP and using various network protocols such as IPv4 IPv6 and IPX. The communications channel may be connection oriented such as in TCP or connectionless such as in UDP. Also the communications channel may involve various application layer protocols such as HTTP FTP and SOAP. The connection management host may also pool a series of connections and or protocols to provide a more robust higher bandwidth lower latency or higher security connection. In addition to establishing and maintaining a network connection with the computing environment host the connection management service may also perform more sophisticated services related thereto such as encryption via SSL user and or device authentication via Kerberos and bandwidth prioritization and throttling.

One aspect of the connection management service that may be particularly advantageous relates to the nature of the interaction between the connection management service and a computing environment host. In one such embodiment the connection may be devised as a stateless interaction that reduces the communications burden on the computing environment host. Alternatively or additionally the connection may be established over a conventional communications channel such as HTTP rather than a specialized or proprietary communications channel which may be less well understood broadly supported in hardware and software and compatible with security functions such as firewalls that may block less familiar types of network traffic. Alternatively or additionally the connection management service may be configured communicate with the computing environment host through a constrained set of operators such as e.g. the standard set of HTTP PUT GET POST and DELETE which may correlate with the common operations of creating reading updating and deleting objects respectively. Alternatively or additionally the connection management service may identify objects of the object hierarchy according to a standardized addressing model such as the Uniform Resource Identification URI addressing model which may be more broadly compatible with various software and hardware components. A particularly advantageous embodiment may implement all of these techniques to form a representation state transfer RESTful interface wherein the objects of the object hierarchy are addressed according to URIs and accessed over a stateless HTTP connection using the common set of HTTP verbs. This embodiment may present many advantages such as a cacheable communication between the platform and the computing environment host an efficiently conservative allocation of resources used to maintain the connection and broad compatibility with networking software and hardware components. However those of ordinary skill in the art may be able to devise many communications techniques between a connection management service and a computing environment host while implementing the techniques discussed herein.

The exemplary object hierarchy service provider set also includes an event logging service which may be configured to log events arising within the computing environment represented by the object hierarchy. The events may be recorded to document the interaction of various processes within the computing environment and the consequences of such processing of various significance. As one example the computing environment may include a set of logged news items which represent more significant events in the computing environment e.g. an insertion of a set of objects an addition of a device that is newly available in the computing environment and the creation of a new user account. As another example the computing environment may include a set of logged activities which represent events in the computing environment of less or more ephemeral significance e.g. a visitation of a website in a browser a copying of data to a copy buffer and a transmission of an object across a communications channel. A process in the computing environment may interact with the event logging service in order to record events generated by the process. A process may also interact with the event logging service in order to review historic events of a certain type such as occurring during a certain set of dates or to subscribe to events of a particular type which the event logging service may fulfill by arranging to have the process notified when such events arise in the future.

The exemplary object hierarchy service provider set also includes a scheduling service which may be configured to schedule conditional actions within the computing environment represented by the object hierarchy. A process may request the computing environment to monitor certain set of conditions and to take a particular action when the conditions are fulfilled. As a first example a process may implement a memory compaction action that is activated whenever the memory of the computing environment runs low. The memory compaction action may examine the objects comprising the memory of the computing environment to identify resources that may be released such as objects that are no longer referenced. As a second example a process may request the scheduling service to arrange for a periodic retrieval of email from an email server which may be invoked every ten minutes to pull new email messages into the computing environment. These and other object hierarchy level services may be included in the object hierarchy service providers set and may be implemented by those of ordinary skill in the art while devising a platform for managing interactions of processes in a computing environment with the objects of an object hierarchy as discussed herein.

A third aspect that may vary among implementations of these techniques relates to the object generic service providers included in the platform which may offer many types of services with respect to one or more objects stored in the object hierarchy. illustrates an exemplary object generic service providers set comprising eight such object generic service providers. It may be appreciated that these object generic service providers may be differently factored omitted superseded and or supplemented with additional object generic service providers and that the exemplary object hierarchy service providers set is presented only as one suitable set of services that may be exposed to processes of the computing environment with respect to various objects of the object hierarchy.

The exemplary object generic service provider set includes an object operation batching service which may be configured to receive an object operations set comprising operations to be applied to objects of the object hierarchy and to apply the object operations to objects of the object hierarchy. It may be appreciated that a process is executing on a device may be able to communicate with the computing environment host over a network having a certain amount of latency i.e. with a certain delay between a request to perform an operation on an object of the object hierarchy and a response indicating the result of the operation. This delay may be inconvenient for some types of communication such as a large set of operations to be performed in series. Instead of sending each operation to the computing environment host and awaiting a response before sending the next operation request the object operation batching service may send many such operations as a batch. The object operation batching service may accept a set of such operations send them as a batch to the computing environment host and route the results of the invocations upon receiving an aggregated response from the computing environment host. Alternatively or additionally the object operation batching service may accept an object operation logic which may include e.g. Boolean logic and variable manipulation e.g. try to create objects of random names in a particular folder and keep trying until one hundred such objects are created. The logic may be sent to the computing environment host as a batch e.g. as a mobile agent and the object operation batching service may receive the result upon completion and may deliver the result s to the initiating process. The resulting application of operations to the objects of the object hierarchy may appear to be chunky rather than chatty and may result in a performance improvement due to a reduction in network transport costs.

The exemplary object generic service provider set includes an object representing service which may be configured to represent objects of the object hierarchy according to a data interchange format. Different types of processes may request to receive objects formatted in a particular manner such as according to XML RSS JSON or Atom. The object representing service may enable a process to request a particular data interchange format in which a particular object or set of objects is to be represented. In one such embodiment the object representing service may request and receive from the object hierarchy a basic representation of the objects and may then reformat the representation of the object according to the specified data interchange format before delivering the result to the requesting process. In another such embodiment the object representing service may specify to the computing environment host the data interchange format in which the object is preferably specified and may receive and deliver to the process the preferably formatted representation of the object.

The exemplary object generic service provider set includes an object caching service which may be configured to manage cache items with respect to objects of the object hierarchy. For example the object caching service may create a data cache on behalf of a process such as a browsing history cache for a web browser process or a most recently used documents list for an office productivity process. The object caching service may also insert some cache items into the data cache either automatically e.g. by monitoring events arising in the system and caching a notification of each such event or upon request of the process. The object caching service may also fetch items from the cache on behalf of a process either automatically e.g. by requesting an object either from the computing environment host if not cached or from an object cache if the object was recently retrieved or upon request of the process. The caches created and managed by the object caching service may pertain to a particular user process application object or set of objects etc. and may have variable volatility e.g. a temporary data cache for a less significant set of cache items and a stored data cache for a more significant set of cache items.

The exemplary object generic service provider set includes an object paginating service which may be configured to retrieve a selected portion of an object of the object hierarchy. It may be appreciated that some objects in the object hierarchy may be very large e.g. a high definition movie object. Rather than attempting to retrieve the entire object across the network a process may wish to obtain only a portion of an object such as while streaming a media object across a network. The object paginating service may therefore accept a request to retrieve only a specified portion of an object such as the first 100 kilobytes of a data object or the first ten records of a data set. The object paginating service may also comprise a stateful cursor that identifies a location within an object that was last retrieved and may provide a next segment of the object upon request by a process.

The exemplary object generic service provider set includes an object synchronizing service which may be configured to synchronize a first version of an object in an object hierarchy with a second version of an object in an object hierarchy. When a device is first added to a mesh the computing environment host may deliver to the device a complete or selected portion of the object hierarchy. The objects of the computing environment may subsequently change on one or both of the computing environment host and the device and a synchronization technique may be applied to reunify the divergent object hierarchies. The object synchronization service may therefore synchronize respective objects of the object hierarchy stored on the computing environment host and on the device in order to resolve version conflicts. The object synchronization service may utilize may synchronization techniques for detecting changes e.g. object system journaling and or object hashcode comparison and for performing a synchronization between two divergent objects. The object synchronization service may also perform a synchronization of two objects in the same object hierarchy e.g. in order to de duplicate portions of the object hierarchy or upon request of a process.

The exemplary object generic service provider set includes an object querying service which may be configured to receive a query from a query agent over the objects of the object hierarchy apply the query to the objects of the object hierarchy to produce a query result and return the query result to the query agent in response to the query. The query agent may be a user who wishes to identify particular types of objects e.g. objects having a certain name or may be a process e.g. a backup process that queries for objects created or updated since the lat backup. The object querying service may share part or all of the querying computation with the computing environment host may respond either with references to identified objects or representations of the identified objects etc.

The exemplary object generic service provider set includes an object subscribing service which may be configured to receive a subscription request from a subscription agent with regard to an object and notify the subscription agent of events arising with respect to the object. The subscription agent may be a user who wishes to receive a personal notification when a certain type of event arises e.g. a request to send an email to the user when objects are added to a particular object collection like a photo album. The subscription agent may also be a process e.g. an antivirus package that requests notification of incoming email messages and objects to scan the messages and objects for viruses. The object subscribing service may therefore provide notification either by generating and sending a message or by activating a specified process.

The exemplary object generic service provider set includes an object locating service which may be configured to locate an object stored in an object hierarchy distributed across at least two object hierarchy portions. An object hierarchy may be distributed among the computing environment host and one or more devices e.g. a notebook computer represented in the mesh may store a set of photos and a cellphone device represented in the mesh may store a set of contacts. When a process requests access to an object it may be difficult to determine where the object resides and how to access it. The object locating service may therefore identify the device on which the portion of the object hierarchy containing an identified object is stored and may negotiate a communications connection with the device in order to grant access to the requesting process. These and other generic object level services may be included in the object generic service providers set and may be implemented by those of ordinary skill in the art while devising a platform for managing interactions of processes in a computing environment with the objects of an object hierarchy as discussed herein.

A fourth aspect that may vary among implementations of these techniques relates to the addition of custom object specific service providers to the object specific service providers set. A developer may wish to devise a new type of service to be applied to a particular type of object stored in the object hierarchy e.g. an audio streaming service may be added to generate an audio stream for one or more audio objects stored in an object hierarchy. The developer may therefore develop a custom object specific service and may wish to register the object specific service within the computing environment for use by other processes. Accordingly the platform may include a type specific object service registering component that is configured to receive a custom type specific object service and to expose the custom type specific object service to the process in the computing environment. Other processes may then discover and invoke the custom service provider in order to utilize the new service with respect to the specified object types.

The variations of the aspects discussed hereinabove may also be implemented in combination with other variations of these aspects. The resulting embodiment may therefore exhibit several advantages and or a reduction of several disadvantages as discussed heretofore. One such combination embodiment is illustrated in illustrating an exemplary system for managing interactions of at least one process with a computing environment hosting the process which may be represented by an object hierarchy stored by a computing environment host . The exemplary system is configured to provide services through service providers that mediate interactions between the object hierarchy and one or more processes as discussed herein. The exemplary system may also be formulated and included in a computer system or device in many forms e.g. as an application runtime through which the processes of the rendered computing environment interact with the object hierarchy . The exemplary system may also provide such services for various devices and contexts such as a computer system a mobile device and a web browser rendered on a device as illustrated in .

The exemplary system of includes an object hierarchy interfacing component which is configured to access objects of the object hierarchy representing the objects of the computing environment. Moreover the object hierarchy interfacing component is configured to communicate with the computing environment host according to a representation state transfer interface involving a stateless interaction with URI addressed objects over a conventional communications channel such as an HTTP connection and using a constrained set of operators such as common HTTP operators including PUT GET POST and DELETE to reflect creating reading updating and deleting such objects respectively. 

The exemplary system of also includes a service providers set which comprises services relating to the object hierarchy . The service providers set generally comprises three types of service providers object hierarchy service providers object generic service providers and object specific service providers . This exemplary system features several object hierarchy service providers including a connection management service which is configured to secure and manage a communications channel between the processes and the computing environment host storing the object hierarchy an event logging service which is configured to log events arising within the computing environment represented by the object hierarchy and a scheduling service which is configured to schedule conditional actions within the computing environment represented by the object hierarchy. The exemplary system also features several object generic service providers including an object operation batching service which is configured to receive an object operations set comprising operations to be applied to objects of the object hierarchy and to apply the object operations to objects of the object hierarchy an object representing service which is configured to represent objects of the object hierarchy according to a data interchange format an object caching service which is configured to manage cache items with respect to objects of the object hierarchy an object paginating service which is configured to retrieve a selected portion of an object of the object hierarchy an object synchronizing service which is configured to synchronize a first version of an object in an object hierarchy with a second version of an object in an object hierarchy an object querying service which is configured to receive a query from a query agent over the objects of the object hierarchy apply the query to the objects of the object hierarchy to produce a query result and return the query result to the query agent in response to the query an object subscribing service which is configured to receive a subscription request from a subscription agent with regard to an object and notify the subscription agent of events arising with respect to the object and an object locating service which is configured to locate an object stored in an object hierarchy distributed across at least two object hierarchy portions.

The exemplary system also comprises a type specific object service registering component which is configured to receive a custom type specific object service and to expose the custom type specific object service to the process in the computing environment. Finally the exemplary system also comprises at least one object specific service provider which is configured to provide a type specific object service to the objects of the object hierarchy of a specified object type. The exemplary system configured in this manner thereby presents several of the advantages and reduces several of the disadvantages discussed with respect to the particular services and variations of aspects discussed herein.

Although the subject matter has been described in language specific to structural features and or methodological acts it is to be understood that the subject matter defined in the appended claims is not necessarily limited to the specific features or acts described above. Rather the specific features and acts described above are disclosed as example forms of implementing the claims.

As used in this application the terms component module system interface and the like are generally intended to refer to a computer related entity either hardware a combination of hardware and software software or software in execution. For example a component may be but is not limited to being a process running on a processor a processor an object an executable a thread of execution a program and or a computer. By way of illustration both an application running on a controller and the controller can be a component. One or more components may reside within a process and or thread of execution and a component may be localized on one computer and or distributed between two or more computers.

Furthermore the claimed subject matter may be implemented as a method apparatus or article of manufacture using standard programming and or engineering techniques to produce software firmware hardware or any combination thereof to control a computer to implement the disclosed subject matter. The term article of manufacture as used herein is intended to encompass a computer program accessible from any computer readable device carrier or media. Of course those skilled in the art will recognize many modifications may be made to this configuration without departing from the scope or spirit of the claimed subject matter.

Although not required embodiments are described in the general context of computer readable instructions being executed by one or more computing devices. Computer readable instructions may be distributed via computer readable media discussed below . Computer readable instructions may be implemented as program modules such as functions objects Application Programming Interfaces APIs data structures and the like that perform particular tasks or implement particular abstract data types. Typically the functionality of the computer readable instructions may be combined or distributed as desired in various environments.

In other embodiments device may include additional features and or functionality. For example device may also include additional storage e.g. removable and or non removable including but not limited to magnetic storage optical storage and the like. Such additional storage is illustrated in by storage . In one embodiment computer readable instructions to implement one or more embodiments provided herein may be in storage . Storage may also store other computer readable instructions to implement an operating system an application program and the like. Computer readable instructions may be loaded in memory for execution by processing unit for example.

The term computer readable media as used herein includes computer storage media. Computer storage media includes volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions or other data. Memory and storage are examples of computer storage media. Computer storage media includes but is not limited to RAM ROM EEPROM flash memory or other memory technology CD ROM Digital Versatile Disks DVDs or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can be accessed by device . Any such computer storage media may be part of device .

Device may also include communication connection s that allows device to communicate with other devices. Communication connection s may include but is not limited to a modem a Network Interface Card NIC an integrated network interface a radio frequency transmitter receiver an infrared port a USB connection or other interfaces for connecting computing device to other computing devices. Communication connection s may include a wired connection or a wireless connection. Communication connection s may transmit and or receive communication media.

The term computer readable media may include communication media. Communication media typically embodies computer readable instructions or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term modulated data signal may include a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal.

Device may include input device s such as keyboard mouse pen voice input device touch input device infrared cameras video input devices and or any other input device. Output device s such as one or more displays speakers printers and or any other output device may also be included in device . Input device s and output device s may be connected to device via a wired connection wireless connection or any combination thereof. In one embodiment an input device or an output device from another computing device may be used as input device s or output device s for computing device .

Components of computing device may be connected by various interconnects such as a bus. Such interconnects may include a Peripheral Component Interconnect PCI such as PCI Express a Universal Serial Bus USB firewire IEEE 1394 an optical bus structure and the like. In another embodiment components of computing device may be interconnected by a network. For example memory may be comprised of multiple physical memory units located in different physical locations interconnected by a network.

Those skilled in the art will realize that storage devices utilized to store computer readable instructions may be distributed across a network. For example a computing device accessible via network may store computer readable instructions to implement one or more embodiments provided herein. Computing device may access computing device and download a part or all of the computer readable instructions for execution. Alternatively computing device may download pieces of the computer readable instructions as needed or some instructions may be executed at computing device and some at computing device .

Various operations of embodiments are provided herein. In one embodiment one or more of the operations described may constitute computer readable instructions stored on one or more computer readable media which if executed by a computing device will cause the computing device to perform the operations described. The order in which some or all of the operations are described should not be construed as to imply that these operations are necessarily order dependent. Alternative ordering will be appreciated by one skilled in the art having the benefit of this description. Further it will be understood that not all operations are necessarily present in each embodiment provided herein.

Moreover the word exemplary is used herein to mean serving as an example instance or illustration. Any aspect or design described herein as exemplary is not necessarily to be construed as advantageous over other aspects or designs. Rather use of the word exemplary is intended to present concepts in a concrete fashion. As used in this application the term or is intended to mean an inclusive or rather than an exclusive or . That is unless specified otherwise or clear from context X employs A or B is intended to mean any of the natural inclusive permutations. That is if X employs A X employs B or X employs both A and B then X employs A or B is satisfied under any of the foregoing instances. In addition the articles a and an as used in this application and the appended claims may generally be construed to mean one or more unless specified otherwise or clear from context to be directed to a singular form.

Also although the disclosure has been shown and described with respect to one or more implementations equivalent alterations and modifications will occur to others skilled in the art based upon a reading and understanding of this specification and the annexed drawings. The disclosure includes all such modifications and alterations and is limited only by the scope of the following claims. In particular regard to the various functions performed by the above described components e.g. elements resources etc. the terms used to describe such components are intended to correspond unless otherwise indicated to any component which performs the specified function of the described component e.g. that is functionally equivalent even though not structurally equivalent to the disclosed structure which performs the function in the herein illustrated exemplary implementations of the disclosure. In addition while a particular feature of the disclosure may have been disclosed with respect to only one of several implementations such feature may be combined with one or more other features of the other implementations as may be desired and advantageous for any given or particular application. Furthermore to the extent that the terms includes having has with or variants thereof are used in either the detailed description or the claims such terms are intended to be inclusive in a manner similar to the term comprising. 

