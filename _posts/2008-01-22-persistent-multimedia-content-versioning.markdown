---

title: Persistent multimedia content versioning
abstract: Systems, methods, and other embodiments associated with versioned persistent storage of multimedia content in a database object are described. One example method includes controlling a database management system (DBMS) to instantiate a database object that has a binary large object (BLOB) attribute, an XML edits attribute, and a set of metadata attributes. The method includes storing a binary stream associated with a multimedia content (e.g., medical image) in the BLOB attribute and storing an editing history of the set of metadata attributes as a set of edit entries in the XML edits attribute. The method also includes controlling the DBMS to store the database object in a column in a table in a relational database managed by the DBMS.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09058407&OS=09058407&RS=09058407
owner: Oracle International Corporation
number: 09058407
owner_city: Redwood Shores
owner_country: US
publication_date: 20080122
---
A portion of the disclosure of this patent document contains material subject to copyright protection. The copyright owner has no objection to the facsimile reproduction of the patent document or the patent disclosure as it appears in the Patent and Trademark Office patent file or records but otherwise reserves all copyright rights whatsoever.

Medical images e.g. Magnetic Resonance Imaging MRI image are large. A comparably very small amount of metadata often describes a medical image. The metadata may include for example an image name a date acquired a patient name a patient identifier an image size a billing code and so on. Once recorded medical images tend to change relatively infrequently if at all as compared to the metadata describing these images. However changes to metadata may typically have lead to duplication of related medical images yielding tremendous wastage of computing resources. Similar issues apply to other types of multimedia content e.g. movies slide shows .

Conventionally media databases have managed collections of multimedia content and metadata columns by separating the two items. For example some medical imaging manufacturers follow the DICOM Digital Imaging and Communication in Medicine standard available at http medical.nema.org dicom 2007 for versioning support. This standard requires storing separate copies of the edited medical images. The metadata may typically have been stored in a media content table while the actual image data may have been stored externally in external file storage. Pointers in a media content table may have provided indirect access to the externally stored image files. Conventionally it has been possible to query the metadata columns in the media content table to acquire pointers to actual files stored in external file storage. Unfortunately this configuration has had issues with synchronization between metadata and image data transaction control security auditing backup processing restoration processing replication high availability versioning and so on. These issues may have arisen because it is relatively inexpensive e.g. in time in resources in computational complexity to change a relational database column but relatively expensive to propagate a change to external file storage. Thus it may have been easy to change metadata but difficult to propagate the change to an image stored in external file storage. Separating the metadata from the image data negatively impacts the features e.g. versioning provided by storing things in databases.

To understand an issue with the separated architecture consider a media query directed at media stored in an external file storage. The media query may be processed by a middle tier that performs query mapping so that a query can be made against metadata stored in a media content table. The metadata acquired in response to this first action can then be used to make a query against an external file where the media data is stored. An assembly process may then be required in the middle tier to associate the initially retrieved metadata with the ultimately retrieved media data. Recall that metadata can easily get out of synchronization with media data which may yield a complicated resource intensive and not provably correct assembly process for example when the ordering of DICOM attributes do not follow the DICOM standard e.g. ascending . These issues may arise in the separated architecture since metadata may be stored as traditional relational database columns with a single version and no update history. In some examples a single flag may be maintained to indicate whether a metadata modification occurred. When this flag indicates that a metadata change occurred an entire media or its header may be reassembled.

Multimedia content is becoming ubiquitous. Database management systems are now used to store this type of digital media. Some conventional systems process multimedia content by encoding it as a binary stream and then persistently storing the binary stream in a binary large object BLOB . Some conventional systems may facilitate editing metadata associated with multimedia content. These conventional systems may persistently store and manage the metadata separately from the multimedia content. While the metadata may be retrieved for purposes including querying auditing assembling a version and so on these conventional systems have drawbacks due to the separate storage. For example conventional systems are typically inefficient with respect to versioning associated with the metadata edits if they provide any versioning at all. For example one conventional system may store the multimedia content as a BLOB and may separately store metadata about the BLOB. However when changes are made to the metadata the conventional system may replicate the entire object including the multimedia content and the metadata attributes even though only the metadata attributes were changed. Thus conventional multimedia storage systems may save multiple copies of the same complete multimedia content which can lead to significant wastage of storage. Additionally changes to metadata may not be directly independently accessible. For example accessing the changes to metadata may require accessing an entire BLOB and or multiple versions of a BLOB.

Example systems and methods use persistent database objects to store and manage both multimedia content and metadata editing history. Both the multimedia content which may be encoded as a binary stream and the metadata are stored in a single object. This differs from conventional solutions that store binary data and metadata separately. In one example an entire persistent database object having media content metadata attributes and a metadata change attribute can be stored in a single database column. Thus versioning of the multimedia content associated with the persistent database object can be implemented as an inherent property of the persistent multimedia content. In one example editing history may be treated as a separate attribute of a database object. In another example editing history may be treated as part of an object metadata. In another example editing history may be treated as part of a BLOB e.g. extension BLOB that forms part of a database object and so on.

In one example a database object may include a BLOB attribute that stores a particular version of a multimedia content. The BLOB may store a binary stream. This may be the original binary stream associated with a multimedia content. The database object may also include a document metadata attribute that specifies a metadata editing history. In one example this attribute may be an XML attribute. This attribute may be constrained by an XML schema. This attribute may by indexed using XMLIndex and thus may be queried using keywords and or an XPath query. Note that the metadata and its change history are stored in the same object as the content. When the editing history is handled as part of an object metadata and when the object metadata is handled by an XML attribute then the editing history may be indexed along with other XML metadata. In one example the database object may also include a second BLOB attribute e.g. extension . This second BLOB attribute may store a binary mapping of metadata editing history. This binary mapping facilitates efficient construction of versions of the binary multimedia content using the stored version and the mapping. In one example an arbitrary version of the binary multimedia content may be constructed without reaching back to an initial version of the multimedia content and then sequentially stepping through intermediate versions of the multimedia content.

The elements and format of the database object facilitate seamlessly combining a change history with other multimedia metadata so that a single set of XML indices can be built for multimedia metadata to query for multimedia content across versions. Versioning information and editing history are distinct concepts. An object may be versioned without editing history. For example an editing history can be derived from a set of assembly instructions. The editing history derivation could be performed by an external logic. In one example assembly instructions could be derived at runtime from editing history. In another example editing history may be persistently stored. Whether editing history is stored may be determined by for example a tradeoff made between storage space and processing speed. In one example both editing history and version information may be stored. Version information may include two parts. A first part may be an assembly instruction that can be stored in an object s XML metadata in an object s binary data and so on. A second part may be added binary streams. The added binary streams may be binary streams segments that are not part of the current version of a media object that is stored in a first BLOB attribute in its entirety. The binary streams may be stored in XML as for example Base64 binary data or in the extension BLOB portion of a database object.

In one example the database object is implemented using an object relational database technology e.g. PL SQL object . Additionally XML content can be implemented with XML database technology. Stream reading of different multimedia content versions can be implemented with a streaming interface in different programming languages e.g. C C C .

The multimedia content may be for example a medical image. The metadata associated with such content may make up less than 0.1 of the byte stream associated with the image. Saving an entire duplicate copy of the multimedia content just because one or two bytes of the metadata are edited leads to enormous wastage of space. Thus example systems and methods facilitate saving metadata and changes to metadata without replicating the associated multimedia content. Binary mappings of the metadata editing history can be stored in the second BLOB attribute to prevent the duplication associated with complete copying and storing. The efficiencies gained by such version control do not come with the additional cost of managing additional objects. Conventionally a different object may have been created for each version. Instead example systems and methods may use a single database object to store original multimedia content associated metadata and associated metadata editing history. Thus only a single set of indices is required for both the multimedia content and its editing history. This facilitates keeping index size small which in turn facilitates keeping a query interface simple and efficient.

The metadata attribute of the database object can be thought of as an audit message that can be displayed and reviewed. In one example the audit message may be user readable. In one example of the persistent database object the metadata and its related multimedia content can be retrieved using a single query. The metadata attribute may be indexed with an XML index to allow keyword and or XPath query.

Differences between multimedia content stored in the first BLOB attribute and another version edited by a user can be pre computed. In one example these differences can be stored in the second BLOB attribute. The differences can be retrieved during an assembly process without generating and or moving binary data since all binary segments are either available in the original media in the first BLOB attributes or are precomputed and stored in the second BLOB attributes. Therefore the differences and results from two or more BLOBs can be accessed at runtime without moving and or copying binary data. This reduces overhead associated with providing a version of a multimedia content or a version of an object when compared to conventional systems.

Some applications e.g. healthcare require unique identities for multimedia contents. The unique identity can be stored in a metadata attribute associated with the database object and thus can be accessed queried indexed versioned and so on similar to how other metadata attributes are processed. In a system where multiple versions of the same DICOM object coexists the multiple versions may be accessed through different identifiers managed by the same database object. Conventional systems may have stored the identity in a different object which may therefore have required multiple indices and a complex query interface. These multiple indices and complex query interface would then be employed during a lengthy run time assembly that hopefully would recreate the desired content and associate it with the desired identity. Unfortunately the metadata and its related multimedia content frequently lost synchronization.

The following includes definitions of selected terms employed herein. The definitions include various examples and or forms of components that fall within the scope of a term and that may be used for implementation. The examples are not intended to be limiting. Both singular and plural forms of terms may be within the definitions.

References to one embodiment an embodiment one example an example and so on indicate that the embodiment s or example s so described may include a particular feature structure characteristic property element or limitation but that not every embodiment or example necessarily includes that particular feature structure characteristic property element or limitation. Furthermore repeated use of the phrase in one embodiment does not necessarily refer to the same embodiment though it may.

XLink describes connections between documents. XLink provides an attribute based syntax for attaching links to documents. XLink provides an XML syntax for describing directed graphs in which the vertices are documents at particular URIs and the edges are links between the documents. A simple link defines a one way connection between two resources the source e.g. starting resource is the link element while the target e.g. ending resource is identified by a URI. XLinks use locators and arcs. Each locator element has an xlink type attribute associated with the value locator and an xlink href attribute containing a URI for the resource it locates. Arcs are paths between resources. Linkbases are XML documents that contain inbound or third party links. A linkbase may establish links from documents other than the linkbase itself.

XML refers to extensible markup language. XML is a document format a meta markup language for text documents. XML documents are trees that start at a root. XML documents include elements. An element can be defined generically and have a particular instance s . An instance of an element has content e.g. a value s . XML elements can have attributes. An attribute is a name value pair attached to the element start tag. XML Schemas describe allowed content of XML documents conforming to a particular XML vocabulary.

XPath is a non XML language used to identify particular parts of XML documents. XPath indicates nodes by position relative position type content and so on. XPath expressions may represent numbers strings Booleans and so on. XPath is a language for picking nodes and sets of nodes out of the tree structure that is an XML document.

XPointer uses XPath expressions to identify the particular point in or part of an XML document to which an XLink links. XPointer addresses individual parts of an XML document.

XSL equals extensible stylesheet language. XSL include XSL transformations and XSL formatting objects.

XSLT equals XSL transformations. XSLT is an XML application that specifies rules by which one XML document is transferred into another. XSLT is a general purpose language for transforming one XML document into another for purposes including for example web page display. An XSLT stylesheet contains templates that control what output is created from what input. An element has a match attribute that contains an XPath pattern identifying the input it matches. XSLT uses XPath expressions to match and select particular elements in an input document for copying into an output document or for further processing.

 Computer component as used herein refers to a computer related entity e.g. hardware firmware software in execution combinations thereof . Computer components may include for example a process running on a processor a processor an object an executable a thread of execution and a computer. A computer component s may reside within a process and or thread. A computer component may be localized on one computer and or may be distributed between multiple computers.

 Computer communication as used herein refers to a communication between computing devices e.g. computer personal digital assistant cellular telephone and can be for example a network transfer a file transfer an applet transfer an email an HTTP transfer and so on. A computer communication can occur across for example a wireless system e.g. IEEE 802.11 an Ethernet system e.g. IEEE 802.3 a token ring system e.g. IEEE 802.5 a LAN a WAN a point to point system a circuit switching system a packet switching system and so on.

 Computer readable medium as used herein refers to a medium that stores signals instructions and or data. A computer readable medium may take forms including but not limited to non volatile media and volatile media. Non volatile media may include for example optical disks magnetic disks and so on. Volatile media may include for example semiconductor memories dynamic memory and so on. Common forms of a computer readable medium may include but are not limited to a floppy disk a flexible disk a hard disk a magnetic tape other magnetic medium an ASIC a CD other optical medium a RAM a ROM a memory chip or card a memory stick and other media from which a computer a processor or other electronic device can read.

In some examples database is used to refer to a table. In other examples database may be used to refer to a set of tables. In still other examples database may refer to a set of data stores and methods for accessing and or manipulating those data stores.

 Data store as used herein refers to a physical and or logical entity that can store data. A data store may be for example a database a table a file a list a queue a heap a memory a register and so on. In different examples a data store may reside in one logical and or physical entity and or may be distributed between two or more logical and or physical entities.

 Logic as used herein includes but is not limited to hardware firmware software in execution on a machine and or combinations of each to perform a function s or an action s and or to cause a function or action from another logic method and or system. Logic may include a software controlled microprocessor a discrete logic e.g. ASIC an analog circuit a digital circuit a programmed logic device a memory device containing instructions and so on. Logic may include one or more gates combinations of gates or other circuit components. Where multiple logical logics are described it may be possible to incorporate the multiple logical logics into one physical logic. Similarly where a single logical logic is described it may be possible to distribute that single logical logic between multiple physical logics.

An operable connection or a connection by which entities are operably connected is one in which signals physical communications and or logical communications may be sent and or received. An operable connection may include a physical interface an electrical interface and or a data interface. An operable connection may include differing combinations of interfaces and or connections sufficient to allow operable control. For example two entities can be operably connected to communicate signals to each other directly or through one or more intermediate entities e.g. processor operating system logic software . Logical and or physical communication channels can be used to create an operable connection.

 Query as used herein refers to a semantic construction that facilitates gathering and processing information. A query may be formulated in a database query language e.g. SQL an OQL a natural language and so on.

 Signal as used herein includes but is not limited to electrical signals optical signals analog signals digital signals data computer instructions processor instructions messages a bit a bit stream or other means that can be received transmitted and or detected.

 Software as used herein includes but is not limited to one or more executable instructions that cause a computer processor or other electronic device to perform functions actions and or behave in a desired manner. Software does not refer to stored instructions being claimed as stored instructions per se e.g. a program listing . The instructions may be embodied in various forms including routines algorithms modules methods threads and or programs including separate applications or code from dynamically linked libraries.

 User as used herein includes but is not limited to one or more persons software computers or other devices or combinations of these.

Some portions of the detailed descriptions that follow are presented in terms of algorithms and symbolic representations of operations on data bits within a memory. These algorithmic descriptions and representations are used by those skilled in the art to convey the substance of their work to others. An algorithm here and generally is conceived to be a sequence of operations that produce a result. The operations may include physical manipulations of physical quantities. Usually though not necessarily the physical quantities take the form of electrical or magnetic signals capable of being stored transferred combined compared and otherwise manipulated in a logic and so on. The physical manipulations create a concrete tangible useful real world result.

It has proven convenient at times principally for reasons of common usage to refer to these signals as bits values elements symbols characters terms numbers and so on. It should be borne in mind however that these and similar terms are to be associated with the appropriate physical quantities and are merely convenient labels applied to these quantities. Unless specifically stated otherwise it is appreciated that throughout the description terms including processing computing determining and so on refer to actions and processes of a computer system logic processor or similar electronic device that manipulates and transforms data represented as physical electronic quantities.

Example methods may be better appreciated with reference to flow diagrams. While for purposes of simplicity of explanation the illustrated methodologies are shown and described as a series of blocks it is to be appreciated that the methodologies are not limited by the order of the blocks as some blocks can occur in different orders and or concurrently with other blocks from that shown and described. Moreover less than all the illustrated blocks may be required to implement an example methodology. Blocks may be combined or separated into multiple components. Furthermore additional and or alternative methodologies can employ additional not illustrated blocks.

Method may also include at storing a first set of binary data associated with a multimedia content in the first BLOB attribute. The multimedia content may be for example a medical image a movie a slide show and so on.

Method may also include at storing a value s in the set of metadata attributes. The metadata attributes may be configured to store information associated with the multimedia content and or the database object. Thus the metadata attributes may store information including but not limited to a content name a content size a content creation date a content source a patient name a patient identifier an encoding format a billing code and so on.

Method may also include at controlling the DBMS to store the database object in a column in a table in a relational database managed by the DBMS. Note that the database object includes both the media content XML attributes describing the content and or object and an XML edits attribute in which edits to the metadata can be stored. Thus the media its attributes and its edits may be stored in a single database object in a single database column.

While illustrates various actions occurring in serial it is to be appreciated that various actions illustrated in could occur substantially in parallel. By way of illustration a first process could control the DBMS to instantiate and store objects a second process could store binary data and a third process could store values in the metadata attributes. While three processes are described it is to be appreciated that a greater and or lesser number of processes could be employed and that lightweight processes regular processes threads and other approaches could be employed.

In one example a method may be implemented as computer executable instructions. Thus in one example a computer readable medium may store computer executable instructions that if executed by a machine e.g. processor cause the machine to perform method . While executable instructions associated with the method are described as being stored on a computer readable medium it is to be appreciated that executable instructions associated with other example methods described herein may also be stored on a computer readable medium.

For example method includes at storing in the XML edits attribute an editing entry associated with the set of metadata attributes. The storing at may be performed upon determining that a member of the set of metadata attributes was changed. Changes may take different forms and thus the editing entry is to describe a change to the member of the set of metadata attributes. In one example the editing entry may be a human readable XML attribute.

In one example the editing entry may describe a deletion from the set of metadata attributes. In another example the editing entry may describe a deletion from the first set of binary data. The deletion may be associated with for example cropping an image. Thus in one example not only is versioning available for the more common situation of metadata deletions but also for the less frequent situation of media deletions. Deletions are only one type of edit that metadata attributes and or media may experience. Therefore in one example the editing entry may include an addition to the set of metadata attributes and or an update to the set of metadata attributes. The update may change an existing value while an addition may insert a completely new attribute. Thus method facilitates providing forward compatibility for previously stored media by allowing the addition of new metadata attributes. As described above in some cases the media itself may change. Thus in one example the editing entry may include an addition to the first set of binary data and or an update to the first set of binary data. These changes may be the result for example of a retouching of the media content. For example a first medical image may include artifacts associated with motion that occurred during imaging. The first medical image may subsequently be retouched to remove and or lessen the artifacts. Rather than store a completely new copy of the medical image method facilitates storing edits for reproducing a copy.

The additional action concerns a second BLOB attribute in the database object. The second BLOB attribute may store a second set of binary data associated with a binary mapping of a change to a member of the set of metadata attributes. Thus the instantiating at and the storing at may concern an object that includes the second BLOB attribute along with the first BLOB attribute the metadata and the XML edits attribute.

Method includes at storing in the second BLOB attribute a set of binary data associated with an addition to the set of metadata attributes and or and a set of binary data associated with an update to the set of metadata attributes. The differences between a first version of the set of metadata attributes and a second different version of the set of metadata attributes may be pre computed and thus the storing at may include storing the difference as a set of binary data in the second BLOB attribute. Similarly a binary mapping associated with an edit entry in the XML edits attribute may be computed. Thus the storing at may include storing the binary mapping as a set of binary data in the second BLOB attribute.

In one example the second set of binary data may also be associated with a binary mapping of a change to the first set of binary data. In one example the storing at may include storing in the second BLOB attribute a set of binary data associated with an addition to the first set of binary data and or a set of binary data associated with an update to the first set of binary data. This is a less frequent occurrence.

Method includes at controlling the DBMS to produce an index for the XML edits attribute. Controlling the DBMS may include for example controlling the DBMS to produce an index on XML content. With an index available method may accept queries. Therefore method may include at providing a result to a keyword query directed at the XML edits attribute. Providing the result at may also include providing a result to an XPATH query directed at the XML edits attribute. In either case the result is based at least in part on the index created in response to controlling the DBMS at .

Method includes at providing a binary stream that represents a selected version of the database object. The binary stream may be built from the first set of binary data the set of metadata attributes and the XML edits attribute. In one example providing the binary stream includes computing BLOB I K BLOB I U I K M I K 

where U I K represents a complete set of metadata attributes to be deleted from I th version of the database object and

where M I K represents a complete set of metadata attributes to be added to the I th version of the database object.

In another example edits to both the metadata and the image data may be considered. Therefore providing the binary stream at may include computing BLOB I K BLOB I U I K M I K 

where U I K represents a complete set of metadata attributes to be deleted from I th version of the database object and a complete set of deletions from the I th version of the first set of binary data and

where M I K represents a complete set of metadata attributes to be added to the I th version of the database object and a complete set of additions to the I th version of the first set of binary data.

In one example data structures may be constructed that facilitate storing data on a computer readable medium and or in a data store. The data structure may be an object where object is used in its computer science term of art form. Thus the object may include data and methods for manipulating that data. Thus in one example a computer readable medium may store an object that includes a first storage area containing data representing a medical image. While a medical image is described more generally the first storage area could store a set of binary data associated with a multimedia content. The object may also include a second storage area containing metadata describing the medical image and a third storage area containing edits to the metadata. In one example a selected version of the object may be synthesized from the data representing the medical image the metadata and the edits to the metadata. While three storage areas are described it is to be appreciated that a greater and or lesser number of areas could be employed. Additionally it is to be appreciated that other objects produced by the example systems and methods described herein may be encoded onto a computer readable medium.

The versions attribute may store information useful for assembling a version of a media content. Thus in one example the versions attribute may store an assembly instruction s from which a version of the binary object can be computed. The assembly instructions may include a delete instruction that identifies a segment of the binary data associated with the multimedia content to be excluded from a version. The assembly instructions may also include an addition instruction that identifies a segment of binary data to be added to the binary data associated with the multimedia content. The assembly instructions may also include a copy instruction that identifies a segment of binary data to be copied from the binary data associated with the multimedia content when a version of the multimedia content is assembled.

In one example the method may include controlling the DBMS to store binary streams to be added to the database object. The binary streams are stored in the database object.

In one example the method may also include controlling the DBMS to instantiate the database object to include a set of metadata in which an assembly instruction can be stored. The set of metadata may store additional information. For example the set of metadata may store a stream segment to be added to a version of the database object.

The example method may also include controlling the DBMS to instantiate the database object to include a second binary object. The second binary object may store an assembly instruction. The second binary object may also store a stream segment to be added to a version of the database object.

System also includes a versioning logic . Versioning logic provides versioning for the database object stored in the media content table in the media database . Versioning logic may upon determining that a member of the set of metadata attributes in object has been changed control the database object logic to store data in the XML edits attribute of the database object stored in the media content table in the media database . The data stored by the database object logic may include an editing entry associated with a change to a member of the set of metadata attributes. While system is illustrated residing outside database it is to be appreciated that in one example system may itself be persistently stored in database .

System includes an assembly logic to provide a binary stream that represents a selected version of the database object . In one example the assembly logic builds e.g. assembles the binary stream representing the selected version from data in object . For example assembly logic may build the binary stream from the first set of binary data the set of metadata attributes the second set of binary data and the XML edits attribute. Building the binary stream may include identifying a base version of object deletions from object and additions and or modifications to object . In one example assembly logic may be a stored procedure in a media database .

The following derivation illustrates how a particular version of a media object may be assembled without requiring the assembly of intermediate versions. For example a version can be assembled directly from a version without assembling version and version and vice versa.

U I K Complete set of attributes to be deleted from metadata of version I in order to change from version I into version K.

M I K Complete set of attributes to be added to metadata of version I in order to change from version I to version K.

In one example changes e.g. deletions between versions are constrained to include the complete attribute value and not just attribute tag in order to get back to an earlier version. Using this derivation for a persistent object that stores the current version I of a multimedia object for each version of media object K U I K and M I K can be pre computed and stored. Thus some example systems and methods described herein store the stream descriptor representation of U I K and M I K in the extension attribute of the persistently stored database object. While system is illustrated residing outside database it is to be appreciated that in one example system may itself be persistently stored in database .

In one example the API may be stored on a computer readable medium. The interfaces in the API can include but are not limited to a first interface that communicates information associated with initializing a persistent multimedia database object with a binary media and with XML metadata attributes. The interfaces may also include a second interface that communicates information associated with updating a persistent multimedia database object from a first previous version to a second version. The interfaces may also include a third interface that communicates information associated with updating a persistent multimedia database object so that a specified version of the persistent multimedia database object is stored.

Thus logic may provide means e.g. hardware software firmware for instantiating a persistent database object. The persistent database object may include for example a first binary large object BLOB attribute to store a multimedia content a set of metadata attributes that describe the database object and or the multimedia content an XML edits attribute to store an edit to the set of metadata attributes and a second BLOB attribute to store a second set of binary data associated with a binary mapping of a change to a member of the set of metadata attributes. The logic may also include means for updating the XML edits attribute in response to detecting an edit of a member of the set of metadata attributes. For example when a metadata attribute is deleted a metadata attribute is added a metadata attribute value is changed and so on these manipulations may be detected and logic may update the XML edits attribute to capture information describing the manipulation. Logic may also include means for providing a binary stream representing a version of the persistent database object. The version may be synthesized from data stored in the first BLOB data stored in the set of metadata attributes and data stored in the XML edits attribute.

The means may be implemented for example as an ASIC programmed to control processor with respect to processing data . The means may also be implemented as computer executable instructions that are presented to computer as data that are temporarily stored in memory and then executed by processor .

Generally describing an example configuration of the computer the processor may be a variety of various processors including dual microprocessor and other multi processor architectures. A memory may include volatile memory and or non volatile memory. Non volatile memory may include for example ROM PROM and so on. Volatile memory may include for example RAM SRAM DRAM and so on.

A disk may be operably connected to the computer via for example an input output interface e.g. card device and an input output port . The disk may be for example a magnetic disk drive a solid state disk drive a floppy disk drive a tape drive a Zip drive a flash memory card a memory stick and so on. Furthermore the disk may be a CD ROM drive a CD R drive a CD RW drive a DVD ROM and so on. The memory can store a process and or a data for example. The disk and or the memory can store an operating system that controls and allocates resources of the computer .

The bus may be a single internal bus interconnect architecture and or other bus or mesh architectures. While a single bus is illustrated it is to be appreciated that the computer may communicate with various devices logics and peripherals using other busses e.g. PCIE 1394 USB Ethernet . The bus can be types including for example a memory bus a memory controller a peripheral bus an external bus a crossbar switch and or a local bus.

The computer may interact with input output devices via the i o interfaces and the input output ports . Input output devices may be for example a keyboard a microphone a pointing and selection device cameras video cards displays the disk the network devices and so on. The input output ports may include for example serial ports parallel ports and USB ports.

The computer can operate in a network environment and thus may be connected to the network devices via the i o interfaces and or the i o ports . Through the network devices the computer may interact with a network. Through the network the computer may be logically connected to remote computers. Networks with which the computer may interact include but are not limited to a LAN a WAN and other networks.

Data corresponds to one version of a multimedia object. Stream corresponds to a different version that can be assembled from data and edit information stored in the same object as data . Recall that changes e.g. attribute deletions attribute additions attribute modifications to the version represented by data can be mapped into binary operations on the binary stream . A set of deletes that remove consecutive bytes can be gathered together as deleting a stream segment e.g. remove segment from data . A set of insertions that add consecutive bytes can be gathered together as adding a stream segment e.g. add segment to stream .

Thus a new version of a multimedia object associated with can be provided in binary stream . The new version can be described as a set of stream descriptors that map the segments of stream to data . In the case of additions additional stream segments may be included. In the example illustrated in the version represented by stream may be described as 

Where M indicates that the source of the stream segment is data which is stored in the first BLOB attribute of a database object and E indicates that the source of the stream segment is the extension attribute of the database object. In one example extension attributes may be managed as fixed size strongly typed binary blocks having a header block to store pointers. The pointers may facilitate jumping directly to a specific version.

Thus illustrates two different versions of a binary stream associated with a multimedia content and how one is built from the other. The binary stream can be built using a stream oriented interface that starts with a previous version e.g. data and builds new version one stream segment at a time during an assembly . Insertion segments can be stored in the extension 2BLOB attribute of a database object so that they are co located with the persistently stored content . The XML edits attribute store data e.g. instructions associated with the copies deletes inserts and so on. The instructions may be stream based and thus may include segment numbers offsets and lengths. The second version e.g. stream can be assembled by starting at the first version e.g. data and applying the instructions in the XML edits attribute to cause a stream based assembly. While medical images have been described it is to be appreciated that this stream based assembly may be applied to other segmented streams not just multimedia content associated with medical images.

While example systems methods and so on have been illustrated by describing examples and while the examples have been described in considerable detail it is not the intention of the applicants to restrict or in any way limit the scope of the appended claims to such detail. It is of course not possible to describe every conceivable combination of components or methodologies for purposes of describing the systems methods and so on described herein. Therefore the invention is not limited to the specific details the representative apparatus and illustrative examples shown and described. Thus this application is intended to embrace alterations modifications and variations that fall within the scope of the appended claims.

To the extent that the term includes or including is employed in the detailed description or the claims it is intended to be inclusive in a manner similar to the term comprising as that term is interpreted when employed as a transitional word in a claim.

To the extent that the term or is employed in the detailed description or claims e.g. A or B it is intended to mean A or B or both . When the applicants intend to indicate only A or B but not both then the term only A or B but not both will be employed. Thus use of the term or herein is the inclusive and not the exclusive use. See Bryan A. Garner A Dictionary of Modern Legal Usage 624 2d. Ed. 1995 .

To the extent that the phrase one or more of A B and C is employed herein e.g. a data store configured to store one or more of A B and C it is intended to convey the set of possibilities A B C AB AC BC and or ABC e.g. the data store may store only A only B only C A B A C B C and or A B C . It is not intended to require one of A one of B and one of C. When the applicants intend to indicate at least one of A at least one of B and at least one of C then the phrasing at least one of A at least one of B and at least one of C will be employed.

