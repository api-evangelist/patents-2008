---

title: Server discovery, spawning collector threads to collect information from servers, and reporting information
abstract: Server discovery, spawning collector threads to collect information from servers, and reporting such information, is disclosed. A method of one embodiment determines a number of servers communicatively coupled to a network. For each server, a collector thread is spawned to collect information regarding the server by sending requests to the server and receiving responses from the server. The collector threads can be spawned by and run on a computing device other than the number of servers, such that no computer-executable code is installed on the servers for collecting the information. Upon completion of the collector thread for each server, the information regarding the server as collected is stored to a database by one or more writer threads. The information may include dynamic load-oriented and function-oriented information regarding the servers, as well as static configuration information, from which server utilization-oriented statistics may be distilled to identify candidate servers for server consolidation.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08214882&OS=08214882&RS=08214882
owner: International Business Machines Corporation
number: 08214882
owner_city: Armonk
owner_country: US
publication_date: 20080720
---
The present patent application is a continuation of the previously filed and pending patent application having the Ser. No. 10 847 534 filed on May 17 2004.

The present invention relates generally to server discovery collecting information from servers communicatively coupled to a network and reporting the server information for purposes such as server consolidation and relates more particularly to collecting such information by spawning collector threads.

A server computing device or a server is generally a computer system within a network that is shared by client computing devices or clients or otherwise shared by multiple users. Types of servers can include application servers file servers intranet servers e mail servers electronic commerce servers print servers proxy servers and web servers among other kinds of servers. Larger organizations may have tens hundreds or even thousands of different servers deployed on their networks worldwide.

Although organizations attempt to deploy servers in an organized fashion in many cases servers are deployed more haphazardly. As a result many organizations do not have a clear inventory of the number and types of servers that are functioning on their networks. Some servers may be performing duplicative functionality. Some servers may be operating at far less than maximum capacity in terms of either storage capacity processing capacity or both which is inefficient whereas other servers may be operating at near maximum capacity which can result in delays and system crashes. Many networks are heterogeneous environments in which there are servers of many different types from many different vendors resulting in different types of system management solutions that have to be employed to manage all the servers on the network.

As organizations are attempting to get a handle on and even decrease their information technology IT costs they are frequently attempting to obtain a clear picture of their server inventories. One motivation for doing so is to try to determine which servers are candidates for consolidation. For example servers that are performing duplicative functionality and servers that are operating at far less than their maximum capacity are candidates for consolidating their duties with other servers.

One manner by which server inventories can be obtained is to manually populate a report or list of all the servers within a given organization. However this approach is tedious expensive and can result in an inaccurate picture of the servers deployed on a network. For example the data of the report may be populated from different and potentially unreliable data sources. As a result the report may not be of much use in attempting to consolidate servers. Some servers may be overlooked and not be represented in the report whereas other servers may have erroneous information regarding their capabilities and or capacities added to the list.

Another manner by which server inventories can be obtained is to unleash agents or bots onto the network. The agents are small computer programs executed on the individual servers collecting information regarding the servers on which they are running and reporting back the information for consolidation into a report. However this approach can be harmful to the overall health of the network. Some servers may not easily accept the running of foreign computer programs and as a result may crash causing potentially mission critical functionality to fail. Other servers may be incompatible with the agents resulting in these servers not being tallied within the report. Overall unleashing agents onto the servers of a network generally at the very least slows down response time of the network which can frustrate users.

Furthermore unleashing agents onto hundreds or thousands of servers becomes impracticable especially when the network administrator does not have an accurate inventory of the servers connected to a network. Indeed if the server inventory is inaccurate then it becomes nearly impossible to install agents on all the servers since all of the servers are not known a priori. Additionally the agents usually have to be manually removed after they have collected the needed data which further adds to costs is another area in which errors can occur. For these and other reasons therefore there is a need for the present invention.

A method of one embodiment of the invention determines a number of servers communicatively coupled to a network. For each server a collector thread is spawned to collect information regarding the server by sending requests to the server and receiving responses from the server. Upon completion of the collector thread for each server the information regarding the server as collected is stored to a database.

A method of another embodiment of the invention assists selection of one or more servers from a number of servers for server consolidation and spawns collector threads on a computing device other than one of the servers to collect server consolidation related information from the servers. The server consolidation related information is distilled to determine server utilization oriented statistics regarding the servers. The server utilization oriented statistics regarding the servers are reported to inform selection of the one or more servers for server consolidation.

A computing device of an embodiment of the invention includes one or more processors one or more network communication mechanisms and a computer readable medium. The network communication mechanisms enable the computing device to communicatively couple to a network having a number of servers. The computer readable medium stores a computer program executable by the processors to collect dynamic load oriented and function oriented information and static configuration information regarding the servers without installing any computer executable code on the servers and without writing any information to the servers.

A computing device of another embodiment of the invention includes one or more communication mechanisms and a means. The network communication mechanisms enable the computing device to communicatively couple to a network having a number of servers. The means is for collecting information regarding the servers via collector threads to inform selection of one or more of the servers for server consolidation.

An article of manufacture of an embodiment of the invention includes a computer readable medium and means in the medium. The means is for collecting information regarding the servers without installing any computer executable code on the servers to inform selection of one or more of the servers for server consolidation.

A system of an embodiment of the invention includes a network a number of servers and a computing device. The servers are communicatively coupled to the network. The computing device is also communicatively coupled to the network. The computing device collects information regarding the servers without installing computer executable code on the servers to assist selection of one or more of the servers for server consolidation.

Embodiments of the invention provide for advantages over the prior art. User intervention within the process of collecting information regarding servers on a network is minimal to non existent. A computing device such as a laptop computer may be connected to the network and spawn collector threads for the servers that are executed by the computing device and that query the servers for the desired information. Because no computer executable code is desirably installed loaded or run on the servers for this purpose information collection results in negligible or no decrease in overall network performance as well as in negligible or no decrease in overall server performance. Furthermore because the information is not collected manually or from potentially unreliable data sources the information regarding the servers is highly accurate and does not miss or overlook any of the servers on the network. Indeed the only servers that potentially may be missed are those that are not currently running due to having recently been crashed and still rebooting having lost power and so on. The result is that more informed decisions regarding server consolidation can be made.

Still other advantages aspects and embodiments of the invention will become apparent by reading the detailed description that follows and by referring to the accompanying drawings.

In the following detailed description of exemplary embodiments of the invention reference is made to the accompanying drawings that form a part hereof and in which is shown by way of illustration specific exemplary embodiments in which the invention may be practiced. These embodiments are described in sufficient detail to enable those skilled in the art to practice the invention. Other embodiments may be utilized and logical mechanical and other changes may be made without departing from the spirit or scope of the present invention. The following detailed description is therefore not to be taken in a limiting sense and the scope of the present invention is defined only by the appended claims.

The devices by comparison are considered to be more indefinitely connected to the network . For instance the devices may be the devices that are owned or operated by an organization such as a corporation or other entity whereas the computing device may be a device that is brought into the organization by a different entity. The devices include servers A B . . . N which are collectively referred to as the servers . The servers are specifically the subjects of the functionality performed by the computing device when temporarily connected to the network . A server is generally a computer system within a network that is shared by client computing devices or clients or otherwise shared by multiple users. The devices may also include types of devices other than servers such as client computing devices printing devices scanning devices facsimile devices and so on.

The computing device includes a computer program installed and executable thereon. A computer program may be generally considered as a collection of computer executable instructions that instruct a computing device what functionality is to be performed. The computer program specifically collects information regarding the servers without installing any computer executable code on the servers and without writing any information to the servers . Such computer executable code may be considered a computer program such as an agent or a bot that is unleashed from one computing device such as the computing device to another computing device such as any of the servers . The information collected from the servers is in one embodiment intended to inform selection of one or more of the servers for server consolidation.

Server consolidation is the process of replacing two or more servers with a lesser number of servers such as one server. For example a first server and a second server may be replaced by just the first server by just the second server or by a third server where in the latter case both the first and the second servers are retired. Candidate servers for server consolidation may be performing duplicative functionality so that they can be consolidated into a lesser number of servers. Candidate servers for server consolidation may be performing at far less than maximum capacity in terms of either storage capacity processing capacity or both. Candidate servers for server consolidation may further be relatively outdated or somewhat obsolete.

The information collected by the computer program from the servers may include static configuration information regarding the servers as well as dynamic load oriented and function oriented information. For instance static configuration information includes information regarding a server that is relatively unchanging in nature over a period of time such that it can be considered static. Such information may include the model and manufacturer of the server the number and type of processors installed on the server the amount and type of memory installed on the server and the number type and size of hard disk drives or other storage mechanisms installed on the server. Static information can be collected once from each server since the information is not likely to change if collected again minutes hours days or even weeks later.

By comparison dynamic load oriented and function oriented information includes information regarding a server that changes over a period of time such that it can be considered dynamic. Dynamic information is collected a number of times from each server over a period of time such the information is likely to be at least somewhat different each time it is collected. Dynamic load oriented information refers to information regarding the current load of the server from a perspective of the processor memory and or hard disk drive and so on of the server. For instance at a given point in time 70 of the processing power of the server may be in use 65 of the memory of the server may be in use and 45 of the hard disk drive may be full. Dynamic function oriented information refers to information regarding the current functions being performed by the server. For example at a given point in time function oriented information may include the number type and identity of the computer programs processes and or threads currently running on a server.

The computer readable media may include volatile and or non volatile memory and may include semiconductor memory such as volatile random access memory RAM read only memory ROM or non volatile flash memory magnetic media such as hard disk drives tape drives and floppy drives and or optical media such as compact disc CD ROM and digital versatile disc DVD drives as well as other types of computer readable media. The terminology computer readable media is inclusive of the phrases and terms storage mechanism and storage too. The computer program can be stored on and or executed from the computer readable media . Furthermore the database and the report as are described in more detail later in the detailed description can be stored on the computer readable media .

The computer program is able to discover the devices of that are communicatively connected to the network and determine which of those devices are the servers of . In one embodiment of the invention discovery of the devices that are communicatively coupled to the network may be accomplished by concurrently using multiple threads that seek out different ranges of Internet Protocol IP addresses or other types of network addresses. For instance each thread may be responsible for determining whether a given range of IP addresses have devices attached thereto. The same threads may further be responsible for then determining whether those devices are servers by requesting information from the devices.

Alternatively a different thread or threads may be spawned to determine whether the devices that have been discovered are servers or a given thread may be employed to determine whether the devices are of a particular type of server such that there is a thread to seek out servers running each different kind of operating system being investigated. As new types of servers need to be discerned additional code for threads that seek out these types of servers may then be added without modifying the code for existing threads. The discovery process does not write information to the devices or servers nor does it install computer executable code such as computer programs on the devices or servers. The server discovery process is thus scalable and flexible.

For each of the servers the computer program spawns one of a number of collector threads A B . . . M which are collectively referred to as the collector threads . A thread is a computer executable stream process computer program or section of code that is part of a larger computer program which in this case is the computer program . The collector threads collect the server consolidation related or server consolidation needed information from the servers . Such information can include the dynamic load oriented and function oriented information as well as the static configuration oriented information that has been described. The collector threads may exist for a specified period of time so that the dynamic information in particular can be collected from the servers at different points in time during the specified period.

In at least some embodiments of the invention the collector threads are executed on the computing device such as by the processors of the computing device and are not installed and or executed on the servers themselves. For example the collector threads may send requests to and receive responses from the servers in order to obtain the desired information from the servers . More specific approaches for the collector threads to collect information from the servers as well as specific architecture implementations inclusive of the collector threads are described in subsequent sections of the detailed description.

When each of the collector threads has finished collecting information the computer program spawns one of the writer threads such that for multiple of the collector threads multiple of the writer threads can be spawned in one embodiment of the invention. In another embodiment of the invention a single writer thread may be spawned. The writer threads store the information collected by the collector threads to a database . The information stored at the database is then analyzed collated and or distilled by the computer program with or without user assistance or intervention into server utilization oriented statistics that can be provided in a report to inform or assist selection of one or more of the servers for server consolidation. For instance the server utilization oriented statistics may group servers by type manufacturer functionality being performed and so on and indicate within each group the average load or utilization of each server. From this information a network administrator or consultant may make an informed decision as to which of the servers can be profitably consolidated into new servers or into existing servers.

The method determines the number and type of devices that are communicatively coupled to the network which may be phrased as discovery of the devices on the network . From this information the method determines which of the devices are the servers that are the subject of the server consolidation analysis being performed . For example in an Internet Protocol IP type network each different IP address of each subnet of the network may be queried. In response to such queries the devices return information indicative of their type and other identifying information. Where the information returned from one of the devices indicates that the device is a server the method concludes that the device is one of the servers . Initial information retrieved in can further identify the operating system OS and or server software running on the server such as versions of the Microsoft Windows operating system as well as version of the Linux operating system versions of the UNIX operating system and so on.

The user may optionally be permitted to select which of the servers identified are to have collector threads spawned for them . Alternatively all of the servers may be included by default in the server consolidation analysis. User selection of just some of the servers may speed analysis where for instance an organization is attempting to just consolidate certain servers on certain subnets servers running a particular type of OS and so on. Such user selection can be provided via a graphical user interface GUI or in another manner.

For each of the selected servers then one of the collector threads is spawned to collect information regarding the server . The collector threads are spawned by the computer program and are executed on the computing device . That is no computer executable code such as agents or bots is installed on any of the servers . The collector threads first send requests to the servers to determine static configuration information regarding them and or to determine dynamic load oriented and function oriented information regarding them and receive responses from the servers providing this information . The spawning process in and the request sending and response receiving by the collect threads in may be repeated as needed so that the dynamic information which can change over time is gathered periodically over a length of time. For example the method per user instruction via a graphical user interface GUI may use the operating system s scheduling mechanism to execute instances of the spawning process in at specified intervals so that the collector threads are appropriately spawned to periodically collect the desired information in . The static configuration information as well as the dynamic load oriented and function oriented information can be that information which has been described in the previous section of the detailed description.

The requests that are sent in and are sent over the network from the computing device to the servers where both the computing device and the servers are communicatively connected to the network . The requests may be sent in IP defined packets of data and may address predetermined application programming interfaces API s of the servers which are callable to provide the information needed for the server consolidation analysis. For example the predetermined API s may be API s provided by the Microsoft Windows operating system such as networking API s registry API s and so on. Requests may be sent using the Simple Network Management Protocol SNMP and for the UNIX operating system requests may be sent using remote command execution via the telnet remote shell or secure shell protocol. Such requests travel over the network in accordance with the lower level Transmission Control Protocol Internet Protocol TCP IP and or the lower level Unified Datagram Protocol Internet Protocol UDP IP . Likewise the responses may be sent in IP defined packets of data in return and which include the information needed for the server consolidation analysis.

Once a given set of the collector threads has finished its collection functionality the computer program of the computing device spawns one of the writer threads to store the information that has been collected within the database . Different sets of the collector threads may finish at different points in time based on for instance whether different collector threads have been specified to collect information for different lengths of time whether different collector threads take longer to finish collecting all the desired information and so on. For the static configuration information for a given one of the servers there may be a single record or entry within the database detailing this information. By comparison for the dynamic information for a given one of the servers there may be a number of records or entries within the database each of which provides a snapshot of the functionality and or load of the server at a particular point in time. Prior to storing the dynamic or static information within the database the information may be stored within a single record or data structure per server within memory such as dynamic random access memory DRAM . Having such information stored within a single record or data structure per server within memory enhances performance and contributes to the scalability of the data collection process for a large number of servers.

The information collected by the collector threads and stored in the database is then collated or distilled into server utilization oriented statistics regarding the servers upon completion of all the collector threads . Collation or distillation may include grouping the servers by common functionality common type common manufacturer and so on as well as by different ranges of utilization. The server utilization oriented statistics are particularly determined based on the dynamic information culled from the servers . For example the overall processor hard disk drive and or memory utilization of each of the servers may be determined and or the percentage of time that each of the servers runs or executes given application programs or otherwise performs given functionalities may be determined. Server utilization oriented statistics may further be divided into days of the week particular times each day weekdays versus weekends and so on so that network administrators and consultants can obtain an accurate and informed overall picture of the servers and their utilization.

The server utilization oriented statistics are ultimately reported within the report . Such reporting may be in the form of a spreadsheet so that the statistics can be analyzed in different ways as permitted by the spreadsheet program depending on user needs. Additionally or alternatively the report may realize the form of a paper or otherwise unchanging document which may be provided to present an overall summary of the utilization of the servers . The computer program of the computing device may thus by virtue of providing the report inform or assist such identification by users .

Furthermore the user can in one embodiment of the invention specify the types of servers and or application programs to discover. For example a user may choose to discover only servers running versions of the Microsoft Windows operating system only servers running versions of the Novell NetWare operating system and or only servers running versions of the IBM AIX operating system. As another example a user may in addition or alternatively choose only to discover servers on which specific application programs are running such as versions of the Microsoft SQL database server program versions of the IBM DB2 database server program and or versions of the Microsoft Exchange mail server program.

The second phase is the automated inventory server discovery phase . Within the phase the network is scanned to identify the servers that are connected to the network based on the scope specification provided by the user in the earlier phase . Non servers are excluded when discovered such as those of the devices that are not any of the servers . The information collected in the phase may include the server names and their associated IP addresses in one embodiment of the invention. Furthermore in one embodiment of the invention the processes running on each of the servers may be collected in the phase to determine the non system processes consuming the most processing resources on the server whereas in another embodiment such processes are collected in phase as described later in the detailed description. Such a determination can aid user identification of which server has been earmarked to perform which functionality.

The third phase is the user refinement of data collection phase . Within the phase the user is permitted to select which of the servers that have been discovered in the phase will be subjected to collector threads. As a result the server names and their associated IP addresses as well as other information that may have been gleaned in the earlier phase may assist the user in selecting a subset of the servers . Furthermore the user may be permitted to select the type of information that is to be collected from the servers by the collector threads. For instance a user may determine that only static configuration information is needed or may determine that dynamic information is only needed for certain of the servers and or for certain times during which those servers are run and so on.

The fourth phase is the automated data collection phase . Within the phase information is collected from those of the servers selected in the phase . The information is collected without installing any computer executable code on the servers as has been described such as by using the collector threads spawned by the computer program of the computing device . The one or more writer threads may further be employed to write the information collected to the database as has also been described. The fifth phase is the data reporting phase within which a spreadsheet or another type of the report is provided that reports the information collected in the phase . Furthermore as part of the data reporting phase the sixth phase which is the data distillation phase allows custom server utilization oriented statistics to be distilled from the information collected in the phase . For instance any summarizing averaging and or processing that is needed or desired of the information may be accomplished by querying the database using a spreadsheet program and so on. As such the user is provided with the flexibility of being able to distill the information that has been stored within the database as desired.

The main module accesses the discovery functions to discover all the devices on the network of including the servers . The discovery functions therefore are the programming interfaces by which computer executable code for determining all the devices on the network is accessed. The main module may further collect information from a given server by accessing the collection functions . The collection functions therefore are the programming interfaces by which computer executable code for collecting the information for a given type kind or platform of the servers is accessed. It is noted that the collection functions can include more than one set of such functions where each set of the collection functions is responsible for collecting information for a different type kind and or platform of the servers . Initial setup of the discovery and collection processes may also be accomplished through the main module such as by the main module providing a graphical user interface GUI via which users communicate with the main module .

The collection module by comparison is the part of the computer program that is able to spawn or instantiate the collector threads of for the servers to collect the information regarding the servers as has been described. As such the collection module also accesses the collection functions . The collection module further spawns or instantiates the one or more writer threads upon the completion of the collector threads in order to write the information collected to the database . The main module then upon user request reads the information from the database to distill or collate it into server utilization oriented statistics as has been described. Each of the main module and the collection module may be one or more sections of computer executable code computer software objects sub modules routines and so on.

The main module of then discovers the servers communicatively connected to the network such as by accessing the discovery functions . Next the main module can interact with the user to determine for which of the servers information is to be collected as well as the type of information to be collected for each of these servers and how often and for what duration of time the information is to be collected. Thereafter the collection module spawns the collector threads and waits for collection completion events from each of the collector threads . Each of the collector threads collects the desired static and or dynamic information from one of the servers by for instance accessing the collection functions and queues or stores this information in memory or another computer readable medium .

Next a collector thread signals a collection completion event to the collection module . In response to detecting or receiving the collection completion event the collection module spawns one of the writer threads to store or write the information collected to the database . The main module may then distill or collate such information into server utilization oriented statistics and report these statistics for server consolidation candidate identification purposes. For such purposes the main module may interact with the user further to determine the type of data reporting that should occur such as the file name of the spreadsheet and so on.

The data collection approach that has been described for collecting information for server consolidation provides embodiments of the invention with a number of advantages. In particular the approach provides for scalability customization and extensibility. In terms of scalability the approach is scalable to large numbers of servers for at least three reasons. First a collect thread is spawned for each target server and that thread alone performs the entire data collection for the server. If a network or any other type of delay is encountered for a particular server the delay does not become a bottleneck for data collection of the other servers. Second when the number of servers is in the hundreds thousands or more data collection can be performed in batches of servers by having multiple instances of the data collection process run simultaneously. Third in one embodiment of the invention a single writer thread is employed that performs the data storage function so that writing to the database itself does not become a bottleneck or a synchronization problem. Each collector thread may have a designated address within shared memory and writes its data only to that location. The writer thread may then receive this address from the main thread and use it to access the data and write it to the database.

In terms of customization the data collection approach that has been described is customizable for at least two reasons. First the user may input parameters that govern the data collection process. For example the user can specify from which target servers information is to be collected the type and kind of data to be collected from these servers as well as the location at which the data collected is to be stored. In one embodiment of the invention the graphical user interface GUI may include a wizard like interface so that the user can easily accomplish parameter entry. Second the data collection process exists as an active process only for the duration of a data collection run in one embodiment. Therefore an external processor scheduler such as that provided by the underlying operating system may be employed to schedule periodic data collection runs which is useful for acquiring dynamic information regarding the servers. The schedule at which the data collection process is run can be specified by the user via the user interface.

In terms of extensibility the data collection approach that has been described is extensible too. For instance the operation of the data collection process is independent of the operating system run on any of the target servers. Depending on the operating system of a given server a different kind of collector thread is spawned. The collector thread utilizes application programming interfaces API s and or protocols that are specific to the server s operating system to perform the collection. When a new target server operating system needs to be added only code for the new type of collector thread has to be added. The core of the data collection process remains unchanged.

Embodiments of the invention have been described primarily in relation to obtaining information from servers for the purpose of server consolidation. However in other embodiments of the invention the information collected from the servers may be of a different type and or for a different purpose. For instance the information collected may be for autonomic computing purposes periodic network inventory reports software licensing inventory and audits and so on. That is the data collection process that has been described may be used in conjunction with other kinds of information to gather from servers on a network for purposes other than server consolidation.

It is noted that although specific embodiments have been illustrated and described herein it will be appreciated by those of ordinary skill in the art that any arrangement calculated to achieve the same purpose may be substituted for the specific embodiments shown. This application is intended to cover any adaptations or variations of embodiments of the present invention. It is manifestly intended that this invention be limited only by the claims and equivalents thereof.

