---

title: Systems and methods for parallel display list rasterization
abstract: Methods for performing rasterization on a display list are presented, wherein the display list can include bands associated with a virtual page object belonging to a first class of virtual page objects in the display list. In some embodiments, the method comprises: parsing the virtual page object to identify at least one geometric band; identifying at least one available rasterization process to rasterize the at least one geometric band; creating a second virtual page object including the geometric band, wherein the second virtual page object belongs to a second class of virtual page objects derived from the first class of virtual page objects; sending the second virtual page object including the geometric band to an available rasterization process; and rasterizing the one geometric band using the available rasterization process, wherein the rasterization process operates on the geometric band in the second virtual page object.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08228555&OS=08228555&RS=08228555
owner: Konica Minolta Laboratory U.S.A., Inc.
number: 08228555
owner_city: San Mateo
owner_country: US
publication_date: 20080331
---
The present invention relates to the field of printing and in particular to systems and methods to parallelize rasterization of display lists.

Document processing software allows users to view edit process and store documents conveniently. Pages in a document may be displayed on screen exactly as they would appear in print. However before the document can be printed pages in the document are often described in a page description language PDL . As used in this document PDL s may include PostScript Adobe PDF HP PCL Microsoft XPS and variants thereof as well as any other languages used to describe pages in a document. A PDL description of a document provides a high level description of each page in a document. This PDL description is often translated to a series of lower level printer specific commands when the document is being printed. The process of translation from a PDL description of a document to a lower level description that may be used to place marks on a print medium is termed rasterization.

The translation process from PDL to lower level printer specific commands may be complex and depend on the features and capabilities offered by a particular printer. Flexible and portable general purpose schemes to translate PDL descriptions of documents to printer specific commands may allow for the optimization of printer performance based on available memory desired print speed and other cost and performance criteria. By parallelizing one or more print processing functions increased speed and performance may be extracted from printing systems with only a minimal increase in cost. Because rasterization is a significant portion of the tasks involved in print processing the parallelization of one of more steps performed during the rasterization process will directly help in increasing overall printer speed and performance. Thus there is a need for a scheme for the parallel rasterization of display lists that builds on prior performance optimizations.

Consistent with disclosed embodiments systems and methods for performing rasterization on a display list are presented wherein the display list can include bands associated with a virtual page object belonging to a first class of virtual page objects in the display list. In some embodiments the method comprises parsing the virtual page object to identify at least one geometric band identifying at least one available rasterization process to rasterize the at least one geometric band creating a second virtual page object including the geometric band wherein the second virtual page object belongs to a second class of virtual page objects derived from the first class of virtual page objects sending the second virtual page object including the geometric band to an available rasterization process and rasterizing the one geometric band using the available rasterization process wherein the rasterization process operates on the geometric band in the second virtual page object.

Embodiments of the present invention also relate to methods created stored accessed or modified by processors using computer readable media or computer readable memory.

In accordance with embodiments reflecting various features of the present invention systems and methods for the automatic storing manipulating and processing of a second or intermediate form of printable data generated from a first printable data are presented. In some embodiments the first printable data may take the form of a PDL description of a document and the intermediate printable data may take the form of a display list of objects generated from the PDL description.

As shown in exemplary system includes computers including a computing device and a server . Further computing device and server may communicate over a connection which may pass through network which in one case could be the Internet. Computing device may be a computer workstation desktop computer laptop computer or any other computing device capable of being used in a networked environment. Server may be a platform capable of connecting to computing device and other devices not shown . Computing device and server may be capable of executing software not shown that allows the printing of documents using printers .

Exemplary printer includes devices that produce physical documents from electronic data including but not limited to laser printers ink jet printers LED printers plotters facsimile machines and digital copiers. In some embodiments printer may also be capable of directly printing documents received from computing device or server over connection . In some embodiments such an arrangement may allow for the direct printing of documents with or without additional processing by computing device or server . In some embodiments documents may contain one or more of text graphics and images. In some embodiments printer may receive PDL descriptions of documents for printing. Note too that document print processing can be distributed. Thus computing device server and or the printer may perform portions of document print processing such as half toning color matching and or other manipulation processes before a document is physically printed by printer .

Computing device also contains removable media drive . Removable media drive may include for example 3.5 inch floppy drives CD ROM drives DVD ROM drives CD RW or DVD RW drives USB flash drives and or any other removable media drives consistent with embodiments of the present invention. In some embodiments portions of the software application may reside on removable media and be read and executed by computing device using removable media drive .

Connection couples computing device server and printer and may be implemented as a wired or wireless connection using conventional communication protocols and or data port interfaces. In general connections can be any communication channel that allows transmission of data between the devices. In one embodiment for example the devices may be provided with conventional data ports such as parallel ports serial ports Ethernet USB SCSI FIREWIRE and or coaxial cable ports for transmission of data through the appropriate connection. In some embodiments connection may be a Digital Subscriber Line DSL an Asymmetric Digital Subscriber Line ADSL or a cable connection. The communication links could be wireless links or wired links or any combination consistent with embodiments of the present invention that allows communication between the various devices.

Network could include a Local Area Network LAN a Wide Area Network WAN or the Internet. In some embodiments information sent over network may be encrypted to ensure the security of the data being transmitted. Printer may be connected to network through connection . In some embodiments printer may also be connected directly to computing device and or server . System may also include other peripheral devices not shown according to some embodiments of the present invention. A computer software application consistent with the present invention may be deployed on any of the exemplary computers as shown in . For example computing device could execute software that may be downloaded directly from server . Portions of the application may also be executed by printer in accordance with some embodiments of the present invention.

In some embodiments CPU may be a general purpose processor a special purpose processor or an embedded processor. CPU can exchange data including control information and instructions with memory and or firmware . Memory may be any type of Dynamic Random Access Memory DRAM such as but not limited to SDRAM or RDRAM. Firmware may hold instructions and data including but not limited to a boot up sequence pre defined routines and other code. In some embodiments code and data in firmware may be copied to memory prior to being acted upon by CPU . Routines in firmware may include code to translate page descriptions received from computing device to display lists and image bands. In some embodiments firmware may include rasterization routines to convert display commands in a display list to an appropriate rasterized bit map and store the bit map in memory . Firmware may also include compression routines and memory management routines. In some embodiments data and instructions in firmware may be upgradeable.

In some embodiments CPU may act upon instructions and data and provide control and data to ASICs FPGAs and print engine to generate printed documents. In some embodiments ASICs FPGAs may also provide control and data to print engine . FPGAs ASICs may also implement one or more of translation compression and rasterization algorithms. In some embodiments computing device can transform document data into a first printable data. Then the first printable data can be sent to printer for transformation into intermediate printable data. Printer may transform intermediate printable data into a final form of printable data and print according to this final form. In some embodiments the first printable data may correspond to a PDL description of a document. In some embodiments the translation process from a PDL description of a document to the final printable data comprising of a series of lower level printer specific commands may include the generation intermediate printable data comprising of display lists of objects.

In some embodiments display lists may hold one or more of text graphics and image data objects. In some embodiments objects in display lists may correspond to similar objects in a user document. In some embodiments display lists may aid in the generation of intermediate printable data. In some embodiments display lists may be stored in memory or secondary storage . Exemplary secondary storage may be an internal or external hard disk memory stick or any other memory storage device capable of being used system . In some embodiments the display list may reside one or more of printer computing device and server . Memory to store display lists may be a dedicated memory or form part of general purpose memory or some combination thereof according to some embodiments of the present invention. In some embodiments memory may be dynamically allocated to hold display lists as needed. In some embodiments memory allocated to store display lists may be dynamically released after processing.

In some embodiments the display list may be dynamically reconfigurable and is termed a Reconfigurable Display List RDL . In one embodiment an RDL may be implemented using a data structure that allows certain display list objects to be stored in a manner that allows their manipulation dynamically. For example image objects may be compressed in place to increase the amount of available memory and decompressed when referenced and or used. In some embodiments an RDL may also permit RDL objects to be stored in memory and or secondary storage by holding pointers offsets or addresses to the actual locations of RDL objects which can then be retrieved when referenced and or used. In general the RDL allows display list objects to be flexibly stored and manipulated based on system constraints and parameters.

In one embodiment the translation of a PDL description of a document into a display list and or RDL representation may be performed by language server using routines in RDL library . For example language server may take PDL language primitives and transform these into data and graphical objects and add these to the reconfigurable display list using the capability provided by functions in RDL library . Access to functions and routines in RDL library may be provided through an Application Programming Interface API . In some embodiments the display list may be stored and manipulated in a dynamically allocated memory pool such as exemplary memory pool which may be part of memory .

In some embodiments creation of the RDL may be an intermediate step in the processing of data prior to actual printing. The RDL may be parsed before conversion into a subsequent form. In some embodiments the subsequent form may be a final representation and the conversion process may be referred to as rasterizing the data. In some embodiments rasterization may be performed by raster server . Upon rasterization the rasterized data may be stored in frame buffer which may be part of memory . In some embodiments the rasterized data may take the form of a bitmap that specifies the marks to be made on a printed page.

In one embodiment routines in RDL library may manage some subset of available memory in memory as memory pool and allocate memory from memory pool to requesting processes. When memory is no longer needed by the requesting processes the memory may be de allocated and returned to memory pool where it can be made available to other processes. In some embodiments routines in RDL library may also include various other memory management routines including routines to free memory routines to recover memory and swapping routines that can swap memory to secondary storage . In some embodiments frame buffer may also be a part of memory pool . In one embodiment frame buffer may be allocated an initial contiguous block of memory and subsequent memory blocks may be allocated to frame buffer when requested. Memory blocks may also be allocated for other non frame buffer purposes from memory pool . In some embodiments distinct memory blocks assigned to the frame buffer or to other processes may occupy non contiguous memory locations in memory .

Print engine may process the rasterized data in frame buffer and form a printable image of the page on a print medium such as paper. In some embodiments raster server and engine server may also use routines in RDL library to perform their functions. In some embodiments engine server may provide control information instructions and data to print engine . In some embodiments engine server may free memory used by display list objects after processing for return to memory pool . In some embodiments portions of RDL memory pool and or frame buffer may reside in memory or secondary storage . In some embodiments routines for language server raster server and engine server may be provided in firmware or may be implemented using ASICs FPGAs .

In some embodiments a virtual page may further comprise one or more bands which are also called geometric bands or regular bands. In some embodiments the bands may be horizontal bands or sections each holding objects present within that band of the logical page. Accordingly vpage data structure may include offsets to or reference a linked list comprising of instances of exemplary individual band data structures also called geometric band data structures . Instantiated band data structures are referred to as bands or geometric bands . In some embodiments vpage data structure may further comprise a linked list of instances of exemplary individual band data structures . In some embodiments each vpage data structure may include information about any bands that it references. A band or geometric band relates to a geometrically defined region within the geometrical bounds of a virtual page. Typically this geometric region is rectangular in nature and may be as large as the vpage boundaries or a sub region of the vpage. In some embodiments the printable region of a vpage includes all geometric bands contained within that vpage.

In some embodiments when data or graphical objects generated by language server span geometric band boundaries the objects may be stored in a separate referenced band and an offset to the location of the object in the referenced band is stored at an appropriate location in that specific geometric band. In some embodiments objects that are repeatedly used in a virtual page or a document may also be stored in a referenced band. The use of referenced bands to store repeatedly used objects optimizes memory utilization and allows a repeatedly used object to be placed in a referenced band once but used multiple times across bands. The referenced bands can include objects which are referred to by geometrical bands. So for example a single object in a single referenced band may be referred to multiple times by multiple geometrical bands.

The term band data is used to refer to object data within block that is linked to a node data structure that is further linked to band data structure . In some embodiments individual band data structure may contain data objects pertaining to that entire band. In some embodiments each band data structure may include offsets to or reference a linked list of instances of individual node data structures . Instantiated node data structures are referred to as nodes. In some embodiments each band data structure may include information about any nodes that it references.

In some embodiments individual node data structure may include offsets to or reference any associated zero or more blocks of memory blocks . In some embodiments block may be used to store intermediate graphical objects and other data generated from a PDL description. In some embodiments language server may generate intermediate graphical objects and other data objects from a PDL description for use by raster server . In some embodiments each node data structure may include information about any blocks that it references. In some embodiments blocks may be a uniform fixed size. In this specification vpage data structure band data structure and node data structure are also referred to as control data structures. In some embodiments data stored in data structure may also be accessed and edited.

In some embodiments when a job is received by printer language server may invoke routines from RDL library leading to the instantiations of vpage data structure and an appropriate number of band data structures . In some embodiments the system may maintain a list of free vpages bands and nodes in a vpage control data field a band control data field and a node control data field respectively. Further a linked list of such control objects may be created maintained and updated by one or more routines RDL library and the routines may be invoked at various points during the processing of a RDL. In some embodiments an instantiation of another vpage data structure may occur for new virtual pages. In some embodiments an instantiation of another band data structure may occur for new bands in a virtual page.

In some embodiments objects generated by language server may be used to build a vpage. A vpage may be rasterized by raster server . In some embodiments a vpage may be rasterized band by band until all bands have been processed. In some embodiments a band may be rasterized object by object until all objects have been provided to the rasterizer for that band. In some embodiments the rasterization process may be parallelized. For example multiple processes may operate in parallel to rasterize multiple bands. In some embodiments the parallel processes performing the rasterization may be slave processes operating under the control of at least one master process which can provide control and synchronization information. For example the master process can control the creation and deletion of flexible display. In some embodiments the order in which bands may be rasterized may not be sequential. In a further embodiment multiple finished vpages may exist in the system at any given time. These may include vpages whose rasterization process has not completed. In some embodiments vpages need not be rasterized in the order of their construction. After rasterization is complete engine server may invoke routines in RDL library to delete the vpage from memory and release memory used by that vpage to memory pool .

In one embodiment multiple rasterization processes can rasterize different parts of the display list for a single virtual page vpage simultaneously. For example in a master slave environment each parallel slave process can be assigned a geometrical band to rasterize. In some embodiments the geometric bands assigned to each slave process may be distinct. In some embodiments slave processes termed local slaves may have access to the same memory areas data structures and data as the master. In some embodiments slave processes termed remote slaves may have access to their separate memory areas. For example a local slave may have access to an original RDL in memory . Accordingly routines in RDL library can permit shared access by local slave processes to RDL objects simultaneously. As another example a remote slave may copy relevant portions of RDL for rasterization to its allocated memory locations and perform operations of the copy. For remote slaves a copy of display list objects and data can be transmitted to the slave processes. In some embodiments the allocation of bands to remote slaves for processing may be based in part on the quantity of data and code transmitted to the remote slave.

As shown in a first class may include Vpage Node Band and MasterControl classes. These are referred to as control classes. Subclasses VPageHW and VPageLW can be derived from VPage . Similarly BandHW can be derived from Band . In one embodiment the class structure may parallel hierarchical data structure shown in . For example a band object which is an instance of Band class may be associated with a list of node objects which are instances of Node class . Further each node object may refer to a block.

As shown in in one embodiment the node object can refer to a single block of memory using an array of Node BlockHandle objects. In some embodiments blocks referenced by nodes can hold data for the display list. In some embodiments fixed size blocks may be used. In the embodiment shown in each BlockHandle object can hold data including a pointer to a block a field indicating the number of users of the pointer and a reading location indicator which points to a current location within the block that is being read. In one embodiment one BlockHandle object may be instantiated per slave process. Slave processes may therefore be capable of accessing a node s block concurrently using their individual BlockHandle objects. In addition one BlockHandle object may be instantiated and shared by all non slave processes. When the GetSmartindex method in MasterControl is invoked GetSmartindex returns a shared index for non slave processes or a unique index for each slave process. The unique index which is unique to a slave may be used to manipulate a slave s individual BlockHandle object.

In some embodiments a flexible display list may be structured to minimize the quantum of code and or data to be transmitted to remote slaves. In one embodiment classes through which constitute portions of the display list code can consist of two variants shown as heavy weight HW and light weight LW variants. These variants can include for example heavyweight variant VPageHW and lightweight variant VPageLW and heavyweight variant BandHW and lightweight variant Band . Heavyweight and lightweight variants may also exist for other classes not shown . Although two variants have been shown for simplicity in general the number of class or sub class variants may vary and depend on system design parameters. For example because a remote slave can operate on a copy of display list objects and data using its own copy of the display list code it is beneficial to decrease the volume of copies of code objects and data to be utilized by a remote slave. Accordingly in some embodiments an additional class may be created depending on whether a slave is a local slave or a remote slave. As another example a local slave may include synchronization methods to allow multiple slave processes to access shared display list objects and data simultaneously whereas remote slaves which operate on their own copies may not be provided with such methods.

As shown in objects of either VPageHW or VPage LW class include OpenForRead and CloseForRead methods. However VPageHW also includes methods such as OpenForWrite AddObject AddRefObject and Serialize that are not present in or available to objects of class VPageLW . In some embodiments heavyweight class variants can be used for non slave processes while LW variants can be used for slave processes. In some embodiments a lightweight vpage may include referenced band objects in addition to any geometrical band object. In some embodiments HW variants can be designed to provide greater functionality than their LW counterparts. Accordingly LW variants can be smaller and contain code and data used by slave processes to perform rasterization without some of the additional functionality available to HW class variants. For example HW variants may include methods to allow for the creation and deletion of display lists. In some embodiments methods for the creation and deletion of display lists may not be made available to slave processes.

In step object VPageLW can be sent to a slave process. In some embodiments a reference or a pointer to object VPageLW can be sent to a slave process. For example a rasterization master process can send VPageLW object to a slave process. In step object VPageLW can be opened for reading followed by the invocation of rasterization routine . In step the algorithm can advance to the next geometric band in object VPageHW and iterate through steps to if there are bands that have not been rasterized. In some embodiments a master rasterization process may iterate through steps to while step and the invocation of the rasterization routine on bands in VPageLW can be performed by a slave process. If all bands have been rasterized the algorithm can terminate in step .

If a check of the current node determines that all objects in that node have been rasterized then the current node s block pointer is freed in step . The band can then be examined by exemplary rasterization routine to determine if it contains additional nodes in step . If there are additional nodes the routine can advance to the next node in step . The algorithm iterates through steps for each node until objects in all nodes for the band being rasterized have been processed. If all nodes have been processed then rasterization is complete and the algorithm can terminate in step .

Other embodiments of the present invention will be apparent to those skilled in the art from consideration of the specification and practice of one or more embodiments of the invention disclosed herein. It is intended that the specification and examples be considered as exemplary only with a true scope and spirit of the invention being indicated by the following claims.

