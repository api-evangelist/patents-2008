---

title: Federating policies from multiple policy providers
abstract: One aspect of the present invention can include a system, a method, a computer program product and an apparatus for federating policies from multiple policy providers. The aspect can identify a set of distinct policy providers, each maintaining at least one policy related to a service or a resource. A federated policy exchange service can be established that has a policy provider plug-in for each of the distinct policy providers. The federated policy exchange service can receive requests for policies from a set of policy requesters. Each request can include a resource_id or a service_id used to uniquely identify the service or resource. The federated policy exchange service can dynamically connect to a set of the policy providers to determine policies applicable to each request. For each request, results from the policy providers can be received and processed to generate a response. The federated policy exchange service can provide the response to each policy requestor responsive in response to each response.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08683545&OS=08683545&RS=08683545
owner: International Business Machines Corporation
number: 08683545
owner_city: Armonk
owner_country: US
publication_date: 20080815
---
The present invention relates to Web Service policies and more particularly to federating policies from multiple policy providers.

Web services are self contained pieces of programmatic logic that communicate externally through XML based messaging typically in conformance with a SOAP protocol. Web services are often defined through languages such as WSDL and are registered within one or more registries such as a Universal Description Discovery and Integration UDDI registry. Every Web service is associated with one or more policies which can be defined as a set of assertions rules requirements obligations that define properties of a contract of a Web service based communication. Web service policies define an interface for the Web services typically defined using WSDL in a UDDI directory define a format of a message payloads of the Web service typically defined using WSDL in a UDDI directory and or define other behavior requirements of the Web service. Some of the behavior requirements policies of Web service relate to ensuring an established Quality of Service QoS others relate to monitoring the Web service performance others to security considerations for the Web service still others relate to defining and enforcing business goals and or logic.

Representational state transfer REST is a style of software architecture for distributed hypermedia systems such as the World Wide Web. The terms representational state transfer and REST were introduced in 2000 in the doctoral dissertation of Roy Fielding one of the principal authors of the Hypertext Transfer Protocol HTTP specification. The terms have since come into widespread use in the networking community. REST strictly refers to a collection of network architecture principles which outline how resources are defined and addressed. The term is often used in a looser sense to describe any simple interface which transmits domain specific data over HTTP without an additional messaging layer such as SOAP or session tracking via HTTP cookies.

Policy enforcement access points exist in a runtime environment that are configured to support Web services. These enforcement or access points are nodes of a runtime environment which are configured to ascertain specifics of one or more Web service policies to apply suitable programmatic logic to enforce the policy and or to enact a programmatic action based upon one or more defined policies.

A challenge with Web service policies is that there are often many different policy providing domains security routing monitoring etc. and not all of these domains are centralized. For example access control policies can be contained in an access manager such as IBM TIVOLI ACCESS MANAGER. Routing policies can be defined within a registry repository such as WEBSPHERE SERVICE REGISTRY AND REPOSITORY WRSS . Monitoring policies can be contained in an application management component such as IBM TIVOLI COMPOSITE APPLICATION MANAGEMENT ITCAM . For an enforcement point and or access point to be aware of all policies to be applied to a Web service multiple policy providers must be queried.

Numerous efforts for establishing metadata repositories e.g. WSRR TIVOLI CHANGE AND CONFIGURATION MANAGEMENT DATABASE CCMDB TIVOLI FEDERATED IDENTITY MANAGER TFIM etc. have been attempted and are in existence. While these efforts have each yielded beneficial results in many ways none have resolved problems with effectively federating policies. One reason for this is that previous efforts for federating policies assume that there is a single point location registry where all policies are registered. Each currently existing policy provider WSRR CCMDB TFIM etc. however addresses numerous concerns relating to Web services in different ways which to this point has prevented policies from being centrally registered. These specific concerns are important for the various components to perform their individual roles i.e. security for TAM monitoring for ITCAM etc. .

It should be noted that the policy providers detailed above are all components of a common architecture or solution for Web services e.g. are IBM centric components . Other architectures exist each having an architecture specific set of policy providers. Additionally policies are currently defined by policy providers using numerous largely incompatible languages some having an approach of defining policies as instances e.g. Web Services Policy Language others having an approach of expressing policies as classes OWL DL . In light of the above no unification of Web service policies into a single master repository is expected in the near future if ever. At the same time no known solution exists for unifying or federating policy data from multiple policy providers.

One aspect of the present invention can include a system a method a computer program product and an apparatus for federating policies from multiple policy providers. The aspect can identify a set of distinct policy providers each maintaining at least one policy related a Web service or a resource. A federated policy exchange service can be established that has a policy provider plug in for each of the distinct policy providers. The federated policy exchange service can receive requests for policies from a set of policy requesters. Each request can include a resource id or a service id used to uniquely identify the service or resource. The federated policy exchange service can dynamically connect to a set of the policy providers to determine policies applicable to each request. For each request results from the policy providers can be received and processed to generate a response. The federated policy exchange service can provide the response to each policy requestor responsive in response to each response.

Another aspect of the present invention can include a system for federating Web service policies. The system can include a set of policy providers a federated policy server and a set of policy requesters. The set of policy providers can each manage at least one policy for a Web service. The federated policy server can include a set of provider interface modules one for interfacing with each of the policy providers. The federated policy server can accept policy requests can lookup matching policies for the requests within policy stores maintained by the plurality of policy providers and can provide responses to the policy requests based upon lookup results. The policy requesters can utilize the federated policy server for policies related to at least one Web service.

The present invention provides a solution where a federated policy server federates policy data from multiple policy providers as shown in . The server can be connected to one or more resource servers and one or more access enforcement points via a network in runtime environment . Access enforcement points and resource servers can query the federated policy server and receive all policies applicable to a given service resource . This negates a need to individually query multiple policy providers and solves issues associated with policy synchronization and inconsistent policy enforcement.

The federation policy server can federate policies as shown in . That is the federation policy server can execute a federated policy exchange service which provides a policy provider lookup service based upon a unique service resource identifier. The federated policy exchange service can include multiple policy provider plug ins . Each plug in can permit the federated policy change service to exchanged information with a plug in specific provider services which can be repository instances. Each of the provider services can be linked to an underlying storage repository within which policy information is stored. The plug in can include conversion reformatting transcending instructions that permit the federated policy exchange service to handle the policies in a unified manner.

The present invention may be embodied as a method system or computer program product. Accordingly the present invention may take the form of an entirely hardware embodiment an entirely software embodiment including firmware resident software micro code etc. or an embodiment combining software and hardware aspects that may all generally be referred to herein as a circuit module or system. Furthermore the present invention may take the form of a computer program product on a computer usable storage medium having computer usable program code embodied in the medium. In a preferred embodiment the invention is implemented in software which includes but is not limited to firmware resident software microcode etc.

Furthermore the invention can take the form of a computer program product accessible from a computer usable or computer readable medium providing program code for use by or in connection with a computer or any instruction execution system. For the purposes of this description a computer usable or computer readable medium can be any apparatus that can store the program for use by or in connection with the instruction execution system apparatus or device.

Any suitable computer usable or computer readable medium may be utilized. The computer usable or computer readable medium may be for example but not limited to an electronic magnetic optical electromagnetic infrared or semiconductor system apparatus or device. Examples of a computer readable medium include a semiconductor or solid state memory magnetic tape a removable computer diskette a random access memory RAM a read only memory ROM an erasable programmable read only memory EPROM or Flash memory a rigid magnetic disk and an optical disk. Current examples of optical disks include compact disk read only memory CD ROM compact disk read write CD R W and DVD.

Computer program code for carrying out operations of the present invention may be written in an object oriented programming language such as Java Smalltalk C or the like. However the computer program code for carrying out operations of the present invention may also be written in conventional procedural programming languages such as the C programming language or similar programming languages. The program code may execute entirely on the user s computer partly on the user s computer as a stand alone software package partly on the user s computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario the remote computer may be connected to the user s computer through a local area network LAN or a wide area network WAN or the connection may be made to an external computer for example through the Internet using an Internet Service Provider .

A data processing system suitable for storing and or executing program code will include at least one processor coupled directly or indirectly to memory elements through a system bus. The memory elements can include local memory employed during actual execution of the program code bulk storage and cache memories which provide temporary storage of at least some program code in order to reduce the number of times code must be retrieved from bulk storage during execution.

Input output or I O devices including but not limited to keyboards displays pointing devices etc. can be coupled to the system either directly or through intervening I O controllers.

Network adapters may also be coupled to the system to enable the data processing system to become coupled to other data processing systems or remote printers or storage devices through intervening private or public networks. Modems cable modem and Ethernet cards are just a few of the currently available types of network adapters.

The present invention is described below with reference to flowchart illustrations and or block diagrams of methods apparatus systems and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and or block diagrams and combinations of blocks in the flowchart illustrations and or block diagrams can be implemented by computer program instructions. These computer program instructions may be provided to a processor of a general purpose computer special purpose computer or other programmable data processing apparatus to produce a machine such that the instructions which execute via the processor of the computer or other programmable data processing apparatus create means for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

These computer program instructions may also be stored in a computer readable memory that can direct a computer or other programmable data processing apparatus to function in a particular manner such that the instructions stored in the computer readable memory produce an article of manufacture including instruction means which implement the function act specified in the flowchart and or block diagram block or blocks.

The computer program instructions may also be loaded onto a computer or other programmable data processing apparatus to cause a series of operational steps to be performed on the computer or other programmable apparatus to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide steps for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

In system the federated policy server can provide a policy exchange service which requestors can utilize to determine any policy of a Web service resource or other object regardless of policy domain . Federated policy server can include multiple provider interface modules . Each module can permit the server to interface with a specific policy provider . The module can convert format of policy information provided by a provider to a standardized one used by the policy server . In one embodiment the federated policy server need not locally using data store maintain policy data but can dynamically acquire it from remotely located data stores maintained by policy providers . In another embodiment the server can locally maintain a portion of policy information in a local data store .

Any data acquisition technology e.g. subscription polling etc. can be used when exchanging information between the federation policy server and the policy providers and when exchanging information between the policy requester and the server . In a typical transaction a policy requester can convey a policy request to the federated policy server . The request can request one or more policies up to all of a Web service resource or other object. The policy server can submit suitably formatted requests to one or more policy providers resulting in responses . These responses are processed by the federation component and converted into response which is sent to the policy requester . Importantly the policy requester can submit any type of policy request to the federated policy server without needing to know which policy provider s maintains policies of the requested type. In one embodiment a published policy exchange service can be used to interface with the policy requestors .

As used herein a policy is an interface that defines a condition applied to a Web service resource or information. Policies can include behavioral requirements format requirements Quality of Service QoS requirements business requirements security requirements monitoring requirements and the like.

The policy provider is an entity that exposes one or more policies related to a Web service resource or information. For example policy providers can include a WEBSPHERE APPLICATION SERVER WAS a DATAPOWER server a TIVOLI ACCESS MANAGER TAM server a .NET server IBM TIVOLI COMPOSITE APPLICATION MANAGEMENT ITCAM server an IBM Tivoli Management Framework TFM component a WEBSPHERE SERVICE REGISTRY AND REPOSITORY WRSS a TIVOLI CHANGE AND CONFIGURATION MANAGEMENT DATABASE CCMDB a Universal Description Discovery and Integration UDDI registry and the like.

A policy domain can contains policy sets management classes and copy groups. Policy domains are enforced by numerous servers such as WS security server. The federated policy server can interact across different policy domains .

A policy requestor can be any entity that request a policy from the federated policy server . For example a policy requestor can include a policy point which can be a point in a service oriented architecture SOA that enforces monitors and or takes other programmatic action involving a resource service based upon a preexisting policy. The policy requester can include a management system a service registry and or an access point utilizing a Web service.

Data exchanged in system can be conveyed over a network. The network can include any hardware software and firmware necessary to convey data encoded within carrier waves. Data can be contained within analog or digital signals and conveyed though data or voice channels. The networks can include local components and data pathways necessary for communications to be exchanged among computing device components and between integrated device components and peripheral devices. The networks can also include network equipment such as routers data lines hubs and intermediary servers which together form a data network. The networks can further include circuit based communication components and mobile communication components such as telephony switches modems cellular communication towers and the like. Additionally the networks can include line based and or wireless communication pathways.

The data stores can be a physical or virtual storage repository configured to store digital information. The data stores can be physically implemented within any type of hardware including but not limited to a magnetic disk an optical disk a semiconductor memory a digitally encoded plastic memory a holographic memory or any other recording medium. Each of data stores can be a stand alone storage unit as well as a storage unit formed from one or more physical devices. Additionally information can be stored within the data stores in a variety of manners. For example information can be stored within a database structure or can be stored within one or more files of a file storage system where each file may or may not be indexed for information searching purposes. Further the data stores can optionally utilize one or more encryption mechanisms to protect stored information from unauthorized access.

In architecture service definition metadata regarding policies can be federated using a set of policy management tools . The policy data can be acquired from one or more development environment from one or more deployment environments and or from a set of service registries and repositories .

The policy management tools can federate data from different policy sources regardless of platform specific considerations in a platform independent manner. For example the development environment can be a JEER based a .NET based or other computing environment and still be supported by tools . Similarly different types of deployment environments such as a WAS environment a DATAPOWER environment a TAM environment a .NET environment and any other deployment environment can be supported. Policy data registered within different repositories such as WRSS CCMDB and a Universal Description Discovery and Integration UDDI registry can also be handled.

The policy management tools can include policy authoring tools service discovery tools change management tools policy repository tools evaluation and analysis tools policy distribution tools monitoring and reporting tools service management tools and the like. One or more federated policy servers e.g. server can provide the tools .

Policies can be published to a policy exchange service . In one embodiment the policy exchange service can be a Web service that federates policy data about other Web services. Service can be utilized to retrieve and or distribute policies to service registries e.g. WARS CCMDB etc. to management systems e.g. TAM ITCAM etc. and to policy points .

A policy point can include a policy enforcement point PEP a policy decision point PEP and any other point that desires to access a Web service policy. Each policy provided by the service can include a policy transformation and a raw policy . For example the raw policy can be a DATAPOWER policy from a deployment environment where the policy transformation is specific to DATAPOWER and implemented using a DATAPOWER specific interface module e.g. module from system . In another example the raw policy can be a WAS policy having a WAS specific transformation applied to it. Still another policy provided to a point can be a TAM policy raw policy having a TAM specific transformation .

The diagrams in illustrate the architecture functionality and operation of possible implementations of systems methods and computer program products according to various embodiments of the present invention. In this regard each block in the flowchart or block diagrams may represent a module segment or portion of code which comprises one or more executable instructions for implementing the specified logical function s . It should also be noted that in some alternative implementations the functions noted in the block may occur out of the order noted in the figures. For example two blocks shown in succession may in fact be executed substantially concurrently or the blocks may sometimes be executed in the reverse order depending upon the functionality involved. It will also be noted that each block of the block diagrams and or flowchart illustration and combinations of blocks in the block diagrams and or flowchart illustration can be implemented by special purpose hardware based systems that perform the specified functions or acts or combinations of special purpose hardware and computer instructions.

The terminology used herein is for the purpose of describing particular embodiments only and is not intended to be limiting of the invention. As used herein the singular forms a an and the are intended to include the plural forms as well unless the context clearly indicates otherwise. It will be further understood that the terms comprises and or comprising when used in this specification specify the presence of stated features integers steps operations elements and or components but do not preclude the presence or addition of one or more other features integers steps operations elements components and or groups thereof.

The corresponding structures materials acts and equivalents of all means or step plus function elements in the claims below are intended to include any structure material or act for performing the function in combination with other claimed elements as specifically claimed. The description of the present invention has been presented for purposes of illustration and description but is not intended to be exhaustive or limited to the invention in the form disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art without departing from the scope and spirit of the invention. The embodiment was chosen and described in order to best explain the principles of the invention and the practical application and to enable others of ordinary skill in the art to understand the invention for various embodiments with various modifications as are suited to the particular use contemplated.

