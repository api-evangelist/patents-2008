---

title: Method and system for sharing data between subscribers of a multi-tenant database service
abstract: In accordance with embodiments, there are provided mechanisms and methods for sharing data among subscribers of a multi-tenant database service. These mechanisms and methods for sharing data among subscribers of a multi-tenant database service can enable embodiments to providing controlled, limited sharing between the subscribers regardless of the physical location of the subscriber data. The ability of embodiments to provide such additional sharing capabilities may lead to more secure sharing of data within a multi-tenant on-demand database service.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08577835&OS=08577835&RS=08577835
owner: salesforce.com, inc.
number: 08577835
owner_city: San Francisco
owner_country: US
publication_date: 20080624
---
This application claims the benefit of U.S. Provisional Patent Application 60 946 951 entitled METHOD AND SYSTEM FOR SHARING DATA BETWEEN SUBSCRIBERS TO AN ON DEMAND SERVICE by Kedar Doshi filed Jun. 28 2007 the entire contents of which are incorporated herein by reference.

A portion of the disclosure of this patent document contains material which is subject to copyright protection. The copyright owner has no objection to the facsimile reproduction by anyone of the patent document or the patent disclosure as it appears in the Patent and Trademark Office patent file or records but otherwise reserves all copyright rights whatsoever.

The current invention relates generally to database systems and more particularly to sharing data in the context of database systems.

The subject matter discussed in the background section should not be assumed to be prior art merely as a result of its mention in the background section. Similarly a problem mentioned in the background section or associated with the subject matter of the background section should not be assumed to have been previously recognized in the prior art. The subject matter in the background section merely represents different approaches which in and of themselves may also be inventions.

In conventional database systems users access their data resources in one logical database. A user of such a conventional system typically retrieves data from and stores data on the system using the user s own systems. A user system might remotely access one of a plurality of server systems that might in turn access the database system. Data retrieval from the system might include the issuance of a query from the user system to the database system. The database system might process the request for information received in the query and send to the user system information relevant to the request.

There is often a desire to share data among various users of the aforementioned database systems. For example companies may merge form partnerships or enter into supplier or vendor agreements that could be facilitated by sharing one another s data. Moreover there is a desire to share data securely. For example there may be a desire to only share a portion of a user s data with certain users etc. Unfortunately accomplishing the foregoing may be further complicated if different user data is stored in different physical locations.

Heretofore known efforts approach the issue of connecting different computer architectures together. Unfortunately the result is complex protocols or procedures for exchanging information about interfaces. A fresh approach to sharing data on the other hand could greatly enhance users and organizations abilities to work together.

In accordance with embodiments there are provided mechanisms and methods for sharing data among subscribers of a multi tenant database or other service. These mechanisms and methods for sharing data among subscribers of a multi tenant database service can enable embodiments to providing controlled limited or full sharing between the subscribers regardless of the physical location of the subscriber data. The ability of embodiments to provide such sharing capabilities may lead to more secure sharing of data within a multi tenant on demand database service.

In an embodiment and by way of example a method is provided for sharing data among subscribers of a multi tenant database service. In use a request is communicated to share data of a first subscriber of an on demand database service with at least one second subscriber of the on demand database service. It is also determined whether the request is actually from the first subscriber as well as whether the request is accepted by the at least one second subscriber. To this end sharing of the data of the first subscriber with the at least one second subscriber may be enabled if the request is determined to be actually from the first subscriber and the request is accepted by the at least one second subscriber.

While the present invention is described with reference to an embodiment in which techniques for sharing data among subscribers of a multi tenant database service are implemented in an application server providing a front end for a multi tenant database on demand service the present invention is not limited to multi tenant databases or deployment on application servers. Embodiments may be practiced using other database architectures i.e. ORACLE DB2 and the like without departing from the scope of the embodiments claimed.

Any of the above embodiments may be used alone or together with one another in any combination. Inventions encompassed within this specification may also include embodiments that are only partially mentioned or alluded to or are not mentioned or alluded to at all in this brief summary or in the abstract. Although various embodiments of the invention may have been motivated by various deficiencies with the prior art which may be discussed or alluded to in one or more places in the specification the embodiments of the invention do not necessarily address any of these deficiencies. In other words different embodiments of the invention may address different deficiencies that may be discussed in the specification. Some embodiments may only partially address some deficiencies or just one deficiency that may be discussed in the specification and some embodiments may not address any of these deficiencies.

Systems and methods are provided for sharing data among subscribers of a multi tenant database service. While described with reference to multi tenant database services the systems and methods provided herein may be applied to other types of on demand services in including without limitation social networking sites online shopping sites online application software and so forth.

Any attempt to share data in a secure manner is often complicated by limitations of systems that are not able limit sharing to only a portion of a various data with certain users etc. Thus mechanisms and methods are provided herein for more securely sharing data among subscribers of a multi tenant database service can enable embodiments to promote more control over the sharing process. The ability of embodiments to provide such additional control may lead to more secure sharing in the context of a multi tenant on demand database service.

Next mechanisms and methods for sharing data among subscribers of a multi tenant database service will be described with reference to exemplary embodiments.

Additionally in the context of the present description an on demand database service may include any service that relies on a database system that is accessible over a network. In one embodiment the on demand database service may include a multi tenant on demand database service. In the present description such multi tenant on demand database service may include any service that relies on a database system that is accessible over a network in which various elements of hardware and software of the database system may be shared by one or more subscribers. For instance a given application server may simultaneously process requests for a great number of subscribers and a given database table may store rows for a potentially much greater number of subscribers. In this case a subscriber refers to any entity e.g. business individual etc. that has subscribed or is otherwise authorized to use an on demand database.

Furthermore in the context of the present description data refers to any data capable of being shared between one or more subscribers. For example in various embodiments the data may include but is not limited to files records folders and or any other data the meets the above definition.

As shown further in it is determined whether the request to share data is actually from the first subscriber. See operation . In one embodiment it may be determined whether the request is actually from the first subscriber by authenticating the first subscriber. In various embodiments the authenticating may include verifying a unique user identification ID and or password verifying a unique key associated with the request verifying an organization ID and any other authentication technique.

Additionally it is determined whether the request is accepted by the second subscriber. See operation . In one embodiment the request may be communicated by the first subscriber by sending an electronic message to the second subscriber. In this case the request may be accepted by the second subscriber utilizing the electronic message. For example the request may be accepted by selecting a link in the electronic message. It should be noted that the electronic message may be any type of electronic message such as an email a text message an instant message etc.

Furthermore the first subscriber is enabled to share the data of the first subscriber with the second subscriber if the request is determined to be actually from the first subscriber and the request is accepted by the second subscriber. See operation . As an option different data of the first subscriber may be shared with different other subscribers. Thus the first subscriber may share a first record with the second subscriber and share a second different record with a third subscriber.

In one embodiment the sharing of the data of the first subscriber with the second subscriber may be enabled by the first subscriber publishing the data. In this case the first subscriber may publish the data by selecting the data utilizing a graphical user interface.

In another embodiment the sharing of the data of the first subscriber with the second subscriber may be enabled by the second subscriber subscribing to at least a portion of the data. In this case the second subscriber may subscribe to the data by selecting at least a portion of the data utilizing a graphical user interface. As an option the second subscriber may subscribe only to a subset of the data.

Furthermore after the publishing and the sharing a portion of the data may be communicated from the first subscriber to the second subscriber. As a result the portion of the data is capable of being accepted by the second subscriber.

In still another embodiment the data may be shared between the first subscriber and the second subscriber automatically based on at least one rule. In this case the at least one rule may define related data that is automatically shared. As another option the sharing of the data of the first subscriber with the second subscriber may be enabled by synchronizing the data. In some cases the synchronizing may include updating the data.

As shown two entities that wish to share data may engage in a handshake process to establish a connection with each other. Once the connection is established transferring of data between the two entities may be accomplished utilizing an application programming interface API .

In operation a first entity may invite a second entity that is a contact with a valid email address to be a partner. See operation . In this case an entity refers to any individual company or organization. For example the first and second entity may be two different companies or two different organizations within one company. shows a graphical user interface GUI for generating an invitation in accordance with one embodiment.

One the invitation is sent by the first entity it is verified that the first entity sent the invitation. In one embodiment the invitation may include an ID that is unique to the first entity such as an organization ID and or a user ID. As an option the invitation may be sent in an email to the second entity.

The second entity may then perform a log in and determine whether to accept the invitation from the first entity. See operation of . If the second entity accepts the invitation the first entity is notified of the acceptance. See operation . illustrates a sequence of events encountered by an entity when accepting an invitation in accordance with one embodiment. As shown a GUI may be presented to a user that allows the user to accept the invitation decline the invitation or defer the decision to a later time.

In one embodiment if the invitation is accepted data may be written into a connection table which is accessible to both the first and the second entity indicating the acceptance of the invitation and the established connection. In various embodiments the connection table may be one table accessible to multiple entities or more than one table where each table is associated with and assessable to one of the entities. The connection table may be used to store login or security information for the entities involved in the connection. Thus each entity may have access to an organization ID and or unique key and the user ID of the entity or point person on the other side of the connection.

Table 1 shows fields for a data structure representing a connection table in accordance with one embodiment.

Additionally a field mapping table may be utilized to store a field to field mapping for each connection. This field mapping table may be utilized to specify outbound fields each entity is willing to share and any mapping for inbound fields. As an option the unique ID of the entity e.g. the organization ID may be used to correlate information in the mapping table to a particular entity. Thus the second entity only needs the unique ID of the first entity to determine the physical instance of the database where the data associated with the first entity resides. Furthermore by using this unique ID an API endpoint which may be used for all synchronization operations may be determined.

Table 2 shows fields for a data structure representing a field mapping data table in accordance with one embodiment.

Once the invitation has been accepted by the second entity the first entity publishes data. See operation of . In this case the publishing may include publishing data objects and fields that the first entity desires to share with the second entity. shows a GUI illustrating objects and fields to be published in accordance with one embodiment.

In one embodiment transferring the data to be published to an entity e.g. the second entity may be accomplished utilizing a queue. In this case multiple valid connections to multiple records may be added to these queues. The sharing of records and record information may also be possible utilizing an explicit share to connection link on records that are not stored by the queues.

Once the data is published the second entity may subscribe to all or a subset of the published data. See operation of . shows a GUI for enabling an entity to subscribe to the published objects and fields in accordance with one embodiment.

The first entity may then share the data to which the second entity has subscribed such as a record with the second entity. See operation of . shows a record that may be shared between entities in accordance with one embodiment.

In the case that a shared record is assigned to a queue that contains one or more connections a subset of the record fields may be transferred e.g. as text to all other connected entities in the queue and placed in a staging table. List views may then be implemented on the staging table and specific views assigned to any appropriate individuals e.g. sales people etc. based on the staged data.

Table 4 shows fields for a data structure representing a staging table for a record in accordance with one embodiment.

Table 5 shows fields for a data structure representing a staging table for custom objects in accordance with one embodiment.

Once the record is placed in the staging table the second entity may accept the record. See operation of . shows a GUI for enabling an entity to accept a copy of a shared record in accordance with one embodiment.

Once the second entity accepts the staged record a valid record may be created from the data in the staged table. In some cases acceptance may be a real time operation where the first connection or internal user to accept a record is the first to establish access to that record.

Any time a record that is shared to an entity is updated the record may be added to a synchronization queue to be processed by a batch process such that data synchronization may take place. See operation . A source object may be read and based on the field mapping table the fields being shared may be extracted. The field mapping table of the second organization may then be read and the appropriate record update call may be made. shows a GUI for enabling an entity to synchronize data in accordance with one embodiment.

As an option failed calls may be limited e.g. to five times at most etc. . As another option the time between calls may increase e.g. by a power of 2 etc. . Additionally a valid session ID may be communicated to the first or second entity using the connection established for the record update call. In one embodiment every record update may be tracked in an audit trail with the connection history.

Environment is an environment in which an on demand database service exists. User system may be any machine or system that is used by a user to access a database user system. For example any of user systems can be a handheld computing device a mobile phone a laptop computer a work station and or a network of computing devices. As illustrated in and in more detail in user systems might interact via a network with an on demand database service which is system .

An on demand database service such as system is a database system that is made available to outside users that do not need to necessarily be concerned with building and or maintaining the database system but instead may be available for their use when the users need the database system e.g. on the demand of the users . Some on demand database services may store information from one or more tenants stored into tables of a common database image to form a multi tenant database system MTS . Accordingly on demand database service and system will be used interchangeably herein. A database image may include one or more database objects. A relational database management system RDMS or the equivalent may execute storage and retrieval of information against the database object s . Application platform may be a framework that allows the applications of system to run such as the hardware and or software e.g. the operating system. In an embodiment on demand database service may include an application platform that enables creation managing and executing one or more applications developed by the provider of the on demand database service users accessing the on demand database service via user systems or third party application developers accessing the on demand database service via user systems .

The users of user systems may differ in their respective capacities and the capacity of a particular user system might be entirely determined by permissions permission levels for the current user. For example where a salesperson is using a particular user system to interact with system that user system has the capacities allotted to that salesperson. However while an administrator is using that user system to interact with system that user system has the capacities allotted to that administrator. In systems with a hierarchical role model users at one permission level may have access to applications data and database information accessible by a lower permission level user but may not have access to certain applications database information and data accessible by a user at a higher permission level. Thus different users will have different capabilities with regard to accessing and modifying application and database information depending on a user s security or permission level.

Network is any network or combination of networks of devices that communicate with one another. For example network can be any one or any combination of a LAN local area network WAN wide area network telephone network wireless network point to point network star network token ring network hub network or other appropriate configuration. As the most common type of computer network in current use is a TCP IP Transfer Control Protocol and Internet Protocol network such as the global internetwork of networks often referred to as the Internet with a capital I that network will be used in many of the examples herein. However it should be understood that the networks that the present invention might use are not so limited although TCP IP is a frequently implemented protocol.

User systems might communicate with system using TCP IP and at a higher network level use other common Internet protocols to communicate such as HTTP FTP AFS WAP etc. In an example where HTTP is used user system might include an HTTP client commonly referred to as a browser for sending and receiving HTTP messages to and from an HTTP server at system . Such an HTTP server might be implemented as the sole network interface between system and network but other techniques might be used as well or instead. In some implementations the interface between system and network includes load sharing functionality such as round robin HTTP request distributors to balance loads and distribute incoming HTTP requests evenly over a plurality of servers. At least as for the users that are accessing that server each of the plurality of servers has access to the MTS data however other alternative configurations may be used instead.

In one embodiment system shown in implements a web based customer relationship management CRM system. For example in one embodiment system includes application servers configured to implement and execute CRM software applications as well as provide related data code forms webpages and other information to and from user systems and to store to and retrieve from a database system related data objects and Webpage content. With a multi tenant system data for multiple tenants may be stored in the same physical database object however tenant data typically is arranged so that data of one tenant is kept logically separate from that of other tenants so that one tenant does not have access to another tenant s data unless such data is expressly shared. In certain embodiments system implements applications other than or in addition to a CRM application. For example system may provide tenant access to multiple hosted standard and custom applications including a CRM application. User or third party developer applications which may or may not include CRM may be supported by the application platform which manages creation storage of the applications into one or more database objects and executing of the applications in a virtual machine in the process space of the system .

One arrangement for elements of system is shown in including a network interface application platform tenant data storage for tenant data system data storage for system data accessible to system and possibly multiple tenants program code for implementing various functions of system and a process space for executing MTS system processes and tenant specific processes such as running applications as part of an application hosting service. Additional processes that may execute on system include database indexing processes.

Several elements in the system shown in include conventional well known elements that are explained only briefly here. For example each user system could include a desktop personal computer workstation laptop PDA cell phone or any wireless access protocol WAP enabled device or any other computing device capable of interfacing directly or indirectly to the Internet or other network connection. User system typically runs an HTTP client e.g. a browsing program such as Microsoft s Internet Explorer browser Netscape s Navigator browser Opera s browser or a WAP enabled browser in the case of a cell phone PDA or other wireless device or the like allowing a user e.g. subscriber of the multi tenant database system of user system to access process and view information pages and applications available to it from system over network . Each user system also typically includes one or more user interface devices such as a keyboard a mouse trackball touch pad touch screen pen or the like for interacting with a graphical user interface GUI provided by the browser on a display e.g. a monitor screen LCD display etc. in conjunction with pages forms applications and other information provided by system or other systems or servers. For example the user interface device can be used to access data and applications hosted by system and to perform searches on stored data and otherwise allow a user to interact with various GUT pages that may be presented to a user. As discussed above embodiments are suitable for use with the Internet which refers to a specific global internetwork of networks. However it should be understood that other networks can be used instead of the Internet such as an intranet an extranet a virtual private network VPN a non TCP IP based network any LAN or WAN or the like.

According to one embodiment each user system and all of its components are operator configurable using applications such as a browser including computer code run using a central processing unit such as an Intel Pentium processor or the like. Similarly system and additional instances of an MTS where more than one is present and all of their components might be operator configurable using application s including computer code to run using a central processing unit such as processor system of which may include an Intel Pentium processor or the like and or multiple processor units. A computer program product embodiment includes a machine readable storage medium media having instructions stored thereon in which can be used to program a computer to perform any of the processes of the embodiments described herein. Computer code for operating and configuring system to intercommunicate and to process webpages applications and other data and media content as described herein are preferably downloaded and stored on a hard disk but the entire program code or portions thereof may also be stored in any other volatile or non volatile memory medium or device as is well known such as a ROM or RAM or provided on any media capable of storing program code such as any type of rotating media including floppy disks optical discs digital versatile disk DVD compact disk CD microdrive and magneto optical disks and magnetic or optical cards nanosystems including molecular memory ICs or any type of media or device suitable for storing instructions and or data. Additionally the entire program code or portions thereof may be transmitted and downloaded from a software source over a transmission medium e.g. over the Internet or from another server as is well known or transmitted over any other conventional network connection as is well known e.g. extranet VPN LAN etc. using any communication medium and protocols e.g. TCP IP HTTP HTTPS Ethernet etc. as are well known. It will also be appreciated that computer code for implementing embodiments of the present invention can be implemented in any programming language that can be executed on a client system and or server or server system such as for example C C HTML any other markup language Java JavaScript ActiveX any other scripting language such as VBScript and many other programming languages as are well known may be used. Java is a trademark of Sun Microsystems Inc. .

According to one embodiment each system is configured to provide webpages forms applications data and media content to user client systems to support the access by user systems as tenants of system . As such system provides security mechanisms to keep each tenant s data separate unless the data is shared. If more than one MTS is used they may be located in close proximity to one another e.g. in a server farm located in a single building or campus or they may be distributed at locations remote from one another e.g. one or more servers located in city A and one or more servers located in city B . As used herein each MTS could include one or more logically and or physically connected servers distributed locally or across one or more geographic locations. Additionally the term server is meant to include a computer system including processing hardware and process space s and an associated storage system and database application e.g. OODBMS or RDBMS as is well known in the art. It should also be understood that server system and server are often used interchangeably herein. Similarly the database object described herein can be implemented as single databases a distributed database a collection of distributed databases a database with redundant online or offline backups or other redundancies etc. and might include a distributed database or storage network and associated processing intelligence.

User system network system tenant data storage and system data storage were discussed above in . Regarding user system processor system A may be any combination of one or more processors. Memory system B may be any combination of one or more memory devices short term and or long term memory. Input system C may be any combination of input devices such as one or more keyboards mice trackballs scanners cameras and or interfaces to networks. Output system D may be any combination of output devices such as one or more monitors printers and or interfaces to networks. As shown by system may include a network interface of implemented as a set of HTTP application servers an application platform tenant data storage and system data storage . Also shown is system process space including individual tenant process spaces and a tenant management process space . Each application server may be configured to tenant data storage and the tenant data therein and system data storage and the system data therein to serve requests of user systems . The tenant data might be divided into individual tenant storage areas which can be either a physical arrangement and or a logical arrangement of data. Within each tenant storage area user storage and application metadata might be similarly allocated for each user. For example a copy of a user s most recently used MRU items might be stored to user storage . Similarly a copy of MRU items for an entire organization that is a tenant might be stored to tenant storage area . A UI provides a user interface and an API provides an application programmer interface to system resident processes to users and or developers at user systems . The tenant data and the system data may be stored in various databases such as one or more Oracle databases.

Application platform includes an application setup mechanism that supports application developers creation and management of applications which may be saved as metadata into tenant data storage by save routines for execution by subscribers as one or more tenant process spaces managed by tenant management process for example. Invocations to such applications may be coded using PL SOQL that provides a programming language style interface extension to API . A detailed description of some PL SOQL language embodiments is discussed in commonly owned U.S. Provisional Patent Application 60 828 192 entitled PROGRAMMING LANGUAGE METHOD AND SYSTEM FOR EXTENDING APIS TO EXECUTE IN CONJUNCTION WITH DATABASE APIS by Craig Weissman filed Oct. 4 2006 which is incorporated in its entirety herein for all purposes. Invocations to applications may be detected by one or more system processes which manages retrieving application metadata for the subscriber making the invocation and executing the metadata as an application in a virtual machine.

Each application server may be communicably coupled to database systems e.g. having access to system data and tenant data via a different network connection. For example one application server might be coupled via the network e.g. the Internet another application server might be coupled via a direct network link and another application server might be coupled by yet a different network connection. Transfer Control Protocol and Internet Protocol TCP IP are typical protocols for communicating between application servers and the database system. However it will be apparent to one skilled in the art that other transport protocols may be used to optimize the system depending on the network interconnect used.

In certain embodiments each application server is configured to handle requests for any user associated with any organization that is a tenant. Because it is desirable to be able to add and remove application servers from the server pool at any time for any reason there is preferably no server affinity for a user and or organization to a specific application server . In one embodiment therefore an interface system implementing a load balancing function e.g. an F5 Big IP load balancer is communicably coupled between the application servers and the user systems to distribute requests to the application servers . In one embodiment the load balancer uses a least connections algorithm to route user requests to the application servers . Other examples of load balancing algorithms such as round robin and observed response time also can be used. For example in certain embodiments three consecutive requests from the same user could hit three different application servers and three requests from different users could hit the same application server . In this manner system is multi tenant wherein system handles storage of and access to different objects data and applications across disparate users and organizations.

As an example of storage one tenant might be a company that employs a sales force where each salesperson uses system to manage their sales process. Thus a user might maintain contact data leads data customer follow up data performance data goals and progress data etc. all applicable to that user s personal sales process e.g. in tenant data storage . In an example of a MTS arrangement since all of the data and the applications to access view modify report transmit calculate etc. can be maintained and accessed by a user system having nothing more than network access the user can manage his or her sales efforts and cycles from any of many different user systems. For example if a salesperson is visiting a customer and the customer has Internet access in their lobby the salesperson can obtain critical updates as to that customer while waiting for the customer to arrive in the lobby.

While each user s data might be separate from other users data regardless of the employers of each user some data might be organization wide data shared or accessible by a plurality of users or all of the users for a given organization that is a tenant. Thus there might be some data structures managed by system that are allocated at the tenant level while other data structures might be managed at the user level. Because an MTS might support multiple tenants including possible competitors the MTS should have security protocols that keep data applications and application use separate. Also because many tenants may opt for access to an MTS rather than maintain their own system redundancy up time and backup are additional functions that may be implemented in the MTS. In addition to user specific data and tenant specific data system might also maintain system level data usable by multiple tenants or other data. Such system level data might include industry reports news postings and the like that are sharable among tenants.

In certain embodiments user systems which may be client systems communicate with application servers to request and update system level and tenant level data from system that may require sending one or more queries to tenant data storage and or system data storage . System e.g. an application server in system automatically generates one or more SQL statements e.g. one or more SQL queries that are designed to access the desired information. System data storage may generate query plans to access the requested data from the database.

Each database can generally be viewed as a collection of objects such as a set of logical tables containing data fitted into predefined categories. A table is one representation of a data object and may be used herein to simplify the conceptual description of objects and custom objects according to the present invention. It should be understood that table and object may be used interchangeably herein. Each table generally contains one or more data categories logically arranged as columns or fields in a viewable schema. Each row or record of a table contains an instance of data for each category defined by the fields. For example a CRM database may include a table that describes a customer with fields for basic contact information such as name address phone number fax number etc. Another table might describe a purchase order including fields for information such as customer product sale price date etc. In some multi tenant database systems standard entity tables might be provided for use by all tenants. For CRM database applications such standard entities might include tables for Account Contact Lead and Opportunity data each containing pre defined fields. It should be understood that the word entity may also be used interchangeably herein with object and table .

In some multi tenant database systems tenants may be allowed to create and store custom objects or they may be allowed to customize standard entities or objects for example by creating custom fields for standard objects including custom index fields. U.S. patent application Ser. No. 10 817 161 filed Apr. 2 2004 entitled CUSTOM ENTITIES AND FIELDS IN A MULTI TENANT DATABASE SYSTEM which is hereby incorporated herein by reference teaches systems and methods for creating custom objects as well as customizing standard objects in a multi tenant database system. In certain embodiments for example all custom entity data rows are stored in a single multi tenant physical table which may contain multiple logical tables per organization. It is transparent to customers that their multiple tables are in fact stored in one large table or that their data may be stored in the same table as the data of other customers.

While the invention has been described by way of example and in terms of the specific embodiments it is to be understood that the invention is not limited to the disclosed embodiments. To the contrary it is intended to cover various modifications and similar arrangements as would be apparent to those skilled in the art. Therefore the scope of the appended claims should be accorded the broadest interpretation so as to encompass all such modifications and similar arrangements.

