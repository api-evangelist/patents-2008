---

title: Method and system of remote diagnostic, control and information collection using a dynamic linked library for multiple formats and multiple protocols with sharing the resource
abstract: A system, method and program product for diagnosing, controlling and collecting information from devices. Information regarding events of a target application executing in an application unit is collected and formatted into one of multiple data formats for transmission through one of multiple communication protocols using at least one shared system resource. The formatted data is transmitted through, e.g., e-mail or FTP to a predetermined destination or may be saved to local storage, e.g., a local disk. By sharing resources, code duplication is reduced or eliminated.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07979536&OS=07979536&RS=07979536
owner: Ricoh Co., Ltd.
number: 07979536
owner_city: Tokyo
owner_country: JP
publication_date: 20080326
---
This application is a continuation application of U.S. patent application Ser. No. 09 782 187 filed Feb. 14 2001 now U.S. Pat. No. 7 392 307 the contents of which are incorporated herein by reference.

This application related to and being concurrently filed with three other patent applications U.S. patent application Ser. No. 09 782 187 entitled Method and System of Remote Diagnostic Control and Information Collection Using Multiple Formats and Multiple Protocols with Verification of Formats and Protocols U.S. patent application Ser. No. 09 782 064 entitled Object oriented Method and System of Remote Diagnostic Control and Information Collection Using Multiple Formats and Multiple Protocols and U.S. patent application Ser. No. 09 782 083 entitled Method and System of Remote Diagnostic Control and Information Collection Using Multiple Formats and Multiple Protocols with Delegating Protocol Processor each filed Feb. 14 2001 and incorporated herein by reference. The present application is also related to U.S. patent application Ser. No. 09 190 460 filed Nov. 13 1998 entitled Method and System for Translating Documents Using Different Translation Resources for Different Portions of the Documents which is a continuation of U.S. patent application Ser. No. 08 654 207 filed May 28 1996 entitled Method and System for Translating Documents Using Different Translation Resources for Different Portions of the Documents now U.S. Pat. No. 5 848 386 U.S. patent application Ser. No. 08 997 482 filed Dec. 23 1997 entitled Object oriented System and Computer Program Product for Mapping Structured Information to Different Structured Information now U.S. Pat. No. 6 085 196 U.S. patent application Ser. No. 08 997 705 filed Dec. 23 1997 entitled Method and Apparatus for Providing a Graphical User Interface for Creating and Editing a Mapping of a First Structural Description to a Second Structural Description U.S. patent application Ser. No. 09 756 120 filed Jan. 9 2001 entitled Method and System of Remote Support of Device Using E mail U.S. patent application Ser. No. 09 668 162 filed Sep. 25 2000 entitled Method and System of Data Collection and Mapping From a Remote Position Reporting Device U.S. patent application Ser. No. 09 575 710 filed Jul. 25 2000 entitled Method and System of Remote Diagnostic and Information Collection and Service System U.S. patent application Ser. No. 09 575 702 filed Jul. 12 2000 entitled Method and System of Remote Position Report Device U.S. patent application Ser. No. 09 453 934 filed May 17 2000 entitled Method and System of Remote Diagnostic Control and Information Collection Using a Dynamic Linked Library for Multiple Formats and Multiple Protocols U.S. patent application Ser. No. 09 453 935 filed May 17 2000 entitled Method and System of Remote Diagnostic Control and Information Collection Using a Dynamic Linked Library of Multiple Formats and Multiple Protocols With Intelligent Protocol Processor U.S. patent application Ser. No. 09 453 937 filed May 17 2000 entitled Method and System of Remote Diagnostic Control and Information Collection Using a Dynamic Linked Library of Multiple Formats and Multiple Protocols With Restriction on Protocol U.S. patent application Ser. No. 09 453 936 filed May 17 2000 entitled Method and System of Remote Diagnostic Control and Information Collection Using a Dynamic Linked Library of Multiple Formats and Multiple Protocols with Intelligent Formatter U.S. patent application Ser. No. 09 542 284 filed Apr. 4 2000 entitled System and Method to Display Various Messages While Performing the Tasks or While Idling U.S. patent application Ser. No. 09 520 368 filed on Mar. 7 2000 entitled Method and System for Updating the Device Driver of a Business Office Appliance U.S. patent application Ser. No. 09 453 877 filed Feb. 4 2000 entitled Method and System for Maintaining a Business Office Appliance through Log Files U.S. patent application Ser. No. 09 440 692 filed Nov. 16 1999 entitled Method and System to Monitor the Application Usage and Send Back the Information Using Connection and Connectionless Mode U.S. patent application Ser. No. 09 440 693 filed Nov. 16 1999 entitled Method and System of Remote Diagnostic Control and Information Collection Using a Dynamic Linked Library U.S. patent application Ser. No. 09 440 647 filed Nov. 16 1999 entitled Method and System to Monitor the Application Usage and Send Back the Information Using Connection and Connectionless Mode U.S. patent application Ser. No. 09 440 646 filed Nov. 16 1999 entitled Method and System to Monitor the Application Usage and Send Back the Information Using Connection and Connectionless Mode U.S. patent application Ser. No. 09 440 645 filed Nov. 16 1999 entitled Application Unit Monitoring and Reporting System and Method With Usage Data Logged Into a Map Structure U.S. patent application Ser. No. 09 408 443 filed Sep. 29 1999 entitled Method and System for Remote Diagnostic Control and Information Collection Based on various Communication Modes for Sending Messages to a Resource Manager U.S. patent application Ser. No. 09 407 769 filed Sep. 29 1999 entitled Method and System for Remote Diagnostic Control and Information Collection Based on various Communication Modes for Sending Messages to Users U.S. patent application Ser. No. 09 393 677 filed Sep. 10 1999 entitled Application Unit Monitoring and Reporting System and Method U.S. patent application Ser. No. 09 311 148 filed May 13 1999 entitled Application Unit Monitoring and Reporting System and Method U.S. patent application Ser. No. 09 192 583 filed Nov. 17 1998 entitled Method and System for Communicating With a Device Attached to a Computer Using Electronic Mail Messages U.S. patent application Ser. No. 08 883 492 filed Jun. 26 1997 entitled Method and System for Diagnosis and Control of Machines Using Connectionless Modes Having Delivery Monitoring and an Alternate Communication Mode U.S. patent application Ser. No. 08 820 633 filed Mar. 19 1997 entitled Method and System to Diagnose a Business Office Device Based on Operating Parameters Set by a User now U.S. Pat. No. 5 887 216 U.S. patent application Ser. No. 08 733 134 filed Oct. 16 1996 entitled Method and System for Diagnosis and Control of Machines Using Connectionless Modes of Communication now U.S. Pat. No. 5 909 493 U.S. patent application Ser. No. 08 880 683 filed Jun. 23 1997 U.S. patent application Ser. Nos. 09 107 989 and 09 108 705 both of which were filed Jul. 1 1998 all three of which are entitled Method and System for Controlling and Communicating with Machines Using Multiple Communication Formats and all three of which are divisions of U.S. patent application Ser. No. 08 624 228 filed Mar. 29 1996 entitled Method and System for Controlling and Communicating with Machines Using Multiple Communication Formats now U.S. Pat. No. 5 818 603 U.S. patent application Ser. No. 09 457 669 entitled Method and System for Diagnosis and Control of Machines Using Connection and Connectionless Modes of Communication filed Dec. 9 1999 which is a continuation of U.S. patent application Ser. No. 08 916 009 entitled Method and System for Diagnosis and Control of Machines Using Connection and Connectionless Modes of Communication filed Aug. 21 1997 which is a continuation of and U.S. patent application Ser. Nos. 08 738 659 and 08 738 461 filed Oct. 30 1996 both of which are entitled Method and System for Diagnosis and Control of Machines Using Connection and Connectionless Modes of Communication which are divisions of U.S. patent application Ser. No. 08 463 002 filed Jun. 5 1995 entitled Method and System for Diagnosis and Control of Machines Using Connection and Connectionless Modes of Communication now U.S. Pat. No. 5 819 110 and U.S. patent application Ser. No. 08 852 413 filed May 7 1987 entitled Method and System for Controlling and Communicating with Business Office Devices now U.S. Pat. No. 5 774 678 which is a continuation of U.S. patent application Ser. No. 08 698 068 filed Aug. 15 1996 entitled Method and Apparatus for Controlling and Communicating With Business Office Devices now U.S. Pat. No. 5 649 120 which is a continuation of U.S. patent application Ser. No. 08 562 192 filed Nov. 22 1995 now U.S. Pat. No. 5 568 618 entitled Method and Apparatus for Controlling and Communicating With Business Office Devices which is a continuation of U.S. patent application Ser. No. 08 473 780 filed Jun. 6 1995 entitled Method and Apparatus for Controlling and Communicating With Business Office Devices now U.S. Pat. No. 5 544 289 which is a continuation of U.S. patent application Ser. No. 08 426 679 filed Apr. 24 1995 entitled Method and Apparatus for Controlling and Communicating With Business Office Devices now U.S. Pat. No. 5 537 554 which is a continuation of U.S. patent application Ser. No. 08 282 168 filed Jul. 28 1994 entitled Method and Apparatus for Controlling and Communicating With Business Office Devices now U.S. Pat. No. 5 412 779 which is a continuation of U.S. patent application Ser. No. 07 902 462 filed Jun. 19 1992 now abandoned which is a continuation of U.S. patent application Ser. No. 07 549 278 filed Jul. 6 1990 now abandoned the disclosure of each is incorporated herein by reference.

This invention generally relates to a method system and program product for monitoring and communicating events at plural target applications of an application unit by using at least one resource such as a Dynamic Linked Library DLL shared among the plural target applications. The DLL supports multiple data formats and multiple communication protocols to communicate the event data. The application unit specifies at least one communication protocol to be used to report the information in at least one data format from the application unit. Each of the at least one communication protocol and each of the at least one data format are defined through an interface function. Additionally the DLL sends a file which includes the information to be reported through a communication protocol as discussed above sharing the same functions to handle processing of the communication protocols. Resources such as a system clock a persistent system registry Simple Mail Transfer Protocol SMTP and File Transfer Protocol FTP are shared by including a system resource that can be used by multiple software classes across the system.

With the rise of microprocessor based appliances and devices software development has clearly become a significant business. In evaluating and supporting appliances and devices it may be beneficial to monitor exactly how events in an appliance and device occur and how the states are changing. An example of events is an action caused by user interaction with an appliance. It may be helpful for a software developer to know which commands a user uses most often and how long those commands take to execute. Such an analysis is often referred to as profiling. Analogous analysis was performed e.g. on instructions in instruction sets to develop reduced instruction set computing RISC instructions. 

Further in designing appliances and devices with which a human interacts it may be desirable to monitor how the user interacts with such appliances and devices. As an example it may be desirable to monitor how a user utilizes a control panel of an image forming device such as a photocopier facsimile machine printer scanner or an appliance such as a microwave oven VCR digital camera cellular phone palm top computer etc.

Further it may be desirable to monitor the state of the appliances and devices to provide diagnostics services and maintenance needs. Some events may be caused by internal changes within the appliances and devices. Some events may be caused by abnormal conditions such as a paper jam in a copier. Some error conditions and warning conditions may be caused by e.g. errors in the software installed in target appliances and devices.

Further users are increasingly utilizing the Internet. There is significant interest in how users use the Internet particularly with respect to how users may use certain web pages. Therefore monitoring a user s usage of the Internet or its successor may also become significant.

It may also be desirable to determine how a user is utilizing a certain application unit e.g. a computer running a software application a device with an interface to be operated by a user or a web page . The user s usage of the application unit must then be monitored and effectively communicated to a remote party.

Accordingly one object of the present invention is to provide a novel and effective system for monitoring events of a target application of an application unit using at least one shared system resource.

A further object of the present invention is to provide a system for communicating data obtained by monitoring events of a target application of an application unit to a remote party.

A further object of the present invention is to provide a system for communicating data obtained by monitoring events of a target application of an application unit to a remote party allowing various data formats and communication protocols to facilitate the communication system configuration and received data analysis.

A further object of the present invention is to provide a system for communicating data obtained by monitoring events of a target application of an application unit to a remote party allowing various data formats that ease the analyses of received data at a receiving side.

A further object of the present invention is to efficiently communicate the monitored event information to a transmission unit.

A further object of the present invention is to efficiently verify the combination of two parameters specifying the data format and communication protocol and to satisfy a restriction requirement on the second parameter specifying the communication protocol.

A further object of the present invention is to communicate externally stored information through the mechanism available for the communication of the monitored event information.

The present invention achieves these and other objects by monitoring the events of a target application of an application unit or by receiving an instruction to send available stored information through a specified communication protocol using a shared system resource to reduce or eliminate duplication of code. Examples of monitoring and of available stored information include 1 monitoring or logging data of a software program being executed on a computer or workstation under control of a user 2 monitoring usage data of a control panel of an image forming apparatus e.g. a copying machine printer facsimile or scanner or an appliance e.g. a microwave oven VCR digital camera cellular phone or palm top computer 3 monitoring or logging data regarding any internal state changes such as error conditions and warning conditions within appliances devices and any systems and sending the results when requested or when events occur or when a preset time interval has passed 4 externally monitoring states of appliances devices or systems by polling at regular intervals and 5 generally monitoring or logging any other device or service. The data obtained by monitoring events of a target application of an application unit appliance or device can as a further feature in the present invention be collected logged and communicated to a desired location by a store and forward protocol e.g. Internet e mail or a direct connection protocol e.g. in which a socket connection is made to an ultimate destination machine e.g. using FTP or HTTP . The use of store and forward communication reduces the costs associated with communicating such data. The data can be communicated to the desired location upon the occurrence of at least one of several events. Such events may include e.g. each time a user exits a target application or the completion of a predetermined number of times that a user has utilized and exited the target application of the application unit. If the configuration allows and if necessary a direct connection between the monitored application and the monitoring system can be established in addition to the store and forward communication.

Referring now to the drawings wherein like reference numerals designate identical or corresponding parts throughout the several views and more particularly to thereof there are illustrated 1 various machines and 2 computers for monitoring diagnosing and controlling the operation of the machines. In there is a first network such as a Local Area Network LAN connected to computer workstations and . The workstations can be any type of computers including e.g. IBM Personal Computer compatible devices Unix based computers or Apple Macintoshes. Also connected to the network are 1 a digital image forming apparatus 2 a facsimile machine and 3 a printer . As would be appreciated by one of ordinary skill in the art two or more of the components of the digital image forming apparatus and the facsimile machine can be combined into a unified image forming apparatus. The devices and and the workstations and are referred to as machines or monitored devices and other types of devices may be used as the machines or monitored devices including any of the devices discussed below. In some configurations one or more workstations may be converted to business office appliances. One example of such a business office appliance is eCabinet from Ricoh which was demonstrated at Fall Comdex in 1999 at Las Vegas. Also a facsimile server not illustrated may be connected to the network and have a telephone ISDN Integrated Services Digital Network cable or wireless connection. In addition to the digital image forming apparatus facsimile machine and printer being connected to the network these devices may also include conventional telephone and or ISDN and or cable and or wireless connections and respectively. As is explained below the business office machines business devices or business office appliances and communicate with a remote monitoring diagnosis and control station also referred to as a monitoring device through the Internet via the network or by a direct telephone ISDN wireless or cable connection.

In a wide area network WAN e.g. the Internet or its successor is generally designated by . The WAN can either be a private WAN a public WAN or a hybrid. The WAN includes a plurality of interconnected computers and routers designated by A I. The manner of communicating over a WAN is known through a series of RFC documents obtained by HTTP www.ietf.org rfc.html including RFC 821 entitled Simple Mail Transfer Protocol from Internet Engineering Task Force IETF RFC 822 entitled Standard for the Format of ARPA Internet Text Message from IETF RFC 959 entitled File Transfer Protocol FTP from IETF RFC 2045 entitled Multipurpose Internet Mail Extensions MIME Part One Format of Internet Message Bodies from IETF RFC 1894 entitled An Extensible Message Format for Delivery Status Notifications RFC 1939 entitled Post Office protocol Version 3 and RFC 2298 entitled An Extensible Message Format for Message Disposition Notifications. The contents of each of these references are incorporated herein by reference.

TCP IP related communication is described for example in the book TCP IP Illustrated Vol. 1 The Protocols by W. R. Stevens from Addison Wesley Publishing Company 1994 which is incorporated herein by reference. Volumes 1 3 of Internetworking with TCP IP by Corner and Stevens are also incorporated herein by reference in their entirety.

In a firewall A is connected between the WAN and the network . A firewall is a device that allows only authorized computers on one side of the firewall to access a network computers or individual parts on the other side of the firewall. Firewalls are known and commercially available devices and or software e.g. SunScreen from Sun Microsystems Inc. . Similarly firewalls B and C separate the WAN from a network and a workstation respectively. Additional details on firewalls can be found in Firewalls and Internet Security by W. R. Cheswick and S. M. Bellovin 1994 Addison Wesley Publishing and Building Internet Firewalls by D. B. Chapman and E. D. Zwicky 1995 O Reilly Associates Inc. The contents of those references are incorporated herein by reference.

The network is a conventional network and includes a plurality of workstations and . These workstations may be in different departments e.g. marketing manufacturing design engineering and customer service departments within a single company. In addition to the workstations connected via the network there is a workstation which is not directly connected to the network . Information in a database stored in a disk may be shared using proper encryption and protocols over the WAN to the workstations connected directly to the network . Also the workstation includes a direct connection to a telephone line and or ISDN and or cable and or wireless network and the database in disk may be accessed through the telephone line ISDN cable or wirelessly. The cable used by this invention may be implemented using a cable which typically is used to carry television programming a cable which provides for high speed communication of digital data typically used with computers or the like or any other desired type of cable.

Information of the business office machines business devices or business office appliances and may be stored in one or more of the databases stored in the disks and . Known databases include 1 SQL databases by Microsoft Oracle and Sybase 2 other relational databases and 3 non relational databases including object oriented databases . Each of the customer service marketing manufacturing and engineering departments may have their own database or may share one or more databases. Each of the disks used to store databases is a non volatile memory such as a hard disk or optical disk. Alternatively the databases may be stored in any storage device including solid state and or semiconductor memory devices. As an example disk contains the marketing database disk contains the manufacturing database disk contains the engineering database and disk contains the customer service database. Alternatively the disks and store one or more of the databases.

In addition to the workstations and being connected to the WAN these workstations may also include a connection to a telephone line ISDN cable or wireless network which provides a secure connection to the machine being monitored diagnosed and or controlled and is used during communication. Additionally if one communication medium is not operating properly one of the others can be automatically used for communication.

A feature of the present invention is the use of a store and forward mode of communication e.g. Internet electronic mail or transmission between a machine and a computer for diagnosing and controlling the machine. Alternatively the message which is transmitted may be implemented using a mode of communication that makes direct end to end connections e.g. using a socket connection to the ultimate destination such as FTP and HTTP.

There is a multi port network interface which allows the digital image forming apparatus to communicate with external devices through at least one network. Reference number represents a telephone ISDN or cable line and numeral represents another type of network. Additional details of the multi port network interface are described with respect to . An interface controller is used to connect an operation panel to a system bus . The operation panel includes standard input and output devices found on a digital image forming apparatus including a copy button keys to control the operation of the copier such as number of copies reducement enlargement darkness lightness etc. Additionally a liquid crystal display may be included within the operation panel to display parameters and messages of the digital image forming apparatus to a user.

A local connection interface is a connection through local ports such as RS232 the parallel printer port USB and IEEE 1394. FireWire IEEE 1394 is described in Wickelgren I. The Facts About FireWire IEEE Spectrum April 1997 Vol. 34 Number 4 pp. 19 25 the contents of which are incorporated herein by reference. Preferably communication utilizes a reliable protocol with error detection and retransmission.

A storage interface connects storage devices to the system bus . The storage devices include a flash memory which can be substituted by a conventional EEPROM and a disk . The disk includes a hard disk optical disk and or a floppy disk drive. There is a connection connected to the storage interface which allows for additional memory devices to be connected to the digital image forming apparatus. The flash memory is used to store semi static state data which describes parameters of the digital image forming apparatus which infrequently change over the life of the copier. Such parameters include the options and configuration of the digital image forming apparatus. An option interface allows additional hardware such as an external interface to be connected to the digital image forming apparatus. A clock timer is utilized to keep track of both the time and date and also to measure elapsed time.

On the left side of the various sections making up the digital image forming device are illustrated. Reference numeral designates a sorter and contains sensors and actuators used to sort the output of the digital image forming device. There is a duplexer which allows a duplex operation to be performed by the digital image forming device and includes conventional sensors and actuators. The digital image forming device includes a large capacity tray unit which allows paper trays holding a large number of sheets to be used with the digital image forming device. The large capacity tray unit includes conventional sensors and actuators.

A paper feed controller is used to control the operation of feeding paper into and through the digital image forming device. A scanner is used to scan images into the digital image forming device and includes conventional scanning elements such as a light mirror etc. Additionally scanner sensors are used such as a home position sensor to determine that the scanner is in the home position and a lamp thermistor is used to ensure proper operation of the scanning lamp. There is a printer imager which prints the output of the digital image forming device and includes a conventional laser printing mechanism a toner sensor and an image density sensor. The fuser is used to fuse the toner onto the page using a high temperature roller and includes an exit sensor a thermistor to assure that the fuser is not overheating and an oil sensor. Additionally there is an optional unit interface used to connect to optional elements of the digital image forming device such as an automatic document feeder a different type of sorter collator or other elements which can be added to the digital image forming device.

The CPU or other microprocessor or circuitry executes a monitoring process to monitor the state of each of the sensors of the digital image forming device and a sequencing process is used to execute the instructions of the code used to control and operate the digital image forming device. Additionally there is 1 a central system control process executed to control the overall operation of the digital image forming device and 2 a communication process used to assure reliable communication to external devices connected to the digital image forming device. The system control process monitors and controls data storage in a static state memory e.g. the ROM of a semi static memory e.g. the flash memory or disk or the dynamic state memory e.g. a volatile or non volatile memory e.g. the RAM or the flash memory or disk . Additionally the static state memory may be a device other than the ROM such as a non volatile memory including either of the flash memory or disk .

The above details have been described with respect to a digital image forming device but the present invention is equally applicable to other business office machines or devices such as an analog copier a facsimile machine a scanner a printer a facsimile server or other business office machines and business office appliance or appliances e.g. a microwave oven VCR digital camera cellular phone palm top computer . Additionally the present invention includes other types of devices which operate using store and forward or direct connection based communication. Such devices include metering systems including gas water or electricity metering systems parking meters vending machines or any mechanical devices e.g. automobiles that need to be monitored during operation or remote diagnosis. In addition to monitoring special purpose machines and computers the invention can be used to monitor control and diagnose a general purpose computer which would be the monitored and or controlled device.

Another sub system of includes a firewall an intranet and a printer connected thereto. In this sub system the functions of sending and receiving electronic messages by the printer and similarly by a copier are performed by 1 circuitry 2 a microprocessor or 3 any other type of hardware contained within or mounted to the printer i.e. without using a separate general purpose computer .

An alternate type of sub system includes the use of an Internet service provider which may be any type of Internet service provider ISP including known commercial companies such as America Online Earthlink and Niftyserve. In this sub system a computer is connected to the ISP through a digital or analog modem e.g. a telephone line modem a cable modem modems which use any type of wires such as modems used over an ISDN Integrated Services Digital Network line ADSL Asymmetric Digital Subscriber Line modems which use frame relay communication wireless modems such as a radio frequency modem a fiber optic modem or a device which uses infrared light waves . Further a business office device is connected to the computer . As an alternative to the business office device and any other device illustrated in a different type of machine may be monitored or controlled such as a digital copier any type of appliance security system or utility meter such as an electrical water or gas utility meter or any other device discussed herein.

Also illustrated in is a firewall connected to a network . The network may be implemented as any type of computer network e.g. an Ethernet or token ring network . Networking software which may be used to control the network includes any desired networking software including software commercially available from Novell or Microsoft. The network may be implemented as an Intranet if desired. A computer connected to the network may be used to obtain information from a business office device and generate reports such as reports showing problems which occurred in various machines connected to the network and a monthly usage report of the devices connected to the network . In this embodiment a computer is connected between the business office device and the network . This computer receives communications from the network and forwards the appropriate commands or data or any other information to the business office device . Communication between the business office device and the computer may be accomplished using wire based or wireless methods including but not limited to radio frequency connections electrical connections and light connections e.g. an infrared connection or a fiber optics connection . Similarly each of the various networks and intranets illustrated in may be established using any desired manner including through the establishment of wireless networks such as radio frequency networks. The wireless communication described herein may be established using spread spectrum techniques including techniques which use a spreading code and frequency hopping techniques such as the frequency hopping wireless technique which is disclosed in the Bluetooth Specification 1.0A available at the World Wide Web site http www.bluetooth.com which is incorporated herein by reference.

Another sub system illustrated in includes a firewall an intranet a computer connected thereto a business office appliance and a copier . The computer may be used to generate reports and request diagnostic or control procedures. These diagnostic and control procedures may be performed with respect to the business office appliance and the copier or any of the other devices illustrated in or used with . While illustrates a plurality of firewalls the firewalls are preferable but optional equipment and therefore the invention may be operated without the use of firewalls if desired.

From the message transfer agent e mail messages are stored in user mailboxes which are transferred to the mail agent and ultimately transmitted to the user at a terminal which functions as a receiving terminal. The user at a terminal may e.g. be a Resource Administrator or a remote controller which may e.g. be notified in the event of equipment failure.

This store and forward process relieves the sending mail agent from having to wait until establishment of a direct connection with the mail recipient. Because of network delays the communication could require a substantial amount of time during which the application would be unresponsive. Such an unresponsiveness is generally unacceptable to users of the application unit. By using e mail as the store and forward process retransmission attempts after failures occur automatically for a fixed period of time e.g. three days . In an alternate embodiment the application can avoid waiting by passing communicating requests to one or more separate threads. Those threads can then control communication with the receiving terminal while the application begins responding to the user interface again. In yet another embodiment in which a user wishes to have communication completed before continuing direct communication with the receiving terminal is used. Such direct communication can utilize any protocol not blocked by a firewall between the sending and receiving terminals. Examples of such protocols include File Transfer Protocol FTP and HyperText Transfer Protocol HTTP .

Public WANs such as the Internet are generally not considered to be secure. Therefore messages transmitted over the public WANs and multi company private WANs should be encrypted to keep the messages confidential. Encryption mechanisms are known and commercially available which may be used with the present invention. For example a C library function crypto is available from Sun Microsystems for use with the Unix operating system. Other encryption and decryption software packages are known and commercially available and may also be used with this invention. One such package is Pretty Good Privacy PGP Virtual Private Network VPN available from Network Associates. Other VPN software is available from Microsoft Corporation.

As an alternative to the general structure of a single computer may be used which functions as the computer interface the mail agent the mail queue and the message transfer agent . As illustrated in the device appliance is connected to a computer which includes the message transfer agent .

A further alternative structure is shown in in which the message transfer agent is formed as part of the device appliance . Further the message transfer agent is connected to the message transfer agent by a TCP IP connection . In the embodiment of the device appliance is directly connected to the TCP IP connection and has an e mail capability. One use of the embodiment of includes using a facsimile machine with an e mail capability e.g. as defined in RFC 2305 a simple mode of facsimile using Internet mail as the device appliance .

The transmitted messages are received by the relay MTA B and if desired stored in a queue of mail C. The mail is then forwarded to the local MTA D of a receiving host . The mail may be placed in one or more of the user mailboxes and subsequently forwarded to the mail agent and finally forwarded to the user at a terminal . If desired the mail may be directly forwarded to the terminal without user interaction.

The various computers utilized by the present invention including the computers and of may be implemented as illustrated in . Further any other computer utilized by this invention may be implemented in a similar manner to the computer illustrated in if desired including the service machine computer and computer of . However not every element illustrated in is required in each of those computers. In the computer includes a CPU which may be implemented as any type of processor including commercially available microprocessors from companies such as Intel AMD Motorola Hitachi and NEC. There is a working memory such as a RAM and a wireless interface which communicates with a wireless device . The communication between the interface and device may use any wireless medium e.g. radio waves or light waves . The radio waves may be implemented using a spread spectrum technique such as Code Division Multiple Access CDMA communication or using a frequency hopping technique such as that disclosed in the Bluetooth specification.

There is a ROM and a flash memory although any other type of non volatile memory e.g. EPROM or an EEPROM may be utilized in addition to or in place of the flash memory . An input controller has connected thereto a keyboard and a mouse . There is a serial interface connected to a serial device . Additionally a parallel interface is connected to a parallel device a universal serial bus USB interface is connected to a universal serial bus device and also there is an IEEE 1394 device commonly referred to as a fire wire device connected to an IEEE 1394 interface . The various elements of the computer are connected by a system bus . A disk controller is connected to a floppy disk drive and a hard disk drive . A communication controller allows the computer to communicate with other computers e.g. by sending e mail messages over a telephone line or a network . An I O Input Output controller is connected to a printer and a hard disk for example using a SCSI Small Computer System Interface bus. There is also a display controller connected to a CRT Cathode Ray Tube although any other type of display may be used including a liquid crystal display a light emitting diode display a plasma display etc.

One feature in the present invention is monitoring how a user uses a target application of an application unit. The term application unit in this instance refers to a system which a user interacts with and controls. The term target application refers to a user controlled system that controls the application unit. For example an application unit may typically be a computer and a target application may then be a software program e.g. a word processor running on the computer which a user operates for example by moving a pointer on a computer screen and clicking on certain command icons to cause the software program to perform certain functions. In this sense an application unit in the present invention may refer to any of workstations shown in running a software program the computer shown in running a software program etc. An application unit may also refer to an image forming device such as any of the digital image forming apparatus facsimile machine and printer in . In this instance each of these application units includes a user interface such as operation panel as shown in which a user interacts with and utilizes to control the application unit. The present invention can monitor a user selecting controls on such an operation panel. As a further example the application unit could also be an appliance such as a microwave oven with an operation panel. An application unit can also refer to any other device including software with which a user interacts and in this case the target application may refer to only one feature of the software with which the user interacts.

Another feature of the present invention is monitoring the user s usage of such a target application of an application unit and communicating data regarding the monitored usage. This data will typically be transmitted by electronic mail by the computer interface of or the computer of or the device appliance of . This data regarding a user s usage of a target application of an application unit can then be utilized in many ways for example in improving software development in monitoring usage of a device e.g. an image forming device discovering user difficulties with appliances and software and determining most frequently used features of application units.

The monitoring system is implemented either only in hardware or using a combination of hardware and software where the combination includes at least one computer readable medium. Examples of computer readable media include but are not limited to compact discs hard disks floppy disks tape magneto optical disks PROMs EPROM EEPROM Flash EPROM DRAM SRAM SDRAM magnetic or optical cards or any type of media suitable for storing electronic information.

Stored on any one or on a combination of computer readable media the present invention includes software for controlling both the hardware and for enabling the system to interact with a human user. Such software in the form of computer code devices may include but is not limited to device drivers operating systems and user applications such as development tools. Such computer readable media further includes the program product of the present invention for monitoring and controlling an application unit. The computer code devices of the present invention can be any interpreted or executable code mechanism including but not limited to scripts interpreters dynamic link libraries classes e.g. Java or C packages e.g. Java or C and complete executable programs.

Another illustrative embodiment of is an office device such as a digital copier where application element is the user interface discussed previously. Application element is a software error tracking system to monitor internal error conditions of the software system. Application element is a mechanical error tracking system to monitor mechanical error conditions such as jam and toner out. All of the applications use the monitoring system and a sending block . As a further example and as noted above the device appliance may be an image forming device such as the digital image forming apparatus facsimile machine or printer shown in . In this instance the user interface may take the form of an operation panel e.g. operation panel as shown in with a plurality of keys and or a touch screen which a user operates to control the image forming device. When the device appliance as shown in is an image forming device with a user interface the present invention can monitor the commands that a user selects. It is to be noted that the device appliance may be any monitored device such as utilities and parking meters or any monitored appliance such as a microwave oven VCR digital camera cellular phone palm top computer etc.

At a designated time the logged data of the events is then sent to the sending block which then communicates such monitored event data to a designated party. The monitoring system may be a monitoring and logging DLL which can be implemented in the device including the device appliance or in another system control element. The protocol processing system may also be implemented in the device including the application unit or device appliance as shown in or may also be implemented as shown in in a computer to which the application unit or device appliance is attached. The present invention may also take the form of computer control codes recorded on a computer readable medium.

One illustrative embodiment of such a user interface used with a digital image forming apparatus facsimile machine or printer is shown in . In this embodiment the present invention monitors each time a user presses one of the control buttons on the operation panel and logs the usage data of such a user s usage for subsequent communication.

As shown in an operation panel includes a touch screen on which various commands appear which an operator selects by touching different portions of the touch screen . The operation panel also includes a 10 key pad and various other control buttons . In the case of an image forming device the control buttons may be commands for e.g. selecting a paper size changing a magnification changing a darkness of a desired image etc.

When the device appliance in is an image forming device and the user interface corresponds to the operation panel as shown in the present invention can monitor the commands shown in that a user selects. The operation panel shown in may with modifications also be an operation panel for a user controlled appliance such as a microwave oven VCR digital camera cellular phone palm top computer etc.

The present invention may be implemented using object oriented technology which is based upon the manipulation of software objects instantiated from software classes. A software class is considered as a user defined type equivalent to normal types such as integer type. The software class is typically declared with data items and procedures or software methods that operate on the data items. Many high level languages including C support the declaration of a class. Software objects instantiated for software classes are called instances of the software classes from which they are instantiated and have all the features or the type of the software class used for instantiation.

An abstract class is a software class that is not intended to be instantiated. The purpose of an abstract class is to define interfaces shared by derived classes through inheritance. An abstract class is frequently used with virtual functions or software methods which declare the interfaces with or without definitions. When a software class derived from an abstract class defines an inherited virtual function of the abstract class the virtual function of the derived software class will be executed even when the instantiated object of the derived software class is accessed through a reference type of the base abstract class. If the function referenced is not a virtual function the base class function or software method will be executed. This technique allows the client or user of the software object to execute the correct function or software method with only the knowledge of the abstract class. Many examples of such techniques are shown in Gamma E. Helm R. Johnson R. and Vlissides J. Addison Wesley Massachusetts 1995 which is incorporated herein by reference in its entirety.

Object Oriented Programming OOP is a programming methodology in which a program is viewed as a collection of discrete objects that are self contained collections of data structures and routines that interact with other objects. As discussed above a class has data items structures and functions or software methods. Data items correspond to variables and literals of prior programming art. Structures are named groupings of related data items and other structures. Software methods correspond to functions and subroutines of prior programming art. An object oriented framework is a reusable basic design structure comprising abstract and concrete classes that assists in building applications.

Pointers used for accessing specific objects data items and software methods are data items which include values of system equivalents of absolute addresses in computer memory. Null pointers or zero pointers are pointer variables or literals which have been assigned a system value for example zero denoting that a specific pointer is currently pointing to a null or non existent item. References and reference variables are generally data items which have values of system equivalents of absolute addresses in computer memory. In programming terminology dereferencing a reference means accessing information at the computer memory address referenced by a pointer or reference.

A compiler is a software program that translates programs written in a high level language such as C or Pascal into an intermediate language or machine language which is specific to a particular computer system configuration. In general programming terminology data items variables and functions or software methods are declared so that a compiler knows specific names the programmer will use in the high level language code to be translated. A compiler typically creates a symbol table to keep track of valid data items variable names function or software method names structures and addresses thereof as space is allocated. This process enables the compiler to assign numeric addresses to references to the data items variables functions or software methods or software structures or to create executable code to enable referencing of the data items variables functions or software methods or software structures during execution of the executable code that is output from the compilation process. For purposes of this invention a declaration of a data item variable function or software method is a declaration of the name of the data item variable function or software method. A definition of the data item variable function or software method is the defining content for the data item variable function or software method. For example the declaration of a software method named draw includes the name and types of interfaces for the software method but not the defining code. The definition of the software method named draw includes the name of the software method any needed data type information information concerning parameters to be passed and the defining code for the software method. In some programming languages a definition is also a declaration.

The three main features of object oriented programming are inheritance encapsulation and polymorphism. Encapsulation and polymorphism have already been described and are already well known in patents relating to object oriented systems. Inheritance allows a programmer to establish a general software class with features which are desirable for a wide range of software objects. For example if a programmer designs a software class shape having certain generalized features such as a closed convex shape and a generalized computable property called draw it is then possible to construct subclasses derived from the superclass shape such as triangles squares and circles all having the shared properties of the parent class shape with additional properties such as the lengths of sides or a radius value. It is also possible for example to have derived subclasses of classes which have additional properties such as a solid circle and a dashed circle.

The class shape is considered a base class in that instantiations of actual objects is performed in its subclasses. The class shape is also considered an abstract class in that it makes no sense to instantiate a shape object since object properties are not fully defined for the class shape. An abstract class is a class from which no objects are instantiated and for which an interface for subclasses is established. The class shape establishes certain properties inherent to all shape subclasses for inheritance purposes. For example an operation named draw of a shape a commonly requested operation among users of shapes can be declared as a software method for the class shape to be inherited in all subclasses of the class shape. A programmer creates new classes derived from the class shape which inherit all desired features of the class shape without rewriting code already written for the class shape. This feature called reusability offers tremendous savings of time and resources in system development maintenance and support.

In many high level programming languages a programmer declares a derived class by providing the name of the class being declared and the names of base classes from which the derived class is to inherit properties. In the shape example discussed previously the class shape is considered to be at a top level of an inheritance hierarchy and is abstract since it makes no sense to instantiate shape objects with no definition of an actual shape for example a square or a circle. Subclasses declared a level below the class shape are the subclasses specifically derived from the class shape such as triangles squares and circles. The subclasses triangles squares and circles are then called children or subclasses of the class shape and the class shape is called a parent or superclass of the classes triangles squares and circles. Declarations of the subclasses specifically refer to the class shape for establishing inheritance. Subclasses a level below the class circle are the subclasses specifically derived from the class circle such as solid circle and dashed circle. The classes solid circle and dashed circle are then called children or subclasses of the class circle and the class circle is called a parent or superclass of the classes solid circle and dashed circle. Declarations of these subclasses specifically refer to the parent class circle for establishing inheritance. Since the class circle is derived from the class shape the derived classes solid circle and dashed circle inherit all features of the class shape and all additional features of the class circle.

In object oriented programming a pure virtual function is a function or software method declared with no defining code in an abstract class. For example in declaring the abstract class shape described previously a programmer declares a pure virtual function named draw with no defining code as a software method for the abstract class shape. Subclasses derived from the abstract class shape inherit the pure virtual function as a virtual function having the same name as the pure virtual function of the parent abstract class. The function name or software method name has executable code defined at some level in subclasses of the parent abstract class.

For the shape example discussed previously assume the abstract class shape has a declaration for the pure virtual function named draw. Using formulas from basic algebra and geometry the actual code executed for drawing a shape differs from one shape to another so the code for the function named draw is defined only in derived base classes used for instantiation of software objects. In C the virtual function is declared as a virtual function in all abstract subclasses to be used as superclasses for derived subclasses from which objects are to be instantiated with defining code for the virtual function of the abstract classes. For example drawing a circle requires plotting points equidistant from a center point. Drawing a square generally requires plotting points to form four straight sides having equal length which are connected at right angles. Therefore a request to draw a particular shape needs to accommodate the different properties of various desired shapes. Using a pure virtual function named draw in the abstract class shape the code for drawing a circle is included as a software method named draw for instantiated circle software objects and the code for drawing a square is included as a software method named draw for instantiated square software objects. A reference to a software object instance of the software method named draw causes execution of the code to draw the shape represented by the software object instance. For this example the shape of a circle is drawn if the code for an instantiated circle object is accessed and a square is drawn if the code for an instantiated square object is accessed.

In C the code for the desired software method named draw is accessible by using a format including a reference to the desired circle or square instantiated software object and the name draw. A comprehensive discussion of the pure virtual function property of abstract classes in C is provided in Stroustrup B. Addison Wesley Massachusetts 1994 in Stroustrup B. Addison Wesley 2000 and in Meyers S. 50 Addison Wesley Massachusetts 1992 all of which are incorporated herein by reference in their entirety.

Some object oriented programming languages support multiple inheritance wherein a software class derived from plural existing parent software classes inherits attributes and software methods from all parent software classes included in the desired derivation. As discussed above with regard to inheritance a child subclass is declared by supplying the name of the class to be declared and the names of the desired parent base classes for multiple inheritance. Additional properties for the child subclass are then declared and or defined.

A comprehensive discussion of OOP is provided in Coad P. and Yourdon E. Prentice Hall Inc. New Jersey 1991 and in Booch G. Addison Wesley Longman Calif. 1994 which are incorporated herein by reference in their entirety.

In general an application as shown in or an application of communicates through an interface . The interface specifies the Application Programming Interface API for the system management architecture e.g. how information is passed via a C function call to the software object s in a system manager with the same names . The functions to be used by the software application may be declared as follows 

When the interface receives an application ID through the interface function setApplicationID as described above the system manager passes the information to a system resource interface of a system resource that in turn passes the application ID information to a system registry to be stored.

An event logger records relevant information such as user ID application ID cumulative session number start time duration and sequence of events with the elapsed times when requested through the system manager . The event logger supports functions including initialize storeEvent stopMonitoring and getEventData .

The initialize function receives a reference to the system resource interface of the system resource . The system manager calls the initialize function when startMonitoring is called by the application . The initialize function passes to the event logger the reference to the system resource interface . The reference to the system resource interface allows access to the system registry to obtain the application ID and to a system clock . The event logger handles the cumulative number of usages reads the clock to store the start time in order to compute the elapsed time and duration and sets up the user information by examining the registry.

After initialization the storeEvent function can be called with a string parameter for the event passed by recordEvent . The event logger stores the event string and the elapsed time from the start time recorded during the initialize function call .

After the application has completed its usage monitoring it calls the stopMonitoring function so that the duration can be computed. If multiple sessions are stored this function stops the recording of a corresponding session.

In this example the elapsed time is the time from the startMonitoring function call to the recordEvent function call where there can be more than one elapsed time interval in one monitoring session. The duration is the amount of time measured from the startMonitoring function call to the stopMonitoring function call. In order to compute elapsed time and duration the system tracks the starting time internally and computes the difference between the starting time and the function calling time.

The function selectFormatProtocol specifies the data format to be used to describe the monitored event data and the protocol to send the data to the destination. Table 1 describes the data format values and Table 2 describes the communication protocol values.

As discussed above shows the interface functions of the abstract class EventData returned by the function getEventData . The interface function of the abstract class EventData preferably describes what the function should do but does not provide the method to perform that function. The classes which are derived from the abstract class EventData preferably provide the method to perform those functions. Thus when the function getEventData returns an abstract class EventData it is actually returning a class derived from the abstract class EventData which will provide the method for the interface functions. When the interface functions of the abstract class EventData are used it is actually the interface functions of the derived class of the abstract class EventData that are used. However it does not matter to the user of the abstract class EventData which derived class is being used. This allows flexibility for the representation of the abstract class EventData.

When the sendFileWithProtocol function is called a specified file is sent through either SMTP or FTP after being formatted by the data format processor and by protocol processor that uses an SMTP resource and an FTP resource in the system resource . In some cases the user has an option to save the file in a specified local disk. The values in Tables 1 and 2 are used to describe the file attribute or data format and communication protocol used to send the file.

The format and protocol information base system implemented as any one or a combination of package DLL static library etc. stores the data format and communication protocol information and checks the combination of formats and protocols to determine valid combinations and sets the values to correct values or default values when the passed data are not correct. To facilitate the storage process the storeFormatAndProtocol function accepts two parameters i.e. one for data format and one for communication protocol .

The format and protocol information base system also includes a getFormatAndProtocolVector function which returns a data format and associated vector of communication protocols. The getFormatAndProtocolVector function is mainly used for sequence monitoring. The returned value is a boolean value where a value of true indicates that valid parameters were returned and a value of false indicates that no more data is available. The returned parameters are of data types int and vector of int. The first returned parameter of data type int refers to the data format while the second returned parameter of data type vector of int refers to the vector of communication protocols for the data format. When there is no selectFormatProtocol function call the getFormatAndProtocolVector function returns the default setting. As would be evident other collections or lists e.g. a list template may be used in place of a vector.

Sending the file involves using the function verifyFormatProtocol of the interface . The verifyFormatProtocol function checks the combination of the data format and communication protocol. If the combination is not determined to be valid the system automatically changes the values to an acceptable combination.

The data format processor formats the data into a specified data format which is derived from an abstract class format. One exemplary function is the formatData function that receives a pointer to the abstract class EventData or two strings. The returned value is a pointer to an abstract class FormattedData. The interface to a FormattedData abstract class is defined as in .

As discussed above shows the interface functions of the abstract class FormattedData returned by the function formatData . The interface function of the abstract class FormattedData preferably describes what the function should do but does not provide the method to perform that function. The classes which are derived from the abstract class FormattedData preferably provide the method to perform those functions. Thus when the function formatData returns an abstract class FormattedData it is actually returning a class derived from the abstract class FormattedData which will provide the method for the interface functions. When the interface functions of the abstract class FormattedData are used it is actually the interface functions of the derived class of the abstract class FormattedData that are used. However it does not matter to the user of the abstract class FormattedData which derived class is being used. This allows flexibility for the representation of the abstract class FormattedData.

The protocol processor outputs the formatted data through the specified communication protocol. In one embodiment the protocol processor also encrypts the body of the message. To output the data a processFormattedData function is called with an input pointer to the abstract class FormattedData and a reference to the system resource interface . The processFormattedData function returns a boolean value where a value of true indicates no errors and a value of false indicates the existence of an error while processing the formatted data.

The components of the system resource supply important information shared by the various components of the monitoring process and persistent information across the execution of the DLL. Some of the important information is timer information provided through the system clock . The system registry for recording necessary information which is required to send out the monitored information is another component of the system resource . Many registry entries are set up at installation time. An exemplary structure for the registry is HKEY LOCAL MACHINE SOFTWARE RicohMonitor XXX ApplicationID In this exemplary structure XXX represents the application ID and the following variables are placed in the registry under the XXX tree CumulativeUsage Local Directory UserID SMTP Server Recipients From FTP Server FTP User FTP Password FTP Target Path etc. In a preferred embodiment CumulativeUsage is an integer and the rest of the variables are strings.

More specifically illustrates a calling sequence of the interface functions from application software within an application unit appliance or device when a sequence of events are monitored. The application software may be e.g. element or discussed previously with regard to or element as discussed previously with regard to . In step 1 the application software calls the function setApplicationID to send the name of the software application to the monitoring DLL. In step 2 the application e.g. calls the function startMonitoring to inform the monitoring DLL to start monitoring the usage of the software application . In step 3 upon the occurrence of an event the application calls the function recordEvent to inform the monitoring DLL to record the event and time elapsed from the start time. In step 4 the application calls the function selectFormatProtocol to inform the monitoring DLL which data format and communication protocol should be used to format and send data regarding the monitoring of the application . In step 5 upon closing the application the application calls the stopMonitoring function to inform the monitoring DLL that the software application is terminating. As indicated previously the monitoring DLL obtains and maintains the duration of the execution of the software application . In step 6 the monitoring system i.e. the monitoring DLL sends the monitored usage information to a specified destination.

Although describes sending the monitored information each time an application stops monitoring in an alternate embodiment information is sent only upon a secondary event happening e.g. elapsed time or after a number of events or monitoring sessions have occurred . Also the protocol includes saving the monitored information in a local storage medium such as a hard disk.

The advantage of using the abstract classes is shown in the following listing of the source code fragments 

Although there are five different protocol processors and in the code needs to reference only the abstract class CAbsProtocolProcessor . New protocol processors can be easily added without changing the above code through a derived class of CAbsProtocolProcessor .

This invention may be conveniently implemented using a network of conventional general purpose digital computers and or microprocessors programmed according to the teachings of the present specification as will be apparent to those skilled in the computer art from reading the above descriptions regarding the figures. Appropriate software coding can readily be prepared by skilled programmers based on the teachings of the present disclosure as will be apparent to those skilled in the software art. The invention may also be implemented by the preparation of application specific integrated circuits or by interconnecting an appropriate network of conventional component circuits as will be readily apparent to those skilled in the art.

The present invention includes a computer program product which is a storage medium including instructions which can be used to program a computer or other device or a plurality of networked computers or other devices to perform a process of the invention. The storage medium can include but is not limited to any type of disk including floppy disks optical discs CD ROMs and magneto optical disks ROMs RAMs PROMs EPROMs EEPROMs magnetic or optical cards or any type of media suitable for storing electronic instructions.

Stored on any one or on a combination of computer readable media the present invention includes software for driving a device or devices for implementing the invention. Such software may include but is not limited to device drivers operating systems development tools and applications software. Such computer readable media further includes the computer program product of the present invention. The instructions stored on the computer program product drive a device or devices for implementing the invention. This device or these devices have been described or are known to those of ordinary skill in the art. The computer code devices of the present invention can be any interpreted or executable code mechanism including but not limited to scripts interpreters dynamic link libraries Java classes and complete executable programs.

Obviously numerous modifications and variations of the present invention are possible in light of the above teachings. It is therefore to be understood that within the scope of the appended claims the invention may be practiced otherwise than as specifically described herein.

