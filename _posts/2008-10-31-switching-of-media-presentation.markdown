---

title: Switching of media presentation
abstract: A system and method for switching presentation of media between two or more processes without interruption is described. This system and method can enable a user to enjoy media presented in a process and then switch the presentation of that media to another process without interruption in the media. Further, this system and method can enable a user to switch back and forth between media presentation within one application and another application without interruption.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08453056&OS=08453056&RS=08453056
owner: Microsoft Corporation
number: 08453056
owner_city: Redmond
owner_country: US
publication_date: 20081031
---
This application is a continuation of and claims priority under 35 U.S.C. 120 to U.S. application Ser. No. 10 607 256 filed Jun. 25 2003 the disclosure of which is incorporated by reference herein in its entirety.

Some applications like Web browsers allow computer users to engage in various tasks while also viewing a media file. MSN 8 Internet Software MSN8 for instance allows a user to browse Web pages on the Internet and at the same time view a media file such as a video clip showing the latest sports highlight a music video a graphic visualization or the like. The browsed Web pages and the media are shown within a window typically with the Web pages occupying a large visual space and the media shown in a small visual space within the window. shows an example of a user interface containing a web page and a rendered video .

Typically a lightweight presentation component provides the user with basic controls and services like play stop pause volume control and the like. A component user interface shows an example of some of these basic controls.

The user however may wish to see the media in a larger window with more advanced services. Currently the user can switch the media from being presented within the component user interface which is part of the user interface to another user interface generated by another application which provides advanced services. Once the user selects to switch the media presentation to the full featured presentation application the media can be presented in that application s window.

One problem with this switching however is that the video is temporarily interrupted. This interruption delays the presentation of the media file such that its presentation only resumes in the second application after a noticeable period of time. This interruption can also include a loss in part of the file being presented. An interruption in the presentation of a media file can be distracting to the user and interferes with the user s viewing of the media.

The following description and figures describe a system and method for seamlessly switching rendered media between two user interfaces. This system and method enables a user to switch presentation of a media file from within one user interface to within another user interface without interrupting the presentation.

The system includes a rendering component running within one process that is capable of rendering media for presentation in a visual space of another process.

The same numbers are used throughout the disclosure and figures to reference like components and features.

Currently applications that present media typically also render that media. Presentation of media includes where and how it is presented such in which visual space in a window the colors used the size of the visual space and the like. Rendering of media however involves transformation from bits in a file to pixels on a computer screen. Currently when a user wishes to switch the presentation of media from a first application to a second application the presentation is interrupted. This is because the first application stops rendering the media file and the second application starts rendering the media file causing an interruption in the presentation because this switching of rendering is not seamless.

The following disclosure describes a way to switch presentation of media between a user interface within one process and a user interface within another process without interruption. Presentation of media can be switched from one application or process to another by using a renderer that renders media for both the one application or process and the other application or process. In cases where each application used for presentation of media is in a separate process the terms process and application are usable interchangeably . Because of this when a user desires to switch the presentation of the media file from one application to another the presentation of the media file is not interrupted. The renderer keeps rendering the media file even if where and how the media is presented is changed thereby allowing the switched to application to present the media file without interruption.

The example given in the background discusses one situation in which a user might wish to switch the presentation of a media file from a first application to a second application. The user may wish to do so because she wishes to take advantage of advanced services offered by the second application. The user however can switch the presentation of the media file to many different applications and their processes and for various reasons. The example given in are just examples and are not intended to limit the scope of the invention.

Thus through use of cross process rendering a user can switch between multiple processes some of which contain applications providing basic services with a lightweight presentation component and some of which contain applications providing advanced services with a full featured presentation application without interruption in the presentation of that media.

The computer includes a processing unit to execute applications and memory containing various applications and the processes that contain them. The memory includes volatile and non volatile memory and the applications described in .

Likewise the second application can be one of many different types. One exemplary type of the second application is a full featured presentation application or player which for the purpose of clarity in the following discussion will be referred to interchangeably with the second application .

The Web browser includes a lightweight presentation component . The lightweight presentation component includes a lightweight visual space . The lightweight visual space is used to present media an example of which is shown in . The lightweight visual space comprises a portion of the screen . This portion is controlled by the lightweight presentation component and is used by it to present graphical information to the user. This portion is a space shown as a window or a portion of a window on the screen .

The full featured presentation application includes a renderer and a full visual space . Examples of the full visual space and a user interface of the full featured presentation application are shown in . The full visual space comprises a portion of the screen . The full featured presentation application controls the full visual space and uses it to present graphical information to the user. The space is typically a window or a portion of a window. 

The lightweight presentation component presents media within the lightweight visual space . The rendering of the media for presentation within the lightweight visual space however is performed with the full featured presentation application s renderer . The lightweight visual space represents that part of the visual space within a user interface corresponding to the process in which the Web browser resides that the lightweight presentation component is allotted for media presentation. The lightweight visual space also presents that space in which the renderer will render media for presentation by the lightweight presentation component .

The lightweight presentation component can as stated above be contained within the Web browser . Examples of such include a basic media player an ActiveX control a mini mode player and a media player control for the dashboard in various Web browsers. The lightweight presentation component can also be a stand alone application such as a small application designed to provide basic media playing services. One of the advantages of the lightweight presentation component over the larger full featured presentation application is that it can be more easily contained within an application providing other non media playing services like a Web browser . Another advantage of the lightweight presentation component is that it can be small allowing it to be more easily run from a remote location.

Here the screen shows a desktop with the first application user interface created by the first application the Web browser . The screen also includes a taskbar with a first application taskbar indicator showing that the Web browser is running and in focus.

The first application process user interface includes the visual space shown in used by the lightweight presentation component shown in . The visual space is that area in which the lightweight presentation component presents media. In this example the media presented is a moving figure of a woman singing a song the media being entitled Twain .

Thus shows an example of the operation of the Web browser and its lightweight presentation component each of which is interacting with the user through the screen .

Here the screen shows a desktop with the full featured user interface created by the full featured presentation application . The screen also includes the taskbar with the Web browser taskbar indicator showing that the Web browser is running but not in focus and a full featured presentation application indicator showing that the full featured presentation application is running and in focus.

In the Web browser s user interface is partially obscured by the full featured presentation application s user interface . The Web browser user interface is not in focus and is shown without a media file being presented in it. The full featured presentation application user interface however is in focus and interacting with the user. The full featured presentation application user interface is allotted for use by the process in which the full featured presentation application here the Windows Media Player 9 Series shown as an example runs.

The full featured presentation application user interface contains a visual space the full visual space in which the full featured presentation application presents media.

The full featured presentation application is shown presenting the same media file though later in time as shown in the lightweight visual space of . In this example the media presented is the same media file presented in showing a moving figure of a woman singing a song still entitled Twain .

Thus shows an out of focus example of the Web browser s user interface without its lightweight presentation component presenting media and an in focus example of the full featured presentation application s presentation of media in its user interface .

The taskbar presentation application contains another lightweight presentation component . The other lightweight presentation component presents media within the other visual space . The presentation of the media within the other visual space however is performed with rendering provided by the renderer . The lightweight visual space represents that part of the visual space within a user interface corresponding to the process in which the taskbar presentation application resides that the other lightweight presentation component is allotted for media presentation.

The above devices and applications are merely representative and other known devices and programs may be substituted for or added to those shown in and . One example of another known device that can be substituted for those shown in and is the device shown in .

Using the renderer running in the renderer s process shown in the system can present media through various applications even if those applications run in different processes. The system can also switch the media presentation between various applications and their processes without interruption.

The system can for example present a media file in the lightweight component s process with the lightweight presentation component and switch without interruption of the media file to presenting it in the renderer s process with the full featured presentation application in this case the renderer s process shown in . The media file presented in for example can be switched to being presented in without interruption though the applications shown in and do not show it performed without interruption . Thus with the aid of the renderer the lightweight presentation component presents the media file in its visual space and then also with the aid of the renderer the full featured presentation application presents the same media file in its full visual space .

In this example the user is able to switch from an application providing basic services to one providing basic and advanced services. The renderer continues to render the media without interruption in this case enabling the presentation to be moved from the lightweight presentation component s visual space to the larger full featured presentation application s full visual space shown in . Nonetheless the presentation while expanded physically moved and now in a different process is not interrupted.

The media rendered in the full featured presentation application s full visual space is the same media file rendered in though later in time. In actual usage the disclosed method and system enable the image to continue without showing a perceptible delay or hiccup. Thus in actual usage the media shown in the full featured presentation application s full visual space would be the same or imperceptibly later than the media shown in the prior visual space here the lightweight presentation component s visual space . This switching can also be done without skipping over or otherwise failing to present part of the media file.

Here the full featured presentation application provides basic and advanced services to the user such as those services set forth in the user interface shown in . This user interface provides the basic services of pausing stopping advancing reversing and changing the volume for the media file also provided by the lightweight presentation component s user interface . This full featured presentation application s user interface also provides the advanced services of viewing a media guide allowing media to be copied from a CD viewing a media library using a radio tuner copying a file to a CD or other device and other services. While the full featured presentation application provides advanced and basic services and presents in its visual space it relies on the renderer to perform the rendering.

Likewise the system can present a media file in the lightweight component s process with the lightweight presentation component and switch without interruption in the media file to presenting it in the other lightweight component s process with the other lightweight presentation component shown in .

Further the system can present a media file in the renderer s process of with the full featured presentation application and switch without interruption in the media file to presenting it in the lightweight component s process with the lightweight presentation component .

Other combinations of switching presentation between applications and their processes can be performed by the system with the aid of the renderer .

The examples described above show switching of presentation. These examples are not intended to be limiting. As described herein the renderer can be used to enable switching presentation from various applications and their processes each without interrupting the presentation of the media.

Presenting in a Lightweight Component s Process and Switching to a Renderer s or Another Lightweight Component s Process

Prior to or simultaneous with the first block of the diagram the first application is opened. This first application can be one of many different applications as set forth above. In for example the first application is a Web browser. Here the Web browser runs in the lightweight component s process see .

Then or at the same time the system creates the lightweight presentation component block . The lightweight presentation component can be an ActiveX component as shown in the example of the lightweight presentation component in . This lightweight presentation component of is part of the Web browser and utilizes the lightweight visual space which is part of the user interface used by the lightweight component s process and the Web browser . As shown in this example a user can browse the Internet while playing media here the music video shown in though media is not yet being rendered at this stage in the diagram .

With the Web browser and the lightweight presentation component created the system looks up the renderer block . The system can look up the renderer through the lightweight presentation component or the Web browser .

The lightweight presentation component searches for the renderer or the full featured presentation application FFPA in cases where the renderer is part of the full featured presentation application to determine if it is running or not. The lightweight presentation component can do so by searching for a window used by a process in which the renderer resides here the renderer s process of . It can also look for the renderer by checking for a named event that the renderer creates when it first begins to run. Also it can find the full featured presentation application by locating the presence of some operating system registry key that the renderer created when it was created.

At block if the full featured presentation application and the renderer are not running the system proceeds along the No path to block . If they are it proceeds along the Yes path to block .

At block the system hooks together the lightweight presentation component and the renderer . Hooking together the lightweight presentation component and the renderer sets up communication between the two. Because the renderer and the lightweight presentation component are in different processes to set up communication the lightweight presentation component interacts with the operating system. The operating system is outside the lightweight component s and renderer s process and can communicate with each process.

One way in which communication can be set up is by the lightweight presentation component communicating with a running object table of the operating system. In this implementation the lightweight presentation component communicates with the running object table using normal APIs Application Program Interfaces . Through this communication the lightweight presentation component is hooked to the renderer .

With the lightweight presentation component communicating with the operating system and the running object table the operating system can initialize communication with the full featured presentation application or can give information to the lightweight presentation component for it to communicate directly with the full featured presentation application and the renderer . With this communication set up shown in as a line between the lightweight presentation component and the renderer they are hooked .

In other implementations they are hooked using windows messages a component object model COM and remote procedure calls RPCs .

With the lightweight presentation component and the renderer hooked together the renderer can now render video for the lightweight presentation component to present in its lightweight visual space block . The lightweight presentation component may or may not need rendering right away. When the lightweight presentation component requests rendering of a media file for it to present in its visual space the renderer renders the media according to the lightweight presentation component s specifications such as size placement in the visual space and the like . One such example is the music video in the lightweight visual space shown in .

So long as the lightweight presentation component needs the renderer the renderer continues to serve the lightweight presentation component .

At block if the lightweight presentation component still needs the renderer the system proceeds along the Yes path to block . If the lightweight presentation component does not still need the renderer the system continues on the No path to block .

If the lightweight presentation component no longer needs the renderer such as because the user selected to switch the presentation of the media to another lightweight component s process or shut down the lightweight presentation component the first application unhooks the renderer and the lightweight presentation component and destroys the lightweight presentation component .

In for example a user interface and the visual space of the lightweight presentation component are shown. In however the lightweight presentation component has been hidden which is shown in by there no longer being the lightweight presentation component s visual space or its user interface .

In blocks and the system attempts to determine whether or not the system should switch the presentation of the current media file or simply proceed to present a different file if desired to a different process. The system determines whether to switch the presentation to the renderer s process or the other lightweight component s process based on various criteria discussed below.

In block if the last presentation prior to the presentation in the lightweight presentation component s visual space was in the full featured presentation application s visual space the renderer switches the rendering to the full featured presentation application which then presents the media back in the full visual space block . If not it proceeds along the No path to block .

At block the renderer switches rendering from the lightweight presentation component and thus the visual space to the full featured presentation application and thus its full visual space without interruption. The switching shown from to is such an example. The renderer renders the media file for presentation in the lightweight visual space at block and for the full visual space at block . Because the renderer running in block also runs in block the presentation is switched but the rendering is consistently performed by the same application the renderer . Because of this the presentation of the media file is not interrupted. This lack of interruption includes that there is no perceptible space in time that the media file is not being presented. Thus the media file is presented without interruption somewhere on the screen if the media file includes visual media and or without a break in audio presentation if the media file includes audio media. This lack of interruption can also include that there is no perceptible loss of media being presented from the media file.

The renderer can also render a different file for presentation in the full visual space or wait for a request from the full featured presentation application to render a new or the same media file.

If the last presentation of the media file was not in the full visual space the system determines whether or not the last rendered to lightweight component was just destroyed block .

If the last rendered to lightweight component was destroyed the system proceeds along the Yes path to block . If no it proceeds along the No path to block .

At block the system determines if there are any remote lightweight presentation components remaining. The system determines whether any remote lightweight presentation components exist at block and by determining if any other applications have been hooked to the renderer .

Other lightweight presentation components and other applications that are capable of presenting media with the aid of the renderer can be within various processes e.g. the other lightweight component s process each of which a remote application when running in a process other than the process in which the renderer runs . In the example set forth in the other lightweight presentation component is another application found in block that resides within the other lightweight component s process shown in .

At block if the system determines that any lightweight component still exists the system proceeds to render to this other lightweight component block . If not the system shuts down the full featured presentation application and thus also the renderer block .

At block the system through the renderer renders to a lightweight component or remote application found in block or . If there is more than one remote application such as if the system found two remote lightweight components at block the system decides to which application to render media based on factors discussed below.

The system can continue rendering the same media file or another media file. shows an example of the system finding another application the other lightweight presentation component at block . In this example the renderer renders block a different media file than the one rendered in block shown in which the other lightweight presentation component presents in its lightweight visual space .

Prior to block or of this diagram we assume that a media file is being presented in a remote process. This remote process can be the lightweight component s process shown in or another remote process.

The remote process also can be the other lightweight component s process in which the third application the taskbar application runs shown in . In this case however an application capable of offering advanced services would also be present either as part of the renderer s process or another process not shown .

From the remote process a user can switch the presentation to the full featured presentation application . Often a user viewing media with basic services such as shown in that runs in one process such as the lightweight component s process of wants to view the media with advanced services such as shown in . In such a case the system allows the user to switch the presentation of the media file from the lightweight component s process to a process that includes the full featured presentation application shown in FIG. . By so doing the user can enjoy advanced services provided by the full featured presentation application .

At block or the system determines that the user wishes to switch the media to advanced services. At block a lightweight component such as the lightweight presentation component of the lightweight component s process asks the full featured presentation application to present the currently presented media file rather than the lightweight component. The lightweight component can do so for various reasons including the user having selected a button or some other indicator within the lightweight component s user interface showing a desire to present the media with advanced services. In for example the lightweight presentation component contains an advanced services button . If the user selects this button the lightweight presentation component with the system will attempt to switch the presentation of the media file to the full featured presentation application to gain advanced services.

The user can also indicate his or her desire to have the file presented with advanced services by launching the full featured presentation application externally. Thus at block the user could simply attempt to launch the full featured presentation application thereby indicating a desire to switch the media to the full featured presentation application for advanced services.

The full featured presentation application may already be running though this may not be apparent to the user . In the example set forth in the full featured presentation application is running even though there is no indication of such in the taskbar . In this example the renderer runs within the full featured presentation application in the renderer s process see . Thus in this example the full featured presentation application is already launched and is running because the renderer is part of the full featured presentation application and the renderer is rendering media for the lightweight presentation component in the lightweight component s process . In this example the full featured presentation application s advanced user interface and the full visual space are not visible. At block then if the full featured presentation application is not visible the system proceeds along the No path to block .

At block the full featured presentation application shows itself. It can do so by showing the advanced user interface and the full visual space . As part of this showing the full featured presentation application can also indicate that it is running with the full featured presentation application taskbar indicator shown in .

The full featured presentation application may be visible however. In cases where it is visible the system has no need to require the full featured presentation application to show itself such as by showing the full visual space or the advanced user interface . At block then if the full featured presentation application is visible the system proceeds along the Yes path to block .

In either case the full featured presentation application unloads a work context from the lightweight presentation component currently presenting the media file block . The full featured presentation application can do so through the communication previously set up by hooking the renderer to the lightweight presentation component currently presenting the media see . In the ongoing example the full featured presentation application unloads the work context from the lightweight presentation component of the lightweight component s process.

The work context includes information regarding where on the screen the media is being presented as well as customization aspects. This work context can be useful in making the switching as seamless and non disruptive to the user as possible. Through switching of work context the user can experience a similar or customized user interface keep his or her preferences like volume level brightness and the like or even retain specialized aspects of a user interface like colors in the user interface size of the service icons and the like.

Thus the work context is useful in making those preferences of the user from the prior presentation such as from the lightweight presentation component of also represented in the new presentation within the full featured presentation application . At block the full featured presentation application loads the work context within itself.

Based on the lightweight presentation component in which the media file was previously and or currently presented the full featured presentation application customized itself block . The full featured presentation application does so to make the transition from the previous application to the full featured presentation application as visually seamless as possible.

Once the full featured presentation application customizes itself and loads in the prior work context the full featured presentation application presents the media file in the full visual space block . The full featured presentation application can start presenting the media file after the prior presentation in the lightweight presentation component ceases but within an imperceptible amount of time to the user. The full featured presentation application receives the rendering of the media file from the renderer simultaneous with shortly before or shortly imperceptibly after the renderer ceases rendering to the lightweight presentation component . The switch can also be done without loss or interruption of any of the media file.

In the ongoing example the media is continued without interruption in the media playback as approximated in .

The media file can be continued without interruption or a hiccup in part because the renderer does the rendering for presentation in the prior visual spaces such as the lightweight visual space in the lightweight component s process and the full visual space . This continuity allows switching of presentation from one application to another application and from one process to another process without interruption.

Prior to block or of this diagram we assume that a media file is being presented in the full featured presentation application s process the renderer s process of . From this process a user can switch the presentation to a different process such as one having the lightweight presentation component or the other lightweight presentation component . Often a user viewing media with advanced services in one process such as the renderer s process containing the full featured presentation application shown in wants to view the media with basic services. In such a case the system allows the user to switch the presentation of the media file from a process containing the full featured presentation application to a different process.

At block the full featured presentation application receives instructions to switch the presentation from its visual space to a different visual space. These instructions can be directly from a user or inferred by the user s actions.

If the full featured presentation application is currently visible the system proceeds along the Yes path to block . If not it proceeds along the No path to block .

At block the full featured presentation application hides itself. Thus the full featured presentation application s visual space and advanced user interface are deleted from the screen . The full featured presentation application does so to remove clutter from the screen and to not disturb the process in which the lightweight presentation component runs or viewing the future presentation in the lightweight presentation component s visual space. The full featured presentation application can also remove the full featured presentation application taskbar indicator from the taskbar though it can remain installed depending on whether the renderer is part of the full featured presentation application . Examples of this hiding are seen in where no indication of the full featured presentation application existing is shown.

At blocks and the full featured presentation application switches the work context from the full featured presentation application to the lightweight presentation component chosen to continue presenting the media file currently presented in the full featured presentation application s visual space .

First the full featured presentation application unloads the work context from itself block . This work context can be useful in making the switching as seamless and non disruptive to the user as possible. Through switching of work context the user can experience a similar or customized user interface keep his or her preferences like volume level brightness and the like or even retain specialized aspects of a user interface like colors in the user interface size of the service icons and the like.

In block the full featured presentation application loads the work context into the lightweight presentation component that was chosen to present the media file.

Thus in block the renderer renders media to the chosen lightweight presentation component which the lightweight presentation component then presents in its visual space such as the lightweight visual space of or the other lightweight visual space of . The media presented can be an uninterrupted continuation of the media file previously presented in the full featured presentation application s visual space or can be another media file.

Along the blocks and the renderer can render the same or another media file which will be discussed below.

Returning to block a user can request that the full featured presentation application be closed and thus cease the advanced services . The full featured presentation application can close or hide itself based on factors discussed below.

At block the system determines if there are any remote lightweight presentation components running such as the lightweight presentation component or the other lightweight presentation component . This is because the user by closing the full featured presentation application may wish that the current media file be presented by another application such as the Web browser which contains the lightweight presentation component . Also by closing the full featured presentation application the user may want another media file previously presented in another lightweight component to now be presented.

If there are no other lightweight presentation components running the system proceeds along the No path shutting down the full featured presentation application block .

If there is another live lightweight presentation component the system proceeds along the Yes path to block . Here a remote lightweight presentation component is one residing in a process other than the process in which the full featured presentation application resides.

In block the system picks a remote lightweight presentation component to which to render media though this media can be a continuation of the currently rendered media file or another media file. As part of this block the full featured presentation application hides itself similar to block .

If there is more than one remote lightweight presentation component running the system determines to which to switch the rendering of the media file or start rendering another media file . In one implementation the system picks the lightweight presentation component to which the renderer has most recently rendered media.

Once the system has picked a lightweight presentation component to which to render it proceeds to blocks and as set forth above.

Computer further includes a hard disk drive for reading from and writing to a hard disk not shown a magnetic disk drive for reading from and writing to a removable magnetic disk and an optical disk drive for reading from or writing to a removable optical disk such as a CD ROM or other optical media. The hard disk drive magnetic disk drive and optical disk drive are connected to the bus by an SCSI interface or some other appropriate interface. The drives and their associated computer readable media provide nonvolatile storage of computer readable instructions data structures program modules and other data for computer . Although the exemplary environment described herein employs a hard disk a removable magnetic disk and a removable optical disk it should be appreciated by those skilled in the art that other types of computer readable media which can store data that is accessible by a computer such as magnetic cassettes flash memory cards digital video disks random access memories RAMs read only memories ROMs and the like may also be used in the exemplary operating environment.

A number of program modules may be stored on the hard disk magnetic disk optical disk ROM or RAM including an operating system one or more application programs such as the full featured presentation application or the renderer other program modules and program data . A user may enter commands and information into computer through input devices such as a keyboard and a pointing device . Other input devices not shown may include a microphone joystick game pad satellite dish scanner or the like. These and other input devices are connected to the processing unit through an interface that is coupled to the bus . A monitor or other type of display device is also connected to the bus via an interface such as a video adapter . In addition to the monitor personal computers typically include other peripheral output devices not shown such as speakers and printers.

Computer commonly operates in a networked environment using logical connections to one or more remote computers such as a remote computer . The remote computer may be another personal computer a server a router a network PC a peer device or other common network node and typically includes many or all of the elements described above relative to computer . The logical connections depicted in include a local area network LAN and a wide area network WAN . Such networking environments are commonplace in offices enterprise wide computer networks intranets and the Internet.

When used in a LAN networking environment computer is connected to the local network through a network interface or adapter . When used in a WAN networking environment computer typically includes a modem or other means for establishing communications over the wide area network such as the Internet. The modem which may be internal or external is connected to the bus via a serial port interface . In a networked environment program modules depicted relative to the personal computer or portions thereof may be stored in the remote memory storage device. It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.

Generally the data processors of computer are programmed by means of instructions stored at different times in the various computer readable storage media of the computer. Programs and operating systems are typically distributed for example on floppy disks or CD ROMs. From there they are installed or loaded into the secondary memory of a computer. At execution they are loaded at least partially into the computer s primary electronic memory. The invention described herein includes these and other various types of computer readable storage media when such media contain instructions or programs for implementing the blocks described below in conjunction with a microprocessor or other data processor. The invention also includes the computer itself when programmed according to the methods and techniques described herein.

For purposes of illustration programs and other executable program components such as the operating system are illustrated herein as discrete blocks although it is recognized that such programs and components reside at various times in different storage components of the computer and are executed by the data processor s of the computer.

The above described system and method switches presentation of a media file from within one process to within another process without interruption in the presentation of that media file. Although the invention has been described in language specific to structural features and or methodological acts it is to be understood that the invention defined in the appended claims is not necessarily limited to the specific features or acts described. Rather the specific features and acts are disclosed as exemplary forms of implementing the claimed invention.

