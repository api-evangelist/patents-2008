---

title: Managing network errors communicated in a message transaction with error information using a troubleshooting agent
abstract: A method, system, and program for managing network errors communicated in a message transaction with error information using a troubleshooting agent. A network facilitates message transactions between a requester and a responder for facilitating web services. When a non-application specific error occurs in relation to a particular message transaction, such as a network error, a protocol layer assigns an error code and either the requester or responder encodes the error code in the body of an envelope added to the particular message transaction. In particular, the message transaction is an XML message with a Simple Object Access Protocol (SOAP) envelope encoded with the error code to which the XML message is then attached. The error encoded message transaction is forwarded to a troubleshooting agent. The troubleshooting agent facilitates resolution of the non-application specific error and returns a descriptive message indicating the resolution of the non-application specific error to at least one of the requester and the responder.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07664844&OS=07664844&RS=07664844
owner: International Business Machines Corporation
number: 07664844
owner_city: Armonk
owner_country: US
publication_date: 20080820
---
This application is a continuation of commonly assigned U.S. patent application Ser. No. 11 034 304 filed Jan. 12 2005 which is hereby incorporated herein by reference.

The present invention relates in general to improved network error management and in particular to automated self healing within a grid environment. Still more particularly the present invention relates to managing network errors communicated in an XML message transaction using a troubleshooting agent.

Ever since the first connection was made between two computer systems new ways of transferring data resources and other information between two computer systems via a connection continue to develop. In typical network architectures when two computer systems are exchanging data via a connection one of the computer systems is considered a client sending requests and the other is considered a server processing the requests and returning results. In an effort to increase the speed at which requests are handled server systems continue to expand in size and speed. Further in an effort to handle peak periods when multiple requests are arriving every second server systems are often joined together as a group and requests are distributed among the grouped servers. Multiple methods of grouping servers have developed such as clustering multi system shared data sysplex environments and enterprise systems. With a cluster of servers one server is typically designated to manage distribution of incoming requests and outgoing responses. The other servers typically operate in parallel to handle the distributed requests from clients. Thus one of multiple servers in a cluster may service a client request without the client detecting that a cluster of servers is processing the request.

Typically servers or groups of servers operate on a particular network platform such as Unix or some variation of Unix and provide a hosting environment for running applications. Each network platform may provide functions ranging from database integration clustering services and security to workload management and problem determination. Each network platform typically offers different implementations semantic behaviors and application programming interfaces APIs .

Merely grouping servers together to expand processing power however is a limited method of improving efficiency of response times in a network. Thus increasingly within a company network rather than just grouping servers servers and groups of server systems are organized as distributed resources. There is an increased effort to collaborate share data share cycles and improve other modes of interaction among servers within a company network and outside the company network. Further there is an increased effort to outsource nonessential elements from one company network to that of a service provider network. Moreover there is a movement to coordinate resource sharing between resources that are not subject to the same management system but still address issues of security policy payment and membership. For example resources on an individual s desktop are not typically subject to the same management system as resources of a company server cluster. Even different administrative groups within a company network may implement distinct management systems.

The problems with decentralizing the resources available from servers and other computing systems operating on different network platforms located in different regions with different security protocols and each controlled by a different management system has led to the development of Grid technologies using open standards for operating a grid environment. Grid environments support the sharing and coordinated use of diverse resources in dynamic distributed virtual organizations. A virtual organization is created within a grid environment when a selection of resources from geographically distributed systems operated by different organizations with differing policies and management systems is organized to handle a job request. A grid vendor may develop a grid environment to which a buyer may submit grid jobs for example.

The open standards for Grid technologies describe a grid architecture. In the grid architecture physical resources are managed by web services and open standards enable interfacing between web services and grid services. Grid applications interface with grid services.

Currently many services provided through the Internet are already implemented through web services. The basis of web service communication is the Extensible Markup Language XML . XML technology functions on the premise that data freely flows between two points referred to as the requester and the responder.

A problem with XML based web services however is that when the requester s request is not delivered to the responder destination the requester does not have an ability to manage communication errors. In particular error determination in XML transactions referred to as message transactions is typically handled at the protocol level. Errors handled at the protocol level however are typically assigned a generic error code that does not provide the responder with sufficient information to then handle the error or imposes on the application developer the responsibility to write applications that will respond to protocol level errors. In particular requiring the responder application to handle non application specific errors such as a generic protocol based error indicating a network problem is not advantageous.

For a grid environment to efficiently provide services it would be advantageous for grid resources and grid services to self heal. Thus as more grid services are created that interface with web services it would be advantageous for error handling of network errors and other non application specific errors to occur at the web services level by an agent rather than relying on the requester or responder applications to understand generic errors and it would be advantageous for the error handling to provide information and responses that are more detailed and facilitate network self healing.

In view of the foregoing the present invention in general provides for improved network error management and in particular provides for automated self healing within a grid environment. Still more particularly the present invention relates to managing network errors communicated in an XML message transaction as part of a web service using a troubleshooting agent.

In one embodiment a network facilitates message transactions between a requester and a responder for facilitating web services. When a non application specific error occurs in relation to a particular message transaction such as a network error a protocol layer assigns an error code and either the requester or responder encodes the error code in the body of an envelope added to the particular message transaction. In particular the message transaction is an XML message with a Simple Object Access Protocol SOAP envelope encoded with the error code to which the XML message is then attached. The error encoded message transaction is forwarded to a troubleshooting agent. The troubleshooting agent facilitates resolution of the non application specific error and returns a descriptive message indicating the resolution of the non application specific error to at least one of the requester and the responder.

In particular in facilitating resolution of the non application specific error the troubleshooting agent applies rules and policies according to message processing guidelines. Rules and policies specify the available responses to an error type and message processing guidelines indicate which of the available responses can be taken. One available is delegation of the non application specific error to a troubleshooting agent or service providing more specific error resolution.

In particular message transactions may occur at a web services layer in the grid environment architecture such that by handling the error at the web services layer grid services are not required to handle the error. However the troubleshooting agent may also pass the non application specific error to a grid service that facilitates autonomic self healing of the grid environment at the grid services level of the grid environment architecture.

Referring now to the drawings and in particular to there is depicted one embodiment of a computer system which may be implemented in a grid environment and in which the present invention may be implemented. As will be further described the grid environment includes multiple computer systems managed to provide resources. Additionally as will be further described the present invention may be executed in a variety of computer systems including a variety of computing systems mobile systems and electronic devices operating under a number of different operating systems managed within a grid environment.

In one embodiment computer system includes a bus or other device for communicating information within computer system and at least one processing device such as processor coupled to bus for processing information. Bus may include low latency and higher latency paths connected by bridges and adapters and controlled within computer system by multiple bus controllers. When implemented as a server system computer system typically includes multiple processors designed to improve network servicing power.

Processor may be a general purpose processor such as IBM s PowerPC processor that during normal operation processes data under the control of operating system and application software accessible from a dynamic storage device such as random access memory RAM and a static storage device such as Read Only Memory ROM . The operating system may provide a graphical user interface GUI to the user. In one embodiment application software contains machine executable instructions that when executed on processor carry out the operations depicted in the flowcharts of and others operations described herein. Alternatively the steps of the present invention might be performed by specific hardware components that contain hardwired logic for performing the steps or by any combination of programmed computer components and custom hardware components.

The present invention may be provided as a computer program product included on a machine readable medium having stored thereon the machine executable instructions used to program computer system to perform a process according to the present invention. The term machine readable medium as used herein includes any medium that participates in providing instructions to processor or other components of computer system for execution. Such a medium may take many forms including but not limited to non volatile media volatile media and transmission media. Common forms of non volatile media include for example a floppy disk a flexible disk a hard disk magnetic tape or any other magnetic medium a compact disc ROM CD ROM or any other optical medium punch cards or any other physical medium with patterns of holes a programmable ROM PROM an erasable PROM EPROM electrically EPROM EEPROM a flash memory any other memory chip or cartridge or any other medium from which computer system can read and which is suitable for storing instructions. In the present embodiment an example of a non volatile medium is mass storage device which as depicted is an internal component of computer system but will be understood to also be provided by an external device. Volatile media include dynamic memory such as RAM . Transmission media include coaxial cables copper wire or fiber optics including the wires that comprise bus . Transmission media can also take the form of acoustic or light waves such as those generated during radio frequency or infrared data communications.

Moreover the present invention may be downloaded as a computer program product wherein the program instructions may be transferred from a remote virtual resource such as a virtual resource to requesting computer system by way of data signals embodied in a carrier wave or other propagation medium via a network link e.g. a modem or network connection to a communications interface coupled to bus . Virtual resource may include a virtual representation of the resources accessible from a single system or systems wherein multiple systems may each be considered discrete sets of resources operating on independent platforms but coordinated as a virtual resource by a grid manager. Communications interface provides a two way data communications coupling to network link that may be connected for example to a local area network LAN wide area network WAN or an Internet Service Provider ISP that provide access to network . In particular network link may provide wired and or wireless network communications to one or more networks such as network through which use of virtual resources such as virtual resource is accessible as provided within a grid environment . Grid environment may be part of multiple types of networks including a peer to peer network or may be part of a single computer system such as computer system .

As one example network may refer to the worldwide collection of networks and gateways that use a particular protocol such as Transmission Control Protocol TCP and Internet Protocol IP to communicate with one another. Network uses electrical electromagnetic or optical signals that carry digital data streams. The signals through the various networks and the signals on network link and through communication interface which carry the digital data to and from computer system are exemplary forms of carrier waves transporting the information. It will be understood that alternate types of networks combinations of networks and infrastructures of networks may be implemented.

When implemented as a server system computer system typically includes multiple communication interfaces accessible via multiple peripheral component interconnect PCI bus bridges connected to an input output controller. In this manner computer system allows connections to multiple network computers.

Additionally although not depicted multiple peripheral components and internal external devices may be added to computer system connected to multiple controllers adapters and expansion slots coupled to one of the multiple levels of bus . For example a display device audio device keyboard or cursor control device may be added as a peripheral component.

Those of ordinary skill in the art will appreciate that the hardware depicted in may vary. Furthermore those of ordinary skill in the art will appreciate that the depicted example is not meant to imply architectural limitations with respect to the present invention.

With reference now to a block diagram illustrates one embodiment of the general types of components within a grid environment. In the present example the components of a grid environment include a client system interfacing with a grid management system which interfaces with server clusters servers workstations and desktops data storage systems and networks . For purposes of illustration the network locations and types of networks connecting the components within grid environment are not depicted. It will be understood however that the components within grid environment may reside atop a network infrastructure architecture that may be implemented with multiple types of networks overlapping one another. Network infrastructure may range from multiple large enterprise systems to a peer to peer system to a single computer system. Further it will be understood that the components within grid environment are merely representations of the types of components within a grid environment. A grid environment may simply be encompassed in a single computer system or may encompass multiple enterprises of systems.

The central goal of a grid environment such as grid environment is organization and delivery of resources from multiple discrete systems viewed as virtual resource . Client system server clusters servers workstations and desktops data storage systems networks and the systems creating grid management system may be heterogeneous and regionally distributed with independent management systems but enabled to exchange information resources and services through a grid infrastructure enabled by grid management system . Further server clusters servers workstations and desktops data storage systems and networks may be geographically distributed across countries and continents or locally accessible to one another.

In the example client system interfaces with grid management system . Client system may represent any computing system sending requests to grid management system . In particular client system may send virtual job requests or requests for a quote RFQs and jobs to grid management system . Further while in the present embodiment client system is depicted as accessing grid environment with a request in alternate embodiments client system may also operate within grid environment .

While the systems within virtual resource are depicted in parallel in reality the systems may be part of a hierarchy of systems where some systems within virtual resource may be local to client system while other systems require access to external networks. Additionally it is important to note that systems depicted within virtual resources may be physically encompassed within client system .

To implement grid environment grid management system facilitates grid services. Grid services may be designed according to multiple architectures including but not limited to the Open Grid Services Architecture OGSA . In particular grid management system refers to the management environment which creates a grid by linking computing systems into a heterogeneous network environment characterized by sharing of resources through grid services.

In particular as will be further described grid management system may include agents and services that facilitate autonomic self healing within grid environment when errors occur at any level. In addition as will be further described one level of the grid architecture includes web services. When non application specific errors occur in the delivery of message transactions occurring at the web services level according to an advantage the message transaction not properly delivered because of the error is attached to a SOAP envelope where the SOAP envelope encodes the error. Then the message transaction with error information is forwarded to a troubleshooting agent that facilitates error resolution. In facilitating error resolution the troubleshooting agent may forward the message transaction with error information to one of the agents or services within grid management system that facilitates autonomic self healing to resolve the error.

Referring now to a block diagram illustrates one example of an architecture that may be implemented in a grid environment. As depicted an architecture includes multiple layers of functionality. As will be further described the present invention is a process which may be implemented in one or more layers of an architecture such as architecture which is implemented in a grid environment such as the grid environment described in . It is important to note that architecture is just one example of an architecture that may be implemented in a grid environment and in which the present invention may be implemented. Further it is important to note that multiple architectures may be implemented within a grid environment.

Within the layers of architecture first a physical and logical resources layer organizes the resources of the systems in the grid. Physical resources include but are not limited to servers storage media and networks. The logical resources virtualize and aggregate the physical layer into usable resources such as operating systems processing power memory I O processing file systems database managers directories memory managers and other resources. Next a web services layer provides an interface between grid services and physical and logical resources . Web services layer implements service interfaces including but not limited to Web Services Description Language WSDL Simple Object Access Protocol SOAP and extensible mark up language XML executing atop an Internet Protocol IP or other network transport layer. As will be further described when the network transport layer returns an error code web services layer enhances the XML message transaction with a SOAP envelope describing the error code forwards the XML message transaction with error information to a troubleshooting agent.

Further the Open Grid Services Infrastructure OSGI standard builds on top of current web services by extending web services to provide capabilities for dynamic and manageable Web services required to model the resources of the grid. In particular by implementing OGSI standard with web services grid services designed using OGSA are interoperable. In alternate embodiments other infrastructures or additional infrastructures may be implemented a top web services layer .

Grid services layer includes multiple services the combination of which may implement grid management system . For example grid services layer may include grid services designed using OGSA such that a uniform standard is implemented in creating grid services. Alternatively grid services may be designed under multiple architectures. Grid services can be grouped into four main functions. It will be understood however that other functions may be performed by grid services. First a resource management service manages the use of the physical and logical resources. Resources may include but are not limited to processing resources memory resources and storage resources. Management of these resources includes scheduling jobs distributing jobs and managing the retrieval of the results for jobs. Resource management service monitors resource loads and distributes jobs to less busy parts of the grid to balance resource loads and absorb unexpected peaks of activity. In particular a user may specify preferred performance levels so that resource management service distributes jobs to maintain the preferred performance levels within the grid.

Second information services manages the information transfer and communication between computing systems within the grid. Since multiple communication protocols may be implemented information services manages communications across multiple networks utilizing multiple types of communication protocols.

Third a data management service manages data transfer and storage within the grid. In particular data management service may move data to nodes within the grid where a job requiring the data will execute. A particular type of transfer protocol such as Grid File Transfer Protocol GridFTP may be implemented.

Finally a security service applies a security protocol for security at the connection layers of each of the systems operating within the grid. Security service may implement security protocols such as Open Secure Socket Layers SSL to provide secure transmissions. Further security service may provide a single sign on mechanism so that once a user is authenticated a proxy certificate is created and used when performing actions within the grid for the user.

Multiple services may work together to provide several key functions of a grid computing system. In a first example computational tasks are distributed within a grid. Data management service may divide up a computation task into separate grid services requests of packets of data that are then distributed by and managed by resource management service . The results are collected and consolidated by data management system . In a second example the storage resources across multiple computing systems in the grid are viewed as a single virtual data storage system managed by data management service and monitored by resource management service .

An applications layer includes applications that use one or more of the grid services available in grid services layer . Advantageously applications interface with the physical and logical resources via grid services layer and web services such that multiple heterogeneous systems can interact and interoperate.

With reference now to there is depicted a flow diagram of message transaction where error resolution in message transactions is facilitated by at least one troubleshooting agent. In particular grid services within grid environment and other network environments may communicate using XML. XML is a messaging technology defined by a requester and a responder where standard and extendable data flows between the requester and responder points.

In general in one example a requester communicates with a responder by sending a message transaction in the form of an XML SOAP message. In particular requester passes XML SOAP message to responder and responder passes XML SOAP message to requester via intermediary .

Responses from responder to requester may be categorized as either application specific or non application specific. According to an advantage of the invention non application specific responses which indicate problems are passed to troubleshooting agent relieving the application supporting requester of needing to respond to errors other than errors within the context of the application logic. In the example the non application specific response is network problem sent to troubleshooting agent in an XML SOAP message. Troubleshooting agent then resolves the error with as fine a granularity of error code or message as possible and returns a response to requester a response to responder or a response to intermediary . In an alternate embodiment requester or intermediary may receive the non application specific response of network problem and pass network problem to troubleshooting agent . Response or may include a detailed error code or may include a trusted routing update of the XML SOAP message for example.

As will be further described with reference to network problem is encoded in an XML SOAP message. Requester responder or intermediary forward network problem to troubleshooting agent by adding a SOAP header that directs network problem to troubleshooting agent . Alternatively when the message is application specific the protocol layer for example HTTP handles the error or pushes the error up to the application at requester . In one example the protocol layer assigns an error with a definition from a high level set of error messages or codes that are understood by an application at requester .

In particular at troubleshooting agent the finer granularity of error code or message returned by troubleshooting agent may be more specific than the generic error message or code generated by the protocol. In particular when the message of network problem is passed to troubleshooting agent troubleshooting agent may specify the error with indicators including but not limited to a server is down that the path on the network is blocked network traffic is too high the network has timed out and other indicators of errors preventing the proper receipt of messages because of network problems.

Troubleshooting agent may determine how to resolve and respond to network problem through rules as will be further described with reference to . Rules may allow troubleshooting agent to distribute network problem and other processes to other services and agents. In one example troubleshooting agent may distribute network problem to other troubleshooting agents that are able to resolve more specific errors such as error specific intelligent troubleshooting agent . In addition troubleshooting agent may distribute network problem to a problem determination and solution center to provide additional diagnostics and steps in providing response and response . Further troubleshooting agent may distribute network problem to a network diagnostic service that checks and verifies the problem using specific network diagnostic tools. Moreover troubleshooting agent may distribute network problem to a service availability management agent SAMA which is an autonomic grid service agent for performing self healing within a grid environment when the error is a failure of a grid node. For example U.S. patent application Ser. No. 10 757 270 titled MANAGING ANALYSIS OF A DEGRADED SERVICE IN A GRID ENVIRONMENT commonly assigned to International Business Machines Corporation and hereby incorporated herein by reference describes a SAMA which performs self healing within a grid environment and may also distribute errors to troubleshooting agents that handle non application specific protocol level errors such as troubleshooting agent .

Referring now to a block diagram illustrates an example of the architectural layers of a troubleshooting agent in accordance with the method system and program of the present invention. As illustrated a troubleshooting agent architecture includes multiple layers for handling error resolution and creation of more specific error messages. In general troubleshooting agent implemented through policy driven troubleshooting agent architecture may be physically implemented in multiple systems including but not limited to a SOAP intermediary a service in a grid environment a standalone server or a tightly coupled cluster of servers.

First policies and rules is a layer that includes the policies and rules that govern troubleshooting agent and enable the logic required for troubleshooting agent to perform error resolution. As previously described with reference to policies and rules may be accessed via a network from at least one data storage location such as rules . Policies and rules may include rules defined for any error message or condition which may be raised or occur within a grid environment. Error messages may include ambiguous error indicators general error indicators and specific error indicators. In addition as previously described error messages advantageously include non application specific error indicators however troubleshooting agent may also handle application specific error indicators if rules and policies includes rules for troubleshooting agent to resolve application specific error indicators.

With reference to a textual example of code which defines the rules in policies and rules is depicted. In the example a coded rule handles the error of HTTP 404 Not found as illustrated at reference numeral . The error of HTTP 404 Not found is an ambiguous non application specific error that would be passed to troubleshooting agent . One option for handling the error is troubleshooting agent troubleshooting the path to the host system responder and either ordering corrective action or providing an alert to an alternate agent responsible for the task such as the TCPPingAgent as described at reference numeral . Another option for handling the error where the communication path works but the URL needs to be changed is for troubleshooting agent to perform a trusted update to the requester s message with the new URL once troubleshooting agent updates the URL to the correct host responder then requester and responder could exchange data. For example as an alternate node for updating a URL is indicated at reference numeral .

It will be understood that coded rule provides an illustrative example of a type of rule that may be accessible as part of policies and rules . Rules for additional types of errors and additional types of responses may be included in policies and rules .

Returning now to message processing guidelines provides the guidelines for processing of XML SOAP messages with communication error information by troubleshooting agent . In particular message processing guidelines may include multiple instructions or polices for processing XML SOAP messages with communication error information .

In one example message processing guidelines includes a general guideline for how to interpret the XML SOAP message with communication error information. In one example the guideline requires that troubleshooting agent must first parse the message to obtain the critical error data requestor s identity responder s identity and application identity. For example the message is parsed to obtain the error data of HTTP 404 not found . Based on the parsed error message troubleshooting agent may then analyze polices and rules to determine if troubleshooting agent can achieve a solution or whether troubleshooting agent needs to pass the message to an error specific or problem specific troubleshooting agent.

In addition message processing guidelines includes a more specific guideline for providing and enabling security capabilities to interpret and change messaging routing and message contents. In one example the guideline requires that when analyzing a parsed error message troubleshooting agent determines that to solve the problem the requester s message contents requires an update. Troubleshooting agent would perform the update restricted by the security policy that governs the environment of requester or the policy for a grid environment for example. In one example troubleshooting agent would perform security policy tasks such as authentication and assurance of data integrity by using a digital signature to identify troubleshooting agent and using secure keys to encrypt and decrypt the messages.

Next message processing guidelines includes a more specific guideline for interpreting the rules and polices defined for specific error messages. In one example the guideline requires that troubleshooting agent is controlled by polices and rules which can be statically or dynamically enforced and adjustable to meet the types of error conditions occurring in a particular grid environment or network environment.

Further message processing guidelines includes a more specific guideline for delegating messages to troubleshooters for diagnostic process or forming a troubleshooter hierarchy for different levels of problem solving. In particular the guideline would allow for troubleshooting agent to pass the error on to another agent such as error specific intelligent troubleshooting agent that handles a particular type of error analysis if troubleshooting agent is not able to resolve the error.

Referring now to a block diagram illustrates the contents of an XML SOAP message with communication information that is processed according to message processing guidelines . In the example attachment to SOAP envelope includes an original SOAP body message . In particular when an error is detected the entities sending message to troubleshooting agent create SOAP envelope and attaches attachment . Attachment includes original SOAP body message which is the unmodified SOAP message original directed to the responder.

SOAP header specifies message processing guidelines . In particular SOAP header specifies the roles that troubleshooting agents can play in error resolution the message that troubleshooting agents must handle and the address header with information such as the requester address destination address and intermediaries and each entity s role in the message processing.

SOAP body includes SOAP fault which is the error message generated by a communication protocol layer such as HTTP. In particular the error message generated by a communication protocol layer is encoded in SOAP body .

With reference now to there is depicted a textual example of code which represents a SOAP envelope of an XML SOAP message with communication error information. As illustrated a SOAP envelope code represents SOAP envelope . SOAP envelope code includes header code represented by SOAP header . In the example header code specifies a namespace for the SOAP envelope as http schemas.xmlsoap.org soap envelope and a namespace for SOAP encoding as http schemas.xmlsoap.org soap encoding . In addition header code includes a namespace for a troubleshooting agent errorRecoveryAgent as http hostname.com soap error . In addition SOAP envelope code includes a body code that encodes a fault code representing SOAP body and SOAP fault respectively. In the example fault code specifies a value code that indicates the error message is from the sender a value subcode that indicates the protocol error number of HTTP 404 and a reason code that indicates the reason for the protocol error of not found .

It will be understood that are merely illustrative examples of one method for enhancing an XML SOAP message with communication error information but that other data structures of enhanced SOAP headers SOAP bodies and other code enhancements may be implemented in an XML SOAP message with communication error information. In addition it will be understood that SOAP envelope code provides an illustrative example of the type of coding which may implement the communication error information of an enhanced XML SOAP message but that other coding terms and structures may be implemented. Returning again now to communication troubleshooting facilitates the troubleshooting and recovery process through interaction with other troubleshooting providers. In particular policies and rules for specific errors at troubleshooting agent may require forwarding the error message to another troubleshooting agent able to handle the diagnostic process for the specific type of error such as error specific intelligent troubleshooting agent . As a result error specific troubleshooting agents or a hierarchy of troubleshooting agents process the error message and return a detailed error message or resolve the problem. In one example a first troubleshooting agent receiving an error message may handle simple problems and delegate more complex problems to another troubleshooting agent in the hierarchy.

In addition referring to a decision making and response process handles how to distribute a response to the requester. In particular based on policies and rules decision making and response process may perform multiple steps to distribute responses. In one example decision making and response process informs the requester about the problem with as many details as possible so that the requester can made a decision about the message. For example the requester may decide to reroute the message cancel the message or delay the message. In another example decision making and response process reroutes the message to a destination through a troubleshooting agent recommended route or reroute the message to a new service endpoint. In addition decision making and response process could pass this portion of the process on to other autonomic agents for more in depth analysis and response processing. For example problem determination and solution center provides independent autonomic agents for in depth analysis and response processing.

With reference now to a high level logic flowchart depicts a process and program for passing a problem to a troubleshooting agent for resolution in accordance with the method system and program of the present invention. As illustrated the process performed by the requester intermediary or responder starts at block and thereafter proceeds to block . Block depicts a determination whether an error is detected. If an error is detected then the process passes to block . Block illustrates a determination whether the error is application specific. If the error is application specific then the process passes to block . Block depicts passing the error message to the requester or other agent that processes application specific errors. Otherwise at block if the error is not application specific then the process passes to block . Block depicts applying a SOAP envelope with the error encoded in the body. Next block illustrates forwarding the XML SOAP message with error information to a troubleshooting agent and the process ends.

Referring now to a high level logic flowchart illustrates a process and program for processing an XML SOAP message with error information at a troubleshooting agent in accordance with the method system and program of the present invention. As depicted the process performed by a troubleshooting agent starts at block and thereafter proceeds to block . Block depicts a determination whether the troubleshooting agent receives an XML SOAP message with error information. Once the troubleshooting agent receives an XML SOAP message with error information the process passes to block . Block illustrates parsing the SOAP envelope for the message processing guidelines requester identity and responder identity in the header and for the error in the body of the message. Next block depicts attempting to solve the error based on the rules and policies as directed by the message processing guidelines and the process passes to block .

Block illustrates a determination whether the troubleshooting agent is able to resolve the error. If the troubleshooting agent is able to resolve the error then the process passes to block . Block depicts sending the response to the requester and the process ends. As previously described the response may include an updated message or a specific error code and explanation. In addition the response may include an indicator that the error condition was resolved. Further as previously described returning a response may require the troubleshooting agent to take additional steps to resolve the error.

Returning to block if the troubleshooting agent through the rules and policies available is unable to resolve the error then the process passes to block . Block depicts a determination whether the message processing guidelines allow the troubleshooting agent to delegate the error message to other troubleshooting agents or services. If the message processing guidelines to do not allow the delegation then the process passes to block . Block depicts creating a response indicating the lack of error resolution and the process passes to block . Otherwise at block if the message processing guidelines allow the troubleshooting agent to delegate the error message to other troubleshooting agents or services then the process passes to block .

Block depicts passing the error message to another troubleshooting agent or service. Next block illustrates a determination whether the troubleshooting agent receives a response of an error diagnosis error resolution or system diagnosis. Once the troubleshooting agent receives a response the process passes to block . Block depicts responding to the response and the process passes to block . In particular responding to the response may require taking decision making steps based on the response such as updating the URL for the XML SOAP message.

While the invention has been particularly shown and described with reference to a preferred embodiment it will be understood by those skilled in the art that various changes in form and detail may be made therein without departing from the spirit and scope of the invention.

