---

title: Nested queued transaction manager
abstract: A method and apparatus that manages transactions during a data migration. The transfer of data from an old database to a new database is structured as a set of small transactions. The transactions can be structured in a hierarchy of dependent transactions such that the transactions are nested or similarly hierarchical. A migration manager includes a set of transaction management methods or processes that enable the processing of the nested transactions thereby providing a higher level of granularity in transaction size and providing the ability to rollback small individual transactions as well as affected related transactions. The transaction management methods and processes manage a set of queues that are utilized by the migration manager to generate and execute the nested transactions.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08688628&OS=08688628&RS=08688628
owner: Red Hat, Inc.
number: 08688628
owner_city: Raleigh
owner_country: US
publication_date: 20080229
---
Cross reference is made to a co pending patent application by Bill C. Reimers for DATA MIGRATION MANAGER filed on the same date as the present application and commonly owned. The cross referenced application is incorporated herein by reference.

Embodiments of the present invention relate to management of data migration between two databases. Specifically the embodiments relate to a method and apparatus for managing transactions that transfer the data between the two databases.

Companies often upgrade or transition between database servers and systems to improve database response times or otherwise improve their database performance. Transferring the data from the old database system to the new database system is a time intensive and labor intensive task. In other circumstances data from multiple databases with different schemas need to be merged.

A mapping between the two databases is created to enable a reorganization of the data in the one database to fit the organization of the other or new database. The new database system may have different methods for maintaining or selecting primary and foreign keys organizing and storing tables and other differences from the old database system. The data from each record in the old database is read from the old database and then inserted into the new database according to the mapping.

The transfer of the data is performed by a program in communication with both the old database and the new database. This data transfer program starts a transaction with each database and reads each record from the old database and maps each record to the new database in a single transaction. The execution of this transaction can take a long time depending on the size of the old database. As a result the old and new databases are inaccessible during the transaction and other programs are not able to access or utilize the old or new database. Further the transaction cannot be easily interrupted or stopped. Such occurrences can disrupt the transfer process and corrupt it. Transactions must be completed in their entirety or rolled back. Thus an interrupt of a large transaction forces a large rollback and then a complete restart to the transaction.

Described herein is a method and apparatus for managing transactions during a data migration. The transfer of data from an old database to a new database is structured as a set of small transactions. The transactions can be structured in a hierarchy of dependent transactions such that the transactions are nested or similarly hierarchical. A migration manager includes a set of transaction management methods or processes that enable the processing of the nested transactions thereby providing a higher level of granularity in transaction size and providing the ability to rollback small individual transactions as well as affected related transactions. The transaction management methods and processes manage a set of queues that are utilized by the migration manager to generate and execute the nested transactions.

In the example hierarchy a highest level record may be a bank branch record . The bank branch record includes fields such as a name and location field. The name field stores a name of a particular branch and the location field stores an address or geographical information about a branch e.g. coordinates . Implicit or explicit fields of the record establish relationships with customer records . Fields that reference the customer records are foreign keys which must uniquely identify the appropriate customer records .

The customer record includes fields for the first middle and last name of a customer. Again the record may include explicit or implicit fields that reference the bank branch that the customer belongs to and must include explicit or implicit fields that reference the account records that belong to the customer. The fields that reference the account records are foreign keys which must uniquely identify the appropriate account records belonging to that customer.

The account records include fields specifying a type of account an account number and a balance for each account. The record may also include explicit or implicit fields that reference the customer to which the account belongs.

Each of the records in the database also includes a primary key. A primary key is a unique identifier for each record or row in a table of a database. The primary key can be a single column of a row or a set of columns in the row. For example a specific column of each row in a table or set of related tables in a database includes a unique alpha numeric sequence that serves as a primary key for that row. Instead of a primary key a record can use a unique composite key. Further in some cases a temporary key can be used to map data when a primary key or composite key is not available.

Foreign keys are references between two tables. Foreign keys can be a set of columns in a referencing table that identify a set of columns in a row of another table. The foreign key for any record typically identifies a single record i.e. row in another table. In the example a column in the customer record identifies a specific account record . The foreign key could be the account number or a separate primary key of the account record.

The example set of records helps to illustrate that while each record or a set of the records could be transferred to a new database their inter relationships may require that the transactions be structured in a nested manner. Specifically if a new database utilized a different format for primary and foreign keys then the foreign and primary keys for related records would need to be resolved before the other records could be finalized. A migration manager may start with a first record at the top of the hierarchy in this example bank branch record . It includes a primary key and at least two foreign keys that refer to customer records . In one example the primary key for each record is assumed to form a part of the foreign keys for other records. Thus when processing the top bank branch record as a first transaction two new transactions are initiated to resolve the customer records . The customer records are similarly dependent on foreign keys referencing the account records and . These foreign keys in one example are the account numbers. However in the new database a different account numbering system is utilized. Thus the transfer of the account records and the update of the account numbers need to be resolved before the customer records can be finalized. Additional transactions are then initiated to transfer these records which have no further dependencies.

Once the transactions for the account records are completed the account records will have updated account numbers and the foreign keys and new primary keys for the customer records can be determined. Once the customer records are converted then the bank branch records can be converted and committed using the new primary keys of the customer records as part of the foreign keys in the bank branch records. Thus the recursive or iterative process works its way down a hierarchy of nesting transactions to lower level records dependent from the higher level records and then works its way back up the hierarchy as the lower levels are resolved.

The transaction management methods and processes along with a set of data management structures are utilized to track the state and order the operations necessary to complete the migration of data including the mapping of the data into the new database. In some embodiments to minimize the extent of nesting default values or similar place holder values may be utilized in the mapping of data and the insert operations into the new database. These values are then corrected at a subsequent time after all of the relevant data has been mapped to the format of the new database.

In one embodiment the old database is provided by a server or set of server machines executing a database management system . Any type of database can be provided including relational databases object oriented databases and similar databases. The old database can be of any size and hold any amount of data.

The new database is provided by a server or set of server machines executing another database management system . Any type of database can be provided including relational databases object oriented databases and similar databases. The new database can be of any size and hold any amount of data. Often the new database will have a larger size a different type of organization improved performance characteristics or similar properties that motivate the transition of data from the old database to the new database. . The old database and new database can be provided by the same vendor or different vendors. The old database and new database can also be executed on the same set of server machines or a separate set of server machines.

The migration manager is an application that is executed by a computer in communication with the old database and the new database . In one embodiment the migration manager can be executed on the server or set of servers that provide either the old database or the new database . In another embodiment the migration manager is executed on a separate computer. The migration manager retrieves data from the old database and inserts the retrieved data into the new database . The migration manager maps the data from a format or model utilized by the old database into a format or model utilized by the new database .

The migration manager utilizes a nested transaction manager to manage the transactions that are generated for each set of records. One skilled in the art would understand that the migration manager could include other components or organize these components in other configurations. The embodiment described herein is provided by way of example for sake of clarity and the principles features structures and operations described in relation to this example embodiment can be applied to other configurations and embodiments.

The nested transaction manager includes a data management component and a transaction management component . The data management component encompasses the data structures and storage components that are utilized by the migration manager to track the state and organize the migration of data from the old database to the new database in a set of nested transactions. The transaction management component encompasses a set of methods or programs that manage the transactions and the data in the data management component to enable the nested transactions.

The data management component includes a set of queues including a pre commit queue a rollback queue a pending post commit queue a post commit queue and or similar data structures and storage devices. The nested transaction manager can be configured to utilize or require any sub set of these queues. Similarly the nested transaction manager can be configured to omit any set of these queues.

The pre commit queue is a data structure or storage device that orders and stores a set of actions associated with a transaction that has not yet been committed. The pre commit queue may be a first in first out FIFO queue a stack or last in first out LIFO queue or similar data and storage structure. The pre commit queue tracks actions that are associated with transactions that have not been committed because they are dependent on or rely on other transactions that have not been committed or similar actions.

The post commit queue is a data structure or storage device that stores the actions associated with transactions that have been committed. The post commit queue may be a FIFO LIFO or similar data or storage structure. The post commit queue actions have been executed. The post commit queue can be utilized to track completed actions for logging debugging or rollback methods or for similar functions.

The pending post commit queue is a data structure or storage device that stores the actions associated with transaction that have been committed but the associated actions have not yet been executed. As the actions are executed they are moved to the post commit queue. The pending post commit queue may be a FIFO LIFO or similar data or storage structure.

A rollback queue is a data structure or storage device that tracks or stores a set of actions that may need to be undone in the case of a failure interruption or similar case where a rollback operation is performed. The data tracked in the rollback queue allows the migration manager to perform a rollback operation to return the old database and or the new database to a previous condition or state. Specifically the rollback queue allows for the reversal of recent operations and data structures in the migration manager . The rollback queue may be structured as a FIFO LIFO or similar data structure or storage structure.

This set of queues enables the nested transaction manager to transfer the data of the old database to a new database in a set of small discrete inter related transactions. The queues also enable rollback of transaction involving failed data transfers or similar errors. The queues can be of any size or organization dependent on the characteristics of the database to be transferred and the type of data to be transferred.

The transaction management component includes a set of methods or similar programs including an Enter Transaction method a Leave Transaction method and a Rollback Transaction Method . These methods can be implemented as discrete computer software or hardware components. For example the methods may form an application programming interface API or similar structure. These methods are called by other components such as the data conversion manager to handle the start end and failure of individual transactions.

The enter transaction method is called by the migration manager to initiate a new transaction. The enter transaction method can initiate a new transaction or a nested transaction. The execution of this method is discussed in greater detail herein below in relation to .

The leave transaction method is called by the migration manager to end or exit a transaction including a nested transaction. The leave transaction method alters the data management component queues as detailed herein below in relation to .

The rollback transaction method is called by the migration manager in response to a failure such as a failed insert into the new database or similar occurrence. The rollback transaction method returns the old and new databases to previous states that reverse the effects of the failed operation. The execution of this method is discussed in greater detail below in relation to .

A process of transferring a record can be initiated by the selection or designation of a record for transfer by a user or an application block . The process can receive the record as a parameter or an indicator of the record. The record can then be retrieved using the indicator. Upon receiving the record or record indicator the process initiates a transaction block . A transaction as used herein refers to a discrete unit of interaction with a database management system DBMS or similar system. The transaction is handled in a coherent and reliable way such that it is independent of the processing of other transactions. The transaction is atomic it is either entirely completed or aborted. The DBMS will execute the transaction such that the properties of atomicity consistency isolation and durability are maintained for each transaction.

If a record has not been received in its entirety as a parameter then any portion of the record that was not received as a parameter is read from the old database block . The record from the old database can also be read to check the accuracy of the received record data. In one embodiment any dependencies are determined before or in the process or converting the record to the format of the new database block . Dependencies may be primary keys foreign keys or similar data referenced within the record that requires the conversion or migration of other records or similar actions. For each dependency a separate transaction is initiated block . Such transactions are referred to herein as nested transactions as they will be processed and resolved prior to the current transaction. Any number or levels of nesting can occur. The nesting may be limited to a certain number of levels certain types of records or limited based on similar criteria. In these cases default or dummy values are used in place of the dependent data and then updated at a later time when the dependent records have been migrated.

After each dependent record has been migrated or if no dependencies were found then the record is converted to the format of the new database block . The conversion can be a simple copying of data from one field to another corresponding field or can involve an application of a function or algorithm to derive split combine or similarly generate data that fits the format of the new database record. Primary and foreign keys are updated to fit the format of the new database records and using the already migrated dependent records if necessary.

The converted database record is inserted into the new database. If an error does not occur during the insertion block then the transaction can be committed through a leave transaction method block . If an error occurs during the insertion block or if at any point in the process an error occurs then a rollback transaction method can be called.

The enter transaction method determines whether a transaction is already in progress block . This may be determined by checking a status tracking data structure examination of the data management queues checking for an open communication channel or transaction between the old database and the new database or similar action. If no transaction has been started then a transaction is initiated block . The initiation of the transaction can include the opening of communication between any of the system components related to the transfer of the data the update of the transaction status the initialization or clearing of data management component structures block or similar actions.

In one embodiment if a transaction has already been initiated then the new transaction may be recorded or tracked. Some queues in the data management component may be cleared block or similarly updated. In another embodiment no actions are taken to affect the data management component open a communication channel or similarly affect the migration manager or the component of the migration manager.

The enter transaction method may return the transaction level of the transaction initiated by the process. For example the transaction can be a start or top level of the data hierarchy if it is the first transaction initiated by a user or program for a selected record or a lower level i.e. nested transaction initiated to migrate a dependent record block . Transaction levels can be identified by an alpha numeric value or similar indicator. In another embodiment the enter transaction method similarly records or stores the status of a transaction being open or in progress in a status data structure for other methods to be able to check and verify any transaction information. The level of each currently open transaction can be tracked in a status data structure.

The leave transaction method determines whether the current level of a transaction is a start level transaction block . A start level transaction is a transaction that is not nested. If the current transaction level is not a start level transaction then no further action may be taken block . The specific nested transaction can be labeled as ended in any tracking data structure.

If the leave transaction has been called and the transaction is the top or start level then the leave transaction method attempts to reorganize or update the data management component such as the various queues of the data management component. All pre commit queue entries are executed block . The pre commit queue entries can be moved upon execution or in anticipation thereof to the pending post commit queue block . As the pending post commit queue entries are executed or resolved then the entries are moved to the post commit queue.

A determination is made if the transaction is a top level transaction that is the transaction is at a top of a database hierarchy block . The handling of a top level transaction indicates that the entirety of the dependent records in the database has been migrated. If the transaction is not at the top level the leave transaction is ended block . If the transaction is a top level transaction then the transaction is committed block . A check is then made to determine whether the commit of the transaction was successful block . If the transaction committed successfully then the rollback queue is cleared block . The postcommit entries are run block . The post commit entries can be operations that update foreign keys where default or dummy values were utilized or similar operations appropriate to execute at the time that the migration of the records in the old database has completed. Optionally the mappings between the databases are cleared block . If the commit is not successful then the rollback transaction operation is called block .

The rollback method clears the pending post commit queue block . The pre commit queue is also cleared block . The actions in these queues will not be performed as the rollback method reverts the old and new databases to a prior state. The rollback queue is then executed block . Executing the rollback queue reverses recent operations and returns the old and new databases to a previous state. The rollback of the database transaction is initiated by a command or message to the database management system block .

In one embodiment any mappings associated with the failed transaction or operation are cleared block . The mappings may be instructions or data structures that assist the migration manager in converting records from a format of the old database to that of a new database. However a flaw in a mapping may cause the error that forced the rollback operation. If such an error in mapping is the cause of the rollback it may be automatically cleared or flagged for further review.

In one embodiment in place of the operations that were cleared during the rollback an alternative set of operations may be executed block . These alternate instructions mappings or similar data can attempt to perform the transfer and conversion of the data from the old database to the new database in a different manner. For example instead of using a nested transaction dummy or default values may be used for unresolved fields of a recorded during transfer. Once any associated or faulty mappings are cleared and any alternative code is executed then the rollback operation may be ended.

The exemplary computer system includes a processor a main memory e.g. read only memory ROM flash memory dynamic random access memory DRAM such as synchronous DRAM SDRAM or Rambus DRAM RDRAM etc. a static memory e.g. flash memory static random access memory SRAM etc. and a secondary memory e.g. a data storage device in the form of a drive unit which may include fixed or removable computer readable medium which communicate with each other via a bus .

Processor represents one or more general purpose processing devices such as a microprocessor central processing unit or the like. More particularly the processor may be a complex instruction set computing CISC microprocessor reduced instruction set computing RISC microprocessor very long instruction word VLIW microprocessor processor implementing other instruction sets or processors implementing a combination of instruction sets. Processor may also be one or more special purpose processing devices such as an application specific integrated circuit ASIC a field programmable gate array FPGA a digital signal processor DSP network processor or the like. Processor is configured to execute the migration manager logic for performing the operations and steps discussed herein.

The computer system may further include a network interface device . The computer system also may include a video display unit e.g. a liquid crystal display LCD or a cathode ray tube CRT connected to the computer system through a graphics port and graphics chipset an alphanumeric input device e.g. a keyboard a cursor control device e.g. a mouse and a signal generation device e.g. a speaker .

The secondary memory may include a machine readable storage medium or more specifically a computer readable storage medium on which is stored one or more sets of instructions e.g. migration manager logic embodying any one or more of the methodologies or functions described herein. The logic may also reside completely or at least partially within the main memory and or within the processing device during execution thereof by the computer system the main memory and the processing device also constituting machine readable storage media. The logic may further be transmitted or received over a network via the network interface device .

The machine readable storage medium may also be used to store the migration manager logic persistently. While the machine readable storage medium is shown in an exemplary embodiment to be a single medium the term machine readable storage medium and also computer readable medium should be taken to include a single medium or multiple media e.g. a centralized or distributed database and or associated caches and servers that store the one or more sets of instructions. The terms machine readable storage medium and computer readable medium shall also be taken to include any medium that is capable of storing or encoding a set of instructions for execution by the machine and that cause the machine to perform any one or more of the methodologies of the present invention. The terms machine readable storage medium and computer readable medium shall accordingly be taken to include but not be limited to solid state memories and optical and magnetic media.

In the above description numerous details are set forth. It would be apparent however to one skilled in the art that the present invention may be practiced without these specific details. In some instances well known structures and devices are shown in block diagram form rather than in detail in order to avoid obscuring the present invention.

Some portions of the detailed descriptions that follow are presented in terms of algorithms and symbolic representations of operations on data bits within a computer memory. These algorithmic descriptions and representations are the means used by those skilled in the data processing arts to most effectively convey the substance of their work to others skilled in the art. An algorithm is here and generally conceived to be a self consistent sequence of steps leading to a desired result. The steps are those requiring physical manipulations of physical quantities. Usually though not necessarily these quantities take the form of electrical or magnetic signals capable of being stored transferred combined compared and otherwise manipulated. It has proven convenient at times principally for reasons of common usage to refer to these signals as bits values elements symbols characters terms numbers or the like.

It should be born in mind however that all of these and similar terms are to be associated with the appropriate physical quantities and are merely convenient labels applied to these quantities. Unless specifically stated otherwise in the above discussion it is appreciated that throughout the description discussions utilizing terms such as processing computing generating determining selecting displaying searching receiving updating modifying assigning requesting clearing running committing moving executing closing detecting initiating returning or the like refer to the actions and processes of a computer system or similar electronic computing device that manipulates and transforms data represented as physical electronic quantities within the computer system s registers and memories into other data similarly represented as physical quantities within the computer system memories registers or other such information storage transmission or display devices.

The present invention also relates to an apparatus for performing the operations herein. This apparatus may be specially constructed for the required purposes or it may comprise a general purpose computer selectively activated or reconfigured by a computer program stored in the computer. Such a computer program may be stored in a computer readable storage medium such as but not limited to any type of disk including floppy disks optical disks CD ROMs and magnetic optical disks read only memories ROMs random access memories RAMs EPROMs EEPROMs magnetic or optical cards or any type of media suitable for storing electronic instructions each of which may be coupled to a computer system bus.

The algorithms and displays presented herein above are not inherently related to any particular computer or other apparatus. Various general purpose systems may be used with programs in accordance with the teachings herein or it may prove convenient to construct more specialized apparatus to perform the required method steps. The required structure for a variety of these systems will appeared in the description above. In addition the present invention is not described with reference to any particular programming language. It will be appreciated that a variety of programming languages may be used to implement the teachings of the invention as described herein.

A computer readable medium includes any mechanism for storing information in a form readable by a computer. For example a computer readable medium includes read only memory ROM random access memory RAM magnetic disk storage media optical storage media flash memory devices or other type of machine accessible storage media.

Thus a method and apparatus for managing transactions through a migration manager has been described. It is to be understood that the above description is intended to be illustrative and not restrictive. Many other embodiments will be apparent to those of skill in the art upon reading and understanding the above description. The scope of the invention should therefore be determined with reference to the appended claims along with the full scope of equivalents to which such claims are entitled.

