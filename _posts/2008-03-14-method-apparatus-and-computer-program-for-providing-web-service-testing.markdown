---

title: Method, apparatus, and computer program for providing web service testing
abstract: A method, apparatus, and a computer program product for providing web service testing are provided. The apparatus may include a processor that is configured to provide a user interface for a testing tool accessible in a distributed network architecture. The processor may also be configured to receive selections of an application(s) to be tested that is accessible in a distributed network architecture, a function(s) that is associated with the selected application and a method(s) that is associated with the selected function(s). Additionally, the processor may be configured to receive selections of a test case(s) that is associated with the selected method(s). Moreover, the processor may be configured to automatically conduct the selected test case(s).
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09015592&OS=09015592&RS=09015592
owner: Verizon Patent and Licensing Inc.
number: 09015592
owner_city: Basking Ridge
owner_country: US
publication_date: 20080314
---
With the advent of the Internet there has been a proliferation of web based applications. Each application can have one or more different functions or services. When integrating one or more of these applications one way for the applications to communicate is through the use of web services. This integration and communication may be accomplished by means of XML Simple Object Access Protocol SOAP Web Services Description Language WSDL and Universal Description Discovery and Integration UDDI open standards over an Internet protocol. Web services may be used not only over the Internet but also within a corporation s intranet.

The development of software generally includes several stages. One essential stage in software development including web based applications is effective testing because the proper functionality of the software is key to the satisfaction of the end user. Accordingly it is useful to have a tool that can provide efficient testing of the web service.

There are currently several tools available that provide the testing of web services. However these available testing tools generally suffer from several challenges. First some of the existing testing platforms are not sufficiently flexible in that they may not support the myriad of variations to which web services can be subjected and they may not support some advanced usability features. Second some of the available testing tools may not support the automation of testing. Third some of the existing testing platforms may not allow the testing to take place from a centralized location. Instead the current testing tools are client based and accordingly typically require a download onto the user s system which in turn may require the usage of considerable memory space and are Operating System specific. In this regard there is therefore a need for an improved web testing tool that can address at least some of these challenges in the area of web service testing.

The present invention now will be described more fully hereinafter with reference to the accompanying drawings in which some but not all embodiments of the inventions are shown. Indeed these inventions may be embodied in many different forms and should not be construed as limited to the embodiments set forth herein rather these embodiments are provided so that this disclosure will satisfy applicable legal requirements. Like numbers refer to like elements throughout.

One or more embodiments may be implemented as a method s a system s a device s or a computer program product s . Accordingly an embodiment may take the form of an entirely hardware embodiment an entirely software embodiment or an embodiment combining software and hardware aspects. Furthermore implementations of an embodiment may take the form of a computer program product including a computer readable storage medium having computer readable program instructions e.g. computer software embodied in the storage medium. Any suitable computer readable storage medium may be utilized including hard disks CD ROMs optical storage devices or magnetic storage devices.

A graphical user interface GUI may be generated in accordance with one embodiment in order to provide input to and output from the testing tool. According to one embodiment of the present invention the GUI is generated by the execution of a browser. One browser can be opened to conduct the testing of the web services consistent with one embodiment. According to another embodiment however multiple browsers can be opened at the same time and testing can be conducted via all of the browsers in parallel or in sequence. The browser can be one of the many available web browsers such as but not limited to Internet Explorer Mozilla Firefox and Safari. In embodiments in which multiple browsers are utilized the multiple browsers can all be a single type of browser or can be an assortment of different browsers. Regardless a method in accordance with one embodiment will be hereinafter described in conjunction with a series of displays presented by a GUI. However other embodiments are provided by the apparatus such as the ones described in the following paragraphs.

The central location of the testing tool through its remote residence in a distributed network architecture as shown in is advantageous for at least the following reasons. First the centralization of the testing tool enables it to be a shared application utilized by one or more different users. Accordingly several users can access and share the testing tool at the same time to perform testing without any inconvenience to any of the users. Second the central location of the tool eliminates the requirement for a download of the testing tool onto the user s machine. Therefore a user can maintain and save the memory space on the machine used to conduct the testing for other applications. As such any device that has connectability to a network whether Internet or intranet or otherwise can access the testing tool and conduct testing of desired web services. For example a user who possesses a PDA with low memory capacity can connect to a network in which the testing tool resides and effectively conduct the testing of various desired web services in accordance with one embodiment.

In an exemplary screen shot of a GUI generated by a browser launched by one or more of the user machines for providing access to the web services testing tool shows one or more groups to be tested consistent with one embodiment. According to one embodiment the one or more groups can be in the form of a list. The list of groups can be accessed through Group drop down menu . Each project or application such as VoiceWing whose associated web services are to be tested by the testing tool is designated as a group. The list of groups displays all the current projects available to be tested by the testing tool according to one embodiment. Double arrows provide a means for accessing the attributes of the selected group in greater detail to perform administrative functions as will be shown in below.

As shown in and categories can be added updated and or deleted. Referring to a flowchart illustrating the operations performed to add a category according to an exemplary embodiment is provided. The method includes at operation selecting a group name such as from the Group drop down menu as shown in . Operation provides for accessing the attributes of a selected group such as by clicking the double arrows located next to the Group drop down menu also shown in . This action takes the user to screen shot wherein on the left side frame one or more existing categories can be seen and on the right side frame Category Admin section can be seen consistent with one embodiment. According to one embodiment the one or more existing categories can be a list. At operation a new category name can be entered such as in the Category Name box . Operation provides adding a corresponding URL to the new category such as in the Category URL box . The method further includes selecting the appropriate group from Group Name drop down menu at operation to which the new category will be associated. Operation provides for the submission of the information required to create the new category such as by clicking on the Add New button . Additionally the method may include at operation repeating the first two operations and verifying under the Category drop down menu that the new category has been properly added to the selected category group. This last operation can be performed via either exemplary screen shots or .

Now referring to a flowchart of the operations performed to update a category according to an exemplary embodiment is illustrated. The method includes at operation selecting a group name such as from the Group drop down menu as shown in . Operation provides for accessing the attributes of a selected group such as by clicking the double arrows located next to the Group drop down menu also shown in . This operation takes the user to screen shot wherein on the left side frame one or more existing categories can be seen and on the right side frame Category Admin section can be seen. According to one embodiment the one or more existing categories can be a list. At operation an existing category to be updated is selected such as from Category drop down menu . An existing category to be updated can also be selected such as from Categories drop down menu in accordance with one embodiment. This action will display the category name and URL for the category selected for an update. Operation provides updating the desired attributes of the selected category by submitting the updated information in the appropriate input boxes such as category name in Category Name box and category URL in box . The method may further include at operation submitting the update information for the selected category such as by clicking on the Update button . If desired operation provides for repeating the first three operations and verifying upon selecting the updated category that the selected category has been properly updated.

Referring to a flowchart illustrating the operations performed to delete a category consistent with an exemplary embodiment is provided. The method includes at operation selecting a group name such as from the Group drop down menu as shown in . At operation an existing category to be deleted is selected such as from the Category drop down menu . It should be noted that a selected category cannot generally be deleted unless and until there are no longer web service methods associated with that category. Accordingly operations to illustrate the verification that needs to occur before a category is deleted consistent with one embodiment.

Operation provides for obtaining additional information regarding a category such as by clicking on the double arrows proximately located to the Category drop down menu . At operation an inquiry is made to determine whether the category selected to be deleted has associated methods. If the category has no associated methods the method continues to operation . However if the selected category has at least one associated method the method continues with operation wherein all the methods associated with the selected category are deleted. Flowchart of which illustrates in further detail the method for deleting web methods is discussed below. Operation provides for the return to the selected category screen as in for example screen shot . The method further includes opting to delete the selected category such as by clicking on Delete button in operation . It should be noted that screen shot is an exemplary screen shot according to one embodiment wherein Delete button is disabled. In yet another embodiment Delete button will not be disabled thus allowing it to be selected for the subsequent deletion of a selected category as provided at operation . At operation the first two operations may be repeated to verify the deletion of the selected category.

In an exemplary screen shot of a GUI generated by a browser launched by one or more of the user machines for providing access to the web services testing tool provides for the selection of one or more categories associated with a selected group according to one embodiment. According to one embodiment the one or more existing categories can be a list. As shown in the group project selected from the Group drop down menu is VoiceWing. The list of categories provide the current categories associated with the selected group project e.g. VoiceWing. As mentioned above a category can be thought of as set of modules features associated with a selected group. Furthermore each category can have a set of associated web service methods that implement the functionality of the given category. Each of these web methods can be considered as a function that implements the feature of the selected category or the module related to the selected group. The administrative functions of adding updating and deleting for example performed on the categories as discussed above can also be performed on the web service methods. Moreover it should be understand that a similar interface e.g. a GUI may be provided to facilitate these administrative functions for the web services methods as described above for the administrative functions applicable to categories. These administrative functions are discussed in greater details below.

Referring to a flowchart of the operations performed to add a web service method according to an exemplary embodiment is provided. The method includes at operation selecting a group name such as from a group drop down menu. At operation a category associated with the selected group is selected such as from a category drop down menu. Operation provides for accessing the attributes of a selected category such as by clicking on the double arrows proximately located to the category drop down menu. This operation takes the user to a screen similar to screen shot according to one embodiment wherein on the left side frame one or more existing web service methods can be seen and on the right side frame an administrative section similar to Category Admin section according to one embodiment can be seen. At operation a new web service method name can be provided such as by being entered in an input box similar to the Category Name box according to one embodiment. The method further includes at operation submitting the information for the new method such as by selecting an Add button similar to Add New button according to one embodiment. Operation provides for repeating the first three operations and verifying under the one or more web service methods associated with the selected category that the new method has been properly added to the selected category.

Reference is now made to flowchart of which illustrates the operations performed to update a web service method according to an exemplary embodiment. The method includes at operation selecting a group name such as from a group drop down menu. At operation a category associated with the selected group is selected such as from a category drop down menu. Operation provides for accessing the attributes of a selected category such as by clicking on the double arrows proximately located to the category drop down menu. This operation takes the user to a screen as described and explained above. At operation a web service method to be updated is selected from one or more of web service methods associated with the selected category. Operation provides editing the appropriate attribute s of the selected method. According to one embodiment only the name of the selected web service method is changed in manner similar to updating a selected category as discussed above. The method further includes at operation submitting the new information of the selected method such as by selecting an update button to. Operation provides for repeating the first three operations and verifying upon selecting the updated web service method that the selected method has been properly updated.

Referring now to a flowchart of the operations performed to delete a web service method according to an exemplary embodiment is provided. The method includes at operation selecting a group name such as from a group drop down menu. Operation provides selecting a category such as from a category drop down menu that provides one or more of categories associated with the selected group. At operation the attributes of a selected category are accessed such as by selecting double arrows located next to the category drop down menu. This operation takes the user to a screen that provides one or more web service methods associated with the selected category each method being coupled with a Delete button consistent with one embodiment of the present invention. Each web service method is a hyperlink according to one embodiment. It should be noted that a selected web service method cannot be deleted unless and until there are no longer test cases associated with that method. Accordingly operations to illustrate the verification that needs to occur before a web service method is deleted consistent with one embodiment.

Operation provides for selecting the web service method to be deleted. This operation takes the user to a screen that provides one or more test cases associated with the selected web service method. According to one embodiment the one or more test cases can be a list. At operation an inquiry is made to determine whether the method selected to be deleted has any associated test cases. If the web service method has no associated test cases the method continues to operation . However if the selected method has at least one associated test case the method continues with operations wherein all the test cases associated with the selected web service method are deleted. Screen shot in and accompanying flowchart in which illustrate in further detail the method for deleting test cases are discussed below. Operation provides for returning to the screen display of the list of web service methods as discussed above. The method further includes deleting a web service method such as by selecting the Delete button associated with the web service method to be deleted at operation . At operation the first three operations may be repeated to verify the deletion of the selected method.

In an exemplary screen shot of a GUI generated by a browser launched by one or more of the user machines for providing access to the web services testing tool shows a test case summary page for managing one or more test cases associated with a selected web service method according to one embodiment. By selecting a group and then selecting a category associated with the selected group one or more web service methods will be provided. According to one embodiment the one or more web service methods can be a list of hyperlinks. Selecting a hyperlinked web service method name may cause the display one or more test cases associated with the selected method according to one embodiment. The one or more test cases can also be displayed by selecting an expandable node symbol located next to each of the listed hyperlinked web service method names according to one embodiment. These test cases can generally be grouped as Smoke and or Regression test depending on the preference of the user. The method described above will now be illustrated in further detail using according to one embodiment.

As shown the group selected from Group drop down menu is VoiceWing. According to one embodiment the categories associated with a selected group are automatically generated in Category drop down menu upon the selection of the group. The category selected from Category drop down menu is LNP. According to one embodiment the web service methods associated with a selected category are automatically generated upon the selection of the category. Upon selection of a category one or more web services methods associated with the selected category are also automatically generated in accordance with one embodiment. The one or more methods can be a list of method names and or each method name can be hyperlinked according to one embodiment. Each hyperlinked method can also be coupled with an expandable node symbol as shown in consistent with one embodiment. By clicking on expandable node one or more test cases associated with the selected web service method is automatically generated below the selected method and on the right side frame of the screen as shown in . According to one embodiment the one or more web service methods can be a list of web service methods on the left side frame and another list of web service methods on the right side frame.

The right side frame provides test case details and administrative functions to be performed on the test cases. The right side frame enables a user to classify one or more test cases as Smoke Test or Regression retire a test case and temporarily exclude it from a test run permanently delete a test case and run all or selected test cases. For example the right side frame provides test case names for example test case name test case select boxes for example test case select box test case classification boxes to classify a test case as either Smoke Test and or Regression for example boxes a test description for example element test case modification date for example elements test case status for example element and test case action or the actions taken on the test case for example element all shown in . According to one embodiment in the event the user cannot recall the web service method whose test cases are displayed the user can locate the name in API heading . The right side frame also provides buttons to that allow the user to run the test cases classified as Regression the test cases classified as Smoke Test or all the selected test cases respectively. Button allows the user to create a new test case. Each test case has a set of associated attribute for example Name Description Priority Modified Request XML Output XML Input Value Success criteria according to one embodiment. As mentioned above several administrative functions can be performed on the test cases such as for example adding saving retiring activating deleting executing. These and more functions are discussed below.

Referring to a flowchart of a method for adding a test case according to an exemplary embodiment is illustrated. The method includes selecting a group such as from among one or more groups under a group drop down menu at operation . Operation provides for selecting desired category such as from one or more categories under a category drop down menu. At operation a web service method is selected from one or more web service methods. According to one embodiment each of the one or more categories and web service methods are automatically generated upon the selection of a group and a category respectively. The method continues by identifying that a new test case is to be added such as by selecting the New Test Case button at operation such as for example button . This operation takes the user to a screen where the appropriate attributes for the new test case can be defined at operation . The attributes can be for example the input and success parameters priorities assignment and name according to one embodiment of the present example. The method further includes submitting the information for the new test case such as by selecting an Add button. At operation the first three operations may be repeated to verify the addition of the new test case.

Referring now to a flowchart of a method for saving a test case according to an exemplary embodiment is provided. The method includes selecting a group a category and a web service method at operations as described in further detail above. Operation provides for selecting a test case. According to one embodiment a test case can be selected by clicking on the web service method name and then selecting the test case from the right side frame as illustrated in . According to another embodiment a test case can be selected by selecting an expandable node symbol located next to each web service method name and then selecting a test case link listed under the selected web service method also as illustrated in . Operation provides for editing the attributes of the selected test case that are desired to be modified. According to one embodiment the attributes modified are for example the test case priority the input success criteria the category URL and the Request XML. At operation the modified information is saved such as selecting a Save button in order to make the modification permanent. The method may further include at operation repeating the first four operations to verify the modification of the selected test case.

Reference is now made to which illustrates a flowchart of one embodiment of a method for adding a new test case based on the information of an existing test case. The method includes selecting a group a category a web service method and selecting a test case at operations as described in further details above. At operation the attributes of the selected test case desired to be edited are modified. An example of possible attributes to modify is discussed above. The method continues with the modification of the existing name of the selected test case at operation . Operation provides for saving the attributes of the selected test case whether modified or not modified under the new name chosen at operation thereby essentially creating a new test case. In one embodiment the attributes are saved by selecting a Save As button. At operation the first three steps of the method may be repeated to verify that the new test case has been created. This method provides another alternative for creating a new test case based on one or more attributes of the selected test case whether modified or not modified. This method is appropriate when the user wants to keep one or more attributes of a selected test case without having to go through the entire process of creating a new test case. In another embodiment the user only modifies the existing name of the selected test case and therefore operation is bypassed.

In an exemplary screen shot of a GUI generated by a browser launched by one or more of the user machines for providing access to the web services testing tool depicts an administrative function applicable to a selected test case according to one embodiment. The function illustrated in is Retire wherein a selected test case can be temporarily excluded from subsequent Smoke Test and or Regression test runs. The features of screen shot are similar to those of screen shot in and have already been discussed in detail above. The name of the test case selected is default as shown in under Test Case name section . The web service method to which the selected test case is associated is LnpCancelOrder as shown under method or API name section . The selected test case is chosen to undergo a Smoke Test and a Regression test as shown in . Under Action section for the selected test case the Retire feature is indicated. According to one embodiment the Retire feature will be indicated under Action section if the test case is selected after the group the category and the web service method have all been selected. In accordance with one embodiment before a selected test case is retired the status of a selected test case is Active as shown under Status section in . The Retire feature can be a hyperlink consistent with one embodiment. According to one embodiment the Retire link is available when the status of the selected test case is Active. When the user selects the Retire link the corresponding selected test case will be removed from subsequent test runs. A flowchart depicted in illustrates a method for retiring a test case according to an exemplary embodiment.

Referring now to an exemplary screen shot of a GUI generated by a browser launched by one or more of the user machines for providing access to the web services testing tool which depicts another administrative functionality applicable to a selected test case according to one embodiment is provided. The function illustrated in is Activate wherein a retired test case can be activated and hence included again in subsequent test runs. The features of screen shot are similar to those of screen shot in and have already been discussed in detail above. The test case name and the web service method shown in are the same as the ones shown in namely default and LnpCancelOrder. When a selected test case is retired the Retire link under Action section shown in is replaced with two other links namely Activate and Delete under Action section as shown in . Additionally and according to one embodiment the status of a test case that has been retired is Retired as shown under Status section . According to yet another embodiment once a selected test case is retired the corresponding checkboxes for selecting the test case a Smoke Test and a Regression illustrated by checkboxes and shown in no longer become available as shown in . The Activate feature may be a hyperlink consistent with one embodiment. When the user selects Activate link the corresponding retired test case will then be included again in subsequent test runs. When a selected test case is activated its status and action revert back to their initial condition as shown in according to one embodiment. The checkboxes discussed above also become available again as shown in . A flowchart provided in illustrates a method for activating a retired test case according to an exemplary embodiment.

Reference is now made to which illustrates an exemplary screen shot of a GUI generated by a browser launched by one or more of the user machines for providing access to the web services testing tool which depicts yet another administrative functionality applicable to a selected test case according to one embodiment. The function illustrated in is Delete wherein a retired test case is deleted and hence permanently removed for subsequent test runs. The features of screen shot are similar to those of screen shots and in respectively and have already been discussed in detail above. The test case and the web service method shown in are the same as the ones shown in namely default and LnpCancelOrder. Additionally the conditions and attributes of a retired test case for example status and action are discussed in detail above.

When a selected test case is retired the user can evaluate the significance of the test case. Accordingly after due consideration of the retired test case if the user determines that the test case can be permanently removed from subsequent test runs the user can select a Delete link consistent with one embodiment. According to another embodiment the user can determine that the retired test case should neither be deleted nor be activated in which case the user can either take no further actions or return to any previous activity being undertaken. The Delete function should be used with caution as any retired test case that is deleted is permanently removed from subsequent test runs. Because of the proximity of the Activate and Delete links and the relative permanence brought about by the selection of the Delete function it is advisable for the user to be able to easily select the appropriate function desired. Therefore according to one embodiment the Activate link is of a format different from that the Delete link to allow the user to easily differentiate and distinguish the two functions for example different color font style or size. A flowchart provided in illustrates a method for deleting a retired test case according to an exemplary embodiment.

In an exemplary screen shot of a GUI generated by a browser launched by one or more of the user machines for providing access to the web services testing tool displays one or more test cases associated with a selected method to be classified according to one embodiment. The features of screen shot are similar to those of screen shot in and have already been discussed in detail above. Screen shot also provides checkboxes for selecting one or more test cases checkboxes for selecting one or more test cases as Smoke and checkboxes for selecting one or more test cases as Regression. One or more test cases can be selected and classified as either Smoke Tests Regression Tests regular tests i.e. neither one of Smoke or Regression or any combination of the three as shown in . According to one embodiment one or more test cases can be stored as a single test either Smoke Regression or regular test.

As used herein a Smoke test is a test conducted to analyze on a relatively superficial level the functionalities of the selected group or application. This test is similar to a health check of the group. According to one embodiment this type of test allows the user to select one or more important test cases save those selected test cases together as a single smoke test and assign the single test a name. In this manner the saved test can be accessed and run again. Classification of the one or more selected test cases as Smoke test can be effectuated by clicking on the corresponding one of checkboxes consistent with one embodiment. Upon clicking on a Smoke Test button all the test cases whose corresponding Smoke Test checkbox has been checked will undergo a Smoke test.

If the user wants to conduct a more in depth testing of the group a Regression test should be conducted. For a deeper testing of the functionalities of the selected group a Regression test should be conducted. According to one embodiment a user would be allowed to specify a larger number of web service methods with more detailed criteria than in a Smoke test. According to another embodiment one or more test cases can be selected together assigned a name and saved as a single test. The user would be allowed to access the saved test and run it again consistent with another embodiment. The turnover rate for obtaining results may be increased because the test is already in existence. According to one embodiment the Regression test provides a detailed view of the functionality and stability of the selected group. Classification of one or more selected test cases as Regression test can be effectuated by selecting the corresponding ones of checkboxes consistent with one embodiment. Upon selecting a Regression Test button for example all the test cases whose corresponding Regression Test checkbox has been checked will undergo a Regression test.

Alternatively a user can conduct some tests at will without classifying any test case as Smoke or Regression. According to one embodiment this type of testing is accomplished by selecting the corresponding ones of checkboxes and selecting a Selected Cases button . According to one embodiment this option provides the user with the flexibility to determine the sequence of one or more web service methods to be tested. For example the user can set the sequence to be web service method followed by web service method followed by web service method and finally web service method and the testing will be conducted in that specified sequence.

Some of the attributes of a selected test case can be grouped under one section in the GUI consistent with one embodiment. For example under Test Case section of one embodiment the following attributes can be found WebService which indicates the name of the web service method under which the selected test case can be found Name which indicates the name of the selected test case Description which indicates a narrative for the selected test case Priority which indicates the priority level assigned to the selected test case and Modified which indicates the date and time of the last modification of the selected test case. Test Case section may also include Save and Save As buttons. The functionalities associated with these buttons according to one embodiment have already been discussed above. It is noted that the WebService attribute is disabled in this embodiment to prevent the user from modifying the name of the web service method whose associated test case is selected.

Screen shot also displays Variables section Input Values section Success Criteria section Request XML section and Response XML section . These sections will be discussed in greater detail below.

Referring to an exemplary screen shot of a GUI generated by a browser launched by one or more of the user machines for providing access to the web services testing tool assigns a priority level to a selected test case according to one embodiment. Screen shot displays a portion of a detail test case page as shown in and as at least partially discussed above. A user can assign a priority to a selected test case such as by means of a drop down menu consistent with one embodiment. One example of a priority drop down menu is provided in . According to another embodiment a user can assign a priority to a selected test case by means of radio buttons. According to one embodiment a priority level indicates the degree of seriousness associated with a selected test case and consequently the severity of the potential damage to the application or group whose web service method is being tested in the event of the method s failure of malfunction.

Although the levels of prioritization may vary from implementation to implementation there are four different levels of priority namely Blocker High Medium and Low in descending order of seriousness in the illustrated embodiment. For example if a test case assigned the priority level of Blocker fails or does not return a desired result it will be an indication that the web service method tested is not functioning properly and accordingly there could possibly be a severe problem with the associated group. Therefore the issue should be immediately corrected to avoid the failure of the application and the potential dissatisfaction of the application s end user. Conversely if a test case assigned the priority level of Low fails or does not return a desired result there will not be a need for the issue to be resolved immediately and the application can continue to perform appropriately to the satisfaction of the application s end user.

Reference is now made to which illustrates an exemplary screen shot of a GUI generated by a browser launched by one or more of the user machines for providing access to the web services testing tool which provides for adding input values to a desired parameter associated with a selected test case according to one embodiment. Screen shot displays a portion of a detail test case page as shown in . Request XML section is shown in . According to one embodiment XML code is a means for defining input for one or more parameters for the selected test case. While XML will be referenced herein by way of example other types of code such as HTML or other non markup languages could be similarly utilized in other embodiments. According to one embodiment the XML code is defined in Request XML section such as based upon user input. After the XML code is defined it is submitted to the server for processing. The server then returns another XML code as a result for example in Response XML section as shown in . The Response XML section will be discussed below. Request XML section contains the XML code associated with a selected test case. According to one embodiment each test case has an associated Request XML section. For an average user XML can be a complicated scripted language to read understand use and modify. It can give the appearance of a large unmanageable amount of text to the user and accordingly the user may not know which necessary parameter or which desired parameter to modify for a selected test case. Therefore in order to make the modification of parameters in test cases and the submission of input to a selected test case more user friendly a Add Input Value functionality is provided.

With this functionality input values can be added to one or more desired parameters of a selected test case. If these values are present they will override the values associated to the one or more parameters in Request XML section at the runtime of the test case. To add an input value the user can click on a Add Input Value button from an original screen as shown in screen shot of under Input Value section and will then be presented with three text boxes namely Name text box XPath text box and Value text box as shown in screen shot of . The user can then add the name of the parameter the XPath of the parameter and the value to be associated with the parameter. In accordance with one embodiment the XPath of the parameter specifies a path inside the XML code to the part or parts wherein the parameter is located i.e. the element s of the XML code referred to by the user. The user can then save the changes such as by selecting a Save button. This process can be repeated multiple times as desired by the user to add values to various parameters in the test case. According to one embodiment one instance of the parameter will be substituted. The value specified would be any value the user would like the parameter to hold at runtime of the test case. According to another embodiment multiple instances of the parameter will be replaced in the Request XML section.

For example if a user would like to substitute the value for the parameter named AreaCode as shown in screen shot the user would submit AreaCode in Name text box request PortInInfo PortInPhone AreaCode in XPath text box and any value the user would like the parameter AreaCode to hold at runtime in Value text box . Similarly if a user would like to substitute the value for the parameter named CustomerId as shown in screen shot the user would submit CustomerId in Name text box request PortInInfo PortInPhone CustomerId in XPath text box and any value the user would like the parameter CustomerId to hold at runtime in Value text box . If the whole Request XML section is considered as a tree structure the XPath value should lead to the correct branch that has the desired node i.e. the parameter whose value or values to override at runtime. Multiple input values can be added as long as they match with the Request XML parameter list associated with the selected test case.

In accordance with one embodiment a formatting tool such as a Pretty Print feature may be provided for the XML code contained in Response XML section . This feature allows the user to align the XML code in Response XML to a proper structure by making proper indentation. This formatting tool may be particularly useful to format the XML after it has been copied from an external location and pasted in the Response XML section according to one embodiment. It can also be used when the indentation of the XML code has been changed inadvertently by the user or as a result of the execution of function. This feature can be a hyperlink consistent with one embodiment as exemplified by Pretty Print link . According to another embodiment the formatting tool can be represented by a button. This formatting feature can be used by simply clicking on the appropriate link or button consistent with one embodiment.

In an exemplary screen shot of a GUI generated by a browser launched by one or more of the user machines for providing access to the web services testing tool provides for adding criteria to a selected test case according to one embodiment Screen shot displays a portion of a detail test case page as shown in . According to one embodiment criteria can be added to a test case based on which the user can derive the test result of the test case. The criteria added can be one of success or failure consistent with one embodiment. Therefore in accordance with one embodiment success criteria can be expected values to be returned after the test case is executed whereas failure criteria can be values not expected to be returned. The test result can be interpreted as pass or fail consistent with another embodiment. According to one embodiment a user can specify the success criteria for a selected test case and run the test case. If the result s observed by the user is equal to or the same as the expected success criteria which was submitted the test would have passed and the web service method test would be considered operational. However if the result s observed by the user is not equal to or is different from the expected success criteria it would be an indication that the test failed and that there is an issue that needs to be resolved with the tested web service method.

The process for adding criteria to a test case is similar to that of adding an input value to a test case. The difference is that in the process for adding an input value the values submitted for the parameters are substituted as appropriate in Request XML code whereas here in the process for adding criteria the value of the parameters in Response XML code is validated against the corresponding parameter values defined in Add Criteria to derive a test result. To add criteria the user of one embodiment can select an Add Criteria button under Success Criteria section as shown . The user will then be presented with text boxes similar to those shown in namely Name XPath and Value consistent with one embodiment. The user can subsequently add the appropriate values in the appropriate text boxes and select the Run button for example as shown in .

Success Criteria section is also provided in . According to one embodiment Success Criteria section provides one ore more parameters whose success criteria have been defined each with a corresponding Name XPath and Value text boxes. According to another embodiment each parameter may be associated with a mark or amark. The mark corresponds to a match between the success criteria of the parameter and the returned value thereby indicating a pass consistent with one embodiment. Conversely the mark corresponds to a discrepancy between the success criteria of the parameter and the returned value thereby indicating a failure.

Many modifications and other embodiments of the inventions set forth herein will come to mind to one skilled in the art to which these inventions pertain having the benefit of the teachings presented in the foregoing descriptions and the associated drawings. Therefore it is to be understood that the inventions are not to be limited to the specific embodiments disclosed and that modifications and other embodiments are intended to be included within the scope of the appended claims. Although specific terms are employed herein they are used in a generic and descriptive sense only and not for purposes of limitation.

