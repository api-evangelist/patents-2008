---

title: Application-aware recording and replay
abstract: In one illustrative embodiment, a computer-implemented method for application-aware recording and replay of changes is provided. The computer implemented method executes an application in a source system to form a first domain context, and generates recorded information objects from the application in the first domain context. The computer-implemented method selects a target system having a second domain context, and replays the recorded information objects on the target system to form new information objects in the second domain context. The new information objects are returned to a requester.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08495008&OS=08495008&RS=08495008
owner: International Business Machines Corporation
number: 08495008
owner_city: Armonk
owner_country: US
publication_date: 20081014
---
The present invention relates generally to an improved data processing system and more specifically to a computer implemented method a data processing system and a computer program product for application aware recording and replay of changes.

On many occasions there may be a need to record the changes in a system due to user interactions. The recording may be necessary for a variety of applications like transaction logging in a database system regression testing by applying or replaying the same interactions on different versions of the system applying the same changes to more than one system such as system configuration upgrades applying the same changes to a different system when the interactions were initiated on a wrong target or to perform what if analysis of one or more changes to different systems. In many of these situations the type of information to be recorded could be application specific so that the information gathering and storage can be made more stable and efficient.

The current practice of user interaction recording is based on interface specific data like controls type of controls such as drop down versus checkboxes layout of the controls within a page or in other cases usage of an application programming interfaces. The current practice typically leads to failures in accurately replaying the recordings when any of the interface details change. Interface changes may include changing a control type or moving a control is from one page to another causing a change in the layout and the availability of controls.

The replay may also be governed by application specific rules to handle different types of target systems and unexpected mismatches and errors may occur. The mismatch and error issues may lead to numerous maintenance issues as well as an inability to persist the pre recorded user interactions. There is a need to provide more effective recording of user interactions and replay of those recorded interaction.

According to one embodiment of the present invention a computer implemented method for application aware recording and replay of changes is provided. The computer implemented method executes an application in a source system to form a first domain context and generates recorded information objects from the application in the first domain context. The computer implemented method selects a target system having a second domain context and replays the recorded information objects on the target system to form new information objects in the second domain context. The new information objects are returned to a requester.

In another embodiment a data processing system for application aware recording and replay of changes is provided. The data processing system comprises a bus a memory connected to the bus wherein the memory comprises computer executable instructions and a processor unit connected to the bus. The processor unit executes the computer executable instructions to direct the data processing system to execute an application in a source system to form a first domain context generate recorded information objects from the application in the first domain context select a target system having a second domain context replay the recorded information objects on the target system to form new information objects in the second domain context and return the new information objects to a requester.

In yet another embodiment a computer program product for application aware recording and replay of changes is provided. The computer program product comprises a computer usable recordable type medium having computer executable instructions stored thereon. The computer executable instructions comprise computer executable instructions for executing an application in a source system to form a first domain context computer executable instructions for generating recorded information objects from the application in the first domain context computer executable instructions for selecting a target system having a second domain context computer executable instructions for replaying the recorded information objects on the target system to form new information objects in the second domain context and computer executable instructions for returning the new information objects to a requester.

As will be appreciated by one skilled in the art the present invention may be embodied as a system method or computer program product. Accordingly the present invention may take the form of an entirely hardware embodiment an entirely software embodiment including firmware resident software micro code etc. or an embodiment combining software and hardware aspects that may all generally be referred to herein as a circuit module or system. Furthermore the present invention may take the form of a computer program product embodied in any tangible medium of expression having computer usable program code embodied in the medium.

Any combination of one or more computer usable or computer readable medium s may be utilized. The computer usable or computer readable medium may be for example but not limited to an electronic magnetic optical electromagnetic infrared or semiconductor system apparatus device or propagation medium. More specific examples a non exhaustive list of the computer readable medium would include the following an electrical connection having one or more wires a portable computer diskette a hard disk a random access memory RAM a read only memory ROM an erasable programmable read only memory EPROM or Flash memory an optical fiber a portable compact disc read only memory CDROM an optical storage device a transmission media such as those supporting the Internet or an intranet or a magnetic storage device. Note that the computer usable or computer readable medium could even be paper or another suitable medium upon which the program is printed as the program can be electronically captured via for instance optical scanning of the paper or other medium then compiled interpreted or otherwise processed in a suitable manner if necessary and then stored in a computer memory. In the context of this document a computer usable or computer readable medium may be any medium that can contain store communicate propagate or transport the program for use by or in connection with the instruction execution system apparatus or device. The computer usable medium may include a propagated data signal with the computer usable program code embodied therewith either in baseband or as part of a carrier wave. The computer usable program code may be transmitted using any appropriate medium including but not limited to wireless wire line optical fiber cable RF etc.

Computer program code for carrying out operations of the present invention may be written in any combination of one or more programming languages including an object oriented programming language such as Java Smalltalk C or the like and conventional procedural programming languages such as the C programming language or similar programming languages. The program code may execute entirely on the user s computer partly on the user s computer as a stand alone software package partly on the user s computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario the remote computer may be connected to the user s computer through any type of network including a local area network LAN or a wide area network WAN or the connection may be made to an external computer for example through the Internet using an Internet Service Provider .

The present invention is described below with reference to flowchart illustrations and or block diagrams of methods apparatus systems and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and or block diagrams and combinations of blocks in the flowchart illustrations and or block diagrams can be implemented by computer program instructions.

These computer program instructions may be provided to a processor of a general purpose computer special purpose computer or other programmable data processing apparatus to produce a machine such that the instructions which execute via the processor of the computer or other programmable data processing apparatus create means for implementing the functions acts specified in the flowchart and or block diagram block or blocks. These computer program instructions may also be stored in a computer readable medium that can direct a computer or other programmable data processing apparatus to function in a particular manner such that the instructions stored in the computer readable medium produce an article of manufacture including instruction means which implement the function act specified in the flowchart and or block diagram block or blocks.

The computer program instructions may also be loaded onto a computer or other programmable data processing apparatus to cause a series of operational steps to be performed on the computer or other programmable apparatus to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide processes for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

With reference now to the figures and in particular with reference to exemplary diagrams of data processing environments are provided in which illustrative embodiments may be implemented. It should be appreciated that are only exemplary and are not intended to assert or imply any limitation with regard to the environments in which different embodiments may be implemented. Many modifications to the depicted environments may be made.

In the depicted example server and server connect to network along with storage unit . In addition clients and connect to network . Clients and may be for example personal computers or network computers. In the depicted example server provides data such as boot files operating system images and applications to clients and . Clients and are clients to server in this example. Network data processing system may include additional servers clients and other devices not shown.

In the depicted example network data processing system is the Internet with network representing a worldwide collection of networks and gateways that use the Transmission Control Protocol Internet Protocol TCP IP suite of protocols to communicate with one another. At the heart of the Internet is a backbone of high speed data communication lines between major nodes or host computers consisting of thousands of commercial governmental educational and other computer systems that route data and messages. Of course network data processing system also may be implemented as a number of different types of networks such as for example an intranet a local area network LAN or a wide area network WAN . is intended as an example and not as an architectural limitation for the different illustrative embodiments.

In one illustrative embodiment using the example of system of a computer implemented method for application aware recording and replay of changes is provided. The computer implemented method executes an aware application in a source system such as server to record the results of user interaction from a user on a client such as client through network with the application. Results are recorded during the execution to generate recorded information objects from the application in a first domain context. The computer implemented method further selects a target system in a second domain context such as server which may be a similar system to that of server or a different environment. A replay of the recorded information objects on the target system forms new information objects. The results are returned as the new information objects to the requester on client .

With reference now to a block diagram of a data processing system is shown in which illustrative embodiments may be implemented. Data processing system is an example of a computer such as server or client in in which computer usable program code or instructions implementing the processes may be located for the illustrative embodiments. In this illustrative example data processing system includes communications fabric which provides communications between processor unit memory persistent storage communications unit input output I O unit and display .

Processor unit serves to execute instructions for software that may be loaded into memory . Processor unit may be a set of one or more processors or may be a multi processor core depending on the particular implementation. Further processor unit may be implemented using one or more heterogeneous processor systems in which a main processor is present with secondary processors on a single chip. As another illustrative example processor unit may be a symmetric multi processor system containing multiple processors of the same type.

Memory and persistent storage are examples of storage devices. A storage device is any piece of hardware that is capable of storing information either on a temporary basis and or a permanent basis. Memory in these examples may be for example a random access memory or any other suitable volatile or non volatile storage device. Persistent storage may take various forms depending on the particular implementation. For example persistent storage may contain one or more components or devices. For example persistent storage may be a hard drive a flash memory a rewritable optical disk a rewritable magnetic tape or some combination of the above. The media used by persistent storage also may be removable. For example a removable hard drive may be used for persistent storage .

Communications unit in these examples provides for communications with other data processing systems or devices. In these examples communications unit is a network interface card. Communications unit may provide communications through the use of either or both physical and wireless communications links.

Input output unit allows for input and output of data with other devices that may be connected to data processing system . For example input output unit may provide a connection for user input through a keyboard and mouse. Further input output unit may send output to a printer. Display provides a mechanism to display information to a user.

Instructions for the operating system and applications or programs are located on persistent storage . These instructions may be loaded into memory for execution by processor unit . The processes of the different embodiments may be performed by processor unit using computer implemented instructions which may be located in a memory such as memory . These instructions are referred to as program code computer usable program code or computer readable program code that may be read and executed by a processor in processor unit . The program code in the different embodiments may be embodied on different physical or tangible computer readable media such as memory or persistent storage .

Program code is located in a functional form on computer readable media that is selectively removable and may be loaded onto or transferred to data processing system for execution by processor unit . Program code and computer readable media form computer program product in these examples. In one example computer readable media may be in a tangible form such as for example an optical or magnetic disc that is inserted or placed into a drive or other device that is part of persistent storage for transfer onto a storage device such as a hard drive that is part of persistent storage . In a tangible form computer readable media also may take the form of a persistent storage such as a hard drive a thumb drive or a flash memory that is connected to data processing system . The tangible form of computer readable media is also referred to as computer recordable storage media. In some instances computer readable media may not be removable.

Alternatively program code may be transferred to data processing system from computer readable media through a communications link to communications unit and or through a connection to input output unit . The communications link and or the connection may be physical or wireless in the illustrative examples. The computer readable media also may take the form of non tangible media such as communications links or wireless transmissions containing the program code. The different components illustrated for data processing system are not meant to provide architectural limitations to the manner in which different embodiments may be implemented. The different illustrative embodiments may be implemented in a data processing system including components in addition to or in place of those illustrated for data processing system . Other components shown in can be varied from the illustrative examples shown.

As one example a storage device in data processing system is any hardware apparatus that may store data. Memory persistent storage and computer readable media are examples of storage devices in a tangible form.

In another example a bus system may be used to implement communications fabric and may be comprised of one or more buses such as a system bus or an input output bus. Of course the bus system may be implemented using any suitable type of architecture that provides for a transfer of data between different components or devices attached to the bus system. Additionally a communications unit may include one or more devices used to transmit and receive data such as a modem or a network adapter. Further a memory may be for example memory or a cache such as found in an interface and memory controller hub that may be present in communications fabric .

With reference to a block diagram showing high level components of a record and replay manager in accordance with an illustrative embodiment is shown. Record and replay manager is shown within memory of system of . Record and replay manager may also be located in other memory locations suitable for execution of the functions as needed. For example record and replay manager may be stored as program code located in a functional form on computer readable media until installed for use or in persistent storage ready for loading as needed. Record and replay manager contains a number of components comprising recorder replayer recorded information objects RIO data structures and rules database .

Recorder provides a capability to record user or component interactions. The object based framework allows programmers to define application specific rules to identify the changes to the internal system application that need to be recorded and represent them as abstract generic interaction objects. The rules are stored in rules database for use by recorder or replayer as needed. The interaction objects are stored as recorded information objects in recorded information objects data structures . The interaction objects are context sensitive with built in methods to guide application replay using replayer of the recorded information to different target systems. Domain specific configuration testing taxation system engineering designs etc. information related to user interactions can be recorded and replayed in a different system context if desired.

The source system is referred to as a first domain context while the target system may be referred to as the second domain context. The first and second domains may be the same in some cases and may be different in other cases.

Typically the user interactions create certain changes in the system. The objective of recorder and associated rules of rules database is to capture the changes by recording efficiently and then apply by replay the changes to other similar systems either for the purpose of duplication or replaying in different target systems as dictated by the respective domains.

With reference to a block diagram of a data flow within a record and replay managed system in accordance with an illustrative embodiment is shown. Record and replay system is an example of using record and replay manager of .

The framework of record and replay system processes a set of source system application objects which are modified as a result of user interactions . Source system application objects are capable of identifying themselves as candidates for recording as a consequence of particular user actions. Source system application objects carry information regarding the changes resulting from the user interactions. Based on the type of actions certain standard impacts such as deletion modification of a content or container and selection can be identified. The operations and corresponding changes will depend on the specific application domain. For example in user interface testing the application objects can be user interface controls and the internal systems objects that are impacted by the user selections or user interactions .

The recording module of recorder identifies the impacted source system application objects and nature of the impacts modification addition and deletion of object and object relationships . Recording creates a set of abstract interaction objects known as recorded information objects RIOs . Recorded information objects captures the minimal information necessary to reproduce or reapply the same impacts representing the original user actions or intent from the source system on similar application objects on a different target system. Recorded information objects differs from a basic recorded action such as a logged action. Logged information captures the specific concrete change in absolute terms. Recorded information objects is a set of objects comprising one or more objects as required for the instance being recorded and is more abstract than a logged change. The abstraction using extensible markup language definitions for example allow the replay of the recorded information objects in the target systems.

For example when salary is increased by 100 representing a 5 change from the base salary for an employee and when the same increase is applicable for all employees in the department it is important to record that the change represents a 5 increase in basic pay rather than a 100 increase. The salary change impacts a certain group of employees rather than a particular control on the user interface and a particular value entered. The change is recorded in a functional manner rather than as an absolute change. Abstraction allows the functional information to be applied to another domain instance and have a similar result occur.

Replayer reads recorded information objects and applies them to a new target system instance. Recorded information objects have rules or methods describing how to apply each of recorded information objects in a changed system instance environment. For example if a corresponding application object is missing or there are different application objects in the new system instance recorded information objects behave differently attempting to reproduce closely similar impacts as if the same user actions take place.

For example the salary increase will be computed based on the corresponding current base pay and percentage of increase rather than the same fixed number entered in the original system. The rules provide a capability to abstract the concrete example provided in source system application objects . At the same time the corresponding recorded information objects understand the domain specific rules of the source system application objects that the salary increase is not applicable for executive employees. Here again the domain specific knowledge and rules govern the behavior of recorded information objects during the replay by replayer . Replayer is also capable of detecting and notifying a requester of any failures that occur in applying the originally recorded changes to the new system or environment in creating new application objects .

The generic framework provided by the described components enable the design of source system application object classes to support change information recording and the concept of recorded information objects which are also application aware to support effective re application of the changes in a similar but new environment.

Recorder captures the interaction between the user and system application objects . The idea of application and or system aware recording is to record information in a first domain context for replaying again in a second domain context without any change to the recorded information. The replaying may happen after the system representation including its user interface has changed. To make the recorded information useful and economical for a playback the recorded information avoids dependencies on elements that can change frequently. Elements that change frequently are typically part of the layout of the user interface object or an object s properties that are not fundamental to the representation of the application state.

The system is formed so that the objects core application objects user interface objects various agents between source system application objects and the user interface objects will notify recorder of the changes. When an event triggered by user selection needs to be recorded the user interface will notify recorder to record. Recorder will manage the recording of information. Recorder determines what to record by asking the objects what to save and where to save. The information can be captured in terms of dedicated objects some changes on the system objects themselves or some combination of the two in the form of recorded information objects .

Recorder can record the interaction at various levels. In one level raw selection with its external representation is a least preferred level to record because the interaction is most removed from a system. Being far removed from the system means frequent changes can occur and therefore should be avoided. Typical existing testing applications like WinRunner available from HP Mercury a subsidiary of the Hewlett Packard Company and Silk available from Borland Software Corporation record mostly at this level. For example this level of recording would typically involve recorder recording the user selecting an item with a specified description in a drop down list with a specified label.

Another level of recording involving raw selection with its internal representation is a second least preferred level of information to record. Instead of capturing the selection in some control the raw selection level of recording records the internal representation of the selection. For example when the user selects a generic hard disk instead of recording the specific selection description recorder records the name of the internal entity representing the hard disk in the application thereby avoiding the changes in the user interface container. The application can change the user interface layout such as converting the drop down list to a table implementation and this level of recording will still be able to be replayed without change to the recorded information.

In another level of recording the focus is on the user s intention. At this level of recording when a user makes a selection the application can ask the user additional questions about intentions. For example beside the hard disk drop down the application can ask questions as to whether the user intends to add a hard drive of a specific size or speed. Capturing an intention may be more difficult but may prove very useful unless the intention can almost always be found from the changes in the system.

In another level of recording resulting changes in the application objects are recorded. The level of recording allows the best capability to capture the changes in the application objects because the changes in the representation of objects would not change that often. When a primary property of an object is changed the object on the change can request recorder to record the change. Changes in secondary properties that are byproducts of changes in the primary properties would not be recorded. If the application object representation does change the application may be designed to map the recorded information before replaying. Some of the programming languages can save or serialize the application objects and reload later. Typically a large quantity of information sometimes even the whole memory representation is saved but this would not be suitable for replaying if the application has changed even if it has changed slightly.

Recorder timestamps each of the actions or changes that need to be saved. The timestamps may be used as an index. Once the user is finished with the actions on the system recorder is requested to save the collected information. Recorder processes the recorded information either recorded with the system objects or the dedicated objects created solely for recording and saves the recorded information in a file as recorded information objects . Replayer uses recorded information objects as input to replay on a different system.

Recorded information objects represent the user actions in an abstract form as described in the description of recorder . Recorded information objects comprises a set of recorded information objects can have a syntax format that is specific to an application or may preferably be in application independent format using a markup language definition such as may be provided using extensible markup language XML . These objects represent the abstract information of the user action. For example clicking on a Confirm button sends the user interface data for processing or validation or the add to cart save action represents a temporary saving of data. The internal operations should be represented in a general form such as increase the input voltage by 10 rather a more concrete example of Enter 3.3 under Input Voltage Control. 

Replayer acts when recorded information objects needs to be applied to a new environment. Replayer comprises necessary intelligent logic to interpret recorded information objects and translate them into appropriate internal actions. The replay is not intended to simulate the same key strokes and actions on a user interface as do other application test tools previously mentioned but to perform the internal actions as recorded and replayed in the new context.

For example when an increase the input voltage by 10 is recorded as an action replayer will have logic to perform a calculation using the specified input voltage of 15 V and increase the value by 10 . The result to apply is 16.5 volts. This will be considered as the replay of the concrete example applying 3.3 volts when this action was originally recorded in the source system. Replayer is aware that the replay context is different from the context in which the actions were recorded and uses the capability of replaying the recorded information to modify or adapt the actions to the new target system context.

Replayer also has logic to remove or replace certain steps or user interface actions as relevant and applicable to the new context. Replayer analyzes each of recorded information objects and also examines the current context and modifies the content of recorded information objects as relevant to the current context.

This modification is done based on domain specific rules. For example if a control is moved from one page to another page it appropriately defers the application of the particular input until the new page is accessed. If a drop down control such as a Radio Button is replaced the syntax of the selection application is modified to suit the new Radio Box control. If the information recorded is Increase voltage by 10 replayer will examine the current rated voltage compute a new 110 value and apply that value to the new context. If a particular control is replaced by two other controls replayer will identify how the old selection was recorded and determine what the new selection is in the new interface using the rules. When a control is missing the rules may not be able to provide a reasonable interpretation causing replayer to skip the selection recorded and notify the requester. An example schema representation in an extensible markup language format code fragment is shown in .

With reference to a text representation of an example of a recorded information object definition in accordance with an illustrative embodiment is shown. Schema fragment is a code snippet that depicts a set of definitions for a recorded selection object comprising scope action data and timing portions.

The general structure defines a boundary or scope of operation in which element defines a property and element defines an operator. A specific attribute that is to be modified is defined next in which element defines a property of the action attribute and element defines instance of the attribute. Element then defines an action to be performed on the attribute value of element . Element defines an operation value used by the method of element .

For example using a voltage input test case element defines a scope to be a Get Field method and more specifically the portion defined by element as Input Voltage. Element defines a Get Attribute Value method being performed to retrieve a control value as defined in element of ctrl value. The control value is to be modified as defined by element Modify value Multiply. The modify operation of element will use the value supplied in element of 1.1. The result is an operation that will adjust the input voltage of element by 110 . The adjustment represents an increase of the stated 10 rather than a concrete amount. The change has been expressed in a more general form than if a specific amount was used. The general form allows for more flexibility on a replay operation.

With reference to a text representation of another example of a recorded object definition in accordance with an illustrative embodiment is shown.

In the example a voltage input test case for a circuit board is used. The objective of the test is to ensure that a pin on a processor chip pin receives a certain voltage. The voltage cannot be directly applied to the pin because the chip is seated in a circuit board. The voltage is applied at some external node on the circuit board. The source system of the example is represented by the circuit board and processor chip combination. The new system or target system is represented by a new circuit board with the same processor chip seated in it has a new layout and perhaps new circuit elements. In the new target system the circuit board has changed so the voltage applied at the external node will need to be different to achieve the same voltage application at pin .

Code snippet in the example is an extensible markup language XML code fragment that defines a portion of the recording section. Statement defines the operator of interest as input voltage pin as previously stated. Statement indicates action data with respect to the identified object of pin as circuit applied voltage F. 

Statement indicates an action method of apply indicating a voltage will be applied to the object pin . Statement indicates that an operator of 0.4 is used with the applied voltage to achieve the desired result.

With reference to a flowchart of a record and replay process in accordance with an illustrative embodiment is shown. Process is an example of using record and replay manager of within a system such as record and replay system of .

Process starts step and determines whether the application is aware of a recording requirement step . When the application is aware the application has been modified to aid in the recording of interaction information and a yes is obtained. When the application is not aware a no is obtained. When a no is obtained in step modify application is required to use the recording and replay facilities step . Once the application has been modified process can be used at step .

When a yes is obtained in step select recorder plug in for the application provides the proper recorder support for the application being recorded step . Recorder plug ins provide selectable flexibility to have the recorder support specific applications to reduce the possibility of errors during data collection.

To support objects within the specific application select rules needed for each application object ensures the proper processing of application objects is supported step . Rules have been established to support the proper interpretation of the application objects attributes and operations to provide generalized output in a domain aware context. The rules specify what will be recorded and the generalization.

The application is executed within the source system step . The recorder applies the rules while the application is executing to generate recorded information objects step . The specific application instance the objects of the application to be recorded and the attribute information related to each specified collectable object determine the data collected. The data collected is typically application specific but may include some system information. Recording phase may be defined as comprising the steps .

Having obtained recorded information objects a select target system is identified to indicate the environment in which the replay will occur step . The selected system may be the same system or a different system as required. For example when replicating a system a target system is typically the same type of system as the source system. When testing a migration scenario a target system may be a very different system from the source system. In either case the target environment characteristics are needed to ensure the appropriateness of the replay. Select phase may be defined as comprising step .

Execute the replayer using recorded information objects processes the previously recorded information objects within the context of the target system domain step . The replayer uses logic to process the previously recorded information in a generalized form the logic taking into consideration the target environment differences if any from the source system. When the source and target systems are the same there may be little need for context changes between the source system and target system. When source and target environments are very different there may be considerable context mapping performed as well as rule selection differences to better ensure the possibility of a relevant replay. Domain knowledge of both source and target systems provides better support for the replay operation. Generate new modified target objects provides the objects in the context of the target step . A determination as to whether any failures occurred step is performed to identify the need to inform the requester. If failures are determined a yes result is obtained. If no failures are determined a no result is obtained.

When a yes is obtained in step notify requester is performed to make the requester aware of the failures step . Return target objects to the requester sends or makes available the output of the replay to the requester step . The output may also be stored in a file with a location provided to the requester or the output may be otherwise communicated to the requester in the form of a message or file transfer as needed. Process terminates thereafter step . A replay phase may be defined as comprising the steps .

When a no is obtained in step return target objects step and termination step occur as stated previously.

Illustrative embodiments provide a capability to perform domain aware recording and replay to record and replay user interface test scripts for regression testing of the user interface changes to test proposed change of an installed system for an upgrade system where the system may be a physical system or building and application of a change to multiple systems as in replication. Applications are executed in a source system while application object changes are recorded using an application aware recording process. The application aware recording produces recorded information objects that may be replayed into a target system to produce changed application objects in the context of the domain of the target system.

The following example further illustrates application of illustrative embodiments and may be applied to user interface test scenarios. Recording and replaying of user interface test scripts is explained in the following example while similar concepts may be applicable for other problem domains as well. Typical regression test tools are heavily dependent on the controls screens and associated layout. Sometimes when a control is moved from one panel to another or the type of control is changed from checkbox to radio button or drop down to a table control the test scripts need to be re written. In more complex changes such as providing a new control button replacing a set of two controls the change may cause the old test scripts to be ineffective although there are no underlying functional changes. The reason for such a fragile situation is that the test scenario is represented in terms of surface level user clicks rather than the internal function being invoked. This results in major effort in updating test cases even between small point releases of applications where the external input representation may often vary.

Maintenance of test cases is often a major problem because of additional effort needed for rewriting and re validation. When the test cases are represented in terms of the internal impact or the underlying system function such as addTo cart or sort by price even if the system has undergone some changes one may identify how the same internal function is mapped in the new revised system and appropriately modify the test cases too. For example the test may be developed for leakage as in heat dissipation of an IC chip rather than a test of the external actions such as apply 7 Volts measure current at pin . The internal representation may be apply 405 more than rated voltage and measure current at the preamplifier output. As a result the reapplication of an old test case may then involve mapping the old internal functions to new physical entities. In order to gather the internal representation the application domain aware recorder can identify the relevant values and map to appropriate internal function and attributes.

The typical control level information recording of previous tools is determined by the syntax based reliance on a physical structure rather than the application aware recording used to identify and record functional elements and impacts resulting in more maintainable and stable test systems.

The flowchart and block diagrams in the figures illustrate the architecture functionality and operation of possible implementations of systems methods and computer program products according to various embodiments of the present invention. In this regard each block in the flowchart or block diagrams may represent a module segment or portion of code which comprises one or more executable instructions for implementing the specified logical function s . It should also be noted that in some alternative implementations the functions noted in the block might occur out of the order noted in the figures. For example two blocks shown in succession may in fact be executed substantially concurrently or the blocks may sometimes be executed in the reverse order depending upon the functionality involved. It will also be noted that each block of the block diagrams and or flowchart illustration and combinations of blocks in the block diagrams and or flowchart illustration can be implemented by special purpose hardware based systems that perform the specified functions or acts or combinations of special purpose hardware and computer instructions.

The terminology used herein is for the purpose of describing particular embodiments only and is not intended to be limiting of the invention. As used herein the singular forms a an and the are intended to include the plural forms as well unless the context clearly indicates otherwise. It will be further understood that the terms comprises and or comprising when used in this specification specify the presence of stated features integers steps operations elements and or components but do not preclude the presence or addition of one or more other features integers steps operations elements components and or groups thereof.

The corresponding structures materials acts and equivalents of all means or step plus function elements in the claims below are intended to include any structure material or act for performing the function in combination with other claimed elements as specifically claimed. The description of the present invention has been presented for purposes of illustration and description but is not intended to be exhaustive or limited to the invention in the form disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art without departing from the scope and spirit of the invention. The embodiment was chosen and described in order to best explain the principles of the invention the practical application and to enable others of ordinary skill in the art to understand the invention for various embodiments with various modifications as are suited to the particular use contemplated.

The invention can take the form of an entirely hardware embodiment an entirely software embodiment or an embodiment containing both hardware and software elements. In a preferred embodiment the invention is implemented in software which includes but is not limited to firmware resident software microcode etc.

Furthermore the invention can take the form of a computer program product accessible from a computer usable or computer readable medium providing program code for use by or in connection with a computer or any instruction execution system. For the purposes of this description a computer usable or computer readable medium can be any tangible apparatus that can contain store communicate propagate or transport the program for use by or in connection with the instruction execution system apparatus or device.

The medium can be an electronic magnetic optical electromagnetic infrared or semiconductor system or apparatus or device or a propagation medium. Examples of a computer readable medium include a semiconductor or solid state memory magnetic tape a removable computer diskette a random access memory RAM a read only memory ROM a rigid magnetic disk and an optical disk. Current examples of optical disks include compact disk read only memory CD ROM compact disk read write CD R W and DVD.

A data processing system suitable for storing and or executing program code will include at least one processor coupled directly or indirectly to memory elements through a system bus. The memory elements can include local memory employed during actual execution of the program code bulk storage and cache memories which provide temporary storage of at least some program code in order to reduce the number of times code must be retrieved from bulk storage during execution.

Input output or I O devices including but not limited to keyboards displays pointing devices etc. can be coupled to the system either directly or through intervening I O controllers.

Network adapters may also be coupled to the system to enable the data processing system to become coupled to other data processing systems remote printers or storage devices through intervening private or public networks. Modems cable modem and Ethernet cards are just a few of the currently available types of network adapters.

The description of the present invention has been presented for purposes of illustration and description and is not intended to be exhaustive or limited to the invention in the form disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art. The embodiment was chosen and described in order to best explain the principles of the invention the practical application and to enable others of ordinary skill in the art to understand the invention for various embodiments with various modifications as are suited to the particular use contemplated.

