---

title: Systems and methods for receiving and sending messages about changes to data attributes
abstract: Systems and methods for receiving and sending messages about changes to data attributes are described. A message that includes all common data attributes associated with a first reference object is received. The data attributes in the message are mapped to common data attributes in a second reference object. The type of the message is determined, where the message is either a synchronization message or a key change message. The common data attributes in the second reference object are updated to match the common data attributes in the first reference object if the message is a synchronization message. A unique data attribute in the second reference object is updated if the message is a key change message.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08584140&OS=08584140&RS=08584140
owner: PresenceID, Inc.
number: 08584140
owner_city: Salt Lake City
owner_country: US
publication_date: 20080919
---
This application is related to and claims priority from U.S. Provisional Patent Application Ser. No. 60 974 223 filed Sep. 21 2007 for PRESENCEID SPOKE MANAGER ARCHITECTURE with inventors Douglas Jock Walker and Reinier Van Ommeren which is incorporated herein by reference.

The present invention relates generally to computers and computer related technology. More specifically the present invention relates to systems and methods for receiving and sending messages about changes to data attributes.

Computer and communication technologies continue to advance at a rapid pace. Indeed computer and communication technologies are involved in many aspects of business operations. For example a business may be located in numerous places with computers at each location. Computers may allow a business to maintain data relating to the business operations customers services etc. Employees of a business may enter the data into the computers by utilizing business applications that run on the computers. Applications may also allow the employee to manage the data after it has been entered into the computer.

Data stored in a computer or a computer system is typically organized into a file a database or another type of data repository. It is not uncommon for an enterprise e.g. corporation small business non profit institution government body etc. to have data stored in several different types of data repositories. There may be many reasons for this. For example an enterprise may have inherited some data repositories as a result of mergers acquisitions or the like with other enterprises. Alternatively different departments within the same enterprise may have different needs which are best satisfied by different types of computer systems having different types of data repositories. The different data repositories maintained by an enterprise may be located in a variety of different computer systems which may be dispersed around an office around a campus or even around the world.

An employee may utilize an application to enter data relating to the identity of a particular customer. For example an employee may enter identity data such as the customer s name date of birth residential address business address network identification social security number account numbers etc. A business may be more efficient by maintaining such identity data. For example an employee is not required to enter identity data for a particular customer each time the customer interacts with the business because the data is already stored within the computers of the business.

Many businesses maintain many computer systems at various locations. A computer system at one location may differ from a computer system at another location. In particular application data and or databases on one computer system may differ from application data and or databases on other computers. Often data relating to the identity of a particular customer may change. For example a customer may change residence and the residential address of the customer may need to be updated in the business computers. Because the business applications running on various computers may differ from each other it may require a substantial amount of time and resources to ensure that changed identity data is updated on each business computer. As such benefits may be realized by improved systems and methods for receiving and sending messages about changes to data attributes.

A method for receiving and sending messages about changes to data attributes is disclosed. A message is received that includes all common data attributes associated with a first reference object. The data attributes in the message are mapped to common data attributes in a second reference object. The type of the message is determined. The message is a synchronization message or a key change message. The common data attributes in the second reference object are updated to match the common data attributes in the first reference object if the message is a synchronization message. A unique data attribute in the second reference object is updated if the message is a key change message.

An acknowledgement message may be sent acknowledging receipt of the message. A completion message may be sent in response to updating the second reference object. Mapping may include determining how data from one schema can be copied into another schema.

Mapping may include standard data mapping. At least one common data attribute value in the second reference object may be identical to at least one common data attribute value in the first reference object.

Mapping may also include disjointed data mapping. At least one common data attribute value in the second reference object may not be identical to at least one common data attribute value in the first reference object.

Mapping may include static value mapping. At least one common data attribute value in the second reference object may be chosen from a predetermined list and may not be identical to at least one common data attribute value in the first reference object.

Mapping may further include using a table to identify an equivalent value for each of the at least one common data attribute value in the first reference object. The second reference object may include fewer common data attributes than the first reference object. The message may be received using the Simple Object Access Protocol SOAP 

An apparatus for receiving and sending messages about changes to data attributes is disclosed. The apparatus includes a processor and memory in electronic communication with the processor. Executable instructions are stored in the memory. A message is received that includes all common data attributes associated with a first reference object. The data attributes in the message are mapped to common data attributes in a second reference object. The type of the message is determined. The message is a synchronization message or a key change message. The common data attributes in the second reference object are updated to match the common data attributes in the first reference object if the message is a synchronization message. A unique data attribute in the second reference object is updated if the message is a key change message.

A computer readable medium for receiving and sending messages about changes to data attributes is disclosed. The computer readable medium comprises executable instructions. A message is received that includes all common data attributes associated with a first reference object. The data attributes in the message are mapped to common data attributes in a second reference object. The type of the message is determined. The message is a synchronization message or a key change message. The common data attributes in the second reference object are updated to match the common data attributes in the first reference object if the message is a synchronization message. A unique data attribute in the second reference object is updated if the message is a key change message.

Most business applications include two general types of data. The first may be transactional data. Examples of transactional data may include orders shipments invoices payments etc. Transactional data may utilize a high degree of control in order to maintain its integrity. This type of data may be managed by a single highly integrated application which may be highly dynamic or attended by a large volume of activity.

The second type of data may include identity data. Examples of identity data or reference data may include customers employees products services accounts locations etc. The terms reference and identity when describing data and objects may be used interchangeably. While an important level of control may be utilized to maintain the integrity of identity data it may be common for several business applications in an enterprise to maintain the same identity data. It may be beneficial if this type of data could be created edited changed deleted etc. by each individual business application. Further it would be beneficial if each individual business application could share common data with the other business applications in the enterprise. For example it may be beneficial if all of the systems in a business that deal with a certain customer could identify that customer in the same way.

Transactional data may be controlled by tightly coupled data management techniques. For example a change to an order amount may occur in the same database transaction that affects the inventory levels of the product. However tightly coupled application systems are more expensive to develop and maintain than loosely coupled application systems.

Identity data generally doesn t require tightly coupled data management techniques. Instead this type of data can generally be handled with loosely coupled data management techniques. A change to an individual s address in one application should be shared with all of the other applications within the business enterprise but it may be acceptable if it takes several seconds or minutes to synchronize this changed data with the other applications.

The present systems and methods may enable a business enterprise to loosely couple identity data with multiple business systems applications and infrastructure using an asynchronous messaging system. This type of messaging system may guarantee delivery of identity change messages to each system and application within the business enterprise. Furthermore the present systems and methods allow an application to complete a change to an attribute associated with identity data without affecting the normal operation of the application. The present systems and methods may operate in the background and send a message including information about the change to additional systems and applications within the business enterprise. When the additional applications are available they may accept the message and process the change.

One of the benefits of the present systems and methods is that if any systems are unavailable for any reason i.e. off line the integrity of the identity data will not be jeopardized. The remaining systems that are available will continue to be synchronized and continue with accurate updated data attributes.

Traditionally systems and methods require data structures of the different applications to be identical or very similar. At the very least the identity data typically has been required to share a common data attribute that uniquely identifies identity data. Such requirements have not enabled current systems and methods to be sufficiently loosely coupled. Further it is expensive for dissimilar applications to share identity data. Unlike other systems the present systems and methods do not require identical or even similar attributes or data structures within different applications.

Synchronizing identity data between various systems is inherently difficult. Among the reasons for this are that different systems often use different data organization and automation schemes and systems may not be coupled in any way. Part of the difficulty is that business process automation is an activity oriented process where various actions are performed on a variety of identities. Intelligently coupling activities with identities and visa versa in different systems is inherently difficult because the data models and methods used by identity systems and activity systems may be incompatible at multiple levels.

Utilizing identity as an organizing metaphor may provide a way to separate the activities from the identities. Information technology IT identities can be generally classified as users and resources. Examples of users may include people applications systems and services while examples of resources may include content e.g. files applications systems and services.

Each of spoke systems A B C D E and F may include a spoke manager e.g. spoke managers A B C D E and F respectively. A spoke manager may be deployed for each spoke system within an enterprise and perform a number of operations such as receiving messages from a hub manager translating messages updating identity data and sending messages to a hub system . For example each of spoke managers A B C D E and F may include a translator e.g. translators A B C D E F . A translator may change the format of a message received from the hub system into a system specific format.

Spoke managers may communicate directly with the hub manager and translate standard messages sent from the hub manager to the system or application. Data translations or data transformations may include data mapping and data formatting. In one configuration data mapping identifies the location of specific required data in one system and application and maps it to a location of data with the same attributes of another system and application. In one configuration data formatting defines a physical format of the data.

In one configuration spoke managers may be deployed to each spoke system and application within a business enterprise and may be very specific to the particular business system or application on which it resides. This type of distributed architecture distributes the complexity of maintaining reference objects across an enterprise where each spoke manager may communicate with a hub manager . In one configuration adding additional systems or applications does not require changes to the hub manager because the spoke manager provides the translation of data formats between the systems and applications and the hub manager . This may allow business systems and applications to be deployed on a variety of technology platforms data management tools and application development environments.

When a hub manager sends a change message it may contain all of the information about a reference object rather than just the changes. This means that the receiving spoke manager and its source system may have enough contextual information to translate differences in data structures keys application technologies and business rules. At the same time the spoke manager may translate any differences and synchronize the data with the source system internal data structures. The spoke manager will be described in more detail in the description of .

Spoke system A and spoke system B may include any type of computing device such as a personal computer laptop personal digital assistant PDA computer server etc. Spoke systems A and B may include application A and application B respectively. Applications A and B may include software that employs the capabilities of systems A and B to execute a task. In one configuration applications A and B may utilize different data structures. Different data structures may be suited to different types of applications such as applications A and B .

Spoke systems A and B may also include application A database and application B database respectively. The databases may include a stored collection of data that may be accessed by applications A and B . In one configuration spoke systems A and B may also include spoke manager A and spoke manager B respectively. Spoke managers A and B may send receive data to from applications A and B respectively. In addition spoke managers A and B may send receive data to from application A database and application B database respectively. In one configuration spoke manager A sends receives data to from application A in a first format . In another configuration spoke manager B sends receives data to from application B in a second format . The first format may be different from the second format . Spoke manager A may also send receive data to from the system . In one configuration spoke manager A sends receives data to from the system in a third format . In another configuration spoke manager B also sends receives data to from the hub system in the third format .

Spoke managers A and B may communicate with the hub system over network A and network B respectively. While the illustrated configuration only illustrates two networks it is to be understood that the system may communicate with any number of systems over any number of networks. In one configuration the system includes a hub manager . The hub manager may act as a broker of identity data included in reference objects for the various systems and applications. For example the hub manager may send receive messages to from the various systems and applications. Business systems and applications such as spoke system A may change identity data in a database such as application A database and send a message about these changes to the hub manager . The hub manager may then send a message to other spoke systems and applications that utilize this identity data such as spoke system B . In this way the present systems and methods may guarantee that messages with updated identity data are sent to all connected business systems and applications that utilize any shared or common attribute.

In one configuration the hub manager may include a repository . The repository may store data included within the various systems communicating with the hub system such as spoke systems A and B . In one configuration repository may include a plurality of reference objects such as reference object A and reference object B . Reference object A and B may be a record of data relating to the identity of an individual product etc. For example reference object A may be an employee record and reference object B may be a customer record. Each reference object may include common data attributes. Reference object A may include common data attributes A and reference object B may include common data attributes B . Common data attributes may include data that is shared between systems such as spoke system A and spoke system B . An example of a common data attribute may include the name of the entity being identified by the reference object. Further examples of common data attributes may include an address date of birth email address etc.

Spoke manager A and spoke manager B may implement a unique data attribute to uniquely identify each reference object. For example spoke manager A may implement unique data attribute A and spoke manager B may implement unique data attribute B to identify reference object A . Similarly spoke manager A may implement unique data attribute C and spoke manager B may implement unique data attribute D to uniquely identify reference object B . In one configuration the repository is aware of each unique data attribute and the value of such attribute that each spoke manager implements to identify a particular reference object. The following scenario may further illustrate this concept.

A human resource system of a business may implement the unique data attribute of Employee id to uniquely identify the reference object of an employee record of the employee associated with the employee identification indicated by Employee id . An accounting system of the same business may use the unique data attribute of Employee tax id to uniquely identify the employee record of an employee. For purposes of illustration the Employee id may be 789 and the Employee tax id may be A52 . The employee record may include one or more common data attributes such as name address date of birth etc. In one configuration the employee with the Employee id of 789 may change his her address through an application on the human resource system. The accounting system may not be able to be updated with the new address because the accounting system identifies employee records with a different data attribute i.e. Employee tax id .

In one configuration the repository stores the employee s information such that the hub manager is aware that the employee identification is 789 and the employee tax identification is A52 . The repository may translate a message associated with Employee id 789 that is updating a common data attribute to a message that includes Employee tax id A52 before the message is sent to the accounting system.

In this configuration the hub manager is aware of which unique data attribute and its value each spoke manager uses to uniquely identify a reference object. The hub manager is also aware of each of the plurality of reference objects that a particular enterprise may use i.e. employee records customer records product record etc. . Further the hub manager is aware of each common data attribute included with each reference object. The repository associates each reference object with the unique data attribute each spoke manager uses to uniquely identify the reference object.

Application A database and application B database may include one or more reference objects such as reference object A . Reference object A may identify a particular type of entity that is associated with one or more common data attributes. For example reference object A may identify customers employees business entities products services accounts locations etc. In one configuration reference object A may include common data attributes relating to the entity identified by reference object A . In the depicted configuration the reference object A identifies a customer and may include common data attributes further relating to the identity of the customer. It is to be understood that additional reference objects may include common data attributes that further relate to the identity of other entities in addition to customers. In one configuration reference object A includes common data attributes such as name NetID account number and email address . While only four examples of common data attributes are listed it is to be understood that reference object A may include other common data attributes. For example common data attributes may include date of birth residential address business address social security number account numbers etc.

Spoke manager A and spoke manager B may each uniquely identify the reference object A with a different unique data attribute. For example spoke manager A may identify reference object A using unique data attribute A while spoke manager B identifies reference object A using unique data attribute B .

In addition application A and application B may use different common data attributes of reference object A . For example application A may use the common attributes of name NetID account number and email address . Application B may use the common data attributes of data of birth address and telephone number .

In one configuration application A database may have previously stored the name Jim Bowen . When application A communicates the name Ed Bowen to application A database the value Jim Bowen may be changed to the value Ed Bowen . This scenario may illustrate the situation where the first name entered Jim Bowen was incorrect and should have been Ed Bowen. In this configuration the common data attribute of name is changed.

In one configuration spoke manager A may send a message including the change in the common attribute of name to the hub manager . In an additional configuration the message may include all the common data attributes included with the reference object . For example the reference object may include several common data attributes such as email NetID address etc. A change to any common data attribute such as name may cause a synchronization message to be sent which includes all of the common data attributes of the reference object . In other words the message may include common data attributes that have not been modified. In the illustrated example the hub manager detects from the synchronization message that a common data attribute of the reference object has changed.

Spoke manager A may gather all the common data attributes of the reference object and perform data translations if necessary. Spoke manager A may package the message in a first data format . In one configuration spoke manager A includes translator A which facilitates the translation of the reference object if necessary. The message may be in the form of a simple record that includes unique data attribute A . Unique data attribute A may be used by spoke manager A to uniquely identify the reference object . Spoke manager A may send the message to the hub manager over network A . Changes to common data attributes associated with the reference object may be communicated to the hub manager . In a further configuration application A updates reference information by writing a queue record in application A database . Spoke manager A may monitor the database and take action based on the queue records in the database . In another configuration application A may not include an application programming interface API that spoke manager A may work with. In this instance spoke manager A may access data directly from application A database .

In the illustrated example the hub manager may detect from the synchronization message that a common data attribute of the reference object has changed. In one configuration the hub manager may define a packet of information for the reference object which includes all the common data attributes of the reference object . The packet of information included in the hub manager may be a superset of data from each system and application that uses the reference object . In one configuration the hub manager maintains a repository with the reference object and each of the common data attributes of the reference object . In addition as previously explained the repository includes the unique data attributes used by each spoke manager to identify the reference object .

In one configuration the hub manager may receive the message which includes unique data attribute A . The hub manager may be aware that spoke manager A uses unique data attribute A to identify the reference object . The hub manager may processes the message in order to update the common data attributes associated with the reference object stored in the repository . For example the common data attribute of name may be changed from Jim Bowen to Ed Bowen .

Note that although illustrates a message being sent from the spoke manager to the hub system the hub system may also send messages to one or more spoke managers . This will be described in further detail below.

Spoke manager A may send the message in the first data format to a data manager over network A . In one configuration the data manager is included within a hub manager . In one configuration spoke manager A may require additional information in order to build the message. Additional information may be retrieved from the hub manager in order to build a complete message. For example the additional information may be retrieved through synchronous web services messages. In one configuration the data manager receives requests from spoke manager A for the web services.

The hub manager processes the message and determines which reference object is identified from the unique data attribute included in the message. In this example the message includes unique data attribute A which identifies the reference object . In one configuration the common data attribute of name included in the reference object is changed from Jim Bowen to Ed Bowen . The reference object stored in the repository may be updated with the changed common data attribute included in the message.

A message generator may generate a synchronization message that includes updates to any of the common data attributes of the reference object . A collision detector may be used before the hub manager sends synchronization messages to other spoke systems to notify them of any updates to common data attributes. The collision detector detects the most recent synchronization message for a given reference object and only allows the most current messages generated by the message generator to be sent to additional spoke managers. Collision detection occurs when a particular spoke system is synchronized on a scheduled time interval as opposed to an on demand synchronization. In one configuration the hub manager is aware which spoke managers are configured for a scheduled synchronization and when that is to occur. Synchronization messages may be placed in a cue between scheduled synchronization events and only the most recent messages are sent and the others are discarded at that time. The collision detector verifies that only the most accurate common data attributes are included on each reference object in every spoke system that needs that particular common data attribute.

The synchronization message may be sent to application B through spoke manager B . Network B is also present. Because the hub manager is aware that spoke manager B uses unique data attribute B to identify reference object the message may include unique data attribute B . Spoke manager B may receive the message in the first data format with unique data attribute B . In one configuration translator B translates the message to a format which may be used by application B or application B database. In one configuration the message may be a series of messages requests depending on the API of application B . Spoke manager B may communicate directly with application B database if application B does not allow a public API. Spoke manager B translates the message becomes aware that the message pertains to common data attributes of the reference object because of unique data attribute B . The message includes all the common data attributes associated with the reference object . Spoke manager B determines which common data attributes are applicable to the reference object used by application B . In other words spoke manager B may ignore some of the common data attributes in the message if they do not pertain to application B.

In some configurations a unique data attribute may be changed. For example referring to the previous example the human resource system may change the employee tax identification for an employee from A52 to B46 . In this example the Employee tax id is used by the spoke manager B to uniquely identify the employee record. The hub manager may generate a key change message if the unique data attribute used by another spoke manger is altered.

The data mapping module may include a standard module to perform standard data mapping a disjointed module to perform disjointed data mapping and a static value module to perform static value mapping. The type of mapping performed by the data mapping module may depend on the correlation of the data in the hub manager to the data in system A .

If the identity data in the hub manager is identical to the identity data in spoke system A the standard module may use standard mapping. In this case mapping between systems may be a very simple process of identifying which data attributes are equivalent. Following the previous example if the name attribute of a reference object is changed on the hub manager a message may be generated on the hub manager . This may be a packet of information including all of the common data attributes about the reference object which may be a superset of all the common data attributes of the reference object residing on any of the systems in the enterprise. Upon generating this message the hub manager may then send the message to spoke system A . If the data attributes of reference object on the hub manager are identical to the data attributes of the reference object on spoke system A then the standard data mapping module may use standard data mapping to map the common attribute values of the reference object on system A to the common attribute values of the reference object on the hub manager . In other words if the attribute value on the hub manager was changed from Jim Bowen to Ed Bowen and the reference object on spoke system A includes a common attribute value Jim Bowen the value of Jim Bowen in spoke system A may be changed to the value of Ed Bowen in spoke system A . This is the process of standard mapping and may be performed when the identity data attributes in one source are identical to the identity data attributes in another source e.g. both the spoke system and the hub system have had a name attribute with a value Jim Bowen .

However when an identity attribute value in the hub manager is not identical to an identity attribute value in spoke system A the disjointed module may use disjointed data mapping. For example when a single attribute in a source like the hub system is a first and a last name and a single attribute in another source like spoke system A is only a first name disjointed data may be used. In the previous example if the name attribute value on the hub manager was changed from Jim Bowen to Ed Bowen but the name attribute on system A was represented by two attributes instead of one e.g. a first name attribute and a last name attribute then disjointed mapping may be used since the identity attribute value on the two sources are not identical to one another. Disjointed mapping may include a Java application programming interface API or a set of XPath functions that performs some specific operation on the identity data. Additionally disjointed mapping may include custom code that performs some specific transformation such as performing a mathematical calculation joining multiple fields into one or more other fields or adding additional data retrieved from one or more other source systems.

Furthermore when certain identity attributes are static the static value module may perform static value mapping. As used herein the term static refers to attributes for which there is a pre defined list of possible values. This may be the case where two different attribute values are syntactically different but represent the same data. One example may be if the reference object in spoke system A included an identity attribute for a geographic location such as state and the value of state was spelled out entirely while the reference object in another system such as system or system B included an identity attribute state but used the two letter abbreviation for the value. These two values would not be identical however they would represent the same data. In this case the static value module may utilize one or more crosswalk tables to ensure that the differing values for common attributes are mapped appropriately. The crosswalk tables may create a unique identifier state in the above example that may communicate the appropriate value to each system e.g. Utah and UT. The crosswalk tables may be present on both the hub manager and all the spoke managers A B C D E and F .

Additionally a relay configuration module may format data appropriately for any given system. As described earlier each spoke system may have different format requirements than each other and the hub system . Furthermore to provide scalability to an enterprise the hub system may not be constantly updated for each new spoke system added to the enterprise. Therefore each spoke manager may be required to format a message from another spoke system or the hub system to fit the needs of the spoke system on which it resides. To do this each piece of identity data may be accessed via an application programming interface API a data access protocol such as JDBC SQL or LDAP or directly from the application database . The relay configuration module may be unique and customized for each spoke manager and the system it operates on. For example the relay configuration module may format an outgoing message being sent to a hub manager when a reference object is changed on system A .

Furthermore the spoke manager may utilize a publish and subscribe model like those often implemented in service oriented architectures. In other words the spoke manager may be unaware of receivers of the messages it publishes such as systems B C D E and F . For example spoke system A may be unaware of any other spoke systems that may ultimately receive a message that it sends or publishes. Therefore the spoke manager may publish a message to the hub manager which may then decide which other systems should receive the message. This model is used to exchange data between the hub manager and system A via spoke managers to synchronize identity data. Various messages may be passed between the hub manager and the spoke manager . Examples of messages include without limitation synchronization messages when common data attributes are changed key change messages when unique data attributes are changed acknowledgements completion codes and requests for information.

The spoke manager may also include a communication module . One of the advantages of the present systems and methods is the way in which standard web services transport security and message formats are utilized which are often associated with communication activities e.g. Hypertext Transfer Protocol HTTP Secure Sockets Layer SSL and Simple Object Access Protocol SOAP . These protocols may be used to reliably implement identity data synchronization in a service oriented architecture SOA in the communications module in the following manner.

The SOAP module may be used by the spoke manager to communicate with the hub manager . Both the spoke manager and the hub manager may use the SOAP module . The module may encode an XML message in a HTTP packet and guarantee its accurate transmission from the spoke manager to the hub manager or vice versa.

Additionally the communication module may utilize other communication methodologies and protocols across an enterprise. For example the Internet Message Access Protocol IMAP module may use IMAP and the Representational State Transfer REST module may use the REST method to read information included in Extensible Markup Language XML files that are asynchronously passed between spoke managers and hub managers .

In one configuration application A may access application A database and store a queue record if changes to common data attributes have occurred. Application A and the spoke system including application A such as system A may include native built in workflow capabilities. In one configuration application A may include a workflow manager to manage these workflow capabilities. Spoke manager A may monitor application A database for a queue record. If a queue record is detected by spoke manager A spoke manager A may package a synchronization message that includes all of the common data attributes of the reference object and sends the message to a hub manager. In a further configuration spoke manager A may gather all the common data attributes of the reference object by making requests of application A through an API or by accessing application A database directly if there is no API available.

In one configuration a notification may be communicated to an authenticator when a queue record is stored in application A database . The authenticator may include a system administrator who may accept or reject the storage of the queue record. In another configuration the authenticator may include computer software that automatically accepts or rejects the queue record according to certain parameters determined by the system administrator. For example the system administrator may program the software to accept changes relating to the common data attribute of name and reject any changes to the common data attribute of account number . If the queue record is rejected spoke manager A may not build a message to send to a hub manager over network A .

The message may include all the common data attributes associated with the reference object. The message may also include the unique data attribute used by the receiving spoke manager to uniquely identify the reference object. In one configuration the receiving spoke manager has sufficient contextual information to translate for differences in data structures keys application technologies and business rules. In a further configuration the receiving spoke manager may translate any differences and synchronize the data with its internal data structures.

In one configuration a message may be received in the second format. In one configuration the message may be received from the hub manager . The message may be translated to a third format. In one configuration the third format may be a format specific to a particular system and application. The message may be sent to the system and application that is specific to the third format.

The system may also include a network interface . The network interface facilitates communication between the system and other devices connected to a network which may be a pager network a cellular network a global communications network the Internet a computer network a telephone network etc. The network interface operates according to standard protocols for the applicable network.

The system may also include memory . The memory may include random access memory RAM for storing temporary data. Alternatively or in addition the memory may include read only memory ROM for storing more permanent data such as fixed code and configuration data. The memory may also be embodied as a magnetic storage device such as a hard disk drive. The memory may be any type of electronic device capable of storing electronic information. The memory may include instructions executable to implement the systems and methods described herein. Alternatively or in addition to the CPU may include executable instructions . For example the CPU may load instructions before execution.

The system may also include one or more communication ports which facilitate communication with other devices. The system may also include input output devices such as a keyboard a mouse a joystick a touchscreen a monitor speakers a printer etc.

Of course illustrates only one possible configuration of a system . Various other architectures and components may be utilized.

Information and signals may be represented using any of a variety of different technologies and techniques. For example data instructions commands information signals bits symbols and chips that may be referenced throughout the above description may be represented by voltages currents electromagnetic waves magnetic fields or particles optical fields or particles or any combination thereof.

As used herein the term determining encompasses a wide variety of actions and therefore determining can include calculating computing processing deriving investigating looking up e.g. looking up in a table a database or another data structure ascertaining and the like. Also determining can include receiving e.g. receiving information accessing e.g. accessing data in a memory and the like. Also determining can include resolving selecting choosing establishing and the like.

The phrase based on does not mean based only on unless expressly specified otherwise. In other words the phrase based on describes both based only on and based at least on. 

The term processor should be interpreted broadly to encompass a general purpose processor a central processing unit CPU a microprocessor a digital signal processor DSP a controller a microcontroller a state machine and so forth. Under some circumstances a processor may refer to an application specific integrated circuit ASIC a programmable logic device PLD a field programmable gate array FPGA etc. The term processor may refer to a combination of processing devices e.g. a combination of a DSP and a microprocessor a plurality of microprocessors one or more microprocessors in conjunction with a DSP core or any other such configuration.

The term memory should be interpreted broadly to encompass any electronic component capable of storing electronic information. The term memory may refer to various types of processor readable media such as random access memory RAM read only memory ROM non volatile random access memory NVRAM programmable read only memory PROM erasable programmable read only memory EPROM electrically erasable PROM EEPROM flash memory magnetic or optical data storage registers etc. Memory is said to be in electronic communication with a processor if the processor can read information from and or write information to the memory. Memory may be integral to a processor and still be said to be in electronic communication with the processor.

The terms instructions and code should be interpreted broadly to include any type of computer readable statement s . For example the terms instructions and code may refer to one or more programs routines sub routines functions procedures etc. Instructions and code may comprise a single computer readable statement or many computer readable statements.

The functions described herein may be implemented in hardware software firmware or any combination thereof. If implemented in software the functions may be stored as one or more instructions on a computer readable medium. The term computer readable medium refers to any available medium that can be accessed by a computer. By way of example and not limitation a computer readable medium may comprise RAM ROM EEPROM CD ROM or other optical disk storage magnetic disk storage or other magnetic storage devices or any other medium that can be used to carry or store desired program code in the form of instructions or data structures and that can be accessed by a computer. Disk and disc as used herein includes compact disc CD laser disc optical disc digital versatile disc DVD floppy disk and Blu ray disc where disks usually reproduce data magnetically while discs reproduce data optically with lasers.

Software or instructions may also be transmitted over a transmission medium. For example if the software is transmitted from a website server or other remote source using a coaxial cable fiber optic cable twisted pair digital subscriber line DSL or wireless technologies such as infrared radio and microwave then the coaxial cable fiber optic cable twisted pair DSL or wireless technologies such as infrared radio and microwave are included in the definition of transmission medium.

The methods disclosed herein comprise one or more steps or actions for achieving the described method. The method steps and or actions may be interchanged with one another without departing from the scope of the claims. In other words unless a specific order of steps or actions is required for proper operation of the method that is being described the order and or use of specific steps and or actions may be modified without departing from the scope of the claims.

Functions such as executing processing performing running determining notifying sending receiving storing requesting and or other functions may include performing the function using a web service. Web services may include software systems designed to support interoperable machine to machine interaction over a computer network such as the Internet. Web services may include various protocols and standards that may be used to exchange data between applications or systems. For example the web services may include messaging specifications security specifications reliable messaging specifications transaction specifications metadata specifications XML specifications management specifications and or business process specifications. Commonly used specifications like SOAP WSDL XML and or other specifications may be used.

It is to be understood that the claims are not limited to the precise configuration and components illustrated above. Various modifications changes and variations may be made in the arrangement operation and details of the systems methods and apparatus described herein without departing from the scope of the claims.

