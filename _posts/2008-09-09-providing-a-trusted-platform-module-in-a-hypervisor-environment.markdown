---

title: Providing a trusted platform module in a hypervisor environment
abstract: A method is presented for implementing a trusted computing environment within a data processing system. A hypervisor is initialized within the data processing system, and the hypervisor supervises a plurality of logical, partitionable, runtime environments within the data processing system. The hypervisor reserves a logical partition for a hypervisor-based trusted platform module (TPM) and presents the hypervisor-based trusted platform module to other logical partitions as a virtual device via a device interface. Each time that the hypervisor creates a logical partition within the data processing system, the hypervisor also instantiates a logical TPM within the reserved partition such that the logical TPM is anchored to the hypervisor-based TPM. The hypervisor manages multiple logical TPM's within the reserved partition such that each logical TPM is uniquely associated with a logical partition.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08086852&OS=08086852&RS=08086852
owner: International Business Machines Corporation
number: 08086852
owner_city: Armonk
owner_country: US
publication_date: 20080909
---
This application is a continuation of U.S. patent application Ser. No. 10 835 350 filed Apr. 29 2004 now U.S. Pat. No. 7 484 091.

The present invention relates to an improved data processing system and in particular to a method and apparatus for data storage protection using cryptography.

Most data processing systems contain sensitive data and sensitive operations that need to be protected. For example the integrity of configuration information needs to be protected from illegitimate modification while other information such as a password file needs to be protected from illegitimate disclosure. As another example a data processing system needs to be able to reliably identify itself to other data processing systems.

An operator of a given data processing system may employ many different types of security mechanisms to protect the data processing system. For example the operating system on the data processing system may provide various software mechanisms to protect sensitive data such as various authentication and authorization schemes while certain hardware devices and software applications may rely upon hardware mechanisms to protect sensitive data such as hardware security tokens and biometric sensor devices.

The integrity of a data processing system s data and its operations however centers around the issue of trust. A data processing system s data and operations can be verified or accepted by another entity if that entity has some manner for establishing trust with the data processing system with respect to particular data items or particular operations.

Hence the ability to protect a data processing system is limited by the manner in which trust is created or rooted within the data processing system. To address the issues of protecting data processing systems a consortium of companies has formed the Trusted Computing Group TCG to develop and to promulgate open standards and specifications for trusted computing. According to the specifications of the Trusted Computing Group trust within a given data processing system or trust between a data processing system and another entity is based on the existence of a hardware component within the data processing system that has been termed the trusted platform module TPM .

A trusted platform enables an entity to determine the state of the software environment in that platform and to seal data to a particular software environment in that platform. The entity deduces whether the state of the computing environment in that platform is acceptable before performing a transaction with that platform. To enable this the trusted platform provides integrity metrics also known as integrity measurements to the entity that reflects the integrity of the software state of the trusted platform and the integrity measurements require a root of trust within the computing platform. In order for a system to be a trusted platform the integrity measurements must be taken from the Core Root of Trust for Measurements and extended through the initial program load IPL process up to the point at which the operating system is initialized.

A trusted platform module has been generally described in a platform independent manner but platform specific descriptions have been created for certain classes of systems such as personal computers PC s . Existing hardware for trusted computing has focused on implementations for a single trusted platform module for a single system. This situation is sufficient for simple servers and PC s which tend to be relatively low performance computers that meet the needs of stand along computational environments or client side processing environments.

High performance servers though support partitionable multithreaded environments that may need access to a trusted platform module on multiple threads simultaneously. In order to fulfill the needs of such environments the trusted platform module must also provide high performance. Therefore it would be advantageous to have a mechanism for enabling a high performance trusted platform module in a partitionable environment.

A method an apparatus and a computer program product are presented for implementing a trusted computing environment within a data processing system. A hypervisor is initialized within the data processing system and the hypervisor supervises a plurality of logical partitionable runtime environments within the data processing system. The hypervisor reserves a logical partition for a hypervisor based trusted platform module TPM which provides integrity measurements for a software state of the data processing system and presents the hypervisor based trusted platform module to other logical partitions as a virtual device via a device interface. Each time that the hypervisor creates a logical partition within the data processing system the hypervisor also instantiates a logical TPM within the reserved partition such that the logical TPM is anchored to the hypervisor based TPM. The hypervisor manages multiple logical TPM s within the reserved partition such that each logical TPM is uniquely associated with a logical partition.

In general the devices that may comprise or relate to the present invention include a wide variety of data processing technology. Therefore as background a typical organization of hardware and software components within a distributed data processing system is described prior to describing the present invention in more detail.

With reference now to the figures depicts a typical network of data processing systems each of which may implement a portion of the present invention. Distributed data processing system contains network which is a medium that may be used to provide communications links between various devices and computers connected together within distributed data processing system . Network may include permanent connections such as wire or fiber optic cables or temporary connections made through telephone or wireless communications. In the depicted example server and server are connected to network along with storage unit . In addition clients also are connected to network . Clients and servers may be represented by a variety of computing devices such as mainframes personal computers personal digital assistants PDAs etc. Distributed data processing system may include additional servers clients routers other devices and peer to peer architectures that are not shown.

In the depicted example distributed data processing system may include the Internet with network representing a worldwide collection of networks and gateways that use various protocols to communicate with one another such as Lightweight Directory Access Protocol LDAP Transport Control Protocol Internet Protocol TCP IP Hypertext Transport Protocol HTTP Wireless Application Protocol WAP etc. Of course distributed data processing system may also include a number of different types of networks such as for example an intranet a local area network LAN or a wide area network WAN . For example server directly supports client and network which incorporates wireless communication links. Network enabled phone connects to network through wireless link and PDA connects to network through wireless link . Phone and PDA can also directly transfer data between themselves across wireless link using an appropriate technology such as Bluetooth wireless technology to create so called personal area networks PAN or personal ad hoc networks. In a similar manner PDA can transfer data to PDA via wireless communication link .

With reference now to a diagram depicts a typical computer architecture of a data processing system such as those shown in in which the present invention may be implemented. Data processing system contains one or more central processing units CPUs connected to internal system bus which interconnects random access memory RAM read only memory and input output adapter which supports various I O devices such as printer disk units or other devices not shown such as an audio output system etc. System bus also connects communication adapter that provides access to communication link . User interface adapter connects various user devices such as keyboard and mouse or other devices not shown such as a touch screen stylus microphone etc. Display adapter connects system bus to display device .

Those of ordinary skill in the art will appreciate that the hardware in may vary depending on the system implementation. For example the system may have one or more processors such as an Intel Pentium based processor and a digital signal processor DSP and one or more types of volatile and non volatile memory. Other peripheral devices may be used in addition to or in place of the hardware depicted in . The depicted examples are not meant to imply architectural limitations with respect to the present invention.

With reference now to a block diagram depicts an example of a prior art distributed data processing system. Distributed data processing system contains multiple nodes each of which may represent a single processor or multi processor device or card connected to a communication switch or a network nodes may be implemented as central electronic complex CEC units. Hypervisor supports multiple instances of one or more operating systems and or operating system partitions on the shared computational resources of the distributed data processing nodes of system . Hypervisor communicates with system level service processor which is responsible for booting system and for monitoring the availability of the shared resources. Each distributed data processing node is associated with a service processor e.g. service processors each of which is responsible for booting its associated node and for assisting system level service processor in monitoring each of the nodes a service processor may be associated with a node through a variety of physical connections to its associated node e.g. the service processor s hardware card may attach to a PCI bus. It should be noted that each node may have a plurality of service processors although only one service processor would be responsible for booting its associated node.

The present invention could be implemented on a variety of hardware platforms and computational environments and are intended as examples of a heterogeneous computing environment and not as architectural limitations for the present invention. In addition to being able to be implemented on a variety of hardware platforms and computational environments the present invention may be implemented in a variety of software environments. A typical operating system may be used to control program execution within each data processing system. For example one device may run a Unix operating system while another device contains a simple Java runtime environment. A representative computer platform may include a browser which is a well known software application for accessing hypertext documents in a variety of formats such as graphic files word processing files Extensible Markup Language XML Hypertext Markup Language HTML Handheld Device Markup Language HDML Wireless Markup Language WML and various other formats and types of files.

The present invention may be implemented on a variety of hardware and software platforms as described above. More specifically though the present invention is directed to trusted computing platforms. Before describing the present invention in more detail though some background information about trusted computing platforms is provided in and for evaluating the operational efficiencies and other advantages of the present invention. Although the present invention may be implemented in conjunction with a variety of trusted computing platforms possibly in accordance with one or more standards the examples of the present invention hereinbelow employ the terminology and examples from the standards and or specifications that have been promulgated by the Trusted Computing Group TCG it should be noted though that the examples are not meant to imply architectural functional nor definitional limitations with respect to embodiments of the present invention.

With reference now to a block diagram depicts some of the components in a data processing system that is constructed using a model of a trusted platform architecture. Trusted platform architectures may be implemented for particular computational environments or for particular classes of devices depicts a trusted platform architecture in accordance with the TCG s PC specific implementation specification.

System supports execution of software components such as operating system applications and drivers on its platform . The software components may be received through a network such as network that is shown in or they may be stored e.g. on hard disk . Platform receives electrical power from power supply for executing the software components on add on cards and motherboard which includes typical components for executing software such as CPU and memory although motherboard may include multiple CPU s. Interfaces connect motherboard to other hardware components within system and firmware contains POST BIOS power on self test basic input output system .

Motherboard also comprises trusted building block TBB motherboard is supplied by a manufacturer with TBB and other components physically or logically attached and supplied by the manufacturer. TBB comprises the combination of the core root of trust for measurement CRTM component the trusted platform module TPM the connection of the CRTM to motherboard and the connection of the TPM to motherboard .

TPM is explained in more detail with respect to hereinbelow. CRTM is an immutable portion of the platform s initialization code that executes upon a platform reset the platform s execution must begin at the CRTM upon any platform reset event. In this manner the trust in the platform is based on the CRTM and the behavior of the TPM and the trust in all measurements is based on the integrity of the CRTM. In the example that is shown in the BIOS may be assumed to include a BIOS Boot Block and POST BIOS each of these are independent components that can be updated independent of each other wherein the manufacturer must control the update modification and maintenance of the BIOS Boot Block but a third party supplier may update modify or maintain the POST BIOS component. In the example that is shown in the CRTM may be assumed to be the BIOS Boot Block and the POST BIOS is a measured component of the chain of trust. Alternatively the CRTM may comprise the entire BIOS.

With reference now to a block diagram depicts some of the major components of a trusted platform module according to TCG specifications. Trusted platform module comprises input output component which manages information flow over communications bus by performing appropriate protocol encoding decoding operations and routing of messages to appropriate components. Cryptographic co processor performs cryptographic operations within a trusted platform module. Key generator creates symmetric keys and RSA asymmetric cryptographic key pairs. HMAC engine performs HMAC Keyed Hashing for Message Authentication calculations whereby message authentication codes are computed using secret keys as integrity checks to validate information transmitted between two parties e.g. in accordance with Krawczyk et al. HMAC Keyed Hashing for Message Authentication Request for Comments RFC 2104 Internet Engineering Task Force IETF February 1997.

Random number generator acts as a source of randomness for the computation of various values such as nonces keys or other values. SHA 1 engine implements the SHA 1 hash algorithm. Power detector manages the power states of a trusted platform module in association with the power states of the platform. Opt in component maintains the state of persistent and volatile flags and enforces semantics associated with those flags such that the trusted platform module may be enabled and disabled. Execution engine runs program code to execute commands that the trust platform module receives through input output component . Non volatile memory stores persistent identity and state associated with the trusted platform module the non volatile memory may store static data items but is also available for storing dynamic data items by entities that are authorized by the trusted platform module owner whereas volatile memory stores dynamic data items.

Given the background information on trusted computing platforms that has been described with respect to and a detailed description of the present invention is provided hereinbelow with respect to the remaining figures. As noted above typical trusted platforms have been designed such that a single trusted platform module exists within a trusted platform architecture which would require unacceptable restrictions in a high performance server or similar distributed data processing system such as system that is shown in . On the other hand high performance servers support partitionable multithreaded environments that need efficient use and sharing resources. The present invention addresses this problem by providing a mechanism for enabling a virtualized trusted platform module in a partitionable environment as explained in more detail hereinbelow whereby an embodiment of the present invention allows virtualization of a trusted platform module in software or in hardware that is not virtualizable in itself.

With reference now to a block diagram depicts a logical organization for a high performance trusted platform module in a hypervisor based execution environment within a data processing system in accordance with an embodiment of the present invention. Data processing system contains a hypervisor that supports multiple instances of one or more operating systems and or logical partitions LPAR s and on the shared computational resources of data processing system . LPAR contains TCG software stack TSS and TPM device driver TPMDD while LPAR contains TSS and TPMDD . TSS and TSS implement the specification of the host programming interfaces that an operating system an application or other software component utilizes to interface with a TPM. TSS comprises the TSS service provider to which an entity may interface via common application programming interfaces API s the TSS core services which provides centralized management of key storage contexts and handles the direct interaction with the TPM on the host and the TPM device driver library and the TPMDD such as TPMDD or TPMDD . Generally all interfacing to the TPM occurs through TSS service provider interface TSPI or an API above the TSPI.

In order to improve throughput on the TPM the present invention presents a TPM within system as a hypervisor based TPM HTPM that is accessed through HTPM interface unit in hypervisor HTPM provides the functionality of a TPM for system .

A TPM is specified as an I O device with operations into it being asynchronous in the present invention HTPM is represented as a virtual I O device i.e. a logical I O device. Operations to the HTPM e.g. functional calls or requests from LPAR to HTPM are placed onto input queue which causes a trap into hypervisor . Hypervisor re queues the operation to HTPM where the TPM functions are performed on a first in first out basis. When the TPM function is complete HTPM places the results on output queue which also causes a trap into hypervisor hypervisor then passes the results back to the calling entity.

In an alternative embodiment HTPM could be implemented within hypervisor . In a preferred embodiment HTPM is managed by hypervisor within a reserved logical partition shown as HTPM partition which is logically part of the hypervisor e.g. its code is maintained as part of the certified hypervisor the hypervisor creates the HTPM partition upon each reboot.

Managing the HTPM in a separate partition provides additional advantages. Many of the TPM operations utilize the RSA algorithm which is computationally expensive and the incorporation of the HTPM within the hypervisor would result in execution path lengths that would be unacceptable. Hence by placing the HTPM within a partition the hypervisor maintains its execution characteristics while relegating the TPM functions to a lower priority. Moreover the placement of the HTPM in a separate partition provides the hypervisor with greater flexibility in protecting the memory that is used by the HTPM without impacting the hypervisor.

With reference now to a block diagram depicts a logical organization for a high performance trusted platform module that includes logical trusted platform modules in a hypervisor based execution environment within a data processing system in accordance with an embodiment of the present invention. System that is shown in is similar to system that is shown in similar reference numerals refer to similar elements. However HTPM partition is implemented in a manner to support multiple virtualized TPM s e.g. logical TPM LTPM and LTPM . An example of an implementation of virtualized LTPM s for virtualized environments such as logical partitions can be found in Method and system for virtualization of trusted platform modules U.S. Pat. No. 7 380 119 hereby incorporated by reference. When the hypervisor creates a logical partition the hypervisor instantiates an LTPM within the HTPM partition when the hypervisor terminates a logical partition the hypervisor destroys its associated LTPM. Each LPAR within system is uniquely associated with an LTPM each of which is anchored to HTPM . In a preferred embodiment the LTPM s are maintained within HTPM partition along with HTPM . HTPM interface unit supports multiple input queues and multiple output queues such that each LTPM has an associated input queue and an associated output queue.

With reference now to a set of flowcharts depict processes by which a hypervisor based trusted platform module supports access to TPM functionality in accordance with an embodiment of the present invention. Referring to when the hypervisor is initialized step the hypervisor creates a special separate partition that supports the hypervisor based trusted platform module HTPM i.e. an HTPM partition step . Referring to at some later point in time when the hypervisor creates a logical partition step the hypervisor instantiates a logical or virtualized trusted platform in the HTPM partition that is anchored to the HTPM step . Referring to at some later point in time when a TPM device driver is responding to a function call from a software component the TPM device driver places a TPM functional request on the appropriate HTPM interface input queue step . The hypervisor responds to the queue operation by requeuing the TPM functional request to the appropriate LTPM step . When the LTPM has performed the TPM function the LTPM places the TPM functional response on the appropriate HTPM interface output queue step . The hypervisor then returns the TPM functional response to the requesting TPM device driver step . Multiple simultaneous LTPM s may be actively processing requests while the hypervisor is performing other duties.

It is important to note that while the present invention has been described in the context of a fully functioning data processing system those of ordinary skill in the art will appreciate that the processes of the present invention are capable of being distributed in the form of instructions in a computer readable medium and a variety of other forms regardless of the particular type of signal bearing media actually used to carry out the distribution. Examples of computer readable storage medium include media such as EPROM ROM tape computer readable paper floppy disc hard disk drive RAM and CD ROMs and excluding any transitory media such as propagating signals.

A method is generally conceived to be a self consistent sequence of steps leading to a desired result. These steps require physical manipulations of physical quantities. Usually though not necessarily these quantities take the form of electrical or magnetic signals capable of being stored transferred combined compared and otherwise manipulated. It is convenient at times principally for reasons of common usage to refer to these signals as bits values parameters items elements objects symbols characters terms numbers or the like. It should be noted however that all of these terms and similar terms are to be associated with the appropriate physical quantities and are merely convenient labels applied to these quantities.

The description of the present invention has been presented for purposes of illustration but is not intended to be exhaustive or limited to the disclosed embodiments. Many modifications and variations will be apparent to those of ordinary skill in the art. The embodiments were chosen to explain the principles of the invention and its practical applications and to enable others of ordinary skill in the art to understand the invention in order to implement various embodiments with various modifications as might be suited to other contemplated uses.

