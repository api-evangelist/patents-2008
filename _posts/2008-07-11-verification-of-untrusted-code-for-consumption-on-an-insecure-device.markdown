---

title: Verification of un-trusted code for consumption on an insecure device
abstract: Disclosed is a code verification service that detects malformed data in an automated process and rejects submission and distribution if any malicious code is found. Once the submission is verified it may be packaged in container. The container may then be deployed to a mobile device, and the public key may be used to verify that the container authentic. The device can load trusted managed libraries needed to execute the application and a manager can ensure that only trusted libraries access native resources of the device.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08196213&OS=08196213&RS=08196213
owner: Microsoft Corporation
number: 08196213
owner_city: Redmond
owner_country: US
publication_date: 20080711
---
As the computing power of mobile devices increase more sophisticated applications can be developed to utilize these resources. Typically a provider of such a mobile device may want to protect the device from attackers that try and obtain digital rights management keys or device keys. One way to secure the device is to close the mobile device e.g. manufacture the device in such a way as to only allow a certain type of hardware and proprietary closed source software. By closing the mobile device the provider can provide some level of security by making it more likely than not that only approved code and hardware is used in the device.

While closing the mobile device may make it more difficult for an attacker to compromise the device a provider may want to allow third parties to have some ability to develop applications. A provider may allow for some third party code to execute on a closed mobile device by providing a sandbox that verifies third party code at runtime or by configuring the operating system of the device to segregate third party code from kernel mode code. While these techniques exist there is a need for alternative techniques that can augment or supplement the typical security measures that require less computational power from the mobile device and enable the provider to have more control over how third party code is treated by the device.

An embodiment of the present disclosure provides a method that includes but is not limited to granting to a managed library access to native resources of an operating system in response to validating a digital certificate associated with the managed library and denying to a managed application access to native resources of the operating system wherein the managed application includes a digital certificate authorizing the managed application to access a specific native resource of the operating system through the managed library. In addition to the foregoing other method aspects are described in the detailed description drawings and claims that form the present disclosure.

An embodiment of the present disclosure provides a method that includes but is not limited to receiving by a manager a request from a managed application to access a native system resource through a managed library authorizing by the manager the request to access the native system resource through the managed library wherein the manager includes information that identifies managed libraries that the managed application is authorized to access further wherein the manager is effectuated by native instructions authorizing by the manager the request to access the native system resource by the managed library wherein information that identifies that the managed library is authorized to access the native system resource was obtained from a digital certificate associated with the managed library sending by the managed library a request to access the native system resource to a runtime host wherein the runtime host is effectuated by native instructions and accessing by the runtime host the native system resource. In addition to the foregoing other method aspects are described in the detailed description drawings and claims that form the present disclosure.

An embodiment of the present disclosure provides a method that includes but is not limited to receiving a package from a networked computer system identifying an executable in the package verifying managed metadata associated with the executable wherein the managed metadata describes the structure of executable further wherein verifying the managed metadata includes inspecting the managed metadata at runtime to determine that the executable includes type safe code sending by the managed library a request to access the native system resource to a runtime host wherein the runtime host is effectuated by native instructions and accessing by the runtime host the native system resource. In addition to the foregoing other method aspects are described in the detailed description drawings and claims that form the present disclosure.

It can be appreciated by one of skill in the art that one or more various aspects of the disclosure may include but are not limited to circuitry and or programming for effecting the herein referenced aspects of the present disclosure the circuitry and or programming can be virtually any combination of hardware software and or firmware configured to effect the herein referenced aspects depending upon the design choices of the system designer.

The foregoing is a summary and thus contains by necessity simplifications generalizations and omissions of detail. Those skilled in the art will appreciate that the summary is illustrative only and is not intended to be in any way limiting.

Numerous embodiments of the present disclosure may execute on a computer. and the following discussion is intended to provide a brief general description of a suitable computing environment in which the disclosure may be implemented. One skilled in the art can appreciate that the computer system of can in some embodiments effectuate the validation system the community feedback server the electronic market place developer and peer reviewers and . One skilled in the art can also appreciate that the elements depicted by can include circuitry configured to instantiate specific aspects of the present disclosure. For example the term circuitry used through the disclosure can include specialized hardware components configured to perform function s implemented by firmware or switches. In other example embodiments the term circuitry can include a general purpose processing unit configured by software instructions that embody logic operable to perform function s . In example embodiments where circuitry includes a combination of hardware and software an implementer may write source code embodying logic that can be compiled into machine readable code and executed by a processor. Since one skilled in the art can appreciate that the state of the art has evolved to a point where there is little difference between hardware software or a combination of hardware software and the selection of hardware versus software to effectuate specific functions is a design choice left to an implementer. More specifically one of skill in the art can appreciate that a software process can be transformed into an equivalent hardware structure and a hardware structure can itself be transformed into an equivalent software process. Thus the selection of a hardware implementation versus a software implementation is one of design choice.

Referring now to an exemplary general purpose computing system is depicted. The general purpose computing system can include a conventional computer or the like including a processing unit a system memory and a system bus that couples various system components including the system memory to the processing unit . The system bus may be any of several types of bus structures including a memory bus or memory controller a peripheral bus and a local bus using any of a variety of bus architectures. The system memory includes read only memory ROM and random access memory RAM . A basic input output system BIOS containing the basic routines that help to transfer information between elements within the computer such as during start up is stored in ROM . The computer may further include a hard disk drive for reading from and writing to a hard disk not shown a magnetic disk drive for reading from or writing to a removable magnetic disk and an optical disk drive for reading from or writing to a removable optical disk such as a CD ROM or other optical media. In some example embodiments computer executable instructions embodying aspects of the present disclosure may be stored in ROM hard disk not shown RAM removable magnetic disk optical disk and or a cache of processing unit . The hard disk drive magnetic disk drive and optical disk drive are connected to the system bus by a hard disk drive interface a magnetic disk drive interface and an optical drive interface respectively. The drives and their associated computer readable media provide non volatile storage of computer readable instructions data structures program modules and other data for the computer . Although the exemplary environment described herein employs a hard disk a removable magnetic disk and a removable optical disk it should be appreciated by those skilled in the art that other types of computer readable media which can store data that is accessible by a computer such as magnetic cassettes flash memory cards digital video disks Bernoulli cartridges random access memories RAMs read only memories ROMs and the like may also be used in the exemplary operating environment.

A number of program modules may be stored on the hard disk magnetic disk optical disk ROM or RAM including an operating system one or more application programs other program modules and program data . A user may enter commands and information into the computer through input devices such as a keyboard and pointing device . Other input devices not shown may include a microphone joystick game pad satellite disk scanner or the like. These and other input devices are often connected to the processing unit through a serial port interface that is coupled to the system bus but may be connected by other interfaces such as a parallel port game port or universal serial bus USB . A display or other type of display device can also be connected to the system bus via an interface such as a video adapter . In addition to the display computers typically include other peripheral output devices not shown such as speakers and printers. The exemplary system of also includes a host adapter Small Computer System Interface SCSI bus and an external storage device connected to the SCSI bus .

The computer may operate in a networked environment using logical connections to one or more remote computers such as a remote computer . The remote computer may be another computer a server a router a network PC a peer device or other common network node and typically can include many or all of the elements described above relative to the computer although only a memory storage device has been illustrated in . The logical connections depicted in can include a local area network LAN and a wide area network WAN . Such networking environments are commonplace in offices enterprise wide computer networks intranets and the Internet.

When used in a LAN networking environment the computer can be connected to the LAN through a network interface or adapter . When used in a WAN networking environment the computer can typically include a modem or other means for establishing communications over the wide area network such as the Internet. The modem which may be internal or external can be connected to the system bus via the serial port interface . In a networked environment program modules depicted relative to the computer or portions thereof may be stored in the remote memory storage device. It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used. Moreover while it is envisioned that numerous embodiments of the present disclosure are particularly well suited for computerized systems nothing in this document is intended to limit the disclosure to such embodiments.

Referring now to it generally illustrates an example environment wherein aspects of the present disclosure can be implemented. One skilled in the art can appreciate that the example elements depicted by provide an operational framework for describing the present disclosure. Accordingly in some embodiments the physical layout of the environment may be different depending on different implementation schemes. Thus the example operational framework is to be treated as illustrative only and in no way limit the scope of the claims.

Once the application is developed a compiled version of it can be submitted to a validation system that can be maintained by the ecosystem provider. For example in an embodiment the application can be transmitted to the ecosystem provider as a package of assemblies e.g. executables libraries obtained from the software development kit and any libraries developed for the application by the developer . Generally the validation system can in an embodiment include circuitry for a file parser a verification system and a signing system each of which can include components similar to those described in . For example file parser can in one embodiment include circuitry e.g. a processor configured by a program for identifying assemblies that include executables. In this example embodiment the instructions of the application submitted by the developer can be verified and stored in a container that includes a digital signature.

Once the application is verified it can be submitted to a community feedback server . The community feedback server can generally be configured to store newly developed applications and transmit the new applications to peer reviewers and in response to requests. In at least one example embodiment the peer reviewers can add to the application by downloading the source code of the application and use a copy of the software development kit to add to the application. In this example if the application includes more than source code then the validation system may be invoked before it can be redistributed to peer reviewers.

After the application is verified it can be stored in an electronic market place that can also include components similar to those described in . The electronic market place can additionally include circuitry configured to sell copies of the application to members of the public. The electronic market place can be configured to transmit the application in the container to either the mobile device over a wireless wired network connection or to a computer not shown where it can then be transmitted to the mobile device over a local connection.

Referring now to it illustrates an example container that can be transmitted to the mobile device from an electronic market place . For example in an embodiment of the present disclosure each application can be stored in its own container . The container in an embodiment can be an electronic wrapper and the information inside the wrapper can be signed with a private key by the signing system of . In this example the signing system can embed a digital signature in the container so that the mobile device can determine that the container is authentic. Continuing with the description of the container in this example may contain one or more assemblies such as assemblies . For example in an embodiment of the present disclosure the software development kit can be used to generate software packages for a given platform. The assemblies in this example can effectuate the application and contain information that can be used by a runtime to find locate and execute the application on the platform. As is illustrated by in one embodiment each assembly can include intermediate language instructions e.g. machine independent partially compiled code and metadata that describes the intermediate language instructions. The metadata in an embodiment can describe every type and member defined in the intermediate language instructions in a language neutral manner so as to provide information about how the assembly works.

Continuing with the description of in an embodiment of the present disclosure an assembly may include a certificate . For example the certificate is indicated in dashed lines which are indicative of the fact that only certain assemblies may include certificates in embodiments of the present disclosure. For example the ecosystem provider may only embed certificates in assemblies that were developed by the ecosystem provider. In other example embodiments the ecosystem provider may embed certificates in assemblies that were coded by a trusted third party e.g. a company that the ecosystem provider has a business relationship with. The certificate in embodiments of the present disclosure can be used by the mobile device to determine whether the instructions that effectuate an assembly have been scrutinized by the ecosystem provider to ensure that the assembly can not be used in a malicious way and for example determine which managed libraries can be called by the application. A certificate in embodiments of the present disclosure can be similar to a digital signature however in certain instances the certificate can convey different information than the digital signature e.g. a certificate may indicate a resource permission level for the assembly whereas the signature may be used as a source identifier.

Referring now to it illustrates an example mobile device that can be used in embodiments of the present disclosure. For example mobile device can include a mobile phone a personal data assistant or a portable media player e.g. a mobile device configured to store and play digital content such as video audio and or execute applications. As was mentioned above a major concern with opening up a mobile device to third party applications is that an attacker could attempt to compromise the mobile device in order to obtain DRM keys device keys user data and the like. Generally in some closed mobile devices the software stored on mobile device can be considered native e.g. the instructions can be written to run on the physical processor of hardware and if an individual could access the native code they could potentially access any information the device stores. In closed mobile devices the native code is protected by scrutinizing the code prior to commercializing the product e.g. by inspecting the code to determine that it does not include anything that could be exploited to compromise and or damage the mobile device and coding the native software in such a way to prevent the mobile device from executing any third party code. The ecosystem provider can ensure that the mobile device does not execute third party code by checking the authenticity of each piece of software prior to allowing it to execute. If any portion of the system software can t be authenticated the mobile device can be configured to refuse to startup. For example when the mobile device is powered on a boot loader stored in hardware can be authenticated e.g. a digital signature of the boot loader can be checked. The boot loader can in turn authenticate and load the operating system . The operating system in this example embodiment can include an audio driver a secured store e.g. a secured area of memory that includes device secrets a network driver and a graphics driver . The operating system in turn can authenticate native application program interfaces used to invoke operating system methods the shell e.g. the user interface of the operating system and a title player e.g. a native executable that launches applications and hosts them within its process.

As depicted by in an embodiment the preceding portion of the components of the mobile device can be considered the trusted layer of software e.g. native software developed by the ecosystem provider that can be stored in firmware of the mobile device . In embodiments of the present disclosure however the ecosystem provider may want to allow third party applications to execute on mobile device . Since these third party applications were not developed by the ecosystem provider and thus may not be been stored in the firmware of the mobile device a mechanism needs to be put in place to ensure that the managed application are not given the same level of trust as the trusted software. Third party code may need to remain un trusted because in at least one embodiment of the present disclosure the core functionality of the mobile device e.g. graphics processing networking memory management and or audio are implemented by operating system methods to improve system performance and the operating system itself may lack a way to gate access to the core functionality. Thus the ecosystem provider has to expose an interface to the operating system and protect the interface from being accessed by malicious code. In order to prevent the managed application from invoking native methods or having unrestricted access to memory an arbitration layer including a runtime framework can be instantiated that gates access to the operating system . In example embodiments of the present disclosure when a managed application attempts to access an operating system resource the runtime framework can be configured to determine whether the managed application has permission to access such a resource and either allow or deny its request.

Referring now to it depicts an example arbitration layer that can be used to implement aspects of the present disclosure. For example depicts a managed application that can be for example a videogame a word processing application a personal information manager application or the like that can access native resources of the operating system via at least one managed library. In order to invoke the functionality of the operating system at least one managed library can be selectively exposed to the managed application via a manager that can be configured to restrict the third party application s access to resources other than those provided by one or more select libraries. In embodiments of the present disclosure a managed library can be dynamically loaded at runtime depending on what dependencies are required for the managed application . In an embodiment the managed library can be operable to access any native resource at runtime therefore the manager needs to be configured in this example to deny a managed application s request to access native resources and restrict access to only but a few select managed libraries. As illustrated by the arbitration layer in this example embodiment can additionally include a runtime host that can in certain embodiments be configured to call methods of the operating system that actually implement the requests of the application.

Continuing with the description of in an embodiment title player can be configured to load and authenticate runtime host manager managed library and managed application . For example in an embodiment runtime host manager and managed library can each include digital signatures that can be authenticated by the title player prior to execution to ensure that they had not been tampered with. The title player can check a digital certificate for each managed assembly to determine what privileges they have prior to loading them. When the title player loads a managed assembly e.g. a part of the managed application or a managed library it can be configured to check the assembly s certificate to determine what privileges to grant to it. In an embodiment each managed application can include a certificate that is associated with a set of privileges e.g. the certificate can itemize the rights or the certificate can reference a set of rights that can be stored in a table of the secured store . The title player can check the authenticity of the assembly and if it is legitimate the title player can check the certificate to determine what privileges should be granted. The title player can obtain a set of privileges and make them available to the manager so that the manager can enforce the privileges by selectively granting or denying a managed application s access requests to certain managed libraries . In the same or other embodiments if a managed third party application lacks a certificate the title player can be configured to determine that it has no privileges and direct the manager to prevent the assembly from invoking any native resources such as operating system methods or native libraries as well as denying the use of any managed library for which possession of such a certificate is required.

The following figures depict a series of flowcharts of processes. The flowcharts are organized such that the initial flowcharts present processes implementations via an overall big picture viewpoint. Those having skill in the art will appreciate that the style of presentation utilized herein e.g. beginning with a presentation of a flowchart s presenting an overall view and thereafter providing additions to and or further details in subsequent flowcharts generally allows for a rapid and easy understanding of the various operational procedures.

Referring now to it illustrates example operations related to securing a computing device including operations and . As is illustrated by operation begins the operational procedure and operation illustrates granting to a managed library access to native resources of an operating system in response to validating a digital certificate associated with the managed library. For example and referring to in an embodiment of the present disclosure a managed library can be granted access to native resources of an operating system. In this example the managed library can be considered managed because the instructions that effectuate it can be executed within virtual machine such as the common language runtime or java virtual machine. The manager can be configured to grant the managed library access rights to a native operating system resource by allowing it to be loaded into main memory after verifying the authenticity of a digital certificate . The digital certificate can evidence that the managed library includes scrutinized code that was developed by for example the ecosystem provider. In one embodiment the manager can be configured to check the digital certificate in order to protect the operating system . The operating system in this example may not have the ability to protect itself from malicious attacks e.g. the operating system may not implement kernel mode and user mode permission levels. In this example embodiment the resources of the operating system can be protected by a layer of security enforced by the manager . In the same or other embodiments native instructions may have privileges to access any resource of the mobile device and the operating system may not have a native ability to enforce security policies. In this example embodiment if the native instructions were accessed by a malicious third party application then an attacker could potentially access any system resource such as a device key a display driver and or damage the mobile device . In another example embodiment the operating system may include a native ability to protect itself. In this example the operating system can be protected by an additional layer of security enforced by the manager .

Continuing with the description of operation illustrates denying to a managed application access to native resources of the operating system wherein the managed application includes a digital certificate authorizing the managed application to access a specific native resource of the operating system through the managed library. For example and in addition to the previous example the ecosystem provider may want to allow third party applications such as videogames to be developed and allowed to execute on the mobile device . In certain embodiments however the ecosystem provider may not want third party managed applications to access any native resources such as native dynamically linked libraries kernel functions and or drivers. Thus in this example embodiment the manager can be configured to prevent the managed application from accessing such native resources and or terminate the managed application if the managed application attempts to access such a resource. Managed application can in an embodiment be stored in a digitally signed container such as container of . When the managed application is launched the container can be checked to determine that it has not been tampered with e.g. the digital signature can be checked. If the digital signature is valid then the assemblies that effectuate the managed application can be loaded into runtime space. Each assembly in the container can be checked for a certificate that indicates which managed libraries the application can call. The list of callable managed libraries can be stored in a table made accessible to the manager and the manager can be configured to prevent the managed application from accessing native resources and or managed libraries outside of the ones listed in the certificate . In this example the managed application can be terminated if the managed application attempts to access such a resource.

Referring now to it depicts an alternative embodiment of the operational procedure of including operations and . Operation illustrates the operational procedure of wherein the managed library comprises instructions generated by a trusted developer. For example in one embodiment the managed library can be effectuated by intermediate language instructions and metadata. In this example the managed library can have been generated by a trusted provider such as the ecosystem provider and or a third party corporation that the ecosystem provider has a business relationship with. In this example the ecosystem provider can ensure that the managed library does not include malicious code or code that could be used in a malicious way by fully testing the code prior to releasing it to the public. In this example the ecosystem provider can ensure that the managed library can only be used to perform its indented function s .

Continuing with the description of it additionally illustrates operation that depicts verifying a digital signature associated with a container that includes the managed application and loading the managed application. For example in an embodiment of the present disclosure the title player can be configured to load the managed application in response to user input and determine that the managed application is un trusted. In an embodiment the ecosystem provider may associate a certificate with the managed application that identifies it as un trusted and list one or more managed libraries that the un trusted application can call. In this example embodiment the ecosystem provider may determine that code developed by a third party can access managed libraries that the ecosystem provider developed and the manager can be configured to prevent the managed application from accessing native system resources and or terminate the managed application if it attempts to access native resources or managed libraries for which the managed application has not been authorized to access.

Continuing with the description of it additionally illustrates operation that shows the operational procedure of wherein the native functions of the operating system are accessed through instructions for a runtime host further wherein the instructions for the runtime host are effectuated by native instructions. For example in an embodiment of the present disclosure the title player can include instructions configured to validate a digital signature of a runtime host and launch the runtime host . For example the instructions for the runtime host can include an encrypted hash of the instructions that effectuate it. A corresponding public key can be stored in the secured store of the mobile device and made available when title player attempts to load the runtime host . The runtime host in an example embodiment can be authenticated prior to execution because the instructions that effectuate the runtime host can be stored in mass storage such as a hard drive or flash memory in at least one embodiment. In this example an attacker could attempt to replace the mass storage device with a malicious copy that could include code to attempt to access the secured store. In this embodiment the risk from such an attack can be mitigated by validating the runtime host prior to execution.

In an example embodiment when the mobile device is powered on the runtime host may be loaded into main memory after a user uses the shell to execute the videogame. For example in an embodiment of the present disclosure the mobile device may launch native instructions from the trusted layer of software when the mobile device is powered on and only load the arbitration layer of and if a user of the mobile device wants to execute a third party application. In this example when the title player is launched it can in turn launch the runtime host after it authenticates the runtime host s digital signature.

Continuing with the description of it additionally illustrates operation that shows verifying a digital signature associated with the managed library and loading the managed library. For example in an embodiment of the present disclosure the title player can include instructions configured to validate a digital signature of a container that stores the managed library and load the managed library . For example in an embodiment of the present disclosure the container can include a digital signature encrypted with a private key. A corresponding public key can be stored in the secured store of the mobile device and made available when title player attempts to load the managed application .

Continuing with the description of it additionally illustrates operation that shows wherein the managed application includes instructions verified by a remote device further wherein the verified instructions are type safe. For example in an embodiment of the present disclosure the managed application can be verified by the ecosystem provider prior to distribution to the mobile device . For example in an embodiment verification can include examining the instructions and metadata associated with the managed application to determine whether the code is type safe e.g. that it accesses members of an object in well defined and allowed ways it only accesses memory locations it is authorized to access and or that it does not access any private members of an object. During the verification process the managed application s instructions can be examined in an attempt to confirm that the instructions can only access approved memory locations and only call methods through properly defined types.

Referring now to it depicts an operational flowchart for practicing aspects of the present disclosure including operations and . Operation beings the operational procedure and operation illustrates receiving by a manager a request from a managed application to access a native system resource through a managed library. For example a manager can receive a request from a managed application to access an operating system resource such as an application program interface for the operating system via managed library . In an embodiment of the present disclosure a managed application such as a contact book application may attempt to access a resource of the operating system such as a list of phone numbers stored in the secured store via the functionality of a contact book managed library. In this example graphics audio and network support may be integrated with the operating system and an application that has access to the operating system could for example potentially have the ability to access memory reserved to store device secrets such as DRM keys. In this example the managed application may send a request to a manager to access the operating system via the managed library . In this example both the managed application and the managed library can be considered managed because the instructions that effectuate them can be executed within virtual machine such as the common language runtime or java virtual machine. In this example the managed application can be considered pure managed code because the managed application is not allowed to access native resources and the managed library can be considered non pure managed code which indicates that the library is allowed to access some of the native resources.

Continuing with the description of operation illustrates authorizing by the manager the request to access the native system resource through the managed library wherein the manager includes information that identifies managed libraries that the managed application is authorized to access further wherein the manager is effectuated by native instructions. For example and referring to the manager can be configured to allow the managed application to access the managed library in order to for example access a method of the graphics driver for drawing a sprite at a certain location on a display. The manager in this example embodiment can include a software process effectuated by native code. In this example the manager can be configured to receive the request from the managed application and determine whether the managed application has permission to call the managed library by accessing a table of information stored in memory such as RAM.

For example in an embodiment of the present disclosure the manager can store a table of information that includes a list of managed libraries that the managed application can access. In the case of a pure managed assembly the list can include information that explicitly denies any attempt at calling native code or accessing reserved memory locations. If for example the pure managed assembly attempts to call a native dynamically linked library access a memory location that stores a DRM key or access a managed library that it is not permitted to access the manager can determine that a security violation occurred and terminate the managed application . In an example embodiment the list of managed libraries that the managed application can access can be stored in the secured store . In this example the assembly of that contains the managed application can be checked for a digital certificate . In the instance where the assembly does not include a certificate the manager can be configured to determine that the assembly is un trusted and load a predefined list of managed libraries that the managed application can access into the table.

In another embodiment instead of having a two tier trust system e.g. a system where managed applications are granted full permission or no permission based on the presence or absence of a certificate a multi tiered system could be implemented by for example embedding different types of certificates in the assemblies or by including different sets of privileges in the certificates. In the first example the secured store can be configured to include a table associating different types of certificates with different privileges e.g. one certificate could be associated with a table entry that indicates that the managed application is allowed to access a method of a network driver and another certificate could be associated with a table entry that indicates that the managed application is allowed to access an address book of a user stored in the secured store . The operating system or the title player in this example could decrypt the certificate and associate a number in the certificate to a set of privileges stored in the secured store . In another embodiment the certificate itself could include information that identifies a set of operating system resources that the managed application is allowed to access. In this example the operating system or the title player can be configured decrypt the certificate and compare a hash of the information in the certificate to an expected value. If the certificate is valid the set of privileges can be retrieved from the certificate. Regardless as to how the operating system or the title player determines a managed application s privileges the privileges can be transmitted to the manager and the manager can be configured to monitor instructions issued by the managed application to determine whether it is attempting to access native code and or load managed libraries that are not within the scope of its certificate.

Continuing with the description of it additionally illustrates operation that shows authorizing by the manager the request to access the native system resource by the managed library wherein information that identifies that the managed library is authorized to access the native system resource was obtained from a digital certificate associated with the managed library. For example in an embodiment of the present disclosure the manager can be configured to authorize the managed library s request to access a native system resource by for example allowing a managed library to execute when the managed application calls the managed library . For example in this embodiment the ecosystem provider may create a clear trust boundary between the managed application and the operating system by providing an arbitration layer that can include code that was developed by the ecosystem provider. In this example the arbitration layer can be used by un trusted third party code to access native operating system resources in a well defined and trusted way. In one example embodiment the managed library can be loaded as needed at runtime by for example the title player . During the load process the manager can be configured to request a level of trust for the newly loaded library by calling native code such as code of the operating system or the title player . The native code in this example embodiment can be configured to determine whether the assembly is trusted or not. In one embodiment the native code can be configured to check the authenticity of a certificate stored in the managed library . If the certificate is valid e.g. it can be decrypted by a public key stored in the secured store and its hash matches an expected value the operating system or the title player can be configured to grant the managed library full rights to access unallocated memory access operating system functions or invoke native dynamically linked libraries.

For example and continuing with the description of operation illustrates sending by the managed library a request to access the native system resource to a runtime host wherein the runtime host is effectuated by native instructions. For example in an embodiment of the present disclosure an operating system function can be requested by a managed application and a managed library can be used to implement the request by calling a runtime host . The runtime host in this example embodiment can be effectuated by native code and can be used so that only native code accesses the operating system . In this example runtime host can be a native dynamically linked library that includes application program interfaces for the functions that are made available to managed application . In this embodiment the runtime host can receive an instruction from for example a just in time complier that received an instruction from the managed library and compiled it into native code that can be processed by the runtime host .

Continuing with the description of operation illustrates accessing by the runtime host the native system resource. For example the runtime host can be configured in this example to receive the instruction from the managed library and invoke an operating system function operable to effect the request. For example in an embodiment of the present disclosure mobile device can be a cellular phone and managed application may include a music player. In this example embodiment the music playing functionality could be integrated into the operating system and in order to play a song an operating system method would need to be invoked. In this example the music player could access a managed library that includes an application program interface for the music player. In this example the managed library could be developed by the ecosystem provider whereas the managed application could have been developed by a different entity e.g. a different company or an individual. Thus in this example when the managed library is loaded its certificate can be validated and it can be authorized to access native resources. The managed library for the music player can submit a request to the runtime host and the runtime host can be configured to invoke the music player driver of the operating system and the song can be played.

Referring now to it illustrates an alternative embodiment of the operational procedure of including the additional optional operations and . Referring to operation it illustrates the operational procedure of wherein the native system resource is accessed from a platform invoke. For example in an embodiment of the present disclosure a platform invoke can be used by managed assemblies to access a native system resource of the operating system e.g. a native dynamically linked library. For example in this embodiment when the platform invoke is used to call a function of the operating system the interface for the function can be located and loaded into memory. The address of the function can be obtained and an argument for the function can be pushed to the interface. In a specific example a third party application could be a videogame that requires functionality of a graphics driver of the operating system in order to draw sprites. In this example the videogame can pass a request to draw the sprite to a managed graphics library that could for example contain low level application programming interface methods for drawing sprites. In this example the managed graphics library can receive the request and perform a platform invoke on for example runtime host . The interface of the runtime host can be loaded into memory and the argument e.g. the request to draw the sprite can be pushed into a memory area reserved for the runtime host .

Referring again to it additionally depicts operation that illustrates executing a title player wherein the title player is effectuated by native instructions. For example in an embodiment of the present disclosure the mobile device can include instructions for a title player . For example in one embodiment the instructions that effectuate the title player can be native to the mobile device e.g. they can be instructions configured to execute on a processor of the hardware of . In an embodiment of the present disclosure the title player can can be stored in firmware of the mobile device and can include a digital signature. In this example embodiment the title player can be used to execute a managed application and can be invoked by the shell . For example a user can interact with the shell and select an option to launch a program operable to pull stock information from the internet. In response to the request the shell e.g. native instructions can launch the title player . In at least one embodiment the shell and or the operating system can be configured to check the digital signature of the title player prior to execution to determine whether the title player is authentic.

Continuing with the description of it additionally depicts operation that depicts determining by the manager that the managed application is permitted to access a premium native system resource wherein information that identifies that the managed application is permitted to access the premium native system resource was obtained from a premium certificate associated with the managed application. For example in an embodiment of the present disclosure a managed application can be configured to have a premium level of access to the native functionality of the mobile device via a premium managed library. For example in an embodiment the managed application may receive access to additional resources of the mobile device e.g. the developer of the managed application may be considered a trusted developer or other business reasons may contribute to the third party developer being granted to a higher level of resources. In this example the managed application may be developed using the development studio that relies on a plurality of class libraries to implement the low level application program interfaces and these libraries may for example be provided by the ecosystem provider. In this example the ecosystem provider may develop a class library that has access to premium functionality of the operating system such as a library that makes a DRM protected music file available to a third party application. In this embodiment the managed application can be associated with a premium certificate that permits it to have access to a DRM protected audio stream. When the managed application is loaded the manager can be provided with information that can be used to authorize a request to access the premium managed library.

Continuing with the description of it additionally depicts operation that illustrates the procedure wherein the managed application is stored in a container that includes a digital signature. For example in an embodiment of the present disclosure the managed application can be stored in a container such as the container of . For example in an embodiment of the present disclosure the ecosystem provider can include techniques for storing managed applications in containers and digitally signing them. In this example the ecosystem provider can be configured to generate a hash of the information in the container and encrypt the hash using a private encryption key. A corresponding public key can be stored in the secured store of the mobile device . When the mobile device opens the container the public key can be used to decrypt the hash. A hash of the container can be calculated and compared to the expected hash. If the hashes match then the mobile device can be configured to allow the managed application from the container to execute.

Referring now to it depicts an alternative embodiment of the operational procedure of including the additional operations and . Referring now to operation it illustrates validating by the title player a digital signature associated with the runtime host and executing the runtime host. For example in an embodiment of the present disclosure the title player can include instructions configured to validate a digital signature of the runtime host and launch the runtime host . For example in an embodiment of the present disclosure the instructions that effectuate the runtime host can be stored in mass storage along with a hash of the runtime host encrypted with a private key. A corresponding public key can be stored in the secured store of the mobile device and made available when title player attempts to load the runtime host . If the runtime host is authentic then it can be loaded by the title player .

In an example embodiment when the mobile device is powered on the runtime host may be loaded into memory after a user uses the shell to execute the managed application . For example in an embodiment of the present disclosure the mobile device may launch native instructions from the trusted layer of software when the mobile device is powered on and only load the arbitration layer of and if a user of the mobile device wants to execute a managed application . In this example when the title player is launched it can in turn launch the runtime host after it authenticates the runtime host s digital signature.

Continuing with the description of operation illustrates validating by the title player a digital signature associated with the manager and executing the manager. For example in an embodiment of the present disclosure the title player can include instructions configured to validate a digital signature of the manager and launch the manager . For example the instructions that effectuate the manager can be stored in mass storage e.g. flash or a hard disk along with a hash of the instructions encrypted with a private key. A corresponding public key can be stored in the secured store of the mobile device and made available when title player attempts to load the manager . If the manager is authentic then it can be loaded by the title player .

In an example embodiment when the mobile device is powered on the manager may be loaded into memory after a user uses the shell to execute the managed application . For example in an embodiment of the present disclosure the mobile device may launch native instructions from the trusted layer of software when the mobile device is powered on and only load the arbitration layer of and if a user of the mobile device wants to execute a managed application . In this example when the title player is launched it can in turn launch the manager after it authenticates the manager s digital signature.

Continuing with the description of it additionally depicts operation that shows loading by the title player the managed application determining by the title player that the managed application is un trusted and denying by the manager the managed application access to native system resources. For example in an embodiment of the present disclosure title player can be configured to load the managed application in response to user input and determine that the managed application is un trusted. For example the managed application can be considered un trusted if it lacks a digital certificate . In this embodiment the ecosystem provider may not associate a digital certificate with the managed application if it was developed by a third party such as a remote company or individual. In another embodiment the ecosystem provider may associate a certificate with the managed application that identifies it as un trusted. In either example embodiment the ecosystem provider may determine that code developed by a third party can be configured to access managed libraries that the ecosystem provider developed and the manager can be configured to prevent the managed application from accessing native resources such as native dynamically linked libraries. In this example the title player can open the managed application and determine that it is to be considered un trusted. The title player in this example can make this information available to the manager that can in turn monitor instructions that the third party application issues. In the event that the application attempts to access native instructions of the system e.g. an operating system method a security violation can be detected and the manager can terminate the managed application .

Referring now to it depicts an alternative embodiment of the operational procedure of including the additional operations and . Referring now to operation it illustrates transmitting the container to a remote mobile device. For example and referring to in an embodiment of the present disclosure a mobile device can include a wireless and or wired network connection to a remote mobile device . In this example the mobile device can share the managed application with the remote mobile device . For example the remote mobile device could use the shared application for a limited amount of time or a limited amount of executes before the managed application locks. In this example the remote mobile device could access the electronic market place and purchase a full license to the managed application .

Continuing with the description of it additionally illustrates operation that illustrates an alternative embodiment of the operational procedure of wherein the managed application includes instructions verified by a service provider further wherein the verified instructions are type safe instructions. For example in an embodiment of the present disclosure the managed application can be previously verified by the ecosystem provider prior to distributing the managed application to the mobile device . For example in an embodiment verification can include examining the instructions and metadata associated with the managed application to determine whether the code is type safe e.g. that it accesses members of an object in well defined and allowed ways it only accesses memory locations it is authorized to access and or that it does not access any private members of an object. During the verification process the managed application s instructions can be examined in an attempt to confirm that the instructions can only access approved memory locations and or call methods only through properly defined types.

Referring now to it illustrates an example operational procedure related to publishing videogames configured to execute on a mobile device including operations and . Operation begins the operational procedure and operation illustrates receiving a package from a networked computer system. For example and referring to a network adaptor of a validation system can receive a package from a networked computer system that can include but is not limited to a community feedback server a peer reviewer and or a developer . In an example embodiment of the present disclosure the package can include one or more assemblies e.g. executables and dynamically linked libraries. In one example the libraries could be made by the developer and or by the ecosystem provider.

Continuing with the description of operation illustrates identifying an executable in the package. For example in an embodiment of the present disclosure the package can be received by the validation system and sent to a file parser . For example the file parser can be configured to scan the package for assemblies that contain executables. For example in one embodiment the parser can be configured to check the entire package for .exe files and or files that include executables stored in for example images and generate a list of all .exe and .dll files in the package.

Continuing with the description of operation illustrates verifying managed metadata associated with the executable wherein the managed metadata describes the structure of executable further wherein verifying the managed metadata includes inspecting the managed metadata at runtime to determine that the executable includes type safe code. For example in an embodiment of the present disclosure after the file parser identifies executables in the package a list of executables and the package can be transmitted to the file verification system . The verification system in this example embodiment can be configured to determine whether the executables are valid by checking for example certain values in the header and the metadata. For example in an embodiment of the present disclosure the verification system can be configured to validate the metadata by exercising it. As was described above in one embodiment a package can be submitted that can include one or more assemblies each of which can include intermediate language instructions and metadata. In this example the verification system can be configured to inspect each assembly s metadata using a process called reflection and inspect each assembly s managed instructions. The reflection process includes an application programming interface that can walk through the managed metadata and monitor the runtime characteristics of the metadata to identify malicious instructions that could for example attempt to access native code or access the secured content on the mobile device . In addition the reflection API can be configured to determine whether the instructions are type safe e.g. that it accesses members of an object in well defined and allowed ways it only accesses memory locations it is authorized to access and or that it does not access any private members of an object.

In another example embodiment the verification system can be configured to identify managed libraries that the executables attempt to link at runtime and compare them to a list of approved managed libraries. The verification system can be configured in this example to reject any executable that attempts to link a restricted library or a library that the application should not have access to e.g. a videogame should not have access to a managed library that can access device keys stored in a secured store .

Continuing with the description of operation illustrates storing the verified executable in a digitally signed container. For example once the executable is verified by the verification system it can be sent to a signing system configured to repackage the assemblies into a container such as container of and digitally sign the container . The signing system in this example can be configured to generate a hash of the instructions in the container and encrypt the hash with a private key. In this example a mobile device can be configured to include a public key usable to decrypt the container and compare the hash of the information in the container to the expected result. Once the container is signed it can in one embodiment transmit the container to an electronic market place where it can be purchased by a user of the mobile device and downloaded. In another embodiment the signing system can be configured to include information that identifies what managed libraries can be accessed by the container in digital certificates for each assembly stored in the container .

Referring now to it illustrates an alternative embodiment of the operational procedures of including the additional operations and . Referring now to operation it illustrates transmitting the digitally signed container to a mobile device. For example in an embodiment of the present disclosure the container can be transmitted to a mobile device after for example it is purchased. As stated above in an embodiment of the present disclosure the ecosystem provider can maintain an electronic market place that is configured to allow users to purchase games that are submitted by third party developers such as companies and or individuals that obtain the software developers kit.

Continuing with the description of it additionally illustrates operation that depicts determining that the executable in the file includes managed dependencies. For example in at least one example embodiment the verification system can be additionally configured to determine what dependencies are required by the executable and either reject the package or forward the package to the signing system . For example the verification system in this embodiment can be configured to identify the set of assemblies in the applications runtime profile. The verification system in this example can identify each assembly and determine whether the assemblies are developed by the ecosystem provider or the developer . In the instance where an identified assembly is developed by the ecosystem provider the verification system can be configured to determine whether the assembly is on a white list for the type of managed application e.g. the verification system can check the white list to determine whether an assembly that can access the secured store is allowed to be called by a videogame. If the assembly is not on the white list the process can end and a message can be sent to the developer stating that the assembly is not accessible to for example the type of managed application and or the developer e.g. the developer may not have trusted status. The verification system in this example can additionally check to determine that native libraries are not referenced by the metadata. In a specific example if the managed application includes a reference to a native library then the managed application can access the library and take control of the mobile device . If the verification system determines that the assembly references a native library the verification process can end and a message can be sent to the submitter stating that the validation process failed because a native library was referenced.

Continuing with the description of it additionally illustrates operation that depicts validating header fields of the executable. For example in an embodiment of the present disclosure the header fields of the executable can be checked by the verification system to determine whether they include expected header values. For example each executable can include one or more headers that can include information such as how the runtime environment is to map the file into memory or how configure the loader and linker. The file in this example can additionally include data directory header values that contain pointers to data. For example in an embodiment the verification system can be configured to check the header values and fail any package that includes values that are associated with files that include native instructions.

The foregoing detailed description has set forth various embodiments of the systems and or processes via examples and or operational diagrams. Insofar as such block diagrams and or examples contain one or more functions and or operations it will be understood by those within the art that each function and or operation within such block diagrams or examples can be implemented individually and or collectively by a wide range of hardware software firmware or virtually any combination thereof.

While particular aspects of the present subject matter described herein have been shown and described it will be apparent to those skilled in the art that based upon the teachings herein changes and modifications may be made without departing from the subject matter described herein and its broader aspects and therefore the appended claims are to encompass within their scope all such changes and modifications as are within the true spirit and scope of the subject matter described herein.

