---

title: Method and apparatus for providing a search engine for optimizing a decentralized or emergent model on a computer network
abstract: A search engine is provided for searching, evaluating and/or optimizing an emergent model on a computer network. The emergent model is created by independently generating, publishing references to, and subscribing to data objects and/or function objects in a manner free of a globally predefined data object and/or function object definition. Messages are sent to referencing data objects and/or function objects when referenced data objects and/or function objects change. Functions within the function objects are solved when the messages are received. The data objects and/or the function objects are stored in a distributed manner across multiple computing devices on a computer network. At least one of the data objects is defined as an input data object and at least one of the data objects is defined as an output data object to a search engine, the search engine generating changes to the input data object until the output data object satisfies a predefined criteria.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=RE043146&OS=RE043146&RS=RE043146
owner: Ocls Applications, LLC
number: RE043146
owner_city: Wilmington
owner_country: US
publication_date: 20080501
---
This application claims the benefit of U.S. Provisional Application No. 60 215 917 and U.S. Provisional Application No. 60 215 903 both filed on Jul. 3 2000. The entire teachings of the above provisional application s are incorporated herein by reference. This application is related to United States Patent Applications titled METHOD AND APPARATUS FOR GENERATING AN EMERGENT MODEL ON A COMPUTER NETWORK by Matthew B. Wall and Timothy R. Wall application Ser. No. 09 898 507 now U.S. Pat. No. 7 043 736 METHOD AND APPARATUS FOR GENERATING A DECENTRALIZED MODEL ON A COMPUTER NETWORK by Matthew B. Wall and Timothy R. Wall application Ser. No. 09 898 501 now U.S. Pat. No. 7 062 771 and METHOD FOR MAPPING BUSINESS PROCESSES USING AN EMERGENT MODEL ON A COMPUTER NETWORK by Matthew B. Wall and Timothy R. Wall application Ser. No. 09 898 527 now U.S. Pat. No. 7 131 107 these related applications filed on even date herewith and commonly owned by the owner of this application. This application is also related to United States Patent Application titled METHOD AND APPARATUS FOR PROVIDING ACCESS CONTROL FOR A DECENTRALIZED OR EMERGENT MODEL ON A COMPUTER NETWORK by Matthew B. Wall and Timothy R. Wall application Ser. No. 10 040 161 now U.S. Pat. No. 7 080 384 filed on Oct. 22 2001 which claims foreign priority benefits under 35 U.S.C. 119 a d to International Application PCT US01 21171 filed on even date herewith and commonly owned by the owner of this application.

This invention relates generally to computer based methods of modeling processes and more specifically to a method and apparatus for providing a search engine for optimizing a decentralized or emergent model on a computer network.

Modeling is a process of describing the behavior of a system possibly through the use of computers such that the system s behavior can be predicted based upon varying inputs. Models can describe objects entities and their inter relationships using mathematical equations. For example a spreadsheet tool can be used to build a financial model of a particular business system to predict financial behavior thus allowing a user to evaluate and choose among various solutions designs .

Certain models are constructed from a set of modules objects that present an input and output interface. The inputs and outputs form connections and dependencies to use in integrating the objects to construct the model. Individual objects although integrated may be stored in a distributed fashion over a computer network. Objects themselves may be comprised of multiple objects.

Different types of objects are used to relate information concerning different aspects of the system being modeled. Physical mechanical modeling can produce solid models surface models three dimensional models two dimensional models and wire frame models and can be used to convey the physical aspects of a system within a defined space. Design modeling can be built to predict a system s behavior for a given set of design variables. Design models allow for the modification of their input variables to achieve a desired performance characteristic. Evaluation models can compare performance characteristics of a design model against specific value structures to access design alternatives.

The product design process is an example of a process that can include physical modeling design modeling and evaluation modeling. Some people refer to these models in product design as Simulation Based Design. Product design is a complex and collaborative process that is often multi disciplinary and multi objective. These aspects of the product design process require a robust modeling framework.

An example of Simulation Based Design SBD is a program sponsored by the Defense Advanced Research Project Agency DARPA in cooperation with Lockheed Martin Missiles Space company. The goal of SBD software is to enable an enterprise to perform faster better cheaper by establishing flexible efficient communications channels among human participants and software tools across heterogenous resources. This work is directed to developing a collaborative distributed computing infrastructure. Their work can be used as a framework for providing interoperability for a range of software e.g. design modeling tools based on a Common Object Request Broker Architecture CORBA backplane. The NetBuilder application from Lockheed Martin Missiles Space company is a framework for integrating and linking design and modeling components. An object oriented repository for storing model components and a dynamic object server for maintaining various aspects of product development and interactions between multiple development disciplines. Legacy components within the NetBuilder framework are wrapped to encapsulate their capabilities allowing legacy components to be linked with non legacy components within the framework. Agents are also used within the NetBuilder framework to encapsulate information management paradigms publish subscribe information and manage automation of distributed workflow processes. NetBuilder acts as middleware to coordinate the development process.

MIT DOME Distrilbuted Object based Modeling and Evaluation is a distributed modeling environment for integrated modeling that is used at the MIT CADLab Senin 1997 Pahng 1998 . In this environment designers can easily build object oriented models visualized as entity relationship graphs. Both discrete and continuous variable types are allowed in the models. Models can be arranged into sub models these sub models can be referenced in so called catalogs that allow for the selection of different sub models when constructing a model. In MIT DOME model inputs with uncertain values can be defined as probability density functions and these uncertainties are automatically propagated through the model using Monte Carlo simulation and other methods. MIT DOME users also set goals or specifications and are provided with a design alternative which can be calculated. A built in optimization tool using a genetic algorithm as a solver manipulates independent parameters and catalog choices to find an optimal tradeoff between model goals.

Existing modeling frameworks e.g. MIT s DOME do provide some physical modeling design modeling and evaluation modeling within a distributed and integrated framework but these frameworks lack the ability to create emergent models.

An emergent model is a model that is created without a predefined or global definition such that the emergent model arises from a dynamic integrated model built on a distributed multi computing device network. An emergent model is comprised of data objects modules and or function objects modules that are linked and distributed across multiple computing devices on a computer network. A search engine is disclosed for optimizing an emergent model on a computer network

The present invention provides the capability to publish model data and integrate that data to predict system performance. The emergent model is then evaluated and optimized. The present invention can be viewed as a Web Server for engineering product and business data. No other company currently provides customers a means to create live data links across the Internet in a software neutral environment for the purpose of creating an emergent model. The Web enabled realtime business to business interfaces of the present invention reduce the time cost to market for product development as well as increase abilities to manage the product supply chain.

Accordingly the present invention provides access control for a model on a computer network. In one embodiment of the present invention a method for providing access control for an emergent model comprises generating data objects and or function objects publishing references to the data objects and or the function objects and subscribing to the data objects and or the functions by creating relationships between the data objects and or the function objects through referencing data objects within the function objects thereby linking the data objects and or the function objects wherein networks of linked data objects and or function objects emerge. The emergent linked data objects and or function objects are make available for further linking with other data objects and or function objects and messages are sent to referencing data objects and or function objects when referenced data objects and or referenced function objects change. The functions are solved when the messages are received thereby causing at least one of the referenced data to be changed. The data objects and or the function objects are stored in a distributed manner across multiple computing devices on a computer network. The emergent linked data objects and or function objects are independently published to and subscribed to in a manner free of a globally predefined data object and or function object definition thereby generating the emergent model. Access control is provided by identifying users of the emergent model and assigning appropriate read write execute and administrative permissions on a per data objects and or function objects basis such that the permissions are used to limit access to the data objects and or function objects. At least one of the data objects is defined as an input data object and defining at least one of data objects is defined as an output data object to a search engine the search engine generating changes to the input data object until the output data object satisfies a predefined criteria.

A description of preferred embodiments of the invention follows. Various subsets of the above described distributed combinations exist in the prior art. Many systems provide non distributed storage execution and access fully centralized . MIT DOME provides distributed storage with non distributed execution and access. Other systems e.g. ModelCenter by Phoenix Integration of Blacksburg Va. provide various combinations of distributed execution storage or access but only the present invention combines fully distributed execution storage and access to generate emergent models.

In a system generating an emergent model it is often desirable to represent aspects of the system using an object oriented paradigm in which a system is viewed as a collection of discrete objects that are self contained collections of data structures and routines having the ability to interact with other objects in the system. Object oriented systems provide for the definition of classes that are used to create instantiate objects of that class. The objects allow for the encapsulation of data and provide well defined interfaces for other objects to use when sending data to or receiving data from an object. One class definition can inherit the capabilities of another allowing more complex classes to be built from simpler underlying classes. These classes can also specify certain behaviors that are only fully defined at run time. The combination of features provided in object oriented systems help create a platform for hosting an embodiment of the present invention used to generate emergent models.

In the present invention models are collections of computer instructions and data that present an interface for describing the behavior of part of a system being modeled such that the interface is understood by other parts of the system. The present invention provides for generating an emergent model consisting of one or more models where a model consists of one or more objects therefore a model can contain a complex hierarchy of submodels. Objects can be model inputs and outputs that are made available to relate various models to one another. These objects are implemented using standard distributed object management techniques e.g. CORBA DCOM . As such each object has a corresponding object reference.

CORBA stands for Common Object Request Broker Architecture. A specification developed by the Object Management Group in 1992 in which pieces of programs objects communicate with other objects in other programs even if the two programs are written in different programming languages and are running on different computing platforms. A program makes its request for objects through an object request broker ORB and thus does not need to know the structure of the program from where the object comes. DCOM is an acronym for Distributed Component Object Model the version of Microsoft s Component Object Model COM specification that stipulates how components communicate over Windows based networks. DCOM permits the distribution of different components for a single application across two or more networked computers running an application distributed across a network so that the distribution of components is not apparent to the user and remotely displaying an application.

In the present invention the object reference can consist of a relative Uniform Resource Identifier URL component and or a unique Uniform Resource Identifier URI component. Distributed object management techniques provide for the resolution of an object reference into a proxy object suitable for making method invocations on the corresponding remote object. Techniques for sending messages between objects in a distributed object system are common. The present invention sends and receives change messages that contain the object reference of the source of the message as well as information indicating how the source object changed. Common to message sending techniques is the option of having the sending object block or not block while the receiving object processes the message. In the present invention blocking message processing is used.

In the present invention objects have two primary types that of data objects and function objects. Objects can have objects and or object references as attributes allowing objects to be used to organize other objects. Objects can have attributes that are of numeric e.g. floating point integer and imaginary string boolean vector matrix table and file type. Numeric attributes can be deterministic or probabilistic. Interdependencies or relationships within a model can be defined using function objects. Interfaces to existing information or systems can be defined using a combination of data objects and function objects.

In the present invention objects can have constraints that are used to define the behavior of an object. Constraints are attributes of each object are associated with methods of the object and corresponding constraints are checked when method invocations are made on the object. If a check indicates that a corresponding constraint is violated the method invocation is not completed which can result in an error message code being returned to the invoker of the method. Constraints can be placed on an object such that it will be unavailable as an input and or an output of a model. Types of constraints include but are not limited to dependency constraints permissions access control constraints data type constraints units constraints and message propagation constraints.

A dependency constraint can be added to a data object when the data object s value is set by a function object. While the constraint is in place only that function object corresponding to the constraint can set the value of the data object. Objects that are dependent on other objects can only be outputs read only because their values are constrained by that dependency. Once an object has a dependency constraint additional dependency relationships can not be created with other function objects. Dependency constraints prevent loops from being formed in the relationships between objects.

Access permission settings are another way in which to create constraints on an object. Information specifying which users or objects can view edit execute solve or administrate an object are placed in an access policy constraint. Invocations of methods on objects that have access constraints are only permitted if the invoker is listed in the constraint as having permission to invoke the method. For example a getValue method can only be invoked by an invoker with view permissions in the corresponding access constraint. Objects are only outputs for users with read only permissions for those objects e.g. a read only object can not be written by another function object . Objects are only inputs for users with write only permissions for those objects. Objects are inputs and outputs for users with read write permissions for those objects.

Message propagation constraints are checked when a message is sent and or received which can prevent messages from being sent or received. Message propagation constraints can reference message routing information such as source and destination object references and message content information such as the new or old value associated with a value change of a data object. Access constraints are also used as message constraints to prevent users from obtaining data in messages for objects for which they do not have permissions to view data. A trigger message constraint on a function object determines when a function object is triggered to solve its expression. Trigger constraint modes include any all none and custom . The any trigger allows a function object to solve when any object referenced by function sends a message that it changed whereas none prevents automatic re evaluation when objects referenced by the function object change. The all trigger requires that all objects referenced by the function send change messages in order for a re evaluation to occur. The custom trigger is a hook provided for another object to determine if a function should be solved.

Data objects contain data as attributes and provide methods for getting and setting the attributes. A data object sends a change message to objects registered to listen for change messages when the data object changes. A number data object is an example of a data object implemented by the present invention. A number object has a name value and units attributes as well as an access policy constraint associated with the methods of the object. When values of data objects are set coercion is performed using common techniques and rules. Data objects that are coercible without data loss are coerced. Coercion that could result in data loss is detected and can be flagged for approval by a user.

A unit is a particular physical quantity defined and adopted by convention with which other particular quantities of the same kind are compared to express their value. The International System of Units SI defines seven base units 

Function objects provide behavior by providing expressions that can relate data objects and function objects thereby creating networks of linked function objects and data objects. Function objects have a name an expression an object reference table and a solver attribute as well as access policy and trigger message propagation constraints. The expression can be thought of as a function with a plurality of inputs and output objects which is evaluated by the solver. The expression text can be defined using various programming languages including Basic C C and Java among others. The object reference table can contain references to data objects and function objects. The expression text can contain portions that specify method calls on the objects referenced in the object reference table. The solver evaluates the expression text which may result in changes to objects referenced by the function object. Solvers can be implemented using compilers interpreters or entire legacy applications. The function object solves the expression when a change message is received from one of the objects referenced by the function object. Function objects can also be solved manually by a user. Dependency constraints are optionally placed on data objects that have their values set by the expression of a function object.

An equivalence function object is an example of a function object implemented with the present invention. The following simplified example illustrates an equivalence function object that keeps several data objects equivalent i.e. if one of the data object values changes then the other data object values are changed such that their values match . In this example the equivalence function is used in combination with a number data object further providing an example of a message propagation constraint being applied.

A model is generated by creating instances of data objects and or function objects. In the process of generating the contents of an object can be obtained from and coordinated with the data and or functions of a legacy application using the known application programming interfaces APIs of the application. For example a data module can have its value match that of a cell in a spreadsheet.

An object is made available by publishing it. Publishing is done using standard distributed object management techniques whereby objects are made available in a standard way to be activated and used by a subscriber to the object. When published each data object and function object has an object reference that can be used to access and control that object. Once an object is published the object s object reference usually a URL is communicated to prospective users via conventional techniques e mail posting a message or a prospective user initiates a search that reveals the object reference of the published object.

A object is subscribed to by adding the object reference to the referenced objects table of a function object. This also results in have a reference to the function object placed in the table of message recieves of the referenced object which is a standard part of enabling messages to be sent from referenced objects to referencing objects.

When a referenced object changes a message will be sent to any referencing objects which will solve their expressions subject to constraints. Solving the expressions may result in data objects being changed.

At any time additional objects can be generated published and subscribed to by different users or objects representing users. As these steps are carried out a network of linked data objects and function objects emerges which is an emergent model. These steps can also be guided by a definition of a network of objects that is desired.

The values of the data objects of an emergent model can be optimized. Standard optimization packages are available that can be interfaced in known ways to an object environment such as the one described in the present invention. For example known optimization algorithms can be accessed by the expression of a function object so that the optimization algorithm will be run when the function object is solved. Objects are identified as inputs and outputs for the optimization algorithm to use. The optimization algorithm is given a set of typical criteria for stopping the algorithm to prevent too many resources from being consumed. When the optimization algorithm is run it changes the input objects according to the algorithm design and the resulting changes to the output objects. The output objects change because they are linked to the input objects in a network of function objects and data objects. The optimization stops when the stopping conditions are reached after which the optimal values of the data objects can be viewed or accessed by other data objects.

Models are collections of computer instructions and data that present an interface for describing the behavior of part of a system being modeled such that the interface is understood by other parts of the system. This interface is one means by which models communicate the outputs that they produce and the inputs that they require. The models may store data using their own storage subsystem or they may use a common data repository. The objects themselves can be stored within a file system a database or a product data management system.

Legacy applications are collections of computer instructions that present an interface existed prior to the use of a newer system. Legacy applications require a change in process or technique such as translating data files formats in order to interface with the new system being modeled. Often this translation is accomplished through the use of wrappers provided by the new system. These wrappers allow legacy applications to interface with models to generate an emergent model . Additionally objects of the present system can interface with legacy applications through code libraries loaded by these applications using the legacy application s API. Although the existence of legacy applications is not required for the creation of an emergent model their use often reduces the time required to generate an emergent model. Legacy applications may also include enterprise wide tools such Enterprise Resource Planning ERP systems e.g. SAP R 3 from SAP America Inc. in Newtown Square Pa. .

An example of an emergent model that includes models and legacy applications is an emergent model for modeling the product design of a power tool. Aspects of the power tool product design including its shell and motor as well as its performance environmental impact and cost are modeled. A model for the shell of the power tool may already exist in a conventional mechanical design tool e.g. Pro ENGINEER from PTC Corporation in Waltham Mass. and a model relating to its environmental impact may already exist in a spreadsheet tool e.g. Microsoft Excel from Microsoft Corporation in Redmond Wash. . These legacy applications are associated with native models for the power tool motor performance and cost to generate an emergent model .

The inputs of a model are made available by publishing the model in such a way that another model requiring inputs subscribes to them. Traditionally providers of components might publish their availability in paper catalogs designers would then look for a component that match their criteria in the catalog. If a conforming component was found its parameters could then be used to model an aspect of the system of interest being modeled. In an integrated and distributed model implemented on a computer network this publish and subscribe mechanism can be emulated by connecting the various inputs and outputs of the models in such a way that an emergent model is created when underlying models are run.

Length object and width object are unconstrained either by dependencies or by access permissions both have public access . Area object is constrained as read only due to the fact that its value is determined by solver of area function object . Additionally area object is defined as private for access permissions indicating that some users have restricted access to its value.

This example shows the area object defined as Object Y where Object Y along with Object X is contained in Model A. Model A is stored on CO Server2 along with Model B and a Directory of Models. This hierarchy represents only one arrangement for defining area object other model organizations could be generated to define an equivalent model.

While this invention has been particularly shown and described with references to preferred embodiments thereof it will be understood by those skilled in the art that various changes in form and details may be made therein without departing from the scope of the invention encompassed by the appended claims. Specifically combinations of data objects and or function objects form a model according to the present invention.

