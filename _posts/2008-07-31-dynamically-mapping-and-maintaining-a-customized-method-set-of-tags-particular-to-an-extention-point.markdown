---

title: Dynamically mapping and maintaining a customized method set of tags particular to an extention point
abstract: A method for consistently and dynamically mapping and maintaining a customized method set of tags particular to an extension point page, includes: extending static customized method content to the extension point page by: mapping static customized method content to an extension point page; wherein the extension point page is configured with collaborative content and dynamic content; filtering the dynamic content based on a set of tags associated with the extension point page; synchronizing the extension point page's tags to ensure that the dynamic content rendered in the extension point page has a set of updated tags to retrieve current syndicated content; wherein a method author defines the extension point page in the customized method; and wherein a method user views the extension point page.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08095574&OS=08095574&RS=08095574
owner: International Business Machines Corporation
number: 08095574
owner_city: Armonk
owner_country: US
publication_date: 20080731
---
This invention relates generally to service oriented architectures and more particularly to a system article and method for consistently and dynamically mapping and maintaining a customized method set of tags particular to an extension point.

Service Oriented Architecture SOA is a development of distributed computing and modular programming in which existing or new technologies are grouped into autonomic systems. SOAs employ software services to build applications. Services are relatively large intrinsically unassociated units of functionality with externalized service descriptions. SOAs typically implement functionalities most humans would recognize as a service such as filling out an online application for an account viewing an online bank statement or placing an online booking or airline ticket order. Thus SOA serves to align business and information technology IT .

In an SOA environment instead of services embedding calls to each other in their source code protocols are defined that describe how one or more services may talk to each other. In an SOA environment one or more services communicate with one another by passing data from one service to another or coordinate an activity between one or more services. In addition independent services may be accessed without the knowledge of the underlying platform implementation. In this manner autonomic services may be orchestrated into higher level services. In SOA the application architecture has all its functions and services defined using a description language having invokable interfaces that are called to perform business processes. In SOA each interaction is independent of each and every other interaction and the interconnect protocols of the communicating devices i.e. the infrastructure components that determine the communication system do not affect the interfaces . Because interfaces are platform independent a client from any device using any operating system in any language may use the service.

A current challenge in SOA development is to build business driven composite services atop of autonomic informational services. By defining a methodology for the use and re use of software services and business processes which typically encompass multiple service invocations SOA has the potential to provide a great deal of flexibility and cost savings to enterprises that rely on information technology IT .

The SOA concept is based upon an architectural style that defines an interaction model between three primary building blocks a a service provider which publishes a service description and provides the implementation for the service b a service requester which can either use the uniform resource identifier URI for the service description directly or find the service description in a service registry and bind and invoke the service and c a service broker which provides and maintains the service registry using for example the Universal Description Discovery and Integration UDDI specification which defines a way to publish and discover information about web services.

A web service is a software application designed to support interoperable machine to machine interaction over a network and is frequently simple web application program interfaces API that may be accessed over a network such as the Internet and executed on a remote system hosting the requested services. Web services may provide an example of an SOA implementation in which the basic unit of communication is a message rather than an operation by making functional building blocks accessible over standard Internet protocols that are independent from platforms and programming languages.

 Web 2.0 is a term that refers to an increasingly frequented type of web application that is primarily distinguished by the ability of visitors to continually contribute information for collaboration and sharing. Web 2.0 applications use web services and may include composite user interfaces that provide combinations of various service technologies such as collaborative and social software web syndication weblogs and wikis. While there are no set standards for Web 2.0 Web 2.0 is a user driven architecture of participation that utilizes the SOA characteristics of building on the existing architecture and using services. The evolving technology infrastructure of Web 2.0 includes various applications that may provide users with information storage creation and dissemination capabilities that go beyond what had formerly been expected of web applications.

A number of Web 2.0 applications feature the extensive use of folksonomies. A folksonomy involves the practice of collaborative categorization using freely chosen tags that is metadata in the form of descriptive keywords or terms associated with or assigned to a piece of information and arises in web applications in which special provisions are made at the site level for creating and using tags for web content. Collaborative tagging in this fashion is intended to enable a body of information to be increasingly easy to search discover and navigate over time and folksonomies are commonly used to label classify and retrieve web content such as web pages digital images Internet bookmarks and web links. As folksonomies develop in web mediated social environments users often discover the tag sets of another user who tends to interpret and tag content in a way that makes sense to them. The use of folksonomies may result in an immediate and rewarding gain in user capacity to find related content.

Flickr and del.icio.us are examples of websites that use folksonomic tagging to organize content. Flickr is a digital image storage and management service that is configured with a user interface to tag images with descriptive nouns verbs and adjectives and systematically perform CRUD create read update and delete operations on photography entries del.icio.us is a social bookmarking site that is configured for users to create and store Internet bookmarks and then tag the bookmarks with many descriptive words facilitating others to search by those terms to find sites that have been found useful.

Within the realm of a business enterprise and its network of partners there are numerous opportunities for collaboration. The use of Web 2.0 technologies and SOA principles has the potential to increase the reach and improve the richness of this interaction in enterprise informational services leading to more efficient development of new business models and processes by using readily available intuitive modular elements. By creating an environment in which employees can collaborate efficiently by leveraging each other s intellect and resources employees can create stronger and more successful products. Nevertheless most software that is touted as enabling enterprise collaboration is difficult to use cumbersome and does not adequately empower employees to share their content. This results in SOA implementations that undesirably add more custom logic and increased complexity to an IT infrastructure. A big hurdle for the typical large enterprise is the ability to standardize knowledge practice across that enterprise and to implement tools and processes that support that aim.

An example of an enterprise or business driven collaborative enterprise environment is that of a composite service system. A composite service system comprises a collection of collaborative or interactive services which aggregate domain specific or context aware content information that may be utilized by employees to maintain consistency across all of the enterprise informational services. Examples of systems that may be implemented in this fashion include project management systems which are used to schedule track and chart the steps in a project as it is being completed workflow systems which enable the collaborative management of tasks and documents within a knowledge based business process and knowledge management systems which are used to collect organize manage and share various forms of information. Operations such as record management content management collaborative software workflow or business process management and other mechanisms designed to capture the efforts of many into a managed content environment are typical of these workplace collaboration technologies.

Domain knowledge is the body of knowledge about a particular activity environment. In an enterprise domain knowledge has traditionally been organized formally or informally in an institutionally supported taxonomy that is domain specific. Domain knowledge may be kept in data repositories such as Lotus Notes Teamrooms ad hoc websites knowledgebases social bookmarks or applications and so on. A workplace generated folksonomy would be useful for example with business driven collaborative or interactive management systems of composite services that are designed to help employees working on a common task achieve their goals.

Internet resource identifiers such as uniform resource identifiers URIs uniform resource locators URLs or internationalized resource identifiers IRIs are internet addresses that implement a variety of naming schemes and access methods such as Hypertext Transfer Protocol HTTP and File Transfer Protocol FTP . The primary purpose of Internet resource identifiers URIs URLs and IRIs is to identify resources on the web such as documents images files services media applications and other resources.

Embodiments of the present invention include a method article and system for consistently and dynamically mapping and maintaining a customized method set of tags particular to the extension point page the method includes extending static customized method content to the extension point page by mapping static customized method content to the extension point page wherein the extension point page is configured with collaborative content and dynamic content filtering the dynamic content based on a set of tags associated with the extension point page synchronizing the extension point page s tags to ensure that the dynamic content rendered in the extension point page has a set of updated tags to retrieve current syndicated content wherein a method author defines the extension point page in the customized method and wherein a method user views the extension point page.

An article comprising one or more computer readable storage media containing instructions that when executed by a computer enables a method for consistent and dynamic mapping and maintenance of a customized method set of tags particular to an extension point page the method includes extending static customized method content to the extension point page by mapping static customized method content to the extension point page wherein the extension point page is configured with collaborative content and dynamic content filtering the dynamic content based on a set of tags associated with the extension point page synchronizing the extension point page s tags to ensure that the dynamic content rendered in the extension point page has a set of updated tags to retrieve current syndicated content wherein a method author defines the extension point page in the customized method and wherein a method user views the extension point page.

A system for consistent and dynamic mapping and maintenance of a customized method set of tags particular to an extension point page the system includes one or more server devices in communication with one or more client devices through a network the server devices and the client devices configured to execute electronic software wherein the electronic software is resident on storage mediums in signal communication with the client and server devices wherein the electronic software comprises a series of instructions configured for extending static customized method content to the extension point page by mapping static customized method content to the extension point page wherein the extension point page is configured with collaborative content and dynamic content filtering the dynamic content based on a set of tags associated with the extension point page synchronizing the extension point page s tags to ensure that the dynamic content rendered in the extension point page has a set of updated tags to retrieve current syndicated content wherein a method author defines the extension point page in the customized method and wherein a method user views the extension point page.

Additional features and advantages are realized through the techniques of the present invention. Other embodiments and aspects of the invention are described in detail herein and are considered a part of the claimed invention. For a better understanding of the invention with advantages and features refer to the description and to the drawings.

The detailed description explains the preferred embodiments of the invention together with advantages and features by way of example with reference to the drawings.

Embodiments of the invention provide a method article and system for consistently and dynamically mapping and maintaining customized method set of tags particular to an extension point. is a block diagram illustrating an extension of static read only customized method content to an extension point page with collaborative and dynamic content according to embodiments of the invention. Collaborative content refers to Web pages configured to allow multiple authors to contribute and edit the Web page s content. For example a wiki is a collaborative website that contains a collection of editable web pages. Dynamic content refers to content that is provided via Web feeds. In embodiments of the invention each extension point page maps to an extension point in the static customized method content and dynamic content is filtered based on the set of tags associated with the extension point. In embodiments of the invention as illustrated in the consistency of domain specific tags across informational silos is maintained despite disparate folksonomies via messaging middleware that generates tags for the informational silos . The client is typically any kind of client that is used to access web 2.0 aware applications. A typical client is web browsing software such as Firefox or Internet Explorer. The client renders static and dynamic content realized with embodiments of the invention. The agent is a piece of software such as a plugin add on extension etc. that is responsible for maintaining the consistency of a tag for a particular user of a particular community of practice COP .

Embodiments of the invention synchronize an extension point s tags in the event the tags have changed. Embodiments of the invention ensure that dynamic information that is rendered in an extension point page has updated tags to retrieve the most current syndicated content. The tags are synchronized through an application or Web service that updates a relational database management system RDBMS . illustrates an exemplary data model for updating an RDBMS.

Embodiments of the invention have two primary actors a method author and a method user who are depicted as and respectively in . The method author is a person who defines the extension points in the customized method also referred to as a process author . The method user is a person who views the extension point pages.

Table 1 is an exemplary representation of a mapping of tags to extension points that is maintained by a customized method author. In embodiments of the invention the customized method author keeps the table up to date current and removes tags as necessary. It is noted that the tags in the table are just soft references to the actual tags that have been identified and maintained for a particular customized method. By employing soft references this ensures in the event a particular tag is renamed or modified that the updated tag name is reflected in the table immediately thereby allowing for consistency in terms of quality of the dynamic information being provided to the end user of customized method

In embodiments of the invention an informational service Web service may be built around the table to facilitate a user to create read update and delete CRUD table information. For example in a read operation there are two parameters passed in a call function 1 a unique identifier for a particular customized method with each separate customized method having a unique table 2 an identifier identifying a particular extension point for example 

This method could then be called from within the extension page corresponding to the extension point to pre populate the latest tags needed for this particular extension point and use these tags in the corresponding RSS really simple syndication call to the various informational silos. The method just described could be done using AJAX or ASAN.

A separate area of the collaborative Web site wiki would provide dynamic content relevant to an architect for this particular extension point in the form of RSS or atom feeds. In the case of a service identification extension the separate area would be populated by dynamic content around the service identification. Examples of dynamic content are 

Returning to the method author may also delete extension point tags update extension point tags and view extension point pages with the method user .

In the method author creates an extension point page by the following process. The process starts block with the creation of a customized method block creation of an extension point block and a subsequent update of the tag management system database block and the process concludes block .

In the method author deletes an extension point tag by the following process. The process starts block by opening a customized method block and an extension page editor block and deleting extension point tags block . Subsequently the tag management system database is updated block and the process concludes block .

In the method author updates an extension point tag by the following process. The process starts block by opening a customized method block and an extension point editor block and updating extension point tags block . Subsequently the tag management system database is updated block and the process concludes block .

In the method author or method user views an extension point page by the following process. The process starts block by opening an extension point page block and a Web service reads an extension point tag block and renders an extension point page block . Subsequently the extension point page is available for viewing block and the process concludes block .

where Tag is a collection of tagging instances returned by the web service. The page programming script renders displays the dynamic content associated with the tags returned by the web service in the previous step block . The user is now able to view the page with dynamic content updated with latest set of tags block and the process concludes block .

Referring now to there is depicted an exemplary data processing system that may be utilized to implement exemplary embodiments of the present invention. For discussion purposes the data processing system is described as having features common to a personal computer such as a desktop or portable computer. As used herein however the terms data processing system computer and the like are intended to mean essentially any type of computing device or machine that is capable of receiving storing and running a software product including such devices as communication devices for example pagers telephones electronic books electronic magazines and newspapers etc. and personal and home consumer devices for example handheld computers web enabled televisions home automation systems multimedia viewing systems gaming consoles etc. .

Data processing system as provided in is configured as a personal computer that generally includes a processing unit a system memory and a system bus that couples system memory to processing unit . The system memory includes flash memory and random access memory RAM . Flash memory is an electrically erasable programmable read only memory EEPROM module that includes a basic input output system BIOS . BIOS contains the basic routines that facilitate transfer of information between elements within personal computer such as during start up.

Data processing system further includes a hard disk drive a magnetic disk drive which can be used to read from or write to a removable disk and an optical disk drive which can be used to read a CD ROM disk or read or write to other optical media . Hard disk drive magnetic disk drive and optical disk drive are electrically communicatively coupled to system bus by a hard disk drive interface a magnetic disk drive interface and an optical drive interface respectively. The drives and their associated computer readable media provide nonvolatile storage for data processing system . Although the description of computer readable media above refers to a hard disk a removable magnetic disk and a CD ROM disk it should be appreciated that other types of media that are readable by a computer such as magnetic cassettes flash memory cards digital video disks Bernoulli cartridges and the like may also be used in exemplary computer operating environments.

A number of program modules may be stored in the drives and RAM including an operating system application program modules such as for example word processors design applications and IBM s Workplace Forms suite of program modules and program data . A user may enter commands and information into data processing system through a keyboard and a mouse . Other input devices not shown may include for example a microphone joystick game pad satellite dish scanner or the like. These and other input devices are often connected to processing unit through a serial port interface that is coupled to system bus but may be connected by other interfaces such as a game port or a universal serial bus USB . A monitor or other type of display device is also connected to system bus via an interface such as a video adapter . In addition to the monitor the exemplary computer operating environment may also include other peripheral output devices not shown such as speakers or printers.

Data processing system may operate in a networked environment using logical connections to one or more remote computers such as a remote computer . Remote computer may be for example a server a router a peer device or another common network node and may include many or all of the elements described in relation to data processing system . The logical connections depicted in include a local area network LAN and a wide area network WAN .

When used in a LAN networking environment data processing system is connected to LAN through a network interface . When used in a WAN networking environment data processing system includes a modem or other means for establishing communications over WAN such as the Internet. Modem which may be internal or external to data processing system is connected to system bus via serial port interface . In a networked environment program modules depicted relative to data processing system or portions thereof may be stored in the remote memory storage device. It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.

Exemplary embodiments of the present invention may be implemented in conjunction with an SOA environment such as for example an integrated web services implementation in which the SOA supports integration and consolidation of any number of services and processes. Web services are self contained self describing modular applications that may be described located and invoked over a computer network such as the World Wide Web. Web services utilize standardized interfaces and protocols for example a web Application Programming Interface API to implement consolidation and integration methods that allow different entities or web based applications to communicate data logic and processes with one another over a network. These standardized methods permit different applications to exchange resources with other entities or applications that are running on different operating systems. In an SOA environment the SOA may define a interface through which a service requesting or client side party may access web services or enterprise based services provided within an enterprise domain specify or consolidate a set of web services or web service providers that may be invoked through the interface and define protocols for communicating with the set of web services through the SOA interface.

Client applications are software applications that include one or more sequences of instructions that are executable by one or more processors. For example applications may be programs that are executable on a computer system such as the data processing system illustrated in described above. Web services may include some combination of programming and data that are made available through application server for end users and other network connected application programs. In exemplary embodiments web services may comprise one or more web applications that are implemented to allow users of client applications to communicate therewith to create and store folksonomic tags for describing web content such as for example digital images or internet bookmarks.

When a client application needs to invoke a remote web service at application server the invoking client application generates a request message describing arguments to be given to the web services and requests processing by the web services. Upon receiving the request message application server performs the processing for the requested web services and returns a response message describing any return values of the processing to the client application.

ESB which is a component of enterprise domain in the present exemplary embodiment serves to provide an enhanced messaging middleware infrastructure for the enterprise domain and provides the set of capabilities through which the SOA may be implemented. The capabilities provided by ESB may include for example invocation routing mediation messaging mediation messaging process choreography service orchestration complex event processing and management functions. In general ESB serves as a centralized broker that handles issues relating to security access and communication in the SOA environment. In exemplary embodiments ESB may be configured to perform data integration to ensure that information is kept consistent within the SOA environment provide a common user interface through which client applications may access the web services that are specified by the SOA and to extract policies or rules from the specified web services so that if one service is replaced with a different vendor s services in the SOA specification the business rules do not have to be re implemented. In alternative exemplary embodiments ESB may be a vendor provided service bus that is external to enterprise domain .

In one particular exemplary capability ESB serves as a message mediator by receiving processing and passing request messages from client applications and response messages from web services such that the services can be called to perform their tasks in a standard way without the services having foreknowledge of the calling client applications and without the client applications having or needing knowledge of how the services actually perform their tasks. In exemplary embodiments the message processing performed by ESB may be built upon generally accepted web services standards and protocols such as for example XML a markup language for describing data in message payloads in a document format HTTP or HTTPS a request response protocol between clients and servers used to transfer or convey information SOAP a protocol for exchanging XML based messages over a computer network normally using HTTP and XACML a markup language for expressing access control rules and policies .

ESB and web services communicate with each other as well as with other applications and web service systems through network . Network is configured to receive and pass on request and response messages accordingly and to use the transportation protocol or protocols used by messages. Network includes intranets extranets and the Internet and may contain any number of network infrastructure elements including routers switches gateways etc. For example network may be the public Internet or a private LAN. In exemplary embodiments ESB may also communicate with other web service providers to provide other web services and applications through network to client applications as well as with enterprise service providers through an intranet within enterprise domain that provide other services and processes such as enterprise legacy services to the client application.

Application server provides web services to client applications through network . A web server application processing unit such as WebSphere a product of International Business Machines Corporation oversees the execution of multiple web services that reside on application server . Network passes each request message to and receives each response message from application processing unit through a message gateway such as for example a proxy firewall or other message intermediary. Message gateway receives request messages from network and passes response messages to the network. Message gateway performs lexical analysis of request messages to create input objects including parameters for invocation of one or more of web services . Message gateway sends input objects to web service application processing unit which calls the appropriate web services that correspond to the method invocation of the input objects executes the appropriate logic and returns the result as output objects that include the return values of the invoked web service s to the message gateway. Message gateway converts output objects into response messages and transmits the response messages through network to the invoking client applications.

Application processing unit may also be supported by a database management system which may be any conventional data repository for storing managing and retrieving data. In exemplary embodiments database may be a relational or object relational database management system such as DB2 a product of International Business Machines Corporation. In exemplary embodiments database may be internal to application server as shown in or alternatively reside externally on a separate machine. In exemplary embodiments application server may use a single database to serve multiple web services as shown in or alternatively use a separate database for each separate web service.

The capabilities of the present invention can be implemented in software firmware hardware or some combination thereof.

As one example one or more aspects of the present invention can be included in an article of manufacture e.g. one or more computer program products having for instance computer usable media. The media has embodied therein for instance computer readable program code means for providing and facilitating the capabilities of the present invention. The article of manufacture can be included as a part of a computer system or sold separately.

Additionally at least one program storage device readable by a machine tangibly embodying at least one program of instructions executable by the machine to perform the capabilities of the present invention can be provided.

The flow diagrams depicted herein are just examples. There may be many variations to these diagrams or the steps or operations described therein without departing from the spirit of the invention. For instance the steps may be performed in a differing order or steps may be added deleted or modified. All of these variations are considered a part of the claimed invention.

While the preferred embodiments to the invention has been described it will be understood that those skilled in the art both now and in the future may make various improvements and enhancements which fall within the scope of the claims which follow. These claims should be construed to maintain the proper protection for the invention first described.

