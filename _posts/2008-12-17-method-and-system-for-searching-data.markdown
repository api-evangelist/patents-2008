---

title: Method and system for searching data
abstract: A method and system for searching data is provided. An index of a search engine is accessed. Distribution data is extracted from the index of the search engine. A value index is generated from the distribution data. A search request is received from a client. A query is generated based on the search request and the value index. The query is forwarded to the search engine for execution.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08321399&OS=08321399&RS=08321399
owner: SAP AG
number: 08321399
owner_city: Walldorf
owner_country: DE
publication_date: 20081217
---
Embodiments of the invention generally relate to computer systems and more particularly to a method and system for searching data.

One of the primary uses of computers is for information storage and retrieval. Database systems have been developed that allow a computer to store a large amount of information in a way that allows a user to search for specific information in the database and retrieve such specific information. For example an insurance company may have a database that includes all of its policy holders and their current account information including payment history premium amount policy number policy type exclusions to coverage etc. A database system allows the insurance company to retrieve the account information for one or more policy holders among thousands and perhaps millions of policy holders in its database and generate reports based upon specific user parameters. Applications have been developed that search databases for specified keywords and return a list of results where the keywords are found. Such applications are generally referred to as search engines. Frequently users need to conduct searches in order to retrieve data spread over several databases sometimes spread across multiple countries and managed by multiple search engines. Searches conducted using web search engines such as Google by Google Inc. of Mountain View Calif. US to search for information on the World Wide Web are good examples of such searches. Such extensive and complicated searches are typically conducted by meta search engines.

A meta search engine is a search engine that sends user requests to several other search engines and or databases and aggregates the results into a single list or displays them according to their source. Meta search engines enable users to enter search criteria once and access several search engines simultaneously. Meta search engines operate on the premise that the World Wide Web is too large for any one search engine to index it all and that more comprehensive search results can be obtained by combining the results from several search engines. This also may save the user from having to use multiple search engines separately.

The performance of meta searches mainly depends on the reaction time of the underlying search engines and on the overhead of distributing queries to all search engines. Distributing all queries to all search engines leads to poor performance from the end user perspective especially if the meta search uses many search engines. Another performance bottleneck is usually the wide variety of search engines used for conducting meta searches such as the search engines used for an enterprise search spanning the whole field of search on structured data e.g. business objects and unstructured data documents .

One solution that has been employed to overcome the above performance bottlenecks is the use of pre configured keywords that address one or a group of search engines. Thus a query for conducting a search based on a pre configured keyword would be forwarded only to those search engines that have already been configured for the keyword. Although this method results in some performance improvements it has many limitations. A search conducted using a pre configured keyword is limited to the configured search engines only. In addition the keywords are typically language dependent and thus create an overhead for internationalization.

Thus there is no meta search technique currently available that intelligently targets search engines in a network and at the same time provides a comprehensive search. An intelligent and comprehensive search targets every search engine that may possibly contain data matching a provided keyword.

Embodiments of the invention are generally directed to a method and system for searching data. An index of a search engine is accessed. Distribution data is extracted from the index of the search engine. A value index is generated from the distribution data. A search request is received. A query is generated based on the search request and the value index. The query is forwarded to the search engine for execution.

These and other benefits and features of embodiments of the invention will be apparent upon consideration of the following detailed description of preferred embodiments thereof presented in connection with the following drawings. The invention is illustrated by way of example and not by way of limitation in the figures of the accompanying drawings. It should be noted that references to an or one embodiment in this disclosure are not necessarily to the same embodiment and such references mean at least one.

Federation engine is also responsible for generating and maintaining a value index . Value index generally includes data that indicates which of the search engines connected to the federation engine are most likely to return results for a given keyword. Each of the search engines generally stores distribution data in their respective indices . The distribution data stored in the index of a search engine includes information corresponding to the organization and distribution of data over one or more databases memory elements or servers. Federation engine has access to the indices of all the search engines it is connected with. Each of the search engines generally provides an application programming interface to federation engine to enable access to the indices .

Federation engine accesses the indices of each of the search engines and extracts distribution data from the indices . Distribution data is then used by federation engine for generating value index . Value index is preferably stored locally in the federation engine . Value index may include one or more values that all attributes may take for a given search engine . Table 1 illustrates a value index that stores the values that may be taken for attributes Name City Address and the like for search engines Engine 1 Engine 2 and Engine 3 .

Alternatively value index may include one or more values that an attribute may take corresponding an object type for a given search engine . Table 2 illustrates a value index that stores the values that may be taken for attributes corresponding to specific object types for engines Engine 1 Engine 2 and Engine 3 . For instance in Engine 1 value Business Object may be taken for an attribute Name corresponding to an object type Customer .

In one embodiment the value index is updated each time a search engine connected to the federation engine creates or updates its index .

Every time the federation engine receives a search request based on one or more search keywords federation engine looks up the value index and determines one or more search engines that are likely to return results for the search keyword. A query is then generated by the federation engine based on the search keyword and the look up results of the value index . The query is then forwarded to the determined search engines for execution. In an embodiment a separate query is generated for each of the determined search engines . For instance if the value index is organized as given in Table 1 and the user provides a search keyword Paris the federation engine will lookup the value index and forward the query to Engine 1 and Engine 2 . All information corresponding to the keyword Paris is retrieved by Engine 1 and Engine 2 .

In another example the value index is organized as given in Table 2 and the user provides 3 keywords namely a keyword for a value as Paris a key for an attribute as City and a keyword for an object type as Customer . The federation engine looks up the value index and forwards the query to Engine 1 only. All information corresponding to the customer city being Paris is retrieved by Engine 1 .

Federation engine finally receives the search results from each of the search engines combines and formats the results and presents the results to the user.

In process block a value index in is generated from the distribution data by the federation engine. The value index may include one or more values that all attributes may take for a given search engine. Alternatively the value index may include one or more values that an attribute may take corresponding an object type for a given search engine. In process block a search request is received from a client such as a user. The search request typically includes one or more search keywords. In process block a query is generated by the federation engine based on the search request and the value index. Finally in process block the query is forwarded by the federation engine to one or more search engines for execution.

In process block a value index in is generated from the extracted distribution data by the federation engine. The value index generally includes data that indicates as to which of the search engines connected to the meta search controller are most likely to return results for a given keyword. The value index may also include one or more values that all attributes may take for a given search engine. Alternatively the value index may include one or more values that an attribute may take corresponding an object type for a given search engine. In process block the value index is stored locally in the federation engine. Decision block checks whether a search request is received from a user by the federation engine. The search request typically includes one or more search keywords based on which the user wants to conduct a search. If a search request is not received the process rolls back to process block . If a search request is received the process moves to process block where the federation engine looks up the value index for a search engine based on the search request. In process block the federation engine determines one or more search engines that are likely to return results for the provided search keywords. In process block based on the value index and the search request one or more queries are generated by the federation engine. In an embodiment the federation engine generates one query for each of the search engines. In process block the queries are forwarded for execution to their respective search engines pre determined by the federation engine. In process block each of the queries is executed in their respective search engines. Finally in process block the search results are forwarded by each of the search engines to back to the federation engine. The federation engine on receiving the search results from the search engines combines the results. In an embodiment the federation engine formats the results and presents the results to the user. In another embodiment another software component such as report engine graphical user interface GUI may combine and format the results.

Value index generator is also responsible for generating and maintaining a value index. The value index generally includes data that indicates as to which of the search engines connected to the meta search controller are most likely to return results for a given keyword. Each of the search engines generally store distribution data in their respective indices. The distribution data stored in the index of a search engine includes information corresponding to the organization and distribution of data over one or more databases memory elements or servers. Meta search controller has access to the indices of all the search engines that it is connected with. Each of the search engines generally provides an application programming interface to the meta search controller to enable access to the indices.

Meta search controller accesses the indices of each of the search engines and extracts distribution data from the indices. The distribution data is then used by the value index generator for generating the value index. The value index is typically stored locally in the memory . The value index may include one or more values that all attributes may take for a given search engine . Alternatively the value index may include one or more values that an attribute may take corresponding an object type for a given search engine . In one embodiment the value index is updated each time a search engine connected to the meta search controller creates or updates its index.

Every time the meta search controller receives a search query based on one or more search keywords through the user interface module the meta search controller looks up the value index and determines one or more search engines that are likely to return results for the search keyword. A query is then generated by the query generator based on the search keywords and the look up results of the value index. The query is then forwarded by the meta search controller to the determined search engines for execution. In an embodiment a separate query is generated for each of the determined search engines . Meta search controller finally receives the search results from each of the search engines combines and formats the results and presents the results to the user.

The particular methods associated with embodiments of the invention are described in terms of computer software and hardware with reference to flowcharts. The methods to be performed by a computing device e.g. an application server may constitute state machines or computer programs made up of computer executable instructions. The computer executable instructions may be written in a computer programming language or may be embodied in firmware logic. If written in a programming language conforming to a recognized standard such instructions can be executed on a variety of hardware platforms and for interface to a variety of operating systems. In addition embodiments of the invention are not described with reference to any particular programming language. It will be appreciated that a variety of programming languages may be used to implement the teachings of the invention as described herein. Furthermore it is common in the art to speak of software in one form or another e.g. program procedure process application etc. as taking an action or causing a result. Such expressions are merely a shorthand way of saying that execution of the software by a computing device causes the device to perform an action or produce a result.

Elements of the invention may also be provided as a machine readable medium for storing the machine executable instructions. The machine readable medium may include but is not limited to flash memory optical disks CD ROMs DVD ROMs RAMs EPROMs EEPROMs magnetic or optical cards or other type of machine readable media suitable for storing electronic instructions. For example the invention may be implemented as a method performed in a client server network with the execution the methods distributed across the network.

It should be appreciated that reference throughout this specification to one embodiment or an embodiment means that a particular feature structure or characteristic described in connection with the embodiment is included in at least one embodiment of the present invention. These references are not necessarily all referring to the same embodiment. Furthermore the particular features structures or characteristics may be combined as suitable in one or more embodiments of the invention.

Throughout the foregoing description for the purposes of explanation numerous specific details were set forth in order to provide a thorough understanding of the invention. It will be apparent however to one skilled in the art that the invention may be practiced without some of these specific details. For instance the detailed description as set forth above includes descriptions of method steps. However one skilled in the art will understand that the order of the steps set forth above is meant for the purposes of illustration only and the claimed invention is not meant to be limited only to the specific order in which the steps are set forth. Accordingly the scope and spirit of the invention should be judged in terms of the claims which follow.

