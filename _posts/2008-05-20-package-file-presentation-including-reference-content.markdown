---

title: Package file presentation including reference content
abstract: Various embodiments illustrated and described herein include one or more of systems, methods, software, and data structures for presentation of package files including a reference content item. Some embodiments include receiving a reference content item, such as an image, map, or calendar, and mappings of package files to locations within the reference item for display. Such embodiments may then publish the package file. Some other embodiments include generating visual representations of package files including a reference content item and one or more content items mapped to locations within a reference content item. Such a visual representation may include a view of the reference content item and a graphical element representative of the content item at the mapped location within the view of the reference content item.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09448976&OS=09448976&RS=09448976
owner: ADOBE SYSTEMS INCORPORATED
number: 09448976
owner_city: San Jose
owner_country: US
publication_date: 20080520
---
A portion of the disclosure of this patent document contains material that is subject to copyright protection. The copyright owner has no objection to the facsimile reproduction by anyone of the patent document or the patent disclosure as it appears in the Patent and Trademark Office patent files or records but otherwise reserves all copyright rights whatsoever. The following notice applies to the software and data as described below and in the drawings that form a part of this document Copyright 2008 Adobe Systems Inc. All Rights Reserved.

Electronic documents e.g. page description language documents and other electronic content have become increasingly pervasive as the use of electronic computer systems and networks e.g. the Internet have grown. Increasingly collections or bundles of electronic content are being generated and made available on electronic computer systems.

In the following detailed description reference is made to the accompanying drawings that form a part hereof and in which is shown by way of illustration specific embodiments in which the inventive subject matter may be practiced. These embodiments are described in sufficient detail to enable those skilled in the art to practice them and it is to be understood that other embodiments may be utilized and that structural logical and electrical changes may be made without departing from the scope of the inventive subject matter. Such embodiments of the inventive subject matter may be referred to individually and or collectively herein by the term invention merely for convenience and without intending to voluntarily limit the scope of this application to any single invention or inventive concept if more than one is in fact disclosed.

The functions or algorithms described herein are implemented in hardware software or a combination of software and hardware. The software comprises computer executable instructions stored on computer readable media such as memory or other type of storage devices. Further described functions may correspond to modules which may be software hardware firmware or any combination thereof. Multiple functions are performed in one or more modules as desired and the embodiments described are merely examples. The software is executed on a digital signal processor application specific integrated circuit ASIC microprocessor or other type of processor operating on a system such as a personal computer PC server router or other device capable of processing data including network interconnection devices.

Some embodiments implement the functions in two or more specific interconnected hardware modules or devices with related control and data signals communicated between and through the modules or as portions of an ASIC. Thus the exemplary process flow is applicable to software firmware and hardware implementations.

Collections of content files may be bundled into a package file and presented in various ways. For example considering page descriptor language documents simple lists or as links for each content file of a package files may be presented within page description language documents such as PDF documents. Although such presentation methods provide access to the packaged files various embodiments described and illustrated herein provide more interactive ways to author and present package files. Some embodiments provide mechanisms by which rich descriptions of content files within a package may be presented allowing a viewer to identify if particular content files are relevant for a particular need without even opening the particular content files. Some embodiments may allow a viewer to select a mode of presentation of a packaged file. Some embodiments allow content authors to include graphics audio moving images and videos and views of package files within a presentation specification to provide graphical representations of content files included in package files. As an ancillary benefit presentation specifications may be utilized to include branding information such as company logos information product illustrations and the like in an interactive presentation. In some further embodiments a content file or other element of a package file may optionally be linked to at another storage location such as on a networked server.

In some embodiments a view of a collection or group e.g. package of content files may be presented in a user interface using a customizable navigation template which is referred to herein as a presentation specification. A presentation specification may be an object adapted to present one or more views of a package file. The views presented by a presentation specification may be user interactive and may include any of still images animations video audio and other forms of media. In some embodiments a presentation specification may include unique package branding e.g. a package of files delivered by a company may be branded using that company s branding . Some such embodiments are supported by the creation and visualization of metadata regarding the content files included in a package file. For example the content file metadata may be automatically determined such as file type creation date length etc. or it may also be user inputted such as commentary and notes regarding the package as a whole or the individual content files included therein. In some embodiments the metadata is independently embedded within the package file. In other embodiments the metadata is embedded within content files packaged within the package file. The metadata in some embodiments may include location e.g. geospatial data associated with each content file and a background or reference image or animation upon which content files are to be displayed as a function of the location data.

Multiple presentation specifications may also be defined for a common package file. In addition presentation specifications may be made available for package file views. For example a particular company may publish a number of presentation specifications for various package files that are typically assembled by that organization each of these presentation specifications including a custom navigation template and organization specific branding.

In one example embodiment a user interface of a presentation specification may be presented as columns each column being dedicated to a particular content file in the package file including metadata regarding a respective content file of the package file. In another embodiment relationships between content files and the package file may be indicated. For example a map may be created which indicates certain relationships that exist between content files in a package file.

Package files may be authored in several ways. Some embodiments provide user interfaces that may be manipulated to select one or more presentation specifications to include in a package file to set various options to define metadata and to attach or otherwise associate content files with a package such as via linking to content files accessible over a network. Some other embodiments provide mechanisms that may be used in a drag and drop fashion where a user may select content files to be packaged such as in a file explorer type user interface of an operating system and drag and drop the content files into a package file user interface item such as an icon. The user may then select one or more presentation specifications for use in displaying a representation of the content files. These and other embodiments are described in detail below.

The header in this embodiment includes a graphic of an entity e.g. company organization or person of origin of the package file. The graphic is instantiated from an image file that may also be packaged within the package file. However in some embodiments the image file may be referenced by an Internet address in metadata of the presentation specification. Thus in the event the entity of origin modifies its image file an updated image file may be stored to the Internet address and subsequent views of the package file using the presentation specification will display the modified image file.

The columns of the body portion of the user interface include a column for each of three content files such as documents included in the package file. The columns in the example embodiment each include a title and a description . The titles and descriptions provide information to a viewer about a content file that may be viewed by selecting a respective column . For example a user may desire to view information regarding the user s auto insurance policy. The user in such an example would select the left most column such as by clicking a mouse on the column. Such a selection in some embodiments may cause the underlying content file to be displayed such as in the user interface of .

The user interfaces and of and are merely examples of presentation specifications e.g. in the form of a page description language document and or executable code or scripts that may be created linked and packaged together by developers and users. Further examples of presentation specifications are illustrated and described with regard to and further with regard to and several figures that follow. Note though that the only real limits on what such user interfaces may look like and how they may behave and be linked are relative to the scope of the presentation specification developer s imagination.

For example is an illustration of a hierarchical display element presentation specification according to an example embodiment. Such a hierarchical display element presentation specification may include multiple display elements which may be expanded and contracted by a viewer in a hierarchical fashion when instantiated within a reader and or player application. Such a hierarchical display element presentation specification is therefore viewer interactive.

The example hierarchical display element presentation specification includes a top level display element and multiple lower level display elements . In some embodiments although the display elements may be at different levels in the hierarchy each display element may include identical data elements. For example the data elements of each display element such as in the illustrated data structure and data structures of other presentation specifications may include 

A data structure of a presentation specification that may be included in a package file may include metadata associating each of one or more content files within a page description language document to a presentation display element of the presentation specification. However in some embodiments the metadata may define display elements to be instantiated by the presentation specification. A presentation display element may or may not be a hierarchical presentation display element. The data structure of the presentation specification may further include data defining a package file presentation header to be presented with a content file when selected within a page description language reader application for display such as is illustrated in . In some embodiments the presentation specification also includes instructions executable within an environment of the page description language reader application or other application depending on the file type of the package file to cause the presentation specification to be instantiated and displayed within a graphical user interface of the application. In some embodiments the instructions may also be executable to modify an appearance of the displayed presentation specification in response to one or more events such as a user clicking a mouse on a display element a hover event of a mouse over a displayed element or other event.

The package editing module and the package host module are applications encoded according to a format of the respective player applications or plug ins upon which they operate. In some embodiments the package editing module is operable within the player application plug in to provide user interfaces that allow a package file author to select one or more presentation specifications and one or more optional elements and to specify properties and enter other data into the package file . The package host module is operable within the player application plug in to display the package file in a player mode and in an authoring mode. While in the player mode the packages host module is operable to allow a user to interact with a displayed package file according to a presentation specification . While in the authoring mode the packages host module is operable to reflect changes made to the package file by the package editing module .

Changes made to the package file via the package editing module are communicated to the package host module via a bridge layer . The bridge layer may be an interface in the form of a Application Programming Interface API that provides mechanisms by which data representative of data within the package file and changes made to the package file may be moved and may flow between the package host module and the package editing module . For example when the package editing module is used to select one or more of the presentation specifications for inclusion in the package file data representative of a selected presentation specification is included in a bridge layer function or method call which causes a reference to the selected presentation specification to flow to the package host module . However in other embodiments a data structure of the selected presentation specification may be passed via the bridge layer .

In some embodiments due to the programmatic nature of the package editing module package host module presentation specifications optional elements and package file the bridge layer is insulated from a host layer of the application . The host layer may include a kernel or at least some portions of application . In some embodiments the insulation of the bridge layer from the host layer is provided by a security layer . The security layer may limit access to some resources of the application such as access to files and other resources of and on a computing device upon which the application is present.

The package editing module in some embodiments includes a presentation specification select module an option modification module and a publication module . The presentation specification select module is operative to provide a user interface to allow selection of a presentation specification held in a storage device to which the package editing module has access. The presentation specification select module upon receipt of a presentation specification selection causes data representative of the selection to be communicated to a package host module such as the package host module of .

The option modification module in some embodiments is operative to present package file authoring options via one or more user interfaces according to one or more further modules. The further modules may include one or more of an options module a colors module a file detail module and other modules depending on a selected presentation specification the particular embodiment permissions of a person using the package editing module and other factors. In some embodiments the options module is operable to provide package file and presentation specification options to a user. Some such options may include security and encryption options data compression options options that modify how a presentation specification is displayed within a package host module and other options that may apply to a package file as a whole or in part when displayed. Some further options may include one or more optional elements from the storage device which may be selected for inclusion in a package file or which may already be included or referenced in a selected presentation specification . Such optional elements may include one or more navigation aids that provide navigation functionality within a displayed presentation specification. In some embodiments the optional elements may include another instance of a media playing application or plug in which may be configured to play an audio track display a video animation a series of still images or other media types when displayed. As with the presentation specifications the functionality of the optional elements is generally limited only by the imagination of an optional element developer or package file author.

The colors module in some embodiments provides one or more user interfaces operable to receive input to define colors used when displaying views of a package file within a presentation specification. The one or more user interfaces in some embodiments provide a color palette to select colors from or enter color specifications into such as red green blue RGB values. In some embodiments the colors module is operative to receive a selection of one or more presentation specification elements via a menu item or by user input into the package host module of via the bridge layer also of . The colors module is the operative to receive color specification input for the selected elements and to populate the color specification input across the bridge layer to cause the color specification input to be reflected in a view of the package file within the package host module .

In some embodiments the file detail module is operative to provide one or more user interfaces to allow users to define and manipulate metadata associated with a selected presentation specification and content files within a package file. Such user interfaces may allow a user to add delete and modify metadata fields and associate those metadata fields with content files within the package file or to the package file itself. The metadata fields may be designated for display or made invisible. In some embodiments the metadata fields may be defined to hold descriptions of content files to hold location e.g. geospatial data such as latitude and longitude of a location to which each content file is relevant hold an X Y coordinate pair mapping to an image location to which each content file is applicable hold a date to which each content file pertains and many other metadata types. In some embodiments the metadata may provide additional functionality possibilities such as automatic mapping of content files to locations within a reference image or animation such as a map or calendar as a function of the metadata.

In some embodiments the file detail module or other module may also include one or more user interfaces which may be used to view the contents of the storage device or other local and or remote storage devices. Such user interfaces may be used to view drive folder file type views of the storage devices and allow selection of one or more files to be included in the package file.

The publication module in some embodiments is operative to receive input specifying how to perform one or more functions with an authored package file. The one or more functions may include saving and or distributing the package file. These functions may be accomplished through one or more or a combination of a save module an email module and a document center module .

The save module is operative to present a user interface to save a package file to a storage device such as the storage device . In some embodiments the save module leverages one or more functions of a host application such as application of to store the package file. Such functions may include displaying a user interface providing a drive folder type view to receive input specifying where the package file is to be stored.

The email module in some embodiments is operative to call an email client present on a computing device upon which the package editing module is operating to attach the package file to an email which may then be addressed and sent using the email client. In some embodiments an email client may be present within the email module or may be included within the application of . In such embodiments one or a series of user interfaces may be provided to receive one or more email address of intended recipients a message and the package file. The received input may then be sent via email utilizing a default email server or an email server identified in a configuration setting.

The document center module in some embodiments is operative to publish package files to a location where one or more users may access the document. The location may be a collaboration server. In some such embodiments the document center module is operative to instantiate a collaboration session on a collaboration server and embeds an identifier of the instantiated collaboration session within the package file. The package file may then be stored on the collaboration server. In some such embodiments one or more user interfaces may also be provided to a user to select or enter one or more other users to then receive a notification of the instantiated collaboration session. In some other embodiments after the collaboration session identifier is embedded within the package file the package file may then be distributed via the email module and or stored using the save module . In these embodiments when other users open the package file the application within which the package file is viewed such as a page description language reading application may connect to the collaboration server and download comments and other data and display a representation of some or all of the downloaded data within the package file. The page description language reading application may also allow a viewer of the package file to enter comments or perform other actions such as approving and store data representative of the actions or of the comments to the collaboration server for other users or processes to see and use.

A first page description language document includes content attachments such as one or more content file attachments and metadata for each of the one or more file attachments. The page description language document further includes a presentation specification and navigator data for use by the presentation specification in presenting one or more views of the page description language document . The page description language document further includes a header content item and header data defining how the header content item is to be displayed. The page description language document also includes a welcome content item and welcome data defining how the welcome content item is to be displayed. A welcome content item is generally a first view of the page description language document displayed when the page description language document is first opened. A displayed welcome content item may be thought of as a splash screen in some embodiments.

A second page description language document takes a different form from that of the first page description language document . The second page description language document includes one or more file attachments and each file attachment includes embedded metadata. The page description language document further includes package file presentation metadata which includes a reference to at least a presentation specification and metadata of how the presentation specification is to be instantiated and presented. When the page description language document is opened a suitable application for presenting a view of the page description language document may identify that there is a reference to a presentation specification and obtain a copy thereof from a referenced location such as an Internet or other network location by download. The application for presenting the view of the page description language document may then extract the metadata embedded in each of the file attachments. The presentation specification is then instantiated as a function of the package file presentation metadata and the extracted file attachment metadata.

A third page description language document takes yet another form. The page description language document includes one or more file attachments and metadata for each file attachment. The page description language document also includes a presentation specification and a header content item. The presentation specification will be instantiated as a function of the file attachment metadata. The header content item in such embodiments includes enough information so as not to require further data to instruct it how to instantiate.

Each of the page description language documents includes a different form as described and illustrated. This is not intended to be a listing of all forms that page description language documents that are package files may take. Instead the embodiments in are examples as to the flexible nature of package files.

The presentation specification and elements therein may be defined or configured in metadata. In some such embodiments the presentation specification may include executable code that implements functionality of the particular presentation specification. In some embodiments the code is in a runtime scripting language such as Java Script Visual Basic VB Script Action Script and the like. Such code allows authors to add scripting and code to presentation specifications to implement functionality of various elements. Such code may be executable within an application or application plug in such as the FLASH Player application plug in discussed above or other applications or application plug ins. In other embodiments the code is compiled code writing in a language such as C C capable of implementing the desired functionality which may be accessed and executed within or caused to be executed by an application within which a package file is to be viewed.

In some embodiments the item view animation functions include at least two animation functions. A first animation function is called when user input is received to navigate through item renderer views in a slow fashion such as between two adjacent item renderers. A second animation function may be called when user input is received to navigate through item renderers in a fast manner such as from a first item renderer to a last item renderer or such as when there are large number of item renderers or content files represented by the item renderers.

The presentation specification may also include a crumbs list element that display is a crumbs list within an interface. A crumbs list is a representation of a relative location within a package file. For example a package file may include a first level of content item organization including a file and two file folders. One of the file folders may include a few more files. When viewing the package file content files initially the crumbs list may include text HOME. A user may then select one of the two file folders to cause the files of the selected file folder to display thereby causing the crumbs list to display HOME FOLDER A where FOLDER A is the selected folder.

The presentation specification may also include a file count element that displays a count of a number of files included in a selected view within the item viewer. This count may be a simple count of the number of files. However in some embodiments the count may identify which files of a count of files are currently displayed within the item viewer. For example the file count element may provide FILES of . 

In some embodiments the presentation specification may include a folder label element. A folder label element provides the name of the folder currently being viewed within the item viewer. As with the crumbs list described above in an initial view the folder label element may provide HOME. When folder A is selected for view the folder label element will then provide FOLDER A. 

The presentation specification may also include one or more navigation aids. A navigation aid is an element that provides mechanisms that represent files within a package file that may be selected to navigate to the represented files. Some such representations may include one or more of folders groups of files file types and other logical units that may be provided based on the specific navigation aid included in the presentation specification and the requirements of the specific embodiment. For example one navigation aid may provide icons representative of image files audio files word processing document files and other files. Selection of the image files icon will cause the item viewer to change the view it presents including the instantiated item renderers to a view that includes only image files included within the viewed package file. Another navigation aid may provide a folder view including icons and labels of folders included within a displayed package file that may be selected to navigate to the respective folders. Yet another navigation aid may present a representation of all files included within a displayed package file or displayed folder therein. The package file may include fifteen files and the navigation aid may include an icon for each of the fifteen files. Selection of one or more of the icons in such an embodiment will cause the item viewer to navigate to a view including the file represented by the selected icon. In some such embodiments the icons representative of the files that are currently displayed are modified to indicate that the files represented by the modified icons are currently displayed within the item viewer. Such modification may include an outlining of the icon display of an alternate icon backlighting an icon animating an icon or other modification that will graphically convey the fact that the file represented by an icon is currently displayed within the item viewer.

Some embodiments may also include one or more navigation user interface components such as a tree view type component. In such embodiments the navigation user interface component may provide a tree view of a folder file structure of a package file. In some embodiments the files and folder of a package file may be an export from an email client and include emails arranged in folders such as inbox sent items deleted items and the like. In such embodiments the tree view provides a folder representation of each folder that may be expanded and collapsed to view and hide subfolders. Selection of a tree view item in such embodiments causes the item viewer to display the contents of the folder represented by the selected item.

In yet further embodiments the presentation specification may also include toolbar extras. Toolbar extras may cause a toolbar button to be displayed within a user interface of an application displaying a representation of a package file as a function of the presentation specification . A toolbar extra in one embodiment may be a toolbar button that triggers a process encoded within the presentation specification to import email from an email client or allows a user to select files for inclusion in the package file. A toolbar extra in other embodiments may include a SEARCH button that provides mechanism by which a package file and or content files therein may be searched. In some such embodiments various search options may be provided such as a global package file text search package file type specific searches searches based on types of data included in a package file or content files therein such as CAD related data geospatial metadata dates and other data types. Other toolbar extras may trigger one or more other processes and may utilize code embedded within the presentation specification and or the application displaying the representation of a package file.

The presentation specification also includes authoring controls which may be used when authoring a package file with regard to a presentation specification. The presentation specification includes two modes of display. The first mode is an authoring mode which is optionally viewable within an application providing package file authoring functionality and allows modification of the package file and configuration of the presentation specification . The second mode is a viewing mode and only allows a user to view and navigate through content within a package file.

The authoring controls may include item viewer specific extras general authoring controls and other controls based on the specific presentation specification selected. The authoring controls may provide functional user interface elements that allow a user to add files or references thereto to a package file. The authoring specific extras may allow a user to configure item viewer or item renderer controls such as selecting optional animation functions display sizes metadata to display within an item renderer and other display options. The general authoring controls may include options such as which navigation aids to use or display the setting of icons used in displaying various elements of the navigation aids the navigation user interface component and inclusion and or configuration of the crumbs list folder label file count and toolbar extras. Other authoring controls may be provided based on the elements included within a particular presentation specification that may be selected.

The header is configured in metadata and may include various textual elements graphics audio tracks animations and other media types. In the present embodiment the header includes only text.

The crumbs list element file count element and folder label element illustrate examples of these elements as described with regard to . Note though that the card listing is a listing of cards identified by the FOLDER NAME in both the crumbs list element and folder label element . Further the file count element is a count of the files in the FOLDER NAME folder and identifies which files are displayed.

The cards displayed in the card listing each include a thumbnail image shown as a black box and a description of the file each respective card represents. Selection of a card such as by double clicking with a pointing device will cause the file represented by the card to be displayed such as in the user interface of . In some embodiments a card may represent a folder including further files. In such instances selection of a card that represents a folder will cause the crumbs list element the file count element and the folder label element to be modified to display appropriate data based on the selected folder and the card listing will then display card representative of the files therein. However in some embodiments a folder may be configured with a difference presentation specification and the contents of the folder will be displayed in accordance with that presentation specification.

The card listing is illustrated in an authoring mode. When in the authoring mode the card listing will include a card that allows an author to add a file and add an image to the card of the file. To add a file the author selects the card such as through use of a pointing device or other input device. The author is then presented with one or more user interfaces that may be used to select a file to be packaged in the package file or to attach an image to a card. In some embodiments the card may also allow an author to create a folder. In such instances the author may be allowed to not only create a new folder but also to associate a presentation specification with the new folder.

The card listing when in the authoring mode may also allow a user to drag and drop files and folders from outside of the user interface into the card listing . Folders and files may also be moved around within the card listing in some embodiments. This may include selecting one or more cards and dragging and dropping the selected cards into a displayed folder. The package files represented by the selected cards and the cards themselves are then reorganized to be included in the folder to which the cards were moved. The code to facilitate the authoring mode of the presentation specification may be included in part in the presentation specification to accommodate for specific authoring options and functionality of the presentation specification and within an application within which the package file is being authored such as a page description language authoring application. Such authoring functionality is generally available in each of the presentation specifications described and illustrated herein.

In a display or non authoring mode the add file card is not displayed and the files and folders within the package file may not be reorganized.

The user interface includes a horizontal card listing that may be navigated through by using navigation arrows and . Each card of the horizontal card listing is representative of a file or folder packaged in a package file. Each card may be configured to include various elements that convey what content is included in the file or folder the card represents. The various elements may include text images animation audio and other media types. These elements may be customized in some embodiments through definition of metadata types and entry of the metadata.

In some embodiments the cards of the horizontal card listing are instances of an item renderer instantiated by an item viewer. The item renderer and item viewer are included in the presentation specification as described and illustrated with regard to . In some instances the item viewer includes code or a configuration setting specifying a number of cards to display and then instantiates an item renderer for each of the number cards to display. In such instances the item viewer then instantiates the number of item rendered and populates each instantiated item renderer with metadata of the file to be displayed. For example if the number of cards to display is three the item viewer will instantiate three instances of the item renderer in appropriate locations within the horizontal card listing . The item viewer will then populate the instantiated item renderers with data to be displayed. That data when first presenting a view of the package file may be the data of the first three files in the package file.

Next when a user navigates through the horizontal card listing using the arrows and the item viewer tracks a displayed position within the package files and moves the package file through the instantiated item viewers. Thus three item viewers will be displayed and recycled by moving data sequentially through the item viewers as a user traverses the package files. In some embodiments though a user may wish to jump from files to files . In such instances the item viewer may skip displaying and moving the data of files and jump directly to the data of files .

When navigating through the horizontal card listing the item viewer may animate transitions from one set of displayed cards to another. For example the animation may cause the cards of the horizontal card listing to appear as if they are moving horizontally. If a user jumps such as the jump from files to files a second navigation may blur the horizontal card listing to simulate the displayed cards moving rapidly. Other animations are possible and may be presentation specification specific. However in some embodiments animations may be reused between presentation specifications. In such instances the code and or media to cause such animations may be included as function calls in the application within which the package files may be authored and or viewed.

In further embodiments other elements of presentation specifications may also be included in the application within which the package files may be authored and or viewed. For example item viewer and item renderer abstractions and extensions may be included in the application and called by code or referenced by metadata included within a presentation specification.

The card presentation includes cards as described above. However in some embodiments the cards may be images derived from an image file or other file a respective card represents. The cards of the card presentation are randomly scattered across the card presentation portion of the user interface . In some embodiments the random or a semi random distribution is made according to a set of rules or parameters which may be hard coded within a presentation specification or provided as display options within the presentation specification authoring controls as illustrated and described with regard to . For example such rules or parameters may specify a size of the card presentation area of the user interface a size for each card one or more formulas for calculating a rotation orientation of each card a tilt perspective an opacity of each card whether or not the cards may overlap one another when displayed and other rules or parameters that may affect how the cards are displayed. When a user selects a card within the card presentation the card may be zoomed in on such as is illustrated in .

If a user no longer wishes to view the zoomed card the user may use a pointing device or other input device to signify that intent by selecting an area outside of the card and the card presentation of the user interface will return.

The groups are each represented by a stack of cards. Each card may be representative of a file within a folder of the respective group. Each card may include an image or animation a description and or other data. The cards typically over lap each other except a top card which is fully viewable.

In some embodiments the user interface may also include a navigation aid . The navigation aid provides a groups view similar to that of and . The groups may include hover or selection events as described above with regard to and may be navigated through using the provided navigation arrows. Selection of a group in the navigation aid causes the user interface to navigate to the selected group and display the cards in the horizontal card listing of the group selected in the navigation aid.

Selection of a card in the horizontal card listing such as card may cause another user interface to be displayed as a function of virtually any other presentation specification illustrated and described herein. For example selection of the card may cause the user interface of to be displayed.

In some embodiments the item represented in the user interface is a content item embedded within the package file being viewed. However the content item may be secured and not available for viewing playing or other mode of consumption unless the item is purchased. In such embodiments a user may select the BUY NOW action button provide the requested purchase information through a user interface of the package file such as a user interface generated as a function of another presentation specification or through a web site and then be allowed to consume the content item represented within the user interface .

Thus the series of user interfaces and of and may be configured within one or a group of package files to distribute and present an interactive catalog of products. Some such products may also be included in the one or more package files. Such products included with the package files may include textual documents such as digital books word processing document templates and premium textual content. Premium textual content may include proprietary mailing and contact lists and audio recordings such as audio books music and mobile telephone ringtones. The products may also include video such as movies and television shows and other content which may be included in a secure manner in an electronic file. In some embodiments the package files may be viewed and purchases may be made using a PC a mobile computing device such as a laptop smart phone or handheld computer and other computing devices such as a set top box coupled to a television display monitor or other audio visual device.

Selection of one of the markers may also cause another user interface to launch such as one of the other user interfaces described herein that is generated as a function of the presentation specification. In some embodiments selection of one of the markers may cause a web browser to be launched to display a webpage providing further information or allowing a user to make a purchase that is related to the selected marker such as purchasing tickets to a soccer game or requesting further information with regard to a displayed automobile. In some embodiments selection of a marker may trigger launching of an application such as a FLASH based application that allows a user to make a purchase without departing from the application within which the user is viewing the package file.

In further embodiments selection of a marker may cause another more detailed image to replace the displayed image . For example if the user selects marker UPPER DECK SEATS AVAILABLE the stadium image is replaced with an image of a seating chart of an upper deck seating section of the stadium. This provides a hierarchical option for linking files within a package file similar to that illustrated and described with regard to .

The markers may be placed on the image in an authoring mode by selecting a menu item to add a marker or selecting a file from a listing of files and then placing moving the marker around in a drag and drop fashion. In other embodiments the image may include metadata defining areas of the image. Files embedded within a package file may include metadata referencing one or more locations defined within the image metadata. In such embodiments an item viewer of a presentation specification or other code element in the presentation specification or application for displaying a package file may place the markers on the image as a function of the image metadata and the file metadata.

User interface also includes markers mapped to locations within the animation. For example the illustrated globe animation may include geospatial data defining a latitude and longitude with regard to the animation. The markers may be mapped using metadata defining a latitude and longitude where each respective marker is to be located. In other embodiments regions may be defined with animation metadata and marker locations identified with regard to the defined regions. Such regions may be defined with regard to data represented within the animation such as North America.

When authoring a package file using an animation such as is illustrated in an authoring user interface may be provided that allows an author to select an animation or other image and define reference areas within the animation. For example a simple X Y coordinate structure could be assigned. In other embodiments an interface allowing a user to define regions may be provided. In some embodiments though an animation or other image may be provided in a presentation specification that already includes addressable metadata such as latitude and longitude with regard to a globe or map. In such instances in an authoring mode a user may be presented with a latitude and longitude entry user interface to enter coordinates as to where a marker is to be placed.

In further embodiments markers may automatically be placed within an animation or other image for a content file added to a package file. In such embodiments the file may include metadata defining a location where a marker representative of the file is to be placed. That metadata may define a latitude and longitude coordinate set as described above. The metadata may alternatively identify another location as defined within the metadata of the animation or other image.

In some embodiments each marker may also include descriptive text an animation an audio file or data that may presented upon an event occurrence with regard to a respective marker. For example a marker is located within the animation at a location with regard to North America and a description bubble pops up upon a mouse over event. In another embodiment an audio file could be triggered upon the mouse over event.

In some embodiments selection of a marker or other location within the animation may cause another user interface to display. In some embodiments the other user interface may be related to the area selected within the animation or other image. For example if the animation were a computer aided drafting CAD image or animation an area selected may be a part that is further described in a more detailed CAD file that is identified in the metadata of the one or more CAD files. In such an instance the detailed view of the selected CAD image or animation may be displayed in the user interface or other user interface. In another example embodiment an area of the globe animation illustrated in may be selected. The selected area may be represented in a zoomed in map included in the package file being presented as identified in metadata of the package file or of one or more of the package files. In such an instance the zoomed in map may be presented such as in the user interface of .

The additional user interface elements may include a file count a folder label and other elements superimposed over the image . The additional user interface elements also include a representation of files and folders associated with the selected marker. As illustrated the additional user interface elements include a horizontal card listing as described above with regard to the horizontal card listing of . However package file presentation elements such as are illustrated in may be adapted and or configured to be superimposed over the image in such instances.

Selection of a month within the calendar may cause a superimposing of additional user interface elements upon the calendar as described with regard to . In other embodiments selection of a month may cause the calendar to modify a detail level at which it is displayed to cause days of the selected month to display. Such an example is illustrated in .

The carousel view of the user interface provides an animated view as if the cards are rotating through the display in a circular fashion. A foreground card is displayed centered and largest. A card on each of the right and left sides of the foreground card are displayed smaller and at a rotated perspective to appear as if they are facing in the direction of viewers at different locations. The cards at a next level are displayed smaller yet and appear as if they are facing in the direction of viewers at further different locations. This continues until a total number of cards are rendered by item renderers. The number of cards displayed will typically be an odd number of cards but if the there are fewer content files to be represented than a number of card to display the number of visible cards may be an even number.

In some embodiments the package file options include one or more options such as display options which when configured define elements of one or more presentation specification views. The element of the one or more presentation specification views may include one or more of a cover page or welcome view a header to be included in one or more presentation specification views the content of the header and data identifying a color scheme for at least one presentation specification view.

In some embodiments publishing the package file includes embedding within the package file the content files the presentation specification the defined display elements and associations and other received data specifying the package file options. The publishing may then include storing the package file such as on a local storage device or on a server accessible over a network or distributing the package file via email a collaboration server or via other mechanisms or media.

In some embodiments the presentation specification includes instructions executable within a page description language reader application to cause the presentation specification to be instantiated and displayed within a graphical user interface of the page description language reader application. The presentation specification may further include instructions executable within the page description language reader application to modify an appearance of the displayed presentation specification in response to one or more events.

In some embodiments the executable code embedded within the presentation specification may be further executed to receive in an original view of the graphical user interface input selecting a graphical element representative of a first display element and to zoom in to a larger view in response to the input selecting the graphical element representative of the first display element. The code in some embodiments is further operable to receive a second input to deselect the graphical element of the first display element and to zoom out to the original view.

The presentation specification in some such embodiments includes an item renderer including executable code operable to generate a graphical representation of a display element as a function of the display element metadata. The presentation specification in such embodiments also includes an item viewer including executable code to identify which display elements from the list of display elements to display and to instantiate instances of the item renderer for each display element identified for display. The presentation specification code may be further executable to populate and graphically render the instantiated item renderers with data of the identified display elements. The code of the item viewer may also be further operable to receive navigation input to move through the list of display elements to re identify which display elements from the list of display elements to display as a function of the navigation input and to re populate and graphically render the instantiated item renderers with data of the re identified display elements to be displayed.

In some embodiments the item viewer further includes animation code operable to generate and graphically render a transition animation from a first view of the instantiated item renderers to a repopulated view of the instantiated item renderers following receipt of the navigation input. The item viewer may further include a synchronization code operable to communicate synchronization data to display modules to synchronize a view of the display modules with a view within the item viewer.

In some embodiments the presentation specification also includes one or more navigation aid display modules. Each navigation aid display module may include code operable to generate and graphically render a navigation aid display of a position within the list of display elements of the package file and receive synchronization data from the item viewer identifying at least one display element from the list of display elements displayed within the item viewer. The navigation aid display module may further include code operable to modify the navigation aid display of the position within the list of display elements of the package file as a function of the synchronization data received from the item viewer. The navigation aid display modules also may include code operable to receive input identifying a different position within the navigation aid display to navigate to within the list of display elements displayed by the item viewer and communicate the identified different position to the item viewer as the navigation input.

In some embodiments of the method performed by item renderers the method includes identifying an event occurrence with regard to an instantiated item renderer and modifying a graphical appearance of the instantiated item renderer as a function of the identified event. In some embodiments the identified event may be a received focus event and the modified graphical appearance of the instantiated item renderer is an alternate graphical representation of the instantiated item renderer. In some other embodiments the identified event is a selection of the instantiated item renderer and the item renderer code is further executable to open and display the display element that the instantiated item renderer represents. The selection of the instantiated item renderer may be a selection of a display element representative of a content folder including one or more display elements representative of content file display elements. In some embodiments the item viewer code may be operable to move the item renderer to a background view to identify which display elements from the list of display elements in the content folder to display and to instantiate second instances of the item renderer for each display element identified in the content folder for display. In some embodiments the item viewer code is also operable to populate and graphically render in a foreground view the instantiated second instances of the item renderer.

In some embodiments the view of the presentation specification is presented as a function of at least one media element such as a FLASH animation included within the presentation specification.

In some embodiments the reference content item is an animated image including a map. The map in some embodiments includes geospatial or other location metadata defining addressable locations within the map and the mapping of the first display element to a location within the reference content item is defined in the metadata as geospatial coordinates relative to the geospatial metadata of the map.

In some embodiments of the method the package content item of the first display element is representative of a content item that provides detail information with regard to the mapped portion of the reference content item image. Such embodiments of the method may further include receiving a selection of the first display element within the first display element presented within the presented reference content item and presenting the package content item represented by the first display element within the user interface.

Computer readable instructions stored on a computer readable medium are executable by the processing unit of the computer . A hard drive CD ROM and RAM are some examples of articles including a computer readable medium. The computer readable instructions typically include an operating system and a page description language document reader application which may also include the ability to write page description language documents. The computer readable instructions may also include one or more applications which may be used to create and open content files packaged within page description language documents such as package file and a development tool which may be used to create presentation specifications.

An example of the page description language document reader application is the ADOBE ACROBAT program available from ADOBE SYSTEMS INCORPORATED of San Jose Calif. An example of the development tool is the ADOBE FLEX program that is also available from ADOBE SYSTEMS INCORPORATED. The FLEX program is a cross platform development tool and framework for creating rich applications. Flex may be used to create presentation specifications.

In typical embodiments the computer includes a page description language document such as package file including one or more content files. The package file may be stored in storage held in memory downloaded over the communication connection created using the page description language writer application or created stored or received via another means. The package file in some embodiments may include a presentation specification including a presentation display element for each of the one or more content files. In some such embodiments the page description language reader application is operable to present a view of at least a portion of the package file as a function of the metadata and the presentation specification. The presentation specification when instantiated within a user interface of the page description language reader application may be responsive to actions of a user. The actions of a user may include gestures made within the user interface with a pointing device. The presentation specification in response to a user action may cause one or more content files of the package file to be extracted and representations of the extracted content file to be displayed. Such a package file representation typically includes at least a portion of the associated metadata describing a content file.

In some embodiments the page description language reader application includes one or more default presentation specifications capable of displaying at least a portion of the metadata of package file . For example a default presentation specification when selected by a user such as through a menu option may display data selected from the metadata including file name file size and a last saved date of each content file packaged within a page description language document. In some embodiments a package file may include a reference to a presentation specification for use in displaying at least a portion of the package file. In such instances the presentation specification may not be included. The reference to the presentation specification may be a reference to a presentation specification included with the page description language reader application or provide a reference to a network location such as an Internet location via a URL from which the presentation specification may be downloaded for use. In some embodiments when a presentation specification is downloaded the page description language reader application may cache a copy of the presentation specification so it will not have to be downloaded again should another package file reference the same presentation specification.

In some embodiments the presentation specification when instantiated within the page description language document reader application may invoke one or more methods of a system plug in operable within the page description language document reader application. In some embodiments the plug in may be the FLASH Player plug in available from ADOBE SYSTEMS INCORPORATED.

It is emphasized that the Abstract is provided to comply with 37 C.F.R. 1.72 b requiring an Abstract that will allow the reader to quickly ascertain the nature and gist of the technical disclosure. It is submitted with the understanding that it will not be used to interpret or limit the scope or meaning of the claims.

In the foregoing Detailed Description various features are grouped together in a single embodiment to streamline the disclosure. This method of disclosure is not to be interpreted as reflecting an intention that the claimed embodiments of the inventive subject matter require more features than are expressly recited in each claim. Rather as the following claims reflect inventive subject matter lies in less than all features of a single disclosed embodiment. Thus the following claims are hereby incorporated into the Detailed Description with each claim standing on its own as a separate embodiment.

It will be readily understood to those skilled in the art that various other changes in the details material and arrangements of the parts and method stages which have been described and illustrated in order to explain the nature of the inventive subject matter may be made without departing from the principles and scope of the inventive subject matter as expressed in the subjoined claims.

