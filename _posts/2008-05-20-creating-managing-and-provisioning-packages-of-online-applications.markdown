---

title: Creating, managing, and provisioning packages of online applications
abstract: Methods and computer-readable media are provided herein for implementing custom application programming interfaces (API) for creating, managing, and provisioning packages of online applications. An offer management service API is implemented that provides methods for creating and modifying offers for packages of online applications. An offer provisioning API is implemented that provides methods enabling the provisioning of online applications for subscribers to offers. An application provider API is published and utilized to provision and maintain individual instances of online applications provided by application providers.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09361636&OS=09361636&RS=09361636
owner: Microsoft Technology Licensing, LLC
number: 09361636
owner_city: Redmond
owner_country: US
publication_date: 20080520
---
The market for online application services is continuously growing and evolving. Many applications are available online that are offered on a subscription basis to individuals and businesses. A subset of the available online applications have become ubiquitous and necessary for just about any business such as domain name services DNS email and web hosting. Other online applications are useful to specific types of individuals and businesses like web logs user forums team collaboration sites document management platforms or portal services. In addition many applications traditionally implemented with in house software and systems are now being offered online through the subscription model such as office applications accounting applications and portfolio management services.

Online application service providers may offer packages of specific online applications that target particular types of subscribers. For instance in addition to a standard business package of DNS email and web hosting applications an online application service provider may offer a project management package for companies with individual project teams that adds team collaboration and document management applications or a Blogger package for journalists that includes a web log application. In each of these cases the resources allocated to each application may also be different depending on the target subscriber. For example the project management package may offer subscribers one domain name with up to 100 email mailboxes 20 gigabytes GB of document storage and a 10 megabyte MB website while the blogger package may only include 1 email mailbox but 5 domain names and a 50 MB website.

As conditions in the marketplace or costs of resources change the online application service provider may desire to change the online applications that are packaged within a specific offer or change the level of resources allocated to each online application in the package. These changes may be applied retroactively to all current subscribers to the package or they may only apply to new subscribers. In addition the online application service provider may offer subscribers the ability to add additional resources to each of the online applications in their subscribed package. For example a subscriber to the blogger package may add additional email mailboxes or a subscriber to the project management package may add 20 MB of storage to their website.

The online application service provider may desire to offer a particular package to subscribers for free or allow subscribers a free trial period before converting the subscription to paid once the trial period has expired. Further many of the online applications may be provided by application providers external to the online application service provider. These application providers may specialize in a particular application such as DNS services or offer a particular resource such as online storage. The online application service provider may offer packages to subscribers that include both internally provided online applications and those provided by external application providers.

Technologies are described herein for providing custom application programming interfaces API for creating managing and provisioning packages of online applications. In particular an offer management service API is implemented and made accessible that provides methods enabling the management of offers for packages of online applications. A method is provided for the creation of a new offer. A caller of this method specifies the properties of the offer as well as a list of online applications to be packaged with the offer. The offer and associated list of online applications are stored in an offer store. Another method is provided for modifying the properties of an offer in the offer store including changing the list of online applications packaged in the offer. According to one aspect of the disclosure when the properties or list of online applications for an offer in the offer store are modified each of the online applications packaged in the offer is re provisioned with the new properties for current subscribers to the offer in order to make the changes to an offer retroactive to existing subscribers. A method may also be provided for removing offers from the offer store.

The offer management service API also provides methods for adding and modifying information about each online application that is available for packaging within an offer. A caller of these methods specifies the properties of the online application to be added or modified. The information regarding online applications that are available for packaging in an offer is stored in the offer store. It should be appreciated therefore that the offer management service API allows a caller to manage the application information and also the different bundling of the applications.

According to other aspects presented herein an offer provisioning API is implemented and made accessible that provides methods enabling the provisioning of online applications for subscribers to offers. A method is provided for creating a new account for a new subscriber. A caller of this method specifies the properties of the new account including online applications to be provisioned for the account based upon the offer selected by the subscriber. The account is added to a subscription store. In one aspect of the disclosure each online application packaged in the offer is provisioned immediately upon creation of the account. According to another aspect the provisioning of some of the online applications is deferred until the subscriber first accesses it. Another method is provided for re provisioning a specific online application associated with an account with new property values.

The offer provisioning API further provides a method for disabling a subscriber s account. Disabling of an account includes disabling each online application provisioned for the account. Another method is provided to re enable a disabled account which includes re enabling all online applications provisioned for the account. A method is provided for closing a subscriber account. This includes de provisioning all online applications provisioned for the account and removing the account from the subscription store. A method is also provided for converting an existing account to a new account type. A caller of this method specifies the properties of the new account type to which to convert the account which may include a new list of online applications packaged in a different offer. The account properties are updated in the subscription store and each online application provisioned for the account is de provisioned. In one aspect of the disclosure the process of converting an account further includes provisioning each of the online applications associated with the new offer for the account.

According to further aspects an application provider API is published and utilized to provision and maintain individual instances of online applications provided by application providers. To provision an instance of an online application for an account a method of the API is called to validate whether an instance of an online application can be provisioned with the specified property values. If so then another method of the API is called to provision the instance of the online application and the instance is assigned a unique instance ID. In one aspect presented herein the property values for an instance of an online application such as storage limits or allowed bandwidth consist of a combination of a base value which may be associated with an offer through which the online application is provided and a relative value which is specific to an account and may represent additional resources purchased by a subscriber.

To re provision an instance of an online application with new property values a method of the application provider API is called to validate whether the instance of the online application can be re provisioned with the new property values. If so another method is called to re provision the instance of the online application. Similarly to convert an instance of an online application to another application type a method is called to validate that the instance of the online application can be converted to the new application type and if so an associated method is called to convert the instance to the new application type. Another method of the API is called to de provision an instance of an online application provided by an application provider. According to other aspects presented herein additional methods of the application provider API are called to retrieve user interface UI details for an instance of an online application provided by an application provider. These UI details are utilized to present a UI to a subscriber to allow the subscriber to directly manage the instance of the online application.

It should be appreciated that the above described subject matter may also be implemented as a computer controlled apparatus a computer process a computing system or as an article of manufacture such as a computer readable medium. These and various other features will be apparent from a reading of the following Detailed Description and a review of the associated drawings.

This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter nor is it intended that this Summary be used to limit the scope of the claimed subject matter. Furthermore the claimed subject matter is not limited to implementations that solve any or all disadvantages noted in any part of this disclosure.

The following detailed description is directed to concepts and technologies for creating managing and provisioning packages of online applications with custom APIs. Through the use of the technologies and concepts presented herein an online application service provider may implement an offer management and provisioning system that exposes a comprehensive offer management API that provides for the creation and management of offers for packages of online applications. The API can be accessed and utilized by internal and external software applications to allow sales and support personnel to create an offer for a package of online applications that targets a particular type of subscriber. The offer can include specific online applications with specific resources allocated to the applications as required by the target subscriber. In addition sales and support applications can utilize the API to modify the online applications and resources available in an offer as conditions in the marketplace change such as when new online applications become available or the costs of resources change.

In addition the offer management and provisioning system exposes an offer provisioning API that provides for the provisioning of online applications packaged in an offer for a subscriber. This API is utilized to provision each online application packaged within an offer for new subscribers or to re provision a specific online application with new parameters for an existing subscriber. An online application may need to be re provisioned for example to allocate additional resources purchased by the subscriber or to convert the online application from a free trial to a paid service.

The offer management and provisioning system provisions and manages the online applications for subscribers whether provided by the online application service provider or an external application provider through an application provider API. The application provider API is implemented by the application provider and provides services for provisioning individual instances of an online application. Each instance of an online application is associated with a subscriber in the offer management and provisioning system.

While the subject matter described herein is presented in the general context of program modules that execute in conjunction with the execution of an operating system and application programs on a computer system those skilled in the art will recognize that other implementations may be performed in combination with other types of program modules. Generally program modules include routines programs components data structures and other types of structures that perform particular tasks or implement particular abstract data types. Moreover those skilled in the art will appreciate that the subject matter described herein may be practiced with other computer system configurations including hand held devices multiprocessor systems microprocessor based or programmable consumer electronics minicomputers mainframe computers and the like.

In the following detailed description references are made to the accompanying drawings that form a part hereof and which show by way of illustration specific embodiments or examples. Referring now to the drawings in which like numerals represent like elements through the several figures aspects of creating managing and provisioning packages of online applications with custom APIs will be described.

Turning now to details will be provided regarding an illustrative operating environment and several software components provided by the embodiments presented herein. illustrates a system comprised of an online application service provider server which hosts the offer management and provisioning system . The offer management and provisioning system implements the offer management and offer provisioning APIs described in detail below as well as the underlying functionality required to support the APIs. Data maintained and utilized by the offer management and provisioning system is maintained in the offer subscription data store . While the offer management and provisioning system and data store are illustrated in as executing on a single server it should be appreciated that these components may be distributed across a number of operatively connected servers or computing devices.

The service provider server is operatively connected to a network . Consumers of the APIs implemented by the offer management and provisioning system access the APIs via this network connection. In one embodiment consumers of the APIs may include an offer management application and an offer provisioning application executing on an application server operated by the online application service provider. These applications are accessed by service provider personnel via a web browser executing on a user computer connected to the network . The service provider personnel utilize these applications to create and manage offers for packages of online applications create and maintain accounts for subscribers to the offers and provision the online applications packaged in an offer for a subscriber. In further embodiments consumers of the APIs may include a variety of applications operated internally or externally of the online application service provider and utilized by service provider personnel subscribers or other end users . For example the APIs may be utilized by client applications like MICROSOFT OFFICE from MICROSOFT CORP. of Redmond Wash.

The system as illustrated in also includes individual instances of online applications executing on application provider servers which are connected to the network . As will be described in detail below an online application instance is provisioned and managed for an individual subscriber by the offer management and provisioning system using an application provider API. Once provisioned the subscriber or other end user can access the services of the online application instance over the network via a web browser executing on a user computer also connected to the network . According to one embodiment the network comprises the Internet. However it should be appreciated that the network may comprise a LAN WAN or other type of network suitable for allowing all consumers of the APIs to access the service provider computer . It may be further appreciated that many more networks and network connections may be utilized than illustrated in .

The offer management and provisioning system also includes an offer provisioning service component which provides the functionality required for creating and maintain accounts for subscribers to offers and provisioning the online applications packaged in the offers for the subscribers. The functionality of the offer provisioning service component is made available through the offer provisioning API IOfferProvision and is accessed by the offer provisioning application by calling methods exposed by the IOfferProvision interface . The offer provisioning service component accesses the information about offers from the offer store and maintains information regarding the accounts of subscribers and the online applications provisioned for the accounts in the subscription store .

As will be described in greater detail below in order to provision an instance of a particular online application for a specific subscriber the offer provisioning service component accesses the application service component A B C for the particular online application through the application provider API IApplicationProvider . In addition to provisioning and de provisioning individual instances of online applications the application service component A B C is also responsible for maintaining the state of the online application instances such as enabled disabled de provisioned etc.

In one embodiment the IOfferManagement IOfferProvision and IApplicationProvider interfaces are implemented as SOAP based Web Services which may be accessed by consumer applications through the Internet. It will be appreciated however that a number of technologies or protocols can be used to implement the interfaces disclosed herein. Such protocols include but are not limited to Representational State Transfer REST web services Windows Communication Foundation WCF web services Extensible Markup Language Remote Procedure Calls XML RPC or any other protocol commonly known in the art.

In a further embodiment access to the IOfferManagement IOfferProvision and IApplicationProvider interfaces is controlled by a security mechanism that may limit access to particular methods of the APIs or limit visibility of objects and data in the offer store and subscription store based upon the caller of the API. For example service provider personnel from a particular service provider company accessing the IOfferProvision API may only be able to access accounts in the subscription store originally created by that service provider company or may only be allowed to provision certain offers and or online applications for new subscribers.

According to further embodiments the IOfferManagement interface also exposes an UpdateApplication method as illustrated in the software class diagram which updates an existing online application in the offer store with the desired properties from the specified ApplicationConfig object. The caller of this method first retrieves the ApplicationConfig object for the online application using the FindApplication method discussed below modifies the properties of the ApplicationConfig object as desired and then calls the UpdateApplication method passing the modified ApplicationConfig object to record the changes in the offer store . The IOfferManagement interface further exposes a FindApplication method which retrieves all existing online applications from the offer store that match one or more filter values specified in the ApplicationFilter object passed to the method. Filters that may be specified include application ID include deleted applications etc. The FindApplication method returns an array of ApplicationConfig objects containing the properties of the matching online applications.

As further illustrated in the software class diagram the IOfferManagement interface exposes an AddOffer method according to further embodiments which adds a new offer to the offer store . The desired properties of the new offer including the online applications to be packaged in the offer are specified in an OfferConfig object passed to the method. If the call to the AddOffer method is successful then the method returns an offer ID which may be used to identify the new offer in subsequent method calls. In one embodiment the properties of an offer include the maximum number of instances of each online application that may be provisioned and the base values for any configurable resources required by the online applications. For example to add an offer for a basic business package of online applications including a domain name five email mailboxes with 1 GB of storage each and a 50 MB website the OfferConfig object may be populated with the application ID for the DNS application with the maximum number of instances set to one the application ID for the email application with the maximum number of instances set to five and a base configuration value for the storage resource set to 1 GB and the application ID for the web hosting application with the maximum number of instances set to one and a base configuration value for the storage resource set to 50 MB.

In further embodiments the IOfferManagement interface also exposes an UpdateOffer method which updates an existing offer in the offer store with the desired properties from the specified OfferConfig object. A caller of this method first retrieves an OfferConfig object for the offer using the FindOffer or FindSingleOffer methods discussed below modifies the properties of the OfferConfig object as desired and then calls the UpdateOffer method passing the modified OfferConfig object to record the changes in the offer store . In one embodiment when the properties of an offer are modified by the UpdateOffer method each of the online applications packaged in the offer are re provisioned with the new property values for current subscribers to the offer. This allows the changes to an offer to be applied retroactively to existing subscribers.

The IOfferManagement interface further exposes a FindSingleOffer method as illustrated in the software class diagram which retrieves an existing offer from the offer store having the specified offer ID. The method returns an OfferConfig object containing the properties of the offer if it exists. Similarly a FindOffer method is exposed which retrieves offers from the offer store that match one or more filter values specified in the OfferFilter object passed to the method. Filters that may be specified include a market include base offers only include only current offers only valid offers which are not expired include deleted offers etc. An array of OfferConfig objects is returned by the FindOffer method containing the properties of any matching offers. In a further embodiment the IOfferManagement interface also exposes a DeleteOffer method which deletes an offer from the offer store having the specified offer ID if it exists.

It will be appreciated by one of ordinary skill in the art that the methods illustrated in the software class diagram of represent those necessary for maintaining information regarding the offers and available online applications in the offer store. Many more methods may be exposed by the IOfferManagement interface depending on the capabilities and requirements of the underlying offer management service component . It will be further appreciated that the IOfferManagement interface also exposes the class definitions for objects utilized in calling the methods of the API including the OfferConfig OfferFilter ApplicationConfig and ApplicationFilter classes discussed above. According to embodiments the OfferConfig class may be defined as illustrated in . In addition the ApplicationConfig class may be defined as illustrated in the ApplicationFilter class may be defined as illustrated in and the OfferFilter class may be defined as illustrated in .

According to further embodiments the IOfferProvision interface also exposes a ProvisionAccount method as illustrated in the software class diagram which creates an account for a subscriber in the subscription store and provisions the associated online applications for the account. The desired properties of the new account including the list of online applications to be provisioned for the account the maximum number of instances for each and the configuration values for resources for each are specified in the Account object passed to the method. If the call is successful then the ProvisionAccount method returns a SubscriptionId object which may be used to identify the account in subsequent method calls. In one embodiment configuration values for resources consist of base values and relative values. The base values are supplied from the offer associated with the account while relative values represent additional resources specific to this account. For example a web hosting application may be packaged in an offer which includes a base storage resource value of 20 MB. When an account is created from the offer for a new subscriber the subscriber may desire to add an additional 20 MB of storage to the web hosting application for a total of 40 MB. This is accomplished by specifying a relative value of 20 MB for the storage resource when provisioning the web hosting application for the subscriber in addition to the base value of 20 MB. If the base value in the offer is later changed to 50 MB the web hosting application for the subscriber will be re provisioned with 70 MB of storage representing the new base value of 50 MB and the relative value of 20 MB associated with this account.

In an alternative embodiment some of the online applications associated with the account are not provisioned immediately upon creation of the account by the ProvisionAccount method. Instead provisioning is deferred until the online applications are first accessed by the subscriber. This just in time provisioning allows for more efficient use of resources by application providers. For example an account may include an online backup application which allocates a large amount of file storage when provisioned. When the account is created by the ProvisionAccount method provisioning of the online backup application may be deferred until the subscriber first attempts to access the online backup application. Upon the first attempt to access the application by the subscriber the ProvisionApplication method described below may be called to provision the online application and allocate the resources necessary.

As illustrated in the software class diagram the IOfferProvision interface also exposes a ProvisionApplication method according to further embodiments which provisions a single online application for an existing account identified by the specified SubscriptionId object. The desired properties of the online application to be provisioned for the account are specified in the Application object passed to the method. If the call is successful then the method returns an application instance ID which may be used to identify the instance of the provisioned online application in subsequent method calls. This method may be used when additional instances of an online application are to be provisioned for an account. For example if a particular offer includes web hosting and 10 email mailboxes the web hosting application and one email mailbox application may be initially provisioned for an account created for a subscriber to the offer by the ProvisionAccount method described above . A provisioning caller may call this method to provision an additional email mailbox application for the now existing account. This method could be called for the account once for each of the 9 additional email mailboxes included in the offer.

In further embodiments the IOfferProvision interface also exposes a ReprovisionApplication method which re provisions a single online application for an existing account identified by the specified SubscriptionId object. The desired properties of the online application to be re provisioned for the account are specified in the Application object passed to the method. This method may be used when the property values of the online application are changed such as when the base resource values for an online application packaged in an offer are modified as discussed above in regard to the UpdateOffer method. The IOfferProvision interface further exposes a DeprovisionAccount method which de provisions the online applications provisioned for an existing account identified by the specified SubscriptionId object and removes the account information from the subscription store . Similarly a DeprovisionApplication method is exposed which de provisions a specific application instance provisioned for an existing account identified by the specified SubscriptionId object. The specific instance of the online application to de provision is specified by the application ID and applications instance ID passed to the method. This method may be used when only one online application provisioned for an account is to be de provisioned. For example this method may be called to de provision a particular email mailbox application for an account that has multiple email mailboxes active.

As illustrated in the software class diagram the IOfferProvision interface also exposes a DisableAccount method according to further embodiments which disables the online applications provisioned for an existing account identified by the specified SubscriptionId object. This method may be used to temporarily disable the online applications provisioned for the account without de provisioning them. For example if a subscriber does not pay his subscription fees his account may be disabled until the fees are paid. In addition the IOfferProvision interface also exposes an EnableAccount which re enables online applications provisioned for a previously disabled account identified by the specified SubscriptionId object.

According to further embodiments the IOfferProvision interface exposes also exposes a ConvertAccount method as illustrated in the software class diagram which converts an existing account identified by the specified SubscriptionId object to a new account type. The properties of the new account type are specified in the target Account object passed to the method. This method may be called to move a subscriber to a different offer when the current offer upon which the subscriber s account is based is no longer available or when upgrading the subscriber to an offer that includes additional online applications or new base resource values. A provisioning caller would call the GetAccountTemplate method described above for the new offer to create the target Account object with the properties of the new offer and then call this method to convert the specified account. In one embodiment this method de provisions online applications no longer included in the new offer and re provisions online applications requiring new base resource values but does not provision new online applications for the account. The provisioning caller must call the ProvisionApplication method described above to provision each new online application included in the new offer individually.

The IOfferProvision interface also exposes GetGadgetRendering and GetGadgetResource methods according to further embodiments which requests gadget UI details for a specific instance of an online application identified by the application ID and application instance ID passed to the method. The UI details of the gadget are returned in the GadgetResponse and GadgetResource objects returned by the methods respectively. A gadget is a UI element that can be incorporated into an external application and provides access to and maintenance of parameter values that are unique to a specific online application. For example an online backup service application provided by a particular application provider may allow a user to schedule when backups are to take place and what files and folders of a computer are to be backed up. The offer management and provisioning system may have no awareness of these parameters when provisioning individual instances of the online backup service application for subscribers. If the application provider provides a gadget UI that allows the provisioning caller to adjust these parameters the provisioning of the online backup service application can be accomplished through a single interface. The provisioning caller would call these methods to retrieve the details of the gadget UI in order to implement them into the provisioning interface being displayed to the provisioning user. In one embodiment the gadget details include a combination of HTML CSS and JavaScript which can be rendered inside a web interface to an offer provisioning application .

In further embodiments the IOfferProvision interface also exposes a GetPropertySummaries method which requests resource usage details for a specific application instance provisioned for an existing account identified by the specified SubscriptionId object. The specific instance of the online application for which to retrieve the resource usage details is specified by the application ID and application instance ID passed to the method as illustrated in the software class diagram . This method returns an array of ApplicationPropertySummary objects which contain the configured and currently used values for all application specific configurable resource values for the application instance. For example if a web hosting application is currently provisioned for an account with its storage resource configured with a base value of 20 MB and a relative value of 20 MB and the corresponding website currently utilizes 37 MB of storage an ApplicationPropertySummary object would be returned by the method indicating the storage resource property having a configured value of 40 MB and a currently used value of 37 MB. This information may be used to display the current resource usage and percentage of configured amount for each to a subscriber of the online applications provisioned for his account.

According to further embodiments the IOfferProvision interface exposes a RenameApplication method as illustrated in the software class diagram which renames a specific instance of an online application provisioned for an existing account identified by the specified SubscriptionId object. The specific instance of the online application to be renamed is specified by the application ID and applications instance ID passed to the method. This method may be used to change the name associated with an instance of an online application that is identified by name such as an email application which is identified by the email address or a web hosting application which is identified by its web address URL .

As discussed above it will be appreciated that many more methods may be exposed by the IOfferProvision interface than those illustrated in the software class diagram of depending on the capabilities and requirements of the underlying offer provisioning service component . It will be further appreciated that the IOfferProvision interface also exposes the class definitions for objects utilized in calling the methods of the API including the Account SubscriptionId Application GadgetResponse GadgetRequest GadgetResource and ApplicationPropertySummary classes discussed above. According to embodiments the Account class may be defined as illustrated in . In addition the Application class may be defined as illustrated in the GadgetRequest class may be defined as illustrated in the GadgetResponse class may be defined as illustrated in and the ApplicationPropertySummary class may be defined as illustrated in .

According to further embodiments the IApplicationProvider interface also exposes a ProvisionApplication method as illustrated in the software class diagram which provisions a new instance of an online application at the application provider. This method supports the ProvisionApplication method implemented in the IOfferProvision interface discussed above. The ProviderApplication object passed to the method provides the properties of the online application to be provisioned. The ProviderApplication object includes the unique application instance ID generated by the offer provisioning service component .

As illustrated in the software class diagram the IApplicationProvider interface also exposes a ValidateReprovisionApplication method according to further embodiments which validates that a specific instance of an online application at the application provider can be re provisioned with the specified property values. Just as in the ValidateProvisionApplication method discussed above the offer provisioning service component calls this method before making an associated ReprovisionApplication call. The IApplicationProvider interface further exposes the ReprovisionApplication method which re provisions an instance of an online application at the application provider with new property values specified in the ProviderApplication object passed to the method. This method supports the ReprovisionApplication method implemented in the IOfferProvision interface discussed above.

In further embodiments the IApplicationProvider interface also exposes a DisableApplication which disables an instance of an online application at the application provider without de provisioning it. This method supports the DisableAccount method implemented in the IOfferProvision interface discussed above. The ProviderApplication object passed to the method as illustrated in the software class diagram provides the unique application instance ID of the instance of the online application to be disabled. In addition the IApplicationProvider interface also exposes an EnableApplication method which re enables a previously disable instance of an online application at the application provider. This method supports the EnableAccount method implemented in the IOfferProvision interface discussed above. The ProviderApplication object passed to the method provides the unique application instance ID of the instance of the online application to be re enabled.

According to further embodiments the IApplicationProvider interface exposes a DeleteApplication method which de provisions an instance of an online application at the application provider. This method supports the DeprovisionApplication and DeprovisionAccount methods implemented in the IOfferProvision interface discussed above. The ProviderApplication object passed to the method provides the unique application instance ID of the instance of the online application to be de provisioned. Similarly the IApplicationProvider exposes a RenameApplication which renames an instance of an online application at the application provider. This method supports the RenameApplication method implemented in the IOfferProvision interface discussed above. The ProviderApplication object passed to the method provides the unique application instance ID of the instance of the online application to be renamed. As further illustrated in the software class diagram the IApplicationProvider interface exposes GetGadgetRenderingDetails GetGadgetResource and GetUsage methods that support the GetGadgetRendering GetGadgetResource and GetPropertySummaries methods respectively implemented in the IOfferProvision interface discussed above.

Further the IApplicationProvider interface also exposes the class definitions for the objects utilized in calling the methods of the API including the ValidationResponse ProviderApplication ApplicationProviderGadgetResponse ApplicationProviderGadgetRequest ApplicationProviderGadgetResource and ProviderApplicationUsageSummaryProperty classes discussed above. According to embodiments the ProviderApplication class may be defined as illustrated in . In addition the ProviderApplicationUsageSummaryProperty class may be defined as illustrated in the ApplicationProviderGadgetRequest class may be defined as illustrated in the ApplicationProviderGadgetResponse class may be defined as illustrated in and the ApplicationProviderGadgetResource class may be defined as illustrated in . It will be appreciated by one of ordinary skill in the art that many more methods may be exposed IApplicationProvider interface than those illustrated in the software class diagram of .

Referring now to additional details will be provided regarding the embodiments presented herein for providing custom APIs for creating managing and provisioning packages of online applications. In particular is a flow diagram illustrating an example of creating an offer for a package of online applications utilizing the methods of the APIs described above. It should be appreciated that the logical operations described herein are implemented 1 as a sequence of computer implemented acts or program modules running on a computing system and or 2 as interconnected machine logic circuits or circuit modules within the computing system. The implementation is a matter of choice dependent on the performance and other requirements of the computing system. Accordingly the logical operations described herein are referred to variously as states operations structural devices acts or modules. These operations structural devices acts and modules may be implemented in software in firmware in special purpose digital logic and any combination thereof. It should also be appreciated that more or fewer operations may be performed than shown in the figures and described herein. These operations may also be performed in a different order than those described herein.

The routine begins at operation where an offer management application desires to create a new offer for a basic business package consisting of DNS email and web hosting applications. In the present example the offer is to include one domain name five email mailboxes with 1 GB of storage each and a 50 MB website. For the purposes of this example it is assumed that the list of available online applications in the offer store is empty. From operation the routine proceeds to operation where the offer management application calls the AddApplication method of the IOfferManagement interface to add the DNS application service to the list of available online applications. The details of the DNS application such as the associated application provider and the configurable resource values necessary for the provisioning of that application are specified in the call to the AddApplication method. For example the DNS application services may be provided by a third party application provider such as the domain name registration service REGISTER.COM. In response to the AddApplication method call in operation the routine proceeds to operation where the offer management service adds the information regarding the DNS application to the list of available online applications in the offer store . The AddApplication method returns a unique application ID for the DNS application to the offer management application .

From operation the routine continues to operation where the process described above is repeated for the email application. In operation the offer management application calls the AddApplication method of the IOfferManagement interface to add the email application service to the list of available online applications. The details of the email application may include a configurable storage resource value indicating the maximum amount of storage available to an associated email mailbox. In response to the AddApplication method call in operation the routine proceeds to operation where the offer management service adds the information regarding the email application to the list of available online applications in the offer store . The AddApplication method returns a unique application ID for the email application to the offer management application .

From operation the routine continues to operation where the offer management application calls the AddApplication method to add the web hosting application service including a configurable storage resource value to the list of available online applications. In response to the method call in operation the routine proceeds to operation where the offer management service adds the information regarding the web hosting application to the list of available online applications in the offer store . The AddApplication method returns a unique application ID for the web hosting application to the offer management application .

The routine then continues from operation to operation where the offer management application calls the AddOffer method of the IOfferManagement interface to create the new offer for the basic business package. The details of the new offer such as the online applications to be packaged in the offer the maximum number of instances of each and the base values for any configurable resources required by the online applications are specified in the call to the AddOffer method. In the present example the AddOffer method call at operation would specify the DNS application added above with the maximum number of instances set to one the email application added above with the maximum number of instances set to five and a base configuration value for the storage resource set to 1 GB and the web hosting application added above with the maximum number of instances set to one and a base configuration value for the storage resource set to 50 MB. In response to the AddOffer method call in operation the routine proceeds to operation where the offer management service adds the information regarding the offer to the offer store . The AddOffer method returns a unique offer ID for the basic business package offer to the offer management application . From operation the routine proceeds to operation where the process ends.

By way of further example provide a flow diagram illustrating the provisioning of the online applications packaged in the basic business package offer for a new subscriber utilizing the methods of the APIs described above according to one embodiment. The routine begins at operation as illustrated in where an offer provisioning application desires to create an account for a new subscriber to the basic business package offer describe above in regard to . From operation the routine proceeds to operation where the offer provisioning application calls the FindOffer method of the IOfferManagement interface to retrieve a list of all available offers. In response to the method call the routine proceeds to operation where the offer management service retrieves the list of available offers from the offer store including the basic business package offer and returns the list to the offer provisioning application .

From operation the routine then proceeds to operation where the offer provisioning application selects the desired basic business package offer from the returned list of available offers and calls the GetAccountTemplate method of the IOfferProvision interface to retrieve the account template information used to create a new account for the offer. In response to the method call the routine proceeds to operation where the offer provisioning service retrieves the details of the offer from the offer store including the list of online applications included with the offer along with the maximum number of instances and the base values for any configurable resources for each. In the present example this would include a DNS application with the maximum number of instances set to one an email application with the maximum number of instances set to five and a base configuration value for the storage resource set to 1 GB and a web hosting application with the maximum number of instances set to one and a base configuration value for the storage resource set to 50 MB. The offer provisioning service returns the account template information to the offer provisioning application .

The routine then proceeds from operation to operation where the offer provisioning application adds to the template information returned by the GetAccountTemplate method the information specific to this subscriber such as the identity of the subscriber and any additional resources to be provisioned for a particular online application. For example the subscriber may wish to add 20 MB of storage to the web hosting application for a total of 70 MB of storage. This is accomplished by specifying a relative value of 20 MB for the storage resource along with the base value of 50 MB retrieved in the template information as described above in regard to the ProvisionApplication method.

Once the subscriber specific information is added to the template information in operation the routine proceeds to operation as illustrated in where the offer provisioning application calls the ProvisionAccount method of the IOfferProvision interface with the template information in order to create a new account for the subscriber and provision the online applications for the account. In response to the ProvisionAccount method call the routine proceeds to operation where the offer provisioning service calls the ValidateProvisionApplication method of the IApplicationProvider interface implemented by the application provider associated with the DNS application to validate whether the DNS application can be provisioned for the account with the specified property values. In response to the ValidateProvisionApplication method call the routine proceeds to operation where the application service A of the application provider associated with the DNS application verifies that the DNS application can be provisioned with the given property values. For example the application service A may verify that the desired domain name is available for registration at operation . The application service A method returns a flag to the offer provisioning service indicating whether the DNS application can be successfully provisioned.

From operation the routine proceeds to operation where the offer provisioning service evaluates whether the DNS application can be successfully provisioned based upon the flag returned by the ValidateProvisionApplication method. If the DNS application cannot be provisioned the offer provisioning service in operation returns an associated error to the offer provisioning application and the routine proceeds to operation as illustrated in where the offer provisioning application processes the error accordingly. If the DNS application can be provisioned with the specified property values the routine proceeds to operation in where the validation process is repeated for the email application. The offer provisioning service calls the ValidateProvisionApplication method of the IApplicationProvider interface implemented by the application provider associated with the email application to validate whether the email application can be provisioned for the account with the specified property values. In response to the ValidateProvisionApplication method call the routine proceeds to operation where the application service B of the application provider associated with the email application verifies that the email application can be provisioned with the given property values and returns a flag to the offer provisioning service indicating the result.

The routine then proceeds from operation to operation where the offer provisioning service evaluates whether the email application can be successfully provisioned based upon the flag returned by the ValidateProvisionApplication method. If the email application cannot be provisioned the offer provisioning service in operation returns an associated error to the offer provisioning application and the routine proceeds to operation as illustrated in where the offer provisioning application processes the error accordingly. If the email application can be provisioned the routine proceeds to operation in where the validation process is again repeated for the web hosting application. The offer provisioning service calls the ValidateProvisionApplication method of the IApplicationProvider interface implemented by the application provider associated with the web hosting application to validate whether the web application can be provisioned for the account with the specified property values. In response to the ValidateProvisionApplication method call the routine proceeds to operation where the application service C of the application provider associated with the web hosting application verifies that the web hosting application can be provisioned with the given property values and returns a flag to the offer provisioning service indicating the result.

From operation the routine proceeds to operation where the offer provisioning service evaluates whether the web hosting application can be successfully provisioned based upon the flag returned by the ValidateProvisionApplication method. If the web hosting application cannot be provisioned the offer provisioning service in operation returns an associated error to the offer provisioning application and the routine proceeds to operation where the offer provisioning application processes the error accordingly. If the email application can be provisioned the routine proceeds to operation where the offer provisioning service creates a new account in the subscription store with the template information and the properties of each instance of the online applications to be provisioned for the account. The routine then proceeds from operation to operation where the offer provisioning service calls the ProvisionApplication method of the IApplicationProvider interface implemented by the application provider associated with the DNS application to provision the DNS application for the account with the specified property values. In response to the ProvisionApplication method call the routine proceeds to operation where the application service A of the application provider associated with the DNS application provisions an instance of the DNS application with the specified property values.

From operation the routine then proceeds to operation as illustrated in where the provisioning process is repeated for the email application. The offer provisioning service in operation calls the ProvisionApplication method of the IApplicationProvider interface implemented by the application provider associated with the email application. In response to the method call the routine proceeds to operation where the application service B of the application provider associated with the email application provisions an instance of the email application with the specified property values. The routine then proceeds from operation to operation where the offer provisioning service calls the ProvisionApplication method of the IApplicationProvider interface implemented by the application provider associated with the web hosting application. In response to the method call the routine proceeds to operation where the application service C of the application provider associated with the web hosting application provisions an instance of the web hosting application with the specified property values. The routine then ends at operation .

Referring now to an illustrative computer architecture for a computer utilized in the various embodiments presented herein will be discussed. The computer architecture shown in illustrates a conventional desktop laptop computer or server computer. The computer architecture shown in includes a central processing unit CPU a system memory including a random access memory RAM and a read only memory ROM and a system bus that couples the memory to the CPU . A basic input output system containing the basic routines that help to transfer information between elements within the computer such as during startup is stored in the ROM . The computer further includes a mass storage device for storing an operating system application programs and other program modules which will be described in greater detail below.

The mass storage device is connected to the CPU through a mass storage controller not shown connected to the bus . The mass storage device and its associated computer readable media provide non volatile storage for the computer . Although the description of computer readable media contained herein refers to a mass storage device such as a hard disk or CD ROM drive it should be appreciated by those skilled in the art that computer readable media can be any available media that can be accessed by the computer .

By way of example and not limitation computer readable media may include volatile and non volatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. For example computer readable media includes but is not limited to RAM ROM EPROM EEPROM flash memory or other solid state memory technology CD ROM digital versatile disks DVD HD DVD BLU RAY or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can be accessed by the computer .

According to various embodiments the computer may operate in a networked environment using logical connections to remote computers through a network such as the Internet. The computer may connect to the network through a network interface unit connected to the bus . It should be appreciated that the network interface unit may also be utilized to connect to other types of networks and remote computer systems. The computer may also include an input output controller for receiving and processing input from a number of other devices including a keyboard mouse or electronic stylus not shown in . Similarly an input output controller may provide output to a display screen a printer or other type of output device also not shown in .

As mentioned briefly above a number of program modules and data files may be stored in the mass storage device and RAM of the computer including an operating system suitable for controlling the operation of a networked desktop or server computer such as the WINDOWS XP or WINDOWS VISTA operating systems from MICROSOFT CORPORATION of Redmond Wash. Other operating systems such as the LINUX operating system or the OSX operating system from APPLE COMPUTER INC. may be utilized. It should be appreciated that although the embodiments presented herein are described in the context of a desktop or laptop client computer and a remote server computer many other types of computing devices and systems may be utilized to embody the various aspects presented herein.

The mass storage device and RAM may also store one or more program modules. In particular the mass storage device and the RAM may store the offer management and provisioning system the offer management application the offer provisioning application and the other program modules described above with respect to . Other program modules may also be stored in the mass storage device and utilized by the computer .

Based on the foregoing it should be appreciated that methods and computer readable media for providing custom APIs for creating managing and provisioning packages of online applications are provided herein. Although the subject matter presented herein has been described in language specific to computer structural features methodological acts and computer readable media it is to be understood that the invention defined in the appended claims is not necessarily limited to the specific features acts or media described herein. Rather the specific features acts and mediums are disclosed as example forms of implementing the claims.

The subject matter described above is provided by way of illustration only and should not be construed as limiting. Various modifications and changes may be made to the subject matter described herein without following the example embodiments and applications illustrated and described and without departing from the true spirit and scope of the present invention which is set forth in the following claims.

