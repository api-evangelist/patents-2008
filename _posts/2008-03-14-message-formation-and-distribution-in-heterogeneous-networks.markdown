---

title: Message formation and distribution in heterogeneous networks
abstract: A system is disclosed for communicating with a plurality of network processors, one or more of the processors having a different operating environment, includes receiving an application programming interface (API) call from a user application, the API call including a call address identifying one or more of the network processors; and accessing a memory that identifies an appropriate form for the API call for each operating environment implemented by each network processor identified by the call address; and building one or more messages including the appropriate form for the API call for the operating environment of each of the network processors to receive any particular message.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07940754&OS=07940754&RS=07940754
owner: International Business Machines Corporation
number: 07940754
owner_city: Armonk
owner_country: US
publication_date: 20080314
---
Under 35 USC 120 this application is a continuation application and claims the benefit of priority to U.S. patent application Ser. No. 10 387 847 filed Mar. 13 2003 entitled Method for Message Distribution to a Heterogeneous System all of which is incorporated herein by reference.

The present invention relates generally to messaging in distributed network processing systems and more specifically to message distribution in heterogeneous distributed network processing systems.

CP includes a number of software components. There is a layer of software referred to as the Network Processor Application Services NPAS in CP that provides services to User Applications to control NPs . An application programming interface API exists between the NPAS and the user application. The user application defines programming calls and returns that are used to communicate with the NPAS. A management application learns about each NP through the NPAS. For example the hardware version and the software version of each NP is provided to management application by the NPAS. A user is thereby enabled to know which level of hardware and software exists for each NP .

The NPAS often is divided into multiple components for example a first component a second component and a controller with each of the components controlling a different NPAS function coordinated by control . For example component may control an internet protocol IP function and component may control a multi protocol layer switch MPLS function. The components are often independent but are able to share common utilities within the NPAS.

The components take requests from the user application process those requests build messages based upon the requests and issue the messages to the appropriate NP or NPs. The appropriate NPs are indicated by the application through use of an address parameter in an API call. The address in the address parameter is often the same address used by the switch to direct the messages to the appropriate NP or NPs as it may be a unicast or a multicast address.

In a homogeneous network environment in which all the NPs all have the same or equivalent versions the processing operation of operates satisfactorily. However in a heterogeneous environment in which one or more NPs having a different or nonequivalent version are introduced into the network system a problem can arise. For purposes of this discussion a different version of an NP is having a different hardware level or operating with a different software level as compared to a reference NP. An NP of a different version may require different messages or different message formats or have different functional capabilities as compared to the reference NP. For purposes of this discussion an equivalent version for an NP as compared to a reference NP is one having a different version but the messages the formats of these messages and the functional capabilities are the same for purposes of a particular API call or other relevant metric.

When the versions of the NPs are nonequivalent the NPAS components need to perform different processing and send different messages and or different message formats to various subsets of NPs as a result of a single API call. It is desirable to allow the processing overhead and burdens consequent to heterogeneous networks to be virtually transparent to any user application. What is needed is a solution that a reduces minimizes an impact on current APIs b reduces minimizes an impact on NPAS components c reduces minimizes the number of messages sent through the switch d the components should be independent of a coverage algorithm and e the NPAS components should not have to be aware of the many versions of hardware and or software in the network system. Specifically in a user applications may not be aware of the different versions of the NPs and it is preferable that a user application be able to operate in a heterogeneous system the same as it operates in a homogeneous network and to provide a single address unicast or multicast indicating the entire set of targeted NPs. In b it is not desirable to change the components in the NPAS when one or more NPs with a different version are introduced into a system. In c it is desirable to use multicast whenever possible to distribute the messages in order to minimize switch bandwidth usage. For d it is preferable that any algorithm used for determining the messaging subsets should be a common utility or function shared by all components. And e it would be advantageous that any additions of a new version NP not necessitate any change to any NPAS component.

Accordingly what is needed is a method and system for providing transparent NP messaging in a heterogeneous network. The present invention addresses such a need.

A system and method is disclosed for communicating with a first network processor having a first operating environment and a second network processor having a second operating environment different from the first operating environment. The system includes a destination management service DMS including a memory the memory registering a an application programming interface API call and recording an associated operating environment supporting the API call b a messaging method appropriate for the API call in each operating environment c a unicast address for each of the network processors and the operating environment for the network processor at each unicast address and d a multicast address including the unicast addresses for the network processors and a network processor application service responsive to the API call from a user application identifying one or more network processors using a call address the call address including the multicast address of one of the unicast addresses for passing an identifier for the API call and the call address to the destination management service and for receiving a set of messaging methods for issuing the API call in appropriate form for the one or more operating environments implemented by the network processors addressed by the call address. The method for communicating with a plurality of network processors one or more of the processors having a different operating environment includes receiving an application programming interface API call from a user application the API call including a call address identifying one or more of the network processors and accessing a memory that identifies an appropriate form for the API call for each operating environment implemented by each network processor identified by the call address and building one or more messages for the network processors identified by the call address each of the one or more messages including the appropriate form for the API call for the operating environment of each of the network processors to receive any particular message.

Process performs a registration step when the NPAS software is initialized. Each NPAS component registers with DMS. The NPAS component registers each API call within the component with the set of versions supported by the specific API call. Also indicated during the registration are the messaging methods required to process those versions. Versions are grouped as ranges so that all versions are not enumerated

After registration step message distribution process performs another registration step . Registration step is performed during application initialization in which the user management function registers with the DMS all the unicast addresses in the system giving the version number associated with the NP at that address.

After registration step message distribution process performs another registration step . Registration step is also performed during application initialization in which the user management application registers with the DMS all the multicast addresses in the system and provides the unicast addresses that make up the multicast set.

Thereafter message distribution process at API step includes an NPAS component receiving a request from an application. This request is an API call and includes a unicast or multicast address as a parameter.

At invocation step the NPAS component receiving the API call invokes the DMS by passing it the API call or an identifier to the API call and the destination address from the API call parameter.

In response to invocation step message distribution process executes DMS process . DMS process computes a preferred optimal set of messages that must be sent to achieve the result requested in the original API. DMS process also associates the proper messaging method for each message in the message set and returns the message set and methods to the NPAS component that invoked the DMS. It is believed that there are different ways of computing the message set and associating the methods with the messages each may be preferable in a various scenario or specific embodiment. The present invention contemplates that each of these ways may be used in the preferred embodiment. DMS process does consider the various versions of the NPs included within the destination address when computing the message set and methods to return.

After DMS process step message distribution process processes the API call at step . The NPAS component that receives the message set and associated messages processes the API call by using the messages of the message set using the messaging methods prescribed by the DMS and sends the messages to the addresses also identified by the DMS .

CP includes a number of software components. There is a layer of software referred to as the Network Processor Application Services NPAS in CP that provides services to User Applications to control NPs . An application programming interface API exists between the NPAS and the user application that defines programming calls and returns used to communicate with the NPAS. A management application learns about each NP through the NPAS. For example the hardware version and the software version of each NP is provided to management application by the NPAS. A user is thereby enabled to know which level of hardware and software exists for each NP .

The NPAS often is divided into multiple components for example a first component a second component and a controller with each of the components controlling a different NPAS function coordinated by destination management service DMS . For example component may control an internet protocol IP function and component may control a multi protocol layer switch MPLS function. The components are often independent but are able to share common utilities within the NPAS.

The components take requests from the user application process those requests build messages based upon the requests and issue the messages to the appropriate NP or NPs. The appropriate NPs are indicated by the application through use of an address parameter in an API call. The address in the address parameter is often the same address used by the switch to direct the messages to the appropriate NP or NPs as it may be a unicast or a multicast address.

Although the present invention has been described in accordance with the embodiments shown one of ordinary skill in the art will readily recognize that there could be variations to the embodiments and those variations would be within the spirit and scope of the present invention. Accordingly many modifications may be made by one of ordinary skill in the art without departing from the spirit and scope of the appended claims.

