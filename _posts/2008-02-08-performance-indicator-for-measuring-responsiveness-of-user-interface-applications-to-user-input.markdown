---

title: Performance indicator for measuring responsiveness of user interface applications to user input
abstract: A method for measuring application responsiveness measures the time elapsed between receiving and processing a trailing tag message inserted into the application's message queue. The method receives a message, generates a trailing tag message associated with the message, and inserts the trailing tag message into the application's message queue. The trailing tag message includes a timestamp indicating when the trailing tag message was queued. A default message handler calculates the time elapsed between when the trailing tag message was queued and when the trailing tag message was processed. The elapsed time may then be used to calculated system responsiveness.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08856804&OS=08856804&RS=08856804
owner: Microsoft Corporation
number: 08856804
owner_city: Redmond
owner_country: US
publication_date: 20080208
---
A graphical user interface GUI is a means of controlling a computer application through the use of icons buttons and pointers. The user of a GUI typically uses a computer mouse and keyboard to submit commands to the desired application. In response to these commands the application typically performs some processing and may optionally update the computer s display. Responsiveness is measured by how much time it takes for the computer to process the user command otherwise known as the message. Responsiveness is an important consideration in measuring the usability of a GUI application and in determining the usability of a computer system as a whole. Measuring the usability of a computer system is desirable diagnose and potentially prevent a poor user experience.

Measuring application or system wide responsiveness has traditionally been achieved by one of two methods. The first method is to gauge responsiveness indirectly by measuring CPU usage disk I O throughput memory usage network bandwidth or other hardware usage indicators. Once certain thresholds are crossed insufficient resource levels may indicate a decrease in overall system performance and consequently a decrease in responsiveness. This method is flexible because it does not require application specific knowledge. However this method does not actually directly measure responsiveness and therefore is an inaccurate and unreliable.

The second method of measuring application responsiveness is to gauge responsiveness of known functions performed by known applications in response to a known user input. This is achieved by measuring the time elapsed between a known input is received and the corresponding result is displayed. While this method measures actual response time the method is application specific making it difficult to generalize. For example by knowing that the key sequence ctrl f will cause a word processing application to display a find dialog box it is possible to measure the time elapsed between the ctrl f and when the resulting find dialog box is displayed. However a web browser application may respond to the same ctrl f input with a different find dialog box that might not be found or no dialog box at all. In either case knowledge of the word processor application is application specific and does not enable measuring responsiveness of any other application. Because this method of measurement requires knowledge of application specific semantics it is cumbersome expensive and must constantly be updated as new applications are released.

Unfortunately developing application specific measures of responsiveness increases the cost and complexity of measuring system wide responsiveness and it would be impractical to implement application specific measures for all existing and yet to be developed applications. Also measuring system wide application responsiveness indirectly by measuring available system resources is inaccurate.

A system and method for measuring application responsiveness measures the time elapsed between inserting a trailing tag message into a message queue and processing the trailing tag message in a default message handler. In one implementation the method receives a message generates a trailing tag message associated with the message and inserts the trailing tag message into the applications message queue. The trailing tag message may include a timestamp indicating when the trailing tag message was queued. A default message handling function processes the trailing tag message measuring the time elapsed between when the trailing tag message was queued and when the trailing tag message was processed. Because responsiveness of all messages from all applications is measured no application specific knowledge is required to measure overall system responsiveness. Additionally because responsiveness is being measured and not a proxy of responsiveness this method may be reliably used in production environments.

This disclosure is directed to measuring responsiveness of user interface applications to user input. In some of the described implementations responsiveness is calculated at least in part by measuring the time it takes to process a trailing tag message inserted into the application s message queue. A trailing tag message is created and associated with a message such as a window message generated by a keyboard or mouse action. The trailing tag message is inserted into the application s message queue after the corresponding message has been inserted. The trailing tag message may include a timestamp to indicate approximately when the message was queued. After the message is processed the associated trailing tag message will be processed by a default message handler. The default message handler will calculate the time elapsed from the insertion of the trailing tag message into the application message queue until the processing of the trailing tag message. This elapsed time will closely approximate the time it took for the message to be processed. The time in which the message was processed includes the time elapsed waiting in the application message queue and the time elapsed as the application processed the message. This elapsed time is indicative of system responsiveness reflecting generally how long the system currently requires to process a message and to display a result.

In some embodiments the system that calculates application response time is a terminal server. A terminal server may support an arbitrary number of remote desktop clients limited only by available system resources. Allowing too many remote desktop client connections will degrade the terminal server s responsiveness resulting in a poor user experience. On the other hand artificially limiting the number of remote desktop client connections underutilizes costly system resources. Therefore there is a need to accurately measure system responsiveness across one or more remote desktop client sessions.

Messages may originate from a remote desktop client or from a local console. In one embodiment the system being measured may support multiple concurrent users each running a remote desktop client. Response times from all applications running on the system may be averaged into a system wide application response time. A computer administrator may monitor changes to the average system response time. The computer administrator may optionally determine an optimal number of remote desktop client users based on this information.

In one embodiment the user launches a remote desktop client application on the client computer and initiates a remote desktop connection to the terminal server . The user then launches an application located on the terminal server and begins to control the application by sending a message to the terminal server . This message may comprise key press messages button click messages or mouse move messages among other window messages as described in detail below. The message may be a user input message an application input message or a message that s primary purpose is to trigger the system responsiveness measuring mechanism.

A client view of the application is displayed by the remote desktop client application on the client computer . An input handling module integral with or accessible by the terminal server receives the message . The input handling module then generates a trailing tag message and queues the trailing tag message in an application message queue associated with the application . The trailing tag message may comprise a probe message. Note that the created trailing tag message may indicate a time at which this message was created and or queued.

The application meanwhile processes any existing messages in the application message queue up to and including the message . The application then receives the trailing tag message from the application message queue . The application invokes a default message handler to process the trailing tag message . The default message handler calculates the time elapsed between the creation of the trailing tag message and or when the message was queued by the input handling module and the processing of the trailing tag message by the default message handler . This elapsed time measures the time consumed by the terminal server responding to the message . User operating additional client computers and may connect to the terminal server and initiate remote desktop client applications consuming system resources and increasing system response time. As such knowledge of system responsiveness helps to determine when a terminal server may accept additional remote desktop connections while maintaining a high level of usability.

Upon receiving the message from the remote desktop client application the terminal server forwards the message to the terminal server session . If there is more than one terminal server session active on the terminal server the message is forwarded to the terminal server session associated with the remote desktop client application that sent the message. The terminal server session then forwards the message to the input message detection module . Upon receiving the message the input message detection module queues the message in the application message queue of application . Once the message has been inserted into the application message queue the trailing tag creation module creates the trailing tag message . Note that while in the described implementation the trailing tag message is created on demand in other implementations this message may already be created and may simply be placed into the application message queue in response.

Here the trailing tag message includes or is associated with a time stamp which stores the time at which the trailing tag message was created. In another embodiment the time stamp contains the time the message was queued. In one embodiment the trailing tag message is queued in the application message queue immediately following the message . The proximity of the trailing tag message and the message enables the default message handler to measure how long application took to process the message once queued.

Once queued the message and the trailing tag message wait until the application processes all of the previously queued messages. Each message in the application message queue is removed from the queue in the order in which it was inserted so called First In First Out FIFO . Each message in turn is processed by an application message handler integral with or accessible by the application . In one embodiment the application message handler is a window procedure. The application message handler may not be programmed to process all types of messages. If a message is not processed by the application message handler the message is passed on to the default message handler for processing. In one embodiment certain messages called system messages should rarely or never be processed by an application message handler. Instead these messages should usually or always be forwarded to a default message handler to be processed. In one embodiment the trailing tag message is a system message and hence passes through to the default message handler .

Once all of the previously queued messages have been processed by the application message handler or the default message handler the message is dequeued and processed. Processing the message may include updating an application display . Processing may cause the client view of the application to synchronously update. In another embodiment processing the message does not include updating the client view of the application on the client computer . In this embodiment updates to the application display occur locally within the application network latency is not measured. In this embodiment the terminal server session will independently transmit the updated application display to the remote desktop client .

For example if the message indicated a button had been pushed the application display would be updated to reflect the pushed state of the button. This update to the application display may occur entirely within the terminal server . In this embodiment the remote desktop client application will receive an update reflecting the change in the application display . The time required to transmit this update may not be considered. This described embodiment measures responsiveness of the server rather than the responsiveness of the network over which the commands are sent. In other embodiments updates to the application display are synchronously transmitted from the terminal server to the remote desktop client . In this embodiment the time required to transmit the update often is included in calculating responsiveness.

Once the message has been processed the trailing tag message is dequeued by the application message handler . The application message handler determines that the trailing tag message is a system message and invokes the default message handler for processing. In one embodiment the default message handler calculates the elapsed time by subtracting the time stamp from the current time. In one embodiment the elapsed time is transmitted to the performance counter . The performance counter stores the elapsed time and aggregates the elapsed time with elapsed time values originating from other applications in the session. Optionally average elapsed time values for each session may be calculated or all elapsed time values from all sessions may be averaged across the entire system.

In one embodiment the default message handler is a default window procedure. Additionally the default message handler may be the same default message handler shared by many or all applications running in multiple or all terminal server sessions on the terminal server . The universal nature of the input handling module and the default message handler ensure that all messages are followed by trailing tag messages and that all trailing tag messages are processed. As such responsiveness of substantially all or all messages is measured. The universal nature of the default message handler and the input handling module enables one embodiment to measure responsiveness in some applications or all applications independent of particular application semantics.

With the environment devices and timeline of in mind depicts an illustrative process for measuring application responsiveness to user input. At an operation the terminal server receives the message from the client computer in response to some input from the user . At an operation the terminal server stores the message in the application message queue . At an operation the application message queue receives and queues the trailing tag message . At an operation the default message handler calculates the time elapsed between when the trailing tag message was queued and when the trailing tag message was processed by the default message handler. This elapsed time is used to approximate the time elapsed from when the application input message was received by the terminal server and when processing of the application input message was complete.

At an operation the application message queue of the application stores or queues the message . The trailing tag creation module generates the trailing tag message including a timestamp and at an operation queues the trailing tag message into the application message queue . The timestamp included in the trailing tag message may indicate when the trailing tag message was queued in the application message queue . In one embodiment the trailing tag message is queued immediately after the message . At an operation at least one message in the message queue is processed. At an operation the trailing tag message is processed by the default message handler . At an operation the default message handler calculates the time from when the trailing tag message was received by the application message queue and the time when the trailing tag message was processed by the default message handler .

Although the invention has been described in language specific to structural features and or methodological acts it is to be understood that the invention defined in the appended claims is not necessarily limited to the specific features or acts described. Rather the specific features and acts are disclosed as exemplary forms of implementing the claimed invention.

