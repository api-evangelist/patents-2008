---

title: Generating a front end graphical user interface for a plurality of text based commands
abstract: A method, computer program product, and system are disclosed for generating a graphical user interface (GUI) for a plurality of text based commands, in which environment mapping definitions may link generic GUI components with predefined command structures. The plurality of text based commands may be command-line interface (CLI) commands. The environment mapping definitions may be applied to a command specification defining characteristics of the plurality of text based commands in a standard format in order to build a GUI from generic GUI components. The command specification may be generated by providing an interpretation reference defining CLI conventions and parsing a command description to extract the command specification with reference to the interpretation reference.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08954869&OS=08954869&RS=08954869
owner: International Business Machines Corporation
number: 08954869
owner_city: Armonk
owner_country: US
publication_date: 20081216
---
This application claims priority under 35 U.S.C. 119 to European Patent Application No. 07301684.2 filed Dec. 17 2007 the entire text of which is specifically incorporated by reference herein.

The various embodiments described herein relate to the automatic generation of a front end graphical user interface GUI for a given command line interface CLI .

Command line interfaces CLIs are a common means for enabling human machine interaction and are particularly useful for issuing instructions to computers or similar machines.

With CLIs a sequence of commands may be executed in a safe and repeatable way. All commands are written in a script and may be fully tested. All storage specific scripts may be included in the classical application scripts and be executed automatically from servers.

CLIs are generally easier to use if a user can remember or easily find the commands and options which generally is the case if they are frequently used or when full documentation is available. To facilitate generation of CLI commands a front end GUI may be created so that a user may select commands and may flag options via a menu in order to generate one or more clean commands. Without a front end GUI syntax errors or other errors are more likely.

Flags modify the command. They provide additional information that directs the CLI to perform the command task in a specific way. For example the v flag tells the CLI to display the command results in verbose mode. Some flags may be used with every CLI command. Others are specific to a particular command and are invalid when used with other commands. Flags are preceded by a hyphen and may be followed immediately by a space and a flag parameter.

Flag parameters provide information required to implement the command modification that is specified by a flag. For example the user flag requires a user name parameter and the passwd flag requires a password parameter. Flag parameters are variables their values change to meet specific needs. Not all flags require parameters. In such case the flag itself provides all of the necessary information. Some flag parameters are optional. Moreover some flag parameters may allow the use of multiple values. Such multiple values must be separated with a comma with no white space between the values.

In the example the flag volume is using multiple flag parameters which are the comma separated 2000 5000 5001.

In the example mkpprcpath is the command name wait dev remotewwnn remotedev srclss tgtlss and consistgrp are command flags and yes and no are the only valid flag parameters for the wait flag. IBM.2107 75L3221 is the flag parameter for the dev flag. The consistgrp flag does not have a corresponding flag parameter. I000 I010 I010 I011 is a list of command parameters without flags.

These flags and parameters are not straightforward and thus many errors may arise if the command is built manually. The objective of the various embodiments described herein is to reduce such errors by providing a structured file and a program parsing such file so that a GUI generating commands flags and parameters may be built.

For example all of the well known disk bays and related software listed in Table 1 use CLI commands to configure and monitor storage for servers.

However each CLI is different using commands and flags in many ways to accomplish the common tasks of creating volumes and assigning such volumes to servers. Thus according to known implementations each time one decides to use a new storage box it is necessary to learn and use a new language.

In certain cases a front end GUI i.e. graphical front end is available to offer a graphical interface to the underlying CLI. Examples include easy dscli Front End GUI for DS8000 DS6000 DS CLI or Scripting Tools for SAN Volume Controller.

In the IT industry generally front end GUIs are available for some command line programs. An example is kdesu which is a graphical front end for the su i.e. substitute user command in UNIX. Likewise kcron is a graphical front end to cron which is a command line program used to schedule tasks. Perhaps the most famous tool is the System Management Interface Tool SMIT for Advanced Interactive executive AIX administration AIX is a series of operating systems developed by IBM .

While front end GUIs offer certain advantages in terms of usability they are also associated with certain problems. One problem with front end GUIs is that they frequently lack the versatility and fine grained control of their underlying command line programs. Specifically they have limited options for modifying the behavior of commands and cannot be combined with other commands using pipes pipes allow commands to perform highly specialized tasks that otherwise would be very difficult to perform . Moreover front end GUIs generally attempt to hide the finally executed CLI command and as a result the end user is unable to reuse the same action in autonomous scripts. Another drawback is that a front end GUI must be completely redesigned and recreated for each CLI and a classical end user generally will not have the capability of adding new commands or new flags and options to the front end GUI.

A number of responses to these issues have been suggested. U.S. Publication No. 2003 0074636 relates to a method for generating GUIs from Document Type Definition DTD files. DTD files are used to express a schema that describes a document or a portion of a document. A DTD file for which a GUI is to be generated is parsed to identify the different elements present in the DTD file. The elements identified are represented in the form of a binary tree like data structure. The binary tree like data structure is used at run time to quickly generate the GUI. The generated GUI may be used by a user to enter data.

U.S. Pat. No. 5 812 851 relates to a method and system for dynamically loading compiler back ends for variable compilation outputs. The system as disclosed includes a generic back end that is capable of interacting with a number of independent back ends that are loaded at run time. The independent back ends create their own back end tree that is adapted to the outputs of the generic back end. The system further includes a front end that produces an abstract syntax tree from an input source code file. The generic back end provides an interface for communication between the front end and each individual back end.

U.S. Publication No. 2005 0010901 relates to method for generating a GUI. A code corresponding to each GUI element is stored. The GUI elements may include text boxes dropdown boxes check boxes radio buttons etc. When a request from a user system for a specific GUI element is received along with certain parameters the corresponding code is used to generate a generic version of the GUI element requested. The generic version of the GUI element then is modified based on the parameters passed on by the user system.

The article Domain Independent Visual XML Editor Version 1.2 by J rg Schummer Tayyab Zaheer Wenfeng Liu Ahmer Iqbal Jari Kivel and Juuso N si relates to a Domain Independent Visual XML Editor. The Domain Independent Visual XML Editor provides functions that XML users may use to generate a GUI directly from the XML schema. In the event that the XML schema is not available it may be extracted from XML document itself. The Domain Independent Visual XML Editor generates a graphical representation of the XML schema which is used by a user to interact.

The article Web based XML Editing with W3C XML Schema and XSLT Source http www.xml.com pub a 2003 04 30 editing.html by Ali Mesbah and the article Transforming XML Schemas Source http www.xml.com pub a 2003 01 15 transforming schemas.html by Eric Gropp relate to a method for editing a XML instance document through an automatically created form based GUI based on the schema of the XML instance document. The schema information is available in a XML Schema Definition XSD document. The method as disclosed creates an input field in the GUI corresponding to each element in the XSD document.

A method for generating a graphical user interface GUI for a plurality of text based commands a method for generating a command specification defining characteristics of a plurality of text based commands a computer program product comprising instructions for carrying out the method for generating a GUI and a system adapted to implement the method for generating a GUI are provided in the appended claims.

The method for generating a GUI may comprise applying environment mapping definitions to a command specification defining the structure of the plurality of text based commands in a standard format wherein the environment mapping definitions may link generic GUI components with predefined command structures. Additionally the method may comprise building the GUI from the generic GUI components via an interface generator. Furthermore the method may comprise using a list of instructions to parse a description file which is at least partially based on the command specification in order to retrieve components and or structures of the plurality of text based commands. The environmental mapping definitions may map the predefined command structures onto the GUI components or vice versa. The predefined command structures may comprise arguments and such arguments may comprise one or more command flags flag parameters command parameters and or sub parameters. The GUI may account for all structures of the plurality of text based commands.

The command specification may be modified e.g. as necessary or as desired by a user . The plurality of text based commands may be command line interface CLI commands. The command specification may be a flat file. Moreover the command specification may be a XML file. Furthermore the command specification may be a relational database. The command specification may define characteristics of multiple commands and it may define the relationship between each of the multiple commands and the relationship between flags and parameters in each of the multiple commands.

The method for generating the command specification may comprise providing an interpretation reference defining CLI conventions and parsing a command description to extract the command specification with reference to the interpretation reference. The command description may be human readable. Furthermore the command description may be a help file or a help file extract.

Further advantages of the various embodiments described herein will become clear to the skilled individual upon examination of the drawings and detailed description. The various exemplary embodiments are not meant to limit the scope of the disclosure and thus it is intended that any additional advantages in accordance with the disclosure be incorporated herein.

The command specification may define according to a standard predefined format all of the characteristics that define the command or commands in the case where the command specification defines multiple commands . Such characteristics may comprise the command name or command names the command flags and flag parameters belonging to such flags and one or more command parameters belonging to the command or commands. The parameters may be followed by any sub parameters that may be required. The command specification should contain all necessary information concerning command syntax and structure so that valid commands may be compiled solely on the basis of the information contained therein.

The skilled individual will appreciate that the usual palette of generic GUI components may provide a range of components each suitable for embodying different aspects of a command structure. For example radio buttons may enable the exclusive selection of a single element from a short list of possibilities. Moreover check boxes may enable the selection of one or more elements from a short list of possibilities or may indicate that a single option is or is not required. List boxes or drop down lists may be suitable for selecting elements from a larger number of possibilities and generally may be configured to enable a single selection or a plurality of selections. Text boxes may be used to receive character input from a user and may be configured to accept text in a particular format a particular number of characters etc. Code may be provided to check input characters against certain required criteria. Buttons may be used to trigger specific events such as the clearing of selections already made the submission of selections access to a subsidiary part of the interface etc. Tabs may allow the grouping of different user interface components e.g. according to theme or function so that the user may conveniently access related interface components. The skilled individual familiar with the various GUI components in common use will readily appreciate their respective suitability for the realization of different command features.

According an exemplary embodiment the GUI may comprise a user interface that allows end users to interact with programs or computer controlled devices e.g. by means of generic GUI components. Such GUI components may comprise graphical icons visual indicators or special graphical elements called widgets popup windows or scrolled windows and or text labels or text navigation to represent the information and actions available to a user. User interaction may be captured in any suitable manner as may occur to the skilled individual such as via direct manipulation of the graphical elements or via using conventional input devices such as a mouse keyboard touch screen trackerball joystick etc.

In accordance with an exemplary embodiment the environment mapping definitions may define for the environment in which the GUI is to be used which generic GUI components are available in such environment and which GUI component is to be used for command components satisfying certain criteria. The environment mapping definitions may define a generic GUI component or combination thereof for every conceivable command component. The environment mapping definitions also may provide configuration details or accompanying code to modify the behavior of certain generic GUI components so that they correspond to the particular requirements of a given command. For example if a command allows the definition of up to three alternative routing mechanisms from a list of ten the environment mapping definitions may specify the use of a multiple selection dropdown list which may be further modified or configured to allow no more than three selections. According to an exemplary embodiment code libraries for the generation of GUI components may be defined as a part of the command interface module specifically for use in generating command interfaces. Moreover the shared code libraries associated with the local operating system may be identified by reference in the environment mapping definitions via application programming interface API calls or the like.

The skilled individual may imagine numerous possible mappings of different command structures onto generic GUI components or numerous possible mappings of generic GUI components onto different command structures . For example the GUI may comprise menus structured by command families with one line per command. Popup windows may be used to change the value for each flag. Values may be presented in drop down lists and the like. The mappings may be defined in the environment mapping definitions and the command specification may be fed into the environment mapping definitions to be processed according to the same principles leading to a recognizable look and feel to interfaces produced by the environment mapping definitions . User interaction with the GUI may produce a complete command string output i.e. output command string ready to be executed against a target system e.g. a command line interpreter . The command line interpreter may be a text terminal terminal emulator remote shell client etc.

The interface generator may be capable of optimizing the generated GUI so as to fit all interface elements onto the available display surface in as ergonomic manner as possible. This may require that the interface generator retrieve data concerning issues such as display resolution from the local operating system etc.

The GUI may be generated in real time whenever required. Accordingly any modifications e.g. updates to the command specification may change the behavior of the GUI and the resulting command string output may comprise flags and parameters according to the new command specification .

Similarly the GUI may be continuously or repeatedly updated substantially in real time on the basis of the command specification and accordingly any modifications to the command specification may be reflected immediately in the GUI .

The GUI may be implemented via a list of instructions in any suitable programming language e.g. Java C Perl etc. that is able to parse a description file which may be at least partially based on the command specification in order to retrieve the components and or structures for the command or commands at issue interact with the end user using a GUI and build the full command line with all required flags flags parameters and command parameters.

The command specification may be derived via a number of different approaches. For instance as illustrated in the command specification may be derived primarily from user interaction i.e. user input with the command processing module . The user interaction may be driven by an interface definition dialog forming part of the command processing module .

The interface definition dialog of the command processing module may drive the user interaction step by step in the process of deriving the command specification . The user may determine the default choice for the flags etc. The command specification may be updated easily to introduce e.g. new commands or new flags for a specific command via the interface definition dialog . The interface definition dialog may process the user interaction and any relevant stored data to generate a new command specification for use by the command interface module as described herein.

During operation of the command interface module all output command strings may be stored in a log file and or may be displayed in a log window not shown . During execution all return messages similarly may be stored in the log file or elsewhere in order to facilitate reusability of the output command strings .

In many environments formalized representations of available commands exist. Such formalized representations may specify many if not all of the available parameters flags etc. for available commands. Moreover such formalized representations generally may specify which elements are required and which are optional what format the input must take what values will be applied by default etc.

Consider the DS CLI command line interface referred to in Table 1 herein refer to the website document referenced in Table 1 with respect to the DS CLI entries . Consider for example the lsextpool command for the DS CLI has the function of displaying a list of extent pools in a storage unit and status information on each extent pool in the list. The formal definition of the lsextpool command is as follows 

lsextpool help h l long s short fmt default xml delim stanza p on off delim char hdr on off bnr on off r v on off fullid hmc1 SMC1 hmc2 SMC2 user username passwd password dev storage image ID stgtype fb ckd rankgrp 

According to the formal representation of the lsextpool command certain symbols have certain special meanings as described in Table 2 

For example in accordance with Table 2 a b indicates that a user may choose a b or nothing while a b indicates that a user must choose either a or b .

The skilled individual will appreciate that virtually all command line interfaces provide a formal representation similar to the above described formal definition of the lsextpool command and such formal representations often follow to some extent the conventions set out in Table 2.

As shown in a command description according to a formal description as described above may be provided for the command or commands at issue in conjunction with the user interaction . Furthermore an interpretation reference may be provided that contains the information necessary to understand the command description . By applying the interpretation reference to the command description the interface definition dialog generator may automatically determine many aspects of the command specification leaving the user to add any missing information modify default values etc. via the interface definition dialog .

Accordingly a method is provided for generating a command specification defining the structure of a plurality of text based commands suitable for use in generating a GUI for such plurality of commands as described with reference to . The method may comprise providing an interpretation reference defining command line interface conventions and parsing a command description with reference to the interpretation reference in order to extract the command specification via the command processing module .

The command specification as discussed with respect to any of may assume the form of a human readable file describing components and structure of a command or commands. Such file may be a flat file with a structure based on a grammar annotated similarly to a XML document and or may be structurally similar to a relational database. Based on a structuring schema such file may be viewed as a database structure and may be queried and updated as such.

For example for the following mkflash command if the flag record is there then the persist flag also must be provided in the command 

For the resyncflash command when referencing the command parameters 7001 7000 EF04 EE04 the two flags record and persist also must be included in the command 

As mentioned herein a command specification is not necessarily limited to a single command. Where a command specification defines a number of commands e.g. a command family information defining the relationship between such commands may be included as desired. Such information may indicate the relationship between a command and its command family. Such information may define e.g. the order in which a sequence of commands should be presented e.g. in the GUI for the command family or submitted.

For example to create a mirror between two sites using large disk bays the following eight steps are followed 

Creating a mirror as described above necessitates a command family. In the command specification eight commands will be in the mirror command family and the positions of the commands within the family may be as follows 

As seen above the commands in this family are not in alphabetic order as they are in all official reference books but rather they are in the order as expected by the end user. Because end user expectations may also vary depending on culture or specific usages it is possible for end users to change this description as desired in order to create a personalized GUI with customized commands flags and parameters.

The implementations described herein with reference to may be embodied as a method a computer program product or a system. To summarize what has been described herein such a method computer program product or system may be used to generate a GUI for a text based command or group of commands in which environment mapping definitions link generic GUI components with command structures. The environment mapping definitions may be applied to a command specification defining the structure of the command or group of commands in a standard format in order to build a GUI from generic GUI components. The command specification may be generated by providing an interpretation reference defining command line interface conventions and parsing a command description with reference to the interpretation reference in order to extract the command specification via a command processing module.

A main memory in accordance with an exemplary embodiment may comprise data and an operating system . The computer system may utilize well known virtual addressing mechanisms that may allow the programs of the computer system to behave as if they only have access to a large single storage entity instead of access to multiple smaller storage entities such as the main memory and the HDD . Therefore while data and the operating system are shown to reside in the main memory the skilled individual will recognize that these components may not necessarily be all completely contained in the main memory concurrently. It should be noted that the term memory is used herein to generically refer to the entire virtual memory of the computer system .

Data may represent any data that serves as input to or output from any program in the computer system . The operating system may be a multitasking operating system known in the industry as OS 400. However the skilled individual will appreciate that the spirit and scope of the various embodiments described herein are not limited to any one operating system.

The processor may be constructed from one or more microprocessors and or integrated circuits. The processor may execute program instructions stored in the main memory . The main memory may store programs and data that the processor may access. When the computer system starts up the processor initially may execute the program instructions that make up the operating system . The operating system may be a sophisticated program that manages the resources of the computer system . Among such resources may be the processor the main memory the mass storage interface the display interface the network interface and the system bus .

Although the computer system is shown to contain only a single processor and a single system bus the skilled individual will appreciate that the various embodiments described herein may be implemented using a computer system with multiple processors and or multiple buses. In addition the interfaces that are used according to an exemplary embodiment each may comprise separate fully programmed microprocessors used to off load compute intensive processing from the processor . However the skilled individual will appreciate that the disclosure applies equally to computer systems that use I O adapters to perform similar functions.

The display interface may be used to directly connect one or more displays e.g. monitors to the computer system . The displays which may be non intelligent i.e. dumb terminals or fully programmable workstations may be used to allow system administrators and users to communicate with the computer system . Note however that while the display interface is provided to support communication with one or more displays the computer system does not necessarily require a display because all necessary interaction with users and other processes may occur via the network interface .

The network interface may be used to connect other computer systems and or workstations to the computer system via a network connection . The various embodiments described herein apply equally no matter how the computer system may be connected to other computer systems and or workstations and regardless of whether the network connection is made using present day analog and or digital techniques or via some networking mechanism of the future. In addition many different network protocols may be used to implement a network such protocols being specialized computer programs allowing computers to communicate across the network connection . TCP IP Transmission Control Protocol Internet Protocol is an example of a suitable network protocol that may be used to enable communication over an Ethernet network. As shown the network connection may connect the computer system to two network devices and which may comprise computer systems similar to the computer system or may comprise other network capable devices such as printers routers etc. In the present example the network device may be an LCL server which may be connected via a modem to a public network such as the World Wide Web. A connection to a remote device or system may be established via the public network .

It is important to note that while the various embodiments described herein have been and will continue to be described in the context of a fully functional computer system the skilled individual will appreciate that the various embodiments are capable of being distributed as a product in a variety of forms and that the disclosure applies equally regardless of the particular type of media used to actually carry out the distribution. Examples of suitable signal bearing media include recordable type media such as floppy disks e.g. removable storage of and compact discs and transmission type media such as digital and analogue communications links.

The various embodiments may assume the form of an entirely hardware embodiment an entirely software embodiment or an embodiment containing both hardware and software elements. The various embodiments may be implemented in software which may include but is not limited to firmware resident software microcode etc.

Furthermore as discussed herein the various embodiments may assume the form of a computer program product accessible from a computer usable or computer readable medium providing program code for use by or in connection with a computer or any other instruction execution system. For the purposes of this description a computer usable or computer readable medium may be any apparatus that can contain store communicate propagate or transport the program for use by or in connection with the instruction execution system apparatus or device.

The medium may be an electronic magnetic optical electromagnetic infrared or semiconductor system or apparatus or device or a propagation medium. Examples of a computer readable medium include a semiconductor or solid state memory magnetic tape a removable computer diskette a random access memory RAM a read only memory ROM a rigid magnetic disk and an optical disk. Current examples of optical disks include compact disc read only memory CD ROM compact disc read write CD RW and DVD.

A data processing system suitable for storing and or executing program code may include at least one processor coupled directly or indirectly to memory elements through a system bus. The memory elements may include local memory employed during actual execution of the program code bulk storage and cache memories which provide temporary storage of at least some program code in order to reduce the number of times code must be retrieved from bulk storage during execution.

Input output I O devices including but not limited to keyboards displays pointing devices etc. may be coupled to the system either directly or through intervening I O controllers.

Network adapters also may be coupled to the system to enable the data processing system to become coupled to other data processing systems remote printers or storage devices through intervening private or public networks. Modems cable modems and Ethernet cards are a few of the currently available types of network adapters.

