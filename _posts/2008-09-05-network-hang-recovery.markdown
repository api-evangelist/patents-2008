---

title: Network hang recovery
abstract: A method of detecting a network hang and restoring an application that communicates on a connection giving rise to the network hang. A user experience may be improved by providing the user with an option to restore the hung application without losing unsaved data or state information. The network hang may be detected when the user tries to terminate the application. The method may include determining whether the network hang is recoverable, which may involve diagnosing a type of the hang. If recoverable, a network connection reset mechanism may be triggered by instructing a network stack of the computer to terminate the network connection.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07934129&OS=07934129&RS=07934129
owner: Microsoft Corporation
number: 07934129
owner_city: Redmond
owner_country: US
publication_date: 20080905
---
When an application executing on a computer becomes unresponsive to user input the application may be said to be hung. When the application attempts to perform an operation relating to a network the application may become unresponsive to user input while waiting for a response from the network. This condition may be referred to as a network hang. 

For example if a user of a client computer uses an application that interacts with a server computer over a network the application may stop responding to user input because of various conditions on the network. A network hang may also occur when a laptop user communicating over a wireless connection moves out of range of a base station a server goes down or a connection with the application becomes too slow because of too much traffic on the network or for a number of other reasons. Also while conditions on the network may be normal an application may request a network operation requiring a large amount of data and the application may therefore run slowly that it appears hung.

Conventional operating systems can detect hung applications based on the time that elapses between user input and a response from the application. When a user attempts to terminate a hung application the operating system may notify the user that the application is hung and provide the user with the option of continuing with the termination process or canceling the termination process.

An experience of a user of a computer may be improved by providing the user with an opportunity to recover from a network hang. When an operating system or other components of the computer detect that a user attempts to terminate an application with a network hang the user may be offered an option to recover from the network hang. Providing this option to the user may prevent the user from closing the application and thus losing unsaved data. Other negative consequences of the user s terminating the application may also be prevented.

In some embodiments recovery from a network hang may be achieved by breaking down a network connection used by the hung application. This event may trigger an exception handler within the application that cancels pending network operations and possibly takes other corrective action. Thereafter the application may be restored to a state in which it can respond to user input.

In some scenarios the hang may be of a type such that the hang may not be recoverable without undesirable consequences. For example when the hung application shares the network connection with another application recovering a hung application by breaking down the network connection may interfere with the other application. Certain protocols may provide connections that can support multiple applications which would render the hang unrecoverable. Therefore responding to a network hang may include diagnosing a type of the hang which may be based on a protocol used in the network connection and or whether the connection is shared with other applications. In some embodiments a user is offered the option of recovering from a network hang only when it is first determined that the hang is recoverable.

Applicants have appreciated that a network hang may be a significant distraction for a user of a computer system interacting with an application over a network. A user tired of waiting for the application to come back may close the application which may lead to loss of data or application state that the user must then recreate leading to dissatisfaction and frustration. The applicants have recognized and appreciated that user satisfaction may be greatly improved by offering a user of an application the option of recovering from the network hang and thus bringing the application to a responsive state without first having to terminate and restart the application. Therefore timely providing the user with an option to recover from the network hang may increase user satisfaction and improve the whole user experience.

Applicants have further appreciated that different types of network hangs may require different recovery methods. Thus determining a type of a network hang may help determine whether the application can be recovered and what method s may be used to recover from the network hang.

Applicants have further appreciated that a known mechanism of responding to a network error may be used to recover from a network hang. Accordingly some embodiments of the invention provide a method of terminating the network connection when the network hang is detected which triggers execution of a network error recovery mechanism.

As discussed above any of applications may become unresponsive due to various network conditions. An unresponsive application may be waiting for some response from the network. The network conditions may be indicative of a problem on a network connection used by any of applications . The nature of the network problem is not critical to the invention. For example the network may experience a large volume of traffic. Alternatively the server may be running slowly or may be shut down. Further computer communicating with server over a wireless network may be out of range of an access point of the wireless network. In some scenarios the network may not experience any problems but the current operation of the application may be slow so that the user may perceive the application as hung.

One or more components of computer may monitor applications executing on computer to determine whether the application is hung. Such components may be integrated with computer in any suitable way. For example such a component may be incorporated into an operating system of computer .

Such a component may detect a hang in any suitable way. For example a component of an operating system that implements a user interface through which user input destined for an application is received may record a time at which the user provides input. As a result the operating system may track the time for the application to respond to the input. If that time exceeds a threshold the application may be deemed to be hung. Such a check for a hang may be made as a background operation of the operating system or may be performed in response to a trigger event such as a user attempting to close an application. Though the timing and specific mechanism by which a hang is detected is not critical because any suitable techniques whether now known or hereafter developed may be used to detect a hang.

Once a hang is detected the cause of the hang may be determined. Such processing may determine that the hang is a network hang. A hang caused by a network activity may be determined in any suitable way. For example a network stack may provide an interface through which a component analyzing a cause of a hang may obtain information indicating whether the hung application is waiting for a network related function to complete.

Thus some embodiments of the invention provide a method of detecting a hang experienced by an application utilizing a network connection. The hang may be detected in response to receiving an input from a user that is trying to terminate the hung application. In some embodiments the hang may be detected before the user tries to terminate the hang application. It may then be identified whether the hang is a network hang that is a result of a network condition.

At block a cause of the hang may be diagnosed. Processing at block may successively apply known techniques to determine a cause of the hang. In addition such processing may include a check to determine whether the non responsive application is waiting for a network function in which case a network hang may be identified.

The process of may branch at decision block depending on whether the hang is a network hang. If it is determined that the hang is a network hang the computer system e.g. a recovery routine implemented in some embodiments of the invention may recover from the network hang at block . Recovery may be initiated in response to a user input. For example once a network hang is detected a user may be prompted with an option to initiate a recovery attempt. However a recovery attempt may be initiated in response to any suitable trigger event.

As discussed in more detail below prior to attempting to recover from a network hang it may also be determined whether the network hang is recoverable. The network hang may be regarded as recoverable if the network connection used by the application can be canceled in a safe manner that does not negatively impact other applications or users or in embodiments in which recovery is achieved by canceling a network operation canceling that operation does not interfere with the network connection the application or other applications or users. A recoverable network hang may be determined based on a type of the network hang which may depend on a network protocol used and on whether the network connection is shared. The recoverability of a network hang may be determined prior to offering a user an option to recover from the hang. Though recoverability may be determined at any suitable time and in any suitable way.

Regardless of how recoverability is determined if the network hang is recoverable to recover from the hang a suitable component of the operating system may recover the application from the network hang to a condition in which it can again respond to user input. The recovery may be caused for example by terminating pending network functions. Such functions may be terminated for example by canceling one or more operations requested by the hung application. According to some embodiments a recovery may be initiated by instructing a network stack to terminate the connection. For this purpose known functionality of the network stack may be employed which should be understood by one of skill in the art.

Functionality within the application may also be used to recover from a network hang. As is known in the art applications that communicate over networks typically include error handlers. The error handler may be triggered in response to an indication of a network error event from a network stack. For example an error may occur when a server goes down. According to some embodiments of the invention terminating a network correction is included among the events that trigger the error handler. Once invoked the error handler may respond in any suitable way that may place the application in a state in which it can again respond to user input. In some scenarios an application may not be recovered from the hang in which cases a recovery option may not be presented to the user.

Upon recovering the application from the network hang the process may end at bock . However it should be appreciated that a hang may be detected at any time. Therefore the process shown in may continuously monitor e.g. in block a state of each network connection used by applications on the computer system.

If it is determined in decision block that the hang is not a recoverable network hang the process may branch to block where the system may respond to the hang using any suitable method. For example as is known in the art a user may be given the option to terminate the application which may cause a loss of data and or a loss of state. The user may also be given the option to cancel any command to terminate the application. Once such a response is completed the process may end at bock .

The process of provides an improved user experience. When a recoverable network hang is detected the user may be prompted with an option to restore the hung application. The application may be restored by canceling any network operations waiting for a response which are likely blocking the application. As a result of canceling these operations the hung application may become responsive again. illustrate this user experience according to some embodiments.

Similarly while window is shown to include an X button in the upper right hand corner of window acting as a control through which a user may provide input to close the application it should be appreciated that the window may include any other buttons or other mechanisms through which a user may provide input.

The user may be willing to wait for application to complete an operation only for a limited amount of time. As a result the user may attempt to terminate the application by closing window . shows as an arrow that the user may click the X button to close window . Terminating the application may lead to a loss of unsaved data and state of the application. Moreover the experience of the user may be compromised because the user may become frustrated and dissatisfied with the application and or the operating system.

As discussed above to prevent negative consequences that may follow when the user experiences a hung application some embodiments of the invention implement a method of providing the user with several options with respect to a network hang. For example as shown in the user may be presented with options to restore or close the hung application from the network hang or wait . The options may be presented for example on a pop up window as illustrated in . A message such as for example The application is waiting for the network shown in may be presented to the user to inform the user of the respective state of the application. Though any suitable message may be presented in any suitable format.

It should be appreciated that the options may be presented to the user in any suitable format as the invention is not limited in this respect. The pop up window also may include other textual and visual elements and may be presented to the user in any suitable format.

Upon being presented with the options to restore or close the hung application or to wait the user may select any of the options. Thus if the user decides to restore the application suitable component s of the operating system discussed in more detail below may initiate a process of recovering the application from the network hang to a state in which it can respond to user input.

If the user selects wait the operating system may wait at least for some interval to take any action with respect to the hung application. The operating system may also wait for some event. For example the operating system may wait until the user attempts to close the application a second time. If the application is still hung after the wait interval the operating system may again prompt the user with choices such as are illustrated in window or take other suitable action with respect to the hung application.

In response to the user selecting the close option the operating system may terminate the application. The application may be terminated using known techniques or in any other suitable way. In contrast to restoring the applications terminating the application may result in a loss of unsaved data and state information.

The options presented to the user for responding to the network hang may be selected based on a state of the connection. In some embodiments a user network administrator or other party may define a policy that controls the options for responding to a network hang based on the state. In some embodiments the policy may specify actions taken automatically in certain scenarios.

As discussed above some embodiments of the invention provide a method of detecting a network hang diagnosing a type of the hang and selectively recovering from the hang in appropriate circumstances and or in response to user input. shows a computer in which some embodiments of the invention may be implemented. Computer may be for example a client computer connected to a server over a network e.g. network . Also computer may employ a peer to peer architecture to exchange data with other computers. Computer may include a network adapter or any other component used to communicate with other computers over the network. The network adapter may be a wired adapter a wireless adapter or any other suitable type of adapter as this invention is not limited in this respect.

Computer may include an application comprising one or more software modules for performing at least one task. Application may be for example a word processor a web browser email access application or any other application program executing on computer . Traditionally a client computer includes multiple applications though only one application is shown for simplicity. Application may access a server not shown or other remote device via a network connection over the network. It should be appreciated that application may utilize the network connection in any suitable manner. Application may be coupled to an operating system executed by computer . The operating system may be for example the Microsoft Windows operating system or any other suitable operating system. For the sake of simplicity some components conventionally included within a computer which one of skill in the art should understand are present or that are not involved in providing functionality as described herein may not be shown. Also boundaries between hardware and software are not expressly shown. Though in the embodiment illustrated network adapter may contain hardware elements that implement a special purpose processor and may include driver or other software. The other components may be implemented in software executing on one or more general purpose processors. Though other architectures are possible.

Operating system may include or be otherwise associated with a user interface . User interface may be for example a component that allows the operating system to present information to a user or to receive user input through a graphical user interface. User interface for example may present the user interface elements illustrated in . It should be appreciated that user interface may be any suitable interface as embodiments of the invention are not limited in this respect.

Operating system may include a network stack . Network stack may be a network stack as is known in the art. Though any suitable network stack whether now known or hereafter developed may be used. In some embodiments for example wherein computer deploys the Microsoft Windows Vista operating system network stack may be a set of layers that handle the Transmission Control Protocol Internet Protocol TCP IP stack. Network stack may monitor a state of network connections. The network stack may include an application programming interface through which application and other applications may communicate messages and other information for transmission over the network and other purposes. The application interface between network stack and application also allows network stack to signal to application that events have occurred. The events signaled may relate to normal receipt of data directed to application or may include an indication of an error condition. Further the network stack may have interface to exchange information with operating system or to receive commands from operating system such as a command to break down a network connection.

As discussed above application may experience delays in receiving a response from a network which may be referred to as a network hang of the application. In the hung state the application may not be responsive to a user input. In the example illustrated operating system may recognize that application is not responding to the user input. shows that operating system may include a hang detection routine which detects a hang. The hang may be detected upon a user input indicative of an attempt to close the hung application or at any other suitable time.

Hang detection routine may operate according to techniques known in the art. Such techniques may include tracking the time it takes for an application to respond to user input or other techniques that indicate the state of application . However the specific techniques used to detect a hung application are not critical to the invention and any suitable techniques may be used.

Operating system may also include a diagnosis routine used to determine a cause of a hang experienced by application . Diagnosis routine may be implemented using techniques similar to those used to implement known hang diagnosis routines. As an example diagnosis routine may acquire state information from various components of computer system to identify a pending operation associated with the hung application. The pending operations may indicate the cause of the hang. In addition to processing performed in a conventional diagnosis routine diagnosis routine may poll network stack through interface to obtain state information about the connections in use by application . This information may indicate whether a network operation has been pending for a time long enough to constitute a network hang.

In addition diagnosis routine may obtain state information from network stack through interface that allows diagnosis routine to determine whether the network hang if one exists is recoverable. In addition diagnosis routine may obtain information from other suitable components of the operating system to determine whether the hang is recoverable. For example diagnosis routine may obtain information relating to the protocol associated with the hung connection and whether the connection is shared with more than one application. As described above these are examples of parameters that may be used to determine whether breaking down a network connection is likely to impact applications other than the hung application and may therefore be used in determining whether the network hang is classified as recoverable.

In addition diagnosis routine may obtain state information from network stack that indicates progress of a network connection. For example the state information may indicate by changing values in counters storing state within network stack that communication is occurring. Such state information may be used for example to identify a slow network connection and may be used to provide additional information to a user about a network hang or to provide information useful in automatically applying a policy for responding to a network hang.

Operating system may include recovery routine which determines whether a recovery should be attempted and when recovery should be attempted initiates recovery of the application from the network hang. Recovery routine may obtain information from multiple sources concerning a network hang and the hung application to determine whether a recovery should be initiated. Recovery routine may also control operation of other components within computer system to gather information or to control the recovery. For example recovery routine may obtain information from diagnosis routine indicating that a network hang has been detected. The information would be provided from diagnosis routine to recovery routine in any suitable fashion. Regardless of how this information is obtained recovery routine may present an appropriate user interface in response to user input indicating a desire to terminate an application with a network hang. If the network hang is recoverable recovery routine may present such as through user interface component a user interface offering the user an option to recover the application. Such an option may be offered in conjunction with other options including an option to close the hung application an option to cancel the termination command and an option to restart the hung application. In instances where the network hang is not recoverable recovery routine may present a user interface offering the option to terminate the application or cancel the termination command without providing the user the option to initiate recovery.

Recovery routine may select the options offered to the user based on information and policy component or obtain from other suitable sources. Recovery routine may also receive user input through user interface or from any other suitable component indicating the user s selection of an option for responding to an application with a network hang. In instances in which the user selects to terminate the application recovery routine may provide such user input to other components within operating system that perform those functions as is known in the art. In scenarios in which a user indicates that the application should be recovered recovery routine may initiate the recovery process.

In the embodiment illustrated recovery routine may initiate recovery by instructing network stack to terminate the connection. This may result in a recovery from the hang by triggering an exception handler routine in the application . Exception handler routine may be any suitable software including software that uses known techniques for responding to network errors. Such processing may include terminating pending network operations which may be blocking application . Thus application may be released from the hang.

It should be appreciated that routines and shown in may each include any suitable software modules but embodiments of the invention are not limited in this respect.

A recovery from the hang may be different depending on a policy established. Also the recovery may be selected based on a state of the network connection. Thus operating system may include policy component which may include user preferences with respect to a recovery from hangs and other parameters. Information may be stored in policy automatically or may be manually entered by the user. For example the user will accept a slow network connection. In such a scenario recovery routine may come up based on state information obtained from network stack determine that a recovery should not be attempted in response to a network hang on a connection that is slow. Alternatively the policy may indicate a period of time that recovery routine will wait for a slow connection before presenting the user with options for responding to a network hang and that period of time may be longer for slow connections than for connections that are not making progress. In addition policies in the policy component may be established by recovery routine . For example recovery routine may keep track of a time when a recovery of a particular application from a network hang was last attempted and may determine whether or not to offer the recovery option to the user depending on how long ago the recovery was last attempted. Though any suitable policies may be established and policy component may contain information concerning these policies.

In block a diagnosis routine e.g. diagnosis routine may be called to determine the cause of the hang. A suitable component in the operating system that monitors network infrastructure activity e.g. the network stack may determine that the application is waiting for a response from the network. For example the diagnosis routine may determine that the application is currently performing network input output I O . This information combined with the fact that a hang was detected may suggest that a network hang has occurred. In some embodiments it may be determined that the application has been waiting for the response for a period of time that exceeds a threshold and is therefore experiencing a network hang.

In embodiments deploying the Microsoft Windows operating system a Wait Chain Traversal API may be used to determine whether the hang is a network hang. The network hang may occur when the application is blocked on a network I O. To determine that an application is hung on the network I O the last system call made by a thread waiting in a blocking call may be examined. The thread may be associated with the hung application. An object the thread is waiting on may be identified. In some embodiments the object identified may be used to indicate that the thread is blocked on a network I O. In this case a network hang may be diagnosed.

Further information on the network hang may be determined in block . Thus a type of the network hang may be determined allowing a determination of whether the hang is recoverable. In the embodiment illustrated a network hang is regarded as recoverable if the network connection causing the hang could be terminated without otherwise effecting other applications. In some embodiments a network hang may be regarded as recoverable if the network connection causing the hang could be terminated without otherwise effecting not only other applications but also the hung application itself. Thus processing at block to determine the type of network hang may involve obtaining information concerning the nature of the network connection. In some embodiments such information may be obtained based on the protocol used. For example connections implementing a file system protocol e.g. a server message block protocol may be shared among multiple applications. Accordingly breaking down a connection that gives rise to a network hang may impact applications other than the hung application. Thus in embodiments in which recovery is triggered by breaking down a network connection the recovery may interfere with the applications that share the connection with the hung application. In that scenario a network hung on a connection using a protocol that could be shared by multiple applications may be regarded as not recoverable. In some embodiments a hang may be classified as not recoverable based simply on the protocol used. In other embodiments more detailed processing may be employed to ascertain whether other applications actually share the connection.

Regardless of the mechanism used to determine whether the network hang is recoverable processing may proceed to decision block . At decision block the process may branch depending on whether the network hang is recoverable. If the network hang is not recoverable the process may branch from decision block to block . At block the user may be informed of the hung application and may be provided with limited choices for response. Such choices may include terminating the hung application or canceling the command to terminate the application without offering the user the option to restore the hung application. Such choices may be presented to the user as is known in the art or in any other suitable way.

In block the user may be provided with an option to recover the hung application from the network hang. The option may be provided for example via the user interface as shown in . The user may also be provided with other options such as to close the hung application to restart the hung application or to wait along with the option to recover from the network hang. The options may be presented to the user along with information about the network hang if available. For example the information would be presented in conjunction with network state information indicating that the connection is slow or other available information about the cause of the network hang.

It should be appreciated that embodiments of the invention are not limited with respect to what information on the hang may be obtained and any suitable user interface may be presented.

In block the operating system e.g. hang recovery routine may receive user input indicating a selection by the user of the option to recover from the network hang.

At block a recovery routine e.g. recovery routine may be used to recover from the network hang. In some embodiments the recovery routine may instruct the network stack to terminate the connection. For this purpose existing functionality of the network stack may be employed. In response to the broken down connection an error handling mechanism e.g. an exception handler routine associated with the application may be triggered for the application to regain responsiveness.

The exception handler may perform any suitable operations to recover the application from the network hang. In some embodiments the exception handler may cancel pending operations waiting for a response from the network and return the application to an operating state prior to the time that the hung operations were initiated. Though exception handlers may be developed to respond to network errors using any suitable error handling response and the invention is not limited in this regard.

Having thus described several aspects of at least one embodiment of this invention it is to be appreciated that various alterations modifications and improvements will readily occur to those skilled in the art.

Such alterations modifications and improvements are intended to be part of this disclosure and are intended to be within the spirit and scope of the invention. Accordingly the foregoing description and drawings are by way of example only.

The above described embodiments of the present invention can be implemented in any of numerous ways. For example the embodiments may be implemented using hardware software or a combination thereof. When implemented in software the software code can be executed on any suitable processor or collection of processors whether provided in a single computer or distributed among multiple computers.

As one example of a possible variation embodiments are described in which an application communicating over a single network connection hangs. In embodiments in which an application communicating over two or more network connections hangs the system may respond by breaking down all of the network connections used in the application. In this way the connection causing the hang may be eliminated. However in some embodiments further processing may be employed to identify the connection of the multiple connections causing the network hang. When the specific connection or connections causing a network hang can be identified only that connection or set of connections may be broken down.

As an example of another possible variation it is described above that recovery from a network hang is implemented using existing features within a network stack to break down a network connection. This approach also takes advantage of conventional processing that is already incorporated as an exception handler in an application. Such an approach provides a simple mechanism to facilitate recovery of an application from a network hang. However other approaches may be used including approaches that incorporate additional manipulation of elements with the network stack or within the hung application.

Further it should be appreciated that a computer may be embodied in any of a number of forms such as a rack mounted computer a desktop computer a laptop computer or a tablet computer. Additionally a computer may be embedded in a device not generally regarded as a computer but with suitable processing capabilities including a Personal Digital Assistant PDA a smart phone or any other suitable portable or fixed electronic device. Also though illustrates a system with two computers system may include more than two computers.

Also a computer may have one or more input and output devices. These devices can be used among other things to present a user interface. Examples of output devices that can be used to provide a user interface include printers or display screens for visual presentation of output and speakers or other sound generating devices for audible presentation of output. Examples of input devices that can be used for a user interface include keyboards and pointing devices such as mice touch pads and digitizing tablets. As another example a computer may receive input information through speech recognition or in other audible format.

Such computers may be interconnected by one or more networks in any suitable form including as a local area network or a wide area network such as an enterprise network or the Internet. Such networks may be based on any suitable technology and may operate according to any suitable protocol and may include wireless networks wired networks or fiber optic networks.

Also the various methods or processes outlined herein may be coded as software that is executable on one or more processors that employ any one of a variety of operating systems or platforms. Additionally such software may be written using any of a number of suitable programming languages and or programming or scripting tools and also may be compiled as executable machine language code or intermediate code that is executed on a framework or virtual machine.

In this respect the invention may be embodied as a computer readable medium or multiple computer readable media e.g. a computer memory one or more floppy discs compact discs optical discs magnetic tapes flash memories circuit configurations in Field Programmable Gate Arrays or other semiconductor devices or other tangible computer storage medium encoded with one or more programs that when executed on one or more computers or other processors perform methods that implement the various embodiments of the invention discussed above. The computer readable medium or media can be transportable such that the program or programs stored thereon can be loaded onto one or more different computers or other processors to implement various aspects of the present invention as discussed above.

The terms program or software are used herein in a generic sense to refer to any type of computer code or set of computer executable instructions that can be employed to program a computer or other processor to implement various aspects of the present invention as discussed above. Additionally it should be appreciated that according to one aspect of this embodiment one or more computer programs that when executed perform methods of the present invention need not reside on a single computer or processor but may be distributed in a modular fashion amongst a number of different computers or processors to implement various aspects of the present invention.

Computer executable instructions may be in many forms such as program modules executed by one or more computers or other devices. Generally program modules include routines programs objects components data structures etc. that perform particular tasks or implement particular abstract data types. Typically the functionality of the program modules may be combined or distributed as desired in various embodiments.

Also data structures may be stored in computer readable media in any suitable form. For simplicity of illustration data structures may be shown to have fields that are related through location in the data structure. Such relationships may likewise be achieved by assigning storage for the fields with locations in a computer readable medium that conveys relationship between the fields. However any suitable mechanism may be used to establish a relationship between information in fields of a data structure including through the use of pointers tags or other mechanisms that establish relationship between data elements.

Various aspects of the present invention may be used alone in combination or in a variety of arrangements not specifically discussed in the embodiments described in the foregoing and is therefore not limited in its application to the details and arrangement of components set forth in the foregoing description or illustrated in the drawings. For example aspects described in one embodiment may be combined in any manner with aspects described in other embodiments.

Also the invention may be embodied as a method of which an example has been provided. The acts performed as part of the method may be ordered in any suitable way. Accordingly embodiments may be constructed in which acts are performed in an order different than illustrated which may include performing some acts simultaneously even though shown as sequential acts in illustrative embodiments.

Use of ordinal terms such as first second third etc. in the claims to modify a claim element does not by itself connote any priority precedence or order of one claim element over another or the temporal order in which acts of a method are performed but are used merely as labels to distinguish one claim element having a certain name from another element having a same name but for use of the ordinal term to distinguish the claim elements.

Also the phraseology and terminology used herein is for the purpose of description and should not be regarded as limiting. The use of including comprising or having containing involving and variations thereof herein is meant to encompass the items listed thereafter and equivalents thereof as well as additional items.

