---

title: State handles
abstract: State handles mark application data states within a sequence of operations for preservation. Applications can maintain non-linear sets of operations that include multiple sequences of operations between state handles. Applications can determine a sequence of operations between any two state handles, allowing applications to change from the data state associated with one state handle to the data state associated with another state handle. The sequence of operations between any two state handles may include executing operations and/or reversing operations. An application automatically adds new branches in the set of operations to preserve the sequences of operations necessary to reconstruct data states of previously set handles and removes branches that are not needed. Applications may use state handles to implement non-linear undo and redo functions, to validate journal entries, to combine incremental operations into a cumulative operation, and to speculatively execute operations for error detection, user guidance, or performance optimization.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09342510&OS=09342510&RS=09342510
owner: Pixar
number: 09342510
owner_city: Emeryville
owner_country: US
publication_date: 20081022
---
The invention relates to the field of software applications allowing users to create modify and manipulate data. Many software applications allow users to create modify or manipulate data. These applications are referred to generally herein as data applications. For example computer graphics software applications allow users to create three dimensional models of objects specify animation lighting and shading data and generate one or more rendered images as a result.

Regardless of the type of application and data users often create modify and manipulate data over multiple iterations. Typically users provide commands to the application which in turn performs one or more operations to create modify or otherwise manipulate data. In addition to refining the data through multiple iterations users frequently backtrack or revert to previous versions of data to correct mistakes or to explore alternatives. Many data applications include undo and redo functionality. Typically the undo function allows users to reverse the effects of a sequence of one or more previously performed operations. Following the reversal of a sequence of one or more previously performed operations a typical redo function re executes one or more of the sequence of reversed operations.

One problem with the undo and redo operations of prior data applications is that the undo redo queue is typically linear. Users may undo any sequence of operations however if a user performs one or more new or additional operations following the reversal of a sequence of operations this sequence of operations is removed from the undo redo queue and cannot be re executed using the redo command.

An embodiment of the invention includes state handles to mark application data states within a sequence of operations for preservation. Using state handles applications can maintain non linear sets of operations that include multiple sequences of operations between state handles. Applications can determine a sequence of operations between any two state handles allowing applications to change from the data state associated with one state handle to the data state associated with another state handle. The sequence of operations between any two state handles may include executing operations and or reversing operations.

In an embodiment a data application automatically adds new branches in the set of operations to preserve the sequences of operations necessary to reconstruct data states of previously set handles. An additional embodiment of a data application also automatically removes branches in the set of operations that are not needed to reconstruct data states of state handles.

Embodiments of the invention can use state handles to implement non linear undo and redo functions. An embodiment of the invention includes a user interface for navigating between data states associated with state handles. One example user interface includes a graph visualization showing the topological relationships between state handles in a graph of operations. Another user interface includes a selectable list of state handles.

An embodiment of the invention can also use state handles to validate journal entries representing sequences of operations. An embodiment sets a state handle and performs a sequence of operations. The embodiment also generates journal entries corresponding with the sequence of operations. The state of the application data following the sequence of operations is stored. An embodiment then reverts the data state back to the state handle and executes the journal entries. The resulting data state is compared with the stored data state to validate the journal entries.

An embodiment of the invention can also use state handles to combine incremental operations into a cumulative operation. In this embodiment a state handle is set prior to execution of a first incremental operation. As incremental operations are received a data state following the received incremental operations is determined. An embodiment then reverses the sequence of operations back to the state handle and adds a new cumulative operation to recreate this data state.

An embodiment of the invention can also use state handles to speculatively execute operations for error detection user guidance or performance optimization.

The sequence of operations may be created and maintained in a number of ways. For example the data application may generate one or more corresponding operations for each application command received by the data application from a user a script or another application. An embodiment of the data application performs the function associated with the received application command. If the function is successfully completed an embodiment of the data application adds these generated operations to the sequence of operations . Any type of data structure known in the art may be used to maintain the sequence of operations such as arrays linked lists stacks queues tree structures and undirected and directed graph data structures.

In an embodiment the sequence of operations represents the data application functions needed to change data from an initial state to its current data state following the most recently executed application command. Similarly any portion of the sequence of operations from the first operation to any intermediate operation within the sequence represents the data application functions needed to change data from its initial data state to the data state following that intermediate operation.

For example operation changes data from data state to data state . Operation changes data from data state to data state . Operation changes data from data state to data state . Operation changes data from data state to data state . Operations and optionally any intermediate operations change data from data state to data state .

As discussed in detail below an embodiment of the invention allows data applications to non destructively change or restore data states represented by non linear sequences of operations. To facilitate these changes an embodiment of the invention allows users the data application or other applications to set state handles. A state handle is a marker associated with an operation at any location in a set or sequence of operations. The state handle indicates the data state following its associated operation is of interest to a user the data application or another application. In an embodiment the data application preserves all of the operations necessary to change data from its initial state to the data state associated with the state handle. This allows the data application to reconstruct the data state associated with the state handle at any time regardless of the current data state. In another embodiment the data application preserves the data state associated with a state handle directly rather than as a sequence of operations.

In the example of a state handle has been associated with the data state . As a result an embodiment of the data application will preserve all or a portion of the sequence of operations necessary to reconstruct the data state from an initial data state. Embodiments of the invention may allow state handles such as state handle to be set manually for example in response to a command from a user or another application or automatically for example in response to specific commands application functions or operations.

Embodiments of data applications may implement undo commands using any technique known in the art. In an embodiment each operation in the sequence of operations is invertible. An invertible operation has a mathematical or computational inverse such that if the performing the operation on a given input results in an output then performing the inverse of the operation on this output results in the given input. In some cases operations without mathematical or computational inverses such as operations that combine or composite data may be made invertible by caching the input data used by each instance of the operation. An undo function retrieves the cached input data of the operation to reverse this operation.

In the example of a portion of the sequence of operations has been reversed up to and including operation using an undo function. As a result the application data will revert from data state back to data state . Embodiments of the data application allow for undo functions to revert the application data back to any arbitrary previous data state up to and including the initial state of the application data.

In further embodiments the data application may include a redo function allowing some or all of the operations following operation or any other operation in the sequence of operations to be re executed allowing the data application to reconstruct any arbitrary intermediate data state of the application. Thus users the data application and other applications may linearly navigate through the sequence of operations to reconstruct any data state of the application data from its initial state up to and including the data state following the most recently processed operation including data states and .

In prior data applications the sequence of operations used to reconstruct application data states is strictly linearly. This limits flexibility in creating modifying and otherwise manipulating application data. For example if a user reverts the application data to data state as shown in the user of prior data applications cannot modify or add operations to the sequence of operations without destroying the subsequent data state . In prior data applications any modifications to the sequence of operations while the application data is in an intermediate data state such as data state will result in the loss of any data states subsequent to the modification in the sequence of operations .

An embodiment of the invention overcomes these limitations by allowing for non linear sequences of operations. illustrates a third portion of the operation of state handles according to an embodiment of the invention. Portion occurs following the reversion of the application data from data state to data state immediately preceding operation in the sequence of operations . While the application data is in data state a user the data application or another application provides the data application with one or more additional commands which cause the data application to perform a second sequence of operations . In this example the second sequence of operations begins with operation

Rather than overwriting the portion of the sequence of operations following data state with the second sequence of operations an embodiment of the data application maintains the second sequence of operations separately from the sequence of operations . In an embodiment operation which begins the second sequence of operations is linked or associated with data state . Thus data state is associated with two subsequent operations operation and operation . In this example the association of operation with data state specifies that the second sequence of operations begins following data state in the first sequence of operations .

Like the first sequence of operations the second sequence of operations can include any arbitrary number of operations. In this example the second sequence of operations includes operation changing application data from data state to data state . Similarly operation changes application data from data state to data state . Operation and optionally any intermediate operations change application data from data state to data state . Operation changes application data from data state to data state . Following the execution of the second sequence of operations the application data is in data state . In this example a user the data application or another application adds a second state handle to indicate that the data state is also of interest and should be preserved.

In a further embodiment users the data application and other applications can also use the undo and redo functions of the data application to change the application data to any arbitrary data state within the sequence of operations or the second sequence of operations including data states and .

Embodiments of the invention may add or remove any arbitrary quantity of branches of sequences of operations in response to new or modified operations. In one embodiment the data application automatically adds branches of sequences of operations and optimizes the set of operations by automatically removing unneeded sequences. illustrates a method of automatically creating and optimizing non linear sequences of operations according to an embodiment of the invention.

In step an operation is received for processing by method . In an embodiment an operation may be generated in response to a command from a user or another application or generated by the data application itself.

In an embodiment a data application or other entity maintains a current location indicator for the set of operations previously performed. This current location indicator associates the current data state of the application data with a location in the set or sequence of operations previously performed. At decision block method determines if the current location in the set of operations is at the end of a sequence of operations. If there are any operations in the set of operations subsequent to the current location then the current location is not at the end of a sequence of operations.

If the current location is at the end of a sequence of operations then method proceeds to step . Step performs one or more data application functions corresponding with the received operation. If these functions are successfully completed then an embodiment of step adds the received operation to the set of operations at the current location. Step then advances the current location to the location following the added operation.

Returning to decision block if the current location is not at the end of a sequence of operations then method proceeds to decision block . Decision block then determines if there are any state handles associated with any operation following the current location in the sequence of operations. If there are no state handles in the set of operations following the current location then step discards the portion of the set of operations following the current location. Step may discard these operations because no data states following the current location need to be preserved or reconstructed.

Following step steps and perform data application functions add the received operation to the set of operations and update the current location as described above.

Returning to decision block if there are state handles in the set of operations following the current location then the portion of the set of operations between the current location and one or more subsequent state handles at the least needs to be saves so that the data state associated with a subsequent state handle can be reconstructed. To preserve operations used to reconstruct the data states associated with subsequent state handles an embodiment of method proceeds to step .

Step adds a link between the current location in the set of operations and a new sequence of operations. In step an embodiment of the data application performs one or more functions corresponding with the received operation. If these functions are successfully completed then step adds the received operation to the new sequence of operations. Step then updates the current location to follow the added operation in the new sequence of operations.

Following step or step an embodiment of method optionally returns to step to receive additional operations for processing.

User interface also includes a graph visualization that shows the relationships between the state handles . The graph visualization can include representations of the sequences of operations between the state handles . The representations of sequences of operations may include lists of the actual operations within each sequence of operations. Alternatively the representations of sequences of operations may hide the actual operations from the user for clarity and ease of navigation. In further embodiments a visual indicator such as an arrow is used to indicate the ordering of a sequence of operation. In an embodiment the topology of the graph visualization matches the topology of sequences of operations between the state handles.

Further embodiments of user interfaces and may include functions for adding new state handles based on the current data state of application data and removing state handles.

In general embodiments of data applications change application data from one data state to another data state by determining a path from the current data state to the desired data state or state handle through the graph of operations in a set of operations. A typical path will often include reversing some sequences of operations and re executing other sequences of operations.

For example to change the data state from the data state associated with state handle A to that of state handle B B an embodiment of the data application would reverse or undo the sequence of operations and then perform the sequence of operations . Similarly to change the data state from state handle B to state handle C and embodiment of the data application would reverse or undo the sequence of operations and execute sequences of operation and . To change the data state from state handle C to state handle D an embodiment of the data application would reverse the sequence of operations and execute the sequence of operations

Embodiments of the invention may use graph traversal techniques known in the art to determine an efficient path which corresponds to a set of operations to reverse and or perform to reach the desired data state. For example a graph of state handles and sequences of operations such as that visualized by may be re rooted at the current data state and then traversed to find an efficient path through the graph.

In further embodiments an application programming interface allows other applications to similarly change the data state of the application data.

State handles may be used by users to specify multiple data states of the application data. Users may change the application data between the data states of different state handles to compare the results of different sequences of operations. In addition to implementing non linear undo and redo functions state handles may be used to implement other functions of data applications.

Validating application journal entries is one type of function of a data application enabled by state handles. In an embodiment a data application may generate an application journal entry corresponding with each operation of the data application. An application journal entry may include script or executable code enabling the data application to reproduce the corresponding operation. A set of one or more application journal entries may be used as a script or macro to repeatedly perform complicated operations on different selections of application data. A set of application journal entries may be exported or saved for later use for one or more users.

After selecting a set of application journal entries an embodiment of the invention uses state handles to validate the set of application journal entries. Validation ensures that a set of application journal entries changes the data state of application data in the same manner as the associated operations of the data application. illustrates a method of validating application journal entries using state handles according to an embodiment of the invention.

Step of method sets a state handle for the current data state of application data. Step then receives an operations to be performed by the data application. Step generates one or more journal entries corresponding with the received operation. In step the operation is provided to the data application for processing resulting in a change in the data state of the application data. Steps and may be repeated for additional operations to be included in the set of journal entries to be validated.

Following the receipt and processing of all of the operations to be included in the set of journal entries step stores the data state of the application for future comparison.

Step reverts the data state of the application data back to the data state associated with the state handle set in step . Following step step processes the set of journal entries previously generated by one or more iterations of step . For each journal entry the data application performs at least one operation on the application data changing the data state of the application data.

Following the processing of the journal entries step compares the resulting data state of the application with the previously stored data state. If these data states match then the function of journal entries matches that of the associated operations. Thus the set of journal entries are valid. Conversely if the data state following step does not match the previously stored data state then the journal entries are not valid. Optional step then outputs the results of the comparison.

Another application of state handles consolidates multiple incremental operations into a single cumulative operation. For example a data application may allow a user to interactively edit a model of an object by dragging a portion of the model to a new location within a graphical user interface. When the user drags the portion of the model an incremental operation is generated representing an incremental change of the data state of the model such as the movement of the portion of the model from its initial position to an intermediate position. As the user further moves the portion of the model from its prior position to a new position another incremental operation is generated to represent this incremental change in the data state. This process is repeated as the user drags the portion of the model to its new position. Often large numbers of incremental operations are generated as the portion of the model is moved to its final position. In this situation it is burdensome for users to undo a long sequence of incremental operations. Additionally a long sequence of incremental operations increases the computational processing required to change data states between state handles.

Embodiments of the invention use state handles to combine sequences of consecutive incremental operations into a single cumulative operation. illustrates a method of combining incremental operations into a cumulative operation using state handles according to an embodiment of the invention. Step receives an initial incremental operation for processing. Step generates a state handle representing the current data state of the application data prior to the execution of this received incremental operation.

Step generates a cumulative operation equivalent to the data state following the execution of the most recently received incremental operation. In an embodiment step provides the most recently received incremental operation to the data application for execution. Following the execution of this incremental operation step compares the current data state with the data state associated with the state handle. Step uses the difference between these data states to determine a cumulative operation representing the effects of one or more previously processed incremental operations on the data state of the application data.

For example if the current data state of application data specifies the position of a model at location X 5 and the data state associated with the state handle specifies that this model is positioned at location X 1 then step will generate a cumulative operation adapted to change the location X from 1 to 5.

Following step step reverts the data state of the application data back to the data state associated with the state handle. Step then provides the generated cumulative operation to the data application for processing. The cumulative operation is also added to the sequence of operations after the state handle set in step . As described in method this cumulative operation replaces any other previously added operations after this state handle in the sequence of operations. Following the execution of this generated cumulative operation the data state of the application is the same as it would be following the execution of the most recently received incremental operation. However the sequence of operations following the state handle set in step will only include the cumulative operation.

Following step step waits for the receipt of an additional operation for processing. Decision block determines if the operation received in step is an incremental operation of a similar type to that received in step . In an embodiment incremental operations are of a similar type if both operations can be represented by a single cumulative operation. If these incremental operations are of similar type then steps and are repeated for the most recently received incremental operation from step . Steps and may be repeated an arbitrary number of times. Each iteration of steps and replaces the previously stored cumulative operation in the sequence of operations with a new cumulative operation based on the net change in the data state between the state handle and the data state following the execution of the most recently received incremental operation.

Conversely if the operation received in step is not an incremental operation then optional step may remove the state handle set in step . Step the provides the received operation to the data application for execution.

Further embodiments of the invention may use state handles to speculatively execute operations for purposes of error detection user guidance or optimization. For example an embodiment of a data application may automatically set a state handle for the current state and speculatively execute one or more operations. The speculatively executed operations may be selected by analyzing the user interactions and or the data state. An embodiment of the invention analyzes the results of the speculatively executed operations and then automatically reverts the application data back to the data state associated with the state handle. In an embodiment this process of speculative execution and reversion is performed in the background and is not visible to users.

If one or more of the speculatively executed operations fails an embodiment of the data application may provide a message or indicator to the user based on the error. For example a message may tell the user that additional actions must be taken to avoid this error. In another example one or more commands may be temporarily disabled to prevent this error from occurring. In a further example a message may inform the user of the action that must be taken to avoid the error. The data application may automatically reactivate a command once the appropriate action to avoid the error has been performed.

In another example an embodiment of the data application may speculatively execute several alternative operations associated with a command on all or a portion of the application data. This embodiment of the data application may then analyze the results of each of these alternative operations to identify one or more of the operations providing the best results in terms of computational efficiency accuracy quality of results or any other criteria. If the user then decides to execute this command an embodiment of the data application will execute this command by executing the operation that provided the best results from the previous speculative execution.

User input devices communicate user inputs from one or more users to the computer system examples of which may include keyboards mice joysticks digitizer tablets touch pads touch screens still or video cameras and or microphones. Network interface allows computer system to communicate with other computer systems via an electronic communications network and may include wired or wireless communication over local area networks and wide area networks such as the Internet. An audio processor is adapted to generate analog or digital audio output from instructions and or data provided by the CPU memory and or storage . The components of computer system including CPU memory data storage user input devices network interface and audio processor are connected via one or more data buses .

A graphics subsystem is further connected with data bus and the components of the computer system . The graphics subsystem includes at least one graphics processing unit GPU and graphics memory . Graphics memory includes a display memory e.g. a frame buffer used for storing pixel data for each pixel of an output image. Graphics memory can be integrated in the same device as GPU connected as a separate device with GPU and or implemented within memory .

Pixel data can be provided to graphics memory directly from the CPU . In some implementations instructions and or data representing a scene are provided to renderfarm or set of server computers each similar to computer system via the network interface or storage . The renderfarm generates one or more rendered images of the scene using the provided instructions and or data. These rendered images are returned to the computer system for display.

Alternatively CPU provides the GPU with data and or instructions defining the desired output images from which the GPU generates the pixel data of one or more output images. The data and or instructions defining the desired output images can be stored in memory and or graphics memory . In an embodiment the GPU includes 3D rendering capabilities for generating pixel data for output images from instructions and data defining the geometry lighting shading texturing motion and or camera parameters for a scene. The GPU can employ any surface or volume rendering technique known in the art to create one or more rendered images from the provided data and instructions including rasterization scanline rendering REYES or micropolygon rendering ray casting ray tracing image based rendering techniques and or combinations of these and any other rendering or image processing techniques known in the art. The GPU can further include one or more programmable execution units capable of executing shader programs. GPU can be comprised of one or more graphics processing unit cores.

The graphics subsystem periodically outputs pixel data for an image from graphics memory to be displayed on display device . Display device is any device capable of displaying visual information in response to a signal from the computer system including CRT LCD plasma OLED and SED displays. Computer system can provide the display device with an analog or digital signal.

In embodiments of the invention CPU is one or more general purpose microprocessors having one or more homogenous or heterogeneous processing cores. In further embodiments all or a portion of the graphics subsystem or GPU is integrated into CPU .

Further embodiments can be envisioned to one of ordinary skill in the art. In other embodiments combinations or sub combinations of the above disclosed invention can be advantageously made. The block diagrams of the architecture and flow charts are grouped for ease of understanding. However it should be understood that combinations of blocks additions of new blocks re arrangement of blocks and the like are contemplated in alternative embodiments of the present invention.

The specification and drawings are accordingly to be regarded in an illustrative rather than a restrictive sense. It will however be evident that various modifications and changes may be made thereunto without departing from the broader spirit and scope of the invention as set forth in the claims.

