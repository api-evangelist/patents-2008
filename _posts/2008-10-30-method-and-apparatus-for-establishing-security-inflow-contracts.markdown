---

title: Method and apparatus for establishing security inflow contracts
abstract: A method and apparatus for establishing a security inflow contract between a work-initiating system and a work-performing system. A portable, generic security inflow contract between an EIS/connector and an application server is provided that enables the connector to establish security information while submitting a work instance for execution to a work manager and while delivering messages to message endpoints of the application server. The security inflow contract enables all activities of a work instance that is submitted by a connector to be performed in the context of an established identity, thus insuring that all interactions between an application server and an EIS/connector are secure, and may prevent unauthorized access to application components deployed in an application server.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08381278&OS=08381278&RS=08381278
owner: Oracle America, Inc.
number: 08381278
owner_city: Redwood City
owner_country: US
publication_date: 20081030
---
The Java Platform Enterprise Edition which may be referred to as Java EE or J2EE is a widely used platform for server programming in the Java programming language. Java may be described as a class based platform independent programming language. The Java EE platform includes libraries which provide functionality to deploy distributed multi tier Java software based largely on modular components running on an application server. Java EE is defined by its specification which includes several Application Programming Interface API specifications and defines how to coordinate them.

The Java EE Connector Architecture addresses the integration of Java technology based enterprise applications with work initiating systems such as Enterprise Information Systems EIS . The Java EE Connector Architecture provides a Java technology solution to the problem of connectivity between the many application servers and work initiating systems e.g. EIS . Examples of Enterprise Information Systems EIS include Enterprise Resource Planning ERP systems Customer Relationship Management CRM systems Supply Chain Management business applications and database systems. The connector specification standardizes a set of contracts that enable a connector also referred to as a resource adapter between a work initiating system such as an EIS and an application server to propagate an imported transaction from the EIS to the application server so that the application server and all related participants can do work as part of the imported transaction. The connector serves as the point of contact between application components application servers and a work initiating system such as an EIS. A connector may be viewed as a system level software driver that is used by a container or an application client to connect to an EIS. A connector is generally specific to a particular EIS.

It is critical in EIS integration scenarios that all interactions between an application server and a connector are secure and that unauthorized access to application components deployed in an application server are prevented. Conventional connectors typically employ transport and message level security for connecting to and receiving messages from an EIS. To achieve end to end application security it is important for security purposes that all activities of a work instance that is submitted by a connector including delivering messages to a message endpoint happen in the context of an established identity. Although conventional connectors may employ transport and message level security for connecting to an EIS and receiving messages from an EIS there has been no standard portable security inflow contract that enables conventional connectors to deliver application level security while executing a task in a work instance e.g. one or more tasks executed by an application server or while delivering a message to a message endpoint e.g. the boundary between a messaging API and application code . Due to the fact that there has been no standard portable method for establishing a security inflow contract connector implementers conventionally have had to adapt their connectors to a variety of proprietary security interfaces in application server environments in which they need or desire to deploy their connectors. In addition due to the lack of standard contracts to flow in security context during message delivery in conventional systems the business logic in message endpoints has been limited to execution in a fixed or unknown security context.

Java Java EE J2EE and EJB as used throughout this document are trademarks or registered trademarks of Sun Microsystems Inc. in the United States and other countries.

Embodiments of a method and apparatus for establishing a security inflow contract between a work initiating system such as an Enterprise Information system EIS and a work performing system such as an application server are described. Embodiments may provide a portable generic method for establishing security contracts between EIS connectors and application servers that enables a connector to establish security information while submitting a work instance for execution to a work manager and while delivering messages to message endpoints residing in the application server. By enabling all activities of a work instance that is submitted by a connector including delivering messages to a message endpoint to be performed in the context of an established identity embodiments may insure that all interactions between an application server and an EIS connector are secure and may prevent unauthorized access to application components deployed in an application server.

In one embodiment a connector receives a message from an EIS. The message may include one or more tasks to be executed on an application server and principal information comprising identity information and security attributes. The principal information is associated with the tasks. The connector constructs a work instance and an associated security inflow context. The work instance includes the tasks received in the message and the security inflow context includes the identity information and security attributes received in the message. The connector sends the work instance with the security inflow context to a work manager on an application server. Subsequently the application server reads the security inflow context and sends a reference to a callback handler back to the connector. The connector invokes the callback handler to set the security context for the work instance. When the work instance tasks are executed they are executed in the context of the security context.

In one embodiment a connector may receive a message from an EIS with a security context. The messaging infrastructure between EIS and connector may be implemented using any suitable messaging technology e.g. a Java Messaging Service implementation integrated with JMS compatible Message Oriented Middleware MoM . The connector may construct a work instance with a security inflow context. The security inflow context may provide a portable mechanism for a connector to pass security context information to the application server. All activities that happen as part of the work instance including message deliveries to a message endpoint may occur in the context of the established identity. In one embodiment the connector includes an implementation of security inflow context as one of the inflow contexts to be established as the execution context of the work instance. The connector submits the work instance to the work manager of the application server. The connector may schedule work with the work manager for synchronous or asynchronous execution on an application server thread. The work may be performed in a transaction that the connector imports. The work manager may dispatch a free thread and set up an execution context for the work instance. The work manager may find the security inflow context as one of the inflow contexts and invoke the setupSecurityContext method. The connector adds the relevant callbacks e.g. one or more of CallerPrincipalCallback GroupPrincipalCallback and PasswordValidationCallback . The connector then calls a handle method e.g. CallbackHandler.handle . The application server then invokes the callback methods retrieves the identity information and sets the identity for the work instance according to the identity information. The work manager then invokes a run method to execute the work instance with the established identity. When a message is delivered to the message endpoint by the connector in the context of a work instance the security context that is set up for that message delivery is inherited from the security context set in the work instance. In other words as in transaction inflow all message deliveries that are delivered to endpoints within a single work instance are processed under the same security identity.

While the system is described herein by way of example for several embodiments and illustrative drawings those skilled in the art will recognize that the system is not limited to the embodiments or drawings described. It should be understood that the drawings and detailed description thereto are not intended to limit the system to the particular form disclosed but on the contrary the intention is to cover all modifications equivalents and alternatives falling within the spirit and scope of the present system as defined by the appended claims. The headings used herein are for organizational purposes only and are not meant to limit the scope of the description or the claims. As used throughout this application the word may is used in a permissive sense i.e. meaning having the potential to rather than the mandatory sense i.e. meaning must . Similarly the words include including and includes mean including but not limiting to.

Embodiments of a method and apparatus for establishing a security inflow contract between a work initiating system such as an Enterprise Information system EIS and a work performing system such as an application server are described. Embodiments may provide a portable generic security contract between an EIS connector and an application server that enables the connector also referred to as a resource adapter to establish security information while submitting a work instance for execution to a work manager and while delivering messages to message endpoints residing in the application server. Embodiments may be implemented according to a security inflow context model that enables a security context to flow from an EIS to a connector and on to a work manager or message endpoint and to affect the message inflow within a work instance such that work instance tasks are executed within the context of an established identity. By enabling all activities of a work instance that is submitted by a connector including delivering messages to a message endpoint to be performed in the context of an established identity embodiments may insure that all interactions between an application server and an EIS connector are secure and may prevent unauthorized access to application components deployed in an application server.

While embodiments of a method and apparatus for establishing a security inflow contract between an EIS and an application server are generally described in relation to Java EE environments and the Java EE Connector Architecture it is to be noted that embodiments of the method for establishing a security inflow contract between an EIS and an application server may be adapted for use in other environments or according to other connector or connection architectures generally speaking the security inflow context model may be used in or adapted for establishing security contracts between any two servers or between a server and a client according to various connector or connection architectures.

Embodiments of a security inflow contract may provide one or more of but not limited to the following 

The following describes a security inflow model that may be implemented by some embodiments and references elements of . Referring to the connector performs EIS sign on and secure association with the EIS in an EIS specific manner. In one embodiment the security inflow model as described herein does not specify any particular scheme or configuration to perform EIS sign on and establish such secure associations.

Referring to in one embodiment the security inflow contract between the connector and the application server may leverage a generic inflow context mechanism by describing a portable inflow context security inflow context that may be provided by the connector while submitting a work for execution.

Submitting a work instance without specifying the security contextual information in which the work has to be executed in may have drawbacks related to application security including one or more of but not limited to the following 

An embodiment of the security inflow contract provides a portable mechanism for the connector to pass security context information to the application server . This security inflow context enables an EIS connector to flow in security context information while submitting a work to a work manager for execution. All activities that happen as part of the work instance including message deliveries to message endpoints may then occur in the context of an established identity thus avoiding drawbacks such as those listed above and extending the end to end security model for applications such as Java EE applications to include the work execution and message inflow aspects.

In one embodiment a connector submits a work instance that implements an inflow context provider method e.g. InflowContextProvider to a work manager . The connector includes a concrete implementation of a security inflow context as one of the inflow contexts it wants to be established as the execution context of the work instance.

When one of the free threads from the application server s thread pool picks up the work instance for execution the application server establishes the security context information described in the security inflow context before executing the work instance.

When a message is delivered to a message endpoint instance by the connector in the context of a work instance the security context that is set up for that message delivery is inherited from the security context set in the work instance. In other words all message deliveries that are delivered to endpoints within a single work instance are processed under the same security identity.

When a connector flows in an identity to be used by the application server the identity may or may not belong to the EIS security domain and the caller principal to be established for a message driven bean or a message endpoint is required to be an identity of the application server s security domain. Therefore the EIS integration scenario may have choices related to establishing the caller identity. For example in one or more embodiments either of the following example cases related to establishing the caller identity may exist 

Connector serves as the integration point between an EIS and application server . Note that a connector may also be referred to as a resource adapter. Application server is an example of a work performing system. Connector may for example be provided by the EIS vendor or provided by a third party vendor. Connector serves as the point of contact between application components application server and EIS . Connector may communicate with EIS and application server based on contracts e.g. various contracts as specified by the Java EE Connector Architecture . For example the contracts may specify how a system external to the Java EE platform can integrate with systems within the Java EE platform by supporting basic functions that are handled by the Java EE container e.g. application server .

For example a work management contract may enable a connector to do work e.g. monitor network endpoints call application components and so on by submitting work instances to an application server for execution. The application server dispatches threads to execute submitted work instances. This allows the connector to avoid creating or managing threads directly and allows application server to efficiently pool threads and have control over the run time environment.

As another example a transaction inflow management contract may enable connector to propagate an imported transaction to application server . The message inflow management contract enables connector to asynchronously deliver messages to message endpoints residing in application server independent of the specific messaging style messaging semantics and messaging infrastructure used to deliver messages. This contract also serves as the standard message provider pluggability contract that allows a wide range of message providers e.g. Java Message Service JMS integrated with JMS compatible Message Oriented Middleware MoM Java API for XML Messaging JAXM and so on to be plugged into any Java EE compatible application server with a connector .

Application server may be implemented as any server that hosts an application programming interface API to expose business logic and business processes for use by other applications. For example in some embodiments application server may refer to a Java EE application server. Example implementations include WebLogic Server JBoss WebSphere Application Server and Sun GlassFish Enterprise Server. Application server may host servlets and JavaServer pages as well as business logic built into Enterprise JavaBeans EJB .

A message endpoint serves as a boundary between the messaging API and application code such as a message driven bean MDB or a web service. Note that the connector contracts may not provide a direct mechanism for a connector to deliver to a web service. However an MDB may call a web service. Embodiments of the methods and apparatus described herein provide a technique for an EIS connector to flow in security context information execute a work instance and call methods on a message endpoint interface in the context of an established identity. Using an embodiment all message deliveries that are delivered to multiple message endpoints within a single work instance may be delivered in the context of a single security identity as defined within the security context originating at the EIS.

Work manager resides in application server domain and provides an abstraction from the lower level APIs that enable an application to access a container managed thread. Work manager provides a mechanism to join various concurrent work items so an application can programmatically add the dependency of work completion as a condition for starting other tasks. Work manager receives a work instance and the work instance may include one or more tasks. Work manager may execute work either synchronously or asynchronously using application server threads. The transaction inflow support enables the processing to take place in a transaction that connector imports into the server .

An application component may be business logic that may be executed as part of a web application in one embodiment. A web application may be an application accessed via web browser over a network such as the Internet or an intranet. Application component may for example be located on a server and is accessible by application server . Examples of the business logic include web mail online retails sales online auctions wikis discussion boards weblogs and the like. Note that an application component may be located on application server . Note also that application component may be part of other types of applications in other embodiments.

Some or all elements shown in may be located on the same physical server or may be on separate physical servers and communicate with one another through a network such as the Internet or an intranet. illustrates an example of a computer system on which various elements shown in and in the other Figures may be implemented. In some embodiments there may be other components not shown in . For example application server may be connected to one or more backend databases storage systems and so on.

A generic inflow context is a technique that enables a connector to provide additional contextual information while a work instance is executed by an application server s work manager . In one embodiment a generic inflow context may be leveraged to define a security inflow context as an inflow context that a connector may use to send a security context while submitting a work instance for execution. In some embodiments the security inflow context may be implemented as a class which implements an inflow context interface. The following is an example class definition for such a class and is not intended to be limiting 

In one embodiment connector may provide a custom implementation of the SecurityInflowContext abstract class and an implementation for the method setupSecurityContext to setup the security context for the work instance being submitted.

As indicated at connector may construct a work instance that includes or indicates the tasks included in the message from EIS . Connector implements an inflow context provider and specifies that the work must be executed within the security context. Connector may schedule the work instance to be executed by application server e.g. via work manager .

As indicated at application server e.g. work manager receives the work instance. Application server then searches the inflow contexts and finds an inflow context of type security inflow context. Subsequently the application server sends a reference to a callback handler to the connector. In one embodiment this may be accomplished by calling the setupSecurityContext method of a SecurityInflowContext object.

As indicated at the connector invokes the callback handler to set the security context for the work instance. In one embodiment this may be accomplished by invoking the callback handler and sending the callbacks to application server . Application server may invoke the callbacks and establish the caller identity.

As indicated at connector may construct a work instance with a security inflow context. The security inflow context provides a portable mechanism for connector to pass security context information to application server . All activities that happen as part of the work instance including message deliveries to message endpoint occur in the context of the established identity. Connector includes an implementation of security inflow context as one of the inflow contexts to be established as the execution context of the work instance.

As indicated at connector submits the work instance to the work manager of application server . Connector may schedule work with work manager for synchronous or asynchronous execution on an application server thread. The work may be performed in a transaction that connector imports.

As indicated at work manager dispatches a free thread and sets up an execution context for the work instance. Work manager finds the SecurityInflowContext as one of the inflow contexts and invokes the setupSecurityContext method as indicated at . Connector adds the relevant callbacks e.g. CallerPrincipalCallback GroupPrincipalCallback and PasswordValidationCallback . Connector then calls a handle method e.g. CallbackHandler.handle as indicated at . Application server then invokes the callback methods retrieves the identity information e.g. see the descriptions of case 1 and case 2 elsewhere herein and sets the identity for the work instance according to the identity information.

As indicated at work manager then invokes the run method to execute the work instance with the established identity. When a message is delivered to message endpoint by connector in the context of a work instance the security context that is set up for that message delivery is inherited from the security context set in the work instance. In other words as in transaction inflow all message deliveries that are delivered to endpoints within a single work instance are processed under the same security identity.

As indicated at connector may construct a work instance and include a SecurityInflowContext. As indicated at connector may submit the work instance for execution to work manager on application server . As indicated at when the work is accepted the work manager may dispatch a free thread and setup an execution context for the work instance.

Application server may then call setupSecurityContext and pass a reference to a callback handler as an argument as indicated at . Connector may create one or more caller principal callback instances see element and add any relevant callbacks see element . The callback handler of application server may invoke the callbacks e.g. CallerPrincipalCallback to get the identity as indicated at . In the scenario example described above as Case 2 when the callback is invoked a translation of identities from the EIS security domain to the application security domain may occur. See shaded area at element of . In either scenario e.g. case 1 or case 2 the identity information may be returned to application server and the caller principal may be established as indicated at . The run method of the work instance is then invoked and the tasks included in the work instance are invoked in the context of the security context.

In one embodiment while setting the execution context of a work instance the work manager establishes the security context for the work instance when it encounters an InflowContext instance implementing SecurityInflowContext.

In one embodiment for setting the security context of a work instance application server may call a setupSecurityContext method of class SecurityInflowContext implementation provided by the connector. In some embodiments the following conditions may be applicable to the application server provider while calling the setupSecurityContext method.

In one embodiment the handler argument may not be null. In some embodiments the callback handler passed to setupSecurityContext may support the following callbacks 

In some embodiments other callbacks may be supported. For example one or more of the following callbacks may be supported by a CallbackHandler implementation 

In one embodiment the executionSubject argument may not be null and may not be read only. The connector work implementation may populate the executionSubject with the principals and credentials that may be flowed in to application server .

In one embodiment the serviceSubject argument may be null. If serviceSubject is not null it may not be read only. The serviceSubject is used by the work instance to retrieve principals and credentials necessary to establish a connection to the EIS in the case where mutual authentication is required. The serviceSubject may contain the credentials of the application server or the SecurityInflowContext implementation may collect the service credentials as necessary by using the CallbackHandler passed to it.

In one embodiment when the setupSecurityContext method is called by application server connector may perform one or more of but not limited to the following actions to establish caller identity information for a work instance 

In one embodiment on successful return of setupSecurityContext the container may use the modified executionSubject modified as a result of handling the various callbacks to establish the caller identity of the work instance.

In one embodiment on successful return from setupSecurityContext the work manager may ensure that the work is set up to be executed with the established security identity. Any subsequent message endpoint deliveries in that work instance to message driven beans MDBs for instance should have the security context established appropriately. When MDBs are the message endpoints MessageDrivenContext.getCallerPrinicipal may return the principal corresponding to the established security identity and MessageDrivenContext.isCallerInRole may return the result of testing the established security identity for role membership.

In some embodiments as part of establishing caller identity for a work instance one or more of the following callbacks may be employed by a connector 

When connector flows in an identity to be used by application server the identity may or may not belong to the EIS security domain and may or may not belong to the application server security domain. In other words the EIS security domain and the application security domain may or may not be the same. Therefore the EIS integration scenario may have choices related to establishing the caller identity. In some embodiments identity mapping translation or synchronization may need to be performed to determine the correct identity context for executing a work instance. The following describes two case scenario examples related to establishing the caller identity according to one or more embodiments and is not intended to be limiting. Note that a container may represent either the application server or an application component container.

In case 1 according to one or more embodiments connector flows in an identity in the application server s domain e.g. application server . Application server sets the caller principal e.g. the security identity under which a message endpoint method is executed according to the identity flowed in from connector . The caller principal is set to the identity and the work instance is executed using that identity.

As described above in case 1 connector flows in an identity that is in the application server security domain. In this case when setupSecurityContext is invoked connector may use the CallerPrincipalCallback to set the application server representation of the caller principal. The CallerPrincipalCallback establishes the caller principal associated with the invocation being processed by application server . If the caller principal is null the handler may establish an unauthenticated caller principal.

Connector may use the GroupPrincipalCallback to establish a representation of the group principals included in the Subject. If a null value is passed to the groups argument the handler may not establish the caller principal as found in the Subject. Otherwise the handler s processing of this callback is additive yielding the union without duplicates of the principals existing within the Subject and those created with the names occurring within the argument array. The CallbackHandler will define the type of created principals.

In one embodiment for case 1 situations the caller principal may be set by connector through the CallerPrincipalCallback and GroupPrincipalCallback.

On successful return from setupSecurityContext application server may ensure that the work instance is set up to be executed with the established security identity and any subsequent message endpoint deliveries must include the security identity in the work instance.

In case 2 according to one or more embodiments connector flows in an identity belonging to the EIS security domain and the identity does not exist in the application server security domain. In this case a translation may take place. The translation maps an identity in the EIS security domain to an identity in the application server security domain. In one embodiment a system administrator may be responsible for setting up an identity map database or translation process when connector is deployed. Any suitable method of mapping one identity to another identity may be used.

In case 2 scenarios the identity for the work instance may be included in the EIS security domain but not in the application server security domain. To handle case 2 scenarios a mapping or translation of EIS identities to application server identities must occur. In this case when connector is initially installed an administrator may establish a mapping or translation function. In some embodiments the translation may include certain rules. Thereafter when a callback is invoked e.g. CallerPrincipalCallback the mapping of the EIS identity to the application server identity occurs at that time. In this scenario the identity translation is invisible to application server . In other words from the point of view of connector the callback works the same in Case 1 and Case 2 scenarios.

During the inflow of the EIS Subject the mapping of one or more principals on the path may be required before delivering to the message endpoint or MDB. In one embodiment these translations from the identity of initiating caller resource principal to an application server principal may be one of the following types as defined for Java EE connectors 

For example in the case of Principal Mapping an employee may be identified by a user ID and password basic authentication in an EIS. The resource principal may need to be mapped to a Kerberos principal that is relevant in the application server security domain before delivering the method invocation to the MDB. In the case of message endpoints realized as MDBs a MessageDrivenContext.getCallerPrincipal method may return the principal that is the result of the mapping and not the original EIS principal. In this example getCallerPrincipal would return the Kerberos principal.

In one embodiment the management of the security infrastructure to enable principal mapping or other schemes listed above may be performed by the System Administrator role and the mechanism through which a container enables this mapping is beyond the scope of this document.

In one embodiment the application server may provide tools to set up Caller Identity information for a work message endpoint container. This may include support for mapping of LIS resource principals to Caller Principals in the application server security domain.

In one embodiment to handle Principal Mapping scenarios described above the application server may provide a CallbackHandler that can be configured to perform Principal Mapping during its handling of the CallerPrincipalCallback and GroupPrincipalCallbacks. Embodiments may not define interfaces for Principal Mapping service and CallbackHandler configuration. The deployer may use application server specific tools and techniques to enable this mapping.

In case 2 according to one or more embodiments connector flows in an identity belonging to the LIS security domain and the identity does not exist in the application server security domain. In this case a translation may take place. The translation maps an identity in the LIS security domain to an identity in the application server security domain. In one embodiment a system administrator may be responsible for setting up an identity map database or translation process when connector is deployed. Any suitable method of mapping one identity to another identity may be used.

In case 2 scenarios the identity for the work instance may be included in the LIS security domain but not in the application server security domain. To handle case 2 scenarios a mapping or translation of LIS identities to application server identities must occur. In this case when connector is initially installed an administrator may establish a mapping or translation function. In some embodiments the translation may include certain rules. Thereafter when a callback is invoked e.g. CallerPrincipalCallback the mapping of the EIS identity to the application server identity occurs at that time. In this scenario the identity translation is invisible to application server . In other words from the point of view of application server the callback works the same in Case 1 and Case 2 scenarios.

System memory is one example of a computer accessible medium that may be configured to store program instructions and or data accessible by processor . In various embodiments system memory may be implemented using any suitable memory technology such as static random access memory SRAM synchronous dynamic RAM SDRAM nonvolatile Flash type memory or any other type of memory. Program instructions and or data may also be stored for example on a hard disk. In the illustrated embodiment program instructions and data implementing desired functions such as those described above for implementing enterprise information system connector and application server as well as any of the methods and or components shown in are shown stored within system memory as program instructions and data storage respectively. In other embodiments program instructions and or data may be stored upon different types of computer accessible media or on similar media separate from system memory or computer system . Generally speaking a computer accessible medium may include storage media or memory media such as magnetic or optical media e.g. disk or DVD CD ROM volatile or non volatile media such as RAM e.g. Synchronous Dynamic RAM SDRAM Double Data Rate RAM DDR RAM RAMBUS Dynamic RAM RDRAM Static RAM SRAM etc. Read Only Memory ROM . Program instructions and data stored via a computer accessible medium may be transmitted by transmission media or signals such as electrical electromagnetic or digital signals which may be provided via a communication medium such as a network and or a wireless link such as may be implemented via network interface .

Network interface may be configured to allow data to be exchanged between computer system and other devices attached to a network such as other computer systems or between nodes of computer system . In various embodiments network interface may support communication via wired or wireless general data networks such as any suitable type of Ethernet network for example via telecommunications telephony networks such as analog voice networks or digital fiber communications networks via storage area networks such as Fibre Channel Storage Area Networks SANs or via any other suitable type of network and or protocol.

Input output devices and respectively may in some embodiments include one or more display terminals keyboards keypads touchpads scanning devices voice or optical recognition devices or any other devices suitable for entering or retrieving data by one or more computer system . Multiple input output devices and may be present in computer system or may be distributed on various nodes of computer system . In some embodiments similar input output devices may be separate from computer system and may interact with one or more nodes of computer system through a wired or wireless connection such as over network interface .

Memory may include program instructions configured to implement at least a portion of embodiments of enterprise information system connector and application server as described herein and data storage comprising various documents tables databases etc. accessible by program instructions . In one embodiment program instructions may include software elements of enterprise information system connector and application server illustrated in the Figures and data storage may include data used in embodiments of the security inflow context method. In other embodiments different software elements and data may be included. Program instructions and or data may be stored for example on various types of memory including hard disks.

Those skilled in the art will appreciate that computer system is merely illustrative and is not intended to limit the scope of the system as described herein. In particular the computer system and devices may include any combination of hardware or software that can perform the indicated functions including computers network devices internet appliances PDAs mobile phones pagers etc. Computer system may also be connected to other devices that are not illustrated or instead may operate as a stand alone system. In addition the functionality provided by the illustrated components may in some embodiments be combined in fewer components or distributed in additional components. Similarly in some embodiments the functionality of some of the illustrated components may not be provided and or other additional functionality may be available.

Those skilled in the art will also appreciate that while various items are illustrated as being stored in memory or on storage while being used these items or portions of them may be transferred between memory and other storage devices for purposes of memory management and data integrity. Alternatively in other embodiments some or all of the software components may execute in memory on another device and communicate with the illustrated computer system via inter computer communication. Some or all of the system components or data structures may also be stored e.g. as instructions or structured data on a computer accessible medium or a portable article to be read by an appropriate drive various examples of which are described above. In some embodiments instructions stored on a computer accessible medium separate from computer system may be transmitted to computer system via transmission media or signals such as electrical electromagnetic or digital signals provided via a communication medium such as a network and or a wireless link. Various embodiments may further include receiving sending or storing instructions and or data implemented in accordance with the foregoing description. Accordingly the present system may be practiced with other computer system configurations.

The various methods as illustrated in the Figures and described herein represent example embodiments of methods. The methods may be implemented in software hardware or a combination thereof. The order of method may be changed and various elements may be added reordered combined omitted modified etc. Additionally it is intended that any inconsistency in description between this document and any document incorporated within this document be resolved in favor of this document.

Various modifications and changes may be made as would be obvious to a person skilled in the art having the benefit of this disclosure. It is intended that the system embrace all such modifications and changes and accordingly the above description to be regarded in an illustrative rather than a restrictive sense.

