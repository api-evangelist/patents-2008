---

title: Method and system for selecting one or more integrated circuit card interface devices
abstract: A method for selecting at least one smart card reader from a list of smart card readers includes receiving a parameter indicative of a reader selection criteria, setting an environment variable that specifies a reader filtering library, executing an application that uses a smart card access library, and interposing the reader filtering library between the application and the smart card access library.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08533747&OS=08533747&RS=08533747
owner: Oracle America, Inc.
number: 08533747
owner_city: Redwood City
owner_country: US
publication_date: 20081020
---
Environment variables are a set of dynamic values that may affect the way running processes will behave on a computer. In Unix and Unix like systems each process has its own private set of environment variables. By default when a process is created it inherits a duplicate environment of its parent process except for explicit changes made by the parent when it creates the child. Alternatively from shells such as bash an environment variable may be changed for a particular command invocation by for example indirectly invoking it via env or using the ENVIRONMENT VARIABLE VALUE notation.

Regular expressions are a context independent syntax that may represent a wide variety of character sets and character set orderings where these character sets are interpreted according to the current locale. While many regular expressions may be interpreted differently depending on the current locale many features such as character class expressions provide for contextual invariance across locales.

In computing regular expressions may provide a concise and flexible means for identifying strings of text of interest such as particular characters words or patterns of characters. Regular expressions are written in a formal language that may be interpreted by a regular expression processor a program that either serves as a parser generator or examines text and identifies parts that match the provided specification.

A method for selecting at least one smart card reader from a list of smart card readers includes receiving a parameter indicative of a reader selection criteria setting an environment variable that specifies a reader filtering library and executing an application that uses a smart card access library. The smart card access library presents smart card access infrastructure to the application. The method also includes interposing the reader filtering library between the application and the smart card access library to filter the list according to the reader selection criteria to select at least one of the smart card readers.

A method for selecting at least one smart card reader from a list of smart card readers includes receiving a first environment variable indicative of a reader selection criteria setting a second environment variable that specifies a reader filtering library and executing an application that uses a smart card access library that implements a smart card API. The method also includes proxying the reader filtering library between the application and the smart card access library to filter the list according to the reader selection criteria to select at least one of the smart card readers.

A system for selecting at least one smart card reader from a list of smart card readers includes one or more computers configured to receive a parameter indicative of a reader selection criteria set an environment variable that specifies a reader filtering library and execute an application that uses a smart card access library that implements a smart card API. The one or more computers are further configured to interpose the reader filtering library between the application and the smart card access library to filter the list according to the reader selection criteria to select at least one of the smart card readers.

While example embodiments in accordance with the invention are illustrated and disclosed such disclosure should not be construed to limit the invention. It is anticipated that various modifications and alternative designs may be made without departing from the scope of the invention.

Referring now to an embodiment of an Integrated Circuit Card environment includes a plurality of Integrated Circuit Cards ICCs each inserted into a respective interface device IFD . The IFDs are in communication with one or more computers .

Each of the ICCs or smart cards includes a credit card sized plastic case with an embedded microprocessor chip . In certain embodiments the microprocessor chip may have the ability to store large amounts of data carry out on card functions e.g. encryption and mutual authentication and interact intelligently with an IDF . Of course in other embodiments the ICCs may instead include a memory chip. The ICCs of conform physically and electrically to the ISO 7816 1 7816 2 and 7816 3 standards. In other embodiments the ICCs may be contactless and communicate with the IFDs using for example radio frequencies. Any suitable ICC configuration however may be used. For example the ICCs may take the form of fobs subscriber identification modules used in GSM mobile phones or USB based tokens.

As known in the art the ICCs may be used as digital identification cards. In this application the cards are used for authentication of identity. A common use example is in conjunction with a PKI. An ICC may store an encrypted digital certificate issued from the PKI along with any other relevant or needed information about the card holder.

The IFDs or smart card readers are physical interface devices through which the ICCs may communicate with the one or more computers . The IFDs may provide DC power to the microprocessor chips . Also the IFDs may provide clock signals which step the program counters of the microprocessor chips as well as an I O line through which digital information may be passed between the IFDs and the ICCs .

The IFDs may have one or more slots to read the ICCs and may also support some extended capabilities such as display or PINpad. The IFDs may use a variety of physical access ports to the one or more computers . Typically these will be the keyboard port a serial line port a PC Card PCMCIA or the Universal Serial Bus USBport . In some embodiments the IFDs may conform to the ISO 7816 1 7816 2 and 7816 3 standards. In addition the IFDs may support synchronous cards or the ISO IEC 14443 or 15693 protocol for contactless cards.

The one or more computers of include a plurality of Interface Device Handlers IFD Handlers and an ICC Resource Manager . The IFD Handlers may encompass the software to map the native capabilities of the IFDs to the IFD Handlers . In certain embodiments the IFD Handlers are low level software within the one or more computers that support the specific I O channels used to connect the IFDs to the one or more computers and may provide access to specific functionality of the IFDs .

The IFDs and IFD Handlers may handle the protocols necessary for the ICCs and map Application Data Units APDUs given by an application to the corresponding ICC commands. For contactless ICCs implementation of the IFDs and IFD Handlers may emulate basic functional requirements such as card insertion and removal events etc. The IFDs and IFD Handlers may also take care of the initialization selection and communication processes with the ICCs . In different embodiments the IFDs may vary in their implementations. For the simplest devices an IFD may provide little more than electrical connectivity and I O signal passing between the ICC and the one or more computers . In more complex configurations for example an IFD may support the data link layer protocols defined in the ISO 7816 3 standard.

The ICC Resource Manager may be responsible for managing ICC relevant resources and for supporting controlled access to the IFDs and through them individual ICCs . The ICC Resource Manager may perform several access management functions for the ICCs and IFDs . First the ICC Resource Manager may be responsible for identification and tracking of resources. This may include tracking installed IFDs and making this information accessible to other applications tracking known ICC types along with their associated service providers discussed below and supported Interfaces and making this information accessible to other applications and tracking ICC insertion and removal events to maintain accurate information on available ICCs within the IFDs . Second the ICC Resource Manager may be responsible for controlling the allocation of IFDs and resources and hence access to ICCs across multiple applications. In certain embodiments the ICC Resource Manager may do this by providing mechanisms for attaching to specific IFDs in shared or exclusive modes of operations. Additionally the ICC Resource Manager may support transaction primitives on access to services available within a given ICC . This may be important as some ICCs are single threaded devices which may require execution of multiple commands to complete a single function. Transactions may allow multiple commands to be executed without interruption ensuring that intermediate state information is not corrupted.

The one or more computers may further include service providers e.g. ICC Service Provider ICCSP and IFD Service Provider IFDSP and one or more ICC Aware Applications . The service providers may encapsulate functionality exposed by a specific ICC or IFD and make it accessible through high level programming interfaces. These interfaces may be enhanced and extended to meet the needs of specific application domains. In certain embodiments the service providers may be client server components. Any suitable configuration however may be used.

The ICCSP interfaces ICC functionality. As known in the art there may be several different types of ICCSP . As an example ICC Operating System Service Providers ICCOSSPs may encapsulate access to functionality from a specific ICC Operating System ICCOS through high level programming interfaces. An ICCOSSP may need to be introduced to the ICC Resource Manager to map it to a particular ICCOS. There may be a one to one relationship between the ICCs and their ICCOSSP. As another example Application Domain Service Providers ADSPs interface a particular on card application. This may differentiate the ADSPs from other ICCSP which interface to an ICC type or ICCOS. As yet another example Application Domain Service Provider Locators ADSPL allow dynamic assignment of certain ICCSP because the static linking between ICC Type and available ICCSPs as performed by the ICC Resource Manager may not be possible in a multi application card environment. The ADSPL may be loaded by the ICC Resource Manager and may allow ICC Resource Manager to provide off card applications with for example a way of listing on card applications and a way of retrieving a reference to the appropriate ADSP implementation related to a chosen on card application.

Generally the ICCs may be identified by the ATR String they present to the off card system. All information regarding the identification of an ICC may be available on the ICC itself. Identity information is stored in an ICC Info Structure or extended ATR. The information may be placed for example in a file or applet depending on the ICC technology. The ICCs may include a command in the ATR s historical bytes which may be used by the off card system e.g. the ICC Resource Manager to retrieve the ICC Info Structure.

In embodiments having this type of enhanced ICC the ICC Resource Manager may interpret the historical bytes of the ATR send the included command back to the ICC and retrieve the ICC Info Structure. The information from this structure may then be used by the ICC Resource Manager to identify the ICC .

When one of the ICCs is for example inserted into one of the IFDs the ICC Resource Manager may retrieve the ICC Info get the ADSPL reference from the ICC Info Structure and load the ADSPL. If appropriate the ICC Resource Manager may retrieve the list of on card applications from the ADSPL. The off card application may get this list from the ICC Resource Manager . It may then choose from this list the appropriate on card application and load the corresponding ADSP to interact with the on card application.

If extended IFD capabilities are available they may be presented to the ICC Aware Applications or ICCSP through high level programming interfaces implemented in the IFDSP . The IFDSP may encapsulate access and interface with IFD functionality in the same way the ICCSP interface with ICC functionality.

For each Application Context which may define some type of functionality the IFDSP may provide different interfaces. The interface implementation by the IFDSP may interact with the implementation of the IFD Handler in a mode that is transparent to the ICC Resource Manager . In certain embodiments the IFDSP may be composed of modular components. As such the services associated with an IFD may evolve as in an IFD with download capability.

The ICC Aware Application may be an arbitrary software program within the operating environment of the one or more computers that wants to make use of the functionality provided by one or more of the ICCs . In the embodiment of the ICC Aware Application is running as a process within a multi user multiprocess multiple threaded and multiple device environment. Application requests may be mapped to the ICCs .

In certain circumstances the ICC Aware Application may assume that only one IFD is available or may select the first IDF presented by an ICC library. For example as illustrated in each of the IFDs has an ICC . Only one of the ICCs may be viable for logging in. If the incorrect IFD is selected an attempt to log in may be unsuccessful.

Referring now to numbered elements that differ by 100 relative to the numbered elements of have similar descriptions to the numbered elements of . Another embodiment of an Integrated Circuit Card environment may be presented as a peer to peer communication protocol. For example data may be exchanged between an IFD and ICC Communication Controller as controlled by the ISO 7816 protocol. APDUs may be passed between an ICC Service Provider and an ICC Operating System also controlled by the ISO protocol . Service requests may be passed between an ICC Aware Application and an ICC Application . Of course other configurations are also possible.

Referring now to a user specifies a reader selection criteria in for example an environment variable as a regular expression as indicated at . The regular expression may determine which IFDs from among a list of available IFDs will be matched and selected for further processing. The unmatched IFD names in the list may be discarded. 

As indicated at another environment variable e.g. LD PRELOAD is set to indicate the location directory path and file name in the file system where a filtering library is located. Other suitable techniques however may be used.

As indicated at an application is started that loads for example the PC SC lite library. Any suitable library however may be loaded. As known to those of ordinary skill this library presents an ICC access Application Programming Interface API via which the IFDs may be located and accessed and through which the ICCs may be communicated with programmatically.

As indicated at the filtering library is interposed between the application and the ICC access library. In certain embodiments when the application is launched the filtering library specified in the LD PRELOAD environment variable is loaded by the operating system before any of the libraries used by the application are loaded. This filtering library or interposing library may be librdrselect.so.1 which defines a single function named SCardListReaders . A function by the same name SCardListReaders is also defined in the ICC library libpcsclite.so.1 a library that implements and exposes the PC SC lite API . Because librdrselect.so.1 the interposing library and libpcsclite.so.1 the ICC library being interposed upon both expose a function of the same name i.e. SCardListReaders the interposing library s differing implementation of the identically named function will be called anytime the application invokes SCardListReaders instead of the ICC library s implementation of SCardListReaders getting called due to library interpositioning managed by the operating system in a way transparent to the application .

When such a preloaded library s function intercepts a function call and then the preloaded function invokes the function it intercepts in this example when SCardListReaders defined in librdrlist.so.1 invokes SCardListReaders in libpcsclite.so.1 the intercepting function may be said to be interposing or proxying because the interposer is effectively juxtaposed between the calling application and the application s intended target library in this case the ICC library . Such an interposing library function may be in a position to collect analyze filter process and modify data that flows between the application and the intercepted function.

When the interposing SCardListReaders function is called it may perform a service of filtering the list of IFD names returned by the original SCardListReaders function in the ICC library according to the following example algorithm 

1. The environment variable LIBRDRSELECT is read by the interposer and the regular expression that determines the reader selection criteria is extracted from it.

2. The interposer collects the SCardListReaders function parameters sent by the application and uses them as arguments in a forward call to SCardListReaders in the ICC library.

3. The ICC library returns a list of IFDs to the immediate caller which is in this example the interposer library.

4. The list of reader names returned from SCardListReaders in the ICC library is iterated through by SCardListReaders in the interposer library in a loop to find those names that match the regular expression selection criteria described in 1 by invoking a function that processes regular expressions against a string returning a match or non match indication. 5. The list of matching IFDs i.e. the filtered IFD list is returned to the application which is the immediate caller of the interposer library.

As apparent to those of ordinary skill the algorithms disclosed herein are explained within the context of a UNIX system. Of course the algorithms may be implemented in other suitable operating system environments. Furthermore the algorithms may be deliverable to a processing device in many forms including but not limited to i information permanently stored on non writable storage media such as ROM devices and ii information alterably stored on writeable storage media such as floppy disks magnetic tapes CDs RAM devices and other magnetic and optical media. The algorithms may also be implemented in a software executable object. Alternatively the algorithms may be embodied in whole or in part using suitable hardware components such as Application Specific Integrated Circuits ASICs state machines controllers or other hardware components or devices or a combination of hardware software and firmware components.

While embodiments of the invention have been illustrated and described it is not intended that these embodiments illustrate and describe all possible forms of the invention. Rather the words used in the specification are words of description rather than limitation and it is understood that various changes may be made without departing from the spirit and scope of the invention.

