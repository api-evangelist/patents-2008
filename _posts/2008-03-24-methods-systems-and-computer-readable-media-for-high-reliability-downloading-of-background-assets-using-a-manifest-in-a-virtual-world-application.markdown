---

title: Methods, systems, and computer readable media for high reliability downloading of background assets using a manifest in a virtual world application
abstract: The subject matter described herein includes methods, systems, and computer readable media for predictively downloading background assets with file-not-present tolerance in a virtual world application. According to one aspect for high reliability downloading of background assets using a manifest in a virtual world application, the method includes compiling a manifest of assets potentially needed for execution by a first instance of a virtual world application (VWA), wherein each of the assets is associated with a priority. Using the manifest and while executing the VWA, assets listed in the manifest are downloaded based on the priorities indicated in the manifest. The VWA is executed for displaying a virtual world by loading at least a subset of the assets listed in the manifest.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08448190&OS=08448190&RS=08448190
owner: MFV.com, Inc.
number: 08448190
owner_city: Cary
owner_country: US
publication_date: 20080324
---
The subject matter described herein relates to downloading assets for display by a virtual world application. More particularly the subject matter described herein relates to methods systems and computer readable media for high reliability downloading of background assets using a manifest in a virtual world application.

A virtual world is a computer simulation of an environment referred to as a virtual environment that allows a user to interact with the virtual environment through the use of a variety of interfaces. A virtual world is typically experienced by a user via a display and speakers so that visual and auditory elements are represented to the user. However virtual worlds may provide other types of information such as haptic information i.e. force feedback to the user as well. Interaction with the virtual environment may be accomplished via manipulation of a conventional keyboard mouse combination or via a variety of other input devices such as gloves touchscreens microphones musical instruments dance mats etc. One example of a virtual world includes Second Life produced by Linden Research Inc. of San Francisco Calif.

In order to display a virtual world many different assets are displayed to the user by a virtual world application VWA . Virtual world assets may include for example 3 dimensional models textures sounds animations particle effects fonts maps or configuration files. When a VWA is executed it searches a locally accessible memory location for the assets needed in order to display the portion of the virtual world being viewed by the user. For example the VWA may load assets from a hard disk drive or other memory device local to the VWA before displaying the virtual world. However for online VWAs assets are not initially stored locally. Rather assets are stored in a remote location such as a database or web server.

One problem associated with conventional VWAs is that the process of downloading assets once it is determined that they are needed unnecessarily increases the time period between initializing the VWA and displaying the virtual world. A desirable feature of VWAs is for the virtual world to be displayed as soon as possible typically no longer than 3 minutes after initializing the VWA. Because conventional VWAs download assets on as as needed basis before displaying the virtual world the user may experience unsatisfactory delays in displaying the virtual world. This problem may be exaggerated in complex virtual worlds containing a large number and or variety of assets needed for displaying even small portions of the virtual world.

Another problem with conventional VWAs is that if an asset is needed for execution but has not yet been downloaded a conventional VWA may continue to operate thereby leading to undesirable behaviors. Because conventional VWAs may not perform correctly when a desired file is not present conventional VWAs may be said to lack file not present tolerance. For example a user via the user s avatar may approach a virtual building character or other object within a virtual world where the assets needed to display the object have not been downloaded. As a result the object cannot be immediately displayed until the assets have been downloaded. However because the virtual world may continue to be displayed the user may walk through or even past the object before it is displayed. Thus the user may fail to properly interact with the virtual world because of the lag time associated with downloading assets yet providing no indication to the user that a virtual object exists but has not yet been displayed.

Another problem is that it is difficult to modify an existing VWA for high reliability downloading of background assets when the VWA was not originally designed for this feature. For example because conventional VWAs expect that all assets will be locally available from the start complex software coding and debugging may be performed in order to retrofit a background asset downloading system onto a conventional VWA.

Accordingly in light of the above described difficulties there exists a need for improved methods systems and computer readable media for high reliability downloading of background assets using a manifest in a virtual world application.

The subject matter described herein includes methods systems and computer readable media for predictively downloading background assets with file not present tolerance in a virtual world application. According to one aspect a method for predictively downloading background assets includes compiling a manifest of assets potentially needed for execution by a first instance of a virtual world application VWA wherein each of the assets is associated with a priority. Using the manifest and while executing the VWA assets listed in the manifest are downloaded based on the priorities indicated in the manifest. The VWA is executed for displaying a virtual world by loading at least a subset of the assets listed in the manifest.

According to another aspect a system is described for high reliability downloading of background assets using a manifest in a virtual world application. The system includes one or more remote assets potentially needed for displaying a virtual world and a manifest listing at least a subset of the remote assets wherein each of the assets is associated with a priority. A background asset acquisition BAA module downloads assets based on the manifest. A first instance of a virtual world application VWA displays a virtual world by loading at least a subset of the assets listed in the manifest.

The subject matter described herein may be implemented as a computer readable medium having stored thereon program instructions that when executed by a processor of a computer perform steps. Exemplary computer readable media suitable for implementing the subject matter described herein include disk memory devices chip memory devices application specific integrated circuits and programmable logic devices. In addition a computer readable medium that implements the subject matter described herein may be located on a single device or computing platform. Alternatively the subject matter described herein may be implemented on a computer readable medium that is distributed across multiple devices or computing platforms.

The subject matter described herein includes methods systems and computer readable media for predictively downloading background assets with file not present tolerance in a virtual world application. According to one aspect a system according to the subject matter described herein may be implemented as hardware software and or firmware components executing on one or more components of a system or device configured to predictively download background assets with file not present tolerance in a virtual world application.

Virtual world application may include a computer program containing instructions that when executed by processor display and manage a virtual world. Displaying the virtual world may include loading one or more assets associated with objects characters or environmental effects in the virtual world. Managing the virtual world may include for example character creation user authentication software update communications. Execution of VWA may include receiving input from keyboard and displaying images and sounds via display . In this way a user may navigate a 3 dimensional virtual environment by controlling an avatar associated with the user and interacting with various virtual objects generated by VWA .

It is appreciated that computer may include a personal computer PC for executing software code associated with displaying the virtual world to the user. This software may include but is not limited to an operating system video and sound drivers and VWA . VWA may include any files necessary for rendering a virtual world including but not limited to dynamic link libraries maps textures videos sounds and executable files. Moreover the responsibility for displaying a virtual world may be distributed between computer and one or more remotely located virtual world servers. Computer may include an input device such as a mouse microphone touchscreen keyboard or any other suitable input means for interacting with a virtual world. Computer may also include an output device such as a display printer and or speakers for representing the virtual world to the user. Processor and memory may be configured to execute software code suitable for generating a virtual world including but not limited to an operating system a web browser and VWA .

Manifest may include a listing of one or more assets needed by VWA for executing a virtual world. For example assets may include 3 dimensional model data textures sounds animations particle effects fonts maps and other settings. Assets listed in the manifest may be associated with a priority used to determine the order in which to download the assets listed in the manifest. In one embodiment a priority may be explicitly associated with the assets listed in manifest . For example manifest may list assets using a comma delineated format understood by BAA . An explicit priority may be associated with each asset by including a priority value after each asset filename listed in manifest . In such an embodiment assets may be listed in manifest in any order and upon initialization BAA may scan manifest and begin downloading assets based on their explicitly stated priority values.

In another embodiment the priority of assets listed in manifest may be implicitly indicated. For example assets may be simply listed in manifest in order of their priority. Accordingly upon initialization BAA may simply begin downloading the first asset listed in manifest and continue downloading assets in the order in which they are listed.

According to another aspect an exclusion identifier may be associated with assets listed in manifest . The exclusion identifier may indicate whether or not an asset should be downloaded. For example a symbol may precede each asset listed in manifest indicating that the asset should be downloaded. Conversely a symbol may indicate that the asset should not be downloaded. Assets preceded by a symbol may therefore indicate assets for which no download attempt should be made by BAA .

One advantage to including an exclusion identifier in manifest is that existence of a common file is not constantly tested by BAA for files that may not be available for downloading. By skipping these files congestion of network connection may be avoided and performance of system may be increased. For example in order to display a particular model in a virtual world texture assets may be loaded by VWA where VWA may support multiple file types for the same asset. In order to maintain broad compatibility manifest may list the same asset in multiple file formats. However because VWA may prefer some file formats over others it may be unnecessary to download the same texture in multiple formats. In one scenario VWA may support both bitmap .BMP and jpeg .JPG image formats. Manifest may therefore list both texture1.bmp and texture1.jpg assets for displaying a virtual object. However because only one file format is required for displaying texture1 VWA may be configured to load texture1.jpg if it is available. As a result if both texture1.bmp and texture1.jpg are downloaded texture1.bmp would be ignored and texture1.jpg would be loaded. This would result in redundant downloading of texture1.bmp. Because many conventional virtual worlds comprise thousands of assets waste of system resources associated with this redundancy may be compounded. The exclusion identifier therefore prevents the downloading of duplicate file formats listed in manifest by placing a symbol preceding the asset listing. By adding an exclusion entry in manifest download requests for texture1.bmp may be excluded from reaching remote asset server .

According to another aspect an area identifier may be associated with assets. For example a virtual world may be comprised of many different zones where each zone may possess a unique look and feel. A first set of assets may be required for displaying an entry level zone and a second third and fourth set of assets may be required for displaying neighboring zones. Because the entry zone is the first zone displayed the first set of assets may be downloaded first. As the user progresses through the virtual world and discovers new zones BAA may automatically begin background downloading of assets associated with nearby zones two three and four. Implementation of an area identifier may increase the efficiency of downloading assets by allowing BAA to predictively download assets for neighboring zones based on the user s play.

According to another aspect manifest may either be dynamically compiled or pre compiled. Dynamically compiling manifest may include generating a listing of assets based on execution of a first instance of VWA by a user. For example as the user explores the virtual world displayed by WVA for the first time manifest may be populated with a list of assets for displaying the virtual world. As a result the list of assets in manifest may be customized based on the user s exploration of the virtual world. It is appreciated that manifest may also be updated based on subsequent execution of VWA so as to further optimize the efficiency of downloading background assets for future executions of VWA .

In contrast statically pre compiling manifest may include compiling a master manifest based on execution of a master instance of VWA and distributing the master manifest to client instances of VWA . For example the developer of VWA may execute VWA under exemplary conditions and or scenarios in order to create an exemplary manifest . The exemplary manifest may be distributed to each client user of VWA prior to execution. Distribution may be implemented for example via automatic updating mechanisms built into virtual world application .

Background asset acquisition BAA function may include software instructions for communicating with VWA and manifest in order to predictively download background assets with file not present tolerance for loading by VWA to display a virtual world. Predictively downloading background assets may include copying one or more assets from a remote storage location such as a web server to a local memory storage device such as memory . In one embodiment BAA may generate one or more execution threads for copying multiple assets listed in manifest simultaneously. For example upon initialization of VWA a background primary thread may be created for connecting to remote asset storage location . The primary thread may spawn a number of worker threads for processing assets listed in manifest necessary for VWA to display a virtual world. The primary thread may also handle access requests from VWA which will be described in greater detail below. Assets may be downloaded by the worker threads and seamlessly stored in a holding area and moved to local asset storage location without pausing the execution of VWA .

Local assets may include one or more files stored on a computer readable medium such as memory device that have a file structure suitable for loading by VWA in order to display a virtual world. For example local assets may include one or more 3 dimensional models textures sounds animations particle effects fonts maps or other files suitable for displaying a virtual world. It is appreciated that local assets may not comprise every asset necessary for displaying every aspect of the virtual world but rather those assets downloaded by BAA and available for loading by VWA . Local assets therefore include at a minimum the assets needed for displaying the portion of the virtual world explored by the user at a given point in time and at a maximum all assets associated with displaying the virtual world.

As described above local assets may be associated with a priority implicit or explicit an area identifier and an exclusion identifier for predictively downloading assets listed in manifest . Other features may also be associated with local assets for optimizing the downloading of background assets without departing from the scope of the subject matter described herein.

Remote assets may include one or more files stored at a remote storage location such as a web server. In an exemplary configuration remote assets may have a file structure identical to that of local assets suitable for loading by VWA in order to eliminate the need for complex search and translation mechanisms thereby simplifying the synchronization between remote assets and local assets . As described above with respect to local assets remote assets may include one or more 3 dimensional models textures sounds animations particle effects fonts maps or other data suitable for displaying a virtual world. It is appreciated that remote assets may comprise every asset necessary for displaying the entire virtual world including optional assets so that any asset needed by VWA may be retrieved from a central location containing remote assets .

Generally it may be appreciated from that BAA may communicate with remote asset storage location and local asset storage location for downloading assets and storing them in a location suitable for loading by VWA for display in a virtual world. BAA may be configured to read manifest in order to determine in step which remote assets should be downloaded from remote assets storage location . BAA may also communicate with VWA for receiving notification that an asset is required for display of the virtual world as well as for pausing and unpausing the display of the virtual world while downloading a needed asset at an elevated priority. VWA manifest BAA and local assets may reside on the same computer hardware and may be connected to remote assets via network . VWA may load local assets for displaying the virtual world by accessing one or more memory locations in which local assets are stored.

In step remote assets may be downloaded at a baseline priority and in step the downloaded assets are stored in a location directly accessible by VWA such as memory . For example a primary background thread may spawn one or more worker threads for downloading assets listed in manifest based on their priority. In one embodiment worker threads may have a normal thread priority so as not to interfere with the execution of VWA or other applications residing on computer . Assets may be copied from remote asset storage location such as a web server to a local storage location such as memory .

In step BAA may receive a notification from VWA that an asset is required for displaying the virtual world but is not locally accessible i.e. has not been downloaded . For example a user operating in the virtual world may approach a virtual object such as a building. In order to display the building one or more assets must be loaded by VWA associated with for example wall textures window textures and floor textures. As the user approaches the virtual object he may enter a line of sight for the object after which the object is to be displayed and before which there is no need for the object to be displayed. Upon reaching this line of sight boundary VWA may search local assets for the assets associated with displaying the virtual building. If any needed asset has not yet been downloaded i.e. is not located in local assets the process may proceed to step .

In step the virtual world may be paused while waiting for the needed asset to be downloaded. Continuing the example the user may be prevented from moving within the virtual world for a brief period of time. This may be experienced as an extended file loading where computer may appear to be simply accessing its hard disk drive.

In response to determining that an asset is immediately required by VWA for displaying the virtual world but not yet downloaded BAA may download the asset at an elevated priority in step and in step store the asset locally. After the asset has been downloaded in step the display of the virtual world may be unpaused. For example BAA may increase the thread priority of the worker thread associated with downloading the missing asset s and after successfully copying the assets to memory BAA may send a signal to VWA indicating that the missing assets are ready for loading and instructing VWA to unpause display of the virtual world.

In block assets listed in the manifest are downloaded using the manifest and while executing the VWA based on the priorities indicated in the manifest. The assets may be downloaded based on either an implicit or an explicit priority or a combination thereof. Furthermore assets may be downloaded in part or in whole based on an area identifier associated with the assets. Assets may also be excluded from being downloaded based on an exclusion identifier that may optionally be associated with each asset.

In one embodiment the amount of time waiting for assets to be downloaded may be further minimized through the use of strategically located pause points. Pause points may be seamlessly integrated into VWA and configured to occupy the user s attention while assets are downloaded for displaying the virtual world. For example pause points may include but are not limited to login screens mini games elevators and trains. In one scenario it is assumed that a user entering a virtual world must first create a character name choose various character attributes such as race gender skills clothing etc. before entering the virtual world for the first time. This process may take anywhere from a few seconds to a several minutes. However during this time BAA downloads assets needed to display the virtual world so that as soon as the user has completed the character creation process the virtual world may be immediately displayed.

In one implementation an application programming interface API may be provided to VWA for processing asset acquisition requests. Upon initialization a primary background thread may be spawned for connecting to remote assets storage location . The primary thread may also be configured to process access requests from VWA for downloading assets from remote location and storing the assets in their true locations i.e. local assets on computer seamlessly and without pausing the execution of the virtual world. The primary thread may also spawn one or more worker threads that may begin downloading assets listed in manifest based on their priority.

Exemplary software code is shown below for illustrating one possible implementation of suitable application program interface API function calls for performing high reliability downloading of background assets using a manifest in a virtual world application.

ICFILE Initialize function may be called by VWA in order to begin the process of downloading assets in the background. An application identifier such as ApplicationName may be provided to remote asset storage web site for identifying and authorizing VWA . For example remote assets storage location may contain assets used by more than one VWA . Therefore it may be advantageous or necessary for remote web site to identify VWA in order to deliver the correct assets. A base uniform resource locator url BaseUrl may be provided for indicating the root of the file structure storing remote assets where the remote asset file structure may be identical to local asset file structure . Thus when a file requested by VWA is not located in local assets the asset may be found in remote assets without the need for complex file search or translation mechanisms.

Upon initialization VWA may inform BAA of the assets potentially needed for displaying a virtual world by calling ICFILE LoadFromManifest. Downloading assets listed in manifest may immediately begin for assets which are not locally stored without pausing the primary program. For example a primary background thread may spawn one or more worker threads configured to download remote assets based on their priority. Worker threads may have a normal priority so as not to interfere with the execution of VWA or other applications residing on computer .

ICFILE DownloadFile function may begin the downloading of an asset. RemoteFile identifier and LocalFile identifier may indicate the path and filename of the asset to be downloaded. iPriority may indicate a priority to be used for downloading the asset. For example iPriority may be elevated in order for VWA to give higher importance to critical files. The Flags parameter may indicate things such as but not limited to whether or not to cache the file locally whether or not to retry the download if it fails and whether or not to treat the filename as case sensitive.

It is appreciated that ICFILE DownloadFile may return immediately in order to notify BAA and VWA that a download attempt has already occurred for the asset being requested and the asset is not present. By notifying BAA and VWA of this condition multiple unnceccesary requests for the asset may be eliminated thereby reducing local on remote asset server . Alternatively BAA and VWA may be notified that the asset has been downloaded and is present in local assets . A priority value may also be available so that BAA may process critical files at an elevated priority.

ICFILE WaitFor is a simple form of a wait call for enabling VWA to simulate a long file load time while downloading a needed asset in the background at an elevated priority. As described above this wait call may have the effect of pausing the display of the virtual world so that program flow is uninterrupted and undesirable behaviors associated with conventional systems are avoided.

Conversely ICFILE ReleaseFile may be used to release a file associated with a file request instantiated by ICFILE DownloadFile. By releasing the asset display of the virtual world may be unpaused after downloading the asset. For example ICFILE ReleaseFile may notify BAA that asset File has been downloaded and released and that VWA may load the asset locally in order to display the virtual world.

ICFILE IsCompleted may query BAA to determine whether an asset has been downloaded from remote assets and installed as local assets . In one embodiment VWA may be programmed to be more knowledgeable about the assets being downloaded. As a result VWA may not have to wait on an asset to be completely downloaded and available as a local asset before allowing the display of a virtual world to continue. For example VWA may be configured to display a thumbnail or miniature version of a texture until the asset has fully downloaded instead of waiting for the texture to complete.

In response to determining that an asset is not available the asset may be downloaded using an elevated priority. For example a new function ICFILE SetPriority LPCTSR pName DWORD ipriority may be introduced for setting the priority of a file in the download request list i.e. manifest . When a thread is ready to download the next file in the download request list the thread may download the file having the highest priority that has been in the list for the longest period of time. Thus the next file to be downloaded may be determined based on a combination of its priority value and its time on the list waiting to be downloaded. This function call may be used to elevate the priority of an existing download. For example the priority of a file may be elevated while BAA is processing files listed in the manifest when VWA determines that the file is needed sooner than it would be downloaded at a normal priority.

The numbering scheme used for indicating a priority value may be arbitrarily chosen. In one embodiment 0 may represent basic list entries from the original manifest 1 may represent files added by the program manually i.e. where a file is requested and was missing from the manifest and 2 may represent critical files that the application requires. Using the multi zone virtual environment example described above a 0 priority value may be associated with files used for displaying virtual objects outside of the current zone 1 may be used for downloading files associated with the current zone and 2 may be used for files requested by the program after the manifest has been created.

In block the VWA is executed wherein executing the VWA includes loading at least a subset of the assets listed in the manifest. For example a virtual world may be displayed which includes a variety of objects characters and other effects associated with representing the virtual environment to the user. Each virtual object may be associated with one or more assets necessary for display. These assets may include but are not limited to a model a texture a sound an image a font a configuration a particle effect and an animation asset.

Exclusion identifier may precede each asset listing to indicate whether the asset should be processed or skipped. For example a symbol may indicate that the asset should be processed while a symbol may indicate for BAA to skip downloading the asset. One advantage to including exclusion identifier for assets listed in manifest is that existence of a common file that may not be available for downloading is not constantly tested as BAA processes manifest . By skipping these files congestion of network connection may be avoided and performance of system may be increased.

Exclusion identifier may be followed by path and filename identifying the asset within a file structure. As described above path and filename file structure used in manifest may identically mirror the path and filename structure of local assets accessed by VWA for displaying the virtual world. By synchronizing the path and filename structures between manifest and local assets translation times may be minimized or eliminated thereby reducing the complexity and increasing the speed of system .

Optional argument may explicitly indicate a priority value associated with the asset for allowing BAA to download assets in manifest based on a stated priority rather than the priority implied by the order in which they are listed. An optional area identifier may also be included in manifest for associating an asset with a particular virtual world area or zone. BAA may use area identifier in order to download assets associated with zones likely to be displayed first and or to download assets for nearby zones before downloading assets associated with zones unlikely to be seen by the user.

In a first virtual building may be loaded and displayed. While screenshot is a black and white image it may be appreciated that virtual world may be displayed in color and that building may be purple. Assets associated with virtual building may be listed in manifest and loaded prior to the user entering the area or may be downloaded at an elevated priority if VWA determines that the objects are required but not yet downloaded. For example the first line in manifest may include the path and file name objects toon buildings purple.v3c 1 0 corresponding to building . Thus while processing manifest BAA may reach asset purple.v3c and begin downloading the asset in the background for eventual display with the virtual world.

In a second virtual building may be loaded and displayed. It is appreciated that if the user approaches or attempts to interact with second virtual building before its assets have been downloaded and displayed BAA may instruct VWA to pause the virtual world environment while the required asset is downloaded at an elevated priority i.e. 1 . In this way unexpected and or undesirable system behaviors may be avoided with minimal interruption to the user experience. For example the second line in manifest may include the path and file name objects toon buildings lightblue.v3c 1 0 corresponding to virtual building .

Finally in a virtual fence object may be loaded and displayed in order to complete virtual scene . For example the third line in manifest may include the path and file name objects toon buildings fence.v3c 1 0 corresponding to virtual fence .

It is appreciated that because manifest files have a base priority i.e. 0 characters in scene may have been preemptively downloaded because the system has manually requested them. According to one possible aspect texture files associated with buildings may initially be downloaded using smaller lower resolution textures and used to display buildings . Full high resolution textures may be downloaded in the background after the buildings have been displayed using the lower resolution textures. This allows virtual objects to appear in scene faster by initially displaying the objects with a lower quality texture that can be downloaded faster. When manifest completes the downloading of the higher resolution textures the lower resolution textures may be replaced with the higher quality images.

It will be understood that various details of the presently disclosed subject matter may be changed without departing from the scope of the presently disclosed subject matter. Furthermore the foregoing description is for the purpose of illustration only and not for the purpose of limitation.

