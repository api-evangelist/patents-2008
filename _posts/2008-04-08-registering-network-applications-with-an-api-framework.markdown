---

title: Registering network applications with an API framework
abstract: A method for registering a network application with an application programming interface (API) framework. In operation, a registrar may send a registration message that associates a namespace with the network application to the API framework. In one implementation, the namespace associated with the network application may be a uniform resource identifier. In another implementation, the registration message may specify a format of the standardized clients, a security policy, and the application resources associated with the network application.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08561088&OS=08561088&RS=08561088
owner: Microsoft Corporation
number: 08561088
owner_city: Redmond
owner_country: US
publication_date: 20080408
---
A network application such as a Web application is typically accessible to users via a client application. The client may be implemented as part of or alongside the Web application. Alternately the developer of the Web application can publish or make available an application programming interface API so that other developers can create clients for the Web application. Some clients are standardized to particular formats such as Really Simple Syndication RSS or ATOM Syndication ATOM .

There are two components of an API an abstraction component and an implementation component. The abstraction component is essentially a document or series of documents that describes to a developer how to write source code to interface with the Web application. The implementation component is executable code that acts as the interface between clients written to the API and the Web application itself.

Described herein are implementations of various technologies for registering a network application with an application programming interface API framework. In operation a registrar may send a registration message that associates a namespace with the network application to the API framework. In one implementation the namespace associated with the network application may be a uniform resource identifier. In another implementation the registration message may specify a format of the standardized clients a security policy and the application resources associated with the network application.

The registrar may then store create read update and delete CRUD methods for an application resource associated with the network application. The CRUD methods may be configured to be invoked by a request from the API framework. In one implementation the request from the API framework may be a representational state transfer REST or SOAP request.

In response to receiving the registration message the API framework may create an API associated with the network application. In one implementation the network application may be a Web application.

The above referenced summary section is provided to introduce a selection of concepts in a simplified form that are further described below in the detailed description section. The summary is not intended to identify key features or essential features of the claimed subject matter nor is it intended to be used to limit the scope of the claimed subject matter. Furthermore the claimed subject matter is not limited to implementations that solve any or all disadvantages noted in any part of this disclosure.

In general one or more implementations of various technologies described herein are directed to registering network applications with an application programming interface API framework. A registrar may initiate the registration process by sending a message that associates a namespace with the network application to the API framework. The registrar may store create read update and delete CRUD methods for an application resource associated with the network application. In response the API framework may create an API associated with the network application. As a result developers may then write standardized clients for the network application by simply using the API created by the API framework.

Implementations of various technologies described herein may be operational with numerous general purpose or special purpose computing system environments or configurations. Examples of well known computing systems environments and or configurations that may be suitable for use with the various technologies described herein include but are not limited to personal computers server computers hand held or laptop devices multiprocessor systems microprocessor based systems set top boxes programmable consumer electronics network PCs minicomputers mainframe computers distributed computing environments that include any of the above systems or devices and the like.

The various technologies described herein may be implemented in the general context of computer executable instructions such as program modules being executed by a computer. Generally program modules include routines programs objects components data structures etc. that perform particular tasks or implement particular abstract data types. The various technologies described herein may also be implemented in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network e.g. by hardwired links wireless links or combinations thereof. In a distributed computing environment program modules may be located in both local and remote computer storage media including memory storage devices.

The client computer may include a central processing unit CPU a system memory and a system bus that couples various system components including the system memory to the CPU . It should be noted that the CPU may include Virtualized systems Virtual Machines Processors as well as CPU Cores and Hyper threaded processors within a physical CPU. Although only one CPU is illustrated in it should be understood that in some implementations the client computer may include more than one CPU. The system bus may be any of several types of bus structures including a memory bus or memory controller a peripheral bus and a local bus using any of a variety of bus architectures. By way of example and not limitation such architectures include Industry Standard Architecture ISA bus Micro Channel Architecture MCA bus Enhanced ISA EISA bus Video Electronics Standards Association VESA local bus and Peripheral Component Interconnect PCI bus also known as Mezzanine bus.

The client computer may further include a storage which may be connected to the bus . Examples of storage include a hard disk drive for reading from and writing to a hard disk a magnetic disk drive for reading from and writing to a removable magnetic disk and an optical disk drive for reading from and writing to a removable optical disk such as a CD ROM or other optical media. The storage and associated computer readable media may provide nonvolatile storage of computer readable instructions data structures program modules and other data for the client computer .

It should be appreciated by those skilled in the art that the client computer may also include other types of storage and associated computer readable media that may be accessed by a computer. For example such computer readable media may include computer storage media and communication media. Computer storage media may include volatile and non volatile and removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. Computer storage media may further include RAM ROM erasable programmable read only memory EPROM electrically erasable programmable read only memory EEPROM flash memory or other solid state memory technology CD ROM digital versatile disks DVD or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can be accessed by the client computer . Communication media may embody computer readable instructions data structures program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and may include any information delivery media. The term modulated data signal may mean a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example and not limitation communication media may include wired media such as a wired network or direct wired connection and wireless media such as acoustic RF infrared and other wireless media. Combinations of any of the above may also be included within the scope of computer readable media.

A number of program modules may be stored in memory including an operating system a standardized client and a development kit . The operating system may be any suitable operating system that may control the operation of a networked personal or server computer such as Windows Vista Mac OS X Unix variants e.g. Linux and BSD and the like. The standardized client may be software that presents information about a Web application and resources both stored on application server to a user where the client is standardized to a particular format. Examples of standardized formats include really simple syndication RSS ATOM Syndication ATOM Publishing Protocol APP JavaScript Object Notation JSON extensible markup language XML and binary XML. In one implementation the standardized client is an RSS reader.

Typically a software engineer downloads a copy of the development kit from the API framework server to the client . The development kit may include a set of development tools that enables the software engineer to create the standardized client . The development tools may include code editors debugging aids and other utilities often presented in an integrated development environment. Using the development kit the software engineer may create source code not shown compile the source code and link the compiled code to generate the standardized client .

In one implementation the development kit may communicate with an API framework stored on the API framework server to determine some of the parameters required to access the Web application and associated resources . The development kit may present the parameters to the software engineer. Accordingly the software engineer may incorporate the requisite parameters into the source code for the standardized client .

A user may enter commands and information into the client computer through an input device . Examples of input devices include keyboards pointing devices microphones joysticks game pads satellite dishes scanners or the like. These and other input devices may be connected to the CPU through the system bus . A user may receive information from the client computer via an output device . Examples of output devices include displays speakers printers and fax machines.

The client computer may be connected to the network through a network interface . It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.

The API framework server and application server may be similarly constructed as the client computer . The API framework server may contain a CPU system memory storage and network interface . Similarly the application server may contain a CPU system memory storage and network interface .

At the application server the system memory may include an operating system and a registrar . The registrar may be software that makes the Web application accessible to the standardized client via the API framework . In one implementation the registrar may send a registration message to the API framework . In response the API framework may create an API for the Web application . Additionally the registrar may store resource methods on the application server . The resource methods when invoked may access update the resources associated with the Web application . The registrar will be described in greater detail in the description of .

The storage may include the Web application resource methods and resources . The Web application may be software for sharing and managing resources for users of clients . Examples of Web applications include Weblogs blogs discussion boards e mail programs and software for sharing media such as photographs. In one implementation the Web application may be a Web service.

It should be noted that the Web application is merely a specific example of a network application and that any application accessible via a hypertext transfer protocol HTTP or HTTP over Secure Socket Layer HTTPS may be used in various implementations described herein.

Each resource may be associated with and managed by a particular Web application . The resources managed in the example Web applications include blog or discussion board posts e mails e mail folders and the photographs or other media shared. Those skilled in the art recognize that a wide array of Web applications and resources are possible and these examples are provided for purposes of illustration and are not intended to be limiting.

Each resource method may perform one create read update or delete CRUD operation for one or more of the resources of an associated Web application . Resource methods on the application server may be invoked by the API framework based on the registered API for the associated Web application . The API framework and API will be described in more detail in the paragraphs below with reference to the API framework server .

In one implementation the API framework may invoke the resource methods using a representational state transfer REST request to the Web application . REST is an architectural methodology for distributed hypermedia systems such as the World Wide Web. REST describes any simple interface that transmits domain specific data over hypertext transfer protocol HTTP without an additional messaging layer.

Typically a REST request uses the standard GET POST PUT DELETE semantics of HTTP. It should be noted that other REST operations such as HEAD an optimized GET operation and yet to be developed operations may be accommodated in various implementations described herein. Further REST is merely one example of a methodology for sending application resource requests from the API framework server to the application server . It should be noted that other methodologies protocols such as SOAP or binary may be used for requests to invoke resource methods in various implementations described herein.

Referring now to the API framework server the system memory may include an operating system and the API framework . The API framework may include one or more APIs . The APIs may specify Web applications available to standardized clients via the API framework . Further each API may specify how the standardized client may interact with the Web application and associated resources .

The API framework may be software that provides access to the Web application for the standardized client . In one implementation the API framework may initiate requests for access to the Web application and or resources in response to hypertext transfer protocol HTTP requests from the standardized client . Additionally the API framework may create the API for the Web application in response to a registration request from the registrar .

In another implementation the API framework may invoke resource methods corresponding to the request from the standardized client and receive a response from the Web application . Further the API framework may translate the response from the Web application into the format used by the standardized client and send the translated response to the standardized client .

While the computing system illustrates the API framework server and application server as separate computers it should be understood that in some implementations the functionalities performed by the API framework server and the application server may be performed by a single computer. For example the Web application resource methods and resources may be alternatively stored in the storage .

As shown a Web application server may have more than one Web application . Some examples of Web applications include an address book a photo sharing application and a blogs application . Each application has access to different types of resources . In one implementation resources can include data and organizational type resources such as libraries . For example the photo sharing application may organize photos and associated comments into albums . Similarly the blogs application may organize posts and comments into different blogs .

In another implementation an application such as the address book may access data without the use of libraries . For example the address book may access data such as a person by using other data available to the address book such as a category and a person reference . In such a scenario the person reference may represent a pointer to each person in a particular category .

In a system that publishes Web applications to standardized clients resource methods may be stored on the application server for each resource . Accordingly in the example shown resource methods one each for CREATE READ UPDATE and DELETE are stored for the album and blog libraries. The resource methods are also stored for each of the category person reference person photo comments post and comments data.

As shown the method begins at step when the registrar sends a registration message for each Web application to the API framework . The registration message may include a namespace the uniform resource identifier URI of the web application and the formats for standardized clients to which the Web application is to be made accessible. Additionally the registration message may specify the resources associated with the registered Web application .

The namespace is an identifier by which the API framework associates client requests for the Web application with the Web application . The URI identifies the location of the web application . The formats may include any standardized format such as really simple syndication RSS ATOM Syndication JavaScript Object Notation extensible markup language XML or binary XML. The formats described herein are mere examples and are not intended to be limiting. Those skilled in the art appreciate that other formats known or yet to be developed may be used in various implementations described herein.

In one implementation the registration message may include a security policy. The security policy may specify one or more rules for restricting client access to the Web application and or the associated resources . The security policy may be recorded in the API .

At step the registrar may determine all the resources associated with the Web application for which the registration message is sent. For example all the resources associated with the photo sharing application include the album library the photo data and the comment data .

Steps may be repeated for each resource associated with the Web application . At step the registrar may create resource methods for the resource . The resource methods may include create read update and delete CRUD methods for each resource . At step the registrar may store the resource methods on the application server . As such in response to client requests the API framework may create read update and delete resources by invoking the stored resource methods .

Advantageously developers of standardized clients may consume numerous Web applications registered in a centralized API framework . Without the centralized APIs provided by the API framework developers would have to develop clients to consume applications according to the varying models of APIs provided by the individual Web applications.

Although the subject matter has been described in language specific to structural features and or methodological acts it is to be understood that the subject matter defined in the appended claims is not necessarily limited to the specific features or acts described above. Rather the specific features and acts described above are disclosed as example forms of implementing the claims.

