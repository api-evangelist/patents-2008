---

title: Flexible access to metamodels, metadata, and other program resources
abstract: A system and method for enabling a Meta Object Facility (MOF) and a Java Metadata Interface (JMI) compliant service to access program resources. A system includes a metamodel repository and an application server. The metamodel repository is configured to store the program resources including metadata and one or more metamodels. The application server includes at least one application providing a first portion of the program resources. A first portion of the program resources are stored in a database associated with the application server. A second portion of the program resources are provided in at least one application of the application server, and programming language instances of the program resources are received by one or more applications independent of where the program resources are stored or provided.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08489541&OS=08489541&RS=08489541
owner: SAP AG
number: 08489541
owner_city: Walldorf
owner_country: DE
publication_date: 20080613
---
This application is a divisional application of U.S. patent application Ser. No. 10 888 074 filed on Jul. 9 2004 now U.S. Pat. No. 7 428 552 entitled Flexible Access To Metamodels Metadata And Other Program Resources the contents of which are hereby incorporated by reference.

This document relates to access to metamodels metadata and other program resources. More particularly this document describes systems and methods for accessing these resources from applications as well as from a repository in a server.

Metadata in particular the exchange of metadata and its programmatic access through application programming interfaces APIs plays a central role in almost any software product. Metadata defines the structure and meaning of data objects and is used by applications to define relate and manipulate those objects. A metamodel describes the structure of the metadata. In order to make software products more interoperable a general trend is to base the access exchange and structure of metadata on common standards i.e. common access APIs common interchange formats and common metamodels.

The Meta Object Facility MOF standard promulgated by the Object Management Group OMG defines a language to describe metamodels and how to handle associated metadata. The Java Metadata Interface JMI standard defined by the JCP process brings the metamodel definition to the Java world. It describes a set of generic interfaces to access metamodels and metadata as well as how Java interfaces should be generated according to a metamodel. Moreover it defines the behavior of classes implementing theses interfaces. A Metamodel Repository MMR is an implementation of a MOF and is a JMI compliant repository handling metamodels metadata and other program resources.

When multiple applications access the same repository an issue arises regarding the storage and deployment of metamodels metadata and other program resources especially in a shared resource environment. The required resources may be contained in some applications but other metadata resources may be deployed separately within the repository the server or even in other applications.

This document discloses systems and methods for implementing a metamodel repository which provides access to metamodels metadata and other program resources required by applications in a server environment independent of the deployment and storage of those resources. This document also discloses a mechanism for accessing such resources delivered by the applications but which are not stored in the repository.

In one embodiment a system for enabling a Meta Object Facility MOF and a Java Metadata Interface JMI compliant service to access program resources includes a metamodel repository and an application server. The metamodel repository is configured to store the program resources including metadata and one or more metamodels. The application server includes at least one application providing a first portion of the program resources.

In another embodiment a method of accessing program resources in a Meta Object Facility MOF using a Java Metadata Interface JMI compliant service includes a step of storing a first portion of the program resources in a database associated with an application server. In the embodiment the method further includes the steps of providing a second portion of the program resources in at least one application of the application server and receiving programming language instances of the program resources by one or more applications independent of where the program resources are stored or provided.

The details of one or more embodiments are set forth in the accompanying drawings and the description below. Other features objects and advantages will be apparent from the description and drawings and from the claims.

In an enterprise application environment compliant with Meta Object Facility MOF and Java Metadata Interface JMI a service is provided for accessing metamodels and associated metadata. The service includes a repository storing one or more metamodels metadata and other program resources such as Java class files. The repository is accessible by applications in the enterprise application environment. The repository also provides access to the same resources during the instantiation of requested metadata. Those resources however may not be deployed with and stored in the repository but may be part of an application. Thus a design pattern for accessing those resources is also disclosed.

Metamodels metadata and other program resources are encapsulated into libraries which are stored in different places. In the MMR the metamodels and metadata are stored in Java libraries JAR archives . Java classes generated by the MMR according to the JMI standard and its respective metamodel are stored in separate Java libraries.

The application server includes various processes to provide metamodel metadata and program resource libraries. For example the metamodel and metadata library library M and its corresponding class library library C are part of application . These libraries are deployed with their respective applications and not stored in the MMR . Instead the application server controls access to these libraries. While the application has direct access to these libraries as provided by the application server the MMR may run in a different thread or memory space without direct access.

The application contains the metamodel and metadata library library M and its corresponding class library library C . It also accesses the libraries M C M and M. The metamodel and metadata libraries M and C are part of the MMR and access is controlled by the application server . Libraries M and C however are stored in the database and access is controlled by the MMR using the resource loader and the persistence layer both of which are deployed in the application server . The MMR s deployment service receives these libraries and stores them in the database . Libraries M and C are provided by the application server . Finally library M is also deployed in the MMR using the deployment service and stored in the database . However no corresponding class library C which includes JMI compatible generated interfaces and classes of the metamodel in C is available. The MMR uses generic implementations to make the read metadata available to programs.

Applications have direct access to their respective program resources. In the Java context an application s class loader provided by the application server is used to read class data of the application. Hence Application has direct access to the classes in Library C . The repository however which runs in a separated thread or memory space does not have access to that library using its class loader. The Application requires the MMR to access the metamodels and metadata in it s Library M . This is explained further below.

Although a few embodiments have been described in detail above other modifications are possible. Other embodiments may be within the scope of the following claims.

