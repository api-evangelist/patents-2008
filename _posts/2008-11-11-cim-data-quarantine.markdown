---

title: CIM data quarantine
abstract: One aspect of the present invention includes performing a quarantine of inaccessible data within a CIM dataset that is managed by a storage service, and a recovery of this data within the CIM dataset once it becomes accessible. In one embodiment, after a first request is made through a CIM agent to the inaccessible data managed by a storage service, the storage service is quarantined within the CIM dataset. This includes terminating any active threads to the service and preventing new threads from accessing the service. Accordingly, the data is hidden from subsequent requests with the CIM agent and any requests to the inaccessible data are prevented. The storage service is then queried so that when the data becomes accessible, the device services for the storage service are restarted. Once restarted, new threads within the CIM agent are able to access the data within the storage service.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07996377&OS=07996377&RS=07996377
owner: International Business Machines Corporation
number: 07996377
owner_city: Armonk
owner_country: US
publication_date: 20081111
---
The present invention generally relates to data operations performed within a storage system. The present invention more specifically relates to the control of access to datasets and data components in a storage system with use of a Common Information Model CIM agent.

CIM is an object model used to represent managed systems with a common set of objects and relationships and is maintained by the Distributed Management Task Force DMTF . CIM agents exist in the art which manage interactions with storage elements and the data within these storage elements. For example the role of the IBM DS8000 DS6000 storage system CIM agent is to maintain a global space or a set of spaces of CIM data representing the configuration capabilities and services of its storage devices. The space of CIM data is then presented to CIM clients. In the DS8000 6000 CIM agent implementation the CIM agent is designed to support many requests from many CIM clients against many devices. During normal operation the CIM agent is servicing client requests in addition to maintaining worker threads to the devices it is managing.

In a typical storage system CIM agent implementation all operations related to a device worker thread activity client requests performance statistics polling and the like are contained in a single service. These operations are hidden from CIM clients because the CIM agent presents a single global service that contains all services for all devices. This is because the CIM agent does not know what portion of the total dataset a CIM client will request as it may be a subset or it may be all of the data. A single global service containing all data and capabilities of all devices managed is representative of the CIM data presented to CIM clients. For example represents what an example total dataset of CIM data might look like in a storage system existing in the prior art.

What the CIM agent must do is maintain a logical translation between CIM data and the device the data is populated from. further illustrates how different pieces of CIM data may come from different devices and the logical mappings the CIM agent must maintain within an example storage system existing in the prior art. As mentioned above the CIM agent does not know what portion of the data that a client may request because the CIM protocol allows a client to ask for many subsets of the dataset. For example a client may request all volume data. In the example depicted in a request for all volume data would require the CIM agent to access all three devices .

The problem occurs when a device fails or partially fails. In this case a subset of the CIM data is now inaccessible or unusable. illustrates how the total failure of a single device would affect the CIM Data in a system existing in the prior art. If a CIM client requested volume data from the CIM agent in this state the request would either fail or take longer than expected because the client happened to request a subset of the CIM data that included CIM data from the defective device.

Because of the nature of storage devices when failures occur there may be long latencies involved. Timeout conditions can take up to 15 or even 20 minutes to elapse. Once a failed device is discovered it is undesirable to allow multiple requests to a failed Storage Device to continue. Thus all CIM client requests will suffer latency times because the CIM agent will continue to attempt to collect data from the defective device.

In the volume example depicted in every client request for data from volumes would either not be serviced or take longer than the client is willing to wait. During normal operations multiple CIM client requests are accessing various subsets of the CIM data. If the device fails all CIM client requests that happen to request some part of the affected CIM data will be adversely affected. To a CIM client it would appear that random requests to the CIM agent seem to take longer than expected or would unexpectedly fail. In addition to the impact to CIM clients the CIM agent also wastes cycles attempting to perform operations on a defective device worker threads servicing CIM client requests etc. slowing all operations in the CIM agent down. This entire problem is exacerbated because typically the set of CIM data is large and complex and a single device often represents a significant portion of this data.

There is no known mechanism to automatically manage the set of CIM data that is affected by a defective device. The only option is to manually de configure the defective device from the CIM agent. There is no way for the CIM client to know what portion of the CIM data is causing the failures and to avoid requesting it. Further after the device is repaired manual intervention is required to re configure the device into the CIM agent.

One aspect of the present invention enables a CIM agent to internally detect when CIM data becomes undesirable due to device failure. The error may be found during a CIM client request or some internal CIM agent process. After an error is detected the CIM agent responds by quarantining removing or hiding the affected CIM data and any other dependent data from the total set of CIM data so that future CIM client requests are not impacted. Moreover a further aspect of the present invention provides a CIM agent with a mechanism to modify or remove the defective CIM data for failed devices in addition to the ability to return that CIM data to its original state after the defective device has been repaired.

Not allowing CIM clients to be susceptible to repetitive long latencies in CIM requests has obvious advantages. Removing the CIM data that has long latencies within the total set of CIM data that CIM clients can see will also prevent repeated accidental requests to objects that have long latencies. In addition a mechanism which removes the need for manual intervention to remove de configure a failed device and reconfigure it after repair also has obvious advantages.

In one embodiment an operation for performing a quarantine of inaccessible data with a CIM agent in a storage system is applied to a CIM agent that accesses a CIM dataset contained within the storage system. This CIM agent includes a storage service which manages data that comprises a subset of the CIM dataset. In further embodiments the data managed by the storage service is contained within a storage device and the data managed by the storage service is contained within a component within a storage device.

In the case that access is requested to the data managed by the storage service through the CIM agent but the data managed by the storage service is inaccessible by the CIM agent the operation responds by quarantining the storage service to prevent current and subsequent access to the data. The quarantine process involves stopping device services for the storage service and terminating any active threads within the CIM agent which are attempting to access the storage service. Additionally the quarantine includes preventing new threads within the CIM agent from accessing the storage service. This hides the data managed by the storage service from subsequent requests through the CIM agent.

Once quarantined the storage service is queried at a predefined interval to determine if the data in the storage service has become accessible by the CIM agent. Once it is determined that the data in the storage service is accessible the quarantine of the storage service within the CIM dataset is removed including restarting device services for the storage service and enabling new threads within the CIM agent to access the storage service and view the data managed by the storage service.

In a further embodiment quarantining the storage service within the CIM dataset includes hiding any data dependent on the storage service from subsequent requests through the CIM agent. In still a further embodiment if access is requested through the CIM agent to a collection of data that comprises one or more available storage services and the quarantined storage service then any non quarantined data in the collection of data is retrieved. This includes providing a subset of the requested collection of data by retrieving all accessible data from the one or more available storage services and not attempting to retrieve inaccessible data managed by the quarantined storage service.

One aspect of the present invention includes responding to failures of storage devices and components by quarantining and hiding any defective storage services within the dataset accessible by the CIM agent. One embodiment of the present invention uses a logical translation between CIM data and storage devices and components already maintained by the CIM agent to predict what set of the CIM data is defective if a failure on the device occurs. For example as is occurring in the scenario depicted in a first client requests Array CIM data from a CIM agent managing a single storage device but one of the arrays is defective and unavailable.

With use of this embodiment of the present invention after the CIM agent identifies that an array is defective the CIM agent uses this knowledge to remove or hide the CIM data for that array and all dependent data from the total set of CIM data available to future CIM client requests. Thus using the example of the failed array in if the array is in a defective state any volumes that originate from that array and their associated CIM data will also be defective. At this point the CIM agent will use the relevant information to identify what CIM data is affected and remove hide it from the total set of CIM data.

A further aspect of the present invention represents the logical connection between CIM data and the devices storing the data as services with relationships to each other that the CIM agent uses to fulfill CIM requests. A service would be a software entity within the CIM agent that performs work with the device to populate some portion of the total CIM data set. For example in one embodiment a top down hierarchical type relationship may exist as is illustrated in .

Through use of hierarchy relationships when an error is detected in a particular service the CIM agent would remove or hide that CIM data along with any other dependant CIM data. For example as depicted in an array service Array2 within a hierarchical device services hierarchy has failed. The CIM agent responds to the failure of this service by removing the Array2 CIM data and all of its dependent CIM data.

While the defective CIM data is hidden from the total set of CIM data the CIM agent will periodically check the device to see if it can access the information needed to generate the defective CIM data. Once it has discovered the device has been repaired the CIM agent may be configured to make the previously removed hidden CIM data available again to the total set of CIM data.

The implementation that revives the portion of the CIM data that was identified as defective can use the same mechanism to determine which services to attempt to revive. Once the services that have been identified as bad are located they can be used to determine when the device has been repaired. Once they are capable of completing work successfully the CIM data that they logically represent can be returned to the total set of CIM data.

As illustrated the CIM agent uses a logical translation between CIM data and the defective device i.e. the service managing the device to determine what set of CIM data to remove from the global set of CIM data. Once the subset of data from the defective storage device has been hidden any client requesting its data does not incur any latency. Instead the client receives an immediate bad response from the CIM agent as the CIM agent does not waste cycles attempting to fulfill the client request by sending a request to the device that is already known as defective.

In this embodiment the internal components of the CIM agent implement various operations to quarantine and un quarantine a storage device. further depicts this mechanism utilized to recover or unhide the hidden CIM data the Unquarantine Engine and how it utilizes the same service used to hide the data to determine if the device has recovered. The primary internal component which in this embodiment will be referred to as the Connection Manager performs three primary functions 

Managed Connections Maintains a collection of connections to all managed devices along with their status Good Failed . All threads processes gain access to the managed devices from the Connection manager.

Service Manager Quarantines Removes hides and Un Quarantines adds unhides services for defective repaired devices from to the global service presented to the CIM clients. Failed device CIM Data are hidden from CIM clients.

Un Quarantine Engine Runs a process that determines if the failed devices have been repaired. This process is repeated to continually query the device to detect when the device has returned to normal operation.

As shown the CIM clients make requests to the CIM agent services which returns data from unquarantined services as requested. Thus as CIM client 1 sends commands to create a volume request the status of a flash copy and perform a performance statistics request the various functions of the CIM agent services perform actions upon the storage devices. Similarly as CIM client 2 makes requests against multiple storage devices device 1 and device 2 return data normally whereas storage device 3 returns immediately as failed.

First as in step a thread or process requests access to a storage device. For example in the system of this would involve a request to defective Storage Device 3 . This thread process fails because the device is defective. In step the Managed Connections component is notified and the connection to the device is marked as defective.

Next as in step the Managed Connections component terminates any other threads and processes that are already accessing the defective device and prevents any new threads and processes from accessing the defective device. Current and new threads and processes are simply sent back to the sender immediately as being failed rather than waiting a period of time for a device failure timeout to occur.

As in step the Device Service Manager component quarantines the device services for storage device in the global services object of the CIM agent. This will hide CIM data of the failed device from any CIM clients. Obviously the status of the device is not hidden . If any CIM client requests for the failed storage device are sent to the CIM agent they are immediately returned as failed because the CIM data does not exist . This operation will also shutdown any internal threads or processes worker threads performance statistics polls etc. for the failed storage device.

As in step The Un Quarantine Engine component continually queries the failed storage device until it discovers that the failed device is repaired. After the Un Quarantine Engine discovers the defective storage device is repaired as in step the Device Service Manager component un quarantines the device services for the previously defective storage device in the global service object in step and worker and performance statistics polls are restarted for the device. CIM Data for the previously defective storage device will now be available for CIM clients.

As will be appreciated by one skilled in the art the present invention may be embodied as a system method or computer program product. Accordingly the present invention may take the form of an entirely hardware embodiment an entirely software embodiment including firmware resident software micro code etc. or an embodiment combining software and hardware aspects that may all generally be referred to herein as a circuit module or system. Furthermore the present invention may take the form of a computer program product embodied in any tangible medium of expression having computer usable program code embodied in the medium.

Any combination of one or more computer usable or computer readable medium s may be utilized. The computer usable or computer readable medium may be for example but not limited to an electronic magnetic optical electromagnetic infrared or semiconductor system apparatus or device. More specific examples a non exhaustive list of the computer readable medium would include the following a portable computer diskette a hard disk a random access memory RAM a read only memory ROM an erasable programmable read only memory EPROM or Flash memory a portable compact disc read only memory CDROM an optical storage device or a magnetic storage device.

Computer program code for carrying out operations of the present invention may be written in any combination of one or more programming languages including an object oriented programming language such as Java Smalltalk C or the like and conventional procedural programming languages such as the C programming language or similar programming languages. The program code may execute entirely on the user s computer partly on the user s computer as a stand alone software package partly on the user s computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario the remote computer may be connected to the user s computer through any type of network including a local area network LAN or a wide area network WAN or the connection may be made to an external computer for example through the Internet using an Internet Service Provider .

Although various representative embodiments of this invention have been described above with a certain degree of particularity those skilled in the art could make numerous alterations to the disclosed embodiments without departing from the spirit or scope of the inventive subject matter set forth in the specification and claims.

