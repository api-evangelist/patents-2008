---

title: Method and apparatus for providing a volume image backup of selected objects
abstract: A method and apparatus for providing a volume image backup of selected objects is provided. In one embodiment, a method for creating volume image backups using selected objects of a source volume, comprises processing metadata and mapping information regarding at least one object of a source volume, wherein the mapping information is used to identify at least one data block within the source volume for the at least one object, wherein the at least one object is selected from a plurality of objects configuring a file system hierarchy of at least one image file using the metadata and storing the at least one data block in the at least one image file using the mapping information.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08621165&OS=08621165&RS=08621165
owner: Symantec Corporation
number: 08621165
owner_city: Mountain View
owner_country: US
publication_date: 20081208
---
Embodiments of the present invention generally relate to backup techniques and more particularly to a method and apparatus for providing a volume image backup of selected objects.

In a typical computing environment various objects e.g. data files such as documents spreadsheets presentations structural designs and or the like are backed up to one or more storage devices e.g. a tape drive a hard disk drive and or the like on a regular basis. Generally backups may be performed to protect the objects that store important critical information. Regular backups prevent data loss and ensure uninterrupted productivity for the typical computing environment. As described further below the various objects may be backed up and organized in a proprietary file format such as a volume image backup file format.

Volume image file formats are widely employed for full and incremental delta backups due to a variety of reasons. For instance disk based full and or incremental backups to volume image files are faster than file by file i.e. brick image files. Since each sector is read in sequential order performing such a volume based backup results in a reduction of hard disk seeks and file system query overhead. Furthermore such incremental backups efficiently utilize changed data block tracking techniques to only copy data blocks that were modified since a previous backup instead of backing up an entire volume. Compared with file by file incremental backups volume based incremental backups are faster than backing up an entire file in cases where only a data block has changed. As another reason volume image files are mountable and accessible as a volume i.e. a drive letter by various software programs. As yet another reason the volume image files may be used as virtual disks by various virtual server applications. In addition the volume image files permit random access of the data blocks whereas tape based backup files only permit sequential access and therefore lack enhanced functionality currently available with disk based image backup files.

Generally the volume image backup file is a block dump of a volume in a container format such as .VHD .VMDK .V2I. Currently a backup process is limited to an entire volume as opposed to selected objects e.g. files and or folders . For example a user can only select the entire volume when creating the volume image backup file and cannot select individual files for a full and or incremental backup. As such each and every data block of a plurality of objects is copied to the volume image backup file. As a result significant amounts of bandwidth and storage space are consumed unnecessarily. Furthermore in a remote office scenario the user may be interested in protecting only the critical data stored in the volume instead of the entire volume.

Therefore there is a need in the art for a method and apparatus for providing a volume image backup of selected objects.

Embodiments of the present invention comprise a method and apparatus for providing a volume image backup of selected objects. In one embodiment a method for creating volume image backups using selected objects of a source volume comprises processing metadata and mapping information regarding at least one object of a source volume wherein the mapping information is used to identify at least one data block within the source volume for the at least one object wherein the at least one object is selected from a plurality of objects configuring a file system hierarchy of at least one image file using the metadata and storing the at least one data block in the at least one image file using the mapping information.

The server is a type of computing device e.g. a laptop a desktop a Personal Digital Assistant PDA and or the like such as those generally known in the art. The server includes a Central Processing Unit CPU various support circuits and a memory . The CPU may comprise one or more commercially available microprocessors or microcontrollers that facilitate data processing and storage. The various support circuits facilitate the operation of the CPU and include one or more clock circuits power supplies cache input output circuits and the like. The memory comprises at least one of Read Only Memory ROM Random Access Memory RAM disk drive storage optical storage removable storage and or the like. The memory includes various data such as a snapshot a file change log a changed block tracker and mapping information . The memory further includes various software packages such as a driver a filter and a backup module .

The storage and the storage generally include various components i.e. hardware and software that are configured to manage storage resources within a computing environment. The storage generally includes one or more data storage devices e.g. hard disk drives optical drives magnetic tape drives and or the like and storage management software that provides an interface e.g. Integrated Drive Electronics AT Attachment IDE ATA Small Computer Systems Interface SCSI and or the like to the one or more data storage devices for one or more computing devices such as the server . The storage and the storage facilitate temporary and or permanent storage i.e. a backup of critical computer data to backup media e.g. sequential backup media i.e. magnetic tape optical storage media e.g. hard disk and or the like .

In one embodiment the storage includes a backup of the source volume . The source volume further includes metadata and a plurality of objects of which one or more objects are selected for the backup. The metadata includes various information i.e. attributes associated with the objects such as an Access Control List ACL a file size as well as time and date information for each modification access creation and or the like. The objects generally include one or more data items of various data types e.g. emails word documents spreadsheets aggregate data types e.g. database files and or the like . In one or more embodiments the objects may include one or more files that are to be backed up to a destination such as the image files in the storage .

According to one or more embodiments the objects are arranged within the source volume in accordance with a file system e.g. MICROSOFT FAT32 NTFS REDHAT LINUX UNIX UFS and or the like . As such the source volume includes file system information e.g. File Allocation Table Master File Table Node Table and or the like that specifies locations i.e. offsets and or addresses of one or more data blocks of various sizes i.e. extents in which the objects are stored. Hence the mapping information indicates one or more mappings between the one or more data blocks and the objects according to one embodiment. As explained further below the backup module examines the file system information to determine such a mapping.

According to one embodiment an extent may be a contiguous area of computer memory for storing a particular file. For example an eight kilobyte 8 kB cluster of a hard disk may be an extent that corresponds with a word document file. As such four sectors in the storage are allocated for storing data for the word document file. If the word document later exceeds eight kilobytes then another extent having a size of eight kilobytes is provisioned to store data. Notably the extent may be located at an offset of ten megabytes 10 mB from sector zero 0 . Furthermore the another extent may be located at an offset of fifty megabytes 50 mB and additionally at an offset of eight kilobytes with respect to a beginning of the word document file. In other words the extent and the another extent are each data blocks that correspond with the first eight kilobytes and the next eight kilobytes respectively. Moreover the mapping information includes such offset and size information regarding the extent and the another extent.

The network comprises a communication system that connects computers by wire cable fiber optic and or wireless link facilitated by various types of well known network elements such as hubs switches routers and the like. The network may employ various well known protocols to communicate information amongst the network resources. For example the network may be a part of the internet or intranet using various communications infrastructure such as Ethernet WiFi WiMax General Packet Radio Service GPRS and the like.

According to various embodiments the file change log e.g. a change journal maintains information regarding input output activity on the source volume since a previous backup. In one embodiment the file change log records input output activity associated with the objects . For example the file change log may record operations performed on the objects while performing backup such as a deletion a modification a renaming and or the like. For example the file change log records each and every file system level operation e.g. write create delete rename and or the like on the source volume . The file change log may be utilized to play one or more file system level metadata operations during incremental backups in order configure a file system hierarchy of an incremental delta volume image file of the image files . Alternatively if the file change log is not available the file system hierarchy may be configured by comparing a current file system hierarchy of the source volume with a file system hierarchy of volume image file associated with the previous backup to determine one or more differences i.e. one or more file system level metadata operations .

According to various embodiments the changed block tracker includes a bitmap log that indicates each and every data block of the source volume that is modified as of a previous point of time. In one embodiment after the backup module identifies a selected object e.g. a file that is changed or created the backup module accesses one or more mappings between the selected object and data blocks within the source volume . For example the one or more mappings may be stored in a bitmap in which a flipped bit indicates a data block that corresponds with the selected object. Such a bitmap may be intersected with the changed block tracker to determine which data blocks of the selected object changed. As a result the backup module only copies the changed data blocks from the source volume to the image files . Alternatively if the change block tracker is not present on the server then the backup module copies each and every data block that corresponds with the changed and or created selected object and or identifies one or more changed data blocks within the selected object using various file version difference determination techniques.

According to various embodiments the snapshot is a point in time consistent image of the source volume . Various technologies e.g. MICROSOFT Shadow Copy and or the like may be employed to generate the snapshot . In one or more embodiments the snapshot represents a point in time consistent copy of the data blocks within the source volume . The snapshot may be generated for the source volume to ensure point in time consistency for a copy of the source volume regardless of any subsequent modification addition and or deletion of data. In one embodiment the snapshot indicates locations of data blocks that have changed and or created since a previous point in time as well as locations of data blocks that have not changed and or created.

The source volume may be backed up to the image files at various points in time i.e. volume image backups such as a volume image full backup a volume image incremental backup a volume image synthetic backup and or the like . The image files may be generated by an enterprise backup software e.g. SYMANTEC NetBackup products SYMANTEC BackupExec products and or the like to represent one or more storage states of a physical machine a virtual machine a hard disk drive and or the like. In one embodiment the source volume is copied to the image files in block order i.e. a block dump of each and every data block . According to various embodiments the image files may be volume image files. Furthermore the image files may include one or more volume level backup files such as VMWARE Virtual Machine Disk backup .VMDK MICROSOFT Virtual Hard Drive backup .VHD a hard disk partition backup an image backup and or the like as well as one or more configuration files e.g. .VWX for VMWARE .

According to various embodiments of the present invention the backup module generates one or more mappings between the objects and one or more data blocks i.e. extents within the source volume . In one embodiment the backup module indicates that a data block for a particular file is located at a ten megabyte offset from a first sector of the source volume . In one embodiment the backup module utilizes one or more known mapping techniques e.g. VERITAS Mapping Service VxMS and or the like to determine locations of data blocks that form the particular file which are allocated in accordance with the file system employed at the source volume . Such mappings facilitate extraction of any data block that corresponds with the particular file from the source volume by the driver as explained below.

According to one or more embodiments the driver i.e. a file system driver such as a NTFS file system driver includes software code that recognizes a file system hierarchy of the objects e.g. file system objects such as data files within the source volume . It is appreciated that the image files may be empty image files when initially created. Furthermore the driver may utilize various Operating System OS function calls to create and open the image files and or the objects such as Create File Open File and the like. In one or more embodiments the driver writes the data blocks at an offset as read from the objects . For example if the data block of a file is at an offset of the source volume then the data block is written at an offset of a corresponding file in a destination volume e.g. virtual volume included within a particular image file of the image files .

According to one or more embodiments the driver accesses one or more full and or incremental backups i.e. a backup chain by synthesizing a full backup from the image files . Such a synthesized backup may be consistent with a point in time of interest such as a current point in time. In one embodiment the driver merges various information e.g. metadata file system hierarchy and or the like from each image file of the image files associated with the one or more full and or incremental backups. For example the driver processes each incremental backup in reverse chronological order until a base full backup in order to create the synthesized backup. As such the driver retains current data blocks and metadata in the synthesized backup. Consequently the driver may mount one or more image files for the synthesized backup to read and or restore one or more data blocks.

According to one or more embodiments the backup module creates the image files of which the driver mounts in order to perform various operations such as configuring a file system hierarchy and or writing data. Initially the image files are configured with necessary volume information and the file system hierarchy and represent a valid volume without actual user files and directories. In one embodiment the backup module uses the driver to create one or more corresponding files and directories within the image files that correspond with the file system hierarchy and the metadata of the source volume . Hence the backup module provisions the image files with a destination volume. In one embodiment the backup module uses the driver to allocate storage space for the one or more files and directories based upon the mapping information . Basically the backup module configures the file system hierarchy to create a destination volume within the image files for storing selected objects e.g. selected files and or folders of the objects according to one or more embodiments.

In operation the backup module processes the mapping information to optimize a volume based backup of selected objects of the objects and reduce overhead e.g. disk seek overhead file system query overhead and or the like . Consequently the volume based backup i.e. the image files of the selected objects may be mounted by various software programs. For example data protection software may perform various backup and recovery operations using the volume based backup. In one embodiment the image files may be mounted and assigned a driver letter through which the selected objects. In another embodiment the image files may be used as virtual disks for various virtual server applications. Furthermore because the image files are stored on disk and not magnetic tape the selected objects may be accessed randomly instead of sequentially. Hence the backup module creates the image files to be optimal for selected object extraction.

In one embodiment the backup module sorts the mapping information based on data block locations of the objects . For example the backup module arranges mappings between data blocks i.e. extents and files by sector number within the source volume . Hence the data blocks may be read from the source volume in sector order instead of file order. It is appreciated that the data blocks may be read in file order in accordance with various embodiments. In one embodiment the backup module utilizes the driver to write the data blocks to the corresponding offsets of the corresponding objects within the destination volume within the image files . In one or more embodiments the driver may invoke various functions of a file system Application Programming Interface API to perform such write operations.

According to various embodiments of the present invention the backup module utilizes the filter e.g. a virtual file filter to capture each and every write operation before being applied to the image files . In one embodiment the filter stores one or more modified data blocks in a separate volume image file e.g. an incremental backup delta volume image file of the image files . For example if data protection software e.g. True Capture based continuous data protection at the storage performs write operations on the image files then the filter captures and redirects the write operations to an incremental delta backup volume image file. As such various file system level operations e.g. delete directory rename directory move file and or the like may be performed in between two or more points in time. According to various embodiments the backup module may examine the file change log to identify one or more file system level operations performed on the metadata of the source volume . Alternatively the backup module compares file system hierarchies between the source volume and a destination volume within the image files to identify one or more differences if the file change log is unavailable.

As an example and not as a limitation the backup module may instruct the driver to mount the source volume to select and access one or more objects of the objects . In one embodiment the driver generates the snapshot . In one embodiment the backup module may utilize the changed block tracker i.e. a technique designed to monitor modifications to the source volume to identify one or more modified and or added data blocks. Alternatively the driver may utilize archive bits to identify the one or more changed and or created objects e.g. files . For example the driver sets an archive bit when a data block for a file is modified and or added. Once the changed file is successfully backed up the backup module resets the archive bit. In one alternative embodiment the driver utilizes the archive bits if the changed block tracker is not available. In another alternative embodiment the driver may utilize the metadata to identify the one or more modified and or added data blocks. For example the backup module may compare time and date information regarding modifications to the selected objects to identify whether any object of the selected objects changed since a previous point in time e.g. a previous backup of the source volume .

At step a snapshot e.g. the snapshot of is generated for the source volume. At step mapping information e.g. the mapping information of is processed for selected objects e.g. selected ones of the objects of . At step one or more empty image files e.g. the image files of are created. At step the one or more empty image files are mounted. At step a file system hierarchy for the one or more empty image files is configured. At step one or more data blocks for the selected objects are read from the source volume in sector order. At step the one or more data blocks are written to the one or more empty image files. At step the method ends.

At step image files are accessed. At step one or more file system metadata operations performed at a source volume are determined from a file change log e.g. the file change log of . In one embodiment the one or more file system metadata operations correspond with one or more selected objects and or any parent ancestor directories. At step one or more empty image files e.g. the image files of for an incremental backup are created. At step the one or more file system level metadata operations are played on a destination volume within the one or more empty image files. As explained above the one or more file system level metadata operations are captured by a virtual file filter and redirected to the one or more empty image files to which such operations are applied according to one embodiment.

At step the mapping information is processed. At step data blocks i.e. extents for the selected objects are identified. At step a determination is made as to whether any of the data blocks of the selected objects intersect a changed block tracker e.g. the changed block tracker of . If it is determined that one or more data blocks of the selected objects intersect the changed block tracker option YES then the method proceeds to step . At step the one or more data blocks are read from the source volume in sector order e.g. increasing sector order .

At step the one or more data blocks are written to corresponding offsets of corresponding files in a destination volume within the one or more empty image files. As explained above a file system driver e.g. the driver of attempts to write the data blocks to the image files however a virtual file filter the filter of captures and redirects each and every write operation to the one or more empty image files for the incremental backup. Subsequently the method proceeds to step . If at step it is determined that no data block of the selected objects intersects the changed block tracker option NO then the method proceeds to step . At step the method ends.

At step write operations to the image files are captured. At step the write operations are redirected to an image file for a subsequent incremental backup. At step modified data blocks are written to the image file for the subsequent incremental backup in accordance with the write operations. For example any data block modified or added as of a previous point in time is written to the image file for the subsequent incremental backup. At step the method ends.

While the foregoing is directed to embodiments of the present invention other and further embodiments of the invention may be devised without departing from the basic scope thereof and the scope thereof is determined by the claims that follow.

