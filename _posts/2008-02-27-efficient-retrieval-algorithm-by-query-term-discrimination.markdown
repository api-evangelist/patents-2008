---

title: Efficient retrieval algorithm by query term discrimination
abstract: A method and system for use in information retrieval includes, for each of a plurality of terms, selecting a predetermined number of top scoring documents for the term to form a corresponding document set for the term. When a plurality of terms are received, optionally as a query, the system ranks, using an inverse document frequency algorithm, the plurality of terms for importance based on the document sets for the plurality of terms. Then a number of ranked terms are selected based on importance and a union set is formed based on the document sets associated with the selected number of ranked terms.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07925644&OS=07925644&RS=07925644
owner: Microsoft Corporation
number: 07925644
owner_city: Redmond
owner_country: US
publication_date: 20080227
---
This non provisional patent application claims the benefit of and priority to U.S. Provisional Patent Application 60 892 418 entitled Efficient Retrieval Algorithm by Query Term Discrimination filed Mar. 1 2007 which is incorporated by reference herein in its entirety.

Information retrieval IR technology is widely used in search engines for web searches. Generally inverted indexing is used to increase speed of a retrieval algorithm. However as data scale becomes large scanning candidate items in an index table can become quite time consuming. Such time demands can affect tasks such as retrieval of relevance ads. For example a conventional system may need to retrieve relevance ads from tens of millions of ads in a time period of about 30 ms. Thus a need exists for more efficient retrieval technology.

An exemplary method for use in information retrieval includes for each of a plurality of terms selecting a predetermined number of top scoring documents for the term to form a corresponding document set for the term receiving a plurality of terms optionally as a query ranking the plurality of terms for importance based at least in part on the document sets for the plurality of terms where the ranking comprises using an inverse document frequency algorithm selecting a number of ranked terms based on importance where each selected ranked term comprises its corresponding document set wherein each document in a respective document set comprises a document identification number forming a union set based on the document sets associated with the selected number of ranked terms and for a document identification number in the union set scanning a document set corresponding to an unselected term for a matching document identification number. Various other exemplary systems methods devices etc. are also disclosed.

Exemplary retrieval technology is described herein. Such Information Retrieval IR technology may be used in search engines for performing web searches. A document e.g. a webpage an advertisement etc. may be referred to as an item. IR technology typically aims to rank items based on one or more relevance criteria e.g. query information common information between items etc. . Items ranked highly may be considered more important than other items e.g. those with lower rank . An exemplary retrieval method operates by selecting a set of most important items from an index table to be used as candidate items and implementing a merge algorithm that calculates scores of the items for a ranking. Such a method can achieve high accuracy while being very efficient.

As described herein an exemplary method can include selecting a set of items as candidates to speed up retrieval selecting a set of important items which covers the most relevant items and or implementing an exemplary merge algorithm that calculates a score of pre selected candidate items in an inverted index table.

A reception block operates online to receive a query e.g. submitted by a user and to parse the query into terms which may be identified as term  term  . . . term N where N is the total number of terms in the query after parsing. A match block matches the terms to an appropriate number of raw sets. Next a merge block uses a conventional merge algorithm to calculate a final score for each document e.g. using a heap or a loser tree . After calculation a result or results may be output online by an output block . For example a user may input a query e.g. one or more terms and then receive a list of items as search results where the items are ordered in the list according to their individual scores.

In general the BM25 algorithm or ranking formula is derived from a probabilistic model that includes assigning to each term appearing in a given document a weight depending on a count e.g. the number of occurrences of the term in the document on a frequency e.g. the number of the documents in which the term appears and on document length e.g. in words . A document can be represented as a vector of term frequencies d f . . . f . . . f where fis the document term frequency number of occurrences of the i th term in the vocabulary. As already explained a query can be represented as the set of terms in the original user query e.g. via parsing or other technique . Okapi is the name of a particular retrieval engine that supports the BM25 algorithm an okapi is an animal in the family Giraffidae .

The method includes a calculation block that calculates BM25 scores offline. A storage block stores the scores in a matrix one raw set for each term e.g. a set of documents for each term . A sort block sorts the documents by BM25 scores. For each term a selection block selects the top K documents as important documents for the term where K is or represents a number. Next for each term the top K documents are stored or otherwise marked or identified for use in online retrieval. As described herein an exemplary method includes for a term sorting documents by score and then selecting a number of the total number of documents e.g. K documents as important documents for the term.

As described herein an exemplary offline method for use in online information retrieval include for each of a plurality of terms selecting a predetermined number of top scoring documents for the term to form a corresponding document set for the term and storing or marking the document sets for subsequent access responsive to an online query. In such a method the scoring may be BM25 scoring and the predetermined number of top scoring documents may be a number less than 25 or other number.

The method of includes a reception block that receives a query and parses if or as appropriate the query into terms which may be identified as term  term  . . . term N where N is the total number of terms in the query after parsing. A rank block ranks the parse terms using an inverse document frequency IDF or idf where the lower the IDF value the more important the term. According to the example of the selection block selects the two most important terms labeled term I and term I.

Given the two most important terms a formation block forms a set based on a union of a set documents for term I and a set of documents for term I. A search block searches the results of the union e.g. the union set using an exemplary merge algorithm see e.g. . An output block allows for output of results online.

As described herein an exemplary method for online information retrieval includes receiving a query that includes a plurality of terms accessing documents or information about documents based on the accessing ranking the plurality of terms for importance selecting a number of ranked terms based on importance where each selected ranked term has a corresponding document set where each document in a respective document set has a document identification number forming a union set based on the document sets associated with the selected number of ranked terms and for a document identification number in the union set scanning a document set corresponding to an unselected term for a matching document identification number. In such a method the ranking can include use of an inverse document frequency algorithm.

In this example the two most important terms are termand term indicated by asterisks thus s 1 5 9 3 i.e. the union set and k 9 3 3 i.e. size of documents set of term . To commence the search first selects the docID 1 from the union set 1 5 9 and sets the pointer P 0 noting that the current docID e.g. cur docID in term is 1 as well. Then the search selects the next docID 5 from the union set 1 5 9 since the pointer P 0 and the cur docID is 1 the pointer is set as follows P P k 3 and the cur docID is 4 for the set of documents for term. Because the cur docID 4 is smaller than 5 the pointer is set as follows P P k 6 where the cur docID is 8 for the set of documents for term.

Accordingly a binary search performed in the zone with pointer position 3 to pointer position 6 i.e. docIDs 4 5 6 8 of the set of documents for term finds 5 . After getting 5 by binary search the search is left with the pointer Pin position 4 which is the position of docID 5 in the set of documents for term. To continue the binary search would select the docID 9 from the union set and repeat the process for docID 9 as was performed for the docID 5 .

An exemplary method for use in information retrieval includes sorting documents using a score associated with a term selecting the top K sorted documents for use in a document retrieval process e.g. the number K may be selected as appropriate based on any of a variety of criteria or formula or formulas receiving a plurality of terms optionally as a query ranking each of the plurality of terms for importance using an inverse document frequency value selecting the two most important ranked terms forming a union set based on two document sets one for each of the two most important ranked terms wherein the documents of each set comprise the top K documents for a respective term and scanning the documents using document identification numbers of documents in the union set to find documents in other sets having identification numbers that match those of the documents in the union set. In such a method scanning may use of a pointer that indicates a scanning position. As already mentioned scanning may use jumping and binary searching.

BM25 A BM25 algorithm is used to rank the relevance of Ads in a system. Following is the description of BM25 algorithm.

BM25 scoring Okapi ranking formula provides a mechanism for computing the IR score of a document based on the combination of some most frequently used document features term frequency TF document frequency DF and document length.

k b k and kare parameters which depend on the on the nature of the queries and possibly on the database.

For some TREC 7 experiments kwas set to 1.2 and b was set to 0.75 except where stated otherwise kwas always set to zero and kwas set to a number from 0 to 1000. In the equation tf is the frequency of occurrence of the term within a specific document and qtf is the frequency of the term within the topic from which Q was derived. dl and avdl are the document length and average document length e.g. arbitrary units respectively.

Inverted Indexing Generally inverted indexing technology is used to speed up the online retrieval algorithm. The index table is a matrix. The BM25 score is calculated offline and stored in a matrix. Each raw of the matrix is for a term. The docID score pairs are stored for online retrieval and each pair is sorted by the document id docID . When a query is submitted the query is parsed into terms. From the terms several raws are provided and a merge algorithm is used to calculate the final score of each document. The merge algorithm uses Priority Queue which is implemented by heap or loser tree. The total time complexity is O Llog n where n is the term number in the query and Lis the length of the raw for the i th term term . In this approach the results will be in the document set Doc.

Exemplary Technique An exemplary query term discrimination approach searches the results in important document sets of important query terms. Accordingly in an offline pre calculation an exemplary technique includes sorting documents of each term by BM25 scores and selecting the top K documents as the important documents of this term. When a query is submitted the query may be parsed into terms and the exemplary technique can rank the terms to aid in selection of important terms. For example IDF can be used to select the important terms where the lower the IDF value a term has the more important the term is. For example a technique may select the two most important terms e.g. termand term and search the results in the union set of the documents for these selected important terms e.g. the union set Doc Doc . While two terms is given as an example more than two terms may be deemed important terms.

As already mentioned an exemplary merge algorithm may be employed. With respect to time complexity the time complexity can be described as O 2ns s log k where s is the size of the important document set for the important terms where Sizeis the size of the document set of termand where kis Size s or Size ktimes s .

An exemplary merge algorithm may include Scanning the docID score pair in Doc Docone by one and finding the pairs of the same docID in the other raw sets i.e. sets for terms not deemed important or included in the union set . For those raw sets a pointer Pis assigned for each raw set to stand for a current scanning position. Accordingly for each iteration a comparison of the docID in poccurs with the current docID in the union set Doc Doc. If the docID in pis smaller the algorithm lets pjump over kpairs where kwas previously defined above. In such a manner p k. Then a subsequent comparison can be performed where if the docID in pin still smaller the algorithm lets pjump again and if this condition is not met then the algorithm can call for use of a binary search to search the pairs in the last jump e.g. a prior jump .

According to such an exemplary technique for each term of a query a jump can occur s times and a binary search can occur S times in a zone with the size k. Such a retrieval algorithm can greatly improve performance. Further since the most importance documents are scanned accuracy does not decrease when compared to the conventional approach see e.g. the conventional method of .

As described herein an exemplary method for use in information retrieval includes for each of a plurality of terms selecting a predetermined number of top scoring documents for the term to form a corresponding document set for the term receiving a plurality of terms optionally as a query ranking the plurality of terms for importance based at least in part on the document sets for the plurality of terms where the ranking uses an inverse document frequency algorithm selecting a number of ranked terms based on importance where each selected ranked term has its corresponding document set where each document in a respective document set has a document identification number forming a union set based on the document sets associated with the selected number of ranked terms and for a document identification number in the union set scanning a document set corresponding to an unselected term for a matching document identification number.

In the foregoing method the scanning can use a pointer that indicates a scanning position in a document set corresponding to an unselected term. Further scanning may rely on jumping and or binary searching. As shown in various examples the number of ranked terms may be two noting other numbers may be used. The foregoing method may include repeating the scanning for more than one document identification number in the union set. As an example the predetermined number of documents may be a number less than approximately 25.

An exemplary method may include comparing a document score associated with a document identification number in a document set corresponding to an unselected term to a document score associated with the document identification number in a union set. In such a method based at least in part on the comparing jumping a pointer for the document set corresponding to the unselected term or binary searching in the document set corresponding to the unselected term may occur. For example jumping can occur if the document score associated with a document identification number in the document set corresponding to the unselected term is less than the document score associated with the document identification number in the union set and binary searching can occur if the document score associated with a document identification number in the document set corresponding to the unselected term is not less than the document score associated with the document identification number in the union set.

The computing device shown in is only one example of a computer environment and is not intended to suggest any limitation as to the scope of use or functionality of the computer and network architectures. Neither should the computer environment be interpreted as having any dependency or requirement relating to any one or combination of components illustrated in the example computer environment.

With reference to one exemplary system for implementing an exemplary search mechanism includes a computing device such as computing device . In a very basic configuration computing device typically includes at least one processing unit and system memory . Depending on the exact configuration and type of computing device system memory may be volatile such as RAM non volatile such as ROM flash memory etc. or some combination of the two. System memory typically includes an operating system one or more program modules and may include program data . This basic configuration is illustrated in by those components within dashed line .

The operating system may include a component based framework that supports components including properties and events objects inheritance polymorphism reflection and provides an object oriented component based application programming interface API such as that of the .NET Framework manufactured by Microsoft Corporation Redmond Wash.

Computing device may have additional features or functionality. For example computing device may also include additional data storage devices removable and or non removable such as for example magnetic disks optical disks or tape. Such additional storage is illustrated in by removable storage and non removable storage . Computer storage media may include volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. System memory removable storage and non removable storage are all examples of computer storage media. Thus computer storage media includes but is not limited to RAM ROM EEPROM flash memory or other memory technology CD ROM digital versatile disks DVD or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can be accessed by computing device . Any such computer storage media may be part of device . Computing device may also have input device s such as keyboard mouse pen voice input device touch input device etc. Output device s such as a display speakers printer etc. may also be included. These devices are well know in the art and need not be discussed at length here.

Computing device may also contain communication connections that allow the device to communicate with other computing devices such as over a network. Communication connection s is one example of communication media. Communication media may typically be embodied by computer readable instructions data structures program modules or other data. By way of example and not limitation communication may occur via a wired network or direct wired connection.

Various modules and techniques may be described herein in the general context of computer executable instructions such as program modules executed by one or more computers or other devices. Generally program modules include routines programs objects components data structures etc. for performing particular tasks or implement particular abstract data types. These program modules and the like may be executed as native code or may be downloaded and executed such as in a virtual machine or other just in time compilation execution environment. Typically the functionality of the program modules may be combined or distributed as desired in various embodiments.

An implementation of these modules and techniques may be stored on or transmitted across some form of computer readable media. Computer readable media can be any available media that can be accessed by a computer.

One skilled in the relevant art may recognize however that the techniques described herein may be practiced without one or more of the specific details or with other methods resources materials etc. In other instances well known structures resources or operations have not been shown or described in detail merely to avoid obscuring aspects of various exemplary techniques.

While various examples and applications have been illustrated and described it is to be understood that the techniques are not limited to the precise configuration and resources described above. Various modifications changes and variations apparent to those skilled in the art may be made in the arrangement operation and details of the methods and systems disclosed herein without departing from their practical scope.

