---

title: Methods and systems for providing application manifest information
abstract: A computer-implemented method for providing application manifest information may include analyzing source code of a software application. The method may also include detecting that the source code is programmed to access a computer resource and determining a security implication of the source code being programmed to access the computer resource. Determining the security implication may include providing a notification of the security implication of the source code to a developer of the source code. Determining the security implication may also include providing information about the security implication in an application manifest. Systems and computer-readable-media for creating and editing application manifests are also disclosed.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09158558&OS=09158558&RS=09158558
owner: Symantec Corporation
number: 09158558
owner_city: Mountain View
owner_country: US
publication_date: 20080331
---
Over the next decade computer security programs may continue to transition from primarily blacklist based anti malware solutions to whitelist based solutions. Whitelist based solutions may allow whitelisted software applications to run while blocking all other applications. However whitelist based solutions may not block all malicious code from executing. For example a publisher may provide legitimate software for a period of time in order to gain trust and have the software whitelisted. The publisher may then introduce malicious code into the whitelisted software. As another example a malicious developer in a trusted software company may introduce malware in a whitelisted program.

Traditional behavior monitoring systems may provide some protection against malware in whitelisted software. Behavior monitoring systems may monitor a software application and attempt to block malicious actions of the application. However most traditional behavior monitoring systems do not effectively evaluate and control the behavior of software applications.

Traditional behavior monitoring systems may be ineffective because they may lack the information needed to determine whether a software application is acting maliciously. Behavior monitoring systems may use generalized rules to monitor applications but they may be unable to determine whether an application should be allowed to access a particular file or network resource.

Behavior monitoring systems may attempt to analyze an application and determine all of the normal activities performed by the application. The behavior monitoring systems may then prevent abnormal activity. However analyzing most applications may result in a broad list of actions and may not provide the monitoring system with information that will allow effective behavior monitoring. For example malicious activities may be treated as normal activities and may not be blocked.

The present disclosure provides methods and systems for improving application behavior monitoring. Some embodiments may provide source code developers with tools that help them generate application manifests for their source code. For example a source code evaluation module may analyze the source code of a software application and detect that the source code is programmed to access a computer resource. The evaluation module may then determine a first security implication of the source code being programmed to access the computer resource. The evaluation module may notify the developer of the first security implication.

In various embodiments the evaluation module may query the developer about modifying the source code s access to the computer resource. The developer may decide not to modify the source code may manually modify the source code or may allow the evaluation module to automatically modify the source code. If the source code s access to the resource is not modified the evaluation module may include information about the first security implication in an application manifest. If the source code s access is modified the evaluation module may determine a second security implication of the source code s modified access to the computer resource. The evaluation module may include information about the second security implication in the application manifest.

In other embodiments the evaluation module may not query the developer about modifying the source code s access to the computer resource. Instead the evaluation module may automatically include information about the first security implication in an existing application manifest or may create a new application manifest and include the information about the first security implication in the new application manifest. The application manifest may be formatted to provide an application behavior monitor with the information about the security implication.

The computer resource may be any resource of a destination computer of the source code. The computer resource may also be any network resource available to a destination computer of the source code. For example the computer resource may be a file a file system a folder an application programming interface a communication port a peripheral device and or a network resource.

In some embodiments the evaluation module may be a standalone tool or may be part of an integrated development environment. The evaluation module may analyze the source code as the source code is being created. Alternatively the evaluation module may analyze the source code when the source code is compiled or at any other suitable time.

Throughout the drawings identical reference characters and descriptions indicate similar but not necessarily identical elements. While the exemplary embodiments described herein are susceptible to various modifications and alternative forms specific embodiments have been shown by way of example in the drawings and will be described in detail herein. However the exemplary embodiments described herein are not intended to be limited to the particular forms disclosed. Rather the instant disclosure covers all modifications equivalents and alternatives falling within the scope of the appended claims.

The following is intended to provide a detailed description of various exemplary embodiments and should not be taken to be limiting in any way. Various exemplary methods and systems for providing application manifest information are described and or illustrated herein. The instant disclosure presents tools that may help source code developers create accurate application manifests. Some embodiments may automatically create application manifests.

Creating application manifests that accurately describe the function of a software application may be particularly important when the application manifest may be used by a behavior monitor that monitors the software application. However developers may not typically have any incentive to create accurate detailed application manifests. For example in creating an application manifest a developer may choose the easiest path and ask for maximum access to resources. Such an application manifest may not be very useful in behavior monitoring. Furthermore developers may typically create an application manifest after finishing development of the software application. However the developer may not remember or have time to research the exact resource access needs of the software application. Thus the application manifest may be overbroad incomplete or even inaccurate.

Embodiments of the present disclosure may help developers create accurate application manifests that can be used by behavior monitoring systems. Some embodiments may provide an interactive process that generates application manifests while the software application is being developed. In other embodiments an evaluation module may automatically evaluate the source code and create the application manifest based on information obtained from the source code which may result in a more accurate detailed application manifest.

Embodiments of the instant disclosure may also prompt developers to create code that may evaluate as less risky. For example an evaluation module may notify a developer if the source code may behave in a way that would cause an application behavior monitor to issue an alert or warning. The developer may not want the code to continuously trigger behavior monitor alerts because such code may appear insecure to a user. The evaluation module may suggest changes that will help the developer create code that a behavior monitor may consider safe.

In addition to traditional software development tools development environment may also include a source code evaluation module . While shows source code evaluation module as part of development environment source code evaluation module may also be a stand alone tool or may be part of any other software development tool.

Source code evaluation module may analyze source code to detect code that is programmed to access a computer resource. After detecting code that is programmed to access a computer resource source code evaluation module may determine a security implication of the source code being programmed to access the computer resource. For example source code evaluation module may detect that source code is programmed to have access to directories e.g. a My Documents directory that may contain sensitive personal information of an end user of source code .

Source code evaluation module may determine a security implication of source code being programmed to access the resource by comparing the code that is programmed to access the resource against entries in security implication database . Security implication database may associate code such as code and with security implications such as security implications and . As shown in code may be associated with security implication code may be associated with security implication and code may be associated with security implication . Security implications and may provide security access information information formatted to be included in an application manifest information formatted to be displayed to a code developer and or any other information related to security implications of code. The code developer may be any user that creates programs edits or otherwise works with source code .

In one example code may represent code programmed to access a My Documents folder on an end user s machine and security implication may provide access scope information that states the code is programmed to access the My Documents folder. Code may represent code programmed to access a critical system resource and security implication may provide access scope information that states the code is programmed to access the system resource. Code may represent code programmed to access the internet and security implication may provide access scope information that states the code is programmed to access the internet.

If source code is programmed to access the My Documents folder source code evaluation module may detect that source code is programmed to detect the My Documents folder by identifying that the source code is comparable to code in security implication database . Source code evaluation module may determine a security implication of source code by reading or retrieving security implication .

After determining security implication of source code source code evaluation module may ask the developer whether source code really needs broad access to the My Documents folder. Source code evaluation module may also offer to modify the source code to provide more tailored access that would not cause a behavior monitor to provide warnings to an end user about the code s broad access to the My Documents folder. If the developer agrees to allow source code evaluation module to edit source code source code evaluation module may automatically edit source code and may include information about the source code s narrower access in application manifest .

If the developer does not agree to allow source code evaluation module to edit source code the developer may manually edit source code . Source code evaluation module may determine a security implication of the edited code and may include information about the new security implication in application manifest . If the developer decides not to modify the source code source code evaluation module may include information about security implication in application manifest . An example of an application manifest is provided in .

The information about security implication that is included in application manifest may comprise security implication or any other information that may convey a scope of access indicated by security implication to a behavior monitor. In some embodiments security implication database may be populated with entries that help source code evaluation module identify source code that may cause application monitoring program to issue warnings alerts or any other notifications to an end user of source code e.g. an end user of an application built from source code .

Security implication database may include a set of knowledge that indicates what code creates security access risks. Security implication database may also provide knowledge about how code creates security access risks. Security implication database may obtain some or all of this knowledge from application monitoring program e.g. security implication database may contain knowledge of code that when executed will trigger a response from application monitoring program . The knowledge in security implication database may also be generated through any other suitable mechanism. Security implication database may identify application programming interfaces of concern data access issues and various other security issues.

Source code evaluation module may create application manifest . In other embodiments application manifest may already exist and source code evaluation module may modify application manifest . Application manifest may be updated or created as a developer enters and edits source code in source code editor . In other words application manifest may be updated in real time and may accurately reflect the contents of source code . In other embodiments application manifest may be created or modified when source code is compiled by compiler . Application manifest may also be modified or generated when the developer uses debugger or linker on source code . Thus source code evaluation module may run during programming compilation debugging linking and or at any other suitable time.

After analyzing the source code of the software application the source code evaluation module may detect that the source code is programmed to access a computer resource step . The source code evaluation module may detect that the source code is programmed to access the resource by detecting sections of the code that request read access write access copy access or any other access to a resource of a computer. The source code evaluation module may also detect that the source code is programmed to access the resource by analyzing declarations and other variables in the source code. The source code evaluation module may analyze the source code in any other suitable manner to detect that the source code is programmed to access a computer resource. For example the source code evaluation module may compare to source code to code descriptions or entries in a security implication database.

The computer resource referred to in step may be a file system a file a folder an application programming interface a network resource a peripheral device e.g. external storage devices input devices output devices etc. and or a communication port of a destination computer of the software application a destination computer of the software application may be any computing device on which the software application may be installed . The computer resource may also be a file system a file a folder an application programming interface a network resource a peripheral device and or a communication port of a network computing device accessible through the destination computer. The resource may also be any other data application and or process running on the destination computer or on any network device accessible through the destination computer.

The source code evaluation module may determine a security implication of the source code being programmed to access the computer resource step . In other words the source code evaluation module may determine whether there is a security implication e.g. a potential security risk associated with an access scope declaration or potential resource access of the source code. A security implication may be any information about the source code s potential access to the computer resource. For example a security implication may state that the source code is programmed to have broad access to potentially sensitive computer resources. A potentially sensitive resource may be a folder a file or any other resource that may contain financial information e.g. bank account information credit card information etc. personal information e.g. social security numbers birthdays passwords or any other information that a user may want to keep others from accessing.

While analyzing the source code the source code evaluation module may detect that the source code is programmed to access a computer resource step . The source code evaluation module may then determine a first security implication of the source code being programmed to access the computer resource step . In some embodiments determining the first security implication may comprise providing a notification of the security implication of the source code to a developer of the source code. The notification may query the developer about whether to modify the source code s access to the computer resource decision point .

In response to the query or suggestion the developer may modify the source code s access to the resource step . Alternatively the developer may choose to allow the source code evaluation module to automatically modify the source code s access. If the source code s access has been modified either by the developer or by the source code evaluation module the source code evaluation module may determine a second security implication of the modified source code s access to the resource step . In other words the source code evaluation module may reevaluate the security implications of the source code after the source code has been edited.

After determining the second security implication of the source code the source code evaluation module may include information about the second security implication in an application manifest step . Alternatively if the source code is not modified information about the first security implication may be included in an application manifest step . In other embodiments the source code evaluation module does not query the developer e.g. decision point may be skipped . In such embodiments after determining the first security implication the source code evaluation module may automatically include information about the first security implication in an application manifest.

In some embodiments the source code evaluation module may analyze the source code to make a predetermination of how the source code would score in a security analysis. If the resource access scope of the program would affect the code s treatment by a behavior monitor or security analysis tool the source code evaluation module may explain the issue to the developer e.g. the source code evaluation module may display a notification to the user that contains information about the security implications of the source code . The source code evaluation module may suggest alternatives or may offer to automatically modify the source code.

For example the source code evaluation module may detect a generic file system access tainted by user input. The source code evaluation module may alert the developer that the requested access and taint may result in a low score in a security analysis. The source code evaluation module may suggest eliminating the taint and or limiting access scope in a manner that would result in a better security analysis score. The developer may select a remediation option and the source code evaluation module may automatically implement the selected remediation by editing the source code. For example the source code evaluation module may edit the source code to limit access to a specific file type such as word processor documents. The source code evaluation module may generate application manifest data stating that the source code is only allowed to access word processor documents. Thus if the code attempts to access other types of documents a behavior monitor may block the access attempt and or provide an alert to a user.

Access scope information may be information about one or more security implications of the source code. In other words access scope information may define or describe the breadth of the resource access required requested and or programmed in the source code. Access scope information may accurately represent the resource access scope of the source code and may therefore enable an application monitor that uses application manifest to more effectively monitor the software application.

In one example software application may attempt to access resource on server . In other embodiments resource may be a resource of computing device . Application monitoring program may detect that software application is attempting to access resource . Application monitoring program may use application manifest to determine whether resource is within a resource access scope of software application . Application monitoring program may determine that resource is outside the access scope indicated by application monitoring program and may alert a user of computing device that software application is attempting to access a resource outside its defined scope. Application monitoring program may also ask the user whether to allow software application access to resource .

Processor generally represents any type or form of processing unit capable of processing data or interpreting and executing instructions. In certain embodiments processor may receive instructions from a software application or module. These instructions may cause processor to perform the functions of one or more of the exemplary embodiments described and or illustrated herein. For example processor may perform and or be a means for performing either alone or in combination with other elements one or more of the receiving analyzing detecting determining modifying providing and including steps described herein. Processor may also perform and or be a means for performing any other steps methods or processes described and or illustrated herein.

System memory generally represents any type or form of volatile or non volatile storage device or medium capable of storing data and or other computer readable instructions. Examples of system memory include without limitation random access memory RAM read only memory ROM flash memory or any other suitable memory device. Although not required in certain embodiments computing system may comprise both a volatile memory unit such as for example system memory and a non volatile storage device such as for example primary storage device as described in detail below .

In certain embodiments exemplary computing system may also comprise one or more components or elements in addition to processor and system memory . For example as illustrated in computing system may comprise a memory controller an Input Output I O controller and a communication interface each of which may be interconnected via a communication infrastructure . Communication infrastructure generally represents any type or form of infrastructure capable of facilitating communication between one or more components of a computing device. Examples of communication infrastructure include without limitation a communication bus such as an ISA PCI PCIe or similar bus and a network.

Memory controller generally represents any type or form of device capable of handling memory or data or controlling communication between one or more components of computing system . For example in certain embodiments memory controller may control communication between processor system memory and I O controller via communication infrastructure . In certain embodiments memory controller may perform and or be a means for performing either alone or in combination with other elements one or more of the steps or features described and or illustrated herein such as receiving analyzing detecting determining modifying providing and including.

I O controller generally represents any type or form of module capable of coordinating and or controlling the input and output functions of a computing device. For example in certain embodiments I O controller may control or facilitate transfer of data between one or more elements of computing system such as processor system memory communication interface display adapter input interface and storage interface . I O controller may be used for example to perform and or be a means for performing either alone or in combination with other elements one or more of the receiving analyzing detecting determining modifying providing and including steps described herein. I O controller may also be used to perform and or be a means for performing other steps and features set forth in the instant disclosure.

Communication interface broadly represents any type or form of communication device or adapter capable of facilitating communication between exemplary computing system and one or more additional devices. For example in certain embodiments communication interface may facilitate communication between computing system and a private or public network comprising additional computing systems. Examples of communication interface include without limitation a wired network interface such as a network interface card a wireless network interface such as a wireless network interface card a modem and any other suitable interface. In at least one embodiment communication interface may provide a direct connection to a remote server via a direct link to a network such as the Internet. Communication interface may also indirectly provide such a connection through for example a local area network such as an Ethernet network a personal area network such as a BLUETOOTH network a telephone or cable network a cellular telephone connection a satellite data connection or any other suitable connection.

In certain embodiments communication interface may also represent a host adapter configured to facilitate communication between computing system and one or more additional network or storage devices via an external bus or communications channel. Examples of host adapters include without limitation SCSI host adapters USB host adapters IEEE 1394 host adapters SATA and eSATA host adapters ATA and PATA host adapters Fibre Channel interface adapters Ethernet adapters or the like. Communication interface may also allow computing system to engage in distributed or remote computing. For example communication interface may receive instructions from a remote device or send instructions to a remote device for execution. In certain embodiments communication interface may perform and or be a means for performing either alone or in combination with other elements one or more of the receiving analyzing detecting determining modifying providing and including steps disclosed herein. Communication interface may also be used to perform and or be a means for performing other steps and features set forth in the instant disclosure.

As illustrated in computing system may also comprise at least one display device coupled to communication infrastructure via a display adapter . Display device generally represents any type or form of device capable of visually displaying information forwarded by display adapter . Similarly display adapter generally represents any type or form of device configured to forward graphics text and other data from communication infrastructure or from a frame buffer as known in the art for display on display device .

As illustrated in exemplary computing system may also comprise at least one input device coupled to communication infrastructure via an input interface . Input device generally represents any type or form of input device capable of providing input either computer or human generated to exemplary computing system . Examples of input device include without limitation a keyboard a pointing device a speech recognition device or any other input device. In at least one embodiment input device may perform and or be a means for performing either alone or in combination with other elements one or more of the receiving analyzing detecting determining modifying providing and including steps disclosed herein. Input device may also be used to perform and or be a means for performing other steps and features set forth in the instant disclosure.

As illustrated in exemplary computing system may also comprise a primary storage device and a backup storage device coupled to communication infrastructure via a storage interface . Storage devices and generally represent any type or form of storage device or medium capable of storing data and or other computer readable instructions. For example storage devices and may be a magnetic disk drive e.g. a so called hard drive a floppy disk drive a magnetic tape drive an optical disk drive a flash drive or the like. Storage interface generally represents any type or form of interface or device for transferring data between storage devices and and other components of computing system .

In certain embodiments storage devices and may be configured to read from and or write to a removable storage unit configured to store computer software data or other computer readable information. Examples of suitable removable storage units include without limitation a floppy disk a magnetic tape an optical disk a flash memory device or the like. Storage devices and may also comprise other similar structures or devices for allowing computer software data or other computer readable instructions to be loaded into computing system . For example storage devices and may be configured to read and write software data or other computer readable information. Storage devices and may also be a part of computing system or may be a separate device accessed through other interface systems.

In certain embodiments the exemplary file systems disclosed herein may be stored on primary storage device while the exemplary file system backups disclosed herein may be stored on backup storage device . Storage devices and may also be used for example to perform and or be a means for performing either alone or in combination with other elements one or more of the receiving analyzing detecting determining modifying providing and including steps disclosed herein. Storage devices and may also be used to perform and or be a means for performing other steps and features set forth in the instant disclosure.

Many other devices or subsystems may be connected to computing system . Conversely all of the components and devices illustrated in need not be present to practice the embodiments descried and or illustrated herein. The devices and subsystems referenced above may also be interconnected in different ways from that shown in . Computing system may also employ any number of software firmware and or hardware configurations. For example one or more of the exemplary embodiments disclosed herein may be encoded as a software application also referred to as computer software software applications computer readable instructions or computer control logic on a computer readable medium. The phrase computer readable medium generally refers to any form of device carrier or medium capable of storing or carrying computer readable instructions. Examples of computer readable media include without limitation transmission type media such as carrier waves and physical media such as magnetic storage media e.g. hard disk drives and floppy disks optical storage media e.g. CD or DVD ROMs electronic storage media e.g. solid state drives and flash media and other distribution systems.

The computer readable medium containing the software application may be loaded into computing system . All or a portion of the software application stored on the computer readable medium may then be stored in system memory and or various portions of storage devices and . When executed by processor a software application loaded into computing system may cause processor to perform and or be a means for performing the functions of one or more of the exemplary embodiments described and or illustrated herein. Additionally or alternatively one or more of the exemplary embodiments described and or illustrated herein may be implemented in firmware and or hardware. For example computing system may be configured as an application specific integrated circuit ASIC adapted to implement one or more of the exemplary embodiments disclosed herein.

As illustrated in one or more storage devices N may be directly attached to server . Similarly one or more storage devices N may be directly attached to server . Storage devices N and storage devices N generally represent any type or form of storage device or medium capable of storing data and or other computer readable instructions. In certain embodiments storage devices N and storage devices N may represent network attached storage NAS devices configured to communicate with servers and using various protocols such as NFS SMB or CIFS.

Servers and may also be connected to a storage area network SAN fabric . SAN fabric generally represents any type or form of computer network or architecture capable of facilitating communication between a plurality of storage devices. SAN fabric may facilitate communication between servers and and a plurality of storage devices N and or an intelligent storage array . SAN fabric may also facilitate via network and servers and communication between client systems and and storage devices N and or intelligent storage array in such a manner that devices N and intelligent storage array appear as locally attached devices to client systems and . As with storage devices N and storage devices N storage devices N and intelligent storage array generally represent any type or form of storage device or medium capable of storing data and or other computer readable instructions.

In certain embodiments and with reference to exemplary computing system of a communication interface such as communication interface in may be used to provide connectivity between each client system and and network . Client systems and may be able to access information on server or using for example a web browser or other client software. Such software may allow client systems and to access data hosted by server server storage devices N storage devices N storage devices N or intelligent storage array . Although depicts the use of a network such as the Internet for exchanging data the embodiments described and or illustrated herein are not limited to the Internet or any particular network based environment.

In at least one embodiment all or a portion of one or more of the exemplary embodiments disclosed herein may be encoded as a software application and loaded onto and executed by server server storage devices N storage devices N storage devices N intelligent storage array or any combination thereof. All or a portion of one or more of the exemplary embodiments disclosed herein may also be encoded as a software application stored in server run by server and distributed to client systems and over network . Accordingly network architecture may perform and or be a means for performing either alone or in combination with other elements one or more of the receiving analyzing detecting determining modifying providing and including steps disclosed herein.

As detailed above computing system and or one or more of components of network architecture may perform and or be means for performing either alone or in combination with other elements one or more steps of the exemplary computer implemented methods described and or illustrated herein. According to certain embodiments a computer implemented method may comprise analyzing source code of a software application detecting that the source code is programmed to access a computer resource and determining a security implication of the source code being programmed to access the computer resource.

In some embodiments determining the security implication may comprise providing a notification of the security implication of the source code to a developer of the source code. The notification may comprise a query to the developer about modifying the sources code s access to the computer resource. In some embodiments the method may comprise receiving a response to the query and modifying the source code s access to the resource based on the response.

In various embodiments determining the security implication may comprise including information about the security implication in an application manifest. The information about the security implication may be access scope information. In some embodiments the information about the security implication may be included in the application manifest when the source code is compiled or while the source code is being programmed.

According to various embodiments the application manifest may be formatted to provide an application behavior monitor with the information about the security implication. In some embodiments the resource of a computer may comprise a file system a file a folder an application programming interface a network resource or a communication port.

The computer implemented method may further comprise accessing a database. The database may associate the source code with the security implication. In some embodiments the database may identify code that when executed will trigger a response from an application behavior monitor. In various embodiments determining the security implication of the source code may be performed by an add on for an integrated development environment or a stand alone software evaluation application.

According to certain embodiments a computer readable media may comprise one or more computer executable instructions that when executed by a computing device may cause the computing device to analyze source code of a software application detect that the source code is programmed to access a computer resource and determine a security implication of the source code being programmed to access the computer resource.

In some embodiments the one or more computer executable instructions may be further operable to cause the computing device to provide a notification of the security implication of the source code to a program of the source code. In some embodiments the one or more computer executable instructions may be further operable to cause the computing device to receive a response to the notification and modify the source code s access to resource based on the response. In some embodiments the one or more computer executable instructions may be further operable to cause the computing device to include information about the security implication in application manifest.

According to certain embodiments a computer implemented method for providing application manifest information may comprise analyzing source code of a software application while the source code is being created. The computer implemented method may also comprise detecting that source code is programmed to access a computer resource. The method may comprise providing a first security implication of the source code being programmed to access the computer resource and providing a notification of the first security implication of the source code.

The computer implemented method may further comprise receiving a response to the notification and modifying the source code s access to the computer resource based on the response. The method may further comprise determining a second security implication of the source code after the source code s access to the resource has been modified and including information about the second security implication in an application manifest.

While the foregoing disclosure sets forth various embodiments using specific block diagrams flowcharts and examples each block diagram component flowchart step operation and or component described and or illustrated herein may be implemented individually and or collectively using a wide range of hardware software or firmware or any combination thereof configurations. In addition any disclosure of components contained within other components should be considered exemplary in nature since many other architectures can be implemented to achieve the same functionality.

The process parameters and sequence of steps described and or illustrated herein are given by way of example only and can be varied as desired. For example while the steps illustrated and or described herein may be shown or discussed in a particular order these steps do not necessarily need to be performed in the order illustrated or discussed. The various exemplary methods described and or illustrated herein may also omit one or more of the steps described or illustrated herein or include additional steps in addition to those disclosed.

Furthermore while various embodiments have been described and or illustrated herein in the context of fully functional computing systems one or more of these exemplary embodiments may be distributed as a program product in a variety of forms regardless of the particular type of computer readable media used to actually carry out the distribution. The embodiments disclosed herein may also be implemented using software modules that perform certain tasks. These software modules may include script batch or other executable files that may be stored on a computer readable storage medium or in a computing system. In some embodiments these software modules may configure a computing system to perform one or more of the exemplary embodiments disclosed herein.

The preceding description has been provided to enable others skilled in the art to best utilize various aspects of the exemplary embodiments disclosed herein. This exemplary description is not intended to be exhaustive or to be limited to any precise form disclosed. Many modifications and variations are possible without departing from the spirit and scope of the instant disclosure. The embodiments disclosed herein should be considered in all respects illustrative and not restrictive. Reference should be made to the appended claims and their equivalents in determining the scope of the instant disclosure.

Unless otherwise noted the terms a or an as used in the specification and claims are to be construed as meaning at least one of. In addition for ease of use the words including and having as used in the specification and claims are interchangeable with and have the same meaning as the word comprising. 

