---

title: GUI-based wallet program for online transactions
abstract: Provided is a method and a GUI-based software application that acts as a wallet with network interconnectivity for enabling a user to securely and seamlessly conduct transactions with his or her online financial transaction program by means of a computer or a wireless handheld device without having to depend on an Internet browser.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09639852&OS=09639852&RS=09639852
owner: PAYPAL, INC.
number: 09639852
owner_city: San Jose
owner_country: US
publication_date: 20080924
---
The present invention relates to online Internet based financial transaction programs and commercial systems and more particularly to conducting online financial transactions with an Internet browser independent software application.

With the advent of the Internet and online electronic commerce e commerce financial transaction programs that allow users to seamlessly purchase products transfer finds and conduct transactions over an Internet connection have been in high demand.

Traditional methods of executing financial transactions have been limited to a user providing his or her credit card debit card or checking account number on a commercial website or using checks money orders and other forms of paper based payments. However these means of executing financial transactions are often cumbersome slow and inconvenient requiring a user to remember a multitude of account numbers login data and passwords. This often results in significant time delays for payment processing. Furthermore security and fraud concerns are prevalent. For instance a user is often reluctant to provide sensitive credit card or debit card information over an Internet connection regardless of how secure an Internet connection claims to be.

Recent financial transaction programs have emerged as a means for a user to pay for purchases transfer money receive money if the user is a merchant store shipping addresses and set up multiple financial accounts e.g. checking or savings credit card debit card all with one single login and password. Security and fraud concerns are also mitigated by means of online financial security precautions encryption methods and anti phising programs that are inherent in online Internet based financial transaction systems.

However many of these financial transaction programs are limited in that users are dependent on an Internet browser in order to browse to a main website enter their username and password data and access their account information in order to execute financial transactions such as paying for purchases transferring money or checking account balances.

Users are limited in that they are dependent on a computer with Internet access and an Internet browser or a wireless handheld device e.g. cell phone BlackBerry PDA with an Internet browser application installed. Problems arise if the Internet browser is broken. In that case the user has no other means of accessing his or her online financial transaction program website. Furthermore the level of user convenience for a given Internet browsing experience is limited to the specifications of the Internet browser. In other words the user is stuck with the hard to locate buttons keys or pull down menus of a selected Internet browser when the ideal alternative is a user friendly Graphic User Interface GUI program with intuitive aesthetics and keys buttons placed in regions optimal for user convenience.

Therefore there is need for a method or software application with a user friendly GUI setup that enables a user to access their online financial transaction program account without having to depend on an Internet browser. One such browser independent solution is the use of a software application known as a Widget previously known as Konfabulator . Widgets are basically software applications that use a JavaScript runtime environment coupled with an XML interpreter reading XML code to run miniature browser independent GUI applications. Widgets also usually feature a flexible Application Programming Interface API for users and programmers to make their own Widgets. Typical Widgets include weather forecast monitors temperature or climate indicators digital clocks day planners calendars stock tickers sports game scoreboards calculators and currency converters.

However the one common feature shared by all Widgets is that they are all passive monitors displayers or calculators of information. For instance you only use a Widget to observe the weather tell the time convert currency rates or be informed about the present status of a stock or the current score of a sports game. No Widget allows for direct interaction with the external world. For instance a user cannot use a Widget to conduct financial transactions that have an actual impact on his or her bank account which belongs in the physical external world. In other words a user cannot use a Widget to transfer money from his her bank account withdraw funds pay for bills or perform other financial transactions that have an impact on the world outside of the user s computer.

Therefore there is a need in the art for an Internet browser independent software application similar to Widget based technology but which integrates a network interconnectivity aspect and which also utilizes a user friendly GUI configuration in order to allow a user to seamlessly and securely conduct financial transactions online with a computer or wireless handheld device without having to depend on an Internet browser.

Provided is a method and a GUI based software application that acts as a wallet GUI Wallet with network interconnectivity for enabling a user to securely and seamlessly conduct transactions with his or her online financial transaction program by means of a computer or a wireless handheld device without having to depend on an Internet browser.

First the user opens the GUI Wallet and then inputs login information such as a username and a password. Then a communication engine on the widget communicates the login information to the communication engine on the server of an online financial transaction program to see if the login information is valid by looking up relevant login information from a database If the login information is valid then the server pulls up the user s relevant financial information. Then the user is presented with a plurality of options in the form of buttons in a GUI Wallet.

On a first tab of the GUI Wallet the user is presented with a plurality of buttons representing different funding sources Cash Checks Visa Debit Card and Reward Points and the user s shipping address and other ID data. The user may drag and drop any of these buttons into the blank fields of a merchant s website and the Wallet program then populates the fields with the relevant information credit card number shipping address etc. .

On a second tab of the GUI Wallet the user is presented with a plurality of buttons representing different types of transactions that can be performed with an online financial transaction program. These buttons may comprise transferring money accepting payments or transfers checking balances of accounts paying for bills and converting currencies. Since the user has already logged in all the relevant user ID and financial information is stored and ready for use. This enables a convenient means of performing financial transactions without having to re enter login information and without having to rely on an Internet browser.

The GUI Wallet uses a communication engine to communicate with another communication engine located on the server of the online financial transaction program. The GUI Wallet sends encrypted data to the server s communication engine which decrypts it. Then the decrypted data is sent to an integration engine of the server which interfaces with a plurality of databases to perform validation complete transactions and check security. The databases store information such as login ID data user financial data blacklists of unsafe websites reward point totals and transaction histories. Data sent back from the server to the GUI Wallet is also encrypted and then decrypted when received by the GUI Wallet.

Merchant sites can also be checked for security. If the site is a merchant site that is known for engaging in phishing or fraud then the GUI Wallet will alert the user. A blacklist of unsafe sites is stored in one of the databases associated with the server of the online financial transaction program.

Further limitations and disadvantages of conventional and traditional approaches will become apparent to one of skill in the art through comparison of such systems with the present invention as set forth in the remainder of the present application with reference to the drawings.

To allow cross referencing among the figures like elements in the figures are provided like reference numerals.

The following description is presented to enable any person skilled in the art to make and use the invention and is provided in the context of particular applications of the invention. Various modifications to the disclosed embodiments will be apparent to those skilled in the art and the general principles defined herein may be applied to other embodiments and applications without departing from the spirit and scope of the invention.

According to embodiments of the invention provided is a method and a GUI based software Wallet application or a GUI Wallet with network interconnectivity for enabling a user to securely and seamlessly conduct transactions with his or her online financial transaction program by means of a computer or a wireless handheld device without having to depend on an Internet browser.

The ID button as shown in stores ID information associated with the user. In other embodiments a plurality of different ID buttons can be displayed and store different types of ID information associated with the user. ID information associated with the user may include but is not limited to the user s name including any titles department designators suffixes prefixes the shipping address of the user the billing address of the user contact phone numbers of the user and email addresses of the user. The ID button is tied to software in the GUI Wallet that stores this ID information of the user which has already been entered by the user previously. The drag and drop functionality of the ID source button will be further detailed in the description of .

The alert button alerts the user on a single issue as shown in . In other embodiments a plurality of different alert buttons can be shown and alert the user on different issues. The list of issues that a user can be alerted on include but is not limited to whether a merchant site is unsafe or has a previous history of phising or fraud whether the communication link established between the GUI Wallet and a given merchant site is secure whether the user s ID information is correct and matches the user s records whether a given transaction has been completed or has been successful or whether a given transaction is not successful. An alert button can also trigger pop ups or message windows alerting the user of the aforementioned issues. The alert button is tied to software of the GUI Wallet that alerts the user on the aforementioned list of issues.

The communication engine W is the communication engine of the GUI Wallet hence there is a W at the end of its name to denote Wallet . The communication engine W communicates with a communication engine S S to denote Server which is further described in . Even though the communication engine W cannot be usually seen on the actual GUI Wallet and it is optional for the GUI Wallet to have an icon denoting the communication engine W a GUI bar light or box can be made to indicate to the user that the GUI Wallet is in the process of communicating with a server in of the online financial transaction program by means of the communication engine W . This is almost like a flashing green status indicator light frequently seen on programs or devices that indicate that the program or device is engaging in a current communication with something else or is currently in a busy mode. The functionality of the communication engine W and its interaction with the communication engine S of the server of the online financial transaction program will be further detailed in the description of .

Once the user has dragged and dropped any of the plurality of funding source buttons from the first tab of the GUI Wallet to the Payment Method Page the respective entry field is populated with the appropriate data. For instance if the user drags and drops the cash check money order payment button from the GUI Wallet to a checking account entry field or a check or money order entry field those respective fields will be populated with the appropriate data e.g. for the checking account entry field the Routing Number Account Number and Name of Account Holder would be filled in with the user s data and for the check or money order number the field would be filled in with the user s data . Also if the user drags and drops the Visa or credit card payment button or the debit card payment button from the GUI Wallet to a credit card or debit card entry field then the relevant fields would be populated with the appropriate data e.g. the Card Type Credit Card Number Name of Cardholder Exp. Date of Card and CSC Card Security Code . Finally if the user drags and drops the reward point payment button from the GUI Wallet to a reward point entry field the field would be filled in with the user s data e.g. a money order number or check number or other identifier. The sub fields of the above mentioned entry fields e.g. the Routing Number Account Number and Name of Account Holder are all sub fields of the checking account entry field are not limited to the sub fields shown in and can comprise other or different sub fields as appropriate. After the relevant payment information has been entered the user can then confirm a selected payment method. The drag and drop functionality of the GUI Wallet is simple robust and convenient because it allows a user to simply drag and drop payment method information from a portable GUI Wallet into a merchant website without having to remember a multitude of ID data account numbers and open up a separate Internet browser.

However the plurality of databases of the server is not limited to the databases shown in nor are the databases in exhaustive in any way. The databases shown in are provided for exemplary purposes only. For instance additional databases could include a database that stores reward points a database that stores the transaction history of the user or a database that stores a list of the stores that the user has shopped at before.

Whenever a user conducts an action with the GUI Wallet e.g. dragging and dropping a button into a page of a merchant website as shown above in or or conducting a financial transaction as further detailed in the description of the communication engine W the communication engine S the integration engine the plurality of databases shown in as and and the server initiate a procedure for sending and receiving data. This procedure is further detailed in the description of the flowchart in . In general encrypted data is sent from the communication engine W over the bidirectional communication link to the Internet connection and then to the communication engine S where the data is decrypted. Example data encryption methods comprise secure 128 bit encryption or 64 bit encryption methods or Secure Sockets Layer SSL encryption methods. After the data is received and decrypted by the communication engine S it is sent to the integration engine . The integration engine works with the received data and the plurality of databases here shown as the user ID database the financial data database and unsafe website blacklist database in order to properly execute transactions with the online financial transaction program validate the authenticity of IDs perform error checking tasks and execute security checks. Specifically the integration engine is a business logic interface any logic or algorithm that handles the information exchange between a database and other software components that takes the information received by the communication engine S and looks up verifies and uses data from the plurality of databases in order to effectively conduct transactions. Data coming from the server of the online financial transaction program is sent back to the GUI Wallet in the same manner as described above. Namely data is first encrypted by the communication engine S and then sent over the bidirectional communication link over the Internet connection to the communication engine W where it is decrypted and then used.

Examples of using the GUI Wallet will be provided in order to further understanding of the plurality of databases in the server .

For instance if the user were to drag and drop the f ID button into a User ID Page of a merchant website as described above for the communication engine W would then communicate this instruction in encrypted form over the bidirectional communication link and the Internet connection to the communication engine S . The communication engine S would then decrypt the data instruction and send it to the integration engine . The integration engine would then locate the proper ID information from the user ID database and then use its logic to place the relevant ID information in the plurality of ID fields as shown in .

A similar process exists if the user were to drag and drop any of the plurality of funding source buttons into a Payment Method Page of a merchant website as described above for . The communication engine W would communicate this instruction over the bidirectional communication link and the Internet connection to the communication engine S . The communication engine S would then decrypt the data instruction and send it to the integration engine . The integration engine would then locate the proper ID information from the financial data database and then use its logic to place the relevant financial data in any of the plurality of entry fields e.g. or as shown in .

The above described process also enables the alert button of the first tab of the GUI Wallet to issue an alarm as described above for . Any time a merchant website is browsed the server of the online financial transaction program is engaged and the integration engine can readily perform lookups with the plurality of databases. If the user is attempting to make a transaction on a potentially unsafe website the integration engine checks the potentially unsafe website against the websites listed in the unsafe website blacklist database . If there is a match then the communication engine S sends an encrypted message about this unsafe website over the Internet connection and the bidirectional communication link to the communication engine W where it is then decrypted and then sent to the alert button for alerting the user such as lighting up a GUI feature or popping up a separate message window.

The above described process also enables message windows to pop up from either the first tab or the second tab of the GUI Wallet to inform the user if a transaction was successful e.g. a money transfer or currency conversion or a message window informing the user of a specific piece of information e.g. a specific balance amount after performing a balance inquiry as will be further detailed in the description of . Any time a user decides to conduct a financial transaction with the second tab of the GUI Wallet the server of the online financial transaction program is engaged and the integration engine can readily perform lookups with the plurality of databases. Once the user has completed a transaction successfully or not or performed a balance inquiry the communication engine S sends an encrypted message about the status of the transaction successful or unsuccessful or the specific balance amount inquired about over the Internet connection and the bidirectional communication link to the communication engine W where it is then decrypted and then displayed as a message window in the GUI Wallet. For instance a message window could pop up stating that the transaction e.g. money transfer or currency conversion was successful or unsuccessful or a message window could pop up describing to the user the specific balance of an account the user performed a balance inquiry on. The details of this process will also be described in the descriptions of and .

The second tab of the GUI Wallet comprises a plurality of transaction buttons which can include for example a balance check button Bal. a transfer money button Send and a currency conversion button Con. as shown in . However the plurality of transaction buttons is not limited to the aforementioned list and the above list is not exhaustive in any way. For example other transaction buttons can include a button that accepts payments or money transfers from another party a button that can pay bills or set up bill payments and a button that can perform any financial transaction that is performed with an online financial transaction program via an Internet browser.

The balance check button is tied to software in the GUI Wallet that has the user s login information already entered and that is able to retrieve the balance of a given account belonging to the user that is registered with the user s online financial transaction program. For instance if the user were to select the balance check button a pop up window with a field querying the user for an account number or other account identifier would appear. After the user enters the account number or other account identifier the GUI Wallet retrieves and returns to the user the balance of the particular account associated with the provided account number or identifier usually by means of another message window. The balance check button also works with the communication engine method described above for and looks up the balance of a particular user account in the plurality of databases for example the financial data database shown in and sends this data back to the GUI Wallet from the server in order to have the GUI Wallet display to the user the proper balance of a selected account for instance in a separate message window.

The transfer money button is tied to software in the GUI Wallet that has the user s login information already entered and that is able to access the financial data of a user s account and actually transfer money from a user s account to another account or to pay for purchases. For instance if the user were to select the transfer money button a pop up window with a field querying the user for a transferee or destination account number and a transfer amount would appear. After the user enters the transferee destination number and the transfer amount the GUI Wallet executes the money transfer and then informs the user about whether the money transfer was successful or not usually by means of another message window or by using the alert window of the first tab of the GUI Wallet. The transfer money button also works with the communication engine method described above for and is able to work with the plurality of databases in the server and can execute financial transactions e.g. a money transfer over the server just as if the user were performing transactions through his or her online financial transaction program website. A data message describing whether the money transfer was successful or not is also sent from the server back to the GUI Wallet in order to have the GUI Wallet display to the user whether or not the money transfer was successful in a separate message window.

The currency conversion button is tied to software in the GUI Wallet that has the user s login information already entered and that is able to access the financial data of a user s account and actually convert funds from a user s account from one type of currency to another type of currency. For instance if the user were to select the currency conversion button a pop up window with a field querying the user for a beginning currency type a beginning currency amount and an end currency type would appear. After the user enters the beginning currency type a beginning currency amount and an end currency type the GUI Wallet executes the currency conversion and then informs the user about whether the currency conversion was successful or not usually by means of another message window or by using the alert button of the first tab of the GUI Wallet. The currency conversion button also works with the communication engine method described above for and is able to work with the plurality of databases and can execute financial transactions e.g. currency conversion over the server just as if the user were performing financial transactions through his or her online financial transaction program website. A data message describing whether the currency conversion was successful or not is also sent from the server back to the GUI Wallet in order to have the GUI Wallet display to the user whether or not the currency conversion was successful in a separate message window.

Again it is to be reiterated that the plurality of transaction buttons is not limited to the above three described buttons and can comprise buttons that allow a user to perform any other financial transaction that the user would have been able to perform on the user s financial transaction program website with an Internet browser. For instance other transaction buttons can include a button that accepts payments or money transfers from another party which may be more applicable if the user was a merchant and a button that can pay bills or set up bill payments on a periodic or non periodic basis . The use of the plurality of transaction buttons on the second tab of the GUI Wallet is robust simple and convenient because it allows a user to conduct financial transactions with his or her online financial transaction program seamlessly and securely independent of an Internet browser.

If the merchant website is unsafe then in step a warning is displayed either in a separate message window or on the alert button of the first tab of the GUI Wallet. If the merchant website is safe then the user can continue to choose one of the plurality of funding source buttons to drag and drop into a merchant website or the user can choose to conduct a financial transaction e.g. transferring money converting currencies checking balances that is independent of a merchant website in step . In step the GUI Wallet and the server communicate in the process described above for and the method that will be detailed in in order to conduct the transaction that the user has selected. In step the server determines whether or not the transaction was successful. If the transaction was not successful a message window is displayed from the GUI Wallet that describes the transaction failure and the reason for failure in step . If on the other hand the transaction is successful a message window is displayed from the GUI Wallet that describes the success of the transaction and the reason why the transaction was a success in step . Then in step the user has the choice of returning to step to select another button from the GUI Wallet or deciding to end method . If the user decides to end the method the user starts all over from step and logs in again in step .

Then in step the encrypted data message instruction is sent over the bidirectional communication link and the Internet connection and crosses into the server side to reach step . In step communication engine S receives and decrypts the data message instruction. The communication engine S then sends the decrypted data message instruction to the integration engine . In step the server is engaged because the user is browsing a page of the merchant website and the server is engaged whenever the user is performing Internet browsing. In step the integration engine works with the plurality of databases shown in as elements and for exemplary purposes only and the server as well as any incoming data message instructions sent by the communication engine S to perform any functions. These functions can comprise populating empty fields of a page on a merchant website with user ID data or payment method data conducting financial transactions with the online financial transaction program e.g. money transfers currency conversions paying for purchases validating the authenticity of user login IDs performing error checking tasks and executing security checks on potentially unsafe websites. Then after step where the integration engine works with the databases and the server to perform any tasks the method determines whether a message has to be displayed by the GUI Wallet in order to alert the user on the status of a certain transaction. In the case of a simple drag and drop of a funding source or ID button from the first tab of the GUI Wallet the user does not need to be notified with a message window from the GUI Wallet because the user can immediately see the empty fields of a merchant website page being populated with the user s data. In such a case where a message does not need to be displayed to the user the method then proceeds to step and goes back to the start step and then the above mentioned process is repeated.

However if it is necessary to have a message displayed by the GUI Wallet and a Yes is answered to the inquiry posed in step then the method proceeds to step . In step the method is still on the server side therefore communication engine S encrypts a data message instruction usually by using a secure 64 bit or 128 bit encryption method or a SSL encryption method. The data message instruction is usually the software instructions for having the user drag and drop a button from the first tab of the GUI Wallet into a page of the merchant website. The data message instruction here usually comprises the software instructions for displaying a status message to the user by using the GUI Wallet to display a separate message window or having the alert button light up or animate. This data message instruction is being sent to the GUI Wallet side from the server side because it is ultimately the GUI Wallet that will be displaying the message for the user to view.

In step the encrypted data message is sent by the communication engine S over the bidirectional communication link and the Internet connection over to the GUI Wallet side where it is received by communication engine W and decrypted in step . Then the GUI Wallet takes the software instruction from the decrypted data message instruction and then displays a message in a separate message window from the GUI Wallet or uses the alarm button of the GUI Wallet to display the warning or message. After the message is displayed the method proceeds to step and goes back to the start or step .

The message the user will view usually comprises either a successful or unsuccessful completion of a financial transaction e.g. whether money was successfully transferred or received or whether currency has been successfully converted the balance of a certain account the user has performed a balance inquiry on or whether the user has reached an unsafe site and informing the user that he or she is currently browsing an unsafe site.

Even though the GUI Wallet comprises a first tab and a second tab and each tab comprises a plurality of different buttons as described above the buttons detailed above associated with the first tab do not necessarily have to be placed on the first tab and the buttons detailed above associated with the second tab do not have to be placed on the second tab . In other words the buttons can be placed anywhere with respect to the GUI Wallet. In addition the GUI Wallet is not limited to just a first tab and a second tab and can comprise any number of tabs and the buttons can be placed on any of these tabs.

The GUI Wallet can also be customized in any way that a user a connected system control logic or another entity sees fit. In other words buttons on any of the tabs can be moved to other tabs new tabs can be created tabs can be removed or modified existing buttons can be removed or modified and new buttons can be added. The customizability of the GUI Wallet is intrinsic to the GUI properties of the GUI Wallet and is not limited to the above examples. The GUI Wallet can also be customized to optimize the user experience.

The GUI Wallet and any of the tabs of the GUI Wallet can be written in a language comprising Java XML C or C and can also be written in a language with a flexible and user customizable API where a user can add on features easily without having to understand the intricacies of a particular code. The plurality of databases in the server can be written in a language comprising SQL Perl or another database language. The communication engine W the communication engine S and the integration engine can be written in a language comprising C C or Java.

Advantages of the present invention include granting a user the ability to securely and seamlessly conduct transactions with his or her online financial transaction program by means of a computer or a wireless handheld device without having to depend on an Internet browser. A convenient drag and drop functionality also enables the user to simply drag and drop pre stored settings and information into empty fields of a page of a merchant website without having to remember account numbers or other ID data or open up a separate page in another Internet browser.

The above described embodiments of the present invention are merely meant to be illustrative and not limiting. It will thus be obvious to those skilled in the art that various changes and modifications may be made without departing from this invention in its broader aspects. Therefore the appended claims encompass all such changes and modifications as fall within the true spirit and scope of this invention.

