---

title: Storage apparatus
abstract: Provided is a storage apparatus capable of encrypting data without affecting the business performance. This storage apparatus includes a cache memory, a first controller for controlling the writing of data in the cache memory pursuant to the write command, a second controller for controlling the writing of the data written in the cache into the storage devices, and an encryption engine for encrypting data pursuant to the write command. When the second controller reads the data from the cache memory and writes the data in said storage devices, the encryption engine encrypts the data, and the second controller writes the encrypted data in said storage devices.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08438403&OS=08438403&RS=08438403
owner: Hitachi, Ltd.
number: 08438403
owner_city: Tokyo
owner_country: JP
publication_date: 20080124
---
This application relates to and claims priority from Japanese Patent Application No. 2007 069483 filed on Mar. 16 2007 the entire disclosure of which is incorporated herein by reference.

The present invention generally relates to a storage apparatus and in particular to a storage apparatus comprising an encryption engine that encrypts data sent from a host and stores it in a storage device and decrypts the encrypted data stored in the storage device and sends it to the host and to the control method of such a storage apparatus.

A storage apparatus is known as a special device for providing a large capacity storage resource to a host computer or a host system. This storage apparatus is also known as a storage subsystem or a storage controller and is configured by comprising a plurality of storage devices and a controller for controlling the input and output of data between the storage device and the host according to a write access or a read access from the host.

In recent years from demands for ensuring the security of data it is necessary to improve the confidentiality of data to be written in the storage apparatus. As methods of encrypting the data to be written in the storage apparatus there is a method where the host personally encrypts the data a method of disposing an encryption engine on a network connecting the host and the storage apparatus and a method of the storage apparatus personally comprising the encryption engine.

As conventional technology pertaining to a mode where the storage apparatus comprises the encryption engine for instance there is a storage system described in Japanese Patent Laid Open Publication No. H2006 227839 Patent Document 1 .

This storage system aims to simplify the decryption process of encrypted data when migrating such encrypted data to a different encryption engine maintain security to prevent tapping and falsification when rewriting the calculation method of encrypted data into a different calculation method and improve the access performance. FIG. 3 of Patent Document 1 illustrates a storage system 100 accessible from a host computer comprising a storage apparatus including a data area 120. In this storage system 100 when a storage apparatus comprising a scheme capable of decrypting encrypted data is selected as the migration destination of such encrypted data it is possible to continue retaining such encrypted data in a reliable manner even when the device or code calculation method becomes obsolete by updating the code calculation method applied in migrating data or decoding encrypted data with a different method based on internal processing of the device and re storing such method.

To begin with since data stored in a storage apparatus is distributed to a plurality of hard disk drives according to a RAID configuration confidentiality of the information resource in the storage apparatus is consequently guaranteed to a certain degree.

Although data is distributed to a plurality of storage devices in RAID since the data itself is not subject to any confidentiality measure there is significance in equipping the storage apparatus with an encryption engine.

Nevertheless when equipping the storage apparatus with such encryption engine there is room for much improvement such as in the timing of encrypting the data sent from the host system to the storage apparatus.

In addition as a method of improving the confidentiality of the storage apparatus there is technology known as re key of periodically replacing an old encryption key with a new encryption key upon determining the lifetime of the encryption key. Meanwhile during the implementation of the re key process since the encrypted data of the storage apparatus is encrypted with two or more types of encryption keys the host will not be able to read the data in the storage apparatus. Thus it is necessary to decrypt all data with the old key and thereafter re encrypt such data with a new key. During this period however there is a problem in that this process will affect the online business of the host system.

Thus an object of the present invention is to provide a storage apparatus capable of encrypting data without affecting the business performance. Another object of the present invention is to provide a storage apparatus that will not affect the online operation with a host system even during encryption processing of re encrypting data which was encrypted with an old encryption key with a new encryption key or be subject to restrictions such as needing to allocate considerable storage resources to such encryption processing.

In order to achieve the foregoing objects the present invention provides a storage apparatus connected to a host system and which controls the writing of data in a storage device in response to a write command from the host system and further controls the reading of data from the storage device in response to a read command from the host system. This storage apparatus comprises a cache memory a first controller for controlling the writing of data in the cache memory pursuant to the write command a second controller for controlling the writing of the data written in the cache into the storage device and an encryption engine for encrypting data pursuant to the write command. When the second controller reads the data from the cache memory and writes the data in the storage device the encryption engine encrypts the data and the second controller writes the encrypted data in the storage device.

The present invention additionally provides a storage apparatus for controlling the input and output of data between a host system and a storage area of a storage device. This storage apparatus comprises a first volume a first controller for storing write data from the host system into the first volume an encryption engine for encrypting the write data a second volume a second controller for storing the encrypted write data into the second volume and a third controller for restoring the encrypted write data of the second volume into the first volume.

The present invention further provides a storage apparatus for controlling the input and output of data between a host system and a storage area of a storage device. This storage apparatus comprises a controller for processing a write access from the host system an encryption unit for creating encrypted data based on write data from the host system a memory for storing an encryption key used by the encryption unit upon encrypting the write data a first volume to which the encrypted data is written and a second volume to which encrypted data stored in the first volume and subject to re key processing is written. The controller receives a write access from the host system to the first volume during the re key processing stores encrypted data configured from encrypted written data in an access target area reads the encryption key from the memory and decrypts the encrypted data stored in the access target area using the encryption key.

Accordingly the present invention is able to provide a storage apparatus capable of encrypting data without affecting the business performance in particular provide a storage apparatus that will not affect the online operation with a host system even during encryption processing of re encrypting data which was encrypted with an old encryption key with a new encryption key or be subject to restrictions such as needing to allocate considerable storage resources to such encryption processing.

Embodiments of the present invention are now explained. shows a hardware block of an embodiment of a storage apparatus according to this invention. The storage apparatus is connected to a host via a network . The storage apparatus comprises a channel controller a disk controller a shared memory storing control information and management tables a cache memory for temporarily storing write data input from the host and read data to be output to the host an encryption controller for encrypting write data and decrypting read data and a controller connected to the channel controller the shared memory the disk controller the cache memory and the encryption controller and which enables the data transfer among the foregoing elements.

The storage apparatus is connected to a control terminal that controls the volumes of the storage apparatus and sets and updates tables in the shared memory .

The channel controller communicates with the host using a fibre channel protocol or an Internet protocol and sends and receives data to and from the host upon receiving a data I O request from the host. The disk controller is communicably connected to a hard disk drive unit as a storage device and controls such hard disk drive unit. The hard disk drive unit corresponds to a storage device but the storage device is not limited to a hard disk drive unit and a publicly known semiconductor memory such as a flash memory may also be used.

Since the storage apparatus comprises the encryption controller as shown in data not subject to encryption processing sent from the host is encrypted in the storage apparatus and then stored in the hard disk drive unit . Like this the host is able to carry on its business without having to give any consideration to encryption. Incidentally non encrypted data is hereinafter generally referred to as plain text and data encrypted with an encryption key is hereinafter generally referred to as encrypted text.

The encryption engine as the encryption controller uses an encryption control program to encrypt data when plain text is destaged from the cache memory to the storage device and decrypts the encrypted text when such encrypted text is staged from the storage device to the cache memory .

A disk control program of the disk controller controls the writing of data in the hard disk drive unit or controls the reading of data from the hard disk drive unit .

Reference numeral is the first mode showing the relationship of the host and the logical volume. The host recognizes a logical volume LU and accesses the storage apparatus . A logical volume LDEV is able to recognize that the storage apparatus corresponds to the LU .

The channel command control program A and the disk control program A converts the host I O access to the LU into an access to the LDEV so as to enable the host I O to access the storage area allocated to the LDEV .

A physical storage area is allocated from the hard disk drive unit to the LDEV . The storage area allocated to the LDEV is distributed to a plurality of disk devices and configured based on a RAID system. A RAID group is an aggregate of physical storage areas configured from a RAID system and existing across a plurality of disk devices and one or more RAID groups correspond to an LDEV.

Access from the host to the LU is based on plain text and the storage apparatus encrypts the plain text and writes it in the LDEV . Since the host is able to access the storage apparatus for inputting and outputting data without having to give consideration to encryption the host is able to continue business efficiently without being burdened for encryption.

Reference numeral shows a mode where the allocation of a real storage area to the logical volume is different from the case shown in reference numeral . In the mode of reference numeral a relatively large capacity is fixedly allocated to the storage area from the beginning so as to deal with the access from the host .

Contrarily the mode of reference numeral uses a virtual LU and a virtual LDEV and these logical volumes are virtual volumes to which a real storage area is not fixedly allocated. The storage apparatus sequentially allocates a real storage area to the virtual LDEV according to the write access from the host. In other words the virtual LDEV is not fixedly allocated with large capacity storage area from the beginning as with the real LDEV and the capacity of the storage area to be sequentially allocated according to the access to the virtual LDEV such as the write access from the host is increased. Thus it is possible to effectively use the storage resource of the storage apparatus. Incidentally Applicant refers to this method as AOU Allocation On Use . AOU for instance is described in the specification and drawings of Japanese Patent Application No. 2006 240031.

A user of the storage apparatus is able to effectively use the limited storage resource by freely allocating a real storage capacity to a virtual volume or cancelling such allocation.

Further since the virtual LU and the virtual LDEV behave as logical volumes that have apparent capacity the host correctly recognizes the virtual LU as a general LU with sufficient real capacity and the replication program in the storage apparatus that is the program for realizing the copy between volumes in the storage apparatus also correctly recognizes the virtual volume as a volume with sufficient real storage capacity.

The channel controller of the storage apparatus allocates optimal storage capacity to the virtual LU or the virtual LDEV on a case by case basis and releases the extra storage area from the virtual volume at the stage it is no longer required. A volume LDEV has a real storage area to be allocated to the virtual LDEV . This volume is managed conceptually as a pool .

Access from the host to the LU or the virtual LU is based on non encrypted data and the encryption program A of the encryption engine of the storage apparatus encrypts this data and stores it in the storage area.

In both the method shown with reference numeral and the method shown with reference numeral storage of write data in the storage area of the hard disk drive unit and reading of read data from the storage area are conducted via the cache memory .

Thus the encryption control program A of the storage apparatus performs decryption at the timing the encrypted text is staged to the cache memory and performs encryption at the timing the plain text is destaged from the cache memory.

Meanwhile in cases where data is to encrypted or decrypted at portions other than the cache for instance when encrypting data before such data is written from the host to the cache or when encrypting data after such data has been written in the disk there is risk that the performance on the host side will deteriorate for the overhead accompanying the encryption process. Further in the latter case each disk must be equipped with an encryption engine.

When the host sends plain text to the LDEV or the virtual LDEV a DKA encrypts the plain text data A to F into encrypted text A to F and sequentially writes the encrypted text in a plurality of PDEVs real volumes configured from real storage areas of the hard disk drive unit in block units. The DKA creates parity data from the encrypted data of a plurality of blocks and writes this in an arbitrary PDEV. P is party of data A B and C and P is parity of data E F and D . Incidentally the DKA is a controller in the storage apparatus that connects the host I O to the PDEV. Since the storage apparatus creates parity based on encrypted data it is possible to read encrypted data even when one PDEV malfunctions.

In the foregoing sequence the subject of encryption is the data portion and control information such as record position information T data guarantee code LA LRC and partition adjustment data PAD is not encrypted.

Further if the storage apparatus encrypts data before it enters the channel I F it will not be possible to convert the CKD format into an FBA format and store it in the cache memory. Thus with a mainframe host data must be encrypted on the storage apparatus side.

In when the storage apparatus receives an encrypted data creation command from the host the controller DKC of the storage apparatus acquires the input parameter encrypted group number primary LU number secondary LU number copy pace . Subsequently the DKC determines whether the input parameter is correct. When the DKC obtains a positive determination the DKC checks whether the encrypted group is registered in the encryption management table . The host or the control terminal thereafter issues a command to the DKC for creating a pair volume .

The DKC checks whether the pair creation ended normally . When the DKC obtains a positive determination it adds a secondary LDEV number to the LDEV number list of the encrypted group management table and then ends this processing. is a functional block diagram explaining the mapping of a pool LDEV to the virtual LDEV and as illustrated in the mapping management table of C shows that a real address of the pool LDEV number is mapped to a virtual address of the virtual LDEV number and a real address is mapped to the virtual address .

In other words the plain text issued from the host to the virtual addresses and of the virtual LDEV is encrypted and stored in the real addresses and of the pool LDEV . Incidentally since a virtual LDEV is not equipped with a real storage area its address is referred to as a virtual address and a pool LDEV is referred to as a real address since it comprises a real storage area.

The channel controller determines whether the access target LU of the write command is a virtual LU . The shared memory of the storage apparatus as shown in stores a management table with attributes on all LUs regarding whether the LDEV of the storage area is a corresponding real LU or a virtual LU allocated with a virtual LDEV.

When the channel controller determines this to be a virtual LU it converts the address indicated in the write command from the host into a virtual address of the virtual LDEV . Subsequently the channel controller determines whether the converted address is registered in the mapping management table of . When the channel controller obtains a positive determination it maps the converted address to a real address of the pool LDEV based on the mapping management table of .

When the channel controller checks the encrypted bit regarding the LDEV based on the LDEV management table shown in and the encrypted bit is 1 it determines that the data to be stored in the LDEV should be encrypted and the encryption program A refers to the management table of reads the current encryption key from the encryption key storage area of the shared memory and uses such encryption key to encrypt the write data .

After the encryption is complete or when the encrypted bit is 0 the disk controller executes write processing to the LDEV corresponding to the LU and the channel controller reports the execution result to the host .

At step when the channel controller determines that the virtual address converted at step is not registered in the mapping management table it performs processing for registering the virtual address and the real address to be mapped to such virtual address in the mapping management table .

Subsequently the channel controller determines whether the virtual address and the real address have been registered in the mapping management table . When the virtual address and the real address have not been registered in the mapping management table the channel controller reports an error to the host since a real storage area could not be mapped to the virtual address and it is not possible to execute the write command .

Meanwhile when the channel controller determines that the target LU to which the write command was issued is not a virtual LU that is when the channel controller determines that the target LU is a real LU allocated with a LDEV having a storage area it skips step to step and executes write processing to the LDEV .

The channel controller of the storage apparatus acquires a LDEV number list from the encrypted group management table and acquires the current key of the encrypted group to which the LDEV number is registered . Subsequently the encryption engine encrypts the plain text based on this current key in block units and writes the encrypted text in the work area of the cache memory .

The disk control program thereafter writes the data in the work area of the cache memory in the LDEV and further releases the work area of the cache memory .

When the allocated bit is 0 the channel controller determines that the address corresponding to this allocated bit is an address that is not allocated to the virtual LDEV and overwrites 1 over this allocated bit . Subsequently the channel controller registers this address as the real address and the virtual address number and the pool LDEV number in the mapping management table of and normally ends the processing sequence.

Meanwhile in the determination at step when the allocated bit is 1 that is when the address number of the LDEV has already been allocated to the virtual address of the virtual LDEV the channel controller increments the address number in order to search for another address and re executes the processing at step . When an empty address is not discovered even after checking all address numbers the channel controller increments the pool LDEV number and executes the detection of an empty address regarding the pool LDEV of the subsequent number to be specified in the pool LDEV number list.

When the channel controller is not able to discover an empty address regarding all pool LDEVs even after performing the processing up to step it notifies the host of an error and then ends this processing. Here a user may operate the management terminal may create a new LDEV and allocate it to the virtual LDEV.

When the target LU is a real LU the channel controller executes a read command to the LDEV corresponding to this LU . In other words the channel controller checks the encrypted bit of the LDEV management table determines that the LDEV is a non encrypted volume when the encrypted bit is 0 reads data from the disk controller and reports the read data to the host .

Meanwhile when it is determined that the encrypted bit is 1 at step the encryption engine decrypts the target data of the read command using the current encryption key of the encrypted group management table .

Meanwhile when it is determined at step that the target LU of the read command is a virtual LU the storage apparatus needs to recognize the read address mapped to the virtual LU and read the target data of the read command from the real address. Thus the channel controller converts the address indicated by the host into a virtual address of the virtual LU .

Subsequently the channel controller checks whether the converted address has been registered in the mapping management table . When the channel controller obtains a positive determination it recognizes the pool LDEV number from the converted address based on the mapping management table and thereafter acquires the corresponding real address . The disk controller that became aware of this real address executes a read command to the real address .

Meanwhile when it is determined at step that the virtual address is not registered in the mapping management table the channel controller deems that there is no data to be read and replies NULL data to the host .

Subsequently the channel controller checks the encrypted bit in the LDEV management table and when the encrypted bit it acquires the LDEV number list from the encrypted group management table and acquires the current key of the encrypted group to which the LDEV number is registered . The disk controller thereafter reads the encrypted text stored in the LDEV into the work area of the cache memory . Subsequently the encryption engine decrypts the encrypted text in block units and writes the decrypted plain text in the cache memory . The channel controller thereafter reports the read data to the host .

Details concerning the encryption function of the storage apparatus are now explained with reference to . The host issues a write request of plain text to the virtual LU . The encryption engine of the storage apparatus encrypts the plain text data issued to the virtual LU using an encryption key A and issues the encrypted text to the virtual LDEV . Since the virtual LDEV is allocated with the LDEV of the pool the encrypted text will actually be stored in the pool LDEV.

In this situation the volume pair control program B of the channel controller creates a secondary volume virtual LDEV A to form a pair with the virtual LDEV during the re key processing when the encryption key is to be exchanged. Further the encryption engine decrypts the encrypted text of the virtual LDEV as the primary volume using the encryption key A and the disk controller encrypts the decrypted data using a new encryption key B and stores such data in the storage area of the virtual LDEV A . When the re key processing concerning all encrypted text of the primary volume is complete the disk controller thereafter restores the encrypted text of the secondary volume A to the primary volume .

Like this as a result of using a primary secondary volume pair during the re key processing performed to the logical volume the logical volume will not be encrypted with two types of encryption keys and access from the host to the primary volume during the re key processing period can be continued. Thus there is no risk of obstructing the host s business during this period.

When the pair status of the pair management table is PAIR the DKC performs encryption conversion processing deeming that a volume pair for converting encrypted text based on an old encryption key into encrypted text based on a new encryption key exists. After the encryption conversion processing is complete the host issues a pair split command issues a high speed restoration command and thereafter issues a pair deletion command . The contents thereof are now explained in detail with reference to .

In the first stage of re key processing a user issues a re key processing command that is a data conversion preparation command to the volume pair control program. Thereby the pair status between the primary volume and the secondary volume is changed from SIMPLEX to COPY. 

 SIMPLEX corresponds to a state where no pair is defined and COPY corresponds to a state where the encrypted text of the primary volume is decrypted with an old encryption key and converted into plain text and this plain text is re encrypted with a new encryption key and stored in the secondary volume. Thus the volume pair control program creates a secondary volume in relation to a primary volume.

This secondary volume corresponds to the virtual LDEV of . A pair status is a control code to be in the pair management table described later. The volume pair control program controls various processes between the volume pair based on the pair status.

Subsequently at the second stage the pair status between the two volumes is changed from COPY to PAIR which shows that the copy is complete. During this time the disk controller reads the encrypted data in block units determined based on the storage area of the virtual LDEV decrypts the data read by the encryption engine using an old encryption key encryption key A re crypts such data using a new encryption key encryption key B and the disk control program stores the encrypted data in the virtual LDEV . When the user issues a progress confirmation command to the volume pair control program the volume pair control program reports the completion of data conversion preparation to the user.

Subsequently when the decryption and re encryption of all encrypted text of the primary volume are complete the volume pair control program pair splits the virtual volume LDEV as the secondary volume from the virtual LDEV as the primary volume at the third stage in order to fix the data image of the secondary volume. PSUS shows a state where copy is suspended based on the user s operation.

At the fourth stage of re key processing the volume pair control program restores the encrypted text of the secondary volume to the primary volume. During this period the pair status is changed from PSUS REST PSUS. REST shows that restoration is being executed between the primary volume and the secondary volume.

At the fifth stage the secondary volume is deleted from the pair with the primary volume PSUS SIMPLEX and the pool LDEV allocated to the secondary volume is released. From pair split to pair deletion the I O from the host to the primary volume is suspended. Nevertheless since the process from pair split to restoration is performed at high speed access from the host to the primary volume will be treated as an error and will be subject to retry processing.

Data from the host during the re key processing period is recorded in both the primary volume and the secondary volume. Write access to the primary volume is converted into encrypted text with an old encryption key or a new encryption key and write access to the secondary volume is converted into encrypted text with a new encryption key.

Incidentally the pair status of PSUE is a state where the copy is suspended due to the occurrence of a failure. In the pair management table A pair number shows that both the primary LDEV number and the secondary LDEV number are undefined and the pair status is in a state of where the pair is undefined.

The update pointer corresponds to the update bitmap table. When there is a write access from the host to a specific track of the primary volume bit showing that the bit corresponding to this track has been updated is set.

Based on the storage apparatus associates the real address of the pool LDEV to the virtual address of the virtual LDEV and associates the real address of pool LDEV to the virtual address of the virtual LDEV .

Further as shown in the storage apparatus allocates the real address of the pool LDEV to the virtual address of the virtual LDEV and allocates the real address of the pool LDEV to the virtual address of the virtual LDEV .

Therefore the encrypted text that was encrypted with an old encryption key is stored in the real address and the real address of the pool LDEV . Further the encrypted text that was encrypted with a new encryption key is stored in the real address and the real address of the pool LDEV .

Mapping information as shown in is the pool LDEV number to the virtual address of the virtual LDEV and the real address. As shown in by mutually switching the mapping information to the respective virtual LDEVs of the pool LDEV the mapping to the real address of the pool LDEV of the virtual LDEV is changed from the real addresses and to the real addresses and . Mapping to the real address of the pool LDEV of the virtual LDEV is changed from the real addresses and to the real addresses and . 

Since data encrypted with the new encryption key is stored in the addresses and of the pool LDEV data encrypted with the new encryption key as a result of the restoration is associated with the virtual LDEV . This restoration does not involve the copy between volumes and can be achieved at high speed merely by exchanging the mapping data in the control memory.

When the host issues a write command to the storage apparatus the channel controller of the storage apparatus receives a write command . Subsequently the channel controller determines whether the target LU of the write command is a virtual LU .

When the channel controller determines that the target LU of the write command is a virtual LU it converts the address instructed from the host into a virtual address of the virtual LDEV . Subsequently the channel controller determines whether the virtual address has been registered in the mapping management table .

When the channel controller determines whether the virtual address has been registered in the mapping management table it maps the real address of the volume of the pool LDEV number corresponding to the virtual address according to the mapping management table . The channel controller thereafter checks the pair status of the pair management table and returns an error to the host when the pair status is REST restoration . When a write command is executed during restoration the write command to the primary volume and the switching of mapping data pursuant to the restoration will compete against each other and there is a possibility that data based on the host I O will be lost. As described above since restoration will be completed in a short period of time the host that received the error report merely needs to retry the process.

The channel controller checks the virtual LDEV management table and determines whether the volume status of the target volume of the write command is PVOL . When the channel controller obtains a positive determination it determines whether pair status of the pair management table is COPY or PAIR .

When the channel controller obtains a positive determination this implies that re key processing is being performed between the primary volume and the secondary volume. Subsequently the channel controller checks the differential management table and determines whether the differential bit of the target track of the data write request based on the write command is 0 . When the differential bit is 0 the channel controller determines that re key processing is complete regarding this track and that mirroring of the write data is required. Thus the channel controller writes the write data in the cache area of both the primary volume and the secondary volume .

Subsequently the channel controller refers to the LDEV management table and checks whether the encrypted bit is 0 . When the encrypted bit is 1 the encryption engine encrypts the write data using the current key of the encrypted group management table . Subsequently in order to clarify that the target track of the write request at step was encrypted with a new encryption key and not an old encryption key the channel controller overwrites 1 as the update bit on the corresponding bit of the update bitmap in the differential management table in relation to this track . Meanwhile when the encrypted bit is 0 the channel controller writes the write in the volume LDEV without encryption .

When it is determined at step that the target LU is not a virtual LU since the target LU of the write command is not the volume of re key processing the channel controller jumps to step without mirroring the write data. The same applies to cases when the target volume of the write command is determined not to be PVOL at step and when the pair status of the target volume of the write command is determined not to be COPY or PAIR at step .

The channel controller determines whether the pair status in the pair management table of the target volume of the write command is PSUS or PSUE and when the pair status is COPY or PAIR positive determination at step it negates the determination at step and reports the completion of mirroring to the host .

Meanwhile when the channel controller obtains a negative determination at step since the write target LDEV is not of a pair status a positive determination is given at step and 1 is overwritten on the differential bit corresponding to the write target track .

When the channel controller obtains a negative determination at step since a pair volume does not exist regarding the write target virtual address it is not necessary to write the write data in both the primary volume and the secondary volume. Thus the channel controller proceeds to step registers the virtual address in the mapping table and then maps the real address thereto.

When this mapping is complete the channel controller determines whether it was possible to map the real address to the virtual address . When the channel controller obtains a positive determination it proceeds to step in order to write the write data in the real address. Meanwhile when the channel controller obtains a negative determination since this means that a storage area cannot be allocated to the write target volume the storage apparatus reports an error to the host as described in step .

The channel controller at step refers to the LDEV management table regarding the target LDEV of the read command and checks whether the encrypted bit is 0. When the encrypted bit is 0 since the data read from the LDEV at step is plain text data that has not been encrypted this is reported to the host as is .

Meanwhile when the encrypted bit is determined to be 1 at step since the data read from the LDEV is encrypted text it is necessary to decrypt such data using an encryption key. Thus the channel controller refers to the corresponding update bit of the differential management table regarding the read target track and when the update bit is 0 since this means that there is no write access from the host during the re key processing the channel controller acquires the backup key old encryption key of the encrypted group management table and decrypts the read data .

Meanwhile when the update bit is 1 since this means that the write data from the host was encrypted with the current key new encryption key during the re key processing the encryption engine acquires the current key of the encrypted group management table and decrypts the read data .

When the channel controller determines that the input parameters are correct it acquires a new encryption key overwrites a new encryption key on the current key of the encrypted group management table and overwrites the old encryption key on the backup key .

Subsequently in order to encrypt the volume which was encrypted with an old key using a new key the channel controller acquires the LDEV number list belonging to the encrypted group requiring the re key processing from the encrypted group management table .

The channel controller acquires the first LDEV number and then determines whether the acquired LDEV is a virtual LDEV .

In the case of a virtual LDEV the channel controller refers to the mapping management table and acquires the real address to be mapped to the virtual LDEV . Subsequently the channel controller acquires the update pointer of the differential management table overwrites 0 on all update bits and prepares to execute re key processing to the LDEV acquired at step .

Further the channel controller acquires the differential pointer of the differential management table and overwrites 1 on all differential bits . The channel controller thereafter checks whether there is any other LDEV number and upon obtaining a positive determination it acquires the subsequent LDEV number and returns to step . Meanwhile when there is no other LDEV number the channel controller ends this processing. Meanwhile when the LDEV of the acquired LDEV number is not a virtual LDEV the channel controller skips step and proceeds to step .

Subsequently the channel adapter acquires the pair number of the pair status of SIMPLEX in the pair management table checks whether a pair number exists and error ends the processing when no pair number exists. When a pair number exists the channel controller registers the primary LDEV number and the secondary LDEV number in the pair management table overwrites PVOL on the VOL status of the primary virtual LDEV management table overwrites SVOL on the VOL status of the secondary virtual LDEV management table overwrites PSUS on the pair status of the pair management table and thereby completes the pair formation for the re key processing.

The channel controller thereafter sets the copy pace of the pair management table . Although the re key processing will finish quickly if the copy pace is fast this will burden the overall resources of the storage apparatus. The opposite will occur if the copy pace slow. The copy pace should be decided upon balancing the two.

The channel controller overwrites COPY on the pair status of the pair management table and acquires the primary LDEV number of the pair management table . Further the channel controller acquires the top address from the mapping management table of the primary LDEV .

Subsequently the channel controller acquires the pool LDEV number and the real address from the mapping management table of the primary LDEV and acquires the top track number of the address from the differential management table . The channel controller thereafter overwrites the copy pointer information . The channel controller copies the data of the real address of the primary volume to the secondary volume acquires the subsequent address and determines whether the pair status is COPY . For instance when the copy is suspended during the copy this is subject to a negative determination and the flowchart is ended thereby. When this is subject to a positive determination it is additionally determined whether an address exists and when this is subject to a negative determination PAIR is overwritten on the pair status. When this is subject to a positive determination processing of step onward is continued for another address.

The channel command control program reads the encrypted data of the primary LDEV the encryption engine decrypts the encrypted data with an old key and sends the plain text to the cache memory and the channel command control program stores the plain text in the copy buffer of the cache memory .

When the channel command control program issues a write command to the secondary LDEV the disk controller executes write processing encrypts the plain text with a current key and stores the encrypted text in the storage area of the secondary LDEV . Incidentally in the foregoing processing since the storage apparatus performs copy operation at the copy pace set at step the I O processing performance of the storage apparatus will not deteriorate.

The channel controller calculates the match rate of data between the pair formed from the secondary volume and the primary volume and overwrites this on the copy management table . The channel controller then increments the differential pointer and the track number respectively and continues the processing of step onward until the pair status becomes COPY and the track number reaches the end number .

When the input parameter is correct the channel controller determines whether the pair status of the pair management table is PAIR or COPY . When the channel controller obtains a positive determination it overwrites PSUS on the pair status of the pair management table . When the channel controller obtains a negative determination at step the channel controller ends the flowchart without performing step .

Upon acquiring the subsequent address the channel controller checks whether such subsequent address exists . When a subsequent address exists the channel controller returns to step and when a subsequent address does not exist it overwrites PAIR on the pair status.

Subsequently the channel controller acquires the primary LDEV number and the secondary LDEV number of the pair management table and overwrites SIMPLEX on the primary VOL status and secondary VOL status of the virtual LDEV management table . The channel controller then deletes the record of the copy management table .

The channel controller thereafter acquires the top address from the mapping management table of the secondary LDEV formats the real address area of the secondary LDEV and overwrites 0 on the allocated bit of the pool management table . Subsequently the channel controller deletes the record of the mapping management table . The channel controller thereafter acquires the subsequent address from the mapping management table of the secondary LDEV and executes step onward until there is no more subsequent address.

When the volume status is PVOL or SVOL the DKC acquires the pair number from the LDEV management table . Subsequently the DKC acquires the pair number primary LDEV number secondary LDEV number and pair status from the pair management table acquires the copy pace and pair match rate from the copy management table and sends these to the control terminal .

As shown in a RAID group A configured from a PDEV and a PDEV is mapped to the primary LDEV and a RAID group B is mapped to the secondary LDEV A. In the encrypted data conversion processing has advanced to the address of 1 of the primary volume and secondary volume as shown with the copy pointer.

When the encryption conversion processing proceeds to the end of the primary volume and the secondary volume as described above this means that the secondary volume has been restored to the primary volume and shows such restoration operation. The storage apparatus rewrites the control information of the mapping table and exchanges the mapping information of the RAID group and volume of the primary volume and the secondary volume during restoration. Therefore even without having to copy the re encrypted data from the secondary volume to the primary volume the primary volume will be able to deal with the data subject to encryption conversion with the new encryption key and high speed restore can be realized thereby.

Incidentally in write data from the host during the re key processing is written in both the primary volume and the secondary volume A. For example even when the re key processing is discontinued midway since write data from the host is written in the secondary volume data of the primary volume can be matched to the data of the secondary volume before restoration by restoring the secondary volume to the primary volume.

The write data from the host to the primary volume during the re key processing is encrypted with an old encryption key or a new encryption key. When there is a write access to the primary volume when the access target differential bit is 0 the differential bit is changed to 1 and the foregoing copy is performed to the area corresponding to the bit. Simultaneously the update bit is also changed to 1. The storage apparatus refers to this update bit and when the write data from the host has been encrypted with a new encryption key it reads a new encryption key and not an old encryption key from the encryption management table and decrypts the encrypted text stored in the track where the update bit is set to 1 using the new encryption key.

Here the storage apparatus may also store the encrypted data of the track in the secondary volume without once decrypting such encrypted data. This is because the encrypted data has already been encrypted with the new encryption key. Meanwhile encrypting the encrypted data stored in the primary volume with the same encryption key is also a convenient method.

Contrarily with the conventional method it is necessary for the DKC to sequentially decrypt the encrypted data of the volume encrypt such data with a new encryption key and thereafter write such data in the volume. When the system malfunctions during this process since data based on different encryption keys will coexist in the volume the DKC will not be able to use the volume data.

Although the foregoing embodiments explained a case of re encrypting data which was encrypted with an old encryption key using a new encryption key in the primary volume the present invention may also be applied to cases of encrypting the plain text stored in the primary volume using a first encryption key.

