---

title: Crunching dynamically generated script files
abstract: Various embodiments enable dynamic crunching of script that can be referenced in a webpage. In at least some embodiments, a browser at a client can be employed to navigate to a webpage available from a server. The webpage can be a static webpage or a dynamically generated webpage. In response to a request from the client to the server, the server can be configured to dynamically generate script referenced in a webpage. Dynamic generation of the script at the server can include configuring the script and crunching of the script to reduce its size. The server can communicate a response having the dynamically crunched script to the client to enable execution of the script by the browser.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08645916&OS=08645916&RS=08645916
owner: Microsoft Corporation
number: 08645916
owner_city: Redmond
owner_country: US
publication_date: 20081203
---
Webpages can contain many different types of content that can be useful for a user. A typical webpage can make use of scripting language to provide client side functionality such as functions plug ins applets and so forth. For example a merchant webpage can be configured with embedded JavaScript code which is code programmed using a programming language under the trademark JavaScript that performs validation of purchase data e.g. address zip code payment info and so forth that is input by a consumer via fields in the merchant webpage.

One traditional technique for employing script in a webpage involves statically developing the webpage and the script for the webpage. For example a human programmer may hand code both the webpage and the script offline in a development environment. The statically developed webpage and script may then be posted to a web server where they may be accessed and viewed by users. In order to make subsequent modifications to the script a human programmer using the traditional techniques makes modifications statically and posts updated files to the web server. Such static development of script can be time consuming and costly. Moreover static development of script can make it difficult or impossible to incorporate dynamic information in the script such as dynamically configuring the script to reflect user interaction with a corresponding webpage.

This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter nor is it intended to be used to limit the scope of the claimed subject matter.

Various embodiments enable dynamic crunching of script that can be referenced in a webpage. In at least some embodiments a browser at a client can be employed to navigate to a webpage available from a server. The webpage can be a static webpage or a dynamically generated webpage. In response to a request from the client to the server the server can be configured to dynamically generate script referenced in a webpage. Dynamic generation of the script at the server can include configuring the script and crunching of the script to reduce its size. The server can communicate a response having the dynamically crunched script to the client to enable execution of the script by the browser.

Various embodiments enable dynamic crunching of script that can be referenced in a webpage. In one embodiment a browser at a client can be employed to navigate to a webpage available from a server. For instance the browser can form a request for the webpage that is communicated to the server. In response to the request the server can be configured to retrieve a static webpage or dynamically generate the requested webpage. The webpage can include references to resources including references to script files. When script referenced in the webpage is requested the script can be dynamically generated and crunched at the server to reduce its size.

In order to crunch script the server can implement one or more handlers to process a request and obtain corresponding script. For instance the script can be dynamically generated at the server in response to the request. The one or more handlers can call or otherwise make use of functionality to crunch the dynamically generated script. For example the server can implement a filter operable to reduce the size of the script by removing blank space carriage returns tabs and other unnecessary characters. Crunching may also include removing comments and or refactoring of the script to perform the same functions with fewer characters. The smaller sized script that results may make it faster and more efficient to communicate the script and or webpages having the script to clients.

The handlers and the filter can be included as components of a web application framework that may be provided by way of the server. The web application framework is designed to provide various resources to support dynamic development of web based content such as websites web based applications web services and the like. Further the web application framework can be configured to detect identifiers associated with different types of client requests and invoke corresponding components to handle the requests. For example an identifier may be configured as a particular file extension that is associated with requests involving dynamic script crunching. When the particular file extension is included in a resource request from a client the web application framework can detect the particular file extension and respond by invoking appropriate components to handle the resource request. For instance the web application framework can pass the request to the handlers and or the filter to cause dynamic generation and or crunching of script. Then a response having the crunched script can be configured for communication to the client.

In the discussion that follows a section entitled Operating Environment is provided and describes an environment in which one or more embodiments can be employed. After this a section entitled Script Crunching Examples discusses embodiments in which script can be dynamically generated and crunched. A section entitled Web Application Framework Examples follows and describes example frameworks suitable to implement embodiments of dynamic script crunching described herein. Finally a section entitled Example System presents an example system that can be used to implement one or more embodiments.

Client also includes a web browser . Web browser represents functionality available to a user of the computing device to navigate over a network such as the Internet to one or more web servers from and to which content can be received and sent. The web browser can operate to output a variety of user interfaces through which the user may interact with content that is available from the one or more web servers .

The example web server of is depicted as having one or more processors and one or more computer readable media . Web server can also be configured to enable or otherwise make use of a web application framework that operates as described herein. The web application framework represents a variety of functionality operable to simplify development of code particularly development of code associated with web based content. Web application framework can be configured in a variety ways such as being an Active Server Page ASP framework an ASP.net framework a Java based framework or a PHP based framework to name a few. In general web application framework is designed to support dynamic development of web based content such as websites web based applications web services and the like.

For example web application framework can enable dynamic configuration of webpages for communication to the client over the network . Webpages can also be static pages posted to the web server . The webpages can be configured to include or reference script . As used herein the script represents text based script configured according to a scripting language. Suitable scripting languages can include European Computer Manufacturer s Association ECMA Script JavaScript and VBScript to name a few. While crunching of script files is described herein the techniques can also be applied to generate and crunch other kinds of files such as those containing Cascading Style Sheets CSS and Extensible Markup Language XML .

To support dynamic development of web based content web application framework can implement or otherwise enable access to a variety of resources . The web application framework makes various types of resources available at runtime to developers of webpages applications and so forth. The resources may include dynamic link libraries DLLs templates script portions tools services applets objects functions and so forth. The resources can be provided in storage at the web server e.g. on computer readable media as illustrated in and or via suitable external storage that can be accessed by the web server locally or over the network . By providing a set of commonly used resources via the web server the time consuming and sometimes redundant process of developing web based content can be made more efficient. For example developers can call upon the resources at runtime to simplify code that defines a webpage and to reduce the time involved in the development process.

In one embodiment functionality represented by the web application framework may be provided by way of various components. These components may include a page handler a script handler and a crunch filter . Page handler represents functionality operable to enable dynamic configuration of webpages . Likewise script handler represents functionality operable to enable dynamic configuration of script that can be referenced by webpages .

Crunch filter represents functionality operable to crunch script . Generally crunching script reduces the file size of the script . This reduction in size can enable faster downloading of the script such as by web browser . For instance crunch filter can process script at runtime to remove unnecessary space and characters such as blanks tabs carriage returns and the like. By doing so crunch filter can crunch the script in a manner that does not substantially alter the functionality of the script . In at least some embodiments script processed via the crunch filter can be script that is dynamically generated via the script handler . Additionally or alternatively crunch filter can operate at runtime to process static script files that have been posted to the web server . A variety of techniques to crunch script are contemplated and discussed below.

The computer readable media and can include all forms of volatile and non volatile memory and or storage media that are typically associated with a computing device. Such media can include ROM RAM flash memory hard disk removable media and the like. One specific example of a computing device is shown and described below in relation to .

Having considered an example operating environment consider now a discussion of embodiments in which script associated with a webpage can be dynamically crunched.

In one or more embodiments techniques may be employed to crunch script that is referenced in a webpage . In at least some embodiments script can be dynamically generated at runtime such as via the script handler of or equivalent functionality. Various crunching algorithms are contemplated that can be applied to crunch the script . One way this can occur is through execution of suitably configured server side code such as the example crunch filter of . The crunched script can then be communicated in a response for execution at a client .

Block receives a resource request from a client. This can occur when a web browser of a client navigates to a particular webpage and a reference link to a resource is selected or otherwise invoked. For example web browser can form a resource request having a uniform resource locator URL that is communicated from the client over the network to the web server . The request can be configured according to hypertext transfer protocol HTTP or any suitable communication protocol to enable resource requests. The URL can be associated with various resources available via the web server . Web application framework can be configured to receive the request and invoke appropriate handlers to process the request.

Block dynamically generates script responsive to the request. For instance the web application framework may include or otherwise make use of a script handler to dynamically generate script referenced in a webpage . Script handler can process a resource request at the web server to form associated script. The configuration of the script occurs dynamically at the web server in response to the request. In this manner deficiencies of techniques involving static development of script can be avoided.

Dynamic generation of script can occur whenever processing of a resource request indicates a requested resource calls for dynamically generated script . One way this can occur is by including identifiers or other suitable data in the webpage request. In particular web application framework can include or otherwise make use of a script handler or other functionality configured to recognize various identifiers in a request. The identifiers enable the web application framework to understand that handling of the request involves processing of script . When these identifiers are detected script handler can generate the corresponding script and process the script .

Block crunches the obtained script. For example script handler can call incorporate or otherwise make use of a crunch filter configured to process script . In one embodiment the crunch filter processes the script to reduce its size by removing unnecessary space and characters such as blanks tabs carriage returns and the like. In other words the crunch filter crunches the script. Rather than crunching the script prior to placing it on the server e.g. static crunching the crunch filter enables crunching to occur at runtime in response to a webpage request e.g. dynamic crunching . For instance crunch filter can receive script having a certain file size process the script with one or more algorithms to crunch the script and pass the crunched script having a smaller file size back to the script handler . Block communicates a response having the crunched script to the client. For instance script handler can call or otherwise make use of a page handler to configure a response to the resource request. The response can be configured to include script that has been crunched as just described. The page handler can cause communication of the response over the network to be received by the client . The client can receive and execute the script provided in the response.

Referring now to a flow diagram is depicted that describes a method in accordance with one or more embodiments. The method can be performed in connection with any suitable hardware software firmware or combination thereof. The method is shown as a set of blocks that specify operations performed by one or more entities and are not necessarily limited to the orders shown for performing the operations. In at least some embodiments the method can be performed by a suitably configured web application framework such as the web application framework described above in relation to .

Block detects an identifier associated with script in a resource request. This detection can be performed by a web application framework in response to receiving a request from a client . A variety of suitable identifiers are contemplated such as HTML tags metadata and other suitable identifiers that can be included in the request from the client . Web application framework can be configured to detect various identifiers associated with requested webpages script and or other resources . Based upon the detected identifiers web application framework can be configured to differentiate between different types of requests and to handle requests. For example a request for authentication can be forwarded to an authentication component for processing and a request for a service can be forwarded to a different component that handles service requests.

In at least some embodiments an identifier can be configured as filename extension that is associated with a requested resource file. A particular extension can be defined that is indicative of script being associated with a request. For example an arbitrary extension .ext can be defined for a file foo to indicate that script is associated with the file foo . Naturally any suitable extension can be employed. A URL corresponding to a requested resource can include a reference to foo.ext that is detectable by the web application framework to determine that script is associated with the request. When the particular extension .ext is detected web application framework can handle the request accordingly such as by causing processing for the associated script to occur.

When an identifier associated with script is detected block passes the request to a script processing functionality. For example web application framework can invoke a script handler to handle a request responsive to detecting the particular extension .ext in the foregoing example or when another suitable identifier is detected. As noted a script handler can be implemented as a component of the web application framework . Additionally or alternatively a script handler can be configured as a stand alone component that is invoked by the web application framework to perform script processing tasks.

Thereafter block processes the request to dynamically generate the script. In particular script handler can make use of resources to dynamically generate the script . For instance script handler can obtain templates applets objects functions tools script portions and other resources to configure the script according to the request.

In an embodiment script handler can be dedicated to handling and or generating script in a particular scripting language. For example web application framework can include a script handler configured exclusively to handle and or generate JavaScript. Moreover multiple different script handlers can be included in the web application framework to enable processing for different respective scripting languages. Additionally or alternatively a single script handler can be configured to handle generate script in accordance with multiple scripting languages. As noted above a variety of suitable scripting languages are contemplated examples of which include European Computer Manufacturer s Association ECMA Script JavaScript and VBScript.

When script has been generated block filters the dynamically generated script to remove characters and block embeds the dynamically generated script into the webpage for communication to a client. As noted above script handler can call incorporate or otherwise make use of a crunch filter . The crunch filter represents functionality operable to apply one or more algorithms to crunch the script by removing characters and or spaces. The crunched script can then be embedded within a requested webpage . For instance the crunched script be passed to a page handler configured to generate a response including the script . Page handler can then cause communication of the response having the crunched script to a client via a network .

Having described example embodiments of dynamic crunching techniques consider now a discussion of example web application frameworks in which dynamic script crunching techniques can be employed.

The example web application framework of includes a variety of sub components to enable functionality related to provision of web based content and or services to clients . In particular web application framework can include or otherwise make use of a web services manager a routing interface and a runtime process . The web service manager is representative of a variety of functionality related to operation of the web server . For instance web service manager can operate to manage server connections client server sessions security transaction logging request handling authentication bandwidth management and so forth. Additionally the web service manager can receive client requests and invoke the appropriate components to handle the requests. Web service manager can handle at least some requests directly such as handling requests to initiate client server sessions.

The routing interface represents an interface between the web service manager and various components configured to handle particular types of requests. For instance routing interface can be configured to differentiate between different types of requests and call corresponding handlers to process the requests. In relation to webpage requests the routing interface can establish invoke or otherwise make use of a corresponding runtime process to process the requests.

The runtime process represents functionality operable to process requests that are passed from the routing interface . This processing can include dynamically generating webpages dynamically generating script for the webpages and or dynamically crunching script as described above and below. The runtime process is further illustrated as including a runtime manager and a web application . The runtime manager represents functionality within the runtime process to manage request processing in a variety of ways. This processing can include managing a pool of resources and or a request queue identifying a web application configured to process a given request and handing off the requests to web applications .

Web application represents functionality operable to service requests at the direction of the runtime manager . A variety of web applications can be provided within the runtime process that are each configured to handle particular types of requests. In accordance with techniques described herein the example web application of represents functionality operable to handle requests that involve dynamic generation and or crunching of script . In one embodiment the runtime process can include or otherwise make use of a script handler crunch filter and or page handler as described herein.

Consider now a particular example in which the web application framework is configured as an ASP.net framework. The ASP.net framework for the purposes of this example is configured to dynamically crunch script including at least crunching of JavaScript. In the following discussion the ASP.net example is described in the context of example acts A to N depicted in that can occur in the course of dynamically generating script referenced in a webpage .

For example a web browser of a client can make a resource request for script referenced in a webpage . This can occur when a user inputs a URL clicks on a hyper link or otherwise navigates the web browser to obtain resources from the web server . Alternatively a request can be generated automatically by a browser such as when a webpage is rendered. Act A communicates a request from the web browser for a resource generically named .ext in . The request can be configured as a hypertext transfer protocol HTTP request. As noted above an identifier such as an arbitrary extension can be defined to associate a request with script . For the ASP.net framework in which JavaScript is dynamically crunched an extension asjx can be employed to denote Active Server JavaScript. Other extensions can be employed with ASP.net to denote other types of resources. For instance in ASP.net aspx can denote webpages asmx can denote web services and ashx can denote web applications. The asjx filename extension or another suitable extension can be employed to extend ASP.net to associate the file extension with files that dynamically generate JavaScript.

The web application framework and in particular the web service manager receives the request. The web service manager can utilize an identifier in the request e.g. the asjx extension to recognize the type of request and invoke appropriate components to process the request. One example of a suitable web service manager is Internet Information Service IIS Web Server by Microsoft .

Act B routes the request to the routing interface . In this example routing interface is configured to handle particular types of request. For instance routing interface can be configured as an HTTP routing interface to handle requests that are HTTP requests. Other types of requests e.g. authentication requests image requests and so forth can be handled directly by the web service manager or by a different interface. In the continuing ASP.net example routing interface can be configured to handle requests for ASP.net resources. In this example the functionality represented by routing extension can be provided by way of an ASP.net ISAPI Internet Server Application Programming Interface extension. The ASP.net ISAPI extension provides an interface between the IIS Web Server and ASP.net processes that handle requests for ASP.net resources. In this example the example asjx request can be passed to the ASP.net ISAPI extension. ASP.net ISAPI extension can be configured to recognize the asjx extension and invoke corresponding resources to process the request.

In order for the asjx extension to be recognized the IIS Web Server can be configured to map the asjx file extension to the ASP.net ISAPI extension. This causes requests made to the IIS Web Server for a resource having the asjx extension to be handed off to the ASP.net ISAPI extension for further processing. It is once again noted that the choice of a file extension is arbitrary. For instance any suitable extension that is not already mapped by IIS Web Server can be mapped.

In general a routing interface can operate to determine that a request involves script based on a filename extension or other identifier. In Act C routing interface passes the request to a runtime process configured to service the request. A runtime manager within the runtime process can receive the request and allocate appropriate components resources for processing the request. For instance in Act D runtime manager invokes a corresponding web application to process the request.

Continuing the foregoing ASP.net example the runtime process can be an ASP.net runtime process and the functionality represented by the runtime manager can be provided by way an HTTP runtime module in ASP.net. The HTTP runtime module in ASP.net can manage a variety of HTTP related requests that are passed into the runtime by the ASP.net ISAPI extension. HTTP related requests can include service requests webpage requests and requests that are associated with JavaScript to name a few. When a request is handed off to ASP.net ISAPI extension the ASP.net ISAPI extension in turn passes the request into the ASP.Net runtime. ASP.Net runtime can be configured to handle requests for aspx files using the page handler script handler and crunch filter described herein.

As noted above different extensions can be associated with different types of requests. HTTP runtime module can make use of the different extensions to handle each type of request differently. A variety of web applications can be included in the ASP.net runtime process to enable handling of different respective requests. A web application invoked to handle the example asjx request can be configured as an HTTP application within the ASP.net framework.

In act E web application dispatches the request for servicing by one or more handlers. One way this can occur is through a page handler script handler and or a crunch filter as described herein. For instance script handler can dynamically generate script based on a request. Additionally or alternatively script handler can obtain static script from a storage location referenced by the request. Act F passes the script for processing by the crunch filter .

Returning again to the ASP.net example the example asjx request can be dispatched to the script handler . Script handler dynamically generates JavaScript in an asjx file based upon the request. Script handler can invoke the crunch filter and pass in the dynamically generated JavaScript in the asjx file for processing by the crunch filter . Note that communications between the web application and between various handlers can occur by way of a handler interface as depicted in . One example of a handler interface is IHTTPhandler interface in the ASP.net framework.

A script handler can be implemented in ASP.net as a class that is derived from a .Net Framework System.Web.PageHandlerFactory. Using this class the script handler can be configured as an IHTTPhandler that makes use of the IHTTPhandler interface and built in functions available via the IHTTPhandler interface. This can also enable interactions with a suitably configured page handler to compile the JavaScript in the asjx file that is output by the script handler . The asjx file can be compiled in a manner similar to the way in which the page handler compiles other types of files such as aspx files that are related to other types of webpages .

Following is an example of code suitable to implement an example script handler named ActiveJSHandler in the ASP.net framework to enable handling of JavaScript 

As noted above IIS Web Server can be configured to map the asjx file extension to the ASP.net ISAPI extension. This enables recognition of requests for JavaScript resources in the ASP.net implementation. In order to have asjx files compiled in a manner similar to aspx files a build provider used to process aspx pages can also be mapped to the asjx extension. For example asjx can be mapped to the appropriate build provider in a configuration file for the machine and or in a configuration file for a particular web application . One example of code suitable to implement this mapping in ASP.net is as follows 

In addition the script handler can also be mapped to the asjx file extension. One example of code suitable to implement mapping of the preceding example ActiveJSHandler to the asjx extension in ASP.net is as follows 

When JavaScript obtained via the script handler is passed to the crunch filter the crunch filter applies one or more algorithms to crunch the JavaScript. Any suitable algorithm can be employed. One example of code suitable to implement a crunch filter to apply one or more algorithms to crunch JavaScript in ASP.net is as follows 

In act G the crunched script is returned to the script handler . In act H the script handler passes the request to the page handler for processing. Page handler can operate to include the crunched script in a response to the resource request. As noted page handler can be invoked to configure a response that includes the dynamically generated script. Page handler can configured a response before concurrently with or after operations to dynamically crunch the script . Further page handler can operate to compile the script and associated code to create a response payload.

Act I passes the response payload having the crunched script back to the script handler . In act J script handler sets a response type to designate that the response payload includes the crunched script and passes the response to the web application . Acts K to M involve passing the configured response back along the components of the web application framework . In particular the response payload having the crunched script can be passed successively to the runtime manager Act K out of the runtime process to the routing interface Act L and from the routing interface back to the web services manager Act M .

In Act N the response payload having the crunched script is communicated over the network to the web browser . For example the web services manager can communicate an HTTP response that includes JavaScript that has been crunched as previously discussed. Web browser can receive the HTTP response and cause execution of the JavaScript or other script in the response.

Having described various embodiments in which a web application framework can be configured to employ dynamic script crunching techniques consider now a discussion of an example system that can be utilized to implement the embodiments described above.

Computing device includes one or more processors or processing units one or more memory and or storage components one or more input output I O devices and a bus that allows the various components and devices to communicate with one another. Bus represents one or more of any of several types of bus structures including a memory bus or memory controller a peripheral bus an accelerated graphics port and a processor or local bus using any of a variety of bus architectures. Bus can include wired and or wireless buses.

Memory storage component represents one or more computer storage media. Component can include volatile media such as random access memory RAM and or nonvolatile media such as read only memory ROM Flash memory optical disks magnetic disks and so forth . Component can include fixed media e.g. RAM ROM a fixed hard drive etc. as well as removable media e.g. a Flash memory drive a removable hard drive an optical disk and so forth .

One or more input output devices allow a user to enter commands and information to computing device and also allow information to be presented to the user and or other components or devices. Examples of input devices include a keyboard a cursor control device e.g. a mouse a microphone a scanner and so forth. Examples of output devices include a display device e.g. a monitor or projector speakers a printer a network card and so forth.

Various techniques may be described herein in the general context of software or program modules. Generally software includes routines programs objects components data structures and so forth that perform particular tasks or implement particular abstract data types. An implementation of these modules and techniques may be stored on or transmitted across some form of computer readable media. Computer readable media can be any available medium or media that can be accessed by a computing device. By way of example and not limitation computer readable media may comprise computer storage media .

 Computer storage media include volatile and non volatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. Computer storage media include but are not limited to RAM ROM EEPROM flash memory or other memory technology CD ROM digital versatile disks DVD or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can be accessed by a computer.

Various embodiments to enable dynamic crunching of script that can be embedded in a webpages have been described herein. Although the subject matter has been described in language specific to structural features and or methodological steps it is to be understood that the subject matter defined in the appended claims is not necessarily limited to the specific features or steps described. Rather the specific features and steps are disclosed as example forms of implementing the claimed subject matter.

