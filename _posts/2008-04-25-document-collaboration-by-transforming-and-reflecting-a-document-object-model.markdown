---

title: Document collaboration by transforming and reflecting a document object model
abstract: Technologies are described herein for document collaboration by transforming and reflecting a document object model. A DOM representation of a document to be shared is obtained at a host computer, transformed, and reflected to one or more participant computers. Each of the participant computers receives the DOM representation of the document and renders and displays the DOM representation locally. When the DOM representation is modified, changes to the DOM representation may also be transmitted to the participant computers, rendered, and displayed. Events occurring with respect to the DOM may also be synchronized between the host and participant computers.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08843816&OS=08843816&RS=08843816
owner: Microsoft Corporation
number: 08843816
owner_city: Redmond
owner_country: US
publication_date: 20080425
---
The utilization of desktop application programs is typically a single user experience. There are times however when it is desirable for several remotely located computer users to collaborate on a document by sharing the screen display of the same application program and synchronizing their interactions with the application program. For instance it may be desirable for several remotely located computer users to jointly utilize a World Wide Web Web browser application program to collaboratively browse the Web referred to herein as co browsing . It may be similarly desirable for several remotely located computer users to collaborate on other types of documents by sharing the screen display of other types of application programs such as word processors spreadsheet application programs presentation applications and others.

The most common way to share a view of a document is to utilize a screen sharing application program. Screen sharing involves capturing images of an application program displaying a document at a host computer transmitting the captured images to one or more participant computers and displaying the images at the participant computers. Screen sharing however suffers from a number of significant drawbacks. For instance screen sharing consumes significant computing resources and network bandwidth and may impose considerable latency at the participant computers following a change to the screen display at the host computer. Moreover screen sharing may be impracticable if the host computer has a much higher display resolution than the participant computers.

Another method for collaborating on a document involves sharing the location of the document among the collaborators. For instance in the context of co browsing the uniform resource locator URL of the Web page that is to be viewed may be shared among the users. Each user may then individually utilize a Web browser application to directly load the Web page using the URL. While sharing URLs in this manner does not suffer from the same drawbacks as screen sharing it does suffer from other drawbacks. For instance when co browsing using URL sharing a user may be presented with a different view of the Web page than the other users or may not be able to access the page at all depending upon their access rights to the page. Moreover it can often be time consuming and complicated to share the locations of the documents that are to be collaborated upon among the users such as for instance through the transmission of electronic mail e mail messages or other communications that include the document locations.

Technologies are described herein for document collaboration by transforming and reflecting a document object model DOM . In particular the embodiments presented herein transmit a DOM representation of a document to the participants in a collaborative session rather than screen captures thereby lowering the required computing resources network bandwidth and latency as compared to previous solutions. Moreover because the same DOM representation of the document is rendered at each participant computer each participant is presented with an identical view of the document even where the participant does not have access rights to view the document.

According to one aspect presented herein a DOM representation of a document to be shared is obtained at a host computer. For instance where a Web page is to be shared a DOM representation of the Web page is obtained from a DOM application programming interface API exposed by a Web browser. Once the DOM representation of the Web page has been obtained the DOM representation is reflected to one or more participant computers for display. Reflection refers to the process of transmitting the DOM representation of the document to one or more participant computers. A secure collaborative data channel may be utilized between the host computer and the participant computers for the transmission of collaboration data.

Each of the participant computers receives the DOM representation of the document and renders and displays the DOM representation locally. For instance in the case of a Web page a Web browser executing on each of the participant computers may be utilized to render a DOM representation of the Web page. In this manner each participant in the collaborative session receives the same DOM representation of the Web page which is rendered locally. As a result each participant is shown an identical view of the document.

According to aspects the DOM representation may be transformed prior to reflection to the participant computers. The transformation may include removing modifying or caching any host dependent content. For instance in the case of a Web page any URLs within the DOM representation of the Web page that are relative to the host computer may be transformed into absolute URLs prior to reflection. Other transformations may also be performed such as embedding externally linked content within the document. This allows participant computers to render the Web page without fetching any referenced content such as images or stylesheets from external Web sites.

According to other aspects events occurring with respect to the DOM representation of the document may cause an updated version of the DOM representation to be transmitted to the participant computers. For instance if the DOM fires an event indicating that the DOM representation of the document has changed the changed DOM representation may be transformed and reflected to the participant computers. In one embodiment only the changes to the DOM representation of the document are transmitted to the participants thereby conserving network bandwidth. In this manner changes to the DOM representation of the document are continually synchronized to the participant computers.

Other types of events occurring with respect to the DOM may also be synchronized between the host and participant computers. For instance according to aspects presented herein mouse movement events are synchronized between the host and participant computers thereby permitting a visual indication of the location of each participant s mouse cursor. Window size events scroll position events navigation events edit events object interaction events and other types of events may also be synchronized between the host and the participant computers.

It should be appreciated that the above described subject matter may also be implemented as a computer controlled apparatus a computer process a computing system or as an article of manufacture such as a computer readable medium. These and various other features will be apparent from a reading of the following Detailed Description and a review of the associated drawings.

This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter nor is it intended that this Summary be used to limit the scope of the claimed subject matter. Furthermore the claimed subject matter is not limited to implementations that solve any or all disadvantages noted in any part of this disclosure.

The following detailed description is directed to concepts and technologies for enabling document collaboration by transforming and reflecting a document object model. While the subject matter described herein is presented in the general context of program modules that execute in conjunction with the execution of an operating system and application programs on a computer system those skilled in the art will recognize that other implementations may be performed in combination with other types of program modules. Generally program modules include routines programs components data structures and other types of structures that perform particular tasks or implement particular abstract data types. Moreover those skilled in the art will appreciate that the subject matter described herein may be practiced with other computer system configurations including hand held devices multiprocessor systems microprocessor based or programmable consumer electronics minicomputers mainframe computers and the like.

In the following detailed description references are made to the accompanying drawings that form a part hereof and which are shown by way of illustration specific embodiments or examples. Referring now to the drawings in which like numerals represent like elements through the several figures aspects of a computing system and methodology for enabling document collaboration by transforming and reflecting a DOM will be described.

Turning now to details will be provided regarding an illustrative operating environment and several software components provided by the embodiments presented herein. In particular shows aspects of a system for enabling document collaboration by transforming and reflecting a DOM. As shown in the system includes a host computer one or more participant computers A C a Web server computer and a network . The network may comprise any type of suitable network for providing data communications between the host computer the participant computers A C and the Web server computer . Examples of such networks include local area networks and wide area networks such as the Internet.

As discussed briefly above the host computer is configured to share a view of a document provided by a viewer application with the participant computers A C. In one implementation described herein the viewer application comprises the Web browser application and the document comprises a Web page . It should be appreciated however that the embodiments provided herein may be utilized to share a view of a document provided by virtually any type of viewer application including word processing application programs spreadsheet applications programs presentation application programs drawing application programs and others.

In order to provide the functionality described herein for sharing a view of the Web browser application a collaboration application and a Web browser add in are provided. The collaboration application operates in conjunction with the Web browser add in and the Web browser application at the host computer to transform and redirect a DOM representation of the Web page . As shown in the collaboration application and the Web browser add in is also executed on each of the participant computers A C along with the Web browser application . As described in greater detail herein the collaboration application interfaces with the Web browser add in to read write and update the DOM representation of the Web page . The collaboration application also connects the host computer and the participant computers A C through a central server or service or through distributed technologies such as peer to peer communication.

As will be discussed in greater detail below the Web browser add in executing on the participant computers A C is configured to receive the reflected DOM representation of the Web page and to render and display the DOM representation at each of the participant computers A C. Additional details regarding this process will be provided below. It should be appreciated that in implementations wherein the viewer application comprises another type of application program other than a Web browser application an appropriate add in may be configured for use with that application that provides the functionality described herein as being performed by the Web browser add in . In alternate embodiments an application program may be configured to interoperate directly with the collaboration application without the use of an add in.

In order to enable secure communication between the Web browser add in executing at the host computer and the Web browser add ins executing at each of the participant computers A C a secure collaborative data channel may be established by the collaboration application . According to one implementation all of the data related to a collaborative session established between the host computer and the participant computers A C is transmitted over the secure collaborative data channel . It should be appreciated however that other types of network topologies and communications links between the host computer and the participant computers A C may be utilized in embodiments.

As described briefly above the host computer is configured in one embodiment to share a view of a Web page with the participant computers A C. To enable this functionality the Web browser application connects to the Web server program executing on the Web server computer over the network link A. Through the network link A the Web browser application retrieves the Web page from the Web server program . Once the Web browser application has retrieved the Web page it generates an internal DOM representation of the Web page .

As known in the art the DOM representation of the Web page comprises the internal representation of the Web page maintained by the Web browser application . The DOM representation of the Web page may be made available to other programs external to the Web browser application through a DOM API. For instance through the DOM API an application program may obtain the DOM representation of the Web page and may register for notification of events occurring with respect to the DOM representation of the Web page . As an example an application program may register to receive notification when the DOM representation of the Web page has been modified.

In order to provide a view of the Web page to the participant computers A C the Web browser add in executing at the host computer utilizes a DOM API exposed by the Web browser application to retrieve the DOM representation of Web page . The Web browser add in may then transform the DOM representation of the Web page prior to transmitting the DOM representation of the Web page to the participant computers A C. This transformation may include for example removing modifying or caching any content that is dependent upon the host computer . For instance in the case of the Web page any URLs within the DOM representation of the Web page that are relative to the Web server computer may be transformed into absolute URLs prior to reflection of the DOM representation of the Web page to the participant computers A C.

Once the DOM representation of the Web page has been transformed the collaboration application reflects the DOM representation of the Web page to the collaboration applications executing at the participant computers A C. The collaboration applications in turn call the Web browser add in in order to render the DOM. As used herein the term reflection refers to the process of transmitting the DOM representation of the Web page to one or more participant computers in a collaboration session. As mentioned above the secure collaborative data channel may be utilized to transmit the transformed DOM representation of the Web page to the participant computers A C.

When the Web browser add ins executing at the participant computers A C receive the DOM representation of the Web page from the collaboration applications the Web browser add ins provide the received representation to the Web browser application . The Web browser application then renders and displays the DOM representation of the Web page at each of the participant computers A C.

In order to render content external to the DOM representation of the Web page such as images and other content each of the participant computers may connect directly to the Web server computer to retrieve the content. For instance the participant computer A may connect to the Web server computer over the communications link B the participant computer B may connect to the Web server computer over the communications link C and the participant computer C may connect to the Web server computer over the communications link D.

It should be appreciated that in other embodiments the host computer may cache the content external to the DOM representation of the Web page . In this embodiment the Web browser add ins executing at each of the participant computers A C may retrieve the external content from the host computer over the secure collaborative data channel . In other embodiments content external to the DOM representation of the Web page is sent immediately with the Dom such that it can be retrieved directly from a participant computer A C.

According to yet another embodiment the collaborative application executing at the host computer may transmit the transformed DOM representation of the Web page to the Web server computer . The Web server computer may then serve the transformed DOM representation of the Web page to a collaboration server or service. In turn the collaboration server or service transmits the DOM representation of the Web page to the collaboration applications executing at the participant computers A C. In this manner the collaboration applications executing at the participant computers A C may communicate with a collaboration server or service rather than the host computer to obtain the DOM representation of the Web page .

In order to provide changes to the DOM representation of the Web page to the participant computers A C the Web browser add in registers with the DOM API provided by the Web browser application to receive notifications when the DOM representation of the Web page changes. When such a notification is received the Web browser add in again retrieves the DOM representation of the Web page from the Web browser application transforms the DOM representation and reflects the transformed DOM representation to the participant computers A C. In one implementation only the changes to the DOM representation of the Web page are reflected to the participant computers A C.

When each of the participant computers A C receives an update to the DOM representation of the Web page the Web browser add in causes the updated DOM representation of the Web page to be rendered and displayed by the Web browser application executing at the participant computers A C. In this manner updates to the DOM representation of the Web page are displayed at each of the participant computers A C.

According to other embodiments the Web browser add in executing at the host computer and the participant computers A C may register to receive notification of other types of events occurring with respect to the DOM representation of the Web page . For instance in one implementation the Web browser add in executing at the host computer and the participant computers A C register for mouse movement events occurring at the respective computing systems. When mouse movement events are received the events are reflected to other participants in the collaborative session. In response to receiving such events the Web browser add in is configured to display a mouse cursor corresponding to each of the participants in the collaborative session. The mouse cursor displayed by the Web browser add in may be displayed in a manner to identify the user to which the mouse cursor corresponds and to also distinguish the mouse cursor from a mouse cursor provided by an operating system. For instance according to implementations a pictorial representation of a mouse cursor may be provided that includes the name of each participant and possibly other formatting that distinguishes the various mouse cursors from one another such as coloring shading or other types of formatting.

According to another embodiment the Web browser add in executing at the host computer registers for window size events occurring with respect to the Web browser application . These events are also reflected to the participant computers A C and instantiated thereupon. In this manner if the size of a graphical user interface window provided by the Web browser application is modified by a user of the host computer Web browser windows provided by the Web browser applications executing on the participant computers A C will be resized in a similar manner.

According to another embodiment the Web browser add in executing at the host computer may register to receive scroll position events occurring with respect to a window provided by the Web browser application . These events are also reflected from the host computer to the participant computers A C and instantiated thereupon. In this manner if a user of the host computer scrolls a window provided by the Web browser application for displaying the Web page each of the participant computers A C will similarly scroll their windows.

According to yet another embodiment the Web browser add in executing at both the host computer and the participant computers A C may register with the Web browser application to receive notification of navigation events. Navigation events correspond to the selection of links or other navigation objects within a Web page . These events are reflected between the host computer and the participant computers A C. In this manner when a participant within a collaborative session clicks on a URL within the Web browser application an event is sent to each of other participants so that their Web browser application can navigate to the same page. The DOM representation of the new page is then reflected to all participants in the collaborative session including the user that performed the navigation.

According to other implementations the Web browser add ins executing at the host computer and the participant computers A C may also register for and reflect edit events. Edit events refer to events taking place with respect to a DOM representation of the Web page for editing the content contained therein. For instance when a participant utilizing the host computer types text within an edit box contained within the Web page an event will be generated and provided to the Web browser add in executing at the host computer . In turn the Web browser add in reflects the event to each of the participant computers A C where the event is then instantiated thereupon. In this manner a participant utilizing the host computer can edit portions of the Web page and have these edits synchronized with the participant computers A C. Edits made at the participant computers A C can also be synchronized to the host computer in a similar manner. The manner in which edits are synchronized between the host computer and the participant computers A C may be specified through the use of a permissions model.

According to yet another embodiment the Web browser add in may be configured to register for notification of object interaction events. Object interaction events are events generated when a user of the host computer interacts with an object embedded within the Web page such as a video player or other type of object. In this way the Web browser add in receives notification when a user of the host computer presses play or pause for instance on a video embedded within the Web page . The Web browser add in executing at the host computer reflects these events to the participant computers A C where they are instantiated. In this way the playing pausing or seeking of a video or other type of multimedia file contained within the Web page may be synchronized between the host computer and the participant computers A C.

It should also be appreciated that the Web browser add in may maintain information according to embodiments outside of the DOM representation of the Web page and display this information over the display provided by the Web browser application . For instance in one implementation the Web browser add in provides functionality at the host computer and the participant computers A C for allowing a user to place translucent highlighting over the display of the Web page . This highlighting is reflected between each of the participants within the collaborative session. It should be appreciated that other types of collaborative tools may also be provided by the Web browser add in according to other implementations.

Referring now to an illustrative software architecture will be described. The software architecture illustrated in is utilized by the host computer and each of the participant computers A C. The software architecture includes a Web browser that is configured to communicate with the Web server program to retrieve the Web page . As discussed briefly above the Web browser application is also configured to generate and utilize a document object model representation of the Web page .

As also described above the Web browser application exposes a DOM API that allows external programs to obtain the DOM representation of the Web page and to register for notification of events occurring with respect to the DOM. For instance as illustrated in the Web browser add in may utilize the DOM API to obtain the DOM representation of the Web page and to register for the mouse movement window size scroll position navigation edit and object interaction events described above.

It should be appreciated that other types of application programs for creating and viewing other types of documents also maintain DOM representations of those documents and provide an API for obtaining the DOM representation and for receiving notification of events with respect to the DOM representation. It should also be appreciated that according to embodiments the Web browser add in may register with an operating system executing on the host computer or the participant computers A C for notification of certain types of events occurring with respect to Web browser application .

Referring now to additional details will be provided regarding the embodiments presented herein for document collaboration by transforming and reflecting a document object model. In particular show a flow diagram illustrating aspects of the operation of the Web browser add in for transforming and reflecting a DOM representation of a document. It should be appreciated that the logical operations described herein are implemented 1 as a sequence of computer implemented acts or program modules running on a computing system and or 2 as interconnected machine logic circuits or circuit modules within the computing system. The implementation is a matter of choice dependent on the performance and other requirements of the computing system. Accordingly the logical operations described herein are referred to variously as states operations structural devices acts or modules. These operations structural devices acts and modules may be implemented in software in firmware in special purpose digital logic and any combination thereof. It should also be appreciated that more or fewer operations may be performed than shown in the figures and described herein. These operations may also be performed in a different order than those described herein.

The routine begins at operation where the Web browser add in executing at the host computer and each of the participant computers C A are initialized. The routine then continues to operation where the secure collaborative data channel is established between the host computer and the participant computers A C. As discussed above the secure collaborative data channel may be utilized in embodiments to transmit all of the data related to a collaborative session. Once the secure collaborative data channel has been initialized the routine proceeds from operation to operation .

At operation the Web browser application executing at the host computer is utilized to navigate to a Web page . In response to such a navigation the Web browser application connects to the Web server program retrieves the Web page and generates the DOM representation of the Web page . The routine then continues to operation where the Web browser add in executing at the host computer retrieves the DOM representation of the Web page from the Web browser application .

Once the DOM representation of the Web page has been retrieved the Web browser add in transforms the DOM representation if necessary. As discussed above according to embodiments the Web browser add in may transform the DOM representation by removing modifying or caching any host dependent content. In the case of the Web page the Web browser add in transforms any URLs within the DOM representation that are relative to the Web server computer into absolute URLs during the transformation process. This occurs at operation .

From operation the routine proceeds to operation where the collaboration application executing at the host computer reflects the transformed DOM representation of the Web page to each of the participant computers A C. The routine then proceeds to operation where the collaboration applications executing at the participant computers A C receive the transformed DOM and provide to the Web browser add ins . In turn the Web browser add ins provide the transformed DOM to the Web browser applications executing on each of the respective participant computers A C.

From operation the routine continues to operation where the Web browser applications executing at each of the participant computers A C render and display the DOM representation. In this manner a display generated by the Web browser application at the host computer is provided at each of the participant computers A C. As discussed above according to embodiments the participant computers A C may retrieve data external to the Web page directly from the Web server computer or from the host computer in order to render the Web page .

From operation the routine continues to operation where the Web browser add ins executing at the host computer and the participant computers A C monitor for events occurring with respect to the DOM representation of the Web page . The routine then proceeds to operation where a determination is made as to whether an event was detected. If no events are detected the operation proceeds to operation described below. If however an event is detected the routine proceeds from operation to operation .

At operation the Web browser add in determines whether the detected event indicates that the DOM representation of the Web page has been changed. If the DOM representation of the Web page has been changed the routine proceeds from operation to operation . At operation the Web browser add in transforms the changed portion of the DOM representation and transmits the changes to the participant computers A C. From operation the routine proceeds to operation described below.

If at operation the Web browser add in determines that the detected event was not a DOM change event the routine proceeds from operation to operation . At operation the detected event is reflected to the participant computers A C where the event is instantiated. As discussed above mouse movement events window size events scroll position events navigation events edit events object interaction events and other types of events may be detected at each of the computers and reflected in this manner. The host computer may also detect and reflect these events to the participant computers A C in a similar manner. From operation the routine proceeds to operation .

At operation a determination is made as to whether the collaborative session has been completed. If the collaboration session has not been completed the routine returns from operation to operation described above where additional changes to the DOM representation and events are reflected to the participants in the collaborative session. If the collaborative session has been completed the routine proceeds from operation to operation where the collaborative session is terminated. This may include for instance disconnecting the secure collaborative data channel established between the host computer and the participant computers A C. From operation the routine continues to operation where it ends.

The computer architecture shown in includes a central processing unit CPU a system memory including a random access memory RAM and a read only memory ROM and a system bus that couples the memory to the CPU . A basic input output system containing the basic routines that help to transfer information between elements within the computer such as during startup is stored in the ROM . The host computer further includes a mass storage device for storing an operating system application programs and other program modules which are described in greater detail herein.

The mass storage device is connected to the CPU through a mass storage controller not shown connected to the bus . The mass storage device and its associated computer readable media provide non volatile storage for the host computer . Although the description of computer readable media contained herein refers to a mass storage device such as a hard disk or CD ROM drive it should be appreciated by those skilled in the art that computer readable media can be any available computer storage media that can be accessed by the host computer .

By way of example and not limitation computer readable media may include volatile and non volatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. For example computer readable media includes but is not limited to RAM ROM EPROM EEPROM flash memory or other solid state memory technology CD ROM digital versatile disks DVD HD DVD BLU RAY or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can be accessed by the host computer .

According to various embodiments the host computer may operate in a networked environment using logical connections to remote computers through a network such as the network . The host computer may connect to the network through a network interface unit connected to the bus . It should be appreciated that the network interface unit may also be utilized to connect to other types of networks and remote computer systems. The host computer may also include an input output controller for receiving and processing input from a number of other devices including a keyboard mouse or electronic stylus not shown in . Similarly an input output controller may provide output to a display screen a printer or other type of output device also not shown in .

As mentioned briefly above a number of program modules and data files may be stored in the mass storage device and RAM of the computer including an operating system suitable for controlling the operation of a networked desktop laptop or server computer. The mass storage device and RAM may also store one or more program modules and associated data. In particular the mass storage device and the RAM may store the Web browser application the Web browser add in and the collaboration application each of which was described in detail above with respect to .

Based on the foregoing it should be appreciated that technologies for document collaboration by transforming and reflecting a document object model are provided herein. Although the subject matter presented herein has been described in language specific to computer structural features methodological acts and computer readable media it is to be understood that the invention defined in the appended claims is not necessarily limited to the specific features acts or media described herein. Rather the specific features acts and mediums are disclosed as example forms of implementing the claims.

The subject matter described above is provided by way of illustration only and should not be construed as limiting. Various modifications and changes may be made to the subject matter described herein without following the example embodiments and applications illustrated and described and without departing from the true spirit and scope of the present invention which is set forth in the following claims.

