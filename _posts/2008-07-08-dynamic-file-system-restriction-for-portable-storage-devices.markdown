---

title: Dynamic file system restriction for portable storage devices
abstract: A method of installing an application on a portable storage device is disclosed. The method includes receiving file system commands issued by an installer application and selectively intercepting and modifying at least one file system command before the at least one file system command is executed with respect to a destination file system. The method restricts access to a first file system located at a fixed storage memory device and directs access to a second file system located on the portable storage device.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08473941&OS=08473941&RS=08473941
owner: Sandisk IL Ltd.
number: 08473941
owner_city: Kfar Saba
owner_country: IL
publication_date: 20080708
---
The present disclosure is generally related to installation of applications on portable storage devices.

Systems and methods of auto launching computer applications from portable devices such as universal serial bus USB flash memory devices that follow the U3 platform have allowed for increased portability of personal computer software applications. Representative systems typically install computer executable content and configuration data onto the USB flash memory device or other type of removable storage device. However application installers on a host computer typically are not aware of removable storage devices and may attempt to install applications by default to a fixed memory location such as to a program file directory on a computer system fixed disk drive. The application installation process at the host computer complicates portable application installations to the removable storage device.

One previous approach to address this issue is to redirect a local environment such that variables that indicate the location of the program files directory instead point to a corresponding location on a removable storage device. This approach has limits since the approach only works if the install application is aware of the variables and uses the redirection method. Another approach is to virtualize the entire computer operating environment but this approach can be expensive and may consume significant memory and CPU overhead. A further approach is to pre package applications in a portable form but such pre packaging is not likely to be adopted by a majority of end users.

A system and method is disclosed that dynamically restricts the file systems available to an installer application at a host device such as a host computer having an interface to a portable storage device. Based on heuristic patterns and rules a monitor application can observe that an installer application is being executed and can restrict available file system selections to only allow for a file system at a selected device such as a file system at the portable storage device. Thus the installer application at the host device may only be allowed to install applications at the portable device. The heuristic patterns and rules may remove the restriction on available file systems in order to allow the installed application to function correctly when executed at the host device or to allow the installer application to access resources. The installer application resources may reside in a file system location that is different then the file system at the portable device.

In a particular embodiment a method of installing an application onto a portable storage device is disclosed. The method includes receiving file system commands issued by an installer application at a host device that is coupled to a portable storage device. The method includes selectively intercepting and modifying at least one file system command before the at least one file system command is executed with respect to a destination file system. Access is directed to a second file system located on the portable storage device.

In another embodiment a method is disclosed that includes receiving a request to install an application on a portable storage device coupled to a host device. The method also includes executing an installer program at the host device. The installer program issues a file system command to write one or more executable files for the application to a first file system at a first storage device. The method further includes intercepting the file system command and modifying the file system command to write the one or more executable files for the application to a second file system at the portable storage device.

In another embodiment a portable data storage device is disclosed that includes an interface for connection to a host device and a storage area that includes a stored application installation redirection component. The application installation redirection component is configured to selectively modify parameters of at least one file system command during execution of an application installer program before the at least one file system command is executed by an operating system at the host device. The application installation redirection component selectively directs access to a second file system associated with the portable data storage device.

In another embodiment a computer system is disclosed that includes a host system including an interface configured to communicate with a removable data storage device. The host system further includes a fixed data storage device. The host system is configured to selectively intercept and modify file system commands issued by an installer application before the file system commands are executed with respect to a target file system. The host system is further configured to selectively direct access to a second file system to enable the installer application to access the second file system.

Referring to a particular embodiment of a system that includes a host device such as a computer and a portable storage device is shown. In a particular embodiment the host device is a host computer system that includes a processor an interface to external devices a memory and at least one fixed data storage device . In a particular embodiment the interface is a universal serial bus USB interface. The host device also includes a bus to interconnect the processor the memory and the fixed data storage device . The fixed data storage device may include one or more memory storage devices such as hard disc drives optical disc drives tape readers floppy disc drives and other non removable devices for reading or storing data. The host device may include a variety of different electronic devices such as a laptop computer a personal digital assistant PDA an audio player a cellular phone or any other device that includes a processor that can access file system data or programs.

The memory may include dynamic random access memory RAM read only memory ROM or other similar memory used to store processor executable instructions and data. The memory includes an installer application also referred to as an installer program file system command interceptor instructions and operating system software . The installer application has access to a default destination file system that is used for application installation. Typically the default destination file system is a frequently used file system located at a main storage device such as the representative first file system located at the fixed data storage device . In a particular embodiment the first file system is a commonly used file system such as the C drive of a main disc drive used by the host device . While this particular embodiment uses terminology for a Microsoft Windows environment other types of operating systems may be used.

The file system command interceptor instructions have access to a file system path descriptor of a second file system . The second file system is located on the portable storage device .

The operating system software includes functionality to invoke file system commands and includes a hook library . The hook library provides functionality so that file system commands issued by an application can be redirected or modified prior to execution.

The portable storage device is a removable storage device that includes an interface and a storage area . The storage area includes a second file system that may include applications . The applications may be pre loaded or the host device may install new applications onto the portable storage device by accessing the second file system . The second file system also includes a data area . In an illustrative embodiment the portable storage device is a USB flash memory device. The USB flash memory device may comply with one or more industry standards for supporting portable applications. The USB flash memory device is a small device that is easily portable and that is removable from the host device . The USB flash memory device may be plugged into a USB socket such as to interface for connection to the host device over a data communication path . Upon connection the host device can read data from or write data to the portable storage device .

During operation upon connection of the portable storage device to the interface of the host device the processor may read data or instructions from or write data or instructions to the portable storage device . When the processor initiates an action to install an application onto the portable storage device the processor executes instructions of the installer application . The installer application has a default or initial setting for a destination file system to be used for application installation. The installer application begins to install an application by initiating file system commands such as commands to open a file to write a file or to copy a file at the default file system. Since the default file system is often the first file system of the fixed data storage device the installation process for portable applications can be complicated in this case. To overcome this issue the file system command interceptor instructions are executed by the processor to selectively intercept and modify certain file system commands issued by the installer application .

The file system command interceptor instructions implement logic to modify certain low level file system commands to redirect access from the first file system to the second file system located at the portable storage device . In a particular embodiment the file system command interceptor instructions are incorporated into the installer application . Alternatively the file system interceptor instructions may be executed to monitor the installer application and are invoked upon execution of the installer application . Further the file system command interceptor instructions may utilize functionality of the command invoker and hook library supported by the operating system . For example the file system command interceptor instructions may include application programming interface API hook logic to selectively intercept and modify certain file system API commands prior to the API commands being executed with respect to the destination file system. Examples of suitable API commands that may be intercepted and modified include a create file command an open file command and a copy file command. In this manner an automated process is provided at the host device to simplify installation of applications onto the portable storage device .

In a particular embodiment the file system command interceptor instructions are executable by the processor to receive file system commands issued by the installer application and to selectively intercept and modify parameters of the file system commands before the file system commands are executed with respect to a destination file system. The destination file system may be identified by a file system path name. The file system command interceptor instructions are executed by the processor to evaluate the file system path name and to restrict access to the first file system and to direct access to the second file system . In this case the installer application has access to the second file system but is blocked from access to the first file system .

Referring to certain operations of the host device of are illustrated in further detail. For example shows a user interface an installer application a file system command interceptor and a file system command execution module . The file system command interceptor has access to a rule engine . The rule engine includes heuristic patterns and is coupled to an API call history database .

Referring to and the installer application refers to operations and logic performed by the processor when executing the installer application and the file system command interceptor refers to operations and logic performed by the processor when executing the file system command interceptor instructions . In addition the rule engine and the API call history database can be implemented by the file system command interceptor instructions or may be implemented as a separate component within the host device .

During operation the user interface may initiate application installation by sending an install request to the installer application . The installer application in turn sends one or more file system commands to initiate installation of the designated application onto a storage device. The file system command interceptor receives the file system commands issued by the installer application . The file system interceptor extracts information from the file system commands such as a destination file system path name or a destination directory and provides the extracted information to the rule engine via a connector . The rule engine evaluates the extracted information using a set of the heuristic patterns and evaluates the extracted information with respect to previous API commands that are retrieved from an API call history database . The API call history database stores at least one previously executed API command. The previously executed API command may be a command such as an open file API command that the rule engine can evaluate to identify execution of the installer application .

The rule engine then makes a determination as to whether to intercept and modify one or more of the received file system commands . The rule engine evaluates a set of rules with respect to the at least one previously executed API command and the rule engine provides an output that determines whether the file system command interceptor should selectively intercept and modify one or more of the file system commands . The set of rules may be used to determine whether to selectively intercept and modify parameters of the API commands before the API commands are executed by the operating system with respect to the destination file system.

The file system command interceptor also referred to as the API hook selectively intercepts one or more of the file system commands as determined by the rule engine for an attempted application installation and modifies parameters or other properties of the selected file system commands. The file system commands may be selectively modified to redirect a destination file system from a default or initial file system e.g. first file system in to a redirected file system e.g. the second file system that is located on the portable storage device in .

Examples of file system commands include low level application programming interface API file system commands that may be called by the installer application . Such API file system commands include file create open and copy commands. Upon interception and modification of the file system commands the file system command interceptor generates a modified file system command that is sent to the file system command execution logic of the operating system as shown at . The file system command execution logic then executes the modified file system command instead of the original file system command . In this manner the file system commands are automatically intercepted and modified such that the installer application receives access to a file system for the portable storage device but does not receive access to install files on a default file system such as a fixed and non removable storage device.

Examples of particular file system commands and illustrative modifications that can be made to those commands include a set of available file system restrictive actions such as hiding a drive identifier associated with the first file system removing a directory of the first file system from a list of user available directories and preventing file access to the first file system during a copy operation.

For example the file system command interceptor can hide a drive identifier associated with the first file system remove a directory of the first file system from a list of available directories or prevent write access to the first file system during a copy operation. The drive identifier may be hidden by modifying a return value and parameters of the at least one file system command e.g. a set drive type of command when a monitored process identifies a particular destination directory or a translation of the particular destination directory. For example the C drive of the main disc drive of a host computer device may be hidden and only a drive identifier of the portable storage device would be shown to a user or to the installer application . As a further example the directory may be removed from a list of available directories by modifying an operating system find data command parameter of a find file command. The find file command may be an API command or a different type of command depending on the operating system environment. The find file command may be a find first file command or a find next file command. In another example access to the first file system is prevented during a file system copy operation by intercepting a copy file system command and by changing a target directory of the copy file command such that the target directory is located within the second file system at the portable storage device instead of within the first file system at a default storage device.

After execution of a file system command or the modified file system command the file system command interceptor receives a result from the operating system . The file system command interceptor may selectively intercept and modify the result from the executed file system command to generate a file system return value . The file system return value may provide a result that has been modified. For example when the user interface requests a list of available directories or available file systems the file system command interceptor can intercept and modify the result from this request such that file system return values and drive identifiers returned to the user interface do not include information for a first file system e.g. the fixed storage device information but instead provide the portable storage device file system information as shown at .

Referring to a particular embodiment of a computer implemented method of processing file system commands related to installation of an application is illustrated. The method includes receiving file system commands issued by an installer application at and accessing a set of rules to evaluate the file system commands at . The method includes selectively intercepting and modifying at least one file system command such as by modifying a parameter of a file system command before the at least one file system command is executed with respect to a destination file system at . The method is performed such that access to a first file system located at a fixed storage memory device is restricted and access is directed to a second file system located on a portable storage device instead of to the first file system.

In a particular embodiment the method restricts access to the first file system by performing one or more redirection actions. For example the method can hide a drive identifier associated with the first file system remove a directory of the first file system from a list of available directories or prevent write access to the first file system during a copy operation as shown at . The drive identifier may be hidden by modifying a return value and parameters of the at least one file system command upon identifying a particular destination directory or a translation of the particular destination directory. For example the C drive of the main disc drive of a host computer may be hidden and only a drive identifier of the portable storage device would be shown to a user or to the installer application. As a further example the directory may be removed from a list of available directories by modifying an operating system find file command. The find file command may be an API command or a different type of command depending on the operating system environment. In another example access to the first file system is prevented during a file system copy operation by intercepting a copy file system command and by changing a target directory of the copy file command such that the target directory is located within the second file system at the portable storage device instead of within the first file system at a default device.

The method further includes executing a modified file system command to access the file system at the portable storage device at . For example the application to be installed or an image of multiple files to be loaded to the portable storage device may be copied from the host device to the portable storage device to complete the application installation process.

After performing the file system command an evaluation is conducted to determine whether application installation has completed at . If the application installation process is completed the method proceeds to remove restrictions on available file system operations and to discontinue file system command interception as shown at . If the application installation process is not completed then the method proceeds back at to process further file system commands of the installer application. In a particular embodiment the file system command interceptor is dependent on the application installer such that the file system command interceptor does not intercept API calls made by other applications and automatically terminates when the installer exits.

Referring to a particular embodiment of a computer implemented method of installing an application on a portable storage device is shown. The method includes receiving a request to install an application on a portable storage device coupled to a computer at and executing an installer program at the host computer device at . The installer program issues one or more file system commands to write one or more executable files for the application to a first file system at a first storage device. For example the installer application may attempt to issue file system commands to install at a default file system at a non removable disc drive device of a host computer. The method includes intercepting the file system command or multiple commands and modifying the file system command to write the one or more executable files for the application to a second file system at the portable storage device as shown at .

The method may further write information associated with the application to a data storage area at the portable storage device as shown at . Also the method may optionally identify a presence of the application stored at the portable storage device to an auto run application stored at the portable storage device as shown at . The auto run application may be used to automatically bring up a user interface when the portable storage device is connected to an interface of a host device. The auto run application may identify each of the applications that are stored on the portable storage device for ease of selection by the user. In a particular embodiment the installed application is a portable application suitable for execution on other devices e.g. a second or third computer when the other device is coupled to the portable storage device. In a particular embodiment portable applications and the usage of portable applications are implemented following the protocol and specifications of one or more industry standards for portable applications.

Referring to a particular embodiment of a portable storage device is shown. The portable storage device includes an interface such as a universal serial bus USB interface a storage area and a data area . The storage area may include installed portable applications pre loaded applications an auto run application and an application installation redirection component . In a particular embodiment the application installation redirection component includes some or all of the file system command interceptor instructions for execution by the host device as depicted in .

During operation upon connection of the portable storage device to a host device such as the representative host device of the host device may retrieve the application installation redirection component . For example upon connection the auto run application may automatically execute and may be programmed to load the application installation redirection component from the portable storage device to the host device for storage within a memory of the host device for subsequent execution in connection with the application installer program. Upon execution of the application installer program the host device would also execute the application installation redirection program to intercept the appropriate file system commands such as file system API commands so that the application installer program has access to the portable storage device for application installation. The application installation redirection component includes instructions executable by a host device during execution of an application installer program to selectively intercept and modify parameters of at least one file system command before the at least one file system command is executed by an operating system with respect to a first file system associated with a storage device The instructions are executed such that access to the first file system is selectively restricted and such that access is directed to a second file system associated with the portable data storage device .

Although depicts loading the application installation redirection program from the portable storage device in other embodiments file system command interceptor instructions e.g. of or of may be loaded onto the host device through alternative methods such as by user direction download or installation from another media device.

The illustrations of the embodiments described herein are intended to provide a general understanding of the structure of the various embodiments. The illustrations are not intended to serve as a complete description of all of the elements and features of apparatus and systems that utilize the structures or methods described herein. Many other embodiments may be apparent to those of skill in the art upon reviewing the disclosure. Other embodiments may be utilized and derived from the disclosure such that structural and logical substitutions and changes may be made without departing from the scope of the disclosure. Although specific embodiments have been illustrated and described herein it should be appreciated that any subsequent arrangement designed to achieve the same or similar purpose may be substituted for the specific embodiments shown. This disclosure is intended to cover any and all subsequent adaptations or variations of various embodiments. Combinations of the above embodiments and other embodiments not specifically described herein will be apparent to those of skill in the art upon reviewing the description. Accordingly the disclosure and the figures are to be regarded as illustrative rather than restrictive.

The Abstract of the Disclosure is submitted with the understanding that it will not be used to interpret or limit the scope or meaning of the claims. In addition in the foregoing Detailed Description various features may be grouped together or described in a single embodiment for the purpose of streamlining the disclosure. This disclosure is not to be interpreted as reflecting an intention that the claimed embodiments require more features than are expressly recited in each claim. Rather as the following claims reflect inventive subject matter may be directed to less than all of the features of any of the disclosed embodiments. Thus the following claims are incorporated into the Detailed Description with each claim standing on its own as defining separately claimed subject matter.

The above disclosed subject matter is to be considered illustrative and not restrictive and the appended claims are intended to cover all such modifications enhancements and other embodiments which fall within the true spirit and scope of the present disclosure. Thus to the maximum extent allowed by law the scope of the present invention is to be determined by the broadest permissible interpretation of the following claims and their equivalents and shall not be restricted or limited by the foregoing detailed description.

