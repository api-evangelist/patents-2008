---

title: Preventing secure data from leaving the network perimeter
abstract: Secure data is prevented from leaving the perimeter of a network such as an enterprise network or corporate network (“corpnet”) by an arrangement in which a hash of the secure data is periodically computed, and the hashes are pushed out to an edge device on the network such as a firewall where they are stored for later access. The edge device is configured so that it has access to all traffic that flows between the enterprise network and an external network, such as the Internet, that is located outside the enterprise network perimeter. Whenever a user attempts to send data to the external network, a process running on the edge device computes a hash for the outbound data and compares it against the stored hashes associated with the secure data. If a match is made between the hash for the outbound data and a stored hash for secure data, then the edge device blocks the outbound data from leaving the network perimeter.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08316442&OS=08316442&RS=08316442
owner: Microsoft Corporation
number: 08316442
owner_city: Redmond
owner_country: US
publication_date: 20080115
---
In an enterprise computing environment for example an office of a business a number of personal computers workstations servers and the like along with other devices such as mass storage subsystems internal network interfaces and external network interfaces are typically interconnected to provide an integrated environment in which information may be generated sent to and accessed from external sources and shared among various users. Commonly users perform a variety of operations including order receipt manufacturing shipping billing inventory control document preparation and management e mail web browsing and other operations in which creation access and sharing of data is beneficial.

Currently security is typically provided for an enterprise using a variety of different security products and in particular including hardware and software solutions that operate at the perimeter or edge of the enterprise network. These solutions commonly include firewalls proxy servers gateways and the like which monitor traffic moving between the enterprise network and external networks such as the Internet.

Current edge devices typically scan and inspect incoming traffic for malware i.e. malicious software such as viruses worms trojans rootkits etc. to thereby function to provide a zone of security around the enterprise. They can prevent users for example from downloading malware from the Internet or receiving malware in incoming e mail. Sensitive or confidential data inside the enterprise referred to collectively as secure data can be protected by employing digital rights management DRM methodologies like digital signatures and watermarks that enable edge devices to block the data from being inappropriately sent outside the network perimeter.

While performing satisfactorily in many applications these current security methodologies do not typically enable legacy secure data to be protected. In addition such methodologies can be readily circumvented by a malicious user inside the enterprise who has the correct permissions to send secure data outside the network perimeter.

This Background is provided to introduce a brief context for the Summary and Detailed Description that follow. This Background is not intended to be an aid in determining the scope of the claimed subject matter nor be viewed as limiting the claimed subject matter to implementations that solve any or all of the disadvantages or problems presented above.

Secure data is prevented from leaving the perimeter of a network such as an enterprise network or corporate network corpnet by an arrangement in which a hash of the secure data is periodically computed and the hashes are pushed out to an edge device on the network such as a firewall where they are stored for later access. The edge device is configured so that it has access to all traffic that flows between the enterprise network and an external network such as the Internet that is located outside the enterprise network perimeter. Whenever a user attempts to send data to the external network a process running on the edge device computes a hash for the outbound data and compares it against the stored hashes associated with the secure data. If a match is made between the hash for the outbound data and a stored hash for secure data then the edge device blocks the outbound data from leaving the network perimeter.

In various illustrative examples an administrator management function is provided by which a network administrator may designate which data in the enterprise is secure and thus subject to hashing and being blocked from leaving the network perimeter. The administrator may optionally configure the secure data management for example by configuring the hashing algorithm applied and other secure data management parameters. The administrator can also receive notifications of attempts to send secure data outside the network and the identities of the host machines or users making such attempts.

A client side agent running on host machines e.g. desktop and laptop computers inside the perimeter of an enterprise is configured to track changes made locally to any secure data downloaded from the enterprise network. The client side process computes a hash for the secure data if the data is modified by a user on the local host and pushes the hash out to the edge device. The client side agent enables the stored hashes to remain current and to accurately represent all the secure data in the enterprise even as the secure data changes through user interaction.

This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter nor is it intended to be used as an aid in determining the scope of the claimed subject matter.

Like reference numerals indicate like elements in the drawings. Elements in the drawings are not drawn to scale unless otherwise indicated.

In this example the edge device is arranged as a Microsoft Internet Security and Acceleration ISA server that is modified to provide the additional functionality that is described below in the text accompanying . ISA servers integrate network edge security features with enhanced network performance through features such as caching HTTP HyperText Transfer Protocol compression and quality of service QoS policy enforcement.

As shown a number of servers are operative in the environment and coupled to the enterprise network . The servers here are representative of any of a variety of resources that are commonly utilized in an enterprise including for example application and database servers file servers line of business LOB servers supporting e mail for example content and collaborative management servers and the like.

An administrator console admin console is also supported in the environment . The admin console enables configuration and management of the enterprise network such as creating and maintaining user privileges and permissions monitoring network operations and resources generating reports setting policies for security and auditing and the like. An existing commercially available example of an admin console is Microsoft Operation Manager MOM which could be modified to include the additional functionality that is described below.

The activity flow begins at step in where the administrator designates or tags certain data in the environment as secure according to some criteria that will depend on the circumstances of a particular implementation. In this example the designation is provided by the administrator who is assumed to have the necessary authorization to perform such tasks. However in other implementations it may be desirable to enable other users with the permissions necessary to designate data as secure in some cases.

At step a hashing process for computing a hash of the secure data i.e. the data designated as secure by the administrator is periodically run. The hashing process can be implemented using methods provided for example by a library class or API application programming interface that is incorporated into application or operating system software that runs on one or more of the servers .

Alternatively the hashing process at step can be implemented as a service that is provided by an application operating system functionality or component that runs externally to the servers for example on a standalone platform that is operated on the enterprise s premises or is provided as a software service from an external network such as the Internet.

The hashing process at step can use one of a variety of known hashing algorithms depending on the requirements of a given implementation. These hashing algorithms include for example LM LanManager MD4 MD5 CRC16 CRC32 cyclic redundancy check SHA 0 1 2 etc. Secure Hash Algorithm Tiger RIPEMD and the like. While the hashing algorithms vary by length of the hash produced and other factors they essentially all operate to take the data that is input into the algorithm and reduce it to a shorter and unique identifier called a hash. If the input data to the hashing algorithm changes in even a slight way the resulting hash can be drastically different. As a result the hash works to identify the source data as kind of a digital signature in a compact form.

In some applications the particular hashing algorithm utilized may be selected by the administrator using the admin console . This feature enables the administrator to specify parameters to fine tune or optimize processes according to the available resources or select a particular balance between the strength of the hash and the processing resources needed to compute it. Other processing parameters that may be arranged to be selectable by the administrator include when and how the hashing algorithm is applied to the data in the environment e.g. on demand in batches when resources are available etc. .

The admin console may be further configured to monitor and generate reports and audit logs pertaining to activity involving secure data in the environment . For example the admin console may track the number and identity of secure data who accesses the secure data and when they access it. Notifications as to actions taken by the hosts and edge device may also be received at the admin console as described in more detail below.

At step in the computed hashes are pushed out to the edge device over the enterprise network . In this example they are stored by the edge device and accessed when the edge device scans outbound traffic from the enterprise network as described below. In alternative configurations the hashes can be pushed to a store i.e. repository that is separate from the edge device but still operatively coupled to it. In many implementations the hashes will be stored on a persistent basis using non volatile memory such as memory provided by a hard disk drive.

As the data that exists in the enterprise network is generally dynamic where data is continuously created deleted and modified hashes for the secure data are typically frequently generated and pushed out to the edge device . This enables the edge device to stay updated with the latest information pertaining to secure data in the enterprise.

At step in this use scenario the user downloads data to the user s local host machine . At step the user attempts to send the data outside of the perimeter of the enterprise network for example by attaching a file to an e mail that is addressed to an external domain on the Internet i.e. external network or by uploading data via FTP File Transfer Protocol to an external FTP site or server.

As the edge device functions as a gateway to the external network it is arranged here to scan all outbound traffic from the enterprise network to prevent secure data from leaving the network perimeter. An illustrative activity flow for implementing this functionality is shown in . At step a hashing process running on the edge device computes a hash for each piece of outbound data that the user working at a host is attempting to send outside. This hashing process is similar to the process shown in and described in the accompanying text. That is the process may be implemented using methods provided by a library class or API or is otherwise incorporated into a functionality component or service provided by the operating system or application running on the edge device .

At step the computed hash for the outbound data from the host is compared against the stored hashes associated with secure data that were computed as shown in and described in the accompanying text. At step if the computed hash is found to match one of the stored hashes then the outbound data from the host comprises secure data i.e. data previously designated secure by the administrator and will be blocked from leaving the perimeter of the enterprise network . If no matching hash is found among the stored hashes then the outbound data comprises non secure data and will be allowed to leave the enterprise network perimeter.

When a match is found a notification can be sent to the admin console to inform the network administrator that there was an attempt to send secure data outside the network and that the attempt was blocked. The notification may also be configured to include the identity of a host machine or user making the attempt. This can be helpful information to the administrator in managing the enterprise network and users. For example the incident could indicate that the user is unaware of enterprise policies regarding the handling of sensitive and proprietary data and needs more training. The user could have simply made a mistake in attempting to send out the secure data.

Alternatively it may be possible that the user is actually a malicious user or that a legitimate user s identity has been assumed by a hacker and the malicious user or hacker is intentionally seeking to move data outside of the network in violation of policy. The incident could also indicate the possibility that a machine or other IT asset in the enterprise has been compromised which is manifested by the attempt to send out the secure data.

At step in the notification that the edge device blocked the outbound secure data is received by the admin console . The notification can be logged for auditing purposes for example or be raised as an alert to the network administrator. The admin console may also be configured to provide the administrator with the ability to manually override the blocking in some implementations and allow the outbound data to leave the network perimeter despite the fact that its hash matched a stored hash that is associated with secure data. The administrator may also choose to lock out the host or user that originated the blocked outbound secure data from accessing other secure data on the servers .

The present arrangement for preventing secure data from leaving a network perimeter may also be applied to data that gets modified by a user in the enterprise. Turning now to an illustrative use scenario and activity flow is shown for a client side agent that operates the host computers in which a hash is computed for secure data that is modified and pushed out to the edge device .

As indicated at the use scenario entails a user downloading secure data to the user s local host machine and then modifying the data. For example the data may comprise a word processing document that the user modifies by editing the document i.e. modifying text adding new text deleting existing text etc. . In this example because the modified document originated from secure data it is assumed that it will maintain a secure designation. However a hash computed for the modified data will not match a hash computed for the original secure data.

To effectively deal with this use scenario as indicated at a client side agent running on the host is configured to track the downloading of secure data as well as the occurrence of any subsequent modification to the secure data by the user of the host. The client side agent computes a hash for the modified data and pushes it to the edge device where it will be stored for future use. This enables the edge device to stay updated with the latest information pertaining to secure data in the enterprise even as it is modified by users. Optionally the client side agent may generate and send a notification to the admin console whenever a user makes a modification to secure data and a new hash is computed.

The hashing process used by the client side agent is performed in a similar manner to the processes shown in and described in the accompanying text. It is also emphasized that all three hashing processes i.e. those implemented for example at the servers hosts and edge device must use the same hashing algorithm. Thus while the admin console may be configured to enable the administrator to select a particular hashing algorithm as noted above the selected algorithm will need to be used with all the hashing processes running in the enterprise environment.

Should a user subsequently attempt to send the modified data outside the enterprise network then the edge device can compute a hash for such outbound data and then compare it against the stored hashes as shown in and described in the accompanying text. In this case as the hash computed for the outbound data will match a hash previously computed by the client agent the edge device will block the outbound data from leaving the network perimeter because it will recognize that the outbound data is secure.

The client agent is typically implemented as a software component that runs on each host and integrated for example as part of a security product or application or as functionality provided by the operating system. Alternatively the client agent may run on a separate platform and provide monitoring of one or more of the hosts and computation of the hash for modified secure data on a remote basis.

Although the subject matter has been described in language specific to structural features and or methodological acts it is to be understood that the subject matter defined in the appended claims is not necessarily limited to the specific features or acts described above. Rather the specific features and acts described above are disclosed as example forms of implementing the claims.

