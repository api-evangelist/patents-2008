---

title: Database snapshot management
abstract: Technologies are described herein for managing database snapshots. One user interface is provided for managing the automated creation and deletion of database snapshots. Parameters are received through the user interface that define how the database snapshots should be created and deleted. Once the parameters are defined, a timer job is executed that causes a DBMS to create and delete the database snapshots according to the specified parameters. A user interface is also provided for manually managing the creation, deletion, and restoration of database snapshots. A request may be received through this user interface to recover data from a database snapshot. In response to such a request, another user interface is provided for specifying the data that should be recovered. Once the data to be recovered has been specified, the desired data is recovered from the database snapshot.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08121981&OS=08121981&RS=08121981
owner: Microsoft Corporation
number: 08121981
owner_city: Redmond
owner_country: US
publication_date: 20080619
---
Large amounts of data are stored in databases. In many cases this data is extremely valuable and would be difficult or even impossible to replace if lost. As a result many database administrators regularly back up their databases to a second storage medium or even to another geographic location. Database backups may include regular full backups and daily incremental backups. This type of database backup process is typically an integral part of the information technology workflow of an organization.

In many cases however it is necessary to have a more frequent record of a database than the daily incremental backups provide. For a more granular record of a database many database administrators utilize database snapshots. Database snapshots are a feature of some database management systems DBMS and allow a user to specify a point in time at which to preserve the contents of the database. Because database snapshots are quick to create and require relatively little storage space they are ideal for creating the fine grained record of a database desired by database administrators. Database snapshots should not however be used to replace the regular full and incremental backups of a database because the original database must be intact for a database snapshot to be restored.

Despite the usefulness of database snapshots the complexity in creating deleting and restoring snapshots generally limits their use only to database administrators having sophisticated knowledge of the operation of the underlying DBMS. As a result computer users without this sophisticated knowledge cannot create delete or restore snapshots of the databases that they work with. Moreover no DBMS currently provides functionality for restoring a subset of the data within a database snapshot. As a result it is currently necessary to restore an entire database snapshot even when it is only desirable to restore a small portion of the data contained within a database snapshot.

Technologies are described herein for database snapshot management. In particular through the implementation and use of the technologies provided herein database snapshots can be managed without sophisticated knowledge regarding the operation of a DBMS. Moreover a subset of the data contained within a database snapshot can be restored to a database.

According to one aspect presented herein a user interface is provided for managing the automated creation and deletion of database snapshots by a DBMS. Parameters are received through the user interface that define the manner in which the DBMS should create and delete the database snapshots. Once the parameters have been defined a timer job is executed that instructs the DBMS to create and delete the database snapshots according to the specified parameters. The timer job is a process that executes according to a pre defined schedule.

According to aspects the user interface for managing the automated creation and deletion of database snapshots may receive parameters defining an application and a corresponding content database for which database snapshots should be created and deleted. The received parameters may also define the maximum number of database snapshots that should be retained at any point in time the frequency at which the database snapshots should be created and the maximum period of time the database snapshots should be maintained prior to deletion. Other parameters may also be received such as data defining a location for storing the database snapshots.

According to other aspects a user interface may also be provided for manually managing the creation deletion and restoration of database snapshots. Through this user interface requests may be received to create a database snapshot delete a database snapshot or restore a database snapshot to the database. Additionally in one embodiment a request may be received through this user interface to recover data from a database snapshot. In response to receiving such a request another user interface is provided for specifying the data that should be recovered. Once the data to be recovered has been specified the desired data is recovered from the database snapshot. In this manner a subset of the data contained within a database snapshot can be retrieved. In embodiments the functionality accessible through the user interface may also be accessed through a command line or a programmable object model.

It should be appreciated that the above described subject matter may also be implemented as a computer controlled apparatus a computer process a computing system or as an article of manufacture such as a computer readable medium. These and various other features will be apparent from a reading of the following Detailed Description and a review of the associated drawings.

This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter nor is it intended that this Summary be used to limit the scope of the claimed subject matter. Furthermore the claimed subject matter is not limited to implementations that solve any or all disadvantages noted in any part of this disclosure.

The following detailed description is directed to technologies for database snapshot management. While the subject matter described herein is presented in the general context of program modules that execute in conjunction with the execution of an operating system and application programs on a computer system those skilled in the art will recognize that other implementations may be performed in combination with other types of program modules. Generally program modules include routines programs components data structures and other types of structures that perform particular tasks or implement particular abstract data types. Moreover those skilled in the art will appreciate that the subject matter described herein may be practiced with other computer system configurations including hand held devices multiprocessor systems microprocessor based or programmable consumer electronics minicomputers mainframe computers and the like.

In the following detailed description references are made to the accompanying drawings that form a part hereof and which are shown by way of illustration specific embodiments or examples. Referring now to the drawings in which like numerals represent like elements through the several figures aspects of a computing system and methodology for database snapshot management will be described.

Turning now to details will be provided regarding an illustrative operating environment and several software components provided by the embodiments presented herein. In particular shows aspects of a system for database snapshot management. The system includes a client computer a collaboration and document management platform the platform and a DBMS all of which are interconnected by one or more networks such as the network and the network . It should be appreciated that the platform and the DBMS may be implemented utilizing many different computing systems and that more or fewer network interconnections may be utilized than illustrated in .

According to one implementation the platform comprises a web based collaboration and document management platform. The platform can be utilized to host World Wide Web web sites that can be utilized to access shared workspaces and documents as well as specialized applications from within a web browser . Through this functionality any number of applications A C can be made available to a user of the web browser by the platform . It should be appreciated that the concepts and technologies presented herein may be utilized with an web site that utilizes a database backend.

The platform and each of the applications A C may store content and other data within a database. This functionality is provided by the DBMS . In particular the applications A C may store data within respective content databases A C. Other types of databases may also be used by the platform for storing configuration information and other types of data.

According to one implementation the platform comprises the WINDOWS SHAREPOINT SERVICES collaboration and document management platform from MICROSOFT CORPORATION of Redmond Wash. According to other implementations the platform comprises the MICROSOFT OFFICE SHAREPOINT SERVER collaboration and document management platform also from MICROSOFT CORPORATION. It should be appreciated however that the embodiments presented herein may be utilized with any type of application that stores data within a database.

According to embodiments the DBMS comprises one or more software programs that control the organization storage management and retrieval of data within a database such as the content databases A C. The DBMS utilized in embodiments herein also provides functionality for creating database snapshots A C of the respective databases A C. As known to those skilled in the art database snapshots are a feature of some DBMSs that allow a user to specify a point in time at which to preserve the contents of a database. Taking a snapshot of a database does not however actually make a copy of the data. Rather a new database is created that is prepared to receive contents from the live database as the contents are replaced changed or overwritten. When a database snapshot is restored onto a database the previous values are reapplied to the live database thereby bringing the database back to the state it was in at the point in time that the database snapshot was taken.

According to one implementation the DBMS comprises the Enterprise And Developer Edition of the SQL 2005 DBMS from MICROSOFT CORPORATION. It should be appreciated however that the DBMS may comprise any type of DBMS that provides functionality for creating snapshots of a database from any vender.

As will be described in greater detail below the platform is configured in one implementation to provide a user interface UI for managing the creation deletion and restoration of the database snapshots A C by the DBMS . In particular the user interface provides functionality for allowing a user to manage the automated creation and deletion of the database snapshots A C by the DBMS .

Through the user interface a user can provide one or more parameters that define the manner in which the database snapshots A C should be created by the DBMS . For instance a user may specify a parameter defining a maximum number of database snapshots that should be maintained by the DBMS . The user may also supply a parameter defining a frequency at which the database snapshots should be created. Another parameter may be defined that identifies a maximum period of time that the database snapshots A C should be maintained by the DBMS prior to deletion. The user may also be permitted to specify details regarding the applications A C and content databases A C that the database snapshots A C should be created and deleted for. Other parameters may allow the user to specify a location for storing the database snapshots A C and other parameters utilized by the DBMS in the creation and deletion of the database snapshots A C.

As will also be described in greater detail below the platform utilizes a database snapshot timer job to implement the automated creation and deletion of the database snapshots A C in the manner specified by the user. The timer job is a process that executes automatically on the platform according to a predefined schedule. For instance the timer job may be configured to wake up and execute once every hour. When executed the timer job determines whether any database snapshots should be created or deleted. This determination is made based upon the parameters specified through the user interface . If a snapshot should be created the timer job transmits an instruction to the DBMS requesting that the snapshot be created in the manner specified by the user. An illustrative command for creating a database snapshot is illustrated in Table 1.

According to other aspects presented herein the user interface also provides functionality for allowing a user to manually manage the creation deletion and restoration of the database snapshots A C. For instance through this aspect of the user interface a user may manually request that a database snapshot be created for one of the applications A C or content databases A C. In response to receiving such a request the platform transmits an instruction to the DBMS to create the new database snapshot in the manner requested by the user. An instruction such as that illustrated above in Table 1 may be utilized to cause the DBMS to create the requested database snapshot .

Through the user interface a user may also manually make a request to delete one of the database snapshots A C. In response to such a request the platform transmits an instruction to the DBMS to delete the identified snapshot . An illustrative instruction such as that shown above in Table 2 may be utilized in this regard. Through this aspect of the user interface a user may also manually request that one of the database snapshots A C be restored onto an appropriate content database A C. In response to receiving such a request the platform transmits an instruction to the DBMS to restore the appropriate database snapshot onto the proper content database . An illustrative instruction for restoring one of the database snapshots A C is illustrated in Table 3.

According to one implementation the UI also provides functionality for allowing the user to request that data be recovered from one of the database snapshots A C. Through this user interface a user may manually specify a subset of the data contained within one of the database snapshots A C that should be recovered. In response to such a request the platform retrieves the requested data from the identified database snapshot A C and stores the data in a specified location. The recovered data may then be imported into one of the content databases A C or utilized in another manner. Additional details regarding the aspects of the user interface for allowing a user to manually create delete restore and recover the database snapshots A C will be provided below with respect to .

Referring now to additional details regarding the functionality provided by the database snapshot management user interface for allowing a user to manage the automated creation and deletion of the database snapshots A C will be described. In particular a user interface is provided in one implementation through which a user can specify one or more parameters regarding the automated creation and deletion of the database snapshots A C. As discussed above the user interface may be utilized to specify the parameters utilized by the timer job to cause the DBMS to create and delete the database snapshots A C.

According to one implementation the user interface includes a user interface control that allows a user to specify which of the applications A C that database snapshot should be created for. A user interface control is also provided for allowing a user to indicate that the database snapshots for the selected application should be created by the timer job in an automated fashion. A user interface control is also provided for allowing a user to specify a parameter indicating how many database snapshots should be maintained at any given time. If the number of database snapshots A C exceeds this number the timer job will cause the older snapshots to be deleted until the proper number of database snapshots are present.

According to other aspects the user interface includes a control that allows a user to specify a parameter defining the frequency at which the database snapshots should be created. This parameter may be specified in hours or other units of time. Through the control a user may also specify a parameter indicating a storage location for storing the database snapshots . For instance a path on a file server or other type of storage system may be specified utilizing the control . A parameter may also be specified utilizing the control that defines a maximum period of time that the database snapshots should be maintained prior to deletion. This parameter may also be specified in hours days or other units of time.

When a user has completed defining the parameters indicated above through the user interface the user may select the control to save the parameters. The user may also select the control to cancel the specified parameters. If the user accepts the parameters through the selection of the control the parameters are saved by the platform . Additionally the timer job is configured to periodically execute and cause the DBMS to either create or delete the database snapshots A C according to the parameters specified by the user through the user interface . Additional details regarding the operation of the timer job are provided below with respect to .

Turning now to a routine will be described that illustrates aspects of the operation of the database snapshot timer job . It should be appreciated that the logical operations described herein are implemented 1 as a sequence of computer implemented acts or program modules running on a computing system and or 2 as interconnected machine logic circuits or circuit modules within the computing system. The implementation is a matter of choice dependent on the performance and other requirements of the computing system. Accordingly the logical operations described herein are referred to variously as states operations structural devices acts or modules. These operations structural devices acts and modules may be implemented in software in firmware in special purpose digital logic and any combination thereof. It should also be appreciated that more or fewer operations may be performed than shown in the figures and described herein. These operations may also be performed in a different order than those described herein.

The routine begins at operation where a temporary variable is initialized for maintaining data indicating which of the databases A C have been considered by the timer job . The variable is initialized to the first of the content databases A C. Once the variable has been initialized the routine proceeds to operation where the timer job determines whether the current database as indicated by the temporary variable has managed snapshots enabled. If not the routine proceeds from operation to operation where a determination is made as to whether additional databases A C remain to be considered. If not the routine proceeds from operation to operation where it ends. If additional databases remain to be considered however the routine proceeds from operation to operation where the temporary variable is incremented to identify the next database. The routine then proceeds from operation to operation described above.

If at operation the timer job determines that snapshots are enabled for the current database the routine proceeds to operation . At operation the timer job determines whether the DBMS supports snapshots for the current database. If not the routine proceeds from operation to operation described above. If snapshots are supported however the routine proceeds from operation to operation .

At operation the timer job determines whether the last snapshot taken on the current database is too old. In particular the timer job determines whether the difference between the newest snapshot taken on the current database and the current time is greater than the frequency specified through the user interface control . If so the routine proceeds to operation where a new snapshot is taken for the current database. As discussed above the timer job transmits an instruction to the DBMS that causes the DBMS to create the snapshot. From operation the routine proceeds to operation .

If at operation the timer job determines that the last snapshot is not too old the routine proceeds from operation to operation . At operation the timer job determines whether snapshots exist for the current database that are older than the desired oldest snapshot as specified through the user interface control described above. If so the routine proceeds from operation to operation where the oldest snapshots for the current database are deleted until the oldest snapshot is younger than the oldest desired snapshot. As discussed above the timer job transmits instructions to the DBMS that will cause the DBMS to delete the desired snapshots. From operation the routine proceeds to operation .

If at operation the timer job determines that snapshots do not exist for the database that are older than the desired oldest snapshot the routine proceeds from operation to operation . At operation the timer job determines whether the number snapshots in existence for the current database is greater than the maximum number of snapshots to be kept as specified through the user interface control described above. If not the routine proceeds from operation to operation described above. If so however the routine proceeds from operation to operation .

At operation the oldest snapshots are deleted until the total number of snapshots in existence for the current database is equal to the desired number of snapshots as specified through the user interface control . In order to delete snapshots the timer job transmits the appropriate instructions to the DBMS in the manner described above. From operation the routine returns to operation described above.

Referring now to additional details will be provided regarding the functionality provided by the user interface for allowing a user to manually manage the creation deletion and restoration of the database snapshots A C. In particular shows an illustrative user interface provided by the platform for allowing a user to manually manage the database snapshots A C.

In one implementation the user interface includes a control through which a user can select the application A C for which the database snapshots should be managed. In response to a selection of one of the applications A C using the control the columns A C of the user interface are populated. The column A shows the name of the content database A C for which a snapshot has been taken. The column B shows the name of each snapshot and the column C shows the time and date at which the respective database snapshot was taken. In this manner the user interface provides a concise description of all of the database snapshots A C that have been taken for one of the applications A C. It should be appreciated that the data illustrated in columns A C reflect all of the snapshots maintained by the DBMS for an application regardless of whether the snapshots were taken in response to instructions received from the timer job or in response to manual instructions provided by a user through the user interface .

According to implementations the user interface also includes a number of user interface controls through which a user can request to manually create database snapshots delete the database snapshots or restore the database snapshots to the appropriate content database . For instance in the illustrative screen display shown in a user interface control may be selected to cause the DBMS to create a snapshot of all of the databases for the selected application . A user interface control may be selected in a similar manner to cause the DBMS to delete all of the snapshots A C that have been created for a particular application . In response to such requests the platform transmits an appropriate instruction to the DBMS to create or delete the desired snapshots . According to one implementation a control is also provided for refreshing the display shown in the user interface . This may be helpful for instance to display data regarding any snapshots created or deleted by the timer job since the previous display of the user interface .

As shown in the user interface also includes functionality for creating a single new snapshot for a particular content database and for deleting all of the snapshots taken for a particular content database . In particular in one implementation a database name may be selected to display a drop down menu . The drop down menu includes items for creating a new snapshot for the selected content database and for deleting all of the database snapshots for the selected content database.

According to one implementation the user interface also includes functionality for exploring or recovering data from a single database snapshot deleting a single database snapshot or restoring a single database snapshot to the appropriate content database . In particular a snapshot name shown in the user interface may be selected using an appropriate user input device. In response thereto the menu is displayed.

The menu includes items for exploring or recovering data deleting the snapshot or restoring the selected snapshot to the appropriate content database . In response to receiving a selection of an item for deleting the selected snapshot the platform transmits a request to the DBMS to delete the appropriate snapshot. Similarly in response to the selection of an item within the menu for restoring a database snapshot the platform transmits a request to the DBMS to restore the selected snapshot onto the corresponding content database .

In response to receiving a selection of an item in the menu for recovering data from the selected database snapshot the user interface shown in is displayed. The user interface provides functionality for allowing a user to specify the data that should be recovered from one of the selected database snapshots . Through the user interface a user can specify parameters that define the data that should be retrieved. For instance utilizing the user interface controls and a user can specify a site collection site and lists that should be retrieved from the selected database snapshot .

Utilizing the user interface controls and a user can also specify that the identified data should be exported from the selected database snapshot and stored in a specified location. The controls and may be utilized to specify whether the full security of the selected data should be included and whether all versions or some subset of version should be included in the exported data. If the user selects the user interface control the specified data is retrieved from the selected database snapshot and stored in the specified location. The restored data may then be imported back into an appropriate content database or utilized in another fashion. A control is also provided in the user interface for cancelling the data recovery operation. In embodiments the functionality accessible through the user interfaces described herein may also be accessed through a command line or a programmable object model.

Turning now to additional details will be provided regarding the processes presented herein for managing the database snapshots A C. In particular shows a routine illustrating one overall process for managing the manual and automated creation of the database snapshots A C in one embodiment provided herein.

The routine begins at operation where a determination is made as to whether a user has requested automatic snapshot management. If so the routine proceeds to operation where the user interface described above with reference to is provided for specifying the parameters defining how the database snapshots A C should be managed by the timer job . The routine then proceeds to operation where parameters are received through the user interface .

From operation the routine then proceeds to operation where the timer job is executed in order to cause the DBMS to create and delete the database snapshots A C in the manner specified through the user interface . An illustrative routine illustrating the operation of the timer job was discussed above with respect to . From operation the routine proceeds to operation where it ends.

If at operation it is determined that the user has not requested automatic snapshot management the routine proceeds to operation . At operation a determination is made as to whether the user has requested to manually manage the snapshots A C. If not the routine returns to the operation described above. If the user has requested to manually manage the database snapshots A C the routine proceeds to operation .

At operation the user interface described above is provided for manually managing the creation deletion restoration and recovery of the database snapshots A C. The routine then proceeds to operation where user input is received requesting the creation deletion restoration or recovery of data from one of the database snapshots A C. For instance the user interface controls and the menus and may be utilized to receive such input. In response to receiving this input the routine proceeds to operation where the platform provides instructions to the DBMS to perform the operation requested by the user through the user interface . Once the requested operation has been performed the routine continues from operation to operation where it ends.

The computer architecture shown in includes a central processing unit CPU a system memory including a random access memory RAM and a read only memory ROM and a system bus that couples the memory to the CPU . A basic input output system containing the basic routines that help to transfer information between elements within the computer such as during startup is stored in the ROM . The computer further includes a mass storage device for storing an operating system application programs and other program modules which are described in greater detail herein.

The mass storage device is connected to the CPU through a mass storage controller not shown connected to the bus . The mass storage device and its associated computer readable media provide non volatile storage for the computer . Although the description of computer readable media contained herein refers to a mass storage device such as a hard disk or CD ROM drive it should be appreciated by those skilled in the art that computer readable media can be any available computer storage media that can be accessed by the computer .

By way of example and not limitation computer readable media may include volatile and non volatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. For example computer readable media includes but is not limited to RAM ROM EPROM EEPROM flash memory or other solid state memory technology CD ROM digital versatile disks DVD HD DVD BLU RAY or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can be accessed by the computer .

According to various embodiments the computer may operate in a networked environment using logical connections to remote computers through a network such as the network . The computer may connect to the network through a network interface unit connected to the bus . It should be appreciated that the network interface unit may also be utilized to connect to other types of networks and remote computer systems. The computer may also include an input output controller for receiving and processing input from a number of other devices including a keyboard mouse or electronic stylus not shown in . Similarly an input output controller may provide output to a display screen a printer or other type of output device also not shown in .

As mentioned briefly above a number of program modules and data files may be stored in the mass storage device and RAM of the computer including an operating system suitable for controlling the operation of a networked desktop laptop or server computer. The mass storage device and RAM may also store one or more program modules. In particular the mass storage device and the RAM may store software components for implementing the collaboration and document management platform and the DBMS each of which was described in detail above with respect to . When used to embody the client computer the mass storage device and the RAM may also store the Web browser and other types of program modules. The mass storage device may also be utilized to store the content databases A C and the database snapshots A C.

Based on the foregoing it should be appreciated that technologies for database snapshot management are provided herein. Although the subject matter presented herein has been described in language specific to computer structural features methodological acts and computer readable media it is to be understood that the invention defined in the appended claims is not necessarily limited to the specific features acts or media described herein. Rather the specific features acts and mediums are disclosed as example forms of implementing the claims.

The subject matter described above is provided by way of illustration only and should not be construed as limiting. Various modifications and changes may be made to the subject matter described herein without following the example embodiments and applications illustrated and described and without departing from the true spirit and scope of the present invention which is set forth in the following claims.

