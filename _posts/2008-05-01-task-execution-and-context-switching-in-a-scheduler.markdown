---

title: Task execution and context switching in a scheduler
abstract: A scheduler in a process of a computer system detects a task with an associated execution context that has not been previously invoked by the scheduler. The scheduler executes the task on a processing resource without performing a context switch if the processing resource executed a previous task to completion. The scheduler stores the execution context originally associated with the task for later use.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08806180&OS=08806180&RS=08806180
owner: Microsoft Corporation
number: 08806180
owner_city: Redmond
owner_country: US
publication_date: 20080501
---
Processes executed in a computer system may include execution context schedulers that schedule tasks of processes for execution in the computer system. A scheduler may create execution contexts e.g. threads fibers or child processes in order to execute tasks on processing resources. When a task blocks or is interrupted during execution on a processing resource the state of the execution context on the processing resource is saved to allow the execution context to later be restored when the task resumes. The processing resource may then switch to a different execution context to continue executing tasks.

The process of switching execution contexts on a processing resource generally involves a significant amount of overhead. The process of saving the state of an execution context is time consuming and typically prevents other tasks from being executed on a processing resource while the state is being saved.

This summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This summary is not intended to identify key features or essential features of the claimed subject matter nor is it intended to be used to limit the scope of the claimed subject matter.

A scheduler in a process of a computer system operates to minimize context switching between execution contexts. The scheduler detects a task with an associated execution context that has not been previously invoked by the scheduler. The scheduler executes the task on a processing resource without performing a context switch if the processing resource executed a most recent previous task to completion. The scheduler stores the execution context originally associated with the task for later use.

In the following Detailed Description reference is made to the accompanying drawings which form a part hereof and in which is shown by way of illustration specific embodiments in which the invention may be practiced. In this regard directional terminology such as top bottom front back leading trailing etc. is used with reference to the orientation of the Figure s being described. Because components of embodiments can be positioned in a number of different orientations the directional terminology is used for purposes of illustration and is in no way limiting. It is to be understood that other embodiments may be utilized and structural or logical changes may be made without departing from the scope of the present invention. The following detailed description therefore is not to be taken in a limiting sense and the scope of the present invention is defined by the appended claims.

It is to be understood that the features of the various exemplary embodiments described herein may be combined with each other unless specifically noted otherwise.

Runtime environment represents a runtime mode of operation in a computer system such as a computer system shown in and described in additional detail below where the computer system is executing instructions. The computer system generates runtime environment from a runtime platform such as a runtime platform shown in and described in additional detail below.

Runtime environment includes an least one invoked process a resource management layer and a set of hardware threads M where M is an integer that is greater than or equal to one and denotes the Mth hardware thread M . Runtime environment allows tasks from process to be executed along with tasks from any other processes that co exist with process not shown using resource management layer and hardware threads M . Runtime environment operates in conjunction resource management layer to allow process to obtain processor and other resources of the computer system e.g. hardware threads M .

Runtime environment includes a scheduler function that generates scheduler . In one embodiment the scheduler function is implemented as a scheduler application programming interface API . In other embodiments the scheduler function may be implemented using other suitable programming constructs. When invoked the scheduler function creates scheduler in process where scheduler operates to schedule tasks of process for execution by one or more hardware threads M . Runtime environment may exploit fine grained concurrency that application or library developers express in their programs e.g. process using accompanying tools that are aware of the facilities that the scheduler function provides.

Process includes an allocation of processing and other resources that hosts one or more execution contexts viz. threads . Process obtains access to the processing and other resources in the computer system e.g. hardware threads M from resource management layer . Process causes tasks to be executed using the processing and other resources.

Process generates work in tasks of variable length where each task is associated with an execution context in scheduler . Each task includes a sequence of instructions that perform a unit of work when executed by the computer system. Each execution context forms a thread that executes associated tasks on allocated processing resources. Each execution context includes program state and machine state information. Execution contexts may terminate when there are no more tasks left to execute. For each task runtime environment and or process either assign the task to scheduler to be scheduled for execution or otherwise cause the task to be executed without using scheduler .

Process may be configured to operate in a computer system based on any suitable execution model such as a stack model or an interpreter model and may represent any suitable type of code such as an application a library function or an operating system service. Process has a program state and machine state associated with a set of allocated resources that include a defined memory address space. Process executes autonomously or substantially autonomously from any co existing processes in runtime environment . Accordingly process does not adversely alter the program state of co existing processes or the machine state of any resources allocated to co existing processes. Similarly co existing processes do not adversely alter the program state of process or the machine state of any resources allocated to process .

Resource management layer allocates processing resources to process by assigning one or more hardware threads to process . Resource management layer exists separately from an operating system of the computer system not shown in in the embodiment of . In other embodiments resource management layer or some or all of the functions thereof may be included in the operating system.

Hardware threads reside in execution cores of a set or one or more processor packages e.g. processor packages shown in and described in additional detail below of the computer system. Each hardware thread is configured to execute instructions independently or substantially independently from the other execution cores and includes a machine state. Hardware threads may be included in a single processor package or may be distributed across multiple processor packages. Each execution core in a processor package may include one or more hardware threads .

Process implicitly or explicitly causes scheduler to be created via the scheduler function provided by runtime environment . Scheduler instance may be implicitly created when process uses APIs available in the computer system or programming language features. In response to the API or programming language features runtime environment creates scheduler with a default policy. To explicitly create a scheduler process may invoke the scheduler function provided by runtime environment and specify one or more policies for scheduler .

Scheduler interacts with resource management layer to negotiate processing and other resources of the computer system in a manner that is transparent to process . Resource management layer allocates hardware threads to scheduler based on supply and demand and any policies of scheduler .

In the embodiment shown in scheduler manages the processing resources by creating virtual processors that form an abstraction of underlying hardware threads . Scheduler includes a set of virtual processors N where N is an integer greater than or equal to one and denotes the Nth virtual processor N . Scheduler multiplexes virtual processors onto hardware threads by mapping each virtual processor to a hardware thread . Scheduler may map more than one virtual processor onto a particular hardware thread but maps only one hardware thread to each virtual processor . In other embodiments scheduler manages processing resources in other suitable ways to cause instructions of process to be executed by hardware threads .

The set of execution contexts in scheduler includes a set of execution contexts N with respective associated tasks N that are being executed by respective virtual processors N and at any point during the execution of process a set of zero or more execution contexts . Each execution context and includes state information that indicates whether an execution context or is executing runnable e.g. in response to becoming unblocked or added to scheduler or blocked. Execution contexts that are executing have been attached to a virtual processor and are currently executing. Execution contexts that are runnable include an associated task and are ready to be executed by an available virtual processor . Execution contexts that are blocked also include an associated task and are waiting for data or a message that is being generated by another execution context or will be generated by another execution context .

Each execution context executing on a virtual processor may generate in the course of its execution additional tasks which are organized in any suitable way e.g. added to work queues not shown in . Work may be created by using either application programming interfaces APIs provided by runtime environment or programming language features and corresponding tools in one embodiment. When processing resources are available to scheduler tasks are assigned to execution contexts or that execute them to completion on virtual processors before picking up new tasks. An execution context executing on a virtual processor may also unblock other execution contexts by generating data or a message that will be used by other execution contexts .

Each task in scheduler may be realized e.g. realized tasks and which indicates that an execution context or has been or will be attached to the task and the task is ready to execute. Realized tasks typically include unblocked execution contexts and scheduled agents. A task that is not realized is termed unrealized. Unrealized tasks e.g. tasks may be created as child tasks generated by the execution of parent tasks and may be generated by parallel constructs e.g. parallel parallel for begin and finish . Scheduler may be organized into a synchronized collection e.g. a stack and or a queue for logically independent tasks with execution contexts i.e. realized tasks along with a list of workstealing queues for dependent tasks i.e. unrealized tasks as illustrated in the embodiment of described below.

Upon completion blocking or other interruption e.g. explicit yielding or forced preemption of an execution context running on a virtual processor the virtual processor becomes available to execute another realized task or unrealized task . Scheduler searches for a runnable execution context or an unrealized task to attach to the available virtual processor for execution in any suitable way. For example scheduler may first search for a runnable execution context to execute before searching for an unrealized task to execute. Scheduler continues attaching execution contexts to available virtual processors for execution until all execution contexts of scheduler have been executed.

In one embodiment process organizes tasks into one or more schedule groups and presents schedule groups to scheduler . is a block diagram illustrating an embodiment of a schedule group for use in scheduler .

Schedule group includes a runnables collection a realized task collection a work collection and a set of zero or more workstealing queues . Runnables collection contains a list of unblocked execution contexts . Scheduler adds an execution context to runnables collections when an execution context becomes unblocked. Realized task collection contains a list of realized tasks e.g. unstarted agents that may or may not have associated execution contexts . Scheduler adds a realized task to realized task collection when a new runnable task is presented to scheduler by process . Work queue contains a list of workstealing queues as indicated by an arrow and tracks the execution contexts that are executing tasks from the workstealing queues . Each workstealing queue includes one or more unrealized tasks .

Using the embodiment of scheduler may first search for unblocked execution contexts in the runnables collection of all schedule groups in scheduler . Scheduler may then search for realized tasks in the realized task collection of all schedule groups in scheduler before searching for unrealized tasks in the workstealing queues of the schedule groups .

In one embodiment a virtual processor that becomes available may attempt to locate a runnable execution context in the runnables collection in the schedule group from which the available virtual processor most recently obtained a runnable execution context i.e. the current schedule group . The available virtual processor may then attempt to locate a runnable execution context in the runnables collections in the remaining schedule groups of scheduler in a round robin or other suitable order. If no runnable execution context is found then the available virtual processor may then attempt to locate an unrealized task in the workstealing queues of the current schedule group before searching the workstealing queues in the remaining schedule groups of scheduler in a round robin or other suitable order.

Prior to executing tasks scheduler obtains execution contexts and from runtime environment or an operating system e.g. OS of . Available virtual processors locate and execute execution contexts to begin executing tasks. Virtual processors become available again in response to an execution context completing blocking or otherwise being interrupted. When virtual processors become available virtual processors switch to a runnable execution context or execute a next task or as a continuation on a current execution context if the previous task executed by the current execution context completed.

Scheduler operates to minimize context switching between execution contexts and . When a virtual processor executes a task to completion i.e. task does not block and is not otherwise interrupted and becomes available the available virtual processor attempts to execute a next task or as a continuation on a current execution context . If the next task is possibly already associated with an execution context the available virtual processor executes the task as a continuation on a current execution context if the task has not been previously invoked by scheduler . The available virtual processor executes the task without switching to the execution context associated with the task . Scheduler stores the execution context for later use by the same or another virtual processor . By doing so scheduler and the available virtual processor elide a context switch in executing an uninvoked task originally associated with an execution context .

In a determination is made in scheduler as to whether a task executes to completion on a processing resource as indicated in a block . The processing resource detects whether the task executed to completion without blocking or being interrupted. If the task did not execute to completion i.e. the task blocked or was interrupted then the processing resource switches to a different execution context as indicated in a block . The processing resource causes the blocked or interrupted execution context to be stored and begins executing a next task or with a new execution context in scheduler if one is available. If the previous task executed to completion then the processing resource may be able to execute the next task or as a continuation on execution context .

In the example of virtual processor has become available subsequent to executing a task not shown in with an execution context that blocked or was interrupted. Virtual processor is searching for a next task or to execute as indicated by an arrow . Virtual processors are executing respective tasks with respective execution contexts .

If task blocked or was interrupting while executing on virtual processor then virtual processor performs a context switch from execution context to execution context and executes a next task with execution context as shown in . Virtual processor causes the blocked or interrupted execution context to be stored.

If task blocks or is interrupted while executing on virtual processor virtual processor causes execution context to be stored and searches for another execution context or with an associated task or to execute. When virtual processor searches for a next task or to execute virtual processor may execute a task associated with execution context as shown in the example of . If task completes virtual processor may repeat the function of block .

Referring back to if the task executed to completion then a determination is made by scheduler as to whether the next task to execute is a task that has been previously invoked by scheduler indicated in a block . If the next task has been previously invoked by scheduler then the processing resource switches to a different execution context to execute the task as indicated in block .

If the next task or has not been previously invoked by scheduler then a determination is made by scheduler as to whether the next task or is associated with an execution context as indicated in a block . If the next task or has not been associated with an execution context then the processing resource executes the next task or with a current execution context as indicated in a block . The processing resource executes the next task or as a continuation on the current execution context .

In the example of virtual processor has become available subsequent to executing task not shown in to completion with execution context . Virtual processor is searching for a next task or to execute as indicated by an arrow . Virtual processors are executing respective tasks with respective execution contexts .

Because task completed virtual processor may search for a next task or to execute as a continuation on execution context . Virtual processor may also perform a context switch from execution context to execution context execute a next task with execution context and cause execution context to be stored as described above with reference to .

Referring back to if a next task has an associated execution context and has not been previously invoked by scheduler then the processing resource executes the uninvoked task with a current execution context as indicated in a block . Because the next task has not been previously invoked by scheduler the task may be executed without performing a context switch to the execution context associated with the task . Instead the processing resource executes the task as a continuation on the current execution context .

Referring to virtual processor identifies a next task to execute where task is associated with execution context . Virtual processor detects that task has not been previously invoked by scheduler . Because task executed to completion virtual processor elides a context switch from execution context to execution context and executes task with execution context as shown in . Virtual processor executes task as a continuation on execution context and does not switch to execution context .

Scheduler stores the original execution context associated with the task for later use as indicated in a block . As shown in virtual processor causes execution context to be stored in response to executing task with execution context .

A determination is made by scheduler as to whether as the task blocks is interrupted or completes as indicated in a block . Subsequent to the next task blocking being interrupted or completing the processing resource repeats the function of block .

In the example of task blocks or is interrupted while executing with execution context on virtual processor . Virtual processor performs a context switch from execution context to execution context i.e. the execution context originally associated with task to execute a task associated with execution context .

In other examples another virtual processor may switch to execution context i.e. the execution context originally associated with task and execute subsequent tasks and or associated with execution context .

Computer system includes one or more processor packages a memory system zero or more input output devices zero or more display devices zero or more peripheral devices and zero or more network devices . Processor packages memory system input output devices display devices peripheral devices and network devices communicate using a set of interconnections that includes any suitable type number and configuration of controllers buses interfaces and or other wired or wireless connections.

Computer system represents any suitable processing device configured for a general purpose or a specific purpose. Examples of computer system include a server a personal computer a laptop computer a tablet computer a personal digital assistant PDA a mobile telephone and an audio video device. The components of computer system i.e. processor packages memory system input output devices display devices peripheral devices network devices and interconnections may be contained in a common housing not shown or in any suitable number of separate housings not shown .

Processor packages include hardware threads M . Each hardware thread in processor packages is configured to access and execute instructions stored in memory system . The instructions may include a basic input output system BIOS or firmware not shown an operating system OS a runtime platform applications and resource management layer also shown in . Each hardware thread may execute the instructions in conjunction with or in response to information received from input output devices display devices peripheral devices and or network devices .

Computer system boots and executes OS . OS includes instructions executable by hardware threads to manage the components of computer system and provide a set of functions that allow applications to access and use the components. In one embodiment OS is the Windows operating system. In other embodiments OS is another operating system suitable for use with computer system .

Resource management layer includes instructions that are executable in conjunction with OS to allocate resources of computer system including hardware threads as described above with reference to . Resource management layer may be included in computer system as a library of functions available to one or more applications or as an integrated part of OS .

Runtime platform includes instructions that are executable in conjunction with OS and resource management layer to generate runtime environment and provide runtime functions to applications . These runtime functions include a scheduler function as described in additional detail above with reference to . The runtime functions may be included in computer system as part of an application as a library of functions available to one or more applications or as an integrated part of OS and or resource management layer .

Each application includes instructions that are executable in conjunction with OS resource management layer and or runtime platform to cause desired operations to be performed by computer system . Each application represents one or more processes such as process as described above that may execute with scheduler as provided by runtime platform .

Memory system includes any suitable type number and configuration of volatile or non volatile storage devices configured to store instructions and data. The storage devices of memory system represent computer readable storage media that store computer executable instructions including OS resource management layer runtime platform and applications . The instructions are executable by computer system to perform the functions and methods of OS resource management layer runtime platform and applications described herein. Examples of storage devices in memory system include hard disk drives random access memory RAM read only memory ROM flash memory drives and cards and magnetic and optical disks.

Memory system stores instructions and data received from processor packages input output devices display devices peripheral devices and network devices . Memory system provides stored instructions and data to processor packages input output devices display devices peripheral devices and network devices .

Input output devices include any suitable type number and configuration of input output devices configured to input instructions or data from a user to computer system and output instructions or data from computer system to the user. Examples of input output devices include a keyboard a mouse a touchpad a touchscreen buttons dials knobs and switches.

Display devices include any suitable type number and configuration of display devices configured to output textual and or graphical information to a user of computer system . Examples of display devices include a monitor a display screen and a projector.

Peripheral devices include any suitable type number and configuration of peripheral devices configured to operate with one or more other components in computer system to perform general or specific processing functions.

Network devices include any suitable type number and configuration of network devices configured to allow computer system to communicate across one or more networks not shown . Network devices may operate according to any suitable networking protocol and or configuration to allow information to be transmitted by computer system to a network or received by computer system from a network.

Although specific embodiments have been illustrated and described herein it will be appreciated by those of ordinary skill in the art that a variety of alternate and or equivalent implementations may be substituted for the specific embodiments shown and described without departing from the scope of the present invention. This application is intended to cover any adaptations or variations of the specific embodiments discussed herein. Therefore it is intended that this invention be limited only by the claims and the equivalents thereof.

