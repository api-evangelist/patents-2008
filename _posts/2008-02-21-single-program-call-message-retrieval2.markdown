---

title: Single program call message retrieval
abstract: Embodiments of the present invention provide a method, system and computer program product for single program code message retrieval for message queues. In an embodiment of the invention, a message queue data processing system can be configured for single program code message retrieval for message queues. The system can include a message queue executing in a host server and providing an API to applications communicatively coupled to the message queue over a computer communications network. The API exposed by the message queue can include a single program call including program code enabled to open a queuing resource in the message queue, to retrieve all messages in a message buffer from the queuing resource and to close the queuing resource.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09588827&OS=09588827&RS=09588827
owner: International Business Machines Corporation
number: 09588827
owner_city: Armonk
owner_country: US
publication_date: 20080221
---
The present invention relates to the field of message queues and more particularly to message retrieval from message queues.

In the field of information technology a message queue is a software engineering component used for inter process communications or inter thread communications. The component employs a queue into which messages can be placed by a messenger and from which messages can be retrieved by a designated recipient. In this regard the message queue can be a communicative component enabling asynchronous messaging as between the messenger and the designated recipient. Operationally the message queue can support multiple messengers and recipients such that asynchronous communications can be achieved for a group of participants.

The asynchronous nature of the message queue provides for an ideal technology coupler for disparate technologies. Specifically so long as separate technologies can access the message queue the separate and disparate technologies can engage in message passing thereby enabling communications. In particular the message queue can expose different method calls through an application programming interface API for opening writing to reading from and closing the message queue. Each application in turn can include logic to invoke a sequence of the method calls in order to either place a message into the message queue or to retrieve a message from the message queue.

Accessing a message queue often requires the invocation of a sequence of message queue method calls. A typical sequence includes 

For message writing to the message queue it makes sense to consolidate the three method calls into a single method call for the message queue. Specifically generally writing to the message queue requires a single write operation wrapped by the opening and closing of the message queue. The same is not true in consideration of retrieving messages from a message queue. Rather in most cases the message queue is to be opened and a sequence of message retrieval operations are invoked before closing the message queue. To consolidate the sequence into a single operation would require the repeated invocation of the operation to accommodate multiple different message retrieval requests. As such at present message queues do not provide a single method call to retrieve a message from the message queue. Accordingly for granular message retrieval requests for a single instance of message data three method calls to the message queue API are required.

Embodiments of the present invention address deficiencies of the art in respect to message queue management and provide a novel and non obvious method system and computer program product for single program code message retrieval for message queues. In an embodiment of the invention a message queue data processing system can be configured for single program code message retrieval for message queues. The system can include a message queue residing on a host server and providing an API to applications communicatively coupled to the message queue over a computer communications network or to applications locally coupled to the message queuing system.

The API exposed by the message queue system can include a single program call including program code enabled to open a queuing resource in the message queue to retrieve all messages in a message buffer from the queuing resource and to close the queuing resource. The API further can expose separate program calls each individually and respectively being enabled to open a queuing resource in the message queue to retrieve a message buffer from the queuing resource and to close the queuing resource.

In another embodiment of the invention a method for single program code message retrieval for message queues can be provided. The method can include receiving a single program call in a message queue from an invoking computing process over a computer communications network opening a queuing resource retrieving all messages in a message buffer from the queuing resource and closing the queuing resource all in response to receiving the single program call in the message queue and returning the message buffer to the invoking computing process over the computer communications network.

Additional aspects of the invention will be set forth in part in the description which follows and in part will be obvious from the description or may be learned by practice of the invention. The aspects of the invention will be realized and attained by means of the elements and combinations particularly pointed out in the appended claims. It is to be understood that both the foregoing general description and the following detailed description are exemplary and explanatory only and are not restrictive of the invention as claimed.

Embodiments of the present invention provide a method system and computer program product for single program code message retrieval for message queues. In accordance with an embodiment of the present invention a single interface call can be provided in an application programming interface API for a message queue to permit the opening of a queuing resource the retrieval of a message from the queuing resource and the closing of the queuing resource. In this way an external client can retrieve a message without burdensomely invoking three separate API calls on the message queue. In addition the client does not reserve computer resources that are allocated and held until the queuing resource is closed other then for the duration of the call.

In further illustration pictorially depicts a process for single program code message retrieval for message queues. As shown in a message queue can be provided to queue one or more messages received from message senders . A message queue API further can be provided for the message queue . The message queue API can include program calls A B C for opening a queuing resource by handle retrieving a message from an open message queuing resource and closing a queuing resource by handle. Notably the API separately can provide a single program call NEW.

The single program call NEW can include program code enabled to sequentially open a queuing resource by handle to retrieve a message buffer by the same handle and to close the queuing resource by handle. In operation a requester communicatively coupled to the message queue can issue a command to the API to invoke the single program call NEW to retrieve a message from the message queue without being required to issue separate commands to open a queuing resource to retrieve a message buffer from the queuing resource and to close the queuing resource.

The process shown in can be implemented in a message queuing data processing system. In further illustration schematically shows a message queue data processing system configured for single program code message retrieval for message queues. The system can include different servers each hosting a different application . Each of the servers can be configured for communicative coupling over computer communications network to a message queue executing in host server . The message queue can include at least two program calls exposed through an API.

A first program call can include a send functionality by which a message can be inserted by a first application into the message queue . The second single program call can include a retrieve functionality by which a message in the message queue can be retrieved. In this regard the second single program call can include program code enabled to permit the opening of a queuing resource in the message queue to retrieve a message from the queuing resource in the message queue and to close the queuing resource in the message queue .

In yet further illustration is a flow chart illustrating a process for single program code message retrieval for message queues. The process can begin in response to a single invocation of a program call by a calling process to an API to a message queue. In block a command can be received specifying each of a message buffer and a queuing resource. Thereafter in block the specified queuing resource can be opened and associated with the handle and in block a message buffer can be retrieved from the open queuing resource. Finally in block the queuing resource can be released by reference to the handle and in block the message buffer can be returned to the calling process.

Embodiments of the invention can take the form of an entirely hardware embodiment an entirely software embodiment or an embodiment containing both hardware and software elements. In a preferred embodiment the invention is implemented in software which includes but is not limited to firmware resident software microcode and the like. Furthermore the invention can take the form of a computer program product accessible from a computer usable or computer readable medium providing program code for use by or in connection with a computer or any instruction execution system.

For the purposes of this description a computer usable or computer readable medium can be any apparatus that can contain store communicate propagate or transport the program for use by or in connection with the instruction execution system apparatus or device. The medium can be an electronic magnetic optical electromagnetic infrared or semiconductor system or apparatus or device or a propagation medium. Examples of a computer readable medium include a semiconductor or solid state memory magnetic tape a removable computer diskette a random access memory RAM a read only memory ROM a rigid magnetic disk and an optical disk. Current examples of optical disks include compact disk read only memory CD ROM compact disk read write CD R W and DVD.

A data processing system suitable for storing and or executing program code will include at least one processor coupled directly or indirectly to memory elements through a system bus. The memory elements can include local memory employed during actual execution of the program code bulk storage and cache memories which provide temporary storage of at least some program code in order to reduce the number of times code must be retrieved from bulk storage during execution. Input output or I O devices including but not limited to keyboards displays pointing devices etc. can be coupled to the system either directly or through intervening I O controllers. Network adapters may also be coupled to the system to enable the data processing system to become coupled to other data processing systems or remote printers or storage devices through intervening private or public networks. Modems cable modem and Ethernet cards are just a few of the currently available types of network adapters.

