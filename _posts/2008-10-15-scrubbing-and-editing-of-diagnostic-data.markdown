---

title: Scrubbing and editing of diagnostic data
abstract: Techniques that enable a user or customer at a system site to review and, if desired, modify data identified at the system site for transmission to a diagnosis site prior to the transmission. The identified diagnostic data may be modified such that data that the user does not want to be sent to the diagnosis site (e.g., sensitive data) is excluded from the data communicated to the diagnosis site. The data may be modified by removing or excluding the sensitive data from the data that is communicated to the diagnosis site or replacing the sensitive data with non-sensitive data. The modified data may then be communicated from the system site to the diagnosis site in the form of a package.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08688700&OS=08688700&RS=08688700
owner: Oracle International Corporation
number: 08688700
owner_city: Redwood Shores
owner_country: US
publication_date: 20081015
---
This application claims the benefit and priority under 35 U.S.C. 119 e of U.S. Provisional Application Ser. No. 60 981 456 filed Oct. 19 2007 entitled DIAGNOSABILITY FRAMEWORK the contents of which are herein incorporated by reference in their entirety for all purposes.

The present application also incorporates by reference for all purposes the entire contents of the following related and commonly assigned non provisional applications all filed concurrently with the present application 

 2 U.S. Non Provisional application Ser. No. 12 251 648 entitled RULE BASED ENGINE FOR GATHERING DIAGNOSTIC DATA 

 3 U.S. Non Provisional application Ser. No. 12 251 711 entitled NON INTRUSIVE GATHERING OF DIAGNOSTIC DATA USING ASYNCHRONOUS MECHANISMS 

 5 U.S. Non Provisional application Ser. No. 12 251 667 entitled DIAGNOSABILITY SYSTEM FLOOD CONTROL 

 6 U.S. Non Provisional application Ser. No. 12 251 671 entitled GATHERING INFORMATION FOR USE IN DIAGNOSTIC DATA DUMPING UPON FAILURE OCCURRENCE 

 7 U.S. Non Provisional application Ser. No. 12 251 700 entitled INTELLIGENT COLLECTION OF DIAGNOSTIC DATA FOR COMMUNICATION TO DIAGNOSIS SITE and

 10 U.S. Non Provisional application Ser. No. 12 251 731 entitled GATHERING CONTEXT INFORMATION USED FOR ACTIVATION OF CONTEXTUAL DUMPING and

 11 U.S. Non Provisional application Ser. No. 12 251 743 entitled USER TRIGGERED DIAGNOSTIC DATA GATHERING.

The present invention relates to system maintenance and diagnostics and more particularly to techniques for enabling contents of a package of diagnostic data to be modified prior to shipping of the package to a diagnosis site for analysis.

Diagnosing defects in systems such as Oracle database DB products can be a complex and time consuming task. In a complex software environment the diagnostic data required to resolve an issue or problem can come from different sources and may be stored in multiple locations. For example for a system comprising multiple components the state of the various components may be held in different log files diagnostic traces corresponding to the components may be stored in different repositories and the like.

In a typical diagnostic flow diagnostic data captured at system site e.g. a customer site executing a product instance is communicated to a diagnosis site e.g. the site of the product vendor for failure analysis. At the diagnosis site the data received from the system site is analyzed to determine for example occurrence of an error in the system a root cause of the error recommendations for mitigating effects of the errors repair solutions to fix the error and the like. The results of the analysis may be communicated from the diagnosis site to the system site.

However due to the sheer amount of diagnostic data that may be captured for a system and the often disorganized manner in which the data is stored at the product site it is often a difficult task to establish what diagnostic data is available at the system site and further what pieces of diagnostic data should be submitted to the vendor for analysis. If too little information is provided to the vendor the amount of submitted data may be insufficient to perform a proper diagnosis of the error. The vendor then has to often contact the customer again and request additional information some of which might no longer be available. Further analysis is possible only after receiving the additional requested information. This may take several back and forth communications between the customer and the vendor before the error can be diagnosed. On the other hand sending too much diagnostic information is also problematic. The amount of data that is sent may include thousands of files and many gigabytes of data. Sending such a large volume of data to the diagnosis site is cumbersome time consuming and expensive. Further if the data received at a diagnosis site is very large it takes the vendor a long time to analyze the received diagnostic data to identify relevant pieces of data for analyzing a particular problem. Accordingly under either scenario the time needed to resolve the issue or problem is increased leading to customer dissatisfaction.

Further the diagnostic data that is communicated from the customer site to the vendor site may comprise information that may be considered sensitive or confidential by the customer. For instance traces collected at a customer site may contain sensitive information such as network addresses or database schema details of the customer export dumps may contain data from database tables storing sensitive or confidential information such as customer payroll details etc. As a result in the past customers have been reluctant to allow communication of diagnostic data to vendor sites fearing disclosure of sensitive and confidential information. For example banks have typically refused to send diagnostic data to a diagnosis site fearing that the data may contain information that is sensitive to the bank.

In light of the above techniques are desired for improving the manner in which diagnostic data is identified and communicated from the system site or customer site to the vendor.

Embodiments of the present invention provide techniques that enable a user or customer at a system site to review and if desired modify data identified at the system site for transmission to a diagnosis site prior to the transmission. The identified diagnostic data may be modified such that data that the user does not want to be sent to the diagnosis site e.g. sensitive data is excluded from the data communicated to the diagnosis site. The data may be modified by removing or excluding the sensitive data from the data that is communicated to the diagnosis site or replacing the sensitive data with non sensitive data. The modified data may then be communicated from the system site to the diagnosis site in the form of a package.

According to an embodiment of the present invention techniques are provided for preparing diagnostic data for communication from a first site to a second site. Diagnostic data to be communicated from the first site to the second site may be determined at the first site the diagnostic data related to a system at the first site. Review of the diagnostic data by a user may be enabled at the first site prior to communication of the diagnostic data from the first site to the second site. The user is allowed to change the diagnostic data prior to communication of the diagnostic data from the first site to the second site. The diagnostic data may comprise data related to one or more errors in the system.

In one embodiment input may be received to exclude a piece of data from the diagnostic data. A modified version of the diagnostic data may be communicated from the first site to the second site wherein the modified version excludes the piece of data.

In another embodiment input may be received to replace a piece of data included in the diagnostic data with a modified piece of data. A modified version of the diagnostic data may be communicated from the first site to the second site wherein the modified version includes the modified piece of data instead of the piece of data. In one embodiment a file comprising the piece of data may be copied out from the diagnostic data and a modified version of the file comprising the modified piece of data instead of the original piece of data may be copied into the diagnostic data.

According to an embodiment of the present invention input may be received identifying additional data to be communicated to the second site from the first site along with the diagnostic data. In response the diagnostic data along with the additional data is communicated from the first site to the second site.

In one embodiment review of the diagnostic data may be enabled by displaying a list of files included in the diagnostic data. Further the user is allowed to change the diagnostic data. This may include removing one or more files from the list of files from the diagnostic data replacing a file included in the diagnostic data with a modified version of the file or adding a new file not included in the list of files to the diagnostic data.

The foregoing together with other features and embodiments will become more apparent when referring to the following specification claims and accompanying drawings.

In the following description for the purposes of explanation specific details are set forth in order to provide a thorough understanding of the invention. However it will be apparent that the invention may be practiced without these specific details.

Embodiments of the present invention provide techniques for intelligently identifying diagnostic data to be communicated from a product or system site e.g. a customer site to a diagnosis site e.g. a vendor site that is typically remote from the system site. An appropriate amount of diagnostic data is identified to facilitate efficient and quick diagnosis and error resolution. Techniques are also provided that enable a customer to review the data identified for transmission to the diagnosis site prior to the transmission. The identified diagnostic data may be modified as desired prior to communication of data to the diagnosis site such that data that the customer does not want to be sent to the diagnosis site is excluded from the data communicated to the diagnosis site. The excluded data may include for example data that the customer deems as sensitive or confidential. In this manner the customer has control over the diagnostic data that is communicated from the system site to the diagnosis site.

As depicted in diagnosability system comprises a diagnosability framework deployed at a system site where diagnostic data for a monitored system is collected and stored. Diagnosability system also comprises a diagnosability framework deployed at a diagnosis site. A diagnosis site may be for example a site of a vendor that is responsible for diagnosing problems that may occur in monitored system .

In a typical diagnostic workflow diagnostic data is captured and stored for monitored system by diagnosability framework . Portions of the diagnostic data stored by diagnosability framework may be communicated to diagnosability framework located at the diagnosis site for analysis such as failure analysis. The diagnostic data may be communicated from diagnosability framework to diagnosability framework via a communication network . Communication network may be any network capable of communicating data such as the Internet an intranet a switched network and the like. Communication network may include wired or wireless communication links. Various communication protocols may be used to communicate data from diagnosability framework to diagnosability framework .

Diagnosability framework is configured to collect and store data related to monitored system that may be used for monitoring the health of monitored system and for diagnosing errors in monitored system . For example diagnosability framework may collect and store trace data diagnostic dumps run reports logs e.g. error logs results of diagnosability related actions e.g. results of running health checks and the like. In one embodiment upon occurrence of an error in monitored system diagnosability framework may be configured to perform targeted dumping of diagnostic data such that only diagnostic data that is relevant to the error is collected and stored.

As depicted in diagnosability framework comprises a diagnostic data extractor DDE a diagnostic data repository an information or incident packaging service component IPS and various tools . The various components depicted in diagnosability framework are merely examples of components that may be included in diagnosability framework . In alternate embodiments diagnosability framework may have less or more components than those shown in . The components in diagnosability framework may be implemented in software e.g. code program instructions executed by a processor hardware or combinations thereof.

In one embodiment DDE is configured to detect occurrences of errors or other conditions in system and perform one or more actions in response to the detected errors or conditions. In one embodiment DDE is rule based engine. A DDE rule may identify one or more conditions and one or more actions to be performed when the one or more conditions are met. An action may include creating an incident for an error gathering relevant diagnostic data for an error and storing the diagnostic data that is gathered for the error to a disk invoking one or more health checks in response to errors or other conditions in the monitored system recommending an action to be executed at a later point of time after the occurrence of an error or other conditions in the monitored system upon user confirmations i.e. postmortem actions and the like. Further information related to DDE may be found in the applications incorporated by reference in the present application.

DDE is configured to create an incident for an error in monitored system . In one embodiment an incident is created for a critical error in monitored system . In this embodiment an incident thus represents a single occurrence of a critical error in system . An error in system may be deemed as a critical error if the error is caused due to the working of system . A critical error may be an internal error a system access violation or an external error detected in monitored system e.g. an object being accessed no longer exists . Diagnosability framework is configured to collect and store diagnostic data for each incident including a description of the error s that caused the creation of an incident when the error occurred the current status of the error a set of trace files and dumps generated for the error and other error related data. The data may be stored in diagnostic data repository

In one embodiment each incident is identified using a unique numeric identifier called the incident ID. All diagnostic data collected and stored for an incident is tagged with the incident ID for the incident. This facilitates searching and finding of data related to an incident. Each incident may also have an associated status creation timestamp problem key problem identifier problem ID and a set of correlation keys. Correlation keys are key value pairs that can be used for incident searching and correlation. A problem key identifies a specific problem e.g. ORA 600 17182 . A problem key may include an error number error parameter values and other associated information. The problem key associated with an incident indicates the error that occurred resulting in the incident a status of the incident and a set of diagnostic data stored for the incident. A problem ID is a numeric identifier assigned to a problem. The problem ID may reflect the order in which problems were entered into the repository such as 1 for the first problem entered into a repository etc.

In one embodiment a problem represents a group of incidents with the same problem key. A problem thus represents a group of incidents that are perceived to have the same symptoms. Each problem is identified by an associated problem ID. In many scenarios problems are the unit of management for resolution and are intended to represent a single bug. The concept of a problem simplifies management of errors occurring in monitored system . Two incidents are considered to belong to the same problem if they have the same problem key associated with them. Multiple incidents can map to the same problem.

In one embodiment a problem signature is generated for an incident based upon the symptoms associated with the incident. The problem signature may comprise a predetermined set of data that is used to match a problem with a set of bugs known for monitored system . For example if monitored system is a database such as an Oracle database the problem signature may include the problem key problem impacts stacks information e.g. function component error PL SQL information configuration information e.g. parameters events environment settings SQL information e.g. information on structured text objects accessed execution plan product version information etc. The problem signature may be generated along with an incident and associated with the incident.

According to an embodiment of the present invention metadata is stored for each incident. The metadata may comprise static data that has identical structure schema for all incidents across all products and dynamic data whose structure is dynamic. In the context of generation of packages the metadata information includes correlation keys and is used for correlation of incidents as described below. The dynamic metadata may be stored as attribute value pairs where the attribute is a name of some incident attribute like SESSION ID and the value is the specific value that is assigned for the attribute for the specific incident. An incident may have an arbitrary number of associated pairs with different sets of attributes.

Diagnostic data repository also sometimes referred to as ADR in the applications incorporated by reference in the present application provides a centralized location for storing all diagnostic data related to monitored system . The information may be stored in a structured format that enables searching. For example information related to incidents problems etc. may be stored in diagnostic data repository . In one embodiment diagnostic data repository is a file based repository.

In one embodiment diagnostic data repository is capable of storing diagnostic data for multiple monitored systems which may be different products or different instances of the same product . The diagnostic data for each monitored system may be stored under a directory e.g. an ADR HOME directory allocated to that system. The ADR HOME directories share a common structure to facilitate analysis of the stored data across multiple systems. Multiple ADR HOME directories may be present under an ADR BASE directory.

IPS is configured to identify diagnostic data that is to be transmitted from diagnosability framework at the system site to diagnosability framework at a diagnosis site prepare a package including the identified diagnostic data and transmit the package to the diagnosis site. IPS provides a standard way to package diagnostic data to be sent to the diagnosis site.

IPS also provides services that enable the contents of a package to be modified prior to transmission of the package from diagnosability framework to diagnosability framework . The modification may include modification or removal of data identified to be included in the package and or addition of additional data to the package. For example sensitive data or other data that a customer does not want to transmit to the diagnosis site may be removed from the package prior to transmission of the package. In one embodiment IPS may provide an interface that enables a user at the system site to review and make modifications including additions and deletions to the diagnostic data included in a package to be transmitted to the diagnosis site. In this manner IPS enables a user of diagnosability framework at the system site to control the data that is communicated to a diagnosis site from the system site.

Various tools may be provided as part of diagnosability framework . These tools may include tools for querying the information stored in diagnostic data repository tools for generating reports analysis tools tools for specifying and generating packages to be transmitted to diagnosability framework and other tools that may use information collected and stored by diagnosability framework .

Diagnosability framework deployed at a diagnosis site is configured to receive data from one or more diagnosability frameworks deployed at system sites. As depicted in diagnosability framework comprises an unpacking component a diagnostic data repository and one or more tools

As described above diagnostic data may be communicated from diagnosability framework to diagnosability framework in the form of a package e.g. a zip file a tar file . Unpacking component is configured to receive the diagnostic data transmitted from diagnosability framework and unpack the diagnostic data and make the unpacked data available for analysis at the diagnosis site. In one embodiment the data is unpacked into a format that can be consumed by users at the diagnosis site. For example if the diagnosis site is Oracle the data may be unpackaged into a form that can be consumed by developers and Oracle support personnel who are responsible for providing support for the monitored system. In one embodiment unpacking component is configured to route the unpackaged data to one or more recipients responsible for analyzing the data.

In one embodiment the diagnostic data is unpackaged into diagnostic data repository . Diagnostic data repository thus provides a repository for storing data received from one or more system sites. In one embodiment the structure of diagnostic data repository is the same as the structures of diagnostic data repositories at system sites. This facilitates efficient storage and analysis of the data. In such an embodiment data from a received package is unpacked and stored in the same directory location in diagnostic data repository as the data was stored in diagnostic data repository

The system site platform where the diagnostic data is packaged may be different from the platform at diagnosis site. For example system site may use a Microsoft NT platform while the diagnosis site may use a Linux platform. Further different system sites may have different platforms such as Microsoft NT SUN Unix Linux 64 bit HP etc. The packing and unpacking operations enable transfer of diagnostic data from multiple platforms or ports into a common platform at the diagnosis site. In one embodiment the 32 bit Linux platform is used at the diagnosis site.

Various tools may be provided in diagnosability framework to help analyze the diagnostic data received from diagnosability framework and to guide management and resolution of problems and errors in monitored systems. These tools may include command line or GUI based tools for use by personnel at the diagnosis site. For example the tools may include a tool that may be used to analyze the diagnostic data received from the software system site and to identify causes for the errors tools for automatically routing the diagnostic data to a correct entity e.g. a particular group or department responsible for the software that experienced the error one or more software developers responsible for solving the error a system administrator etc. for diagnosis and the like.

The various components depicted in the diagnosability framework are merely examples of components that may be included in the diagnosability framework. In alternate embodiments diagnosability framework may have less or more components than those shown in . The components depicted in diagnosability framework may be implemented in software hardware or combinations thereof.

The present application focuses on IPS of diagnosability framework and unpacking component of diagnosability framework . Information related to the various other components of diagnosability system may be found in the applications incorporated by reference in the present application.

Package assembler is configured to determine the diagnostic data to be included in a package that is to be communicated to a diagnosis site. Information may be provided to package assembler that is used to determine the information to be included in the package. Information may comprise a request to create a package for communication to a diagnosis site. In one embodiment packages are created for one or more problems and or incidents. In such an embodiment information may identify the one or more problems and or incidents for which a package is to be created and communicated to the diagnosis site. An incident may be identified using an incident ID. A problem may be identified using a problem ID.

A request to create a package may be received from a user of diagnosability framework . For example a customer of monitored system may request creation of a package. In one embodiment a user interface e.g. a GUI a command line interface may be provided that enables the user customer to browse through incidents and problems in monitored system and select one or more incidents and or problems for which a package is to be created. The request to create a package may also be received from a component of diagnosability framework .

Upon receiving information package assembler is configured to automatically determine diagnostic data from diagnostic data repository to be included in the package. For example if the package is to be created for a problem package assembler automatically determines from information stored in diagnostic data repository a set of incidents related to the problem and diagnostic data related to the problem and its associated incidents that is to be included in the package. In one embodiment problem keys associated with incidents are used to identify all incidents that map to a particular problem. The problem ID associated with the problem and the incident IDs associated with the incidents are used to find the diagnostic data to be included in the package. The diagnostic data may include files logs dumps traces run reports and the like.

In one embodiment in addition to incidents that are directly mapped to a problem via the incident ID problem key mapping package assembler also identifies other incidents that are considered correlated to the problem incidents. There are several ways in which incidents may be considered to be correlated such as incidents arising from the same process incidents occurring close to each other in time etc. Diagnostic data related to the correlated incidents is also included in the package since it may be useful in resolution of the problem.

Based upon information and the data stored in diagnostic data repository package assembler determines data to be included in a package. Review edit module enables data that is identified to be included in a package to be reviewed and if desired edited prior to transmission of the data to the diagnosis site. Review edit module enables a user to review and or modify the data identified for transmission to the diagnosis site. The package data may be modified by adding additional data to the package by removing one or more pieces of data from data identified to be included in the package or changing the contents of data identified for inclusion in the package. For example if the data to be included in the package comprises sensitive or confidential data e.g. confidential customer data financial records data the user may remove that data from the data to be included in the package or alternatively replace the sensitive information with non sensitive information.

Review edit module may provide an interface e.g. a GUI command line interface that enables the user to browse through the contents of data identified to be included in the package. The user may make changes to the contents of the package. For example the user may identify one or more pieces of data that are not to be communicated to the diagnosis site. The one or more user tagged pieces of data are then removed from the data to be communicated to the diagnosis site or may be replaced with non sensitive data. The one or more pieces of data that are removed replaced may represent sensitive or confidential data or other data that the user customer does not want to communicate to the diagnosis site. In this manner the customer at a system site is provided the ability to scrub the data included in a package prior to transmission of the package from the system site to the diagnosis site.

In one embodiment all the data in that is identified to be included in the package may be presented to the user for review. The user may then manually scrub the data. For example the user may check out the potentially sensitive information scrub the information and then check in the scrubbed information for transmission to the diagnosis site. Scrubbing may involve exclusion of the sensitive information from the diagnostic information that is transmitted to the diagnosis site and or replacement of the sensitive information with non sensitive innocuous data. Sections of the package that have been modified may be tagged so that a person analyzing the data is made aware of the data modification. This information may be useful in the analysis of the diagnostic data at the diagnosis site.

Data that is considered sensitive may depend upon the system site and may also depend upon the customer user. For example information that comprises data blocks bind variables SQL statement schema names export dumps etc. may be considered sensitive by a user. Other examples of data that may be considered sensitive include user names IP addresses of customer machines table contents schema information optimizer statistics identifiers in a database e.g. names of tables names of procedures etc. and the like. In one embodiment a user of the diagnosability framework can configure and define information that is considered sensitive by the user. In this manner the data that is considered sensitive is user configurable.

In another embodiment review edit module may be configured to automatically identify data that is potentially sensitive or confidential to the customer or user of monitored system . For example in one embodiment review edit module may automatically identify portions of data that store user data e.g. in tables exported database data etc. and present the identified portions to the user for review and modification. If the identified portions indeed contain sensitive data then the user customer is allowed to modify that data as desired. In another embodiment the scrubbing may be performed automatically by the diagnosability framework . In one embodiment a user s customer s preferences for handling of sensitive information may be stored in a template and used by review edit module to identify the data to be removed from the package.

According to an embodiment of the present invention scrubbing is performed in such a manner that while the sensitive information is scrubbed and prevented from being transmitted to the diagnosis site the non sensitive information related to the sensitive information which is useful for diagnosis is preserved in the package and communicated to the diagnosis site. For example while the data contents themselves may be sensitive and thus scrubbed information related to the structure of the sensitive data which may useful for diagnosis of the problem may be preserved and communicated to the diagnosis site in the package. In this manner embodiments of the present invention enable scrubbing while preserving or maintaining information e.g. structure information metadata that is relevant and useful for diagnosis.

In the manner described above a user customer may ensure that diagnostic data that is communicated to the diagnosis site does not include data that the user customer does not want to be communicated to the diagnosis site. This in turn makes it more likely that sites with more rigorous security requirements such as financial institutions government sites etc. will actually allow diagnostic data to be provided to the vendor for analysis. The ease and speed with which customers can review and make changes to the package diagnostic data is also increased.

The user may also decide to add additional data to data . For example the user may create test cases to better facilitate failure analysis at the diagnosis site. The user may specifically identify the test cases and the associated data to be included in the package. The user may also tag other types of diagnostic data such as logs dumps traces etc. that are to be included in the data to be shipped to the diagnosis site.

In the manner above the user at a system site has complete control over the data that is included in a package that is communicated from the system site to the diagnosis site. Data in represents the modified data that is to be packaged and sent to the diagnosis site. Data includes data identified by package assembler excluding data that is identified to be removed from the package and further including data that is specifically tagged for inclusion.

Archiving module is configured to package data into a form suitable for transmission to the diagnosis site. In one embodiment data is zipped into a single archive package . The archived package is then communicated to the diagnosis site. In one embodiment for a piece of data included in the package the location of that piece of data in diagnostic data repository is preserved in the package. For example if the package includes a file information identifying the path to that file in diagnostic data repository is preserved in the package. This facilitates unpacking of the data into diagnostic data repository on the diagnosis site.

As depicted in information is received requesting generation of a package for a problem step . The problem may be identified using a problem ID and or a problem key. The information in may be received from a user or from some component of diagnosability framework . A set of application programming interfaces APIs may also be provided to invoke generation of a package.

In one embodiment a user interface is provided that enables a user to initiate generation of a package. The user interface enables the user to browse a list of problems and or incidents in a monitored system and allows the user to select one or more problems and or incidents for which a package is to be created. A package name may also be provided via the interface. Other information related to the package such as a brief description of the contents of the package information identifying a diagnosis site or other recipient to which the package is to be sent etc. may also be provided by the user via the interface. The user interface may also allow the user to review the contents of a package and make additions to or deletions from the package.

A set of incidents are then identified based upon the problem identified in step . The problem keys associated with the incidents and the problem ID of the problem may be used to identify the set of incidents that map to the problem. For example incidents that have the same problem key that matches the problem key of the problem identified in are identified in .

A subset of the incidents identified in is then selected step . The problem identified in may have a large number of associated incidents and including all of the incidents in the package may result in a package that is very large and one that comprises unnecessary redundant data. Such a large package would also be unwieldy and non conducive to failure analysis at the diagnosis site. Accordingly step is performed in order to reduce the amount of data that is included in a package such the data that is more likely to be useful for failure analysis is included in the package.

Various different user configurable criteria may be used to select the incidents in . Only those incidents from the set of incidents identified in that match the criteria may be selected in . Examples of criteria include 1 selecting only a certain number e.g. three of latest occurring incidents 2 selecting only a certain number e.g. three of earliest occurring incidents 3 selecting incidents for which a user action a DDE suggested action that is recommended to be executed but is not executed until permitted by the user has been performed 4 selecting the newest incidents where no flood control techniques for reducing the amount of diagnostic data gathered upon occurrence of an error by limiting the gathering of possibly redundant data has been performed 5 others and combinations.

A set of incidents correlated to the incidents identified in or is identified step . The one or more incidents identified in include incidents that may not have been identified in but which are considered related to the problem and useful for diagnosis of the problem. For example when examining an incident to diagnose a problem it may be helpful to also examine incidents that occurred within five minutes of the original incident. Such incidents are selected in .

Various criteria may be used to determine which incidents are correlated to the incidents identified in or . For example an incident may be considered correlated to an incident identified in or if a the incident was created within a certain time threshold e.g. 5 minutes of the incident identified in or b the error corresponding to the incident occurred in the same process as an error corresponding to an incident identified in or c the error corresponding to the incident occurred from the same monitored system component as an error corresponding to an incident identified in or d the incident has the same ECID Execution Context ID metadata associated with an incident as an incident identified in or e the error corresponding to the incident occurred in the same session as an error corresponding to an incident identified in or f the incident has the same one or more associated correlation keys as an incident identified in or g the incident was generated during the same health check diagnostic task or function that determines data related to monitored system as an incident identified in or h the incident was included in a previously generated package but was not included in the present package and the like.

As indicated above two incidents may be correlated because they are part of a single logical operation or they occur in the same context like a session or a process etc. In one embodiment the correlation between incidents is done based upon information stored by correlation keys in the metadata associated with the incidents. Every correlation key that is stored for an incident is an identifier for a context or logical operation. Two or more incidents that share the same value for the same correlation key may be considered correlated under the specific key. For example in one embodiment a SESSION ID context correlation key is used to correlate incidents that occur in the same session.

In one embodiment the following correlation keys are defined for all products and are part of the static incident metadata stored for an incident 

In one embodiment the following dynamic correlation keys may be used by for determining correlated incidents SESSION ID PID process ID Logical Operation Correlation Key and Global transaction ID. A correlation key may also be used to correlate incidents that belong to the same logical operation. A logical operation may include all forms of parallel execution parallel SQL data pump etc . A single logical operation may involve multiple parallel execution operation as in the case of data pump . Incidents that are correlated by logical operation correlation key may belong to two different instances of a product.

Accordingly in some of the correlation keys stored in metadata associated with the incidents that may be used to find correlated incidents include keys related to 1 time e.g. all incidents generated within a certain time 5 minutes before or after an incident selected in 2 process id e.g. all incidents generated for the same process id 3 session e.g. all incidents generated for the same session 4 ECID e.g. incidents generated for the same ECID 5 transaction ID e.g. incidents generated for the same global transaction ID 6 parallel slaves e.g. determined using a logical operation correlation key provided to each slave 7 remote instance dumps e.g. these may be correlated using the same correlation key as parallel slaves 8 health checker run ID e.g. all incidents generated by the same health checker run etc. Incidents that were flood controlled may not be selected in or but may be considered when deciding which incidents to include in .

In one embodiment a set of rules are configured for IPS that define how correlated incidents are to be determined in . These rules are user configurable.

Referring back to data to be included in the package is then identified based upon the problem identified in and the incidents identified in and step . In one embodiment the diagnostic data stored in diagnostic data for each of the incidents identified in and is identified for inclusion in the package. The data identified in to be included in a package may include files generated for the selected incidents process trace files for the selected incidents background traces logs results of health checks related to the incidents dumps generated for the incidents status reports and the like.

In addition to information associated with the problem and selected incidents other information correlated to the problem or selected incidents may also be identified for inclusion in the package in . Metadata including correlation keys associated with the incidents determined in and that is stored in diagnostic data repository may be used to identify the correlated diagnostic data related to the problem and selected incidents to be included in the package. For example IPS may automatically get trace files that are correlated with the selected incidents. This correlation may be based on the process ID or other correlation keys. For example while diagnostic data associated with a selected incident is included in the package it may also be useful to include trace files for other processes that are related to the original process for the incident. Such trace files may be identified for inclusion in the package in . The trace files may also include information such as timestamp problem key error message and arguments incident number dump name etc. that may be used to determine the data for the selected incidents. Accordingly the information to be included in the package is determined by correlating various criteria such as by time process address space session etc.

In one embodiment a set of rules are configured for IPS that define how correlated data is determined for inclusion in a package in . These rules are user configurable.

The diagnostic data identified in may then be provided for review and modification step . Information may be received identifying modifications if any made to the diagnostic data identified in step . As previously described the modifications may include deletion of one or more pieces of data from the data identified in replacement of data and or addition of additional data to the data identified in . For example sensitive data included in the data determined in may be removed from the package data or replaced with non sensitive data. It should be noted that when data included in a package is modified the modification does not affect the actual data stored in diagnostic data repository . The modification only affects what is included in the package to be sent the diagnostic data that is stored on disk in data repository is not affected. In one embodiment this is accomplished by modifying the metadata associated with the stored diagnostic data in data repository that controls what is to be included in the package to be sent to the diagnosis site. The modifications to the diagnostic data to be included in the package are reflected by changes in the metadata that controls what is to be included in the package. As indicated above the diagnostic data to be included in the package may be modified by adding additional data to the package. Examples of information that may be added to a package may include trace files not associated with any incident identified in or test cases created by the user additional dumps taken by the user configuration information identified for inclusion in the package and so on.

Based upon the diagnostic data determined in and the modifications if any received in modified diagnostic data to be included in the package is determined step . In one embodiment the modified data includes the data determined in and modifications made to the data including removal of data data replacements and inclusion of additional data.

A package is then generated based upon the modified data identified in step . The processing in may be performed by archiving module depicted in . In one embodiment the package is generated as a single archive using utilities such as zip tar etc. A utility such as compress may also be used to reduce the size of files included in the archives In one embodiment for a piece of data included in the package the location of that piece of data in diagnostic data repository is preserved in the package. For example if the package includes a file information identifying the path to that file in diagnostic data repository is stored in the package. This facilitates unpacking of the data into diagnostic data repository on the diagnosis site. In one embodiment the structure within diagnostic data repository is also preserved within the package. The package may thus be considered as a subset of diagnostic data repository

In addition to the package a manifest file may also be generated in . The manifest file is generally a text file that describes the package contents e.g. may comprise a table of contents identifying the contents included in the package . The manifest file may also comprise instructions for unpacking and processing the contents of the package. For example the manifest file may comprise information such as a list of files included in the package along with timestamp size information reasons for including the files in the package information identifying the problem and incidents included in the package correlation keys used to pick related incidents user initiated actions executed for the problem and related incidents and the like.

In some embodiments an unpacking instructions file may also be generated in . This file may include information used for unpacking the package. In some embodiments this information may be included in the manifest file itself.

The package prepared in and the manifest and instruction files are then transmitted to the diagnosis site from the system site step . In one embodiment the manifest file is transmitted as a standalone file separate from the package to help the receiving user determine the package contents and how to process the package contents. The manifest file may also be included within the package and a separate copy sent as standalone . The package may be transmitted to the diagnostic data after the package has been created or at some later scheduled time.

While depicts processing for generating a package for a single problem in alternative embodiments a package may be created for multiple problems. A package may also be created for one or more incidents. In this case the package generation method may be triggered upon receiving incident IDs identifying the one or more incidents for which a package is to be created.

In one embodiment a staging area e.g. a specific directory in diagnostic data repository may be used by IPS for preparing a package. Files generated as part of the packaging process representing the data to be included in the package may be gathered in this specific directory.

Several parameters may be configured for IPS for controlling the packaging process. These parameters may be user configurable and set to some default value. For example since a problem for which a package is to be created may have several associated incidents ips.default main incidents newest and ips.default main incidents oldest parameters may be provided to select specific incidents to be included in the package for the problem. The ips.default main incidents newest and ips.default main incidents oldest parameters may be configured to control the number of new and old incidents to be selected in step . The default for these parameters may be set to the three newest and three oldest incidents. An ips.cutoff time parameter may be provided that specifies a cut off time beyond which incidents are not considered for inclusion in step . For example if the cut off time is set to two months and there are some incidents that are six months old then those incidents will not be considered for selection in . The default value for this parameter may be three months. An ips.correlation time window parameter may be provided that specifies the size of the time window to use when looking for correlated incidents in step . Incidents that occur close to each other within the ips.correlation time window are considered correlated. The default for this parameter may be set to 5 minutes. An ips.time range increase parameter may be provided that specifies how much time should be added to each end of the package time range. The package will include metadata and information covering the earliest incident to the latest incident extended in each direction by the value of this parameter. The default may be set to 24 hours.

In one embodiment various options are provided to control the degree of correlation used to identify correlated incidents in and to identify correlated data in . For example a basic option may be provided which when selected results in all incident dumps and incident process trace files for the selected incidents to be included for the correlation processing. A typical option may be provided which when selected results in incident dumps and trace files to be included for all the selected incidents but also other files that were modified within a time period e.g. five minutes of the selected incidents. An all option may be provided which when selected results in inclusion of all dumps and trace files that were modified between the time of the first selected incident and the last selected incident.

As previously described diagnostic data repository may comprise one or more ADR HOME directories each ADR HOME directory storing data for a monitored system. A package may be created for one monitored system under one ADR HOME directory or for multiple monitored systems. The diagnostic data for each monitored system may be stored under a directory e.g. an ADR HOME directory allocated to that system. The ADR HOME directories share a common structure to facilitate analysis of the stored data across multiple systems. Multiple ADR HOME directories may be present under an ADR BASE directory. In one embodiment a logical package may be created for a monitored system and the logical package prepared for multiple monitored systems may be combined into a single package that is then communicated from the system site to the diagnosis site.

In one embodiment two different package types are provided an incremental package and a cumulative or complete package. A cumulative package is a package that does not depend upon another package and is a complete package generated according to the method depicted in and described above. An incremental package is a package that only includes data that has not been shipped in an earlier communicated package. A request for generating a package may indicate whether a complete or an incremental package is to be generated.

As described above the diagnostic data that is included in a package may comprise trace files dumps core files health monitor reports data repair records test cases e.g. SQL test cases incident information and the like. Servers and processes in a monitored system write information to files known as trace files. Trace files for a process are updated periodically over the life of the process and comprise information on the process environment status activities and errors. When a process detects a critical error information about the error is written to the process trace file. Trace files sometimes are accompanied by corresponding trace map files which comprise structural information about the trace files and may be used for searching and navigating the trace files. A dump is generally a specific type of trace file. A dump is typically a one time output of diagnostic data in response to an event such as a new incident . A core file contains a memory dump typically in a binary port specific format.

In one embodiment two methods are provided for creating and uploading a package to a diagnosis site a quick packaging method and a custom packaging method. For both methods a wizard may be provided to guide a user through the package creation process.

The quick packaging method is a simpler and more automated method of creating a package for a single problem. The user can select the problem for which the package is to be created provide a package name and description and then schedule a time for uploading the package to the diagnosis site either immediately or at a later specified date and time. IPS is configured to automatically determine and place diagnostic data related to the problem into the package create a zip file for the package and then upload the file. With this method the user is not provided the opportunity to add edit or remove package files or add other diagnostic data to the package.

A user may use custom packaging to create a package for one or more problems and or incidents. A user may also add data related to one or more problems incidents to an existing package. The user is also allowed to edit the contents of the package including adding or removing problems or incidents adding editing or removing files e.g. trace files external files in the package and adding other diagnostic data such as SQL test cases. A package may then be created once the user has indicated that all edits have been completed. The user may further view the package contents to determine if the package is to be further edited to remove sensitive data or to reduce package size. The operations may be conducted over a period of time e.g. a number of days before the user decides that the package has sufficient diagnostic information to be sent to the diagnosis site.

Using embodiments of the present invention the task of gathering of information to be sent to a diagnosis site is automated. The customer at the system site no longer needs to have the technical knowledge required to locate relevant information to be sent to the vendor for analysis. By using correlations and metadata to make decisions regarding the data to be sent to the diagnosis site data that is more relevant for error diagnosis is sent to the diagnosis site. This in turn reduces the time to resolve customer issues leading to less operational impact and higher customer satisfaction. IPS gathers sufficient information for a failure that increases the probability of diagnosing the failure upon the first occurrence of the failure and finding the root cause e.g. the first incident that triggers the problem other incidents may just be the effect of the first incident of the problem. The customer does not have to know the technical details of the product or monitored system in order to determine what information is to be sent to the vendor for diagnosis. The customer thus need not be an expert in the product.

Options are provided that enable a user to make changes to the package contents. Options include a set of options to edit the package contents including options to add problems to the package exclude problems from a package and to view a package manifest. A set of options is also provided for scrubbing data included in the package including options to copy out a file to edit its contents and copy in an edited version of the file to replace the original file. In this embodiment in order to change the contents of a package a user may issue a command to copy a file in the package that is to be changed to a designated directory. The file copy may then be edited by the user with a text editor or some other utility. After the user is done editing the file copy the user may issue a command that results in the edited file copy being copied back into the package replacing the original file. Editing the file copy does not affect the data stored in diagnostic data repository but the package now includes an edited version of the data. A set of options is also provided for adding additional diagnostic data to the package including options for gathering additional dumps and adding external files to the package. A set of options is also provided for communicating the package to the diagnosis site. A button is also provided which when selected initiates transfer of the package to the diagnosis site.

As shown in computer system includes a processor that communicates with a number of peripheral subsystems via a bus subsystem . These peripheral subsystems may include a storage subsystem comprising a memory subsystem and a file storage subsystem user interface input devices user interface output devices and a network interface subsystem .

Bus subsystem provides a mechanism for letting the various components and subsystems of computer system communicate with each other as intended. Although bus subsystem is shown schematically as a single bus alternative embodiments of the bus subsystem may utilize multiple busses.

Network interface subsystem provides an interface to other computer systems networks and portals. Network interface subsystem serves as an interface for receiving data from and transmitting data to other systems from computer system . For example for diagnosability framework deployed at the system site network interface subsystem may be configured to transfer diagnostic packages from the system site to the vendor or diagnosis site.

User interface input devices may include a keyboard pointing devices such as a mouse trackball touchpad or graphics tablet a scanner a barcode scanner a touch screen incorporated into the display audio input devices such as voice recognition systems microphones and other types of input devices. In general use of the term input device is intended to include all possible types of devices and mechanisms for inputting information to computer system .

User interface output devices may include a display subsystem a printer a fax machine or non visual displays such as audio output devices etc. The display subsystem may be a cathode ray tube CRT a flat panel device such as a liquid crystal display LCD or a projection device. In general use of the term output device is intended to include all possible types of devices and mechanisms for outputting information from computer system .

Storage subsystem provides a computer readable medium for storing the basic programming and data constructs that provide the functionality of the present invention. Software programs code modules instructions that when executed by a processor provide the functionality of the present invention may be stored in storage subsystem . These software modules or instructions may be executed by processor s . Storage subsystem may also provide a repository for storing data used in accordance with the present invention for example the data stored in the diagnostic data repository. Storage subsystem may comprise memory subsystem and file disk storage subsystem .

Memory subsystem may include a number of memories including a main random access memory RAM for storage of instructions and data during program execution and a read only memory ROM in which fixed instructions are stored. File storage subsystem provides persistent non volatile storage for program and data files and may include a hard disk drive a floppy disk drive along with associated removable media a Compact Disk Read Only Memory CD ROM drive an optical drive removable media cartridges and other like storage media.

Computer system can be of various types including a personal computer a portable computer a workstation a network computer a mainframe a kiosk a server or any other data processing system. Due to the ever changing nature of computers and networks the description of computer system depicted in is intended only as a specific example for purposes of illustrating the preferred embodiment of the computer system. Many other configurations having more or fewer components than the system depicted in are possible.

Although specific embodiments of the invention have been described various modifications alterations alternative constructions and equivalents are also encompassed within the scope of the invention. The described invention is not restricted to operation within certain specific data processing environments but is free to operate within a plurality of data processing environments. Additionally although the present invention has been described using a particular series of transactions and steps it should be apparent to those skilled in the art that the scope of the present invention is not limited to the described series of transactions and steps. While the embodiments of the diagnosability framework have been described as providing diagnostic support for software product instances in alternative embodiments embodiments of the present invention may be used for providing diagnostic support for software products hardware products or products having combination of software and hardware.

Further while the present invention has been described using a particular combination of hardware and software it should be recognized that other combinations of hardware and software are also within the scope of the present invention. The present invention may be implemented using hardware software or combinations thereof.

The specification and drawings are accordingly to be regarded in an illustrative rather than a restrictive sense. It will however be evident that additions subtractions deletions and other modifications and changes may be made thereunto without departing from the broader spirit and scope of the inventions.

