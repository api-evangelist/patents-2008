---

title: System and method of dynamically weighted analysis for intrusion decision-making
abstract: An intrusion detection mechanism is provided for flexible, automatic, thorough, and consistent security checking and vulnerability resolution in a heterogeneous environment. The mechanism may provide a predefined number of default intrusion analysis approaches, such as signature-based, anomaly-based, scan-based, and danger theory. The intrusion detection mechanism also allows a limitless number of intrusion analysis approaches to be added on the fly. Using an intrusion detection skin, the mechanism allows various weights to be assigned to specific intrusion analysis approaches. The mechanism may adjust these weights dynamically. The score ration can be tailored to determine if an intrusion occurred and adjusted dynamically. Also, multiple security policies for any type of computing element may be enforced.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07893830&OS=07893830&RS=07893830
owner: International Business Machines Corporation
number: 07893830
owner_city: Armonk
owner_country: US
publication_date: 20081006
---
This application is a continuation of application Ser. No. 11 334 672 filed Jan. 18 2006 which issued on Nov. 11 2008 as U.S. Pat. No. 7 450 005.

The present invention relates to data processing and in particular to a method apparatus and program for dynamically weighted analysis for intrusion decision making.

Many companies develop or use products that utilize databases. These databases often store sensitive data such as social security numbers medical records financial transactions and the like. Consequently database administrators are confronted with maintaining security for these databases. This responsibility may become unwieldy because multiple databases may be located on multiple servers and platforms. In addition each platform may have a different method of checking database security. Also security modules policies constantly change as new vulnerabilities are discovered. New security policies call for new improved or updated security checks.

To keep up with changes to security modules and policies companies must keep their database administrators highly trained which results in a significant cost to the companies. Furthermore there is a high risk of human error because database administrators must keep track of so many databases security policies interfaces etc. Database administrators also have to know and execute the correct security checking of many varying databases in a timely and efficient manner to prevent jeopardizing credibility of products and services.

Current solutions are implemented as scripts that run security checks on a database. However the security checking is specific to a single database. Also the scripts only run the checks and do not support resolution of security violations. Scripts also do not easily adapt to the rapidly changing requirements of differing security models policies or database environments and administration interfaces.

Also technology is moving toward autonomic computing systems that are self configuring self optimizing self healing and self protecting with minimal human intervention. However autonomic computing environments cannot be viable unless the systems are also self securing. Adequate security must be ensured in an effective manner or autonomic computing will remain only a vision.

An autonomic computing environment may be comprised of several heterogeneously interconnected elements and in turn presents many challenges for ensuring sufficient security. One of these challenges involves determining effective criteria and methods for differentiating between normal system failures and those failures that are caused by malicious attacks. Due to such complex challenges one must first solve how systems can effectively cope with intrusions.

Moreover computing systems are susceptible to malicious attacks. Imagine a complex autonomic computing system that is linked to several hundreds of elements and unable to cope with a computer virus that corrupts key system functions. The virus could then corrupt vital system functions of the entire autonomic computing environment. Human intervention would result after the damage has completely penetrated the environment and thus resolutions would be very time consuming and costly.

Coping with intrusions is difficult in many ways. One important reason is that perspectives of both the victim and the attacker of an intrusion may be involved. Typically for an intrusion to succeed the attacker has committed a malicious act that can be detected and the victim is subjected to some amount of loss. But when attacks occur that cannot be discovered deciding what an intrusion is may become quite difficult.

The exemplary embodiments recognize the disadvantages of the prior art and provide an intrusion detection system for intrusion detection in a computer environment. An analysis module receives first configuration information from an intrusion detection skin. The first configuration information identifies a set of one or more analysis approaches to be executed and a weight to apply to each of the one or more analysis approaches. The analysis module executes the set of one or more analysis approaches against event information generated by one or more computing elements in a computer environment. A filtering mechanism determines a score based on one or more policies. A score interpreter determines whether the event information represents an intrusion based on the score.

The present invention provides a method apparatus and computer program product for dynamically weighted analysis for intrusion decision making. The data processing device may be a stand alone computing device or may be a distributed data processing system in which multiple computing devices are utilized to perform various aspects of the present invention. Therefore the following are provided as exemplary diagrams of data processing environments in which the present invention may be implemented. It should be appreciated that are only exemplary and are not intended to assert or imply any limitation with regard to the environments in which the present invention may be implemented. Many modifications to the depicted environments may be made without departing from the spirit and scope of the present invention.

With reference now to the figures depicts a pictorial representation of a network of data processing systems in which exemplary aspects of the present invention may be implemented. Network data processing system is a network of computers in which the present invention may be implemented. Network data processing system contains a network which is the medium used to provide communications links between various devices and computers connected together within network data processing system . Network may include connections such as wire wireless communication links or fiber optic cables.

In the depicted example servers are connected to network and provide access to storage units . In addition client is connected to network . Client may be for example a personal computer or network computer. Network data processing system may include additional servers clients and other devices not shown.

In the depicted example network data processing system is the Internet with network representing a worldwide collection of networks and gateways that use the Transmission Control Protocol Internet Protocol TCP IP suite of protocols to communicate with one another. At the heart of the Internet is a backbone of high speed data communication lines between major nodes or host computers consisting of thousands of commercial government educational and other computer systems that route data and messages. Of course network data processing system also may be implemented as a number of different types of networks such as for example an intranet a local area network LAN or a wide area network WAN . is intended as an example and not as an architectural limitation for the present invention.

More particularly in the example shown in servers are database servers and provide access to databases respectively. Client is a database administrator workstation. In this case the database administrator must manage the security of multiple databases which may have different security policies and administration interfaces. Because of this complexity security breaches on databases are more apt to occur. This may eventually place a company s reputation and credibility as well as profitability at risk.

Security models policies constantly evolve as new security holes arise. This causes database administrators to scramble to apply new or updated security checks which are usually executed manually to cover the new requirements of the security policies. Also there is typically a short period of time to apply these new requirements in order to protect databases from potential security breaches. Due to the urgency and complexity of this process particularly with heterogeneous database environments database administrators can easily fall short of ensuring the security of the databases causing sensitive data to be at risk.

In accordance with exemplary aspects of the present invention an intrusion detection mechanism is provided for flexible automatic thorough and consistent security checking and vulnerability resolution in a heterogeneous environment. The mechanism may provide a predefined number of default intrusion analysis approaches such as signature based anomaly based scan based and danger theory. The intrusion detection mechanism also allows a limitless number of intrusion analysis approaches to be added on the fly. Using an intrusion detection skin the mechanism allows various weights to be assigned to specific intrusion analysis approaches. The mechanism may adjust these weights dynamically. The score ration can be tailored to determine if an intrusion occurred and adjusted dynamically. Also multiple security policies for any type of computing element may be enforced.

In an exemplary embodiment the security mechanism may be embodied on a server such as server . Report data error information and the like may be stored in storage . A database administrator may configure the security mechanism locally or remotely using administrator client . The security mechanism may also be configured to send output to a display to a report file or to a remote device such as administrator workstation . In an alternative embodiment the security mechanism may be embodied on the administrator workstation itself.

Referring to a block diagram of a data processing system that may be implemented as a server such as server in is depicted in accordance with exemplary aspects of the present invention. Data processing system may be a symmetric multiprocessor SMP system including a plurality of processors and connected to system bus . Alternatively a single processor system may be employed. Also connected to system bus is memory controller cache which provides an interface to local memory . I O bus bridge is connected to system bus and provides an interface to I O bus . Memory controller cache and I O bus bridge may be integrated as depicted.

Peripheral component interconnect PCI bus bridge connected to I O bus provides an interface to PCI local bus . A number of modems may be connected to PCI local bus . Typical PCI bus implementations will support four PCI expansion slots or add in connectors. Communications links to clients in may be provided through modem and network adapter connected to PCI local bus through add in connectors.

Additional PCI bus bridges and provide interfaces for additional PCI local buses and from which additional modems or network adapters may be supported. In this manner data processing system allows connections to multiple network computers. A memory mapped graphics adapter and hard disk may also be connected to I O bus as depicted either directly or indirectly.

Those of ordinary skill in the art will appreciate that the hardware depicted in may vary. For example other peripheral devices such as optical disk drives and the like also may be used in addition to or in place of the hardware depicted. The depicted example is not meant to imply architectural limitations with respect to the present invention. The data processing system depicted in may be for example an IBM eServer pSeries system a product of International Business Machines Corporation in Armonk N.Y. running the Advanced Interactive Executive AIX operating system or LINUX operating system. An object oriented programming system such as a Java programming system may run in conjunction with the operating system and provides calls to the operating system from Java programs or applications executing on data processing system . JAVA is a trademark of Sun Microsystems Inc.

With reference now to a block diagram of a data processing system is shown in which exemplary aspects of the present invention may be implemented. Data processing system is an example of a computer such as client in in which code or instructions implementing the processes of the present invention may be located. In the depicted example data processing system employs a hub architecture including a north bridge and memory controller hub MCH and a south bridge and input output I O controller hub ICH . Processor main memory and graphics processor are connected to MCH . Graphics processor may be connected to the MCH through an accelerated graphics port AGP for example.

In the depicted example local area network LAN adapter audio adapter keyboard and mouse adapter modem read only memory ROM hard disk drive HDD CD ROM driver universal serial bus USB ports and other communications ports and peripheral component interconnect PCI or PCI express PCIe devices may be connected to ICH . PCI PCIe devices may include for example Ethernet adapters add in cards PC cards for notebook computers etc. PCI uses a cardbus controller while PCIe does not. ROM may be for example a flash binary input output system BIOS . Hard disk drive and CD ROM drive may use for example an integrated drive electronics IDE or serial advanced technology attachment SATA interface. A super I O SIO device may be connected to ICH .

An operating system runs on processor and is used to coordinate and provide control of various components within data processing system in . The operating system may be a commercially available operating system such as the Windows XP operating system which is available from Microsoft Corporation. An object oriented programming system such as the Java programming system may run in conjunction with the operating system and provides calls to the operating system from Java programs or applications executing on data processing system . JAVA is a trademark of Sun Microsystems Inc. Instructions for the operating system the object oriented programming system and applications or programs are located on storage devices such as hard disk drive and may be loaded into main memory for execution by processor . The processes of the present invention are performed by processor using computer implemented instructions which may be located in a memory such as for example main memory memory or in one or more peripheral devices and .

Those of ordinary skill in the art will appreciate that the hardware in may vary depending on the implementation. Other internal hardware or peripheral devices such as flash memory equivalent non volatile memory or optical disk drives and the like may be used in addition to or in place of the hardware depicted in . Also the processes of the present invention may be applied to a multiprocessor data processing system.

For example data processing system may be a personal digital assistant PDA which is configured with flash memory to provide non volatile memory for storing operating system files and or user generated data. The depicted example in and above described examples are not meant to imply architectural limitations. For example data processing system also may be a tablet computer laptop computer or telephone device in addition to taking the form of a PDA.

Intrusion detection skin may simply be provided as a text based configuration file although a person of ordinary skill in the art will recognize that intrusion detection skin may also be provided as other data structures such as extensible markup language XML files databases tables and the like. Alternatively intrusion detection module may include or communicate with a graphical user interface not shown that may be used to create intrusion detection skin . For example intrusion detection skin may be created using a Web based user interface not shown .

Reports and errors may be presented on display for example or may be transmitted through a messaging delivery system not shown such as electronic mail for example. Statistics or metrics may include the number of violations the causes of violations how secure a database server is and so forth. Therefore intrusion detection skin allows the administrator to completely tailor the entire process of how databases are checked.

Intrusion detection module includes analysis manager which is pre loaded with default analysis unit including default analysis techniques that may be executed for intrusion detection. In accordance with a preferred embodiment of the present invention an intrusion detection system is provided for performing intrusion decision making using a plurality of approaches. Intrusion detection systems conventionally use one of several detection approaches. These approaches may include for example signature based anomaly based scan based and danger theory approaches.

A signature based approach uses a predefined pattern to map to a known intrusion. Patterns usually lie within auditing events of a system such as logs or records. Traditionally these patterns are generated by a developer or system administrator to evaluate network traffic.

An anomaly based approach uses a baseline in which complete knowledge of self or expected behavior is used to detect intrusions. Any deviations from this baseline of expected behavior is declared to be abnormal. The baseline may be gathered during a training or tuning phase. Traffic to and from a system or network may be gathered analyzed and stored.

Scan based solutions search for suspicious scans that occur outside of a firewall to gain knowledge about various resources such as what ports are available. Viruses and in particular worms seek to propagate by discovering vulnerabilities of other devices to which a device may be communicatively connected. A firewall may prevent many scan based attacks if it is perfectly configured. However a firewall is only as effective as the technician or administrator that configures it. Therefore a scan based intrusion system may identify pre attack scanning or reconnaissance activity before a potential intrusion occurs rather than waiting for the intrusion itself for detection.

A fairly recent intrusion detection approach being investigated is danger theory. In the danger theory approach a system may react to foreign substances or activities based on various danger signals. Once a foreign substance enters a system a danger response is activated. Upon a danger response a danger zone is used to surround the foreign substance. Sensors are created in the danger zone and the sensors are notified if a danger signal indicates a strong possibility of a malicious attack.

The existing intrusion detection approaches have tradeoffs. For a signature based approach an attack may go unrecognized if the pattern for the attack is new unknown or undefined. One must know the characteristics of the intrusion for the signature based approach to be effective. Numerous false positives can be produced because signatures for intrusions often resemble non threatening occurrences. False positives can greatly hamper the effectiveness of a system.

For anomaly based solutions an accurate and complete set of normal behaviors must be determined for intrusion detection to be effective. No predefined signatures are needed. However an anomaly based intrusion detection approach is likely to identify abnormal but harmless and normal but harmful intrusions. There is also a good chance that intrusions can strike without being detected.

In scan based approaches no predefined signatures or complete knowledge of normal behaviors are needed. However since scan based solutions rely solely on scans many intrusions may be undetected in the event that an attacker does not issue a scan to intrude a system. Attackers are quickly deriving new attack strategies thus complete reliance on one characteristic is very risky.

The danger theory approach may help alleviate the problem of non self but harmless and self but harmful intrusions that may be missed by anomaly based approaches. Danger theory may also address the fact that not all foreign activities will trigger a reaction. Discrimination between self and non self may still be used in danger theory but this discrimination is not required. The problem with the danger theory approach is that the exact nature of how to define a danger signal is unclear. Also there may be some dangers that should not trigger a reaction.

Analysis manager uses a plurality of approaches such as for example the above approaches to identify malicious activity. When event information is received each approach produces a result. A consensus of each result is then reached by using for example Bayesian Filtering. Corpora are kept for the plurality of approaches. Intrusion corpus keeps combinations of the corpora for all of the approaches that constitute intrusions. Safe corpus keeps combinations of the corpora for all of the approaches that do not constitute an intrusion. Corpora for analysis approaches may be pre defined according to security policies and the like. Intrusion corpus and safe corpus may be trained using scores that are determined using the detection approaches.

In the depicted example default analysis unit includes signature based analysis anomaly based analysis scan based analysis and danger theory analysis as well as corresponding corpora . Pluggable analysis module allows an administrator to add analysis approaches such as fifth analysis sixth analysis to nth analysis along with corresponding corpora to analysis manager .

Thus the administrator may use pluggable analysis module to supplement analysis module with additional analysis approaches on the fly. The administrator or other developer may program the additional analysis approaches in any programming language as long as they conform to an application programming interface API of pluggable analysis module . This is useful as security policies evolve with new or updated analysis approaches. Any number of analysis approaches may be added to analysis module via pluggable module .

Computing elements generate event information . Computing elements may be software programs running on a particular machine a hardware firewall or software firewall or other devices in a network such as network data processing system in . Analysis manager runs the analysis approaches against event information . Analysis manager sends analysis results to filtering mechanism which generates score . Score interpreter then interprets score and sends the results to intrusion manager .

Each analysis approach may be assigned a weight via intrusion detection skin . Of the approaches that the administrator indicates are to be executed analysis manager ensures that the assigned weights total 100 . Analysis manager also interfaces with policy checker to ensure no security policies are violated by any of the analysis approaches. If policy checker rejects an analysis approach analysis manager notifies the administrator and prohibits the analysis approach from being included as part of the intrusion detection process. No analysis approaches are executed unless approved by policy checker .

Policy checker checks policies from policy manager and applies the policies to analysis manager . Policy manager includes a policy unit that manages policy to policy m . The policy unit consists of the policies that are to be followed by intrusion detection module . An administrator may add modify remove or configure policies using pluggable policy module on the fly.

Policy manager may be preloaded with security policies that always need to be followed for distributed or autonomic computing elements. Policy manager also manages any policies within the policy unit. For example if a policy expires policy manager removes the policy from the policy unit. Policy checker ensures that requirements from the expired policy are no longer enforced. Policy manager inserts policies into the policy unit from pluggable policy module . Policy manager also can alert the administrator to assign priorities to policies requirements via intrusion detection skin when it detects that two or more security policies have varying requirements for the same item for example. Thresholds for a score can be set based on a security policy.

Policy checker enforces security policies managed by policy manager . No activity can be executed by analysis manager filtering mechanism score interpreter or intrusion manager without receiving approval from policy checker . Policy checker also reports any errors that occur during execution to intrusion manager .

Intrusion manager comprises reporting mechanism and resolution mechanism . Reporting mechanism controls how reporting of intrusions is handled. Resolution mechanism controls how resolutions to those intrusions are handled. Intrusion manager sends data to be reported to report file and sends any errors that occur during execution to error file . Reports may also be made to display which may be a terminal display or a remote device. Report mechanism may send intrusion information via a messaging system not shown such as electronic mail e mail or the like. For example report mechanism may send report message indicating discovered security violations to the administrator s mobile telephone device PDA text pager or the like.

The administrator may configure report mechanism to report additional information like security checks that pass as well as background information of the security policy from which each check originated how to resolve the violations etc. Thus report mechanism provides concrete evidence of how secure one or more distributed or autonomic computing elements are.

Resolution mechanism determines how intrusions may be resolved. The administrator may use intrusion detection skin to instruct resolution mechanism as to which intrusions are to be automatically resolved and how the intrusions are to be resolved. For example if a score is produced that identifies an infected computing element the responsibilities of that element may be delegated to another computing element while the infection is removed. Once the infection is removed the once infected computing element may resume its operations. If resolution mechanism is unable to resolve the violation it may immediately contact the administrator and make recommendations to the administrator on how to resolve the violation for example. This is a configurable feature.

Furthermore data produced from analysis manager is filtered by filtering mechanism to produce a score these scores are identified as being safe or an intrusion. Intrusion detection module identifies and keeps track of false positives and false negatives. As false positives and false negatives are identified the weights used by analysis manager are adjusted dynamically. These weights may be adjusted automatically as defined by intrusion detection skin and policy manager . Weights may also be adjusted manually by the administrator by modifying the weight information in intrusion detection skin .

The administrator assigns weights initially based on what he or she believes human expert input will accurately cover the rates of false positives and false negatives that may occur within a given environment. Intrusion detection module applies these weights and adjusts the weights to be more accurate after analyzing actual data obtained from execution in a given environment. In other words intrusion detection module adapts to the computing environment.

Intrusion detection module may be embodied on one or more devices within network data processing system . In an autonomic computing environment each device may be self securing. In other words each device in network data processing system may include the intrusion detection mechanism of the present invention. Note that components of intrusion detection module may be distributed across networks and still work together to complete intrusion detection analysis as described. For example the components of intrusion detection module may be on different systems. Other modifications to intrusion detection module may be made depending on the implementation.

Accordingly blocks of the flowchart illustrations support combinations of means for performing the specified functions combinations of steps for performing the specified functions and computer usable program code for performing the specified functions. It will also be understood that each block of the flowchart illustrations and combinations of blocks in the flowchart illustrations can be implemented by special purpose hardware based computer systems which perform the specified functions or steps or by combinations of special purpose hardware and computer instructions.

With reference now to operation begins and the administrator adds additional analysis approaches if any to the analysis manager through a pluggable analysis module block . The administrator then adds additional policies if any to the policy manager through a pluggable policy module block . The intrusion detection module loads an intrusion detection skin block and assigns weights to the analysis approaches block .

Next the analysis manager determines whether to execute analysis block . The analysis may execute the analysis approaches periodically based on an interval or schedule defined in the intrusion detection skin. Alternatively an administrator may manually instruct the analysis manager to execute the analysis approaches. If the analysis manager determines not to execute analysis block repeats.

If the analysis manager determines to execute analysis in block the analysis manager determines whether any analysis approaches are rejected by the policy checker block . If any analysis approaches are rejected the analysis manager disables the rejected approaches block and adjusts weights block . Thereafter the analysis manager determines whether at least one approach is to execute block . If all approaches are rejected by the policy checker the policy checker generates error information block and operation proceeds to block in described below.

If the analysis manager determines that at least one analysis approach is to be executed in block the filtering mechanism applies filters according to the intrusion detection skin and policies block and the intrusion detection module generates a score block . The intrusion detection module then interprets the score according to the policies block and provides the score interpretation to the intrusion manager block .

The intrusion detection module determines whether the score indicates a safe event or an intrusion block . If the intrusion detection module detects a safe event the intrusion detection module combines the corpora of the analysis approaches block and invokes the report mechanism according to the policies block . Thereafter operation proceeds to block in described below.

If the intrusion detection module detects an intrusion in block the intrusion detection module combines the corpora of the analysis approaches block . The intrusion detection module then invokes the report mechanism according to the policies block and invokes the resolution mechanism according to the policies block . Thereafter operation proceeds to block in .

Turning to in block the intrusion detection module determines whether a false positive or a false negative is identified block . If a false positive or false negative is identified the analysis manager adjusts the weights block and operation returns to block in to determine whether to execute analysis. If the intrusion detection module does not determine that a false positive or false negative is identified in block then the intrusion detection mechanism determines whether an exit condition exists block . An exit condition may exist for example if the intrusion detection module is terminated or if the intrusion detection skin is configured to only run a single set of analysis approaches. If an exit condition does not exist then operation returns to block of otherwise if an exit condition exists in block operation ends.

While in the example shown in the analysis manager adjusts weights responsive to a single false positive or false negative the analysis manager may alternatively adjust the weights of the intrusion analysis modules if a certain number of false positives or false negatives occur. For example the signature based analysis approach may be given a substantial weight by the administrator initially but then produce a large number of false positives when executed in a particular environment. In this case the analysis manager may decrease the weight of the signature based analysis approach to more accurately represent the rate of false positives that occurred.

Also a time threshold of when to automatically adjust the weights may be set in the intrusion detection skin. This may cause the analysis manager to collect one week of data for example and then adjust the weights of the analysis approaches accordingly.

Thus the present invention solves the disadvantages of the prior art by providing an intrusion detection mechanism for flexible automatic thorough and consistent security checking and vulnerability resolution in a heterogeneous environment. The mechanism may provide a predefined number of default intrusion analysis approaches such as signature based anomaly based scan based and danger theory. The intrusion detection mechanism also allows a limitless number of intrusion analysis approaches to be added on the fly. Using an intrusion detection skin the mechanism allows various weights to be assigned to specific intrusion analysis approaches. The mechanism may adjust these weights dynamically. The score ration can be tailored to determine if an intrusion occurred and adjusted dynamically. Also multiple security policies for any type of computing element may be enforced.

The invention can take the form of an entirely hardware embodiment an entirely software embodiment or an embodiment containing both hardware and software elements. In a preferred embodiment the invention is implemented in software which includes but is not limited to firmware resident software microcode etc.

Furthermore the invention can take the form of a computer program product accessible from a computer usable or computer readable medium providing program code for use by or in connection with a computer or any instruction execution system. For the purposes of this description a computer usable or computer readable medium can be any tangible apparatus that can contain store communicate propagate or transport the program for use by or in connection with the instruction execution system apparatus or device.

The medium can be an electronic magnetic optical electromagnetic infrared or semiconductor system or apparatus or device or a propagation medium. Examples of a computer readable medium include a semiconductor or solid state memory magnetic tape a removable computer diskette a random access memory RAM a read only memory ROM a rigid magnetic disk and an optical disk. Current examples of optical disks include compact disk read only memory CD ROM compact disk read write CD R W and DVD.

A data processing system suitable for storing and or executing program code will include at least one processor coupled directly or indirectly to memory elements through a system bus. The memory elements can include local memory employed during actual execution of the program code bulk storage and cache memories which provide temporary storage of at least some program code in order to reduce the number of times code must be retrieved from bulk storage during execution.

Input output or I O devices including but not limited to keyboards displays pointing devices etc. can be coupled to the system either directly or through intervening I O controllers.

Network adapters may also be coupled to the system to enable the data processing system to become coupled to other data processing systems or remote printers or storage devices through intervening private or public networks. Modems cable modem and Ethernet cards are just a few of the currently available types of network adapters.

The description of the present invention has been presented for purposes of illustration and description and is not intended to be exhaustive or limited to the invention in the form disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art. The embodiment was chosen and described in order to best explain the principles of the invention the practical application and to enable others of ordinary skill in the art to understand the invention for various embodiments with various modifications as are suited to the particular use contemplated.

