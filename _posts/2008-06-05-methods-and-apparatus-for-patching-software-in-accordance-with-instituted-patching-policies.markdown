---

title: Methods and apparatus for patching software in accordance with instituted patching policies
abstract: Techniques are disclosed for controlling software patching activity. Techniques may implement a software shell and institute a patching policy to control patching activities. When implemented, the software shell acts as a barrier which permits patching of the underlying software only when the patching activity would be in accordance with the instituted patching policy. Various patching policies can be instituted. Patching may be performed when convenient; or just before when the software requiring the patch is needed; or patching may be blocked to prevent unwanted software characteristics and/or behavior. Patching may be delayed until confidence has been established in a new patch so as to avoid disrupting a computer system that is already functioning in an acceptable manner. A particular software action may be blocked so as to avoid the necessity of having to patch software, particularly when the action may interrupt the orderly function of a computer system.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08271966&OS=08271966&RS=08271966
owner: International Business Machines Corporation
number: 08271966
owner_city: Armonk
owner_country: US
publication_date: 20080605
---
This application is a continuation of U.S. patent application Ser. No. 11 333 064 filed Jan. 17 2006 now abandoned.

The present invention generally concerns software patching and more particularly concerns methods and apparatus for implementing both software patching policies and a software shell that controls patching activities so that patching occurs in accordance with instituted patching policies.

Over the past decade or so a paradigm has developed governing how complex software including for example operating systems and application suites will be updated. Typically an operating system or application suite is released goes gold and is assigned one or both of a new name and a version number. Users of the operating system or application suite then typically find software faults bugs a number of which always seem to survive pre release testing. Those responsible for the operating system or application suite then release a series of so called patches which eliminate bugs found in the software. For a particularly complex computer program many such patches may be released.

Patching activity frequently occurs in parallel with identification of new and or enhanced features desired by users of the operating system or application suite or that are rendered necessary or even mandatory by technological developments. After enough enhancements are identified developed and beta tested the improved operating system or application suite is released as a new product. So a pattern develops of new release followed by patching activity followed by new release followed by patching activity . . . etc.

When presented with the availability of a new release users decide whether new features included in the new software release are needed. If not the user will not acquire the new release. Often the situation is more complicated with potential users holding back until first adopters report their experiences with the new release. If a consensus is reached in a user community that features of the new release outweigh drawbacks of the new release such as for example unnecessary modifications to user interfaces which need to be learned slowdown in overall performance due to increased code size or overall buggy performance of a heretofore stable program then those potential users holding back will purchase the new release.

The same concerns are reflected in decisions about whether to adopt new patches as they become available. Most user populations are aware of so called horror stories that accompany the reflexive and unthinking adoption of any and all software patches. For example an application suite which previously operated in a responsive mariner may now function in a less responsive manner due to a resource intensive software patch. In other situations the software patch may result in instability crashes when code associated with the patch is executed. It is not unusual for some users to have the feeling that they have become unwitting members in a beta testing program for the patch.

Such outcomes are particularly troubling when users realize after the fact that the applied patch concerned improvements to functionality that they may rarely or never use. It is well known in the art of computer software that particular users will rarely employ all of the functionality of a software system. Rather the full functionality of a software system is required in order to address a cross section of needs reflected in a target market. Accordingly it is often the case that a patch may fix a problem in functionality that is seldom or never used by a particular user.

When viewed from the perspective of a large corporation reflexive and unthinking patching activity may result in numerous inefficiencies when the activities associated with adopting a patch are aggregated across a corporation. A given patch consumes resources in several ways it may take network bandwidth to download storage space to store and computational cycles to install. Often more importantly the time and energy of a system user may be needed to decide whether to install the patch and if the user decides to do so to direct installation of the patch. Decisions about the advisability of installing a patch may depend on information which is not in the user s possession requiring the user to search for the information. The patch when installed may reduce the performance of the software system resulting in many users undoing the patch thereby incurring further inefficiencies.

Thus those skilled in the art desire improved methods and apparatus for controlling software patching activities. In particular those skilled in the art desire methods and apparatus for implementing control over patching activities. Further those skilled in the art desire methods and apparatus for providing software functionality capable of performing software patching activity in accordance with decisions made about when to patch.

A first embodiment of the invention comprises a signal bearing medium tangibly embodying a program of machine readable instructions executable by a digital processing apparatus of an electronic device to perform operations for controlling software patching activities the operations comprising instituting a software patching policy for controlling patching of software incorporated in the electronic device and patching software in accordance with the instituted software patching policy

A second embodiment of the invention comprises a signal bearing medium tangibly embodying a program of machine readable instructions executable by a digital processing apparatus of an electronic device to perform operations for controlling software patching activities the operations comprising implementing a software patch control shell for controlling patching activities associated with software incorporated in the electronic device instituting a software patching policy to be used by the software patch control shell for controlling software patching activities and applying the software patching policy as potential software patching opportunities occur.

A third embodiment of the invention comprises a system for managing software patching activity the system comprising a software patching activity manager the software patching activity manager comprising at least one memory to store at least one program of machine readable instructions where the at least one program performs operations for instituting and controlling a software patching policy a network interface for use in communicating over a network with a source of software patches and with electronic devices subject to the software patching policy at least one processor coupled to the at least one memory and network interface where the at least one processor performs at least the following operations when the at least one program is executed creating a software patching policy to be used by the electronic devices and issuing the software patching policy to the electronic devices through the network interface.

A fourth embodiment of the invention comprises a system for managing software patching activity the system comprising a software patching activity manager the software patching activity manager comprising at least one memory to store at least one program of machine readable instructions where the at least one program performs operations for instituting and controlling a software patching policy a network interface for use in communicating over a network with a source of software patches and with electronic devices subject to the software patching policy at least one processor coupled to the at least one memory and network interface where the at least one processor performs at least the following operations when the at least one program is executed creating a software patching policy to be used by the electronic devices and issuing the software patching policy to the electronic devices through the network interface.

In conclusion the foregoing summary of the alternate embodiments is exemplary and non limiting. For example one of ordinary skill in the art will understand that one or more aspects or steps from one embodiment can be combined with one or more aspects or steps from another embodiment to create a new embodiment within the scope of the present invention.

It can be seen from the figure and the description above that any use of system component can be accomplished with equivalent use of patch shell . In fact some of the entry points to the API of the patch shell may be identical to the entry points to the API of the system component. Those that are not are said to be monitored. Monitored API calls are first checked by the patch shell to see if they match any invocation syndromes. If they do it may be the case that this call invokes behavior for which a patch exists but where the patch has not yet been applied. Not shown in is reference by the patch shell to a policy database which controls what to do in this situation.

If the current call does match an active syndrome branch is taken to decision block which determines the policy for that syndrome. If the policy is to do nothing branch is taken to block previously described. If the policy is to block the API call branch is taken to block effectively ignoring the API call. If the policy is to patch branch is taken to block which installs the necessary patch. When that installation is complete block is entered as previously described.

Many forms of this invention are possible. In a preferred form syndromes patch shells policies and patches are installed and managed by a service. As previously noted the invention applies to all types of computing devices. The invention is not limited to the policies given here. In particular a policy may be to notify an end user or administrator to get their input before installing the patch. Patches may be applied if there are more than k invocations of the behavior where k is a parameter.

Alternate methods operating in accordance with the present invention will now be described with reference to . depicts a method generally applicable to an electronic device having a software suite requiring occasional patching. At step a digital processing apparatus incorporated in the electronic device executes a software program that institutes a software patching policy for controlling patching of software comprising the software suite. The computer program implementing the software patching policy typically runs continuously. When an opportunity for patching the software comprising the software suite arises the computer program patches the software in accordance with the software patching policy at step .

In one variant of the method depicted in the software patching policy allows a particular software patch to be implemented only if it is established that a user of the electronic device actually uses a software feature that requires the particular software patch. In another variant of the method depicted in the software patching policy allows a particular software patch to be implemented only at times that are convenient for the user of the electronic device. In a further variant of the method depicted in a software patch will be implemented on as needed basis. In other words application of a particular software patch will be held in abeyance until a time when a user of the electronic device has indicated that a software feature which requires the particular software patch will be used for a first time since the issuance of the particular software patch.

In yet another variant of the method depicted in the software patching policy is instituted on a category basis wherein certain categories of software patches will be implemented and certain categories of software patches will be blocked.

In a still further variant of the method depicted in additional steps are performed. In one additional step information is received that a particular patch which is otherwise desirable has a deleterious effect on operations of the electronic device only when a particular software feature is used. In another step the implementation of the particular software patch is permitted. In a still further step use of the particular software feature which causes the deleterious effect when using software which has implemented the particular patch is blocked.

In another variant of the method depicted in if it is determined that a particular software patch will not be implemented then an additional step is performed to block use of the software feature requiring the particular patch. This aspect of the present invention can be used when both the present state of the software without the patch and the patch itself are particularly problematic. For instance neither the un patched software feature nor the patch may operate in a satisfactory fashion.

In a further variant of the method depicted in the software patching policy that is implemented at may permit a second software patch to be substituted for a first software patch. This will accommodate situations where an improved patch has been developed as a substitute for a patch that has already been approved for installation.

Another method capable of operating in accordance with the present invention is depicted in . The method depicted in is intended for use by an electronic device having a software suite which requires occasional patching. When the method is incorporated in a computer program and the computer program executed the operations depicted in are performed. At step the computer program embodying the method implements a software patch control shell for controlling software patching activities associated with software incorporated in an electronic device. Next at step a software patching policy to be used by the software patch control shell for controlling software patching activities is instituted. Then at step the software patch control shell applies the software patching policy as software patching events occur. Generally software patching events occur as a source of software patches issues new software patches. Various software patching policies may be implemented in the method depicted in including policies similar to those described with respect to .

A further method depicted in is intended for use by a software patching activity manager like the patch manager depicted in . In the method at step the software patching activity manager institutes a software patching policy to be used by electronic devices accessible over a network in deciding whether to implement a patch. Then at step the software patching activity manager makes the software patching policy available to the electronic devices over the network. Next at step the software patching activity manager monitors a source of software patches. Then at step the software patching activity manager examines a particular patch issued by the source of software patches to determine whether the patch is permitted under the software patching policy. Next at step the software patching activity manager issues an advisory message to the electronic devices over the network indicating circumstances in which the particular patch issued by the source of software patches should be implemented.

In variants of the method depicted in various software patching policies may be implemented similar to those described with respect to .

Yet another method operating in accordance with the present invention is also intended for use by a software patching activity manager like patch manager depicted in . In the method depicted in the software patching activity manager creates a software patching policy to be used by electronic devices having software suites that require occasional patching at step . Then at step the software patching activity manager issues the software patching policy to the electronic devices over a network.

In a variant of the method depicted in the step of creating a software patching policy further comprises additional steps. In a first additional step the software patching activity manager analyzes patches available at the source of software patches. Then in another step the software patching activity manager determines which patches should be instituted in the electronic devices subject to the software patching policy. In other variants determining which patches should be instituted in the electronic devices subject to the software patching policy comprises additional steps. These steps may comprise gathering information concerning operational experiences with patches available at the source of software patches and adopting particular software patches for implementation by the electronic devices subject to the patching policy only if operational experiences with particular patches meet at least one predetermined criterion. Many predetermined criteria may be adopted in accordance with the invention such as for example a maximum acceptable number of faulty installations of the patch to be expected if the patch is adopted a maximum acceptable number of new but undesirable behaviors that the patched software now exhibits a maximum acceptable time required to install the software patch maximum acceptable level of resources required to implement the patch etc.

In another variant of the method depicted in the following additional operations are performed monitoring the source of software patches for new patches as new patches become available detecting a new patch examining the new patch issued by the source of software patches to determine whether the patch is permitted under the software patching policy and issuing an advisory message to the electronic devices indicating circumstances in which the new patch issued by the source of software patches should be implemented if at all. Before issuing an advisory message still further steps may be taken in this variant of the method depicted in . In one such variant the following additional operations are performed before issuing the advisory message monitoring sources reporting experiences with the new patch and issuing an advisory message allowing implementation of the new software patch in the electronic devices subject to the patching policy only if reported experiences with the new patch meet at least one predetermined criterion. In another such variant the following additional operations are performed before issuing the advisory message performing a cost benefit analysis of the new patch by comparing costs and benefits associated with implementation of the new patch and issuing an advisory message allowing implementation of the new software patch in the electronic device only if the new patch meets at least one predetermined cost benefit criterion. Various cost benefit criteria may be used such as for example user time necessary to implement the new patch cost of bandwidth necessary to download the new patch storage space required to store the new patch and user time necessary to undo the new patch if the patch is determined to be faulty.

One of ordinary skill in the art will understand that the methods depicted and described herein can be embodied in a tangible machine readable memory medium. A computer program fixed in a machine readable memory medium and embodying a method or methods of the present invention perform steps of the method or methods when executed by a digital processing apparatus coupled to the machine readable memory medium. Tangible machine readable memory media include but are not limited to hard drives CD or DVD ROM flash memory storage devices or in a RAM memory of a computer system.

Thus it is seen that the foregoing description has provided by way of exemplary and non limiting examples a full and informative description of the best method and apparatus presently contemplated by the inventors for patching software in accordance with instituted patching policies. One skilled in the art will appreciate that the various embodiments described herein can be practiced individually in combination with one or more other embodiments described herein or in combination with computer systems differing from those described herein. Further one skilled in the art will appreciate that the present invention can be practiced by other than the described embodiments that these described embodiments are presented for the purposes of illustration and not of limitation and that the present invention is therefore limited only by the claims which follow.

