---

title: Application data flow management in an IP network
abstract: Disclosed herein is a two-level, network-based application control (NBAC) architecture for monitoring services provided via a packet-based network. The NBAC architecture includes a Network Trigger System provided at a network level to analyze data flows relating to services to be monitored to detect occurrence of configurable events, and to generate and send event reports; and a Usage Status Engine provided at a control level to configure the Network Trigger System to detect occurrence of events of interest, and to receive and process the event reports from the Network Trigger System to monitor the services.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08504687&OS=08504687&RS=08504687
owner: Telecom Italia S.p.A.
number: 08504687
owner_city: Milan
owner_country: IT
publication_date: 20081126
---
This is a U.S. National Phase Application under 35 U.S.C. 371 of International Application No. PCT EP2008 066275 filed Nov. 26 2008 which was published Under PCT Article 21 2 the entire contents of which are incorporated herein by reference.

The present invention relates in general to application data flow management in an IP network and in particular to a two level network based application control architecture for monitoring services preferably Non Session based services provided via a packet based network.

Services that can be supplied to end users over a data network can be categorized in Session based services and Non Session based services. Generally services belonging to the first category are those that enable a multimedia session e.g. Audio and or Video to be provided by two network end points software user agents with the support of a signalling protocol towards a control plane used for proper negotiation of the characteristics of the connection between the two end users and of the flows corresponding thereto. Services belonging to the second category are those that generally do not require a signalling protocol at the control level such as peer to peer applications or applications linked to the distribution and use of multimedia contents and in general the services supplied in a client server mode. It should be noted that also for Non Session based services a signalling protocol could exists between then two end points but this signalling is confined to the Network Layer without involving a Control Layer.

In the last few years the Session Initiation Protocol SIP has became established as the principal signalling protocol for Session based services and has also been selected by the 3Generation Partnership Project 3GPP and by the Telecoms Internet converged Services Protocols for Advanced Networks TISPAN in the construction of the architecture of the IP Multimedia Subsystem IMS in the Next Generation Networking NGN .

The IMS is a standardised Next Generation Networking architecture for telecom operators able to provide mobile and fixed multimedia services. It uses a Voice over IP VoIP implementation based on a 3GPP standardised implementation of SIP runs over the standard Internet Protocol IP and supports both packet switched and circuit switched existing phone systems.

With regard to the Session based services IMS will enable quality guaranteed services to be supplied by network operators and service providers by controlling the network resources with the possibility of carrying out corresponding charging. A further functionality provided by the IMS architecture is the so called presence which enables real time user state information e.g. present occupied not available etc. to be provided to applications that are enabled to request such information.

However whilst the control of the Session based services is easily implementable thanks to the SIP and to its interaction with the control plane the majority if not all of the Non Session based services cannot rely on said interaction and hence the control also in relation to the multiplicity of the protocols involved in the Non Session based services is considerably complex.

This problem has been tackled in TISPAN a standardization body of ETSI specializing in fixed networks and Internet convergence Release 2 is in fact intended to support also Non Session based services and hence to provide also in these scenarios all those functionalities available in the IMS framework such as Presence Resource Monitoring Admission Control Policy Control and Accounting.

To this regard it should be pointed out that the Non Session based services are today extremely heterogeneous. Specifically Session based services can include Voice over IP VoIP Push to Talk Buddy List Click to Dial Location based info services FMC Fixed Mobile Convergence dual mode telephony while Non session based services can include IPTV Internet Protocol Television VoD Video on Demand video conferencing Peer to Peer P2P Services Gaming VoIP E Mail SMS MMS WEB Browsing Data transfer File Transfer Protocol FTP etc. .

In order to make the control layer application aware also for the Non Session based services it is necessary to make a considerable effort to improve the client server horizontal model i.e. a model that takes into account only of the signalling present at the Network Layer typical of these services and characterized by heterogeneous protocols and technologies with a mechanism that makes the control level aware of the service interactions.

The need to overcome the above mentioned limits has led to the adoption of a network based control framework which entrusts at least in part the network with the task of intercepting the client server horizontal communication flow during the use of a Non session based service and notifying particular events of interest of said activity to the control plane.

Based on this approach are the following patent applications WO 2005 101782 A1 entitled Method And System For Handling Content Delivery In Communication Networks which describes a network based mechanism for controlling Unicast streaming and WO 2007 073762 A1 entitled Method And System For Managing Multicast Delivery Content In Communication Networks which describes a network based mechanism for controlling Multicast streaming.

U.S. Pat. No. 6 052 730 addresses the problem of the network monitoring as regards the HTTP proposing a solution that enables monitoring of and active intervention on a browsing session without requiring any reconfiguration of the client or interaction with the logs of the other servers and without requesting information from other servers which cannot necessarily be controlled . The approach used is based upon re direction of the requests to an intermediate server proxy that effects the desired tracing and by modifying the hyperlinks and the references to the pages sent by the web servers visited leads the navigations of the browsing session to pass always through it.

In a similar way the solution proposed in EP 1 619 853 describes a system that enters as a proxy into the Real Time Streaming Protocol RTSP traffic between a client and a server and that instead of forwarding some RTSP messages from the client directly to the server and vice versa as a proxy would do forwards them to an external module referred to as a Streaming Session Extension Module SSEM which manages state logic and enables notification to external applications of the state evolution. The SSEM module then re forwards the message to the proxy module after having possibly modified it based on the needs of the external applications. Finally the proxy module sends the possibly modified message to the other end point client or server .

Further in the paper Network Event Recognition Karthikeyan Bhargavan and Carl A. Gunter March 2004 there is described an approach for testing the network protocols by capturing the communication flows assembling them at a high level and comparing analysing them with a finite state machine that describes the standard for that given protocol. In practice the method provides a language referred to as Network Event Recognition Language NERL that is able to describe the states and the events that generate the transition from one state to another so as to supply information useful for evaluating the compliance of the implementation of a given protocol to the standard and for diagnosing the errors by attributing them to the application or to the network.

Along this line in U.S. Pat. No. 6 741 595 a network processing system is described that is able to monitor the network traffic and capture and trace the IP communications that flow in the network. The system is able to scan the contents of the packets that traverse it to associate said packets to sessions or flows and to analyse them according to pre determined criteria in order to replicate save or re direct towards another destination just the flows or part thereof that meet the adopted search criterion.

A solution based on the Deep Packet Inspection DPI is proposed in US 2006 0195556 to P CUBE which discloses a method and an apparatus for identifying and monitoring events and sequences of events in a Service Aware Network. In particular this solution envisages 

Regarding the approach based on the application proxy the Applicant has noticed that it is particularly burdensome from the standpoint of the device design in so far as it calls for the realization of an application emulation module for each service protocol that it is intended to support. In this case a constraint of scalability in the device can also exists in so far as there is required specific processing by each software module dedicated to the service protocol that it is intended to handle. It should moreover be noted that in certain cases the realization of the software module may not be feasible and hence the module may not be available for integration in the device for example when the service uses proprietary and or undisclosed protocols such as some protocols used for Gaming P2P services VoIP EMAIL SMS . . . IPTV Video Conferencing Application on Demand .

Regarding the P CUBE solution the Applicant has noticed that it is based on some very constraining assumptions namely a probe should be arranged in a point in which all the user application traffic can be correctly analysed because the traffic analysis and the enforcement policy described in this document are based on information associated to the traffic available in the probe.

However certain applications use a plurality of flows simultaneously for example one for user signalling based on which application states are detected interception and one for the part of media traffic on which the actions envisaged by the enforcement policy are executed. In these circumstances the traffic classification and analysis mechanisms in the PCUBE probe may be vitiated by the cyphering of part of the traffic in the network area in which the probe is located. In fact for these applications by placing the probe where the traffic is cyphered it could lead to not distinguish the application states whilst by placing the probe where the traffic is not cyphered it could lead to lose data regarding the media traffic on which enforcement should be effected.

In this regard the Applicant has noted that two P CUBE probes do not interact for the purpose of exchanging complementary information since there is no hierarchical or topology component within them that can enable a probe to address acquired information to another probe nor a mechanism able to define a hierarchy between a master probe and a slave probe for carrying out a two level processing.

Due to the fact that the availability of the information necessary to activate the enforcement policy is not always guaranteed at a local level in the probe the P CUBE solution is not able to provide a mechanisms capable of obtaining an aggregated vision of the traffic detected by the various probes and consequently of applying the policies thereon but requires the policy to be applied by the probe that sees the specific application traffic.

The objective of the present invention is therefore to provide a network based application control architecture which enables the aforementioned drawbacks of the P CUBE architecture to be at least in part overcome.

This objective is achieved by the present invention in that it relates to a two level network based application control architecture for monitoring services provided via a packet based network and to a method for monitoring services provided via a packet based network as defined in the appended claims.

In broad outline the two level network based application control NBAC architecture includes a Network Trigger System NTS provided at the network level to analyze data flows relating to services preferably Non Session based services to detect occurrence of configurable events and to generate and send event reports and a Usage Status Engine USE provided at a control level to configure the Network Trigger System and to receive and process the event reports from the Network Trigger System to monitor the Non Session based services.

For the purpose of the present invention for control level it is intended the portion of a overall network architecture comprising systems not placed on data path and therefore not involved in the traffic transport forwarding but aimed to act on said traffic applying specific control logics in order to enforce the processing that the on data path components network level will do in transporting forwarding the traffic.

Such a two level control architecture wherein the application flow interception level is separated from the proper correlation and control level reduces the complexity of the analysis of a protocol as compared to classic approaches e.g. NERL leaving the actions corresponding to the traffic pattern matching hence the ones that can be easily carried out by hardware systems for the Deep Packet Inspection to be carried out at a low level and delegating to a high level aggregation of the information and management of the state transitions. Additionally this approach considerably facilitates the creation of a cross service control i.e. one that allows simultaneous access to different services by the same user to be monitored.

The following description is presented to enable a person skilled in the art to make and use the invention. Various modifications to the embodiments will be readily apparent to those skilled in the art and the generic principles herein described may be applied to other embodiments and applications without departing from the scope of the present invention. Thus the present invention is not intended to be limited to the embodiments shown but is to be accorded the widest scope consistent with the principles and features disclosed herein and defined in the attached description and claims.

The present invention is based on a two level multiprobe network based application control NBAC architecture which envisages the use of a centralized correlation component based on finite state logics FSA Finite State Automaton . At a general level the NBAC acts between a generic Service Requester and one or more Application Services and enables Non Session based services such as client server ones that travel on the network on which NBAC acts to be controlled. The NBAC can be considered of a passive type as it performs its own analysis by observing the network traffic without modifying it. Additionally NBAC enables activation of actions linked to the evolution of the application usage session in question that can actively act upon the service flow e.g. policying stop adaptation .

In particular as shown in in greater detail the NTS carries out a network triggering function which generates events triggers based on a traffic pattern matching based on Deep Packet Inspection DPI and ISO OSI network model layer 3 4 filtering wherein the IP header the higher levels headers and possibly also the whole payload are analyzed. Simultaneously the NTS extracts some communication parameters from the analysed traffic and sends the extracted communication parameters in real time to the USE which carries out an information management function wherein specific FSAs handle the events and determine the state transitions and the associated actions in addition to storing the information provided by the NTSs.

Configuration of the NBAC architecture occurs both at a triggering level NTS configuration and at a management level USE configuration . Specifically the NTS configuration occurs via the definition by system configuration messages sent by the USE to the NTS of the traffic analysis parametrization in particular the patterns to be searched for in the traffic for generating the event reports triggers . The USE configuration provides for the events sent by the NTSs to be appropriately processed and associated with specific FSA templates that are designed to take charge of the sequence of events for a specific service and to describe the evolution of the states within the template according to the events including the definition of the associated actions to be carried out referred to as callbacks or procedural attachments. The procedural attachments are actions for example parametric scripts that are carried out either directly on the USE or indirectly by interacting with other control systems in the network.

Preferably the NTS is configured to intercept and identify the new connections to a Non Session based service in the network and notify them to the USE according to a shared formalism that depends on the protocol used during the connection e.g. RTSP WMV etc. . In particular the NTS generates event reports and sends them to the USE via user event status messages thus generating a vertical signalling with respect to the horizontal protocol used in the user plane. The USE receives the event reports from the NTS and the data related to the various connections and stores them in an internal database state repository possibly correlating the received data with other data received by other NTSs so as to make them subsequently available to the queries coming from outside for example through the user of a WEB service.

The USE may be operatively described with an FSA defined as follows FSA Set of States Set of Final States Set of Labels Events S Transition Function wherein Sis an initial state and the phases of the connection to an application service can be associated with the states of the FSA and the evolution from one phase to another with the state to state transitions. The evolutions from one phase to another are activated upon occurrence of given events which in the example considered can be identified as the states in which a client server connection is in a given instant and are triggered by the NTS.

An extended FSA may be defined as follows FSA Set of States Set of Final States Set of Labels Events S Transition Function Callback Function

With reference again to the USE is also delegated both to the local configuration information provisioning and to the NTSs or the FSA management. In particular the USE creates the internal templates for the FSAs associated with a generic service Application Flow Description and activates at the network level the triggering of the patterns of interest and the capture of the application usage parameters Application Event Triggering . At run time the USE creates and associates an FSA with each application usage session traced by the NTSs and updates the state thereof via the labels received therefrom integrating it with the application usage parameters acquired at the network level Application Usage Tracing .

The NTSs in the network use the configuration parameters sent by the USE to activate the triggering and to generate and send to the USE in real time the labels provided during configuration when the patterns associated with the network traffic are detected. The NTSs can carry out a triggering at various ISO OSI network model layers L3 L4 L7 on the network traffic according to what is envisaged during configuration.

At each state transition the USE registers automatically and in real time on the internal database the application usage parameters detected by the NTSs and specified during configuration. Finally the USE manages activation according to the evolution of the individual FSAs of the specific actions procedural hooks defined in the configuration step. These actions can normally use all the application usage information gathered and saved up to that point in the internal database.

The individual FSA templates that describe in the USE the corresponding specific services the set of the different patterns that an NTS should seek in the network triggers and the format of the corresponding signallings labels are defined via appropriate configuration settings described for example by an XML document. This configuration file is read by the USE which sets its own internal FSAs and sends appropriate configuration messages to the NTSs for pre arranging them to operate on the network traffic provisioning . This approach is particularly useful because it allows extracting from the network traffic only some specific signallings which although depending on the protocol may be associated to logics which are valid for extended groups of protocols. The NBAC architecture enables the complexity of the event analysis to be decomposed in two levels 

The traffic based triggering pattern matching is then carried out in the NTS which uses dynamically the operative configuration defined for the FSAs that reside in the USE. The results of the NTS tracings generate labels which are sent to the FSAs the labels correspond to the events of the individual FSAs and determine the state to state transitions thus causing evolution of the internal representation of service considered.

The NBAC architecture enables some scenarios of interest to be achieved such as for example the control of the previously mentioned Non Session based services. Generally the task of the various FSAs is to follow the evolution of the traffic generated by a single application usage session and to trace at a higher level the entire flow of the events bringing them down in the USE to a representation uniform to all the protocols. This modality enables the representation of the different protocols to converge towards a virtual representation that is unique and homogeneous irrespective of the service considered and its technological platform. This allows an operator to concentrate on the definition of the states that are of real interest for its purposes and of the actions that it is of interest to carry out thereon.

As already stated above the description of the various FSAs for the USE and the set of the different labels the lambdas that the NTSs have to search for in the network are defined via a XML format configuration document where a section for each protocol handled by the system is provided. This configuration file is read by the USE which sets its own internal FSAs and sends configuration messages to the various NTSs.

In general a plurality of triggers are present each of which specifying the pattern to be sought in the network the label to be produced and sent to the corresponding FSA and a possible action to be requested.

A possible syntax of the elements pattern label and action in the configuration file is given hereinafter.

The element pattern contains whatever is necessary to enable the NTS to capture the useful traffic and may comprise the following three sub elements 

Just one sub element for each type can be present within the element pattern which consequently can contain from one sub element to a maximum number e.g. three of sub elements. The search for the pattern within the dump is successful only if all the sub elements present have been found.

The binary syntax of the elements L3 header and L4 header is similar and differs from the textual one of L7 payload. A possible binary syntax for the sub element L3 header may include the following elements 

The example indicates that in the traffic that goes to the server 1 byte is to be taken starting from the 14 th byte hence only the 15 th byte. Of the latter only the last four bits are to be taken into consideration which are to be compared with 0100 and if the outcome of the comparison is positive then the pattern has been found and the corresponding label is to be created.

The binary syntax of the sub element L7 payload contains whatever is necessary to enable the information within the message payload to be captured. A possible syntax for the sub element L7 payload may include the following elements 

The example indicates that the messages destined to the server and which contains the string PLAY RTSP are to be considered. This string is used as start trigger in the search for further elements parameters within the message and in particular the system considers as host the next string up to the stop character assigning the corresponding variable and then considers as URI the next string for the file extension .rtsp once again assigning the corresponding variable.

The element label is used to indicate to the system how to notify to the USE the captured traffic. Consequently the element label contains an identifier of the type of observed traffic called event and a list of the variables of interest. These variables can be embedded information recovered by the system from the analysis of the captured traffic at layer 3 4 the quintuplet constituted by the IP addresses the client server ports and the layer 4 protocol and or variables defined through the configuration file and valued on the basis of the captured traffic. The variables passed to the USE can be used as a key possibly together with other values that can be detected in the network and are unique for the captured traffic such as for example the VLAN Virtual Local Area Network ID to address the correct FSA instance and appropriately updating the state descriptor record of the connection in the History Database. In this way it is possible to configure FSA instances capable of receiving labels corresponding for example to a certain protocol if the entire quintuplet is inserted in the label or to a certain client if in the label just the IP address of the client is inserted .

For the RTSP traffic taken as example the data useful for the construction of a label corresponding to a certain event in the example referred to as START are data regarding the layer 4 protocol the event addresses and connection ports and reference URLs 

Finally the element action enables specification of a possible action or command to be undertaken when an event occurs.

In addition to the triggers for each protocol an indication of the command or of the module for example tcpdump snoop the library libpcap the library jpcap syslog daemon etc. to be activated for intercepting the significant traffic on the network may also be present. It should also be possible to send configuration parameters useful for activation of functions such as the interface on which the traffic of interest is to be observed the filters to be set on the traffic captured etc.

The NTS can be any network or software element capable of intercepting network traffic for example a probe provided that it can be configured remotely through a configuration file similar to the previously described XML file and that it is able to notify the observed events to the USE through the generation of labels. As already stated the USE is able to handle the data detected in the network by the various NTSs and its operation is based on the FSAs.

The configuration of each FSA is carried out by the FSA Configurator starting from an XML configuration document. For each protocol an element protocol name exists which contains just two tags one for the USE and the other for the NTS 

The various elements have the purpose of describing states events and transitions. The element states contain the following sub elements 

The element states contain the name of the state the elements startingstate and stoppingstate indicate the initial and final states and the element hookstate indicates which callback function is to be called when the state is reached by the FSA. There may be none one or more elements hookstate in each state. Additionally since in an FSA there may be one or more final states whereas there is only one initial state in the XML document there is only one startingstate but there may be more stoppingstate.

A similar configuration mode applies to the events. The name of the event is declared and the hook events are defined 

The callback tags bear one or more functions that will be carried out upon their invocation by the hooks defined previously 

The USE is modelled so as to handle an arbitrary number of different protocols possibly represented by a number of data flows. The task of following the various steps of each individual connection is entrusted to the FSA specialized for a data protocol. In particular for each connection analysed an FSA instance is created using the corrected parameters states labels transitions and hooks and starting from a FSA template model described in the configuration step for that given protocol.

This activity is performed by the FSA Generator the operation of which is shown in using the Unified Modeling Language UML convention wherein the actors are represented by human figures corresponding to software modules and the actions performed are indicated by arrows. The actor that causes starting of the creation chain is the NTS which performs the dump of the network to search for the pattern for which it has been set. In the examples previously considered a particular pattern is the setup one that causes a new connection to start. When the NTS finds in the network a setup packet it sends the information contained therein to an engine module of the USE referred to as MultiFsaEngine. The MultiFsaEngine interprets the label received and since it does not refer to any already existing FSA it requests the FSA Generator to create a new FSA specifying the type of protocol to be configured.

For each managed protocol a MultiFSAEngine is automatically created which manages the FSAs for that particular protocol. It acts as a container of FSAs and basically performs the following tasks 

Each FSA in a MultiFSAEngine follows the steps of a single connection in the network. The number of engine modules can vary from one application usage session to another on the basis of the supplied configuration. When it is desired to manage a new protocol it is sufficient to modify the configuration document taking care to add the dump of interest the parameters and the description of the FSAs also for the new protocol.

Each FSA may implement a common pool of functions supplied by a module referred to as FunctionFactory namely 

Such internal functions may also include a generic EXEC which enables a program external to the USE to be executed and context parameters of the connection in question e.g. FSA name quintuplet state event transition variable1 variable2 variable3 . . . to be provided to it.

The proposed NBAC architecture allows several functionalities to be implemented which will be hereinafter briefly explained.

Resorting to a two level control architecture wherein the application flow interception level is separated from the proper correlation and control level considerably facilitates the creation of a cross service control i.e. one that allows simultaneous access to different services by the same user to be monitored.

For example shows a network scenario in which a network operator provides a user with a free or flat access only to the e mail service supplied by its Mail Server and limit the access to the Internet to just the web contents referenced in the e mail body for example images or sounds available on network servers downloaded by the user. In this service all the other accesses should be enabled only upon request and appropriately billed e.g. on a time basis.

A control architecture of the type shown in with the aid of the FSAs shown in enables what had previously been described. In particular with reference to the NTS NTS arranged in front of the Mail Server is able to detect downloading of a new e mail based on the analysis of the POP3 IMAP control messages e.g. triggering the POP3 command RETR to retrieve a message to determine the HTML tags contained in the body of the e mail message and to notify to the USE FSA the URLs of the objects to be accessed. For each URL the FSA issues an enabling command to the Internet Gateway Proxy and subsequently withdraws it at the moment in which the NTS NTS arranged along the HTTP downloading path detects completion of the corresponding HTTP GET method for accessing the mentioned URL. shows a hypothetical FSA intended to control the e mail traffic for a scenario of this type regarding POP3 and HTTP WEBMAIL protocols. The considerations previously made however may be extended to other standard protocols e.g. IMAP or proprietary protocols. As it may be appreciated the e mail parsing is triggered by sending from the client a RETR or TOP message in the case of POP3 traffic or else a HTTP GET possibly to the specific servers managing the service in the case of web access to the mailbox webmail . Whenever in the body of the e mail an HTML tag of the type src http is detected the FSA commands the Internet Gateway Proxy via appropriate callback to enable temporarily the URL requested for the currently processed user . The FSA terminates when the server notifies to the client the termination of the message or when the client explicitly requests termination of the transmission in progress QUIT message .

2. Real time Detection Management of Application Presence Information Presence Network Agent for Non Session Based Services.

By using the NBAC solution it is possible hypothesize advanced control scenarios that envisage for example 

For the HTTP streaming traffic an FSA of the type shown in is created. It uses Layer 4 7 DPI functions supplied by the NTS and envisages 

Likewise for the multicast traffic an FSA of the type shown in is created. It uses Layer 3 DPI functions supplied by an NTS and envisages 

3. Binding of Network and Service Capabilities to Users when Accessing to Over the Top OTT Services e.g. Youtube Google .

The real time association of an additional capability feature for example QoS localization advertising accounting tracing to a current user access request according to a network based logic is shown in and envisages that a user access request for a generic application is recognized by the network and appropriately notified to the control layer which implements logics of association of capabilities with the specific user TCP connection s .

At the end of the fruition the control system releases the resources associated with the capabilities Z possibly allocated to the user TCP connection s X Y .

The advantages of the present invention are evident from the foregoing description. In particular the present invention allows the previously described problems associated with the prior art approaches to be overcome with an architecturally and implementationally simple solution.

Finally it is clear that numerous modifications and variants can be made to the present invention all falling within the scope of the invention as defined in the appended claims.

