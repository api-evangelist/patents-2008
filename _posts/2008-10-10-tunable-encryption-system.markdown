---

title: Tunable encryption system
abstract: A method, programmed medium and system are provided for enabling a user to choose a user-preferred encryption type from among a plurality of encryption types listed in a user's Kerberos configuration file. During the ticket granting process in a Kerberos system, a user is requested to select a preferred encryption type to be used in the Kerberos communication from among encryption types contained in the user's Kerberos configuration file. The user-selected encryption type is then implemented for use in encrypting a session ticket (as well as generating the session key of user requested encryption type) for use by the user machine in communicating securely with an Kerberized application server when being communicated by that particular user. Thus, the system allows different users to simultaneously communicate with the same Kerberized application server using a supported encryption type of the user's own choice.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08756429&OS=08756429&RS=08756429
owner: International Business Machines Corporation
number: 08756429
owner_city: Armonk
owner_country: US
publication_date: 20081010
---
The present invention relates generally to information processing systems and more particularly to an improved methodology and implementation for networked communication systems.

In requesting an operation to be performed by a server being accessed by a user it is often necessary to confirm the identity of the user before the requested operation for example the accessing of an identified user account can be performed. Traditional authentication methods are generally not suitable for use in computer networks where attackers can monitor network traffic and intercept passwords. The use of a strong authentication method is therefore needed to avoid the interception of sensitive information such as passwords user IDs account numbers and the like. The Kerberos system is an authentication system designed to authenticate without passing the user password over wire and to enable an exchange of private information securely across an open network.

In general the Kerberos process includes a ticket granting service TGS to assign a unique key or ticket to each user that logs on to the network. The ticket is then used for authentication and per message encryption. The Kerberos system is a distributed authentication service that allows a client running on behalf of a principal or user to prove its identity to a verifier such as an application server without sending authentication data user password across a network that might allow an attacker or the verifier to subsequently impersonate the principal.

In a Kerberos system the session ticket issued by TGS contains the session key and the computed encryption algorithm that is to be used by the client and the server for secure communication. In the current implementation of Kerberos protocol the encryption type encryption algorithm that is used for secure data transfer between the client and the server making use of the Kerberos protocol uses as the encryption type the first encryption type match between the list of encryption type entries present in the krb5.conf file Kerberos client configuration file on the client machine and the list of encryption types encryption algorithm supported by the server s Kerberos principal entry present in the KDC database during the formation of the session ticket by the Ticket Granting Service TGS initiated by the client machine.

There is a single Kerberos configuration file krb5.conf file on every client machine having the administrator defined list of available encryption types. The encryption algorithm that will get selected for secure communication between the client and the server will be the same for all users on the client machine. So for example if DES3 is the first entry in the Kerberos configuration file krb5.conf on the client machine and if the server supports for example DES DES3 and AES encryption algorithms then all users on the client machine will have to communicate with the server only in DES3. If one of the users on the client machine wants to communicate in AES a higher degree of security while some other user logged on to the same client machine at the same time wants to communicate with DES encryption type a less secure but possibly a moderately faster encryption type this can not be accomplished. With the current implementation both users will have to communicate with DES3 encryption type as it is the first entry in the configuration file. So even though a server supports both AES and DES the users are forced to use the DES3 encryption type that is defined as the first encryption type in the Kerberos configuration file as the first match decides the encryption type to be used between the client and the server .

Thus there is a need to provide an improved Kerberos system in which users are provided means by which users may select different encryption types from among a plurality of encryption types contained in a Kerberos configuration file.

A method programmed medium and system are provided for enabling a user to choose a user preferred encryption type from among a plurality of encryption types listed in a user s Kerberos configuration file. In one example during the ticket granting process in a Kerberos system a user is requested to select a preferred encryption type to be used in the Kerberos communication from among encryption types contained in the user s Kerberos configuration file. The user selected encryption type is then implemented for use in encrypting a session ticket as well as generating the session key of user requested encryption type for use by the user machine in communicating securely with an Kerberized application server when being communicated by that particular user. Thus the system allows different users to simultaneously communicate with the same Kerberized application server using a supported encryption type of the user s own choice.

The various methods discussed herein may be implemented within a computer system which includes processing means memory storage means input means and display means. Since the individual components of a computer system which may be used to implement the functions used in practicing the present invention are generally known in the art and composed of electronic components and circuits which are also generally known to those skilled in the art circuit details beyond those shown are not specified to any greater extent than that considered necessary as illustrated for the understanding and appreciation of the underlying concepts of the present invention and in order not to obfuscate or distract from the teachings of the present invention. Although the invention is illustrated in the context of a networked computer system it is understood that disclosed methodology may also be applied in many other available and future devices and systems such as cell phone networks and personal wireless and other hand held devices and networks to achieve the beneficial functional features described herein.

The system describes a technique for providing tunable encryption types for every individual user or for a group set of users with valid Kerberos credentials accessing storage via secure Kerberized communication without any change required in the Kerberized application program. The system does not have a user desired or policy governed encryption type associated to only a particular system but one that is applicable for a particular user throughout the Kerberos realm without use of any static configuration file.

In an exemplary embodiment illustrated in a Kerberos server a Kerberos client machine and a Kerberized application server where the Kerberized application server can be a Network File System V4 NFS V4 server exporting file space are all configured for Kerberos system operations. Every individual user logged into the client can select his her own encryption type to communicate with the server and application server . The selection of the encryption type will be user based and not machine based. Hence unlike current systems where all logged in users on a system use the same encryption type for secure communication with the proposed system different users logging into the same machine will be able to securely communicate with the Kerberized application server with different encryption types e.g. accessing Kerberized NFS V4 server file space with different encryption algorithms . Moreover this feature is optional and hence if the user desires to make use of the existing behavior he she is able to accomplish that as well.

The illustrated system allows the designing of solutions typically Information Lifecycle Management ILM based solutions so that different information documentation will be able to use different encryption types based on the accessing user when used in NFS V4 environment using Kerberos. For example it will allow solutions to define rules policy such that information hosted by NFS V4 server when accessed by finance department will use stringent encryption algorithm as confidentiality is critical while information being accessed by for example inventory department from the same NFS V4 server will use less stronger encryption algorithm from the same machine at the same time as confidentiality is moderate and access speed required is relatively high which is not currently possible. In current implementations the encryption types used for TGS are decided from the Kerberos applications perspective or the client machine configuration. In the illustrated system a Kerberos user specific encryption is implemented for the entire realm rather than only application or client machine specific.

While creating the Kerberos principal for a user the administrator explicitly specifies the user desired user specific encryption type as a part of the Kerberos principal attribute. In an AIX implementation this is possible by using the existing Kerberos user management commands like addprinc e and modprinc e via the Kerberos kadmin interface where kadmin is the AIX Kerberos user management console . As a result of this step the entered encryption type will be stored as the highest preferred encryption type for the user in the database . It will be this encryption type which will be given highest preference during encryption negotiation to generate a session key to be used by the user during Ticket Granting Ticket TGT operation e.g. kadmin addprinc e AES john deo.

Next the user initiates a command to acquire Kerberos Credentials i.e. to provide user with the facility to specify the desired encryption type to be used for secure Kerberized communication for that session by the user. This user selected encryption type will be used for session key obtained through TGS. The kinit command is used by user to authenticate to the Kerberos server and get the TGT and subsequently TGS will be enhanced with a e option. The e option will accept various encryption types supported by the Kerberos flavor as its argument e.g. AES 3DES DES RC 4 etc . When the user executes the kinit command to authenticate to Kerberos and get valid credentials via KDC Key Distribution Center data and stored encryption information file which the user has to before accessing Kerberized NFS V4 he she will specify the encryption type using the new flag e.g. kinit e AES john doe . This will result in user getting a Kerberos credential TGT with AES being used as the encryption type.

Next the user executes the command to use the Kerberized application e.g. User access Kerberized NFS V4 directories . This step generates the service ticket TGS for the user to communicate securely with the Kerberized application server . Instead of using the list of encryption types from the default tgs enctypes entry in the client machine s krb5.conf file the Kerberos library code algorithm is modified to fetch the encryption type specified by the user i.e. the encryption type mentioned in the credential and associated with the TGT . This encryption type will be sent to the KDC while obtaining the service ticket for the application server . The KDC will look if the application server supports the mentioned user specified encryption type and if so will generate a service ticket and a session key of the user desired encryption type and pass it to the user.

The user will then make use of this session key of his her desired encryption type to securely communicate with the Kerberized application server . Thus for different users the client application can obtain Service Ticket with different encryption types which is not possible in current implementations. So with the disclosed system it is possible to have two users logged into the same system where one user makes use of AES encryption type while the other makes use of RC 4 encryption type and both operations may even occur simultaneously. The terminologies used herein e.g. TGT TGS KDC session key session ticket etc. are specific to Kerberos protocol and details on it can be found in Internet Engineering Task Force IETF Request For Comments RFC 4120. AES Advanced Encryption Standard 3DES Triple Data Encryption Standard DES Data Encryption Standard RC 4 ARCFOUR referred herein are typical encryption algorithms or encryption types supported by Kerberos protocol.

Thus the exemplary flowchart illustrated in shows the modified sequence of operations performed in the kinit program use to obtain TGT. The kinit program processes input parameters required for kinit . It forms the list of encryption types by reading the krb5.conf file . The program checks if the input parameters enlist option e then it prepends that encryption type to the list of encryption types created before in . The kinit program then contacts KDC as stated in for getting the ticket TGT .

Thus as illustrated in the modified sequence of operations performed while getting the session ticket from TGS includes forming the list of encryption types by reading the krb5.conf file . Next a check is made to determine whether the TGS requested is of the user desired encryption type if so the credential file is read and the encryption type of TGT is prepended to the list of encryption types which was prepared earlier in step . Next the KDC TGS is contacted to get the session ticket .

It is noted that the objectives stated above may be implemented in many different schemes and processes other than the specific changes described in the above examples without departing from the scope of the present disclosure. The details of the Kerberos handshake and generation of tickets can be found in Internet Engineering Task Force IETF Request For Comments RFC 4120.

The method and apparatus of the present invention has been described in connection with a preferred embodiment as disclosed herein. The disclosed methodology may be implemented in a wide range of sequences menus and screen designs to accomplish the desired results as herein illustrated. Although an embodiment of the present invention has been shown and described in detail herein along with certain variants thereof many other varied embodiments that incorporate the teachings of the invention may be easily constructed by those skilled in the art and even included or integrated into a processor or CPU or other larger system integrated circuit or chip. The disclosed methodology may also be implemented solely or partially in program code stored in any media including any portable or fixed volatile or non volatile memory media device including CDs RAM and Flash memory or other semiconductor optical magnetic or other memory storage media from which it may be loaded and or transmitted into other media and executed to achieve the beneficial results as described herein. Accordingly the present invention is not intended to be limited to the specific form set forth herein but on the contrary it is intended to cover such alternatives modifications and equivalents as can be reasonably included within the spirit and scope of the invention.

