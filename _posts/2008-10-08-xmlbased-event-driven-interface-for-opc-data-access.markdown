---

title: XML-based event driven interface for OPC data access
abstract: Communication from applications may be carried in XML-based events through sockets, Web services, JMS, HTTP, telnet channels, and the like to an OPC client. The OPC client may include an event engine configured to process the XML-based events, and convert them to appropriate COM/DCOM API invocations. In some embodiments, the OPC client buffers collected data from the COM/DCOM API, and transmits the buffered data in an XML event to an application based on a subscription time schedule and/or value condition. The OPC client allows service oriented event-driven applications to interact with industry devices remotely via the open architecture provided by the OPC specification using a business level language syntax.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08196155&OS=08196155&RS=08196155
owner: Oracle International Corporation
number: 08196155
owner_city: Redwood Shores
owner_country: US
publication_date: 20081008
---
The present invention relates to industrial automation. More specifically the present invention relates to an XML based event driven interface for OPC Data Access.

OPC or Open Connectivity provides open standards specifications developed for communication of real time data between control devices from different manufacturers. In general OPC is a series of standards specifications. The first standard originally called the Object Linking and Embedding OLE for Process Control OPC Specification is generally called the Data Access Specification or OPC Data Access. 

The OPC Specification is based on the OLE common object model COM and distributed COM DCOM technologies developed by Microsoft for the Microsoft Windows operating system family. The specification defines a standard set of objects interfaces and methods for use in process control and manufacturing automation applications to facilitate interoperability hereinafter the OPC Data Access interface .

OPC servers typically provide a method for many different software packages to access data from a process control device such as a process or programmable logic controller PLC or distributed control system DCS . Traditionally any time an application needed access to data from a device a custom interface or driver had to be written. The purpose of OPC was to define a common interface or API that is written once and then reused by different software packages. Once an OPC server is written for a particular device it can be reused by any application that is able to act as an OPC client.

However traditionally the OPC interface has been restricted to the Microsoft COM DCOM framework. Automation applications written with in other languages such as Java J2EE especially in service oriented event driven architectures cannot access the OPC Data Access interface in a direct and straightforward manner as OPC clients. This limitation complicates the development of components that link enterprise software to industry devices. Thus many enterprise software packages do not have access to industry devices and data exchange is done through a manual process.

Accordingly what is desired are improved methods and apparatus for solving the problems discussed above. Additionally what is desired are improved methods and apparatus for reducing some of the drawbacks discussed above.

The present invention relates to industrial automation. More specifically the present invention relates to an XML based event driven interface for OPC Data Access.

In general communication from applications are carried in XML based events through sockets Web services JMS HTTP telnet channels and the like to an OPC client. The OPC client may include an event engine configured to process the XML based events and convert them to appropriate COM DCOM API invocations. In some embodiments the OPC client buffers collected data from the COM DCOM API and transmits the buffered data in an XML event to an application based on a subscription schedule. The OPC client allows service oriented event driven applications to interact with industry devices remotely via the open architecture provided by the OPC specification using a business level language syntax.

In various embodiments techniques can be provided for communicating with a device. In response to receiving an XML event from an application a set of calls for an interface associated with a device may be determined based on the XML event. The set of determined calls may be then invoked to control the device. Determining the set of calls for the interface may include translating the XML event into one or more calls in the set of calls.

In some embodiments data may be received in response to controlling the device. At least one of a time interval for a time based subscription or value condition may be examined. Another XML event may then be generated based on the data. The generated XML event may be transmitted to the application such as based on the time based subscription or value condition. In further embodiments determining the set of calls for the interface may include determining a plurality of calls. Data for each call in plurality of calls may be received in response to controlling the device. An XML event may then be generated based on aggregating the data for each call in the plurality of calls.

A further understanding of the nature and the advantages of the inventions disclosed herein may be realized by reference of the remaining portions of the specification and the attached drawings.

In various embodiments a system for OPC Data Access allows service oriented event driven applications to interact with industry devices remotely via the OPC architecture using a business level language syntax. In general communications to and from applications are carried in XML based events through sockets Web services JMS HTTP telnet channels and the like. To control devices remotely the applications send XML events to an OPC client that processes the XML based events and converts them to appropriate calls or invocations of the interfaces associated with the device. In some embodiments the OPC client buffers collected data from the calls and asynchronously transmits the buffered data in an XML event to an application based on a subscription schedule. In various embodiments the OPC client aggregates results from different calls into an XML event for transmission to an application.

In one embodiment system includes one or more user computers e.g. computers A B and C . User computers can be general purpose personal computers including merely by way of example personal computers and or laptop computers running any appropriate flavor of Microsoft Corp. s Windows and or Apple Corp. s Macintosh operating systems and or workstation computers running any of a variety of commercially available UNIX or UNIX like operating systems. These user computers can also have any of a variety of applications including one or more applications configured to perform methods of the invention as well as one or more office applications database client and or server applications and web browser applications.

Alternatively user computers can be any other electronic device such as a thin client computer Internet enabled mobile telephone and or personal digital assistant capable of communicating via a network e.g. communications network described below and or displaying and navigating web pages or other types of electronic documents. Although the exemplary system is shown with three user computers any number of user computers can be supported.

Certain embodiments of the invention operate in a networked environment which can include a communications network . Communications network can be any type of network familiar to those skilled in the art that can support data communications using any of a variety of commercially available protocols including without limitation TCP IP SNA IPX AppleTalk and the like. Merely by way of example communications network can be a local area network LAN including without limitation an Ethernet network a Token Ring network and or the like a wide area network a virtual network including without limitation a virtual private network VPN the Internet an intranet an extranet a public switched telephone network PSTN an infra red network a wireless network including without limitation a network operating under any of the IEEE 802.11 suite of protocols the Bluetooth protocol known in the art and or any other wireless protocol and or any combination of these and or other networks.

Embodiments of the invention can include one or more server computers e.g. computers A and B . Each of server computers may be configured with an operating system including without limitation any of those discussed above as well as any commercially available server operating systems. Each of server computers may also be running one or more applications which can be configured to provide services to one or more clients e.g. user computers and or other servers e.g. server computers .

Merely by way of example one of server computers may be a web server which can be used merely by way of example to process requests for web pages or other electronic documents from user computers . The web server can also run a variety of server applications including HTTP servers FTP servers CGI servers database servers Java servers and the like. In some embodiments of the invention the web server may be configured to serve web pages that can be operated within a web browser on one or more of the user computers to perform methods of the invention.

Server computers in some embodiments might include one ore more file and or application servers which can include one or more applications accessible by a client running on one or more of user computers and or other server computers . Merely by way of example one or more of server computers can be one or more general purpose computers capable of executing programs or scripts in response to user computers and or other server computers including without limitation web applications which might in some cases be configured to perform methods of the invention .

Merely by way of example a web application can be implemented as one or more scripts or programs written in any programming language such as Java C C or C and or any scripting language such as Perl Python or TCL as well as combinations of any programming scripting languages. The application server s can also include database servers including without limitation those commercially available from Oracle Microsoft Sybase IBM and the like which can process requests from database clients running on one of user computers and or another of server computer .

In some embodiments an application server can create web pages dynamically for displaying the information in accordance with embodiments of the invention. Data provided by an application server may be formatted as web pages comprising HTML XML Javascript AJAX etc. for example and or may be forwarded to a user computer via a web server as described above for example . Similarly a web server might receive web page requests and or input data from one of user computers and or forward the web page requests and or input data to an application server.

In accordance with further embodiments one or more of server computers can function as a file server and or can include one or more of the files necessary to implement methods of the invention incorporated by an application running on a user computer and or another server . Alternatively as those skilled in the art will appreciate a file server can include all necessary files allowing such an application to be invoked remotely by one or more of user computers and or server computers . It should be noted that the functions described with respect to various servers herein e.g. application server database server web server file server etc. can be performed by a single server and or a plurality of specialized servers depending on implementation specific needs and parameters.

In certain embodiments system can include one or more databases e.g. databases A and B . The location of the database s is discretionary merely by way of example a database A might reside on a storage medium local to and or resident in server computer A and or one or more of user computers . Alternatively a database B can be remote from any or all of user computers and server computers so long as it can be in communication e.g. via communications network with one or more of these. In a particular set of embodiments databases can reside in a storage area network SAN familiar to those skilled in the art. Likewise any necessary files for performing the functions attributed to user computers and server computers can be stored locally on the respective computer and or remotely as appropriate . In one set of embodiments one or more of databases can be a relational database such as an Oracle database that is adapted to store update and retrieve data in response to SQL formatted commands. Databases might be controlled and or maintained by a database server as described above for example.

OPC server is any hardware and or software elements such as personal computers and or laptop computers running any appropriate flavor of Microsoft Corp. s Windows that act as an application programming interface API or protocol converter to devices . In general OPC server connects to PLC and translates device data into a standard format e.g. the OPC data format . Some examples of PLC are process or programmable logic controllers distributed control systems DCSs remote terminal units RTUs data source such as a database human machine interfaces HMIs and the like and other devices that communicate data using telemetry. Some examples of devices are temperature sensors humidity sensors voltage sensors barcode readers RFID readers and the like. Applications can connect to OPC server and use it to read and write device data.

OPC client is any hardware and or software elements such as personal computers and or laptop computers running any appropriate flavor of Microsoft Corp. s Windows that receive XML events and translate the XML events into one or more calls or invocations of an API associated with OPC server . OPC client also listens to the OPC Server to receive and store the data collected from device and disseminate the data to Application . OPC client may be embodied as a PC a workstation a server an embedded device and the like. OPC client may also be embodied as a module of a larger application or service.

Applications are any hardware and or software elements that communicate with OPC client using XML events. Some examples of applications are enterprise resource planning ERP applications process control applications inventory applications and the like.

In general an XML event is any communication message or instruction presented according to the extensible markup language XML that controls a device as well as any data formatted according to the extensible markup language XML that are collected from a device. An instruction XML event may specify the names of one or more devices device identifiers location from which to read data or write data when to read write data and the like. A data XML event may specify the name of the device device identifiers location from which to read data or write data when to read or write data the data value read the measurement unit of data read the status of data writing and the like. Events may be expressed in other languages such as the HyperText Markup Language HTML .

In one example of synchronous operation application A generates an XML event and forwards the event to OPC client . Application A may communicate XML event to OPC client using sockets Web services java message services JMS HyperText Transport protocol HTTP telnet and the like. OPC client translates XML event into one or more method calls or procedure invocations using COM DCOM API to communicate with OPC server . In response to calling COM DCOM API OPC server reads writes device data associated with devices and returns the results if any to OPC client . OPC client translates the results into an XML event and forwards the XML event to application A.

In another asynchronous operation application B generates an XML subscription event and forwards the event to OPC client . OPC client translate XML subscription event into one or more method calls or procedure invocations using COM DCOM API to communicate with OPC Server . In response OPC Server periodically collects data from PLC which communicates with the device . pass the data to OPC client . Upon condition matched OPC Server passes the collected data to OPC client which translates the results into an XML data event and forwards the XML data event to application A.

Accordingly system provides a flexible and simplified programming approach for applications to access industry devices through open and standard channels. Communications with devices are represented in business level XML events. Additionally communications may be conducted in an asynchronous event based mode.

Memory includes operating system OS event engine and event buffer . OS is any software that controls the execution of computer programs and applications and may provide various services and access to hardware devices. Event engine is any software that translates information into one or more calls to or invocations of an API and translates the results of calls to or invocations of the API to a format readable by another application. Event buffer is the memory space for temporarily storing data which are collected by devices in multiple rounds and forwarded to applications in batch based on the data subscription contract.

In step an XML event is received from an application. In step the XML event is translated into one or more interface calls. In various embodiments the transformation is performed by a C program which parses the XML event to identify device ID data subscription predicate data collection frequency data request application etc. This C program then based on the XML semantics invokes the proper COM DCOM calls and passes the proper argument data.

In step the interface is called. For example an OPC Server COM DCOM interface is called from an OPC client. In step results are received from the interface call. For example the OPC client receives the results from the OPC Server COM DCOM interface.

In step an XML event is generated based on the results from the interface call. For example an XML event including device ID data collection timestamp data value unit etc. may be generated based on the results of the OPC Server COM DOCM interface call. The XML event is then passed to a requesting application. Through this approach applications may be able to access industry devices such as sensors and readers through open standard and service oriented channels. ends in step .

In block application A generates a subscription to receive data from device every five minutes. In general a time based subscription defines or otherwise specifies when an application would like to read and or write data to a device. In other words the subscription configures OPC client to invoke the OPC API at predetermined intervals using calls specified by the subscription and to return the results e.g. the read data to the application. The subscription may define a set interval or the interval may be supplied by a default value. In another situation value based subscription defines or otherwise specifies what data value or value range triggers data read and or write by an application. In this case the subscription configures OPC client read data from device using calls specified by subscription and to return the result to the application and or write a specified data to the device such as when the data value or value range is met.

Application A then forwards or otherwise transmits XML event indicative of the subscription to OPC client . In block OPC client translates the XML event to one or more OPC API calls. In block OPC client invokes the set of OPC API calls with OPC server .

In block OPC server controls e.g. read write data from to device A in response to OPC API calls . In this example OPC server sends a request e.g. one or more input parameters to device A. In response device A sends a response e.g. output data read based on the input parameters to OPC server .

In block OPC server returns any results from controlling device A to OPC client . At this point OPC Client may determine whether a time interval or value condition defined by a subscription has been met. If met for example in block OPC client translates results from the set of OPC API calls into XML event . OPC client forwards XML event to application A. Application A can use or otherwise process the data read from device A. In some embodiments after forwarding the result event the steps from to may be repeated. If there is new requests from the application A the steps from to may be repeated in parallel with the process of the current requests in a multi thread environment.

In one embodiment in block OPC client determines whether the interval defined by the subscription has been exceeded. For example application A may request to receive data from a temperature sensor every five minutes. After every five minute interval OPC client invokes the OPC API to retrieve temperature sensor data from a temperature sensor. OPC client may buffer the collected data or immediately return the collected data to application A after every five minute interval. If the interval has been exceeded in block in block the process in blocks to is repeated and the any updated data is sent to application A in XML event .

In step an XML event is received indicative of operation A operation B and operation C. For example the XML event may include a read from a first device a read from a second device and a write to a third device.

In step the XML event is translated into one or more OPC API calls for operation A. In step the one or more OPC API calls for operation A are performed. In step any results for the OPC API calls for operation A are stored.

In step the XML event is translated into one or more OPC API calls for operation B. In step the one or more OPC API calls for operation B are performed. In step any results for the OPC API calls for operation B are stored.

Referring to in step the XML event is translated into one or more OPC API calls for operation C. In step the one or more OPC API calls for operation C are performed. In step any results for the OPC API calls for operation C are stored.

In some embodiments the result for OPC API calls for operations A B and C are examined. If the time interval or value condition defined by a subscription is met for example in step the results for OPC API calls for operations A B and C are aggregated. In step and XML event indicative of the aggregated results is generated. Accordingly the aggregated event can be forwarded to an application. ends in step .

Accordingly an application may make a single request to read write from multiple devices. Additionally a single response may be provided that aggregates the results from the multiple devices. In various embodiments data collected from one or more devices may be buffered and forwarded to an application in an XML event for example once a week twice a day every hour and the like.

Bus subsystem provides a mechanism for letting the various components and subsystems of computer system communicate with each other as intended. Although bus subsystem is shown schematically as a single bus alternative embodiments of the bus subsystem may utilize multiple busses.

Network interface subsystem provides an interface to other computer systems and networks and devices. Network interface subsystem serves as an interface for receiving data from and transmitting data to other systems from computer system .

User interface input devices may include a keyboard pointing devices such as a mouse trackball touchpad or graphics tablet a scanner a barcode scanner a touchscreen incorporated into the display audio input devices such as voice recognition systems microphones and other types of input devices. In general use of the term input device is intended to include all possible types of devices and mechanisms for inputting information to computer system .

User interface output devices may include a display subsystem a printer a fax machine or non visual displays such as audio output devices etc. The display subsystem may be a cathode ray tube CRT a flat panel device such as a liquid crystal display LCD or a projection device. In general use of the term output device is intended to include all possible types of devices and mechanisms for outputting information from computer system .

Storage subsystem may be configured to store the basic programming and data constructs that provide the functionality of the present invention. Software code modules or instructions that provides the functionality of the present invention may be stored in storage subsystem . These software modules or instructions may be executed by processor s . Storage subsystem may also provide a repository for storing data used in accordance with the present invention. Storage subsystem may comprise memory subsystem and file disk storage subsystem .

Memory subsystem may include a number of memories including a main random access memory RAM for storage of instructions and data during program execution and a read only memory ROM in which fixed instructions are stored. File storage subsystem provides persistent non volatile storage for program and data files and may include a hard disk drive a floppy disk drive along with associated removable media a Compact Disk Read Only Memory CD ROM drive a DVD an optical drive removable media cartridges and other like storage media.

Computer system can be of various types including a personal computer a portable computer a workstation a network computer a mainframe a kiosk or any other data processing system. Due to the ever changing nature of computers and networks the description of computer system depicted in is intended only as a specific example for purposes of illustrating the preferred embodiment of the computer system. Many other configurations having more or fewer components than the system depicted in are possible.

Although specific embodiments of the invention have been described various modifications alterations alternative constructions and equivalents are also encompassed within the scope of the invention. The described invention is not restricted to operation within certain specific data processing environments but is free to operate within a plurality of data processing environments. Additionally although the present invention has been described using a particular series of transactions and steps it should be apparent to those skilled in the art that the scope of the present invention is not limited to the described series of transactions and steps.

Further while the present invention has been described using a particular combination of hardware and software it should be recognized that other combinations of hardware and software are also within the scope of the present invention. The present invention may be implemented only in hardware or only in software or using combinations thereof.

The specification and drawings are accordingly to be regarded in an illustrative rather than a restrictive sense. It will however be evident that additions subtractions deletions and other modifications and changes may be made thereunto without departing from the broader spirit and scope of the invention as set forth in the claims.

