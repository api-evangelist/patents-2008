---

title: Software copy protection via protected execution of applications
abstract: Methods and apparatus to provide a tamper-resistant environment for software are described. In some embodiments, procedures for verifying whether a software container is utilizing protected memory and is associated with a specific platform are described. Other embodiments are also described.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08468356&OS=08468356&RS=08468356
owner: Intel Corporation
number: 08468356
owner_city: Santa Clara
owner_country: US
publication_date: 20080630
---
The present disclosure generally relates to the field of computing. More particularly an embodiment of the invention generally relates to software copy protection via protected execution of applications.

As computer networks become more common place and faster various types of services may become available to computing platforms through such networks. One example of such services is a Software As A Service SAAS .

In SAAS or digital content delivery model software and or content may be delivered on demand over a network to a computing platform. In the SAAS model software metering may be used to measure the use of software on a platform based on vendor metrics. For example software metering may be done by ensuring that credits allocated for software are correctly counted e.g. when accessed to determine if the software may continue executing on the platform. However there may be various security attacks possible on the software portion of these models which may effectively disable the software metering functionality or allow for snooping on decrypted content thereby directly attacking the revenue model for providers relying on such delivery models.

In the following description numerous specific details are set forth in order to provide a thorough understanding of various embodiments. However various embodiments of the invention may be practiced without the specific details. In other instances well known methods procedures components and circuits have not been described in detail so as not to obscure the particular embodiments of the invention. Further various aspects of embodiments of the invention may be performed using various means such as integrated semiconductor circuits hardware computer readable instructions organized into one or more programs software or some combination of hardware and software. For the purposes of this disclosure reference to logic shall mean either hardware software including for example micro code that controls the operations of a processor or some combination thereof.

In some implementations software metering may utilize hardware support to ensure that the platform resources used for executing metered software are tracked for their use by time or units of compute used. For example there may be some basic aspects of metering that may be implemented in hardware such as time stamping events when certain software was installed tamper resistant storage or out of band network connections e.g. via Intel s Active Management Technology AMT . There is also a larger aspect of software metering that may be an instrumentation of application to collect application specific meta data that may account for how the application is being used. Applications may also interact with operating system OS specific services that may use this meta data to make decisions on resources given to the metered applications. However as previously discussed there may be various security attacks possible on the software portion of these models which may effectively disable the software metering functionality or allow for snooping on decrypted content thereby directly attacking the revenue model for providers relying on such delivery models.

To alleviate these issues some of the embodiments discussed herein may provide techniques for associating a software application with a computing platform and verifying whether the software application is utilizing protected memory of the computing platform. For example in one embodiment a remote server may verify whether a software container is utilizing protected memory on a specific machine based on a platform specific value and a negotiated value shared between the server and the software container.

Furthermore the operating system may include a software container which may also be referred to as software module . For example in the case of a SAAS implementation the software container may be a portable executable PE packer or the minimal portion of an application. In one embodiment once a remote server verifies that the software container is executing under Intel s Virtualization Technology VT Integrity Services VIS memory protection e.g. via exchange of one or more signals or messages the remote server may provide the requisite information to the PE packer so that it may unpack the encrypted PE file in protected memory of the platform for execution. Additionally software may be streamed in an encrypted manner e.g. via a secure communication channel including for example using IPSec Internet Protocol security or TLS Transport Layer Security to the software container where it may be decrypted under memory protection. Additionally in some embodiments e.g. in the case of a content protection implementation the software container may be a content player which may retrieve keys for the specific digital rights management DRM scheme it follows such as the advanced access content system AACS .

In some embodiments encryption keys may be delivered to the computing platform such that they may be accessible only by the software container with which the server communicates. For example this may be achieved by the software container passing keys to the hypervisor via protected memory. The hypervisor may perform a TPM Seal operation to seal the AACS keys along with platform configuration register PCR state into the platform trusted platform module TPM . Subsequent launches of the software may allow the hypervisor to deposit keys into protected memory.

As shown in the system may also include a remote server that may be responsible for verifying the software container is utilizing protected memory of the platform and is running on the same platform as the hypervisor as will be discussed further herein with reference to .

Additionally illustrates the interactions that some of the components of the system may have relative to each other as will be discussed further herein with reference to . At upon launching the hypervisor a measurement of the hypervisor may be written to one of the platform configuration registers . At the software container may send a registration message to the hypervisor . Additionally at the hypervisor may verify the contents of the software container and protect the memory pages for the software container . For example the hypervisor may use VIS to protect the pages for the software container in memory. At the software container may participate in Diffie Hellman DH based negotiation with the remote server to generate a shared secret key or value which may be used to perform verification operations e.g. as will be discussed further herein with reference to .

Furthermore at the hypervisor may retrieve the shared value from the software container . At the hypervisor may sign e.g. encrypt the hypervisor measurement stored in the platform configuration registers and the shared value from the software container. . Additionally at the encrypted values may be returned to the software container . At the encrypted values may be communicated to the remote server and may be used to verify whether the software container is utilizing protected memory on the platform and whether the software container is running on the same platform as the hypervisor . Once the verification by the remote server is done the software container may decrypt and or decompress a portion of itself into the protected memory at .

Moreover the local license proxy server may perform the operations performed by the remote server of system as described with reference to operations and of system . For example on mobile systems such configuration may allow for an occasionally connected mode of operation where the software application may not have network connectivity to interact with a remote server continuously. To handle such scenarios the remote server may delegate the DH negotiation and verification of the TPM quote to a local trusted entity like its local license proxy server e.g. executing in a service partition or on a dedicated controller such as the Intel Management Engine ME . The remote server may provide this proxy with authorization to allow the protected software to be used as per a negotiated license e.g. number of invocations time based etc.

Referring to at an operation a software container e.g. software container may load an integrity manifest into memory and allocate a data page for storing data which may be protected by a hypervisor such as the hypervisor e.g. as will be described further herein below with reference to . For example the software container may be instrumented offline to contain an integrity manifest. At an operation the software container may register with the hypervisor via a hyper call interface e.g. hyper call interface or another Application Programming Interface API . For example on launch of the software container the integrity manifest may be sent to the hypervisor in a registration message. Additionally at an operation the software container may verify a return code from the hypervisor indicating that the hypervisor successfully measured and verified the contents of the software container based on the integrity manifest as will be discussed further herein with reference to below. At an operation the software container may perform a negotiation e.g. in accordance with DH with an authenticated remote server e.g. server to generate a shared secret value. At an operation the software container may place the negotiated value in the protected data page allocated to the software container. For example the container may execute a DH exchange with the authenticated remote server to generate a shared secret located at a pre determined location in the data page cleared and protected by the hypervisor e.g. as will be discussed referring to below.

At an operation the software container checks the protected data page to determine if the hypervisor has written a Trusted Platform Module TPM Quote based on a nonce which generally refers to a number or bit string used only once in security including for example the DH shared secret value also referred to herein more generally as nonce to the protected data page. For example a TPM Quote command may be used to sign selected PCRs in one example PCR set as a result of the hypervisor launch and the provided shared secret with the TPM automatic installation kit AIK private key.

At an operation the software container may verify the TPM Quote by using the remote server as verifier. For example the software container may provide the quote to the remote server that verifies that the certificate is valid and then may use the AIK public key to verify whether the TPM Quote is valid. The contents of the TPM Quote may be used to verify whether the hypervisor is running and that the DH exchange was done in VIS protected memory on the same platform that the hypervisor is executing on. This process may protect the software container against man in the middle attacks where rogue software may execute the hypervisor on one platform and the software container on the other.

At an operation the remote server may verify the TPM Quote and the PCR value. At an operation it may be determined that the software container is utilizing VIS protected memory. Alternatively at an operation it may be determined that the software container is not using VIS protected memory at which point the processing of the software container may be finished operation . At an operation the software container may decrypt content in protected memory pages based on the determination made at operation . For example the software container may unpack compressed PE files or decrypt content using VIS protected memory.

At an operation the hypervisor may measure and protect the software container if the measurement of the software container is verified. For example the hypervisor may receive a registration message from the software container containing an integrity manifest. The registration message may be un trusted and may be used by the hypervisor to verify the contents of the software container. If the in memory verification passes the hypervisor may use VIS to protect the pages for the software container in memory. In addition to protecting the memory pages the hypervisor may also initialize or zero out the data page that may be used subsequently by the software container.

At an operation the hypervisor may fetch the nonce from the software container s data page e.g. as discussed with reference to above. For example the hypervisor may use direct physical memory access to read the negotiated shared secret from the protected memory page of the container in one embodiment. At an operation the hypervisor may obtain a TPM Quote using the DH nonce for the TPM PCRs. For example the hypervisor may use the TPM directly to issue a TPM Quote based on the container provided shared secret key. At an operation the hypervisor may store the result of the TPM Quote and the TPM key certificate into the software container s data page. For example the resultant encrypted data may be provided back to the software container in memory protected by VIS. The hypervisor may also return to the container a certificate for the TPM key used e.g. a certificate authority signed AIK public key .

More particularly the computing system may include one or more central processing unit s CPUs or processors that communicate via an interconnection network or bus . Hence various operations discussed herein may be performed by a CPU in some embodiments. Moreover the processors may include a general purpose processor a network processor that processes data communicated over a computer network e.g. between the software container and the remote server of or other types of a processor including a reduced instruction set computer RISC processor or a complex instruction set computer CISC . Moreover the processors may have a single or multiple core design. The processors with a multiple core design may integrate different types of processor cores on the same integrated circuit IC die. Also the processors with a multiple core design may be implemented as symmetrical or asymmetrical multiprocessors. Moreover the operations discussed with reference to may be performed by one or more components of the system .

A chipset may also communicate with the interconnection network . The chipset may include a graphics and memory control hub GMCH . The GMCH may include a memory controller that communicates with a memory . The memory may store data including sequences of instructions that are executed by the CPU or any other device included in the computing system . In an embodiment the memory may be the same or similar to the main memory of . Furthermore memory may store one or more of the programs or algorithms discussed herein such as a compiler instructions corresponding to executables mappings etc. Same or at least a portion of this data including instructions may be stored in disk drive and or one or more caches within processors . In one embodiment of the invention the memory may include one or more volatile storage or memory devices such as random access memory RAM dynamic RAM DRAM synchronous DRAM SDRAM static RAM SRAM or other types of storage devices. Nonvolatile memory may also be utilized such as a hard disk. Additional devices may communicate via the interconnection network such as multiple CPUs and or multiple system memories.

The GMCH may also include a graphics interface that communicates with a display . In one embodiment of the invention the graphics interface may communicate with the display via an accelerated graphics port AGP . In an embodiment of the invention the display may be a flat panel display that communicates with the graphics interface through for example a signal converter that translates a digital representation of an image stored in a storage device such as video memory or system memory into display signals that are interpreted and displayed by the display . The display signals produced by the interface may pass through various control devices before being interpreted by and subsequently displayed on the display .

A hub interface may allow the GMCH and an input output control hub ICH to communicate. The ICH may provide an interface to I O devices that communicate with the computing system . The ICH may communicate with a bus through a peripheral bridge or controller such as a peripheral component interconnect PCI bridge a universal serial bus USB controller or other types of peripheral bridges or controllers. The bridge may provide a data path between the CPU and peripheral devices. Other types of topologies may be utilized. Also multiple buses may communicate with the ICH e.g. through multiple bridges or controllers. Moreover other peripherals in communication with the ICH may include in various embodiments of the invention integrated drive electronics IDE or small computer system interface SCSI hard drive s USB port s a keyboard a mouse parallel port s serial port s floppy disk drive s digital output support e.g. digital video interface DVI or other devices.

The bus may communicate with an audio device one or more disk drive s and a network interface device which may be in communication with the computer network . For example a remote server e.g. the remote server discussed with reference to may be coupled to a software container e.g. the software container of via the computer network . In an embodiment the device may be a NIC capable of wireless communication. Other devices may communicate via the bus . Also various components such as the network interface device may communicate with the GMCH in some embodiments of the invention. In addition the processor the GMCH and or the graphics interface may be combined to form a single chip.

Furthermore the computing system may include volatile and or nonvolatile memory or storage . For example nonvolatile memory may include one or more of the following read only memory ROM programmable ROM PROM erasable PROM EPROM electrically EPROM EEPROM a disk drive e.g. a floppy disk a compact disk ROM CD ROM a digital versatile disk DVD flash memory a magneto optical disk or other types of nonvolatile machine readable media that are capable of storing electronic data e.g. including instructions . In an embodiment components of the system may be arranged in a point to point PtP configuration such as discussed with reference to . For example processors memory and or input output devices may be interconnected by a number of point to point interfaces.

More specifically illustrates a computing system that is arranged in a point to point PtP configuration according to an embodiment of the invention. In particular shows a system where processors memory and input output devices are interconnected by a number of point to point interfaces. The operations discussed with reference to may be performed by one or more components of the system .

As illustrated in the system may include several processors of which only two processors and are shown for clarity. The processors and may each include a local memory controller hub MCH and which may be the same or similar to the GMCH of in some embodiments to couple with memories and . The memories and or may store various data such as those discussed with reference to the memory of .

The processors and may be any suitable processor such as those discussed with reference to the processors of . The processors and may exchange data via a point to point PtP interface using PtP interface circuits and respectively. The processors and may each exchange data with a chipset via individual PtP interfaces and using point to point interface circuits and . The chipset may also exchange data with a high performance graphics circuit via a high performance graphics interface using a PtP interface circuit .

At least one embodiment of the invention may be provided by utilizing the processors and . For example the processors and or may perform one or more of the operations of e.g. discussed with reference to software containers . Other embodiments of the invention however may exist in other circuits logic units or devices within the system of . Furthermore other embodiments of the invention may be distributed throughout several circuits logic units or devices illustrated in .

The chipset may be coupled to a bus using a PtP interface circuit . The bus may have one or more devices coupled to it such as a bus bridge and I O devices . Via a bus the bus bridge may be coupled to other devices such as a keyboard mouse the network interface device discussed with reference to such as modems network interface cards NICs or the like that may be coupled to the computer network audio I O device and or a data storage device . The data storage device may store code that may be executed by the processors and or .

In various embodiments of the invention the operations discussed herein e.g. with reference to may be implemented as hardware e.g. logic circuitry software including for example micro code that controls the operations of a processor such as the processors discussed with reference to firmware or combinations thereof which may be provided as a computer program product e.g. including a tangible machine readable or computer readable medium having stored thereon instructions or software procedures used to program a computer e.g. a processor or other logic of a computing device to perform an operation discussed herein. The machine readable medium may include a storage device such as those discussed herein.

Reference in the specification to one embodiment or an embodiment means that a particular feature structure or characteristic described in connection with the embodiment may be included in at least an implementation. The appearances of the phrase in one embodiment in various places in the specification may or may not be all referring to the same embodiment.

Also in the description and claims the terms coupled and connected along with their derivatives may be used. In some embodiments of the invention connected may be used to indicate that two or more elements are in direct physical or electrical contact with each other. Coupled may mean that two or more elements are in direct physical or electrical contact. However coupled may also mean that two or more elements may not be in direct contact with each other but may still cooperate or interact with each other.

Additionally such computer readable media may be downloaded as a computer program product wherein the program may be transferred from a remote computer e.g. a server to a requesting computer e.g. a client by way of data signals e.g. through a carrier wave or other propagation medium via a communication link e.g. a bus a modem or a network connection .

Thus although embodiments of the invention have been described in language specific to structural features and or methodological acts it is to be understood that claimed subject matter may not be limited to the specific features or acts described. Rather the specific features and acts are disclosed as sample forms of implementing the claimed subject matter.

