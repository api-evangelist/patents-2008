---

title: Editing 2D structures using natural input
abstract: A natural input system is described for creating and editing complex structures in a typeset application. The natural input system receives a typeset representation of an object and converts the typeset format to generate a standard digital ink representation. The natural input system provides the generated ink representation to a natural input application where can be manipulated by the user with a rich set of correction and editing features provided by the natural input application. Once the end user is satisfied with the recognition result in the natural input application, the natural input system receives the recognition result based on the modified digital ink representation. The natural input system may convert the received recognition result to the typeset application format and provides the modified typeset representation to the typeset application for merging into the document the user is editing.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08213719&OS=08213719&RS=08213719
owner: Microsoft Corporation
number: 08213719
owner_city: Redmond
owner_country: US
publication_date: 20080924
---
Documents often contain various types of elements including one and two dimensional 2D structures. A one dimensional structure is an organization of elements whose location can be described with only one axis i.e. a line . For example text is an example of a typical one dimensional linear structure. A two dimensional structure has elements organized in terms of a flat surface whose location is described with two orthogonal axes. Examples of two dimensional structures are mathematical expressions chemical expressions music notations and so forth. Creating and editing 2D structures is commonly performed using a keyboard and or mouse to select from drop down menus. For example a drop down menu may contain symbols used in the 2D structure such as mathematical symbols. Following is an example of a 2D mathematical structure 

Creating and editing 2D structures using the keyboard often involves a steep learning curve. Usually a user learns a specialized language that can describe structure from a particular domain. For example TeX is a language for describing mathematical expressions using keyboard input. Note that in this scenario there is no easy way to switch between 2D domains. If an end user wants to write chemical expressions as well as mathematical expressions he she has to learn at least two languages. Drop down menus can be used in conjunction with keyboard input to reduce the amount of learning but input in this way is still a slow and tedious process.

Varieties of products that offer such combined experiences exist on the market today. For example Microsoft Word 2007 has a proprietary language for keyboard input of 2D structures as well as drop down menu support for less advanced users. Nevertheless most of these applications are capable of offering a good user experience for editing 2D structures only in very limited scenarios such as when linear parts one dimensional of the structure are being changed. As soon as the user wants to change a non linear expression or part of an expression the process becomes very tedious. For more complicated editing operations whole parts of a typeset 2D structure often have to be erased and typed in from scratch to achieve the desired result.

A tablet PC or pen computer is a notebook or slate shaped mobile computer equipped with a touch screen or graphics tablet screen hybrid technology that allows the user to operate the computer with a stylus digital pen or fingertip instead of a keyboard or mouse. Tablet PCs offer a more natural form of input as sketching and handwriting are a much more familiar form of input than a keyboard and mouse especially for people who are new to computers. Tablet PCs can also be more accessible because those who are physically unable to type can utilize the additional features of a tablet PC to be able to interact with the electronic world.

Natural input applications are available that recognize and store user handwriting on a tablet PC. Natural input applications often store non text user input as images without any information about the purpose or structure of the image. Thus this type of input is typically no more useful for editing typeset 2D structures such as for word processors. The application may also store the user input as a series of ink strokes or as an array of points. Domain specific natural input applications that support handwriting input for a specified 2D domain e.g. are equipped with handwriting recognizer for that domain usually have a very rich correction experience and can therefore provide much more time efficient editing experience but are often proprietary and not usable with typeset applications or multiple domains.

A natural input system is described for creating and editing complex structures such as 2D structures in a typeset application such as a document editing application. The natural input system bridges the gap between typeset applications and domain specific natural input applications to allow including 2D structures in documents in a generic way that allows editing of the 2D structures using natural input methods such as handwriting. A user selects an object stored in a typeset format and indicates to the natural input system that the user wants to edit the object with a natural input method. The natural input system receives the typeset representation of the object and converts the typeset format to generate a standard digital ink representation that looks similar to its typeset original. The natural input system provides the generated ink representation to a natural input application where it is recognized by the natural input recognizer for a specific 2D domain and can be manipulated by the user with a rich set of correction and editing features provided by the natural input application. Once the end user is satisfied with the recognition result in the natural input application the natural input system receives a recognition result based on the modified digital ink representation. The natural input system may convert the received recognition result to the typeset application format if not converted already and provides the modified typeset representation to the typeset application for merging into the document the user is editing. Thus the natural input system provides an end to end solution that significantly improves an end user s experience in terms of ease of use and time spent to edit typeset 2D structures.

This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter nor is it intended to be used to limit the scope of the claimed subject matter.

A natural input system is described for creating and editing complex structures such as 2D structures in a typeset application such as a document editing application. The natural input system bridges the gap between typeset applications and domain specific natural input applications to allow including 2D structures in documents in a generic way that allows editing of the 2D structures using natural input methods such as handwriting. Typeset applications typically can export typeset 2D structures in one or more internal typeset formats. For example Microsoft Word 2007 can export math equations in the Extensible Markup Language XML based Math Markup Language MathML . MathML is a special flavor of XML defined by an international standards body and adapted for describing the structure and content of mathematical notation. A user selects an object stored in a typeset format and indicates to the natural input system that the user wants to edit the object with a natural input method. For example the user may select a math equation in a word processing application.

The natural input system receives the typeset representation of the object. For example the system may receive MathML describing the selected equation. The natural input system converts the typeset format to generate a standard digital ink representation that looks similar to its typeset original as described further herein. For example the system may convert MathML to a standard digital ink format. Digital ink is a data type representing pen strokes including metadata about the strokes and contextual awareness of where the ink is used in an application. The natural input system provides the generated ink representation to a natural input application where it is recognized by the natural input recognizer for a specific 2D domain and can be manipulated by the user with a rich set of correction and editing features provided by the natural input application. The recognizer may know the final result in the first recognition but not the stroke assignments . For example the system may provide converted MathML to a math equation natural input application that provides rich capabilities for editing math equations with natural input. Performing modifications on ink inside the natural input application is typically faster for the user than conventional methods like a keyboard or drop down menus and is much more natural without the steep learning curve.

Once the end user is satisfied with the recognition result in the natural input application the natural input system receives a recognition result based on the modified digital ink representation. For example the system may receive an object model of a recognized math equation that includes an additional variable over the original digital ink representation. The natural input system may convert the received recognition result to the typeset application format and provides the modified typeset representation to the typeset application for merging into the document the user is editing. For example the system may convert the recognition result back into MathML and provide the MathML to Microsoft Word. Thus the natural input system provides an end to end solution that significantly improves an end user s experience in terms of ease of use and time spent to edit typeset 2D structures.

The typeset application interface includes a typeset export component and a typeset merge component . The typeset application interface provides the interface between the system and the typeset application for extracting and updating 2D structures managed by the typeset application .

The typeset export component exports 2D structures from typeset applications so that the system can provide them to natural input applications for editing using digital ink. The typeset export component may be a part of the typeset application or integrated with the system . The system may access typeset structures using an application programming interface API provided by the typeset application. For example spreadsheet application may provide an object model for programmatically accessing contents of a spreadsheet document including 2D structures.

The typeset merge component receives modified 2D structures from the system after a user using a natural input method as described further herein has edited them. For example the user may edit digital ink using a natural input application. The system provides a typeset representation of the digital ink to the typeset application. The typeset application merges the typeset representation with the document such as by replacing the previous representation of the 2D structure stored with the document. As previously noted the system may interact with the application using an API provided by the application. For example a word processing application may provide an API for selecting and updating 2D structures and other document content.

The conversion component includes a typeset to ink converter component and an ink recognizer component . The conversion component is responsible for converting typeset representations to digital ink and digital ink representations to typeset.

The typeset to ink converter component receives typeset representations from the typeset application via the typeset application interface and converts the typeset representations to digital ink representations. The typeset to ink converter typically divides the received typeset into one or more symbols or characters and identifies an ink equivalent for each individual symbol or character. For example if a music notation contains the note C the component may identify an ink based letter C stored in a resource file or other location. The component combines information about the identified ink equivalents in an ink representation structure that contains information about the layout and size of each ink element similar to the original size and layout of the original typeset representation. This process is described further herein. In some embodiments the typeset to ink converter component may be omitted or included in the natural input application . For example the natural input application may be capable of receiving some typeset representations directly such as MathML or other common standards.

The ink recognizer component recognizes handwriting or other natural input entered by a user and converts the natural input to a typeset structure. The component may take an approach similar but opposite to that of the typeset to ink converter component . For example the component may identify individual elements within the natural input e.g. letters numbers and so on and match each individual element to a similar typeset equivalent. Ink recognition software is readily available and the ink recognizer component may be built into the natural input application as shown or provided as a third party component called by the conversion component to request conversion. In the end the conversion component receives a typeset representation of the 2D structure as modified by the user.

The natural input application interface includes a typeset load component an ink load component and a recognition result receive component . The natural input application interface provides the interface between the system and the natural input application for loading ink representing existing 2D structures and receiving modified ink containing user modifications to 2D structures.

The typeset load component is used in cases where the natural input application is capable of receiving typeset directly. In such cases the typeset to ink converter component may also be included in the natural input application such that the natural input application receives typeset and converts it to ink. This can be beneficial for several reasons. For example this type of configuration allows the natural input application to receive drag and drop or clipboard based MathML or other supported 2D structure formats directly from the typeset application .

The ink load component loads digital ink based on a converted typeset representation of a 2D structure into the natural input application for editing by the user. For example the natural input application may provide an API for providing input to the application . Alternatively or additionally the natural input system may store digital ink in a file or other storage location and pass information about the storage location to the natural input application on the command line or through other forms of inter application communication. The natural input system may also use the Text Framework Service TFS the operating system clipboard drag and drop or other communication methods. The ink load component may provide digital ink in a standardized format that can be read by multiple applications. Thus in some cases the user may have multiple natural input applications to choose from based on the user s preferences and available forms of natural input e.g. hardware peripherals installed .

The recognition result receive component receives edited recognition results from the ink recognizer or other converted natural input from the natural input application . For example a user may erase a variable add more elements to an equation and so forth using handwriting and then the natural input application provides this input to the system . In some embodiments the natural input application includes the ink recognizer component or other recognizer for converting digital ink into a typeset structure or another standardized format that the system can convert into a desired format for providing to the typeset application .

The computing device on which the system is implemented may include a central processing unit memory input devices e.g. keyboard and pointing devices output devices e.g. display devices and storage devices e.g. disk drives . The memory and storage devices are computer readable media that may be encoded with computer executable instructions that implement the system which means a computer readable medium that contains the instructions. In addition the data structures and message structures may be stored or transmitted via a data transmission medium such as a signal on a communication link. Various communication links may be used such as the Internet a local area network a wide area network a point to point dial up connection a cell phone network and so on.

Embodiments of the system may be implemented in various operating environments that include personal computers server computers handheld or laptop devices multiprocessor systems microprocessor based systems programmable consumer electronics digital cameras network PCs minicomputers mainframe computers distributed computing environments that include any of the above systems or devices and so on. The computer systems may be cell phones personal digital assistants smart phones personal computers programmable consumer electronics digital cameras and so on.

The system may be described in the general context of computer executable instructions such as program modules executed by one or more computers or other devices. Generally program modules include routines programs objects components data structures and so on that perform particular tasks or implement particular abstract data types. Typically the functionality of the program modules may be combined or distributed as desired in various embodiments.

In block the system receives a typeset recognition result of the 2D object. For example the user may have added or removed elements from the 2D object using natural input such as handwriting gestures and the natural input application may have recognized and converted the edited digital ink representation of the 2D object to a modified typeset format representation of the 2D object. For example the natural input application may include a recognizer that recognizes digital ink and provides the result in a format that can be used by other applications. If needed the system may perform a simple conversion between the output provided by the natural input application and a format expected by the typeset application. In block the system provides the modified typeset format representation of the 2D object to the typeset application. For example the system may replace the previous 2D object in a word processing document with the modified 2D object using an API of a word processing application. After block these steps conclude.

In block the natural input system identifies an ink equivalent for the current element based on its associated identifier. The system provides or has access to an ink equivalent for each typeset element. For example the system may store an ink object in a resource file for each supported typeset element. In one embodiment the math domain has around 200 ink objects i.e. all Latin and Greek characters numbers math operators and so on and can be easily stored in a resource file. In some embodiments the natural input system only stores a single size for each ink element. Ink objects are typically vector objects and thus do not lose quality when the system stretches them to accommodate different font sizes of typeset elements. Note that even though there is only one ink object per typeset element inside the 2D structure one element can occur in several different sizes. For example for a variable with an exponent the exponent will typically be a smaller font than the variable even if both have the same value e.g. 2 raised to the 2nd power but both can be represented with the same vector based ink object.

In block the natural input system stretches the identified ink equivalent to match the size of the typeset element based on the bounding box and places the ink equivalent in the correct position. For example the system may stretch an ink x to match the size of a variable x from the typeset application and center the ink where the typeset element is centered. In this way the system replaces each character present in typeset form fraction line root x y etc. with an appropriate ink representation that respects relative spatial positions to other characters. In decision block if there are more elements then the system loops to block to select the next typeset element else the system continues to block .

In block the natural input system collects the ink equivalents into a final ink object that has ink elements in the same relative spatial positions as the typeset ones. Because the size of the ink object can be proportionally changed without affecting the quality the converting procedure is not dependant on the initial size of the typeset structure. The result is one ink object that is visually similar to the typeset representation of the 2D structure that the user can edit in a natural input application. After block these steps conclude.

In some embodiments the natural input system loads the converted typeset 2D structure into a control in the typeset application process. The natural input system loads a converted typeset 2D structure into a natural input application that is equipped with a natural input recognizer for a specific 2D domain e.g. math chemistry music and so forth . Natural input applications usually include a rich set of editing correction features and tools that make editing much faster and more natural to than conventional input techniques especially if end user is dealing with more complicated 2D structures. The conversion process from typeset 2D structure to ink object can take place before loading or after loading. The natural input application may be the same as the typeset application that hosts the typeset 2D structure. For example the natural input application may run as a control e.g. using ActiveX that executes within the typeset application process a separate accessory or other type of application.

In some embodiments the natural input system converts typeset into a standardized ink format that multiple applications can read. For a particular 2D structure the user may have several natural input applications from which to choose. For example the user may prefer one natural input application for editing mathematical equations and another application for editing musical notation. As another example the user may prefer one natural input application for handwriting recognition and another for speech input. In this way the natural input system can interoperate with many natural input applications and forms of input and provide the user with additional options.

From the foregoing it will be appreciated that specific embodiments of the natural input system have been described herein for purposes of illustration but that various modifications may be made without deviating from the spirit and scope of the invention. For example although the system has been described in association with 2D structures the methods described may also be applied to structures with three dimensions. Accordingly the invention is not limited except as by the appended claims.

