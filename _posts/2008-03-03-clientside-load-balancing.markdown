---

title: Client-side load balancing
abstract: An exemplary method for load balancing includes accessing a range of values for IP addresses associated with a virtual IP address associated with a domain name; selecting, using a local statistical algorithm, a value in the range; and, based at least in part on the selected value, connecting to a remote resource at one of the IP addresses. In such a method, a client can perform local load balancing when connecting to one of many fungible resources “behind” a virtual IP address. With many such clients, the task of load balancing is distributed as opposed to being centralized at a server farm or cluster. Other methods, devices and systems are also disclosed.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07930427&OS=07930427&RS=07930427
owner: Microsoft Corporation
number: 07930427
owner_city: Redmond
owner_country: US
publication_date: 20080303
---
To meet client demands computing environments should be scalable available and manageable. Technologies referred to generally as clustering aim to address such concerns. A cluster may be defined as a group of independent computers that work together to run a common set of applications and that provide an image of a single system to a client and application. More generally a cluster may be defined as a set of resources made available to users and presented as a unified entity to the users.

While client users may not be aware that a cluster exists they expect server based resources e.g. applications and data to be readily available. With respect to availability when a component or an application in a cluster fails cluster software should respond for example by restarting the failed application or dispersing work from the failed component to another component in the cluster. Clustering technologies often provide a graphical console with tools for example to facilitate moving applications and data within the cluster to different servers. Such a clustering feature can be used for example to manually balance workloads and to unload servers for planned maintenance without downtime.

A clustering technology known as network load balancing NLB includes aspects of scalability availability and manageability. NLB can be implemented in hardware e.g. a dedicated NLB machine or software e.g. executing on hardware . NLB provides for strategic distribution of client requests or TCP IP traffic to appropriate resources in a cluster. Some commercially available clustering technologies provide for NLB in a cluster of around host servers. Some NLB techniques present a common virtual IP address for an entire cluster and transparently partition client requests across the multiple servers in the cluster.

One commonly used software NLB technique distributes incoming client requests for TCP and Universal Datagram Protocol UDP protocols including HTTP across multiple members of a cluster. In such a system NLB software resides on each member of the cluster. Periodically each member transmits an NLB exchange message over its network adapters. This message is used to coordinate actions between each member. By default the period of message exchange is 1 second. As the state of the cluster changes for example by adding or removing members or setting members offline or online the message exchanges for NLB are disrupted. After a certain number of failed message exchanges NLB initiates a process to determine the current state of the cluster so that it can load balance the cluster properly. By default NLB initiates this process after five failed message exchanges. NLB automatically redistributes requests among the active remaining members. This redistribution ensures that non active members do not receive any requests and requests are only processed by active members.

In the foregoing software NLB example each member in a cluster receives all incoming requests. This technique uses a fully distributed algorithm to determine which member processes the request all other members discard the request. This method of load balancing may be more efficient than using traditional load balancing devices i.e. hardware NLB because filtering unwanted requests is faster than routing them. However the overall scalability of the software load balancing may still be unsatisfactory because all members receive all requests.

With respect to hardware NLB a conventional implementation typically includes a master and a slave that may serve over 100 servers hidden behind a virtual IP address where each server has a real IP address. These devices can become bottlenecks under some circumstances which in turn can adversely impact user experience. Hardware NLB can be expensive and at times unreliable.

In the aforementioned existing techniques for NLB clients are essentially blind participants. As described herein various exemplary techniques allow for client side load balancing.

An exemplary method for load balancing includes accessing a range of values for IP addresses associated with a virtual IP address associated with a domain name selecting using a local statistical algorithm a value in the range and based at least in part on the selected value connecting to a remote resource at one of the IP addresses. In such a method a client can perform local load balancing when connecting to one of many fungible resources behind a virtual IP address. With many such clients the task of load balancing is distributed as opposed to being centralized at a server farm or cluster. Other methods devices and systems are also disclosed.

Various exemplary methods devices system etc. described herein pertain to client side load balancing in a Domain Name System DNS . Various techniques distribute load balancing amongst clients as opposed to conventional techniques that load balance centrally at a server farm or cluster.

Various exemplary techniques include receiving range information about real IP addresses in a cluster e.g. server farm behind a virtual IP address. For example a client receives a virtual IP address and a range of values associated with a server cluster in turn the client selects a value from the range of values and uses the value in connecting to a specific server in the cluster. The selection process may be statistically based for example the client may randomly select a value in the range of values. With many similarly configured clients the statistical selection process effectuates load balancing for a group of fungible resources e.g. a group of host servers for a domain name .

In various examples a Domain Name System server DNS server receives a range from a cluster e.g. with an associated virtual IP address and then transmits at least the range to the client e.g. in a Resource Record where the client may store the information to a client resolver cache e.g. client side DNS cache . In turn the client can perform a selection process using the range information where the selection process acts to load balance the resources that make up the cluster. In various examples transmission of range information can occur via DNS and TXT records via Extensions to DNS EDNS and explicit new record types or entirely outside DNS but applied to select an address returned by a DNS query.

While various examples refer to a virtual IP address a non enhanced client typically does not know whether a given IP address is or is not a virtual IP address as load balancing associated with a virtual IP address takes place remote from the non enhanced client e.g. by a load balancer at a datacenter . Various exemplary techniques described herein may be used without a virtual IP address. For example where a network includes only enhanced clients range information is sufficient for purposes of connecting a client to a remote resource. In such an example a virtual IP address is not required as in response to a client s request to resolve a domain name a DNS server may simply transmit range information to the client. In turn the client selects an IP address based at least in part on the range information.

According to the method in a request block a client e.g. the client requests resolution of a domain name. In a reception block the client receives a VIP and range information from a DNS server e.g. the DNS server . In a selection block the client statistically selects a value in the range e.g. selects an IP address in the range using the load balancing module . In a connection block the client then connects to the server having the selected IP address where the server is behind the VIP e.g. a server in SB SB or SB .

In the example of the client may terminate the connection and at some time later desire reconnection to a resource associated with the domain name. In an access block the client accesses its cache e.g. the cache in response to a request for resolution of the same domain name. If the range information is still residing in the cache in another selection block the client selects using some statistical algorithm a value in the range e.g. using the load balancing module . Then in a connection block the client connects to a host for the domain name based at least in part on the selected value noting that the host may be different than the host of the connection block . In such a manner a client can load balance continuously without necessarily having to resort to making external requests for name resolution that would increase network traffic. Alternatively a client may cache or lock a selected value for a domain name and use this value for future sessions unless the selected value is unavailable in which case choosing a new value is desirable. One possible approach to selecting a value statistically yet at the same time selecting the same value as long as the same value is desired is to choose the element in the range by hashing some piece of client state that persists over some period of time such as the client s MAC address.

An exemplary method for load balancing includes accessing a range of values for IP addresses associated with a virtual IP address associated with a domain name selecting using a local statistical algorithm a value in the range and based at least in part on the selected value connecting to a remote resource at one of the IP addresses. Referring to the DNS system of the client can implement such a method to for example randomly select one of the servers behind the virtual IP address . The servers in one of the server blocks SB SB or SB may be dedicated to particular web based services. In such an arrangement the servers within a particular block may be fungible and equally capable of performing a task or tasks for the client . The random selection process performed by the client load balances requests directed to the resources associated with the range or range information. Specifically where many clients have the capability to randomly select a resource behind a virtual IP address load balancing is shifted away from the server group e.g. server farm or cluster and on to many clients. This effectively distributes the burden of load balancing from a task that is handled conventionally in a centralized manner to tasks that are handled in a distributed manner.

With respect to the actual selection to effectuate load balancing this may occur in any of a variety of manners. For example the client may receive a range defined by a lower value and an upper value. In turn an algorithm can select a value in the range. Alternatively the client may receive a value and a delta that define a range. In turn an algorithm can select value in the range. At a minimum the client performs an act that directly or indirectly leads to selection of one of many fungible resources and where collectively many similarly configured clients effectuate load balancing for these fungible resources.

An exemplary method may include disconnecting from a remote resource and then repeating a statistically based selection process to reconnect to a remote resource. A statistical algorithm can reside locally on a client computing device e.g. in a library of algorithms that include functions such as a random function . A selection mechanism may be a local operating system service.

An exemplary method may include a time to live TTL for a range where for example upon expiration of the TTL a request issues for a range of values associated with a virtual IP address.

An exemplary method includes connecting to a remote resource where the remote resource is a host server for a domain name. An exemplary method may based at least in part on a statistically selected value attempt to connect to a remote resource at one of many IP addresses specified by a range or range information e.g. a value and a delta etc. . Where such a method fails to connect it may repeat a statistical selection process. A method may include deleting a previously selected value i.e. a failed value from a range prior to repeating a statistical selection process.

An exemplary method for load balancing includes accessing a range of values for IP addresses associated with a virtual IP address associated with a domain name selecting using a local statistical algorithm a value in the range and upon failure to connect to a remote resource at the IP address associated with the selected value repeating the selecting. Such a method may further include after failing to connect to one or more IP addresses for a given virtual IP address associated with the domain name accessing a range of values for IP addresses associated with a different virtual IP address associated with the same domain name selecting using a local statistical algorithm a value in the range and based on the selecting attempting to connect to a remote resource at one of the IP addresses associated with the different virtual IP address.

As described herein a client side load balancing module for execution on a computing device see e.g. module of can include instructions to access range information in a resolver cache where the range information corresponds to IP addresses associated with a virtual IP address associated with a domain name and instructions to directly or indirectly select using a local statistical algorithm one of the IP addresses.

The kernel space includes various components that operate in conjunction with a TCP IP stack . Such a stack typically operates via a network driver interface specification NDIS to communicate with network resources via frames and . The TCP IP stack includes a transport layer a network layer and a framing layer. As shown frame carries an IP datagram frame carries an IP datagram and Internet Location Coordinate ILC information see e.g. and frame carries an IP datagram and range information.

The architecture may include the following APIs by which applications services or other system components access the TCP IP stack 

Sockets API used by Sockets based applications and services. The Sockets API operates through an Ancillary Function Driver AFD to perform Socket functions with the TCP IP stack .

Transport Driver Interface TDI used by NetBIOS over TCP IP NetBT clients and other legacy TDI clients. A translation layer exists between TDI and the TCP IP stack .

The TCP IP stack exposes an inspection API which provides a consistent general purpose interface to perform deep inspection or data modification of packet contents. The Inspection API is part of a filtering platform. The TCP IP stack provides access to the packet processing path at the Network and Transport layers.

The architecture includes an exemplary failover module which may be configured in any of a variety of manners. For example the failover module may be configured to directly access information in the TCP IP stack . The module may be configured to use the inspection API . The failover module may also be configured to expose an API for user space applications. The failover module may be part of or function cooperatively with the DNS service . For example the failover module may be a separate OS service that can retrieve information from the resolver cache or resolver file .

The architecture also includes an ILC module which provides for processing Internet Location Coordinate ILC information. Such information is described in more detail with respect to . The ILC module may be configured to operate in conjunction with the failover module . For example failover may occur based at least in part on ILC information. The ILC module may be part of or function cooperatively with the DNS service . For example the ILC module may store ILC information in a cache and or a file associated with the DNS service .

The architecture includes an exemplary prefetch module which may be configured in any of a variety of manners. For example the prefetch module may be configured to directly access information in the TCP IP stack . The module may be configured to use the inspection API . The prefetch module may also be configured to expose an API for user space applications. The prefetch module may be part of or function cooperatively with the DNS service . For example the prefetch module may be a separate OS service that can retrieve information from the resolver cache or resolver file . Alternatively another cache or file may be available that maintains information between boots of a client computing device i.e. a persistent information store . The module may be configured to operate in conjunction with the failover module and or the ILC module . For example the prefetch module may fetch information for use by the failover module and the prefetch module may fetch information based at least in part on ILC information.

The architecture includes an exemplary load balancing module which may be configured in any of a variety of manners. For example the load balancing module may be configured to directly access information in the TCP IP stack . The module may be configured to use the inspection API . The prefetch module may also be configured to expose an API for user space applications. The load balancing module may be part of or function cooperatively with the DNS service . For example the load balancing module may be a separate OS service that can retrieve information from the resolver cache or resolver file . Alternatively another cache or file may be available that maintains information. The module may be configured to operate in conjunction with the failover module the ILC module and or the prefetch module . For example the prefetch module may fetch information for use by the load balancing module and the load balancing module may select a particular range as being associated with an optimal IP address e.g. a VIP based at least in part on ILC information.

The system may depend on time distance network traffic machine workload bandwidth etc. To understand better how such a system may be defined consider a vehicle on a major interstate highway en route to an airport. At various locations along the highway the state department of transportation transmits information to displays that provide information to vehicle operators. When the vehicle is at a display location the department of transportation may transmit a travel time message that indicates how many minutes it will take for a vehicle at the display location to reach the airport. Such information is helpful as the vehicle operator may decide to take an alternate route. Further the reasons for the stated travel time may be irrelevant to the vehicle operator. In other words the vehicle operator may not care whether the travel time is lengthy due to road construction holiday traffic an accident etc. While the department of transportation may choose to display a specific reason or reasons such information may not add much value to the information conveyed by a simple travel time in minutes.

As described herein in various examples an Internet Location Coordinate ILC may be a number a set of numbers or a set of numbers where each one is associated with some additional information e.g. a tuple for each beacon . An ILC may indicate a local position to a client where this position is with respect to a network logical space measuring travel time or congestion and not necessarily geographic location. ILCs may be compared to estimate travel time or congestion between participants. Such simplicity is in line with the DNS and such an ILC may be carried according to an existing DNS protocol.

Referring again to the system of the client acquires information associated with three beacons     and  . For example a beacon can act as a reflector where the client can send a packet to the beacon and receive a response packet. The client can then determine the round trip time RTT to and from a beacon e.g. a travel time . As the client performs the same process with multiple beacons i.e. the beacons     and   the client becomes more aware of its surroundings. In particular the client becomes aware of its own condition in the system where its own condition may be represented according to a number or a set of numbers etc.

As mentioned an ILC participant can be any resource on a network. Hence the web servers     and   may be participants that can determine respective ILCs using the beacons . For example the web server   may transmit packets to the beacons     and   and receive corresponding return packets. As the web server   may know a priori information about the beacons     and   it can now determine its position in the system e.g. its ILC . While the example of shows three beacons other numbers of beacons may be used. Generally two or more beacons may be used.

As described herein the exemplary system allows clients to determine their position in a network logical space. Such information can be used for a variety of purposes. For example where the web servers     and   provide essentially identical services such information can be used to allow the client to connect to the best web server e.g. the closest server based on ILCs .

In an entry block a domain name is entered e.g. www.msn.com . In turn a DNS server may identify a plurality of servers associated with the domain name for example web server     and  . As explained each of the servers includes an ILC module to ascertain their respective ILCs. In a receipt block the client receives information about the group of servers along with the ILC for each of the servers in the group. In a determination block the client determines the optimal server based on the ILCs for the servers and its own ILC.

In the example of the client may be a user connected to the Internet and the domain name may be www.msn.com. This domain name has a plurality of associated servers at various geographical locations around the world. Given the exemplary architecture where beacons are scattered throughout the networked world each of the servers for the www.msn.com domain name knows its own ILC. When the DNS communicates with each server each server can respond by sending its ILC to the DNS server which in turn transmits this information to the client . The ILC module can then determine which server is the optimal server based on the client s ILC and those of the servers. In general the optimal server is the server that can provide the most efficient service to the client .

Referring again to the decision block if the limit is exceeded the yes branch then the method continues at the selection block . As the VIP associated with the failure to connect is removed from the analysis the analysis may simply resort to a remaining VIP or select an optimal VIP from a fewer number of VIPs based at least in part on ILC information. Further if the initial analysis ranked the VIPs then the selection may simply select the second best VIP. Similarly in the loop of blocks and each time a statistically selected value e.g. real IP address fails to connect this value may be eliminated from the possible values. Again where the total number of values e.g. the range is small the selection process may simply resort to a remaining value.

According to the method in a boot block a client computing device client starts up and loads old DNS information from a file into the client s DNS resolver cache. In the boot block the boot time is designated T and the age of the old DNS information is designated T. In the example of it is assumed that the file includes at a minimum one or more domain names. The file may optionally include other information such as range information. When the file is loaded a background process commences that includes a selection block that selects a domain name to resolve. As shown two options exist resolution of the domain name per resolution block or resolution followed by a selection per block . For example where the client receives a VIP with range information then the resolution process may proceed per the block . Alternatively selection of a value in a range may occur at a later time.

In the example of the domain name information acquired for a particular domain name by the background process is assigned a time T . A conventional name resolution process includes issuing a request to a DNS server to for example acquire a Resource Record RR for a domain name. In turn information received from the DNS server is loaded into the client s DNS resolver cache. The background process may execute during empty or unused cycles during start up of the client computing device. The background process may execute during empty or unused cycles during start up of the client computing device or at others times during the use of the computing device. The background process may be limited in terms or execution time and the number of domain names to resolve or it may be limited to increase the total DNS traffic by no more than a constant factor over what the user s actions would have naturally incurred. For example the process may be restricted to the first five minutes after boot and or be limited to about twenty domain names. While such a process may be customized by a user it may be programmed by default to execute automatically without user input or user awareness. The prioritization of domain names to fetch may be based on prior history of domain name requests likely prioritizing those prior name requests that would not be served from the local DNS resolve cache if they recurred.

At some time after boot per a request block the client requests resolution of a domain name. At a time T where T is greater than T the client accesses its DNS resolver cache. A decision block follows that decides if an IP address exists in the resolver cache for the domain name. If the decision block fails to find an IP address then a resolution block resolves the domain name via a DNS server. According to this branch the domain name was not amongst the one or more domain names resolved by the background process . If the decision block finds an IP address for the domain name in the client s DNS resolver cache then it is a fresh IP address possibly acquired at time T . In other words if the domain name specified in the request block is a domain name resolved by the background process then the domain name information is no older than T .

The DNS server load balancing module includes a parse packet for range component . This component allows a DNS server to parse a packet and extract or repacketize repackage range information. A DNS packet formation component allows a DNS server to form DNS packets with range information. A cache range with VIP component allows a DNS server to cache locally at the DNS server a VIP in conjunction with range information. A DNS server TTL component allows a DNS server to associate a TTL with a VIP or specifically with range information associated with a VIP. Such a component can allow the DNS server to simply request updated range information associated with a VIP.

In a very basic configuration computing device typically includes at least one processing unit and system memory . Depending on the exact configuration and type of computing device system memory may be volatile such as RAM non volatile such as ROM flash memory etc. or some combination of the two. System memory typically includes an operating system one or more program modules and may include program data . The operating system include a component based framework that supports components including properties and events objects inheritance polymorphism reflection and provides an object oriented component based application programming interface API such as that of the .NET Framework marketed by Microsoft Corporation Redmond Wash. The device is of a very basic configuration demarcated by a dashed line . Again a terminal may have fewer components but will interact with a computing device that may have such a basic configuration.

Computing device may have additional features or functionality. For example computing device may also include additional data storage devices removable and or non removable such as for example magnetic disks optical disks or tape. Such additional storage is illustrated in by removable storage and non removable storage . Computer storage media may include volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. System memory removable storage and non removable storage are all examples of computer storage media. Computer storage media includes but is not limited to RAM ROM EEPROM flash memory or other memory technology CD ROM digital versatile disks DVD or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can be accessed by computing device . Any such computer storage media may be part of device . Computing device may also have input device s such as keyboard mouse pen voice input device touch input device etc. Output device s such as a display speakers printer etc. may also be included. These devices are well known in the art and need not be discussed at length here.

Computing device may also contain communication connections that allow the device to communicate with other computing devices such as over a network. Communication connections are one example of communication media. Communication media may typically be embodied by computer readable instructions data structures program modules or other data forms. By way of example and not limitation communication media includes wired media such as a wired network or direct wired connection and wireless media such as acoustic RF infrared and other wireless media.

Although the subject matter has been described in language specific to structural features and or methodological acts it is to be understood that the subject matter defined in the appended claims is not necessarily limited to the specific features or acts described above. Rather the specific features and acts described above are disclosed as example forms of implementing the claims.

