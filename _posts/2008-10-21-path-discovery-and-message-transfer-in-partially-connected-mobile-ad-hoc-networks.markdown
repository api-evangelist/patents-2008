---

title: Path discovery and message transfer in partially connected mobile ad hoc networks
abstract: A method and system is presented for path discovery and asynchronous message transfer in a partially connected middleware communication space comprising mobile ad hoc networks. Embodiments of the present invention use mobile devices to bridge separated islands of networks and store and propagate messages. The system and software architecture supports methods for routing, messaging caching, and transferring. More specifically, embodiments provide methods and systems that extend a communication space concept into a distributed environment and combine it with the standard Web Services technologies, i.e., SOAP, and WS series protocols. The communication space provides an extension of Web Services to mobile ad hoc networks and provides asynchronous message caching, transferring and routing.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08228927&OS=08228927&RS=08228927
owner: Microsoft Corporation
number: 08228927
owner_city: Redmond
owner_country: US
publication_date: 20081021
---
This application is a continuation of U.S. patent application Ser. No. 10 664 354 filed on Sep. 17 2003 now U.S. Pat. No. 7 523 220 which is incorporated by reference herein.

This invention relates generally to networked computer systems and more particularly relates to a communication middleware for partially connected mobile ad hoc computer networks.

Distributed applications are important for the future of computer networks because they enhance efficiency. Current distributed systems either assume highly available servers or highly available network connections. Coordinating distributed applications is problematic for ad hoc wireless systems because the entire ad hoc network capacity is constrained. Distributed applications are especially problematic to coordinate for smaller but so called smart devices such as cellular phones personal digital assistants PDAs and laptops that can interact with sensors and controllers and other environmental objects. The connectivity of such devices and objects can be for example BlueTooth or IEEE 802.11. Power limitations radio coverage and the geography distribution of cooperating nodes often prevent an end to end path for ad hoc nodes. In general ad hoc routing methods assume an end to end path that connects communication nodes and focus on locating an existing path such as a series of intermediate nodes connecting cooperating devices. Many applications such as those requiring real time communication require a fully connected path to transfer sequential packets in a timely manner. Other applications do not require a fully connected path and can exist in highly partitioned networks with eventual message delivery. Such applications include personal data information management news information propagation and personally messaging. Such applications require only asynchronous messaging service. Known methods provide that if there is no path communication fails.

The current methodologies for ad hoc networks coordinating distributed applications would benefit from avoidance of requiring end to end paths of communication nodes.

Accordingly a system for providing a communication middleware named Metadata Space MetaSpace which is designed to provide asynchronous message delivery service for partially connected mobile ad hoc networks. Embodiments of the present invention use mobile devices to bridge separated islands of networks. These mobile devices work as carriers that store and propagate messages.

One embodiment is directed to a system and software architecture that supports methods for messaging caching transferring and routing. More specifically embodiments provide methods and systems that extend a communication space concept into a distributed environment and combine it with the standard Web Services technologies i.e. SOAP and Web Service WS series protocols. The communication space referred to as MetaSpace provides an extension of Web Services to mobile ad hoc networks. Another embodiment is directed to methods for providing asynchronous message caching transferring and routing.

Additional features and advantages of the invention will be made apparent from the following detailed description of illustrative embodiments which proceeds with reference to the accompanying figures.

Turning to the drawings wherein like reference numerals refer to like elements the invention is illustrated as being implemented in a suitable computing environment. Although not required the invention will be described in the general context of computer executable instructions such as program modules being executed by a personal computer. Generally program modules include routines programs objects components data structures etc. that perform particular tasks or implement particular abstract data types. Moreover those skilled in the art will appreciate that the invention may be practiced with other computer system configurations including hand held devices multi processor systems microprocessor based or programmable consumer electronics network PCs minicomputers mainframe computers and the like. The invention may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment program modules may be located in both local and remote memory storage devices.

The invention is operational with numerous other general purpose or special purpose computing system environments or configurations. Examples of well known computing systems environments and or configurations that may be suitable for use with the invention include but are not limited to personal computers server computers hand held or laptop devices tablet devices multiprocessor systems microprocessor based systems set top boxes programmable consumer electronics network PCs minicomputers mainframe computers distributed computing environments that include any of the above systems or devices and the like.

The invention may be described in the general context of computer executable instructions such as program modules being executed by a computer. Generally program modules include routines programs objects components data structures etc. that perform particular tasks or implement particular abstract data types. The invention may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment program modules may be located in local and or remote computer storage media including memory storage devices.

With reference to an exemplary system for implementing the invention includes a general purpose computing device in the form of a computer . Components of the computer may include but are not limited to a processing unit a system memory and a system bus that couples various system components including the system memory to the processing unit . The system bus may be any of several types of bus structures including a memory bus or memory controller a peripheral bus and a local bus using any of a variety of bus architectures. By way of example and not limitation such architectures include Industry Standard Architecture ISA bus Micro Channel Architecture MCA bus Enhanced ISA EISA bus Video Electronics Standards Association VESA local bus and Peripheral Component Interconnect PCI bus also known as Mezzanine bus.

The computer typically includes a variety of computer readable media. Computer readable media can be any available media that can be accessed by the computer and includes both volatile and nonvolatile media and removable and non removable media. By way of example and not limitation computer readable media may comprise computer storage media and communication media. Computer storage media includes volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. Computer storage media includes but is not limited to RAM ROM EEPROM flash memory or other memory technology CD ROM digital versatile disks DVD or other optical disk storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can be accessed by the computer . Communication media typically embodies computer readable instructions data structures program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term modulated data signal means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example and not limitation communication media includes wired media such as a wired network or direct wired connection and wireless media such as acoustic RF infrared and other wireless media. Combinations of the any of the above should also be included within the scope of computer readable media.

The system memory includes computer storage media in the form of volatile and or nonvolatile memory such as read only memory ROM and random access memory RAM . A basic input output system BIOS containing the basic routines that help to transfer information between elements within computer such as during start up is typically stored in ROM . RAM typically contains data and or program modules that are immediately accessible to and or presently being operated on by processing unit . By way of example and not limitation illustrates operating system application programs other program modules and program data .

The computer may also include other removable non removable volatile nonvolatile computer storage media. By way of example only illustrates a hard disk drive that reads from or writes to non removable nonvolatile magnetic media a magnetic disk drive that reads from or writes to a removable nonvolatile magnetic disk and an optical disk drive that reads from or writes to a removable nonvolatile optical disk such as a CD ROM or other optical media. Other removable non removable volatile nonvolatile computer storage media that can be used in the exemplary operating environment include but are not limited to magnetic tape cassettes flash memory cards digital versatile disks digital video tape solid state RAM solid state ROM and the like. The hard disk drive is typically connected to the system bus through a non removable memory interface such as interface and magnetic disk drive and optical disk drive are typically connected to the system bus by a removable memory interface such as interface .

The drives and their associated computer storage media discussed above and illustrated in provide storage of computer readable instructions data structures program modules and other data for the computer . In for example hard disk drive is illustrated as storing operating system application programs other program modules and program data . Note that these components can either be the same as or different from operating system application programs other program modules and program data . Operating system application programs other program modules and program data are given different numbers hereto illustrate that at a minimum they are different copies. A user may enter commands and information into the computer through input devices such as a tablet or electronic digitizer a microphone a keyboard and pointing device commonly referred to as a mouse trackball or touch pad. Other input devices not shown may include a joystick game pad satellite dish scanner or the like. These and other input devices are often connected to the processing unit through a user input interface that is coupled to the system bus but may be connected by other interface and bus structures such as a parallel port game port or a universal serial bus USB . A monitor or other type of display device is also connected to the system bus via an interface such as a video interface . The monitor may also be integrated with a touch screen panel or the like. Note that the monitor and or touch screen panel can be physically coupled to a housing in which the computing device is incorporated such as in a tablet type personal computer. In addition computers such as the computing device may also include other peripheral output devices such as speakers and printer which may be connected through an output peripheral interface or the like.

The computer may operate in a networked environment using logical connections to one or more remote computers such as a remote computer . The remote computer may be a personal computer a server a router a network PC a peer device or other common network node and typically includes many or all of the elements described above relative to the computer although only a memory storage device has been illustrated in . The logical connections depicted in include a local area network LAN and a wide area network WAN but may also include other networks. Such networking environments are commonplace in offices enterprise wide computer networks intranets and the Internet. For example in the present invention the computer system may comprise the source machine from which data is being migrated and the remote computer may comprise the destination machine. Note however that source and destination machines need not be connected by a network or any other means but instead data may be migrated via any media capable of being written by the source platform and read by the destination platform or platforms.

When used in a LAN networking environment the computer is connected to the LAN through a network interface or adapter . When used in a WAN networking environment the computer typically includes a modem or other means for establishing communications over the WAN such as the Internet. The modem which may be internal or external may be connected to the system bus via the user input interface or other appropriate mechanism. In a networked environment program modules depicted relative to the computer or portions thereof may be stored in the remote memory storage device. By way of example and not limitation illustrates remote application programs as residing on memory device . It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.

In the description that follows the invention will be described with reference to acts and symbolic representations of operations that are performed by one or more computers unless indicated otherwise. As such it will be understood that such acts and operations which are at times referred to as being computer executed include the manipulation by the processing unit of the computer of electrical signals representing data in a structured form. This manipulation transforms the data or maintains it at locations in the memory system of the computer which reconfigures or otherwise alters the operation of the computer in a manner well understood by those skilled in the art. The data structures where data is maintained are physical locations of the memory that have particular properties defined by the format of the data. However while the invention is being described in the foregoing context it is not meant to be limiting as those of skill in the art will appreciate that various of the acts and operation described hereinafter may also be implemented in hardware.

Embodiments of the present invention are directed to coordinating distributed applications in a mobile ad hoc environment spanning multiple platforms and heterogeneous devices. Referring to a block diagram illustrates a middleware environment for an ad hoc environment hereinafter referred to as MetaSpace. MetaSpace can include a virtual data buffer capable of coordinating distributed applications such as application and . Application is shown sending metadata to virtual data buffer and application is shown receiving metadata . Collectively MetaSpace provides an abstraction for a virtual shared communication buffer for applications and which can reside on various devices or nodes. Nodes in MetaSpace are shown as nodes and .

In one embodiment MetaSpace provides two software services. First one service can be providing an asynchronous message communication service between applications located on different devices or nodes placing no pre assumption on the existence of a network connection between the different nodes. Another service can include a service that allows data sharing among applications scattered across many nodes.

Unlike known space based systems MetaSpace does not rely on highly available servers that contain an entire space or on a highly available infrastructure network that connects different nodes. MetaSpace maintains virtual data buffer as a shared buffer in a distributed fashion. Therefore MetaSpace can provide a framework for data storage routing and transferring. MetaSpace can be implemented as a light weighted middleware component designed to run on resource restricted devices like Pocket PC and Smart Phones.

In one embodiment MetaSpace is based on standard XML Web Service technologies such as SOAP and the like. Advantageously standard XML Web Service technologies facilitate interoperability and extensibility of MetaSpace . For example by adopting the same message format an application can invoke a Web Service on the Internet via MetaSpace .

Referring now to software architecture of MetaSpace is illustrated. More specifically illustrates the interaction between two MetaSpace environments on different devices as they establish a pair wise communication channel e.g. Bluetooth. Establishing such a pair wise communication channel can occur when the devices holding MetaSpaces are in the same vicinity. In one embodiment a device holding MetaSpace software holds three components in a single device including metadata storage MetaSpace Agent and DLL proxy . Metadata storage can be configured as a container of XML messages SOAP structured in a hierarchy. MetaSpace agent can be implemented as the active part of MetaSpace . MetaSpace agent can be responsible for interacting with other devices via MetaSpace protocols . MetaSpace protocols can guarantee eventual message delivery. MetaSpace agent can also be configured to handle operation requests from applications that use MetaSpace to communicate and share data. The request details can be masked from applications such as applications via DLL proxies . DLL proxies are linkable libraries and can be configured to provide concise application programming interfaces APIs to user applications.

Metadata storage holds metadata as messages which can be configured as XML messages wrapped as Simple Object Access Protocol SOAP messages. The metadata can include Web Service Routing Protocol WS Routing data to define routing information and data appropriate for an extended protocol defined to describe critical information needed for MetaSpace agents to correctly process messages. In one embodiment the extended protocol data is configured as XML entries.

In one embodiment MetaSpace extends the SOAP format by adding a new header entry tagged with msprop under the MetaSpace namespace. The data structures for the data fields can include the following 

ExpirateTime an expiration time of the message in absolute time. The data are invalid after that point.

HopLimitation the upper bound of hops that a message can be transferred. The upper bound value decreases by one after a successful transmission.

AdminDomain the domain to which the message is restricted. This field differs from the Namespace field in that adminDomain defines a physical bound of devices which share the same administration privilege and Namespace is a logical concept. The value is specifically useful for multicast and anycast messages. In these cases the message propagation is restricted to a certain set of devices and such a restriction prevents unwilling message leaking.

RelateTo specifies the topic the message is related to. A relationship attribute is provided to define how to act when two messages are related to one particular topic e.g. replace means the newer message would obsolete the older ones.

Property this field is an extensible way for application to define application specific properties name value pair associated with the message. MetaSpace can be configured to support content based searches of messages via properties.

Referring now to MetaSpace can be configured to handle metadata including large binary data. illustrates a compound object configured to handle binary data. The binary data can be within XML having data encoded in an ASCII format e.g. Base64. However this method is costly. Object illustrates an alternative wherein MetaSpace stores only a reference in an XML message and stores store binary data elsewhere in raw format. illustrates a SOAP message part and a binary object . Message part and binary object are separated by separator and binary object is separated from additional binary objects by separators . SOAP message points to binary object via reference and other binary objects n via reference n .

Referring now to a flow diagram illustrates a method for MetaSpace to perform device discovery and neighbor maintenance. In an embodiment MetaSpace uses URIs to identify devices and is not restricted to using any specific scheme of URI. Further in the embodiment to identify a receiver MetaSpace uses a metaspace domain device scheme. Schemes other than that can be referred to as an Internet host. Flow diagram illustrates an approach for a device to discover its neighbors based on a listen announce protocol. Block provides that every device broadcasts beacon information to a well known port. Block provides that on hearing such a beacon a device learns that a live neighbor exists. Each beacon contains a lease field that indicates an expectation of availability time. Block provides that because the neighbor information is regarded as soft state devices refresh their states before their states expire. A typical structure of a beacon is shown in Table 2 

An internal data structure hashing map is constructed to maintain the association between the name of a device and the communication address of MetaSpace agent running on that device.

Referring now to a flow diagram illustrates a transfer protocol that specifies how messages are propagated when two devices meet each other in a MetaSpace environment. Each device in MetaSpace such as devices shown in maintains storage for metadata . When transferring messages to a peer only messages that are unknown are transferred. To do that illustrates a two phase transfer protocol. Block illustrates phase one and provides that peers exchange interests and handshakes. Block provides that messages are delivered during the exchange.

Referring now to a push mode of a transfer protocol is illustrated. More specifically Device A first advertises an exported namespace Ns A.exp to device B . Device B calculates the intersection of Device A s exported namespace and its own interests Ns A.exp Ns B.Int and then replies to Device A with that intersection as well as a summary of messages that Device B has known under the intersected namespace. In one embodiment the summary is constructed using a bloom filter as is known and an embodiment of which is described below. Upon receiving the reply Device A starts a message delivery session. By testing the message against the summary only those unknown to Device B are transferred.

Like the push mode MetaSpace supports a corresponding pull mode. Like the push mode the pull mode transfer protocol not shown provides the inverse of the mode shown in thus a device that will receive data starts the session by sending its interests.

The bloom filter is a known filter used for efficient traffic flow measurement. In one embodiment a bloom filter appropriate for MetaSpace can be configured assuming a summary vector length is m. Let H H1 H2 H3 H4 MD5 Hash msg id . Each Hi i 1 2 3 4 is a double word. Bit Ki Hi mod m i 1 2 3 4 in the summary vector is set. The bloom filter has certain false positive probability FPP . However FPP is rather small in the normal cases since Pfpp 1 e 4n m 4. In a MetaSpace environment this false positive probability does little harm to metadata transfer because falsely un transmitted messages may be transferred in a next data transfer session.

Referring now to an embodiment is directed to message routing in a MetaSpace environment. More specifically because a MetaSpace environment includes a connection topology that varies dynamically depicts a message routing method for a dynamically changing topology. Routing methods have been proposed for example Vahdat and Becker proposes a method of routing among mobile devices that provides that each node allocate a cache to store messages for other nodes. A. Vahdat and D. Becker Epidemic Routing for Partially Connected Ad Hoc Networks 2000 Technical Report CS 200006 Duke University April 2000. When two separated nodes meet an epidemic process is executed in which the two nodes exchange messages that each hold and then carry the same set of messages. The method uses a flooding algorithm and assumes unlimited buffer sizes and time to guarantee eventual message delivery. Vahdat and Becker s method and like methods follow flooding based algorithms that generate unnecessary messages that occupy cache memory thereby reducing delivery rates.

Devices sending messages in a MetaSpace environment may not know the exact location of the destination. Additionally devices sending messages may not know the path to the destination. According to the method in the embodiment shown in the routing protocol in a partially connected network includes making at least two decisions. First when two devices meet a decision is made as to which messages are delivered from one to the other. Second when metadata storage is full on a device a decision is made as to which messages are going to be removed to make room for new incoming messages. In an embodiment such decisions are made locally. Further the routing method according to the embodiment exploits certain structural information of the mobile ad hoc network.

To determine the structural information of the network provides in block that a stochastic model of a highly partitioned network is derived. Based on the model block provides that a metric hereinafter referred to as an expected path length is used to evaluate routes for delivering messages. Block provides that based on the metric a method for determining the shortest expected path routing is derived.

Referring now to a stochastic network model according to an embodiment is illustrated. Nodes respectively are shown in the model. According to the model edges with zero connecting probability are removed. The solid line connecting node and node represents a permanent network connection. The network could be represented by a network of nodes equipped with short range wireless radio. Communications can go bidirectionally between two nodes if they are in the same vicinity. Assuming that each node has finite memory each node can be configured to carry up to M messages. The message is the information unit that is exchanged between any two nodes.

Assume a complete graph G V E as the stochastic model of ad hoc network . Each vertex in V presents one identical node in N. For each edge e i j in E we assign a probabilistic weight Pi j 0 Pi 1 which presents the probability of the existence of a connection between these two nodes. If Pi j is zero there is never a chance that node i can communicate to node j directly. If Pi j is one there is a permanent connection existing between the two nodes.

Referring now to a flow diagram illustrates a method for determining a shortest expected path. More particularly consider a pair of nodes where s is the source and d is the destination. Block provides that node s sends a message at time and the distribution of probability that d receives the message represented as . can be determined by the topology of the stochastic network model as described above. Block provides for defining the expected path length from s to d as the expected time that d receives the message as shown in equation 1 

In MetaSpace multiple copies of the message can be sent following multiple paths. Hereinafter the path with the shortest expected path length shall be referred to as the primary path. Block provides for setting the expected path length of the primary path as an upper bound of E. The expected path length of the primary path can be derived from equation 2 

where pis the connection probability of link i on the primary path. Block provides for using the Eas an estimation to E. To determine the estimation first the expected path length of any node pair is calculated by determining the primary path between those two nodes. Next weight pis replaced on the link of the stochastic network model with 1 p and then the known Dijkstra algorithm is performed to get E s d E s d . In an embodiment each node must have a full topology of the stochastic network model. The building up and maintenance of the topology can be in one embodiment in some ways being similar to link state routing like known protocol as open shortest path first OSPF protocol which distributes routing information between routers belonging to a single network having a goal as finding the least cost path from one node to all other nodes.

Referring now to an embodiment of a method for determining the shortest expected path routing is illustrated in a flow diagram. The method is based on the expected path length metric described above. Block provides that each message in a device s metadata storage is assigned with an effective path length EPL. Block provides that the effective path length is reset to infinite when the device receives a new message. Block provides that if the message is propagated to another device the EPL is updated as the expected path length from the target device to the destination of the message. In pseudo code the routing method can be described as follows 

The method illustrates that it is useless to propagate a message to one device if it has little chance to deliver it to destination and that when purging cache for new message these have been delivered with high probability are preferential.

MetaSpace includes an application programming in proxy dll which bridges between the application and the MetaSpace middleware. In an embodiment there are four major classes of functions as shown in table 4

MetaSpace basic operations covered by application programming interfaces APIs include a write read enumerate and search.

The Write function provides that all applications call a write spaceid metadata to insert metadata into a MetaSpace environment. Metadata can be wrapped into SOAP messages or a similar type of message. Each of the messages is assigned to a globally unique message identifier.

The Read function provides for two forms of function calls for applications to read metadata in the MetaSpace. A first form of function call is take msgid MetaData metadata which reads out the metadata and removes that data from MetaSpace. A second form of function is read msgid MetaData metadata which removes the data and leaves the metadata unchanged.

The Enumerate and Search function provides that metadata stored in the MetaSpace can be enumerated by calling enum metadata spaceid template which returns a enum info structure that applications can use to read all enumerated metadata. Template provides selective criteria that define which metadata are to be enumerated. If a NULL is provided the function returns all metadata currently stored.

MetaSpace event registration is also covered by APIs. Namely APIs for registration and deregistration are provided.

The Register function provides that an application can register a handler that handles certain event such as a certain type of message arrived or a certain device is connected. The register system call is register spaceid event type template handler . The template specifies a filter that applies to select when certain type of event occurs. For example when event receiving a message occurs a template can specify that the handler is only called when the message is sent from a certain person. The function returns a reg id that can be further used to unregister the event.

The Unregister function provides that an application can remove pre registered event handler by call unregister reg id system call.

MetaSpace also provides for at least three namespace operation APIs. The Sub space create and remove function provides that an application can create any sub space in the MetaSpace. A system call create spacename is to create a sub space in current metaspace. The spacename is unique identify to a sub space. Remove spacename system call is called to remove a sub space. Note that these two system calls are only provided to privileged applications.

The Space export and import function allows applications to set which sub space s that they are interested in sharing with other devices. An application calls set interest spaceid to receive messages from others in a sub space. An application calls set export spaceid if the application is to transmit messages in the sub space to other devices.

The Enumerate sub space function provides that a sub space in MetaSpace can be enumerated by calling the enum space template function. The template specifies the selective criteria that sub spaces associated with an application want to enumerate e.g. all sub spaces under a sub spaces named my family all sub spaces that have been exported or all sub spaces that contain a keyword news etc.

In view of the many possible embodiments to which the principles of this invention can be applied it will be recognized that the embodiment described herein with respect to the drawing figures is meant to be illustrative only and are not be taken as limiting the scope of the invention. For example those of skill in the art will recognize that the elements of the illustrated embodiment shown in software can be implemented in hardware and vice versa or that the illustrated embodiment can be modified in arrangement and detail without departing from the spirit of the invention. Therefore the invention as described herein contemplates all such embodiments as can come within the scope of the following claims and equivalents thereof.

In view of the many possible embodiments to which the principles of this invention can be applied it will be recognized that the embodiment described herein with respect to the drawing figures is meant to be illustrative only and are not be taken as limiting the scope of invention. For example those of skill in the art will recognize that the elements of the illustrated embodiment shown in software can be implemented in hardware and vice versa or that the illustrated embodiment can be modified in arrangement and detail without departing from the spirit of the invention. Therefore the invention as described herein contemplates all such embodiments as can come within the scope of the following claims and equivalents thereof.

