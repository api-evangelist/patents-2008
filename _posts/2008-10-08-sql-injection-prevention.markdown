---

title: SQL injection prevention
abstract: Hackers and other malicious users are prevented from injecting harmful SQL into a database and from retrieving confidential data. SQL statements formed by an application in response to user input (e.g., user Id and password), are scanned and compared to patterns of SQL commands and data embodied in one or more anti-SQL injection policies. If there is a match, the SQL statement is in violation of the policy. A severity level of the violation may be checked, for example, it may be determined whether the violation is critical or non-critical (normal). Different actions are taken depending on the severity of the violation. If the violation is critical, the SQL statement is dropped and the administrator is notified immediately and a trace of the violation is provided. If the violation is not critical, the data is retrieved and is compared against data in a confidential data registry. If any of the data is found to be confidential, that data is encrypted and then sent to the hacker. The hacker is not able to use or read the encrypted confidential data.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08499170&OS=08499170&RS=08499170
owner: Trend Micro, Inc.
number: 08499170
owner_city: Tokyo
owner_country: JP
publication_date: 20081008
---
The present invention relates generally to computer software and system security. More specifically the invention relates to protecting software applications and related databases from unauthorized and malicious operations.

Software applications and programs typically utilize data stored in some type of data storage area. Often such applications store a wide range of data and retrieve and update the data frequently. In one scenario a software application may be an online user application such as a program that is used by the public over the Internet. Such a program executing on a server e.g. a Web server often has a database associated with the program. The database may be implemented on a separate database server. Users may have to log on to the application using a browser in order to access the application. The application may use a database to authenticate and verify users for example by checking user IDs and passwords. These and other types of data are received by the online application and then typically transformed into a format which can be used to query the database. For example the application has a programming or scripting language e.g. Java or C and the database has a separate programming language which may be described as being embedded or functional within the application programming language. If the database is relational the language is the well known structured query language or SQL.

An increasingly prevalent issue with online programs and with conventional desktop applications is security vulnerabilities that can occur when one programming or scripting language is embedded in another programming language. A specific instance of these vulnerabilities exists when an application or program uses a relational database that is when SQL is embedded in another application programming language. This vulnerability allows hackers to perform what are referred to as SQL injections. Hackers or other unauthorized entities enter data using an application s normal user interface knowing that the data will be converted to a specific type of SQL statement which in turn will be used to modify or retrieve data from the database change passwords and security settings lock out administrators and the like. In other words the hacker is causing the injection of an SQL statement into the application s database that will cause some type of harmful or unexpected behavior in the application. SQL injections are security vulnerabilities that occur in what may be referred to as the database layer of an application. It allows the unauthorized and harmful retrieval and modification of data in a relational database. Hackers can take advantage of these vulnerabilities to steal information modify or destroy data get administrator privileges and perform other undesirable acts.

There are no reliable or widespread solutions to dealing with SQL injection vulnerabilities in application code. Presently application developers who are aware of SQL injection dangers prevent SQL injection by following advice and programming practices and tips that minimize the possibility of SQL injections by hackers. These programming guidelines do not cover all SQL injection issues. When new SQL injection techniques and practices appear application developers have to update their code and may have to re program their entire application to deal with the new issues which are becoming increasingly complicated.

Hackers and other malicious users are prevented from injecting harmful SQL into a database and from retrieving confidential data. All SQL statements formed by the application in response to user input e.g. user Id and password are scanned and compared to patterns of SQL commands and data in one or more anti SQL injection policies. The patterns reflect SQL sequences that are known to be harmful or are intended to be used to retrieve confidential data from the database. If there is a match the SQL statement is in violation of the policy. A severity level of the violation may be checked for example it may be determined whether the violation is critical or non critical normal . Different actions are taken depending on the severity of the violation. If the violation is critical the SQL statement is dropped and the administrator is notified immediately and a trace of the violation is provided. The hacker does not get any response from the application. If the violation is not critical the data is retrieved and is compared against data in a confidential data registry. If any of the data is found to be confidential that data is encrypted and then sent to the hacker. The hacker is not able to use or read the encrypted confidential data. At the same time the system informs an administrator and a trace is provided. The administrator can then take appropriate action to repair any damage done to the data and to investigate the violation.

In one embodiment a method of preventing access to a database is described. The database is used by an application to store data needed by the application. A SQL injection prevention module contained within the application receives an SQL statement from another module within the application such as an invoker. It is then determined whether the statement violates a database SQL injection policy. If there is a violation the severity level of the violation is determined. A message indicating that there was a violation is transmitted to the administrator. If the violation is critical or severe the SQL statement is dropped and is not executed. If the violation is non critical or not as severe the SQL statement may be executed but any confidential data that is returned is encrypted so that only the owner of the data may decrypt it. Thus if a hacker receives the data he will not be able to read it. A notification is sent to the administrator for any type of violation and a trace is created and provided.

In another embodiment a method of blocking SQL injections into an application using a database is described. A component responsible for preventing harm to the application s database via SQL injection receives an SQL statement from another component within the application. The statement is compared with various SQL injection prevention policies. The component then determines whether the statement violates any of the policies. If there is a violation the statement is still allowed to execute if there is first security level violation. The entire SQL statement is blocked if there is a second security level violation which indicates a more severe attempt to harm the database.

An SQL injection prevention module operating within an application which has an associated relational database checks SQL statements that require access to the database for SQL instructions that may be harmful unexpected unauthorized or malicious. If an SQL statement is found to violate an anti SQL policy described below the severity of the violation determines how the SQL statement is handled. In some cases even though there is a violation data may still be retrieved from the database and certain confidential data may be sent encrypted before being transmitted. In other cases where the violation is severe the entire SQL statement is dropped and an exception message is sent to the administrator immediately an exception is thrown and no data is returned to the requestor.

Contained within application is an SQL injection prevention module . As noted above database is a relational database and therefore may use SQL for its operations. Module sends an SQL statement to database . Generally database querying updating and retrieving are done using SQL. If SQL is a request to read data from database data typically in the form of records not shown is returned to module . In other embodiments the data may be returned to another component of application . As described in greater detail below SQL injection prevention module scans all SQL statements that are sent from application typically in response to request for data to database and ensures that hackers are not causing harmful or malicious SQL statements to be sent to database . SQL injection prevention module provides all the necessary drivers and application programming interfaces APIs for application to access database . As is known in the field of database programming significant harm and loss of data such as deletion of entire data tables retrieval of confidential data and others may occur from instructions contained in SQL statements. Further examples and contexts are described below. SQL statements are formed when the end user enters information into application such as user name password an order number an e mail address among many other examples via an application user interface .

Application may have several layers and modules. One module relevant to the various embodiments is an invoker module that accesses or invokes SQL injection prevention module . Prevention module is contained within a database layer of application . Database may be contained within layer as shown in . In other embodiments it may also be external of the application as shown in where application executes on Web server and database may operate on one or more database servers.

Invoker transmits an SQL statement to prevention module in layer . Invoker also receives any return data for example from database . In some cases there may not be any return data if SQL statement is an update i.e. write operation . SQL statement may be the same as SQL statement as initially shown in . Statement may be a modified version of statement depending on the operations taken by prevention module . Some of the data retrieved from database may be encrypted by prevention module and transmitted as retrieved data which may be the same as returned data or in a somewhat different format from returned data . It should be noted that some applications may not have specifically an invoker but typically do have some application code that interfaces between the application programming language e.g. Java or C and the database components of the application which are often in a different scripting language most often SQL. Thus there is typically some functionality to create the necessary SQL statement to pass on to the database components of the application not all applications may have a well defined database layer either .

In the described embodiment SQL injection prevention module accepts as input SQL statement . Module is then responsible for executing the SQL instructions and if safe returning any data that may have been requested to what may be described as the non database components of the application from where they are communicated to the end user is used in the primary functionality of application . That is so application can do what the user would like it to do typical users do not care about back end database operations of an application they are only interested in the usefulness of the application .

SQL injection prevention module includes several software components that perform various functions for preventing malicious SQL from accessing database . As described above prevention module accepts as input SQL statement from invoker . An SQL scanner takes SQL as input and examines the SQL. SQL is derived from input e.g. user name password provided by an end user of application . The SQL logic is part of the programming of application . More specifically SQL scanner scans the SQL statement which includes the user input if there is any and searches for patterns that are contained in policies . In one embodiment a policy is an SQL statement that is considered harmful. It may be described as a pattern of SQL variables commands conditional logic parameters and the like which when seen in SQL statement is considered to be dangerous. Associated with a policy is a severity level. In one embodiment there are two severity levels critical and warning. This indicator conveys the nature of a violation. That is if there is a violation of a policy is the attempt by the hacker critical or in other words is the hacker trying to do severe harm to the data e.g. dropping a system table shielding or blocking a condition clause executing a procedure that will delete data among others or trying to obtain highly sensitive data e.g. trying to get administrator passwords or non critical which are essentially less severe attempts to do harm e.g. attempting to gain access to a user s profile . Severity levels may be characterized as reflecting the confidence that the application developer has in how safe it is to send data in response to an SQL statement that violates a policy. It is a reflection of the risk being taken by allowing an SQL statement to be executed. Actions taken by prevention module depend in part on the severity level of the policy violation. Further details on policies and the utility of the severity level are provided below.

A logger and notifier module communicates with application and operates with maintenance service which performs maintenance on prevention module and checks its work status. Logger module ensures that policies are updated when necessary and loads the policies or policy files from for example a disk into the computer system s memory. The creation and updating of policies occurs when new SQL injection techniques are discovered this aspect is not disclosed in the present invention . Logger module ensures that policies are kept up to date and that SQL injection prevention module is operating normally. If there is something wrong with module logger module may notify an administrator .

A confidential data encryptor module encrypts or otherwise modifies confidential data creates a ciphertext before sending the data to the user in response to SQL statement . Module operates in conjunction with a confidential data registry . Data registry provides an interface not shown that the developer can use to specify which data in database should be kept confidential and protected from hackers. In one embodiment the data registry is a visual console. It can scan a database and list all schemas of the database in a visual format or style. A developer can select columns of any table and tag them as confidential. For example a developer can select a password column of table account info as confidential. This will enable all information in the password column of table account info to be protected when returned to the client if the SQL statement violates any policies. In one embodiment the settings are generated as a configuration file by the data registry for use by the SQL injection prevention module. The application developer may decide that password data and social security numbers for example should be encrypted in certain scenarios when being sent back to the user. One scenario is when the data is being returned in response to an SQL statement that violated a non critical or normal policy. That is data is sent to the user or hacker but only as ciphertext so that the data confidentiality will not be breached when received by a hacker. The encryption algorithm may use a feature local or specific to the legitimate owner or user of the confidential data and which is unknown to the hacker. A legitimate user may have some private key to decrypt the data in the event she receives ciphertext this normally would not happen since her input would not create an SQL violation.

Database access drivers provide the APIs and drivers needed by application to retrieve data from database . They replace conventional API and drivers that would be used by the application if SQL injection prevention module was not present. Application developers can use these APIs to access database and avoid SQL injections.

Once the user enters a UserId such as JSmith and a password alpha via typical user login window for an application the following SQL statement may be created 

This example of an SQL statement may be considered harmless or normal assuming the user is actually JSmith and alpha is her password . At step the SQL injection prevention module receives an SQL statement. At step logger module ensures that the most up to date policies or the relevant policies are loaded into policies . If the most recent policy is not loaded at step logger loads the policy into policies which may be described as a repository . If the up to date policy has been loaded control goes straight to step . At step SQL scanner module scans the SQL statement to determine whether the SQL violates any of policies . An example of SQL that may violate a policy is a user attempting to enter the following as a UserID Admin exec sp addlogin abc The entire string is entered by the hacker as the UserID and the password entered is an arbitrary string zyx . The results in an SQL statement as follows 

In creating SQL injections a hacker first may obtain basic information relating to a database such as database type version and capabilities. This may be learned by entering data into an application interface and examining the returned data and done so without violating any policies. The hacker may also do research into the application by looking at public documents Web sites and examining behavior also without violating any security policies. Once some basic data is obtained the hacker may proceed to get more detailed data such as table names User Ids for administrators and the like. Once this higher level data is obtained the hacker may be able to enter data through the application user interface such as User ID windows to conduct SQL injections and cause serious harm to the database this is in contrast to the preliminary steps research which are passive and only involve gathering information about the database .

In another example more experienced hacker may take advantage of a common service many online applications offer namely sending a user his or her password to the user s e mail address when the user forgets it the Forget Password option is many applications . The hacker has also learned that the name of the relevant password table is for example db AccountInfo. He inputs the entire string Admin update db AccountInfo set e mail backdoor hotmail.com where Userld Admin as the User Id and enters a random or dummy string as the password.

By having created this type of SQL statement the hacker may be able to obtain the password for the Admin user the application or Web server administrator and cause significant harm to the application and user data. If SQL injection was allowed to proceed in this scenario the hacker would obtain the password for the Admin at the hacker s backdoor hotmail.com e mail address and proceed to change the password. However in one embodiment all password data transmitted to users including the Administrator is in encrypted format. Therefore if the SQL statement is executed the password would be encrypted and useless to the hacker. This type of SQL statement would also be in violation of a normal or non critical policy. In this case the SQL would be executed the hacker would receive the encrypted password but the administrator or application operator also receives a notification of the violation which includes data on which policy was violated and a trace of the security log and related information regarding the SQL. The Admin immediately learns from examining the trace that the e mail address has been changed to backdoor hotmail.com and possibly other information such as the IP address of the hacker and can make repairs to the application database right away. In one example the application developer ensured that all password data is configured as confidential data in confidential data registry . In this example the SQL pattern Admin 

update db AccountInfo set e mail backdoor hotmail.com where UserId Admin matches or is very similar to a pattern in one of the policies. The pattern may be generically 

Here the at the end of the statement indicates that it is the beginning of a comment. All text after the two dashes will be ignored which makes the SQL statement suspect along with other factors present in the statement. If an SQL statement from the invoker is being scanned and matches this SQL sequence or pattern there is a violation. If the SQL statement does not match or is not similar to any pattern in any of the policies control goes to step where the SQL executes and the database is accessed in a normal manner. If there is a violation whether of a warning or critical policy control goes to step . Here SQL scanner determines the severity level of the violation. An indicator of whether a policy is critical may be contained with the policy e.g. a binary one bit field if there are only two severity levels . If the violation is critical the SQL statement is not executed and an exception is returned to invoker immediately. Database is not accessed the Administrator is notified and a trace of the security log may be provided as well. Essentially the SQL statement is dropped an exception is thrown to the invoker and the hacker receives no response to the data he entered into the application. In one embodiment the hacker may see an exception message stating that he has violated the security of the application or a similar message. At this stage the process of preventing the SQL injection ends and SQL injection prevention module no longer has to take any action with respect to the attempted SQL injection any further action is taken by the Administrator .

If the violation is not critical but is a warning level violation control goes to step where a trace of the security log is created and configured into a format that can be reviewed by the Administrator and used for analysis and data recovery. The format and nature of the trace may be similar to conventional traces that are produced when there is any type of security violation. In one embodiment a separate module not shown may be utilized for creating a trace at step . In one embodiment a trace may simply include basic information about the violation such as which policy was violated the time of violation information on the sender s IP address actual data values contained in the attempted injection and other data. At step the SQL statement is allowed to execute and the APIs and drivers in DB access drivers module are used to access the database. These drivers and APIs may be similar to conventional drivers and APIs used to access the database. However when data is retrieved from the database other actions may be taken before the data is transmitted to the requestor.

At step confidential data encryptor examines the data and determines whether any of the data being retrieved has been registered as confidential in data registry . Data in registry was previously entered by the application developer and may be updated as new types of data are added to the database application. Encryptor examines the data fields of the data being returned for example whether any of the data is from a password field or a Social Security Number field and uses data registry to determine whether any of the fields are for confidential data. In another embodiment data registry may also contain actual data strings such as admin or root and if encryptor detects any of these specific text strings are contained in any of the retrieved data regardless of the data field it is considered confidential data.

If none of the returned data is confidential according to confidential data registry control goes to step where data is returned to the sender in a normal manner that is none of the data is modified. If any of the data is confidential at step control goes to step where the confidential data is encrypted and sent to the user.

Any suitable encryption algorithm such as DES or AES may be used in confidential data encryptor . The application itself may have encryption capabilities that prevention module may utilize to supplement the functions of data encryptor . Once the data is encrypted or modified in any manner that prevents the hacker from using the data it is sent to the user at step . At step the administrator is notified of the policy violation. This occurs after step after or concurrent with returning non encrypted data from the database to the user and after step where data is encrypted and then sent to the user. In either case a policy has been violated and thus an administrator should be notified. At this stage the described process of preventing a single SQL statement from being injected into the database is completed. This process occurs whenever an SQL statement is provided from the invoker or other module within the application.

CPU is also coupled to a variety of input output devices such as display keyboard mouse and speakers . In general an input output device may be any of video displays track balls mice keyboards microphones touch sensitive displays transducer card readers magnetic or paper tape readers tablets styluses voice or handwriting recognizers biometrics readers or other computers. CPU optionally may be coupled to another computer or telecommunications network using network interface . With such a network interface it is contemplated that the CPU might receive information from the network or might output information to the network in the course of performing the above described method steps. Furthermore method embodiments of the present invention may execute solely upon CPU or may execute over a network such as the Internet in conjunction with a remote CPU that shares a portion of the processing.

In addition embodiments of the present invention further relate to computer storage products with a computer readable medium that have computer code thereon for performing various computer implemented operations. The media and computer code may be those specially designed and constructed for the purposes of the present invention or they may be of the kind well known and available to those having skill in the computer software arts. Examples of computer readable media include but are not limited to magnetic media such as hard disks floppy disks and magnetic tape optical media such as CD ROMs and holographic devices magneto optical media such as floptical disks and hardware devices that are specially configured to store and execute program code such as application specific integrated circuits ASICs programmable logic devices PLDs and ROM and RAM devices. Examples of computer code include machine code such as produced by a compiler and files containing higher level code that are executed by a computer using an interpreter.

Although illustrative embodiments and applications of this invention are shown and described herein many variations and modifications are possible which remain within the concept scope and spirit of the invention and these variations would become clear to those of ordinary skill in the art after perusal of this application. Accordingly the embodiments described are illustrative and not restrictive and the invention is not to be limited to the details given herein but may be modified within the scope and equivalents of the appended claims.

