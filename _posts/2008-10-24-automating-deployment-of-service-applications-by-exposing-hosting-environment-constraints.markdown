---

title: Automating deployment of service applications by exposing hosting environment constraints
abstract: Methods, systems, and computer-readable media for automating deployment of service applications by exposing environmental constraints in a service model are provided. In general, the methods are performed in the context of a general purpose platform configured as a server cloud to run various service applications distributed thereon. Accordingly, the general purpose platform may be flexibly configured to manage varying degrees of characteristics associated with each of the various service applications. Typically, these characteristics are provided in the service model that governs the environmental constraints under which each component program of the service application operates. As such, hosting environments are selected and adapted to satisfy the environmental constraints associated with each component program. Adapting the hosting environments includes installing parameters transformed from configuration settings of each component program via map constructs, thereby refining the hosting environment to support operation of the component program.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09300532&OS=09300532&RS=09300532
owner: Microsoft Technology Licensing, LLC
number: 09300532
owner_city: Redmond
owner_country: US
publication_date: 20081024
---
Typically developers write software applications to allow for many degrees of freedom in their configuration. By way of example these developers are able to leverage these degrees of freedoms by establishing a software application that operates within specific constraints of a particular platform that is provided to support the software application. Thus these freedoms associated with the software application enable the software application to operate in cooperation with the platform.

In one instance this configuration of software application may be employed by application service providers who develop the software application to operate on a platform that is remotely accessible via the Internet. In this instance the platform executes the software program in such a way that users may remotely manipulate files using the software application. Accordingly the platform is adapted to establish underlying elements of the software application running thereon to accommodate a current load of the remote usage. The degrees of freedom in the software application allow for scaling up or down these underlying elements and for managing the coordination therebetween. However because the platform includes a variety of hardware components that are dispersed throughout a data center the coordination between the underlying elements may be difficult as each element may require a distinct configuration. For instance the configuration for one of the underlying elements may vary from another underlying element placed on a separate machine. This variation may result from a number of factors such as a difference in the location of resources of the platform that is required to support operation of the software application.

Current solutions to configure the underlying elements of the software application rely on curators of the platform to manually set up the underlying elements to properly interact with the hardware component on which it is placed. These ad hoc solutions are labor intensive and error prone. Further these shortcomings of manual involvement are exaggerated when the platform is expansive in size comprising a multitude of interconnected hardware components that support the operation of a multitude of software applications.

This Summary is provided to introduce concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter nor is it intended to be used as an aid in determining the scope of the claimed subject matter.

Embodiments of the present invention relate to methods systems and computer storage media having computer executable instructions embodied thereon that when executed perform methods in accordance with embodiments hereof for automating deployment of service applications by exposing hosting environment constraints in a service model. These hosting environment constraints may be expressed by a developer of a service application which is capable of being installed as component programs or roles in a distributed computing environment. The expression of the hosting environment constraints may take the form of a definition of a role that includes environmental dependencies of the role. These environmental dependencies may include an indicia of a set of concrete application programming interfaces APIs that enable access to particular resources for supporting operation of the role. By way of clarification each role represents an individual class of component that operates in conjunction with other roles of the service application to realize distributed functionality thereof.

Based on the expression of the hosting environment constraints that are associated with the role a node e.g. computing device within a distributed data center may be allocated for placing and instantiating the role thereon. In an exemplary embodiment the process of instantiating may include abstracting first map constructs from the role definition that transform the environmental dependencies into values that are administered to configuration settings of the role. Then a hosting environment to underlie implementation and operation of the role may be automatically configured utilizing the configuration settings of the role. In a particular embodiment automatically configuring encompasses the logical steps of transforming the values administered to the configuration settings to parameters via second map constructs selecting a base hosting environment according to the expression of the hosting environment constraints in the service model and refining the base hosting environment utilizing the parameters handled by the second map constructs.

This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter nor is it intended to be used as an aid in determining the scope of the claimed subject matter.

The subject matter of embodiments of the present invention is described with specificity herein to meet statutory requirements. However the description itself is not intended to limit the scope of this patent. Rather the inventors have contemplated that the claimed subject matter might also be embodied in other ways to include different steps or combinations of steps similar to the ones described in this document in conjunction with other present or future technologies. Moreover although the terms step and or block may be used herein to connote different elements of methods employed the terms should not be interpreted as implying any particular order among or between various steps herein disclosed unless and except when the order of individual steps is explicitly described.

Embodiments of the present invention relate to methods systems and computer storage media having computer executable instructions embodied thereon that when executed perform methods in accordance with embodiments hereof for automating deployment of service applications by exposing hosting environment constraints in a service model. In general the methods are performed in the context of a general purpose platform configured as a server cloud to run various service applications distributed thereon. Accordingly the general purpose platform may be flexibly configured to accommodate and manage varying degrees of characteristics associated with each of the various service applications. In one instance these characteristics are provided in a service model that govern the constraints under which each component program of the service application operates. As such hosting environments of the general purpose platform for underlying the component programs are adaptable to satisfy the constraints associated with disparate component programs of various service applications.

Accordingly in one aspect embodiments of the present invention relate to one or more computer readable media that have computer executable instructions embodied thereon. Upon executing the computer executable instructions a method for configuring a hosting environment of a data center based on a definition of a subject role of a service application is performed. Initially the method may include offering a set of base hosting environments. Typically each of the base hosting environments includes a predefined interface architecture that organizes a set of APIs for accessing resources within the data center. A service model may be received by the data center from the developer. In one instance the service model conveys definitions of one or more roles of the service application. Generally the term roles as described more fully below represents component programs that jointly support the functionality of the service application. Upon detecting a trigger event such as a call to instantiate more instances of a role the service model is automatically applied to configure the hosting environment which supports the implementation and operation of a subject role of the roles. In embodiments applying includes in no particular order selecting one of the set of base hosting environments according to the definition of the subject role and refining the selected hosting environment according to map constructs derived from configuration settings of the subject role. In instances the configuration settings of the subject role are established by transforming a definition of the subject role into values via a map construct and administering the values to the configuration settings. The refined hosting environment may be stored in conjunction with the subject role.

In another aspect embodiments of the present invention relate to a computerized method for updating a service application operating within a distributing data center based on a service model. In embodiments the method initially includes but is not limited to receiving an indication to increase the number of instances of a role of service application. As mentioned above the role represents a particular class of component that operates in conjunction with other roles of the service application to realize distributed functionality thereof. By way of example the indication arises from an event comprising at least one of a change in a remote usage workload of the service application or one or more nodes of the data center falling offline. Accordingly these event and other events contemplated by the invention may drive the desirability of installing additional roles of the service application within the distributed data center.

Upon receiving the indication a node within the data center may be allocated for instantiating an instance of the role thereon. Generally instantiation is carried out in accordance with a definition of the role retained at the service model. In one instance instantiation is carried out by one or more of the following logical steps in no particular order identifying a component program established on the node of the data center abstracting map constructs from the definition of the role retained in the service model and utilizing the map constructs to perform the instantiation of the instance of the role at the component program. In one instance abstracting map constructs from the definition of the role includes transforming environmental dependencies within the role definition into values. In another instance utilizing the map constructs to instantiate an instance of the role includes administering the values to configuration settings of the component program.

Upon installing the role a hosting environment is automatically configured to underlie implementation of the instantiated role instance. In an exemplary embodiment automatically configuring includes forming mapping constructs that transform configuration settings of the instantiated role instance into parameters and utilizing the parameters to refine a base hosting environment having a predefined configuration. The process of utilizing the parameters to refine a base hosting environment may further include the procedures of selecting the base hosting environment from a set of base hosting environments offered by the data center where selection is based on the values administered to the configuration settings of the component program tailoring a hosting environment in accordance with the map constructs associated with the role and or stacking the tailored hosting environment onto the selected base hosting environment. As such the procedure of stacking affects a configuration of the selected base hosting environment. This refined hosting environment may be installed onto the allocated node to provide the installed role with access to various resources within the data center via a set of concrete APIs.

In yet another aspect embodiments of the present invention relate to a computer system capable of automatically configuring a hosting environment upon instantiating a role instance of a service application within a data center. Generally the data center includes distributed computing devices. The computer system may include a computer storage medium that has a plurality of computer software components embodied thereon. Initially the computer software components include a service model a fabric controller and an agent of the fabric controller that is locally disposed on a computing device distributed within the data center.

In operation the service model exposes environmental dependencies of the role instance. The environmental dependencies are inherent within the design of the role and are desirable to support proper functionality of the role once installed on a node of the data center. The fabric controller serves to interpret the service model in order to abstract a first map construct. The first map construct may be configured to transform the environmental dependencies into values that are administered to configuration settings of the role. The fabric controller may additionally serve to allocate one of the distributed computing devices for installation of the role and the hosting environment thereon. The agent which may be disposed on the allocated computing device is generally configured for employing a second map construct that transforms the configuration settings of the role into parameters that are utilized automatically to configure a hosting environment to accommodate the particular design and associated attributes of the role. In an exemplary embodiment configuring the hosting environment includes selecting a base hosting environment and automatically refining the base hosting environment utilizing the second map constructs. The refined hosting environment supports the role in part by providing APIs that connect the role to resources of the data center that support implementation thereof.

As utilized herein the phrase service model is not meant to be limiting and generally refers to any communication that includes information pertaining to establishing and managing instances of a service model within a data center. In one instance the service model includes a description of which roles of the service application are to be established or how the instances of each of the roles are to be installed and activated within the data center. That is the service model serves as an articulation of which roles should be running for the service application and conditions for where instances of the roles should be installed. By way of example the service model may indicate the service application including roles A B and C are operably coupled through a certain connection path e.g. a particular channel within the data center and indicate environmental dependencies on which operation of the roles A B and C rely.

In particular the phrase environmental dependencies as used herein generally refer to constraints that relate to the design of each of the roles of the service application and the configuration of hosting environments i.e. underlying the implementation of the roles in order to satisfy those constraints. Typically definitions of the roles within the service model are based in part on environmental dependencies of each of roles. In embodiments the environmental dependencies of the roles are specified by a developer of the service application. In other embodiments the environmental dependencies are automatically derived from a definition of a role or manually written by a curator of the data center or third party entity.

The constraints embodied in the environmental dependencies may be based on a plurality of criteria. In one instance the environmental dependencies relate to concrete APIs that are to be available to the role of the service application upon instantiation thereby ensuring proper functionality within the distributed hosting environment. In another instance the environmental dependencies relate to resources to be at the disposal of the role during its execution. In embodiments the resources disposed to the role are made accessible via the concrete APIs. In yet another instance the environmental dependencies relate to communication paths between the role and other roles that are remotely dispensed throughout the data center. The other roles upon which the subject role depends for proper operation may be an instance of the same role an instance of another role of the same overarching service application or may be a role associated with a service application distinct from the service application supported by the subject role.

Although three different embodiments of the constraints for configuring a hosting environment have been described it should be understood and appreciated by those of ordinary skill in the art that other types of suitable criteria that facilitate configuring a hosting environment to match the particular characteristics and design of a role are contemplated herein and that embodiments of the present invention are not limited to those constraints described herein. For instance the constraints of the environmental dependencies of a role may indicate which components resources forward inputs to the subject role and which components resources collect outputs from the subject role. Additionally the environmental dependencies may reflect a location or identity of the components resources that are to be in communication with the subject role. Further the environmental dependencies may expose to the data center APIs and or channels within the data center that effect the communication to the components resources.

Generally roles provide a template description of a functional portion of the service application. Roles are described by indicating the computer code implementing the role the conditions within the hosting environment that are required by the role configuration settings to be applied to the role and the role s set of endpoints for communication with other roles elements etc. In one instance the role s configuration settings may include collective settings which are shared by all instances of the role or individual settings that are particular to each instance of the role. In an exemplary embodiment the roles each represent a particular class of component program of the service application. Typically the service model delineates how many instances of each of the one or more roles to place within the data center where each of the instances is a replication of the particular class of components or role. In other words each role represent a collection of instances of each class of component where the service application may have any number of classes of component for carrying out functions thereof. Accordingly each role represents particular class of component that operates in conjunction with other roles of the service application to realize distributed functionality thereof.

The service model upon being inspected by a fabric controller discussed more fully below with reference to provides instructions for installing an instance of each of the roles that make up the service application as well as an implicit description of how to configure a hosting environment. By way of example upon deployment of the service application within the data center the data center must place the roles in the data center a particular number of times in accordance with the service model. Accordingly if the developer requests via the service model that each role is to be placed on at least five fault domains the service application will be distributed on the data center such that at least five replicas or instances of each of the roles is placed on five differing nodes.

Prior to placing the role instances on the nodes within a data center appropriate nodes are allocated for the purposes of supporting the execution of the role instances. In one instance the allocation is guided by a deployment specification written to the service model. By way of example the deployment specification may inspect the environmental dependencies of the role to be installed and allocate a node for receiving the role based on the resources and or APIs available to the node. In another example using the deployment specification to assist allocation a node may be selected for accommodating a role based on the node s current workload whether the attributes of the node conflict with dependencies of the role a security level associated with the node whether the node may be configured via a hosting environment to satisfy constraints of the service model any other criteria related to proper operation communication of the role or any combination thereof.

Beyond the process of allocating nodes for occupation by roles and associated hosting environments the deployment specification provides instructions directed to various other aspects of instantiation of the roles. In an exemplary embodiment the process of instantiation is guided by the deployment specification to place a new component program on a node and install appropriate values to the configuration settings of the component program. Typically map contracts are utilized to transform the role definition of the service model into the values that are administered to the component program. Upon administration the component program behaves like a role of the service application.

In other aspects of this embodiment the instantiation process includes at least the following logical steps establishing component programs or instances at the allocated nodes deriving formalized values based on a variety of factors e.g. properties of the allocated nodes automatically propagating the formalized values to the instances and installing the formalized values thereon. That is in embodiments the roles are established by deploying e.g. generating new component programs component programs on nodes within the data center. Accordingly the instantiation process facilitates managing the service application.

In another exemplary embodiment the process of instantiation is guided by the deployment specification to identify as available existing component programs on nodes within the data center and configure the existing component programs on a node. In an exemplary embodiment of identifying available existing component programs configuration settings within the existing component programs are interrogated to determine whether they are compatible with the design of the role for which they will embody. Typically configuring encompasses one or more procedures that include the following in no particular order identifying a component program established on the node of the data center abstracting map constructs from the definition of the role retained in the service model and utilizing the map constructs to perform the instantiation of the instance of the role at the component program. In one instance of this particular embodiment instantiating the role instance includes installing appropriate values to the configuration settings of the component program such that it behaves as a role. The appropriate values may be transformed from the role definition by the map constructs. The map constructs may also promote administering the values to the configuration settings. Accordingly the generic component program will take on a personality of the role and operate in cooperation with other roles of the service application.

Although the developer is responsible for creating constraints that govern how replicas of a role are to be established a curator of the data center may design deploy and or configure instances of the service applications and or hosting environments within the confines of the constraints. For instance the curator may build hosting environments that satisfy the constraints of the environmental dependencies of one or more roles. However in an exemplary embodiment the fabric controller is responsible for automatically instantiating a role based on an event by inspecting the definition of the role on the service model and executing the deployment specification in light of the definition. Moreover the fabric controller is capable of automatically placing a hosting environment within the data center e.g. locating the corresponding hosting environments and roles on similar nodes and automatically configuring the hosting environment to satisfy operating constraints of the instantiated role. As more fully discussed below the process of automatically configuring is made possible by map constructs that extract data from the instantiated role and other sources manipulate the data and apply the manipulated or transformed data to select a base hosting environment and refine it.

Having briefly described an overview of embodiments of the present invention an exemplary operating environment suitable for implementing embodiments of the present invention is described below.

Referring to the drawings in general and initially to in particular an exemplary operating environment for implementing embodiments of the present invention is shown and designated generally as computing device . Computing device is but one example of a suitable computing environment and is not intended to suggest any limitation as to the scope of use or functionality of embodiments of the present invention. Neither should the computing environment be interpreted as having any dependency or requirement relating to any one or combination of components illustrated.

Embodiments of the present invention may be described in the general context of computer code or machine useable instructions including computer executable instructions such as component programs being executed by a computer or other machine such as a personal data assistant or other handheld device. Generally component programs including routines programs objects components data structures and the like refer to code that performs particular tasks or implements particular abstract data types. Embodiments of the present invention may be practiced in a variety of system configurations including hand held devices consumer electronics general purpose computers specialty computing devices etc. Embodiments of the invention may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network.

With continued reference to computing device includes a bus that directly or indirectly couples the following devices memory one or more processors one or more presentation components input output I O ports I O components and an illustrative power supply . Bus represents what may be one or more busses such as an address bus data bus or combination thereof . Although the various blocks of are shown with lines for the sake of clarity in reality delineating various components is not so clear and metaphorically the lines would more accurately be grey and fuzzy. For example one may consider a presentation component such as a display device to be an I O component. Also processors have memory. The inventors hereof recognize that such is the nature of the art and reiterate that the diagram of is merely illustrative of an exemplary computing device that can be used in connection with one or more embodiments of the present invention. Distinction is not made between such categories as workstation server laptop hand held device etc. as all are contemplated within the scope of and reference to computer or computing device. 

Computing device typically includes a variety of computer readable media. By way of example and not limitation computer readable media may comprise Random Access Memory RAM Read Only Memory ROM Electronically Erasable Programmable Read Only Memory EEPROM flash memory or other memory technologies CDROM digital versatile disks DVDs or other optical or holographic media magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium that can be used to encode desired information and be accessed by computing device .

Memory includes computer storage media in the form of volatile and or nonvolatile memory. The memory may be removable nonremovable or a combination thereof. Exemplary hardware devices include solid state memory hard drives optical disc drives etc. Computing device includes one or more processors that read data from various entities such as memory or I O components . Presentation component s present data indications to a user or other device. Exemplary presentation components include a display device speaker printing component vibrating component etc. I O ports allow computing device to be logically coupled to other devices including I O components some of which may be built in. Illustrative components include a microphone joystick game pad satellite dish scanner printer wireless device etc.

Turning now to a block diagram is illustrated showing a system architecture in accordance with an embodiment of the present invention. The system architecture includes a data center configured to accommodate and support operation of component programs or instances of roles of a particular service application according to a service model . It will be understood and appreciated by those of ordinary skill in the art that the data center shown in is merely an example of one suitable for accommodating one or more hosting environments such as hosting environment and is not intended to suggest any limitation as to the scope of use or functionality of embodiments of the present invention. Neither should the data center be interpreted as having any dependency or requirement related to any single resource combination of resources or set of APIs to access the resources not shown . Further although the various blocks of are shown with lines for the sake of clarity in reality delineating various components is not so clear and metaphorically the lines would more accurately be grey and fuzzy.

The data center includes various resources interconnected via a network cloud . These resources as described herein may include software components e.g. fabric controller as well as tangible computing elements such as nodes and . The network cloud interconnects these resources such that instances of service applications e.g. roles A B and C which may be distributably placed across various physical resources may recognize a location of other instances in order to establish communication therebetween. In addition the network cloud facilitates this communication over channels connecting the instances of the service application and any other elements required by the service model . The network cloud may include without limitation one or more local area networks LANs and or wide area networks WANs . Such networking environments are commonplace in offices enterprise wide computer networks intranets and the Internet. Accordingly the network is not further described herein.

Generally the data center accommodates a distributed system with a plurality of component programs or instances and of the service application running independently on processing equipment or nodes and that execute the component programs but are interconnected via the network cloud . Occasionally these computational resources can vary in configuration. Accordingly a developer of the service application and of the service model that manages aspects of the service application should recognize these distinctions in the nodes and and implement constraints that effectively identify those computational resources that are properly configured to support execution of a particular node. The constraints are typically written as environmental dependencies of a role and are retained in the service model with a definition of that role.

During instantiation of the role a computational resource or node is allocated for underlying the operation of the role. By way of example only and not limitation if the fabric controller detected an event that initiated the instantiation of a role B such as the instance of role B each of the available nodes and within the data center would be inspected to ascertain a configuration thereof. In an embodiment the configuration may include the resources located within the node. In other embodiments the configuration may refer to other computing attributes of the node such as APIs or preexisting channels that enable communication paths to remote resources or instances of the service application. If the configuration of the node e.g. node and the definition of the role align then the node is deemed compatible and may be allocated for placement of the instance of role B. Accordingly by performing a pre instantiation filtering process the fabric controller ensures that the constraints of a subject role are satisfied by an allocated node. This procedure advantageously allocates those nodes that can properly support the operation of the role instance.

With continued reference to the nodes and are typically operable coupled with each other via the channels established across the network cloud . As discussed herein the term node is not meant to be limiting but to encompass all forms of computing devices such as for example a personal computer a desktop computer a laptop computer a handheld device a mobile handset consumer electronic device and the like. In one aspect the node represents a computing device of a plurality of distributed computing devices interconnected via the network cloud . Generally these distributed computing devices are capable of executing a plurality of instances of various roles of the service application. By way of example a particular node may be capable of accommodating two or more hosting environments that each support role instance s . These role instances may run on the node in complete isolation i.e. imposing a high level of security on the service application in partial communication with other roles or in an interactive state with one or more other roles of the service application.

In embodiments the data center may include any number of the physical resources listed above and may include any collection of computing devices or other machines capable of executing the instances and of the roles A B and C of the service application. Additionally one or more of the physical resources above can further include the fabric controller residing thereon to deploy access and manage the service application via wired or wireless network paths through the data center .

In addition the fabric controller may interact with localized agents such as agents I II and III distributed on the computational resources themselves. Generally these extensions of the fabric controller may be located on each of the nodes and . In embodiments the agent refers to a software element that is charged with at least initiating the role by administering values to the configuration settings of the role. The agent may take on other aspects of instantiating instances of roles based on a division of responsibilities between the agents I II and III and the fabric controller . Accordingly although steps of the instantiation process of a role instance and the process for configuring of a hosting environment are split between the fabric controller and the agents I II and III these divisions of steps are for discussion purposes only and should not be interpreted as implying any particular designation of responsibility for implementing steps of these processes. Accordingly either one of the fabric controller any of the agents I II and III or any combination thereof is considered as capable of implementing all the steps of either of the instantiation process or the process for configuring a hosting environment.

Further it should be noted that embodiments of the present invention are not limited to implementation on such physical resources illustrated in but may be implemented on any of a variety of different types of computing devices and equipment within the scope of embodiments hereof. In other words illustrated resources of the data center depict an exemplary configuration only that is intended for discussion purposes only accordingly any suitable layout of resources e.g. nodes agents fabric controller s known in the computing industry may be used and is contemplated by the present invention.

However the exemplary resources of the data center serve to introduce the concept of configuring a hosting environment for a particular role. Initially the developer is allowed to specify for each role of the service application the hosting environment configuration that properly supports it. Accordingly the service model serves as a vehicle to express this specification of the hosting environment. In one instance the developer is able to express the hosting environment configuration for a role as environmental dependencies of roles within a role definition. In another instance the expression of the hosting environment is based in part on a generic programming model of the data center that is revealed to the developer . In general the generic programming model includes a functional architecture of the data center and the heuristics that govern operation of roles and hosting environments installed within the functional architecture. In this way the configuration for a hosting environment is substantially set from the general configuration for the role. This role definition may be interpreted by the fabric controller upon receiving the service model at the data center . Upon interpreting the role definition the fabric controller may automatically configure the hosting environment that satisfies the environmental dependencies of the role while the agent may install the configured hosting environment to the appropriate node.

By way of example with reference to the service model may include a definition of role A. The fabric controller may receive the service model and interpret the role A definition. Upon interpretation the fabric controller may allocate the node for placing an instance of role A thereupon in accordance with the role definition. The agent III disposed on the node may launch the instantiation process for role A and install the instance of role A based on the role A definition. The fabric controller may further inspect the role A definition to automatically configure the hosting environment to support the instance of role A. This configured hosting environment may be installed on the node or any other node or combination of nodes to underlie the operation of the instance of role A. Accordingly the hosting environment configured according to environmental dependencies of the role A facilitates communicating with other role instances and providing access to computational resources to allow the role A to function properly within the data center .

Turning to is a graphical representation of an exemplary refined hosting environment in accordance with an embodiment of the present invention. Initially the process of refining a hosting environment includes selecting from a base set of hosting environments. In embodiments each of the set of base hosting environments includes fixed attributes such as concrete APIs that place resources at the disposal of a role . These base hosting environments generally include a predefined architecture and can be used to support the role without other additional set up.

Further the data center may provide various types of hosting environments within the set of base hosting environments from which to select. In one instance one of the set of base hosting environments may be a native hosting environment. The native hosting environment may include a basic set of APIs to retrieve a state of all resources requested for the particular role plus other APIs that do not impact other resources on the node data center other than those obtained for access by the role e.g. Win32 API set . In a second instance one of the set of base hosting environments may be a common language runtime CLR environment. The CLR environment may include a basic set of APIs to isolate the running code within a resource filled sandbox. Beyond the basic set of APIs other APIs may be available when they do not impact resources outside of the sandbox. In a third instance one of the set of base hosting environments may be an active server pages ASP environment. The ASP environment may comprise a basic environment which sets up ASP.NET endpoints and resources out of predefined settings in the role . Accordingly in instances the ASP environment may be an extension to the CLR environment. In a fourth instance one of the set of base hosting environments may be a whole machine hosting environment. In the embodiment of the whole machine hosting environment code of the role assumes it has available a whole machine or node. As such this type of environment may be useful for deployments of whole operating system images carrying their own specialized applications.

It should be understood that the listed set of base hosting environments above is exemplary in nature. Thus although not listed other hosting environments known to those of ordinary skill in the art are contemplated by the present invention. As such the platform of the present invention provides substantial freedom to a developer of the service model in selecting the base hosting environment for which they are going to build a particular component program allowing for selection of an environment best suited to the environment dependencies of the particular role .

In embodiments each of the set of base hosting environments inherently provides a different level of security for the role . In instances the level of security of a selected base hosting environment relates to a configuration of the environment and the isolation it provides the role from other components resources or APIs established within the data center. Accordingly the base hosting environment may be selected as more fully discussed above by way of environmental dependencies within a definition of a role maintained by the service model and or by way of a level of security specified for the service application. In other embodiments the base hosting environment may be from a set of base hosting environments offered by the data center in accordance with the values administered to the configuration settings of the role via a map construct .

The refining process may further include stacking a tailored hosting environment onto the selected base hosting environment. In general stacking allows for defining an extension of the base hosting environment . In one instance stacking includes configuring the selected base hosting environment according to map constructs derived from configuration settings of the subject role . Initially configuring includes tailoring a hosting environment in accordance with the map constructs associated with the subject role . This tailored hosting environment may be stacked onto the selected base hosting environment thereby affecting a configuration of the selected base hosting environment . In embodiments the stacked tailored hosting environment and the base hosting environment are merged to form a refined hosting environment .

In another embodiment the refining process may include adjusting parameters of the selected base hosting environment utilizing map constructs .

That is the refined hosting environment is set up by parameters that are established assembled based on the configuration settings of the role via the map constructs . In one instance a single map construct is applied for each parameter. Accordingly each of the parameters is based on value s administered to the configuration setting of the role via the map constructs . Thus the map constructs effectively expose a configuration of the role to the hosting environments and in order to properly implement the role .

By applying the map constructs to the base hosting environment new parameters may be derived to refine the base hosting environment or to extend the base hosting environment by submitting various definitions of the role . Accordingly the map constructs impose restrictions on the configuration of the hosting environments and based on characteristics or environmental dependencies of the role . In addition the map constructs may communicate which resources the role should access during normal operation and implement restriction on the hosting environments and based on the accessible resources. The term restrictions as used hereinabove generally refer to rules or heuristics that the refined hosting environment should follow when underlying operation of the role .

A concrete implementation of the role typically depends on a concrete set of APIs and a runtime environment supporting its execution such as resources of a data center made available via the APIs. In addition the APIs provide for managing the resources that the role will interact with. In other embodiments the refined hosting environment provides APIs to communicate with other roles of the service application. As such in operation the refined hosting environment determines which of a set of concrete APIs established during refinement the role has at its disposal as well as the set of resources the refined hosting environment makes available to the role . In instances the set of concrete APIs promotes the interaction with and access to the resources of the hosting environment during instantiation as well as normal operation. In embodiments resources may include CPU time bandwidth in the network local disc memory main memory and the like.

In general the phrase map constructs is not meant to be limiting and may encompass any element capable of driving the configuration of the refined hosting environment out of the configuration for the role which runs on it or driving the configuration of the role out of the environmental dependencies provided in the definition of the role . In embodiments the map constructs and include a function that takes a manual input and automatically creates a configurable output to the data center. In other embodiments the map constructs are capable of automatically accepting as inputs the configuration settings aligned to the role and automatically transforming the values of the configuration settings into parameters that are to be placed in the hosting environments and . That is the map constructs determines what parameters to give to the hosting environments and based on the parameters of the role by manipulating computing the configuration for the refined hosting environment based on the configuration of the role it is designed to support.

In one instance the developer or fabric controller is allowed to compose these map constructs and to configure a program component into the role based on the service model and to configure the refined hosting environment to properly operate with the service application to enable compatibility. In one instance composing involves extracting a design of the role info e.g. functional aspects of a role and from the definition of the role . As such based on the definition of the role the developer can construct a custom hosting environment for the role .

Referring to a block diagram of an exemplary refined hosting environment configured according to design aspects of the role for facilitating proper operation of the role within the data center is shown in accordance with an embodiment of the present invention. As discussed above the stacked tailored and base hosting environments may generate a refined hosting environment that is specifically configured to support operation of an instance of the role . As illustrated the refined hosting environment is placed on the same node as the role . Typically the refined hosting environment encompass a set of concrete APIs that are at the disposal of the instantiated role . These APIs may provide the role with access to various items in the data center that are utilized to support proper implementation and normal functionality of the role . In one instance the set of concrete APIs facilitate communication with resources accommodated on the node or other nodes. In another instance the set of concrete APIs facilitate communication with other role instances instantiated within the data center . That is the set of concrete APIs makes other instances of the role instances of other roles of the service application accessible to the instantiated role . These instances of the service application may be located on the same node as the role or on other nodes e.g. node of the data center .

Communicating to other instances of the role may include defining channels within the data center that are to be utilized as communication paths between the installed instances of differing roles or of instances of the same role. These channels may be established in the data center upon instantiation of the role may be set up during the selection and refinement of the refined hosting environment or may be preexisting and expressed to the role to enable communication between the expansively placed instances and . In addition the process of defining channels may include administering parameters to the configuration settings of the placed instances and such that they are able to recognize communication paths and the APIs that make the communication paths accessible. Accordingly the role understands how many instances of the service application are available and the location of the instances even when the instances are being dynamically installed and removed.

In embodiments the refined hosting environment may encompass interactive APIs that reveal to the developer of the service application information. By way of example the information may include a configuration of the stacked tailored and base hosting environments or the resources accessible to the instantiated role .

Although various different configurations of the APIs have been described it should be understood and appreciated by those of ordinary skill in the art that other types of suitable APIs that provide access or information to any number of various items or entities respectively may be used and that embodiments of the present invention are not limited to those APIs described herein.

With reference to an operational flow diagram illustrating a high level overview is shown illustrating a technique to instantiate the refined hosting environment and a role to execute thereon in accordance with an embodiment of the present invention. Initially an indication to establish an instance of a role of a service application is conveyed from a service application running in the data center . This indication is generally received by the fabric controller . As discussed above the fabric controller performs various management operations for supporting the service application such as deploying instances of roles in accordance with embodiments of the present invention. Typically the fabric controller runs on top of a processing unit coupled to a computer storage medium within the data center . However this exemplary fabric controller is but one example of a suitable software construct that may be implemented to carry out aspects of the present invention and is not intended to suggest any limitation as to the scope of use or functionality of the invention.

The service model may allocate a node within the data center consistent with an indication from the deployment specification for supporting the instance of a role . This may be performed at process implemented by the fabric controller . As briefly discussed above the service model is generally an interface blueprint that provides instructions for managing component programs such as the role instance of the service application . The service model acts to guide the fabric controller in coordinating activities between the deployed component programs upon deployment to distributed locations throughout the data center . These locations are typically established within the confines of the deployment specification within a service model . In addition the service model includes specifications that identify such aspects of managing the service application as which map constructs to employ during instantiation which resources to utilize during propagation of component programs which channels to utilize as communication paths between component programs and any other information that describes the particular way service application will be executed at the data center .

The service model may include the deployment specification that manages the installation of the role instance via the process . Instantiation initially includes placing the instance of the role on the allocated node . Instantiation may further include utilizing a first map construct to transform environmental constraints of the role stored at the definition of the role into values. This is indicated at process . As indicated at process these values may be administered to the configuration of settings of the role thereby configuring a program component to act as a part of the service application . Accordingly the service model instructs the proper installation of instances of roles to support the service application .

Upon or concurrent with instantiation of the role the fabric controller may carry out process for automatically configuring a hosting environment to support the role . The process may include a variety of procedures including procedures and . Procedure involves selecting a base hosting environment from a set of base hosting environments made available by the data center . Procedure involves forming second map constructs that transform the configuration settings of the role into parameters. In other embodiments parameters within the deployment specification are used by the fabric controller during establishment of the refined hosting environment . As discussed above the parameters of the deployment specification may be partially based on the constraints received from an entity responsible for designing the service application such as the developer. Further the process of forming and applying the map constructs may be guided by the deployment specification . As indicated at procedure these parameters may be utilized to refine the selected hosting environment to generate a refined hosting environment that satisfies environmental constraints of the role .

In embodiments an agent acting as a localized extension of the fabric controller may carry out the process . Generally process involves installing the refined hosting environment onto the allocated node . In operation the installed refined hosting environment serves to underlie operation and implementation of the role . Although various differing processes and procedures for instantiating the role and for refining a hosting environment to support operation of the role have been described it should be understood and appreciated by those of ordinary skill in the art that other types of suitable processes that generate a hosting environment based on specifications of the role may be used and that embodiments of the present invention are not limited to those particular steps described herein.

Accordingly any number of steps may be employed to achieve the desired functionality within the scope of embodiments of the present invention. Although the various steps of are shown with lines for the sake of clarity in reality delineating various components is not so clear and metaphorically the lines would more accurately be grey or fuzzy. Further although some steps of are depicted as single processes the depictions are exemplary in nature and in number and are not to be construed as limiting e.g. although only three procedures and are shown many more may be used in conjuncture to comprise the process .

Turning now to a flow diagram is shown illustrating an overall method for automatically configuring a hosting environment based on a definition of a subject role. The method to automatically configure a hosting environment may be triggered upon receiving a request to update a service application operating within a distributing data center. In one instance as depicted at block an indication is received to increase a number of instances of a role of the service application. This indication may arise from an event that affects the execution of the service application such as a change in a remote usage workload of the service application or nodes of the data center falling offline e.g. resulting from failures of equipment intentional deactivations based on an update scheme and the like . As discussed above the role represents a particular class of components that operate in conjunction with other roles of the service application to realize distributed functionality thereof.

As depicted in a node within the data center may be allocated for instantiating an instance of the role thereon. In general the process of allocation is carried out in light of a definition of the role retained at the service model such that the configuration of a node selected for allocation aligns with environmental dependencies of the role instance. Also the instantiation process is carried out in the context of the role definition. For instance the instantiation processes may include the following steps identifying a component program established on the allocated node abstracting map constructs from the role definition and applying the map constructs to perform the instantiation of the instance of the role at the component program. In an exemplary embodiment applying the map constructs to perform the instantiation process includes utilizing the map constructs to transform attributes of the role definition into values and administering the values to configuration settings of the installed role.

Upon setting up the role instance on the allocated node a hosting environment to underlie implementation of the instantiated role instance may be automatically configuring where the hosting environment is configured to satisfy the environmental dependencies of the role. This is indicated at block . The process of automatically configuring the hosting environment as described more fully above with reference to includes the following logical steps in no particular order forming mapping constructs that transform the configuration settings of the instantiated role instance into parameters see block and utilizing the parameters to refine a base hosting environment having a predefined configuration see block . In embodiments utilizing the parameters to refine the base hosting environment may include selecting the base hosting environment from a set of base hosting environments offered by the data center wherein the parameters may be derived from the values administered to the configuration settings of the component program. Further in embodiments the refinement of the base hosting environment may include tailoring a separate hosting environment in accordance with the map constructs associated with the role and stacking the tailored hosting environment onto the selected base hosting environment. Accordingly stacking the two hosting environments affects the configuration of the selected base hosting environment to properly support the instantiated role instance. As depicted at block the refined hosting environment is installed onto the allocated node.

Embodiments of the present invention have been described in relation to particular embodiments which are intended in all respects to be illustrative rather than restrictive. Alternative embodiments will become apparent to those of ordinary skill in the art to which embodiments of the present invention pertain without departing from its scope.

From the foregoing it will be seen that this invention is one well adapted to attain all the ends and objects set forth above together with other advantages which are obvious and inherent to the system and method. It will be understood that certain features and sub combinations are of utility and may be employed without reference to other features and sub combinations. This is contemplated by and is within the scope of the claims.

