---

title: Methods, systems and computer program products for application name and client ID pairing in a message connection
abstract: An exemplary embodiment includes a method for pairing an application name and a client ID in a messaging broker infrastructure, the method including running a messaging system associated with the messaging broker infrastructure running a monitoring application configured to monitor a connection to the messaging broker, creating a connection to the messaging broker, identifying a class name and the client ID associated with an application, converting the class name to an application name and publishing a pairing of the application name and the client ID on the messaging infrastructure.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08261293&OS=08261293&RS=08261293
owner: International Business Machines Corporation
number: 08261293
owner_city: Armonk
owner_country: US
publication_date: 20080721
---
IBM is a registered trademark of International Business Machines Corporation Armonk N.Y. U.S.A. Other names used herein may be registered trademarks trademarks or product names of International Business Machines Corporation or other companies. Java and all Java based trademarks and logos are trademarks of Sun Microsystems Inc. in the United States other countries or both. Linux is a registered trademark of Linus Torvalds in the United States other countries or both.

This invention relates generally to messaging and more particularly to methods systems and computer program products for application name and client ID pairing in a message connection.

Currently a message broker may be used by multiple applications on the same box e.g. a computer . The broker simply sees a set of connections all from the same IP address. When a problem occurs with one of the connections the broker may not be able to determine which application is affected.

An exemplary embodiment includes a method for pairing an application name and a client ID in a messaging broker infrastructure the method including running a messaging system associated with the messaging broker infrastructure running a monitoring application configured to monitor a connection to the messaging broker creating a connection to the messaging broker identifying a class name and the client ID associated with an application making a call over the connection converting the class name to an application name and publishing a pairing of the application name and the client ID on the messaging infrastructure.

Another exemplary embodiment includes a computer program product for pairing an application name and a client ID in a messaging broker infrastructure the computer program product including instructions for causing a computer to implement a method the method including running a messaging system associated with the messaging broker infrastructure running a monitoring application configured to monitor a connection to the messaging broker creating a connection to the messaging broker identifying a class name and the client ID associated with an application making a call over the connection converting the class name to an application name and publishing a pairing of the application name and the client ID on the messaging infrastructure.

An additional exemplary embodiment includes a system for pairing an application name and a client ID in a messaging broker infrastructure the system including a processor an application for causing the processor to run a messaging system associated with the messaging broker infrastructure run a monitoring application configured to monitor a connection to the messaging broker create a connection to the messaging broker identify a class name and the client ID associated with an application making a call over the connection convert the class name to an application name and publish a pairing of the application name and the client ID on the messaging infrastructure.

In exemplary embodiments the methods systems and computer program products described herein implement an application class name or similar to link a given connection with a given application. The methods systems and computer program products described herein first set up a communication connection when an application communicates with a message broker. When the connection is set up a client ID is assigned to the connection. When the application makes a first call over the connection a correlation is made between the connection in use i.e. the client ID and the application making the call i.e. the application class or name making the call . If a subsequent problem with the connection occurs the application likely to be affected is known. A particular runtime may have multiple applications running on top of the runtime and the connection ID may in the first instance have been associated with the runtime rather than the individual application. In exemplary embodiments the methods systems and computer program products described herein allow the system to know which application running on the runtime is actually using the connection.

In exemplary embodiments in terms of hardware architecture as shown in the computer includes a processor memory coupled to a memory controller and one or more input and or output I O devices or peripherals that are communicatively coupled via a local input output controller . The input output controller can be for example but not limited to one or more buses or other wired or wireless connections as is known in the art. The input output controller may have additional elements which are omitted for simplicity such as controllers buffers caches drivers repeaters and receivers to enable communications. Further the local interface may include address control and or data connections to enable appropriate communications among the aforementioned components.

The processor is a hardware device for executing software particularly that stored in memory . The processor can be any custom made or commercially available processor a central processing unit CPU an auxiliary processor among several processors associated with the computer a semiconductor based microprocessor in the form of a microchip or chip set a macroprocessor or generally any device for executing software instructions.

The memory can include any one or combination of volatile memory elements e.g. random access memory RAM such as DRAM SRAM SDRAM etc. and nonvolatile memory elements e.g. ROM erasable programmable read only memory EPROM electronically erasable programmable read only memory EEPROM programmable read only memory PROM tape compact disc read only memory CD ROM disk diskette cartridge cassette or the like etc. . Moreover the memory may incorporate electronic magnetic optical and or other types of storage media. Note that the memory can have a distributed architecture where various components are situated remote from one another but can be accessed by the processor .

The software in memory may include one or more separate programs each of which comprises an ordered listing of executable instructions for implementing logical functions. In the example of the software in the memory includes the application name and client ID pairing methods described herein in accordance with exemplary embodiments and a suitable operating system OS . The operating system essentially controls the execution of other computer programs such the application name and client ID pairing systems and methods described herein and provides scheduling input output control file and data management memory management and communication control and related services.

The application name and client ID pairing methods described herein may be in the form of a source program executable program object code script or any other entity comprising a set of instructions to be performed. When a source program then the program needs to be translated via a compiler assembler interpreter or the like which may or may not be included within the memory so as to operate properly in connection with the OS . Furthermore the application name and client ID pairing methods can be written as an object oriented programming language which has classes of data and methods or a procedure programming language which has routines subroutines and or functions.

In exemplary embodiments a conventional keyboard and mouse can be coupled to the input output controller . Other output devices such as the I O devices may include input devices for example but not limited to a printer a scanner microphone and the like. Finally the I O devices may further include devices that communicate both inputs and outputs for instance but not limited to a network interface card NIC or modulator demodulator for accessing other files devices systems or a network a radio frequency RF or other transceiver a telephonic interface a bridge a router and the like. The system can further include a display controller coupled to a display . In exemplary embodiments the system can further include a network interface for coupling to a network . The network can be an IP based network for communication between the computer and any external server client and the like via a broadband connection. The network transmits and receives data between the computer and external systems. In exemplary embodiments network can be a managed IP network administered by a service provider. The network may be implemented in a wireless fashion e.g. using wireless protocols and technologies such as WiFi WiMax etc. The network can also be a packet switched network such as a local area network wide area network metropolitan area network Internet network or other similar type of network environment. The network may be a fixed wireless network a wireless local area network LAN a wireless wide area network WAN a personal area network PAN a virtual private network VPN intranet or other suitable network system and includes equipment for receiving and transmitting signals.

If the computer is a PC workstation intelligent device or the like the software in the memory may further include a basic input output system BIOS omitted for simplicity . The BIOS is a set of essential software routines that initialize and test hardware at startup start the OS and support the transfer of data among the hardware devices. The BIOS is stored in ROM so that the BIOS can be executed when the computer is activated.

When the computer is in operation the processor is configured to execute software stored within the memory to communicate data to and from the memory and to generally control operations of the computer pursuant to the software. The application name and client ID pairing methods described herein and the OS in whole or in part but typically the latter are read by the processor perhaps buffered within the processor and then executed.

When the systems and methods described herein are implemented in software as is shown in it the methods can be stored on any computer readable medium such as storage for use by or in connection with any computer related system or method. In the context of this document a computer readable medium is an electronic magnetic optical or other physical device or means that can contain or store a computer program for use by or in connection with a computer related system or method. The application name and client ID pairing methods described herein can be embodied in any computer readable medium for use by or in connection with an instruction execution system apparatus or device such as a computer based system processor containing system or other system that can fetch the instructions from the instruction execution system apparatus or device and execute the instructions. In exemplary embodiments a computer readable medium can be any means that can store communicate propagate or transport the program for use by or in connection with the instruction execution system apparatus or device. The computer readable medium can be for example but not limited to an electronic magnetic optical electromagnetic infrared or semiconductor system apparatus device or propagation medium. More specific examples a non exhaustive list of the computer readable medium would include the following an electrical connection electronic having one or more wires a portable computer diskette magnetic a random access memory RAM electronic a read only memory ROM electronic an erasable programmable read only memory EPROM EEPROM or Flash memory electronic an optical fiber optical and a portable compact disc read only memory CDROM optical . Note that the computer readable medium could even be paper or another suitable medium upon which the program is printed as the program can be electronically captured via for instance optical scanning of the paper or other medium then compiled interpreted or otherwise processed in a suitable manner if necessary and then stored in a computer memory.

In exemplary embodiments where the application name and client ID pairing methods are implemented in hardware the application name and client ID pairing methods described herein can implemented with any or a combination of the following technologies which are each well known in the art a discrete logic circuit s having logic gates for implementing logic functions upon data signals an application specific integrated circuit ASIC having appropriate combinational logic gates a programmable gate array s PGA a field programmable gate array FPGA etc.

In this form it may be difficult to correlate connections to applications because only the client id of each connection as well as through the TCP IP layer the IP address is provided. The exemplary embodiments described herein determine which application establishes the connection.

In exemplary embodiments the application s class name is obtained from the calling thread for connection creation and this class name is paired with the client ID. For example a class name apps com.comp.office.Application is paired to the client ID BBCTicker . In exemplary embodiments an additional step can include converting step the class name to an application name.

The methods systems and computer program products described herein can run a JVM monitor when the connecting application is a Java application. In exemplary embodiments a given application can resolve connections back to the class name of the connecting application such as programs that are of native code. Currently many applications implemented by firewalls replace networking libraries e.g. dynamic linking libraries . In exemplary embodiments the application implements the networking libraries to monitor the applications that call networking methods. In another example Linux is open and includes APIs for callbacks on any system calls including networking calls. In exemplary embodiments the systems and methods described herein access an operating system s networking layer to perform monitoring establishing connections and pairing application name and Client IDs as described herein.

In an example messaging between two applications developed using heterogeneous technologies that are using a small footprint broker for inter process communications are studied. A first application by default has a broker running and may be used to communicate with documents of a second application so for example a document can show the online status of an email address in it in green if online black otherwise . This example illustrates how multiple applications are using the broker on the same box. Any one application may have multiple connections to the broker and when there are multiple applications there are multiple connections from the same IP address and the ability to correlate the connections to applications in a real time manner live the information becomes unavailable when no longer correct a sudden death to the JVM transport channel etc. would make administration and problem determination for this particular scenario easier

In the example the broker is run by default with the first application the pairing is published with no length restriction by a plugin of the first application which monitors the JVM for when a connection creation is made monitoring profiling API s for JVM . This information is correct until the JVM monitor is told that the application has died or the broker performs the Last Will and Testament after which this pairing is no longer present.

Technical effects and benefits include retaining existing protocols and existing API and retaining an application name in any existing field like the client ID field .

As described above the embodiments of the invention may be embodied in the form of computer implemented processes and apparatuses for practicing those processes. Embodiments of the invention may also be embodied in the form of computer program code containing instructions embodied in tangible media such as floppy diskettes CD ROMs hard drives or any other computer readable storage medium wherein when the computer program code is loaded into and executed by a computer the computer becomes an apparatus for practicing the invention. The present invention can also be embodied in the form of computer program code for example whether stored in a storage medium loaded into and or executed by a computer or transmitted over some transmission medium such as over electrical wiring or cabling through fiber optics or via electromagnetic radiation wherein when the computer program code is loaded into and executed by a computer the computer becomes an apparatus for practicing the invention. When implemented on a general purpose microprocessor the computer program code segments configure the microprocessor to create specific logic circuits.

While the invention has been described with reference to exemplary embodiments it will be understood by those skilled in the art that various changes may be made and equivalents may be substituted for elements thereof without departing from the scope of the invention. In addition many modifications may be made to adapt a particular situation or material to the teachings of the invention without departing from the essential scope thereof. Therefore it is intended that the invention not be limited to the particular embodiment disclosed as the best mode contemplated for carrying out this invention but that the invention will include all embodiments falling within the scope of the appended claims. Moreover the use of the terms first second etc. do not denote any order or importance but rather the terms first second etc. are used to distinguish one element from another.

