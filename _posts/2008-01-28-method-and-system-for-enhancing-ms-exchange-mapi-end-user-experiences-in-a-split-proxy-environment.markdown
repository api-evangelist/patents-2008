---

title: Method and system for enhancing MS exchange (MAPI) end user experiences in a split proxy environment
abstract: A split proxy is configured for managing asynchronous MAPI communications between a client and a server by establishing a queuing structure for MAPI messages that make up the communications. The MAPI messages are subsequently exchanged between the client and the server using the queuing structure. Multiple remote procedure calls (RPCs) underlying the MAPI messages may be grouped together in batches for exchange between proxies of the split proxy. Also, when the client logs off from the server, a MAPI keep-alive process allows updates received at the server to be pre-populated to the split proxy for transfer to the client when it reestablishes a connection.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08505038&OS=08505038&RS=08505038
owner: Blue Coat Systems, Inc.
number: 08505038
owner_city: Sunnyvale
owner_country: US
publication_date: 20080128
---
The present invention relates to systems and methods for providing support for messaging application programming interface MAPI exchanges in a split proxy architecture.

MAPI the messaging application programming interface is a communication protocol that allows client programs to become e mail messaging enabled aware or based by calling subroutines that interface with messaging services. For example MAPI allows a user to send e mails from within an application such as a word processor e.g. Microsoft Word and attach the document that the user is composing. Importantly MAPI is the communication protocol used by the popular Microsoft Outlook client to communicate with Exchange servers to send and receive e mails and other notifications e.g. calendar updates etc. in enterprise networks. Here the term client is generally used to refer to a computer program that requests services and server is used to refer to the computer program that provides the requested services.

Microsoft regards the MAPI protocol which is based on the Microsoft Remote Procedure Call RPC used by Outlook Exchange to be proprietary and does not release details of the protocol to third parties. Nevertheless third parties have been able to examine communication exchanges between Outlook clients and Exchange servers in order to understand how these two entities communicate with one another. Such understanding has allowed third parties to provide support for MAPI messaging in proxies deployed between Outlook clients and Exchange servers thus contributing to better overall user experiences in networks where such proxies are used.

A proxy or proxy server as it is sometimes called is a form of computer based device used to regulate traffic in computer networks. Generally a proxy is a computer system and or application program that resides logically between one or more clients and one or more content sources e.g. servers and which terminates connections between the clients and the content sources In response to a client request for example for a specified service file connection web page or other resource the proxy provides the requested content directly e.g. if it stores a local copy of same or connects to the specified server and makes the request on behalf of the client. In this latter case the proxy may retain a copy of the requested content so as to service later requests for that content directly without having to connect to the server. Proxies may also be used to filter network traffic based on various criteria.

One relatively recent use of proxies is in application delivery networks ADNs . ADNs have become common in large enterprises where there is a need to deliver business applications to remote users and or branch offices. ADNs typically embody layers of caching compression traffic shaping quality of service management and application specific processes to optimize content delivery between clients and servers. The goal of the ADN is to accelerate delivery of content to the resources where it will be used or consumed.

To provide for this acceleration within an ADN or other network a split proxy configuration may be used. A split proxy is essentially a pair of proxies installed across two computer based systems. Since they are effectively two parts of the same program they can communicate with each other in a more efficient way than can conventional clients and content sources. For example individual nodes of a split proxy can communicate efficiently with one another through the use of byte caching.

Byte caching or dictionary compression as it is sometimes called eliminates the repeated transmission of sequences of bytes sent over computer to computer connections. The goal of byte caching is to recognize and eliminate repeated sequences within the communication stream between the two computer systems. That is instead of transmitting the repeated sequences an indicator or tag can be used instead. So long as the indicator or tag is smaller than the original data sequence bandwidth is saved by transmitting only the indicator. Such an exchange may take place over a byte cache tunnel between two ends of a split proxy.

The assignee of the present invention has previously provided split proxy support for MAPI. This so called MAPI proxy intercepts and accelerates MAPI communications between Outlook clients and Exchange servers. To facilitate this the MAPI proxy intercepts requests by Outlook clients for Exchange services. The MAPI proxy then looks up the request in a local database and if there is a match replies to the Outlook client with the port number the requested service is listening on. As used herein the term port refers to a logical connection point for a client application to communicate with a server application. Applications are said to listen to ports when they are configured to receive service requests on the specified logical connection points.

If the request from the Outlook client is not in the MAPI proxy s database the MAPI proxy forwards the request to the Exchange server which responds with the port number that the requested service is listening on. The MAPI proxy populates its internal database with this information creates a listener on that port and responds to the Outlook client with the port number.

Thereafter when the Outlook client connects to the requested service the MAPI proxy intercepts the request and tunnels it between the split proxy pair e.g. proxies and in . Substantial performance increases can be realized because the local proxy device i.e. the one located close to the Outlook client caches server information negating the requirement to connect to an upstream server for repeated requests. Further the local proxy compresses the Outlook traffic and sends it over the tunnel connection to the remote proxy i.e. the one located nearer the Exchange server which decompresses the data before sending it to the server.

While this legacy MAPI proxy works well for older version of the MAPI protocol recent changes to the MAPI protocol demand that new approaches be adopted in order to support MAPI based communications between clients and servers.

In one embodiment of the present invention a split proxy is configured for managing asynchronous MAPI communications between a client and a server by establishing a queuing structure for messages that make up the communications. The messages are subsequently exchanged between the client and the server using the queuing structure. Multiple remote procedure calls RPCs underlying the MAPI communications may be grouped together in batches for exchange between proxies of the split proxy. Also when the client logs off from the server a MAPI keep alive process allows updates received at the server to be pre populated to the split proxy for transfer to the client when it reestablishes a connection.

Described herein are systems and methods for providing support for MAPI exchanges in a split proxy architecture. For example the present MAPI proxy supports asynchronous MAPI communications between clients and servers. In addition the present MAPI proxy employs batching in order to accelerate client server communications and utilizes a keep alive feature that allows the proxy to maintain a connection to the server even after a client has disconnected from the system. This helps to reduce the number of bytes retrieved from the server than would otherwise be the case if an Outlook client had to pick up mail from the server each time it reconnected to a network.

Some portions of the detailed description that follows are presented in terms of algorithms and symbolic representations of operations on data within a computer memory. These algorithmic descriptions and representations are the means used by those skilled in the computer science arts to most effectively convey the substance of their work to others skilled in the art. An algorithm is here and generally conceived to be a self consistent sequence of steps leading to a desired result. The steps are those requiring physical manipulations of physical quantities. Usually though not necessarily these quantities take the form of electrical or magnetic signals capable of being stored transferred combined compared and otherwise manipulated. It has proven convenient at times principally for reasons of common usage to refer to these signals as bits values elements symbols characters terms numbers or the like. It should be borne in mind however that all of these and similar terms are to be associated with the appropriate physical quantities and are merely convenient labels applied to these quantities. Unless specifically stated otherwise it will be appreciated that throughout the description of the present invention use of terms such as creates initializes ties binds opens processing computing calculating determining displaying or the like refer to the action and processes of a computer system or similar electronic computing device that manipulates and transforms data represented as physical electronic quantities within the computer system s registers and memories into other data similarly represented as physical quantities within the computer system memories or registers or other such information storage transmission or display devices.

One embodiment of the present invention is instantiated in computer software that is computer readable instructions which when executed by one or more computer processors systems instruct the processors systems to perform the designated actions. Such computer software may be resident in one or more computer readable media such as hard drives CD ROMs DVD ROMs read only memory read write memory and so on. Such software may be distributed on one or more of these media or may be made available for download across one or more computer networks e.g. the Internet . Regardless of the format the computer programming rendering and processing techniques discussed herein are simply examples of the types of programming rendering and processing techniques that may be used to implement aspects of the present invention. These examples should in no way limit the present invention which is best understood with reference to the claims that follow this description.

According to one embodiment of the present invention processor executes one or more sequences of one or more instructions contained in main memory . Such instructions may be read into main memory from another computer readable medium such as storage device . Execution of the sequences of instructions contained in main memory causes processor to perform the process steps described herein. One or more processors in a multi processing arrangement may also be employed to execute the sequences of instructions contained in main memory . In alternative embodiments hard wired circuitry may be used in place of or in combination with software instructions. Thus embodiments are not limited to any specific combination of hardware circuitry and software.

Further the instructions to support the interfaces and protocols of the present system may reside on a computer readable medium. The term computer readable medium as used herein refers to any medium that participates in providing instructions to processor for execution. Common forms of computer readable media include for example a floppy disk a flexible disk hard disk magnetic tape or any other magnetic medium a CD ROM any other optical medium punch cards paper tape any other physical medium with patterns of holes a RAM a PROM and EPROM a FLASH EPROM any other memory chip or cartridge or any other medium from which a computer can read.

Computer system also includes a communication interface coupled to bus . Communication interface provides a two way data communication coupling to a network link that is connected to a local network . For example communication interface may be a network interface card. As another example communication interface may be an asymmetrical digital subscriber line ADSL card an integrated services digital network ISDN card or a modem to provide a data communication connection to a corresponding type of telephone line. Wireless links may also be implemented hi any such implementation communication interface sends and receives electrical electromagnetic or optical signals that carry digital data streams representing various types of information.

In accordance with the present invention MAPI communication processing is employed across the co operating nodes of a split proxy such as split proxy in . For convenience the proxy closest to the server proxy in will be referred to as the concentrator and the proxy closest to the Outlook client proxy in will be referred to as the branch proxy. In some embodiments these roles are arbitrary for the distinction between a client and a server may depend on which application is requesting services from another at a particular time.

For purposes of discussion herein the separate nodes of the split proxy will be discussed as being instantiated on separate computer systems however it should be recognized that the nodes may be instantiated as programs executing on a client and or a server platform. For example one of the nodes of the split proxy may be included as part of a client browser application while the second node is a separate computer system deployed between the client and server. In other cases one of the nodes of the split proxy may be instantiated as a program executing on the server while the second node is a stand alone computer system deployed between the server and a client. In still further cases both nodes of the split proxy may be deployed on separate stand alone computer systems deployed between the client and the server. While in other embodiments one node of the split proxy may be instantiated as a program executing on the client with the other node instantiated as a program executing on the server. The exact physical configuration and instantiation of the co operating nodes of the split proxy is not critical to the present invention.

As alluded to above MAPI relies on underlying remote procedure calls RPCs between clients and servers. Such RPCs are common where one application requests a service from another application and generally speaking in such an architecture any requesting program may be viewed as a client and any providing service as a server. RPCs allow a client application to request and thereby cause a server application to execute an action without the requirement of explicit instructions being provided.

In the context of a split proxy the Outlook client sends an RPC request which the branch proxy intercepts. The branch proxy then sends the request to the concentrator which transmits the request to the Exchange server. In reply the Exchange server sends an RPC response which concentrator intercepts and sends to the branch proxy. The branch proxy then sends the RPC response to the client.

In legacy versions of MAPI the underlying RPCs were synchronous in nature. That is a MAPI client would make a request and wait until the MAPI server fulfilled that request before the MAPI client issued another request. Legacy MAPI proxies supported this regime by switching listening sockets from client to server and back again as each request or response was processed. A socket is a software object that connects an application to a network or communication protocol.

Newer versions of MAPI however permit asynchronous communication between the client and the server. Thus a client may issue multiple requests to a server before receiving any responses to same. Stated differently a client may have more than one request pending at a time. A MAPI proxy configured for processing synchronous MAPI RPCs will not support such communications and indeed may break a connection between a client and a server e.g. by missing RPC requests made by a client or responses returned by a server .

To prevent this sort of communication failure the present invention provides a MAPI proxy architected to provide support for asynchronous MAPI communications. In particular the present MAPI proxy is configured to permit queuing of requests and responses at the branch proxy and the concentrator. For example requests may be queued up at the concentrator prior to transfer to the Exchange server and responses may be queued up at the branch proxy before being transferred to the Outlook client.

Between the branch proxy and the concentrator efficiencies may be achieved by encapsulating the various RPC messages requests and or responses within other message structures. For convenience these encapsulating messages will be referred to as CEEP messages for core to edge encapsulation protocol . The exact format of these CEEP messages is not critical to the present invention indeed the use thereof is optional and the pay load of the CEEP messages may be either RPC packets from the Outlook client to the Exchange server or fabricated pay loads used in connection with a keep alive feature discussed below .

To facilitate the message queuing at the branch proxy and the concentrator a unique identifier called a call id for each RPC message and its corresponding CEEP message is used. In this way every RPC response may be ultimately associated back to its respective RPC request. Thus the present MAPI proxy allows for asynchronous message exchanges between the client and the server.

Referring now to in one embodiment of the invention upon detecting a new communication e.g. a MAPI request issued by an Outlook client the MAPI proxy creates appropriate client and server sockets m client socket and m server socket respectively and related input output I O queues m client io queue and m server io queue at each proxy of the split proxy pair. At the branch proxy the client socket is used to communicate with the Outlook client RPC protocol packets are sent and received on this socket. The server socket at the branch proxy is used to communicate with the concentrator using CEEP messages. At the concentrator the client socket is used to communicate with the branch proxy using CEEP messages while the server socket is used to communicate with the Exchange server using RPC protocol packets .

In some embodiments the present MAPI proxy may employ batching in order to accelerate client server communications. Because MAPI is based on RPC messages that are transferred in blocks of data performance issues arise when e mail clients and servers are located at opposite ends of a wide area network from one another. For example in legacy synchronous MAPI schemes clients must stop and wait for each block of data to arrive from the server before requesting the next block. Even in asynchronous MAPI schemes latency issues arise whenever subsequent calls depend on the results of previous calls.

The present MAPI proxy helps to reduce such latencies by reducing the number of RPCs sent across a network from a requesting client to a server. Also the MAPI proxy predicts or reads ahead in order to try and determine what will be requested next and makes that request before it is actually sent by the client. Thus the MAPI proxy begins sending acknowledgments to the server e.g. using fabricated messages before information is actually delivered to the Outlook client.

In addition to batching the MAPI proxy utilizes a keep alive feature that allows the proxy to maintain a connection to the Exchange server after the Outlook client has disconnected from the system. Using fabricated messages made to resemble those which would otherwise be sent by an Outlook client the MAPI proxy periodically checks the Exchange server for new mail and stores it locally so that when the true Outlook client reestablishes a connection e.g. when the associated user logs in the number of retrieved bytes from the server is fewer than it otherwise would be if the Outlook client had to pick up mail from the time it disconnected.

To support these batching and keep alive functions then and to reduce the traffic traveling across the network the branch proxy is configured to fabricate responses as if it were the server in order to prompt the client to generate further requests and the concentrator is configured to fabricate requests as if it were the client in order to prompt the server to generate additional responses. This requires a message queuing architecture incorporating CEEP Request queues and CEEP Response queues at both the branch proxy and the concentrator as well as careful tracking of the call ids of RPC and CEEP messages. In one embodiment of the invention RPCs are processed when they reach the head of an associated queue or at an earlier time according to the following logic.

Referring to process illustrated in when an RPC request is received at the branch proxy from the Outlook client 

Referring now to process illustrated in when a CEEP request which may in the context of a keep alive session be a fabricated message or otherwise will correspond to an RPC request sent by the Outlook client is received from the branch proxy at the concentrator 

Referring to process shown in at the branch proxy when a CEEP response is received from the concentrator 

It is important to note that although MAPI connections make use of underlying RPCs a MAPI connection is not synonymous with an RPC connection. Instead each MAPI connection may utilize more than one RPC connection to communicate during its lifetime and may even use multiple RPC connections at the same time in asynchronous fashion. Thus in accordance with embodiments of the present invention creation and use of the various message queues described above takes place within the context of a MAPI proxy user session. The use of such a user session accounts for the fact that RPC connections are merely commodities that may be utilized by one or more MAPI connections.

The present MAPI proxy is configured to identify and group within the context of a MAPI proxy user session a set of MAPI connections that belong to a single Outlook client application executing on a user s computer system. New MAPI proxy user sessions are detected and created at the point at which the MAPI proxy detects Outlook message sequences. Where available the MAPI proxy user session may utilize identifiers that associate the MAPI connection with an actual user. But even where this information is not available e.g. if the MAPI proxy did not observe the initiation of the Outlook client to Exchange server initial connection the MAPI proxy can use other identifiers to track the state of a particular Outlook sessions across multiple RPC connections.

The use of a MAPI proxy user session also facilitates the implementation of the keep alive feature. When an Outlook client logs off from the Exchange server this event is detected and the MAPI proxy keeps a single connection to the server open to pre populate the user s mailbox at the proxy. Upon return when the user logs in his her Outlook client that client is populated from the MAPI proxy rather than having to connect to the Exchange server.

A MAPI connection may be identified by the MAPI proxy using MAPI policy handles i.e. MAPI connection unique identifiers . These policy handles apply across different RPCs. In the case where the MAPI proxy is able to identify a new Outlook client logging to the Exchange server the MAPI proxy is able to establish a user aware MAPI proxy user session. That is a session which uses a MAPI user DN i.e. a string of characters representing a user domain name in a MAPI system e.g. O xxxxMAIL ou First administrative Group cn Reciptents cn UserName as a primary key. This session keeps state of all the RPC connections that are tied to this particular Outlook client e.g. using the call id parameter discussed above .

In other cases the MAPI proxy must deal with an Outlook client that has been running for some time. In these instances the MAPI proxy may have no prior knowledge about the traffic associated with that particular client. That is the MAPI proxy may not be user aware. In such cases the MAPI proxy uses a MAPI policy handle to track the various RPC connections associated with the session. Consequently because RPC connections can be tracked for both types of MAPI user sessions the batching feature may be utilized for both types of user sessions.

Alternatively a client and server IP address pair could be used as a lookup key for grouping all RPC connections belonging to a single user. However this approach has limitations in some deployment scenarios. For example it may not work in networks where an IP address could be reused by another Outlook client once the original client logged off from the server and or where an Outlook client acquires a different IP address each time it logs in to the server. In each case the MAPI proxy user session would not be able to properly identify the Outlook client in order to deliver stored traffic after the client had logged out and then later logged back in.

In one embodiment the MAPI keep alive process is configured to periodically check with the server to determine whether a client associated with a given MAPI keep alive session has received any new messages. In order to ensure that only new messages received by the server since the last check was made are retrieved a unique message query is used by the MAPI proxy. This message query manipulates a time parameter in the query so that only messages received by the server since a specified time T are returned. Parameter T is updated each keep alive period for example to specify the time of the last fetch. The result is that fetches during every keep alive event retrieve only the set of messages that have been received within the time between keep alive events at the client s mailbox on the server. In order to achieve full benefit of this approach it is useful if the MAPI proxy and the Exchange server have their clocks synchronized but even if this is not the case so long as parameter T is selected so that no gaps in time occur there should not be any missed messages.

Thus methods and systems have been described. Although discussed with reference to several illustrated embodiments the present invention should not be limited thereby. Instead the invention should only be measured in terms of the claims which follow.

