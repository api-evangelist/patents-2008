---

title: Shield for user interface testing
abstract: Real user input targeting an application under test is blocked to prevent interference with a test. A shield window can be placed in front of an application-under-test window to intercept input destined for the application. Users can be notified of interception or a failed attempt to access the application. Furthermore, the shield window can be employed to provide feedback about the test including pointer movement and area focus.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08261238&OS=08261238&RS=08261238
owner: Microsoft Corporation
number: 08261238
owner_city: Redmond
owner_country: US
publication_date: 20080304
---
Computer programming refers to the process of writing and testing computer programs. Computer programs are groups of instructions specified in one or more programming languages that describe actions to be performed by a computer or other processor based device. When a computer program is loaded and executed on computer hardware the computer will behave in a predetermined manner by following the instructions of the computer program. Accordingly the computer becomes a specialized machine that performs the tasks prescribed by the instructions.

Subsequent to program specification testing is performed to determine whether or not the program operates as intended. If testing reveals that a program does not operate as intended for example where it yields unexpected results this is likely due to design defects or bugs. In fact design defects are almost always present in code of any significant size due to the complexity inherent within. Furthermore correction of defects may introduce new defects into the software. Accordingly repeated testing is often required to improve the likelihood of early detection and resolution of defects.

Program testing is performed at various levels including at a user interface UI or graphical user interface GUI level. The interface is the primary way in which users provide input to and receive output from a program. Among other things testing of UIs involves developing numerous test cases with which to exercise the interface. These test cases are designed to determine how the application will respond to user interaction. UI testing traditionally required a human tester to interact with a UI e.g. performing mouse clicks keyboard entries . . . and verify production of expected results. However such manual testing is time consuming tedious and subject to human error. Currently automated testing is much preferred since it enables repeated testing to be performed quickly and efficiently.

In order to automate testing UIs the tests need to mimic user input and check positioning color and other details of forms buttons menus dialog boxes toolbars and other UI elements. To enable these tests to perform such action libraries are developed that interact with the UI in such a way that the application cannot distinguish between real user input and input provided by the user. This usually entails sending keyboard and mouse commands to the application using either window messages or accessibility application programming interfaces APIs .

The following presents a simplified summary in order to provide a basic understanding of some aspects of the disclosed subject matter. This summary is not an extensive overview. It is not intended to identify key critical elements or to delineate the scope of the claimed subject matter. Its sole purpose is to present some concepts in a simplified form as a prelude to the more detailed description that is presented later.

Briefly described the subject disclosure pertains to shielding applications under test from intentional or unintentional injection of input that can negatively affect a test. The reliability of automated UI tests is improved by enabling separation of test input from user input. In accordance with an aspect of the disclosure this separation can be achieved by employing a shield to block or intercept all input destined for an application under test. In one particular implementation the shield is embodied as a window positioned in front of a window associated with an application under test. According to another aspect of the disclosure the shield can be employed to provide feedback about a related test. In one instance the feedback can include textual and or graphical information that enables users to monitor activity of the test component visually.

To the accomplishment of the foregoing and related ends certain illustrative aspects of the claimed subject matter are described herein in connection with the following description and the annexed drawings. These aspects are indicative of various ways in which the subject matter may be practiced all of which are intended to be within the scope of the claimed subject matter. Other advantages and novel features may become apparent from the following detailed description when considered in conjunction with the drawings.

Systems and methods pertaining to a shield for user interface testing are described in detail hereinafter. UI test reliability can be negatively impacted by real user input such as a mouse movement or key entry as opposed to input from a test. The user and test input can be separated with a shield that blocks user input targeting an application under test. In one embodiment the shield can be a window that is positioned on top of a window of an application under test. Users can be notified if the shield intercepts any input. Furthermore the shield can provide feedback about the test.

Various aspects of the subject disclosure are now described with reference to the annexed drawings wherein like numerals refer to like or corresponding elements throughout. It should be understood however that the drawings and detailed description relating thereto are not intended to limit the claimed subject matter to the particular form disclosed. Rather the intention is to cover all modifications equivalents and alternatives falling within the spirit and scope of the claimed subject matter.

Referring initially to an application testing system is depicted in accordance with an aspect of the claimed subject matter. The system includes an application component such as a user interface UI or graphical user interface GUI . The application component is exercised by test component . In particular the test component provides input to the application component and receives results that it can compare to expected results to determine if the application component is operating as intended. The test input can seek to imitate user input such as moving a mouse clicking a button and entering text among other things.

The system also includes a shield component that shields the application component from intentional or accidental user input for example via a keyboard or pointing device e.g. mouse trackball touchpad . . . among other input devices. Without the shield component user input could be injected into the application component . This can cause testing problems since the application is being passed test input that it thinks is coming from a real user. Introduction of real user input in addition to the test input can introduce errors in automated testing. The shield component ensures separation of test and user input by blocking or intercepting user input destined for the application component . In accordance with one aspect of the disclosure the shield component can be embodied as a shield window positioned in front of an application window to catch all input directed to the application.

Turning to a test shield system or framework is illustrated in accordance with an aspect of the claimed subject matter. The system includes a shield generation component to generate or construct a shield. In one instance the generation component can construct or spawn an application window or a rectangular shaped viewing area on a screen. This shield window is able to receive user input from an input device including but not limited to a keyboard and or pointing device e.g. mouse trackball touch pad . . . . The system also includes a shield position component that positions a shield in front an application under test window. In this manner the shield can block or intercept calls targeted intentionally or accidently for the application under test.

Turning attention to a representative position component is depicted according to an aspect of the claimed subject matter. The position component includes a number of sub components to facilitate positioning of a shield window including location component focus identifier component and message sender component .

The location component identifies the position and or size of a window owned by an application under test. This facilitates positioning of a shield window of corresponding size on top of or in front of the application under test window which ensures that only input destined for the window associated with the application under test will be blocked or intercepted. Furthermore should the test application move and or resize the window it controls the position component can ensure that the shield window is adjusted in a similar manner utilizing location component .

The focus identifier component determines when an application under test window is in focus. In a graphical user interface including multiple application windows only one window is typically active or in focus at a time. Many windows can reside in the background while the window in focus is presented in the foreground. Focus can be changed by clicking on the window or tabbing to the window among other things. When an application under test window is in focus the focus identifier component can note this and communicate this fact to the location component so that a shield window can be positioned in front of this window.

The message sender component communicates a message to the application under test window informing it that it is in the foreground. When an application under test window is in focus a shield window is positioned in the foreground in front of the application window to block input thereto among other things. However in accordance with a disclosed aspect the application can be made unaware of the shield window by sending a fake window message to the application indicating that it is in the foreground when in fact it is not.

Returning to the test shield system can also include a notification component . The notification component can notify or initiate notification of a user in the event that input is blocked by a shield. The notification can indicate to the user that input targeting an application under test was not sent to the application but rather intercepted by the shield. Furthermore the notification component can provide or direct a user to a mechanism to disable the shield at least temporarily. For example if a user notices that a test is failing he she could disable the protection to enable them to interact with the application under test. Subsequently the protection can be re enabled explicitly upon expiration of a time period or detection of some other action.

The test shield system can also include a feedback component that provides information about a test. Among other things the feedback can include information concerning mouse movements active areas and test progress among other things. In accordance with an aspect of the disclosure the feedback component can present feedback in or on a shield window.

Turning attention to a representative feedback component is illustrated in accordance with the claimed subject matter. The feedback component includes a presentation component to render feedback to a shield window for example. The presentation component can support display of text graphics images and animations amongst others. The presentation component can include such rendering functionality and or call an application programming interface API or the like that includes needed presentation functionality. The presentation component can receive data for rendering from test monitor component and test interface component .

The test monitor component monitors a test and the messages being sent to the application under test. In some instances where a particular UI element needs to be observed a test will use window messages. For example one or more window messages can move a mouse pointer over to a button and click it. However in some instances a test can emulate particular user input without providing feedback. For instance a mouse pointer does not move but suddenly a button is clicked. The test monitor component can identify these types of instructions or messages and provide the information to the presentation component which can draw a mouse cursor on the shield component and animate the same movement that was sent to the application but not displayed. In one instance the mouse can be differentiated by color or other means to distinguish it from the main mouse pointer.

Similarly the test monitor component can monitor test instructions and determine an active element. This information can also be provided to the presentation component which can highlight the active element. By way of example a test may say type text into a particular text box. From the instruction the identity of the text box is known. The location and size of the text box can then be requested or otherwise determined and a border can be drawn around the text box in some distinguishing color e.g. yellow red . . . for instance to indicate to a user that text is being typed into this box so that he she can focus attention on that element if he she is trying to determine test action.

The test interface component provides a mechanism to interface with the feedback component . In one instance a test can utilize this interface to identify or provide information about what it is doing with an application for presentation in a shield window. For example the test can provide test progress information such as the time remaining the tests performed and or the result of tests among other things. Additionally or alternatively the test might indicate that it desires rendering of a custom thing.

Consider a situation where a test is performing a drag and drop action on the application under test. The presentation component might be capable of displaying the execution such action on the shield. Alternatively if such a user interface element or action is not supported a user can be alerted to such action via a text messages displayed on the shield. Still further yet the presentation component can instruct the test to take control of drawing an indication of this action inside the shield.

Referring to an exemplary graphical interface illustrating utilization of feedback is depicted in accordance with an aspect of this disclosure. As shown the application under test window displays a box including some text and two smaller boxes representing buttons perhaps in the middle of the window. The shield window is substantially transparent or invisible and operable to block or intercept input destined for the application under test window. Moreover the shield window displays test feedback information. In particular the shield window includes a rectangle of the same size as the box displayed by the application under test window of sizeable line width. Additionally the shield window includes a graphical depiction of a mouse pointer that can be moved around the shield window in response to test action. Still further yet the shield window includes a progress bar illustrating a percentage of test completed or conversely the amount of testing left to be performed. The combination of application under test and shield window affords protection against undesired input and enhances the test feedback making it easier for users to understand what the test is doing. For instance the layering of the transparent or semi transparent shield window including a visible rectangular box on top of the application under test window acts to highlight the application box as active.

The aforementioned systems architectures and the like have been described with respect to interaction between several components. It should be appreciated that such systems and components can include those components or sub components specified therein some of the specified components or sub components and or additional components. Sub components could also be implemented as components communicatively coupled to other components rather than included within parent components. Further yet one or more components and or sub components may be combined into a single component to provide aggregate functionality. Communication between systems components and or sub components can be accomplished in accordance with either a push and or pull model. The components may also interact with one or more other components not specifically described herein for the sake of brevity but known by those of skill in the art.

Furthermore as will be appreciated various portions of the disclosed systems above and methods below can include or consist of artificial intelligence machine learning or knowledge or rule based components sub components processes means methodologies or mechanisms e.g. support vector machines neural networks expert systems Bayesian belief networks fuzzy logic data fusion engines classifiers . . . . Such components inter alia can automate certain mechanisms or processes performed thereby to make portions of the systems and methods more adaptive as well as efficient and intelligent. By way of example and not limitation the location component can employ such mechanisms to infer application under test window location.

In view of the exemplary systems described supra methodologies that may be implemented in accordance with the disclosed subject matter will be better appreciated with reference to the flow charts of . While for purposes of simplicity of explanation the methodologies are shown and described as a series of blocks it is to be understood and appreciated that the claimed subject matter is not limited by the order of the blocks as some blocks may occur in different orders and or concurrently with other blocks from what is depicted and described herein. Moreover not all illustrated blocks may be required to implement the methodologies described hereinafter.

Referring to a method for shielding applications under test is depicted in accordance with an aspect of the claimed subject matter. At reference numeral messages are received from one or more input devices including but not limited to a keyboard and a pointing device e.g. mouse trackball touchpad . . . . At numeral messages that target an application under test are identified. For example where an application under test window is determined to be in focus active or brought to the foreground input received can be identified as targeting the application under test. The messages identified as targeting an application under test are blocked at numeral . In other words method provides a mechanism to filter input. Any input bound for an application under test is blocked while all other input is allowed. This enables users to continue to utilize a machine and applications thereon without accidently injecting problems into an application under test.

Referring to a shield deployment method is illustrated in accordance with an aspect of the claimed subject matter. At reference numeral a focus is identified on an application window desired to be protected such an application under test window. For example a user can click on or tab to such a window to bring focus thereto. Additionally or alternatively an application window may come into focus automatically upon initial execution for instance. At numeral the size and position of the application window is determined. This can be done for example employing application programming interface API provided by a platform. At reference a shield window is generated if not generated previously. The shield window can be an opaque transparent or semi transparent window. In one implementation this can be accomplished by a simple operating system or platform call. The shield window of the same size is positioned in front of the application window at reference numeral to enable interception of calls to the application window among other things. At reference a fake message is passed to the application window indicating that it is in the foreground thereby making it unaware or independent of the application window. At numeral a method is registered with an event such that if the size or position of the application window changes the shield window changes as well. This ensures that the shield window captures all input directed to the application window and nothing more. Otherwise the application window could move as part of the test and a user could inject input into the window. Alternatively the shield could capture input for a different application window.

It is to be noted that while the shield systems and methods described above are particularly useful in a test context the disclosed subject matter is not limited to the testing domain. The shield window and associated support mechanisms can be employed with respect to any application or application window that one desires to protect from injection of input. In one particular instance the shield can be utilized as a security mechanism to protect any graphical element from modification. In this scenario security credentials can be required and employed to activate and deactivate the shield.

The word exemplary or various forms thereof are used herein to mean serving as an example instance or illustration. Any aspect or design described herein as exemplary is not necessarily to be construed as preferred or advantageous over other aspects or designs. Furthermore examples are provided solely for purposes of clarity and understanding and are not meant to limit or restrict the claimed subject matter or relevant portions of this disclosure in any manner. It is to be appreciated that a myriad of additional or alternate examples of varying scope could have been presented but have been omitted for purposes of brevity.

As used herein the term inference or infer refers generally to the process of reasoning about or inferring states of the system environment and or user from a set of observations as captured via events and or data. Inference can be employed to identify a specific context or action or can generate a probability distribution over states for example. The inference can be probabilistic that is the computation of a probability distribution over states of interest based on a consideration of data and events. Inference can also refer to techniques employed for composing higher level events from a set of events and or data. Such inference results in the construction of new events or actions from a set of observed events and or stored event data whether or not the events are correlated in close temporal proximity and whether the events and data come from one or several event and data sources. Various classification schemes and or systems e.g. support vector machines neural networks expert systems Bayesian belief networks fuzzy logic data fusion engines . . . can be employed in connection with performing automatic and or inferred action in connection with the subject innovation.

Furthermore all or portions of the subject innovation may be implemented as a method apparatus or article of manufacture using standard programming and or engineering techniques to produce software firmware hardware or any combination thereof to control a computer to implement the disclosed innovation. The term article of manufacture as used herein is intended to encompass a computer program accessible from any computer readable device or media. For example computer readable media can include but are not limited to magnetic storage devices e.g. hard disk floppy disk magnetic strips . . . optical disks e.g. compact disk CD digital versatile disk DVD . . . smart cards and flash memory devices e.g. card stick key drive . . . . Additionally it should be appreciated that a carrier wave can be employed to carry computer readable electronic data such as those used in transmitting and receiving electronic mail or in accessing a network such as the Internet or a local area network LAN . Of course those skilled in the art will recognize many modifications may be made to this configuration without departing from the scope or spirit of the claimed subject matter.

In order to provide a context for the various aspects of the disclosed subject matter as well as the following discussion are intended to provide a brief general description of a suitable environment in which the various aspects of the disclosed subject matter may be implemented. While the subject matter has been described above in the general context of computer executable instructions of a program that runs on one or more computers those skilled in the art will recognize that the subject innovation also may be implemented in combination with other program modules. Generally program modules include routines programs components data structures etc. that perform particular tasks and or implement particular abstract data types. Moreover those skilled in the art will appreciate that the systems methods may be practiced with other computer system configurations including single processor multiprocessor or multi core processor computer systems mini computing devices mainframe computers as well as personal computers hand held computing devices e.g. personal digital assistant PDA phone watch . . . microprocessor based or programmable consumer or industrial electronics and the like. The illustrated aspects may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. However some if not all aspects of the claimed subject matter can be practiced on stand alone computers. In a distributed computing environment program modules may be located in both local and remote memory storage devices.

With reference to an exemplary environment for implementing various aspects disclosed herein includes a computer e.g. desktop laptop server hand held programmable consumer or industrial electronics . . . . The computer includes a processing unit a system memory and a system bus . The system bus couples system components including but not limited to the system memory to the processing unit . The processing unit can be any of various available microprocessors. It is to be appreciated that dual microprocessors multi core and other multiprocessor architectures can be employed as the processing unit .

The system memory includes volatile and nonvolatile memory. The basic input output system BIOS containing the basic routines to transfer information between elements within the computer such as during start up is stored in nonvolatile memory. By way of illustration and not limitation nonvolatile memory can include read only memory ROM . Volatile memory includes random access memory RAM which can act as external cache memory to facilitate processing.

Computer also includes removable non removable volatile non volatile computer storage media. illustrates for example mass storage . Mass storage includes but is not limited to devices like a magnetic or optical disk drive floppy disk drive flash memory or memory stick. In addition mass storage can include storage media separately or in combination with other storage media.

The computer also includes one or more interface components that are communicatively coupled to the bus and facilitate interaction with the computer . By way of example the interface component can be a port e.g. serial parallel PCMCIA USB FireWire . . . or an interface card e.g. sound video network . . . or the like. The interface component can receive input and provide output wired or wirelessly . For instance input can be received from devices including but not limited to a pointing device such as a mouse trackball stylus touch pad keyboard microphone joystick game pad satellite dish scanner camera other computer and the like. Output can also be supplied by the computer to output device s via interface component . Output devices can include displays e.g. CRT LCD plasma . . . speakers printers and other computers among other things.

The system includes a communication framework that can be employed to facilitate communications between the client s and the server s . The client s are operatively connected to one or more client data store s that can be employed to store information local to the client s . Similarly the server s are operatively connected to one or more server data store s that can be employed to store information local to the servers .

Client server interactions can be utilized with respect with respect to various aspects of the claimed subject matter. By way of example and not limitation applications under test can be network base applications that execute in a browser window that is shielded. Furthermore the shield system can be network based or a client application that is downloaded from a server to a client across the communication framework .

What has been described above includes examples of aspects of the claimed subject matter. It is of course not possible to describe every conceivable combination of components or methodologies for purposes of describing the claimed subject matter but one of ordinary skill in the art may recognize that many further combinations and permutations of the disclosed subject matter are possible. Accordingly the disclosed subject matter is intended to embrace all such alterations modifications and variations that fall within the spirit and scope of the appended claims. Furthermore to the extent that the terms includes contains has having or variations in form thereof are used in either the detailed description or the claims such terms are intended to be inclusive in a manner similar to the term comprising as comprising is interpreted when employed as a transitional word in a claim.

