---

title: Methods, systems, and computer program products for asynchronous resumption of a dataflow
abstract: A method, system, and computer program product for providing asynchronous resumption of a dataflow are provided. The method includes building an executable directed graph from a dataflow that includes multiple interconnected nodes, where at least one of the interconnected nodes is an asynchronous node. The method further includes creating an event flow that includes the asynchronous node and interconnections subsequent to the asynchronous node. The method also includes invoking execution of the executable directed graph, and creating a state object with an identifier associated with the event flow in response to reaching the asynchronous node. The method additionally includes continuing execution of the executable directed graph while avoiding the asynchronous node and the interconnections subsequent to the asynchronous node, and resuming execution of the event flow as identified via the state object upon receiving a response for the asynchronous node.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08843938&OS=08843938&RS=08843938
owner: International Business Machines Corporation
number: 08843938
owner_city: Armonk
owner_country: US
publication_date: 20080702
---
The present invention relates generally to computer services management and in particular to providing asynchronous resumption of a dataflow following a service invocation.

Service Oriented Architecture SOA is a development of distributed computing and modular programming in which existing or new technologies are grouped into atomic systems. SOAs use software services to build applications. Services are relatively large intrinsically unassociated units of functionality with externalized service descriptions. In an SOA environment one or more services communicate with one another by passing data from one service to another or coordinating an activity between one or more services. In this manner atomic services can be orchestrated into higher level services. The architecture defines protocols that describe how services can talk to each other and independent services can be accessed without knowledge of the underlying platform implementation.

Services are software applications designed to support interoperable machine to machine interactions over a network such as the Internet and can be executed on local or remote systems hosting the services. Services can provide an SOA implementation in which the basic unit of communication is a message rather than an operation by making functional building blocks accessible over standard Internet protocols that are independent from platforms and programming languages. Service requesters may use a variety of protocols and formatting when requesting services from service providers. An Enterprise Service Bus ESB can control traffic between the service requesters and providers. The ESB provides mediation of a service request to perform transformation routing and other operations on a message before it is sent to a target recipient. For example different protocols or message formats may be encountered when an airline reservation system issues a request for multiple airlines to provide flight information. Mediation can make the protocol and formatting differences appear seamless to the service requesters and providers. The series of mediation activities for a request dataflow or a response dataflow may be implemented in a directed graph of primitive operations. Typically these operations are synchronous in nature.

In some circumstances it may be necessary to invoke an asynchronous primitive operation as part of the mediation for example by invoking an external service to perform the mediation. This is especially true when the original invocation was itself asynchronous or one way. Mediation is typically performed in a container environment such as a Java Platform Enterprise Edition Enterprise JavaBeans Java EE EJB container which does not permit the creation of new threads and callbacks to handle asynchronous behavior. Existing solutions for container asynchronous behavior rely on higher level mechanisms e.g. coupling facility asynchronous beans that do not fit well into a micro flow style flow execution runtime environment used to perform mediation in an SOA. One approach to handling an asynchronous primitive operation is to chain multiple mediation flows together manually at design time. However this approach is cumbersome and time consuming for designers. There are also greater expenses and risks associated with designing and maintaining multiple chained dataflows as a design change in one dataflow may not be properly handled in the other chained dataflows. Chaining can also result in slower performance as synchronous primitive operations are forced to wait for responses from asynchronous primitive operations before proceeding.

Therefore it would be beneficial to develop an approach that enables an asynchronous primitive operation to be invoked as part of a directed graph dataflow with resumption of the dataflow occurring at the correct point when the asynchronous primitive operation completes. Such an approach should allow the asynchronous primitive operation to be called within a common dataflow containing synchronous primitive operations presenting a familiar and non complex experience to the dataflow designer. Accordingly there is a need in the art for providing asynchronous resumption of a dataflow following a service invocation.

An exemplary embodiment is a method for providing asynchronous resumption of a dataflow. The method includes building an executable directed graph from a dataflow that includes multiple interconnected nodes where at least one of the interconnected nodes is an asynchronous node. The method further includes creating an event flow that includes the asynchronous node and interconnections subsequent to the asynchronous node. The method also includes invoking execution of the executable directed graph and creating a state object with an identifier associated with the event flow in response to reaching the asynchronous node. The method additionally includes continuing execution of the executable directed graph while avoiding the asynchronous node and the interconnections subsequent to the asynchronous node and resuming execution of the event flow as identified via the state object upon receiving a response for the asynchronous node.

Another exemplary embodiment is a system for providing asynchronous resumption of a dataflow. The system includes a flow builder executing on a processing system where the flow builder performs a method. The method includes building an executable directed graph from a dataflow comprising multiple interconnected nodes wherein at least one of the interconnected nodes is an asynchronous node and creating an event flow including the asynchronous node and interconnections subsequent to the asynchronous node. The system also includes a flow engine executing on the processing system where the flow engine performs a method. The method includes invoking execution of the executable directed graph and creating a state object with an identifier associated with the event flow in response to reaching the asynchronous node. The method performed by the flow engine additionally includes continuing execution of the executable directed graph while avoiding the asynchronous node and the interconnections subsequent to the asynchronous node and resuming execution of the event flow as identified via the state object upon receiving a response for the asynchronous node.

A further exemplary embodiment is a computer program product for providing asynchronous resumption of a dataflow. The computer program product includes a storage medium readable by a processing circuit and storing instructions for execution by the processing circuit for implementing a method. The method includes invoking execution of an executable directed graph of a dataflow including multiple interconnected nodes where at least one of the interconnected nodes is an asynchronous node. The method further includes creating a state object with an identifier associated with an event flow in response to reaching the asynchronous node where the event flow includes the asynchronous node and interconnections subsequent to the asynchronous node. The method additionally includes continuing execution of the executable directed graph while avoiding the asynchronous node and the interconnections subsequent to the asynchronous node and resuming execution of the event flow as identified via the state object upon receiving a response for the asynchronous node.

Other systems methods and or computer program products according to embodiments will be or become apparent to one with skill in the art upon review of the following drawings and detailed description. It is intended that all such additional systems methods and or computer program products be included within this description be within the scope of the present invention and be protected by the accompanying claims.

The detailed description explains the preferred embodiments of the invention together with advantages and features by way of example with reference to the drawings.

Exemplary embodiments provide asynchronous resumption of a dataflow following a service invocation. An executable dataflow such as a mediation flow implemented as a directed graph is traversed during execution. In exemplary embodiments a flow engine and a flow builder are adapted to handle an asynchronous primitive operation in an otherwise synchronous directed graph. The execution traversal of the graph can be paused with respect to the asynchronous primitive operation and then resumed at an arbitrary point without blocking execution of other synchronous primitive operations in the graph. This allows a dataflow designer to develop the flow without performing additional design steps of developing specific constructions to manage the invocation of the asynchronous primitive. The flow engine and flow builder can be implemented as part of a Service Oriented Architecture SOA to both ease design burdens and enhance performance while executing flows that include asynchronous primitive operations.

Turning now to the drawings it will be seen that in there is a block diagram of a system upon which asynchronous resumption of a dataflow following a service invocation is implemented in exemplary embodiments. The system of includes an SOA infrastructure that supports message delivery between a variety of internal service requesters and external service requesters to internal service providers and external service providers . The internal service requesters and internal service providers can be local to an enterprise. An ESB manages the flow of messages between the service requesters and and the service providers and via an ESB gateway . The ESB gateway may provide basic security and static routing features while the ESB provides advanced features to facilitate intelligent message handling and advanced connectivity options. The ESB provides services to resolve differences in protocol and format and decouples the service requesters and from the service providers and . The capabilities provided by the ESB may include for example invocation routing mediation messaging mediation messaging process choreography service orchestration complex event processing and management functions. The ESB serves as a centralized broker that handles issues relating to security access and communication in the SOA infrastructure . In one particular exemplary capability the ESB serves as a message mediator by receiving processing and passing request messages from the service requesters and and response messages from the service providers and such that the services can be called to perform tasks in a standard way without the providers having foreknowledge of the requesters and without the requesters having or needing knowledge of how the providers actually perform the tasks. The message processing performed by the ESB may be built upon generally accepted web services standards and protocols such as for example XML a markup language for describing data in message payloads in a document format HTTP or HTTPS a request response protocol between clients and servers used to transfer or convey information SOAP a protocol for exchanging XML based messages over a computer network normally using HTTP and XACML a markup language for expressing access control rules and policies . The ESB can be implemented on one or more host processing systems that include a processing circuit and a computer readable storage medium storing instructions for execution by the processing circuit e.g. mainframe server personal computer or a combination thereof .

A mediation function can interpret mediation dataflows as executable directed graphs to determine how to process and direct messages. Operations performed by the mediation function can include identifying specific internal or external service providers for routing messages as well as other functions such as logging messages filtering messages invoking operations and transforming messages and responses. The mediation function may invoke both local and remote services to mediate messages. An ESB namespace directory is used to map names to their respective endpoints in directing message traffic. Business service choreography provides rules for development and execution of business process flow logic which is abstracted from business applications. The business service choreography may govern the sequencing and control of service invocations which in turn support the business processes and workflows. Business service directory provides details of services that are available to perform business functions identified within a taxonomy. The business service directory can be implemented as an open standard UDDI registry to publish the availability of services.

The mediation function is configured to transform message formats between service requesters and providers route requests to the correct service providers and convert transport protocols between the service requesters and providers. For example if a service provider expects encrypted messages the mediation function can include such capability in request messages sent to that provider. The mediation function can be configured to provide virtualization of applications according to rules and specifications of the SOA allowing the logic of those applications to be developed and managed independently of the infrastructure network and other provisions of the services specified in the SOA. In this manner the mediation function can help promote loose coupling between service requesters and service providers.

A developer using a developer system can design mediation flows that perform request and response processing of messages between the local server services and remote server services . Each flow in the mediation flows can include both synchronous and asynchronous primitive operations without requiring the developer to design additional flows to handle asynchronous responses. The mediation flows can be stored in a computer readable storage medium for further processing. Mediation flow builder reads the mediation flows and produces executable flows as directed graphs of executable components. In exemplary embodiments the mediation flow builder builds an executable graph by recursively following connections between nodes as defined in the flow definition. The resulting executable graph is uniquely identified and stored in the executable flows . In response to encountering an asynchronous node the mediation flow builder creates a new executable flow with the asynchronous node as the initial node and further including connection paths subsequent to the asynchronous node. This flow is uniquely named identified as being an event flow and stored in the executable flows . The designer of the original flow may be unaware of the newly created event flow as no additional design effort is required of the designer to produce the event flow. The executable flows may be stored in a volatile or non volatile computer readable storage medium as generated by the mediation flow builder .

In exemplary embodiments a mediation flow engine invokes executable flows to mediate messages received via messaging intermediary . The messaging intermediary which may comprise a communications middleware component supporting a variety of communications paradigms APIs platforms and standard protocols receives a request message from an invoking application processes the message in accordance with specified business rules and provisions determines the location of the requested service provider for example by accessing service registry and sends the message to the appropriate service provider. The messaging intermediary can be configured based upon standards such as XML SOAP UDDI and WSDL. Upon receiving the request message the meditation flow engine performs the processing for the requested services using the executable flows and returns a response message describing any return values of the processing to message intermediary which in turn returns the response message to the invoking application.

The message intermediary and the remote server services communicate with each other through network . The network is configured to receive and pass request and response messages and to use the transportation protocol or protocols used by messages. The network may include intranets extranets and the Internet and can contain any number of network infrastructure elements including routers switches gateways etc. For example the network may be the Internet or a private LAN.

The mediation flow engine uses message data to uniquely identify which of the executable flows to execute. When the mediation flow engine encounters an asynchronous node a state object is created which contains the unique identifier of an associated event flow and a correlator which allows the state object to be retrieved when an asynchronous response is received. The state object may be stored in a volatile or non volatile computer readable storage medium as state data . The mediation flow engine continues with execution of the original flow. When the asynchronous response from the asynchronous node is received the mediation flow engine retrieves the associated state object from the state data and inspects it to find the unique identifier of the event flow. The mediation flow engine executes the event flow which may be on a separate thread of execution while the original flow is still under execution. Thus creating and executing an event flow prevents the original flow from stalling while waiting for an asynchronous node to complete.

Referring now to an exemplary processing system is depicted that may be utilized to implement exemplary embodiments of the present invention. For discussion purposes the processing system is described as having features common to a personal computer such as a desktop or portable computer. As used herein however the terms processing system computer and the like are intended to mean essentially any type of computing device or machine that is capable of receiving storing and running a software product including such devices as communication devices for example pagers telephones electronic books electronic magazines and newspapers etc. and personal and home consumer devices for example handheld computers web enabled televisions home automation systems multimedia viewing systems gaming consoles etc. .

Processing system as provided in is configured as a personal computer that generally includes a processing unit a system memory and a system bus that couples system memory to processing unit . The system memory includes flash memory and random access memory RAM . Flash memory is an electrically erasable programmable read only memory EEPROM module that includes a basic input output system BIOS . BIOS contains the basic routines that facilitate transfer of information between elements within personal computer such as during start up.

Processing system further includes a hard disk drive a magnetic disk drive which can be used to read from or write to a removable disk and an optical disk drive which can be used to read a CD ROM disk or read or write to other optical media . Hard disk drive magnetic disk drive and optical disk drive are electrically communicatively coupled to system bus by a hard disk drive interface a magnetic disk drive interface and an optical drive interface respectively. The drives and their associated computer readable media provide nonvolatile storage for processing system . Although the description of computer readable media above refers to a hard disk a removable magnetic disk and a CD ROM disk it should be appreciated that other types of media that are readable by a computer such as magnetic cassettes flash memory cards digital video disks Bernoulli cartridges and the like may also be used in exemplary computer operating environments.

A number of program modules may be stored in the drives and RAM including an operating system application program modules such as for example word processors and design applications and program data . A user may enter commands and information into processing system through a keyboard and a mouse . Other input devices not shown may include for example a microphone joystick game pad satellite dish scanner or the like. These and other input devices are often connected to processing unit through a serial port interface that is coupled to system bus but may be connected by other interfaces such as a game port or a universal serial bus USB . A monitor or other type of display device is also connected to system bus via an interface such as a video adapter . In addition to the monitor the exemplary computer operating environment may also include other peripheral output devices not shown such as speakers or printers.

Processing system may operate in a networked environment using logical connections to one or more remote computers such as a remote computer . Remote computer may be for example a server a router a peer device or another common network node and may include many or all of the elements described in relation to processing system . The logical connections depicted in include a local area network LAN and a wide area network WAN .

When used in a LAN networking environment processing system is connected to LAN through a network interface . When used in a WAN networking environment processing system includes a modem or other means for establishing communications over WAN such as the Internet. Modem which may be internal or external to processing system is connected to system bus via serial port interface . In a networked environment program modules depicted relative to processing system or portions thereof may be stored in the remote memory storage device. It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.

Exemplary embodiments of the present invention may be implemented in conjunction with an SOA environment such as for example an integrated web services implementation in which the SOA supports integration and consolidation of any number of services and processes. Web services are self contained self describing modular applications that may be described located and invoked over a computer network such as the World Wide Web. Web services utilize standardized interfaces and protocols for example a web Application Programming Interface API to implement consolidation and integration methods that allow different entities or web based applications to communicate data logic and processes with one another over a network. These standardized methods permit different applications to exchange resources with other entities or applications that are running on different operating systems. In an SOA environment the SOA may define a interface through which a service requesting or client side party may access web services or enterprise based services provided within an enterprise domain specify or consolidate a set of web services or web service providers that may be invoked through the interface and define protocols for communicating with the set of web services through the SOA interface.

Turning now to an example of a dataflow is depicted in accordance with exemplary embodiments. The dataflow can be a mediation dataflow created by a developer via the developer system of and stored in the mediation flows . The dataflow represents a simple example of a dataflow that can be parsed by the mediation flow builder of . Input node handles receiving an input message which is passed to node A for further processing via wire . Node A may be a mediation primitive that parses the input message from the input node and invokes nodes B and C . Wire provides an interface between node A and node B while wire provides an interface between node A and node C . Node B can send an output message to output1 node via wire . Node C can send a separate output message to output2 node via wire . In the example dataflow node B can be an asynchronous node while nodes A and C are synchronous nodes. In the exemplary embodiment of the developer of the dataflow need not perform anything specific to handle the asynchronous actions of node B .

The mediation flow builder of can be used to create a runtime execution version of the dataflow of as directed graph of . The nodes and wires of the dataflow are converted into executable components of nodes and connections of the directed graph . For example the input node maps to In node node A maps to node A wire maps to connection node B maps to node B wire maps to connection node C maps to node C wire maps to connection output1 node maps to out1 node wire maps to connection output2 node maps to out2 node and wire maps to connection . The directed graph can be stored in the executable flows of .

The mediation flow engine may execute the directed graph when a message is received for a service associated with the dataflow of . The mediation flow engine executes the directed graph in a recursive manner branching down each tree in the graph in turn. Bubbles and indicate the expected invocation order 1 5 for performing work in each of the nodes and upon performing the work of In node . If all of the nodes were synchronous then the operations of each of the nodes would be completed in the order indicated in the bubbles before advancing to the next node. Without the inventive principles as described herein the execution of the nodes and and connections and would be blocked until the asynchronous operations of node B completed. In exemplary embodiments the mediation flow builder of creates an event flow as depicted in to prevent the loss of performance associated with busy waiting for node B to complete. The event flow includes a copy of the node B and subsequent interconnections. For example node B is copied as node B out1 node is copied as out1 node and connection is copied as connection . Bubble indicates that the expected order of invocation of connection is the same as the expected order of invocation of connection as out1node may rely on state data as it existed in an earlier invoked node or connection but not as modified by a later invoked node or connection i.e. nodes and and connections and .

The asynchronous operation carried out by node B does not result in the blocking of the execution of the directed graph instead it allows nodes and and connections and to be executed as soon as the asynchronous invocation of node B has been made. The invocation of the out1 node is made when the asynchronous processing of node B has completed.

The mediation flow engine can assign unique identifiers to each flow object such as setting ID to RequestFlow A for the directed graph and ID to EventFlow A B for event flow . The IDs and can be stored in state objects in the state data . Upon receiving a response message via the messaging intermediary the mediation flow engine can identify which flow to execute. A response from the asynchronous node B can trigger the mediation flow engine to retrieve the state object from the state data and analyze it to locate the ID . The event flow is then executed to perform nodes B and Out1 as interconnected via connector . The event flow can be invoked on a separate thread from the directed graph in response to determining that the directed graph is executing.

Turning now to a process for asynchronous resumption of a dataflow will now be described in accordance with exemplary embodiments and in reference to . At block mediation flow builder builds executable directed graph from dataflow that includes multiple interconnected nodes where at least one of the interconnected nodes is an asynchronous node such as that depicted in . The dataflow can include both synchronous and asynchronous nodes with asynchronous nodes relying upon external data that can be delayed e.g. a response message while synchronous nodes can be performed without waiting. For example nodes and can be synchronous while node is asynchronous. At block the mediation flow builder creates event flow that includes the asynchronous node and interconnections subsequent to the asynchronous node such as that depicted in .

At block the mediation flow engine invokes execution of the executable directed graph . Invocation of the executable directed graph may be in response to receiving a message via the ESB of . At block the mediation flow engine creates a state object with an identifier associated with the event flow in response to reaching the asynchronous node . The state object can be stored in state data and may include a copies of data to preserve state information in case the state information is changed by continued execution of the executable directed graph .

At block the mediation flow engine continues execution of the executable directed graph while avoiding the asynchronous node and the interconnections and subsequent to the asynchronous node . Thus synchronous nodes and can execute without waiting for nodes and to complete execution. At block the mediation flow engine resumes execution of the event flow as identified via the state object upon receiving a response for the asynchronous node . The invocation of the event flow can occur while the executable directed graph is still executing or after it completes.

Technical effects and benefits of exemplary embodiments include creating an event flow from a dataflow containing an asynchronous node. Multiple event flows can be created from a single dataflow where each event flow corresponds to an asynchronous node and subsequent interconnections including additional nodes. The event flows can be created and stored without a flow designer making explicit changes to the dataflow or making other high level flows to handle mixing of asynchronous and synchronous primitive operations. An asynchronous node is handled at runtime by capturing state data in a state object along with a unique identifier for the associated event flow allowing execution of nodes that are not included in the event flow to proceed without waiting for the event flow to receive an asynchronous response.

As described above embodiments can be embodied in the form of computer implemented processes and apparatuses for practicing those processes. In exemplary embodiments the invention is embodied in computer program code executed by one or more network elements. Embodiments include computer program code containing instructions embodied in tangible media such as floppy diskettes CD ROMs hard drives universal serial bus USB flash drives or any other computer readable storage medium wherein when the computer program code is loaded into and executed by a computer the computer becomes an apparatus for practicing the invention. Embodiments include computer program code for example whether stored in a storage medium loaded into and or executed by a computer or transmitted over some transmission medium such as over electrical wiring or cabling through fiber optics or via electromagnetic radiation wherein when the computer program code is loaded into and executed by a computer the computer becomes an apparatus for practicing the invention. When implemented on a general purpose microprocessor the computer program code segments configure the microprocessor to create specific logic circuits.

While the invention has been described with reference to exemplary embodiments it will be understood by those skilled in the art that various changes may be made and equivalents may be substituted for elements thereof without departing from the scope of the invention. In addition many modifications may be made to adapt a particular situation or material to the teachings of the invention without departing from the essential scope thereof. Therefore it is intended that the invention not be limited to the particular embodiment disclosed as the best mode contemplated for carrying out this invention but that the invention will include all embodiments falling within the scope of the appended claims. Moreover the use of the terms first second etc. do not denote any order or importance but rather the terms first second etc. are used to distinguish one element from another. Furthermore the use of the terms a an etc. do not denote a limitation of quantity but rather denote the presence of at least one of the referenced item.

