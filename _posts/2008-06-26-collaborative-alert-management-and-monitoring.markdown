---

title: Collaborative alert management and monitoring
abstract: Methods, systems, and computer program products for dynamically monitoring, processing, and managing alerts are described herein. In an embodiment, the method operates by receiving messages that are either alerts or responses to existing alerts. The messages are parsed to determine if whether they are alerts or responses to alerts. Actions including updating alert states and storing alert data are executed, and then the method sends notifications regarding the alert messages and responses to a collaboration list of registered subscribers that dynamically expands over time based upon alert escalations. The method then determines whether additional messages have been received; and performs actions associated with these additional messages until there are no remaining alerts or alert responses to process. The method stores updated alert and response data in a repository so that the alerts and responses can be monitored and managed.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07856498&OS=07856498&RS=07856498
owner: Sybase, Inc.
number: 07856498
owner_city: Dublin
owner_country: US
publication_date: 20080626
---
The present invention is generally directed to managing alerts from initial notification through resolution within business intelligence systems and more particularly directed to collaboratively managing alerts and responses to alerts in a collaboration model.

Conventional alert management systems use publish and subscribe models but lack an architecture that allows collaborative management and distribution of alerts. Traditional alert management products enable users to publish and track alerts but lack functionality to enable alert stake holders to collaboratively manage alerts during their entire lifecycles. The conventional approach to alert handling is to spread alert management over several products and components as opposed to a unified alert management system.

Traditional alert management systems are distributed amongst often unrelated components that are unable to present unified historical alert information to users for analysis. These systems typically do not compare current alerts with historical patterns to detect problems or opportunities automatically. Most alert management applications to date have focused on alert tracking and reporting and are not integrated with a business activity monitoring system.

SYBASE BIZTRACKER is an example of a currently available business activity monitoring solution with an alert management component. Current alert management systems and components lack a system wide conceptual perspective for collaboratively managing alerts. Further current methods and systems have not implemented a cohesively managed alert management subsystem.

Accordingly what is needed are systems methods and computer program products that allow collaborative alert management by allowing users to track alerts as alerts transition from state to state in an alert lifecycle. What is further needed are systems methods and computer program products that support alert state management and alert lifecycle tracking.

The present invention includes system method and computer program product embodiments for managing aggregating tracking and correlating alerts. Methods and systems to manage monitor aggregate and publish alerts are presented. The system method and computer program product embodiments disclosed herein perform alert management publication and monitoring. An embodiment of the present invention includes a Unified Alert Service UAS . The UAS is a component that uses a publication and subscription model to manage the distribution of alerts. According to an embodiment of the invention there are two main types of alerts supported by the UAS. These two main types are managed alerts wherein UAS maintains at least state information pertaining to the alert and unmanaged alerts wherein UAS maintains a record of the alert but does not actively track the unmanaged alert s state.

Embodiments of the invention provide managed alert functionality such as a means of responding to an alert and alert escalation. Alert escalation is a means of notifying a new set of users of an alert via escalation channels. New alert messages or instances come in on one or more channels which users can express interest in via subscriptions. Subscriptions represent an intersection between a user a channel and a target. A target represents a transport type i.e. email used to deliver notifications associated with alerts and responses. Responses to a managed alert trigger notifications. Notifications regarding responses are delivered to users who have expressed interest in the corresponding alert. In embodiments of the invention a user indicates interest in an alert by subscribing to one or more channels. For example a user may register interest in a set of alerts by establishing registered subscriptions to one or more channels.

The present invention provides systems methods architectures and computer program products for dynamic extensible and collaborative alert management. Embodiments of the present invention provide additional functionality beyond currently available alert management systems such as web based graphical user interfaces that allow users and administrators to respond to alerts and an administrative console which allows administrators to configure alert escalation whereby alert notifications are sent to new sets of users via escalation channels. According to an embodiment of the invention a response to a managed alert triggers a notification which is delivered to registered subscribers wherein registered subscribers are users who have expressed interest in the corresponding alert via a subscription to one or more channels. According to an embodiment of the invention a graphical user interface allows configuration of channels wherein channels are virtual names that alerts can be affiliated with.

An embodiment of the present invention builds on the Alert Management Component of the SYBASE BIZTRACKER product.

Further features and advantages of the present invention as well as the structure and operation of various embodiments thereof are described in detail below with reference to the accompanying drawings. It is noted that the invention is not limited to the specific embodiments described herein. Such embodiments are presented herein for illustrative purposes only. Additional embodiments will be apparent to persons skilled in the relevant art s based on the teachings contained herein.

The features and advantages of the present invention will become more apparent from the detailed description set forth below when taken in conjunction with the drawings. In the drawings like reference numbers generally indicate identical functionally similar and or structurally similar elements. Generally the drawing in which an element first appears is indicated by the leftmost digit s in the corresponding reference number.

The present invention is directed to systems methods and computer program products for managing aggregating and correlating alerts. In an embodiment the invention operates by use of a Unified Alert Service UAS . As used herein an alert is a message sent to an UAS that includes alert information. Alert messages may be system alarm messages triggered by a system fault a server reboot scheduled or unscheduled a server crash a server shutdown scheduled or unscheduled a software program exception a data file access violation a database access violation deletion of database records a security breach i.e. entry of a certain number of invalid passwords and other events that users have expressed interest in.

In an embodiment UAS makes use of the Java Platform Enterprise Edition Java EE architecture and utilizes message driven JavaBeans for messaging as well as other JavaBeans for managing alert state information. An embodiment of the present invention uses Extensible Markup Language XML for formatting alert messages and as the format for alert data transmission. For example UAS may use standard extensible Stylesheet Language XSL as a means of transforming alert data where possible.

According to an embodiment of the invention the UAS will also use Java logging facilities for debugging and logging information. For example UAS may log various amounts of information ranging from method calls to informational messages by taking full advantage of the range of levels supported by the Java logging facility.

UAS relies on the security of a MyAlerts Console Alert Server Configuration graphical user interface GUI application servers hosting the UAS and other information technology IT infrastructure in order to handle security.

UAS is used to deliver and manage Alerts. It provides a powerful mechanism for alert delivery alert management and target instances support.

The basic concepts and components of the UAS include a target instance channels alert types subscriptions and messages wherein messages are either alerts or responses to existing alerts. These concepts and components are described below. UAS supports message state management and alert event lifecycle tracking as an alert moves through an alert state. Supported alert states include one or more of Active Complete Unmanaged and Suppressed. For example when a managed alert is generated it is in an Active state and after the issue associated with the alert is resolved the state might change to Completed. Some users such as managers may only wish to receive notifications when alerts reach the Complete state so that they can track metrics for completed alerts without receiving notifications of prior states in each alert s lifecycle. The UAS processes unmanaged Alerts by only sending the initial Alert notification to all relevant subscribers and providing no further Lifecycle processing of the Alert instance.

Additionally managed alerts can have an external Status associated with them. The list of possible statuses can be defined for an Alert Type and are controlled by the Notification messages sent to the UAS by a user for an Alert instance. As an example an administrator may define alert statuses for an alert type that include Escalate Work In Progress Still Failing Top Priority Escalate Now and Complete. A Status has an associated Alert state one or more of Active Complete and Escalate that the Alert instance transitions to when the Status is selected by a user during the Alert Lifecycle Management process. In the case of the Escalate state Alert escalation is triggered but the Alert remains in the Active state. A special Status called Reactivate is available for Completed Alert instances. The Reactivate status can always be selected by users to make the Alert instance Active again. Default statuses include Escalate Now and Complete which cause associated default Alert state changes to occur when received in a Notification message for an Alert instance.

Alert Lifecycle Manager processes subscriptions to determine Alert recipients for an alert. This is done by determining the intersection of subscription channels with the channel list in the alert information. The information in each subscription can include substitution variables which are resolved using the alert contents. In an embodiment substitution variables are used to allow a single subscription to refer to a list of alert targets contained in the alert information itself thus allowing a one to many recipient relationship defined by the alert sender instead of the one to one relationship of the usual Subscription instance. The processed list of recipients is referred to as a collaboration list. The collaboration list is passed to Alert State Manager as the current recipients for this alert instance. The collaboration list can grow as subsequent alert escalations occur over time. Alert Lifecycle Manager then requests that Alert State Manager builds a DriverAlert for each alert recipient s target and passes the DriverAlerts onto multiple Target Type Managers . Each Target Type Manager is responsible for a set of targets of a given type. Target types can include one or more of JavaMail or JMS. Target Type Manager then delivers the alert notification to its final destination.

According to an embodiment of the present invention the UAS allows collaboration lists of Alert notification recipients to dynamically expand over time as Escalations occur and provides communities of participants for resolving an alert i.e. resolving the fault associated with the Active Alert instance .

Responses are handled in a similar fashion. Response Message Handler picks up response messages off response queue and hands it off to Alert Lifecycle Manager which requests that Alert State Manager to update UAS database and Alert Lifecycle Manager updates its internal state. The Alert Lifecycle Manager depends on the Alert State Manager for the state of each Alert. Thus the Alert Lifecycle Manager state is transient. Alert Lifecycle Manager then delivers an alert notification with updated state information to the registered subscribers for the alert via Target Type Managers .

According to an embodiment Alert Lifecycle Manager requests all alert notifications from Alert State Manager which uses the current collaboration list for that Alert instance. In this way Alert State Manager controls notices delivered to the dynamically expanding and managed list of collaborators. In an embodiment collaboration list comprises a group of registered subscribers responsible for resolving an alert. In another embodiment the collaboration list comprises a group of registered subscribers interested in an alert.

Alert State Manager maintains the list of targets for notification delivery which is processed by the Alert Lifecycle Manager and passed to the appropriate Target Type Manager .

A registered subscriber can be any client subscriber and is not synonymous with an end user or human user. A user subscribes to a channel and a target but users can have as many subscriptions to channel and target combinations as needed. It is possible for a user to receive multiple notifications for a single alert or alert escalation based upon multiple overlapping subscriptions. A subscription is the intersection of a user a channel and a target. Although a subscription may reference only a single target a target can also be a substitution variable that references a list of targets and associated parameters in the original Alert message. The user and channel cannot be a substitution variable.

A new alert instance will come in on one or more channels. In an embodiment Alert Lifecycle Manager processes alerts based upon newly triggered alerts coming in on one or more channels by determining which users if any are subscribed to these channels. Target Type Managers then determine which targets to send notifications to based upon the targets in the subscriptions. Alert State Manager maintains a list of targets for notification delivery which is processed by Alert Lifecycle Manager and passed to the appropriate Target Type Manager .

When alerts are escalated subscriptions for the escalated channels are determined by Alert Lifecycle Manager for the escalated alerts and the UAS Engine requests that Alert State Manager add the new recipients to the list of Collaborators for the Alert instance. The Alert Lifecycle Manager then causes a notification to be sent to all recipients in the newly expanded list of Collaborators.

Other configurations of the alert processing components depicted in will be apparent to persons skilled in the relevant art s .

In one embodiment Alert Message Handler is a message driven JavaBean that is responsible for accepting alert messages from JMS queue and then making the appropriate calls via a client application programming interface API to Alert Lifecycle Manager so that the alert can be persisted by Alert State Manager and its state can be managed if it is a managed alert. In an embodiment Alert Lifecycle Manager is configured to perform tasks related to subscription processing and alert distribution to targets. Alert storm suppression and alert escalation are also performed by Alert Lifecycle Manager . Alert suppression and escalation is discussed in greater detail in section 3.2 below.

According to one embodiment of the present invention response message handler is a message driven JavaBean configured to accept response messages from JMS response queue and make the appropriate calls via a client API to Alert Lifecycle Manager so that in order to persist the response via Alert State Manager and update the state of the alert. According to an embodiment each response is associated with an existing active alert by an alert ID wherein the alert ID uniquely identifies the alert instance.

Response Message Handler is significantly similar to Alert Message Handler in function with the exception of the calls that will be made against Alert Lifecycle Manager . In an embodiment Response Message Handler can reuse message reception code available in Alert Message Handler and Response Message Handler merely implements its own class for interacting with Alert Lifecycle Manager .

According to an embodiment of the invention Target Type Managers are message driven JavaBeans that listen on a topic for alert and response messages intended for a certain target type. When an alert or response message intended for a target type is detected a Target Type Manager then delivers the corresponding notification using the method corresponding to the target type for the message being processed. Target Type Manager serves a similar purpose as drivers in UAS architecture . Each Target Type Manager is also responsible for delivering alert notifications to a certain target type such as JavaMail. Each target type supports a set of parameters that are defined in UAS database and this information is used to drive configuration of target instances as well as subscriptions for a target instance.

One of the primary differences between current alert management systems and the embodiment of the present invention depicted in is that target type managers can handle several target instances of the same target type. A driver may represent a single target but this does not require a user to package and deploy a new application on the application server to handle a new target. The UAS can handle multiple alert targets for each alert type. The improvement provided by embodiments of the present invention is that UAS architecture places no limit on the number of target instances that can be handled by a Target Type Manager . An advantage of embodiments of the present invention is that the number of target instances does not degrade system performance and has little bearing on system configuration. Another advantage of embodiments of the invention is that the majority of the code in existing drivers is shared among most drivers so that changes will be made to most drivers in one place in order to convert them to the new Target Type Manager model.

In accordance with an embodiment of the present invention substitution variables provide the ability for a subscription to be variable. This may be accomplished by using variables in the variables section of the Alert XML code to produce virtual subscriptions at delivery time. In one embodiment variables used for this purpose are AMS EMAIL ADDRESS and AMS USER ID. These variables are grouped together using the group attribute of the variable.

According to an embodiment of the invention a Unified Alert Service UAS provides a mechanism to allow users to collaboratively manage outstanding alerts. For example a mechanism described herein is a UAS comprised of components responsible for managing alerts generated and sent by other components. Besides a human user who needs to manage alerts a software application or agent sometimes needs to manage alerts. Accordingly unless specifically stated the user as used herein does not necessarily pertain to a human being. In one embodiment of the present invention each alert can have a current status of either active not managed completed or escalated. UAS allows users to manage and monitor alerts during the life cycle of alerts from initial notification of an alert condition to alert resolution i.e. completed state .

In an embodiment a collaboration network is dynamically created by users self subscribing to channels that have associated alerts which are issued by software components. The UAS is composed of a runtime engine and several administration and user tooling user interfaces UIs . Software components introduce alerts into the UAS engine by sending it the Alert message containing the Alert ID an initial list of channels over which the alert will flow and optional enriched content. The basic components supporting the UAS collaboration model are described in the following paragraphs.

The UAS provides receive response messaging wherein the UAS can receive an alert message and subsequently respond to form a closed message loop.

In step client application sends a JMS message to the UAS inbound queue . Alert Lifecycle Manager then picks up JMS message from UAS inbound queue and forwards JMS message to Alert State Manager . In step Alert State Manager fetches the inbound Java Message Service JMS message parses the message saves the message details in UAS repository and forwards the message to Target Type Manager . The alert life cycle is subsequently managed by Alert Lifecycle Manager .

In step Target Type Manager checks the subscriptions to alert and then delivers the alert by sending notifications to each user that subscribes to channels that alert arrives on. Users express interest in channels via one or more registered subscriptions. Each subscription includes a transport type . As depicted in transport types can be one or more of JavaMail Simple Mail Transfer Protocol SMTP email facsimile JMS Java Management Extensions JMX instant messages text message alphanumeric pages Short Message Service SMS messages script null target instances and other electronic communications means to receive and send alert messages.

In step UAS Runtime Management Console captures data forwarded by Alert State Manager so that a user can view manage and respond to the alert. As depicted in UAS Runtime Management Console is comprised of a UAS Administration interface and a UAS console . UAS Administration interface is described in detail in section 2.4 below.

UAS also provides web console administration which allows users to view and manage alerts anywhere via a web based user interface UI .

In an embodiment UAS administration console includes several web based graphical user interfaces roles configuration target instance configuration channel configuration runtime properties configuration and maintenance configuration . UAS console includes user interfaces for subscription configuration and message lifecycle management . These interfaces are described in the paragraphs below with reference to .

According to an embodiment roles configuration interface depicted in allows users to manage either of these roles by editing the configuration assigned to each role.

UAS enables alert escalation. For example users can manually escalate alerts by setting certain response types using channel configuration interface . Alerts can also be automatically escalated when a pre defined duration of time elapses i.e. an escalation timeout . Escalation timeout periods can also be nested whereby alerts are configured to go through multiple escalations after expiration of multiple successive timeouts.

In an embodiment the time duration for alert escalation is a tunable parameter that can be adjusted by administrators and users via the web console. UAS allows users and administrators to restrict delivery of alerts by use of notification filters. For example alert delivery can be restricted to a specific alert state or those that meet the criteria of a user defined XML Path Language XPath filter. The criteria may be set via the web based UI by administrators and users.

Notification targets can include one of an email address a short messaging system SMS destination queued XML a Web Service invocation and others designated destinations for alert notifications. According to an embodiment of the present invention users can subscribe to as many subscriptions as needed. In an embodiment a subscription is an entry identifying the desire for a user to receive Alert Notifications on a specified target sent to a specified channel. A subscriber is not necessarily a person as a subscriber can be any client. Subscriptions represent the intersection or nexus between a user ID a channel and a transport technology. Channels are described in detail below. The UAS can be thought of as a collection of atomic subscriptions wherein users can have multiple subscriptions.

A user can also create a notification filter using subscription configuration interface . By setting an appropriate filter level using Filter field users then receive only messages that conform to the filter level. For example a user can configure a custom filter by defining an XPath expression. In an embodiment when a user has successfully set up a subscription using subscription configuration interface a test message is sent to the subscription target instance entered into target instance .

In accordance with an embodiment of the invention a target is the destination for an Alert Notification and source for an Alert Response. A target is associated with a specific target type wherein a target type is a definition template for a particular target technology. In an embodiment multiple targets can be derived from a specific target type.

Target instances are concrete alert destinations. In accordance with an embodiment of the present invention a target instance is the type of transport technology used to send and receive alert notifications. For example UAS users can choose one or more of Simple Mail Transfer Protocol SMTP email facsimile Java Message Service JMS Java Management Extensions JMX instant messages text message alphanumeric pages Short Message Service SMS script null target instances and other electronic communications means to receive and send alert messages.

In an embodiment of the invention alerts are delivered based on a publication and dynamic subscription model. For example an alert may be published to a channel and a user can express an interest in the alert by subscribing to that channel. The alert is subsequently delivered over various transport technologies wherein the transport technologies include one or more of email JMS SMS and JMX. UAS provides for target transformation. For example UAS implements an XSLT transformation for alerts with email or JMS targets.

JMS JMX and Java Mail target instances support XSLT transformation which allows the original alert message to be displayed in different formats. For JMS and JMX targets users can set the Destination field to be an XML Path Language XPath expression to support a variable target. If a user requires XSLT transforms a Templates button not depicted in can be pressed in order to import an appropriate transform template either the existing XSLT template or a new XSLT expression to be input by the user. UAS users can select a target instance using target instance configuration interface and depending on the target instance UAS is able to transform alert messages. Alert content is formatted by UAS based on the display abilities of the selected target instance. For example HyperText Markup Language HTML content can be provided for email target instances and Extensible Markup Language XML for JMS target instances. If a target instance is unavailable for some reason i.e. due to an email server being down UAS provides a mechanism to guarantee the delivery of the notification to the end user.

According to an embodiment of the invention an alert type definition identifies the notification text for an alert instance and an unlimited list of statuses an alert instance can be in or have. In accordance with an embodiment alert instances are associated with an Alert Type in the Alert XML message. If the Alert Type is not identified in the Alert XML message then the alert instance is unmanaged. A typical alert may have a list of response types statuses including Active Complete and Escalate. The Response type list can be added to or changed but must include at least one response type with a state transition to Complete. In an embodiment a definition template is used to define special processing for alerts identified as a certain type. Alert types classify alert messages so that UAS can manage the lifecycle of alert messages based on a specific alert type.

Alert types are used to determine how Alert Lifecycle Manager will process alerts associated with that Alert type. In this way Alert types assist with processing groups of alert messages for each specific Alert type. According to an embodiment alert types have different response types. These response types drive alert messages from one state to another in a lifecycle. For example response types may include one or more of Active Complete and Escalate. In an embodiment alerts have full lifecycles that include the following states Active Complete Cancel Unmanaged Obsolete and Suppressed. Response types can drive alerts into Active or Complete states. Other alert states such as Cancel Unmanaged Obsolete and Suppressed are internal to Alert Lifecycle Manager . For example when a managed alert is initially generated it is in an Active state and after the issue associated with the alert is resolved the alert state will be set to Complete.

For security purposes administrators can restrict what Alert instances a user receives. Alert instances are associated with certain alert types. Administrators can assign a user role to an alert type. In an embodiment a role can be entered into user role field to assign a particular user role to an alert type. When Alert Lifecycle Manager processes Alert instances associated with that alert type only users that are members of the roles defined for the alert type are added to the list of Collaborators.

As discussed in section 2.2 above to prevent an alert storm administrators can specify a suppression period to ignore duplicate alerts. The suppression period entered in the suppress period field defines the time duration to ignore duplicate messages. According to an embodiment of the invention there are four types of time suppression period time units that can be entered into suppress period day hour minute and second.

In one embodiment of the present invention the Add Typical Response button can be used to add three default response types. Additionally to add a custom response an administrator can click the Add Response button and choose the type of response required. Then an administrator can use alert type configuration interface to edit the detail information of the response type. State represents the message state after a user responds to an alert message at run time with a given response type.

A channel represents a virtual destination to which user can subscribe to receive alerts. An alert action sends an alert message to a specified UAS channel. According to an embodiment an Alert message contains a list of associated UAS Channels. Channels are virtual and therefore not associated with or limited to a specific transport technology such as email or JMX. Subscriptions as described above drive the transport technology used to deliver alert messages not channels.

UAS uses a channel to pull end users out of specific transport technology and thereby make alert message destinations more meaningful. UAS uses channels to associate Alert messages with Subscriptions. This enables an alert message to be abstracted from the specific transport technology used to deliver the message.

According to an embodiment a channel definition identifies the list of other channels an alert will escalate to after being in an unresolved state for a given period of time. Since an escalation channel is just another channel and can therefore have a list of escalation channels itself a multi level escalation tree can be created.

In accordance with an embodiment of the invention a administrator can use interface to define additional channels that Active Alerts flowing on this channel will escalate to after an escalation period has expired without the Alert state becoming Complete. For example if a user has subscribed to multiple channels with different targets after expiration of an escalation period entered in Escalation Period field an alert that had initially been sent to one target such as a user s work email address the escalated alert will be sent to another target such as a user s home email address. As would be appreciated by those skilled in the relevant art s other channels could contain completely different users such as the next level of management in the user s organization. Another example is an escalation channel used to notify a higher management level when alerts associated with key systems remain unresolved i.e. Active . An escalation period entered into Escalation Period field represents the duration that automated escalation are processed. There are at least four types of escalation period time units days hours minutes and seconds. According to an embodiment if an administrator does not use interface to choose at least one escalation channel an error will appears and prompt the administrator to save a configuration with an escalation channel entered into Escalation Channels field . This is true only if there is an Escalate response type defined. Otherwise escalation channels are optional.

The main component driving the collaboration model is the Unified Alert Service UAS engine. Conceptually the UAS engine can be thought of as a combination of Alert Lifecycle Manager and Alert State Manager . The UAS engine manages all active alerts sent to it from software components by performing the following functions.

The UAS engine maintains the current collaboration network for each alert instance i.e. the current list of targets from initial and escalated channels .

The UAS engine receives and processes alert status updates from targets. Alert status updates can include one or more of change to status X escalate immediately attach included information and others status updates.

The UAS engine sends notices to targets as alert statuses and escalation levels change. Theses notices include the alert id text status description attached information available responses and escalation level.

The UAS engine escalates alerts which have exceeded the timeout threshold defined for associated channels. This has the result of expanding the current collaboration members for an alert instance. In an embodiment alert escalation is the process of re issuing Alert Notifications to one or more escalation channels wherein an escalation channel is the channel used when an Alert is escalated. During alert escalation subscriptions are identified for intersections with the escalation channels and any new collaboration members which have been added to the collaboration member list. The escalation notice is then sent to the entire list.

Administrators can also use Import and Export Configuration buttons to import an existing UAS configuration and export a current UAS configuration respectively. For example according to one embodiment Import and Export Configuration buttons can be used to export an existing UAS configuration to an XML file or import a UAS configuration from an XML file.

In an embodiment Runtime properties configuration and Maintenance configuration interface allows administrators to choose from at least five Alert States active cancel complete obsolete and suppressed.

This section describes a method and system for alert management and distribution according to embodiments of the invention as illustrated in .

This section describes a method and system for alert management and distribution according to embodiments of the invention as illustrated in .

More particularly flowchart illustrates the steps by which an alert management system receives keys and other fields applies rules to the data and performs actions. Flowchart is described with reference to the embodiments of . However flowchart is not limited to those example embodiments. Note that the steps in the flowchart do not necessarily have to occur in the order shown.

The method begins at step wherein a client application sends message into the UAS inbound alert response queue. Depending on the type of message the message will either be placed into the inbound alert queue i.e. if the message is an alert or response queue i.e. if the message is a response to an active alert instance . In an embodiment responses are associated with existing alert instances by a unique alert ID.

In step a message handler fetches and parses the message queued in step . If the message is an alert the message is fetched and parsed by alert message handler . Similarly if the message is a response to an active alert the message is fetched and parsed by response message handler .

In step an evaluation is made regarding whether the message is an alert based on the parsing in step . If it is determined that the message is not an alert i.e. the message is a response control is passed to step . If it is determined in step that the message is an alert control is passed to step .

In step the alert state is updated in the UAS repository based upon the contents of the response and the updated alert state is saved with alert data in the UAS repository in step . In an embodiment the alert state may be updated in UAS database . After the alert state is updated in the UAS repository control is passed to step .

In step an evaluation is made regarding whether there are collaboration list entries for the response message. In this step when a response comes in on one or more channels it is determined which if any collaboration list entries exist for the response. If it is determined that no there are no collaboration list entries corresponding to the response message then control is passed to step . If it determined there are collaboration list entries that correspond to the response message then control is passed to step .

In step alert data fetched and parsed in step is saved in UAS repository and control is passed to step . In an embodiment the alert data may be saved in UAS database .

In step an evaluation is made regarding whether there are subscriptions to the alert message based on the registered subscribers for alert messages. In this step when a new alert instance or response comes in on one or more channels it is determined which if any users are subscribed to these channels. If it is determined that no there are no subscriptions corresponding to the alert message then control is passed to step . If it determined there are subscriptions that correspond to the alert message then control is passed to step .

In step the transport type is determined for notifications based upon the target types in the subscriptions identified in step . In an embodiment step is performed by Target Type Manager to determine the appropriate target transport technology i.e. one or more of JMS JMX JavaMail Script Null SMS SMTP email Instant Message alphanumeric page and text message before control is passed to .

In step a notification of the alert or response is sent to each subscriber identified in step via the corresponding transport types identified in step and control is passed to step .

In step data needed to view manage and respond to the alert is captured and control is passed to step . In an embodiment data is captured for later viewing and manipulation via UAS console and UAS administration interface within UAS Runtime Management Console .

In step an evaluation is made regarding whether there are more messages queued in the inbound alert response queues. If it is determined that more messages are queued then control returns to step . Accordingly the process described above involving steps is repeated until there are no more messages on the inbound alert response queue. The reiterations of steps stop when it is determined in step that there are no additional alerts remaining in the inbound queue and response queue to be processed. When it is determined that no additional alerts are in inbound queue and no more responses are in response queue control is passed to step where the UAS engine waits for the next alert or response.

The lifecycle of an alert does not end with step . For example a user may still be working on an alert after step and may complete it and send a corresponding response at a subsequent time. In step if there are no more messages to process the UAS engine will wait on the inbound queue and response queue until an alert or response arrives. illustrates how the UAS process but does not depict the full lifecycle of an alert.

Target types are described in this section with reference to the embodiment of . However the Target Types are not limited to that example embodiment. The alerts server and UAS Engine support multiple target types. Target types can include one or more of JMX email JMS script SMS mobile and Null. These target types are physically manifested to the UAS server in the sense that a Target Type Manager represents them however they are virtual in the respect that they share much of the same code. The primary distinguishing factors for target types are the parameters that they require and a few lower level classes.

The parameters supported for the JMX Target Type Manager parameters include but are not limited to those listed and described in Table 1 below.

For the Email target type JavaMail may be used to send email via the SMTP protocol. The parameters supported by the Email Target Type Manager include but are not limited to those listed and described in Table 2.

For a subscription to a target instance of the Email target type the supported parameters include but are not limited to those listed and described in Table 3.

For the JMS target type Target Type Manager will deliver alert messages via a JMS Queue or Topic. The parameters supported for the JMS Target Type Manager include but are not limited to those listed and described in Table 4.

For the Mobile target type Target Type Manager will deliver alert messages via a JMS Queue. The parameters supported for the Mobile Target Type Manager include but are not limited to those listed and described in Table 5 below.

For a subscription to a target instance of the Mobile target type the supported parameters include but are not limited to those listed and described in Table 6.

A Null target type supports no parameters and is a means of registering interest in a set of alerts without receiving notifications. These alerts may be viewable via a graphical user interface console such as a web based interface.

The Alert State Manager is described in this section with reference to the embodiment of . However the Alert State Manager is not limited to that example embodiment. In an embodiment of the present invention Alert State Manager is a stateful session JavaBean that is responsible for maintaining in memory state of individual alerts as well as persisting alerts and responses to the UAS database. Alert State Manager is also responsible for maintaining timers for the escalation of alerts as well as for alert suppression to prevent alert storms. Additionally Alert State Manager is responsible for sending alert notifications which have either originated from Alert Message Handler or that have been triggered as a result of a response or escalation to the topic used by Target Type Managers .

In generating the alert notification Alert State Manager must fill in subscription information for each target instance and set the AMS TARGET TYPE and AMS TARGET NAME message properties so that the proper Target Type Manager will receive the message and so that the proper target instance metadata will be used to deliver the notification.

In an embodiment Alert State Manager includes an initialization means when the UAS server starts so that the state of active alerts can be retrieved from the UAS database. For example with reference to the embodiment illustrated in Alert State Manager may include an initialization module configured to fetch alert states for any active alerts from UAS database . This may involve use of a Java servlet.

The Alert Lifecycle is described in this section with reference to the embodiment of . However the Alert Lifecycle is not limited to that example embodiment. The alert lifecycle refers to the process that a managed alert goes through before reaching completion. The lifecycle for an alert has several important aspects or features.

The first aspect deals with alert suppression which is a means of preventing alert storms. Alert suppression occurs when an alert message is received in which the Suppression Key in the alert message is the same as an existing alert and the alert type has a value greater than 0 for the suppression period and the timer that is measuring this period has not expired. Suppressed alerts are recorded in the UAS database unless the system is configured not to store suppressed alerts. In an embodiment suppressed alerts that are recorded in UAS database are viewable in a web client interface.

The second aspect deals with alert escalation which is a means of notifying a second group of users when an alert has not been completed during a specified time period. Alert escalation occurs when a channel for a given alert has a configured escalation channel and timeout period and the alert has not been completed prior to the expiration of the timeout period. Additionally users can cause an immediate alert escalation by sending an Escalate notification type.

The following section describes in pseudo code the manual and alert escalation process in accordance with an embodiment of the present invention.

The third aspect of the alert lifecycle is related to rules that govern the valid state transitions for an alert. The valid states for an alert include but are not limited to active 

complete unmanaged and suppressed. In an embodiment a user such as a manager may only wish to receive notifications of completed alerts i.e. when an alert state is set to complete and can set subscriptions accordingly. The rules governing state transition include but are not limited to those listed and described in Table 7.

Another point regarding the alert lifecycle relates to valid alert responses. Alert Responses include but are not limited to those listed and described in Table 8 below.

The following section describes in pseudo code the alert lifecycle which may be modeled in the Business Process Execution Language BPEL in accordance with an embodiment of the present invention. In an embodiment the BPEL is language used to implement Alert Lifecycle Manager . As would be appreciated by those skilled in the relevant art s languages other than BPEL such as Java may be used to model the alert lifecycle.

The Alerts Server Database is where the alerts server persists information pertaining to the state of the alert within the lifecycle. In an embodiment the Alerts Server Database can be UAS DB depicted in . Alerts Server Database may be a database that is local or remote to the alerts server. The Alerts Server Database may be one or more of a relational database a data store a centralized database and a distributed database.

According to an embodiment a unique identifier is assigned to each alert message that is persisted or stored in the database. This unique identifier may be used to identify the alert once it has been persisted. The Alert Server Database is not a warehouse for permanently storing alerts as alerts will be purged and deleted from the Alert Server Database based on configured intervals for each alert state. In an embodiment a user interface allows for the configured intervals to be changed or tuned by administrators for each alert state.

The inbound alert message is also referred to as an alert message. The alert message format contents and data elements of an example embodiment are defined by the Extensible Markup Language XML Schema Definition XSD below.

According to an embodiment channels may be selected for the alert message. Channels are described in detail in section 2.7 above.

In an embodiment Short Long text fields are used to carry an alert message. For example an Alert message can contain a static string and field values as shown in the Extensible Markup Language XML Schema Definition XSD below. As shown in the following XML XSD a user can add or delete fields from an alert message body.

The following tables describe the intended usage and content for each data element within alert messages. The data types for the data elements are described in the preceding alert message XSD. Table 9 lists the data elements for Personal alert messages according to an embodiment of the invention.

The following tables describe each of the PersonalAlerts element listed in table 9 in further detail. Tables 10 12 below correlate elements e.g. PersonalAlerts PersonalAlerts Versions and PersonalAlerts PersonalAlert to child data types according to an embodiment of the invention.

The following tables describe each of the data types complex types listed in table 9 in further detail. Tables 13 15 below correlate complex data types to child data types and document how they are used according to an embodiment of the invention.

The following section describes an application programming interface API that covers configuration metadata that is managed by an Eclipse based Unified Alert Service UAS plug in in accordance with an embodiment of the present invention. Eclipse is an open source Integrated development environment IDE written primarily in Java. The API described in Table 16 below abstracts the data model from an alert management system configuration graphical user interface GUI and provides a reusable wrapper in the event that other products that use the UAS have GUIs that are not Eclipse based.

According to an embodiment of the invention the AMSMetadataFactory object is the primary interface to the Alert Metadata API. Table 16 outlines the exposed methods.

Various aspects of the present invention can be implemented by software firmware hardware or a combination thereof. illustrates an example computer system in which the present invention or portions thereof can be implemented as computer readable code. For example the methods illustrated by flowchart of can be implemented in system . Various embodiments of the invention are described in terms of this example computer system . After reading this description it will become apparent to a person skilled in the relevant art how to implement the invention using other computer systems and or computer architectures.

Computer system includes one or more processors such as processor . Processor can be a special purpose or a general purpose processor. Processor is connected to a communication infrastructure for example a bus or network .

Computer system also includes a main memory preferably random access memory RAM and may also include a secondary memory . Secondary memory may include for example a hard disk drive a removable storage drive flash memory a memory stick and or any similar non volatile storage mechanism. Removable storage drive may comprise a floppy disk drive a magnetic tape drive an optical disk drive a flash memory or the like. The removable storage drive reads from and or writes to a removable storage unit in a well known manner. Removable storage unit may comprise a floppy disk magnetic tape optical disk etc. which is read by and written to by removable storage drive . As will be appreciated by persons skilled in the relevant art s removable storage unit includes a computer usable storage medium having stored therein computer software and or data.

In alternative implementations secondary memory may include other similar means for allowing computer programs or other instructions to be loaded into computer system . Such means may include for example a removable storage unit and an interface . Examples of such means may include a program cartridge and cartridge interface such as that found in video game devices a removable memory chip such as an EPROM or PROM and associated socket and other removable storage units and interfaces which allow software and data to be transferred from the removable storage unit to computer system .

Computer system may also include a communications interface . Communications interface allows software and data to be transferred between computer system and external devices. Communications interface may include a modem a network interface such as an Ethernet card a communications port a PCMCIA slot and card or the like. Software and data transferred via communications interface are in the form of signals which may be electronic electromagnetic optical or other signals capable of being received by communications interface . These signals are provided to communications interface via a communications path . Communications path carries signals and may be implemented using wire or cable fiber optics a phone line a cellular phone link an RF link or other communications channels.

In this document the terms computer program medium and computer usable medium are used to generally refer to media such as removable storage unit removable storage unit and a hard disk installed in hard disk drive . Signals carried over communications path can also embody the logic described herein. Computer program medium and computer usable medium can also refer to memories such as main memory and secondary memory which can be memory semiconductors e.g. DRAMs etc. . These computer program products are means for providing software to computer system .

Computer programs also called computer control logic are stored in main memory and or secondary memory . Computer programs may also be received via communications interface . Such computer programs when executed enable computer system to implement the present invention as discussed herein. In particular the computer programs when executed enable processor to implement the processes of the present invention such as the steps in the methods illustrated by flowchart of discussed above. Accordingly such computer programs represent controllers of the computer system . Where the invention is implemented using software the software may be stored in a computer program product and loaded into computer system using removable storage drive interface hard drive or communications interface .

The invention is also directed to computer program products comprising software stored on any computer useable medium. Such software when executed in one or more data processing device causes a data processing device s to operate as described herein. Embodiments of the invention employ any computer useable or readable medium known now or in the future. Examples of computer useable mediums include but are not limited to primary storage devices e.g. any type of random access memory secondary storage devices e.g. hard drives floppy disks CD ROMS ZIP disks tapes magnetic storage devices optical storage devices MEMS nanotechnological storage device etc. and communication mediums e.g. wired and wireless communications networks local area networks wide area networks intranets etc. .

It is to be appreciated that the Detailed Description section and not the Summary and Abstract sections is intended to be used to interpret the claims. The Summary and Abstract sections may set forth one or more but not all exemplary embodiments of the present invention as contemplated by the inventor s and thus are not intended to limit the present invention and the appended claims in any way.

The present invention has been described above with the aid of functional building blocks illustrating the implementation of specified functions and relationships thereof. The boundaries of these functional building blocks have been arbitrarily defined herein for the convenience of the description. Alternate boundaries can be defined so long as the specified functions and relationships thereof are appropriately performed.

The foregoing description of the specific embodiments will so fully reveal the general nature of the invention that others can by applying knowledge within the skill of the art readily modify and or adapt for various applications such specific embodiments without undue experimentation without departing from the general concept of the present invention. Therefore such adaptations and modifications are intended to be within the meaning and range of equivalents of the disclosed embodiments based on the teaching and guidance presented herein. It is to be understood that the phraseology or terminology herein is for the purpose of description and not of limitation such that the terminology or phraseology of the present specification is to be interpreted by the skilled artisan in light of the teachings and guidance.

The breadth and scope of the present invention should not be limited by any of the above described exemplary embodiments but should be defined only in accordance with the following claims and their equivalents.

