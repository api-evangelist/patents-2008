---

title: Printing control apparatus and printing control method that can prompt a user to set additional information which is effective later as a part of a print log
abstract: A printing control apparatus to store print data in a storage area from a print application and to send the print data to a print apparatus. The printing control apparatus includes a control unit to send, when a billing code is set in a first received print data, the print data to the print apparatus and to control, when no billing code is set in the first received print data, an order of the print data so that subsequent data is sent before (or instead of) the first received print data, a display control unit to display a list of the print data received from the print application, and a setting unit to select one or more print data from the list of the print data displayed by the display control unit to set a billing code according to input by a user. Related methods are also disclosed.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08264720&OS=08264720&RS=08264720
owner: Canon Kabushiki Kaisha
number: 08264720
owner_city: Tokyo
owner_country: JP
publication_date: 20080306
---
The present invention relates to a technology for managing a cost of print jobs by adding additional information such as a billing code to a print job in a print system and collecting a log of the additional information.

Recently a print history management system has been implemented which counts information such as printed document names print dates and times paper types sizes and orientations the number of printed documents and a color type of printed documents e.g. color or monochromatic documents corresponding to each user. The print history management system associates information e.g. customer information and a print unit cost which is not added by print applications and printer drivers with a print job and counts such information as a part of a print log print history . The print history management system utilizes counted information for billing such as studying print tendency from counted results. On the other hand in order to prevent wasted printouts from being generated a system has been provided which preliminarily sets the number of printouts that are available for each user so as to determine and restrict an upper limit of the number of printouts that can be generated by each user.

One method for associating additional information with a print job has been provided which generates a print job by inputting when generating the job information from a print setting dialog box and writing the input information to a region e.g. a header other than a region in which print information is stored by a printer driver. However it is necessary to change the driver that generates a job. Accordingly this method cannot be applied to existing systems. Thus a method has been provided which displays an information input dialog when a job is sent to an image processing apparatus after the job is generated by a client personal computer PC and is then stored in a spooler. However usually jobs are sequentially sent in the order of spooling one by one at a time. Accordingly in a case where the job to be sent is other than a first one it takes long until the job is sent in its turn. Thus sometimes a user logs off a computer before an information input dialog box is displayed. Consequently the user cannot input information. Accordingly sometimes because the leading job waits for input of information processing of subsequent jobs is not performed. To prevent occurrence of this situation in a case where no information is input for a job from the information input dialog box for a predetermined period of time the job is canceled as timeout. Consequently this method has a drawback in that a user having issued a print request to a printer does not receive a printed document.

Japanese Patent Application Laid Open No. 2003 131831 discusses a technique that in a case where a leading job is queued for a resource e.g. in a case where a printer runs out of specific paper an image processing apparatus pauses the leading job and performs the next job in the queue.

In the conventional technique of Japanese Patent Application Laid Open No. 2003 131831 generally a storage unit of an image processing apparatus has smaller capacity than an information processing apparatus that doesn t implement that technique. Thus a large number of jobs or a large job cannot be paused. Suspension of such jobs may result in a system halt. Even in an image processing apparatus having a storage unit of large capacity it is inefficient to send a print job which cannot be immediately performed from an information processing apparatus via a network. Additionally unless a user having issue a print request remains at or goes back to the image processing apparatus the user cannot cancel specific conditions e.g. waiting for a resource.

The present invention is directed to a printing control apparatus that can prompt a user to set additional information in a print job generated according to an instruction issued from a user. The additional information is effective later as a part of a print log.

According to an aspect of the present invention a printing control apparatus configured to store print jobs in a storage area in the order of being received from a print application and to send the stored print jobs to a print apparatus includes a control unit configured to control an order of sending the print jobs stored in the storage area to the print apparatus wherein in a case where a billing code is not set in a first print job a second print job received subsequent to the first print job is sent to the print apparatus while the first print job remains at the print control apparatus a display unit configured to display a list of the print jobs received from the print application and a setting unit configured to select at least one print job from the list according to input by a user and to set a billing code in the selected at least one print job.

Further features and aspects of the present invention will become apparent from the following detailed description of exemplary embodiments with reference to the attached drawings.

Various exemplary embodiments features and aspects of the invention will be described in detail below with reference to the drawings.

The printer drivers support a plurality of printers. The printers e.g. input output I O units can be any of the various types e.g. a laser beam printer employing an electrophotographic method an inkjet printer employing an inkjet method and a printer employing a thermal transfer method.

In the present exemplary embodiment the information processing apparatuses and such as personal computers are a log collection server and a print server respectively. The log collection server and the print server are connected to the network through network cables. These servers store files used in the network and monitor a status of use of the network . The log collection server and the print server have communication devices capable of bidirectionally communicating with other devices connected to the network and manage a plurality of printers.

The client computers and the log collection server and the print server are general information processing apparatuses. The log collection server and the print server can have functions of the client computers and . Storage media such as hard disks HDs and read only memories ROMs of the client computers and the log collection server and the print server store executable control programs for implementing various controls.

The print server stores print jobs including print data requested by the client computers and to print. The print server sends the print job to an image processing apparatus. Alternatively the print server may receive receives only job information which includes no print data from the client computers and and may manage a printing order of the client servers and . The print server notifies one of the client computer or which comes its printing turn of a permission to send a print job including print data. The print server has functions of acquiring various information such as a status of a network printer and print jobs and sending notifications to the client computers and .

The network printer serves as an image processing apparatus that includes a printer a copier and a multifunction peripheral. The network printer is connected to the network via a network interface not illustrated . Thus the network printer receives print jobs including print data sent from the print server hereinafter sometimes referred to also as the client computer and the client computers and .

Referring to a central processing unit CPU is a control unit for an information processing apparatus each of the client computers and . The CPU executes application programs printer driver programs OS programs and network printer control programs according to the present exemplary embodiment of the present invention which are stored in a hard disk HD . Further the CPU controls temporary storage of information and files necessary to execute programs in a random access memory RAM .

A ROM is a storage unit that stores programs such as basic I O programs and various data such as font data used for document processing and template data. A RAM is a temporary storage unit serving as a main memory and a work area for the CPU .

A Floppy disk FD drive is a storage medium reading unit. As illustrated in which will be described later programs stored in a FD serving as a storage medium can be loaded in a computer system serving as a client computer via the FD drive . The storage medium is not limited to a FD. A compact disk read only memory CD ROM a compact disk recordable CD R a compact disk rewritable CD RW a PC memory card a digital versatile disk DVD an integrated circuit IC memory card a magneto optical disk MO and a memory stick can be used as the storage medium.

The HD is an external storage unit functioning as a mass memory. The HD stores application programs printer driver programs OS programs control programs and relating programs. Additionally the HD assures an area for storing a spooler. In the client computer the spooler is a client spooler. In the print server the spooler is a server spooler. The print server stores job information received from the client computers. A table for controlling a printing order is generated and stored in the external storage unit.

A keyboard KBD serves as an instruction input unit for inputting instructions such as device control commands. A pointing device PD is connected to the keyboard .

A display display unit displays representations of processed instructions and or data such as for example commands input from the keyboard or statuses of the printers.

A connection unit sends and receives data to and from external devices via a bidirectional interface .

An exemplary operation to load control programs and related data directly into the RAM from the FD and to execute the programs according to the present exemplary embodiment is described below. Alternatively the control program which is already installed in the HD can be loaded into the RAM every time the control program is executed from the FD .

In addition to FDs CD ROMs CD Rs PC cards DVDs and IC memory cards can be used as media for storing the control programs. Additionally the control programs can be stored in the ROM and configured to constitute a part of a memory map to be directly executed by the CPU .

Next a configuration of the image processing apparatus is described below in detail. Main components of the image processing apparatus are a connection unit a data control unit printer engine an operation unit an external memory a printer CPU PCPU a printer RAM PRAM and a printer ROM PROM . These components of the image processing apparatus are connected to one another via a system bus .

The PCPU controls the entire image processing apparatus . The PCPU sends an image signal to the data control unit according to a printer control command transmission data received by the connection unit based on the control program stored in the PROM or the external memory .

The PRAM serves as a main memory for the PCPU and has a temporary storage area for various data which is used as a work data area when a control operation is performed by the PCPU . The external memory is optionally connected to the system bus and stores font data emulation programs and form data. The PROM is a printer internal memory that stores various data and control programs for controlling the image processing apparatus similar to the external memory .

The data control unit is a printer engine and is controlled by the PCPU . The data control unit receives an image signal output by the control program stored in the PROM or the external memory via the system bus and performs actual print processing. The operation unit includes an input section which has an operation panel and an operation switch and a display section having a light emitting diode LED panel or a liquid crystal panel. The operation unit accepts an operation by an operator and displays a result thereof. The operator can instruct a setting of the image processing apparatus and check the setting thereof via the operation unit .

The connection unit is connected to the connection unit of the information processing apparatus via the above described bidirectional interface . Thus the connection unit can notify a state in the image processing apparatus which receives a print control command transmission data to the information processing apparatus .

Additionally a software capable of implementing equivalent functions of the above mentioned devices can be constituted as an alternative hardware device.

The present invention can be applied to both of a case where the client computer for generating print jobs the printer server for sending print jobs and the log collection server for collecting and managing print jobs are information processing apparatuses having the same configuration as one another and a case where the client computer for generating print jobs the printer server for sending print jobs and the log collection server for collecting and managing print jobs are information processing apparatuses having different configurations than one another.

The client computer serving as a print control apparatus print control unit according to the present exemplary embodiment has at least a driver a spooler monitoring module a UI control unit and a port monitor. The print control apparatus can have a storage medium for storing various information used in processing performed therein and all modules illustrated in other than a print application. In addition as will be described later the print control apparatus can be implemented in an image processing apparatus e.g. a print apparatus printer and a copier .

A user generates a document using the instruction devices such as the keyboard and the pointing device . Then the user instructs to print the document using a print instruction unit provided for the application program. The application program passes print data to a printer driver and generates a print job. The printer driver passes the generated print job to a spooler . The spooler spools the print jobs passed from a plurality of drivers and schedules the jobs corresponding to each of the printers specified by the user. Then the spooler passes the job to a port monitor corresponding to a port connected to the printer. The port monitor accordingly calls a device driver corresponding to the port e.g. a universal serial bus USB or a network port and passes the job to the device driver . The device driver transfers the passed data to an image processing apparatus via the connection unit according to a predetermined method.

The spooler monitoring module automatically starts operating when the client computer is booted. The spooler monitoring module monitors the spooler using a spooler function preliminarily provided in the OS. More particularly the spooler monitoring module monitors the addition deletion and alteration of the printer driver and the job generation and status corresponding to each printer driver. When a job is spooled the job is stored in a preliminarily prepared storage area for a job list together with annex information representing a status a size a printer driver name an owner a document name a date and a time. Simultaneously a UI processing unit display control unit displays an information input dialog box information input UI which is illustrated in in a display unit of the client computer. When receiving input information from the user via the information input UI the UI processing unit reflects the input information in the job list . Additionally the spooler monitoring module passes a log to a server notification module . Thus the log collection server is notified of the log.

Job information obtained by adding a billing code to information relating to each job as additional information is treated as a log. A billing destination corresponding to the billing code can preliminarily be determined. A method of utilizing a billing code for example can be set as follows. The billing destination is not preliminarily determined. Each client user can use the billing code for expense control when a job is uniquely processed. A billing code can be set after an associated job is generated as will hereinafter be described in the present exemplary embodiment. Each billing code is constituted by an arbitrary character string code other than a single character 0 . Each billing code includes three independent subcodes. A user can designate all of the three billing codes. Alternatively a user can designate only two or one of the three billing codes. The log collection server utilizes each billing code included in a log for determining destinations which the bill is distributed to and a billing amount.

According to the present exemplary embodiment one client computer generates print jobs and sends the print jobs to the image processing apparatus.

In step the spooler monitoring module acquires a job listing. For example the spooler monitoring module calls a Win32 function EnumJob provided in Windows . Then the spooler monitoring module acquires a print job listing spooled in a spooling area of the client computer. The spooler monitoring module stores the print job listing to a work area preliminarily secured in the storage unit such as the RAM or the HD .

Next in step the spooler monitoring module determines whether a new job occurs in the job listing acquired in step . More particularly the CPU compares a job list which will be described later with the job listing acquired in step . If a new job ID is added to the job listing the CPU determines that a new job occurs.

If it is determined that a new job occurs in step the spooler monitoring module adds to the job list the job newly acquired in step and attribute information relating to the job in step . The job list has one job ID and attribute information relating to the job such as a document name corresponding to each job. The job list also has additional information such as a billing code which is added by the print system to the job list corresponding to each job. The job list is stored in a storage medium such as the RAM or the HDD when the spooler monitoring module is activated. The attribute information relating to each job is acquired by a Win32 function GetJob provided in Windows or a method unique to the print system.

Next in step the spooler monitoring module determines whether the job list generated in step has one or more jobs. More particularly the CPU studies the job list stored in the storage medium such as the RAM or the HD and calculates the number of records of the jobs. If it is determined that the job list has no job the CPU returns to step .

If it is determined in step that the job list has one or more jobs the spooler monitoring module determines in step whether the UI processing unit has displayed an information input UI. For example the spooler monitoring module calls a Win32 function FindWindow which is provided in Windows . If a window based on processing performed by the UI processing unit has been displayed the spooler monitoring module determines that the UI processing unit has displayed an information input UI. If the information input UI has been displayed the CPU repeats a process consisting of steps to .

If it is determined in step that no information input UI is displayed the spooler monitoring module displays the information input UI in the display unit such as a cathode ray tube CRT by using the UI processing unit in a predetermined procedure in step .

If it is determined in step that no new job occurs the spooler monitoring module determines in step whether a job has been finished. More particularly the CPU compares the job listing acquired in step with the job list stored in the storage medium such as the RAM or the HD . If there is no job in the job listing the CPU determines that the jobs stored in the job list have been finished.

If it is determined in step that the job has been finished the spooler monitoring module notifies the log collection server of a log in step . More particularly the CPU extracts a record of the finished job from the job list stored in the storage medium such as the RAM or the HD . Then the CPU generates a log as illustrated in and passes the log to the server notification module . The CPU deletes an associated record from the job list . Then the CPU stores the changed job list in the storage medium such as the RAM or the HD . The server notification module notifies the log collection server of the log via the network.

Next in step the CPU searches the job list generated by the above described spooler monitoring module and stored in the storage medium such as the RAM or the HD for the job ID acquired in step .

If a job corresponding to the job ID is found in the job list the CPU searches annex information of the found job in step and determines whether an effective billing code is set therein. More particularly if a numerical value other than 0 is set in at least one of the fields of the three billing codes the CPU determines that the effective billing code is set.

If the CPU determines in step that the effective billing code has been input thereto the port monitor sends the job to the image processing apparatus via the network in step .

If the CPU determines in step that the job corresponding to the job ID has not been registered in the list or if the CPU determines in step that no effective billing code is input thereto the port monitor pauses the job in step . More particularly the port monitor designates the job using a Win32 function SetJob provided in Windows produced by Microsoft Corporation. The port monitor designates a parameter of the function as JOB CONTROL PAUSE in order to pause processing of the job. Thus the job is paused in step so that printing corresponding to the job is stopped until it comes to the turn of the job in the queue in the spooler to perform this printing.

Next in step the port monitor restarts the job. For example the port monitor designates the job using the Win32 function SetJob provided by Windows produced by Microsoft Corporation. The port monitor designates a parameter of the function as JOB CONTROL RESTART in order to restart processing of the job. Thus the job is performed from the beginning thereof the next time. If a leading job in the queue is paused when the spooler dequeues the leading job from the queue the spooler skips the leading job and starts processing the next job.

The UI control unit is activated by the spooler monitoring module . Alternatively a user can activate the UI control unit at an optional timing and can cause the UI control unit to display an information input UI. In an initial display state the job list display section illustrated in displays all the records stored in the job list together with the annex information. If the entire job list cannot be fit within the display area of the job list display section a scrollbar will be displayed in the job list display section . All of the jobs listed in the job list are in an unselected state and the billing code input field is empty.

For example according to a method described in Microsoft Developer Network MSDN Library provided by Microsoft Corporation an operation such as a click with a mouse button or a keyboard input and an identification ID for uniquely determining each resource such as a button and a list box within a window can be determined as events. Processing in step is repeated until an event occurs.

If it is determined in step that an event occurs the UI control unit determines in step whether the event is a job selection. More particularly if an event acquired in step includes a selection operation using a mouse button which corresponds to the job ID represented by the record in the job list display section illustrated in the UI control unit determines that the event is a job selection.

If it is determined in step that the event is a job selection the UI control unit reverses a color of display before or after the job selection in step so as to enable a user to recognize that the record is selected on the display section .

If it is determined in step that the event is not a job selection the UI control unit determines whether an input button is clicked in step . More particularly if the event acquired in step includes a selection operation using a mouse button corresponding to an ID representing the input button illustrated in the UI control unit determines that the input button is clicked.

If it is determined in step that the input button is clicked the UI control unit sets a billing code in the job list in step . The CPU searches the job list illustrated in for a record reversely displayed on the job list display section . Then the CPU acquires a job ID from the found record. Further the CPU sets values of the first billing code the second billing code and the third billing code illustrated in in a billing code field of a record corresponding to the job ID in the job list stored in the storage medium such as the RAM or the HD .

If it is determined in step that the input button is not clicked the UI control unit determines in step that the pause button is clicked. More particularly if the event acquired in step includes an ID representing the pause button illustrated in and a selection operation using a mouse button the UI control unit determines that the pause button is clicked.

If the UI control unit determines in step that the pause button is clicked the CPU searches the job list illustrated in in step for a record reversely displayed on the display section . Then the CPU acquires a job ID from the found record. Next the CPU designates a job corresponding to the acquired job ID using e.g. the Win32 function SetJob provided in Windows . Further the CPU designates a parameter of the function as JOB CONTROL PAUSE in order to pause processing of the job.

If the UI control unit does not determine in step that the pause button is clicked the UI control unit determines in step that the resume button is clicked. More particularly if the event acquired in step includes an ID representing the resume button illustrated in and a selection operation using a mouse button the UI control unit determines in step that the resume button is clicked.

If the UI control unit determines in step that the resume button is clicked the CPU searches the job list illustrated in for a reversely displayed record on the job list display section in step . Then the CPU acquires a job ID from the found record. Next the CPU designates a job corresponding to the acquired job ID using e.g. the Win32 function SetJob provided in Windows . Further the CPU designates a parameter of the function as JOB CONTROL RESUME in order to resume processing of the job. Consequently if the job is pausing the pausing is canceled. If a part of job data has been sent the rest of the job is sent. If the job is not pausing the status of the job is unchanged.

If it is not determined in step that the resume button is clicked the UI control unit determines in step whether the delete button is clicked. More particularly if the event acquired in step includes an ID representing the delete button illustrated in and a selection operation using a mouse button the UI control unit determines that the delete button is clicked.

If the UI control unit determines in step that the delete button is clicked the CPU searches the job list illustrated in for a reversely displayed record on the job list display section in step . Then the CPU acquires a job ID from the found record. Next the CPU designates a job corresponding to the acquired job ID using e.g. the Win32 function SetJob provided in Windows . Further the CPU designates a parameter of the function as JOB CONTROL DELETE in order to delete processing of the job.

If it is determined in step that the delete button is not clicked the UI control unit determines in step whether the update button is clicked. More particularly if the event acquired in step includes an ID representing the update button illustrated in and a selection operation using a mouse button the UI control unit determines that the update button is clicked.

If it is determined in step that the update button is clicked the UI control unit reacquires a job listing in step . For example the UI control unit calls a Win32 function EnumJob or GetJob which is provided in Windows or a method unique to the print system. Thus the UI control unit acquires a listing of print jobs and annex information. Then the UI control unit updates information of the job list preliminarily secured in the storage unit such as the RAM or the HD according to the acquired job information.

Next in step the UI control unit updates the display in the job list display section illustrated in according to information on the job list updated in step .

According to the above described method operations and inputting of additional information can be performed on a plurality of jobs at a time using the job list in the first exemplary embodiment. Consequently convenience can be enhanced. Moreover job processing is not stopped at the spooler because of waiting for inputting additional information. Furthermore even when the additional information is not input in a job the subsequent jobs can be continuingly performed without deleting the job.

According to a second exemplary embodiment of the present invention an improvement of a printing control apparatus and method is provided which is configured to preferentially perform a print job whose job information is input from an information input UI. For example in a spooling system according to Windows priorities are set in queued print jobs. Each queued print job can be designated and can acquire and set a priority thereof using Win32 functions GetJob and SetJob provided in Windows . The priority of each queued print job can be set in a range from a lowest level of 1 to a highest level of 99. Generally the priority of each print job is determined and set at the lowest level of 1 when print jobs are spooled.

In the following description only differences of the second exemplary embodiment from the first exemplary embodiment are described. An improvement of the basic operational flow of the UI processing unit illustrated in more specifically that of the billing code setting processing in step is described below with reference to . In the following description an initial value of the priority of each of all print jobs is assumed to be set at 1.

In step the UI control unit sets a billing code in each of print jobs listed in the job list . According to a preliminarily provided method the CPU searches the job list display section illustrated in for a record reversely displayed therein. Further the CPU acquires a job ID from the found record. Next the CPU sets a value of each of the first to third billing codes illustrated in to an associated one of the billing code fields of the found record in the job list stored in the storage medium such as the RAM and the HD respectively.

Next in step the UI control unit increases the priority of each job whose billing code is set in step . For example the UI control unit acquires a priority of each of such print jobs using the Win32 function GetJob provided in Windows produced by Microsoft Corporation. Then the UI control unit sets a new priority of each of such print jobs using the Win32 function SetJob to a value in which one 1 is added to the acquired priority.

Consequently the priority of each print job whose billing code is set among the queued print jobs in the spooler is increased by one 1 . Thus the job with the higher priority in the queue namely the job whose billing code is set is preferentially processed. Even in a case where a job whose billing code is not set is a preceding print job in the queue a subsequent print job whose billing code is set in the queue is earlier processed.

According to the second exemplary embodiment a priority is set in each print job so that a job to which additional information is added is preferentially performed. More specifically a print job whose billing code is set is processed earlier than a print job whose billing code is not set regardless of an order of spooling in the queue in the spooler. Consequently print processing of a print job can avoid stagnation in processing caused by waiting for inputting additional information corresponding to the print job.

In a case where a user mistakenly gives a print instruction to a print job and leaves the print job unperformed without inputting additional information such as a billing code the print job may remain in a queue without being processed in the spooler . Thus according to a third exemplary embodiment of the present invention an improvement of the printing control method is provided such that a print job the additional information of which is not input for a certain time is automatically deleted from the queue in the spooler .

In the following description only differences of the third exemplary embodiment from the first and second exemplary embodiments are described. An improvement of the job list generation processing in step of the basic flow of processing in the spooler monitoring module illustrated in is described below with reference to .

In step the spooler monitoring module adds a print job acquired in step illustrated in and attribute information relating to the acquired print job to the job list . The job list includes attribute information relating to the job e.g. a job ID and a document name corresponding to each print job. Further the job list also includes additional information such as a billing code added by the print system to a print job and a deletion timer start time corresponding to each print job. When the spooler monitoring module is activated the job list is stored in the storage medium such as the RAM and the HD . The attribute information relating to the job is acquired by the Win32 function GetJob provided in Windows produced by Microsoft Corporation or a method unique to the print system. An initial state of a field storing deletion timer start time is assumed blank.

Next in step the CPU checks the number of records in the job list stored in the storage medium such as the RAM and the HD in step . If the number of the records is zero 0 the CPU finishes job list generation processing . Otherwise the CPU repeats a process consisting of steps through and read all of the records sequentially. If it is determined in step that all of the records have been read the CPU finishes the job list generation processing .

Next in step the CPU reads one record from the job list stored in the storage medium such as the RAM or the HD in step and stores the read record in a work area which is secured in the storage medium such as the RAM or the HD .

Next in step the spooler monitoring module checks data of one record stored in the work area in step . Then the spooler monitoring module determines whether the job corresponding to the record is a new job. If the field storing the deletion timer start time is blank the CPU determines that the job is a new one.

If it is determined in step that the job is a new one the CPU sets the deletion timer start time in the associated record of the job list stored in the storage medium such as the RAM and the HD for the current time and stores the set deletion timer start time in step .

If it is determined in step that the job is not a new one the spooler monitoring module checks data of one record stored in the work area in step and determines whether a timeout occurs. More particularly the CPU compares the deletion timer start time recorded in the one record stored in the work area with the current time. If a difference therebetween exceeds a predetermined timeout value the CPU determines that a timeout has occurred.

If it is determined in step that no timeout has occurred the CPU repeats a process consisting of steps to .

If it is determined in step that a timeout has occurred the CPU deletes the currently checked record from the job list stored in the storage unit such as the RAM and the HD in step . Then the CPU causes the storage unit to store the job list .

Next in step the spooler monitoring module deletes the job from the queue in the spooler . For example the CPU designates the job using the Win32 function SetJob provided in Windows . Then the CPU designates a parameter of the function as JOB CONTROL DELETE in order to delete processing of the job. Subsequently the CPU repeats a process consisting of steps to .

As described above according to the third exemplary embodiment a print job whose additional information is not input will not be left unperformed in the queue in the spooler .

According to a fourth exemplary embodiment of the present invention an improvement of a printing control method is provided such that in a case where a user mistakenly adds additional information such as a billing code to a print job the additional information can be changed even after the user finishes inputting a print instruction b.

In the following description only differences of the fourth exemplary embodiment from the first through third exemplary embodiments are described. An improvement of the log sending processing in step of the basic flow of processing in the spooler monitoring module illustrated in is described below with reference to .

The job list includes attribute information relating to the job e.g. a job ID and a document name corresponding to each print job. Further the job list also includes additional information such as a billing code added by the print system to a print job and a sending timer start time corresponding to each print job. When the spooler monitoring module is activated the job list is stored in the storage medium such as the RAM and the HD . The attribute information relating to the job is acquired by the Win32 function GetJob provided in Windows or a method unique to the print system. An initial state of a field storing sending timer start time is assumed to be blank.

In step the spooler monitoring module determines whether a sending timer start time is set. More particularly the CPU fetches a record corresponding to a job which is determined in step illustrated in to be finished from the job list stored in the storage medium such as the RAM and the HD . Then the CPU reads the sending timer start time from the fetched record and stores the read sending timer start time in the work area. If it is determined that the field storing the sending timer start time in the work area is not blank the CPU determines that the sending timer start time is set.

If it is determined in step that the sending timer start time is set the spooler monitoring module determines whether a timeout occurs in step . That is the sending timer start time stored in the work area in step is compared with a current time. If a difference therebetween exceeds a predetermined threshold for a timeout the spooler monitoring module determines that a timeout occurs.

If it is determined in step that a timeout has occurred the spooler monitoring module notifies a log collection server of a log in step . More particularly the CPU fetches a record of an ended job from the job list stored in the storage medium such as the RAM or the HD . Then the CPU generates a log illustrated in and passes the log to the server notification module . The CPU deletes the associated record from the job list and stores the job list in the storage medium such as the RAM or the HD . The server notification module notifies the log collection server of the log via the network.

If it is determined in step that no timeout has occurred the spooler monitoring module finishes the log sending processing.

If it is determined in step that a sending timer start time is not set the process proceeds to step . The CPU sets the sending timer start time recorded in the associated record in the job list for a current time. Then the CPU causes the storage unit to store the job list .

According to the fourth exemplary embodiment additional information such as a billing code can be changed for a certain time after a print instruction is issued upon completion of a print job by preliminarily setting timing to send a log.

In a case where a large number of jobs are not spooled in a queue in the spooler sometimes a turn to process a job in the queue in the spooler comes earlier than a user inputs additional information corresponding to the job. Thus it can be determined that the additional information corresponding to the job is not input. In this case according to the first exemplary embodiment the job is paused. Consequently the user needs to cancel the pause status of the job. According to the third exemplary embodiment the job may automatically be deleted.

In the following description of a fifth exemplary embodiment only differences of the fifth exemplary embodiment from the first through fourth exemplary embodiments are described below. More specifically improvements of the reverse displaying processing in step and the billing code setting processing in step of the flow showing the basic operation in the UI processing unit illustrated in are described below with reference to .

In the reverse display processing the UI processing unit pauses a job in step . For example the UI processing unit uses the Win32 SetJob provided in Windows and designates a parameter of the function as JOB CONTROL PAUSE so as to pause processing of the job corresponding to the ID acquired in step illustrated in .

Next in step the UI processing unit reversely displays the record according to a preliminarily provided method. Then the UI processing unit finishes the reverse displaying processing.

In the billing code setting processing the UI processing unit sets a billing code in each job in the job list in step . The CPU searches the display section for a record reversely displayed in the job list. Then the CPU acquires a job ID from the found record. Subsequently the CPU sets values of first second and third billing codes illustrated in in the billing code fields of an associated record in the job list stored in the storage unit such as the RAM and the HD .

Next the UI processing unit resumes the job in step . The UI processing unit uses the Win32 SetJob provided in Windows and designates a parameter of the function as JOB CONTROL RESUME so as to resume processing of the job. In a case where the job is paused the pause is canceled. In a case where a part of job data has been sent the apparatus resumes the job by starting to send the rest of the job data. In a case where the job is not paused the status of the job does not change.

The fifth exemplary embodiment can prevent a selected job from being deleted while additional information such as a billing code corresponding to the selected job is input. Additionally the job whose additional information is input is automatically resumed and the fifth exemplary embodiment can save users efforts for resuming the job.

In a case where printing is performed without using the port monitor e.g. printing is performed using a printer server based on NetWare developed by Novell Incorporation a client computer cannot confirm that additional information is set in the job sent from the port monitor . Accordingly the client computer can not permit only the jobs in which additional information has surely been set to perform printing. Thus an improvement of a printing control apparatus is provided in which an image processing apparatus such as a printer and a copier confirms whether additional information is set in the job.

A sixth exemplary embodiment is described with reference to A B and . The above described other exemplary embodiments can be applied to the sixth exemplary embodiment. In the following description only differences of the sixth exemplary embodiment from the first through fifth exemplary embodiments are described.

The image processing apparatus stores a print job passed from the client computer and pauses the print job until the client computer instructs the image processing apparatus to resume the print job.

A device monitoring module automatically starts operating when the client computer is booted. The device monitoring module monitors the status of the job in the image processing apparatus using a device monitoring function preliminarily provided in the module. When jobs are accumulated in the print queue information representing jobs is stored in the job list together with annex information representing a status a size an owner a document name a date and a time. Simultaneously a UI processing unit displays an information input UI in the display unit such as a CRT. The UI processing unit displays an information input dialog box which is illustrated in in the display unit of the client computer. When input information is received from the user the UI processing unit reflects the input information in the job list . Additionally the device monitoring module instructs the image processing apparatus to resume the job and passes a log of the job which has finished printing to a server notification module . Thus the log collection server is notified of the log.

A basic flow of the image processing apparatus is described below with reference to . The image processing apparatus has functions of receiving a job operation command from the client computer and of notifying when the status of the job changes the client computer of the change of the job. An event of notifying the change of the status includes a job ID which uniquely determines a job in the image processing apparatus and information representing a job status. Additionally print data corresponding to each job can be accumulated in a print queue secured in the storage medium such as a PRAM . Thus a given print job can be fetched to pause resume delete and print.

In step the image processing apparatus determines whether data is received. When receiving data from the network through the bidirectional interface via the connection unit the image processing apparatus store the data in the work area assured in the storage unit such as the PRAM . The image processing apparatus repeats the processing until receiving data.

If it is determined in step that the data is received the image processing apparatus determines in step whether the received data represents a job. More particularly the image processing apparatus checks received data stored in the work area secured in the storage unit such as the PRAM using the PCPU . If the received data has a predetermined job format the image processing apparatus determines that the received data represents a job.

If it is determined in step that the received data represents a job the image processing apparatus pauses a job in step according to a predetermined procedure and causes the storage unit such as the PRAM to store the job.

Next in step the image processing apparatus generates a status change event of the job having a job status of pause using the PCPU . Then data representing the generated status change event is stored in the work area secured in the storage unit such as the PRAM . Then the process proceeds to step .

If it is determined in step that the received data does not represent a job in step the image processing apparatus determines whether the received data represents a resume command. More particularly the image processing apparatus checks the received data stored in the work area secured in the storage unit such as the PRAM using the PCPU . If the received data has a predetermined command format and if a type of a command is a resume of a job the image processing apparatus determines that the received data represents a resume command .

Next in step the image processing apparatus fetches a job corresponding to a job ID included in the command acquired in step from a queue secured in the storage unit such as the PRAM and performs printing. For example the image processing apparatus rasterizes the print job into image data bit map data on which predetermined image processing is performed and causes the printer engine to perform printout.

Next in step the image processing apparatus generates a job finish event corresponding to the job in which printing has been performed in step . That is the image processing apparatus uses the PCPU and stores status change event data that has a job ID of the job in which printing has been performed in step as job ID information and that has information representing a print finish status as job status information in the work area secured in the storage unit such as the PRAM .

In step the image processing apparatus uses the PCPU so as to fetch event data stored in the work area secured in steps and in the storage unit such as the PRAM . Then the image processing apparatus sends the fetched data to the client computer via the connection unit and the bidirectional interface .

In step the device monitoring module acquires a job listing. The PCPU receives a job status change event notified from the image processing apparatus through the bidirectional interface via the connection unit . The device monitoring module stores the received event in the work area secured in the storage unit such as the RAM or the HD .

Next in step the device monitoring module determines whether a job occurs. More particularly the PCPU checks the event stored in the work area having been secured in step in the storage unit such as the RAM or the HD . If the status represented by the event is a pause status the device monitoring module determines that a new job occurs.

If it is determined in step that no new job occurs the device monitoring module determines in step whether the job is finished. More particularly the CPU checks the event stored in the work area that has been secured in the storage medium in step . If it is determined that the status is a print finish status the CPU determines that printing has been finished in the job.

If it is determined in step that the job is finished the device monitoring module notifies the log collection server of a log in step . More particularly the CPU fetches a record of the finished job from the job list stored in the storage medium such as the RAM or the HD . Then the CPU generates the log illustrated in and passes the log to the server notification module . The CPU deletes the associated record from the job list . Then the CPU stores the job list in the storage medium such as the RAM or the HD . The server notification module notifies the log collection server of the log through the network.

If it is determined in step that a new job has occurred and if it is determined in step that the job is not finished the process proceeds to step . In step the device monitoring module adds a job ID and a job status included in the event acquired in step and annex information such as an owner and a document name to the job list . The job list includes attribute information representing a job ID a document name and the like corresponding to each job and includes also additional information representing a billing code and the like which corresponds to each job and is added by the print system. When the device monitoring module is activated the job list is stored in a predetermined area of the storage medium such as the RAM or the HD .

Next in step the device monitoring module determines whether the job list generated in step includes one or more jobs. More particularly the CPU studies the job list stored in the storage medium such as the RAM or the HD and calculates the number of the records of jobs. If the device monitoring module determines that the job list does not include one or more jobs the process proceeds to step .

If it is determined in step that the job list includes one or more jobs the device monitoring module determines in step whether an information input UI has been displayed by the UI processing unit . For example the device monitoring module calls a Win32 function FindWindow provided in Windows produced by Microsoft Corporation. If a window based on the UI processing unit is present the device monitoring module determines that the information input UI has been displayed. If the information input UI has been displayed a process consisting of steps through is repeated.

If it is determined in step that no information input UI is displayed in step the device monitoring module causes the UI processing unit according to a predetermined procedure to display and control an information input UI.

A method adapted to cause an image processing apparatus to notify the client computer of an event trap an event at an optional timing has been described as an example of a method for notifying the client computer of a job status in the image processing apparatus. However even in a case where the method is adapted so that the client computer designates a timing at which the client computer acquires job information the present invention can be applied to such a method.

According to the sixth exemplary embodiment of the present invention even in a case where additional information cannot be input by the client computer before a job is sent additional information can be input before printing is performed by the image processing apparatus. Additional information can be input at the image processing apparatus.

The present invention may be applied for example to either a system including a plurality of devices or an apparatus constituted by a single device. For example the present invention can be applied to e.g. a printer a facsimile apparatus a PC and a computer system including a server and a client computer.

The processes according to the above described exemplary embodiments can be performed for example in a print apparatus. In this case a user can set a billing code or the like from an input panel or the like which is provided in the print apparatus. In this case print data is output to an image engine serving as a destination print apparatus. Additionally a queue storage area in the print apparatus may be monitored by the monitoring module as a monitoring item. States of the print data can be displayed.

The present invention can be achieved for example by supplying a software program which implements the functions of the above described exemplary embodiments directly or remotely to a system or apparatus and by reading and executing the supplied program code with a computer included in the system or apparatus.

In such instance the present invention may be implemented for example by the program code itself installed in the computer so as to implement the functions and processing according to the present invention. For example the present invention includes a computer program for implementing the functions and processing according to the present invention.

In this case as long as the system or apparatus has functions of the program the program can have any of a wide variety of forms e.g. an object code a program executed by an interpreter and script data supplied to an OS or the like.

Storage media for supplying the program are e.g. a floppy disk a hard disk an optical disk an MO a CD ROM a CD R a CD RW a magnetic tape a non volatile type memory card a ROM and a DVD digital versatile disk read only memory DVD ROM and a digital versatile disk recordable DVD R .

The program can be downloaded from a homepage on the Internet using a browser of a client information processing apparatus. A computer program itself according to the present invention or an automatically installable compressed file including an automatically installing function can be downloaded to a recording medium such as a hard disk. Further the program according to the present invention can be supplied by dividing the program code constituting the program according to the present invention into a plurality of files and downloading the files from different homepages. For example a World Wide Web WWW server which allows a plurality of users to download the program files that implement the functions and processing according to the present invention by a computer can embody the present invention.

The program according to the present invention can be encrypted and stored in a storage medium such as a CD ROM and the storage medium can be distributed to users. In this case the program can be installed in computers by permitting only users who meet predetermined conditions to download decryption key information from a homepage via the Internet to decrypt the encrypted program using the key information and to execute the program.

The functions of the above described exemplary embodiments can be implemented by executing a read program by a computer. According to instructions from the computer an OS or the like running on the computer can perform all or a part of the actual processing thereby implementing one or more embodiment of the present invention.

Further a program read from the storage medium can be written to a function expansion board inserted into the information processing apparatus or to a memory provided in a function expansion unit connected to the information processing apparatus a CPU or the like provided in the function expansion board or the function expansion unit performs all or a part of the actual processing. Consequently the functions of the above described exemplary and other embodiments can be implemented.

While the present invention has been described with reference to exemplary embodiments it is to be understood that the invention is not limited to the disclosed exemplary embodiments. The scope of the following claims is to be accorded the broadest interpretation so as to encompass all modifications equivalent structures and functions.

This application claims priority from Japanese Patent Application No. 2007 172288 filed Jun. 29 2007 which is hereby incorporated by reference herein in its entirety.

