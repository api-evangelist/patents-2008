---

title: Method and system of externalising / internalising a data record that allow processing of part or all of the record
abstract: A method of external data storage in a system including a primary processing device, having a processor and a primary data storage unit, adapted to run application programs for processing active records in the processor and configured to store data belonging to active records in the primary data storage unit; and a secondary data storage system, accessible to the primary processing device, includes loading data belonging to an active record into the primary data storage unit and externalising the record by transferring at least a piece of data belonging to the record to the secondary data storage system for storage. The step of externalising a record includes the making of a call by an application program using data belonging to the record to an interface, arranged to transfer the piece of data to the secondary data storage system.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07814269&OS=07814269&RS=07814269
owner: Irdeto Access B.V.
number: 07814269
owner_city: Hoofddorp
owner_country: NL
publication_date: 20081211
---
This is a divisional of U.S. patent application Ser. No. 11 055 881 now U.S. Pat. No. 7 467 284 filed on Feb. 11 2005 and titled METHOD AND SYSTEM OF EXTERNALISING INTERNALISING DATA RECORD THAT ALLOW PROCESSING OF PART OR ALL OF THE RECORD which claims benefit of European Application EPO No. 04100546.3 filed Feb. 12 2004 each of which is incorporated herein by reference in its entirety.

An example embodiment of the invention relates generally to methods of externally storing data processed by a processing device. In particular an example embodiment of the invention relates to methods of external data storage methods of internalising data and method of enabling external data storage and internalisation of data. An example embodiment of the invention also relates to the application of such methods in a multimedia system and to a system and computer program for executing such methods.

Examples of a method of enabling external data storage and of a method of external data storage and system adapted to carry out such a method are known e.g. from U.S. Pat. No. 5 757 919. This publication discloses a method and system for maintaining integrity and confidentiality of pages paged to an external storage unit from a physically secure environment. This physically secure environment contains a secure processor coupled by a bus to a random access memory. An integrity check engine performs a one way hash of data paging between the secure environment and the insecure environment particularly an external storage unit. In one embodiment the secure processor is architected to use a 1K page. A host processor in the insecure environment treats the pages of the secure processor stored in external memory as 1K data blocks. If a page is identified as needed a determination is made if the page is present within the secure memory. If the page is present a page hit occurs and no further action is required. If the page is not present a page fault occurs. When a page fault occurs a determination is made if there is space available in the secure memory to which the needed page can be mapped. If no space is available then a page is selected to page out. Various selection criteria may be employed such as least recently used.

The known method and system has the disadvantage that it is difficult to select the piece of data to be transferred to the secondary data storage system. Because paging in and paging out generally involve latency and the security services increase the latency in the event of a page fault this slows down the processing of active records.

Another example of a method of external data storage method of internalising data method of processing records in a multimedia system and system adapted to carrying out such methods is disclosed in FR A 2 803 471. This publication discloses a memory management process in a television receiver. The television system comprises a television local memory means implanted in the television and external memory means associated with the television such as a memory card or disk drive. The system comprises a computer program comprising a plurality of executable modules. A first module receives and analyses each request to memorise information. If the characteristics of the memory means do not permit the storage of new information the first module triggers a second module. The second module frees memory space whilst respecting usage criteria of the stored information. The first and second module use a series of simple procedures to optimise the storage of information. These procedures realise for example the removal of data from a first memory means to a second memory means.

A problem of this known system and method is that they do not allow processing of part or all of the record once it has been externalised. If this were to happen and the piece of data were to be transferred back to the television at a later stage the complete set of data belonging to the record would not be identical to the complete set of data as last processed by the application on the television set before externalisation.

An example embodiment of the invention provides a method of enabling external data storage a method of external data storage a method of internalising a record a method of enabling the internalisation of a record a primary processing device and computer program means that are more efficient in terms of the number of transfers of data to and from the secondary storage system.

This is achieved by providing a method of enabling external data storage in a system including a primary processing device having a processor and a primary data storage unit adapted to process active records in the processor and configured to store data belonging to active records in the primary data storage unit and a secondary data storage system accessible to the primary processing device wherein data belonging to an active record is stored in the primary data storage unit and the record is externalised by transferring at least a piece of data belonging to the record to the secondary data storage system for storage wherein the step of externalising a record includes the receiving of at least one call initiated by an application program using data belonging to the record by an application programming interface arranged to send the piece of data to the secondary data storage system.

Thus because the pieces of data transferred belongs to a record the method takes better account of the fact that the processor of the primary processing device will need to access data belonging to the record than an approach based on the memory addresses available to a process run by the processor. Because the externalisation is initiated by an application program actually using the data belonging to the record it is easier to predict which record thus which pieces of data are likely to be needed in the primary processing device in the near future.

An example embodiment of the invention has the added advantage that no page tables are necessary for relating virtual memory addresses to physical addresses.

An embodiment includes receiving at least one externalisation message including information identifying a data section including data corresponding to at least an associated part of only one piece of data and transferring at least the identified data section in response to the externalisation message.

Thus each data section transferred to the secondary storage system for storage includes data corresponding to an associated part of only one piece of data. In cases where more than one record is to be externalised this precludes storing data sections with a sub section corresponding to data belonging to one record and a sub section corresponding to data belonging to a further record. In other words data corresponding to data belonging to one record is always stored in a separate data section from data corresponding to data belonging to another record. The embodiment has the advantage of eliminating unnecessary data transfer to and particularly from the secondary storage system.

An embodiment includes dividing the piece of data into a plurality of parts receiving a plurality of externalisation messages each identifying a data section including data corresponding to an associated one of the plurality of parts and transferring at least the identified data section in response to each externalisation message.

This embodiment has the advantage of being adaptable to the size of main memory available to the primary processing device and or characteristics of an interface to the secondary storage system such as the width of a data pipeline.

In an embodiment the data corresponding to an associated part is generated by at least partly encrypting the associated part of the piece of data.

Because the data sections transferred to the secondary storage system for storage are at least partly encrypted only the primary data storage unit and processor of the primary data processing device need be ensconced in a secure environment to maintain absolute overall security of data. Because the primary processing device need have only a primary storage unit with a limited storage capacity thanks to the possibility of externally storing data it is cheaper and easier to provide such a secure environment.

An embodiment includes dividing the piece of data into a sequence of consecutive parts receiving a series of externalisation messages each including information identifying the record and information identifying a data section by means of the position of the corresponding part in the sequence and including data corresponding to the information identifying a data section in the data section before transferring it to the secondary storage system.

This embodiment has the advantage that information describing the order in which the data sections are to be read out again is stored in the secondary storage system. Thus in a primary processing device with very limited capacity particularly limited volatile main memory the parts of the piece of data to be loaded back into the primary storage unit can be serially processed without the need to buffer the constituent parts or the data sections to which the parts are associated.

In one example embodiment the method includes calculating an authentication value for each part of the piece of data and including data reflecting the authentication value in the data section that includes data corresponding to that part.

Thus it is possible to determine at a later stage if the data in the data section particularly the data corresponding to a part of the piece of data associated with the data section has been tampered with.

According to another aspect of the invention there is provided a method of external data storage in a system including a primary processing device having a processor and a primary data storage unit adapted to run application programs for processing active records in the processor and configured to store data belonging to active records in the primary data storage unit and a secondary data storage system accessible to the primary processing device which method includes loading data belonging to an active record into the primary data storage unit and externalising the record by transferring at least a piece of data belonging to the record to the secondary data storage system for storage wherein the step of externalising a record includes the making of a call by an application program using data belonging to the record to an interface arranged to transfer the piece of data to the secondary data storage system.

When the method is applied control over the external storage of data belonging to records is transferred to the application program actually using the data. The call may be to an application programming interface adapted to carry out the method of enabling external data storage according to an example embodiment of the invention. Alternatively the method may be carried out directly by an application program running in the primary processing device. It thus confers the advantage of enabling the application program to determine whether or not a record is externalised. Thus the application program can prevent a piece of data belonging to a record it will be processing in the near future from being transferred to the secondary storage device. The execution of the application program is thus speeded up since the latency associated with externalising the record and subsequently retrieving the piece of data from the secondary storage system when it is to be modified again is avoided.

In one example embodiment the method includes transferring a data section including data corresponding to at least an associated part of only one piece of data belonging to a record.

Thus each data section transferred to the secondary storage system for storage includes data corresponding to an associated part of only one piece of data. In cases where more than one record is to be externalised this precludes storing data sections with a sub section corresponding to data belonging to one record and a sub section corresponding to data belonging to a further record. In other words data corresponding to data belonging to one record is always stored in a separate data section from data corresponding to data belonging to another record. The embodiment has the advantage of eliminating unnecessary data transfer to and particularly from the secondary storage system.

In an embodiment the piece of data is divided into a plurality of parts and wherein a plurality of data sections each including data corresponding to an associated one of the plurality of parts is transferred to the secondary data storage system for storage.

This embodiment has the advantage of enabling the externalisation to be adapted to the size of main memory available to the primary processing device and or characteristics of the interface to the secondary storage system such as the width of a data pipeline.

In an embodiment the data corresponding to an associated part is generated by at least partly encrypting the associated part of the piece of data.

Because the data sections transferred to the secondary storage system for storage are at least partly encrypted only the primary data storage unit and processor of the primary data processing device need be ensconced in a secure environment to maintain absolute overall security of data. Because the primary processing device need have only a primary storage unit with a limited storage capacity thanks to the possibility of externally storing data it is cheaper and easier to provide such a secure environment.

In one example embodiment the method includes calculating an authentication value for each part of the piece of data and including data reflecting the authentication value in the data section that includes data corresponding to that part.

A variant of this embodiment includes calculating the authentication value for at least one part of the piece of data using information derived from a further part as input.

Thus where the piece of data is divided into parts and externally stored in separate data sections the integrity of the entire set of data sections can be verified.

In one example embodiment the method includes storing a reference data object in a data storage unit of the primary device for each externalised record including a unique identifier wherein data reflecting the unique identifier is included in each data section that includes data corresponding to a part of the piece of data belonging to the record.

Thus retrieval of the various data sections containing data corresponding to the piece of data stored externally is facilitated.

In one example embodiment the method of an example embodiment of the invention includes storing information reflecting a version count for the externalised record and incrementing the version count prior to externalising the record.

It is thus possible to keep track of the number of times the record has been externalised. This enables synchronization of the data belonging to the record that is stored in the primary storage unit and the piece of data that is stored externally.

According to another aspect of an example embodiment of the invention there is provided a method of internalising a record in a system including a primary processing device having a processor and a primary data storage unit adapted to process active records in the processor and configured to store data belonging to active records in the primary data storage unit and a secondary data storage system accessible to the primary processing device and arranged to store a piece of data transferred by means of a method of external data storage according to an example embodiment of the invention which method includes loading data belonging to the record into the primary data storage unit wherein the system includes an interface for retrieving the piece of data belonging to the record from the secondary data storage system and the method further comprises the steps of an application program configured to use data belonging to the record determining that the record is to be internalised and making at least one call to the interface.

Thus the application program configured to use the data belonging to a record determines that a piece of data belonging to a record is to be transferred to the primary processing device from the secondary storage system. The primary processing device may be the same as the primary processing device involved in transferring the piece of data to the secondary storage system or it may be a different one. Thus the method has the advantage of enabling data belonging to a record to be shared.

An embodiment of the invention includes receiving at least one data section including data corresponding to at least an associated part of one piece of data from the secondary storage system.

Thus the data section includes data corresponding to an associated part of a piece of data belonging to one record. It is not necessary to separate the data belonging to one record from that belonging to another record nor is data belonging to another record unnecessarily transferred with data belonging to a record which the application program has determined to be needed.

In one example embodiment the method includes retrieving an identifier unique to the record from a reference object stored in a data storage unit of the primary processing device wherein the data sections are stored in the secondary data storage system with information reflecting the unique identifier and are received in response to an internalisation message including information reflection the unique identifier.

Thus the primary processing device remains aware of the existence of the record and has a mechanism for accessing the data belonging to it even when that data is not stored in the primary data storage unit.

An embodiment of the invention wherein the piece of data comprises a plurality of parts includes receiving a number of data sections each including data corresponding to an associated one of the plurality of parts.

Thus this embodiment of the method can be executed in a primary processing device with limited processing capacity e.g. limited main memory as the part of the piece of data belonging to the record that is being internalised can be processed and loaded into the primary data storage unit sequentially. This embodiment is also adapted to take account of any limitations to the capacity of an interface to the secondary data storage system.

An embodiment includes receiving at least one data section including an authentication value retrieving a secret piece of information stored in the primary processing device calculating a verification authentication value for each data section from at least part of the data corresponding to at least an associated part of the piece of data using the secret piece of information and comparing the verification authentication value and the authentication value for each data section.

Thus it can be determined whether the data included in the received data sections is authentic. Because the verification authentication value is calculated there is no need to store it in the primary processing device in particular in the primary data storage unit.

In one example embodiment the method includes receiving a data section including information reflecting a version count for the externalised record and comparing the version count with a reference version count.

This enables the primary processing device to verify that the data retrieved is the data belongs to a version of the record that is expected. It is particularly useful if other primary processing devices may have had access to the externally stored piece of data.

According to another aspect of an example embodiment of the invention there is provided a method of enabling the internalisation of a record in a system including a primary processing device having a processor and a primary data storage unit adapted to process active records in the processor and configured to store data belonging to an active record in the primary data storage unit and a secondary data storage system accessible to the primary processing device and arranged to store a piece of data transferred by means of a method of external data storage according to an example embodiment of the invention as defined above wherein data belonging to an active record is loaded into the primary data storage unit and the record is internalised by retrieving at least a piece of data belonging to the record from the secondary data storage system wherein the step of internalising a record includes the receiving of at least one call initiated by an application program using data belonging to the record by an application programming interface arranged to retrieve the piece of data from the secondary data storage system.

This method is executed by the application programming interface to enable an embodiment of the method of internalising a record to be carried out. In particular it moves some of the functionality needed to carry out the method to an application programming interface accessible to multiple application programs. Thus this functionality need not be included in the application program. The application program still controls which record is internalised and when thus avoiding much of the latency associated with unnecessarily often repeated internalisation and externalisation. This embodiment is particularly suited for use in a primary processing device with multitasking capabilities.

An example embodiment of the invention also provides a method of external data storage method of internalising data method of processing records in a multimedia system and system and computer program that allow the primary processing device to verify the integrity of the data belonging to a record.

This is achieved by providing a method of external data storage in a system including a primary processing device having a processor and a primary data storage unit adapted to process active records in the processor and configured to store data belonging to active records in the primary data storage unit and a secondary data storage system accessible to the primary processing device which method includes loading data belonging to an active record into the primary data storage unit and externalising the record by transferring at least a piece of data belonging to the record to the secondary data storage system for storage wherein the method includes storing information reflecting a version count for the externalised record and incrementing the version count prior to externalising the record.

Thus if after externalisation any part of the data belonging to the record for example the externalised piece of data or any data remaining in the primary data storage unit is modified a comparison can be made with the version count stored to determine whether the parts are still synchronised.

An example embodiment of the invention has the additional advantage that because a count is maintained reflecting the number of times the record has been externalised a measure is obtained of the use of the record by the primary device allowing a limit to be set to this use. A further effect is that it is possible to keep track of which record is externalised most often so that this record can be maintained in the primary memory unit and another record externalised instead.

In one example embodiment the method includes storing a reference data object in a data storage unit of the primary processing device for each externalised record including a unique identifier and a copy of the information reflecting the version count.

Thus the primary processing device has access to a copy of the information which cannot be changed by any other processing device to which the secondary storage system is also accessible.

An embodiment further includes transferring at least one data section including data corresponding to at least an associated part of the piece of data and data corresponding to the information reflecting the version count to the secondary data storage system.

Thus a version count valid for the part of the piece of data in a section is stored in the secondary storage system with each section. This embodiment has the advantage that it allows the piece of data to be split into parts that are stored externally in such a way that it can be verified that these parts belong to the same version of the total collection of data belonging to the record. In particular the data sections can be stored on different storage units within the secondary data storage system and assembled again into one valid collection of data belonging to the record.

An embodiment includes determining whether any data belonging to an active record has been changed after loading into the primary data storage unit and incrementing the version count only after determining that some data belonging to the active record has been changed.

This limits the range within which the version count value can lie. It is particularly advantageous when a copy of the information reflecting the version count is stored in the primary storage unit since less memory need be reserved for storing this copy.

According to another aspect of the invention there is provided a method of internalising a record in a system including a primary processing device having a processor and a primary data storage unit adapted to process active records in the processor and configured to store data belonging to an active record in the primary data storage unit and a secondary data storage system accessible to the primary processing device and arranged to store a piece of data transferred by means of a method according to any one of the last recited methods of external data storage according to an example embodiment of the invention wherein at least one data section including data corresponding to at least an associated part of the piece of data is retrieved from the secondary data storage system wherein a data section including information reflecting a version count for the externalised record is received and the version count is compared with a reference version count.

The method has the advantage of enabling a check of the data retrieved from the secondary storage system. It is particularly useful in environments which allow records to be externalised and internalised by different primary processing devices. If the record has been externalised by a first primary processing device and subsequently internalised and externalised by a second primary processing device the first primary processing device can determine with minimal processing effort that the version of the record it last processed is no longer available for internalisation. Thus it knows that it will need to be provided with information on the latest version now in the secondary storage system.

One embodiment of the method includes receiving the reference version count from a trusted third party system.

This enables a swap in primary processing devices. A first primary processing device may externalise the record. The second primary processing device then executes this embodiment of the method in order to be able to internalise the record and continue processing it. It is especially useful in environments where security is of concern. The trusted third party controls access to externalised records. Namely if the second primary processing device externalises the record again the version count is incremented again. The first primary processing device can then only internalise the record if it receives an updated version count from the trusted third party system.

An advantage is obtained through the application of any one of the above mentioned methods in a method of processing records in a multimedia system adapted to provide access to at least one consecutive piece of digital content forming an event and including a conditional access sub system arranged to control access to the event in accordance with information contained in at least one record wherein the multimedia system includes a secure primary processing device having a processor and a primary data storage unit adapted to run at least one application program for processing active records in the processor when an event is being accessed and configured to store data belonging to an active record in the primary data storage unit and a secondary data storage system accessible to the primary processing device.

In the context of the present disclosure the term secure means that the primary processing device is equipped with means to resist invasive and non invasive attacks on the data stored and or processed by it which means may be hardware or software implemented or be implemented by a combination of both. Because the cost and effort involved in making the primary processing device tamper resistant increases with its capacity i.e. storage and or processing capacity it may be useful to limit the size in particular the size of the primary data storage unit. An example embodiment of the invention allows this to be done whilst retaining the capacity to access a large number of different records as part or all of the data belonging to records can be externally stored in the secondary storage system in an advantageous manner.

According to another aspect of the invention there is provided a primary processing device having a processor and a primary data storage unit adapted to process active records in the processor configured to store data belonging to an active record in the primary data storage unit and adapted to execute any one of the above discussed methods according to the invention.

According to yet another aspect of the invention there are provided computer program means which when run by a primary processing device having a processor and a primary data storage unit enable the primary processing device to execute any one of the above discussed methods according to the invention.

To explain the general principles of the method of external data storage according to an example embodiment of the invention shows a simplified example of a system in which it may be applied. A more specific example will be illustrated further below with reference to .

In a first processing device comprises a central processing unit CPU main memory and a primary mass storage device . The first processing device may for example be implemented as a server e.g. a database server a personal computer personal digital assistant embedded processing device mobile phone etc. In short any data processing device with a processor data storage unit and means for accessing a secondary data storage unit is suitable for implementing an example embodiment of the invention. Depending on the implementation main memory may be integrated on a single chip with the CPU .

In the example to be described herein the method is used to make the most of the limited capacity of the primary mass storage device by temporarily transferring data from the primary mass storage device to a secondary storage system. However the method could equally well be applied to make better use of the capacity of the main memory or of a cache memory not shown in the CPU . Thus the term primary data storage unit as used herein can refer to both volatile and non volatile data storage means including optical magnetic and solid state storage devices.

In the first processing device is connected to a secondary data storage system formed by a second processing device . The connection is by means of a data link . The second processing device also comprises a central processing unit CPU with main memory and first and second secondary mass storage devices and respectively. In basic embodiments of the invention it is not a necessary requirement that the second processing device comprise the CPU although some sort of microprocessor to direct data to the secondary mass storage devices will be present if the secondary storage system is implemented as an external device such as the second processing device . In its most simple embodiment an embodiment of the invention could simply make the most of the limited capacity of primary mass storage device by temporarily transferring data to a second mass storage device inside the first processing device .

In one embodiment however use is made of an external device because the method is implemented in a system in which the primary processing device is more heavily secured against hacking attacks than the secondary processing device. In such systems the method according to an example embodiment of the invention is particularly useful in that it provides a mechanism by means of which the capacity and or size of the primary processing device can be kept small thus making it easier and cheaper to protect.

The data link can be a network link for example an Ethernet IEEE 1394 FireWire link or it can be a data bus link for example using a USB SCSI RS 232 Bluetooth or similar type link. Depending on the type of link used and the processing capacity needed to process messages belonging to the protocol a simpler controller may be substituted for the CPU of the second processing device.

The first processing device is adapted to run one or more application programs which are executed by CPU . At least one application program is configured to process records. For the present purpose a record is understood to mean a collection of data items arranged for processing by the application program. The arrangement of the data is prescribed by the application program that processes it. An example embodiment of the invention encompasses both fixed length and variable length records. According to an example embodiment of the invention records that are to be processed by the application program executed on the CPU are made active. Active records i.e. all data belonging to records made active by application programs being run on the firs processing device at any one instant are stored in the primary mass storage device at least for so long as the records are active. This does not preclude that possible no longer current copies of part or all of the data are stored elsewhere as well for example on one of the secondary mass storage devices .

The application programs according to an example embodiment of the invention are configured to decide autonomously whether to store part or all of the data externally in other words on a different storage device than primary mass storage device . The rules according to which such decisions are made may vary. For example part or all of the data may be backed up. However an example embodiment of the invention may be used to externalise a record in order that a large part of the data belonging to the record may be removed from the primary mass storage device to free up space. This part or data enabling its recovery in other words data corresponding to this part is transferred to one of the secondary mass storage devices for storage and later retrieval by means of processes referred to herein as externalisation and internalisation respectively.

Upon resolving that a record is to be externalised the application program makes a call to an interface arranged to transfer a piece of data belonging to the record to the second processing device . An interface is defined herein as the physical and logical arrangement supporting attachment to the secondary storage system. In one example embodiment a further application program or operating system is installed on the first processing device which supports an application program interface to which the application program processing the record to be externalised may make a call. Thus the developers of application programs for the first processing device need not concern themselves exactly with the mechanism for externalising records. Nevertheless embodiments in which part or all of the logic for externalising the record is comprised in the application program are not excluded from the scope of the present invention. In such embodiments the interface referred to is largely the physical interface that is to say the mechanism to transfer data over the data link to the second processing device .

It is noted that in the example embodiment of the present invention the application program running on the first processing device and processing the record makes the call to the interface to externalise the record. However another application using data belonging to the record provided to it by the application processing the record on the first processing device may also make the call and further terminate processing of the record by the application program running on the first processing device . This other application may even be running on a separate processing device connected to the first processing device including on the second processing device .

To allow subsequent internalisation of the record a primary database is stored in a primary data storage unit of the primary processing device . This may be the primary mass storage device but may be another data storage unit e.g. main memory or some other volatile or non volatile memory unit. It is noted that the primary data storage unit in which the first processing device stores the primary database may also be a peripheral device but an internal device would allow faster access to the primary database. In any case it is preferably comprised in a secure environment shared with the first processing device .

The composition of a primary database table in the primary database is illustrated in . Note that the table is an example of an implementation of the invention. The exact data structure is not important so long as there is at least a reference data object for each record that has been externalised. In this example there is a primary database record corresponding to a row in the primary database table for each externalised record. Each primary database record comprises a field in an index column containing a unique key or index number used to access the primary database record . The value in the index column is unique for each externalised record. In a version number column of the primary database table a version number is stored for each externalised record. The version number may be a simple counter or it may any other type of information reflecting a version count for the associated externalised record. For example where a record comprises a number of fields which can each have a finite number of values the information in the version number column may be information uniquely identifying one of the finite number of possible permutations of the values in the fields of the externalised record. Other types of information reflecting a version count are conceivable.

In the present example the second processing device maintains an extension record table in a database stored on each of the secondary mass storage devices . Each of the shown rows corresponds to an extension record . Each extension record is associated with an externalised record. Entries in an index column comprise information reflecting an identifier unique to the associated externalised record. The extension record table further comprises first second and third data chunk columns . Thus each extension record in the example secondary mass storage devices may comprise three data chunks. Each data chunk in an extension record for an externalised record includes data corresponding to at least an associated part of a piece of data belonging to the externalised record. By corresponding it is meant that the associated part of the piece of data can be fully recovered from the data in the externalised record. Thus the data in the data chunk may be an encrypted encoded or compressed version of the associated part of the piece of data belonging to the externalised record. In one example embodiment an authentication string is stored with each data chunk. The extension record table further includes a version number column in which information reflecting a version count for the externalised record is stored. What has been stated above in connection with the entries in the version number column of primary database table also holds true for the entries in the version number column illustrated in . In an alternative implementation each data chunk in one of the first second and third data section columns may comprise or be stored with separate information reflecting a version count valid for only that data chunk.

When a record is created by an application program being run on the first processing device and using an example embodiment of the invention the first processing device goes through steps shown in . In a first step a version counter is initialised. For example when sequential numbers are used the version counter is set to value zero which can be regarded as incrementing from minus one to zero. The application program then makes the record active and proceeds to process it as normal. During processing the data belonging to the record which is modified by the application program is stored in the primary mass storage device . At some point the application program may determine that the record will not be processed any further or that another reason exists for externalising the record. It will thus initiate the externalisation of the record by making a call to an interface. As mentioned this may be an application program interface provided as part of the operating system of the first processing device or by another application program.

It is assumed that at least the CPU main memory and primary mass storage device are part of a secure environment and that the data belonging to the record is to be protected. Thus in a second step the data belonging to the record is encrypted and at least one authentication string is calculated for the data. In a further step a primary record is written to the primary database table in the primary mass storage device . This entails entering information reflecting an identifier unique to the record being externalised in a corresponding entry in the index column . Furthermore the version count is written to an entry in the version number column . Thus a reference data object is stored in the primary mass storage device for the externalised record which reference data object includes a unique identifier and a copy of the information reflecting the version count.

Then the encrypted piece of data belonging to the record is transferred to the second processing device together with an authentication string and information reflecting the version count in step . The second processing device stores the contents of the transferred data section in the extension record table .

According to an example embodiment of the invention an application program using a record that has been externalised may also decide autonomously to internalise the record again. An embodiment of the internalisation process is illustrated in . Thus at some point the application program using or at least configured to use the data belonging to the record determines that the record is to be internalised. The application program makes a call to an interface to the secondary storage system. Software for example an application program interface that is part of the interface to the secondary storage system ensures that a message is sent to the second processing device requesting data sections including data corresponding to data belonging to an externalised record. The message includes at least information reflecting the identifier unique to the externalised record. This information is retrieved from the associated entry in the index column of the primary database table . The interface ensures that at least one data section including data corresponding to at least an associated part of the piece of data stored externally is retrieved in step . The retrieved data section includes information reflecting a version count. This information is obtained from the associated entry in the version number column of the extension record table . In step the first processing device decrypts the encrypted part of the piece of data in the data section retrieved using a secret encryption key. It then calculates a verification authentication string from the decrypted data. The verification authentication string is compared in step with an authentication string included in the retrieved data section. If the two match a version count is derived from the information included in the retrieved data section and compared with a version count derived from an entry in the version number column of the primary database table . If the two match the decrypted piece of data is used to assemble the now internalised record. The internalised record is stored in primary mass storage device for use by the application program.

It will be assumed that the application program being run on the first processing device actually modifies the data belonging to the record step . After modification it may again decide that the record is to be externalised. In that case the version count is updated in this case incremented in step . A piece of data belonging to the record is encrypted and an authentication string is calculated for it in step . Then the primary record in primary database table is re written. Information reflecting the incremented version count is written to the corresponding entry in the version number column . A data section including the encrypted piece of data the authentication string and a copy of the information reflecting the updated version count is transferred to the second processing device where the corresponding extension record in the extension record table is updated or re written if it has been erased.

It is noted that an embodiment of the invention takes account of characteristics of the CPU and or main memory and or data link . This is illustrated in . Whilst a part of a piece of data belonging to a record is processed for inclusion in a data section to be transferred or retrieved from a retrieved data section it is held in main memory . The capacity of the CPU or main memory may thus set a bound to the size of the part above which the in and externalisation would unacceptably slow down the first processing device . Another limit to the size of the part of a piece of data is the size of the resulting data section including the encrypted part the authentication string and version count and index information. Taking into account the most limiting of the above mentioned constraints the first processing device divides the piece of data belonging to a record to be externalised into a number of parts in a first step . In this case there are first second and third parts . The division into parts may be carried out by the application program processing the record or by executing a module belonging to an application program interface called by the application program. In a subsequent step each of the parts is separately encrypted using a secret encryption key stored inside the secure environment of which the primary mass storage device and the CPU and main memory are also part. A first data chunk corresponds to a first part of the piece of data belonging to the record being externalised a second data chunk corresponds to a second part and a third data chunk corresponds to a third part .

In a next step a first authentication string is calculated for the first part of the piece of data using the first data chunk as input as well as a secret authentication key . The secret authentication key is also stored inside the secure environment of which the primary mass storage device and the CPU and main memory are also part. In a following step a first data section is created. The first data section includes the first data chunk the first authentication string information corresponding to the index value stored in the entry in the index column of the primary database table for the externalised record and information reflecting the fact that the first data section is associated with the first part in the sequence of parts making up the piece of data . This first data section is then transferred to the second processing device for storage.

Concurrently a second authentication string is calculated in step . The second authentication string is calculated from the second data chunk and the first authentication string . This may for example be done by first concatenating the second data chunk with the first authentication string and then subjecting the result to the same authentication algorithm using the authentication key as was used in step .

In step a second data section is created. Step corresponds to step . Thus the second data section comprises the second data chunk the second authentication string and information reflecting an identifier unique to the externalised record as well as information reflecting the fact that the second data section is associated with the second part in the sequence of parts formed from the piece of data .

In step a third authentication string is calculated using the second authentication string as input as well as the authentication key and the third data chunk . Step corresponds substantially to step .

In step a third data section is created and transferred to the second processing device . Similar to the first and second data sections the third data section includes the third data chunk the third authentication string and information reflecting an identifier unique to the externalised record as well as information reflecting the fact that the third data section is associated with the third part in the sequence of parts formed from the piece of data .

It is noted that the method of an example embodiment of the invention may be simultaneously applied to pieces of data belonging to other records than the one to which the piece of data belongs. The data sections associated with the parts of the piece of data belonging to one record do not however contain data chunks associated with parts of a piece of data belonging to another record. This ensures that the first second and third data sections remain of a size appropriate to the data link . It also ensures efficient processing by the second processing device . In particular when the record is internalised again exact copies of the first second and third data sections are retrieved. To prevent needless transfer of data it is advantageous to separate data sections created for one record from those created for another.

The personal video recorder comprises a tuner for tuning to a specific carrier frequency. It further comprises a demodulator for retrieving a transport stream including one or more elementary streams carrying digital content. These could for instance be MPEG 2 elementary streams or streams of MPEG 4 access units. The elementary streams are processed by a multimedia processor which has access to main memory for this purpose. The multimedia processor is connected to a system bus for example an I2C bus. The multimedia processor is further connected to a video encoder and an audio Digital to Analogue Converter DAC . Thus the personal video recorder is capable of making analogue video and audio signals available to a replay device such as a television through appropriate outputs. Of course in an alternative embodiment the personal video recorder could also comprise an encoder for making an output available in the shape of an unprotected MPEG 2 encoded stream carried for example over an Ethernet or IEEE 1394 home network to one or more home network end devices.

An interface controller is also connected to the system bus . The interface controller relays commands from a user to the multimedia processor controlling operation of the personal video recorder and may optionally provide feedback information to the user. For example the interface controller could control an infra red port for accepting commands from a remote control unit not shown or it could control a front panel interface of the personal video recorder .

The personal video recorder further comprises a disk controller connected to the system bus and to an optical disk drive and hard disk drive . The optical disk drive and hard disk drive are to be considered merely as representative of mass storage units comprised in a secondary data storage system for use in the method according to an example embodiment of the invention.

The conditional access sub system comprises a conditional access module CAM including a processor for directing communications to and from the conditional access module . The CAM additionally comprises a cryptographic co processor a dedicated digital signal processor for carrying out encryption and or decryption operations. Examples of such CAMs are known from Digital Video Broadcast DVB implementations in which the CAM communicates with an integrated receiver decoder of which the personal video recorder is a particular example through a common interface CI . In these known implementations the conditional access module comes in the shape of a PCMCIA card.

The conditional access sub system further comprises a smart card carrying a smart card Integrated Circuit IC . The smart card conforms to the ISO 7816 2 standard. The smart card interfaces to the CAM and through it to the personal video recorder by means of a physical interconnection system comprising contact pads not shown on the smart card and contact pins not shown in the CAM and one or more software modules implementing a communication protocol.

The mask ROM is non volatile memory. The operating system of the smart card is stored in the mask ROM . Examples of suitable operating systems are MULTOS Javacard and Windows card. Additionally one or more secret keys may be stored in the mask ROM . The RAM forms the memory working space. RAM is volatile memory and all data is lost when power to the smart card IC is removed. The EEPROM represents non volatile storage memory for storing dynamic application data.

Of the three types of memory comprised in the smart card IC the RAM is generally the most expensive followed by the EEPROM and the mask ROM in that order. It is consequently advantageous to keep the amount of memory especially of the more expensive types limited. By internalising and externalising records comprised in the dynamic application data stored in a primary data storage unit of the smart card in this case the EEPROM the smart card can make do with a limited capacity EEPROM . By dividing pieces of data belonging to records that are internalised and externalised into parts as part of the method according to an example embodiment of the invention the smart card IC can manage with a RAM of limited size and an I O port of limited capacity.

A broadcast system in which the multimedia system illustrated in is typically used comprises a subscriber management system SMS where the details of all subscribers are kept. Information such as the channels and events that the subscriber is enabled for his payment status whether his smart card is active or not and other information is kept on the SMS. An event is defined as a consecutive piece of digital content e.g. a piece of a DVB MPEG 2 service that is both subject to conditional access and has associated event information. An event is scrambled with one or more control words as keys to the scrambling algorithm. From the SMS invoices for payment of subscriptions are sent out. The SMS controls the smart cards distributed to subscribers by sending commands to them via a conditional access CA system. The CA system transforms these commands into the correct format for the smart card and inserts the commands into a transport stream. Another function of the CA system is to encrypt control words with which an event is scrambled when it is broadcast to the subscribers. These encrypted control words are transmitted together with the content that forms the event as entitlement control messages ECMs .

The content on offer and each event happening in the broadcast is scheduled by a scheduling system. The content is encoded compressed by content servers. The formatted data from the content servers and CA system is multiplexed into a transport stream which is then modulated for the appropriate broadcast network e.g. satellite cable terrestrial internet etc. .

The personal video recorder uses the tuner and demodulator to recover the transport stream. The transport stream which is scrambled is routed to the conditional access module by the multimedia processor . The conditional access sub system de scrambles the transport stream using a key hierarchy. Stored in the smart card for example in the mask ROM is a key unique to the smart card known as the Xkey. In some alternative systems there can be a hierarchy of X keys of which the higher level ones are called group keys and are assigned to groups of subscribers. For simplicity this description shall assume one level only.

The multimedia system comprises one or more software modules of which at least some are installed on the smart card others may be installed on the personal video recorder or CAM which implement an Event Management System EMS . The event management system comprises an application run on the smart card which processes records containing information used to control access to events. These records include session records and event records. Whilst event records and session records are being processed they are active and stored in the EEPROM . Both event records and session records can be externalised by transferring at least a piece of data belonging to the record to a storage device in a secondary storage system for example to the hard disk drive in the personal video recorder .

In an exemplary embodiment event records include the following fields an active flag a changed flag a version number a record identification a playback count and a count of the number of copies. The active flag is set each time the event record is active. An event record is active at least when the event is being recorded copied or played back. When an event record is active it is processed by the CPU of the smart card and data belonging to the record is stored in the EEPROM . If in the course of the processing of the event record a change is made to any of the data belonging to the event record the changed flag is set. The virtue of having a changed flag is that unnecessary externalisations can be prevented. In one embodiment when a command is received to externalise the event record a check is first made of the changed flag. If it is not set externalisation is not necessary since the copy stored in the personal video recorder is still accurate. The version number is incremented prior to each externalisation of the event record. The record identification allows the event record to be identified in calls made to and by the application program interface on the smart card . The playback count and the count of the number of copies are both types of information reflecting a playback count which is incremented each time the event record is made active in order to provide access to the associated event. This will occur whenever access is required to the event for example to make a copy of the event to de scramble and decode it to record it on an optical disk inserted into the optical disk drive or on the hard disk drive etc.

Session records include entitlement information and program keys P Keys . P keys are needed to decrypt the encrypted control words contained in the ECMs that are received and may be recorded as part of the scrambled transport stream by the personal video recorder . The P keys and entitlement information for an event are obtained by paying for the event whereupon the broadcaster s CA system transmits one or more Entitlement Management Messages EMMs comprising the entitlement information and the P keys encrypted under the X key of the smart card . The smart card retrieves the P keys and entitlement information from the EMMs and adds them to a session record. There is a session record for each recording session in other words for each consecutive period of time during which content data is recorded on the hard disk drive or on a disk in optical disk drive . Each session record is linked to one or more event records and thus associated with the events with which these event records are associated. Access to one of the events is provided in the course of a viewing session for which time the session record is active e.g. the data belonging to the session record is present in the EEPROM . The event record is also active during playback of the event.

To enable externalisation and later internalisation of event and session records the smart card comprises an application program interface arranged to receive and process messages from an application implementing the EMS and thus using the event and session records. Assuming that an event has been recorded during a session and that the P keys needed to access the event have been stored in an associated session record the application controlling the recording and thus using the event and session record makes an externalisation call to the smart card API implementing the externalisation of records when the recording has finished and no immediate playback is required. The following description will focus on the externalisation of the event record in the understanding that externalisation of the session record is carried out in a similar way.

In one embodiment the API divides a piece of data belonging to the record which may comprise all of the data belonging to the record or a sub set thereof into a sequence of consecutive parts. Each part is sized in accordance with the maximum processing capacity of the interface between the EEPROM and the hard disk drive of the personal video recorder . The maximum processing capacity may be determined by the size of the RAM central processing unit I O port processor the PCMCIA interface between the CAM and the personal video recorder or the size of the system bus depending on the particular implementation.

Subsequently the API receives an externalisation message for each part each externalisation message represents a request to transfer a data section including data corresponding to at least an associated part of the piece of data to be transferred. The API generates the data sections using the method outlined in connection with . That is to say each part of the piece of data belonging to the event record is encrypted and an authentication value is calculated for it. For each part of the piece of data a separate data section is created comprising the calculated authentication value the encrypted part of the piece of data and the position of the part in the sequence of parts created by dividing up the piece of data into consecutive parts. In addition the section comprises information reflecting the version number.

The API receives a separate externalisation message for each data section. The data sections created using the method illustrated in are returned one by one each in response to an associated externalisation message. These externalisation messages comprise information corresponding to the event record identification and information identifying the data section by means of the position of the associated part of the piece of data in the sequence of parts. Optionally the API may return information representing how many parts are in the sequence in response to the first received call.

After the last data section has been transferred the application sends a confirmation request. If correct externalisation is confirmed the changed flag in the copy of the data belonging to the record kept in the EEPROM is reset. Only then may the record be made inactive and may the piece of data belonging to the record that was transferred for external storage be deleted from the EEPROM . However a reference data object is kept in the EEPROM for each externalised record. The reference data object includes the record identification and the version number.

When the event record is internalised again for example to enable playback of the associated event the smart card API receives a call from an application using data belonging to the event record. The API then retrieves the data sections stored on the hard disk drive . Again the data sections are retrieved and processed separately. Where each data section includes data corresponding to a part of a piece of data belonging to the record with a well defined position in a sequence the data sections are retrieved in order. Thus the data section including data corresponding to the first part in the sequence is retrieved first. This is necessary in order to be able to calculate a reference authentication value for each section without having to buffer all the data sections first. Only the reference authentication value for the first section can be calculated without using the reference authentication values calculated for one or more of the other data sections. Note that the use of calculated reference authentication values obviates the need for storing reference authentication values. Only an authentication key need be stored. The authentication key can be stored in the mask ROM which is less expensive than the EEPROM . Alternatively it can be stored in the EEPROM to allow a change of authentication key during the lifetime of the smart card .

The data section is decrypted using the encryption key stored in the smart card it is assumed that a symmetric algorithm is used . Then the version number included with the data section is compared with the calculated reference authentication value and the version number of the event record is compared with the version number stored in the reference data object stored in the EEPROM . If both are correct the process is repeated for each of the subsequent data sections and the piece of data belonging to the event record is re assembled in the EEPROM . After that the event record can be activated and data retrieved from it to allow the conditional access sub system to control the playback copying or other use of an event stored on the hard disk drive .

Because data belonging to the event record is stored externally in encrypted form it is difficult for hackers to for example modify the playback count downwards to enable more viewings than are allowed according to the entitlement information in a session record. Even if the hacker has deduced the encryption key then the authentication key would be needed to calculate a new authentication value for a data section containing information corresponding to the downwardly modified playback count. Because chaining is used the authentication values for all the other data sections associated with the event record would also be needed. It is not possible to simply make a copy of an earlier data section because its version number does not match the version number stored in the reference data object in the EEPROM of the smart card so such earlier data sections will not lead to a successful internalisation of the event record.

The inclusion of a version number in the reference data object remaining in the EEPROM of the smart card and in the data sections transferred to the hard disk drive enables a process for replacing a first smart card by a second smart card to be implemented. A second smart card is provided with data corresponding to the data in the reference data object in the first smart card for example from a trusted third party such as the CA system broadcasting data to the personal video recorder . The second smart card can then internalise the record using the data provided. When it subsequently externalises the record again the version number is incremented. Thus the first smart card will no longer internalise the record because it is storing a reference data object with the previous version number for the record. Of course the second smart card should be provided with the encryption and authentication key as well as the reference data object.

The invention is not limited to the embodiments described above but may be varied upon within the scope of the attached claims. For instance the system comprising the personal video recorder and conditional access module with inserted smart card is representative of similar multimedia systems which are similarly well suited to application of an example embodiment of the invention. This includes systems including a set top box instead of the personal video recorder a personal computer with associated peripheral hardware to receive digital content protected by a method of conditional access or a personal video recorder arranged to receive an analogue signal.

