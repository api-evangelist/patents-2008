---

title: Synchronizing changes made on self-replicated machines to the corresponding parent machines
abstract: A self-replicating machine includes a virtualization tool, a provisioning tool, and a configuration tool, stored in a distributable self-contained repository of the machine. The machine is able to automatically rebuild itself solely from the tools stored in the distributable self-contained repository. The virtualization tool is configured to build one or more virtual machines on the machine. Each virtual machine has a corresponding operating system and environment. The provisioning tool is configured to provision the one or more virtual machines. The configuration tool is to configure the one or more provisioned virtual machines. A custom configuration management tool further customize and configure the physical machine for specific users.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08561062&OS=08561062&RS=08561062
owner: Red Hat, Inc.
number: 08561062
owner_city: Raleigh
owner_country: US
publication_date: 20080530
---
The present application is related to co pending patent application Ser. No. 12 156 279 filed May 30 2008 entitled Combining system Blueprints Functional Layer and Software Bits in parallel development of machines and co pending patent application Ser. No. 12 156 280 filed May 30 2008 entitled Product independent orchestration tool .

Embodiments of the present invention relate to machines and more specifically to machines capable of replicating themselves.

An efficient IT architecture strives to build decoupled reproducible highly available systems that streamline business operations. Incremental improvement is one strategy used to deliver functionality to an organization in a timely manner. The caveat to this approach is that no one seems to be able to effectively accomplish the iterations outside a small sliver of the overall infrastructure. This is due to lack of reproducibility and testability of an entire architecture. If the systems cannot be reproduced in any environment they cannot be effectively iterated upon. Once modified if those system changes cannot be efficiently tested for regression the cost of iterative changes spirals out of control. As such a distributable automated provisioning and configuration framework is necessary to reproduce systems in any environment.

Furthermore agile development is a concept that focuses on an iterative refinement and delivery. All too often agile development also drives quick development changes into production that are not maintainable over the entire lifecycle. This causes an exponential number of unmaintainable systems to be introduced that eventually cripple the infrastructure s ability to scale. Among other factors that cause a lack of focus on the entire lifecycle is the inability to reproduce and test entire infrastructures. The output of this oversight leads to scenarios in which migrating applications between segregated and controlled environments yield unexpected test failures invalidation of quality assurance efforts data corruption etc.

Therefore a need exists for a system that can replicate and built itself automatically in any environment. The side effect of reproducing any system in an infrastructure is that systems can be recovered using the same framework this not only drastically improves tactical resilience but also longer term data continuity and disaster recovery strategies.

Described herein is a method and apparatus for self replicating a machine. In one embodiment a self replicating machine includes a virtualization tool a provisioning tool and a configuration tool stored in a distributable self contained repository of the machine. The machine is able to automatically rebuild itself solely from the tools stored in the distributable self contained repository. The virtualization tool is configured to build one or more virtual machines on the machine. Each virtual machine has a corresponding operating system and environment. The provisioning tool is configured to provision the one or more virtual machines. The configuration tool is to configure the one or more provisioned virtual machines. A custom configuration management tool further customize and configure the physical machine for specific users.

In accordance with another embodiment machine may include other types of machines such as a host machine a web proxy machine an LDAP machine or a development machine. Those of ordinary skills in the art will recognize that other types of machines exist.

A host machine is used to host virtual guests. It provides a graphical user desktop automated NFS home directories a Kerberos login Xen virtualization.

In another embodiment architecture of allows for merging or synchronizing any changes made from one machine to the parent machines. For example any modifications to machine C may be synced back to machine B and machine A and to the other machines E machine F and machine G .

Virtualization tier allows for flexibility and scalability of software solutions at all tiers. illustrates one embodiment of a virtualization tier including Logical Volume Manager LVM used to support virtualized guest operating systems and Xen virtualization used to assist in the management and deployment of multiple environments. Those of ordinary skills in the art will recognize that LVM and Xen are described here solely for illustration. Other virtualization modules may be employed.

Provisioning tier allows for loading the appropriate software operating system device drivers middleware and applications and customizing and configuring the system and the software to make it ready for operation. illustrates one embodiment of a provisioning tier . Cobber and Koan are tools that can be used to provision a machine. Cobbler is a provisioning and update server that supports deployments via network booting virtualization and reinstalls of existing systems. A significant advantage of Cobbler is that it integrates multiple technologies and reduces the need for the user to understand the details of each. The update features of Cobbler integrate yum minoring and kickstart.

Koan which is an acronym for Kickstart over a Network is an emerging technology that configures machines from remote Cobbler servers. Koan also enables the use of virtualization and re installs from a Cobbler server. When launched it requests install information from the server and creates a virtual guest or replaces the machine it is running on. Cobbler and Koan are described in more detail with respect to . Both these tools can be used as the foundation for deployment of systems complying with a new architecture. A complete development server can be quickly built and deployed with no intervention. The provisioning solution significantly reduces an administrator s time to deliver a development solution and to deploy systems in the production environment.

With the introduction of virtualization entire environments can be rebuilt easily. However there is a fair amount of complexity involved in doing so. A bootstrapping tool automates the process of wiring the machine up to Puppet a configuration tool described below. There are essentially two ways of using everest bootstrap. The first method is to allow the bootstrapping process to manage the provisioning and configuration of the machine. The second method is to allow only the configuration of an already provisioned machine. The second method allows the same configuration process to occur even if the provisioned machines are provided and the user doesn t have control of the underlying operating system.

Another function of the bootstrapping tool is to facilitate wiring up network connectivity. In one embodiment the bootstrapping tool can coordinate registration with Dynamic DNS systems to allow the machines to be pre configured with network connectivity to each other. The bootstrapping tool also guides the user through the process of setting parameters to be used by Puppet for configuration.

The required RPMs should already be installed on any machine already bootstrapped in the Everest environment. This is useful for the config only mode. However if Everest machines are to be installed in a virtualized environment the Everest Host machine needs to be set up. That machine type comes with everest bootstrap already installed.

The bootstrapping tool does not need any parameters. Running the program will guide the user through the bootstrap process. The following in an example of an execution of the bootstrap program 

When using the bootstrap wizard the user will be asked a series of questions. The answers are used as parameters for configuring machines. These parameters live server side and are accessible via the bootstrapping daemon. The bootstrapping daemon is a simple web app that serves as the canonical source of machine information. These parameters can be used anywhere a normal variable can be used in Puppet manifests and templates. Some values are client specific such as what cobbler server a node looks to for dependencies what machines a particular apache will proxy what server should be considered it s upstream git repo. Often a parameter post bootstrap is changed when the machine is pointed at a different Puppetmaster or Cobbler server.

After successfully running the bootstrapping tool a Koan process will be started that is unless you specify config only . The installation can be watched the same way one watches any Xen guest. Once it is finished the guest is started back up to allow the bootstrapping firstboot script to run. This behaves exactly like the normal firstboot script on a Red Hat based system.

Those of ordinary skills in the art will recognize that Cobbler and Koan are described here solely for illustration. Other provisioning modules may be employed.

In accordance with another embodiment machines that already have an OS can be formed according to the presently describe architecture by following the same bootstrap process as described above without the provisioning process.

Configuration tier allows for a custom configuration of the provisioned machine. illustrates one embodiment of a configuration tier where Puppet and Git are used to configure a provisioned machine. Puppet is a configuration management tool that can be used to provide container and system configurations that can be deployed into production without modification. Puppet will also free system administrators from many manual steps and enable them to move to a review and release mode.

Git provide source code management. Git is a flexible distributed offline source management tool. It addresses some of the shortcomings of our previous solutions and provides support for parallel development collaboration and the ability to maintain a consistent deployable branch of the source tree. Git s use results in a smaller cleaner set of changes to source codes.

Those of ordinary skills in the art will recognize that Puppet and Git are solely for illustration purposes. Other types of configuration modules may be used.

Functional tier allows for further orchestration of the configuration of the machine. An orchestration module such as Everest tooling may be used to orchestrate the deployment of the machine via the tools and modules previously described with respect to each tier.

Provisioning server from herein referred to as a cobbler is responsible for serving as a extensible markup language remote procedure call XMLRPC handler linking to or minoring install distribution trees and a configuration database hosting kickstart templates and hosting plugins. Cobbler server may be implemented as software such as Python code installed on a boot server machine and providing a command line interface for configuration of the boot server. In addition cobbler server may make itself available as a Python application programming interface API for use by higher level management software not shown . Cobbler server supports provisioning via PXE virtualization and re provisioning. As will be described later the last two modes are performed with the assistance of a helper client .

Code repository is responsible for hosting distributions and . Code repository may be implemented using well known components of hardware and software.

Distributions and are bundles of software that are already compiled and configured. Distributions and may be in the form of either rpm deb tgz msi exe etc. formats. As Linux distributions distributions and are bundles of software that comprise the Linux kernel the non kernel parts of the operating system and assorted other software. Distributions and may take a variety of forms from fully featured desktop and server operating systems to minimal environments.

Installation templates are any data structure or processing element that can be combined with a set of installation configurations and processed to produce a resulting configuration file such as a kickstart file.

Exception plugins are software that interacts with cobbler server to customize the provisioning of software. In general exceptions plugins are intended to address infrequent customization needs.

Helper client known as koan which stands for kickstart over a network may assist cobbler server . Koan allows for both network provisioning of new virtualized guests and destructive provisioning of any existing system. When invoked koan requests profile information from a remote boot server that has been configured with cobbler server . In some embodiments what koan does with the profile data depends on whether it was invoked with virt or replace self.

In addition koan enables replacing running systems as well as installing virtualized profiles. Koan may also be pushed out to systems automatically from the boot server. In some embodiments helper client is also written in Python code to accommodate a variety of operating systems machine architectures etc.

Target machines represent the particular machines to which software provisioning is directed. Target machines may represent a wide variety of devices.

Although shows relatively few number of target machines the present invention is capable of managing a wide range environments such as datacenters with thousands of machines or server pools with just a few machines.

Provisioning database serves as a data storage location for holding data used by cobbler server . For example as shown provisioning database will typically comprise distribution tree list and template list .

Distribution tree list provides an inventory of distributions and that are hosted or mirrored by cobbler server . Template list provides an inventory of templates that are hosted by cobbler server .

In phase a user may use various commands of the present invention to specify distributions and install trees hosted by code repository such as a distribution from distributions or . A user may add or import a distribution or import it from installation media or an external network location.

In phase a user may map profiles to the distributions and map systems to the profiles using profile commands and systems commands of the present invention. As noted above a profile associates a distribution to additional specialized options such as a kickstart automation file. In cobbler server profiles are the unit of provisioning and at least one profile exists for every distribution to be provisioned. A profile might represent for instance a web server or desktop configuration.

Next a user may map systems to profiles using system commands of the present invention. In general systems commands assign a piece of hardware with cobbler server to a profile. Systems can be defined by hostname Internet Protocol IP address or MAC address. When available use of the MAC address to assign systems may be preferred.

In phase the user may map repositories and profiles using repository commands of the present invention. In general repository commands address configurations and tasks related to updating the software remote installation procedures and optionally customizing the software. These repository commands may also specify mirroring of the provisioned software. Repository mirroring allows cobbler server to mirror not only install trees and but also optional packages third party content and updates. Mirroring may be useful for faster more up to date installations and faster updates or providing software on restricted networks.

Cobbler server may also include other administrative features such as allowing the user to view their provisioning configuration or information tracking the status of a requested software installation. For example the cobbler sync can be used to repair or rebuild the contents tftpboot or var www cobbler when something has changed. The command brings the filesystem up to date with the configuration as understood by cobbler server . The cobbler sync function may be run whenever files in var www cobbler are manually edited or when making changes to kickstart files.

In phase cobbler server configures boot methods for the provisioning requested by the user. For example cobbler server may configure a PXE environment such as a network card BIOS. Alternatively cobbler server may compile and configure information for koan client . Cobbler server may also optionally configure DHCP and DNS configuration information.

In phase cobbler server serves the request of koan client . Koan client may acknowledge the service of information of cobbler server and then may initiate installation of the software being provisioned. Processing now flows to phase in which koan client may either install the requested software e.g. replace the existing operating system or install a virtual machine.

In one embodiment JBoss Enterprise SOA platform is used to provide loose coupling a messaging infrastructure process orchestration protocol translation adapters change management quality of service quality of protection encryption and security and management services. JBoss Seam provides our application framework unifying and integrating multiple web technologies while reducing complexity for our developers.

The exemplary computer system includes a processing device a main memory e.g. read only memory ROM flash memory dynamic random access memory DRAM such as synchronous DRAM SDRAM or Rambus DRAM RDRAM etc. a static memory e.g. flash memory static random access memory SRAM etc. and a data storage device which communicate with each other via a bus .

Processing device represents one or more general purpose processing devices such as a microprocessor central processing unit or the like. More particularly the processing device may be complex instruction set computing CISC microprocessor reduced instruction set computing RISC microprocessor very long instruction word VLIW microprocessor or processor implementing other instruction sets or processors implementing a combination of instruction sets. Processing device may also be one or more special purpose processing devices such as an application specific integrated circuit ASIC a field programmable gate array FPGA a digital signal processor DSP network processor or the like. The processing device is configured to execute the processing logic for performing the operations and steps discussed herein.

The computer system may further include a network interface device . The computer system also may include a video display unit e.g. a liquid crystal display LCD or a cathode ray tube CRT an alphanumeric input device e.g. a keyboard a cursor control device e.g. a mouse and a signal generation device e.g. a speaker .

The data storage device may include a machine accessible storage medium on which is stored one or more sets of instructions e.g. software embodying any one or more of the methodologies or functions described herein. The software may also reside completely or at least partially within the main memory and or within the processing device during execution thereof by the computer system the main memory and the processing device also constituting machine accessible storage media. The software may further be transmitted or received over a network via the network interface device .

The machine accessible storage medium may also be used to store the self contained repository and tools . The self contained repository and tools may also be stored in other sections of computer system such as static memory .

While the machine accessible storage medium is shown in an exemplary embodiment to be a single medium the term machine accessible storage medium should be taken to include a single medium or multiple media e.g. a centralized or distributed database and or associated caches and servers that store the one or more sets of instructions. The term machine accessible storage medium shall also be taken to include any medium that is capable of storing encoding or carrying a set of instructions for execution by the machine and that cause the machine to perform any one or more of the methodologies of the present invention. The term machine accessible storage medium shall accordingly be taken to include but not be limited to solid state memories optical and magnetic media and carrier wave signals.

In the description numerous details are set forth. It will be apparent however to one skilled in the art that the present invention may be practiced without these specific details. In some instances well known structures and devices are shown in block diagram form rather than in detail in order to avoid obscuring the present invention.

Some portions of the detailed descriptions which follow are presented in terms of algorithms and symbolic representations of operations on data bits within a computer memory. These algorithmic descriptions and representations are the means used by those skilled in the data processing arts to most effectively convey the substance of their work to others skilled in the art. An algorithm is here and generally conceived to be a self consistent sequence of steps leading to a desired result. The steps are those requiring physical manipulations of physical quantities. Usually though not necessarily these quantities take the form of electrical or magnetic signals capable of being stored transferred combined compared and otherwise manipulated. It has proven convenient at times principally for reasons of common usage to refer to these signals as bits values elements symbols characters terms numbers or the like.

It should be borne in mind however that all of these and similar terms are to be associated with the appropriate physical quantities and are merely convenient labels applied to these quantities. Unless specifically stated otherwise as apparent from the following discussion it is appreciated that throughout the description discussions utilizing terms such as processing or computing or calculating or determining or displaying or the like refer to the action and processes of a computer system or similar electronic computing device that manipulates and transforms data represented as physical electronic quantities within the computer system s registers and memories into other data similarly represented as physical quantities within the computer system memories or registers or other such information storage transmission or display devices.

The present invention also relates to apparatus for performing the operations herein. This apparatus may be specially constructed for the required purposes or it may comprise a general purpose computer selectively activated or reconfigured by a computer program stored in the computer. Such a computer program may be stored in a computer readable storage medium such as but is not limited to any type of disk including floppy disks optical disks CD ROMs and magnetic optical disks read only memories ROMs random access memories RAMs EPROMs EEPROMs magnetic or optical cards or any type of media suitable for storing electronic instructions and each coupled to a computer system bus.

The algorithms and displays presented herein are not inherently related to any particular computer or other apparatus. Various general purpose systems may be used with programs in accordance with the teachings herein or it may prove convenient to construct more specialized apparatus to perform the required method steps. The required structure for a variety of these systems will appear from the description below. In addition the present invention is not described with reference to any particular programming language. It will be appreciated that a variety of programming languages may be used to implement the teachings of the invention as described herein.

A machine accessible storage medium includes any mechanism for storing or transmitting information in a form readable by a machine e.g. a computer . For example a machine accessible storage medium includes read only memory ROM random access memory RAM magnetic disk storage media optical storage media flash memory devices electrical optical acoustical or other form of propagated signals e.g. carrier waves infrared signals digital signals etc. etc.

It is to be understood that the above description is intended to be illustrative and not restrictive. Many other embodiments will be apparent to those of skill in the art upon reading and understanding the above description. The scope of the invention should therefore be determined with reference to the appended claims along with the full scope of equivalents to which such claims are entitled.

